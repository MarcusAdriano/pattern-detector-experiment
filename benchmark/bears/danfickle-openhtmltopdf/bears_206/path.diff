--- a/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/PageBox.java
+++ b/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/PageBox.java
@@ -304,10 +304,10 @@ public class PageBox {
         }
         
         if (dir == IdentValue.LTR) { 
-            return (x > 0 ? ((int) (fx / fw)) : 0);
+            return (int) (x > 0 ? (Math.ceil(fx / fw) - 1) : 0);
         }
         
-        return (x < 0 ? ((int) (Math.abs(fx) / fw)) : 0);
+        return (int) (x < 0 ? (Math.ceil(Math.abs(fx) / fw)) : 0);
     }
     
     /**
diff --git a/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/PagedBoxCollector.java b/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/PagedBoxCollector.java
index c790942e8..6d638f73b 100644
--- a/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/PagedBoxCollector.java
+++ b/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/PagedBoxCollector.java
@@ -9,6 +9,7 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import com.openhtmltopdf.css.constants.IdentValue;
 import com.openhtmltopdf.css.style.CssContext;
 import com.openhtmltopdf.layout.Layer;
 import com.openhtmltopdf.layout.PaintingInfo;
@@ -613,9 +614,16 @@ public class PagedBoxCollector {
         
         AffineTransform ctm = container.getContainingLayer().getCurrentTransformMatrix();
         Rectangle bounds = container.getBorderBox(c);
-        // TODO: RTL overflow.
-        int maxX = (int) (ctm == null ? bounds.getMaxX() : getMaxXFromTransformedBox(bounds, ctm));
-        int maxShadowPages = basePageBox.getMaxShadowPagesForXPos(c, maxX);
+        FourPoint corners = ctm == null ? null : getCornersFromTransformedBounds(bounds, ctm);
+
+        int maxShadowPages;
+        if (basePageBox.getCutOffPageDirection() == IdentValue.LTR) { 
+            int maxX = (int) (ctm == null ? bounds.getMaxX() : getMaxX(corners));
+            maxShadowPages = Math.min(basePageBox.getMaxInsertedPages(), basePageBox.getMaxShadowPagesForXPos(c, maxX));
+        } else {
+            int minX = (int) (ctm == null ? bounds.getMinX() : getMinX(corners));
+            maxShadowPages = Math.min(basePageBox.getMaxInsertedPages(), basePageBox.getMaxShadowPagesForXPos(c, minX));
+        }
         
         for (int i = 0; i < maxShadowPages; i++) {
             Rectangle shadowPageClip = pageResult.getShadowWindowOnDocument(basePageBox, c, i);
diff --git a/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/TransformCreator.java b/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/TransformCreator.java
index d73d0079c..47c5aa38f 100644
--- a/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/TransformCreator.java
+++ b/openhtmltopdf-core/src/main/java/com/openhtmltopdf/render/displaylist/TransformCreator.java
@@ -103,11 +103,7 @@ public class TransformCreator {
 	    
 	    Rectangle shadow = page.getDocumentCoordinatesContentBoundsForInsertedPage(c, shadowPageNumber);
 	    
-	    if (page.getCutOffPageDirection() == IdentValue.LTR) { 
-	        return absTranslateX - (float) shadow.getMinX() + (page.getMarginBorderPadding(c, CalculatedStyle.LEFT) * (shadowPageNumber + 1));
-	    } else {
-	        return absTranslateX - (float) shadow.getMinX() + (page.getMarginBorderPadding(c, CalculatedStyle.RIGHT) * (shadowPageNumber + 1));
-	    }
+	    return absTranslateX - (float) shadow.getMinX() + (page.getMarginBorderPadding(c, CalculatedStyle.LEFT));
 	}
 	
 	/**
