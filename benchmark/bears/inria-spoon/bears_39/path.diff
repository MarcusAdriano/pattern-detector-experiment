--- a/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java
+++ b/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java
@@ -17,7 +17,10 @@
 package spoon.reflect.visitor.filter;
 
 import spoon.reflect.code.CtLocalVariable;
+import spoon.reflect.declaration.CtElement;
+import spoon.reflect.declaration.CtType;
 import spoon.reflect.reference.CtLocalVariableReference;
+import spoon.reflect.visitor.Filter;
 import spoon.reflect.visitor.chain.CtConsumableFunction;
 import spoon.reflect.visitor.chain.CtConsumer;
 
@@ -40,10 +43,35 @@ public class LocalVariableReferenceFunction implements CtConsumableFunction<CtLo
 	}
 
 	@Override
-	public void apply(CtLocalVariable<?> localVariable, CtConsumer<Object> outputConsumer) {
+	public void apply(final CtLocalVariable<?> localVariable, CtConsumer<Object> outputConsumer) {
+		final String simpleName = localVariable.getSimpleName();
+		class Context {
+			boolean hasLocalType = false;
+		}
+		final Context context = new Context();
 		localVariable
 			.map(new LocalVariableScopeFunction())
-			.select(new DirectReferenceFilter<CtLocalVariableReference<?>>(localVariable.getReference()))
+			.select(new Filter<CtElement>() {
+				@Override
+				public boolean matches(CtElement element) {
+					if (element instanceof CtType) {
+						context.hasLocalType = true;
+					} else if (element instanceof CtLocalVariableReference<?>) {
+						CtLocalVariableReference<?> localVarRef = (CtLocalVariableReference<?>) element;
+						if (simpleName.equals(localVarRef.getSimpleName())) {
+							//we have found a variable reference in visibility scope of localVariable
+							if (context.hasLocalType) {
+								//there exists a local type in visibility scope of this variable declaration
+								//the variable declarations in scope of this local class may shadow input localVariable
+								//so finally check that there is no other localVariable, which shadows the input localVariable
+								return localVariable == localVarRef.getDeclaration();
+							}
+							return true;
+						}
+					}
+					return false;
+				}
+			})
 			.forEach(outputConsumer);
 	}
 }
diff --git a/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java b/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java
index f72fab4b8..1c2cfc8d3 100644
--- a/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java
+++ b/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java
@@ -16,15 +16,9 @@
  */
 package spoon.reflect.visitor.filter;
 
-import java.util.List;
-
-import spoon.SpoonException;
 import spoon.reflect.code.CtLocalVariable;
-import spoon.reflect.code.CtStatement;
-import spoon.reflect.code.CtStatementList;
 import spoon.reflect.visitor.chain.CtConsumableFunction;
 import spoon.reflect.visitor.chain.CtConsumer;
-import spoon.reflect.visitor.chain.CtQuery;
 
 /**
  * This Query expects a {@link CtLocalVariable} as input
@@ -50,22 +44,6 @@ public class LocalVariableScopeFunction implements CtConsumableFunction<CtLocalV
 
 	@Override
 	public void apply(CtLocalVariable<?> localVariable, CtConsumer<Object> outputConsumer) {
-		CtStatementList statements = localVariable.getParent(CtStatementList.class);
-		if (statements == null) {
-			//cannot search for variable references of variable which has no parent statement list/block
-			return;
-		}
-		//create query which will be evaluated on each statement after local variable declaration
-		CtQuery query = localVariable.getFactory().createQuery().filterChildren(null);
-		List<CtStatement> stats = statements.getStatements();
-		//search for variable declaration in statements of current block
-		int idxOfVar = stats.indexOf(localVariable);
-		if (idxOfVar < 0) {
-			throw new SpoonException("Cannot found index of local variable declaration " + localVariable + " in statement list " + statements);
-		}
-		//scan only all elements AFTER this variable declaration
-		for (int i = idxOfVar + 1; i < stats.size(); i++) {
-			query.setInput(stats.get(i)).forEach(outputConsumer);
-		}
+		localVariable.map(new SiblingsFunction().mode(SiblingsFunction.Mode.NEXT).includingSelf(true)).filterChildren(null).forEach(outputConsumer);
 	}
 }
diff --git a/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java b/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java
new file mode 100644
index 000000000..12d93e40a
--- /dev/null
+++ b/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java
@@ -0,0 +1,112 @@
+/**
+ * Copyright (C) 2006-2017 INRIA and contributors
+ * Spoon - http://spoon.gforge.inria.fr/
+ *
+ * This software is governed by the CeCILL-C License under French law and
+ * abiding by the rules of distribution of free software. You can use, modify
+ * and/or redistribute the software under the terms of the CeCILL-C license as
+ * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL-C license and that you accept its terms.
+ */
+package spoon.reflect.visitor.filter;
+
+import java.util.Collection;
+
+import spoon.reflect.code.CtBodyHolder;
+import spoon.reflect.code.CtCatch;
+import spoon.reflect.code.CtStatementList;
+import spoon.reflect.declaration.CtElement;
+import spoon.reflect.declaration.CtExecutable;
+import spoon.reflect.declaration.CtField;
+import spoon.reflect.declaration.CtPackage;
+import spoon.reflect.declaration.CtParameter;
+import spoon.reflect.declaration.CtType;
+import spoon.reflect.reference.CtFieldReference;
+import spoon.reflect.reference.CtVariableReference;
+import spoon.reflect.visitor.chain.CtConsumableFunction;
+import spoon.reflect.visitor.chain.CtConsumer;
+import spoon.reflect.visitor.chain.CtQuery;
+
+/**
+ * This Query expects a {@link CtVariableReference}, which represents reference to an variable, as input
+ * and returns all {@link CtElement} instances, which might be a declaration of that variable reference
+ * <br>
+ * In other words, it returns all elements,
+ * which might be declaration of input variable reference.
+ * <br>
+ * It returns {@link CtParameter} instances from methods, lambdas and catch blocks.
+ * It returns {@link CtField} instances from wrapping classes and their super classes too.
+ * <br>
+ * The elements are visited in defined order. First are elements from nearest parent blocks,
+ * then fields of wrapping classes, then fields of super classes, etc.
+ * <br>
+ * It can be used to search for variable declarations of
+ * variable references and for detection of variable name conflicts
+ * <br>
+ * Usage:<br>
+ * <pre> {@code
+ * CtVariableReference varRef = ...;
+ * varRef.map(new PotentialVariableDeclarationFunction()).forEach(...process result...);
+ * }
+ * </pre>
+ */
+public class PotentialVariableDeclarationFunction implements CtConsumableFunction<CtElement> {
+
+	private boolean includingFields = true;
+
+	public PotentialVariableDeclarationFunction() {
+	}
+
+	@Override
+	public void apply(CtElement input, CtConsumer<Object> outputConsumer) {
+		//Search previous siblings for element which may represents the declaration of this local variable
+		CtQuery siblingsQuery = input.getFactory().createQuery().map(new SiblingsFunction().mode(SiblingsFunction.Mode.PREVIOUS));
+
+		CtElement scopeElement = input;
+		//Search input and then all parents until first CtPackage for element which may represents the declaration of this local variable
+		while (scopeElement != null && !(scopeElement instanceof CtPackage)) {
+			CtElement parent = scopeElement.getParent();
+			if (parent instanceof CtType<?>) {
+				if (includingFields) {
+					//TODO replace getAllFields() followed by getFieldDeclaration, by direct visiting of fields of types in super classes.
+					Collection<CtFieldReference<?>> allFields = ((CtType<?>) parent).getAllFields();
+					for (CtFieldReference<?> fieldReference : allFields) {
+						outputConsumer.accept(fieldReference.getFieldDeclaration());
+					}
+				}
+			} else if (parent instanceof CtBodyHolder || parent instanceof CtStatementList) {
+				//visit all previous siblings of scopeElement element in parent BodyHolder or Statement list
+				siblingsQuery.setInput(scopeElement).forEach(outputConsumer);
+				//visit parameters of CtCatch and CtExecutable (method, lambda)
+				if (parent instanceof CtCatch) {
+					CtCatch ctCatch = (CtCatch) parent;
+					outputConsumer.accept(ctCatch.getParameter());
+				} else if (parent instanceof CtExecutable) {
+					CtExecutable<?> exec = (CtExecutable<?>) parent;
+					for (CtParameter<?> param : exec.getParameters()) {
+						outputConsumer.accept(param);
+					}
+				}
+			}
+			scopeElement = parent;
+		}
+	}
+
+	public boolean isIncludingFields() {
+		return includingFields;
+	}
+
+	/**
+	 * @param includingFields if true then CtFields of wrapping class and all super classes are returned too
+	 */
+	public PotentialVariableDeclarationFunction includingFields(boolean includingFields) {
+		this.includingFields = includingFields;
+		return this;
+	}
+}
diff --git a/src/main/java/spoon/reflect/visitor/filter/SiblingsFunction.java b/src/main/java/spoon/reflect/visitor/filter/SiblingsFunction.java
new file mode 100644
index 000000000..50752460a
--- /dev/null
+++ b/src/main/java/spoon/reflect/visitor/filter/SiblingsFunction.java
@@ -0,0 +1,90 @@
+/**
+ * Copyright (C) 2006-2017 INRIA and contributors
+ * Spoon - http://spoon.gforge.inria.fr/
+ *
+ * This software is governed by the CeCILL-C License under French law and
+ * abiding by the rules of distribution of free software. You can use, modify
+ * and/or redistribute the software under the terms of the CeCILL-C license as
+ * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL-C license and that you accept its terms.
+ */
+package spoon.reflect.visitor.filter;
+
+import spoon.reflect.declaration.CtElement;
+import spoon.reflect.visitor.CtScanner;
+import spoon.reflect.visitor.chain.CtConsumableFunction;
+import spoon.reflect.visitor.chain.CtConsumer;
+
+/**
+ * visits siblings of input element.
+ * The sibling is the element whose sibling.getParent()==input.getParent()
+ * <br>
+ * The siblings are visited in order in which they would be visited by CtScanner.
+ * The input element is by default not visited. But if {@link #includingSelf(boolean)} is called with value true,
+ * then input element is visited too in the order in which CtScanner would visit it.
+ *
+ *  The visiting order is relevant, because this scanner is used for example resolve local variable declarations.
+ */
+public class SiblingsFunction implements CtConsumableFunction<CtElement> {
+
+	/**
+	 * Defines visiting mode
+	 */
+	public enum Mode {
+		ALL,	//all siblings are visited
+		PREVIOUS, //only previous siblings of input element
+		NEXT	//only next siblings of input element
+	}
+
+	private Mode mode = Mode.ALL;
+	private boolean includingSelf = false;
+
+	public SiblingsFunction() {
+	}
+
+	/**
+	 * @param includingSelf if false then input element is not visited
+	 */
+	public SiblingsFunction includingSelf(boolean includingSelf) {
+		this.includingSelf = includingSelf;
+		return this;
+	}
+
+	/**
+	 * @param mode defines which siblings will be visited. See {@link Mode} for possible values
+	 */
+	public SiblingsFunction mode(Mode mode) {
+		this.mode = mode;
+		return this;
+	}
+
+	@Override
+	public void apply(final CtElement input, final CtConsumer<Object> outputConsumer) {
+		final CtElement parent = input.getParent();
+		parent.accept(new CtScanner() {
+			boolean hasVisitedInput = false;
+			boolean visitPrev = mode == Mode.ALL || mode == Mode.PREVIOUS;
+			boolean visitNext = mode == Mode.ALL || mode == Mode.NEXT;
+			@Override
+			public void scan(CtElement element) {
+				if (element != null && element.getParent() == parent) {
+					//visit only elements whose parent is same
+					boolean canVisit = hasVisitedInput ? visitNext : visitPrev;
+					if (input == element) {
+						hasVisitedInput = true;
+						canVisit = includingSelf;
+					}
+					if (canVisit) {
+						outputConsumer.accept(element);
+					}
+				}
+			}
+		});
+	}
+}
diff --git a/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java
index 6711d3383..3bd525901 100644
--- a/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java
@@ -17,15 +17,13 @@
 package spoon.support.reflect.reference;
 
 import spoon.reflect.code.CtLocalVariable;
-import spoon.reflect.declaration.CtElement;
-import spoon.reflect.declaration.CtPackage;
+import spoon.reflect.declaration.CtVariable;
 import spoon.reflect.declaration.ParentNotInitializedException;
 import spoon.reflect.factory.Factory;
 import spoon.reflect.reference.CtLocalVariableReference;
 import spoon.reflect.visitor.CtVisitor;
-import spoon.reflect.visitor.filter.AbstractFilter;
-
-import java.util.List;
+import spoon.reflect.visitor.Filter;
+import spoon.reflect.visitor.filter.PotentialVariableDeclarationFunction;
 
 /**
  * An implementation for {@link CtLocalVariableReference}.
@@ -50,6 +48,7 @@ public class CtLocalVariableReferenceImpl<T>
 		visitor.visitCtLocalVariableReference(this);
 	}
 
+	@SuppressWarnings("unchecked")
 	@Override
 	public CtLocalVariable<T> getDeclaration() {
 		// without a factory, we are not able to filter for local variables
@@ -57,30 +56,35 @@ public class CtLocalVariableReferenceImpl<T>
 		if (factory == null) {
 			return null;
 		}
-		final SimpleNameFilter filter = new SimpleNameFilter();
 
-		// successively iterate through all parents of this reference and
-		// return first result (which must be the closest declaration
-		// respecting visible scope)
+		final String simpleName = getSimpleName();
+
+		//handle the CtLocalVariableReference which were created by CtLocalVariable#getReference() and which are not yet part of model, so we cannot found them using standard rules
+		if (parent instanceof CtLocalVariable) {
+			CtLocalVariable<T> var = (CtLocalVariable<T>) parent;
+			if (simpleName.equals(var.getSimpleName())) {
+				return var;
+			}
+		}
 		try {
-			CtElement parent = getParent();
-			// stop at `package` level to avoid lookups to foreign Java files
-			while (parent != null && !(parent instanceof CtPackage)) {
-				final List<CtLocalVariable<T>> localVariables =
-						parent.getElements(filter);
-				// since `parent` may be a class declaring multiple local
-				// variables with same name in different methods, we have to
-				// check if any of the findings is visible in current scope by
-				// validating that the parent of a finding is parent of this
-				// reference as well
-				for (final CtLocalVariable<T> lv : localVariables) {
-					if (getParent().equals(lv) || hasParent(lv.getParent())) {
-						return lv;
-					}
+			// successively iterate through all parents of this reference and
+			// return first result (which must be the closest declaration
+			// respecting visible scope)
+			CtVariable<?> var = map(new PotentialVariableDeclarationFunction()).select(new Filter<CtVariable<?>>() {
+				@Override
+				public boolean matches(CtVariable<?> var) {
+					return simpleName.equals(var.getSimpleName());
 				}
-				parent = parent.getParent();
+			}).first();
+			if (var instanceof CtLocalVariable) {
+				return (CtLocalVariable<T>) var;
 			}
-		} catch (final ParentNotInitializedException e) {
+			if (var != null) {
+				//we have found another variable declaration with same simple name, which hides declaration of this local variable reference
+				//handle it as not found
+				return null;
+			}
+		} catch (ParentNotInitializedException e) {
 			// handle this case as 'not found'
 		}
 		return null;
@@ -90,22 +94,4 @@ public class CtLocalVariableReferenceImpl<T>
 	public CtLocalVariableReference<T> clone() {
 		return (CtLocalVariableReference<T>) super.clone();
 	}
-
-	/**
-	 * A {@link spoon.reflect.visitor.Filter} that filters all
-	 * {@link CtLocalVariable}s with simple name equals to
-	 * {@link #getSimpleName()}.
-	 */
-	private final class SimpleNameFilter
-			extends AbstractFilter<CtLocalVariable<T>> {
-
-		SimpleNameFilter() {
-			super();
-		}
-
-		@Override
-		public boolean matches(final CtLocalVariable<T> element) {
-			return element.getSimpleName().equals(getSimpleName());
-		}
-	}
 }
