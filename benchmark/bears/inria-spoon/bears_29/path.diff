--- a/src/main/java/spoon/reflect/factory/ExecutableFactory.java
+++ b/src/main/java/spoon/reflect/factory/ExecutableFactory.java
@@ -114,6 +114,7 @@ public class ExecutableFactory extends SubFactory {
 		} else if (e instanceof CtAnonymousExecutable) {
 			return createReference(((CtAnonymousExecutable) e).getDeclaringType().getReference(), e.getType().clone(), executableName);
 		}
+		// constructor
 		return createReference(((CtConstructor<T>) e).getDeclaringType().getReference(), ((CtConstructor<T>) e).getType().clone(), CtExecutableReference.CONSTRUCTOR_NAME, refs);
 	}
 
diff --git a/src/main/java/spoon/support/compiler/jdt/ParentExiter.java b/src/main/java/spoon/support/compiler/jdt/ParentExiter.java
index 51bbfa304..f7fa778c0 100644
--- a/src/main/java/spoon/support/compiler/jdt/ParentExiter.java
+++ b/src/main/java/spoon/support/compiler/jdt/ParentExiter.java
@@ -721,9 +721,7 @@ public class ParentExiter extends CtInheritanceScanner {
 	private <T> boolean hasChildEqualsToType(CtConstructorCall<T> ctConstructorCall) {
 		final AllocationExpression parent = (AllocationExpression) jdtTreeBuilder.getContextBuilder().stack.peek().node;
 		// Type is equals to the jdt child.
-		return parent.type != null && parent.type.equals(childJDT)
-				// Type not yet initialized.
-				&& !((CtTypeAccess) child).getAccessedType().equals(ctConstructorCall.getExecutable().getType());
+		return parent.type != null && parent.type.equals(childJDT);
 	}
 
 	@Override
diff --git a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
index f873b1f94..a8c820834 100644
--- a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
+++ b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
@@ -338,11 +338,14 @@ public class ReferenceBuilder {
 		if (exec == null) {
 			return null;
 		}
-
 		final CtExecutableReference ref = this.jdtTreeBuilder.getFactory().Core().createExecutableReference();
-		ref.setSimpleName(new String(exec.selector));
-		ref.setType(getTypeReference(exec.returnType));
-
+		if (exec.isConstructor()) {
+			ref.setSimpleName(CtExecutableReference.CONSTRUCTOR_NAME);
+			ref.setType(getTypeReference(exec.declaringClass));
+		} else {
+			ref.setSimpleName(new String(exec.selector));
+			ref.setType(getTypeReference(exec.returnType));
+		}
 		if (exec instanceof ProblemMethodBinding) {
 			if (exec.declaringClass != null && Arrays.asList(exec.declaringClass.methods()).contains(exec)) {
 				ref.setDeclaringType(getTypeReference(exec.declaringClass));
