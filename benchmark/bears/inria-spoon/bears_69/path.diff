--- a/src/main/java/spoon/reflect/annotations/MetamodelPropertyField.java
+++ b/src/main/java/spoon/reflect/annotations/MetamodelPropertyField.java
@@ -33,5 +33,5 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.FIELD })
 public @interface MetamodelPropertyField {
-	CtRole role();
+	CtRole[] role();
 }
diff --git a/src/main/java/spoon/reflect/code/CtCase.java b/src/main/java/spoon/reflect/code/CtCase.java
index 5a92571cf..c0de36932 100644
--- a/src/main/java/spoon/reflect/code/CtCase.java
+++ b/src/main/java/spoon/reflect/code/CtCase.java
@@ -19,8 +19,7 @@ package spoon.reflect.code;
 import spoon.reflect.annotations.PropertyGetter;
 import spoon.reflect.annotations.PropertySetter;
 
-import static spoon.reflect.path.CtRole.CASE;
-
+import static spoon.reflect.path.CtRole.EXPRESSION;
 
 /**
  * This code element defines a case within a switch-case.
@@ -40,13 +39,13 @@ public interface CtCase<S> extends CtStatement, CtStatementList {
 	/**
 	 * Gets the case expression.
 	 */
-	@PropertyGetter(role = CASE)
+	@PropertyGetter(role = EXPRESSION)
 	CtExpression<S> getCaseExpression();
 
 	/**
 	 * Sets the case expression.
 	 */
-	@PropertySetter(role = CASE)
+	@PropertySetter(role = EXPRESSION)
 	<T extends CtCase<S>> T setCaseExpression(CtExpression<S> caseExpression);
 
 	@Override
diff --git a/src/main/java/spoon/reflect/code/CtCatch.java b/src/main/java/spoon/reflect/code/CtCatch.java
index c7dd808be..6436d2806 100644
--- a/src/main/java/spoon/reflect/code/CtCatch.java
+++ b/src/main/java/spoon/reflect/code/CtCatch.java
@@ -46,7 +46,7 @@ public interface CtCatch extends CtCodeElement, CtBodyHolder {
 	 * Gets the catch's body.
 	 */
 	@Override
-	@PropertySetter(role = BODY)
+	@PropertyGetter(role = BODY)
 	CtBlock<?> getBody();
 
 	@Override
diff --git a/src/main/java/spoon/reflect/code/CtConstructorCall.java b/src/main/java/spoon/reflect/code/CtConstructorCall.java
index 4771ef3d8..f375817e3 100644
--- a/src/main/java/spoon/reflect/code/CtConstructorCall.java
+++ b/src/main/java/spoon/reflect/code/CtConstructorCall.java
@@ -75,6 +75,6 @@ public interface CtConstructorCall<T> extends CtTargetedExpression<T, CtExpressi
 
 	@Override
 	@DerivedProperty
-	@PropertySetter(role = TYPE)
+	@PropertyGetter(role = TYPE)
 	CtTypeReference<T> getType();
 }
diff --git a/src/main/java/spoon/reflect/code/CtNewClass.java b/src/main/java/spoon/reflect/code/CtNewClass.java
index fb53fd0d1..2b5141c31 100644
--- a/src/main/java/spoon/reflect/code/CtNewClass.java
+++ b/src/main/java/spoon/reflect/code/CtNewClass.java
@@ -16,17 +16,17 @@
  */
 package spoon.reflect.code;
 
+import spoon.reflect.annotations.PropertyGetter;
+import spoon.reflect.annotations.PropertySetter;
 import spoon.reflect.declaration.CtClass;
 import spoon.reflect.reference.CtActualTypeContainer;
 import spoon.reflect.reference.CtExecutableReference;
 import spoon.reflect.reference.CtTypeReference;
 import spoon.support.DerivedProperty;
-import spoon.reflect.annotations.PropertyGetter;
-import spoon.reflect.annotations.PropertySetter;
 
 import java.util.List;
 
-import static spoon.reflect.path.CtRole.EXPRESSION;
+import static spoon.reflect.path.CtRole.NESTED_TYPE;
 import static spoon.reflect.path.CtRole.TYPE_PARAMETER;
 
 /**
@@ -77,13 +77,13 @@ public interface CtNewClass<T> extends CtConstructorCall<T> {
 	/**
 	 * Gets the created class.
 	 */
-	@PropertyGetter(role = EXPRESSION)
+	@PropertyGetter(role = NESTED_TYPE)
 	CtClass<?> getAnonymousClass();
 
 	/**
 	 * Sets the created class.
 	 */
-	@PropertySetter(role = EXPRESSION)
+	@PropertySetter(role = NESTED_TYPE)
 	<N extends CtNewClass> N setAnonymousClass(CtClass<?> anonymousClass);
 
 	@Override
diff --git a/src/main/java/spoon/reflect/declaration/CtCodeSnippet.java b/src/main/java/spoon/reflect/declaration/CtCodeSnippet.java
index bada4f297..5745164a4 100644
--- a/src/main/java/spoon/reflect/declaration/CtCodeSnippet.java
+++ b/src/main/java/spoon/reflect/declaration/CtCodeSnippet.java
@@ -36,13 +36,13 @@ public interface CtCodeSnippet {
 	/**
 	 * Sets the textual value of the code.
 	 */
-	@PropertyGetter(role = EXPRESSION)
+	@PropertySetter(role = EXPRESSION)
 	<C extends CtCodeSnippet> C setValue(String value);
 
 	/**
 	 * Gets the textual value of the code.
 	 */
-	@PropertySetter(role = EXPRESSION)
+	@PropertyGetter(role = EXPRESSION)
 	String getValue();
 
 }
diff --git a/src/main/java/spoon/reflect/declaration/CtModifiable.java b/src/main/java/spoon/reflect/declaration/CtModifiable.java
index 9053509b7..f7bb50501 100644
--- a/src/main/java/spoon/reflect/declaration/CtModifiable.java
+++ b/src/main/java/spoon/reflect/declaration/CtModifiable.java
@@ -18,6 +18,7 @@ package spoon.reflect.declaration;
 
 import spoon.reflect.annotations.PropertyGetter;
 import spoon.reflect.annotations.PropertySetter;
+import spoon.support.DerivedProperty;
 
 import java.util.Set;
 
@@ -80,6 +81,6 @@ public interface CtModifiable extends CtElement {
 	/**
 	 * Gets the visibility of this modifiable element.
 	 */
-	@PropertyGetter(role = MODIFIER)
+	@DerivedProperty
 	ModifierKind getVisibility();
 }
diff --git a/src/main/java/spoon/support/reflect/code/CtCaseImpl.java b/src/main/java/spoon/support/reflect/code/CtCaseImpl.java
index a90388099..534d6c80b 100644
--- a/src/main/java/spoon/support/reflect/code/CtCaseImpl.java
+++ b/src/main/java/spoon/support/reflect/code/CtCaseImpl.java
@@ -34,7 +34,7 @@ import static spoon.reflect.ModelElementContainerDefaultCapacities.CASE_STATEMEN
 public class CtCaseImpl<E> extends CtStatementImpl implements CtCase<E> {
 	private static final long serialVersionUID = 1L;
 
-	@MetamodelPropertyField(role = CtRole.CASE)
+	@MetamodelPropertyField(role = CtRole.EXPRESSION)
 	CtExpression<E> caseExpression;
 
 	@MetamodelPropertyField(role = CtRole.STATEMENT)
diff --git a/src/main/java/spoon/support/reflect/code/CtNewClassImpl.java b/src/main/java/spoon/support/reflect/code/CtNewClassImpl.java
index c51463989..d2fd19137 100644
--- a/src/main/java/spoon/support/reflect/code/CtNewClassImpl.java
+++ b/src/main/java/spoon/support/reflect/code/CtNewClassImpl.java
@@ -25,7 +25,7 @@ import spoon.reflect.annotations.MetamodelPropertyField;
 public class CtNewClassImpl<T> extends CtConstructorCallImpl<T> implements CtNewClass<T> {
 	private static final long serialVersionUID = 1L;
 
-	@MetamodelPropertyField(role = CtRole.EXPRESSION)
+	@MetamodelPropertyField(role = CtRole.NESTED_TYPE)
 	CtClass<?> anonymousClass;
 
 	@Override
diff --git a/src/main/java/spoon/support/reflect/declaration/CtTypeImpl.java b/src/main/java/spoon/support/reflect/declaration/CtTypeImpl.java
index b93915f3a..70011464c 100644
--- a/src/main/java/spoon/support/reflect/declaration/CtTypeImpl.java
+++ b/src/main/java/spoon/support/reflect/declaration/CtTypeImpl.java
@@ -82,7 +82,7 @@ public abstract class CtTypeImpl<T> extends CtNamedElementImpl implements CtType
 	@MetamodelPropertyField(role = CtRole.MODIFIER)
 	Set<ModifierKind> modifiers = emptySet();
 
-	@MetamodelPropertyField(role = CtRole.FIELD)
+	@MetamodelPropertyField(role = {CtRole.FIELD, CtRole.EXECUTABLE, CtRole.NESTED_TYPE})
 	List<CtTypeMember> typeMembers = emptyList();
 
 	public CtTypeImpl() {
