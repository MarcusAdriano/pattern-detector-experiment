--- a/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java
+++ b/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java
@@ -73,6 +73,7 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 	protected CtTypeReference<?> targetType;
 	private Map<String, Boolean> namesPresentInJavaLang = new HashMap<>();
 	private Set<String> fieldAndMethodsNames = new HashSet<String>();
+	private Set<CtTypeReference> exploredReferences = new HashSet<>(); // list of explored references
 
 	@Override
 	public <T> void visitCtFieldRead(CtFieldRead<T> fieldRead) {
@@ -248,10 +249,20 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 		}
 	}
 
+	private boolean isThereAnotherClassWithSameNameInAnotherPackage(CtTypeReference<?> ref) {
+		for (CtTypeReference typeref : this.exploredReferences) {
+			if (typeref.getSimpleName().equals(ref.getSimpleName()) && !typeref.getQualifiedName().equals(ref.getQualifiedName())) {
+				return true;
+			}
+		}
+		return false;
+	}
+
 	/**
 	 * Adds a type to the classImports.
 	 */
 	protected boolean addClassImport(CtTypeReference<?> ref) {
+		this.exploredReferences.add(ref);
 		if (ref == null) {
 			return false;
 		}
@@ -279,6 +290,10 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 			return false;
 		}
 
+		if (this.isThereAnotherClassWithSameNameInAnotherPackage(ref)) {
+			return false;
+		}
+
 		// we want to be sure that we are not importing a class because a static field or method we already imported
 		// moreover we make exception for same package classes to avoid problems in FQN mode
 
@@ -346,8 +361,7 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 				}
 			}
 		}
-		//note: we must add the type refs from the same package too, to assure that isImported(typeRef) returns true for them
-		//these type refs are removed in #getClassImports()
+
 		classImports.put(ref.getSimpleName(), ref);
 		return true;
 	}
