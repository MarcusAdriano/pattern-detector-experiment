diff --git a/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java b/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java
index 35d3be3..dfa2181 100644
--- a/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java
+++ b/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java
@@ -26,9 +26,11 @@
 import org.apache.wicket.util.lang.Objects;
 import org.apache.wicket.util.lang.WicketObjects;
 import org.apache.wicket.util.string.Strings;
+import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryUtils;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 import org.springframework.beans.factory.support.AbstractBeanDefinition;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.support.AbstractApplicationContext;
@@ -120,14 +122,17 @@ private final String getBeanNameOfClass(final ApplicationContext ctx, final Clas
 		while (it.hasNext())
 		{
 			final String possibility = it.next();
-			BeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()
-					.getBeanDefinition(possibility);
+			if (ctx instanceof AbstractApplicationContext)
+			{
+				BeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)
+						.getBeanFactory(), possibility);
 				if (BeanFactoryUtils.isFactoryDereference(possibility) ||
 						possibility.startsWith("scopedTarget.") || !beanDef.isAutowireCandidate())
 				{
 					it.remove();
 				}
 			}
+		}
 
 		if (names.isEmpty())
 		{
@@ -137,18 +142,23 @@ else if (names.size() > 1)
 		{
 			if (ctx instanceof AbstractApplicationContext)
 			{
+				List<String> primaries = new ArrayList<String>();
 				for (String name : names)
 				{
-					BeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()
-							.getBeanDefinition(name);
+					BeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)
+							.getBeanFactory(), name);
 					if (beanDef instanceof AbstractBeanDefinition)
 					{
 						if (((AbstractBeanDefinition)beanDef).isPrimary())
 						{
-							return name;
+							primaries.add(name);
 						}
 					}
 				}
+				if (primaries.size() == 1)
+				{
+					return primaries.get(0);
+				}
 			}
 
 			StringBuilder msg = new StringBuilder();
@@ -166,6 +176,28 @@ else if (names.size() > 1)
 		}
 	}
 
+	private BeanDefinition getBeanDefinition(ConfigurableListableBeanFactory beanFactory,
+			String name)
+	{
+		if (beanFactory.containsBeanDefinition(name))
+		{
+			return beanFactory.getBeanDefinition(name);
+		}
+		else
+		{
+			BeanFactory parent = beanFactory.getParentBeanFactory();
+			if (parent != null && parent instanceof ConfigurableListableBeanFactory)
+			{
+				return getBeanDefinition(beanFactory, name);
+			}
+			else
+			{
+				return null;
+			}
+		}
+	}
+
+
 	/**
 	 * @return returns whether the bean (the locator is supposed to istantiate) is a singleton or
 	 *         not
diff --git a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java
index 5cf9d0e..6b36295 100644
--- a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java
+++ b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java
@@ -29,8 +29,10 @@
 import org.apache.wicket.spring.SpringBeanLocator;
 import org.apache.wicket.util.lang.Generics;
 import org.apache.wicket.util.string.Strings;
+import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryUtils;
 import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 import org.springframework.beans.factory.support.AbstractBeanDefinition;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.support.AbstractApplicationContext;
@@ -187,14 +189,17 @@ private final String getBeanNameOfClass(ApplicationContext ctx, Class< ? > clazz
 		while (it.hasNext())
 		{
 			final String possibility = it.next();
-			BeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()
-					.getBeanDefinition(possibility);
+			if (ctx instanceof AbstractApplicationContext)
+			{
+				BeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)
+						.getBeanFactory(), possibility);
 				if (BeanFactoryUtils.isFactoryDereference(possibility) ||
 						possibility.startsWith("scopedTarget.") || !beanDef.isAutowireCandidate())
 				{
 					it.remove();
 				}
 			}
+		}
 
 		if (names.isEmpty())
 		{
@@ -204,17 +209,22 @@ else if (names.size() > 1)
 		{
 			if (ctx instanceof AbstractApplicationContext)
 			{
+				List<String> primaries = new ArrayList<String>();
 				for (String name : names)
 				{
-					BeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()
-							.getBeanDefinition(name);
+					BeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)
+							.getBeanFactory(), name);
 					if (beanDef instanceof AbstractBeanDefinition)
 					{
 						if (((AbstractBeanDefinition)beanDef).isPrimary())
 						{
-							return name;
+							primaries.add(name);
+						}
 					}
 				}
+				if (primaries.size() == 1)
+				{
+					return primaries.get(0);
 				}
 			}
 			StringBuilder msg = new StringBuilder();
@@ -232,6 +242,28 @@ else if (names.size() > 1)
 		}
 	}
 
+	private BeanDefinition getBeanDefinition(ConfigurableListableBeanFactory beanFactory,
+			String name)
+	{
+		if (beanFactory.containsBeanDefinition(name))
+		{
+			return beanFactory.getBeanDefinition(name);
+		}
+		else
+		{
+			BeanFactory parent = beanFactory.getParentBeanFactory();
+			if (parent != null && parent instanceof ConfigurableListableBeanFactory)
+			{
+				return getBeanDefinition(beanFactory, name);
+			}
+			else
+			{
+				return null;
+			}
+		}
+	}
+
+
 	/**
 	 * @see org.apache.wicket.injection.IFieldValueFactory#supportsField(java.lang.reflect.Field)
 	 */
