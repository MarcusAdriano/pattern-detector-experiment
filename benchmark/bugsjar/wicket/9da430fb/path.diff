diff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java
index b1d26e9..5631502 100644
--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java
+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java
@@ -99,9 +99,11 @@ protected void appendParameters(AppendingStringBuffer url, Map<?,?> parameters)
 						{
 							appendValue(url, ((Entry<?, ?>)entry1).getKey().toString(), value1);
 						}
-					} else
+					}
+					else
 					{
-						appendValue(url, ((Entry<?, ?>) entry1).getKey().toString(), value.toString());
+						appendValue(url, ((Entry<?, ?>)entry1).getKey().toString(),
+							value.toString());
 					}
 				}
 			}
@@ -117,7 +119,7 @@ private void appendValue(AppendingStringBuffer url, String key, String value)
 			{
 				url.append("/");
 			}
-			url.append(key).append("/").append(escapedValue).append("/");
+			url.append(key).append("/").append(escapedValue);
 		}
 	}
 
diff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java
index 4a46b34..2f3ae49 100644
--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java
+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java
@@ -45,6 +45,7 @@ public IndexedHybridUrlCodingStrategy(String mountPath, Class pageClass)
 		super(mountPath, pageClass);
 	}
 
+	@Override
 	protected void appendParameters(AppendingStringBuffer url, Map parameters)
 	{
 		int i = 0;
@@ -55,7 +56,7 @@ protected void appendParameters(AppendingStringBuffer url, Map parameters)
 			{
 				url.append("/");
 			}
-			url.append(urlEncodePathComponent(value)).append("/");
+			url.append(urlEncodePathComponent(value));
 			i++;
 		}
 
@@ -68,8 +69,8 @@ protected void appendParameters(AppendingStringBuffer url, Map parameters)
 			{
 				url.append("/");
 			}
-			url.append(WebRequestCodingStrategy.PAGEMAP).append("/").append(urlEncodePathComponent(pageMap))
-					.append("/");
+			url.append(WebRequestCodingStrategy.PAGEMAP).append("/").append(
+				urlEncodePathComponent(pageMap));
 		}
 
 		if (i != parameters.size())
@@ -80,6 +81,7 @@ protected void appendParameters(AppendingStringBuffer url, Map parameters)
 		}
 	}
 
+	@Override
 	protected ValueMap decodeParameters(String urlFragment, Map urlParameters)
 	{
 		PageParameters params = new PageParameters();
@@ -102,8 +104,8 @@ protected ValueMap decodeParameters(String urlFragment, Map urlParameters)
 			if (WebRequestCodingStrategy.PAGEMAP.equals(parts[i]))
 			{
 				i++;
-				params.put(WebRequestCodingStrategy.PAGEMAP, WebRequestCodingStrategy
-						.decodePageMapName(urlDecodePathComponent(parts[i])));
+				params.put(WebRequestCodingStrategy.PAGEMAP,
+					WebRequestCodingStrategy.decodePageMapName(urlDecodePathComponent(parts[i])));
 			}
 			else
 			{
diff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java
index 5c97510..d6c5c1b 100644
--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java
+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java
@@ -90,7 +90,7 @@ protected void appendParameters(AppendingStringBuffer url, Map parameters)
 			{
 				url.append("/");
 			}
-			url.append(urlEncodePathComponent(value)).append("/");
+			url.append(urlEncodePathComponent(value));
 			i++;
 		}
 
@@ -104,7 +104,7 @@ protected void appendParameters(AppendingStringBuffer url, Map parameters)
 				url.append("/");
 			}
 			url.append(WebRequestCodingStrategy.PAGEMAP).append("/").append(
-				urlEncodePathComponent(pageMap)).append("/");
+				urlEncodePathComponent(pageMap));
 		}
 
 		String intface = (String)parameters.get(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);
@@ -116,7 +116,7 @@ protected void appendParameters(AppendingStringBuffer url, Map parameters)
 				url.append("/");
 			}
 			url.append(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME).append("/").append(
-				urlEncodePathComponent(intface)).append("/");
+				urlEncodePathComponent(intface));
 		}
 		if (i != parameters.size())
 		{
diff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java
index 9788196..388a0df 100644
--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java
+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java
@@ -129,7 +129,11 @@ protected void appendParameters(AppendingStringBuffer url, Map parameters)
 				{
 					value = "";
 				}
-				url.append(urlEncodePathComponent(value)).append("/");
+				if (!url.endsWith("/"))
+				{
+					url.append("/");
+				}
+				url.append(urlEncodePathComponent(value));
 				parameterNamesToAdd.remove(parameterName);
 			}
 		}
diff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java
index 9519fe8..1808f3a 100644
--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java
+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java
@@ -39,8 +39,7 @@
  */
 public class PackageRequestTargetUrlCodingStrategy extends AbstractRequestTargetUrlCodingStrategy
 {
-	private static final Logger log = LoggerFactory
-			.getLogger(PackageRequestTargetUrlCodingStrategy.class);
+	private static final Logger log = LoggerFactory.getLogger(PackageRequestTargetUrlCodingStrategy.class);
 
 	/** package for this mount. */
 	private final PackageName packageName;
@@ -110,8 +109,7 @@ public IRequestTarget decode(RequestParameters requestParameters)
 		// do some extra work for checking whether this is a normal request to a
 		// bookmarkable page, or a request to a stateless page (in which case a
 		// wicket:interface parameter should be available
-		final String interfaceParameter = (String)parameters
-				.remove(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);
+		final String interfaceParameter = (String)parameters.remove(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);
 
 		if (interfaceParameter != null)
 		{
@@ -139,13 +137,13 @@ public final CharSequence encode(IRequestTarget requestTarget)
 		AppendingStringBuffer url = new AppendingStringBuffer(40);
 		url.append(getMountPath());
 		IBookmarkablePageRequestTarget target = (IBookmarkablePageRequestTarget)requestTarget;
-		url.append("/").append(Classes.simpleName(target.getPageClass())).append("/");
+		url.append("/").append(Classes.simpleName(target.getPageClass()));
 
 		PageParameters pageParameters = target.getPageParameters();
 		if (target.getPageMapName() != null)
 		{
-			pageParameters.put(WebRequestCodingStrategy.PAGEMAP, WebRequestCodingStrategy
-					.encodePageMapName(target.getPageMapName()));
+			pageParameters.put(WebRequestCodingStrategy.PAGEMAP,
+				WebRequestCodingStrategy.encodePageMapName(target.getPageMapName()));
 		}
 
 		appendParameters(url, pageParameters);
@@ -171,6 +169,7 @@ public boolean matches(IRequestTarget requestTarget)
 	/**
 	 * @see java.lang.Object#toString()
 	 */
+	@Override
 	public String toString()
 	{
 		return "PackageEncoder[package=" + packageName + "]";
