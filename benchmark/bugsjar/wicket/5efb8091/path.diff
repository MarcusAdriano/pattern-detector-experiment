diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java
index c7fe735..cbddd25 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java
@@ -26,6 +26,8 @@
 import org.apache.wicket.markup.parser.XmlTag.TagType;
 import org.apache.wicket.markup.resolver.IComponentResolver;
 import org.apache.wicket.util.lang.Classes;
+import org.apache.wicket.util.visit.IVisit;
+import org.apache.wicket.util.visit.IVisitor;
 
 /**
  * Implements boilerplate as needed by many markup sourcing strategies.
@@ -60,22 +62,37 @@ public AbstractMarkupSourcingStrategy()
 	protected IMarkupFragment searchMarkupInTransparentResolvers(final MarkupContainer container,
 		final Component child)
 	{
-		IMarkupFragment markup = null;
+		return container.visitChildren(MarkupContainer.class, new IVisitor<MarkupContainer, IMarkupFragment>()
+		{
+			@Override
+			public void component(MarkupContainer resolvingContainer, IVisit<IMarkupFragment> visit)
+			{
+				if (resolvingContainer instanceof IComponentResolver)
+				{
+					IMarkupFragment childMarkup = resolvingContainer.getMarkup(child);
 
-		for (Component ch : container)
+					if (childMarkup != null && childMarkup.size() > 0)
 					{
-			if ((ch != child) && (ch instanceof MarkupContainer) &&
-				(ch instanceof IComponentResolver))
+						IComponentResolver componentResolver = (IComponentResolver)resolvingContainer;
+
+						MarkupStream stream = new MarkupStream(childMarkup);
+
+						ComponentTag tag = stream.getTag();
+
+						Component resolvedComponent = resolvingContainer.get(tag.getId());
+						if (resolvedComponent == null)
 						{
-				markup = ((MarkupContainer)ch).getMarkup(child);
-				if (markup != null)
+							resolvedComponent = componentResolver.resolve(resolvingContainer, stream, tag);
+						}
+
+						if (child == resolvedComponent)
 						{
-					break;
+							visit.stop(childMarkup);
 						}
 					}
 				}
-
-		return markup;
+			}
+		});
 	}
 
 	/**
