diff --git a/wicket/src/main/java/org/apache/wicket/MarkupContainer.java b/wicket/src/main/java/org/apache/wicket/MarkupContainer.java
index c2d8431..a7a1964 100644
--- a/wicket/src/main/java/org/apache/wicket/MarkupContainer.java
+++ b/wicket/src/main/java/org/apache/wicket/MarkupContainer.java
@@ -34,6 +34,7 @@
 import org.apache.wicket.markup.MarkupType;
 import org.apache.wicket.markup.RawMarkup;
 import org.apache.wicket.markup.WicketTag;
+import org.apache.wicket.markup.html.border.Border;
 import org.apache.wicket.markup.resolver.ComponentResolvers;
 import org.apache.wicket.model.IComponentInheritedModel;
 import org.apache.wicket.model.IModel;
@@ -138,6 +139,24 @@ public MarkupContainer add(final Component... childs)
 				throw new IllegalArgumentException("argument child may not be null");
 			}
 
+			MarkupContainer parent = getParent();
+			while (parent != null)
+			{
+				if (child == parent)
+				{
+					String msg = "You can not add a component's parent as child to the component (loop): Component: " +
+						this.toString(false) + "; parent == child: " + parent.toString(false);
+					if (child instanceof Border.BorderBodyContainer)
+					{
+						msg += ". Please consider using Border.addToBorder(new " +
+							this.getClass().getSimpleName() + "(\"" + this.getId() +
+							"\", ...) instead of add(...)";
+					}
+					throw new WicketRuntimeException(msg);
+				}
+				parent = parent.getParent();
+			}
+
 			checkHierarchyChange(child);
 
 			if (log.isDebugEnabled())
@@ -955,10 +973,7 @@ private final void addedComponent(final Component child)
 		if (page != null)
 		{
 			child.initialize();
-		}
 
-		if (page != null)
-		{
 			// Tell the page a component has been added
 			page.componentAdded(child);
 		}
diff --git a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
index 4398671..e2f0076 100644
--- a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
+++ b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
@@ -23,12 +23,14 @@
 import org.apache.wicket.markup.ComponentTag;
 import org.apache.wicket.markup.MarkupException;
 import org.apache.wicket.markup.MarkupStream;
-import org.apache.wicket.markup.html.TransparentWebMarkupContainer;
+import org.apache.wicket.markup.html.WebMarkupContainer;
 import org.apache.wicket.markup.html.basic.EnclosureContainer;
 import org.apache.wicket.markup.html.form.Form;
 import org.apache.wicket.markup.html.form.FormComponent;
 import org.apache.wicket.markup.html.form.IFormSubmittingComponent;
 import org.apache.wicket.markup.parser.filter.EnclosureHandler;
+import org.apache.wicket.markup.resolver.ComponentResolvers;
+import org.apache.wicket.markup.resolver.IComponentResolver;
 import org.apache.wicket.request.Response;
 import org.apache.wicket.request.cycle.RequestCycle;
 import org.apache.wicket.response.NullResponse;
@@ -82,7 +84,7 @@
  * @author Juergen Donnerstag
  * @since 1.3
  */
-public class Enclosure extends TransparentWebMarkupContainer
+public class Enclosure extends WebMarkupContainer implements IComponentResolver
 {
 	private static final long serialVersionUID = 1L;
 
@@ -114,6 +116,25 @@ public Enclosure(final String id, final CharSequence childId)
 	}
 
 	/**
+	 * @see org.apache.wicket.Component#onInitialize()
+	 */
+	@Override
+	protected void onInitialize()
+	{
+		super.onInitialize();
+
+		// enclosure's parent container
+		MarkupContainer container = getEnclosureParent();
+
+		// clear the cache
+		childComponent = null;
+
+		// get Child Component. If not "added", ask a resolver to find it.
+		childComponent = getChildComponent(new MarkupStream(getMarkup()), container);
+		checkChildComponent(childComponent);
+	}
+
+	/**
 	 * Get the real parent container
 	 * 
 	 * @return enclosure's parent markup container
@@ -121,7 +142,7 @@ public Enclosure(final String id, final CharSequence childId)
 	private MarkupContainer getEnclosureParent()
 	{
 		MarkupContainer parent = getParent();
-		while (parent.isAuto())
+		while ((parent != null) && parent.isAuto())
 		{
 			parent = parent.getParent();
 		}
@@ -139,16 +160,11 @@ private MarkupContainer getEnclosureParent()
 	 *      org.apache.wicket.markup.ComponentTag)
 	 */
 	@Override
-	protected void onComponentTagBody(MarkupStream markupStream, ComponentTag openTag)
+	protected void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag)
 	{
-		// enclosure's parent container
-		MarkupContainer container = getEnclosureParent();
-
-		Component controller = container.get(childId.toString());
-		checkChildComponent(controller);
-
+		// TODO this is where I wish we had something like "enum(TAG, BODY, NONE, ALL) isVisible()"
 		// set the enclosure visibility
-		boolean visible = controller.determineVisibility();
+		boolean visible = childComponent.determineVisibility();
 
 		// We want to know which components are rendered inside the enclosure
 		final IComponentOnAfterRenderListener listener = new EnclosureListener(this);
@@ -186,6 +202,59 @@ protected void onComponentTagBody(MarkupStream markupStream, ComponentTag openTa
 	}
 
 	/**
+	 * @param markupStream
+	 * @param container
+	 * @return The component associated with the
+	 */
+	private Component getChildComponent(final MarkupStream markupStream, MarkupContainer container)
+	{
+		Component controller = container.get(childId.toString());
+		if (controller == null)
+		{
+			int orgIndex = markupStream.getCurrentIndex();
+			try
+			{
+				while (markupStream.hasMore())
+				{
+					markupStream.next();
+					if (markupStream.skipUntil(ComponentTag.class))
+					{
+						ComponentTag tag = markupStream.getTag();
+						if ((tag != null) && (tag.isOpen() || tag.isOpenClose()))
+						{
+							if (childId.equals(tag.getId()))
+							{
+								controller = ComponentResolvers.resolveByComponentHierarchy(
+									container, markupStream, tag);
+								break;
+							}
+						}
+					}
+				}
+			}
+			finally
+			{
+				markupStream.setCurrentIndex(orgIndex);
+			}
+		}
+		return controller;
+	}
+
+	/**
+	 * 
+	 * @see org.apache.wicket.markup.resolver.IComponentResolver#resolve(org.apache.wicket.MarkupContainer,
+	 *      org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag)
+	 */
+	public Component resolve(MarkupContainer container, MarkupStream markupStream, ComponentTag tag)
+	{
+		if (childId.equals(tag.getId()))
+		{
+			return childComponent;
+		}
+		return getEnclosureParent().get(tag.getId());
+	}
+
+	/**
 	 * 
 	 * @param controller
 	 */
@@ -218,6 +287,7 @@ private EnclosureListener(final Enclosure enclosure)
 		/**
 		 * @see org.apache.wicket.application.IComponentOnBeforeRenderListener#onBeforeRender(org.apache.wicket.Component)
 		 */
+		@SuppressWarnings("unchecked")
 		public void onAfterRender(final Component component)
 		{
 			if (log.isWarnEnabled())
diff --git a/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java b/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java
index d94dc48..daf1ab6 100644
--- a/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java
+++ b/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java
@@ -50,34 +50,67 @@ public static Component resolve(final MarkupContainer container,
 		final MarkupStream markupStream, final ComponentTag tag)
 	{
 		// try to resolve using component hierarchy
+		Component component = resolveByComponentHierarchy(container, markupStream, tag);
 
-		Component cursor = container;
-		while (cursor != null)
+		if (component == null)
 		{
-			if (cursor instanceof IComponentResolver)
+			// fallback to application-level resolvers
+			component = resolveByApplication(container, markupStream, tag);
+		}
+
+		return component;
+	}
+
+	/**
+	 * Attempts to resolve a component via application registered resolvers.
+	 * 
+	 * @param container
+	 * @param markupStream
+	 * @param tag
+	 * @return Null, if no component was found
+	 */
+	public static Component resolveByApplication(final MarkupContainer container,
+		final MarkupStream markupStream, final ComponentTag tag)
+	{
+		for (final IComponentResolver resolver : Application.get()
+			.getPageSettings()
+			.getComponentResolvers())
 		{
-				IComponentResolver resolver = (IComponentResolver)cursor;
 			Component component = resolver.resolve(container, markupStream, tag);
 			if (component != null)
 			{
 				return component;
 			}
 		}
-			cursor = cursor.getParent();
-		}
 
-		// fallback to application-level resolvers
+		return null;
+	}
 
-		for (final IComponentResolver resolver : Application.get()
-			.getPageSettings()
-			.getComponentResolvers())
+	/**
+	 * Attempts to resolve a component via the component hierarchy using resolvers.
+	 * 
+	 * @param container
+	 * @param markupStream
+	 * @param tag
+	 * @return Null, if no component was found
+	 */
+	public static Component resolveByComponentHierarchy(final MarkupContainer container,
+		final MarkupStream markupStream, final ComponentTag tag)
+	{
+		Component cursor = container;
+		while (cursor != null)
 		{
+			if (cursor instanceof IComponentResolver)
+			{
+				IComponentResolver resolver = (IComponentResolver)cursor;
 				Component component = resolver.resolve(container, markupStream, tag);
 				if (component != null)
 				{
 					return component;
 				}
 			}
+			cursor = cursor.getParent();
+		}
 
 		return null;
 	}
diff --git a/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java b/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java
index 983dc58..7bb4948 100644
--- a/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java
+++ b/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java
@@ -493,4 +493,13 @@ public void write(byte[] b, int off, int len) throws IOException
 			response.write(stream.toByteArray());
 		}
 	}
+
+	/**
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString()
+	{
+		return charSequenceAction.builder.toString();
+	}
 }
