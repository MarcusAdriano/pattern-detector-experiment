diff --git a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
index 11d40a2..b90c80e 100644
--- a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
+++ b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
@@ -180,22 +180,36 @@ protected void onComponentTagBody(final MarkupStream markupStream, ComponentTag
 		}
 	}
 
+	/**
+	 * 
+	 * @param container
+	 * @param markupStream
+	 * @param enclosureOpenTag
+	 */
 	private void applyEnclosureVisibilityToChildren(final MarkupContainer container,
-		final MarkupStream markupStream, ComponentTag enclosureOpenTag)
+		final MarkupStream markupStream, final ComponentTag enclosureOpenTag)
 	{
 		DirectChildTagIterator it = new DirectChildTagIterator(markupStream, enclosureOpenTag);
 		while (it.hasNext())
 		{
 			final ComponentTag tag = it.next();
+			if (tag.isAutoComponentTag() == false)
+			{
 				final Component child = container.get(tag.getId());
+
 				// record original visiblity allowed value, will restore later
 				changes.put(child, child.isVisibilityAllowed());
 				child.setVisibilityAllowed(isVisible());
 			}
+		}
 		it.rewind();
 	}
 
-	private void checkChildComponent(Component controller)
+	/**
+	 * 
+	 * @param controller
+	 */
+	private void checkChildComponent(final Component controller)
 	{
 		if (controller == null)
 		{
@@ -209,6 +223,12 @@ else if (controller == this)
 		}
 	}
 
+	/**
+	 * 
+	 * @param container
+	 * @param markupStream
+	 * @param enclosureOpenTag
+	 */
 	private void ensureAllChildrenPresent(final MarkupContainer container,
 		final MarkupStream markupStream, ComponentTag enclosureOpenTag)
 	{
@@ -217,6 +237,8 @@ private void ensureAllChildrenPresent(final MarkupContainer container,
 		{
 			final ComponentTag tag = it.next();
 
+			if (tag.isAutoComponentTag() == false)
+			{
 				Component child = container.get(tag.getId());
 				if (child == null)
 				{
@@ -224,7 +246,8 @@ private void ensureAllChildrenPresent(final MarkupContainer container,
 					// resolvers
 					final int tagIndex = it.getCurrentIndex();
 
-				// because the resolvers can auto-add and therefore immediately render the component
+					// because the resolvers can auto-add and therefore immediately render the
+					// component
 					// we have to buffer the output since we do not yet know the visibility of the
 					// enclosure
 					CharSequence buffer = new ResponseBufferZone(getRequestCycle(), markupStream)
@@ -242,7 +265,8 @@ protected void executeInsideBufferedZone()
 
 					if (buffer.length() > 0)
 					{
-					// we have already rendered this child component, insert a stub component that
+						// we have already rendered this child component, insert a stub component
+						// that
 						// will dump the markup during the normal render process if the enclosure is
 						// visible
 						final Component stub = new AutoMarkupLabel(child.getId(), buffer);
@@ -250,10 +274,13 @@ protected void executeInsideBufferedZone()
 					}
 				}
 			}
+		}
 		it.rewind();
 	}
 
-
+	/**
+	 * @see org.apache.wicket.Component#onDetach()
+	 */
 	@Override
 	protected void onDetach()
 	{
@@ -261,6 +288,9 @@ protected void onDetach()
 		super.onDetach();
 	}
 
+	/**
+	 * 
+	 */
 	private void restoreOriginalChildVisibility()
 	{
 		if (changes != null)
