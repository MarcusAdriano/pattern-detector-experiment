diff --git a/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java b/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java
index fa5bbbd..2887f95 100755
--- a/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java
+++ b/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java
@@ -361,8 +361,8 @@ public final CharSequence replaceAll(final CharSequence searchFor,
 			return (T)toEnum((Class)type);
 		}
 
-		throw new StringValueConversionException("Cannot convert '" + toString() + "'to type " +
-			type);
+		throw new StringValueConversionException("Cannot convert '" + toString() + "'to type "
+			+ type);
 	}
 
 	/**
@@ -394,7 +394,8 @@ public final boolean toBoolean() throws StringValueConversionException
 	 * 
 	 * @param defaultValue
 	 *            the default value
-	 * @return the converted text as a boolean or the default value if text is empty or inconvertible
+	 * @return the converted text as a boolean or the default value if text is empty or
+	 *         inconvertible
 	 * @see Strings#isTrue(String)
 	 */
 	public final boolean toBoolean(final boolean defaultValue)
@@ -410,7 +411,8 @@ public final boolean toBoolean(final boolean defaultValue)
 				if (LOG.isDebugEnabled())
 				{
 					LOG.debug(String.format(
-						"An error occurred while converting '%s' to a boolean: %s", text, x.getMessage()), x);
+						"An error occurred while converting '%s' to a boolean: %s", text,
+						x.getMessage()), x);
 				}
 			}
 		}
@@ -444,7 +446,8 @@ public final char toChar() throws StringValueConversionException
 	 * 
 	 * @param defaultValue
 	 *            the default value
-	 * @return the converted text as a primitive char or the default value if text is not a single character
+	 * @return the converted text as a primitive char or the default value if text is not a single
+	 *         character
 	 */
 	public final char toChar(final char defaultValue)
 	{
@@ -459,7 +462,8 @@ public final char toChar(final char defaultValue)
 				if (LOG.isDebugEnabled())
 				{
 					LOG.debug(String.format(
-						"An error occurred while converting '%s' to a character: %s", text, x.getMessage()), x);
+						"An error occurred while converting '%s' to a character: %s", text,
+						x.getMessage()), x);
 				}
 			}
 		}
@@ -491,8 +495,8 @@ public final double toDouble() throws StringValueConversionException
 		}
 		catch (ParseException e)
 		{
-			throw new StringValueConversionException("Unable to convert '" + text +
-				"' to a double value", e);
+			throw new StringValueConversionException("Unable to convert '" + text
+				+ "' to a double value", e);
 		}
 	}
 
@@ -516,7 +520,8 @@ public final double toDouble(final double defaultValue)
 				if (LOG.isDebugEnabled())
 				{
 					LOG.debug(String.format(
-						"An error occurred while converting '%s' to a double: %s", text, x.getMessage()), x);
+						"An error occurred while converting '%s' to a double: %s", text,
+						x.getMessage()), x);
 				}
 			}
 		}
@@ -551,7 +556,8 @@ public final Duration toDuration() throws StringValueConversionException
 	 * 
 	 * @param defaultValue
 	 *            the default value
-	 * @return the converted text as a duration or the default value if text is empty or inconvertible
+	 * @return the converted text as a duration or the default value if text is empty or
+	 *         inconvertible
 	 * @see Duration#valueOf(String, java.util.Locale)
 	 */
 	public final Duration toDuration(final Duration defaultValue)
@@ -567,7 +573,8 @@ public final Duration toDuration(final Duration defaultValue)
 				if (LOG.isDebugEnabled())
 				{
 					LOG.debug(String.format(
-						"An error occurred while converting '%s' to a Duration: %s", text, x.getMessage()), x);
+						"An error occurred while converting '%s' to a Duration: %s", text,
+						x.getMessage()), x);
 				}
 			}
 		}
@@ -588,8 +595,8 @@ public final int toInt() throws StringValueConversionException
 		}
 		catch (NumberFormatException e)
 		{
-			throw new StringValueConversionException("Unable to convert '" + text +
-				"' to an int value", e);
+			throw new StringValueConversionException("Unable to convert '" + text
+				+ "' to an int value", e);
 		}
 	}
 
@@ -613,7 +620,8 @@ public final int toInt(final int defaultValue)
 				if (LOG.isDebugEnabled())
 				{
 					LOG.debug(String.format(
-						"An error occurred while converting '%s' to an integer: %s", text, x.getMessage()), x);
+						"An error occurred while converting '%s' to an integer: %s", text,
+						x.getMessage()), x);
 				}
 			}
 		}
@@ -634,8 +642,8 @@ public final Integer toInteger() throws StringValueConversionException
 		}
 		catch (NumberFormatException e)
 		{
-			throw new StringValueConversionException("Unable to convert '" + text +
-				"' to an Integer value", e);
+			throw new StringValueConversionException("Unable to convert '" + text
+				+ "' to an Integer value", e);
 		}
 	}
 
@@ -653,8 +661,8 @@ public final long toLong() throws StringValueConversionException
 		}
 		catch (NumberFormatException e)
 		{
-			throw new StringValueConversionException("Unable to convert '" + text +
-				"' to a long value", e);
+			throw new StringValueConversionException("Unable to convert '" + text
+				+ "' to a long value", e);
 		}
 	}
 
@@ -663,7 +671,8 @@ public final long toLong() throws StringValueConversionException
 	 * 
 	 * @param defaultValue
 	 *            the default value
-	 * @return the converted text as a long integer or the default value if text is empty or inconvertible
+	 * @return the converted text as a long integer or the default value if text is empty or
+	 *         inconvertible
 	 */
 	public final long toLong(final long defaultValue)
 	{
@@ -678,7 +687,8 @@ public final long toLong(final long defaultValue)
 				if (LOG.isDebugEnabled())
 				{
 					LOG.debug(String.format(
-						"An error occurred while converting '%s' to a long: %s", text, x.getMessage()), x);
+						"An error occurred while converting '%s' to a long: %s", text,
+						x.getMessage()), x);
 				}
 			}
 		}
@@ -699,8 +709,8 @@ public final Long toLongObject() throws StringValueConversionException
 		}
 		catch (NumberFormatException e)
 		{
-			throw new StringValueConversionException("Unable to convert '" + text +
-				"' to a Long value", e);
+			throw new StringValueConversionException("Unable to convert '" + text
+				+ "' to a Long value", e);
 		}
 	}
 
@@ -826,8 +836,8 @@ public final Time toTime() throws StringValueConversionException
 		}
 		catch (ParseException e)
 		{
-			throw new StringValueConversionException("Unable to convert '" + text +
-				"' to a Time value", e);
+			throw new StringValueConversionException("Unable to convert '" + text
+				+ "' to a Time value", e);
 		}
 	}
 
@@ -851,7 +861,8 @@ public final Time toTime(final Time defaultValue)
 				if (LOG.isDebugEnabled())
 				{
 					LOG.debug(String.format(
-						"An error occurred while converting '%s' to a Time: %s", text, x.getMessage()), x);
+						"An error occurred while converting '%s' to a Time: %s", text,
+						x.getMessage()), x);
 				}
 			}
 		}
@@ -968,8 +979,7 @@ public boolean equals(final Object obj)
 		if (obj instanceof StringValue)
 		{
 			StringValue stringValue = (StringValue)obj;
-			return Objects.isEqual(text, stringValue.text) &&
-				Objects.isEqual(locale, stringValue.locale);
+			return Objects.isEqual(text, stringValue.text) && locale.equals(stringValue.locale);
 		}
 		else
 		{
