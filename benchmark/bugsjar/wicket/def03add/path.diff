diff --git a/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java b/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java
index c172678..e3a7fc0 100644
--- a/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java
+++ b/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java
@@ -23,8 +23,8 @@
 
 /**
  * Model that makes working with detachable models a breeze. LoadableDetachableModel holds a
- * temporary, transient model object, that is set when {@link #getObject()} is called by
- * calling abstract method 'load', and that will be reset/ set to null on {@link #detach()}.
+ * temporary, transient model object, that is set when {@link #getObject()} is called by calling
+ * abstract method 'load', and that will be reset/ set to null on {@link #detach()}.
  * 
  * A usage example:
  * 
@@ -60,8 +60,40 @@
 	/** Logger. */
 	private static final Logger log = LoggerFactory.getLogger(LoadableDetachableModel.class);
 
+	private enum AttachingState 
+	{
+		DETACHED(false, false),
+		ATTACHING(true, false), 
+		ATTACHED(true, true);
+
+		private boolean attaching;
+		private boolean attached;
+
+		private AttachingState(boolean attaching, boolean attached)
+		{
+			this.attached = attached;
+			this.attaching = attaching;
+		}
+		
+		public boolean isAttached() 
+		{
+			return attached;
+		}
+
+		public boolean isAttaching() 
+		{
+			return attaching;
+		}
+		
+		@Override
+		public String toString()
+		{
+			return name().toLowerCase();
+		}
+	}
+
 	/** keeps track of whether this model is attached or detached */
-	private transient boolean attached = false;
+	private transient AttachingState attached = AttachingState.DETACHED;
 
 	/** temporary, transient object. */
 	private transient T transientModelObject;
@@ -83,7 +115,7 @@ public LoadableDetachableModel()
 	public LoadableDetachableModel(T object)
 	{
 		this.transientModelObject = object;
-		attached = true;
+		attached = AttachingState.ATTACHED;
 	}
 
 	/**
@@ -92,7 +124,7 @@ public LoadableDetachableModel(T object)
 	@Override
 	public void detach()
 	{
-		if (attached)
+		if (attached == AttachingState.ATTACHED)
 		{
 			try
 			{
@@ -100,7 +132,7 @@ public void detach()
 			}
 			finally
 			{
-				attached = false;
+				attached = AttachingState.DETACHED;
 				transientModelObject = null;
 
 				log.debug("removed transient object for {}, requestCycle {}", this,
@@ -115,8 +147,11 @@ public void detach()
 	@Override
 	public final T getObject()
 	{
-		if (!attached)
+		if (attached == AttachingState.DETACHED)
 		{
+			// prevent infinite attachment loops
+			attached = AttachingState.ATTACHING;
+
 			transientModelObject = load();
 
 			if (log.isDebugEnabled())
@@ -125,7 +160,7 @@ public final T getObject()
 					", requestCycle " + RequestCycle.get());
 			}
 
-			attached = true;
+			attached = AttachingState.ATTACHED;
 			onAttach();
 		}
 		return transientModelObject;
@@ -138,7 +173,7 @@ public final T getObject()
 	 */
 	public final boolean isAttached()
 	{
-		return attached;
+		return attached.isAttached();
 	}
 
 	/**
@@ -148,8 +183,11 @@ public final boolean isAttached()
 	public String toString()
 	{
 		StringBuilder sb = new StringBuilder(super.toString());
-		sb.append(":attached=").append(attached).append(":tempModelObject=[").append(
-			this.transientModelObject).append("]");
+		sb.append(":attached=")
+			.append(isAttached())
+			.append(":tempModelObject=[")
+			.append(this.transientModelObject)
+			.append("]");
 		return sb.toString();
 	}
 
@@ -187,8 +225,7 @@ protected void onDetach()
 	@Override
 	public void setObject(final T object)
 	{
-		attached = true;
+		attached = AttachingState.ATTACHED;
 		transientModelObject = object;
 	}
-
 }
