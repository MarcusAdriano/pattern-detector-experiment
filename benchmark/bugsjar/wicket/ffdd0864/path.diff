diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java
index 27407cf..b49f2f4 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java
@@ -16,6 +16,8 @@
  */
 package org.apache.wicket.markup.html.panel;
 
+import java.util.Iterator;
+
 import org.apache.wicket.Component;
 import org.apache.wicket.MarkupContainer;
 import org.apache.wicket.markup.ComponentTag;
@@ -26,8 +28,6 @@
 import org.apache.wicket.markup.parser.XmlTag.TagType;
 import org.apache.wicket.markup.resolver.IComponentResolver;
 import org.apache.wicket.util.lang.Classes;
-import org.apache.wicket.util.visit.IVisit;
-import org.apache.wicket.util.visit.IVisitor;
 
 /**
  * Implements boilerplate as needed by many markup sourcing strategies.
@@ -55,53 +55,58 @@ public AbstractMarkupSourcingStrategy()
 	 * 
 	 * @param container
 	 *            the parent container.
+	 * @param
+	 * 		  containerMarkup
+	 * 			  the markup of the container.           
 	 * @param child
 	 *            The component to find the markup for.
 	 * @return the markup fragment for the child, or {@code null}.
 	 */
-	protected IMarkupFragment searchMarkupInTransparentResolvers(final MarkupContainer container,
-		final Component child)
-	{
-		return container.visitChildren(MarkupContainer.class, new IVisitor<MarkupContainer, IMarkupFragment>()
-		{
-			@Override
-			public void component(MarkupContainer resolvingContainer, IVisit<IMarkupFragment> visit)
+	protected IMarkupFragment searchMarkupInTransparentResolvers(MarkupContainer container,
+		IMarkupFragment containerMarkup, Component child)
 	{
-				//prevents possible searching loops
-				if (child == resolvingContainer) 
+		IMarkupFragment childMarkupFound = null;
+		Iterator<Component> siblingsIterator = container.iterator();
+		
+		while (siblingsIterator.hasNext() && childMarkupFound == null)
 		{
-					visit.dontGoDeeper();
-					return;
-				}
+			Component sibling = siblingsIterator.next();
 			
-				if (resolvingContainer instanceof IComponentResolver)
+			if(sibling == child || !sibling.isVisible())
 			{
-					visit.dontGoDeeper();
+				continue;
+			}
 			
-					IMarkupFragment childMarkup = resolvingContainer.getMarkup(child);
+			IMarkupFragment siblingMarkup = containerMarkup.find(sibling.getId());
 			
-					if (childMarkup != null && childMarkup.size() > 0)
+			if (siblingMarkup != null && sibling instanceof MarkupContainer)
 			{
-						IComponentResolver componentResolver = (IComponentResolver)resolvingContainer;
+				IMarkupFragment childMarkup  = siblingMarkup.find(child.getId());
 				
+				if (childMarkup != null && sibling instanceof IComponentResolver)
+				{
+					IComponentResolver componentResolver = (IComponentResolver)sibling;
 					MarkupStream stream = new MarkupStream(childMarkup);
-
 					ComponentTag tag = stream.getTag();
 					
-						Component resolvedComponent = resolvingContainer.get(tag.getId());
+					Component resolvedComponent = sibling.get(tag.getId());
 					if (resolvedComponent == null)
 					{
-							resolvedComponent = componentResolver.resolve(resolvingContainer, stream, tag);
+						resolvedComponent = componentResolver.resolve((MarkupContainer)sibling, stream, tag);
 					}
 					
 					if (child == resolvedComponent)
 					{
-							visit.stop(childMarkup);
+						childMarkupFound = childMarkup;
 					}
 				}
+				else 
+				{
+					childMarkupFound = searchMarkupInTransparentResolvers((MarkupContainer)sibling, siblingMarkup, child);
+				}
 			}
 		}
-		});
+		return childMarkupFound;
 	}
 
 	/**
diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java
index 0ac0647..5f547ac 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java
@@ -120,7 +120,7 @@ public IMarkupFragment getMarkup(final MarkupContainer parent, final Component c
 			return associatedMarkup;
 		}
 
-		associatedMarkup = searchMarkupInTransparentResolvers(parent, child);
+		associatedMarkup = searchMarkupInTransparentResolvers(parent, markup, child);
 		if (associatedMarkup != null)
 		{
 			return associatedMarkup;
diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java
index 6699a68..7506d23 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java
@@ -78,26 +78,24 @@ public IMarkupFragment getMarkup(final MarkupContainer container, final Componen
 	{
 		// If the sourcing strategy did not provide one, than ask the component.
 		// Get the markup for the container
-		IMarkupFragment markup = container.getMarkup();
-		if (markup == null)
+		IMarkupFragment containerMarkup = container.getMarkup();
+		if (containerMarkup == null)
 		{
 			return null;
 		}
 
 		if (child == null)
 		{
-			return markup;
+			return containerMarkup;
 		}
 		
 		// Find the child's markup
-		markup = markup.find(child.getId());
-		if (markup != null)
+		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
+		if (childMarkup != null)
 		{
-			return markup;
+			return childMarkup;
 		}
 		
-		markup = searchMarkupInTransparentResolvers(container, child);
-		
-		return markup;
+		return searchMarkupInTransparentResolvers(container, containerMarkup, child);
 	}
 }
