diff --git a/flink-compiler/src/main/java/org/apache/flink/compiler/dag/BulkIterationNode.java b/flink-compiler/src/main/java/org/apache/flink/compiler/dag/BulkIterationNode.java
index a5f8026..d3f0fbb 100644
--- a/flink-compiler/src/main/java/org/apache/flink/compiler/dag/BulkIterationNode.java
+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/dag/BulkIterationNode.java
@@ -132,7 +132,7 @@ public void setNextPartialSolution(OptimizerNode nextPartialSolution, OptimizerN
 		// check if the root of the step function has the same DOP as the iteration
 		// or if the steo function has any operator at all
 		if (nextPartialSolution.getDegreeOfParallelism() != getDegreeOfParallelism() ||
-			nextPartialSolution == partialSolution)
+			nextPartialSolution == partialSolution || nextPartialSolution instanceof BinaryUnionNode)
 		{
 			// add a no-op to the root to express the re-partitioning
 			NoOpNode noop = new NoOpNode();
diff --git a/flink-compiler/src/main/java/org/apache/flink/compiler/dag/WorksetIterationNode.java b/flink-compiler/src/main/java/org/apache/flink/compiler/dag/WorksetIterationNode.java
index 7638cca..b6ae34e 100644
--- a/flink-compiler/src/main/java/org/apache/flink/compiler/dag/WorksetIterationNode.java
+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/dag/WorksetIterationNode.java
@@ -160,7 +160,7 @@ public void setNextPartialSolution(OptimizerNode solutionSetDelta, OptimizerNode
 		
 		// there needs to be at least one node in the workset path, so
 		// if the next workset is equal to the workset, we need to inject a no-op node
-		if (nextWorkset == worksetNode) {
+		if (nextWorkset == worksetNode || nextWorkset instanceof BinaryUnionNode) {
 			NoOpNode noop = new NoOpNode();
 			noop.setDegreeOfParallelism(getDegreeOfParallelism());
 
diff --git a/flink-compiler/src/main/java/org/apache/flink/compiler/plandump/PlanJSONDumpGenerator.java b/flink-compiler/src/main/java/org/apache/flink/compiler/plandump/PlanJSONDumpGenerator.java
index 00e2bc2..60500b8 100644
--- a/flink-compiler/src/main/java/org/apache/flink/compiler/plandump/PlanJSONDumpGenerator.java
+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/plandump/PlanJSONDumpGenerator.java
@@ -26,7 +25,6 @@
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -47,7 +45,6 @@
 import org.apache.flink.compiler.dataproperties.LocalProperties;
 import org.apache.flink.compiler.plan.BulkIterationPlanNode;
 import org.apache.flink.compiler.plan.Channel;
-import org.apache.flink.compiler.plan.NAryUnionPlanNode;
 import org.apache.flink.compiler.plan.OptimizedPlan;
 import org.apache.flink.compiler.plan.PlanNode;
 import org.apache.flink.compiler.plan.SingleInputPlanNode;
@@ -265,31 +262,16 @@ private boolean visit(DumpableNode<?> node, PrintWriter writer, boolean first) {
 		if (inConns != null && inConns.hasNext()) {
 			// start predecessor list
 			writer.print(",\n\t\t\"predecessors\": [");
-			int connNum = 0;
 			int inputNum = 0;
 			
 			while (inConns.hasNext()) {
-				final DumpableConnection<?> conn = inConns.next();
-				
-				final Collection<DumpableConnection<?>> inConnsForInput;
-				if (conn.getSource() instanceof NAryUnionPlanNode) {
-					inConnsForInput = new ArrayList<DumpableConnection<?>>();
-					
-					for (DumpableConnection<?> inputOfUnion : conn.getSource().getDumpableInputs()) {
-						inConnsForInput.add(inputOfUnion);
-					}
-				}
-				else {
-					inConnsForInput = Collections.<DumpableConnection<?>>singleton(conn);
-				}
-				
-				for (DumpableConnection<?> inConn : inConnsForInput) {
+				final DumpableConnection<?> inConn = inConns.next();
 				final DumpableNode<?> source = inConn.getSource();
-					writer.print(connNum == 0 ? "\n" : ",\n");
-					if (connNum == 0) {
+				writer.print(inputNum == 0 ? "\n" : ",\n");
+				if (inputNum == 0) {
 					child1name += child1name.length() > 0 ? ", " : ""; 
 					child1name += source.getOptimizerNode().getPactContract().getName();
-					} else if (connNum == 1) {
+				} else if (inputNum == 1) {
 					child2name += child2name.length() > 0 ? ", " : ""; 
 					child2name = source.getOptimizerNode().getPactContract().getName();
 				}
@@ -331,7 +313,7 @@ private boolean visit(DumpableNode<?> node, PrintWriter writer, boolean first) {
 						shipStrategy = "Rebalance";
 						break;
 					default:
-							throw new CompilerException("Unknown ship strategy '" + conn.getShipStrategy().name()
+						throw new CompilerException("Unknown ship strategy '" + inConn.getShipStrategy().name()
 							+ "' in JSON generator.");
 					}
 				}
@@ -378,8 +360,6 @@ private boolean visit(DumpableNode<?> node, PrintWriter writer, boolean first) {
 				}
 				
 				writer.print('}');
-					connNum++;
-				}
 				inputNum++;
 			}
 			// finish predecessors
