diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java
index 9ab6c10..c9624fc 100644
--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java
+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java
@@ -147,6 +147,9 @@
 	 * needs to be initialized to true, so that early cancel() before invoke() behaves correctly */
 	private volatile boolean isRunning;
 	
+	/** Flag to mark this task as canceled */
+	private volatile boolean canceled;
+
 	private long recoveryTimestamp;
 
 	// ------------------------------------------------------------------------
@@ -191,6 +194,11 @@ public final void invoke() throws Exception {
 			// task specific initialization
 			init();
 			
+			// save the work of reloadig state, etc, if the task is already canceled
+			if (canceled) {
+				throw new CancelTaskException();
+			}
+			
 			// -------- Invoke --------
 			LOG.debug("Invoking {}", getName());
 			
@@ -205,6 +213,11 @@ public final void invoke() throws Exception {
 				openAllOperators();
 			}
 
+			// final check to exit early before starting to run
+			if (canceled) {
+				throw new CancelTaskException();
+			}
+
 				// let the task do its work
 			isRunning = true;
 			run();
@@ -290,6 +303,7 @@ public final void invoke() throws Exception {
 	@Override
 	public final void cancel() throws Exception {
 		isRunning = false;
+		canceled = true;
 		cancelTask();
 	}
 
@@ -297,6 +311,10 @@ public final boolean isRunning() {
 		return isRunning;
 	}
 	
+	public final boolean isCanceled() {
+		return canceled;
+	}
+	
 	private void openAllOperators() throws Exception {
 		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {
 			if (operator != null) {
