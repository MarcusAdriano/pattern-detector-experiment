diff --git a/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java b/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java
index b8e23b4..3e84e6e 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java
@@ -107,6 +107,13 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
 
         if (failures.get() >= threshold && System.currentTimeMillis() - lastFailure < halfOpenAfter) {
             exchange.setException(new RejectedExecutionException("CircuitBreaker Open: failures: " + failures + ", lastFailure: " + lastFailure));
+            /*
+             * If the circuit opens, we have to prevent the execution of any processor.
+             * The failures count can be set to 0.
+             */
+            failures.set(0);
+            callback.done(true);
+            return true;
         }
         Processor processor = getProcessors().get(0);
         if (processor == null) {
@@ -114,18 +121,20 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
 
         AsyncProcessor albp = AsyncProcessorConverterHelper.convert(processor);
-        boolean sync = albp.process(exchange, callback);
+        // Added a callback for processing the exchange in the callback
+        boolean sync = albp.process(exchange, new CircuitBreakerCallback(exchange, callback));
         
+        // We need to check the exception here as albp is use sync call  
+        if (sync) {
             boolean failed = hasFailed(exchange);
-
             if (!failed) {
                 failures.set(0);
             } else {
                 failures.incrementAndGet();
                 lastFailure = System.currentTimeMillis();
             }
-
-        if (!sync) {
+        } else {
+            // CircuitBreakerCallback can take care of failure check of the exchange
             log.trace("Processing exchangeId: {} is continued being processed asynchronously", exchange.getExchangeId());
             return false;
         }
@@ -142,4 +151,28 @@ public String toString() {
     public String getTraceLabel() {
         return "circuitbreaker";
     }
+    
+    class CircuitBreakerCallback implements AsyncCallback {
+        private final AsyncCallback callback;
+        private final Exchange exchange;
+        CircuitBreakerCallback(Exchange exchange, AsyncCallback callback) {
+            this.callback = callback;
+            this.exchange = exchange;
+        }
+
+        @Override
+        public void done(boolean doneSync) {
+            if (!doneSync) {
+                boolean failed = hasFailed(exchange);
+                if (!failed) {
+                    failures.set(0);
+                } else {
+                    failures.incrementAndGet();
+                    lastFailure = System.currentTimeMillis();
+                }
+            }
+            callback.done(doneSync);
+        }
+        
+    }
 }
