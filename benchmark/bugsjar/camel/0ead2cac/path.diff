diff --git a/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java b/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java
index e28a214..7b64546 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java
@@ -91,13 +91,23 @@ public void process(Exchange exchange) throws Exception {
     }
 
     public boolean process(final Exchange exchange, final AsyncCallback callback) {
-        final String messageId = messageIdExpression.evaluate(exchange, String.class);
+        final AsyncCallback target;
+
+        final String messageId;
+        try {
+            messageId = messageIdExpression.evaluate(exchange, String.class);
             if (messageId == null) {
                 exchange.setException(new NoMessageIdException(exchange, messageIdExpression));
                 callback.done(true);
                 return true;
             }
+        } catch (Exception e) {
+            exchange.setException(e);
+            callback.done(true);
+            return true;
+        }
 
+        try {
             boolean newKey;
             if (eager) {
                 // add the key to the repository
@@ -132,11 +141,16 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
             }
 
             final Synchronization onCompletion = new IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);
-        final AsyncCallback target = new IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);
+            target = new IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);
             if (!completionEager) {
                 // the scope is to do the idempotent completion work as an unit of work on the exchange when its done being routed
                 exchange.addOnCompletion(onCompletion);
             }
+        } catch (Exception e) {
+            exchange.setException(e);
+            callback.done(true);
+            return true;
+        }
 
         // process the exchange
         return processor.process(exchange, target);
