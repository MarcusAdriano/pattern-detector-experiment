diff --git a/camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java
index bcbc671..2d9fa8e 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java
@@ -62,9 +64,9 @@
     private static final Logger LOG = LoggerFactory.getLogger(ValidatingProcessor.class);
     private XmlConverter converter = new XmlConverter();
     private String schemaLanguage = XMLConstants.W3C_XML_SCHEMA_NS_URI;
-    private Schema schema;
+    private volatile Schema schema;
     private Source schemaSource;
-    private SchemaFactory schemaFactory;
+    private volatile SchemaFactory schemaFactory;
     private URL schemaUrl;
     private File schemaFile;
     private byte[] schemaAsByteArray;
@@ -190,8 +192,12 @@ public void loadSchema() throws Exception {
 
     public Schema getSchema() throws IOException, SAXException {
         if (schema == null) {
+            synchronized (this) {
+                if (schema == null) {
                     schema = createSchema();
                 }
+            }
+        }
         return schema;
     }
 
@@ -244,8 +250,12 @@ public void setSchemaAsByteArray(byte[] schemaAsByteArray) {
 
     public SchemaFactory getSchemaFactory() {
         if (schemaFactory == null) {
+            synchronized (this) {
+                if (schemaFactory == null) {
                     schemaFactory = createSchemaFactory();
                 }
+            }
+        }
         return schemaFactory;
     }
 
@@ -336,22 +346,30 @@ protected Schema createSchema() throws SAXException, IOException {
 
         URL url = getSchemaUrl();
         if (url != null) {
+            synchronized (this) {
                 return factory.newSchema(url);
             }
+        }
 
         File file = getSchemaFile();
         if (file != null) {
+            synchronized (this) {
                 return factory.newSchema(file);
             }
+        }
 
         byte[] bytes = getSchemaAsByteArray();
         if (bytes != null) {
+            synchronized (this) {
                 return factory.newSchema(new StreamSource(new ByteArrayInputStream(schemaAsByteArray)));
             }
+        }
 
         Source source = getSchemaSource();
+        synchronized (this) {
             return factory.newSchema(source);
         }
+    }
 
     /**
      * Checks whether we need an {@link InputStream} to access the message body or header.
