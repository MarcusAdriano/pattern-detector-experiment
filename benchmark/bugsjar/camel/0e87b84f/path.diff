diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java b/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java
index 953d60e..21e407b 100644
--- a/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java
+++ b/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java
@@ -19,6 +19,9 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
@@ -41,10 +44,16 @@
 public abstract class AbstractCamelInvocationHandler implements InvocationHandler {
 
     private static final transient Logger LOG = LoggerFactory.getLogger(CamelInvocationHandler.class);
+    private static final List<Method> EXCLUDED_METHODS = new ArrayList<Method>();
     private static ExecutorService executorService;
     protected final Endpoint endpoint;
     protected final Producer producer;
 
+    static {
+        // exclude all java.lang.Object methods as we dont want to invoke them
+        EXCLUDED_METHODS.addAll(Arrays.asList(Object.class.getMethods()));
+    }
+
     public AbstractCamelInvocationHandler(Endpoint endpoint, Producer producer) {
         this.endpoint = endpoint;
         this.producer = producer;
@@ -67,7 +76,26 @@ private static Object getBody(Exchange exchange, Class<?> type) throws InvalidPa
         }
     }
 
-    protected Object invokeWithbody(final Method method, Object body, final ExchangePattern pattern) throws InterruptedException, Throwable {
+    @Override
+    public final Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
+        if (isValidMethod(method)) {
+            return doInvokeProxy(proxy, method, args);
+        } else {
+            // invalid method then invoke methods on this instead
+            if ("toString".equals(method.getName())) {
+                return this.toString();
+            } else if ("hashCode".equals(method.getName())) {
+                return this.hashCode();
+            } else if ("equals".equals(method.getName())) {
+                return Boolean.FALSE;
+            }
+            return null;
+        }
+    }
+
+    public abstract Object doInvokeProxy(final Object proxy, final Method method, final Object[] args) throws Throwable;
+
+    protected Object invokeWithBody(final Method method, Object body, final ExchangePattern pattern) throws Throwable {
         final Exchange exchange = new DefaultExchange(endpoint, pattern);
         exchange.getIn().setBody(body);
 
@@ -214,4 +242,15 @@ protected Throwable findSuitableException(Throwable cause, Method method) {
         return null;
     }
 
+    protected boolean isValidMethod(Method method) {
+        // must not be in the excluded list
+        for (Method excluded : EXCLUDED_METHODS) {
+            if (ObjectHelper.isOverridingMethod(excluded, method)) {
+                // the method is overriding an excluded method so its not valid
+                return false;
+            }
+        }
+        return true;
+    }
+
 }
diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java b/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java
index b78dcd3..55b993b 100644
--- a/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java
+++ b/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java
@@ -37,11 +37,12 @@ public CamelInvocationHandler(Endpoint endpoint, Producer producer, MethodInfoCa
         this.methodInfoCache = methodInfoCache;
     }
 
-    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
+    @Override
+    public Object doInvokeProxy(Object proxy, Method method, Object[] args) throws Throwable {
         BeanInvocation invocation = new BeanInvocation(method, args);
         MethodInfo methodInfo = methodInfoCache.getMethodInfo(method);
         final ExchangePattern pattern = methodInfo != null ? methodInfo.getPattern() : ExchangePattern.InOut;
-        return invokeWithbody(method, invocation, pattern);
+        return invokeWithBody(method, invocation, pattern);
     }
 
 }
diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java b/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java
index 906ad71..b97865a 100644
--- a/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java
+++ b/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java
@@ -24,7 +24,7 @@
 import org.apache.camel.RuntimeCamelException;
 
 /**
- * Special InvocationHandler for methods that have only one parameter. This
+ * Special {@link java.lang.reflect.InvocationHandler} for methods that have only one parameter. This
  * parameter is directly sent to as the body of the message. The idea is to use
  * that as a very open message format especially when combined with e.g. JAXB
  * serialization.
@@ -34,7 +35,8 @@ public PojoMessageInvocationHandler(Endpoint endpoint, Producer producer) {
         super(endpoint, producer);
     }
 
-    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
+    @Override
+    public Object doInvokeProxy(Object proxy, Method method, Object[] args) throws Throwable {
         int argsLength = (args == null) ? 0 : args.length;
         if (argsLength != 1) {
             throw new RuntimeCamelException(String.format("Error creating proxy for %s.%s Number of arguments must be 1 but is %d", 
@@ -42,7 +44,7 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg
                                                           method.getName(), argsLength));
         }
         final ExchangePattern pattern = method.getReturnType() != Void.TYPE ? ExchangePattern.InOut : ExchangePattern.InOnly;
-        return invokeWithbody(method, args[0], pattern);
+        return invokeWithBody(method, args[0], pattern);
     }
 
 }
