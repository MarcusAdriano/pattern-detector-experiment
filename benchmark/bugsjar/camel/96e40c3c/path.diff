diff --git a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java
index e9093a4..c8304d6 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java
@@ -259,11 +259,12 @@ public Exchange send(Endpoint endpoint, ExchangePattern pattern, Processor proce
      * @param producerCallback the producer template callback to be executed
      * @return (doneSync) <tt>true</tt> to continue execute synchronously, <tt>false</tt> to continue being executed asynchronously
      */
-    public boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, ExchangePattern pattern, AsyncCallback callback, AsyncProducerCallback producerCallback) {
+    public boolean doInAsyncProducer(final Endpoint endpoint, final Exchange exchange, final ExchangePattern pattern,
+                                     final AsyncCallback callback, final AsyncProducerCallback producerCallback) {
         boolean sync = true;
 
         // get the producer and we do not mind if its pooled as we can handle returning it back to the pool
-        Producer producer = doGetProducer(endpoint, true);
+        final Producer producer = doGetProducer(endpoint, true);
 
         if (producer == null) {
             if (isStopped()) {
@@ -274,23 +275,17 @@ public boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, ExchangeP
             }
         }
 
-        StopWatch watch = null;
-        if (exchange != null) {
         // record timing for sending the exchange using the producer
-            watch = new StopWatch();
-        }
+        final StopWatch watch = exchange != null ? new StopWatch() : null;
 
         try {
             // invoke the callback
             AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter.convert(producer);
-            sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, callback);
-        } catch (Throwable e) {
-            // ensure exceptions is caught and set on the exchange
-            if (exchange != null) {
-                exchange.setException(e);
-            }
-        } finally {
-            if (exchange != null && exchange.getException() == null) {
+            sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new AsyncCallback() {
+                @Override
+                public void done(boolean doneSync) {
+                    try {
+                        if (watch != null) {
                             long timeTaken = watch.stop();
                             // emit event that the exchange was sent to the endpoint
                             EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);
@@ -307,6 +303,16 @@ public boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, ExchangeP
                                 LOG.warn("Error stopping producer: " + producer, e);
                             }
                         }
+                    } finally {
+                        callback.done(doneSync);
+                    }
+                }
+            });
+        } catch (Throwable e) {
+            // ensure exceptions is caught and set on the exchange
+            if (exchange != null) {
+                exchange.setException(e);
+            }
         }
 
         return sync;
