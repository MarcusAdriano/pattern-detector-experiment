diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java
index d64d7cf..98bcc5e 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java
@@ -192,20 +192,23 @@ private Statement convertToStatement(String query) throws ParseException {
                         currentSelector.path = "/";
                     }
                 }
-            } else if (readIf("text")) {
+            } else if (currentTokenType == IDENTIFIER) {
+                // probably a path restriction
+                // String name = readPathSegment();
+                String identifier = readIdentifier();
+                if (readIf("(")) {
+                    if ("text".equals(identifier)) {
                         // "...text()"
                         currentSelector.isChild = false;
                         pathPattern += "jcr:xmltext";
-                read("(");
                         read(")");
                         if (currentSelector.isDescendant) {
                             currentSelector.nodeName = "jcr:xmltext";
                         } else {
                             currentSelector.path = PathUtils.concat(currentSelector.path, "jcr:xmltext");
                         }                        
-            } else if (readIf("element")) {
+                    } else if ("element".equals(identifier)) {
                         // "...element(..."
-                read("(");
                         if (readIf(")")) {
                             // any
                             pathPattern += "%";
@@ -223,14 +226,22 @@ private Statement convertToStatement(String query) throws ParseException {
                             }
                             read(")");
                         }
-            } else if (readIf("@")) {
+                    } else if ("rep:excerpt".equals(identifier)) {
+                        readOpenDotClose(false);
                         rewindSelector();
-                Expression.Property p = readProperty();
+                        Expression.Property p = new Expression.Property(currentSelector, "rep:excerpt", false);
                         statement.addSelectColumn(p);
-            } else if (readIf("rep:excerpt")) {
+                    } else {
+                        throw getSyntaxError();
+                    }
+                } else {
+                    String name = ISO9075.decode(identifier);
+                    pathPattern += name;
+                    appendNodeName(name);
+                }
+            } else if (readIf("@")) {
                 rewindSelector();
-                readExcerpt();
-                Expression.Property p = new Expression.Property(currentSelector, "rep:excerpt", false);
+                Expression.Property p = readProperty();
                 statement.addSelectColumn(p);
             } else if (readIf("(")) {
                 rewindSelector();
@@ -239,7 +250,7 @@ private Statement convertToStatement(String query) throws ParseException {
                         Expression.Property p = readProperty();
                         statement.addSelectColumn(p);
                     } else if (readIf("rep:excerpt")) {
-                        readExcerpt();
+                        readOpenDotClose(true);
                         Expression.Property p = new Expression.Property(currentSelector, "rep:excerpt", false);
                         statement.addSelectColumn(p);
                     } else if (readIf("rep:spellcheck")) {
@@ -249,7 +260,7 @@ private Statement convertToStatement(String query) throws ParseException {
                         Expression.Property p = new Expression.Property(currentSelector, "rep:spellcheck()", false);
                         statement.addSelectColumn(p);
                     } else if (readIf("rep:suggest")) {
-                        readExcerpt();
+                        readOpenDotClose(true);
                         Expression.Property p = new Expression.Property(currentSelector, "rep:suggest()", false);
                         statement.addSelectColumn(p);
                     }
@@ -257,11 +268,6 @@ private Statement convertToStatement(String query) throws ParseException {
                 if (!readIf(")")) {
                     return convertToUnion(query, statement, startParseIndex - 1);
                 }
-            } else if (currentTokenType == IDENTIFIER) {
-                // path restriction
-                String name = readPathSegment();
-                pathPattern += name;
-                appendNodeName(name);
             } else if (readIf(".")) {
                 // just "." this is simply ignored, so that
                 // "a/./b" is the same as "a/b"
@@ -717,13 +723,19 @@ private void read(String expected) throws ParseException {
         return new Expression.Property(currentSelector, readPathSegment(), false);
     }
     
-    private void readExcerpt() throws ParseException {
+    /**
+     * Read open bracket (optional), and optional dot, and close bracket.
+     * 
+     * @param readOpenBracket whether to read the open bracket (false if this
+     *            was already read)
+     * @throws ParseException if close bracket or the dot were not read
+     */
+    private void readOpenDotClose(boolean readOpenBracket) throws ParseException {
+        if (readOpenBracket) {
             read("(");
-        if (!readIf(")")) {
-            // only rep:excerpt(.) and rep:excerpt() are currently supported
-            read(".");
-            read(")");
         }
+        readIf(".");
+        read(")");
     }
 
     private String readPathSegment() throws ParseException {
