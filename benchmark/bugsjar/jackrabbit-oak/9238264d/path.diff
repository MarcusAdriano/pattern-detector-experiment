diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java
index 7421870..8434fb2 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java
@@ -42,6 +42,7 @@
 import org.apache.jackrabbit.oak.api.Tree;
 import org.apache.jackrabbit.oak.api.Type;
 import org.apache.jackrabbit.oak.commons.PathUtils;
+import org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder;
 import org.apache.jackrabbit.oak.query.QueryImpl;
 import org.apache.jackrabbit.oak.query.fulltext.FullTextExpression;
 import org.apache.jackrabbit.oak.query.index.FilterImpl;
@@ -533,13 +534,34 @@ private PropertyValue currentOakProperty(String oakPropertyName, Integer propert
             readOakProperties(list, t, oakPropertyName, propertyType);
             if (list.size() == 0) {
                 return null;
+            } else if (list.size() == 1) {
+                return list.get(0);
+            }
+            Type<?> type = list.get(0).getType();
+            for (int i = 1; i < list.size(); i++) {
+                Type<?> t2 = list.get(i).getType();
+                if (t2 != type) {
+                    // types don't match
+                    type = Type.STRING;
+                    break;
+                }
             }
+            if (type == Type.STRING) {
                 ArrayList<String> strings = new ArrayList<String>();
                 for (PropertyValue p : list) {
                     Iterables.addAll(strings, p.getValue(Type.STRINGS));
                 }
                 return PropertyValues.newString(strings);
             }
+            @SuppressWarnings("unchecked")
+            PropertyBuilder<Object> builder = (PropertyBuilder<Object>) PropertyBuilder.array(type);
+            builder.setName("");
+            for (PropertyValue v : list) {
+                builder.addValue(v.getValue(type));
+            }
+            PropertyState s = builder.getPropertyState();
+            return PropertyValues.create(s);
+        }
         boolean relative = oakPropertyName.indexOf('/') >= 0;
         Tree t = currentTree();
         if (relative) {
@@ -590,6 +612,7 @@ private PropertyValue currentOakProperty(Tree t, String oakPropertyName, Integer
     }
     
     private void readOakProperties(ArrayList<PropertyValue> target, Tree t, String oakPropertyName, Integer propertyType) {
+        boolean skipCurrentNode = false;
         while (true) {
             if (t == null || !t.exists()) {
                 return;
@@ -608,10 +631,14 @@ private void readOakProperties(ArrayList<PropertyValue> target, Tree t, String o
                 for (Tree child : t.getChildren()) {
                     readOakProperties(target, child, oakPropertyName, propertyType);
                 }
+                skipCurrentNode = true;
             } else {
                 t = t.getChild(parent);
             }
         }
+        if (skipCurrentNode) {
+            return;
+        }
         if (!"*".equals(oakPropertyName)) {
             PropertyValue value = currentOakProperty(t, oakPropertyName, propertyType);
             if (value != null) {
