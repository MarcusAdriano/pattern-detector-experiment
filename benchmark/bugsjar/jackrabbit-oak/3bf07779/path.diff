diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java
index 2023f2d..0f96b8a 100644
--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java
+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java
@@ -100,6 +100,8 @@
 
     private boolean propertiesChanged = false;
 
+    private List<PropertyState> propertiesModified = Lists.newArrayList();
+
     private final NodeState root;
 
     /**
@@ -222,12 +224,14 @@ public void propertyAdded(PropertyState after) {
     @Override
     public void propertyChanged(PropertyState before, PropertyState after) {
         markPropertyChanged(before.getName());
+        propertiesModified.add(before);
         checkAggregates(before.getName());
     }
 
     @Override
     public void propertyDeleted(PropertyState before) {
         markPropertyChanged(before.getName());
+        propertiesModified.add(before);
         checkAggregates(before.getName());
     }
 
@@ -333,6 +337,11 @@ private Document makeDocument(String path, NodeState state, boolean isUpdate) {
         dirty |= indexNullCheckEnabledProps(path, fields, state);
         dirty |= indexNotNullCheckEnabledProps(path, fields, state);
         
+        // Check if a node having a single property was modified/deleted
+        if (!dirty) {
+            dirty = indexIfSinglePropertyRemoved();
+        }
+
         if (isUpdate && !dirty) {
             // updated the state but had no relevant changes
             return null;
@@ -579,6 +588,21 @@ private boolean indexNullCheckEnabledProps(String path, List<Field> fields, Node
         return fieldAdded;
     }
     
+    private boolean indexIfSinglePropertyRemoved() {
+        boolean dirty = false;
+        for (PropertyState ps : propertiesModified) {
+            PropertyDefinition pd = indexingRule.getConfig(ps.getName());
+            if (pd != null 
+                    && pd.index 
+                    && (pd.includePropertyType(ps.getType().tag()) 
+                            || indexingRule.includePropertyType(ps.getType().tag()))) {
+                dirty = true;
+                break;
+            }
+        }
+        return dirty;
+    }
+    
     /**
      * Determine if the property as defined by PropertyDefinition exists or not.
      *
