diff --git a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
index fa262c8..bed7b47 100644
--- a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
+++ b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java
@@ -253,12 +253,7 @@ public void validateEffectiveModel( Model model, ModelBuildingRequest request, M
                     validateBoolean( "build.plugins.plugin.extensions", problems, errOn30, p.getExtensions(),
                                      p.getKey() );
 
-                    for ( Dependency d : p.getDependencies() )
-                    {
-                        validateEnum( "build.plugins.plugin[" + p.getKey() + "].dependencies.dependency.scope",
-                                      problems, errOn30, d.getScope(), d.getManagementKey(),
-                                      "compile", "runtime", "system" );
-                    }
+                    validateEffectivePluginDependencies( problems, p, request );
                 }
 
                 validateResources( problems, build.getResources(), "build.resources.resource", request );
@@ -365,24 +360,70 @@ else if ( "system".equals( dependency.getScope() ) )
     }
 
     private void validateEffectiveDependencies( ModelProblemCollector problems, List<Dependency> dependencies,
-                                                boolean managed, ModelBuildingRequest request )
+                                                boolean management, ModelBuildingRequest request )
     {
         Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
 
-        String prefix = managed ? "dependencyManagement.dependencies.dependency." : "dependencies.dependency.";
+        String prefix = management ? "dependencyManagement.dependencies.dependency." : "dependencies.dependency.";
 
         for ( Dependency d : dependencies )
         {
+            validateEffectiveDependency( problems, d, management, prefix, request );
+
+            if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )
+            {
+                validateBoolean( prefix + "optional", problems, errOn30, d.getOptional(), d.getManagementKey() );
+
+                if ( !management )
+                {
+                    validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey() );
+
+                    /*
+                     * TODO: Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc. In
+                     * order to don't break backward-compat with those, only warn but don't error out.
+                     */
+                    validateEnum( prefix + "scope", problems, Severity.WARNING, d.getScope(), d.getManagementKey(),
+                                  "provided", "compile", "runtime", "test", "system" );
+                }
+            }
+        }
+    }
+
+    private void validateEffectivePluginDependencies( ModelProblemCollector problems, Plugin plugin,
+                                                      ModelBuildingRequest request )
+    {
+        List<Dependency> dependencies = plugin.getDependencies();
+
+        if ( !dependencies.isEmpty() )
+        {
+            String prefix = "build.plugins.plugin[" + plugin.getKey() + "].dependencies.dependency.";
+
+            Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
+
+            for ( Dependency d : dependencies )
+            {
+                validateEffectiveDependency( problems, d, false, prefix, request );
+
+                validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey() );
+
+                validateEnum( prefix + "scope", problems, errOn30, d.getScope(), d.getManagementKey(), "compile",
+                              "runtime", "system" );
+            }
+        }
+    }
+
+    private void validateEffectiveDependency( ModelProblemCollector problems, Dependency d, boolean management,
+                                              String prefix, ModelBuildingRequest request )
+    {
         validateId( prefix + "artifactId", problems, d.getArtifactId(), d.getManagementKey() );
 
         validateId( prefix + "groupId", problems, d.getGroupId(), d.getManagementKey() );
 
-            if ( !managed )
+        if ( !management )
         {
             validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, d.getType(), d.getManagementKey() );
 
-                validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, d.getVersion(),
-                                        d.getManagementKey() );
+            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, d.getVersion(), d.getManagementKey() );
         }
 
         if ( "system".equals( d.getScope() ) )
@@ -420,24 +461,6 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )
             addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "must be omitted."
                 + " This field may only be specified for a dependency with system scope." );
         }
-
-            if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )
-            {
-                validateBoolean( prefix + "optional", problems, errOn30, d.getOptional(), d.getManagementKey() );
-
-                if ( !managed )
-                {
-                    validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey() );
-
-                    /*
-                     * TODO: Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc. In
-                     * order to don't break backward-compat with those, only warn but don't error out.
-                     */
-                    validateEnum( prefix + "scope", problems, Severity.WARNING, d.getScope(), d.getManagementKey(),
-                                  "provided", "compile", "runtime", "test", "system" );
-                }
-            }
-        }
     }
 
     private void validateRepositories( ModelProblemCollector problems, List<Repository> repositories, String prefix,
