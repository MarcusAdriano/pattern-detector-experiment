diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index 86815460..bf69d3e8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -23,6 +23,7 @@
  import java.net.InetAddress;
  import java.util.*;
  import java.util.concurrent.locks.Condition;
+ import java.util.concurrent.CountDownLatch;
 
  import com.google.common.collect.ArrayListMultimap;
  import com.google.common.collect.HashMultimap;
@@ -67,50 +68,57 @@ public BootStrapper(InetAddress address, Token token, TokenMetadata tmd)
         tokenMetadata = tmd;
     }
 
-    public void startBootstrap() throws IOException
+    public void bootstrap() throws IOException
     {
         if (logger.isDebugEnabled())
             logger.debug("Beginning bootstrap process");
 
-        final Multimap<InetAddress, String> bootstrapNodes = HashMultimap.create();
         final Multimap<String, Map.Entry<InetAddress, Collection<Range>>> rangesToFetch = HashMultimap.create();
 
+        int requests = 0;
         for (String table : DatabaseDescriptor.getNonSystemTables())
         {
             Map<InetAddress, Collection<Range>> workMap = getWorkMap(getRangesWithSources(table)).asMap();
             for (Map.Entry<InetAddress, Collection<Range>> entry : workMap.entrySet())
             {
-                bootstrapNodes.put(entry.getKey(), table);
+                requests++;
                 rangesToFetch.put(table, entry);
             }
         }
 
+        final CountDownLatch latch = new CountDownLatch(requests);
         for (final String table : rangesToFetch.keySet())
         {
             /* Send messages to respective folks to stream data over to me */
             for (Map.Entry<InetAddress, Collection<Range>> entry : rangesToFetch.get(table))
             {
                 final InetAddress source = entry.getKey();
+                Collection<Range> ranges = entry.getValue();
                 final Runnable callback = new Runnable()
                 {
                     public void run()
                     {
-                        synchronized (bootstrapNodes)
-                        {
-                            bootstrapNodes.remove(source, table);
+                        latch.countDown();
                             if (logger.isDebugEnabled())
-                                logger.debug(String.format("Removed %s/%s as a bootstrap source; remaining is [%s]",
-                                                           source, table, StringUtils.join(bootstrapNodes.keySet(), ", ")));
-                            if (bootstrapNodes.isEmpty())
-                                StorageService.instance.finishBootstrapping();
-                        }
+                            logger.debug(String.format("Removed %s/%s as a bootstrap source; remaining is %s",
+                                                       source, table, latch.getCount()));
                     }
                 };
                 if (logger.isDebugEnabled())
-                    logger.debug("Bootstrapping from " + source + " ranges " + StringUtils.join(entry.getValue(), ", "));
-                StreamIn.requestRanges(source, table, entry.getValue(), callback);
+                    logger.debug("Bootstrapping from " + source + " ranges " + StringUtils.join(ranges, ", "));
+                StreamIn.requestRanges(source, table, ranges, callback);
             }
         }
+
+        try
+        {
+            latch.await();
+            StorageService.instance.finishBootstrapping();
+        }
+        catch (InterruptedException e)
+        {
+            throw new AssertionError(e);
+        }
     }
 
     /**
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 385b335e..293c56c4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -394,7 +394,10 @@ public synchronized void initServer() throws IOException
             Token token = BootStrapper.getBootstrapToken(tokenMetadata_, StorageLoadBalancer.instance.getLoadInfo());
             // don't bootstrap if there are no tables defined.
             if (DatabaseDescriptor.getNonSystemTables().size() > 0)
-                startBootstrap(token);
+            {
+                bootstrap(token);
+                assert !isBootstrapMode; // bootstrap will block until finishec
+            }
             else
             {
                 isBootstrapMode = false;
@@ -403,18 +406,6 @@ public synchronized void initServer() throws IOException
                 Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.normal(token));
                 setMode("Normal", false);
             }
-            // don't finish startup (enabling thrift) until after bootstrap is done
-            while (isBootstrapMode)
-            {
-                try
-                {
-                    Thread.sleep(100);
-                }
-                catch (InterruptedException e)
-                {
-                    throw new AssertionError(e);
-                }
-            }
         }
         else
         {
@@ -457,7 +448,7 @@ private void setMode(String m, boolean log)
             logger_.info(m);
     }
 
-    private void startBootstrap(Token token) throws IOException
+    private void bootstrap(Token token) throws IOException
     {
         isBootstrapMode = true;
         SystemTable.updateToken(token); // DON'T use setToken, that makes us part of the ring locally which is incorrect until we are done bootstrapping
@@ -472,7 +463,7 @@ private void startBootstrap(Token token) throws IOException
             throw new AssertionError(e);
         }
         setMode("Bootstrapping", true);
-        new BootStrapper(FBUtilities.getLocalAddress(), token, tokenMetadata_).startBootstrap(); // handles token update
+        new BootStrapper(FBUtilities.getLocalAddress(), token, tokenMetadata_).bootstrap(); // handles token update
     }
 
     public boolean isBootstrapMode()
@@ -1710,7 +1701,7 @@ public void runMayThrow() throws IOException
                     bootstrapToken = BootStrapper.getBalancedToken(tokenMetadata_, StorageLoadBalancer.instance.getLoadInfo());
                 }
                 logger_.info("re-bootstrapping to new token {}", bootstrapToken);
-                startBootstrap(bootstrapToken);
+                bootstrap(bootstrapToken);
             }
         };
         unbootstrap(finishMoving);
