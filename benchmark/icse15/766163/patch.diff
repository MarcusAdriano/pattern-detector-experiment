diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassInvestigator.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassInvestigator.java
index 739c2689..99cbb7bc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassInvestigator.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassInvestigator.java
@@ -22,20 +22,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.iapi.services.classfile;
 
 
+import java.io.IOException;
 import java.io.InputStream;
+import java.util.Collections;
 import java.util.Enumeration;
-
-import java.io.IOException;
-import java.util.Vector;
-
-import org.apache.derby.iapi.services.classfile.VMDescriptor;
-import org.apache.derby.iapi.services.classfile.VMDescriptor;
 import java.util.HashSet;
-
 import java.util.Hashtable;
 import java.util.Vector;
-import java.util.Enumeration;
-import java.util.Collections;
+
+import org.apache.derby.iapi.services.io.DataInputUtil;
 
 
 /** 
@@ -305,13 +300,12 @@ private void processCodeAttribute(ClassMember member, AttributeEntry ae) throws
 
 		ClassInput ci = new ClassInput(new java.io.ByteArrayInputStream(ae.infoIn));
 
-
-		ci.skipBytes(4); // puts us at code_length
+		DataInputUtil.skipFully(ci, 4);// puts us at code_length
 		int len = ci.getU4();
-		ci.skipBytes(len); // puts us at exception_table_length
+		DataInputUtil.skipFully(ci, len);// puts us at exception_table_length
 		int count = ci.getU2();
 		if (count != 0)
-			ci.skipBytes(8 * count);
+			DataInputUtil.skipFully(ci, 8 * count);
 
 		int nonAttrLength = 4 + 4 + len + 2 + (8 * count);
 
@@ -332,7 +326,7 @@ private void processCodeAttribute(ClassMember member, AttributeEntry ae) throws
 				System.err.println("ERROR - Unknown code attribute " + name);
 
 			len = ci.getU4();
-			ci.skipBytes(len);
+			DataInputUtil.skipFully(ci, len);
 		}
 
 		if (newCount != 0) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java
index e69de29b..8d8982a5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java
@@ -0,0 +1,61 @@
+/*
+
+   Derby - Class org.apache.derby.iapi.services.io.DataInputUtil
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.iapi.services.io;
+
+import java.io.DataInput;
+import java.io.IOException;
+
+/**
+ * A util class for DataInput.
+ */
+public final class DataInputUtil {
+
+    /**
+     * Skips requested number of bytes,
+     * throws EOFException if there is too few bytes in the DataInput.
+     * @param in
+     *      DataInput to be skipped.
+     * @param skippedBytes
+     *      number of bytes to skip. if skippedBytes <= zero, do nothing.
+     * @throws EOFException
+     *      if EOF meets before requested number of bytes are skipped.
+     * @throws IOException
+     *      if IOException occurs. It doesn't contain EOFException.
+     * @throws NullPointerException
+     *      if the param 'in' equals null.
+     */
+    public static void skipFully(DataInput in, int skippedBytes)
+    throws IOException {
+        if (in == null) {
+            throw new NullPointerException();
+        }
+
+        while (skippedBytes > 0) {
+            int skipped = in.skipBytes(skippedBytes);
+            if (skipped == 0) {
+                in.readByte();
+                skipped++;
+            }
+            skippedBytes -= skipped;
+        }
+    }
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java
index 943cf844..83d0040b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java
@@ -20,19 +20,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 package org.apache.derby.impl.store.raw.data;
 
-import org.apache.derby.iapi.store.raw.RecordHandle;
-import org.apache.derby.iapi.services.sanity.SanityManager;
-
-import java.io.IOException;
 import java.io.EOFException;
-
+import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.OutputStream;
 
+import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.services.io.ArrayInputStream;
 import org.apache.derby.iapi.services.io.CompressedNumber;
+import org.apache.derby.iapi.services.io.DataInputUtil;
+import org.apache.derby.iapi.services.sanity.SanityManager;
 
-import java.io.InputStream;
 
 /**
     A class to provide static methods to manipulate fields in the field header.
@@ -685,7 +683,7 @@ else if ((status & FIELD_NULL) != 0)
                     CompressedNumber.sizeInt(fieldDataLength);
 
                 if (diffLen != 0)
-                    in.skipBytes(diffLen);
+                    DataInputUtil.skipFully(in, diffLen);
             } 
 
             return(fieldDataLength);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
index c7feaa2a..05cd6ef5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.io.ArrayInputStream;
 import org.apache.derby.iapi.services.io.ArrayOutputStream;
 import org.apache.derby.iapi.services.io.CompressedNumber;
+import org.apache.derby.iapi.services.io.DataInputUtil;
 import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
 import org.apache.derby.iapi.services.io.ErrorObjectInput;
 import org.apache.derby.iapi.services.io.FormatIdInputStream;
@@ -4662,7 +4663,7 @@ private final void readOneColumnFromPage(
                                 inUserCode = null;
                                 int unread = lrdi.clearLimit();
                                 if (unread != 0)
-                                    lrdi.skipBytes(unread);
+                                    DataInputUtil.skipFully(lrdi, unread);
                             }
                             else
                             {
@@ -4711,7 +4712,7 @@ private final void readOneColumnFromPage(
                         inUserCode = null;
                         int unread = lrdi.clearLimit();
                         if (unread != 0)
-                            lrdi.skipBytes(unread);
+                            DataInputUtil.skipFully(lrdi, unread);
                     }
 
                 }
@@ -5258,7 +5259,7 @@ private final boolean readRecordFromStream(
 						inUserCode = null;
 						int unread = dataIn.clearLimit();
 						if (unread != 0)
-							dataIn.skipBytes(unread);
+							DataInputUtil.skipFully(dataIn, unread);
 					}
                     else
                     {
@@ -5315,7 +5316,7 @@ private final boolean readRecordFromStream(
 				inUserCode = null;
 				int unread = dataIn.clearLimit();
 				if (unread != 0)
-					dataIn.skipBytes(unread);
+					DataInputUtil.skipFully(dataIn, unread);
 
 				continue;
 			}
@@ -5561,7 +5562,7 @@ else if (columnId < highestColumnOnPage)
                                     inUserCode = null;
                                     int unread = dataIn.clearLimit();
                                     if (unread != 0)
-                                        dataIn.skipBytes(unread);
+                                        DataInputUtil.skipFully(dataIn, unread);
                                 }
                                 else
                                 {
@@ -5626,7 +5627,7 @@ else if (columnId < highestColumnOnPage)
                             inUserCode = null;
                             int unread = dataIn.clearLimit();
                             if (unread != 0)
-                                dataIn.skipBytes(unread);
+                                DataInputUtil.skipFully(dataIn, unread);
                         }
                     }
                     else
@@ -7711,7 +7712,7 @@ public void skipField(ObjectInput in) throws IOException {
 		int fieldDataLength = StoredFieldHeader.readFieldDataLength(in, fieldStatus, slotFieldSize);
 
 		if (fieldDataLength != 0) {
-			in.skipBytes(fieldDataLength);
+			DataInputUtil.skipFully(in, fieldDataLength);
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/DataInputUtilTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/DataInputUtilTest.java
index 3f24d583..77032596 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/DataInputUtilTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/DataInputUtilTest.java
@@ -1 +1,76 @@
   + native
+/*
+
+   Derby - Class org.apache.derbyTesting.unitTests.junit.DataInputUtilTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+package org.apache.derbyTesting.unitTests.junit;
+
+import java.io.ByteArrayInputStream;
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.EOFException;
+import java.io.IOException;
+
+import org.apache.derby.iapi.services.io.DataInputUtil;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test case for DataInputUtil.
+ */
+public class DataInputUtilTest extends TestCase {
+
+    public DataInputUtilTest(String name) {
+        super(name);
+    }
+
+    public void testSkipFully() throws IOException{
+        int length = 1024;
+
+        DataInput di = new DataInputStream(
+                new ByteArrayInputStream(new byte[length]));
+        DataInputUtil.skipFully(di, length);
+        try {
+            di.readByte();
+            fail("Should have met EOF!");
+        } catch (EOFException e) {
+            assertTrue(true);
+        }
+
+        di = new DataInputStream(
+                new ByteArrayInputStream(new byte[length]));
+        DataInputUtil.skipFully(di, length - 1);
+        di.readByte();
+        try {
+            di.readByte();
+            fail("Should have met EOF!");
+        } catch (EOFException e) {
+            assertTrue(true);
+        }
+    }
+
+    /**
+     * Returns a suite of tests.
+     */
+    public static Test suite() {
+        return new TestSuite(DataInputUtilTest.class, "DataInputUtilTest tests");
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
index 87439ee7..bcd41ece 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
@@ -59,6 +59,7 @@ public static Test suite() throws SQLException {
         suite.addTest(PathUtilTest.suite());
         suite.addTest(VirtualFileTest.suite());
         suite.addTest(ReaderToUTF8StreamTest.suite());
+        suite.addTest(DataInputUtilTest.suite());
 
         return suite;
     }
