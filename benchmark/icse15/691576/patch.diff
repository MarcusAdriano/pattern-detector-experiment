diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DssTrace.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DssTrace.java
index 36eb50d9..4489c6ed 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DssTrace.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DssTrace.java
@@ -24,12 +24,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 
-import org.apache.derby.iapi.util.PrivilegedFileOps;
-
-
 // Generic process and error tracing encapsulation.
 // This class also traces a DRDA communications buffer.
 // The value of the hex bytes are traced along with
@@ -179,10 +177,16 @@ protected void startComBufferTrace (final String fileName) throws Exception
                 // Attempt to make the trace directory if it does not exist.
                 // If we can't create the directory the exception will occur 
                 // when trying to create the trace file.
-                File traceDirectory = new File(fileName).getParentFile();
-                if (traceDirectory != null)
-                {
-                    PrivilegedFileOps.mkdirs(traceDirectory);
+                final File traceDirectory = new File(fileName).getParentFile();
+                if (traceDirectory != null) {
+                    AccessController.doPrivileged(
+                            new PrivilegedAction() {
+                                public Object run() {
+                                    traceDirectory.mkdirs();
+                                    return null;
+                                }
+                            });
+
                 }
                 // The writer will be buffered for effeciency.
                 comBufferWriter =  ((PrintWriter)AccessController.doPrivileged(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedFileOps.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedFileOps.java
index 7de19ebc..e69de29b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedFileOps.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedFileOps.java
@@ -1,149 +0,0 @@
-/*
-
-   Derby - Class org.apache.derby.iapi.util.PrivilegedFileOps
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to you under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-package org.apache.derby.iapi.util;
-
-import java.io.File;
-
-import java.security.AccessController;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
-
-/**
- * A collection of operations on {@link java.io.File} that wraps the
- * operations in privileged block of code.
- * <p>
- * Derby needs to use privileged blocks in some places to avoid
- * {@link SecurityException}s being thrown, as the required privileges are
- * often granted to Derby itself, but not the higher level application code.
- * <p>
- * Feel free to add new operations as they are needed. This class is not
- * intended to implement the full set of operations defined by
- * {@link java.io.File}.
- */
-public final class PrivilegedFileOps {
-
-    /**
-     * Check if the file exists.
-     *
-     * @return <code>true</code> if file exists, <code>false</code> otherwise
-     * @throws SecurityException if the required permissions to read the file,
-     *      or the path it is in, are missing
-     * @see File#exists
-     */
-    public static boolean exists(final File file)
-            throws SecurityException {
-        if (file == null) {
-            throw new IllegalArgumentException("file cannot be <null>");
-        }
-        try {
-            return ((Boolean)AccessController.doPrivileged(
-                        new PrivilegedExceptionAction() {
-                            public Object run() throws SecurityException {
-                                return new Boolean(file.exists());
-                            }
-                        })).booleanValue();
-        } catch (PrivilegedActionException pae) {
-            throw (SecurityException)pae.getException();
-        }
-    }
-
-    /**
-     * Check if the pathname is a directory.
-     *
-     * @return <code>true</code> if pathname points to a directory,
-     *      <code>false</code> otherwise
-     * @throws SecurityException if the required permissions to access the path
-     *      are missing
-     * @see File#isDirectory
-     */
-    public static boolean isDirectory(final File file)
-            throws SecurityException {
-        if (file == null) {
-            throw new IllegalArgumentException("file cannot be <null>");
-        }
-        try {
-            return ((Boolean)AccessController.doPrivileged(
-                        new PrivilegedExceptionAction() {
-                            public Object run() throws SecurityException {
-                                return new Boolean(file.isDirectory());
-                            }
-                        })).booleanValue();
-        } catch (PrivilegedActionException pae) {
-            throw (SecurityException)pae.getException();
-        }
-    }
-
-    /**
-     * Return a list of strings denoting the contents of the given directory.
-     * <p>
-     * Note the <code>null</code> is returned if a non-directory path is passed
-     * to this method.
-     *
-     * @param directory the directory to list the contents of
-     * @return A list of the contents in the directory. If
-     *      <code>directory</code> is not denoting a directory, <code>null<code>
-     *      is returned (as per {@link File#list}).
-     * @throws SecurityException if the required permissions to access the path
-     *      are missing
-     * @see File#list
-     */
-    public static String[] list(final File directory)
-            throws SecurityException {
-        if (directory == null) {
-            throw new IllegalArgumentException("file cannot be <null>");
-        }
-        try {
-            return (String[])AccessController.doPrivileged(
-                        new PrivilegedExceptionAction() {
-                            public Object run() throws SecurityException {
-                                return directory.list();
-                            }
-                        });
-        } catch (PrivilegedActionException pae) {
-            throw (SecurityException)pae.getException();
-        }
-    }
-    
-    /**
-     * Creates the directory named by this abstract pathname and
-     * parent directories
-     * 
-     * @param file   directory to create
-     * @return {@code true} if directory was created.
-     */
-    public static boolean mkdirs(final File file) {
-     
-        if (file == null) {
-            throw new IllegalArgumentException("file cannot be <null>");
-        }
-        try {
-            return ((Boolean) AccessController.doPrivileged(
-                        new PrivilegedExceptionAction() {
-                            public Object run() throws SecurityException {
-                                return new Boolean(file.mkdirs());
-                            }
-                        })).booleanValue();
-        } catch (PrivilegedActionException pae) {
-            throw (SecurityException)pae.getException();
-        }
-    }
-    
-} // End class PrivilegedFileOps
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java
index 09201f3b..cfa4bf28 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java
@@ -22,12 +22,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.load;
 
 import java.sql.Connection;
-import java.sql.ResultSet;
 import java.io.IOException;
 import java.sql.SQLException;
-import java.util.*;    
-import org.apache.derby.iapi.util.PrivilegedFileOps;
 import java.io.File;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import org.apache.derby.iapi.error.PublicAPI;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
@@ -126,7 +125,7 @@ private boolean lobsFileExists(String fileName) throws SQLException {
         }
             File file = new File(fileName);
 
-            return PrivilegedFileOps.exists(file);
+            return fileExists(file);
 
         }
     /**
@@ -143,7 +142,23 @@ private boolean dataFileExists(String fileName) throws SQLException {
         }
             File file = new File(fileName);
             
-           return PrivilegedFileOps.exists(file); 
+            return fileExists(file);
+        }
+
+    /**
+     * Checks if the specified file exists.
+     *
+     * @param file the file to check
+     * @return {@code true} if the file exists, {@code false} if not.
+     * @throws SecurityException if the required privileges are missing
+     */
+    private final boolean fileExists(final File file) {
+        return ((Boolean)AccessController.doPrivileged(
+                new PrivilegedAction() {
+                    public Object run() {
+                        return new Boolean(file.exists());
+                    }
+            })).booleanValue();
         }
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
index 721fd4b2..81f60f8b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
@@ -21,7 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.services.monitor;
 
-import org.apache.derby.iapi.util.PrivilegedFileOps;
 import org.apache.derby.iapi.reference.MessageId;
 import org.apache.derby.iapi.reference.SQLState;
 
@@ -572,11 +571,11 @@ public Object run()
 		{
 			//First make sure backup service directory exists in the specified path
 			File backupRoot = new File(restoreFrom);
-			if(PrivilegedFileOps.exists(backupRoot))
+			if (fileExists(backupRoot))
 			{
 				//First make sure backup have service.properties
 				File bserviceProp = new File(restoreFrom, PersistentService.PROPERTIES_NAME);
-				if(PrivilegedFileOps.exists(bserviceProp))
+				if(fileExists(bserviceProp))
 				{
 					//create service root if required
 					if(createRoot)
@@ -822,6 +821,21 @@ public boolean isSameService(String serviceName1, String serviceName2)
 		return serviceName1.equals(serviceName2);
 	} // end of isSameService
 
+    /**
+     * Checks if the specified file exists.
+     *
+     * @param file the file to check
+     * @return {@code true} if the file exists, {@code false} if not.
+     * @throws SecurityException if the required privileges are missing
+     */
+    private final boolean fileExists(final File file) {
+        return ((Boolean)AccessController.doPrivileged(
+                new PrivilegedAction() {
+                    public Object run() {
+                        return new Boolean(file.exists());
+                    }
+            })).booleanValue();
+    }
 
     /**
      * Get the StorageFactory implementation for this PersistentService
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index f17db5d7..8d8658ff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -22,7 +22,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.store.raw.data;
 
 
-import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.reference.MessageId;
 
 import org.apache.derby.impl.store.raw.data.AllocationActions;
@@ -35,7 +34,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.impl.store.raw.data.ReclaimSpace;
 
 import org.apache.derby.iapi.services.info.ProductVersionHolder;
-import org.apache.derby.iapi.services.info.ProductGenusNames;
 
 import org.apache.derby.iapi.services.cache.CacheFactory;
 import org.apache.derby.iapi.services.cache.CacheManager;
@@ -50,7 +48,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.monitor.PersistentService;
 import org.apache.derby.iapi.services.diag.Performance;
 import org.apache.derby.iapi.services.sanity.SanityManager;
-import org.apache.derby.iapi.services.io.FormatIdUtil;
 import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
 
 import org.apache.derby.iapi.error.StandardException;
@@ -67,7 +64,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.raw.LockingPolicy;
 import org.apache.derby.iapi.store.raw.Page;
 import org.apache.derby.iapi.store.raw.RawStoreFactory;
-import org.apache.derby.iapi.store.raw.RecordHandle;
 import org.apache.derby.iapi.store.raw.StreamContainerHandle;
 import org.apache.derby.iapi.store.raw.Transaction;
 import org.apache.derby.iapi.store.raw.xact.RawTransaction;
@@ -86,7 +82,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.util.ByteArray;
 import org.apache.derby.iapi.services.io.FileUtil;
 import org.apache.derby.iapi.util.CheapDateFormatter;
-import org.apache.derby.iapi.util.PrivilegedFileOps;
 import org.apache.derby.iapi.util.ReuseFactory;
 import org.apache.derby.iapi.services.property.PropertyUtil;
 
@@ -95,8 +90,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Enumeration;
 
 import java.io.File;
-import java.io.FilePermission;
-import java.io.OutputStream;
 import java.io.IOException;
 
 import java.security.AccessController;
@@ -2469,8 +2462,8 @@ public void backupDataFiles(Transaction rt, File backupDir) throws StandardExcep
 	private void restoreDataDirectory(String backupPath) 
         throws StandardException
 	{
-        File bsegdir;   //segment directory in the backup
-        File backupRoot = new java.io.File(backupPath);	//root dir of backup db
+        // Root dir of backup db
+        final File backupRoot = new java.io.File(backupPath);		
 		
         /* To be safe we first check if the backup directory exist and it has
          * atleast one seg* directory before removing the current data directory.
@@ -2478,7 +2471,12 @@ private void restoreDataDirectory(String backupPath)
          * This will fail with a security exception unless the database engine 
          * and all its callers have permission to read the backup directory.
          */
-        String[] bfilelist = PrivilegedFileOps.list(backupRoot);
+        String[] bfilelist = (String[])AccessController.doPrivileged(
+                                            new PrivilegedAction() {
+                                                public Object run() {
+                                                    return backupRoot.list();
+                                                }
+                                            });
         if(bfilelist !=null)
         {
             boolean segmentexist = false;
@@ -2487,15 +2485,31 @@ private void restoreDataDirectory(String backupPath)
                 //check if it is a  seg* directory
                 if(bfilelist[i].startsWith("seg"))
                 {
-                    bsegdir = new File(backupRoot , bfilelist[i]);
-                    if(PrivilegedFileOps.exists(bsegdir) &&
-                       PrivilegedFileOps.isDirectory(bsegdir))
-                    {
+                    // Segment directory in the backup
+                    final File bsegdir = new File(backupRoot , bfilelist[i]);
+                    boolean bsegdirExists = ((Boolean)
+                            AccessController.doPrivileged(
+                                new PrivilegedAction() {
+                                    public Object run() {
+                                        return new Boolean(bsegdir.exists());
+                                    }
+                            })).booleanValue();
+                    if (bsegdirExists) {
+                        // Make sure the file object points at a directory.
+                        boolean isDirectory = ((Boolean)
+                            AccessController.doPrivileged(
+                            new PrivilegedAction() {
+                                public Object run() {
+                                    return new Boolean(bsegdir.isDirectory());
+                                }
+                            })).booleanValue();
+                        if (isDirectory) {
                         segmentexist = true;
                         break;
                     }
                 }
             }
+            }
 		
             if(!segmentexist)
             {
@@ -2621,7 +2635,7 @@ public StorageFactory getStorageFactory()
     }
 
     // PrivilegedExceptionAction method
-    public final Object run() throws Exception
+    public final Object run() throws IOException, StandardException
     {
         switch( actionCode)
         {
