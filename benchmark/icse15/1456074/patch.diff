diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index b0a221ba..1c833048 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -447,9 +447,11 @@ public Query rewrite(IndexReader reader) throws IOException {
   @Override
   public void extractTerms(Set<Term> terms) {
       for (BooleanClause clause : clauses) {
+      if (clause.getOccur() != Occur.MUST_NOT) {
           clause.getQuery().extractTerms(terms);
         }
   }
+  }
 
   @Override @SuppressWarnings("unchecked")
   public BooleanQuery clone() {
diff --git a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
index f5f8eb1d..55ac68e8 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
@@ -406,4 +406,32 @@ public void testPassageRanking() throws Exception {
     ir.close();
     dir.close();
   }
+
+  public void testBooleanMustNot() throws Exception {
+    Directory dir = newDirectory();
+    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);
+    FieldType positionsType = new FieldType(TextField.TYPE_STORED);
+    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    Field body = new Field("body", "This sentence has both terms.  This sentence has only terms.", positionsType);
+    Document document = new Document();
+    document.add(body);
+    iw.addDocument(document);
+    IndexReader ir = iw.getReader();
+    iw.close();
+    IndexSearcher searcher = newSearcher(ir);
+    BooleanQuery query = new BooleanQuery();
+    query.add(new TermQuery(new Term("body", "terms")), BooleanClause.Occur.SHOULD);
+    BooleanQuery query2 = new BooleanQuery();
+    query.add(query2, BooleanClause.Occur.SHOULD);
+    query2.add(new TermQuery(new Term("body", "both")), BooleanClause.Occur.MUST_NOT);
+    TopDocs topDocs = searcher.search(query, 10);
+    assertEquals(1, topDocs.totalHits);
+    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);
+    String snippets[] = highlighter.highlight("body", query, searcher, topDocs, 2);
+    assertEquals(1, snippets.length);
+    assertFalse(snippets[0].contains("<b>both</b>"));
+    ir.close();
+    dir.close();
+  }
 }
