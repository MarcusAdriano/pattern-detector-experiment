diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 028fb6e1..a2af56d0 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -260,7 +260,6 @@ public ClientState state()
     public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("get_slice");
         
         state().hasColumnFamilyAccess(column_parent.column_family, Permission.READ);
@@ -270,7 +269,6 @@ public ClientState state()
     public Map<ByteBuffer, List<ColumnOrSuperColumn>> multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("multiget_slice");
 
         state().hasColumnFamilyAccess(column_parent.column_family, Permission.READ);
@@ -309,7 +307,6 @@ public ClientState state()
     public ColumnOrSuperColumn get(ByteBuffer key, ColumnPath column_path, ConsistencyLevel consistency_level)
     throws InvalidRequestException, NotFoundException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("get");
         
         state().hasColumnFamilyAccess(column_path.column_family, Permission.READ);
@@ -338,7 +335,6 @@ public ColumnOrSuperColumn get(ByteBuffer key, ColumnPath column_path, Consisten
     public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("get_count");
 
         state().hasColumnFamilyAccess(column_parent.column_family, Permission.READ);
@@ -349,7 +345,6 @@ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate
     public Map<ByteBuffer, Integer> multiget_count(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("multiget_count");
 
         state().hasColumnFamilyAccess(column_parent.column_family, Permission.READ);
@@ -367,7 +362,6 @@ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate
     public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("insert");
 
         state().hasColumnFamilyAccess(column_parent.column_family, Permission.WRITE);
@@ -391,7 +385,6 @@ public void insert(ByteBuffer key, ColumnParent column_parent, Column column, Co
     public void batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("batch_mutate");
         
         List<String> cfamsSeen = new ArrayList<String>();
@@ -428,7 +421,6 @@ public void batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mutation_map
     public void remove(ByteBuffer key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("remove");
 
         state().hasColumnFamilyAccess(column_path.column_family, Permission.WRITE);
@@ -482,7 +474,6 @@ public KsDef describe_keyspace(String table) throws NotFoundException, InvalidRe
     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TException, TimedOutException
     {
-        if (logger.isDebugEnabled())
             logger.debug("range_slice");
 
         String keyspace = state().getKeyspace();
@@ -546,7 +537,6 @@ public KsDef describe_keyspace(String table) throws NotFoundException, InvalidRe
 
     public List<KeySlice> get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
-        if (logger.isDebugEnabled())
             logger.debug("scan");
 
         state().hasColumnFamilyAccess(column_parent.column_family, Permission.READ);
@@ -703,6 +693,7 @@ public Object call() throws Exception
 
     public String system_add_column_family(CfDef cf_def) throws InvalidRequestException, TException
     {
+        logger.debug("add_column_family");
         state().hasColumnFamilyListAccess(Permission.WRITE);
         ThriftValidation.validateCfDef(cf_def);
         try
@@ -726,6 +717,7 @@ public String system_add_column_family(CfDef cf_def) throws InvalidRequestExcept
 
     public String system_drop_column_family(String column_family) throws InvalidRequestException, TException
     {
+        logger.debug("drop_column_family");
         state().hasColumnFamilyListAccess(Permission.WRITE);
         
         try
@@ -749,6 +741,7 @@ public String system_drop_column_family(String column_family) throws InvalidRequ
 
     public String system_add_keyspace(KsDef ks_def) throws InvalidRequestException, TException
     {
+        logger.debug("add_keyspace");
         state().hasKeyspaceListAccess(Permission.WRITE);
         
         // generate a meaningful error if the user setup keyspace and/or column definition incorrectly
@@ -792,6 +785,7 @@ public String system_add_keyspace(KsDef ks_def) throws InvalidRequestException,
     
     public String system_drop_keyspace(String keyspace) throws InvalidRequestException, TException
     {
+        logger.debug("drop_keyspace");
         state().hasKeyspaceListAccess(Permission.WRITE);
         
         try
@@ -816,6 +810,7 @@ public String system_drop_keyspace(String keyspace) throws InvalidRequestExcepti
     /** update an existing keyspace, but do not allow column family modifications. */
     public String system_update_keyspace(KsDef ks_def) throws InvalidRequestException, TException
     {
+        logger.debug("update_keyspace");
         state().hasKeyspaceListAccess(Permission.WRITE);
 
         ThriftValidation.validateTable(ks_def.name);
@@ -848,6 +843,7 @@ public String system_update_keyspace(KsDef ks_def) throws InvalidRequestExceptio
 
     public String system_update_column_family(CfDef cf_def) throws InvalidRequestException, TException
     {
+        logger.debug("update_column_family");
         state().hasColumnFamilyListAccess(Permission.WRITE);
         
         if (cf_def.keyspace == null || cf_def.name == null)
