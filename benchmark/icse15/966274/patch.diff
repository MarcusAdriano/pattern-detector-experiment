diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/util/DataOutputBuffer.java b/cassandra/trunk/src/java/org/apache/cassandra/io/util/DataOutputBuffer.java
index d4c8324c..9044252e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/util/DataOutputBuffer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/util/DataOutputBuffer.java
@@ -28,51 +28,29 @@
  * An implementation of the DataOutputStream interface. This class is completely thread
  * unsafe.
  */
-public class DataOutputBuffer extends DataOutputStream
+public final class DataOutputBuffer extends DataOutputStream
 {
-    private static class Buffer extends ByteArrayOutputStream
-    {
-        public byte[] getData()
-        {
-            return buf;
-        }
-        
-        public int getLength()
-        {
-            return count;
-        }
-        
-        public void reset()
+    public DataOutputBuffer()
         {
-            count = 0;
+        this(128);
         }
         
-        public void write(DataInput in, int len) throws IOException
-        {
-            int newcount = count + len;
-            if (newcount > buf.length)
+    public DataOutputBuffer(int size)
             {
-                byte newbuf[] = new byte[Math.max(buf.length << 1, newcount)];
-                System.arraycopy(buf, 0, newbuf, 0, count);
-                buf = newbuf;
-            }
-            in.readFully(buf, count, len);
-            count = newcount;
-        }
+        super(new OutputBuffer(size));
     }
     
-    private Buffer buffer;
-    
-    /** Constructs a new empty buffer. */
-    public DataOutputBuffer()
+    private OutputBuffer buffer()
     {
-        this(new Buffer());
+        return (OutputBuffer)out;
     }
     
-    private DataOutputBuffer(Buffer buffer)
+    /**
+     * @return The valid contents of the buffer, possibly by copying: only safe for one-time-use buffers.
+     */
+    public byte[] asByteArray()
     {
-        super(buffer);
-        this.buffer = buffer;
+        return buffer().asByteArray();
     }
     
     /**
@@ -81,20 +59,20 @@ private DataOutputBuffer(Buffer buffer)
      */
     public byte[] getData()
     {
-        return buffer.getData();
+        return buffer().getData();
     }
     
     /** Returns the length of the valid data currently in the buffer. */
     public int getLength()
     {
-        return buffer.getLength();
+        return buffer().getLength();
     }
     
     /** Resets the buffer to empty. */
     public DataOutputBuffer reset()
     {
         this.written = 0;
-        buffer.reset();
+        buffer().reset();
         return this;
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/util/OutputBuffer.java b/cassandra/trunk/src/java/org/apache/cassandra/io/util/OutputBuffer.java
index e69de29b..0dab6793 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/util/OutputBuffer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/util/OutputBuffer.java
@@ -0,0 +1,75 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.io.util;
+
+import java.io.ByteArrayOutputStream;
+import java.io.DataInput;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+/**
+ * Extends ByteArrayOutputStream to minimize copies.
+ */
+public final class OutputBuffer extends ByteArrayOutputStream
+{
+    public OutputBuffer()
+    {
+        this(128);
+    }
+
+    public OutputBuffer(int size)
+    {
+        super(size);
+    }
+
+    public byte[] getData()
+    {
+        return buf;
+    }
+    
+    public int getLength()
+    {
+        return count;
+    }
+    
+    public void write(DataInput in, int len) throws IOException
+    {
+        int newcount = count + len;
+        if (newcount > buf.length)
+        {
+            byte newbuf[] = new byte[Math.max(buf.length << 1, newcount)];
+            System.arraycopy(buf, 0, newbuf, 0, count);
+            buf = newbuf;
+        }
+        in.readFully(buf, count, len);
+        count = newcount;
+    }
+    
+    /**
+     * @return The valid contents of the buffer, possibly by copying: only safe for one-time-use buffers.
+     */
+    public byte[] asByteArray()
+    {
+        if (count == buf.length)
+            // no-copy
+            return buf;
+        // copy
+        return this.toByteArray();
+    }
+}
