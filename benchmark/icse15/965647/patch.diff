diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index ee23ed15..3e4089de 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -91,8 +91,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.io.File;
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+
+import java.net.URL;
+import java.net.URLDecoder;
 
 import java.security.AccessController;
+import java.security.CodeSource;
 import java.security.PrivilegedAction;
 import java.security.PrivilegedExceptionAction;
 import java.security.PrivilegedActionException;
@@ -138,6 +143,10 @@ Currently only getContainerClass() is abstract, there are probably more
 
 	private     ProductVersionHolder jbmsVersion;
 
+	private     String          jvmVersion;
+	
+	private     String          jarCPath;
+
 	private     RawStoreFactory	rawStoreFactory; // associated raw store factory
 
 	private     String			dataDirectory;	 // root directory of files.
@@ -262,6 +271,10 @@ public void	boot(boolean create, Properties startParams)
 
 		jbmsVersion = Monitor.getMonitor().getEngineVersion();
 
+		jvmVersion = buildJvmVersion();
+		
+		jarCPath = jarClassPath(getClass());
+
 		dataDirectory = startParams.getProperty(PersistentService.ROOT);
 
 		UUIDFactory uf = Monitor.getMonitor().getUUIDFactory();
@@ -360,9 +373,10 @@ public void	boot(boolean create, Properties startParams)
 			   MessageService.getTextMessage(MessageId.STORE_BOOT_MSG,
                                              jbmsVersion,
                                              identifier,
-                                             dataDirectory + " " + readOnlyMsg,
                                              // cast to Object so we get object hash code
-                                             (Object) this.getClass().getClassLoader()
+                                             (Object) this.getClass().getClassLoader(),
+                                             dataDirectory + " " + readOnlyMsg 
+                                             +"\nLoaded from " + jarCPath + "\n" +jvmVersion
                                              ));
 
         if (logBootTrace)
@@ -2146,6 +2160,68 @@ public void removeOldVersionOfContainers(boolean inRecovery)
     }
 
 
+	/**
+     * Return a jar file by asking the class's 
+     * class loader for the location where the class was loaded from. 
+     * If no value, it returns null
+     * @param cls the Class to ask to print the class name of an object
+     *
+     * @return the ClassPath of a jar file
+     **/
+    private static String jarClassPath(final Class cls)
+    {
+        return (String)AccessController.doPrivileged( new PrivilegedAction()
+        {
+          public Object run()
+          {
+              CodeSource cs = null;
+              try {
+                  cs = cls.getProtectionDomain().getCodeSource();
+              }
+              catch (SecurityException se) {
+                  return se.getMessage();
+              }
+  
+              if ( cs == null )
+                  return null;        
+      
+              URL result = cs.getLocation ();
+      
+              return result.toString();
+          }
+        });
+    }
+    
+    
+    /**
+     * Return values of system properties that identify the JVM. 
+     * Will catch SecurityExceptions and note them for displaying information.
+     * @return the Java system property value from the JVM or a string capturing a
+     * security exception.
+     */
+    private static String buildJvmVersion () {
+        return (String)AccessController.doPrivileged( new PrivilegedAction()
+        {
+           public Object run()
+           {      
+             String jvmversion = "";
+             try {
+                 String currentProp  = PropertyUtil.getSystemProperty("java.vendor");
+                 if ( currentProp != null)
+                     jvmversion = "java.vendor=" + currentProp;
+                 if ((currentProp = PropertyUtil.getSystemProperty("java.runtime.version")) != null)
+                     jvmversion += "\njava.runtime.version=" + currentProp;
+                 if ((currentProp = PropertyUtil.getSystemProperty("java.fullversion")) != null)
+                     jvmversion += "\njava.fullversion=" + currentProp ;         
+              }
+              catch (SecurityException se) {
+                   return se.getMessage();
+              }
+              return jvmversion;
+            }
+        });
+    } // end of buildjvmVersion
+        
 	/**
 		Returns the encryption block size used by the algorithm at time of
 		creation of an encrypted database
