diff --git a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
index 7a14d520..79da29fb 100644
--- a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
@@ -39,7 +39,7 @@
  * <p>
  * The implementation buffers input until a full stop punctuation character (U+3002)
  * or EOF is reached in order to not keep a copy of the character stream in memory.
- * Vertical iteration marks, which are even rarer than horizonal iteration marks in
+ * Vertical iteration marks, which are even rarer than horizontal iteration marks in
  * contemporary Japanese, are unsupported.
  * </p>
  */
diff --git a/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie.java b/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie.java
index 35fe110b..e2e91737 100644
--- a/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie.java
+++ b/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie.java
@@ -63,7 +63,7 @@ created by Leo Galambos (Leo.G@seznam.cz).
 
 /**
  * The MultiTrie is a Trie of Tries. It stores words and their associated patch
- * commands. The MultiTrie handles patch commmands individually (each command by
+ * commands. The MultiTrie handles patch commands individually (each command by
  * itself).
  */
 public class MultiTrie extends Trie {
diff --git a/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2.java b/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2.java
index 15571dc3..be9faa2d 100644
--- a/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2.java
+++ b/lucene/dev/trunk/lucene/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2.java
@@ -64,7 +64,7 @@ created by Leo Galambos (Leo.G@seznam.cz).
  * The MultiTrie is a Trie of Tries.
  * <p>
  * It stores words and their associated patch commands. The MultiTrie handles
- * patch commmands broken into their constituent parts, as a MultiTrie does, but
+ * patch commands broken into their constituent parts, as a MultiTrie does, but
  * the commands are delimited by the skip command.
  */
 public class MultiTrie2 extends MultiTrie {
diff --git a/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java b/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java
index ea69a5f8..534975dd 100644
--- a/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java
+++ b/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java
@@ -243,7 +243,7 @@ public void addValue(BytesRef value) throws IOException {
   /**
    * 
    * @param targetMaxSaturation A number between 0 and 1 describing the % of bits that would ideally be set in the 
-   * result. Lower values have better qccuracy but require more space.
+   * result. Lower values have better accuracy but require more space.
    * @return a smaller FuzzySet or null if the current set is already over-saturated
    */
   public FuzzySet downsize(float targetMaxSaturation)
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java
index 59189460..a3c954ab 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java
@@ -96,7 +96,7 @@
    *  will never be merged. */
   protected int maxMergeDocs = DEFAULT_MAX_MERGE_DOCS;
 
-  /** If the size of the merge segment exceesd this ratio of
+  /** If the size of the merge segment exceeds this ratio of
    *  the total index size then it will remain in
    *  non-compound format even if {@link
    *  #setUseCompoundFile} is {@code true}. */
@@ -420,7 +420,7 @@ public MergeSpecification findForcedMerges(SegmentInfos infos,
     }
 
     // If the segments are already merged (e.g. there's only 1 segment), or
-    // there are <maxNumSegements:.
+    // there are <maxNumSegments:.
     if (isMerged(infos, maxNumSegments, segmentsToMerge)) {
       if (verbose()) {
         message("already merged; skip");
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java
index b671b018..2d2eb0ee 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java
@@ -104,7 +104,7 @@ public void setBaseline(long clockTime) {
   
   /**
    * Syntactic sugar for {@link #setBaseline(long)} using {@link Counter#get()}
-   * on the clock passed to the construcutor.
+   * on the clock passed to the constructor.
    */
   public void setBaseline() {
     setBaseline(clock.get());
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
index ceb91316..56c88ce4 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
@@ -318,7 +318,7 @@ public BufferedIndexInput clone() {
   }
 
   /**
-   * Flushes the in-memory bufer to the given output, copying at most
+   * Flushes the in-memory buffer to the given output, copying at most
    * <code>numBytes</code>.
    * <p>
    * <b>NOTE:</b> this method does not refill the buffer, however it does
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameHashIntCacheLRU.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameHashIntCacheLRU.java
index 43e07042..8a61b0bf 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameHashIntCacheLRU.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameHashIntCacheLRU.java
@@ -23,7 +23,7 @@
  * An an LRU cache of mapping from name to int.
  * Used to cache Ordinals of category paths.
  * It uses as key, hash of the path instead of the path.
- * This way the cahce takes less RAM, but correctness depends on
+ * This way the cache takes less RAM, but correctness depends on
  * assuming no collisions. 
  * 
  * @lucene.experimental
diff --git a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 1760023f..1c7a3413 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -1197,7 +1197,7 @@ public void run() throws Exception {
 
         Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);
 
-        // Get 3 best fragments and seperate with a "..."
+        // Get 3 best fragments and separate with a "..."
         TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));
 
         String result = highlighter.getBestFragments(tokenStream, s, 3, "...");
diff --git a/lucene/dev/trunk/lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java b/lucene/dev/trunk/lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
index 8bf68ff6..f238ba71 100644
--- a/lucene/dev/trunk/lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
+++ b/lucene/dev/trunk/lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
@@ -83,7 +83,7 @@ public void testSweetSpotComputeNorm() {
     }
 
 
-    // seperate sweet spot for certain fields
+    // separate sweet spot for certain fields
 
     final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();
     ssBar.setLengthNormFactors(8,13, 0.5f, false);
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.java
index ae762cde..7f4d727a 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.java
@@ -55,7 +55,7 @@
  * {@link Operator#AND}, if it is, the same operation when an
  * {@link AndQueryNode} is found is applied to it. Each {@link BooleanQueryNode}
  * which direct parent is also a {@link BooleanQueryNode} is removed (to ignore
- * the rules of precidence).
+ * the rules of precedence).
  * </p>
  * 
  * @see ConfigurationKeys#DEFAULT_OPERATOR
diff --git a/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java b/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
index f39bb5c0..ab41b5d6 100644
--- a/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
+++ b/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
@@ -430,7 +430,7 @@ public void testNonExactFirst() throws Exception {
     }
   }
   
-  // Holds surface form seperately:
+  // Holds surface form separately:
   private static class TermFreq2 implements Comparable<TermFreq2> {
     public final String surfaceForm;
     public final String analyzedForm;
diff --git a/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java b/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
index d7e79e1e..7e2ef953 100644
--- a/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
+++ b/lucene/dev/trunk/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
@@ -466,7 +466,7 @@ public void testNonExactFirst() throws Exception {
     }
   }
   
-  // Holds surface form seperately:
+  // Holds surface form separately:
   private static class TermFreq2 implements Comparable<TermFreq2> {
     public final String surfaceForm;
     public final String analyzedForm;
diff --git a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
index 2df46b44..e5c808dd 100644
--- a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
+++ b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
@@ -71,9 +71,9 @@
   public static final int FLATTEN = 1;
 
   /**
-   * A constructor called with a '|' seperated list of Xpath expressions
+   * A constructor called with a '|' separated list of Xpath expressions
    * which define sub sections of the XML stream that are to be emitted as
-   * seperate records.
+   * separate records.
    * 
    * @param forEachXpath  The XPATH for which a record is emitted. Once the
    * xpath tag is encountered, the Node.parse method starts collecting wanted 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
index f48edb03..dfa4418a 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
@@ -302,7 +302,7 @@ public void checkDistributed(ResponseBuilder rb) {
         String collections = params.get("collection");
         if (collections != null) {
           // If there were one or more collections specified in the query, split
-          // each parameter and store as a seperate member of a List.
+          // each parameter and store as a separate member of a List.
           List<String> collectionList = StrUtils.splitSmart(collections, ",",
               true);
           // In turn, retrieve the slices that cover each collection from the
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
index 6ce5c9ed..a6fd10c4 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
@@ -275,7 +275,7 @@ public static Document toDocument( SolrInputDocument doc, IndexSchema schema )
 
             // we can't copy any boost unless the dest field is 
             // indexed & !omitNorms, but which boost we copy depends
-            // on wether the dest field already contains values (we 
+            // on whether the dest field already contains values (we
             // don't want to apply the compounded docBoost more then once)
             final float destBoost = 
               (destinationField.indexed() && !destinationField.omitNorms()) ?
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
index be8fe32a..e96ed77b 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
@@ -1180,7 +1180,7 @@ public boolean equals(Object obj) {
   }
 
   /**
-   * Returns a boolean indicating wether or not the caller should behave as 
+   * Returns a boolean indicating whether or not the caller should behave as
    * if this is the "leader" even when ZooKeeper is not enabled.  
    * (Even in non zk mode, tests may simulate updates to/from a leader)
    */
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/DOMUtil.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/DOMUtil.java
index e09500af..e304e1b1 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/DOMUtil.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/DOMUtil.java
@@ -42,7 +42,7 @@
     outer: for (int j=0; j<attrs.getLength(); j++) {
       Node attr = attrs.item(j);
 
-      // automaticly exclude things in the xml namespace, ie: xml:base
+      // automatically exclude things in the xml namespace, ie: xml:base
       if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;
 
       String attrName = attr.getNodeName();
@@ -234,7 +234,7 @@ private static void getText(Node nd, StringBuilder buf) {
          according to the DOM Level-3 Core documentation - which
          specifies that the Attr's children should have their
          textContent concated (Attr's can have a single child which
-         is either Text node or an EntityRefrence).  In practice,
+         is either Text node or an EntityReference).  In practice,
          DOM implementations do not seem to use child nodes of
          Attributes, storing the "text" directly as the nodeValue.
          Fortunately, the DOM Spec indicates that when Attr.nodeValue
diff --git a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
index d436e6b7..050b4752 100644
--- a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
+++ b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
@@ -544,7 +544,7 @@ public static String JQ(SolrQueryRequest req) throws Exception {
   }
 
   /**
-   * Validates a query matches some JSON test expressions using the default double delta tollerance.
+   * Validates a query matches some JSON test expressions using the default double delta tolerance.
    * @see JSONTestUtil#DEFAULT_DELTA
    * @see #assertJQ(SolrQueryRequest,double,String...)
    */
@@ -698,7 +698,7 @@ public static String add(XmlDoc doc, String... args) {
     try {
       StringWriter r = new StringWriter();
 
-      // this is anoying
+      // this is annoying
       if (null == args || 0 == args.length) {
         r.write("<add>");
         r.write(doc.xml);
@@ -795,7 +795,7 @@ public static SolrQueryRequest req(SolrParams params, String... moreParams) {
     return new LocalSolrQueryRequest(h.getCore(), mp);
   }
 
-  /** Neccessary to make method signatures un-ambiguous */
+  /** Necessary to make method signatures un-ambiguous */
   public static class XmlDoc {
     public String xml;
     @Override
