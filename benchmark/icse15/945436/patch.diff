diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
index 6525ec0e..a6df0ba6 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
@@ -1269,11 +1269,14 @@ load factor (say 2 * POINTER).  Entry is object w/
     }
 
     /* Return byte[]'s to the pool */
+
     @Override
     void recycleByteBlocks(byte[][] blocks, int start, int end) {
       synchronized(DocumentsWriter.this) {
-        for(int i=start;i<end;i++)
+        for(int i=start;i<end;i++) {
           freeByteBlocks.add(blocks[i]);
+          blocks[i] = null;
+        }
       }
     }
 
@@ -1281,8 +1284,10 @@ void recycleByteBlocks(byte[][] blocks, int start, int end) {
     void recycleByteBlocks(List<byte[]> blocks) {
       synchronized(DocumentsWriter.this) {
         final int size = blocks.size();
-        for(int i=0;i<size;i++)
+        for(int i=0;i<size;i++) {
           freeByteBlocks.add(blocks.get(i));
+          blocks.set(i, null);
+        }
       }
     }
   }
@@ -1313,8 +1318,10 @@ synchronized void bytesUsed(long numBytes) {
 
   /* Return int[]s to the pool */
   synchronized void recycleIntBlocks(int[][] blocks, int start, int end) {
-    for(int i=start;i<end;i++)
+    for(int i=start;i<end;i++) {
       freeIntBlocks.add(blocks[i]);
+      blocks[i] = null;
+    }
   }
 
   ByteBlockAllocator byteBlockAllocator = new ByteBlockAllocator(BYTE_BLOCK_SIZE);
@@ -1352,8 +1359,10 @@ synchronized void recycleIntBlocks(int[][] blocks, int start, int end) {
 
   /* Return char[]s to the pool */
   synchronized void recycleCharBlocks(char[][] blocks, int numBlocks) {
-    for(int i=0;i<numBlocks;i++)
+    for(int i=0;i<numBlocks;i++) {
       freeCharBlocks.add(blocks[i]);
+      blocks[i] = null;
+    }
   }
 
   String toMB(long v) {
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index 10e6cbec..235444e7 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -3617,7 +3617,11 @@ protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean
   // even while a flush is happening
   private synchronized final boolean doFlush(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {
     try {
+      try {
       return doFlushInternal(flushDocStores, flushDeletes);
+    } finally {
+        docWriter.balanceRAM();
+      }
     } finally {
       docWriter.clearFlushPending();
     }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ReusableStringReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ReusableStringReader.java
index 37eda6dd..bb2fdf9a 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ReusableStringReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ReusableStringReader.java
@@ -51,6 +51,8 @@ public int read(char[] c, int off, int len) {
       left -= len;
       return len;
     } else if (0 == left) {
+      // don't keep a reference (s could have been very large)
+      s = null;
       return -1;
     } else {
       s.getChars(upto, upto+left, c, off);
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
index 5a804b73..3eb1f238 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
@@ -190,7 +190,6 @@ synchronized void finishDocument(PerDoc perDoc) throws IOException {
         lastPos = pos;
       }
       perDoc.perDocTvf.writeTo(tvf);
-      perDoc.perDocTvf.reset();
       perDoc.numVectorFields = 0;
     }
 
@@ -198,6 +197,7 @@ synchronized void finishDocument(PerDoc perDoc) throws IOException {
 
     lastDocID++;
 
+    perDoc.reset();
     free(perDoc);
     assert docWriter.writer.testPoint("TermVectorsTermsWriter.finishDocument end");
   }
