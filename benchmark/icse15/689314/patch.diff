diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
index 1c4c8457..9db7894c 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
@@ -83,6 +83,7 @@ public IRStatistics evaluate(RecommenderBuilder recommenderBuilder,
       throw new IllegalArgumentException("Invalid relevanceThreshold: " + evaluationPercentage);
     }
 
+    int numItems = dataModel.getNumItems();
     RunningAverage precision = new FullRunningAverage();
     RunningAverage recall = new FullRunningAverage();
     RunningAverage fallOut = new FullRunningAverage();
@@ -131,7 +132,7 @@ public IRStatistics evaluate(RecommenderBuilder recommenderBuilder,
           recall.addDatum((double) intersectionSize / (double) numRelevantItems);
           if (numRelevantItems < prefs.length) {
             fallOut.addDatum((double) (numRecommendedItems - intersectionSize) /
-                             (double) (prefs.length - numRelevantItems));
+                             (double) (numItems - numRelevantItems));
           }
 
           log.info("Precision/recall/fall-out: {} / {} / {}", new Object[] {
