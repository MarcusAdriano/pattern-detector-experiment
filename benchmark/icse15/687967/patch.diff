diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java
index 6b88e504..e69de29b 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java
@@ -1,97 +0,0 @@
-/*
-
-   Derby - Class org.apache.derby.iapi.util.PrivilegedThreadOps
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to you under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derby.iapi.util;
-
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
-
-/**
- * A collection of operations on {@link java.lang.Thread} that wraps the
- * operations in privileged block of code.
- * <p>
- * Derby needs to use privileged blocks in some places to avoid
- * {@link SecurityException}s being thrown, as the required privileges are
- * often granted to Derby itself, but not the higher level application code.
- * <p>
- * Feel free to add new operations as they are needed. This class is not
- * intended to implement the full set of operations defined by
- * {@link java.lang.Thread}.
- */
-
-public class PrivilegedThreadOps {
-
-    /**
-     * Sets the context ClassLoader for this Thread. The context ClassLoader 
-     * can be set when a thread is created, and allows the creator of the 
-     * thread to provide the appropriate class loader to code running in 
-     * the thread when loading classes 
-     * and resources.
-     * 
-     * First, if there is a security manager, its <code> checkPermission </code>
-     * method is called with a 
-     * <code> RuntimePermission("setContextClassLoader") </code> permission 
-     * to see if it's ok to set the context ClassLoader.. 
-     * @param t  Thread for which we are setting the context class loader
-     * @param cl the context class loader for t
-     */
-    public static void setContextClassLoader(final Thread t, final ClassLoader cl) {
-            AccessController.doPrivileged(
-                        new PrivilegedAction() {
-                            public Object run()  {
-                                t.setContextClassLoader(cl);
-                                return null;
-                            }
-                        });
-    }
-    
-    /**
-     * Set the thread's context class loader if privileged.  If not ignore 
-     * security exception and continue. 
-     * @param t  Thread for which we are setting the context class loader
-     * @param cl the context class loader for t
-     */
-    public static void setContextClassLoaderIfPrivileged(Thread t, ClassLoader cl) {
-        try {
-            setContextClassLoader(t,cl);
-        } catch (SecurityException se) {
-            // ignore security exception.  Earlier versions of Derby, before the 
-            // DERBY-3745 fix did not require setContextClassloader permissions.
-            // We may leak class loaders if we are not able to set this, but 
-            // cannot just fail.
-        }
-    }
-    
-    public static ClassLoader getContextClassLoader(final Thread t) {
-            return (ClassLoader)AccessController.doPrivileged(
-                        new PrivilegedAction() {
-                            public Object run()  {
-                                return t.getContextClassLoader();
-                            }
-                        });
-        
-    }
-    
-   
-       
-}
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java
index a12dcb99..8522a63d 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java
@@ -21,12 +21,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.services.daemon;
 
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+
 import org.apache.derby.iapi.services.context.ContextService;
 import org.apache.derby.iapi.services.daemon.DaemonFactory;
 import org.apache.derby.iapi.services.daemon.DaemonService;
 import org.apache.derby.impl.services.daemon.BasicDaemon;
 import org.apache.derby.iapi.services.monitor.Monitor;
-import org.apache.derby.iapi.util.PrivilegedThreadOps;
+
 
 public class SingleThreadDaemonFactory implements DaemonFactory
 {
@@ -46,11 +49,23 @@ public DaemonService createNewDaemon(String name)
 	{
 		BasicDaemon daemon = new BasicDaemon(contextService);
 
-		Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);
+		final Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);
 		// DERBY-3745.  setContextClassLoader for thread to null to avoid
 		// leaking class loaders.
-		PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-							  daemonThread, null);
+		try {
+            AccessController.doPrivileged(
+             new PrivilegedAction() {
+                public Object run()  {
+                    daemonThread.setContextClassLoader(null);
+                    return null;
+                }
+            });
+        } catch (SecurityException se) {
+            // ignore security exception.  Earlier versions of Derby, before the 
+            // DERBY-3745 fix did not require setContextClassloader permissions.
+            // We may leak class loaders if we are not able to set this, but 
+            // cannot just fail.
+        }
 
 
 		daemonThread.start();
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java
index dbd09012..c195e3c4 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java
@@ -41,7 +41,6 @@
 import org.apache.derby.iapi.services.monitor.ModuleControl;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.property.PropertyUtil;
-import org.apache.derby.iapi.util.PrivilegedThreadOps;
 import org.apache.derby.mbeans.ManagementMBean;
 import org.apache.derby.mbeans.VersionMBean;
 import org.apache.derby.security.SystemPermission;
@@ -170,10 +169,16 @@ private synchronized void findServer() {
         // sure the context class loader is null before we start the MBean
         // server which will create threads that we want to have a null context
         // class loader
-        ClassLoader savecl = null;
+        
         boolean hasGetClassLoaderPerms=false;
+        ClassLoader savecl = null;
         try {
-            savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
+            savecl = (ClassLoader)AccessController.doPrivileged(
+               new PrivilegedAction<ClassLoader>() {
+                public ClassLoader run()  {
+                    return Thread.currentThread().getContextClassLoader();
+                }
+            });
             hasGetClassLoaderPerms = true;
         } catch (SecurityException se) {
            // ignore security exception.  Earlier versions of Derby, before the 
@@ -182,8 +187,21 @@ private synchronized void findServer() {
            // cannot just fail.        
         }
         if (hasGetClassLoaderPerms)
-            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.
-                          currentThread(), null);
+            try {
+                AccessController.doPrivileged(
+                new PrivilegedAction<Object>() {
+                    public Object run()  {
+                        Thread.
+                                                                  currentThread().setContextClassLoader(null);
+                        return null;
+                    }
+                });
+            } catch (SecurityException se1) {
+                // ignore security exception.  Earlier versions of Derby, before the 
+                // DERBY-3745 fix did not require setContextClassloader permissions.
+                // We may leak class loaders if we are not able to set this, but 
+                // cannot just fail.
+            }
         try {
             mbeanServer = AccessController
                     .doPrivileged(new PrivilegedAction<MBeanServer>() {
@@ -201,8 +219,21 @@ public MBeanServer run() {
             // starts the MBean server.
         }
         if (hasGetClassLoaderPerms)
-            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.currentThread(),
-                    savecl);
+            try {
+                final ClassLoader tmpsavecl = savecl;
+                AccessController.doPrivileged(
+                new PrivilegedAction<Object>() {
+                    public Object run()  {
+                        Thread.currentThread().setContextClassLoader(tmpsavecl);
+                        return null;
+                    }
+                });
+            } catch (SecurityException se) {
+                // ignore security exception.  Earlier versions of Derby, before the 
+                // DERBY-3745 fix did not require setContextClassloader permissions.
+                // We may leak class loaders if we are not able to set this, but 
+                // cannot just fail.
+            }
     }
 
     /**
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index d93aa182..ecf2c701 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -56,7 +56,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.loader.InstanceGetter;
 import org.apache.derby.iapi.services.io.FormatableInstanceGetter;
 import org.apache.derby.iapi.error.ExceptionSeverity;
-import org.apache.derby.iapi.util.PrivilegedThreadOps;
+
 
 import  org.apache.derby.io.StorageFactory;
 
@@ -96,6 +96,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.lang.reflect.InvocationTargetException;
 
 import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.security.PrivilegedExceptionAction;
 import java.security.PrivilegedActionException;
 
@@ -275,11 +276,24 @@ protected final void runWithState(Properties properties, PrintStream log) {
 		keepItems[2] = msgService;
 		dontGC = new AntiGC(keepItems);
 
-		Thread dontGCthread = getDaemonThread(dontGC, "antiGC", true);
+		final Thread dontGCthread = getDaemonThread(dontGC, "antiGC", true);
 		// DERBY-3745.  setContextClassLoader for thread to null to avoid
 		// leaking class loaders.
-		PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-						dontGCthread, null);
+		try {
+            AccessController.doPrivileged(
+            new PrivilegedAction() {
+                public Object run()  {
+                    
+                    dontGCthread.setContextClassLoader(null);
+                    return null;
+                }
+            });
+        } catch (SecurityException se1) {
+            // ignore security exception.  Earlier versions of Derby, before the 
+            // DERBY-3745 fix did not require setContextClassloader permissions.
+            // We may leak class loaders if we are not able to set this, but 
+            // cannot just fail.
+        }
 
 		dontGCthread.start();
 
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
index c2b7cff5..047ba50d 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
@@ -23,9 +23,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.services.timer.TimerFactory;
 import org.apache.derby.iapi.services.monitor.ModuleControl;
-import org.apache.derby.iapi.util.PrivilegedThreadOps;
 import org.apache.derby.iapi.error.StandardException;
 
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.Timer;
 import java.util.Properties;
 
@@ -67,8 +68,12 @@ public SingletonTimerFactory()
         ClassLoader savecl = null;
         boolean hasGetClassLoaderPerms = false;
         try {
-            savecl = PrivilegedThreadOps.getContextClassLoader(
-                    Thread.currentThread());
+            savecl = (ClassLoader)AccessController.doPrivileged(
+            new PrivilegedAction() {
+                public Object run()  {
+                    return Thread.currentThread().getContextClassLoader();
+                }
+            });
             hasGetClassLoaderPerms = true;
         } catch (SecurityException se) {
             // Ignore security exception. Versions of Derby before
@@ -77,12 +82,37 @@ public SingletonTimerFactory()
             // able to do this but we can't just fail.
         }
         if (hasGetClassLoaderPerms)
-            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-                    Thread.currentThread(), null);
+            try {
+                AccessController.doPrivileged(
+                new PrivilegedAction() {
+                    public Object run()  {
+                        Thread.currentThread().setContextClassLoader(null);
+                        return null;
+                    }
+                });
+            } catch (SecurityException se) {
+                // ignore security exception.  Earlier versions of Derby, before the 
+                // DERBY-3745 fix did not require setContextClassloader permissions.
+                // We may leak class loaders if we are not able to set this, but 
+                // cannot just fail.
+            }
         singletonTimer = new Timer(true); // Run as daemon
         if (hasGetClassLoaderPerms)
-            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-                    Thread.currentThread(), savecl);
+            try {
+                final ClassLoader tmpsavecl = savecl;
+                AccessController.doPrivileged(
+                new PrivilegedAction() {
+                    public Object run()  {
+                        Thread.currentThread().setContextClassLoader(tmpsavecl);
+                        return null;
+                    }
+                });
+            } catch (SecurityException se) {
+                // ignore security exception.  Earlier versions of Derby, before the 
+                // DERBY-3745 fix did not require setContextClassloader permissions.
+                // We may leak class loaders if we are not able to set this, but 
+                // cannot just fail.
+            }
     }
 
     /**
