diff --git a/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java b/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java
index 74eef296..dac45d04 100644
--- a/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java
+++ b/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java
@@ -78,14 +78,6 @@ private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) thr
 
     LongRangeCounter counter = new LongRangeCounter(longRanges);
 
-    // Compute min & max over all ranges:
-    double minIncl = Double.POSITIVE_INFINITY;
-    double maxIncl = Double.NEGATIVE_INFINITY;
-    for(DoubleRange range : ranges) {
-      minIncl = Math.min(minIncl, range.minIncl);
-      maxIncl = Math.max(maxIncl, range.maxIncl);
-    }
-
     int missingCount = 0;
     for (MatchingDocs hits : matchingDocs) {
       FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);
diff --git a/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java b/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java
index 6e8d6d60..a0c807d6 100644
--- a/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java
+++ b/lucene/dev/branches/branch_4x/lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java
@@ -57,14 +57,6 @@ private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) thr
 
     LongRange[] ranges = (LongRange[]) this.ranges;
 
-    // Compute min & max over all ranges:
-    long minIncl = Long.MAX_VALUE;
-    long maxIncl = Long.MIN_VALUE;
-    for(LongRange range : ranges) {
-      minIncl = Math.min(minIncl, range.minIncl);
-      maxIncl = Math.max(maxIncl, range.maxIncl);
-    }
-
     LongRangeCounter counter = new LongRangeCounter(ranges);
 
     int missingCount = 0;
diff --git a/lucene/dev/branches/branch_4x/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java b/lucene/dev/branches/branch_4x/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
index d5a23434..55daf2cd 100644
--- a/lucene/dev/branches/branch_4x/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
+++ b/lucene/dev/branches/branch_4x/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
@@ -40,10 +40,6 @@
 import org.apache.lucene.facet.LabelAndValue;
 import org.apache.lucene.facet.MultiFacets;
 import org.apache.lucene.facet.DrillSideways.DrillSidewaysResult;
-import org.apache.lucene.facet.range.DoubleRange;
-import org.apache.lucene.facet.range.DoubleRangeFacetCounts;
-import org.apache.lucene.facet.range.LongRange;
-import org.apache.lucene.facet.range.LongRangeFacetCounts;
 import org.apache.lucene.facet.taxonomy.TaxonomyReader;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter;
@@ -507,6 +503,9 @@ public void testRandomFloats() throws Exception {
       int numRange = _TestUtil.nextInt(random(), 1, 5);
       DoubleRange[] ranges = new DoubleRange[numRange];
       int[] expectedCounts = new int[numRange];
+      if (VERBOSE) {
+        System.out.println("TEST: " + numRange + " ranges");
+      }
       for(int rangeID=0;rangeID<numRange;rangeID++) {
         double min;
         if (rangeID > 0 && random().nextInt(10) == 7) {
@@ -539,6 +538,12 @@ public void testRandomFloats() throws Exception {
           max = x;
         }
 
+        // Must truncate to float precision so that the
+        // drill-down counts (which use NRQ.newFloatRange)
+        // are correct:
+        min = (double) (float) min;
+        max = (double) (float) max;
+
         boolean minIncl;
         boolean maxIncl;
         if (min == max) {
@@ -550,6 +555,10 @@ public void testRandomFloats() throws Exception {
         }
         ranges[rangeID] = new DoubleRange("r" + rangeID, min, minIncl, max, maxIncl);
 
+        if (VERBOSE) {
+          System.out.println("TEST:   range " + rangeID + ": " + ranges[rangeID]);
+        }
+
         // Do "slow but hopefully correct" computation of
         // expected count:
         for(int i=0;i<numDocs;i++) {
@@ -564,6 +573,9 @@ public void testRandomFloats() throws Exception {
           } else {
             accept &= values[i] < max;
           }
+          if (VERBOSE) {
+            System.out.println("TEST:   check doc=" + i + " val=" + values[i] + " accept=" + accept);
+          }
           if (accept) {
             expectedCounts[rangeID]++;
           }
@@ -577,7 +589,7 @@ public void testRandomFloats() throws Exception {
       assertEquals(numRange, result.labelValues.length);
       for(int rangeID=0;rangeID<numRange;rangeID++) {
         if (VERBOSE) {
-          System.out.println("  range " + rangeID + " expectedCount=" + expectedCounts[rangeID]);
+          System.out.println("TEST: verify range " + rangeID + " expectedCount=" + expectedCounts[rangeID]);
         }
         LabelAndValue subNode = result.labelValues[rangeID];
         assertEquals("r" + rangeID, subNode.label);
