diff --git a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CachedOutputStream.java b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CachedOutputStream.java
index e69de29b..2a43f419 100644
--- a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CachedOutputStream.java
+++ b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CachedOutputStream.java
@@ -0,0 +1,140 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.aries.web.converter.impl;
+
+import java.io.BufferedOutputStream;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+public class CachedOutputStream extends OutputStream {
+
+    private static final int DEFAULT_THRESHOLD = 64 * 1024;
+    
+    private OutputStream currentStream;
+    private long threshold;
+    private int totalLength;
+    private boolean inmem;
+    private List<InputStream> streams;
+    private File tempFile;
+    private File outputDir;
+
+    public CachedOutputStream() {
+        this(DEFAULT_THRESHOLD, null);
+    }
+
+    public CachedOutputStream(long threshold, File outputDir) {
+        this.threshold = threshold; 
+        this.outputDir = outputDir;
+        this.currentStream = new ByteArrayOutputStream(2048);
+        this.inmem = true;
+        this.streams = new ArrayList<InputStream>(1);
+    }
+
+    public void flush() throws IOException {
+        currentStream.flush();
+    }
+    
+    public void close() throws IOException {
+        currentStream.flush();       
+        currentStream.close();
+    }
+
+    public void write(byte[] b) throws IOException {
+        write(b, 0, b.length);
+    }
+    
+    public void write(byte[] b, int off, int len) throws IOException {
+        totalLength += len;
+        if (inmem && totalLength > threshold) {
+            createFileOutputStream();
+        }
+        currentStream.write(b, off, len);
+    }
+
+    public void write(int b) throws IOException {
+        totalLength++;
+        if (inmem && totalLength > threshold) {
+            createFileOutputStream();
+        }
+        currentStream.write(b);
+    }
+
+    private void createFileOutputStream() throws IOException {
+        ByteArrayOutputStream bout = (ByteArrayOutputStream) currentStream;
+        if (outputDir == null) {
+            tempFile = File.createTempFile("cos", "tmp");
+        } else {
+            tempFile = File.createTempFile("cos", "tmp", outputDir);
+        }
+        
+        currentStream = new BufferedOutputStream(new FileOutputStream(tempFile));
+        bout.writeTo(currentStream);
+        inmem = false;
+    }
+
+    public void destroy() {
+        streams.clear();
+        if (tempFile != null) {
+            tempFile.delete();
+        }
+    }
+    
+    public int size() {
+        return totalLength;
+    }
+    
+    public InputStream getInputStream() throws IOException {
+        close();
+        if (inmem) {
+            return new ByteArrayInputStream(((ByteArrayOutputStream) currentStream).toByteArray());
+        } else {
+            try {
+                FileInputStream fileInputStream = new FileInputStream(tempFile) {
+                    public void close() throws IOException {
+                        super.close();
+                        maybeDeleteTempFile(this);
+                    }
+                };
+                streams.add(fileInputStream);
+                return fileInputStream;
+            } catch (FileNotFoundException e) {
+                throw new IOException("Cached file was deleted, " + e.toString());
+            }
+        }
+    }
+    
+    private void maybeDeleteTempFile(Object stream) {
+        streams.remove(stream);
+        if (tempFile != null && streams.isEmpty()) {
+            tempFile.delete();
+            tempFile = null;
+        }
+    }
+
+}
diff --git a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
index 23dbe752..a6956830 100644
--- a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
+++ b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
@@ -23,8 +23,6 @@
 
 import static org.apache.aries.web.converter.WarToWabConverter.WEB_CONTEXT_PATH;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -69,13 +67,11 @@
   private CaseInsensitiveMap properties;
 
   // InputStream for the new WAB file
-  private byte[] wabFile;
+  private CachedOutputStream wab;
   private Manifest wabManifest;
   private String warName;
   private InputStreamProvider input;
   
-  private boolean converted = false;
-
   // State used for updating the manifest
   private Set<String> importPackages;
   private Set<String> exemptPackages;
@@ -95,11 +91,13 @@ public WarToWabConverterImpl(InputStreamProvider warFile, String name, CaseInsen
     this.warName = name;
   }
     
-  private void convert() throws IOException {
+  private void generateManifest() throws IOException {
+    if (wabManifest != null) {
+        // WAB manifest is already generated
+        return;
+    }
 
-    ZipEntry entry;
     JarInputStream jarInput = null;
-
     try {
       jarInput = new JarInputStream(input.getInputStream());
       Manifest manifest = jarInput.getManifest();
@@ -114,11 +112,20 @@ private void convert() throws IOException {
     finally {
       try { if (jarInput != null) jarInput.close(); } catch (IOException e) { e.printStackTrace(); }
     }
+  }
+
+  private void convert() throws IOException {
+    if (wab != null) {
+        // WAB is already converted
+        return;
+    }
 
-    // Create a new jar file in memory with the new manifest and the old data
-    ByteArrayOutputStream output = new ByteArrayOutputStream();
+    generateManifest();
+    
+    CachedOutputStream output = new CachedOutputStream();
     JarOutputStream jarOutput = null;
-    jarInput = null;
+    JarInputStream jarInput = null;
+    ZipEntry entry = null;
 
     // Copy across all entries from the original jar
     int val;
@@ -128,19 +135,21 @@ private void convert() throws IOException {
       byte[] buffer = new byte[2048];
       while ((entry = jarInput.getNextEntry()) != null) {
         jarOutput.putNextEntry(entry);        
-        while ((val = jarInput.read(buffer)) > 0)
+        while ((val = jarInput.read(buffer)) > 0) {
           jarOutput.write(buffer, 0, val);
       }
     }
+    }
     finally {
-      if (jarOutput != null)
+      if (jarOutput != null) {
         jarOutput.close();
-      if (jarInput != null)
+      }
+      if (jarInput != null) {
         jarInput.close();
     }
+    }
 
-    // Create a stream to the in-memory jar
-    wabFile = output.toByteArray();
+    wab = output;
   }
 
   private boolean isBundle(Manifest manifest)  {
@@ -477,25 +486,18 @@ private static void mergePathList(String pathlist, ArrayList<String> paths, Stri
   }
   
   public InputStream getWAB() throws IOException {
-    ensureConverted();
-    return new ByteArrayInputStream(wabFile);
+    convert();
+    return wab.getInputStream();
   }
   
   public Manifest getWABManifest() throws IOException {
-    ensureConverted();
+    generateManifest();
     return wabManifest;
   }
 
   public int getWabLength() throws IOException {
-    ensureConverted();
-    return wabFile.length;
-  }
-  
-  private void ensureConverted() throws IOException {
-    if (!!!converted) {
       convert();
-      converted = true;
-    }
+    return wab.size();
   }
 
 }
