diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java
index b78b075e..8610ad7d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java
@@ -163,7 +163,34 @@ public void test1(Connection conn, int blob_size, int num_rows)
 
         int total_expected_page_max = 12 + num_rows;
 
-        if (total_pages > total_expected_page_max)
+        int MAX_WAIT_FOR_BG_THREAD = 100000;
+        int ms_waited              = 20;
+
+        while (total_pages > total_expected_page_max)
+        {
+            if (ms_waited < MAX_WAIT_FOR_BG_THREAD)
+            {
+                // The result is dependent on background activity which may
+                // differ from machine to machine.  Loop, sleeping in this
+                // thread to allow background thread to run.
+
+                try
+                {
+                    ms_waited += 1000;
+                    Thread.sleep(1000);
+                }
+                catch (Exception ex)
+                {
+                    // just ignore interupts of sleep.
+                }
+
+                sp_info = getSpaceInfo(conn, "APP", "LONGCOL", true);
+
+                total_pages = 
+                    sp_info[SPACE_INFO_NUM_ALLOC] + 
+                    sp_info[SPACE_INFO_NUM_FREE];
+            }
+            else
         {
             // for the above test case we expect the following space:
             //     page 0
@@ -176,13 +203,15 @@ public void test1(Connection conn, int blob_size, int num_rows)
             //         marked "half-filled" and can be used in future for
             //         short rows that don't fit on the last page inserted.
             
-
-
             System.out.println(
-                "Test failed, expected less than " + 
+                    "Test 1 failed, expected less than " + 
                 total_expected_page_max + " pages - count is:\n" +
                 "free pages     : "   + sp_info[SPACE_INFO_NUM_FREE] +
-                "\nallocated pages: " + sp_info[SPACE_INFO_NUM_ALLOC]);
+                    "\nallocated pages: " + sp_info[SPACE_INFO_NUM_ALLOC] +
+                    "\nWaited " + ms_waited + "ms. for background work.");
+
+                break;
+            }
         }
 
         if (verbose)
@@ -308,13 +337,45 @@ public void test2(
         // bigger than worksize, something like work_size=5 and total_work >100
         int total_expected_page_max = 30 * work_size; 
 
-        if (total_pages > total_expected_page_max)
+        int MAX_WAIT_FOR_BG_THREAD = 100000;
+        int ms_waited              = 20;
+
+        while (total_pages > total_expected_page_max)
         {
+            if (ms_waited < MAX_WAIT_FOR_BG_THREAD)
+            {
+                // The result is dependent on background activity which may
+                // differ from machine to machine.  Loop, sleeping in this
+                // thread to allow background thread to run.
+
+                try
+        {
+                    ms_waited += 1000;
+                    Thread.sleep(1000);
+                }
+                catch (Exception ex)
+                {
+                    // just ignore interupts of sleep.
+                }
+
+                sp_info = getSpaceInfo(conn, "APP", "LONGCOL", true);
+
+                total_pages = 
+                    sp_info[SPACE_INFO_NUM_ALLOC] + 
+                    sp_info[SPACE_INFO_NUM_FREE];
+            }
+            else
+            {
+
             System.out.println(
-                "Test failed, expected less than " + 
+                    "Test 2 failed, expected less than " + 
                 total_expected_page_max + " pages - count is:\n" +
                 "free pages     : "   + sp_info[SPACE_INFO_NUM_FREE] +
-                "\nallocated pages: " + sp_info[SPACE_INFO_NUM_ALLOC]);
+                    "\nallocated pages: " + sp_info[SPACE_INFO_NUM_ALLOC] +
+                    "\nWaited " + ms_waited + "ms. for background work.");
+
+                break;
+            }
         }
 
         if (verbose)
