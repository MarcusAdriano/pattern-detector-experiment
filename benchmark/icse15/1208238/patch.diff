diff --git a/lucene/dev/branches/solrcloud/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java b/lucene/dev/branches/solrcloud/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java
index a37de178..e25cf2fc 100644
--- a/lucene/dev/branches/solrcloud/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java
+++ b/lucene/dev/branches/solrcloud/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java
@@ -79,7 +79,7 @@ public void deleteDoc(Object id) {
     try {
       log.info("Deleting document: " + id);
       DeleteUpdateCommand delCmd = new DeleteUpdateCommand(req);
-      delCmd.id = id.toString();
+      delCmd.setId(id.toString());
       processor.processDelete(delCmd);
     } catch (IOException e) {
       log.error("Exception while deleteing: " + id, e);
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java
index cec77000..bef66bc3 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java
@@ -125,9 +125,9 @@ private void delete(SolrQueryRequest req, List<String> l, UpdateRequestProcessor
     for (String s : l) {
       DeleteUpdateCommand delcmd = new DeleteUpdateCommand(req);
       if (isId) {
-        delcmd.id = s;
+        delcmd.setId(s);
       } else {
-        delcmd.query = s;
+        delcmd.setQuery(s);
       }
       processor.processDelete(delcmd);
     }
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/JsonLoader.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/JsonLoader.java
index 1644833b..0e11c902 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/JsonLoader.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/JsonLoader.java
@@ -162,10 +162,10 @@ DeleteUpdateCommand parseDelete() throws IOException {
         String key = parser.getString();
         if( parser.wasKey() ) {
           if( "id".equals( key ) ) {
-            cmd.id = parser.getString();
+            cmd.setId(parser.getString());
           }
           else if( "query".equals(key) ) {
-            cmd.query = parser.getString();
+            cmd.setQuery(parser.getString());
           }
           else {
             throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown key: "+key+" ["+parser.getPosition()+"]" );
@@ -178,7 +178,7 @@ else if( "query".equals(key) ) {
         }
       }
       else if( ev == JSONParser.OBJECT_END ) {
-        if( cmd.id == null && cmd.query == null ) {
+        if( cmd.getId() == null && cmd.getQuery() == null ) {
           throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Missing id or query for delete ["+parser.getPosition()+"]" );
         }
         return cmd;
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/XMLLoader.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/XMLLoader.java
index 59817acd..c6d4eb18 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/XMLLoader.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/XMLLoader.java
@@ -209,9 +209,9 @@ void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLSt
         case XMLStreamConstants.END_ELEMENT:
           String currTag = parser.getLocalName();
           if ("id".equals(currTag)) {
-            deleteCmd.id = text.toString();
+            deleteCmd.setId(text.toString());
           } else if ("query".equals(currTag)) {
-            deleteCmd.query = text.toString();
+            deleteCmd.setQuery(text.toString());
           } else if ("delete".equals(currTag)) {
             return;
           } else {
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/AddUpdateCommand.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/AddUpdateCommand.java
index 76d20fd2..aa0180db 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/AddUpdateCommand.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/AddUpdateCommand.java
@@ -52,6 +52,8 @@ public AddUpdateCommand(SolrQueryRequest req) {
    public void clear() {
      solrDoc = null;
      indexedId = null;
+     updateTerm = null;
+     version = 0;
    }
 
    public SolrInputDocument getSolrInputDocument() {
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java
index 73fe55e4..ea3a146b 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java
@@ -18,6 +18,7 @@
 package org.apache.solr.update;
 
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.CharsRef;
 import org.apache.solr.common.SolrInputField;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.schema.IndexSchema;
@@ -29,17 +30,22 @@
 public class DeleteUpdateCommand extends UpdateCommand {
   public String id;    // external (printable) id, for delete-by-id
   public String query; // query string for delete-by-query
-  private BytesRef indexedId;
+  public BytesRef indexedId;
 
 
   public DeleteUpdateCommand(SolrQueryRequest req) {
     super("delete", req);
   }
 
+  public boolean isDeleteById() {
+    return query == null;
+  }
+
   public void clear() {
     id = null;
     query = null;
     indexedId = null;
+    version = 0;
   }
 
   /** Returns the indexed ID for this delete.  The returned BytesRef is retained across multiple calls, and should not be modified. */
@@ -55,16 +61,44 @@ public BytesRef getIndexedId() {
     return indexedId;
   }
 
+  public String getId() {
+    if (id == null && indexedId != null) {
+      IndexSchema schema = req.getSchema();
+      SchemaField sf = schema.getUniqueKeyField();
+      if (sf != null) {
+        CharsRef ref = new CharsRef();
+        sf.getType().indexedToReadable(indexedId, ref);
+        id = ref.toString();
+      }
+    }
+    return id;
+  }
+
+  public String getQuery() {
+    return query;
+  }
+
+  public void setQuery(String query) {
+    this.query = query;
+  }
+
   public void setIndexedId(BytesRef indexedId) {
     this.indexedId = indexedId;
+    this.id = null;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+    this.indexedId = null;
   }
 
   @Override
   public String toString() {
     StringBuilder sb = new StringBuilder(commandName);
     sb.append(':');
-    if (id!=null) sb.append("id=").append(id);
+    if (id!=null) sb.append("id=").append(getId());
     else sb.append("query=`").append(query).append('`');
     return sb.toString();
   }
+
 }
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/FSUpdateLog.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/FSUpdateLog.java
index 6ef2658f..09b64f83 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/FSUpdateLog.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/FSUpdateLog.java
@@ -18,14 +18,20 @@
 package org.apache.solr.update;
 
 import org.apache.lucene.util.BytesRef;
+import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.PluginInfo;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.response.SolrQueryResponse;
+import org.apache.solr.update.processor.DistributedUpdateProcessorFactory;
+import org.apache.solr.update.processor.RunUpdateProcessorFactory;
+import org.apache.solr.update.processor.UpdateRequestProcessor;
 
 import java.io.File;
 import java.io.FilenameFilter;
@@ -95,8 +101,8 @@ public void finish(SyncLevel synclevel) {
   }
 
   @Override
-  public boolean recoverFromLog() {
-    return false;
+  public Future<RecoveryInfo> recoverFromLog() {
+    return null;
   }
 
   @Override
@@ -182,8 +188,6 @@ public void init(UpdateHandler uhandler, SolrCore core) {
     id = getLastLogId() + 1;   // add 1 since we will create a new log for the next update
 
     versionInfo = new VersionInfo(uhandler, 256);
-
-    recoverFromLog();  // TODO: is this too early?
   }
 
   static class LogPtr {
@@ -223,11 +227,20 @@ public long getLastLogId() {
   @Override
   public void add(AddUpdateCommand cmd) {
     // don't log if we are replaying from another log
-    if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;
+    // TODO: we currently need to log to maintain correct versioning, rtg, etc
+    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;
 
     synchronized (this) {
+      long pos = -1;
+
+    // don't log if we are replaying from another log
+      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {
       ensureLog();
-      long pos = tlog.write(cmd);
+        pos = tlog.write(cmd);
+      }
+
+      // TODO: in the future we could support a real position for a REPLAY update.
+      // Only currently would be useful for RTG while in recovery mode though.
       LogPtr ptr = new LogPtr(pos, cmd.getVersion());
 
       // only update our map if we're not buffering
@@ -241,14 +254,17 @@ public void add(AddUpdateCommand cmd) {
 
   @Override
   public void delete(DeleteUpdateCommand cmd) {
-    // don't log if we are replaying from another log
-    if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;
-
     BytesRef br = cmd.getIndexedId();
 
     synchronized (this) {
+      long pos = -1;
+
+      // don't log if we are replaying from another log
+      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {
       ensureLog();
-      long pos = tlog.writeDelete(cmd);
+        pos = tlog.writeDelete(cmd);
+      }
+
       LogPtr ptr = new LogPtr(pos, cmd.version);
 
       // only update our map if we're not buffering
@@ -264,16 +280,19 @@ public void delete(DeleteUpdateCommand cmd) {
 
   @Override
   public void deleteByQuery(DeleteUpdateCommand cmd) {
+    synchronized (this) {
+      long pos = -1;
     // don't log if we are replaying from another log
-    if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;
+      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {
 
-    synchronized (this) {
       ensureLog();
       // TODO: how to support realtime-get, optimistic concurrency, or anything else in this case?
       // Maybe we shouldn't?
       // realtime-get could just do a reopen of the searcher
       // optimistic concurrency? Maybe we shouldn't support deleteByQuery w/ optimistic concurrency
-      long pos = tlog.writeDeleteByQuery(cmd);
+        pos = tlog.writeDeleteByQuery(cmd);
+      }
+
       LogPtr ptr = new LogPtr(pos, cmd.getVersion());
       // SolrCore.verbose("TLOG: added deleteByQuery " + cmd.query + " to " + tlog + " " + ptr + " map=" + System.identityHashCode(map));
     }
@@ -467,21 +486,23 @@ public void finish(SyncLevel syncLevel) {
   }
 
   @Override
-  public boolean recoverFromLog() {
-    if (tlogFiles.length == 0) return false;
+  public Future<RecoveryInfo> recoverFromLog() {
+    if (tlogFiles.length == 0) return null;
     TransactionLog oldTlog = null;
-    try {
+
       oldTlog = new TransactionLog( new File(tlogDir, tlogFiles[tlogFiles.length-1]), null, true );
-      recoveryExecutor.execute(new LogReplayer(oldTlog, false));
-      return true;
+    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);
+    LogReplayer replayer = new LogReplayer(oldTlog, false);
 
-    } catch (Exception ex) {
-      // an error during recovery
-      log.warn("Exception during recovery", ex);
-      if (oldTlog != null) oldTlog.decref();
+    versionInfo.blockUpdates();
+    try {
+      state = State.REPLAYING;
+    } finally {
+      versionInfo.unblockUpdates();
     }
 
-    return false;
+    return cs.submit(replayer, recoveryInfo);
+
   }
 
 
@@ -588,6 +609,20 @@ public void run() {
         tlogReader = translog.getReader();
 
         SolrParams params = new ModifiableSolrParams();
+        SolrQueryRequest req = new LocalSolrQueryRequest(uhandler.core, params);
+        SolrQueryResponse rsp = new SolrQueryResponse();
+
+        // NOTE: we don't currently handle a core reload during recovery.  This would cause the core
+        // to change underneath us.
+
+        // TODO: use the standard request factory?  We won't get any custom configuration instantiating this way.
+        RunUpdateProcessorFactory runFac = new RunUpdateProcessorFactory();
+        DistributedUpdateProcessorFactory magicFac = new DistributedUpdateProcessorFactory();
+        runFac.init(new NamedList());
+        magicFac.init(new NamedList());
+
+        UpdateRequestProcessor proc = magicFac.getInstance(req, rsp, runFac.getInstance(req, rsp, null));
+
         long commitVersion = 0;
 
         for(;;) {
@@ -614,7 +649,7 @@ public void run() {
                 // only an issue if we crash before the commit (and we are paying attention
                 // to incomplete log files).
                 //
-                // versionInfo.lock.writeLock().unlock();
+                // versionInfo.unblockUpdates();
               }
             }
           } catch (InterruptedException e) {
@@ -625,11 +660,6 @@ public void run() {
 
           if (o == null) break;
 
-          // create a new request each time since the update handler and core could change
-          SolrQueryRequest req = new LocalSolrQueryRequest(uhandler.core, params);
-
-          // TODO: race?  This core could close on us if it was reloaded
-
           try {
 
             // should currently be a List<Oper,Ver,Doc/Id>
@@ -648,7 +678,7 @@ public void run() {
                 cmd.solrDoc = sdoc;
                 cmd.setVersion(version);
                 cmd.setFlags(UpdateCommand.REPLAY | UpdateCommand.IGNORE_AUTOCOMMIT);
-                uhandler.addDoc(cmd);
+                proc.processAdd(cmd);
                 break;
 
                 // TODO: updates need to go through versioning code for handing reorders? (for replicas at least,
@@ -661,7 +691,7 @@ public void run() {
                 cmd.setIndexedId(new BytesRef(idBytes));
                 cmd.setVersion(version);
                 cmd.setFlags(UpdateCommand.REPLAY | UpdateCommand.IGNORE_AUTOCOMMIT);
-                uhandler.delete(cmd);
+                proc.processDelete(cmd);
                 break;
               }
 
@@ -672,7 +702,7 @@ public void run() {
                 cmd.query = query;
                 cmd.setVersion(version);
                 cmd.setFlags(UpdateCommand.REPLAY | UpdateCommand.IGNORE_AUTOCOMMIT);
-                uhandler.delete(cmd);
+                proc.processDelete(cmd);
                 break;
               }
 
@@ -698,7 +728,6 @@ public void run() {
           }
         }
 
-        SolrQueryRequest req = new LocalSolrQueryRequest(uhandler.core, params);
         CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);
         cmd.setVersion(commitVersion);
         cmd.softCommit = false;
@@ -710,9 +739,17 @@ public void run() {
           log.error("Replay exception: final commit.", ex);
         }
 
+        try {
+          proc.finish();
+        } catch (IOException ex) {
+          log.error("Replay exception: finish()", ex);
+        }
+
         tlogReader.close();
         translog.decref();
 
+      } catch (Exception e) {
+        SolrException.log(log,e);
       } finally {
         // change the state while updates are still blocked to prevent races
         state = State.ACTIVE;
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
index 29a64e04..7ef23643 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
@@ -97,9 +97,9 @@ public void finish(List<String> shards) {
   public void distribDelete(DeleteUpdateCommand cmd, List<String> shards) throws IOException {
     checkResponses(false);
     
-    if (cmd.id != null) {
+    if (cmd.isDeleteById()) {
       doDelete(cmd, shards);
-    } else if (cmd.query != null) {
+    } else {
       // TODO: query must be broadcast to all ??
       doDelete(cmd, shards);
     }
@@ -240,10 +240,9 @@ boolean flushDeletes(int limit, CommitUpdateCommand ccmd, List<String> shards) {
     addCommit(ureq, ccmd);
     
     for (DeleteUpdateCommand cmd : dlist) {
-      if (cmd.id != null) {
-        ureq.deleteById(cmd.id);
-      }
-      if (cmd.query != null) {
+      if (cmd.isDeleteById()) {
+        ureq.deleteById(cmd.getId());
+      } else {
         ureq.deleteByQuery(cmd.query);
       }
     }
@@ -253,11 +252,9 @@ boolean flushDeletes(int limit, CommitUpdateCommand ccmd, List<String> shards) {
     return true;
   }
   
-  // TODO: this is brittle
   private DeleteUpdateCommand clone(DeleteUpdateCommand cmd) {
-    DeleteUpdateCommand c = new DeleteUpdateCommand(req);
-    c.id = cmd.id;
-    c.query = cmd.query;
+    DeleteUpdateCommand c = (DeleteUpdateCommand)cmd.clone();
+    cmd.setReq(req);
     return c;
   }
   
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateCommand.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateCommand.java
index 0cec1a33..a7e66b6a 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateCommand.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateCommand.java
@@ -17,6 +17,7 @@
 
 package org.apache.solr.update;
 
+import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.request.SolrQueryRequest;
 
 
@@ -24,8 +25,8 @@
  *
  *
  */
-  public class UpdateCommand {
-    protected final SolrQueryRequest req;
+public class UpdateCommand implements Cloneable {
+  protected SolrQueryRequest req;
     protected final String commandName;
     protected long version;
     protected int flags;
@@ -58,4 +59,21 @@ public void setFlags(int flags) {
     public int getFlags() {
       return flags;
     }
+
+  public SolrQueryRequest getReq() {
+    return req;
+  }
+
+  public void setReq(SolrQueryRequest req) {
+    this.req = req;
+  }
+
+  @Override
+  public UpdateCommand clone() {
+    try {
+      return (UpdateCommand) super.clone();
+    } catch (CloneNotSupportedException e) {
+      return null;
+    }
   }
+}
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateLog.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateLog.java
index f3617ff5..373e7268 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -50,8 +50,8 @@
   public abstract void close();
   public abstract VersionInfo getVersionInfo();
   public abstract void finish(SyncLevel syncLevel);
-  public abstract boolean recoverFromLog();
 
+  public abstract Future<RecoveryInfo> recoverFromLog();
   public abstract void bufferUpdates();
   public abstract Future<FSUpdateLog.RecoveryInfo> applyBufferedUpdates();
   public abstract State getState();
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
index f0b9a9fe..20a0850f 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
@@ -293,15 +293,25 @@ private boolean versionAdd(AddUpdateCommand cmd, int hash) throws IOException {
     // we may or may not be the leader.
 
     // Find any existing version in the document
-    long versionOnUpdate = 0;
+    // TODO: don't reuse update commands any more!
+    long versionOnUpdate = cmd.getVersion();
+
+    if (versionOnUpdate == 0) {
     SolrInputField versionField = cmd.getSolrInputDocument().getField(VersionInfo.VERSION_FIELD);
     if (versionField != null) {
       Object o = versionField.getValue();
       versionOnUpdate = o instanceof Number ? ((Number) o).longValue() : Long.parseLong(o.toString());
     } else {
-      // TODO: check for the version in the request params (this will be for user provided versions and optimistic concurrency only)
+        // Find the version
+        String versionOnUpdateS = req.getParams().get(VERSION_FIELD);
+        versionOnUpdate = versionOnUpdateS == null ? 0 : Long.parseLong(versionOnUpdateS);
+      }
     }
 
+    boolean isReplay = (cmd.getFlags() & UpdateCommand.REPLAY) != 0;
+    boolean leaderLogic = isLeader && !isReplay;
+
+
     VersionBucket bucket = vinfo.bucket(hash);
 
     vinfo.lockForUpdate();
@@ -319,7 +329,7 @@ private boolean versionAdd(AddUpdateCommand cmd, int hash) throws IOException {
 
           long bucketVersion = bucket.highest;
 
-          if (isLeader) {
+          if (leaderLogic) {
             long version = vinfo.getNewClock();
             cmd.setVersion(version);
             cmd.getSolrInputDocument().setField(VersionInfo.VERSION_FIELD, version);
@@ -414,7 +424,7 @@ private boolean versionDelete(DeleteUpdateCommand cmd, int hash) throws IOExcept
       return false;
     }
 
-    if (cmd.id == null) {
+    if (!cmd.isDeleteById()) {
       // delete-by-query
       // TODO: forward to all nodes in distrib mode?  or just don't bother to support?
       return false;
@@ -424,8 +434,19 @@ private boolean versionDelete(DeleteUpdateCommand cmd, int hash) throws IOExcept
     // we may or may not be the leader.
 
     // Find the version
+    long versionOnUpdate = cmd.getVersion();
+    if (versionOnUpdate == 0) {
     String versionOnUpdateS = req.getParams().get(VERSION_FIELD);
-    Long versionOnUpdate = versionOnUpdateS == null ? null : Long.parseLong(versionOnUpdateS);
+      versionOnUpdate = versionOnUpdateS == null ? 0 : Long.parseLong(versionOnUpdateS);
+    }
+    versionOnUpdate = Math.abs(versionOnUpdate);  // normalize to positive version
+
+    boolean isReplay = (cmd.getFlags() & UpdateCommand.REPLAY) != 0;
+    boolean leaderLogic = isLeader && !isReplay;
+
+    if (!leaderLogic && versionOnUpdate==0) {
+      throw new SolrException(ErrorCode.BAD_REQUEST, "missing _version_ on update from leader");
+    }
 
     VersionBucket bucket = vinfo.bucket(hash);
 
@@ -436,17 +457,12 @@ private boolean versionDelete(DeleteUpdateCommand cmd, int hash) throws IOExcept
         if (versionsStored) {
           long bucketVersion = bucket.highest;
 
-          if (isLeader) {
+          if (leaderLogic) {
             long version = vinfo.getNewClock();
             cmd.setVersion(-version);
             bucket.updateHighest(version);
           } else {
-            // The leader forwarded us this update.
-            if (versionOnUpdate == null) {
-              throw new RuntimeException("we expected to find versionOnUpdate but did not");
-            }
-
-            cmd.setVersion(versionOnUpdate);
+            cmd.setVersion(-versionOnUpdate);
 
             if (ulog.getState() != UpdateLog.State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {
               // we're not in an active state, and this update isn't from a replay, so buffer it.
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java
index d53314e6..6f6b94e4 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java
@@ -117,20 +117,20 @@ public void processAdd(AddUpdateCommand cmd) throws IOException {
 
   @Override
   public void processDelete( DeleteUpdateCommand cmd ) throws IOException {
-    if (cmd.id != null) {
+    if (cmd.isDeleteById()) {
       if (deletes == null) {
         deletes = new ArrayList<String>();
         toLog.add("delete",deletes);
       }
       if (deletes.size() < maxNumToLog) {
-        deletes.add(cmd.id);
+        deletes.add(cmd.getId());
       }
-      if (logDebug) { log.debug("delete {}", cmd.id); }
+      if (logDebug) { log.debug("delete {}", cmd.getId()); }
     } else {
       if (toLog.size() < maxNumToLog) {
         toLog.add("deleteByQuery", cmd.query);
       }
-      if (logDebug) { log.debug("deleteByQuery {}", cmd.query); }
+      if (logDebug) { log.debug("deleteByQuery {}", cmd.getQuery()); }
     }
     numDeletes++;
 
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/RunUpdateProcessorFactory.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/RunUpdateProcessorFactory.java
index 80e95252..6b69bf5d 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/RunUpdateProcessorFactory.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/RunUpdateProcessorFactory.java
@@ -60,7 +60,7 @@ public void processAdd(AddUpdateCommand cmd) throws IOException {
 
   @Override
   public void processDelete(DeleteUpdateCommand cmd) throws IOException {
-    if( cmd.id != null ) {
+    if( cmd.isDeleteById()) {
       updateHandler.delete(cmd);
     }
     else {
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
index abd0425e..7abadf86 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
@@ -115,12 +115,12 @@ public void testParsing() throws Exception
     // DELETE COMMANDS
     assertEquals( 2, p.deleteCommands.size() );
     DeleteUpdateCommand delete = p.deleteCommands.get( 0 );
-    assertEquals( delete.id, "ID" );
-    assertEquals( delete.query, null );
+    assertEquals( delete.getId(), "ID" );
+    assertEquals( delete.getQuery(), null );
     
     delete = p.deleteCommands.get( 1 );
-    assertEquals( delete.id, null );
-    assertEquals( delete.query, "QUERY" );
+    assertEquals( delete.getId(), null );
+    assertEquals( delete.getQuery(), "QUERY" );
 
     // ROLLBACK COMMANDS
     assertEquals( 1, p.rollbackCommands.size() );
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRealTimeGet.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRealTimeGet.java
index b3d8e38e..d553946d 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRealTimeGet.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRealTimeGet.java
@@ -836,12 +836,12 @@ public void run() {
               if (oper < commitPercent + deletePercent) {
                 verbose("deleting id",id,"val=",nextVal,"version",version);
 
-                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params("_version_",Long.toString(version), SEEN_LEADER,SEEN_LEADER_VAL));
+                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params("_version_",Long.toString(-version), SEEN_LEADER,SEEN_LEADER_VAL));
 
                 // TODO: returning versions for these types of updates is redundant
                 // but if we do return, they had better be equal
                 if (returnedVersion != null) {
-                  assertEquals(version, returnedVersion.longValue());
+                  assertEquals(-version, returnedVersion.longValue());
                 }
 
                 // only update model if the version is newer
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRecovery.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRecovery.java
index d1a29860..5a7f7b53 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRecovery.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/search/TestRecovery.java
@@ -82,6 +82,8 @@ public void run() {
 
       h.close();
       createCore();
+      // TODO: kick off this from solr if leader (at a minimum)
+      h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();
 
       // verify that previous close didn't do a commit
       // recovery should be blocked by our hook
@@ -106,6 +108,8 @@ public void run() {
 
       h.close();
       createCore();
+      // TODO: kick off this from solr if leader (at a minimum)
+      h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();
 
       // wait until recovery has finished
       assertTrue(logReplayFinish.tryAcquire(60, TimeUnit.SECONDS));
@@ -116,6 +120,9 @@ public void run() {
       h.close();
       int permits = logReplay.availablePermits();
       createCore();
+      // TODO: kick off this from solr if leader (at a minimum)
+      h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();
+
       assertJQ(req("q","*:*") ,"/response/numFound==3");
       Thread.sleep(100);
       assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run
@@ -173,12 +180,11 @@ public void run() {
       ulog.bufferUpdates();
       assertEquals(UpdateLog.State.BUFFERING, ulog.getState());
 
-      long version = 1;
       // simulate updates from a leader
-      updateJ(jsonAdd(sdoc("id","1", "_version_",Long.toString(++version))), params(SEEN_LEADER,SEEN_LEADER_VAL));
-      updateJ(jsonAdd(sdoc("id","2", "_version_",Long.toString(++version))), params(SEEN_LEADER,SEEN_LEADER_VAL));
-      updateJ(jsonAdd(sdoc("id","3", "_version_",Long.toString(++version))), params(SEEN_LEADER,SEEN_LEADER_VAL));
-      deleteAndGetVersion("1", params(SEEN_LEADER,SEEN_LEADER_VAL, "_version_",Long.toString(++version)));
+      updateJ(jsonAdd(sdoc("id","1", "_version_","101")), params(SEEN_LEADER,SEEN_LEADER_VAL));
+      updateJ(jsonAdd(sdoc("id","2", "_version_","102")), params(SEEN_LEADER,SEEN_LEADER_VAL));
+      updateJ(jsonAdd(sdoc("id","3", "_version_","103")), params(SEEN_LEADER,SEEN_LEADER_VAL));
+      deleteAndGetVersion("1", params(SEEN_LEADER,SEEN_LEADER_VAL, "_version_","-201"));
       assertU(commit());
 
       // updates should be buffered, so we should not see any results yet.
@@ -212,10 +218,47 @@ public void run() {
       ulog.bufferUpdates();
       assertEquals(UpdateLog.State.BUFFERING, ulog.getState());
 
-      // TODO
+      Long ver = getVer(req("qt","/get", "id","3"));
+      assertEquals(103L, ver.longValue());
+
+      // add a reordered doc that shouldn't overwrite one in the index
+      updateJ(jsonAdd(sdoc("id","3", "_version_","3")), params(SEEN_LEADER,SEEN_LEADER_VAL));
 
+      // reorder two buffered updates
+      updateJ(jsonAdd(sdoc("id","4", "_version_","104")), params(SEEN_LEADER,SEEN_LEADER_VAL));
+      deleteAndGetVersion("4", params(SEEN_LEADER,SEEN_LEADER_VAL, "_version_","-94"));   // this update should not take affect
+      updateJ(jsonAdd(sdoc("id","6", "_version_","106")), params(SEEN_LEADER,SEEN_LEADER_VAL));
+      updateJ(jsonAdd(sdoc("id","5", "_version_","105")), params(SEEN_LEADER,SEEN_LEADER_VAL));
+
+      logReplay.drainPermits();
       rinfoFuture = ulog.applyBufferedUpdates();
+      assertTrue(rinfoFuture != null);
+      assertEquals(UpdateLog.State.APPLYING_BUFFERED, ulog.getState());
+
+      // apply a single update
+      logReplay.release(1);
+
+      // now add another update
+      updateJ(jsonAdd(sdoc("id","7", "_version_","107")), params(SEEN_LEADER,SEEN_LEADER_VAL));
+
+      // a reordered update that should be dropped
+      deleteAndGetVersion("5", params(SEEN_LEADER,SEEN_LEADER_VAL, "_version_","-95"));
+
+      deleteAndGetVersion("6", params(SEEN_LEADER,SEEN_LEADER_VAL, "_version_","-206"));
+
+      logReplay.release(1000);
       if (rinfoFuture != null) rinfoFuture.get();
+
+      assertJQ(req("q", "*:*", "sort","id asc", "fl","id,_version_")
+          , "/response/docs==["
+                           +  "{'id':'2','_version_':102}"
+                           + ",{'id':'3','_version_':103}"
+                           + ",{'id':'4','_version_':104}"
+                           + ",{'id':'5','_version_':105}"
+                           + ",{'id':'7','_version_':107}"
+                           +"]"
+      );
+
       assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state
     } finally {
       FSUpdateLog.testing_logReplayHook = null;
