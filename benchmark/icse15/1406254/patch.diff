diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index adf91acb..bae10a03 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -175,11 +175,13 @@ public void init(Object selectList,
 
 		if (resultColumns != null) {
 
-			// Collect window functions used in result columns, and check them
-			// for any <in-line window specification>s.
+            // Collect simply contained window functions (note: *not*
+            // any inside nested SELECTs) used in result columns, and
+            // check them for any <in-line window specification>s.
 
 			CollectNodesVisitor cnvw =
-				new CollectNodesVisitor(WindowFunctionNode.class);
+                new CollectNodesVisitor(WindowFunctionNode.class,
+                                        SelectNode.class);
 			resultColumns.accept(cnvw);
 			windowFuncCalls = cnvw.getList();
 
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java
index 4bf5348e..98fa01c3 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java
@@ -305,6 +305,23 @@ public void testBasicOperations()
 									  {"4", "4"}};
 		JDBC.assertFullResultSet(rs, expectedRows);
 
+        // Subquery in SELECT list. DERBY-5954
+        rs = s.executeQuery(
+            "SELECT rn_t1, (" +
+            "     SELECT rn_t2 FROM (" +
+            "         SELECT row_number() over() as rn_t2 FROM t2) " +
+            "         as T_2" +
+            "         where T_2.rn_t2 = T_1.rn_t1 + 1  ) " +
+            "     as rn_outer" +
+            "     FROM (SELECT row_number() over() as rn_t1 from t2) as T_1");
+
+        expectedRows = new String[][]{{"1", "2"},
+                                      {"2", "3"},
+                                      {"3", "4"},
+                                      {"4", "5"},
+                                      {"5", null}};
+        JDBC.assertFullResultSet(rs, expectedRows);
+
 
 		/*
 		 * Group by and having
