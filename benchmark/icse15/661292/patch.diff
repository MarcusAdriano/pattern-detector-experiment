diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection40.java
index ba6e1ebd..df4b12c0 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection40.java
@@ -81,8 +81,10 @@ public void addStatementEventListener(StatementEventListener listener) {
         if (logWriter_ != null) {
             logWriter_.traceEntry(this, "addStatementEventListener", listener);
         }
+        if (listener != null) {
         statementEventListeners.add(listener);
     }
+    }
     
     /**
      *
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientXAConnection40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientXAConnection40.java
index beb409c8..e371d152 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientXAConnection40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientXAConnection40.java
@@ -91,8 +91,10 @@ public void addStatementEventListener(StatementEventListener listener) {
         if (logWriter_ != null) {
             logWriter_.traceEntry(this, "addStatementEventListener", listener);
         }
+        if (listener != null) {
         statementEventListeners.add(listener);
     }
+    }
     
     /**
      * Raise the statementClosed event for all the listeners when the 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
index 670dc0e0..946a256d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
@@ -231,6 +231,35 @@ public void testCloseEvent() throws SQLException {
         assertEquals("Incorrect close count.", 1, closedCount);
     }
 
+    /**
+     * Test that you don't get a NullPointerException when the listeners are
+     * triggered and one of them is null. DERBY-3695
+     */
+    public void testAddNullEvent() throws SQLException {
+        pooledConnection.addStatementEventListener(null);
+        PreparedStatement ps = prepare("VALUES (1)");
+        ps.close(); // trigger close event
+        assertEquals(1, closedCount);
+        assertEquals(0, errorCount);
+        ps = prepare("VALUES (1)");
+        connection.close();
+        try {
+            ps.execute();
+            fail("Execute should fail on closed connection");
+        } catch (SQLNonTransientConnectionException e) {
+            assertSQLState("08003", e);
+        }
+        assertEquals(1, errorCount);
+    }
+
+    /**
+     * Test that you can call {@code removeStatementEventListener()} with a
+     * {@code null} argument.
+     */
+    public void testRemoveNullEvent() throws SQLException {
+        pooledConnection.removeStatementEventListener(null);
+    }
+
     /**
      * Test whether a close event is raised when a connection is
      * closed. (Client should raise a close event since the connection calls
