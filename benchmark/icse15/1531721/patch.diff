diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java
index 29a47828..50b58ce8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Stack;
 
 import org.apache.derby.iapi.error.ShutdownException;
+import org.apache.derby.iapi.services.info.JVMInfo;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
@@ -555,6 +556,11 @@ public void notifyAllActiveThreads(Context c) {
                 final Thread fActive = active;
 				if (cm.setInterrupted(c))
                 {
+                    // DERBY-6352; in some cases a SecurityException is seen
+                    // demanding an explicit granting of modifyThread 
+                    // permission, which should not be needed for Derby, as we
+                    // should not have any system threads.
+                    try {
                     AccessController.doPrivileged(
                             new PrivilegedAction<Void>() {
                                 public Void run()  {
@@ -562,6 +568,27 @@ public Void run()  {
                                     return null;
                                 }
                             });
+                    } catch (java.security.AccessControlException ace) {
+                        // if sane, ASSERT and stop. The Assert will 
+                        // cause info on all current threads to be printed to
+                        // the console, and we're also adding details about 
+                        // the thread causing the security exception.
+                        // if insane, rethrow, and if an IBM JVM, do a jvmdump
+                        if (SanityManager.DEBUG)
+                        {
+                            SanityManager.THROWASSERT("unexpectedly needing " +
+                                    "an extra permission, for thread: " +
+                                    fActive.getName() + " with state: "+ 
+                                    fActive.getState());
+                            ace.printStackTrace();
+                        }
+                        else {
+                            if (JVMInfo.isIBMJVM()) {
+                                JVMInfo.javaDump();
+                            }
+                            throw ace;
+                        }
+                    }
                 }
 			}
 		}
