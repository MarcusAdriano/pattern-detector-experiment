diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index 8e25517f..265323fe 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -593,6 +593,16 @@ private static long getElapsedTimeMillis(long beginTime)
 		}
 	}
 
+    /**
+     * Return the {@link PreparedStatement} currently associated with this
+     * statement.
+     *
+     * @return the prepared statement that is associated with this statement
+     */
+    public PreparedStatement getPreparedStatement() {
+        return preparedStmt;
+    }
+
 	/*
 	** Identity
 	*/
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index aee5c6d8..d9c909b1 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -29,7 +29,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.impl.sql.execute.AutoincrementCounter;
 import org.apache.derby.impl.sql.GenericPreparedStatement;
 import org.apache.derby.impl.sql.GenericStatement;
-import org.apache.derby.iapi.sql.Statement;
 
 import org.apache.derby.iapi.services.property.PropertyUtil;
 import org.apache.derby.iapi.services.context.ContextManager;
@@ -879,13 +878,16 @@ public CursorActivation lookupCursorActivation(String cursorName) {
 
 	/**
 	*  This method will remove a statement from the  statement cache.
-	*  It will be called,  for example, if there is an exception preparing
-	*  the statement.
+    *  It should only be called if there is an exception preparing
+    *  the statement. The caller must have set the flag
+    *  {@code preparedStmt.compilingStatement} in the {@code GenericStatement}
+    *  before calling this method in order to prevent race conditions when
+    *  calling {@link CacheManager#remove(Cacheable)}.
 	*
 	*  @param statement Statement to remove
 	*  @exception StandardException thrown if lookup goes wrong.
 	*/	
-	public void removeStatement(Statement statement)
+	public void removeStatement(GenericStatement statement)
 		throws StandardException {
         
         CacheManager statementCache =
@@ -895,9 +897,29 @@ public void removeStatement(Statement statement)
 			return;
  
 			Cacheable cachedItem = statementCache.findCached(statement);
-			if (cachedItem != null)
+        // No need to do anything if the statement is already removed
+        if (cachedItem != null) {
+            CachedStatement cs = (CachedStatement) cachedItem;
+            if (statement.getPreparedStatement() != cs.getPreparedStatement()) {
+                // DERBY-3786: Someone else has removed the statement from
+                // the cache, probably because of the same error that brought
+                // us here. In addition, someone else has recreated the
+                // statement. Since the recreated statement is not the same
+                // object as the one we are working on, we don't have the
+                // proper guarding (through the synchronized flag
+                // GenericStatement.preparedStmt.compilingStatement) to ensure
+                // that we're the only ones calling CacheManager.remove() on
+                // this statement. Therefore, just release the statement here
+                // so that we don't get in the way for the other thread that
+                // is trying to compile the same query.
+                statementCache.release(cachedItem);
+            } else {
+                // The statement object that we were trying to compile is still
+                // in the cache. Since the compilation failed, remove it.
 				statementCache.remove(cachedItem);
 	}
+        }
+	}
 
 	/**
 	 * See if a given statement has already been compiled for this user, and
