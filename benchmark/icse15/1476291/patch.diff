diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
index 132f340f..ea6aa785 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
@@ -40,6 +40,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.jdbc.EngineResultSet;
 import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.sql.execute.ExecutionContext;
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.util.StringUtil;
 import org.apache.derby.impl.jdbc.Util;
 
@@ -841,9 +842,9 @@ private int getStaticPackageIsolation(String pkgid)
         // for JCC. Other static packages will need to be supported for 
         // CCC. Maybe a static hash table would then be in order.
         if (pkgid.equals("SYSSTAT"))
-            return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
+            return TransactionControl.READ_UNCOMMITTED_ISOLATION_LEVEL;
         else
-            return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
+            return TransactionControl.UNSPECIFIED_ISOLATION_LEVEL;
     }
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 4864a8a7..91f190b5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -843,7 +843,7 @@ public void popTriggerExecutionContext(TriggerExecutionContext tec)
 	 * Get the prepare isolation level.
 	 * If the isolation level has been explicitly set with a SQL statement or
 	 * embedded call to setTransactionIsolation, this will return
-	 * ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL 
+	 * TransactionControl.UNSPECIFIED_ISOLATION_LEVEL 
 	 * SET ISOLATION always takes priority.
 	 * 
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java
index 62659d1a..e330bf1d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java
@@ -38,40 +38,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	String CONTEXT_ID = "ExecutionContext";
 	
 	
-	/* Constants for scan isolation levels. */
-	public static final int UNSPECIFIED_ISOLATION_LEVEL = 0;
-	public static final int READ_UNCOMMITTED_ISOLATION_LEVEL = 1;
-	public static final int READ_COMMITTED_ISOLATION_LEVEL = 2;
-	public static final int REPEATABLE_READ_ISOLATION_LEVEL = 3;
-	public static final int SERIALIZABLE_ISOLATION_LEVEL = 4;
-
-    /**
-     * Map from Derby transaction isolation constants to
-     * JDBC constants.
-     */
-	public static final int[] CS_TO_JDBC_ISOLATION_LEVEL_MAP = {
-		java.sql.Connection.TRANSACTION_NONE,				// UNSPECIFIED_ISOLATION_LEVEL
-		java.sql.Connection.TRANSACTION_READ_UNCOMMITTED,	// READ_UNCOMMITTED_ISOLATION_LEVEL
-		java.sql.Connection.TRANSACTION_READ_COMMITTED,		// READ_COMMITTED_ISOLATION_LEVEL
-		java.sql.Connection.TRANSACTION_REPEATABLE_READ,	// REPEATABLE_READ_ISOLATION_LEVEL		
-		java.sql.Connection.TRANSACTION_SERIALIZABLE		// SERIALIZABLE_ISOLATION_LEVEL
-	};
-
-    /**
-     * Map from Derby transaction isolation constants to
-     * text values used in SQL. Note that the text
-     * "REPEATABLE READ" or "RR" maps to SERIALIZABLE_ISOLATION_LEVEL
-     * as a hang over from DB2 compatibility and now to preserve
-     * backwards compatability.
-     */
-	public static final String[][] CS_TO_SQL_ISOLATION_MAP = {
-		{ "  "},					// UNSPECIFIED_ISOLATION_LEVEL
-		{ "UR", "DIRTY READ", "READ UNCOMMITTED"},
-		{ "CS", "CURSOR STABILITY", "READ COMMITTED"},
-		{ "RS"},		// read stability	
-		{ "RR", "REPEATABLE READ", "SERIALIZABLE"}
-	};
-
 	/**
 	 * Get the ExecutionFactory from this ExecutionContext.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/transaction/TransactionControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/transaction/TransactionControl.java
index 075f0f65..34128079 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/transaction/TransactionControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/transaction/TransactionControl.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.ExceptionSeverity;
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.reference.SQLState;
 
 /**
@@ -36,8 +37,57 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public final class TransactionControl {
     
+	/* Constants for scan isolation levels. */
+	public static final int UNSPECIFIED_ISOLATION_LEVEL = 0;
+	public static final int READ_UNCOMMITTED_ISOLATION_LEVEL = 1;
+	public static final int READ_COMMITTED_ISOLATION_LEVEL = 2;
+	public static final int REPEATABLE_READ_ISOLATION_LEVEL = 3;
+	public static final int SERIALIZABLE_ISOLATION_LEVEL = 4;
+
+    /**
+     * Map from Derby transaction isolation constants to
+     * JDBC constants.
+     */
+	private static final int[] CS_TO_JDBC_ISOLATION_LEVEL_MAP = {
+		java.sql.Connection.TRANSACTION_NONE,				// UNSPECIFIED_ISOLATION_LEVEL
+		java.sql.Connection.TRANSACTION_READ_UNCOMMITTED,	// READ_UNCOMMITTED_ISOLATION_LEVEL
+		java.sql.Connection.TRANSACTION_READ_COMMITTED,		// READ_COMMITTED_ISOLATION_LEVEL
+		java.sql.Connection.TRANSACTION_REPEATABLE_READ,	// REPEATABLE_READ_ISOLATION_LEVEL		
+		java.sql.Connection.TRANSACTION_SERIALIZABLE		// SERIALIZABLE_ISOLATION_LEVEL
+	};
+
+    /**
+     * Map from Derby transaction isolation constants to
+     * text values used in SQL. Note that the text
+     * "REPEATABLE READ" or "RR" maps to SERIALIZABLE_ISOLATION_LEVEL
+     * as a hang over from DB2 compatibility and now to preserve
+     * backwards compatability.
+     */
+	private static final String[][] CS_TO_SQL_ISOLATION_MAP = {
+		{ "  "},					// UNSPECIFIED_ISOLATION_LEVEL
+		{ "UR", "DIRTY READ", "READ UNCOMMITTED"},
+		{ "CS", "CURSOR STABILITY", "READ COMMITTED"},
+		{ "RS"},		// read stability	
+		{ "RR", "REPEATABLE READ", "SERIALIZABLE"}
+	};
+
     private final ArrayList listeners;
     
+    /** Map a Derby isolation level to the corresponding JDBC level */
+    public  static  int jdbcIsolationLevel( int derbyIsolationLevel )
+    {
+        return CS_TO_JDBC_ISOLATION_LEVEL_MAP[ derbyIsolationLevel ];
+    }
+
+    /** Map Derby isolation level to SQL text values */
+    public  static  String[]    isolationTextNames( int derbyIsolationLevel )
+    {
+        return ArrayUtil.copy( CS_TO_SQL_ISOLATION_MAP[ derbyIsolationLevel ] );
+    }
+
+    /** Get number of isolation string mappings */
+    public  static  int     isolationMapCount() { return CS_TO_SQL_ISOLATION_MAP.length; }
+    
     public TransactionControl()
     {
         listeners = new ArrayList();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index 3045d614..580ccae0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -84,6 +84,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.jdbc.ExceptionFactory;
 import org.apache.derby.iapi.reference.Limits;
 import org.apache.derby.iapi.sql.conn.StatementContext;
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.util.InterruptStatus;
 import org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl;
 
@@ -2213,19 +2214,19 @@ public void setTransactionIsolation(int level) throws SQLException {
 		switch (level)
 		{
 		case java.sql.Connection.TRANSACTION_READ_UNCOMMITTED:
-			iLevel = ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
+			iLevel = TransactionControl.READ_UNCOMMITTED_ISOLATION_LEVEL;
 			break;
 
 		case java.sql.Connection.TRANSACTION_READ_COMMITTED:
-			iLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
+			iLevel = TransactionControl.READ_COMMITTED_ISOLATION_LEVEL;
 			break;
 
 		case java.sql.Connection.TRANSACTION_REPEATABLE_READ:
-            iLevel = ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL;
+            iLevel = TransactionControl.REPEATABLE_READ_ISOLATION_LEVEL;
             break;
 
 		case java.sql.Connection.TRANSACTION_SERIALIZABLE:
-			iLevel = ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL;
+			iLevel = TransactionControl.SERIALIZABLE_ISOLATION_LEVEL;
 			break;
 		default:
 			throw newSQLException(SQLState.UNIMPLEMENTED_ISOLATION_LEVEL, new Integer(level));
@@ -2255,7 +2256,7 @@ public void setTransactionIsolation(int level) throws SQLException {
      */
     public final int getTransactionIsolation() throws SQLException {
         checkIfClosed();
-		return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getLanguageConnection().getCurrentIsolationLevel()];
+		return TransactionControl.jdbcIsolationLevel( getLanguageConnection().getCurrentIsolationLevel() );
 	}
 
     /**
@@ -3136,7 +3137,7 @@ private int setResultSetType(int resultSetType) {
 	 * @param level Isolation level to change to.  level is the DB2 level
 	 *               specified in the package names which happen to correspond
 	 *               to our internal levels. If 
-	 *               level == ExecutionContext.UNSPECIFIED_ISOLATION,
+	 *               level == TransactionControl.UNSPECIFIED_ISOLATION,
 	 *               the statement won't be prepared with an isolation level.
 	 * 
 	 * 
@@ -3148,11 +3149,11 @@ public void setPrepareIsolation(int level) throws SQLException
 
 		switch (level)
 		{
-			case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
-			case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
-			case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
-			case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
-			case ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL:
+			case TransactionControl.READ_UNCOMMITTED_ISOLATION_LEVEL:
+			case TransactionControl.REPEATABLE_READ_ISOLATION_LEVEL:
+			case TransactionControl.READ_COMMITTED_ISOLATION_LEVEL:
+			case TransactionControl.SERIALIZABLE_ISOLATION_LEVEL:
+			case TransactionControl.UNSPECIFIED_ISOLATION_LEVEL:
 				break;
 			default:
 				throw Util.generateCsSQLException(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index 2a0b4d4d..db1d7e28 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -44,6 +44,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.execute.ExecutionContext;
 import org.apache.derby.impl.sql.compile.StatementNode;
 import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.util.InterruptStatus;
 
 public class GenericStatement
@@ -310,7 +311,7 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 			CompilerContext cc = lcc.pushCompilerContext(compilationSchema);
 			
 			if (prepareIsolationLevel != 
-				ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL)
+				TransactionControl.UNSPECIFIED_ISOLATION_LEVEL)
 			{
 				cc.setScanIsolationLevel(prepareIsolationLevel);
 			}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
index ff5887c6..14610d01 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
@@ -73,6 +73,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
 import org.apache.derby.iapi.services.context.ContextImpl;
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.util.ReuseFactory;
 
 import java.sql.SQLWarning;
@@ -146,7 +147,7 @@ public	void	resetContext()
 		compilationSchema = null;
 		parameterList = null;
 		parameterDescriptors = null;
-		scanIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
+		scanIsolationLevel = TransactionControl.UNSPECIFIED_ISOLATION_LEVEL;
 		warnings = null;
 		savedObjects = null;
 		reliability = CompilerContext.SQL_LEGAL;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 05d475f7..0a896c90 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -73,6 +73,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
 import org.apache.derby.iapi.store.access.StoreCostController;
 import org.apache.derby.iapi.store.access.ScanController;
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.store.access.TransactionController;
 
 import org.apache.derby.iapi.types.DataValueDescriptor;
@@ -4260,7 +4261,7 @@ public int updateTargetLockMode()
             getLanguageConnectionContext().getCurrentIsolationLevel();
 
 
-		if ((isolationLevel != ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL) &&
+		if ((isolationLevel != TransactionControl.SERIALIZABLE_ISOLATION_LEVEL) &&
 			(tableDescriptor.getLockGranularity() != 
 					TableDescriptor.TABLE_LOCK_GRANULARITY))
 		{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index 9d0d5f8a..aa687b68 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -62,6 +62,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.sql.execute.ExecutionContext;
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.util.JBitSet;
@@ -1956,7 +1957,7 @@ public String getOriginalSQL() {
 	}
 	
 	public final int getStatementIsolationLevel() {
-		return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getCompilerContext().getScanIsolationLevel()];
+		return TransactionControl.jdbcIsolationLevel( getCompilerContext().getScanIsolationLevel() );
 	}
 
 	public void setSharedState(String key, java.io.Serializable value) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index cef45ec8..84ff7603 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -73,6 +73,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.store.access.TransactionController;
 import org.apache.derby.iapi.store.access.XATransactionController;
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.util.IdUtil;
 import org.apache.derby.iapi.util.InterruptStatus;
 
@@ -230,7 +231,7 @@ be more appropriate to have it in a separate context (LanguageTransactionContext
     private SchemaDescriptor cachedInitialDefaultSchemaDescr = null;
 
     // RESOLVE - How do we want to set the default.
-    private int defaultIsolationLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
+    private int defaultIsolationLevel = TransactionControl.READ_COMMITTED_ISOLATION_LEVEL;
     protected int isolationLevel = defaultIsolationLevel;
 
     private boolean isolationLevelExplicitlySet = false;
@@ -254,7 +255,7 @@ be more appropriate to have it in a separate context (LanguageTransactionContext
     // isolation level to when preparing statements.
     // if unspecified, the statement won't be prepared with a specific 
     // scan isolationlevel
-    protected int prepareIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
+    protected int prepareIsolationLevel = TransactionControl.UNSPECIFIED_ISOLATION_LEVEL;
 
     // Whether or not to write executing statement info to db2j.log
     private boolean logStatementText;
@@ -2950,7 +2951,7 @@ public void setIsolationLevel(int isolationLevel) throws StandardException
      */
     public int getCurrentIsolationLevel()
     {
-        return (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL) ? defaultIsolationLevel : isolationLevel;
+        return (isolationLevel == TransactionControl.UNSPECIFIED_ISOLATION_LEVEL) ? defaultIsolationLevel : isolationLevel;
     }
 
     /**
@@ -2958,9 +2959,11 @@ public int getCurrentIsolationLevel()
      */
     public String getCurrentIsolationLevelStr()
     {
-        if( isolationLevel >= 0 && isolationLevel < ExecutionContext.CS_TO_SQL_ISOLATION_MAP.length)
-            return ExecutionContext.CS_TO_SQL_ISOLATION_MAP[ isolationLevel][0];
-        return ExecutionContext.CS_TO_SQL_ISOLATION_MAP[ ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL][0];
+        if( isolationLevel >= 0 && isolationLevel < TransactionControl.isolationMapCount() )
+        {
+            return TransactionControl.isolationTextNames( isolationLevel )[0];
+        }
+        return TransactionControl.isolationTextNames( TransactionControl.UNSPECIFIED_ISOLATION_LEVEL )[0];
     }
 
     /**
@@ -2979,7 +2982,7 @@ public int getPrepareIsolationLevel()
         if (!isolationLevelExplicitlySet)
             return prepareIsolationLevel;
         else
-            return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
+            return TransactionControl.UNSPECIFIED_ISOLATION_LEVEL;
     }
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
index be79bb1b..628a859c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
@@ -40,6 +40,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.catalog.UUID;
 import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.iapi.transaction.TransactionControl;
 
 /**
  * For INSERT/UPDATE/DELETE impls.  Used to tag them.
@@ -235,7 +236,7 @@ protected ExecRow makeDeferredSparseRow(
      * Decode the update lock mode.
      * <p>
      * The value for update lock mode is in the second most significant byte for
-     * ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL isolation level. Otherwise
+     * TransactionControl.SERIALIZABLE_ISOLATION_LEVEL isolation level. Otherwise
      * (REPEATABLE READ, READ COMMITTED, and READ UNCOMMITTED) the lock mode is
      * located in the least significant byte.
      * <p>
@@ -260,12 +261,12 @@ int decodeLockMode(int lockMode) {
         }
 
         // Note that isolation level encoding from getCurrentIsolationLevel()
-        // returns ExecutionContext.*ISOLATION_LEVEL constants, not
+        // returns TransactionControl.*ISOLATION_LEVEL constants, not
         // TransactionController.ISOLATION* constants.
 
         int isolationLevel = lcc.getCurrentIsolationLevel();
 
-        if (isolationLevel == ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL) {
+        if (isolationLevel == TransactionControl.SERIALIZABLE_ISOLATION_LEVEL) {
             return lockMode >>> 16;
         }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java
index 595fe805..5e29e25f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java
@@ -42,7 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
 import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
 import org.apache.derby.iapi.store.access.TransactionController;
-
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 
 import org.apache.derby.iapi.types.RowLocation;
@@ -301,7 +301,7 @@ public void openForUpdate(
 		int isolationLevel;
 		if (lcc == null)
 		{
-			isolationLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
+			isolationLevel = TransactionControl.READ_COMMITTED_ISOLATION_LEVEL;
 		}
 		else
 		{
@@ -313,22 +313,22 @@ public void openForUpdate(
 		{
 			// Even though we preserve the isolation level at READ UNCOMMITTED,
 			// Store will overwrite it to READ COMMITTED for update.
-			case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
+			case TransactionControl.READ_UNCOMMITTED_ISOLATION_LEVEL:
 				isolationLevel = 
                     TransactionController.ISOLATION_READ_UNCOMMITTED;
 				break;
 
-			case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
+			case TransactionControl.READ_COMMITTED_ISOLATION_LEVEL:
 				isolationLevel = 
                     TransactionController.ISOLATION_READ_COMMITTED;
 				break;
 
-			case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
+			case TransactionControl.REPEATABLE_READ_ISOLATION_LEVEL:
 				isolationLevel = 
                     TransactionController.ISOLATION_REPEATABLE_READ;
 				break;
 
-			case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
+			case TransactionControl.SERIALIZABLE_ISOLATION_LEVEL:
 				isolationLevel = 
                     TransactionController.ISOLATION_SERIALIZABLE;
 				break;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java
index c449aecd..3f61104e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java
@@ -28,6 +28,7 @@
 import org.apache.derby.iapi.sql.execute.ExecRowBuilder;
 import org.apache.derby.iapi.sql.execute.ExecutionContext;
 import org.apache.derby.iapi.store.access.TransactionController;
+import org.apache.derby.iapi.transaction.TransactionControl;
 
 /**
  * Abstract <code>ResultSet</code> class for <code>NoPutResultSet</code>s which
@@ -114,7 +115,7 @@
         this.tableLocked = tableLocked;
         suppliedLockMode = lockMode;
 
-        if (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL) {
+        if (isolationLevel == TransactionControl.UNSPECIFIED_ISOLATION_LEVEL) {
             unspecifiedIsolationLevel = true;
             isolationLevel = getLanguageConnectionContext().getCurrentIsolationLevel();
         } else {
@@ -176,7 +177,7 @@ private int getLockMode(int languageLevel) {
          */
         if (tableLocked ||
                 (languageLevel ==
-                     ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL)) {
+                     TransactionControl.SERIALIZABLE_ISOLATION_LEVEL)) {
             return suppliedLockMode;
         } else {
             return TransactionController.MODE_RECORD;
@@ -192,9 +193,9 @@ private int getLockMode(int languageLevel) {
     private int translateLanguageIsolationLevel(int languageLevel) {
 
         switch (languageLevel) {
-        case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
+        case TransactionControl.READ_UNCOMMITTED_ISOLATION_LEVEL:
             return TransactionController.ISOLATION_READ_UNCOMMITTED;
-        case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
+        case TransactionControl.READ_COMMITTED_ISOLATION_LEVEL:
             /*
              * Now we see if we can get instantaneous locks
              * if we are getting share locks.
@@ -205,9 +206,9 @@ private int translateLanguageIsolationLevel(int languageLevel) {
                 return TransactionController.ISOLATION_READ_COMMITTED;
             }
             return TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
-        case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
+        case TransactionControl.REPEATABLE_READ_ISOLATION_LEVEL:
             return TransactionController.ISOLATION_REPEATABLE_READ;
-        case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
+        case TransactionControl.SERIALIZABLE_ISOLATION_LEVEL:
             return TransactionController.ISOLATION_SERIALIZABLE;
         }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
index 6b3f0f6f..b09409f3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
@@ -44,7 +44,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.services.loader.GeneratedMethod;
-
+import org.apache.derby.iapi.transaction.TransactionControl;
 import org.apache.derby.iapi.types.RowLocation;
 import org.apache.derby.iapi.reference.SQLState;
 
@@ -101,9 +101,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	/**
 		Specified isolation level of SELECT (scan). If not set or
-		not application, it will be set to ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL
+		not application, it will be set to TransactionControl.UNSPECIFIED_ISOLATION_LEVEL
 	*/
-	private int scanIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
+	private int scanIsolationLevel = TransactionControl.UNSPECIFIED_ISOLATION_LEVEL;
 
     //
     // class interface
@@ -704,7 +704,7 @@ public final String getOriginalSQL() {
 	}
 
 	public final int getStatementIsolationLevel() {
-		return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getScanIsolationLevel()];
+		return TransactionControl.jdbcIsolationLevel( getScanIsolationLevel() );
 	}
 
 
