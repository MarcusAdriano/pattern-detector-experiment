diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index fa5781d8..ba0bb85c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -202,7 +202,7 @@ private void deliverHintsToEndpoint(InetAddress endpoint) throws IOException, Di
         // 3. Delete the subcolumn if the write was successful
         // 4. Force a flush
         // 5. Do major compaction to clean up all deletes etc.
-        DecoratedKey epkey =  StorageService.getPartitioner().decorateKey(endpoint.getAddress());
+        DecoratedKey epkey =  StorageService.getPartitioner().decorateKey(endpoint.getHostAddress().getBytes(UTF_8));
         int rowsReplayed = 0;
         ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
         byte[] startColumn = ArrayUtils.EMPTY_BYTE_ARRAY;
@@ -223,7 +223,7 @@ private void deliverHintsToEndpoint(InetAddress endpoint) throws IOException, Di
                         String[] parts = getTableAndCFNames(tableCF.name());
                         if (sendMessage(endpoint, parts[0], parts[1], keyColumn.name()))
                         {
-                            deleteHintKey(endpoint.getAddress(), keyColumn.name(), tableCF.name(), tableCF.clock());
+                            deleteHintKey(endpoint.getHostAddress().getBytes(UTF_8), keyColumn.name(), tableCF.name(), tableCF.clock());
                             rowsReplayed++;
                         }
                         else
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 86699282..290096c0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -32,6 +32,9 @@
 import org.apache.cassandra.net.*;
 import org.apache.cassandra.utils.FBUtilities;
 
+import static com.google.common.base.Charsets.UTF_8;
+
+
 public class RowMutationVerbHandler implements IVerbHandler
 {
     private static Logger logger_ = LoggerFactory.getLogger(RowMutationVerbHandler.class);
@@ -53,7 +56,7 @@ public void doVerb(Message message)
             {
                 assert hintedBytes.length > 0;
                 ByteBuffer bb = ByteBuffer.wrap(hintedBytes);
-                byte[] addressBytes = new byte[FBUtilities.getLocalAddress().getAddress().length];
+                byte[] addressBytes = new byte[FBUtilities.getLocalAddress().getHostAddress().getBytes(UTF_8).length];
                 while (bb.remaining() > 0)
                 {
                     bb.get(addressBytes);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index c428e16a..3fd10c96 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -30,6 +30,7 @@
 
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Multimap;
+import static com.google.common.base.Charsets.UTF_8;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
@@ -179,7 +180,8 @@ public static void mutate(List<RowMutation> mutations, ConsistencyLevel consiste
     private static void addHintHeader(Message message, InetAddress target)
     {
         byte[] oldHint = message.getHeader(RowMutation.HINT);
-        byte[] hint = oldHint == null ? target.getAddress() : ArrayUtils.addAll(oldHint, target.getAddress());
+        byte[] address = target.getHostAddress().getBytes(UTF_8);
+        byte[] hint = oldHint == null ? address : ArrayUtils.addAll(oldHint, address);
         message.setHeader(RowMutation.HINT, hint);
     }
 
