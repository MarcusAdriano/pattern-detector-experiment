diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
index fd0097e9..f5345887 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
@@ -204,6 +204,10 @@ protected void executeSPS(SPSDescriptor sps) throws StandardException
 				** is associated with the SPS, so that it is cleaning up the 
 				** right statement context in LCC. 
 				**    
+                ** It is also possible that the error has already been handled
+                ** on a lower level, especially if the trigger re-enters the
+                ** JDBC layer. In that case, the current SC will be null.
+				**    
 				** When the active SC is cleaned up, the TEC will be removed
 				** from LCC and the SC object will be popped off from the LCC 
 				** as part of cleanupOnError logic.  
@@ -213,7 +217,7 @@ protected void executeSPS(SPSDescriptor sps) throws StandardException
 				StatementContext sc = lcc.getStatementContext();
 				
 				/* make sure that the cleanup is on the new SC */
-				if (active_sc != sc) 
+				if (sc != null && active_sc != sc)
 				{
 					sc.cleanupOnError(e);
 				}
