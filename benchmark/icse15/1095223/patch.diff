diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AbstractType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AbstractType.java
index 20fa63b0..1531e03c 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AbstractType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AbstractType.java
@@ -94,6 +94,8 @@ public int compare(ByteBuffer o1, ByteBuffer o2)
     
     public abstract T compose(ByteBuffer bytes);
 
+    public abstract ByteBuffer decompose(T value);
+
     /** get a string representation of a particular type. */
     public abstract String toString(T t);
     
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AsciiType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AsciiType.java
index 235e4d25..8a7c79a8 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AsciiType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/AsciiType.java
@@ -32,6 +32,12 @@
 {
     public static final AsciiType instance = new AsciiType();
 
+    public static AsciiType getInstance()
+    {
+        return instance;
+    }
+
+
     AsciiType() {} // singleton
 
     public String getString(ByteBuffer bytes)
@@ -61,9 +67,14 @@ public String compose(ByteBuffer bytes)
         return getString(bytes);
     }
 
+    public ByteBuffer decompose(String value)
+    {
+        return ByteBufferUtil.bytes(value, Charsets.US_ASCII);
+    }
+
     public ByteBuffer fromString(String source)
     {
-        return ByteBufferUtil.bytes(source, Charsets.US_ASCII);
+        return decompose(source);
     }
 
     public void validate(ByteBuffer bytes) throws MarshalException
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/BytesType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/BytesType.java
index 532d094c..c38cf1a6 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/BytesType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/BytesType.java
@@ -30,6 +30,11 @@
 {
     public static final BytesType instance = new BytesType();
 
+    public static BytesType getInstance()
+    {
+        return instance;
+    }
+
     BytesType() {} // singleton
 
     public ByteBuffer compose(ByteBuffer bytes)
@@ -37,6 +42,11 @@ public ByteBuffer compose(ByteBuffer bytes)
         return bytes.duplicate();
     }
     
+    public ByteBuffer decompose(ByteBuffer value)
+    {
+        return value;
+    }
+    
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         return BytesType.bytesCompare(o1, o2);
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/IntegerType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/IntegerType.java
index 0bb1bb71..474e9512 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/IntegerType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/IntegerType.java
@@ -29,6 +29,11 @@
 {
     public static final IntegerType instance = new IntegerType();
 
+    public static IntegerType getInstance()
+    {
+        return instance;
+    }
+
     private static int findMostSignificantByte(ByteBuffer bytes)
     {
         int len = bytes.remaining() - 1;
@@ -62,6 +67,11 @@ public BigInteger compose(ByteBuffer bytes)
         return new BigInteger(ByteBufferUtil.getArray(bytes));
     }
 
+    public ByteBuffer decompose(BigInteger value)
+    {
+        return ByteBuffer.wrap(value.toByteArray());
+    }
+
     public int compare(ByteBuffer lhs, ByteBuffer rhs)
     {
         int lhsLen = lhs.remaining();
@@ -152,7 +162,7 @@ public ByteBuffer fromString(String source) throws MarshalException
             throw new MarshalException(String.format("unable to make int from '%s'", source), e);
         }
 
-        return ByteBuffer.wrap(integerType.toByteArray());
+        return decompose(integerType);
     }
 
     public void validate(ByteBuffer bytes) throws MarshalException
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
index f0508345..765648f1 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
@@ -31,6 +31,11 @@
 {
     public static final LexicalUUIDType instance = new LexicalUUIDType();
 
+    public static LexicalUUIDType getInstance()
+    {
+        return instance;
+    }
+
     LexicalUUIDType() {} // singleton
 
     public UUID compose(ByteBuffer bytes)
@@ -38,6 +43,11 @@ public UUID compose(ByteBuffer bytes)
         return UUIDGen.getUUID(bytes);
     }
 
+    public ByteBuffer decompose(UUID value)
+    {
+        return ByteBuffer.wrap(UUIDGen.decompose(value));
+    }
+
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         if (o1.remaining() == 0)
@@ -78,7 +88,7 @@ public ByteBuffer fromString(String source) throws MarshalException
 
         try
         {
-            return ByteBuffer.wrap(UUIDGen.decompose(UUID.fromString(source)));
+            return decompose(UUID.fromString(source));
         }
         catch (IllegalArgumentException e)
         {
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
index cdadd31c..a2a5c367 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
@@ -43,6 +43,11 @@ public ByteBuffer compose(ByteBuffer bytes)
         throw new UnsupportedOperationException("You can't do this with a local partitioner.");
     }
 
+    public ByteBuffer decompose(ByteBuffer bytes)
+    {
+        throw new UnsupportedOperationException("You can't do this with a local partitioner.");
+    }
+
     public String getString(ByteBuffer bytes)
     {
         return ByteBufferUtil.bytesToHex(bytes);
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LongType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LongType.java
index 1e446b81..a92f7a76 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LongType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/LongType.java
@@ -36,6 +36,16 @@ public Long compose(ByteBuffer bytes)
         return ByteBufferUtil.toLong(bytes);
     }
 
+    public ByteBuffer decompose(Long value)
+    {
+        return ByteBufferUtil.bytes(value);
+    }
+
+    public static LongType getInstance()
+    {
+        return instance;
+    }
+
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         if (o1.remaining() == 0)
@@ -91,7 +101,7 @@ public ByteBuffer fromString(String source) throws MarshalException
             throw new MarshalException(String.format("unable to make long from '%s'", source), e);
         }
 
-        return ByteBufferUtil.bytes(longType);
+        return decompose(longType);
     }
 
     public void validate(ByteBuffer bytes) throws MarshalException
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index c63914e5..934dcc74 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -33,8 +33,13 @@
 
 public class TimeUUIDType extends AbstractType<UUID>
 {
-    
     public static final TimeUUIDType instance = new TimeUUIDType();
+
+    public static TimeUUIDType getInstance()
+    {
+        return instance;
+    }
+
     static final Pattern regexPattern = Pattern.compile("[A-Fa-f0-9]{8}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{12}");
     static final String[] iso8601Patterns = new String[] {
         "yyyy-MM-dd HH:mm",
@@ -56,6 +61,11 @@ public UUID compose(ByteBuffer bytes)
         return UUIDGen.getUUID(bytes);
     }
 
+    public ByteBuffer decompose(UUID value)
+    {
+        return ByteBuffer.wrap(UUIDGen.decompose(value));
+    }
+
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         if (o1.remaining() == 0)
@@ -139,7 +149,7 @@ public ByteBuffer fromString(String source) throws MarshalException
             try
             {
                 uuid = UUID.fromString(source);
-                idBytes = ByteBuffer.wrap(UUIDGen.decompose(uuid));
+                idBytes = decompose(uuid);
             }
             catch (IllegalArgumentException e)
             {
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/UTF8Type.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
index e993773d..61dde876 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
@@ -23,6 +23,7 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.CharacterCodingException;
 
+import com.google.common.base.Charsets;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class UTF8Type extends AbstractType<String>
@@ -31,11 +32,21 @@
 
     UTF8Type() {} // singleton
 
+    public static UTF8Type getInstance()
+    {
+        return instance;
+    }
+
     public String compose(ByteBuffer bytes)
     {
         return getString(bytes);
     }
 
+    public ByteBuffer decompose(String value)
+    {
+        return ByteBufferUtil.bytes(value, Charsets.UTF_8);
+    }
+
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         return BytesType.bytesCompare(o1, o2);
@@ -60,7 +71,7 @@ public String toString(String s)
 
     public ByteBuffer fromString(String source)
     {
-        return ByteBufferUtil.bytes(source);
+        return decompose(source);
     }
     
     public void validate(ByteBuffer bytes) throws MarshalException
