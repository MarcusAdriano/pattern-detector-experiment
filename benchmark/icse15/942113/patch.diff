diff --git a/cassandra/trunk/contrib/bmt_example/CassandraBulkLoader.java b/cassandra/trunk/contrib/bmt_example/CassandraBulkLoader.java
index 4fa6cf61..1fdc2375 100644
--- a/cassandra/trunk/contrib/bmt_example/CassandraBulkLoader.java
+++ b/cassandra/trunk/contrib/bmt_example/CassandraBulkLoader.java
@@ -54,6 +54,7 @@
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.Column;
 import org.apache.cassandra.db.ColumnFamily;
+import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.db.RowMutation;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.dht.BigIntegerToken;
@@ -230,7 +231,10 @@ public static Message createMessage(String Keyspace, String Key, String CFName,
         Column column;
 
         /* Get the first column family from list, this is just to get past validation */
-        baseColumnFamily = new ColumnFamily(CFName, "Standard",DatabaseDescriptor.getComparator(Keyspace, CFName), DatabaseDescriptor.getSubComparator(Keyspace, CFName));
+        baseColumnFamily = new ColumnFamily(CFName,
+                                            ColumnFamilyType.Standard,
+                                            DatabaseDescriptor.getComparator(Keyspace, CFName),
+                                            DatabaseDescriptor.getSubComparator(Keyspace, CFName));
         
         for(ColumnFamily cf : ColumnFamiles) {
             bufOut.reset();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
index a8cbf401..8372701f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
@@ -29,6 +29,7 @@
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.IColumn;
+import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.db.marshal.AbstractType;
 import org.apache.cassandra.db.marshal.MarshalException;
 
@@ -54,12 +55,12 @@ static void validateKeyspace(String keyspace) throws KeyspaceNotDefinedException
     }
     
     // FIXME: could use method in ThriftValidation
-    static String validateColumnFamily(String keyspace, String columnFamily) throws InvalidRequestException
+    static ColumnFamilyType validateColumnFamily(String keyspace, String columnFamily) throws InvalidRequestException
     {
         if (columnFamily.isEmpty())
             throw newInvalidRequestException("non-empty columnfamily is required");
         
-        String cfType = DatabaseDescriptor.getColumnFamilyType(keyspace, columnFamily);
+        ColumnFamilyType cfType = DatabaseDescriptor.getColumnFamilyType(keyspace, columnFamily);
         if (cfType == null)
             throw newInvalidRequestException("unconfigured columnfamily " + columnFamily);
         
@@ -70,13 +71,13 @@ static void validateColumnPath(String keyspace, ColumnPath cp) throws InvalidReq
     {
         validateKeyspace(keyspace);
         String column_family = cp.column_family.toString();
-        String cfType = validateColumnFamily(keyspace, column_family);
+        ColumnFamilyType cfType = validateColumnFamily(keyspace, column_family);
         
         byte[] column = null, super_column = null;
         if (cp.super_column != null) super_column = cp.super_column.array();
         if (cp.column != null) column = cp.column.array();
         
-        if (cfType.equals("Standard"))
+        if (cfType == ColumnFamilyType.Standard)
         {
             if (super_column != null)
                 throw newInvalidRequestException("supercolumn parameter is invalid for standard CF " + column_family);
@@ -106,7 +107,7 @@ static void validateColumns(String keyspace, String cfName, byte[] superColumnNa
                 throw newInvalidRequestException("supercolumn name length must not be greater than " + IColumn.MAX_NAME_LENGTH);
             if (superColumnName.length == 0)
                 throw newInvalidRequestException("supercolumn name must not be empty");
-            if (!DatabaseDescriptor.getColumnFamilyType(keyspace, cfName).equals("Super"))
+            if (DatabaseDescriptor.getColumnFamilyType(keyspace, cfName) == ColumnFamilyType.Standard)
                 throw newInvalidRequestException("supercolumn specified to ColumnFamily " + cfName + " containing normal columns");
         }
         
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
index b1134835..171c4675 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
@@ -416,7 +416,7 @@ private static void deleteColumnOrSuperColumnToRowMutation(RowMutation rm, Strin
         {
             for (ByteBuffer col : del.predicate.column_names)
             {
-                if (del.super_column == null && DatabaseDescriptor.getColumnFamilyType(rm.getTable(), cfName).equals("Super"))
+                if (del.super_column == null && DatabaseDescriptor.getColumnFamilyType(rm.getTable(), cfName) == ColumnFamilyType.Super)
                     rm.delete(new QueryPath(cfName, col.array()), del.timestamp);
                 else
                     rm.delete(new QueryPath(cfName, del.super_column.array(), col.array()), del.timestamp);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 56afce70..6b684596 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -205,7 +205,7 @@ private void executeDelete(CommonTree ast) throws TException, InvalidRequestExce
             return;
         }
             
-        isSuper = keyspacesMap.get(keySpace).get(columnFamily).get("Type").equals("Super") ? true : false;
+        isSuper = keyspacesMap.get(keySpace).get(columnFamily).get("Type").equals("Super");
      
         if ((columnSpecCnt < 0) || (columnSpecCnt > 2))
         {
@@ -322,7 +322,7 @@ private void executeGet(CommonTree ast) throws TException, NotFoundException, In
             return;
         }
         
-        boolean isSuper = keyspacesMap.get(keySpace).get(columnFamily).get("Type").equals("Super") ? true : false;
+        boolean isSuper = keyspacesMap.get(keySpace).get(columnFamily).get("Type").equals("Super");
         
         byte[] superColumnName = null;
         byte[] columnName = null;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index 41da3739..1d850b26 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -27,6 +27,7 @@
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 
+import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.db.marshal.AbstractType;
 import org.apache.cassandra.utils.Pair;
 
@@ -70,7 +71,7 @@ public static final void fixMaxId()
     
     public final String tableName;            // name of table which has this column family
     public final String cfName;               // name of the column family
-    public final String columnType;           // type: super, standard, etc.
+    public final ColumnFamilyType cfType;     // type: super, standard, etc.
     public final AbstractType comparator;       // name sorted, time stamp sorted etc.
     public final AbstractType subcolumnComparator; // like comparator, for supercolumns
     public final String comment; // for humans only
@@ -81,11 +82,11 @@ public static final void fixMaxId()
     public boolean preloadRowCache;
 
 
-    private CFMetaData(String tableName, String cfName, String columnType, AbstractType comparator, AbstractType subcolumnComparator, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance, int cfId)
+    private CFMetaData(String tableName, String cfName, ColumnFamilyType cfType, AbstractType comparator, AbstractType subcolumnComparator, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance, int cfId)
     {
         this.tableName = tableName;
         this.cfName = cfName;
-        this.columnType = columnType;
+        this.cfType = cfType;
         this.comparator = comparator;
         this.subcolumnComparator = subcolumnComparator;
         this.comment = comment;
@@ -109,27 +110,27 @@ public static void map(CFMetaData cfm) throws ConfigurationException
         }
     }
     
-    public CFMetaData(String tableName, String cfName, String columnType, AbstractType comparator, AbstractType subcolumnComparator, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize)
+    public CFMetaData(String tableName, String cfName, ColumnFamilyType cfType, AbstractType comparator, AbstractType subcolumnComparator, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize)
     {
-        this(tableName, cfName, columnType, comparator, subcolumnComparator, comment, rowCacheSize, preloadRowCache, keyCacheSize, DEFAULT_READ_REPAIR_CHANCE, nextId());
+        this(tableName, cfName, cfType, comparator, subcolumnComparator, comment, rowCacheSize, preloadRowCache, keyCacheSize, DEFAULT_READ_REPAIR_CHANCE, nextId());
     }
 
-    public CFMetaData(String tableName, String cfName, String columnType, AbstractType comparator, AbstractType subcolumnComparator, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance)
+    public CFMetaData(String tableName, String cfName, ColumnFamilyType cfType, AbstractType comparator, AbstractType subcolumnComparator, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance)
     {
-        this(tableName, cfName, columnType, comparator, subcolumnComparator, comment, rowCacheSize, preloadRowCache, keyCacheSize, readRepairChance, nextId());
+        this(tableName, cfName, cfType, comparator, subcolumnComparator, comment, rowCacheSize, preloadRowCache, keyCacheSize, readRepairChance, nextId());
     }
 
     /** clones an existing CFMetaData using the same id. */
     public static CFMetaData rename(CFMetaData cfm, String newName)
     {
-        CFMetaData newCfm = new CFMetaData(cfm.tableName, newName, cfm.columnType, cfm.comparator, cfm.subcolumnComparator, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.cfId);
+        CFMetaData newCfm = new CFMetaData(cfm.tableName, newName, cfm.cfType, cfm.comparator, cfm.subcolumnComparator, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.cfId);
         return newCfm;
     }
     
     /** clones existing CFMetaData. keeps the id but changes the table name.*/
     public static CFMetaData renameTable(CFMetaData cfm, String tableName)
     {
-        return new CFMetaData(tableName, cfm.cfName, cfm.columnType, cfm.comparator, cfm.subcolumnComparator, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.cfId);
+        return new CFMetaData(tableName, cfm.cfName, cfm.cfType, cfm.comparator, cfm.subcolumnComparator, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.cfId);
     }
     
     /** used for evicting cf data out of static tracking collections. */
@@ -143,7 +144,7 @@ public static void purge(CFMetaData cfm)
     public String pretty()
     {
         return tableName + "." + cfName + "\n"
-               + "Column Family Type: " + columnType + "\n"
+               + "Column Family Type: " + cfType + "\n"
                + "Columns Sorted By: " + comparator + "\n";
     }
 
@@ -153,7 +154,7 @@ public String pretty()
         DataOutputStream dout = new DataOutputStream(bout);
         dout.writeUTF(cfm.tableName);
         dout.writeUTF(cfm.cfName);
-        dout.writeUTF(cfm.columnType);
+        dout.writeUTF(cfm.cfType.name());
         dout.writeUTF(cfm.comparator.getClass().getName());
         dout.writeBoolean(cfm.subcolumnComparator != null);
         if (cfm.subcolumnComparator != null)
@@ -175,7 +176,7 @@ public static CFMetaData deserialize(InputStream in) throws IOException
         DataInputStream din = new DataInputStream(in);
         String tableName = din.readUTF();
         String cfName = din.readUTF();
-        String columnType = din.readUTF();
+        ColumnFamilyType cfType = ColumnFamilyType.create(din.readUTF());
         AbstractType comparator = null;
         try
         {
@@ -200,7 +201,7 @@ public static CFMetaData deserialize(InputStream in) throws IOException
         double keyCacheSize = din.readDouble();
         double readRepairChance = din.readDouble();
         int cfId = din.readInt();
-        return new CFMetaData(tableName, cfName, columnType, comparator, subcolumnComparator, comment, rowCacheSize, preloadRowCache, keyCacheSize, readRepairChance, cfId);
+        return new CFMetaData(tableName, cfName, cfType, comparator, subcolumnComparator, comment, rowCacheSize, preloadRowCache, keyCacheSize, readRepairChance, cfId);
     }
     
 
@@ -219,7 +220,7 @@ else if (obj == null || obj.getClass() != getClass())
         return new EqualsBuilder()
             .append(tableName, rhs.tableName)
             .append(cfName, rhs.cfName)
-            .append(columnType, rhs.columnType)
+            .append(cfType, rhs.cfType)
             .append(comparator, rhs.comparator)
             .append(subcolumnComparator, rhs.subcolumnComparator)
             .append(comment, rhs.comment)
@@ -235,7 +236,7 @@ public int hashCode()
         return new HashCodeBuilder(29, 1597)
             .append(tableName)
             .append(cfName)
-            .append(columnType)
+            .append(cfType)
             .append(comparator)
             .append(subcolumnComparator)
             .append(comment)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java
index 34dbf330..b917e445 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java
@@ -1,8 +1,10 @@
 package org.apache.cassandra.config;
 
+import org.apache.cassandra.db.ColumnFamilyType;
+
 public class ColumnFamily {
     public String name;            
-    public String column_type;
+    public ColumnFamilyType column_type;
     public String compare_with;
     public String compare_subcolumns_with;
     public String comment;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
index bcad6399..c95d7f05 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
@@ -13,6 +13,7 @@
 
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.XMLUtils;
+import org.apache.cassandra.db.ColumnFamilyType;
 import org.w3c.dom.NodeList;
 import org.w3c.dom.Node;
 import org.xml.sax.SAXException;
@@ -67,10 +68,10 @@
                     ks.column_families[j] = new ColumnFamily();
                     ks.column_families[j].name = XMLUtils.getAttributeValue(columnFamily, "Name");
                     String xqlCF = xqlTable + "ColumnFamily[@Name='" + ks.column_families[j].name + "']/";
-                    ks.column_families[j].column_type = XMLUtils.getAttributeValue(columnFamily, "ColumnType");
+                    ks.column_families[j].column_type = ColumnFamilyType.create(XMLUtils.getAttributeValue(columnFamily, "ColumnType"));
                     ks.column_families[j].compare_with = XMLUtils.getAttributeValue(columnFamily, "CompareWith");
                     
-                    if (ks.column_families[j].column_type != null && ks.column_families[j].column_type.equals("Super"))
+                    if (ks.column_families[j].column_type != null && ks.column_families[j].column_type == ColumnFamilyType.Super)
                         ks.column_families[j].compare_subcolumns_with = XMLUtils.getAttributeValue(columnFamily, "CompareSubcolumnsWith");
                     
                     if ((value = XMLUtils.getAttributeValue(columnFamily, "KeysCached")) != null)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 71dc81f3..874a4d36 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -281,7 +281,7 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)
             {
                 new CFMetaData(Table.SYSTEM_TABLE,
                                SystemTable.STATUS_CF,
-                               "Standard",
+                               ColumnFamilyType.Standard,
                                new UTF8Type(),
                                null,
                                "persistent metadata for the local node",
@@ -290,7 +290,7 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)
                                0.01),
                 new CFMetaData(Table.SYSTEM_TABLE,
                                HintedHandOffManager.HINTS_CF,
-                               "Super",
+                               ColumnFamilyType.Super,
                                new UTF8Type(),
                                new BytesType(),
                                "hinted handoff data",
@@ -305,8 +305,8 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)
                 
             CFMetaData[] definitionCfDefs = new CFMetaData[]
             {
-                new CFMetaData(Table.DEFINITIONS, Migration.MIGRATIONS_CF, "Standard", new TimeUUIDType(), null, "individual schema mutations", 0, false, 0),
-                new CFMetaData(Table.DEFINITIONS, Migration.SCHEMA_CF, "Standard", new UTF8Type(), null, "current state of the schema", 0, false, 0)
+                new CFMetaData(Table.DEFINITIONS, Migration.MIGRATIONS_CF, ColumnFamilyType.Standard, new TimeUUIDType(), null, "individual schema mutations", 0, false, 0),
+                new CFMetaData(Table.DEFINITIONS, Migration.SCHEMA_CF, ColumnFamilyType.Standard, new UTF8Type(), null, "current state of the schema", 0, false, 0)
             };
             CFMetaData.map(definitionCfDefs[0]);
             CFMetaData.map(definitionCfDefs[1]);
@@ -484,16 +484,11 @@ public static void loadSchemas() throws IOException
                     throw new ConfigurationException("ColumnFamily names cannot contain hyphens");
                 }
                 
-                String columnType = org.apache.cassandra.db.ColumnFamily.getColumnType(cf.column_type);
-                if (columnType == null)
-                {
-                    throw new ConfigurationException("ColumnFamily " + cf.name + " has invalid type " + cf.column_type);
-                }
-                
                 // Parse out the column comparator
                 AbstractType comparator = getComparator(cf.compare_with);
                 AbstractType subcolumnComparator = null;
-                if (columnType.equals("Super"))
+                ColumnFamilyType cfType = cf.column_type == null ? ColumnFamilyType.Standard : cf.column_type;
+                if (cfType == ColumnFamilyType.Super)
                 {
                     subcolumnComparator = getComparator(cf.compare_subcolumns_with);
                 }
@@ -506,7 +501,7 @@ else if (cf.compare_subcolumns_with != null)
                 {                        
                     throw new ConfigurationException("read_repair_chance must be between 0.0 and 1.0");
                 }
-                cfDefs[j++] = new CFMetaData(keyspace.name, cf.name, columnType, comparator, subcolumnComparator, cf.comment, cf.rows_cached, cf.preload_row_cache, cf.keys_cached, cf.read_repair_chance);
+                cfDefs[j++] = new CFMetaData(keyspace.name, cf.name, cfType, comparator, subcolumnComparator, cf.comment, cf.rows_cached, cf.preload_row_cache, cf.keys_cached, cf.read_repair_chance);
             }
             defs.add(new KSMetaData(keyspace.name, strategyClass, keyspace.replication_factor, cfDefs));
             
@@ -691,14 +686,14 @@ public static CFMetaData getCFMetaData(String tableName, String cfName)
         return ksm.cfMetaData().get(cfName);
     }
     
-    public static String getColumnType(String tableName, String cfName)
+    public static ColumnFamilyType getColumnFamilyType(String tableName, String cfName)
     {
-        assert tableName != null;
+        assert tableName != null && cfName != null;
         CFMetaData cfMetaData = getCFMetaData(tableName, cfName);
         
         if (cfMetaData == null)
             return null;
-        return cfMetaData.columnType;
+        return cfMetaData.cfType;
     }
 
     public static Set<String> getTables()
@@ -800,15 +795,6 @@ public static String getLogFileLocation()
         return seeds;
     }
 
-    public static String getColumnFamilyType(String tableName, String cfName)
-    {
-        assert tableName != null;
-        String cfType = getColumnType(tableName, cfName);
-        if ( cfType == null )
-            cfType = "Standard";
-    	return cfType;
-    }
-
     /*
      * Loop through all the disks to see which disk has the max free space
      * return the disk with max free space for compactions. If the size of the expected
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index 88d55020..0c8f0d70 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -46,35 +46,20 @@
     private static ColumnFamilySerializer serializer_ = new ColumnFamilySerializer();
 
     private static Logger logger_ = LoggerFactory.getLogger( ColumnFamily.class );
-    private static Map<String, String> columnTypes_ = new HashMap<String, String>();
-    String type_;
-
-    static
-    {
-        /* TODO: These are the various column types. Hard coded for now. */
-        columnTypes_.put("Standard", "Standard");
-        columnTypes_.put("Super", "Super");
-    }
+    ColumnFamilyType type_;
 
     public static ColumnFamilySerializer serializer()
     {
         return serializer_;
     }
 
-    public static String getColumnType(String key)
-    {
-    	if ( key == null )
-    		return columnTypes_.get("Standard");
-    	return columnTypes_.get(key);
-    }
-
     public static ColumnFamily create(String tableName, String cfName)
     {
-        String columnType = DatabaseDescriptor.getColumnFamilyType(tableName, cfName);
+        ColumnFamilyType cfType = DatabaseDescriptor.getColumnFamilyType(tableName, cfName);
         AbstractType comparator = DatabaseDescriptor.getComparator(tableName, cfName);
         AbstractType subcolumnComparator = DatabaseDescriptor.getSubComparator(tableName, cfName);
         int id = CFMetaData.getId(tableName, cfName);
-        return new ColumnFamily(cfName, columnType, comparator, subcolumnComparator, id);
+        return new ColumnFamily(cfName, cfType, comparator, subcolumnComparator, id);
     }
 
     private String name_;
@@ -85,11 +70,11 @@ public static ColumnFamily create(String tableName, String cfName)
     AtomicInteger localDeletionTime = new AtomicInteger(Integer.MIN_VALUE);
     private ConcurrentSkipListMap<byte[], IColumn> columns_;
 
-    public ColumnFamily(String cfName, String columnType, AbstractType comparator, AbstractType subcolumnComparator, int id)
+    public ColumnFamily(String cfName, ColumnFamilyType cfType, AbstractType comparator, AbstractType subcolumnComparator, int id)
     {
         name_ = cfName;
-        type_ = columnType;
-        columnSerializer_ = columnType.equals("Standard") ? Column.serializer() : SuperColumn.serializer(subcolumnComparator);
+        type_ = cfType;
+        columnSerializer_ = cfType == ColumnFamilyType.Standard ? Column.serializer() : SuperColumn.serializer(subcolumnComparator);
         columns_ = new ConcurrentSkipListMap<byte[], IColumn>(comparator);
         id_ = id;
     }
@@ -113,6 +98,11 @@ private AbstractType getSubComparator()
         return (columnSerializer_ instanceof SuperColumnSerializer) ? ((SuperColumnSerializer)columnSerializer_).getComparator() : null;
     }
 
+    public ColumnFamilyType getColumnFamilyType()
+    {
+        return type_;
+    }
+
     public ColumnFamily cloneMe()
     {
         ColumnFamily cf = cloneMeShallow();
@@ -151,7 +141,7 @@ public void addAll(ColumnFamily cf)
     int getColumnCount()
     {
     	int count = 0;
-        if(!isSuper())
+        if(type_ == ColumnFamilyType.Standard)
         {
             count = columns_.size();
         }
@@ -167,7 +157,7 @@ int getColumnCount()
 
     public boolean isSuper()
     {
-        return type_.equals("Super");
+        return type_ == ColumnFamilyType.Super;
     }
 
     public void addColumn(QueryPath path, byte[] value, long timestamp)
@@ -415,11 +405,6 @@ public int getLocalDeletionTime()
         return localDeletionTime.get();
     }
 
-    public String type()
-    {
-        return type_;
-    }
-
     String getComparatorName()
     {
         return getComparator().getClass().getCanonicalName();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java
index 15d5a2fb..3c44538a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java
@@ -63,7 +63,7 @@ public void serialize(ColumnFamily columnFamily, DataOutput dos)
 
             dos.writeUTF(columnFamily.name());
             dos.writeInt(columnFamily.id());
-            dos.writeUTF(columnFamily.type_);
+            dos.writeUTF(columnFamily.type_.name());
             dos.writeUTF(columnFamily.getComparatorName());
             dos.writeUTF(columnFamily.getSubComparatorName());
         }
@@ -106,7 +106,8 @@ public ColumnFamily deserialize(DataInput dis) throws IOException
         if (cfName.isEmpty())
             return null;
         int id = dis.readInt();
-        ColumnFamily cf = deserializeFromSSTableNoColumns(cfName, dis.readUTF(), readComparator(dis), readComparator(dis), id, dis);
+        ColumnFamilyType cfType = ColumnFamilyType.create(dis.readUTF());
+        ColumnFamily cf = deserializeFromSSTableNoColumns(cfName, cfType, readComparator(dis), readComparator(dis), id, dis);
         deserializeColumns(dis, cf);
         return cf;
     }
@@ -143,7 +144,7 @@ private AbstractType readComparator(DataInput dis) throws IOException
         }
     }
 
-    private ColumnFamily deserializeFromSSTableNoColumns(String name, String type, AbstractType comparator, AbstractType subComparator, int id, DataInput input) throws IOException
+    private ColumnFamily deserializeFromSSTableNoColumns(String name, ColumnFamilyType type, AbstractType comparator, AbstractType subComparator, int id, DataInput input) throws IOException
     {
         ColumnFamily cf = new ColumnFamily(name, type, comparator, subComparator, id);
         return deserializeFromSSTableNoColumns(cf, input);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyType.java
index e69de29b..9f66b413 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyType.java
@@ -0,0 +1,39 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.db;
+
+/**
+ * column family type enum
+ */
+public enum ColumnFamilyType
+{
+    Standard,
+    Super;
+
+    public final static ColumnFamilyType create(String name)
+    {
+        try
+        {
+            return name == null ? null : ColumnFamilyType.valueOf(name);
+        }
+        catch (IllegalArgumentException e)
+        {
+            return null;
+        }
+    }
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
index fe08a24a..7eb7edf5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
@@ -310,7 +310,7 @@ private static void deleteColumnOrSuperColumnToRowMutation(RowMutation rm, Strin
         {
             for(byte[] c : del.predicate.column_names)
             {
-                if (del.super_column == null && DatabaseDescriptor.getColumnFamilyType(rm.table_, cfName).equals("Super"))
+                if (del.super_column == null && DatabaseDescriptor.getColumnFamilyType(rm.table_, cfName) == ColumnFamilyType.Super)
                     rm.delete(new QueryPath(cfName, c), del.timestamp);
                 else
                     rm.delete(new QueryPath(cfName, del.super_column, c), del.timestamp);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
index 7dad84ed..7e8e4442 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
@@ -275,7 +275,8 @@ public ColumnFamily makeColumnFamily()
 
     public ICompactSerializer2<IColumn> getColumnSerializer()
     {
-        return DatabaseDescriptor.getColumnFamilyType(getTableName(), getColumnFamilyName()).equals("Standard")
+        ColumnFamilyType cfType = DatabaseDescriptor.getColumnFamilyType(getTableName(), getColumnFamilyName());
+        return cfType == ColumnFamilyType.Standard
                ? Column.serializer()
                : SuperColumn.serializer(getColumnComparator());
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 3c4f76e7..c4943d70 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -489,10 +489,10 @@ private void doInsert(ConsistencyLevel consistency_level, RowMutation rm) throws
             CFMetaData columnFamilyMetaData = stringCFMetaDataEntry.getValue();
 
             Map<String, String> columnMap = new HashMap<String, String>();
-            columnMap.put("Type", columnFamilyMetaData.columnType);
+            columnMap.put("Type", columnFamilyMetaData.cfType.name());
             columnMap.put("Desc", columnFamilyMetaData.comment == null ? columnFamilyMetaData.pretty() : columnFamilyMetaData.comment);
             columnMap.put("CompareWith", columnFamilyMetaData.comparator.getClass().getName());
-            if (columnFamilyMetaData.columnType.equals("Super"))
+            if (columnFamilyMetaData.cfType == ColumnFamilyType.Super)
             {
                 columnMap.put("CompareSubcolumnsWith", columnFamilyMetaData.subcolumnComparator.getClass().getName());
             }
@@ -651,10 +651,15 @@ public void system_add_column_family(CfDef cf_def) throws InvalidRequestExceptio
         
         try
         {
+            ColumnFamilyType cfType = ColumnFamilyType.create(cf_def.column_type);
+            if (cfType == null)
+            {
+              throw new InvalidRequestException("Invalid column type " + cf_def.column_type);
+            }
             CFMetaData cfm = new CFMetaData(
                         cf_def.table,
                         cf_def.name,
-                        ColumnFamily.getColumnType(cf_def.column_type),
+                        cfType,
                         DatabaseDescriptor.getComparator(cf_def.comparator_type),
                         cf_def.subcomparator_type.length() == 0 ? null : DatabaseDescriptor.getComparator(cf_def.subcomparator_type),
                         cf_def.comment,
@@ -752,10 +757,15 @@ public void system_add_keyspace(KsDef ks_def) throws InvalidRequestException, TE
             Collection<CFMetaData> cfDefs = new ArrayList<CFMetaData>(ks_def.cf_defs.size());
             for (CfDef cfDef : ks_def.cf_defs)
             {
+                ColumnFamilyType cfType = ColumnFamilyType.create(cfDef.column_type);
+                if (cfType == null)
+                {
+                    throw new InvalidRequestException("Invalid column type " + cfDef.column_type);
+                }
                 CFMetaData cfm = new CFMetaData(
                         cfDef.table,
                         cfDef.name,
-                        ColumnFamily.getColumnType(cfDef.column_type),
+                        cfType,
                         DatabaseDescriptor.getComparator(cfDef.comparator_type),
                         cfDef.subcomparator_type.length() == 0 ? null : DatabaseDescriptor.getComparator(cfDef.subcomparator_type),
                         cfDef.comment,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
index 637d3a75..f5b3cabb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
@@ -26,6 +26,7 @@
 import org.apache.cassandra.db.KeyspaceNotDefinedException;
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.IColumn;
+import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.db.marshal.AbstractType;
 import org.apache.cassandra.db.marshal.MarshalException;
 
@@ -60,13 +61,13 @@ private static void validateTable(String tablename) throws KeyspaceNotDefinedExc
         }
     }
 
-    public static String validateColumnFamily(String tablename, String cfName) throws InvalidRequestException
+    public static ColumnFamilyType validateColumnFamily(String tablename, String cfName) throws InvalidRequestException
     {
         if (cfName.isEmpty())
         {
             throw new InvalidRequestException("non-empty columnfamily is required");
         }
-        String cfType = DatabaseDescriptor.getColumnType(tablename, cfName);
+        ColumnFamilyType cfType = DatabaseDescriptor.getColumnFamilyType(tablename, cfName);
         if (cfType == null)
         {
             throw new InvalidRequestException("unconfigured columnfamily " + cfName);
@@ -77,8 +78,8 @@ public static String validateColumnFamily(String tablename, String cfName) throw
     static void validateColumnPath(String tablename, ColumnPath column_path) throws InvalidRequestException
     {
         validateTable(tablename);
-        String cfType = validateColumnFamily(tablename, column_path.column_family);
-        if (cfType.equals("Standard"))
+        ColumnFamilyType cfType = validateColumnFamily(tablename, column_path.column_family);
+        if (cfType == ColumnFamilyType.Standard)
         {
             if (column_path.super_column != null)
             {
@@ -107,8 +108,8 @@ static void validateColumnPath(String tablename, ColumnPath column_path) throws
     static void validateColumnParent(String tablename, ColumnParent column_parent) throws InvalidRequestException
     {
         validateTable(tablename);
-        String cfType = validateColumnFamily(tablename, column_parent.column_family);
-        if (cfType.equals("Standard"))
+        ColumnFamilyType cfType = validateColumnFamily(tablename, column_parent.column_family);
+        if (cfType == ColumnFamilyType.Standard)
         {
             if (column_parent.super_column != null)
             {
@@ -125,8 +126,8 @@ static void validateColumnParent(String tablename, ColumnParent column_parent) t
     static void validateColumnPathOrParent(String tablename, ColumnPath column_path_or_parent) throws InvalidRequestException
     {
         validateTable(tablename);
-        String cfType = validateColumnFamily(tablename, column_path_or_parent.column_family);
-        if (cfType.equals("Standard"))
+        ColumnFamilyType cfType = validateColumnFamily(tablename, column_path_or_parent.column_family);
+        if (cfType == ColumnFamilyType.Standard)
         {
             if (column_path_or_parent.super_column != null)
             {
@@ -152,7 +153,7 @@ private static void validateColumns(String keyspace, String columnFamilyName, by
                 throw new InvalidRequestException("supercolumn name length must not be greater than " + IColumn.MAX_NAME_LENGTH);
             if (superColumnName.length == 0)
                 throw new InvalidRequestException("supercolumn name must not be empty");
-            if (!DatabaseDescriptor.getColumnFamilyType(keyspace, columnFamilyName).equals("Super"))
+            if (DatabaseDescriptor.getColumnFamilyType(keyspace, columnFamilyName) == ColumnFamilyType.Standard)
                 throw new InvalidRequestException("supercolumn specified to ColumnFamily " + columnFamilyName + " containing normal columns");
         }
         AbstractType comparator = ColumnFamily.getComparatorFor(keyspace, columnFamilyName, superColumnName);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java
index 82d1980f..e92f8692 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java
@@ -25,6 +25,7 @@
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.SuperColumn;
+import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.io.util.DataOutputBuffer;
@@ -142,7 +143,7 @@ public static void importJson(String jsonFile, String keyspace, String cf, Strin
     throws IOException, ParseException
     {
         ColumnFamily cfamily = ColumnFamily.create(keyspace, cf);
-        String cfType = cfamily.type();    // Super or Standard
+        ColumnFamilyType cfType = cfamily.getColumnFamilyType();    // Super or Standard
         IPartitioner<?> partitioner = DatabaseDescriptor.getPartitioner();
         DataOutputBuffer dob = new DataOutputBuffer();
         
@@ -159,7 +160,7 @@ public static void importJson(String jsonFile, String keyspace, String cf, Strin
 
             for (Map.Entry<DecoratedKey, String> rowKey : decoratedKeys.entrySet())
             {
-                if (cfType.equals("Super"))
+                if (cfType == ColumnFamilyType.Super)
                     addToSuperCF((JSONObject)json.get(rowKey.getValue()), cfamily);
                 else
                     addToStandardCF((JSONArray)json.get(rowKey.getValue()), cfamily);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index 9df32d89..f09c537e 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -79,7 +79,7 @@ public void saveAndRestore() throws IOException
     @Test
     public void addNewCfToBogusTable() throws InterruptedException
     {
-        CFMetaData newCf = new CFMetaData("MadeUpKeyspace", "NewCF", "Standard", new UTF8Type(), null, "new cf", 0, false, 0);
+        CFMetaData newCf = new CFMetaData("MadeUpKeyspace", "NewCF", ColumnFamilyType.Standard, new UTF8Type(), null, "new cf", 0, false, 0);
         try
         {
             new AddColumnFamily(newCf).apply();
@@ -104,7 +104,7 @@ public void testMigrations() throws IOException, ConfigurationException
         assert DatabaseDescriptor.getDefsVersion().equals(prior);
         
         // add a cf.
-        CFMetaData newCf1 = new CFMetaData("Keyspace1", "MigrationCf_1", "Standard", new UTF8Type(), null, "Migration CF ", 0, false, 0);
+        CFMetaData newCf1 = new CFMetaData("Keyspace1", "MigrationCf_1", ColumnFamilyType.Standard, new UTF8Type(), null, "Migration CF ", 0, false, 0);
         Migration m1 = new AddColumnFamily(newCf1);
         m1.apply();
         UUID ver1 = m1.getVersion();
@@ -163,7 +163,7 @@ public void addNewCF() throws ConfigurationException, IOException, ExecutionExce
         final String cf = "BrandNewCf";
         KSMetaData original = DatabaseDescriptor.getTableDefinition(ks);
 
-        CFMetaData newCf = new CFMetaData(original.name, cf, "Standard", new UTF8Type(), null, "A New Column Family", 0, false, 0);
+        CFMetaData newCf = new CFMetaData(original.name, cf, ColumnFamilyType.Standard, new UTF8Type(), null, "A New Column Family", 0, false, 0);
         int clSegments = CommitLog.instance().getSegmentCount();
         assert !DatabaseDescriptor.getTableDefinition(ks).cfMetaData().containsKey(newCf.cfName);
         new AddColumnFamily(newCf).apply();
@@ -279,7 +279,7 @@ public void renameCf() throws ConfigurationException, IOException, ExecutionExce
     public void addNewKS() throws ConfigurationException, IOException, ExecutionException, InterruptedException
     {
         DecoratedKey dk = Util.dk("key0");
-        CFMetaData newCf = new CFMetaData("NewKeyspace1", "AddedStandard1", "Standard", new UTF8Type(), null, "A new cf for a new ks", 0, false, 0);
+        CFMetaData newCf = new CFMetaData("NewKeyspace1", "AddedStandard1", ColumnFamilyType.Standard, new UTF8Type(), null, "A new cf for a new ks", 0, false, 0);
         KSMetaData newKs = new KSMetaData(newCf.tableName, RackUnawareStrategy.class, 5, newCf);
         
         int segmentCount = CommitLog.instance().getSegmentCount();
