diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
index 4cb34e18..66c8f616 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -123,7 +123,7 @@ public static void mutate(List<RowMutation> mutations, ConsistencyLevel consiste
                 responseHandlers.add(responseHandler);
                 
                 // Multimap that holds onto all the messages and addresses meant for a specific datacenter
-                Multimap<String, Pair<Message, InetAddress>> dcMessages = HashMultimap.create(hintedEndpoints.size(), 10);
+                Map<String, Multimap<Message, InetAddress>> dcMessages = new HashMap<String, Multimap<Message, InetAddress>>(hintedEndpoints.size());
                 Message unhintedMessage = null;
 
                 for (Map.Entry<InetAddress, Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet())
@@ -150,7 +150,16 @@ public static void mutate(List<RowMutation> mutations, ConsistencyLevel consiste
                             }
                             if (logger.isDebugEnabled())
                                 logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to " + unhintedMessage.getMessageId() + "@" + destination);
-                            dcMessages.put(dc, new Pair<Message, InetAddress>(unhintedMessage, destination));
+                            
+                            
+                            Multimap<Message, InetAddress> messages = dcMessages.get(dc);
+                            if (messages == null)
+                            {
+                               messages = HashMultimap.create();
+                               dcMessages.put(dc, messages);
+                            }
+                            
+                            messages.put(unhintedMessage, destination);
                         }
                     }
                     else
@@ -167,7 +176,16 @@ public static void mutate(List<RowMutation> mutations, ConsistencyLevel consiste
                             }
                         }
                         responseHandler.addHintCallback(hintedMessage, destination);
-                        dcMessages.put(dc, new Pair<Message, InetAddress>(hintedMessage, destination));
+                        
+                        Multimap<Message, InetAddress> messages = dcMessages.get(dc);
+                        
+                        if (messages == null)
+                        {
+                           messages = HashMultimap.create();
+                           dcMessages.put(dc, messages);
+                        }
+                        
+                        messages.put(hintedMessage, destination);
                     }
                 }
 
@@ -194,35 +212,36 @@ public static void mutate(List<RowMutation> mutations, ConsistencyLevel consiste
     /**
      * for each datacenter, send a message to one node to relay the write to other replicas
      */
-    private static void sendMessages(String localDataCenter, Multimap<String, Pair<Message, InetAddress>> dcMessages)
+    private static void sendMessages(String localDataCenter, Map<String, Multimap<Message, InetAddress>> dcMessages)
     throws IOException
     {
-        for (Map.Entry<String, Collection<Pair<Message, InetAddress>>> entry : dcMessages.asMap().entrySet())
+        for (Map.Entry<String, Multimap<Message, InetAddress>> entry: dcMessages.entrySet())
         {
             String dataCenter = entry.getKey();
 
             // Grab a set of all the messages bound for this dataCenter and create an iterator over this set.
-            Collection<Pair<Message, InetAddress>> messagesForDataCenter = entry.getValue();
-            Iterator<Pair<Message, InetAddress>> iter = messagesForDataCenter.iterator();
+            Map<Message, Collection<InetAddress>> messagesForDataCenter = entry.getValue().asMap();
+
+            for (Map.Entry<Message, Collection<InetAddress>> messages: messagesForDataCenter.entrySet())
+            {
+                Message message = messages.getKey();
+                Iterator<InetAddress> iter = messages.getValue().iterator();
             assert iter.hasNext();
 
             // First endpoint in list is the destination for this group
-            Pair<Message, InetAddress> messageAndDestination = iter.next();
+                InetAddress target = iter.next();
 
-            Message primaryMessage = messageAndDestination.left;
-            InetAddress target = messageAndDestination.right;
 
             // Add all the other destinations that are bound for the same dataCenter as a header in the primary message.
             while (iter.hasNext())
             {
-                messageAndDestination = iter.next();
-                assert messageAndDestination.left == primaryMessage;
+                    InetAddress destination = iter.next();
 
                 if (dataCenter.equals(localDataCenter))
                 {
                     // direct write to local DC
-                    assert primaryMessage.getHeader(RowMutation.FORWARD_HEADER) == null;
-                    MessagingService.instance().sendOneWay(primaryMessage, target);
+                        assert message.getHeader(RowMutation.FORWARD_HEADER) == null;
+                        MessagingService.instance().sendOneWay(message, target);
                 }
                 else
                 {
@@ -231,16 +250,17 @@ private static void sendMessages(String localDataCenter, Multimap<String, Pair<M
                     DataOutputStream dos = new DataOutputStream(bos);
 
                     // append to older addresses
-                    byte[] previousHints = primaryMessage.getHeader(RowMutation.FORWARD_HEADER);
+                        byte[] previousHints = message.getHeader(RowMutation.FORWARD_HEADER);
                     if (previousHints != null)
                         dos.write(previousHints);
 
-                    dos.write(messageAndDestination.right.getAddress());
-                    primaryMessage.setHeader(RowMutation.FORWARD_HEADER, bos.toByteArray());
+                        dos.write(destination.getAddress());
+                        message.setHeader(RowMutation.FORWARD_HEADER, bos.toByteArray());
                 }
             }
 
-            MessagingService.instance().sendOneWay(primaryMessage, target);
+                MessagingService.instance().sendOneWay(message, target);
+            }
         }
     }
 
