diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index 2049355e..23cb75a3 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -169,8 +169,7 @@ public static Test suite() {
         suite.addTest(LangHarnessJavaTest.suite());
         		
         suite.addTest(ResultSetsFromPreparedStatementTest.suite());
-        if (!( System.getProperty("java.vm.name").equals("CVM")
-            && System.getProperty("java.vm.version").startsWith("phoneme") ) )
+        if (!isPhoneME())
         { // Disable temporarily until CVM/phoneME is fixed.. See DERBY-4290)
         suite.addTest(OrderByAndSortAvoidance.suite());
         }
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java
index b870eb7c..5fdb04c6 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java
@@ -231,11 +231,20 @@ public void testRepeatedDatabaseCreationWithAutoStats()
             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
             try {
                 ds.getConnection();
+                fail("Expected shutdown exception");
             } catch (SQLException e) {
                 assertSQLState("08006", e);
             } finally {
                 JDBCDataSource.clearStringBeanProperty(ds, "shutdownDatabase");
             }
+
+            if (isPhoneME()) {
+                // DERBY-5412: phoneME fails after some iterations because the
+                // number of class names exceeds a VM limit. If we invoke
+                // garbage collection manually, it seems to be able to reclaim
+                // the classes that are no longer in use, and complete the test.
+                Runtime.getRuntime().gc();
+            }
         }
 
         // extra sanity check making sure that the database was created in the
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java
index 7af20831..4f6556dc 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java
@@ -99,8 +99,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
             }
             // Derby 10.3.1.4 does not boot on the phoneME advanced platform,
             // (see DERBY-3176) so don't run upgrade tests in this combination.
-            if ( System.getProperty("java.vm.name").equals("CVM")
-                  && System.getProperty("java.vm.version").startsWith("phoneme")
+            if ( BaseTestCase.isPhoneME()
                   && old[i][0]==10 && old[i][1]==3 
                   && old[i][2]==1 && old[i][3]==4 ) {
                 traceit("Skipping 10.3.1.4 on CVM/phoneme");
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 893a3e9c..653bb628 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -603,6 +603,16 @@ public static final boolean isSunJVM() {
                 "Oracle Corporation".equals(vendor);
     }
 
+    /**
+     * Check if the VM is phoneME.
+     *
+     * @return true if it is phoneME
+     */
+    public static boolean isPhoneME() {
+        return getSystemProperty("java.vm.name").equals("CVM") &&
+                getSystemProperty("java.vm.version").startsWith("phoneme");
+    }
+
     /**
      * Determine if there is a platform match with os.name.
      * This method uses an exact equals. Other methods might be useful
