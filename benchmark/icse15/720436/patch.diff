diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java
index 48c2c5e7..e757fac7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java
@@ -66,12 +66,6 @@ public static Test suite() {
 
         TestSuite suite = new TestSuite("LocalizedScripts");
 
-        // First ensure that we are running in english locale; the output
-        // master has been created in that locale, and thus, running in any
-        // other locale will fail.
-        if (!getSystemProperty("user.language").equalsIgnoreCase("en"))
-            return suite;
-        
         // Note that it doesn't really make sense to run with network 
         // server/client, as LocalizedConnectionAttributes.sql has a hardcoded
         // connect with protocol, so we can test connect 'as' with a us-ascii
@@ -94,7 +88,7 @@ public static Test suite() {
     /*
      * A single JUnit test that runs a single Localized script, specifying the
      * desired input encoding.
-     * Needs input encoding Cp850, or we get a syntax error on connecting to 
+     * Needs ISO-8859-1 encoding, or we get a syntax error on connecting to
      * the database with the u-umlaut in the 'as' clause.
      */
     private LocalizedAttributeScriptTest(String localizedTest){
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java
index ef484c42..85bd755a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java
@@ -65,11 +65,6 @@ public static Test suite() {
         
         TestSuite suite = new TestSuite("LocalizedDisplay");
 
-        // First ensure that we are running in english locale; the output
-        // master has been created in that locale, and thus, running in any
-        // other locale will fail.
-        if (!getSystemProperty("user.language").equalsIgnoreCase("en"))
-            return suite;
         // This test will fail with JSR169, because lack of support for 
         // rs.getBigDecimal() will prevent the localization of numeric and
         // decimal datatypes, and this test includes a decimal datatype
@@ -102,7 +97,7 @@ public static Test suite() {
      * A single JUnit test that runs a single Localized script.
      */
     private LocalizedDisplayScriptTest(String localizedTest){
-        super(localizedTest);
+        super(localizedTest, "EUC_JP");
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ToolScripts.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ToolScripts.java
index c5bcd2fe..d7eecfda 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ToolScripts.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ToolScripts.java
@@ -133,7 +133,10 @@ private ToolScripts(String toolTest){
     }
 
     private ToolScripts(String toolTest, String user){
-        super(toolTest, null /* default encoding */, user);
+        super(toolTest,
+              null /* default input encoding */,
+              null /* default output encoding */,
+              user);
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/CanonTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/CanonTestCase.java
index 15aacd21..cce7c694 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/CanonTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/CanonTestCase.java
@@ -44,12 +44,18 @@
  */
 abstract class CanonTestCase extends BaseJDBCTestCase {
 
-    final String outputEncoding = "US-ASCII";
+    final static String DEFAULT_ENCODING = "US-ASCII";
+    final String outputEncoding;
 
     private ByteArrayOutputStream rawBytes;
 
     CanonTestCase(String name) {
+        this(name, null);
+    }
+
+    CanonTestCase(String name, String encoding) {
         super(name);
+        outputEncoding = (encoding == null) ? DEFAULT_ENCODING : encoding;
     }
 
     OutputStream getOutputStream() {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java
index 0059d121..d557b55d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java
@@ -46,9 +46,7 @@
 	 */
 	public ScriptTestCase(String script)
 	{
-		super(script);
-		inputEncoding = "US-ASCII";
-		user = null;
+        this(script, null, null, null);
 	}
 	
     /**
@@ -60,9 +58,7 @@ public ScriptTestCase(String script)
      */
     public ScriptTestCase(String script, String encoding)
     {
-        super(script);
-        inputEncoding = encoding;
-		user = null;
+        this(script, encoding, encoding, null);
     }
 
     /**
@@ -71,18 +67,18 @@ public ScriptTestCase(String script, String encoding)
      * different encoding.
      * @param script     Base name of the .sql script
      *                   excluding the .sql suffix.
-     * @param encoding   Run using encoding if not null, else use "US-ASCII".
+     * @param inputEnc   The encoding for the script, if not null,
+     *                   else use "US-ASCII"
+     * @param outputEnc  The encoding for the ouput from the script,
+     *                   if not null, else use "US-ASCII"
      * @param user       Run script as user
      */
-    public ScriptTestCase(String script, String encoding, String user)
+    public ScriptTestCase(String script,
+            String inputEnc, String outputEnc, String user)
     {
-        super(script);
+        super(script, outputEnc);
 
-		if (encoding != null) {
-			inputEncoding = encoding;
-		} else {
-			inputEncoding = "US-ASCII";
-		}
+        inputEncoding = (inputEnc == null) ? DEFAULT_ENCODING : inputEnc;
 
 		this.user = user;
     }
@@ -154,12 +150,30 @@ public void runTest() throws Throwable
 			conn = getConnection();
 		}
 
+        final String outputEnc;
+        final String derby_ui_codeset = getSystemProperty("derby.ui.codeset");
+
+        if (derby_ui_codeset != null) {
+            // IJ should format output according to the derby.ui.codeset
+            // variable. If we pass in an encoding explicitly to runScript(),
+            // we won't test that derby.ui.codeset is obeyed. Therefore,
+            // leave it as null.
+            outputEnc = null;
+            assertEquals(
+                    "Requested output encoding and derby.ui.codeset differ",
+                    outputEncoding, derby_ui_codeset);
+        } else {
+            // derby.ui.codeset isn't set. Tell runScript() which output
+            // encoding to use.
+            outputEnc = outputEncoding;
+        }
+
 		org.apache.derby.tools.ij.runScript(
 				conn,
 				sqlIn,
 				inputEncoding,
                 getOutputStream(),
-				outputEncoding);
+				outputEnc);
 		
 		if (!conn.isClosed() && !conn.getAutoCommit())
 		    conn.commit();
