diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java
index e7005e12..6868cd4b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java
@@ -248,7 +248,9 @@ private static Path buildClustersMR(Configuration conf, Path input, Path output,
     FileInputFormat.addInputPath(job, input);
     Path canopyOutputDir = new Path(output, Cluster.CLUSTERS_DIR + '0');
     FileOutputFormat.setOutputPath(job, canopyOutputDir);
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Canopy Job failed processing " + input.toString());
+    }
     return canopyOutputDir;
   }
 
@@ -347,7 +349,9 @@ private static void clusterDataMR(Configuration conf,
     FileOutputFormat.setOutputPath(job, outPath);
     HadoopUtil.overwriteOutput(outPath);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Canopy Clustering failed processing " + canopies.toString());
+    }
   }
 
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/ClusterMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/ClusterMapper.java
index 7ca7de69..ba593119 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/ClusterMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/ClusterMapper.java
@@ -25,7 +25,9 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.FileUtil;
 import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.PathFilter;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.SequenceFile;
 import org.apache.hadoop.io.Text;
@@ -63,16 +65,23 @@ protected void setup(Context context) throws IOException, InterruptedException {
 
     canopyClusterer = new CanopyClusterer(context.getConfiguration());
 
-    Configuration configuration = context.getConfiguration();
-    String canopyPath = configuration.get(CanopyConfigKeys.CANOPY_PATH_KEY);
+    Configuration conf = context.getConfiguration();
+    String clustersIn = conf.get(CanopyConfigKeys.CANOPY_PATH_KEY);
 
-    if ((canopyPath != null) && (canopyPath.length() > 0)) {
+    // filter out the files
+    PathFilter clusterFileFilter = new PathFilter() {
+      @Override
+      public boolean accept(Path path) {
+        return path.getName().startsWith("part");
+      }
+    };
+    if ((clustersIn != null) && (clustersIn.length() > 0)) {
       try {
-        Path path = new Path(canopyPath);
-        FileSystem fs = FileSystem.get(path.toUri(), configuration);
-        FileStatus[] files = fs.listStatus(path);
+        Path clusterPath = new Path(clustersIn,"*");
+        FileSystem fs = clusterPath.getFileSystem(conf);
+        FileStatus[] files = fs.listStatus(FileUtil.stat2Paths(fs.globStatus(clusterPath, clusterFileFilter)), clusterFileFilter);
         for (FileStatus file : files) {
-          SequenceFile.Reader reader = new SequenceFile.Reader(fs, file.getPath(), configuration);
+          SequenceFile.Reader reader = new SequenceFile.Reader(fs, file.getPath(), conf);
           try {
             Text key = new Text();
             Canopy value = new Canopy();
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java
index 7c096253..62a4c9e0 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java
@@ -372,7 +372,9 @@ private static void runIteration(Configuration conf,
     FileInputFormat.addInputPath(job, input);
     FileOutputFormat.setOutputPath(job, stateOut);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Dirichlet Iteration failed processing " + stateIn.toString());
+    }
   }
 
   /**
@@ -561,6 +563,8 @@ private static void clusterDataMR(Configuration conf,
     FileInputFormat.addInputPath(job, input);
     FileOutputFormat.setOutputPath(job, output);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Dirichlet Clustering failed processing " + stateIn.toString());
+    }
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java
index f881c6ee..a7725ce3 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java
@@ -71,8 +71,7 @@ public int run(String[] args) throws Exception {
     addOption(DefaultOptionCreator.distanceMeasureOption().create());
     addOption(DefaultOptionCreator.clustersInOption()
         .withDescription("The input centroids, as Vectors.  Must be a SequenceFile of Writable, Cluster/Canopy.  "
-            + "If k is also specified, then a random set of vectors will be selected"
-            + " and written out to this path first")
+            + "If k is also specified, then a random set of vectors will be selected" + " and written out to this path first")
         .create());
     addOption(DefaultOptionCreator.numClustersOption()
         .withDescription("The k in k-Means.  If specified, then a random selection of k Vectors will be chosen"
@@ -114,8 +113,7 @@ public int run(String[] args) throws Exception {
           .get(DefaultOptionCreator.NUM_CLUSTERS_OPTION)), measure);
     }
     boolean runClustering = hasOption(DefaultOptionCreator.CLUSTERING_OPTION);
-    boolean runSequential =
-        getOption(DefaultOptionCreator.METHOD_OPTION).equalsIgnoreCase(DefaultOptionCreator.SEQUENTIAL_METHOD);
+    boolean runSequential = getOption(DefaultOptionCreator.METHOD_OPTION).equalsIgnoreCase(DefaultOptionCreator.SEQUENTIAL_METHOD);
     run(getConf(),
         input,
         clusters,
@@ -166,8 +164,8 @@ public static void run(Path input,
                          boolean runClustering,
                          boolean emitMostLikely,
                          double threshold,
-                         boolean runSequential)
-    throws IOException, ClassNotFoundException, InterruptedException, InstantiationException, IllegalAccessException {
+                         boolean runSequential) throws IOException, ClassNotFoundException, InterruptedException,
+      InstantiationException, IllegalAccessException {
     Path clustersOut = buildClusters(new Configuration(),
                                      input,
                                      clustersIn,
@@ -209,6 +207,8 @@ public static void run(Path input,
    *          http://en.wikipedia.org/wiki/Data_clustering#Fuzzy_c-means_clustering
    * 
    * @return true if the iteration successfully runs
+   * @throws ClassNotFoundException 
+   * @throws InterruptedException 
    */
   private static boolean runIteration(Configuration conf,
                                       Path input,
@@ -216,7 +216,7 @@ private static boolean runIteration(Configuration conf,
                                       Path clustersOut,
                                       String measureClass,
                                       double convergenceDelta,
-                                      float m) throws IOException {
+                                      float m) throws IOException, InterruptedException, ClassNotFoundException {
 
     conf.set(FuzzyKMeansConfigKeys.CLUSTER_PATH_KEY, clustersIn.toString());
     conf.set(FuzzyKMeansConfigKeys.DISTANCE_MEASURE_KEY, measureClass);
@@ -242,20 +242,11 @@ private static boolean runIteration(Configuration conf,
     FileInputFormat.addInputPath(job, input);
     FileOutputFormat.setOutputPath(job, clustersOut);
 
-    try {
-      job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Fuzzy K-Means Iteration failed processing " + clustersIn.toString());
+    }
       FileSystem fs = FileSystem.get(clustersOut.toUri(), conf);
       return isConverged(clustersOut, conf, fs);
-    } catch (IOException e) {
-      log.warn(e.toString(), e);
-      return true;
-    } catch (InterruptedException e) {
-      log.warn(e.toString(), e);
-      return true;
-    } catch (ClassNotFoundException e) {
-      log.warn(e.toString(), e);
-      return true;
-    }
   }
 
   /**
@@ -293,10 +284,9 @@ public static void run(Configuration conf,
                          boolean runClustering,
                          boolean emitMostLikely,
                          double threshold,
-                         boolean runSequential)
-    throws IOException, ClassNotFoundException, InterruptedException, InstantiationException, IllegalAccessException {
-    Path clustersOut =
-        buildClusters(conf, input, clustersIn, output, measure, convergenceDelta, maxIterations, m, runSequential);
+                         boolean runSequential) throws IOException, ClassNotFoundException, InterruptedException,
+      InstantiationException, IllegalAccessException {
+    Path clustersOut = buildClusters(conf, input, clustersIn, output, measure, convergenceDelta, maxIterations, m, runSequential);
     if (runClustering) {
       log.info("Clustering ");
       clusterData(input,
@@ -332,6 +322,8 @@ public static void run(Configuration conf,
    * @param runSequential if true run in sequential execution mode
    * 
    * @return the Path of the final clusters directory
+   * @throws ClassNotFoundException 
+   * @throws InterruptedException 
    */
   public static Path buildClusters(Configuration conf,
                                    Path input,
@@ -341,8 +333,7 @@ public static Path buildClusters(Configuration conf,
                                    double convergenceDelta,
                                    int maxIterations,
                                    float m,
-                                   boolean runSequential)
-    throws IOException, InstantiationException, IllegalAccessException {
+                                   boolean runSequential) throws IOException, InstantiationException, IllegalAccessException, InterruptedException, ClassNotFoundException {
     if (runSequential) {
       return buildClustersSeq(input, clustersIn, output, measure, convergenceDelta, maxIterations, m);
     } else {
@@ -414,7 +405,7 @@ private static Path buildClustersMR(Configuration conf,
                                       DistanceMeasure measure,
                                       double convergenceDelta,
                                       int maxIterations,
-                                      float m) throws IOException {
+                                      float m) throws IOException, InterruptedException, ClassNotFoundException {
     boolean converged = false;
     int iteration = 1;
 
@@ -460,8 +451,8 @@ public static void clusterData(Path input,
                                  float m,
                                  boolean emitMostLikely,
                                  double threshold,
-                                 boolean runSequential)
-    throws IOException, ClassNotFoundException, InterruptedException, InstantiationException, IllegalAccessException {
+                                 boolean runSequential) throws IOException, ClassNotFoundException, InterruptedException,
+      InstantiationException, IllegalAccessException {
     if (runSequential) {
       clusterDataSeq(input, clustersIn, output, measure, convergenceDelta, m);
     } else {
@@ -540,7 +531,9 @@ private static void clusterDataMR(Path input,
     job.setNumReduceTasks(0);
     job.setJarByClass(FuzzyKMeansDriver.class);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Fuzzy K-Means Clustering failed processing " + clustersIn.toString());
+    }
   }
 
   /**
@@ -568,8 +561,7 @@ public boolean accept(Path path) {
       }
     };
 
-    FileStatus[] matches =
-        fs.listStatus(FileUtil.stat2Paths(fs.globStatus(clusterPath, clusterFileFilter)), clusterFileFilter);
+    FileStatus[] matches = fs.listStatus(FileUtil.stat2Paths(fs.globStatus(clusterPath, clusterFileFilter)), clusterFileFilter);
 
     for (FileStatus match : matches) {
       result.add(fs.makeQualified(match.getPath()));
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java
index e309dca1..28b7434b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java
@@ -339,7 +339,9 @@ private static boolean runIteration(Configuration conf,
 
     job.setJarByClass(KMeansDriver.class);
     HadoopUtil.overwriteOutput(clustersOut);
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("K-Means Iteration failed processing " + clustersIn.toString());
+    }
     FileSystem fs = FileSystem.get(clustersOut.toUri(), conf);
 
     return isConverged(clustersOut, conf, fs);
@@ -482,6 +484,8 @@ private static void clusterDataMR(Configuration conf,
     job.setNumReduceTasks(0);
     job.setJarByClass(KMeansDriver.class);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("K-Means Clustering failed processing " + clustersIn.toString());
+    }
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java
index b5ed30eb..d9669fb5 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java
@@ -276,7 +276,9 @@ private static double runIteration(Configuration conf,
     job.setInputFormatClass(SequenceFileInputFormat.class);
     job.setJarByClass(LDADriver.class);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("LDA Iteration failed processing " + stateIn.toString());
+    }
     return findLL(stateOut, conf);
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java
index 8211ab6f..6b0cc81a 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java
@@ -95,22 +95,11 @@ public int run(String[] args) throws Exception {
     double convergenceDelta = Double.parseDouble(getOption(DefaultOptionCreator.CONVERGENCE_DELTA_OPTION));
     int maxIterations = Integer.parseInt(getOption(DefaultOptionCreator.MAX_ITERATIONS_OPTION));
     boolean inputIsCanopies = hasOption(INPUT_IS_CANOPIES_OPTION);
-    boolean runSequential =
-        getOption(DefaultOptionCreator.METHOD_OPTION).equalsIgnoreCase(DefaultOptionCreator.SEQUENTIAL_METHOD);
+    boolean runSequential = getOption(DefaultOptionCreator.METHOD_OPTION).equalsIgnoreCase(DefaultOptionCreator.SEQUENTIAL_METHOD);
     ClassLoader ccl = Thread.currentThread().getContextClassLoader();
     DistanceMeasure measure = ccl.loadClass(measureClass).asSubclass(DistanceMeasure.class).newInstance();
 
-    run(getConf(),
-        input,
-        output,
-        measure,
-        t1,
-        t2,
-        convergenceDelta,
-        maxIterations,
-        inputIsCanopies,
-        runClustering,
-        runSequential);
+    run(getConf(), input, output, measure, t1, t2, convergenceDelta, maxIterations, inputIsCanopies, runClustering, runSequential);
     return 0;
   }
 
@@ -149,8 +138,8 @@ public void run(Configuration conf,
                   int maxIterations,
                   boolean inputIsCanopies,
                   boolean runClustering,
-                  boolean runSequential)
-    throws IOException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException {
+                  boolean runSequential) throws IOException, InterruptedException, ClassNotFoundException, InstantiationException,
+      IllegalAccessException {
     Path clustersIn = new Path(output, Cluster.INITIAL_CLUSTERS_DIR);
     if (inputIsCanopies) {
       clustersIn = input;
@@ -158,8 +147,7 @@ public void run(Configuration conf,
       createCanopyFromVectors(conf, input, clustersIn, measure, runSequential);
     }
 
-    Path clustersOut =
-        buildClusters(conf, clustersIn, output, measure, t1, t2, convergenceDelta, maxIterations, runSequential);
+    Path clustersOut = buildClusters(conf, clustersIn, output, measure, t1, t2, convergenceDelta, maxIterations, runSequential);
     if (runClustering) {
       clusterData(conf,
                   inputIsCanopies ? input : new Path(output, Cluster.INITIAL_CLUSTERS_DIR),
@@ -187,8 +175,8 @@ public static void createCanopyFromVectors(Configuration conf,
                                              Path input,
                                              Path output,
                                              DistanceMeasure measure,
-                                             boolean runSequential)
-    throws IOException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException {
+                                             boolean runSequential) throws IOException, InterruptedException,
+      ClassNotFoundException, InstantiationException, IllegalAccessException {
     if (runSequential) {
       createCanopyFromVectorsSeq(input, output, measure);
     } else {
@@ -203,8 +191,8 @@ public static void createCanopyFromVectors(Configuration conf,
    * @param output the Path to the initial clusters directory
    * @param measure the DistanceMeasure
    */
-  private static void createCanopyFromVectorsSeq(Path input, Path output, DistanceMeasure measure)
-    throws IOException, InstantiationException, IllegalAccessException {
+  private static void createCanopyFromVectorsSeq(Path input, Path output, DistanceMeasure measure) throws IOException,
+      InstantiationException, IllegalAccessException {
     Configuration conf = new Configuration();
     FileSystem fs = FileSystem.get(input.toUri(), conf);
     FileStatus[] status = fs.listStatus(input, new OutputLogFilter());
@@ -257,7 +245,9 @@ private static void createCanopyFromVectorsMR(Configuration conf, Path input, Pa
     FileInputFormat.setInputPaths(job, input);
     FileOutputFormat.setOutputPath(job, output);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Mean Shift createCanopyFromVectorsMR failed on input " + input.toString());
+    }
   }
 
   /**
@@ -288,8 +278,8 @@ public Path buildClusters(Configuration conf,
                             double t2,
                             double convergenceDelta,
                             int maxIterations,
-                            boolean runSequential)
-    throws IOException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException {
+                            boolean runSequential) throws IOException, InterruptedException, ClassNotFoundException,
+      InstantiationException, IllegalAccessException {
     if (runSequential) {
       return buildClustersSeq(clustersIn, output, measure, t1, t2, convergenceDelta, maxIterations);
     } else {
@@ -318,8 +308,7 @@ private static Path buildClustersSeq(Path clustersIn,
                                        double t1,
                                        double t2,
                                        double convergenceDelta,
-                                       int maxIterations)
-    throws IOException, InstantiationException, IllegalAccessException {
+                                       int maxIterations) throws IOException, InstantiationException, IllegalAccessException {
     MeanShiftCanopyClusterer clusterer = new MeanShiftCanopyClusterer(measure, t1, t2, convergenceDelta);
     List<MeanShiftCanopy> clusters = new ArrayList<MeanShiftCanopy>();
     Configuration conf = new Configuration();
@@ -351,13 +340,9 @@ private static Path buildClustersSeq(Path clustersIn,
                                                            MeanShiftCanopy.class);
       try {
         for (MeanShiftCanopy cluster : clusters) {
-          log.debug("Writing Cluster:{} center:{} numPoints:{} radius:{} to: {}",
-                   new Object[] { cluster.getId(),
-                                  AbstractCluster.formatVector(cluster.getCenter(), null),
-                                  cluster.getNumPoints(),
-                                  AbstractCluster.formatVector(cluster.getRadius(), null),
-                                  clustersOut.getName()
-                   });
+          log.debug("Writing Cluster:{} center:{} numPoints:{} radius:{} to: {}", new Object[] { cluster.getId(),
+              AbstractCluster.formatVector(cluster.getCenter(), null), cluster.getNumPoints(),
+              AbstractCluster.formatVector(cluster.getRadius(), null), clustersOut.getName() });
           writer.append(new Text(cluster.getIdentifier()), cluster);
         }
       } finally {
@@ -392,8 +377,7 @@ private static Path buildClustersMR(Configuration conf,
                                       double t1,
                                       double t2,
                                       double convergenceDelta,
-                                      int maxIterations)
-    throws IOException, InterruptedException, ClassNotFoundException {
+                                      int maxIterations) throws IOException, InterruptedException, ClassNotFoundException {
     // iterate until the clusters converge
     boolean converged = false;
     int iteration = 1;
@@ -438,8 +422,7 @@ private static void runIterationMR(Configuration conf,
                                    String measureClassName,
                                    double t1,
                                    double t2,
-                                   double convergenceDelta)
-    throws IOException, InterruptedException, ClassNotFoundException {
+                                     double convergenceDelta) throws IOException, InterruptedException, ClassNotFoundException {
   
     conf.set(MeanShiftCanopyConfigKeys.DISTANCE_MEASURE_KEY, measureClassName);
     conf.set(MeanShiftCanopyConfigKeys.CLUSTER_CONVERGENCE_KEY, String.valueOf(convergenceDelta));
@@ -461,7 +444,9 @@ private static void runIterationMR(Configuration conf,
     job.setInputFormatClass(SequenceFileInputFormat.class);
     job.setOutputFormatClass(SequenceFileOutputFormat.class);
     job.setJarByClass(MeanShiftCanopyDriver.class);
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Mean Shift Iteration failed on input " + input.toString());
+    }
   }
 
   /**
@@ -495,8 +480,8 @@ public static void clusterData(Configuration conf, Path input, Path clustersIn,
    * @throws InstantiationException
    * @throws IllegalAccessException
    */
-  private static void clusterDataSeq(Path input, Path clustersIn, Path output)
-    throws IOException, InstantiationException, IllegalAccessException {
+  private static void clusterDataSeq(Path input, Path clustersIn, Path output) throws IOException, InstantiationException,
+      IllegalAccessException {
     Collection<MeanShiftCanopy> clusters = new ArrayList<MeanShiftCanopy>();
     Configuration conf = new Configuration();
     FileSystem fs = FileSystem.get(clustersIn.toUri(), conf);
@@ -550,8 +535,8 @@ private static void clusterDataSeq(Path input, Path clustersIn, Path output)
    * @throws InterruptedException
    * @throws ClassNotFoundException
    */
-  private static void clusterDataMR(Path input, Path clustersIn, Path output)
-    throws IOException, InterruptedException, ClassNotFoundException {
+  private static void clusterDataMR(Path input, Path clustersIn, Path output) throws IOException, InterruptedException,
+      ClassNotFoundException {
     Configuration conf = new Configuration();
     conf.set(STATE_IN_KEY, clustersIn.toString());
     Job job = new Job(conf);
@@ -568,6 +553,8 @@ private static void clusterDataMR(Path input, Path clustersIn, Path output)
     FileInputFormat.setInputPaths(job, input);
     FileOutputFormat.setOutputPath(job, output);
 
-    job.waitForCompletion(true);
+    if (job.waitForCompletion(true) == false) {
+      throw new InterruptedException("Mean Shift Clustering failed on input " + clustersIn.toString());
+    }
   }
 }
