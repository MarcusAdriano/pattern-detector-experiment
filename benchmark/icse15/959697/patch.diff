diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
index 0185f07e..a81f0f23 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
@@ -540,26 +540,6 @@ public ResultColumn	getNewExpressionResultColumn(DataDictionary	dd)
 			operand;
 
 
-		/* The operand for this aggregate node was initialized at bind
-		 * time. Between then and now it's possible that certain changes
-		 * have been made to the query tree which affect this operand. In
-		 * particular, if the operand was pointing to a result column in
-		 * a JoinNode and then that JoinNode was flattened during pre-
-		 * processing, all of the references to that JoinNode--including
-		 * this aggregate's operand--need to be updated to reflect the
-		 * fact that the Join Node no longer exists. So check to see if
-		 * the operand is a column reference, and if so, make a call to
-		 * remap it to its underlying expression. If nothing has happened
-		 * then this will be a no-op; but if something has changed to void
-		 * out the result column to which the operand points, the result
-		 * column will be marked "redundant" and the following call should
-		 * remap as appropriate. DERBY-3880.
-		 */
-		if (operand instanceof ColumnReference)
-		{
-			((ColumnReference)operand).remapColumnReferencesToExpressions();
-		}
-
 		return (ResultColumn) getNodeFactory().getNode(
 								C_NodeTypes.RESULT_COLUMN,
 								"##aggregate expression",
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java
index ff96f259..9aa26627 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java
@@ -701,13 +701,15 @@ public void preprocess(int numTables,
 	 * @param predicateList		The PredicateList from the outer query
 	 * @param sql				The SubqueryList from the outer query
 	 * @param gbl				The group by list, if any
+     * @param havingClause      The HAVING clause, if any
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
 	public void flattenFromTables(ResultColumnList rcl,
 								  PredicateList predicateList,
 								  SubqueryList sql,
-								  GroupByList gbl)
+                                  GroupByList gbl,
+                                  ValueNode havingClause)
 									throws StandardException
 	{
 		boolean			flattened = true;
@@ -750,7 +752,8 @@ public void flattenFromTables(ResultColumnList rcl,
 														rcl,
 														predicateList,
 														sql,
-														gbl);
+                                                        gbl,
+                                                        havingClause);
 					if (SanityManager.DEBUG)
 					{
 						SanityManager.ASSERT(flatteningFL == null ||
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
index 5564af03..20d1a9e2 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
@@ -449,6 +449,7 @@ public ResultSetNode extractSubquery(int numTables)
 	 * @param outerPList	PredicateList to append wherePredicates to.
 	 * @param sql				The SubqueryList from the outer query
 	 * @param gbl				The group by list, if any
+     * @param havingClause      The HAVING clause, if any
 	 *
 	 * @return FromList		The fromList from the underlying SelectNode.
 	 *
@@ -457,7 +458,8 @@ public ResultSetNode extractSubquery(int numTables)
 	public FromList flatten(ResultColumnList rcl,
 							PredicateList outerPList,
 							SubqueryList sql,
-							GroupByList gbl)
+                            GroupByList gbl,
+                            ValueNode havingClause)
 
 			throws StandardException
 	{
@@ -507,6 +509,10 @@ else if ( ! (subquery instanceof RowResultSetNode))
 			gbl.remapColumnReferencesToExpressions();
 		}
 
+        if (havingClause != null) {
+            havingClause.remapColumnReferencesToExpressions();
+        }
+
 		return fromList;
 	}
 
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromTable.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
index c055142a..7eaa7a50 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
@@ -1420,6 +1420,7 @@ protected void markUpdatableByCursor(Vector updateColumns)
 	 * @param outerPList	PredicateList to append wherePredicates to.
 	 * @param sql				The SubqueryList from the outer query
 	 * @param gbl				The group by list, if any
+     * @param havingClause      The HAVING clause, if any
 	 *
 	 * @return FromList		The fromList from the underlying SelectNode.
 	 *
@@ -1428,7 +1429,8 @@ protected void markUpdatableByCursor(Vector updateColumns)
 	public FromList flatten(ResultColumnList rcl,
 							PredicateList outerPList,
 							SubqueryList sql,
-							GroupByList gbl)
+                            GroupByList gbl,
+                            ValueNode havingClause)
 
 			throws StandardException
 	{
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
index 34eeb437..001b1e4a 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
@@ -1370,6 +1370,7 @@ private void grabJoinPredicates(PredicateList outerPredicateList)
 	 * @param outerPList		PredicateList to append wherePredicates to.
 	 * @param sql				The SubqueryList from the outer query
 	 * @param gbl				The group by list, if any
+     * @param havingClause      The HAVING clause, if any
 	 *
 	 * @return FromList		The fromList from the underlying SelectNode.
 	 *
@@ -1378,7 +1379,8 @@ private void grabJoinPredicates(PredicateList outerPredicateList)
 	public FromList flatten(ResultColumnList rcl,
 							PredicateList outerPList,
 							SubqueryList sql,
-							GroupByList gbl)
+                            GroupByList gbl,
+                            ValueNode havingClause)
 
 			throws StandardException
 	{
@@ -1422,6 +1424,11 @@ public FromList flatten(ResultColumnList rcl,
 			gbl.remapColumnReferencesToExpressions();
 		}
 
+        if (havingClause != null) {
+            havingClause.remapColumnReferencesToExpressions();
+        }
+
+
 		if (joinPredicates.size() > 0)
 		{
 			outerPList.destructiveAppend(joinPredicates);
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index a2abb76d..2dfc1d1a 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -938,7 +938,8 @@ public ResultSetNode preprocess(int numTables,
 		fromList.flattenFromTables(resultColumns, 
 								   wherePredicates, 
 								   whereSubquerys,
-								   groupByList);
+                                   groupByList,
+                                   havingClause);
 
 		if (wherePredicates != null && wherePredicates.size() > 0 && fromList.size() > 0)
 		{
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
index 5a35a9d1..7d0349ad 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
@@ -2270,4 +2270,85 @@ public void testDerby4450() throws SQLException {
                 {"50"},{"45"},{"46"},{"90"}});
         rollback();
     }
+
+
+    /**
+     * HAVING with an aggregate function in presence of join flattening
+     * DERBY-4698. See also DERBY-3880.
+     * @throws SQLException
+     */
+    public void testDerby4698() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        ResultSet rs;
+
+        s.executeUpdate(
+            "create table usr ( user_id  bigint primary key," +
+            "                  deleted  char(1) not null)");
+        s.executeUpdate(
+            "create table  user_account ( user_account_id bigint primary key," +
+            "                             user_id  bigint not null," +
+            "                             account_id  bigint not null)");
+
+        s.executeUpdate(
+            "CREATE TABLE  ACCOUNT  (ACCOUNT_ID  BIGINT PRIMARY KEY," +
+            "                        ACCOUNT_TYPE  VARCHAR(10) NOT NULL," +
+            "                        BALANCE  DOUBLE NOT NULL)");
+
+        s.executeUpdate(
+            "insert into usr values " +
+            "   (3003, 'Y'), (3004, 'N'), (1001, 'N'), (1002, 'Y')," +
+            "   (1003, 'N'), (1004, 'N'), (1005, 'N'), (1006, 'N')," +
+            "   (1007, 'N'), (1008, 'N'), (2002, 'N')");
+
+        s.executeUpdate(
+            "insert into user_account values " +
+            "  (4004, 3003, 9009), (4005, 3004, 9010), (5005, 1001, 10010)," +
+            "  (5006, 3004, 10011), (5007, 2002, 10012), (5008, 1003, 10013)," +
+            "  (5009, 1004, 10014), (5010, 1005, 10015), (5011, 1006, 10016)," +
+            "  (5012, 1007, 10017), (5013, 1008, 10018), (6006, 1001, 11011)," +
+            "  (6007, 3004, 11012), (6008, 2002, 11013), (6009, 1003, 11014)," +
+            "  (6010, 1004, 11015), (6011, 1005, 11016), (6012, 1006, 11017)," +
+            "  (6013, 1007, 11018), (6014, 1008, 11019), (1001, 1001, 1002)," +
+            "  (1002, 1002, 1003), (1003, 1003, 1004), (1004, 1004, 1005)," +
+            "  (1005, 1005, 1006), (1006, 1006, 1007), (1007, 1007, 1008)," +
+            "  (1008, 1008, 1009), (1009, 1004, 1010), (2002, 1004, 6006)," +
+            "  (3003, 2002, 7007)");
+
+        s.executeUpdate(
+            "insert into account values " +
+            " (9009, 'USER', 12.5), (9010, 'USER', 12.5)," +
+            " (10010, 'USER-01', 0.0), (10011, 'USER-01', 0.0)," +
+            " (10012, 'USER-01', 0.0), (10013, 'USER-01', 0.0)," +
+            " (10014, 'USER-01', 99.0), (10015, 'USER-01', 0.0)," +
+            " (10016, 'USER-01', 0.0), (10017, 'USER-01', 0.0)," +
+            " (10018, 'USER-01', 0.0), (11011, 'USER-02', 0.0)," +
+            " (11012, 'USER-02', 0.0), (11013, 'USER-02', 0.0)," +
+            " (11014, 'USER-02', 0.0), (11015, 'USER-02', 0.0)," +
+            " (11016, 'USER-02', 0.0), (11017, 'USER-02', 0.0)," +
+            " (11018, 'USER-02', 0.0), (11019, 'USER-02', 0.0)," +
+            " (1002, 'USER', 10.0), (1003, 'USER', 80.31)," +
+            " (1004, 'USER', 10.0), (1005, 'USER', 161.7)," +
+            " (1006, 'USER', 10.0), (1007, 'USER', 10.0)," +
+            " (1008, 'USER', 10.0), (1009, 'USER', 10.0)," +
+            " (7007, 'USER', 11.0)");
+
+        rs = s.executeQuery(
+            "SELECT user0_.user_id AS col_0_0_," +
+            "   SUM(account2_.balance) AS col_1_0_ " +
+            "   FROM usr user0_ " +
+            "   INNER JOIN user_account accountlin1_ " +
+            "   ON user0_.user_id = accountlin1_.user_id " +
+            "   INNER JOIN account account2_ " +
+            "   ON accountlin1_.account_id = account2_.account_id " +
+            "WHERE user0_.deleted = 'N' " +
+            "      AND ( account2_.account_type IN ( 'USER-01', 'USER' ) )" +
+            "GROUP BY user0_.user_id " +
+            "HAVING SUM(account2_.balance) >= 100.0 ");
+
+        JDBC.assertFullResultSet(rs, new String[][] {
+                {"1004", "260.7"} });
+
+            rollback();
+    }
 }
