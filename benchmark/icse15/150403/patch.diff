diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java
index 4e3f4a6a..84eccc5d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java
@@ -198,7 +198,6 @@ public Lock makeLock(String name)
         long fileOffset;
 
         CSInputStream(final InputStream base, final long fileOffset, final long length)
-          throws IOException
         {
             this.base = base;
             this.fileOffset = fileOffset;
@@ -209,7 +208,7 @@ public Lock makeLock(String name)
          *  position in the input.
          * @param b the array to read bytes into
          * @param offset the offset in the array to start storing bytes
-         * @param length the number of bytes to read
+         * @param len the number of bytes to read
          */
         protected void readInternal(byte[] b, int offset, int len)
         throws IOException
@@ -227,10 +226,10 @@ protected void readInternal(byte[] b, int offset, int len)
          *  the next {@link #readInternal(byte[],int,int)} will occur.
          * @see #readInternal(byte[],int,int)
          */
-        protected void seekInternal(long pos) throws IOException {}
+        protected void seekInternal(long pos) {}
 
         /** Closes the stream to futher operations. */
-        public void close() throws IOException {}
+        public void close() {}
 
     }
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
index 233af506..cabd6cce 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
@@ -521,7 +521,7 @@ public final synchronized void close() throws IOException {
   protected abstract void doClose() throws IOException;
 
   /** Release the write lock, if needed. */
-  protected final void finalize() throws IOException {
+  protected final void finalize() {
     if (writeLock != null) {
       writeLock.release();                        // release write lock
       writeLock = null;
