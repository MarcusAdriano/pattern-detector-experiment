diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/AccessibleByteArrayOutputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/AccessibleByteArrayOutputStream.java
index dcc88d2d..108510a8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/AccessibleByteArrayOutputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/AccessibleByteArrayOutputStream.java
@@ -22,6 +22,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.iapi.services.io;
 
 import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 
 /**
  * This allows us to get to the byte array to go back and
@@ -54,4 +56,56 @@ public AccessibleByteArrayOutputStream(int size) {
 	public byte[] getInternalByteArray() {
 		return buf;
 	}
+    
+    /**
+     * Read the complete contents of the passed input stream
+     * into this byte array.
+     * @throws IOException 
+     */
+    public void readFrom(InputStream in) throws IOException
+    {
+       byte[] buffer = new byte[8192];
+        
+        for(;;)
+        {
+            int read = in.read(buffer, 0, buf.length);
+            if (read == -1)
+                break;
+            write(buffer, 0, read);
+        }
+    }
+    
+    /**
+     * Return an InputStream that wraps the valid byte array.
+     * Note that no copy is made of the byte array from the
+     * input stream, it is up to the caller to ensure the correct
+     * co-ordination.
+     */
+    public InputStream getInputStream()
+    {
+        return new NewByteArrayInputStream(buf, 0, count);
+    }
+    
+    /**
+     * Copy an InputStream into an array of bytes and return
+     * an InputStream against those bytes. The input stream
+     * is copied until EOF is returned. This is useful to provide
+     * streams to applications in order to isolate them from
+     * Derby's internals.
+     * 
+     * @param in InputStream to be copied
+     * @param bufferSize Initial size of the byte array
+     * 
+     * @return InputStream against the raw data.
+     * 
+     * @throws IOException Error reading the stream
+     */
+    public static InputStream copyStream(InputStream in, int bufferSize)
+         throws IOException
+    {
+        AccessibleByteArrayOutputStream raw =
+            new AccessibleByteArrayOutputStream(bufferSize);
+        raw.readFrom(in);
+        return raw.getInputStream();
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
index 9595affa..1cc60d6a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.jar.JarFile;
 import java.util.jar.JarInputStream;
 
+import org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;
 import org.apache.derby.iapi.services.io.InputStreamUtil;
 import org.apache.derby.iapi.services.io.LimitInputStream;
 import org.apache.derby.iapi.util.IdUtil;
@@ -347,9 +348,18 @@ private InputStream getRawStream(String name) {
 
 	/**
 		Get a stream from a zip file that is itself a stream.
-		Here we need to get the size of the zip entry and
-		put a limiting stream around it. Otherwise the
-		caller would end up reading the entire zip file!
+        We copy to the contents to a byte array and return a
+        stream around that to the caller. Though a copy is
+        involved it has the benefit of:
+        <UL>
+        <LI> Isolating the application from the JarInputStream, thus
+        denying any possibility of the application reading more of the
+        jar that it should be allowed to. E.g. the contents class files are not
+        exposed through getResource.
+        <LI> Avoids any possibility of the application holding onto
+        the open stream beyond shutdown of the database, thus leading
+        to leaked file descriptors or inability to remove the jar.
+        </UL>
 	*/
 	private InputStream getRawStream(InputStream in, String name) { 
 
@@ -361,15 +371,20 @@ private InputStream getRawStream(InputStream in, String name) {
 			while ((e = jarIn.getNextJarEntry()) != null) {
 
 				if (e.getName().equals(name)) {
-					LimitInputStream lis = new LimitInputStream(jarIn);
-					lis.setLimit((int) e.getSize());
-					return lis;
+                    int size = (int) e.getSize();
+                    if (size == -1)
+                    {
+                        // unknown size so just pick a good buffer size.
+                        size = 8192;
+                    }
+                    return AccessibleByteArrayOutputStream.copyStream(jarIn, size);
 				}
 			}
 
-			jarIn.close();
-
 		} catch (IOException ioe) {
+            // can't read the jar file just assume it doesn't exist.
+		}
+        finally {
 			if (jarIn != null) {
 				try {
 					jarIn.close();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index b1c1b9f9..7129a074 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -662,8 +662,7 @@ private static void readOnlyTest(DataSource ds) throws SQLException
             assertStatementError("25502", s,
                     "CALL EMC.ADDCONTACT(3, 'really@is_read_only.gov')");
 
-            // Disabled due to DERBY-552
-            // getResourceTests(conn);
+            getResourceTests(conn);
             
             // Disabled due to DERBY-553
             // signersTests(conn);
