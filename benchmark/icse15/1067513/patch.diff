diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index ce1d6ae2..a01738e7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -325,7 +325,7 @@ Message makeGossipDigestAckMessage(GossipDigestAckMessage gDigestAckMessage) thr
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
         GossipDigestAckMessage.serializer().serialize(gDigestAckMessage, dos);
-        return new Message(localEndpoint_, StorageService.Verb.GOSSIP_DIGEST_ACK, bos.toByteArray());
+        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.GOSSIP_DIGEST_ACK, bos.toByteArray());
     }
 
     Message makeGossipDigestAck2Message(GossipDigestAck2Message gDigestAck2Message) throws IOException
@@ -431,7 +431,7 @@ private void doStatusCheck()
                     else
                     {
                         logger.info("FatClient " + endpoint + " has been silent for " + FatClientTimeout + "ms, removing from gossip");
-                        if (!justRemovedEndpoints_.containsKey(endpoint)) // if the node was decommissioned, it will have been removed but still appear as a fat client
+                        if (!justRemovedEndpoints.containsKey(endpoint)) // if the node was decommissioned, it will have been removed but still appear as a fat client
                             removeEndpoint(endpoint); // after quarantine justRemoveEndpoints will remove the state
                     }
                 }
@@ -452,7 +452,7 @@ private void doStatusCheck()
                     if (logger.isDebugEnabled())
                         logger.debug(QUARANTINE_DELAY + " elapsed, " + entry.getKey() + " gossip quarantine over");
                     justRemovedEndpoints.remove(entry.getKey());
-                    endpointStateMap_.remove(entry.getKey());
+                    endpointStateMap.remove(entry.getKey());
                 }
             }
         }
@@ -482,8 +482,8 @@ EndpointState getStateForVersionBiggerThan(InetAddress forEndpoint, int version)
             if ( localHbVersion > version )
             {
                 reqdEndpointState = new EndpointState(epState.getHeartBeatState());
-                if (logger_.isTraceEnabled())
-                    logger_.trace("local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint);
+                if (logger.isTraceEnabled())
+                    logger.trace("local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint);
             }
             /* Accumulate all application states whose versions are greater than "version" variable */
             for (Entry<ApplicationState, VersionedValue> entry : epState.getApplicationStateMap().entrySet())
@@ -658,8 +658,8 @@ else if (logger.isTraceEnabled())
             	}
                 else
                 {
-                    if (logger_.isTraceEnabled())
-                        logger_.trace("Ignoring remote generation " + remoteGeneration + " < " + localGeneration);
+                    if (logger.isTraceEnabled())
+                        logger.trace("Ignoring remote generation " + remoteGeneration + " < " + localGeneration);
                 }
             }
             else
@@ -677,8 +677,8 @@ private void applyNewStates(InetAddress addr, EndpointState localState, Endpoint
         Map<ApplicationState, VersionedValue> localAppStateMap = localState.getApplicationStateMap();
 
         localState.setHeartBeatState(remoteHbState);
-        if (logger_.isTraceEnabled())
-            logger_.trace("Updating heartbeat state generation to " + remoteHbState.getGeneration() + " from " + localHbState.getGeneration() + " for " + addr);
+        if (logger.isTraceEnabled())
+            logger.trace("Updating heartbeat state generation to " + remoteHbState.getGeneration() + " from " + localHbState.getGeneration() + " for " + addr);
 
         for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteState.getApplicationStateMap().entrySet())
         {
@@ -705,8 +705,8 @@ private void requestAll(GossipDigest gDigest, List<GossipDigest> deltaGossipDige
     {
         /* We are here since we have no data for this endpoint locally so request everthing. */
         deltaGossipDigestList.add( new GossipDigest(gDigest.getEndpoint(), remoteGeneration, 0) );
-        if (logger_.isTraceEnabled())
-            logger_.trace("requestAll for " + gDigest.getEndpoint());
+        if (logger.isTraceEnabled())
+            logger.trace("requestAll for " + gDigest.getEndpoint());
     }
 
     /* Send all the data with version greater than maxRemoteVersion */
