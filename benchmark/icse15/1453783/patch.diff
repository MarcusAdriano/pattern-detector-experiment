diff --git a/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java b/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
index 827962a7..38abb59e 100644
--- a/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
+++ b/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
@@ -23,7 +23,7 @@
 
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
-import org.osgi.framework.Filter;
+import org.osgi.framework.FrameworkUtil;
 import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceEvent;
 import org.osgi.framework.ServiceListener;
@@ -45,7 +45,7 @@
   private final AtomicBoolean open = new AtomicBoolean(false);
   private final SingleServiceListener serviceListener;
   private String filterString;
-  private Filter filter;
+  private boolean isCustomFilter;
 
   private final ServiceListener listener = new ServiceListener()
   {
@@ -69,13 +69,17 @@ public SingleServiceTracker(BundleContext context, Class<T> clazz, SingleService
     ctx = context;
     this.className = clazz.getName();
     serviceListener = sl;
+    this.filterString = '(' + Constants.OBJECTCLASS + '=' + className + ')';
   }
   
   public SingleServiceTracker(BundleContext context, Class<T> clazz, String filterString, SingleServiceListener sl) throws InvalidSyntaxException
   {
     this(context, clazz, sl);
-    this.filterString = filterString;
-    if (filterString != null) filter = context.createFilter(filterString);
+    if (filterString != null) {
+    	this.filterString = "(&" + this.filterString + filterString + ')';
+    	isCustomFilter = true;
+    }
+    FrameworkUtil.createFilter(this.filterString);
   }
   
   public T getService()
@@ -92,8 +96,6 @@ public void open()
   {
     if (open.compareAndSet(false, true)) {
       try {
-        String filterString = '(' + Constants.OBJECTCLASS + '=' + className + ')';
-        if (filter != null) filterString = "(&" + filterString + filter + ')';
         ctx.addServiceListener(listener, filterString);
         findMatchingReference(null);
       } catch (InvalidSyntaxException e) {
@@ -104,8 +106,23 @@ public void open()
 
   private void findMatchingReference(ServiceReference original) {
     boolean clear = true;
-    ServiceReference ref = ctx.getServiceReference(className);
-    if (ref != null && (filter == null || filter.match(ref))) {
+    ServiceReference ref;
+    if(isCustomFilter) {
+      try {
+        ServiceReference[] refs = ctx.getServiceReferences(className, filterString);
+        if(refs == null || refs.length == 0) {
+          ref = null;
+        } else {
+    	  ref = refs[0];
+        }
+      } catch (InvalidSyntaxException e) {
+        //This can't happen, we'd have blown up in the constructor
+        ref = null;
+      }
+    } else {
+	  ref = ctx.getServiceReference(className);
+    }
+    if (ref != null) {
       @SuppressWarnings("unchecked")
       T service = (T) ctx.getService(ref);
       if (service != null) {
diff --git a/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/SingleServiceTrackerTest.java b/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/SingleServiceTrackerTest.java
index 6924239f..92e9c3ef 100644
--- a/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/SingleServiceTrackerTest.java
+++ b/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/SingleServiceTrackerTest.java
@@ -18,6 +18,10 @@
  */
 package org.apache.aries.util;
 
+import java.util.Arrays;
+import java.util.Dictionary;
+import java.util.Hashtable;
+
 import org.apache.aries.mocks.BundleContextMock;
 import org.apache.aries.unittest.mocks.MethodCall;
 import org.apache.aries.unittest.mocks.Skeleton;
@@ -27,6 +31,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.osgi.framework.BundleContext;
+import org.osgi.framework.InvalidSyntaxException;
 
 import static org.junit.Assert.*;
 
@@ -46,11 +51,67 @@ public void teardown() {
   }
   
   private void createSut() {
+	  createSut(null);
+  }
+  
+  private void createSut(String filter) {
     listener = Skeleton.newMock(SingleServiceListener.class);
-    sut = new SingleServiceTracker<String>(ctx, String.class, listener);
+    try {
+		sut = new SingleServiceTracker<String>(ctx, String.class, filter, listener);
+	} catch (InvalidSyntaxException e) {
+		throw new RuntimeException(e);
+	}
     sut.open();
   }
   
+  @Test
+  public void testBeforeTheFactService() {
+	  ctx.registerService("java.lang.String", "uno", null);
+	  createSut();
+	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
+	  assertEquals("uno", sut.getService());
+  }
+  
+  @Test
+  public void testBeforeTheFactServiceDoubleRegistration() {
+	  testBeforeTheFactService();
+	  
+	  ctx.registerService("java.lang.String", "due", null);
+	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
+	  assertEquals("uno", sut.getService());
+  }
+  
+  @Test
+  public void testBeforeTheFactChoice() {
+	  ctx.registerService("java.lang.String", "uno", null);
+	  ctx.registerService("java.lang.String", "due", null);
+	  createSut();
+	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
+	  assertEquals("uno", sut.getService());
+  }
+  
+  @Test
+  public void testBeforeTheFactChoiceWithPropertiesAndFilterWithFirstMatch() {
+	  Dictionary<String, String> props = new Hashtable<String, String>();
+	  props.put("foo", "bar");
+	  ctx.registerService("java.lang.String", "uno", props);
+	  ctx.registerService("java.lang.String", "due", null);
+	  createSut("(foo=bar)");
+	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
+	  assertEquals("uno", sut.getService());
+  }
+  
+  @Test
+  public void testBeforeTheFactChoiceWithPropertiesAndFilterWithSecondMatch() {
+	  Dictionary<String, String> props = new Hashtable<String, String>();
+	  props.put("foo", "bar");
+	  ctx.registerService("java.lang.String", "uno", null);
+	  ctx.registerService("java.lang.String", "due", props);
+	  createSut("(foo=bar)");
+	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
+	  assertEquals("due", sut.getService());
+  }
+  
   @Test
   public void testAfterTheFactService() 
   {
