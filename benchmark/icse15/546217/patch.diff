diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
index 971a5f7c..24e4e6af 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
@@ -177,7 +177,10 @@ public PrintWriter getLogWriter() {
     public final static int SSL_BASIC = 1;
     public final static int SSL_PEER_AUTHENTICATION = 2;
 
-    public static final int getSSLModeFromString(String s) {
+    public static final int getSSLModeFromString(String s) 
+        throws SqlException
+    {
+        
 		if (s != null){
 			if (s.equalsIgnoreCase("off")) {
 				return SSL_OFF;
@@ -186,8 +189,9 @@ public static final int getSSLModeFromString(String s) {
 			} else if (s.equalsIgnoreCase("peerAuthentication")) {
 				return SSL_PEER_AUTHENTICATION;
 			} else {
-				// Default
-				return SSL_OFF;
+                throw new SqlException(null, 
+                                       new ClientMessageId(SQLState.INVALID_ATTRIBUTE),
+                                       Attribute.SSL_ATTR, s, "off, basic, peerAuthentication");
 			}
 		} else {
 			// Default
@@ -196,6 +200,7 @@ public static final int getSSLModeFromString(String s) {
     }
     
     public static final int getClientSSLMode(Properties properties)
+        throws SqlException
     {
         return getSSLModeFromString(properties.getProperty(Attribute.SSL_ATTR));
     }
@@ -872,7 +877,9 @@ public short getSecurityMechanism(String password) {
 
     private int sslMode;
 
-    public void setSsl(String mode) {
+    public void setSsl(String mode) 
+        throws SqlException
+    {
         sslMode = getSSLModeFromString(mode);
     }
 
@@ -1057,7 +1064,9 @@ public boolean getTraceFileAppend() {
      * The dataSource keeps individual fields for the values that are relevant to the client. These need to be updated
      * when set connection attributes is called.
      */
-    void updateDataSourceValues(Properties prop) {
+    void updateDataSourceValues(Properties prop) 
+        throws SqlException
+    {
         if (prop == null) {
             return;
         }
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 41484bea..e0f0a8d0 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -2824,15 +2824,20 @@ boolean supportsEUSRIDPWD()
 	 **/
 
 	private int getSSLModeValue(String s)
+        throws Exception
 	{
 		if (s != null){
 			if (StringUtil.SQLEqualsIgnoreCase(s,"off")) {
 				return SSL_OFF;
 			} else if (StringUtil.SQLEqualsIgnoreCase(s,"basic")) {
 				return SSL_BASIC;
-			} else if (StringUtil.SQLEqualsIgnoreCase(s,"peerAuthentication")) {				return SSL_PEER_AUTHENTICATION;
+			} else if (StringUtil.SQLEqualsIgnoreCase(s,"peerAuthentication")) {
+                return SSL_PEER_AUTHENTICATION;
 			} else {
-				// Default
+				// Unknown value
+                consolePropertyMessage("DRDA_InvalidValue.U", 
+                                       new String [] {s, Property.DRDA_PROP_SSL_MODE});
+                
 				return SSL_OFF;
 			}
 		} else {
