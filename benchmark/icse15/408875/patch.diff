diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 8081ae98..971e799d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -2725,6 +2725,7 @@ public boolean rowUpdated() throws SQLException {
         try
         {
             checkForClosedResultSet();
+            checkPositionedOnPlainRow();
 
             boolean rowUpdated = cursor_.getIsRowUpdated();
 
@@ -2742,8 +2743,14 @@ public boolean rowUpdated() throws SQLException {
     public boolean rowInserted() throws SQLException {
         try
         {
-            boolean rowInserted = false;
             checkForClosedResultSet();
+            checkPositionedOnPlainRow();
+
+            boolean rowInserted = false;
+
+            // Not implemented for any result set type,
+            // so it always returns false.
+
             if (agent_.loggingEnabled()) {
                 agent_.logWriter_.traceExit(this, "rowInserted", rowInserted);
             }
@@ -2759,10 +2766,11 @@ public boolean rowDeleted() throws SQLException {
         try
         {
             checkForClosedResultSet();
+            checkPositionedOnPlainRow();
 
-            boolean rowDeleted = (resultSetType_ == ResultSet.TYPE_SCROLL_INSENSITIVE) ?
-		cursor_.getIsUpdateDeleteHole() :
-		false;
+            boolean rowDeleted = 
+                (resultSetType_ == ResultSet.TYPE_SCROLL_INSENSITIVE) ?
+                cursor_.getIsUpdateDeleteHole() : false;
 
             if (agent_.loggingEnabled()) {
                 agent_.logWriter_.traceExit(this, "rowDeleted", rowDeleted);
@@ -4620,6 +4628,16 @@ private final void checkForValidCursorPosition() throws SqlException {
         }
     }
 
+
+    private final void checkPositionedOnPlainRow() throws SqlException {
+        if (isOnInsertRow_ || !isValidCursorPosition_) {
+            throw new SqlException
+                (agent_.logWriter_, 
+                 new ClientMessageId(SQLState.NO_CURRENT_ROW));
+        }
+    }
+
+
     private final void checkThatResultSetTypeIsScrollable() throws SqlException {
         if (resultSetType_ == java.sql.ResultSet.TYPE_FORWARD_ONLY) {
             throw new SqlException(agent_.logWriter_, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 167d75fd..cfda1a3f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -2155,6 +2155,9 @@ public int getConcurrency() throws SQLException {
 	 */
 	public boolean rowUpdated() throws SQLException {
 		checkIfClosed("rowUpdated");
+		checkNotOnInsertRow();
+		checkOnRow();
+
         boolean rvalue = false;
 
 		try {
@@ -2182,6 +2185,9 @@ public boolean rowUpdated() throws SQLException {
 	 */
 	public boolean rowInserted() throws SQLException {
 		checkIfClosed("rowInserted");
+		checkNotOnInsertRow();
+		checkOnRow();
+
 		return false;
 	}
 
@@ -2201,6 +2207,9 @@ public boolean rowInserted() throws SQLException {
 	 */
 	public boolean rowDeleted() throws SQLException {
 		checkIfClosed("rowUpdated");
+		checkNotOnInsertRow();
+		checkOnRow();
+
         boolean rvalue = false;
 
 		try {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
index 3e471aa0..1ff44dc8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
@@ -27,6 +27,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 import java.util.Iterator;
+
 /**
  * Tests for variants of scrollable updatable resultsets.
  *
@@ -1061,6 +1062,120 @@ public void testScrollInsensitiveConcurUpdatableWithoutForUpdate3()
         testScrollInsensistiveConurUpdatable3(rs);
     }
     
+    /**
+     * Check that detectability methods throw the correct exception
+     * when called in an illegal row state, that is, somehow not
+     * positioned on a row. Minion of testDetectabilityExceptions.
+     *
+     * @param rs An open updatable result set.
+     * @param state A string describing the illegal state.
+     * @return No return value.
+     */
+    private void checkDetectabilityCallsOutsideRow(ResultSet rs, 
+                                                   String state)
+    {
+        boolean b;
+        
+        try {
+            b = rs.rowUpdated();
+            fail("rowUpdated while " + state + 
+                 " did not throw exception: " + b);
+        } catch (SQLException e) {
+            assertEquals(e.getSQLState(),
+                         INVALID_CURSOR_STATE_NO_CURRENT_ROW);
+        }
+
+        try {
+            b = rs.rowDeleted();
+            fail("rowdeleted while " + state + 
+                 " did not throw exception: " + b);
+        } catch (SQLException e) {
+            assertEquals(e.getSQLState(),
+                         INVALID_CURSOR_STATE_NO_CURRENT_ROW);
+        }
+
+        try {
+            b = rs.rowInserted();
+            fail("rowInserted while " + state + 
+                 " did not throw exception: " + b);
+        } catch (SQLException e) {
+            assertEquals(e.getSQLState(),
+                         INVALID_CURSOR_STATE_NO_CURRENT_ROW);
+        }
+    }
+
+
+    /**
+     * Test that the JDBC detectability calls throw correct exceptions when
+     * called in in wrong row states. 
+     * This is done for both supported updatable result set types.
+     */
+    public void testDetectabilityExceptions() throws SQLException 
+    {
+        Statement s = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, 
+                                          ResultSet.CONCUR_UPDATABLE);
+        ResultSet rs = s.executeQuery("select * from t1");
+        
+        checkDetectabilityCallsOutsideRow(rs, "before positioning");
+
+        rs.moveToInsertRow();
+        checkDetectabilityCallsOutsideRow(rs, 
+                                          "on insertRow before positioning");
+
+        rs.next();
+        rs.moveToInsertRow();
+        checkDetectabilityCallsOutsideRow(rs, "on insertRow");
+        rs.moveToCurrentRow(); // needed until to DERBY-1322 is fixed
+
+        rs.beforeFirst();
+        checkDetectabilityCallsOutsideRow(rs, "on beforeFirst row");
+
+        rs.afterLast();
+        checkDetectabilityCallsOutsideRow(rs, "on afterLast row");
+
+        rs.first();
+        rs.deleteRow();
+        checkDetectabilityCallsOutsideRow(rs, "after deleteRow");
+
+        rs.last();
+        rs.deleteRow();
+        checkDetectabilityCallsOutsideRow(rs, "after deleteRow of last row");
+
+        rs.close();
+        s.close();
+
+        // Not strictly SUR, but fixed in same patch, so we test it here.
+        s = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, 
+                                ResultSet.CONCUR_UPDATABLE);
+        rs = s.executeQuery("select * from t1");
+
+        checkDetectabilityCallsOutsideRow(rs, "before FO positioning");
+
+        rs.moveToInsertRow();
+        checkDetectabilityCallsOutsideRow(rs, 
+                                          "on insertRow before FO positioning");
+
+        rs.next();
+        rs.moveToInsertRow();
+        checkDetectabilityCallsOutsideRow(rs, "on FO insertRow");
+
+        rs.next();
+        rs.updateInt(2, 666);
+        rs.updateRow();
+        checkDetectabilityCallsOutsideRow(rs, "after FO updateRow");
+
+        rs.next();
+        rs.deleteRow();
+        checkDetectabilityCallsOutsideRow(rs, "after FO deleteRow");
+
+        while (rs.next()) {};
+        checkDetectabilityCallsOutsideRow(rs, "after FO emptied out");
+
+        rs.close();
+        s.close();
+    }
+
+
     /**
      * Get a cursor name. We use the same cursor name for all cursors.
      */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
index f6105f70..bb825a70 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
@@ -971,7 +971,6 @@ public static void main(String[] args) {
       System.out.println("Since Derby returns false for detlesAreDetected for FORWARD_ONLY updatable resultset,the program should not rely on rs.rowDeleted() for FORWARD_ONLY updatable resultsets");
       System.out.println("Have this call to rs.rowDeleted() just to make sure the method does always return false? " + rs.rowDeleted());
 			rs.deleteRow();
-      System.out.println("Have this call to rs.rowDeleted() just to make sure the method does always return false? " + rs.rowDeleted());
 			rs.close();
 
 			System.out.println("Positive Test6b - For Forward Only resultsets, DatabaseMetaData will return false for ownUpdatesAreVisible and updatesAreDetected");
@@ -989,7 +988,6 @@ public static void main(String[] args) {
 			System.out.println("Have this call to rs.rowUpdated() just to make sure the method does always return false? " + rs.rowUpdated());
 			rs.updateLong(1,123);
 			rs.updateRow();
-			System.out.println("Have this call to rs.rowUpdated() just to make sure the method does always return false? " + rs.rowUpdated());
 			rs.close();
 
 			System.out.println("Positive Test7a - delete using updatable resultset api from a temporary table");
