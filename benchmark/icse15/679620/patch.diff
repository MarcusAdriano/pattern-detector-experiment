diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index d67d772b..0258aa03 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -2079,27 +2079,11 @@ public ResourceBundle getBundle(String messageId) {
 	}
 
 	public Thread getDaemonThread(Runnable task, String name, boolean setMinPriority) {
-		// DERBY-3745 We want to avoid the thread leaking class loaders,
-		// so we make the context class loader null before we create the
-		// thread.
-		ClassLoader savecl = null;
-		boolean hasGetClassLoaderPerms = false;
-		try {
-			savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
-			hasGetClassLoaderPerms = true;
-		}  catch (SecurityException se) {
-			// ignore security exception. Earlier versions of Derby, before
-			// the DERBY-3745 fix did not require getClassLoader permissions.
-			// We may leak class loaders if we are not able to get the 
-			// class loader, but we cannot just fail.
-		}
-		if (hasGetClassLoaderPerms)
-			PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-								 Thread.currentThread(), null);
 		Thread t =  new Thread(daemonGroup, task, "derby.".concat(name));
-		if (hasGetClassLoaderPerms)
+		// DERBY-3745.  setContextClassLoader for thread to null to avoid
+		// leaking class loaders.
 			PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-							  Thread.currentThread(), savecl);
+							  t, null);
 
 		t.setDaemon(true);
 
