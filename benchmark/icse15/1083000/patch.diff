diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
index 5ee2c7ea..5b8deb77 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
@@ -80,7 +80,7 @@ public SSTableNamesIterator(SSTableReader ssTable, String key, SortedSet<byte[]>
 
             /* get the various column ranges we have to read */
             AbstractType comparator = ssTable.getColumnComparator();
-            SortedSet<IndexHelper.IndexInfo> ranges = new TreeSet<IndexHelper.IndexInfo>(IndexHelper.getComparator(comparator));
+            SortedSet<IndexHelper.IndexInfo> ranges = new TreeSet<IndexHelper.IndexInfo>(IndexHelper.getComparator(comparator, false));
             for (byte[] name : filteredColumnNames)
             {
                 int index = IndexHelper.indexFor(name, indexList, comparator, false);
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
index cd7f9e8a..afc680e8 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
@@ -139,8 +139,6 @@ public ColumnGroupReader(SSTableReader ssTable, DecoratedKey key, FileDataInput
 
             file.mark();
             curRangeIndex = IndexHelper.indexFor(startColumn, indexes, comparator, reversed);
-            if (reversed && curRangeIndex == indexes.size())
-                curRangeIndex--;
         }
 
         public ColumnFamily getEmptyColumnFamily()
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexHelper.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexHelper.java
index 99970d24..a0b0bb66 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexHelper.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexHelper.java
@@ -103,18 +103,30 @@ public static BloomFilter defreezeBloomFilter(FileDataInput file) throws IOExcep
 
     /**
      * the index of the IndexInfo in which @name will be found.
-     * If the index is @indexList.size(), the @name appears nowhere.
+     * If the index is @indexList.size() or -1, the @name appears nowhere.
      */
     public static int indexFor(byte[] name, List<IndexInfo> indexList, AbstractType comparator, boolean reversed)
     {
         if (name.length == 0 && reversed)
             return indexList.size() - 1;
         IndexInfo target = new IndexInfo(name, name, 0, 0);
-        int index = Collections.binarySearch(indexList, target, getComparator(comparator));
-        return index < 0 ? -1 * (index + 1) : index;
+        int index = Collections.binarySearch(indexList, target, getComparator(comparator, reversed));
+        return index < 0 ? -index - (reversed ? 2 : 1) : index;
     }
 
-    public static Comparator<IndexInfo> getComparator(final AbstractType nameComparator)
+    public static Comparator<IndexInfo> getComparator(final AbstractType nameComparator, boolean reversed)
+    {
+        if (reversed)
+        {
+            return new Comparator<IndexInfo>()
+            {
+                public int compare(IndexInfo o1, IndexInfo o2)
+                {
+                    return nameComparator.compare(o1.firstName, o2.firstName);
+                }
+            };
+        }
+        else
     {
         return new Comparator<IndexInfo>()
         {
@@ -124,6 +136,7 @@ public int compare(IndexInfo o1, IndexInfo o2)
             }
         };
     }
+    }
 
     public static class IndexInfo
     {
