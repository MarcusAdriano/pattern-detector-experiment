diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java
index 578a73fa..73857e95 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java
@@ -181,6 +181,18 @@ This call requires the instance (reference) to be pushed by the caller.
 	*/
 	public void getStaticField(String declaringClass, String fieldName, String fieldType);
 
+	/**
+		Pop the top stack value and store it in the local field. 
+		This call pushes the this instance required to access the field itself.
+	This call does not leave any value on the stack.
+
+	<PRE>
+	Stack ...,value  =>
+	      ...
+	</PRE>
+	*/
+	public void setField(LocalField field);
+
 	/**
 		Pop the top stack value and store it in the local field. 
 		This call pushes the this instance required to access the field itself.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java
index e0220554..a4321781 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java
@@ -730,6 +730,20 @@ private void getField(short opcode, String declaringClass, String fieldName, Str
 		growStack(ft);
 	}
 
+	/**
+	 * Set the field but don't duplicate its value so
+	 * nothing is left on the stack after this call.
+	 */
+	public void setField(LocalField field) {
+		BCLocalField lf = (BCLocalField) field;
+		Type lt = lf.type;
+
+		putField(lf.type, lf.cpi, false);
+
+		if (stackDepth == 0)
+			overflowMethodCheck();
+	}
+
 	/**
 		Upon entry the top word(s) on the stack is
 		the value to be put into the field. Ie.
@@ -753,7 +767,7 @@ public void putField(LocalField field) {
 		BCLocalField lf = (BCLocalField) field;
 		Type lt = lf.type;
 
-		putField(lf.type, lf.cpi);
+		putField(lf.type, lf.cpi, true);
 	}
 
 	/**
@@ -764,50 +778,38 @@ public void putField(String fieldName, String fieldType) {
 		Type ft = cb.factory.type(fieldType);
 		int cpi = modClass.addFieldReference(cb.classType.vmNameSimple, fieldName, ft.vmName());
 
-		putField(ft, cpi);
+		putField(ft, cpi, true);
 	}
 
-	private void putField(Type fieldType, int cpi) {
+	private void putField(Type fieldType, int cpi, boolean dup) {
 
 		// now have ...,value
+		if (dup)
+		{
 		myCode.addInstr(fieldType.width() == 2  ? VMOpcode.DUP2 : VMOpcode.DUP);
 		growStack(fieldType);
+		}
+		// now have
+		// dup true:  ...,value,value
+		// dup false: ...,value,
 
-		// now have ...,value,value
 		pushThis();
-		// now have ...,value,value,this
-		swap();
-		/*
-		if (fieldType.width() == 1) {
-			myCode.addInstr(VMOpcode.SWAP);
-			Type t1 = popStack();
-			Type t2 = popStack();
-			growStack(t1);
-			growStack(t2);
-
-			// now have ...,word,this,word
-
-		} else {
-
-			// now have wA,wB,wA,wB,this
-			myCode.addInstr(VMOpcode.DUP_X2);
+		// now have
+		// dup true:  ...,value,value,this
+		// dup false: ...,value,this
 
-			Type t1 = popStack();
-			Type t2 = popStack();
-			growStack(t1);
-			growStack(t2);
-			growStack(t1);
-
-			// now have wA,wB,this,wA,wB,this
-			myCode.addInstr(VMOpcode.POP);
-			popStack();
+		swap();
+		// now have
+		// dup true:  ...,value,this,value
+		// dup false: ...,this,value
 
-			// now have wA,wB,this,wA,wB
-		}
-*/
 		myCode.addInstrU2(VMOpcode.PUTFIELD, cpi);
 		popStack(); // the value
 		popStack(); // this
+
+		// now have
+		// dup true:  ...,value
+		// dup false: ...
 	}
 	/**
 		Pop the top stack value and store it in the field.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
index f2bbf0d2..3ac8c725 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
@@ -913,9 +913,7 @@ private void genDataValueConversion(ExpressionClassBuilder acb,
 		*/
 
 		acb.generateNull(acbConstructor, getTypeCompiler(destCTI));
-		acbConstructor.putField(field);
-		acbConstructor.endStatement();
-
+		acbConstructor.setField(field);
 
 
 		/*
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
index 38b9eef3..e3823508 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
@@ -205,8 +205,7 @@ public void generateExpression(ExpressionClassBuilder acb,
 		/* Assign the initializer to the DataValueDescriptor[] field */
 		MethodBuilder cb = acb.getConstructor();
 		cb.pushNewArray(ClassName.DataValueDescriptor, argumentsListSize);
-		cb.putField(arrayField);
-		cb.endStatement();
+		cb.setField(arrayField);
 
 		/* Set the array elements that are constant */
 		int numConstants = 0;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java
index beeaad3c..7897b42d 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java
@@ -578,8 +578,7 @@ public void generate(ActivationClassBuilder acb,
 			LocalField arrayField =
 				acb.newFieldDeclaration(Modifier.PRIVATE, resultSetArrayType);
 			mb.pushNewArray(ClassName.ResultSet, dependentNodes.length);  // new ResultSet[size]
-			mb.putField(arrayField);
-			mb.endStatement();
+			mb.setField(arrayField);
 
 			argCount = 4;
 			for(int index=0 ; index <  dependentNodes.length ; index++)
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java
index 8f2b9f39..89bb0152 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java
@@ -845,8 +845,7 @@ protected LocalField getCurrentSetup() {
 
 		constructor.pushNewStart(ClassName.CurrentDatetime);
 		constructor.pushNewComplete(0);
-		constructor.putField(cdtField);
-		constructor.endStatement();
+		constructor.setField(cdtField);
 
 		return cdtField;
 	}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
index 3765c992..9a018160 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
@@ -410,8 +410,7 @@ public void generateExpression(ExpressionClassBuilder acb,
 		/* Assign the initializer to the DataValueDescriptor[] field */
 		MethodBuilder cb = acb.getConstructor();
 		cb.pushNewArray(ClassName.DataValueDescriptor, listSize);
-		cb.putField(arrayField);
-		cb.endStatement();
+		cb.setField(arrayField);
 
 		/* Set the array elements that are constant */
 		int numConstants = 0;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
index a9f9fca6..5cf25c9b 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
@@ -2756,8 +2756,7 @@ public void generateQualifiers(
 			/* Assign the initializer to the Qualifier[] field */
 			consMB.pushNewArray(
                 ClassName.Qualifier + "[]", (int) num_of_or_conjunctions + 1);
-			consMB.putField(qualField);
-			consMB.endStatement();
+			consMB.setField(qualField);
 
             // Allocate qualifiers[0] which is an entry for each of the leading
             // AND clauses.
@@ -3150,8 +3149,7 @@ private LocalField generateIndexableRow(ExpressionClassBuilder acb, int numberOf
 		LocalField field =
 			acb.newFieldDeclaration(Modifier.PRIVATE, ClassName.ExecIndexRow);
 		
-		mb.putField(field);
-		mb.endStatement();
+		mb.setField(field);
 
 		return field;
 	}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index b558b7c9..8f930e8a 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -1395,8 +1395,7 @@ private void genCreateRow(ExpressionClassBuilder acb,
 		cb.push(numCols);
 		cb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null,
 							rowAllocatorMethod, rowAllocatorType, 1);
-		cb.putField(field);
-		cb.endStatement();
+		cb.setField(field);
 		/* Increase the statement counter in constructor.  Code size in
 		 * constructor can become too big (more than 64K) for Java compiler
 		 * to handle (beetle 4293).  We set constant columns in other
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java
index b62242c0..099bc6f2 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java
@@ -451,8 +451,7 @@ private void generateReturnsNullOnNullCheck(MethodBuilder mb)
 		  mb.getField(returnsNullOnNullState);
 		mb.completeConditional();
 		
-		mb.putField(returnsNullOnNullState);
-		mb.endStatement();
+		mb.setField(returnsNullOnNullState);
 	}
 
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
index eb7a2584..43a5645f 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
@@ -698,8 +698,7 @@ public void generateExpression(ExpressionClassBuilder acb,
 		// reset the parameters are null indicator.
 		if (returnsNullOnNullState != null) {
 			mb.push(false);
-			mb.putField(returnsNullOnNullState);
-			mb.endStatement();
+			mb.setField(returnsNullOnNullState);
 
 			// for the call to the generated method below.
 			mb.pushThis();
@@ -772,8 +771,7 @@ else if (sqlAllowed == RoutineAliasInfo.MODIFIES_SQL_DATA)
 				functionEntrySQLAllowed = acb.newFieldDeclaration(Modifier.PRIVATE, "short");
 				mb.callMethod(VMOpcode.INVOKEINTERFACE, null,
 									"getSQLAllowed", "short", 0);
-				mb.putField(functionEntrySQLAllowed);
-				mb.endStatement();
+				mb.setField(functionEntrySQLAllowed);
 
 			}
 			
@@ -819,8 +817,7 @@ else if (sqlAllowed == RoutineAliasInfo.MODIFIES_SQL_DATA)
 
 					// create the holder of all the ResultSet arrays, new java.sql.ResultSet[][compiledResultSets]
 					cons.pushNewArray("java.sql.ResultSet[]", compiledResultSets);
-					cons.putField(procedureResultSetsHolder);
-					cons.endStatement();
+					cons.setField(procedureResultSetsHolder);
 
 
 					// arguments for the dynamic result sets
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
index 8bd1ba61..7f9c312f 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
@@ -1843,17 +1843,14 @@ public void generateExpression(
 				mb.getField(subRS);
 				mb.completeConditional();
 		
-				mb.putField(subRS);
-				mb.endStatement();
+				mb.setField(subRS);
 
                 executeMB.pushNull( ClassName.NoPutResultSet);
-                executeMB.putField(subRS);
-                executeMB.endStatement();
+                executeMB.setField(subRS);
 			}
 
             executeMB.pushNull( ClassName.NoPutResultSet);
-            executeMB.putField(rsFieldLF);
-            executeMB.endStatement();
+            executeMB.setField(rsFieldLF);
 
 			// now we fill in the body of the conditional
 			mb.getField(rsFieldLF);
@@ -1990,8 +1987,7 @@ else if (resultSet.returnsAtMostOneRow())
 			mb.completeConditional();
 		}
 		
-		mb.putField(rsFieldLF);
-		mb.endStatement();
+		mb.setField(rsFieldLF);
 
 		/* rs.openCore() */
 		mb.getField(rsFieldLF);
@@ -2089,8 +2085,7 @@ private LocalField generateMaterialization(
 		mb.callMethod(VMOpcode.INVOKEVIRTUAL, (String) null, mbsq.getName(), type, 0);
 
 		// generate: field = value (value is on stack)
-		mb.putField(field);
-		mb.endStatement();
+		mb.setField(field);
 
 		return field;
 	}
