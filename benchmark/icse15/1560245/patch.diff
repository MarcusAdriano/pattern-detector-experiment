diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
index fc539006..42ec586b 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
@@ -91,4 +91,8 @@
    */
   public Map<String, Object> getTagMap();
 
+  /**
+   * Removes this query node from its parent.
+   */
+  public void removeFromParent();
 }
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
index cc5d7507..85935780 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
@@ -19,6 +19,7 @@
 
 import java.util.ArrayList;
 import java.util.Hashtable;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -102,18 +103,19 @@ public final void set(List<QueryNode> children) {
 
     // reset parent value
     for (QueryNode child : children) {
+      child.removeFromParent();
+    }
 
-      ((QueryNodeImpl) child).setParent(null);
-
+    ArrayList<QueryNode> existingChildren = new ArrayList<QueryNode>(getChildren());
+    for (QueryNode existingChild : existingChildren) {
+      existingChild.removeFromParent();
     }
 
     // allocate new children list
     allocate();
 
     // add new children and set parent
-    for (QueryNode child : children) {
-      add(child);
-    }
+    add(children);
   }
 
   @Override
@@ -154,7 +156,7 @@ protected void setLeaf(boolean isLeaf) {
     if (isLeaf() || this.clauses == null) {
       return null;
     }
-    return this.clauses;
+    return new ArrayList<QueryNode>(this.clauses);
   }
 
   @Override
@@ -181,8 +183,11 @@ public Object getTag(String tagName) {
   private QueryNode parent = null;
 
   private void setParent(QueryNode parent) {
+    if (this.parent != parent) {
+      this.removeFromParent();
     this.parent = parent;
   }
+  }
 
   @Override
   public QueryNode getParent() {
@@ -242,4 +247,20 @@ public String toString() {
     return (Map<String, Object>) this.tags.clone();
   }
 
+  @Override
+  public void removeFromParent() {
+    if (this.parent != null) {
+      List<QueryNode> parentChildren = this.parent.getChildren();
+      Iterator<QueryNode> it = parentChildren.iterator();
+      
+      while (it.hasNext()) {
+        if (it.next() == this) {
+          it.remove();
+        }
+      }
+      
+      this.parent = null;
+    }
+  }
+
 } // end class QueryNodeImpl
diff --git a/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java b/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java
index f3b2e8da..5b60b693 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java
@@ -18,6 +18,7 @@
  */
 
 import java.util.Arrays;
+import java.util.Collections;
 
 import org.apache.lucene.util.LuceneTestCase;
 
@@ -44,4 +45,23 @@ public void testTags() throws Exception {
     
   }
   
+  /* LUCENE-5099 - QueryNodeProcessorImpl should set parent to null before returning on processing */
+  public void testRemoveFromParent() throws Exception {
+    BooleanQueryNode booleanNode = new BooleanQueryNode(Collections.<QueryNode>emptyList());
+    FieldQueryNode fieldNode = new FieldQueryNode("foo", "A", 0, 1);
+    assertNull(fieldNode.getParent());
+    
+    booleanNode.add(fieldNode);
+    assertNotNull(fieldNode.getParent());
+
+    fieldNode.removeFromParent();
+    assertNull(fieldNode.getParent());
+
+    booleanNode.add(fieldNode);
+    assertNotNull(fieldNode.getParent());
+    
+    booleanNode.set(Collections.<QueryNode>emptyList());
+    assertNull(fieldNode.getParent());
+  }
+  
 }
diff --git a/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java b/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
index 0c399393..a1890a14 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
@@ -18,7 +18,6 @@
  */
 
 import java.io.IOException;
-import java.io.Reader;
 import java.text.DateFormat;
 import java.util.Calendar;
 import java.util.Date;
@@ -1066,6 +1065,7 @@ public void testMatchAllDocs() throws Exception {
     assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);
   }
   
+  @SuppressWarnings("unused")
   private void assertHits(int expected, String query, IndexSearcher is) throws Exception {
     String oldDefaultField = getDefaultField();
     setDefaultField("date");
