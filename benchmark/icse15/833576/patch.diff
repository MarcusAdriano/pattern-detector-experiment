diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackUnawareStrategy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackUnawareStrategy.java
index 9bc9c905..17a9ef03 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackUnawareStrategy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackUnawareStrategy.java
@@ -40,17 +40,14 @@ public RackUnawareStrategy(TokenMetadata tokenMetadata, IPartitioner partitioner
         super(tokenMetadata, partitioner, replicas, storagePort);
     }
 
-    // TODO this doesn't need to worry about bootstrap tokens being in the normal tokens map
     public ArrayList<InetAddress> getNaturalEndpoints(Token token, TokenMetadata metadata)
     {
         int startIndex;
         List<Token> tokenList = new ArrayList<Token>();
-        int foundCount = 0;
         List tokens = new ArrayList<Token>(metadata.sortedTokens());
-        List<Token> bsTokens = null;
 
         int index = Collections.binarySearch(tokens, token);
-        if(index < 0)
+        if (index < 0)
         {
             index = (index + 1) * (-1);
             if (index >= tokens.size())
@@ -58,21 +55,14 @@ public RackUnawareStrategy(TokenMetadata tokenMetadata, IPartitioner partitioner
         }
         int totalNodes = tokens.size();
         // Add the token at the index by default
-        tokenList.add((Token)tokens.get(index));
-        if (bsTokens == null || !bsTokens.contains(tokens.get(index)))
-            foundCount++;
-        startIndex = (index + 1)%totalNodes;
+        tokenList.add((Token) tokens.get(index));
+        startIndex = (index + 1) % totalNodes;
         // If we found N number of nodes we are good. This loop will just exit. Otherwise just
         // loop through the list and add until we have N nodes.
-        for (int i = startIndex, count = 1; count < totalNodes && foundCount < replicas_; ++count, i = (i+1)%totalNodes)
+        for (int i = startIndex, count = 1; count < totalNodes && tokenList.size() < replicas_; ++count, i = (i + 1) % totalNodes)
         {
-            if(!tokenList.contains(tokens.get(i)))
-            {
-                tokenList.add((Token)tokens.get(i));
-                //Don't count bootstrapping tokens towards the count
-                if (bsTokens==null || !bsTokens.contains(tokens.get(i)))
-                    foundCount++;
-            }
+            assert !tokenList.contains(tokens.get(i));
+            tokenList.add((Token) tokens.get(i));
         }
         ArrayList<InetAddress> endpoints = new ArrayList<InetAddress>(tokenList.size());
         for (Token t : tokenList)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
index 597ba955..51046794 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
@@ -177,36 +177,6 @@ public InetAddress getFirstEndpoint()
         }
     }
     
-
-    public InetAddress getNextEndpoint(InetAddress endpoint) throws UnavailableException
-    {
-        assert endpoint != null;
-
-        lock.readLock().lock();
-        try
-        {
-            ArrayList<Token> tokens = new ArrayList<Token>(tokenToEndPointMap.keySet());
-            if (tokens.isEmpty())
-                return null;
-            Collections.sort(tokens);
-            int i = tokens.indexOf(tokenToEndPointMap.inverse().get(endpoint)); // TODO binary search
-            int j = 1;
-            InetAddress ep;
-            while (!FailureDetector.instance().isAlive((ep = tokenToEndPointMap.get(tokens.get((i + j) % tokens.size())))))
-            {
-                if (++j > DatabaseDescriptor.getReplicationFactor())
-                {
-                    throw new UnavailableException();
-                }
-            }
-            return ep;
-        }
-        finally
-        {
-            lock.readLock().unlock();
-        }
-    }
-
     public TokenMetadata cloneMe()
     {
         lock.readLock().lock();
@@ -300,6 +270,11 @@ public Token getSuccessor(Token token)
         return (Token) ((index == (tokens.size() - 1)) ? tokens.get(0) : tokens.get(index + 1));
     }
 
+    public InetAddress getSuccessor(InetAddress endPoint)
+    {
+        return getEndPoint(getSuccessor(getToken(endPoint)));
+    }
+
     public Iterable<? extends Token> bootstrapTokens()
     {
         return bootstrapTokenMap.keySet();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index c9874e44..bdd936a6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -36,6 +36,7 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.locator.TokenMetadata;
 import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.gms.FailureDetector;
 
 import org.apache.log4j.Logger;
 
@@ -567,7 +568,10 @@ else if (comparator.compare(allKeys.get(allKeys.size() - 1), rangeKeys.get(0)) <
             // but that won't work when you have a replication factor of more than one--any node, not just
             // the one holding the keys where the range wraps, could include both the smallest keys, and the largest,
             // so starting with the largest in our scan of the next node means we'd never see keys from the middle.
-            endPoint = tokenMetadata.getNextEndpoint(endPoint); // TODO move this into the Strategies & modify for RackAwareStrategy
+            do
+            {
+                endPoint = tokenMetadata.getSuccessor(endPoint); // TODO move this into the Strategies & modify for RackAwareStrategy
+            } while (!FailureDetector.instance().isAlive(endPoint));
             int maxResults = endPoint == wrapEndpoint ? rawCommand.maxResults : rawCommand.maxResults - allKeys.size();
             command = new RangeCommand(command.table, command.columnFamily, command.startWith, command.stopAt, maxResults);
         } while (!endPoint.equals(startEndpoint));
