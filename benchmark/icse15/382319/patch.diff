diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
index 05925e58..1cf10877 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
@@ -2204,13 +2204,20 @@ private boolean getMetaDataInfoBooleanWithType(int infoCallIndex, int type) thro
     }
 
     private boolean getMetaDataInfoInt_SupportsResultSetConcurrency(int infoCallIndex, int type, int concurrency) throws SQLException {
-        // The stored procured will return a String containg a list of concurrency and list of resultSet types which support
-        // a perticular concurrency
-        // For eg. if the database supports concurrency CONCUR_READ_ONLY(1007) in ResultSet type TYPE_FORWARD_ONLY(1003),
-        // TYPE_SCROLL_INSENSITIVE(1004), TYPE_SCROLL_SENSITIVE(1005) and
-        // supports concurrency CONCUR_UPDATBLE(1008) in resultSet TYPE_SCROLL_SENSITIVE(1005)
-        // then stored procedure will return a string "1007,1003,1004,1005;1008,1005"
-        // see how concurrency and supported result set types are seperated by ";"
+        // The stored procured will return a String containing a list
+        // of lists: For each result set type in the outer list, an
+        // inner list gives the allowed concurrencies for that type:
+	// The encoding syntax is reproduced here from the server file
+	// 'metadata_net.properties (please keep in synch!):  
+	//
+        // String syntax:  
+	// <type> { "," <concurrency>}* { ";" <type> { "," <concurrency>}* }}*
+	//
+	// <type> ::= <the integer value for that type from interface java.sql.Resultset
+	//             i.e. TYPE_FORWARD_ONLY is 1003>
+	// <concurrency> ::= <the integer value for that concurrency
+	//                    from interface java.sql.Resultset, i.e.
+	//                    CONCUR_UPDATABLE is 1008>
         try
         {
             String returnedFromSP = null;
@@ -2222,10 +2229,11 @@ private boolean getMetaDataInfoInt_SupportsResultSetConcurrency(int infoCallInde
             }
             java.util.StringTokenizer st = new java.util.StringTokenizer(returnedFromSP, ";");
             while (st.hasMoreTokens()) {
-                java.util.StringTokenizer stForType = new java.util.StringTokenizer(st.nextToken(), ",");
-                if ((new Integer(stForType.nextToken())).intValue() == concurrency) {
-                    while (st.hasMoreTokens()) {
-                        if ((new Integer(st.nextToken())).intValue() == type) {
+                java.util.StringTokenizer stForConc = 
+		    new java.util.StringTokenizer(st.nextToken(), ",");
+                if ((new Integer(stForConc.nextToken())).intValue() == type) {
+                    while (stForConc.hasMoreTokens()) {
+                        if ((new Integer(stForConc.nextToken())).intValue() == concurrency) {
                             return true;
                         }
                     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
index 55c4c3fc..b3ede187 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
@@ -668,6 +668,32 @@ public void runTest() {
 			System.out.println("othersDeletesAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE)? " + met.othersDeletesAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));
 			System.out.println("othersInsertsAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE)? " + met.othersInsertsAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));
 
+			if (!TestUtil.isJCCFramework()) { // gives false on all.. bug
+				int[] types = {ResultSet.TYPE_FORWARD_ONLY, 
+							   ResultSet.TYPE_SCROLL_INSENSITIVE,
+							   ResultSet.TYPE_SCROLL_SENSITIVE};
+	 
+				int[] conc  = {ResultSet.CONCUR_READ_ONLY, 
+							   ResultSet.CONCUR_UPDATABLE};
+
+				String[] typesStr = {"TYPE_FORWARD_ONLY", 
+									 "TYPE_SCROLL_INSENSITIVE",
+									 "TYPE_SCROLL_SENSITIVE"};
+			
+				String[] concStr  = {"CONCUR_READ_ONLY", 
+									 "CONCUR_UPDATABLE"};
+	 
+				for (int i = 0; i < types.length ; i++) {
+					for (int j = 0; j < conc.length; j++) {
+						System.out.println
+							("SupportsResultSetConcurrency: " +
+							 typesStr[i] + "," + concStr[j] + ": " +
+							 met.supportsResultSetConcurrency(types[i], 
+															  conc[j]));
+					}
+				}
+			}
+
 			System.out.println("getConnection(): "+
 					   ((met.getConnection()==con)?"same connection":"different connection") );
 			System.out.println("getProcedureColumns():");
