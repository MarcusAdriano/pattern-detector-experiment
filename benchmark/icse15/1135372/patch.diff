diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/CompoundFileReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/CompoundFileReader.java
index 30727632..543b2413 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/CompoundFileReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/CompoundFileReader.java
@@ -30,7 +30,6 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 
-
 /**
  * Class for accessing a compound stream.
  * This class implements a directory, but is limited to only read operations.
@@ -45,7 +44,6 @@
         long length;
     }
 
-
     // Base info
     private Directory directory;
     private String fileName;
@@ -53,7 +51,6 @@
     private IndexInput stream;
     private HashMap<String,FileEntry> entries = new HashMap<String,FileEntry>();
 
-
   public CompoundFileReader(Directory dir, String name) throws IOException {
     this(dir, name, BufferedIndexInput.BUFFER_SIZE);
   }
@@ -144,17 +141,13 @@ public synchronized void close() throws IOException {
     }
 
     @Override
-    public synchronized IndexInput openInput(String id)
-    throws IOException
-    {
+  public synchronized IndexInput openInput(String id) throws IOException {
       // Default to readBufferSize passed in when we were opened
       return openInput(id, readBufferSize);
     }
 
     @Override
-    public synchronized IndexInput openInput(String id, int readBufferSize)
-    throws IOException
-    {
+  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {
         if (stream == null)
             throw new IOException("Stream closed");
         
@@ -202,15 +195,13 @@ public void touchFile(String name) throws IOException {
     /** Not implemented
      * @throws UnsupportedOperationException */
     @Override
-    public void deleteFile(String name)
-    {
+  public void deleteFile(String name) {
         throw new UnsupportedOperationException();
     }
 
     /** Not implemented
      * @throws UnsupportedOperationException */
-    public void renameFile(String from, String to)
-    {
+  public void renameFile(String from, String to) {
         throw new UnsupportedOperationException();
     }
 
@@ -227,16 +218,14 @@ public long fileLength(String name) throws IOException {
     /** Not implemented
      * @throws UnsupportedOperationException */
     @Override
-    public IndexOutput createOutput(String name)
-    {
+  public IndexOutput createOutput(String name) {
         throw new UnsupportedOperationException();
     }
 
     /** Not implemented
      * @throws UnsupportedOperationException */
     @Override
-    public Lock makeLock(String name)
-    {
+  public Lock makeLock(String name) {
         throw new UnsupportedOperationException();
     }
 
@@ -246,18 +235,15 @@ public Lock makeLock(String name)
      *  can then access package fields of this class.
      */
     static final class CSIndexInput extends BufferedIndexInput {
-
         IndexInput base;
         long fileOffset;
         long length;
 
-        CSIndexInput(final IndexInput base, final long fileOffset, final long length)
-        {
+    CSIndexInput(final IndexInput base, final long fileOffset, final long length) {
             this(base, fileOffset, length, BufferedIndexInput.BUFFER_SIZE);
         }
 
-        CSIndexInput(final IndexInput base, final long fileOffset, final long length, int readBufferSize)
-        {
+    CSIndexInput(final IndexInput base, final long fileOffset, final long length, int readBufferSize) {
             super(readBufferSize);
             this.base = (IndexInput)base.clone();
             this.fileOffset = fileOffset;
@@ -280,9 +266,7 @@ public Object clone() {
          * @param len the number of bytes to read
          */
         @Override
-        protected void readInternal(byte[] b, int offset, int len)
-        throws IOException
-        {
+    protected void readInternal(byte[] b, int offset, int len) throws IOException {
           long start = getFilePointer();
           if(start + len > length)
             throw new IOException("read past EOF");
@@ -324,7 +308,5 @@ public void copyBytes(IndexOutput out, long numBytes) throws IOException {
             base.copyBytes(out, numBytes);
           }
         }
-
     }
-    
 }
