diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java
index 84c158ad..d73b0254 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java
@@ -37,7 +37,7 @@
  * {@link org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction}
  */
 public class BoostQParserPlugin extends QParserPlugin {
-  public static String NAME = "boost";
+  public static final String NAME = "boost";
   public static String BOOSTFUNC = "b";
 
   @Override
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
index 36a20f38..daaa1491 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
@@ -111,7 +111,7 @@
  *
  */
 public class DisMaxQParserPlugin extends QParserPlugin {
-  public static String NAME = "dismax";
+  public static final String NAME = "dismax";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java
index 308d22d3..4a519939 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java
@@ -32,7 +32,7 @@
  * This is generally equivalent to the Lucene query parser expression <code>myfield:"Foo Bar"</code>
  */
 public class FieldQParserPlugin extends QParserPlugin {
-  public static String NAME = "field";
+  public static final String NAME = "field";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java
index 8027c35b..00eba696 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java
@@ -26,7 +26,7 @@
  * <br>Example: <code>{!func}log(foo)</code>
  */
 public class FunctionQParserPlugin extends QParserPlugin {
-  public static String NAME = "func";
+  public static final String NAME = "func";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
index fce65ce8..0c3f8c86 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
@@ -36,7 +36,7 @@
  * <br>Filter query example: <code>fq={!frange l=0 u=2.2}sum(user_ranking,editor_ranking)</code> 
  */
 public class FunctionRangeQParserPlugin extends QParserPlugin {
-  public static String NAME = "frange";
+  public static final String NAME = "frange";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
index 86756cc3..d4970ca3 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
@@ -45,7 +45,7 @@
 
 
 public class JoinQParserPlugin extends QParserPlugin {
-  public static String NAME = "join";
+  public static final String NAME = "join";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
index 8ea19187..3e608e7a 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
@@ -34,7 +34,7 @@
  * <br>Example: <code>{!lucene q.op=AND df=text sort='price asc'}myfield:foo +bar -baz</code>
  */
 public class LuceneQParserPlugin extends QParserPlugin {
-  public static String NAME = "lucene";
+  public static final String NAME = "lucene";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/MaxScoreQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/MaxScoreQParserPlugin.java
index 3c028d60..0ff5bb6e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/MaxScoreQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/MaxScoreQParserPlugin.java
@@ -26,7 +26,7 @@
  * <br>Example: <code>q=foo {!maxscore v=$myq}&myq=A OR B OR C</code>
  */
 public class MaxScoreQParserPlugin extends LuceneQParserPlugin {
-  public static String NAME = "maxscore";
+  public static final String NAME = "maxscore";
 
   @Override
   public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java
index 600e77a5..23910d84 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java
@@ -32,7 +32,7 @@
  *     created from the lucene syntax string that matches documents with inStock=true.
  */
 public class NestedQParserPlugin extends QParserPlugin {
-  public static String NAME = "query";
+  public static final String NAME = "query";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
index c1d6b319..006e36ca 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
@@ -26,7 +26,7 @@
  * <br>Example: <code>{!lucenePlusSort}myfield:foo +bar -baz;price asc</code>
  */
 public class OldLuceneQParserPlugin extends QParserPlugin {
-  public static String NAME = "lucenePlusSort";
+  public static final String NAME = "lucenePlusSort";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java
index 3cfc73eb..e66d4dc4 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java
@@ -32,7 +32,7 @@
  * to the Lucene query parser expression <code>myfield:foo*</code>
  */
 public class PrefixQParserPlugin extends QParserPlugin {
-  public static String NAME = "prefix";
+  public static final String NAME = "prefix";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/QParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/QParserPlugin.java
index a0f572d2..3cb6f4db 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/QParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/QParserPlugin.java
@@ -28,9 +28,15 @@
 
 public abstract class QParserPlugin implements NamedListInitializedPlugin, SolrInfoMBean {
   /** internal use - name of the default parser */
-  public static String DEFAULT_QTYPE = LuceneQParserPlugin.NAME;
+  public static final String DEFAULT_QTYPE = LuceneQParserPlugin.NAME;
 
-  /** internal use - name to class mappings of builtin parsers */
+  /**
+   * Internal use - name to class mappings of builtin parsers.
+   * Each query parser plugin extending {@link QParserPlugin} has own instance of standardPlugins.
+   * This leads to cyclic dependencies of static fields and to case when NAME field is not yet initialized.
+   * This result to NPE during initialization.
+   * For every plugin, listed here, NAME field has to be final and static.
+   */
   public static final Object[] standardPlugins = {
     LuceneQParserPlugin.NAME, LuceneQParserPlugin.class,
     OldLuceneQParserPlugin.NAME, OldLuceneQParserPlugin.class,
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java
index d275a15a..77fe5239 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java
@@ -34,7 +34,7 @@
  * <br>Example: <code>{!raw f=myfield}Foo Bar</code> creates <code>TermQuery(Term("myfield","Foo Bar"))</code>
  */
 public class RawQParserPlugin extends QParserPlugin {
-  public static String NAME = "raw";
+  public static final String NAME = "raw";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java
index db8b8228..54e5ee4c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java
@@ -69,7 +69,7 @@
  */
 public class SimpleQParserPlugin extends QParserPlugin {
   /** The name that can be used to specify this plugin should be used to parse the query. */
-  public static String NAME = "simple";
+  public static final String NAME = "simple";
 
   /** Map of string operators to their int counterparts in SimpleQueryParser. */
   private static final Map<String, Integer> OPERATORS = new HashMap<String, Integer>();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialBoxQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialBoxQParserPlugin.java
index 5638bbab..00afb1a1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialBoxQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialBoxQParserPlugin.java
@@ -22,7 +22,7 @@
 import org.apache.solr.request.SolrQueryRequest;
 
 public class SpatialBoxQParserPlugin extends SpatialFilterQParserPlugin {
-  public static String NAME = "bbox";
+  public static final String NAME = "bbox";
 
   @Override
   public QParser createParser(String qstr, SolrParams localParams,
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java
index 7a902aca..a83a0738 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java
@@ -49,7 +49,7 @@
  * to the field, making it useful as a component of the main query or a boosting query.
  */
 public class SpatialFilterQParserPlugin extends QParserPlugin {
-  public static String NAME = "geofilt";
+  public static final String NAME = "geofilt";
 
   @Override
   public QParser createParser(String qstr, SolrParams localParams,
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java
index 44f0fd4d..ab091f6b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java
@@ -42,7 +42,7 @@
  */
 
 public class SurroundQParserPlugin extends QParserPlugin {
-  public static String NAME = "surround";
+  public static final String NAME = "surround";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SwitchQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SwitchQParserPlugin.java
index 7ef66801..8f394484 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SwitchQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SwitchQParserPlugin.java
@@ -135,7 +135,7 @@
  * &lt;/requestHandler&gt;</pre>
  */
 public class SwitchQParserPlugin extends QParserPlugin {
-  public static String NAME = "switch";
+  public static final String NAME = "switch";
 
   /** 
    * Used as both a local params key to find the "default" if no
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java
index 67016c5f..5b81943e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java
@@ -41,7 +41,7 @@
  * <br>Example: <code>{!term f=weight}1.5</code>
  */
 public class TermQParserPlugin extends QParserPlugin {
-  public static String NAME = "term";
+  public static final String NAME = "term";
 
   @Override
   public void init(NamedList args) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinChildQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinChildQParserPlugin.java
index ed7600fa..3edcaabe 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinChildQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinChildQParserPlugin.java
@@ -26,7 +26,7 @@
  *
  **/
 public class BlockJoinChildQParserPlugin extends BlockJoinParentQParserPlugin {
-  public static String NAME = "child";
+  public static final String NAME = "child";
 
   @Override
   protected QParser createBJQParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParserPlugin.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParserPlugin.java
index 4c16a961..14813bcf 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParserPlugin.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParserPlugin.java
@@ -28,7 +28,7 @@
  *
  **/
 public class BlockJoinParentQParserPlugin extends QParserPlugin {
-  public static String NAME = "parent";
+  public static final String NAME = "parent";
 
   @Override
   public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestInitQParser.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestInitQParser.java
index 9779c62a..b5e8af9b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestInitQParser.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestInitQParser.java
@@ -1,3 +1,66 @@
   Merged /lucene/dev/trunk/solr/CHANGES.txt:r1564588
   Merged /lucene/dev/trunk/solr/scripts:r1564588
   Merged /lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/TestConfig.java:r1564588
+package org.apache.solr.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Checking QParser plugin initialization, failing with NPE during Solr startup.
+ * Ensures that query is working by registered in solrconfig.xml "fail" query parser.
+ */
+public class TestInitQParser extends SolrTestCaseJ4 {
+  private static void createIndex() {
+    String v;
+    v = "how now brown cow";
+    assertU(adoc("id", "1", "text", v, "text_np", v));
+    v = "now cow";
+    assertU(adoc("id", "2", "text", v, "text_np", v));
+    assertU(adoc("id", "3", "foo_s", "a ' \" \\ {! ) } ( { z"));  // A value filled with special chars
+
+    assertU(adoc("id", "10", "qqq_s", "X"));
+    assertU(adoc("id", "11", "www_s", "X"));
+    assertU(adoc("id", "12", "eee_s", "X"));
+    assertU(adoc("id", "13", "eee_s", "'balance'"));
+
+    assertU(commit());
+
+  }
+
+  @Override
+  @Before
+  public void setUp() throws Exception {
+    super.setUp();
+    System.setProperty("enable.update.log", "false"); // schema12 doesn't support _version_
+    initCore("solrconfig-query-parser-init.xml", "schema12.xml");
+    createIndex();
+  }
+
+  @Test
+  public void testQueryParserInit() throws Exception {
+    // should query using registered fail (defType=fail) QParser and match only one doc
+    assertQ(req("q", "id:1", "indent", "true", "defType", "fail")
+        , "//*[@numFound='1']"
+    );
+  }
+
+}
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java
index 3f24d583..4184ece7 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java
@@ -1 +1,109 @@
   + native
+package org.apache.solr.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.util.LuceneTestCase;
+import org.junit.Test;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Check standard query parsers for class loading problems during initialization (NAME field is final and static).
+ * Because every query plugin extend {@link org.apache.solr.search.QParserPlugin} and contains own instance of {@link org.apache.solr.search.QParserPlugin#standardPlugins},
+ * There are a cyclic dependencies of static fields between plugins and order of initialization can be wrong if NAME field is not final.
+ * This leads to NPEs during Solr startup.
+ * @see <a href="https://issues.apache.org/jira/browse/SOLR-5526">SOLR-5526</a>
+ * @see org.apache.solr.search.QParserPlugin#standardPlugins
+ *
+ */
+public class TestStandardQParsers extends LuceneTestCase {
+  /**
+   * Field name of constant mandatory for query parser plugin.
+   */
+  public static final String FIELD_NAME = "NAME";
+
+  /**
+   * Test standard query parsers registered in {@link org.apache.solr.search.QParserPlugin#standardPlugins}
+   * have NAME field which is final, static, and matches the registered name.
+   */
+  @Test
+  public void testRegisteredName() throws Exception {
+    Map<String, Class<QParserPlugin>> standardPlugins = getStandardQParsers();
+
+    List<String> notStatic = new ArrayList<String>(standardPlugins.size());
+    List<String> notFinal = new ArrayList<String>(standardPlugins.size());
+    List<String> mismatch = new ArrayList<String>(standardPlugins.size());
+ 
+    for (Map.Entry<String,Class<QParserPlugin>> pair : standardPlugins.entrySet()) {
+      String regName = pair.getKey();
+      Class<QParserPlugin> clazz = pair.getValue();
+
+      Field nameField = clazz.getField(FIELD_NAME);
+      int modifiers = nameField.getModifiers();
+      if (!Modifier.isFinal(modifiers)) {
+        notFinal.add(clazz.getName());
+      }
+      if (!Modifier.isStatic(modifiers)) {
+        notStatic.add(clazz.getName());
+      } else if (! regName.equals(nameField.get(null))) {
+        mismatch.add(regName +" != "+ nameField.get(null) +"("+ clazz.getName() +")");
+      }
+    }
+
+    assertTrue("All standard QParsers must have final NAME, broken: " + notFinal, 
+               notFinal.isEmpty());
+    assertTrue("All standard QParsers must have static NAME, broken: " + notStatic, 
+               notStatic.isEmpty());
+    assertTrue("All standard QParsers must be registered using NAME, broken: " + mismatch, 
+               mismatch.isEmpty());
+
+    assertTrue("DEFAULT_QTYPE is not in the standard set of registered names: " + 
+               QParserPlugin.DEFAULT_QTYPE,
+               standardPlugins.keySet().contains(QParserPlugin.DEFAULT_QTYPE));
+
+  }
+
+  /**
+   * Get standard query parsers registered by default.
+   *
+   * @see org.apache.solr.search.QParserPlugin#standardPlugins
+   * @return Map of classes extending QParserPlugin keyed by the registered name
+   */
+  private Map<String,Class<QParserPlugin>> getStandardQParsers() {
+    Object[] standardPluginsValue = QParserPlugin.standardPlugins;
+
+    Map<String, Class<QParserPlugin>> standardPlugins 
+      = new HashMap<String, Class<QParserPlugin>>(standardPluginsValue.length / 2);
+
+    for (int i = 0; i < standardPluginsValue.length; i += 2) {
+      @SuppressWarnings("unchecked")
+      String registeredName = (String) standardPluginsValue[i];
+      @SuppressWarnings("unchecked")
+      Class<QParserPlugin> clazz = (Class<QParserPlugin>) standardPluginsValue[i + 1];
+      standardPlugins.put(registeredName, clazz);
+    }
+    return standardPlugins;
+  }
+
+}
