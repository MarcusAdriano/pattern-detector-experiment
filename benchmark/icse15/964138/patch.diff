diff --git a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverTest.java b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverTest.java
index c83abc5d..eadc1693 100644
--- a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverTest.java
+++ b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverTest.java
@@ -69,6 +69,7 @@
   public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
   public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
   public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
+  public static final String BUNDLE_IN_FRAMEWORK = "org.apache.aries.util";
   
   
   /* Use @Before not @BeforeClass so as to ensure that these resources
@@ -80,7 +81,7 @@ public static void createApplications() throws Exception
     ZipFixture bundle = ArchiveFixture.newJar().manifest()
                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
-                            .attribute(Constants.IMPORT_PACKAGE, "p.q.r, x.y.z, javax.naming, org.apache.aries.util")
+                            .attribute(Constants.IMPORT_PACKAGE, "p.q.r, x.y.z, javax.naming, " + BUNDLE_IN_FRAMEWORK)
                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
 
     
@@ -188,7 +189,7 @@ public void testBlogApp() throws Exception
     
     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
     
-    assertEquals(provision.toString(), 2, provision.size());
+    assertEquals(provision.toString(), 3, provision.size());
     
     List<String> bundleSymbolicNames = new ArrayList<String>();
     
@@ -198,6 +199,7 @@ public void testBlogApp() throws Exception
     
     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
+    assertTrue("Bundle " + BUNDLE_IN_FRAMEWORK + " not found.", bundleSymbolicNames.contains(BUNDLE_IN_FRAMEWORK));
     
     AriesApplicationContext ctx = manager.install(app);
     ctx.start();
diff --git a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
index f8106844..d48f372a 100644
--- a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
+++ b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
@@ -43,6 +43,7 @@
 import org.apache.aries.application.resolver.obr.generator.RepositoryDescriptorGenerator;
 import org.apache.aries.application.resolver.obr.impl.ApplicationResourceImpl;
 import org.apache.aries.application.resolver.obr.impl.OBRBundleInfo;
+import org.apache.aries.application.resolver.obr.impl.ResourceWrapper;
 import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
 import org.apache.felix.bundlerepository.DataModelHelper;
 import org.apache.felix.bundlerepository.Reason;
@@ -113,7 +114,7 @@ public boolean getReturnOptionalResources()
     resolveRepos.add(repositoryAdmin.getSystemRepository());
     
     // add local repository
-    resolveRepos.add(repositoryAdmin.getLocalRepository());
+    resolveRepos.add(getLocalRepository(repositoryAdmin));
     
     // add application repository
     resolveRepos.add(appRepo);
@@ -145,6 +146,20 @@ public boolean getReturnOptionalResources()
     }
   }
 
+  private Repository getLocalRepository(RepositoryAdmin admin) 
+  {
+      Repository localRepository = repositoryAdmin.getLocalRepository();
+      
+      Resource[] resources = localRepository.getResources();
+
+      Resource[] newResources = new Resource[resources.length];
+      for (int i = 0; i < resources.length; i++) {
+          newResources[i] = new ResourceWrapper(resources[i]); 
+      }
+      
+      return repositoryAdmin.getHelper().repository(newResources);
+  }
+  
   private Resource createApplicationResource(DataModelHelper helper, String appName, Version appVersion,
       List<Content> appContent)
   {
diff --git a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRBundleInfo.java b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRBundleInfo.java
index 284b050f..47e38b06 100644
--- a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRBundleInfo.java
+++ b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRBundleInfo.java
@@ -17,7 +17,6 @@
  * under the License.
  */
 
-
 package org.apache.aries.application.resolver.obr.impl;
 
 import org.apache.aries.application.Content;
@@ -119,29 +118,29 @@ public String getLocation()
     return requireBundle;
   }
   
-  /**
-   * Equality is just based on the location. If you install a bundle from the same location string
-   * you get the same Bundle, even if the underlying bundle had a different symbolic name/version.
-   * This seems reasonable and quick.
-   */
-  public boolean equals(Object other)
+  public String toString()
   {
-    if (other == null) return false;
-    if (other == this) return true;
-    if (other instanceof OBRBundleInfo) {
-      return location.equals(((OBRBundleInfo)other).location);
-    }
-    
-    return false;
+    return symbolicName + "_" + version;
   }
   
   public int hashCode()
   {
-    return location.hashCode();
+    final int prime = 31;
+    int result = 1;
+    result = prime * result + symbolicName.hashCode();
+    result = prime * result + version.hashCode();
+    return result;
   }
   
-  public String toString()
-  {
-    return symbolicName + "_" + version;
+  public boolean equals(Object obj) {
+    if (this == obj) return true;
+    if (obj == null) return false;
+    if (getClass() != obj.getClass()) {
+        return false;
+    }
+    OBRBundleInfo other = (OBRBundleInfo) obj;
+    return (symbolicName.equals(other.symbolicName)
+            && version.equals(other.version));
   }
+  
 }
diff --git a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ResourceWrapper.java b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ResourceWrapper.java
index e69de29b..dfa0090d 100644
--- a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ResourceWrapper.java
+++ b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ResourceWrapper.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.aries.application.resolver.obr.impl;
+
+import java.util.Map;
+
+import org.apache.felix.bundlerepository.Capability;
+import org.apache.felix.bundlerepository.Requirement;
+import org.apache.felix.bundlerepository.Resource;
+import org.osgi.framework.Version;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public class ResourceWrapper implements Resource {
+
+    private final Resource resource;
+    
+    public ResourceWrapper(Resource resource) {
+        this.resource = resource;
+    }
+    
+    public Capability[] getCapabilities() {
+        return resource.getCapabilities();
+    }
+
+    public String[] getCategories() {
+        return resource.getCategories();
+    }
+
+    public String getId() {
+        return resource.getId();
+    }
+
+    public String getPresentationName() {
+        return resource.getPresentationName();
+    }
+
+    public Map getProperties() {
+        return resource.getProperties();
+    }
+
+    public Requirement[] getRequirements() {
+        return resource.getRequirements();
+    }
+
+    public Long getSize() {
+        return resource.getSize();
+    }
+
+    public String getSymbolicName() {
+        return resource.getSymbolicName();
+    }
+
+    public String getURI() {
+        return resource.getURI();
+    }
+
+    public Version getVersion() {
+        return resource.getVersion();
+    }
+
+    public boolean isLocal() {
+        return false;
+    }
+
+}
diff --git a/incubator/aries/trunk/application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java b/incubator/aries/trunk/application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
index 93c0ca41..91393548 100644
--- a/incubator/aries/trunk/application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
+++ b/incubator/aries/trunk/application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
@@ -42,6 +42,7 @@
 import org.osgi.framework.ServiceException;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.Version;
+import org.osgi.service.packageadmin.PackageAdmin;
 
 public class ApplicationContextImpl implements AriesApplicationContext {
   
@@ -58,16 +59,15 @@ public ApplicationContextImpl (BundleContext b, AriesApplication app) throws Bun
     DeploymentMetadata meta = _application.getDeploymentMetadata();
     
     AriesApplicationResolver resolver = null;
+    PackageAdmin packageAdmin = null;
     
-    ServiceReference ref = b.getServiceReference(AriesApplicationResolver.class.getName());
-
-    if (ref != null) resolver = (AriesApplicationResolver) b.getService(ref);
-    
-    if (resolver == null) {
-      throw new ManagementException(new ServiceException(AriesApplicationResolver.class.getName(), ServiceException.UNREGISTERED));
-    }
+    ServiceReference resolverRef = b.getServiceReference(AriesApplicationResolver.class.getName());
+    ServiceReference packageAdminRef = b.getServiceReference(PackageAdmin.class.getName());
     
     try {
+      resolver = getService(resolverRef, AriesApplicationResolver.class);
+      packageAdmin = getService(packageAdminRef, PackageAdmin.class);
+    
       List<DeploymentContent> bundlesToInstall = new ArrayList<DeploymentContent>(meta.getApplicationDeploymentContents());
       bundlesToInstall.addAll(meta.getApplicationProvisionBundles());
       
@@ -75,19 +75,16 @@ public ApplicationContextImpl (BundleContext b, AriesApplication app) throws Bun
         String bundleSymbolicName = content.getContentName();
         Version bundleVersion = content.getExactVersion();
         
-        BundleInfo bundleInfo = null;
-        
-        for (BundleInfo info : _application.getBundleInfo()) {
-          if (info.getSymbolicName().equals(bundleSymbolicName) &&
-              info.getVersion().equals(bundleVersion)) {
-            bundleInfo = info;
-            break;
-          }
+        // Step 1: See if bundle is already installed in the framework
+        if (findBundleInFramework(packageAdmin, bundleSymbolicName, bundleVersion) != null) {
+            continue;
         }
         
+        // Step 2: See if the bundle is included in the application
+        BundleInfo bundleInfo = findBundleInfoInApplication(bundleSymbolicName, bundleVersion);
         if (bundleInfo == null) {
-          // call out to the bundle repository.
-          bundleInfo = resolver.getBundleInfo(bundleSymbolicName, bundleVersion);
+            // Step 3: Lookup bundle location using the resolver
+            bundleInfo = findBundleInfoUsingResolver(resolver, bundleSymbolicName, bundleVersion);
         }
         
         if (bundleInfo == null) {
@@ -107,12 +104,54 @@ public ApplicationContextImpl (BundleContext b, AriesApplication app) throws Bun
       
       throw be;
     } finally {
-      if (resolver != null) b.ungetService(ref);
+      if (resolver != null) {
+          b.ungetService(resolverRef);
+      }
+      if (packageAdmin != null) {
+          b.ungetService(packageAdminRef);
+      }
     }
     
     _state = ApplicationState.INSTALLED;
   }
 
+  private <T> T getService(ServiceReference ref, Class<T> type) throws ManagementException {
+      Object service = null;
+      if (ref != null) {
+          service = _bundleContext.getService(ref);
+      }
+      
+      if (service == null) {
+          throw new ManagementException(new ServiceException(type.getName(), ServiceException.UNREGISTERED));
+      }
+      
+      return type.cast(service);
+  }
+  
+  private Bundle findBundleInFramework(PackageAdmin admin, String symbolicName, Version version) {
+      String exactVersion = "[" + version + "," + version + "]";
+      Bundle[] bundles = admin.getBundles(symbolicName, exactVersion);
+      if (bundles != null && bundles.length == 1) {
+          return bundles[0];
+      } else {
+          return null;
+      }
+  }
+  
+  private BundleInfo findBundleInfoInApplication(String symbolicName, Version version) {
+      for (BundleInfo info : _application.getBundleInfo()) {
+          if (info.getSymbolicName().equals(symbolicName)
+              && info.getVersion().equals(version)) {
+              return info;
+          }
+      }
+      return null;
+  }
+  
+  private BundleInfo findBundleInfoUsingResolver(AriesApplicationResolver resolver, String symbolicName, Version version) {
+      return resolver.getBundleInfo(symbolicName, version);
+  }
+  
   public AriesApplication getApplication() {
     return _application;
   }
