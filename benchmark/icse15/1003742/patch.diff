diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLog.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
index 4f7843dc..7bb7f583 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
@@ -375,12 +375,6 @@ private void discardCompletedSegmentsInternal(CommitLogSegment.CommitLogContext
         if (logger.isDebugEnabled())
             logger.debug("discard completed log segments for " + context + ", column family " + id + ". CFIDs are " + Table.TableMetadata.getColumnFamilyIDString());
 
-        /*
-         * log replay assumes that we only have to look at entries past the last
-         * flush position, so verify that this flush happens after the last. See CASSANDRA-936
-        */
-        assert context.position >= context.getSegment().getHeader().getPosition(id)
-               : "discard at " + context + " is not after last flush at " + context.getSegment().getHeader().getPosition(id);
         /*
          * Loop through all the commit log files in the history. Now process
          * all files that are older than the one in the context. For each of
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java
index a80a55af..058e9b63 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java
@@ -20,7 +20,6 @@
 
 import java.io.*;
 import java.util.BitSet;
-import java.util.Arrays;
 
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.io.ICompactSerializer;
@@ -39,7 +38,7 @@ static CommitLogHeaderSerializer serializer()
     static int getLowestPosition(CommitLogHeader clHeader)
     {
         int minPosition = Integer.MAX_VALUE;
-        for ( int position : clHeader.lastFlushedAt)
+        for (int position : clHeader.cfDirtiedAt)
         {
             if ( position < minPosition && position > 0)
             {
@@ -53,12 +52,12 @@ static int getLowestPosition(CommitLogHeader clHeader)
     }
 
     private BitSet dirty; // columnfamilies with un-flushed data in this CommitLog
-    private int[] lastFlushedAt; // position at which each CF was last flushed
+    private int[] cfDirtiedAt; // position at which each CF was last flushed
     
     CommitLogHeader(int size)
     {
         dirty = new BitSet(size);
-        lastFlushedAt = new int[size];
+        cfDirtiedAt = new int[size];
     }
     
     /*
@@ -66,10 +65,10 @@ static int getLowestPosition(CommitLogHeader clHeader)
      * also builds an index of position to column family
      * Id.
     */
-    CommitLogHeader(BitSet dirty, int[] lastFlushedAt)
+    CommitLogHeader(BitSet dirty, int[] cfDirtiedAt)
     {
         this.dirty = dirty;
-        this.lastFlushedAt = lastFlushedAt;
+        this.cfDirtiedAt = cfDirtiedAt;
     }
         
     boolean isDirty(int index)
@@ -79,19 +78,19 @@ boolean isDirty(int index)
     
     int getPosition(int index)
     {
-        return lastFlushedAt[index];
+        return cfDirtiedAt[index];
     }
     
     void turnOn(int index, long position)
     {
         dirty.set(index);
-        lastFlushedAt[index] = (int) position;
+        cfDirtiedAt[index] = (int) position;
     }
 
     void turnOff(int index)
     {
         dirty.set(index, false);
-        lastFlushedAt[index] = 0;
+        cfDirtiedAt[index] = 0;
     }
 
     boolean isSafeToDelete() throws IOException
@@ -119,9 +118,9 @@ public String toString()
             }
         }
         sb.append("}, flushed={");
-        for (int i = 0; i < lastFlushedAt.length; i++)
+        for (int i = 0; i < cfDirtiedAt.length; i++)
         {
-            sb.append(Table.TableMetadata.getColumnFamilyName(i)).append(": ").append(lastFlushedAt[i]).append(", ");
+            sb.append(Table.TableMetadata.getColumnFamilyName(i)).append(": ").append(cfDirtiedAt[i]).append(", ");
         }
         sb.append("})");
         return sb.toString();
@@ -151,7 +150,7 @@ static CommitLogHeader readCommitLogHeader(BufferedRandomAccessFile logReader) t
 
     public int getColumnFamilyCount()
     {
-        return lastFlushedAt.length;
+        return cfDirtiedAt.length;
     }
 
     static class CommitLogHeaderSerializer implements ICompactSerializer<CommitLogHeader>
@@ -159,8 +158,8 @@ public int getColumnFamilyCount()
         public void serialize(CommitLogHeader clHeader, DataOutputStream dos) throws IOException
         {
             BitSetSerializer.serialize(clHeader.dirty, dos);
-            dos.writeInt(clHeader.lastFlushedAt.length);
-            for (int position : clHeader.lastFlushedAt)
+            dos.writeInt(clHeader.cfDirtiedAt.length);
+            for (int position : clHeader.cfDirtiedAt)
             {
                 dos.writeInt(position);
             }
