diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SSLTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SSLTest.java
index 046140cf..24e3f523 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SSLTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SSLTest.java
@@ -54,15 +54,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class SSLTest extends BaseJDBCTestCase
 {
-    // helper state for intercepting server error messages
-    private InputStream[]  _inputStreamHolder;
-
     // Constructors
 
     public SSLTest(String testName)
     {
         super(testName);
-        _inputStreamHolder = new InputStream[1];
     }
     
     // JUnit machinery
@@ -88,16 +84,6 @@ public static Test suite()
         return suite;
     }
     
-    /**
-     * Release resources.
-     */
-
-    protected void tearDown() throws Exception
-    {
-        _inputStreamHolder = null;
-    }
-    
-
     // Test decoration
     
     /**
@@ -120,8 +106,7 @@ private static Test decorateTest(String testName)
             new NetworkServerTestSetup(sslTest,
                                        startupProperties,
                                        startupArgs,
-                                       true, 
-                                       sslTest._inputStreamHolder);
+                                       true);
         
         Test testSetup =
             SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index cfb2c0b4..ab196140 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.NetworkServerTestSetup;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.ServerSetup;
+import org.apache.derbyTesting.junit.SpawnedProcess;
 import org.apache.derbyTesting.junit.SupportFilesSetup;
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
@@ -121,9 +122,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // expected outcomes
     private Outcome _outcome;
 
-    // helper state for intercepting server error messages
-    private InputStream[]  _inputStreamHolder;
-
     
     ///////////////////////////////////////////////////////////////////////////////////
     //
@@ -149,8 +147,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
          _wildCardHost = wildCardHost;
 
          _outcome = outcome;
-
-         _inputStreamHolder = new InputStream[ 1 ];
     }
 
     ///////////////////////////////////////////////////////////////////////////////////
@@ -198,14 +194,6 @@ public static Test suite()
         return suite;
     }
     
-    /**
-     * Release resources.
-     */
-    protected void tearDown() throws Exception
-    {
-        _inputStreamHolder = null;
-    }
-
 
     ///////////////////////////////////////////////////////////////////////////////////
     //
@@ -248,8 +236,7 @@ protected void tearDown() throws Exception
              secureServerTest,
              startupProperties,
              startupArgs,
-             secureServerTest._outcome.serverShouldComeUp(),
-             secureServerTest._inputStreamHolder
+             secureServerTest._outcome.serverShouldComeUp()
              );
 
         secureServerTest.nsTestSetup = networkServerTestSetup;
@@ -475,25 +462,19 @@ public Object run()
              }
             );
 
-        InputStream is = serverProcess.getInputStream();
+        SpawnedProcess spawned = new SpawnedProcess(serverProcess,
+                commandSpecifics);
         
-        return getProcessOutput( is, 10000 );
-    }
+        // Ensure it completes without failures.
+        assertEquals(0, spawned.complete(false));
 
-    private String  getServerOutput()
-        throws Exception
-    {
-        return getProcessOutput( _inputStreamHolder[ 0 ], 1000 );
+        return spawned.getFullServerOutput();
     }
 
-    private String  getProcessOutput( InputStream is, int bufferLength )
+    private String  getServerOutput()
         throws Exception
     {
-        byte[]          inputBuffer = new byte[ bufferLength ];
-
-        int             bytesRead = is.read( inputBuffer );
-
-        return new String( inputBuffer, 0, bytesRead );
+        return nsTestSetup.getServerProcess().getNextServerOutput();
     }
 
     private static  String  serverBootedOK()
@@ -506,7 +487,7 @@ private boolean serverCameUp()
     {
         return NetworkServerTestSetup.pingForServerUp(
             NetworkServerTestSetup.getNetworkServerControl(),
-            nsTestSetup.getServerProcess(), true);
+            nsTestSetup.getServerProcess().getProcess(), true);
     }
 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
index f113389f..04073d73 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
@@ -60,10 +60,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class ServerPropertiesTest  extends BaseJDBCTestCase {
     
-    // helper state for intercepting server error messages;
-    // needed by fixture testToggleTrace
-    private InputStream[]  _inputStreamHolder;
-    
     //create own policy file
     private static String POLICY_FILE_NAME = 
         "functionTests/tests/derbynet/ServerPropertiesTest.policy";
@@ -72,7 +68,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     
     public ServerPropertiesTest(String name) {
         super(name);
-        _inputStreamHolder = new InputStream[1];
     }
     
     public static Test suite()
@@ -133,7 +128,6 @@ public void tearDown() throws Exception {
         super.tearDown();
         POLICY_FILE_NAME = null;
         TARGET_POLICY_FILE_NAME = null;
-        _inputStreamHolder = null;
         if (portsSoFar != null)
         {
             for (int i = 0 ; i < portsSoFar.length ; i++)
@@ -171,7 +165,7 @@ private static Test decorateTest(String testName,
         {
             // start networkServer as a process
             networkServerTestSetup = new NetworkServerTestSetup(
-                spt, startupProps, startupArgs, true, spt._inputStreamHolder);
+                spt, startupProps, startupArgs, true);
         }
         else
         {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/MBeanTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/MBeanTest.java
index a040e08b..22fb77fe 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/MBeanTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/MBeanTest.java
@@ -99,8 +99,7 @@ protected static Test suite(Class testClass, String suiteName) {
                         suite, // run all tests in this class in the same setup
                         getCommandLineProperties(), // need to set up JMX in JVM
                         new String[0], // no server arguments needed
-                        true,   // wait for the server to start properly
-                        new InputStream[1] // no need to check server output
+                        true   // wait for the server to start properly
                 );
 
         /* Since the server will be started in a new process we need "execute" 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
index d328dc87..2404ad65 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
@@ -24,10 +24,13 @@
 import java.net.InetAddress;
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintWriter;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.util.ArrayList;
 import junit.framework.Test;
 import org.apache.derby.drda.NetworkServerControl;
@@ -48,10 +51,10 @@
      *  systems with fast port turnaround as the actual code loops for 
      *  SLEEP_TIME intervals, so should never see WAIT_TIME.
      */
-    private static final long WAIT_TIME = 300000;
+    private static final long WAIT_TIME = 10000;
     
     /** Sleep for 500 ms before pinging the network server (again) */
-    private static final int SLEEP_TIME = 500;
+    private static final int SLEEP_TIME = 100;
 
     public static final String HOST_OPTION = "-h";
 
@@ -63,7 +66,6 @@
     private final boolean startServerAtSetup;
     private final boolean useSeparateProcess;
     private final boolean serverShouldComeUp;
-    private final InputStream[] inputStreamHolder;
     
     /**
      * System properties to set on the command line (using -D)
@@ -75,8 +77,11 @@
      * Startup arguments for the command line
      * only when starting the server in a separate virtual machine.
      */
-    private final String[]    startupArgs;
-    private Process serverProcess;
+    private String[]    startupArgs;
+    /**
+     * The server as a process if started in a different vm.
+     */
+    private SpawnedProcess spawnedServer;
     
     /**
      * Decorator this test with the NetworkServerTestSetup.
@@ -98,7 +103,6 @@ public NetworkServerTestSetup(Test test, boolean asCommand) {
         this.startupArgs = null;
         this.useSeparateProcess = false;
         this.serverShouldComeUp = true;
-        this.inputStreamHolder = null;
         this.startServerAtSetup = true;
 }
 
@@ -123,7 +127,6 @@ public NetworkServerTestSetup(Test test, boolean asCommand, boolean startServerA
         this.startupArgs = null;
         this.useSeparateProcess = false;
         this.serverShouldComeUp = true;
-        this.inputStreamHolder = null;
 
         this.startServerAtSetup = startServerAtSetup;
     }
@@ -132,14 +135,24 @@ public NetworkServerTestSetup(Test test, boolean asCommand, boolean startServerA
      * Decorator for starting up with specific command args
      * and system properties. Server is always started up
      * in a separate process with a separate virtual machine.
+     * <P>
+     * If the classes are being loaded from the classes
+     * folder instead of jar files then this will start
+     * the server up with no security manager using -noSecurityManager,
+     * unless the systemProperties or startupArgs set up any security
+     * manager.
+     * This is because the default policy
+     * installed by the network server only works from jar files.
+     * If this not desired then the test should skip the
+     * fixtures when loading from classes or
+     * install its own security manager.
      */
     public NetworkServerTestSetup
         (
          Test test,
          String[] systemProperties,
          String[] startupArgs,
-         boolean serverShouldComeUp,
-         InputStream[] inputStreamHolder
+         boolean serverShouldComeUp
         )
     {
         super(test);
@@ -150,7 +163,6 @@ public NetworkServerTestSetup(Test test, boolean asCommand, boolean startServerA
         this.startupArgs = startupArgs;
         this.useSeparateProcess = true;
         this.serverShouldComeUp = serverShouldComeUp;
-        this.inputStreamHolder = inputStreamHolder;
         this.startServerAtSetup = true;
     }
 
@@ -165,13 +177,26 @@ protected void setUp() throws Exception {
         if (startServerAtSetup)
         {
             if (useSeparateProcess)
-            { serverProcess = startSeparateProcess(); }
+            { spawnedServer = startSeparateProcess(); }
             else if (asCommand)
             { startWithCommand(); }
             else
             { startWithAPI(); }
 
-            if ( serverShouldComeUp ) { waitForServerStart(networkServerController); }
+            if (serverShouldComeUp)
+            {
+                if (!pingForServerStart(networkServerController)) {
+                    String msg = "Timed out waiting for network server to start";
+                    // Dump the output from the spawned process
+                    // and destroy it.
+                    if (spawnedServer != null) {
+                        spawnedServer.complete(true);
+                        msg = spawnedServer.getFailMessage(msg);
+                        spawnedServer = null;
+                    }
+                    fail(msg);
+                }
+            }
         }
     }
 
@@ -215,7 +240,7 @@ public void run() {
         }, "NetworkServerTestSetup command").start();
     }
 
-    private Process startSeparateProcess() throws Exception
+    private SpawnedProcess startSeparateProcess() throws Exception
     {
         ArrayList       al = new ArrayList();
         String              classpath = BaseTestCase.getSystemProperty( "java.class.path" );
@@ -225,6 +250,36 @@ private Process startSeparateProcess() throws Exception
         al.add( "-classpath" );
         al.add( classpath );
 
+        // Loading from classes need to work-around the limitation
+        // of the default policy file doesn't work with classes.
+        if (!TestConfiguration.loadingFromJars())
+        {
+            boolean setNoSecurityManager = true;
+            for (int i = 0; i < systemProperties.length; i++)
+            {
+                if (systemProperties[i].startsWith("java.security."))
+                {
+                    setNoSecurityManager = false;
+                    break;
+                }
+            }
+            for (int i = 0; i < startupArgs.length; i++)
+            {
+                if (startupArgs[i].equals("-noSecurityManager"))
+                {
+                    setNoSecurityManager = false;
+                    break;
+                }
+            }
+            if (setNoSecurityManager)
+            {
+                String[] newArgs = new String[startupArgs.length + 1];
+                System.arraycopy(startupArgs, 0, newArgs, 0, startupArgs.length);
+                newArgs[newArgs.length - 1] = "-noSecurityManager";
+                startupArgs = newArgs;
+            }
+        }
+
         int         count = systemProperties.length;
         for ( int i = 0; i < count; i++ )
         {
@@ -265,34 +320,33 @@ private Process startSeparateProcess() throws Exception
         System.out.println();
         */
 
-        Process     serverProcess = (Process) AccessController.doPrivileged
+        Process serverProcess;
+        
+        try {
+            serverProcess = (Process)
+                AccessController.doPrivileged
             (
-             new PrivilegedAction()
+                 new PrivilegedExceptionAction()
              {
-                 public Object run()
+                     public Object run() throws IOException
                  {
-                     Process    result = null;
-                     try {
-                        result = Runtime.getRuntime().exec( command );
-                     } catch (Exception ex) {
-                         ex.printStackTrace();
-                     }
-                     
-                     return result;
+                         return Runtime.getRuntime().exec(command);
                  }
              }
             );
+        } catch (PrivilegedActionException e) {
+            throw e.getException();
+        }
 
-        inputStreamHolder[ 0 ] = serverProcess.getInputStream();
-        return serverProcess;
+        return new SpawnedProcess(serverProcess, "SpawnedNetworkServer");
     }
 
     /**
      * Returns the <code>Process</code> object for the server process or <code>null</code> if the
      * network server does not run in a separate process
      */
-    public Process getServerProcess() {
-        return serverProcess;
+    public SpawnedProcess getServerProcess() {
+        return spawnedServer;
     }
 
     /**
@@ -323,9 +377,9 @@ protected void tearDown() throws Exception {
             networkServerController = null;
             serverOutput = null;
 
-            if (serverProcess != null) {
-                serverProcess.waitFor();
-                serverProcess = null;
+            if (spawnedServer != null) {
+                spawnedServer.complete(false);
+                spawnedServer = null;
             }
         }
     }
@@ -437,8 +491,9 @@ public static NetworkServerControl getNetworkServerControlDefault()
     public static void waitForServerStart(NetworkServerControl networkServerController)
        throws InterruptedException 
     {
-        if (!pingForServerStart(networkServerController))
+        if (!pingForServerStart(networkServerController)) {
             fail("Timed out waiting for network server to start");
+    }
     }
     
      /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java
index e69de29b..2e71c1ab 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java
@@ -0,0 +1,198 @@
+/*
+ *
+ * Derby - Class org.apache.derbyTesting.junit.SpawnedProcess
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, 
+ * software distributed under the License is distributed on an 
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific 
+ * language governing permissions and limitations under the License.
+ */
+package org.apache.derbyTesting.junit;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintStream;
+
+/**
+ * Utility code that wraps a spawned process (Java Process object).
+ * Handles the output streams (stderr and stdout) written
+ * by the process by spawning off background threads to read
+ * them into byte arrays. The class provides access to the
+ * output, typically called once the process is complete.
+ */
+public final class SpawnedProcess {
+
+    private final String name;
+
+    private final Process javaProcess;
+
+    private final ByteArrayOutputStream err;
+
+    private final ByteArrayOutputStream out;
+
+    public SpawnedProcess(Process javaProcess, String name) {
+        this.javaProcess = javaProcess;
+        this.name = name;
+
+        err = streamSaver(javaProcess.getErrorStream(), name
+                .concat(":System.err"));
+        out = streamSaver(javaProcess.getInputStream(), name
+                .concat(":System.out"));
+    }
+
+    /**
+     * Get the Java Process object
+     */
+    public Process getProcess() {
+        return javaProcess;
+    }
+    
+    /**
+     * Get the full server output (stdout) as a string using the default
+     * encoding which is assumed is how it was orginally
+     * written.
+     */
+    public String getFullServerOutput() throws Exception {
+        Thread.sleep(500);
+        synchronized (this) {
+            return out.toString(); 
+        }
+    }
+    
+    /**
+     * Position offset for getNextServerOutput().
+     */
+    int stdOutReadOffset;
+    /**
+     * Get the next set of server output (stdout) as a string using the default
+     * encoding which is assumed is how it was orginally
+     * written. Assumes a single caller is executing the calls
+     * to this method.
+     */
+    public String getNextServerOutput() throws Exception
+    {
+        byte[] fullData;
+        synchronized (this) {
+            fullData = out.toByteArray();
+        }
+        
+        String output = new String(fullData, stdOutReadOffset,
+                fullData.length - stdOutReadOffset);
+        stdOutReadOffset = fullData.length;
+        return output;
+    }
+    /**
+     * Get a fail message that is the passed in reason plus
+     * the stderr and stdout for any output written. Allows
+     * easier debugging if the reason the process failed is there!
+     */
+    public String getFailMessage(String reason) throws InterruptedException
+    {
+        Thread.sleep(500);
+        StringBuffer sb = new StringBuffer();
+        sb.append(reason);
+        sb.append(":Spawned ");
+        sb.append(name);
+        sb.append(" exitCode=");
+        try {
+            sb.append(javaProcess.exitValue());
+        } catch (IllegalThreadStateException e) {
+            sb.append("running");
+        }
+        
+        synchronized (this) {
+            if (err.size() != 0)
+            {
+                sb.append("\nSTDERR:\n");
+                sb.append(err.toString());          
+            }
+            if (out.size() != 0)
+            {
+                sb.append("\nSTDOUT:\n");
+                sb.append(out.toString());          
+            }
+       }
+       return sb.toString();
+    }
+
+    /**
+     * Complete the method.
+     * @param destroy True to destroy it, false to wait for it to complete.
+     */
+    public int complete(boolean destroy) throws InterruptedException, IOException {
+        if (destroy)
+            javaProcess.destroy();
+
+        int exitCode = javaProcess.waitFor();
+        Thread.sleep(500);
+        synchronized (this) {
+
+            // Always write the error
+            if (err.size() != 0) {
+                System.err.println("START-SPAWNED:" + name + " ERROR OUTPUT:");
+                err.writeTo(System.err);
+                System.err.println("END-SPAWNED  :" + name + " ERROR OUTPUT:");
+            }
+
+            // Only write the error if it appeared the server
+            // failed in some way.
+            if ((destroy || exitCode != 0) && out.size() != 0) {
+                System.out.println("START-SPAWNED:" + name
+                        + " STANDARD OUTPUT: exit code=" + exitCode);
+                out.writeTo(System.out);
+                System.out.println("END-SPAWNED  :" + name
+                        + " STANDARD OUTPUT:");
+            }
+        }
+        
+        return exitCode;
+    }
+
+    private ByteArrayOutputStream streamSaver(final InputStream in,
+            final String name) {
+
+        final ByteArrayOutputStream out = new ByteArrayOutputStream() {
+            public void reset() {
+                super.reset();
+                new Throwable("WWW").printStackTrace(System.out);
+            }
+
+        };
+
+        Thread streamReader = new Thread(new Runnable() {
+
+            public void run() {
+                try {
+                    byte[] buffer = new byte[1024];
+                    int read;
+                    while ((read = in.read(buffer)) != -1) {
+                        synchronized (SpawnedProcess.this) {
+                            out.write(buffer, 0, read);
+                        }
+                    }
+
+                } catch (IOException ioe) {
+                    ioe.printStackTrace(new PrintStream(out, true));
+                }
+            }
+
+        }, name);
+        streamReader.setDaemon(true);
+        streamReader.setPriority(Thread.MIN_PRIORITY);
+        streamReader.start();
+
+        return out;
+
+    }
+}
