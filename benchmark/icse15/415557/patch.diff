diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java
index b183f6f6..ee9b8e44 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java
@@ -395,9 +395,6 @@ void buildACCRDB(String rdbnam,
                 typdef.isCcsidMbcSet(),
                 typdef.getCcsidMbc());
 
-        // This specifies the SQL Error Diagnostic Level
-        buildDIAGLVL();
-
         // RDB allow update is an optional parameter which indicates
         // whether the RDB allows the requester to perform update operations
         // in the RDB.  If update operations are not allowed, this connection
@@ -567,13 +564,6 @@ void buildTYPDEFOVR(boolean sendCcsidSbc,
 
     }
 
-    private void buildDIAGLVL() throws SqlException {
-        markLengthBytes(CodePoint.DIAGLVL);
-        
-        writeByte(CodePoint.DIAGLVL2);
-        updateLengthBytes();
-    }
-
     private void buildMGRLVLLS(int agent,
                                int sqlam,
                                int rdb,
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index c3ecc1f5..821ce479 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -2901,6 +2901,14 @@ private int parseACCRDB() throws  DRDAProtocolException
 					}
 					else sendWarningsOnCNTQRY = false;
 
+					// The client can not request DIAGLVL because when run with
+					// an older server it will cause an exception. Older version
+					// of the server do not recognize requests for DIAGLVL.
+					if ((appRequester.getClientType() == appRequester.DNC_CLIENT) &&
+							appRequester.greaterThanOrEqualTo(10, 2, 0)) {
+						diagnosticLevel = CodePoint.DIAGLVL1;
+					}
+
 					removeFromRequired(CodePoint.PRDID);
 					break;
 				//required
@@ -2937,10 +2945,6 @@ private int parseACCRDB() throws  DRDAProtocolException
 				case CodePoint.STTSTRDEL:
 					codePointNotSupported(codePoint);
 					break;
-				// optional
-				case CodePoint.DIAGLVL:
-					diagnosticLevel = reader.readByte();
-					break;
 				default:
 					invalidCodePoint(codePoint);
 			}
@@ -6243,7 +6247,7 @@ private boolean writeFDODTA (DRDAStatement stmt)
 			// popped by client onto its rowUpdated state, i.e. this 
 			// warning should not reach API level.
 			if (rs != null && rs.rowUpdated()) {
-				SQLWarning w = new SQLWarning(null, SQLState.ROW_UPDATED,
+				SQLWarning w = new SQLWarning("", SQLState.ROW_UPDATED,
 						ExceptionSeverity.WARNING_SEVERITY);
 				if (sqlw != null) {
 					sqlw.setNextWarning(w);
@@ -6255,7 +6259,7 @@ private boolean writeFDODTA (DRDAStatement stmt)
 			// SQLCARD and a null data group. The SQLCARD has a warning
 			// SQLSTATE of 02502
 			if (rs != null && rs.rowDeleted()) {
-				SQLWarning w = new SQLWarning(null, SQLState.ROW_DELETED,
+				SQLWarning w = new SQLWarning("", SQLState.ROW_DELETED,
 						ExceptionSeverity.WARNING_SEVERITY);
 				if (sqlw != null) {
 					sqlw.setNextWarning(w);
