diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeFilter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeFilter.java
index 2cbd80fb..e93d8be2 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeFilter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeFilter.java
@@ -111,7 +111,9 @@ private NumericRangeFilter(final NumericRangeQuery<T> query) {
    * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>double</code>
    * range using the given <a href="NumericRangeQuery.html#precisionStepDesc"><code>precisionStep</code></a>.
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Double.NaN}. By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeFilter<Double> newDoubleRange(final String field, final int precisionStep,
@@ -126,7 +128,9 @@ private NumericRangeFilter(final NumericRangeQuery<T> query) {
    * Factory that creates a <code>NumericRangeFilter</code>, that queries a <code>double</code>
    * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Double.NaN}. By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeFilter<Double> newDoubleRange(final String field,
@@ -141,7 +145,9 @@ private NumericRangeFilter(final NumericRangeQuery<T> query) {
    * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>float</code>
    * range using the given <a href="NumericRangeQuery.html#precisionStepDesc"><code>precisionStep</code></a>.
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Float#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Float.NaN}. By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeFilter<Float> newFloatRange(final String field, final int precisionStep,
@@ -156,7 +162,9 @@ private NumericRangeFilter(final NumericRangeQuery<T> query) {
    * Factory that creates a <code>NumericRangeFilter</code>, that queries a <code>float</code>
    * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Float#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Float.NaN}. By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeFilter<Float> newFloatRange(final String field,
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
index c729dc3a..615b7a90 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
@@ -252,7 +252,9 @@ private NumericRangeQuery(final String field, final int precisionStep, final Dat
    * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>double</code>
    * range using the given <a href="#precisionStepDesc"><code>precisionStep</code></a>.
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,
@@ -265,7 +267,9 @@ private NumericRangeQuery(final String field, final int precisionStep, final Dat
    * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>double</code>
    * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeQuery<Double> newDoubleRange(final String field,
@@ -278,7 +282,9 @@ private NumericRangeQuery(final String field, final int precisionStep, final Dat
    * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>float</code>
    * range using the given <a href="#precisionStepDesc"><code>precisionStep</code></a>.
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Float#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Float.NaN}.  By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeQuery<Float> newFloatRange(final String field, final int precisionStep,
@@ -291,7 +297,9 @@ private NumericRangeQuery(final String field, final int precisionStep, final Dat
    * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>float</code>
    * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).
    * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)
-   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will
+   * by setting the min or max value to <code>null</code>.
+   * {@link Float#NaN} will never match a half-open range, to hit {@code NaN} use a query
+   * with {@code min == max == Float.NaN}.  By setting inclusive to false, it will
    * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.
    */
   public static NumericRangeQuery<Float> newFloatRange(final String field,
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java
index 7e3442a1..d61f8f83 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java
@@ -250,6 +250,8 @@ public static int prefixCodedToInt(final String prefixCoded) {
    * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;
    * bit layout and then some bits are swapped, to be able to compare the result as long.
    * By this the precision is not reduced, but the value can easily used as a long.
+   * The sort order (including {@link Double#NaN}) is defined by
+   * {@link Double#compareTo}; {@code NaN} is greater than positive infinity.
    * @see #sortableLongToDouble
    */
   public static long doubleToSortableLong(double val) {
@@ -288,6 +290,8 @@ public static double prefixCodedToDouble(String val) {
    * The value is converted by getting their IEEE 754 floating-point &quot;float format&quot;
    * bit layout and then some bits are swapped, to be able to compare the result as int.
    * By this the precision is not reduced, but the value can easily used as an int.
+   * The sort order (including {@link Float#NaN}) is defined by
+   * {@link Float#compareTo}; {@code NaN} is greater than positive infinity.
    * @see #sortableIntToFloat
    */
   public static int floatToSortableInt(float val) {
