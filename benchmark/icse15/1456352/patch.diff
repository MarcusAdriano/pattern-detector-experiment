diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java
index 74e322c3..54e62d80 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
+import org.apache.derby.iapi.store.raw.ContainerKey;
 
 /**
 The CacheableConglomerate implements a single item in the cache used by
@@ -44,12 +45,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 class CacheableConglomerate implements Cacheable
 {
+    private final RAMAccessManager accessManager;
     private Long            conglomid;
     private Conglomerate    conglom;
 
     /* Constructor */
-    CacheableConglomerate()
+    CacheableConglomerate(RAMAccessManager parent)
     {
+        this.accessManager = parent;
     }
 
 	/*
@@ -92,11 +95,15 @@ If the class of the object needs to change (e.g. to support a different format)
 	*/
 	public Cacheable setIdentity(Object key) throws StandardException
     {
-		if (SanityManager.DEBUG) {
-			SanityManager.THROWASSERT("not supported.");
-		}
+        conglomid = (Long) key;
 
-        return(null);
+        long id = conglomid.longValue();
+
+        conglom = accessManager.getFactoryFromConglomId(id).readConglomerate(
+                accessManager.getCurrentTransactionContext().getTransaction(),
+                new ContainerKey(0, id));
+
+        return this;
     }
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
index 372c8e9a..f0038627 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
@@ -52,7 +52,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.access.TransactionInfo;
 
 import org.apache.derby.iapi.store.raw.ContainerHandle;
-import org.apache.derby.iapi.store.raw.ContainerKey;
 import org.apache.derby.iapi.store.raw.LockingPolicy;
 import org.apache.derby.iapi.store.raw.RawStoreFactory;
 import org.apache.derby.iapi.store.raw.Transaction;
@@ -371,7 +370,7 @@ private void handleConglomidExists(
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
-    private ConglomerateFactory getFactoryFromConglomId(
+    ConglomerateFactory getFactoryFromConglomId(
     long    conglom_id)
 		throws StandardException
     {
@@ -464,36 +463,12 @@ private void conglomCacheInit()
         Conglomerate conglom       = null;
         Long         conglomid_obj = new Long(conglomid);
 
-        synchronized (conglom_cache)
-        {
             CacheableConglomerate cache_entry = 
-                (CacheableConglomerate) conglom_cache.findCached(conglomid_obj);
+            (CacheableConglomerate) conglom_cache.find(conglomid_obj);
 
-            if (cache_entry != null)
-            {
+        if (cache_entry != null) {
                 conglom = cache_entry.getConglom();
                 conglom_cache.release(cache_entry);
-
-                // SanityManager.DEBUG_PRINT("find", "find hit : " + conglomid);
-            }
-            else
-            {
-                // SanityManager.DEBUG_PRINT("find", "find miss: " + conglomid);
-
-                // If not in cache - ask the factory for it and insert it.
-
-                conglom = 
-                    getFactoryFromConglomId(conglomid).readConglomerate(
-                        xact_mgr, new ContainerKey(0, conglomid));
-
-                if (conglom != null)
-                {
-                    // on cache miss, put the missing conglom in the cache.
-                    cache_entry = (CacheableConglomerate) 
-                        this.conglom_cache.create(conglomid_obj, conglom);
-                    this.conglom_cache.release(cache_entry);
-                }
-            }
         }
 
         return(conglom);
@@ -512,51 +487,9 @@ private void conglomCacheInit()
     /* package */ protected void conglomCacheInvalidate()
         throws StandardException
     {
-        synchronized (conglom_cache)
-        {
             conglom_cache.ageOut();
         }
 
-        return;
-    }
-
-    /**
-     * Update a conglomerate directory entry.
-     * <p>
-     * Update the Conglom column of the Conglomerate Directory.  The 
-     * Conglomerate with id "conglomid" is replaced by "new_conglom".
-     * <p>
-     *
-     * @param conglomid   The conglomid of conglomerate to replace.
-     * @param new_conglom The new Conglom to update the conglom column to.
-     *
-	 * @exception  StandardException  Standard exception policy.
-     **/
-    /* package */ void conglomCacheUpdateEntry(
-    long            conglomid, 
-    Conglomerate    new_conglom) 
-        throws StandardException
-    {
-        Long         conglomid_obj = new Long(conglomid);
-
-        synchronized (conglom_cache)
-        {
-            // remove the current entry
-            CacheableConglomerate conglom_entry = (CacheableConglomerate) 
-                conglom_cache.findCached(conglomid_obj);
-
-            if (conglom_entry != null)
-                conglom_cache.remove(conglom_entry);
-
-            // insert the updated entry.
-            conglom_entry = (CacheableConglomerate) 
-                conglom_cache.create(conglomid_obj, new_conglom);
-            conglom_cache.release(conglom_entry);
-        }
-
-        return;
-    }
-
     /**
      * Add a newly created conglomerate to the cache.
      * <p>
@@ -571,17 +504,12 @@ private void conglomCacheInit()
     Conglomerate    conglom)
         throws StandardException
     {
-        synchronized (conglom_cache)
-        {
-            // insert the updated entry.
+        // Insert the new entry.
             CacheableConglomerate conglom_entry = (CacheableConglomerate) 
                 conglom_cache.create(new Long(conglomid), conglom);
             conglom_cache.release(conglom_entry);
         }
 
-        return;
-    }
-
     /**
      * Remove an entry from the cache.
      * <p>
@@ -593,19 +521,45 @@ private void conglomCacheInit()
     /* package */ void conglomCacheRemoveEntry(long conglomid)
         throws StandardException
     {
-        synchronized (conglom_cache)
-        {
             CacheableConglomerate conglom_entry = (CacheableConglomerate) 
                 conglom_cache.findCached(new Long(conglomid));
 
-            if (conglom_entry != null)
+        if (conglom_entry != null) {
                 conglom_cache.remove(conglom_entry);
         }
+    }
 
-        return;
+    /**
+     * <p>
+     * Get the current transaction context.
+     * </p>
+     *
+     * <p>
+     * If there is an internal transaction on the context stack, return the
+     * internal transaction. Otherwise, if there is a nested user transaction
+     * on the context stack, return the nested transaction. Otherwise,
+     * return the current user transaction.
+     * </p>
+     *
+     * @return a context object referencing the current transaction
+     */
+    RAMTransactionContext getCurrentTransactionContext() {
+        RAMTransactionContext rtc =
+            (RAMTransactionContext) ContextService.getContext(
+                AccessFactoryGlobals.RAMXACT_INTERNAL_CONTEXT_ID);
+
+        if (rtc == null) {
+            rtc = (RAMTransactionContext) ContextService.getContext(
+                    AccessFactoryGlobals.RAMXACT_CHILD_CONTEXT_ID);
     }
 
+        if (rtc == null) {
+            rtc = (RAMTransactionContext) ContextService.getContext(
+                    AccessFactoryGlobals.RAMXACT_CONTEXT_ID);
+        }
 
+        return rtc;
+    }
 
     /**************************************************************************
      * Public Methods implementing AccessFactory Interface:
@@ -1280,7 +1234,7 @@ public Serializable map(String key, Serializable value, Dictionary p)
 	*/
 
 	public Cacheable newCacheable(CacheManager cm) {
-		return new CacheableConglomerate();
+		return new CacheableConglomerate(this);
 	}
 
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
index 2747d745..d6df249a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
@@ -382,17 +382,7 @@ private int determine_lock_level(
 	private Conglomerate findExistingConglomerate(long conglomId)
 		throws StandardException
 	{
-		Conglomerate conglom = null;
-
-		if (conglomId < 0)
-		{
-			if (tempCongloms != null)
-				conglom = (Conglomerate) tempCongloms.get(new Long(conglomId));
-		}
-        else
-        {
-            conglom = accessmanager.conglomCacheFind(this, conglomId);
-        }
+		Conglomerate conglom = findConglomerate(conglomId);
 
 		if (conglom == null)
         {
@@ -617,18 +607,13 @@ public void addColumnToConglomerate(
 
 		conglom.addColumn(this, column_id, template_column, collation_id);
 
-        // remove the old entry in the Conglomerate directory, and add the
-        // new one.
-		if (is_temporary)
-		{
-			tempCongloms.put(new Long(conglomId), conglom);
-		}
-		else
+        // Set an indication that ALTER TABLE has been called so that the
+        // conglomerate will be invalidated if an error happens. Only needed
+        // for non-temporary conglomerates, since they are the only ones that
+        // live in the conglomerate cache.
+        if (!is_temporary)
         {
             alterTableCallMade = true;
-
-            // have access manager update the conglom to this new one.
-			accessmanager.conglomCacheUpdateEntry(conglomId, conglom);
         }
 
         cc.close();
@@ -1971,12 +1956,7 @@ public DatabaseInstant commitNoSync(int commitflag)
 	public void abort()
 		throws StandardException
 	{
-	
-        if (alterTableCallMade)
-        {
-            accessmanager.conglomCacheInvalidate();
-            alterTableCallMade = false;
-        }
+        invalidateConglomerateCache();
 		this.closeControllers(true /* close all controllers */ );
 		rawtran.abort();
 
