diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index c1eb684a..43c2302e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -33,21 +33,13 @@
  import org.apache.cassandra.locator.TokenMetadata;
  import org.apache.cassandra.locator.AbstractReplicationStrategy;
  import org.apache.cassandra.net.*;
- import org.apache.cassandra.net.io.StreamContextManager;
- import org.apache.cassandra.net.io.IStreamComplete;
  import org.apache.cassandra.service.StorageService;
- import org.apache.cassandra.service.StreamManager;
- import org.apache.cassandra.utils.LogUtil;
  import org.apache.cassandra.utils.SimpleCondition;
  import org.apache.cassandra.utils.FBUtilities;
  import org.apache.cassandra.config.DatabaseDescriptor;
  import org.apache.cassandra.gms.FailureDetector;
  import org.apache.cassandra.gms.IFailureDetector;
- import org.apache.cassandra.io.DataInputBuffer;
- import org.apache.cassandra.io.SSTableReader;
- import org.apache.cassandra.io.SSTableWriter;
- import org.apache.cassandra.db.ColumnFamilyStore;
- import org.apache.cassandra.db.Table;
+ import org.apache.cassandra.io.Streaming;
  import com.google.common.collect.Multimap;
  import com.google.common.collect.ArrayListMultimap;
 
@@ -56,7 +48,7 @@
   * This class handles the bootstrapping responsibilities for the local endpoint.
   *
   *  - bootstrapTokenVerb asks the most-loaded node what Token to use to split its Range in two.
-  *  - bootstrapMetadataVerb tells source nodes to send us the necessary Ranges
+  *  - streamRequestVerb tells source nodes to send us the necessary Ranges
   *  - source nodes send streamInitiateVerb to us to say "get ready to receive data" [if there is data to send]
   *  - when we have everything set up to receive the data, we send streamInitiateDoneVerb back to the source nodes and they start streaming
   *  - when streaming is complete, we send streamFinishedVerb to the source so it can clean up on its end
@@ -96,12 +88,10 @@ public void run()
                 for (Map.Entry<InetAddress, Collection<Range>> entry : getWorkMap(rangesWithSourceTarget).asMap().entrySet())
                 {
                     InetAddress source = entry.getKey();
-                    if (logger.isDebugEnabled())
-                        logger.debug("Sending BootstrapMetadataMessage to " + source + " for " + StringUtils.join(entry.getValue(), ", "));
-                    BootstrapMetadata bsMetadata = new BootstrapMetadata(address, entry.getValue());
-                    Message message = BootstrapMetadataMessage.makeBootstrapMetadataMessage(new BootstrapMetadataMessage(bsMetadata));
-                    MessagingService.instance().sendOneWay(message, source);
                     StorageService.instance().addBootstrapSource(source);
+                    if (logger.isDebugEnabled())
+                        logger.debug("Requesting from " + source + " ranges " + StringUtils.join(entry.getValue(), ", "));
+                    Streaming.requestRanges(source, entry.getValue());
                 }
             }
         }).start();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java
index ef5401bf..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java
@@ -1,101 +0,0 @@
- /**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.dht;
-
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Collection;
-
-import org.apache.cassandra.io.ICompactSerializer;
-import org.apache.cassandra.net.CompactEndPointSerializationHelper;
-import java.net.InetAddress;
-
-
-
-/**
- * This encapsulates information of the list of 
- * ranges that a target node requires in order to 
- * be bootstrapped. This will be bundled in a 
- * BootstrapMetadataMessage and sent to nodes that
- * are going to handoff the data.
-*/
-class BootstrapMetadata
-{
-    private static ICompactSerializer<BootstrapMetadata> serializer_;
-    static
-    {
-        serializer_ = new BootstrapMetadataSerializer();
-    }
-    
-    protected static ICompactSerializer<BootstrapMetadata> serializer()
-    {
-        return serializer_;
-    }
-    
-    protected InetAddress target_;
-    protected Collection<Range> ranges_;
-    
-    BootstrapMetadata(InetAddress target, Collection<Range> ranges)
-    {
-        target_ = target;
-        ranges_ = ranges;
-    }
-    
-    public String toString()
-    {
-        StringBuilder sb = new StringBuilder("");
-        sb.append(target_);
-        sb.append("------->");
-        for ( Range range : ranges_ )
-        {
-            sb.append(range);
-            sb.append(" ");
-        }
-        return sb.toString();
-    }
-}
-
-class BootstrapMetadataSerializer implements ICompactSerializer<BootstrapMetadata>
-{
-    public void serialize(BootstrapMetadata bsMetadata, DataOutputStream dos) throws IOException
-    {
-        CompactEndPointSerializationHelper.serialize(bsMetadata.target_, dos);
-        dos.writeInt(bsMetadata.ranges_.size());
-        for (Range range : bsMetadata.ranges_)
-        {
-            Range.serializer().serialize(range, dos);
-        }
-    }
-
-    public BootstrapMetadata deserialize(DataInputStream dis) throws IOException
-    {            
-        InetAddress target = CompactEndPointSerializationHelper.deserialize(dis);
-        int size = dis.readInt();
-        List<Range> ranges = (size == 0) ? null : new ArrayList<Range>();
-        for( int i = 0; i < size; ++i )
-        {
-            ranges.add(Range.serializer().deserialize(dis));
-        }            
-        return new BootstrapMetadata( target, ranges );
-    }
-}
-
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
index 719ca50c..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
@@ -1,96 +0,0 @@
- /**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.dht;
-
-import java.io.*;
-
-import org.apache.cassandra.io.ICompactSerializer;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.service.StorageService;
-import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.concurrent.StageManager;
-
-
- /**
- * This class encapsulates the message that needs to be sent
- * to nodes that handoff data. The message contains information
- * about the node to be bootstrapped and the ranges with which
- * it needs to be bootstrapped.
-*/
-class BootstrapMetadataMessage
-{
-    private static ICompactSerializer<BootstrapMetadataMessage> serializer_;
-    static
-    {
-        serializer_ = new BootstrapMetadataMessageSerializer();
-    }
-    
-    protected static ICompactSerializer<BootstrapMetadataMessage> serializer()
-    {
-        return serializer_;
-    }
-    
-    protected static Message makeBootstrapMetadataMessage(BootstrapMetadataMessage bsMetadataMessage)
-    {
-        ByteArrayOutputStream bos = new ByteArrayOutputStream();
-        DataOutputStream dos = new DataOutputStream( bos );
-        try
-        {
-            BootstrapMetadataMessage.serializer().serialize(bsMetadataMessage, dos);
-        }
-        catch (IOException e)
-        {
-            throw new IOError(e);
-        }
-        return new Message(FBUtilities.getLocalAddress(), StageManager.streamStage_, StorageService.bootstrapMetadataVerbHandler_, bos.toByteArray() );
-    }        
-    
-    protected BootstrapMetadata[] bsMetadata_ = new BootstrapMetadata[0];
-
-    // TODO only actually ever need one BM, not an array
-    BootstrapMetadataMessage(BootstrapMetadata... bsMetadata)
-    {
-        assert bsMetadata != null;
-        bsMetadata_ = bsMetadata;
-    }
-}
-
-class BootstrapMetadataMessageSerializer implements ICompactSerializer<BootstrapMetadataMessage>
-{
-    public void serialize(BootstrapMetadataMessage bsMetadataMessage, DataOutputStream dos) throws IOException
-    {
-        BootstrapMetadata[] bsMetadata = bsMetadataMessage.bsMetadata_;
-        dos.writeInt(bsMetadata.length);
-        for (BootstrapMetadata bsmd : bsMetadata)
-        {
-            BootstrapMetadata.serializer().serialize(bsmd, dos);
-        }
-    }
-
-    public BootstrapMetadataMessage deserialize(DataInputStream dis) throws IOException
-    {            
-        int size = dis.readInt();
-        BootstrapMetadata[] bsMetadata = new BootstrapMetadata[size];
-        for ( int i = 0; i < size; ++i )
-        {
-            bsMetadata[i] = BootstrapMetadata.serializer().deserialize(dis);
-        }
-        return new BootstrapMetadataMessage(bsMetadata);
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
index 90fac4c3..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
@@ -1,82 +0,0 @@
- /**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.dht;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.IOError;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Collection;
-
-import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.db.Table;
-import org.apache.cassandra.io.DataInputBuffer;
-import org.apache.cassandra.io.SSTableReader;
-import org.apache.cassandra.io.Streaming;
-
-import java.net.InetAddress;
-import org.apache.cassandra.net.IVerbHandler;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.net.MessagingService;
-import org.apache.cassandra.net.io.StreamContextManager;
-import org.apache.cassandra.service.StorageService;
-import org.apache.cassandra.service.StreamManager;
-
-import org.apache.log4j.Logger;
-import org.apache.commons.lang.StringUtils;
-
- /**
- * This verb handler handles the BootstrapMetadataMessage that is sent
- * by the leader to the nodes that are responsible for handing off data. 
-*/
-public class BootstrapMetadataVerbHandler implements IVerbHandler
-{
-    private static Logger logger_ = Logger.getLogger(BootstrapMetadataVerbHandler.class);
-    
-    public void doVerb(Message message)
-    {
-        if (logger_.isDebugEnabled())
-          logger_.debug("Received a BootstrapMetadataMessage from " + message.getFrom());
-        
-        /* Cannot bootstrap another node if I'm in bootstrap mode myself! */
-        assert !StorageService.instance().isBootstrapMode();
-        
-        byte[] body = message.getMessageBody();
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(body, body.length);
-        try
-        {
-            BootstrapMetadataMessage bsMetadataMessage = BootstrapMetadataMessage.serializer().deserialize(bufIn);
-            BootstrapMetadata[] bsMetadata = bsMetadataMessage.bsMetadata_;
-
-            for (BootstrapMetadata bsmd : bsMetadata)
-            {
-                if (logger_.isDebugEnabled())
-                    logger_.debug(bsmd.toString());
-                Streaming.transferRanges(bsmd.target_, bsmd.ranges_, null);
-            }
-        }
-        catch (IOException ex)
-        {
-            throw new IOError(ex);
-        }
-    }
-}
-
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMessage.java
index e69de29b..a1b3d01a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMessage.java
@@ -0,0 +1,93 @@
+ /**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.io;
+
+import java.io.*;
+
+import org.apache.cassandra.net.Message;
+import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.concurrent.StageManager;
+
+ /**
+ * This class encapsulates the message that needs to be sent to nodes
+ * that handoff data. The message contains information about ranges
+ * that need to be transferred and the target node.
+*/
+class StreamRequestMessage
+{
+    private static ICompactSerializer<StreamRequestMessage> serializer_;
+    static
+    {
+        serializer_ = new StreamRequestMessageSerializer();
+    }
+    
+    protected static ICompactSerializer<StreamRequestMessage> serializer()
+    {
+        return serializer_;
+    }
+    
+    protected static Message makeStreamRequestMessage(StreamRequestMessage streamRequestMessage)
+    {
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        DataOutputStream dos = new DataOutputStream(bos);
+        try
+        {
+            StreamRequestMessage.serializer().serialize(streamRequestMessage, dos);
+        }
+        catch (IOException e)
+        {
+            throw new IOError(e);
+        }
+        return new Message(FBUtilities.getLocalAddress(), StageManager.streamStage_, StorageService.streamRequestVerbHandler_, bos.toByteArray() );
+    }        
+    
+    protected StreamRequestMetadata[] streamRequestMetadata_ = new StreamRequestMetadata[0];
+
+    // TODO only actually ever need one BM, not an array
+    StreamRequestMessage(StreamRequestMetadata... streamRequestMetadata)
+    {
+        assert streamRequestMetadata != null;
+        streamRequestMetadata_ = streamRequestMetadata;
+    }
+}
+
+class StreamRequestMessageSerializer implements ICompactSerializer<StreamRequestMessage>
+{
+    public void serialize(StreamRequestMessage streamRequestMessage, DataOutputStream dos) throws IOException
+    {
+        StreamRequestMetadata[] streamRequestMetadata = streamRequestMessage.streamRequestMetadata_;
+        dos.writeInt(streamRequestMetadata.length);
+        for (StreamRequestMetadata bsmd : streamRequestMetadata)
+        {
+            StreamRequestMetadata.serializer().serialize(bsmd, dos);
+        }
+    }
+
+    public StreamRequestMessage deserialize(DataInputStream dis) throws IOException
+    {            
+        int size = dis.readInt();
+        StreamRequestMetadata[] streamRequestMetadata = new StreamRequestMetadata[size];
+        for ( int i = 0; i < size; ++i )
+        {
+            streamRequestMetadata[i] = StreamRequestMetadata.serializer().deserialize(dis);
+        }
+        return new StreamRequestMessage(streamRequestMetadata);
+    }
+}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMetadata.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMetadata.java
index e69de29b..eff563f1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMetadata.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestMetadata.java
@@ -0,0 +1,98 @@
+ /**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.io;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Collection;
+
+import org.apache.cassandra.net.CompactEndPointSerializationHelper;
+import org.apache.cassandra.dht.Range;
+
+/**
+ * This encapsulates information of the list of ranges that a target
+ * node requires to be transferred. This will be bundled in a
+ * StreamRequestsMessage and sent to nodes that are going to handoff
+ * the data.
+*/
+class StreamRequestMetadata
+{
+    private static ICompactSerializer<StreamRequestMetadata> serializer_;
+    static
+    {
+        serializer_ = new StreamRequestMetadataSerializer();
+    }
+    
+    protected static ICompactSerializer<StreamRequestMetadata> serializer()
+    {
+        return serializer_;
+    }
+    
+    protected InetAddress target_;
+    protected Collection<Range> ranges_;
+    
+    StreamRequestMetadata(InetAddress target, Collection<Range> ranges)
+    {
+        target_ = target;
+        ranges_ = ranges;
+    }
+    
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder("");
+        sb.append(target_);
+        sb.append("------->");
+        for ( Range range : ranges_ )
+        {
+            sb.append(range);
+            sb.append(" ");
+        }
+        return sb.toString();
+    }
+}
+
+class StreamRequestMetadataSerializer implements ICompactSerializer<StreamRequestMetadata>
+{
+    public void serialize(StreamRequestMetadata srMetadata, DataOutputStream dos) throws IOException
+    {
+        CompactEndPointSerializationHelper.serialize(srMetadata.target_, dos);
+        dos.writeInt(srMetadata.ranges_.size());
+        for (Range range : srMetadata.ranges_)
+        {
+            Range.serializer().serialize(range, dos);
+        }
+    }
+
+    public StreamRequestMetadata deserialize(DataInputStream dis) throws IOException
+    {            
+        InetAddress target = CompactEndPointSerializationHelper.deserialize(dis);
+        int size = dis.readInt();
+        List<Range> ranges = (size == 0) ? null : new ArrayList<Range>();
+        for( int i = 0; i < size; ++i )
+        {
+            ranges.add(Range.serializer().deserialize(dis));
+        }            
+        return new StreamRequestMetadata( target, ranges );
+    }
+}
+
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java
index 3f24d583..90ab683f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java
@@ -1 +1,77 @@
   + native
+ /**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.io;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.IOError;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Collection;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.db.Table;
+
+import java.net.InetAddress;
+import org.apache.cassandra.net.IVerbHandler;
+import org.apache.cassandra.net.Message;
+import org.apache.cassandra.net.MessagingService;
+import org.apache.cassandra.net.io.StreamContextManager;
+import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.service.StreamManager;
+
+import org.apache.log4j.Logger;
+import org.apache.commons.lang.StringUtils;
+
+ /**
+ * This verb handler handles the StreamRequestMessage that is sent by
+ * the node requesting range transfer.
+*/
+public class StreamRequestVerbHandler implements IVerbHandler
+{
+    private static Logger logger_ = Logger.getLogger(StreamRequestVerbHandler.class);
+    
+    public void doVerb(Message message)
+    {
+        if (logger_.isDebugEnabled())
+            logger_.debug("Received a StreamRequestMessage from " + message.getFrom());
+        
+        byte[] body = message.getMessageBody();
+        DataInputBuffer bufIn = new DataInputBuffer();
+        bufIn.reset(body, body.length);
+        try
+        {
+            StreamRequestMessage streamRequestMessage = StreamRequestMessage.serializer().deserialize(bufIn);
+            StreamRequestMetadata[] streamRequestMetadata = streamRequestMessage.streamRequestMetadata_;
+
+            for (StreamRequestMetadata srm : streamRequestMetadata)
+            {
+                if (logger_.isDebugEnabled())
+                    logger_.debug(srm.toString());
+                Streaming.transferRanges(srm.target_, srm.ranges_, null);
+            }
+        }
+        catch (IOException ex)
+        {
+            throw new IOError(ex);
+        }
+    }
+}
+
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
index afd5a38f..b87a3b6c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
@@ -127,6 +127,16 @@ public static void transferSSTables(InetAddress target, List<SSTableReader> ssta
         }
     }
 
+    /**
+     * Request ranges to be transferred
+     */
+    public static void requestRanges(InetAddress source, Collection<Range> ranges)
+    {
+        StreamRequestMetadata streamRequestMetadata = new StreamRequestMetadata(FBUtilities.getLocalAddress(), ranges);
+        Message message = StreamRequestMessage.makeStreamRequestMessage(new StreamRequestMessage(streamRequestMetadata));
+        MessagingService.instance().sendOneWay(message, source);
+    }
+
     public static class StreamInitiateVerbHandler implements IVerbHandler
     {
         /*
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index ce2a93d9..759a4045 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -41,7 +41,6 @@
 import org.apache.cassandra.locator.TokenMetadata;
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.dht.Range;
-import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.gms.FailureDetector;
 import org.apache.cassandra.concurrent.StageManager;
 
@@ -83,14 +82,6 @@ public int compare(String o1, String o2)
         }
     };
 
-    private static Comparator<Row> rowComparator = new Comparator<Row>()
-    {
-        public int compare(Row r1, Row r2)
-        {
-            return keyComparator.compare(r1.key, r2.key);
-        }
-    };
-
     /**
      * Use this method to have this RowMutation applied
      * across all replicas. This method will take care
@@ -308,7 +299,6 @@ else if (consistency_level == ConsistencyLevel.ALL)
 
         List<Row> rows = new ArrayList<Row>();
         List<IAsyncResult> iars = new ArrayList<IAsyncResult>();
-        int commandIndex = 0;
 
         for (ReadCommand command: commands)
         {
@@ -337,7 +327,6 @@ else if (consistency_level == ConsistencyLevel.ALL)
             ReadResponse response = ReadResponse.serializer().deserialize(bufIn);
             if (response.row() != null)
                 rows.add(response.row());
-            commandIndex++;
         }
         return rows;
     }
@@ -412,7 +401,6 @@ else if (consistency_level == ConsistencyLevel.ALL)
 
         for (ReadCommand command: commands)
         {
-            // TODO: throw a thrift exception if we do not have N nodes
             assert !command.isDigestQuery();
             ReadCommand readMessageDigestOnly = command.copy();
             readMessageDigestOnly.setDigestQuery(true);
@@ -707,7 +695,6 @@ public Object call() throws IOException
             List<InetAddress> endpoints = StorageService.instance().getLiveNaturalEndpoints(command.key);
             /* Remove the local storage endpoint from the list. */
             endpoints.remove(FBUtilities.getLocalAddress());
-            // TODO: throw a thrift exception if we do not have N nodes
 
             if (logger.isDebugEnabled())
                 logger.debug("weakreadlocal reading " + command);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 634aaefe..cab71f29 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -42,6 +42,7 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.io.SSTableReader;
 import org.apache.cassandra.io.Streaming;
+import org.apache.cassandra.io.StreamRequestVerbHandler;
 
 import org.apache.log4j.Logger;
 import org.apache.log4j.Level;
@@ -76,7 +77,7 @@
     public final static String streamInitiateDoneVerbHandler_ = "BOOTSTRAP-INITIATE-DONE-VERB-HANDLER";
     public final static String streamFinishedVerbHandler_ = "BOOTSTRAP-TERMINATE-VERB-HANDLER";
     public final static String dataFileVerbHandler_ = "DATA-FILE-VERB-HANDLER";
-    public final static String bootstrapMetadataVerbHandler_ = "BS-METADATA-VERB-HANDLER";
+    public final static String streamRequestVerbHandler_ = "BS-METADATA-VERB-HANDLER";
     public final static String rangeVerbHandler_ = "RANGE-VERB-HANDLER";
     public final static String rangeSliceVerbHandler_ = "RANGE-SLICE-VERB-HANDLER";
     public final static String bootstrapTokenVerbHandler_ = "SPLITS-VERB-HANDLER";
@@ -216,7 +217,7 @@ public StorageService()
         MessagingService.instance().registerVerbHandlers(rangeSliceVerbHandler_, new RangeSliceVerbHandler());
         // see BootStrapper for a summary of how the bootstrap verbs interact
         MessagingService.instance().registerVerbHandlers(bootstrapTokenVerbHandler_, new BootStrapper.BootstrapTokenVerbHandler());
-        MessagingService.instance().registerVerbHandlers(bootstrapMetadataVerbHandler_, new BootstrapMetadataVerbHandler() );
+        MessagingService.instance().registerVerbHandlers(streamRequestVerbHandler_, new StreamRequestVerbHandler() );
         MessagingService.instance().registerVerbHandlers(streamInitiateVerbHandler_, new Streaming.StreamInitiateVerbHandler());
         MessagingService.instance().registerVerbHandlers(streamInitiateDoneVerbHandler_, new Streaming.StreamInitiateDoneVerbHandler());
         MessagingService.instance().registerVerbHandlers(streamFinishedVerbHandler_, new Streaming.StreamFinishedVerbHandler());
