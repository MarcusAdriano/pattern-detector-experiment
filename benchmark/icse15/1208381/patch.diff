diff --git a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
index ae601efa..7b9f34a5 100644
--- a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
+++ b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
@@ -88,8 +88,10 @@ public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws
     FixedBitSet res = null;
     final IndexReader reader = context.reader;
     
+    boolean hasShouldClauses = false;
     for (final FilterClause fc : clauses) {
       if (fc.getOccur() == Occur.SHOULD) {
+        hasShouldClauses = true;
         final DocIdSetIterator disi = getDISI(fc.getFilter(), context);
         if (disi == null) continue;
         if (res == null) {
@@ -98,10 +100,13 @@ public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws
         res.or(disi);
       }
     }
+    if (hasShouldClauses && res == null)
+      return DocIdSet.EMPTY_DOCIDSET;
     
     for (final FilterClause fc : clauses) {
       if (fc.getOccur() == Occur.MUST_NOT) {
         if (res == null) {
+          assert !hasShouldClauses;
           res = new FixedBitSet(reader.maxDoc());
           res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs
         }
diff --git a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
index 6f682223..ba07b792 100644
--- a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
+++ b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
@@ -36,6 +36,7 @@
 import org.apache.lucene.search.QueryWrapperFilter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
@@ -92,6 +93,15 @@ private Filter getWrappedTermQuery(String field, String text) {
     return new QueryWrapperFilter(new TermQuery(new Term(field, text)));
   }
   
+  private Filter getEmptyFilter() {
+    return new Filter() {
+      @Override
+      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {
+        return new FixedBitSet(context.reader.maxDoc());
+      }
+    };
+  }
+
   private Filter getNullDISFilter() {
     return new Filter() {
       @Override
@@ -309,4 +319,21 @@ public void testJustNullDocIdSets() throws Exception {
     booleanFilter.add(getNullDISIFilter(), Occur.MUST_NOT);
     tstFilterCard("A single MUST_NOT filter that returns a null DIS should be invisible", 5, booleanFilter);
   }
+  
+  public void testNonMatchingShouldsAndMusts() throws Exception {
+    BooleanFilter booleanFilter = new BooleanFilter();
+    booleanFilter.add(getEmptyFilter(), Occur.SHOULD);
+    booleanFilter.add(getTermsFilter("accessRights", "admin"), Occur.MUST);
+    tstFilterCard(">0 shoulds with no matches should return no docs", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(getNullDISFilter(), Occur.SHOULD);
+    booleanFilter.add(getTermsFilter("accessRights", "admin"), Occur.MUST);
+    tstFilterCard(">0 shoulds with no matches should return no docs", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(getNullDISIFilter(), Occur.SHOULD);
+    booleanFilter.add(getTermsFilter("accessRights", "admin"), Occur.MUST);
+    tstFilterCard(">0 shoulds with no matches should return no docs", 0, booleanFilter);
+  }
 }
