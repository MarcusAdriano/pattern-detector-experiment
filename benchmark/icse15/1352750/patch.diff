diff --git a/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java b/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
index e69de29b..2a9f481f 100644
--- a/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
+++ b/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.impl;
+
+import java.math.BigDecimal;
+
+import org.objectweb.asm.Opcodes;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ProxyUtils
+{
+  private static Logger LOGGER = LoggerFactory.getLogger(ProxyUtils.class);
+  public static final int JAVA_CLASS_VERSION = new BigDecimal(System.getProperty("java.class.version")).intValue();
+  private static int weavingJavaVersion = -1; // initialise an invalid number
+  /**
+   * Get the java version to be woven at.
+   * @return
+   */
+  public static int getWeavingJavaVersion() {
+    if (weavingJavaVersion == -1 ) {
+      if (JAVA_CLASS_VERSION >= Opcodes.V1_7) {
+        LOGGER.debug("Weaving to Java 7");
+        weavingJavaVersion = Opcodes.V1_7;
+      } else if (JAVA_CLASS_VERSION == Opcodes.V1_6){
+        LOGGER.debug("Weaving to Java 6");
+        weavingJavaVersion = Opcodes.V1_6;
+      } else if (JAVA_CLASS_VERSION == Opcodes.V1_5) {
+        LOGGER.debug("Weaving to Java 5");
+        weavingJavaVersion = Opcodes.V1_5;
+      } // no need to list all Opcodes as Aries should only work with java5 or above.
+    } 
+    return weavingJavaVersion;
+  } 
+}
diff --git a/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java b/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
index 9f3194d4..d8d7e4fe 100644
--- a/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
+++ b/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
@@ -19,8 +19,11 @@
 package org.apache.aries.proxy.impl.gen;
 
 import java.io.IOException;
+import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Modifier;
 
+import org.apache.aries.proxy.impl.ProxyUtils;
 import org.objectweb.asm.AnnotationVisitor;
 import org.objectweb.asm.Attribute;
 import org.objectweb.asm.ClassAdapter;
@@ -108,13 +111,14 @@ public void visit(int version, int access, String name, String signature, String
       throw new TypeNotPresentException(superclassBinaryName, cnfe);
     }
 
-    // move the existing class name to become the superclass
-    // modify the version of the dynamic subclass to be Java 1.6
-    int newVersion = Opcodes.V1_6;
-    // keep the same access and signature as the superclass
+    // keep the same access and signature as the superclass (unless it's abstract)
     // remove all the superclass interfaces because they will be inherited
     // from the superclass anyway
-    cv.visit(newVersion, access, newClassName, signature, name, null);
+    if((access & ACC_ABSTRACT) != 0) {
+      //If the super was abstract the subclass should not be!
+      access &= ~ACC_ABSTRACT;
+    }
+    cv.visit(ProxyUtils.getWeavingJavaVersion(), access, newClassName, signature, name, null);
 
     // add a private field for the invocation handler
     // this isn't static in case we have multiple instances of the same
@@ -137,9 +141,21 @@ public void visit(int version, int access, String name, String signature, String
       methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>",
           Type.VOID_TYPE, NO_ARGS));
     }
-    // otherwise invoke the java.lang.Object no args constructor
     else {
+        try {
+            //if the superclass has a no-arg constructor that we can call, we need to call it
+            // otherwise invoke the java.lang.Object no args constructor.  However, that will fail 
+            // on the most recent versions of the JDK (1.6.0_u34 and 1.7.0_u5 and newer).  For the
+            // newer JDK's, there is NOTHING we can do and the proxy will fail.
+            Constructor<?> cons = superclassClass.getDeclaredConstructor();
+            if (!Modifier.isPrivate(cons.getModifiers())) {
+                methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>", Type.VOID_TYPE, NO_ARGS));
+            } else {
       methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
+    }
+        } catch (Exception e) {
+            methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
+        }
     }
     // call from the constructor to setInvocationHandler
     Method setter = new Method("setInvocationHandler", Type.VOID_TYPE, new Type[] { IH_TYPE });
diff --git a/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java b/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
index 8970b9c6..640e39fa 100644
--- a/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
+++ b/aries/branches/org.apache.aries.proxy.impl-0.4.1/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
@@ -164,6 +164,7 @@ public void testFinalClass() throws Exception
    * Test a private constructor
    */
   @Test
+  @org.junit.Ignore("Failes on JDK's 1.6.0_u33 and newer as you cannot call a private constructor from subclass")
   public void testPrivateConstructor() throws Exception
   {
     Object o = ProxySubclassGenerator.newProxySubclassInstance(
