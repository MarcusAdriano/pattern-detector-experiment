diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java
index 0a4ae34f..0374be90 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java
@@ -26,12 +26,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 
 import java.io.FileNotFoundException;
-import java.io.IOException;
 import java.net.URL;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
 
 /**
  * This class provides a class path based implementation of the StorageFile interface. It is used by the
@@ -95,22 +92,32 @@ StorageFile getParentDir( int pathLen)
      */
     public InputStream getInputStream( ) throws FileNotFoundException
     {
-        URL url = getURL();
+        InputStream is = null;
+        ClassLoader cl = getContextClassLoader(Thread.currentThread());
+        if (cl != null) {
+            is = getResourceAsStream(cl, path);
+        }
 
-        if (url == null) {
-            throw new FileNotFoundException(toString());
+        // don't assume the context class loader is tied
+        // into the class loader that loaded this class.
+        if (is == null) {
+            cl = getClass().getClassLoader();
+            // Javadoc indicates implementations can use
+            // null as a return from Class.getClassLoader()
+            // to indicate the system/bootstrap classloader.
+            if (cl != null) {
+                is = getResourceAsStream(cl, path);
+            } else {
+                is = getSystemResourceAsStream(path);
+            }
         }
 
-        try {
-            return openStream(url);
-        } catch (FileNotFoundException fnf) {
-            throw fnf;
-        } catch (IOException ioe) {
-            FileNotFoundException fnf = new FileNotFoundException(toString());
-            fnf.initCause(ioe);
-            throw fnf;
+        if (is == null) {
+            throw new FileNotFoundException(toString());
         }
 
+        return is;
+
     } // end of getInputStream
     
 	/**
@@ -169,17 +176,29 @@ public URL run() {
         });
     }
 
-    /** Privileged wrapper for {@code URL.openStream()}. */
-    private static InputStream openStream(final URL url) throws IOException {
-        try {
+    /**
+     * Privileged wrapper for {@code ClassLoader.getResourceAsStream(String)}.
+     */
+    private static InputStream getResourceAsStream(
+            final ClassLoader cl, final String name) {
             return AccessController.doPrivileged(
-                    new PrivilegedExceptionAction<InputStream>() {
-                public InputStream run() throws IOException {
-                    return url.openStream();
+                new PrivilegedAction<InputStream>() {
+            public InputStream run() {
+                return cl.getResourceAsStream(name);
                 }
             });
-        } catch (PrivilegedActionException pae) {
-            throw (IOException) pae.getCause();
         }
+
+    /**
+     * Privileged wrapper for
+     * {@code ClassLoader.getSystemResourceAsStream(String)}.
+     */
+    private static InputStream getSystemResourceAsStream(final String name) {
+        return AccessController.doPrivileged(
+                new PrivilegedAction<InputStream>() {
+            public InputStream run() {
+                return ClassLoader.getSystemResourceAsStream(name);
+            }
+        });
     }
 }
