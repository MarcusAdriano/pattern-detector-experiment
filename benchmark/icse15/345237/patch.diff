diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java
index 479cbe3e..d6e045c4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java
@@ -180,7 +180,10 @@ public boolean delete(RowLocation loc)
 
         getRowPositionFromRowLocation(loc, pos);
 
-        open_conglom.latchPage(pos);
+        if (!open_conglom.latchPage(pos)) 
+        {
+            return false;
+        }
 
         open_conglom.lockPositionForWrite(pos, false /* not an insert */, true);
 
@@ -362,7 +365,10 @@ public boolean fetch(
 
         getRowPositionFromRowLocation(loc, pos);
 
-        open_conglom.latchPage(pos);
+        if (!open_conglom.latchPage(pos)) 
+        {
+            return false;
+        }
 
         // Do not get U row lock - only get X or S.  There is not good point
         // currently to convert the U lock to an S lock, we don't know when
@@ -453,7 +459,10 @@ public boolean replace(
 
         getRowPositionFromRowLocation(loc, pos);
 
-        open_conglom.latchPage(pos);
+        if (!open_conglom.latchPage(pos)) 
+        {
+            return false;
+        }
 
         open_conglom.lockPositionForWrite(pos, false, true);
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java
index 9d82adfa..ce7e8131 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java
@@ -3750,8 +3750,8 @@ protected boolean holdCursor(TransactionController tc)
     /**
      * Test critical cases for read uncommitted.
      * <p>
-     * test 1 - test heap fetch of row on page which does not exist.  
-     * test 2 - test heap fetch of row on page where row does not exist.
+     * test 1 - test heap fetch, delete and replace of row on page which does not exist.  
+     * test 2 - test heap fetch, delete and replace of row on page where row does not exist.
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
@@ -3848,11 +3848,35 @@ protected boolean readUncommitted(TransactionController tc)
                 TransactionController.MODE_RECORD,
                 TransactionController.ISOLATION_READ_UNCOMMITTED);
 
+        // Test heap fetch of row on page which does not exist.
         if (cc.fetch(deleted_page_rowloc, big_row.getRowArray(), null))
         {
             throw T_Fail.testFailMsg(
                 "(readUncommitted) fetch should ret false for reclaimed page.");
         }
+             
+        // Test heap replace of row on page which does not exist.
+        FormatableBitSet   update_desc = new FormatableBitSet(1);
+        if (cc.replace(deleted_page_rowloc, big_row.getRowArray(), update_desc)) 
+        {
+            throw T_Fail.testFailMsg(
+                "(readUncommitted) delete should ret false for reclaimed page.");
+        }
+       
+        // Test heap fetch (overloaded call) of row on page which does not exist.
+        if (cc.fetch(deleted_page_rowloc, big_row.getRowArray(), null, true))
+        {
+            throw T_Fail.testFailMsg(
+                "(readUncommitted) fetch should ret false for reclaimed page.");
+        }
+        
+        // Test heap delete of row on page which does not exist.
+        if (cc.delete(deleted_page_rowloc)) 
+        {
+            throw T_Fail.testFailMsg(
+                "(readUncommitted) delete should ret false for reclaimed page.");
+        }
+                
         cc.close();
 
         /*
@@ -3943,11 +3967,34 @@ protected boolean readUncommitted(TransactionController tc)
         // the following will be attempting to fetch a row which has been
         // reclaimed by post commit, on an existing page.
 
+        // test heap fetch of row on page where row does not exist.
         if (cc.fetch(deleted_row_rowloc, big_row.getRowArray(), null))
         {
             throw T_Fail.testFailMsg(
                 "(readUncommitted) fetch should ret false for reclaimed row.");
         }
+        
+        // test heap replace of row on page where row does not exist.
+        if (cc.replace(deleted_page_rowloc, big_row.getRowArray(), update_desc)) 
+        {
+            throw T_Fail.testFailMsg(
+                "(readUncommitted) delete should ret false for reclaimed page.");
+        }
+
+        // test heap fetch (overloaded) of row on page where row does not exist.
+        if (cc.fetch(deleted_page_rowloc, big_row.getRowArray(), null, true))
+        {
+            throw T_Fail.testFailMsg(
+                "(readUncommitted) fetch should ret false for reclaimed page.");
+        }
+        
+        // test heap delete of row on page where row does not exist.
+        if (cc.delete(deleted_page_rowloc)) 
+        {
+            throw T_Fail.testFailMsg(
+                "(readUncommitted) delete should ret false for reclaimed page.");
+        }
+
         cc.close();
 
         /*
