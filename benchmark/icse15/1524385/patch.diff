diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index 7194e840..376622e7 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -1349,10 +1349,21 @@ void generateCore(ExpressionClassBuilder acb,
             // in first. Population of generated columns is done in another
             // method, which (like CHECK CONSTRAINTS) is explicitly called by
             // InsertResultSet and UpdateResultSet.
+            //
+            // For LEFT JOINs, we may need to stuff a NULL into the generated column slot,
+            // just as we do for non-generated columns in a LEFT JOIN. We look at the source
+            // expression for the ResultColumn to determine whether this ResultColumnList
+            // represents an INSERT/UPDATE vs. a SELECT. If this ResultColumnList represents a
+            // LEFT JOIN, then the source expression will be a VirtualColumnNode.
+            // See DERBY-6346.
             //
 			if ( rc.hasGenerationClause() )
             {
+                ValueNode   expr = rc.getExpression();
+                if ( (expr != null) && !(expr instanceof VirtualColumnNode) )
+                {
                 continue;
+            }
             }
             
 			// we need the expressions to be Columns exactly.
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index 93d676be..c9154cf3 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -5574,6 +5574,65 @@ public void test_derby_5749()
 
     }
 
+    // Derby 6346
+    public void test_derby_6346()
+        throws Exception
+    {
+        Connection conn = getConnection();
+
+        goodStatement
+        (
+            conn,
+            "create table t1_6346( c1 int, c2 int generated always as ( -c1 ) )"
+        );
+        goodStatement
+        (
+            conn,
+            "create table t2_6346( c1 int )"
+        );
+        goodStatement
+        (
+            conn,
+            "create table t3_6346( c1 int, c2 int )"
+        );
+        goodStatement
+        (
+            conn,
+            "insert into t1_6346( c1 ) values ( 2 ), ( 20 )"
+        );
+        goodStatement
+        (
+            conn,
+            "insert into t3_6346( c1, c2 ) values ( 2, -2 ), ( 20, -20 )"
+        );
+        goodStatement
+        (
+            conn,
+            "insert into t2_6346( c1 ) values ( 2 ), ( 200 )"
+        );
+
+        String[][]  expectedResults = new String[][]
+        {
+            { "2", "2", "-2" },     
+            { "200", null, null },
+        };
+        
+        assertResults
+            (
+             conn,
+             "select * from t2_6346 left join t3_6346 on t3_6346.c1 = t2_6346.c1 order by t2_6346.c1",
+             expectedResults,
+             false
+             );
+        assertResults
+            (
+             conn,
+             "select * from t2_6346 left join t1_6346 on t1_6346.c1 = t2_6346.c1 order by t2_6346.c1",
+             expectedResults,
+             false
+             );
+    }
+    
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
