diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
index def0a5e0..4b99a38f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
@@ -35,6 +35,7 @@
     public Boolean auto_bootstrap = false;
     public Boolean hinted_handoff_enabled = true;
     
+    public SeedProviderDef seed_provider;
     public String[] seeds;
     public DiskAccessMode disk_access_mode = DiskAccessMode.auto;
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 0af62bdf..5aae85c3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -47,7 +47,6 @@
 import org.apache.cassandra.locator.*;
 import org.apache.cassandra.scheduler.IRequestScheduler;
 import org.apache.cassandra.scheduler.NoScheduler;
-import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.Pair;
 import org.yaml.snakeyaml.Loader;
@@ -129,6 +128,8 @@ static URL getStorageConfigURL() throws ConfigurationException
             ksDesc.putListPropertyType("column_families", RawColumnFamily.class);
             TypeDescription cfDesc = new TypeDescription(RawColumnFamily.class);
             cfDesc.putListPropertyType("column_metadata", RawColumnDefinition.class);
+            TypeDescription seedDesc = new TypeDescription(SeedProviderDef.class);
+            seedDesc.putMapPropertyType("parameters", String.class, String.class);
             constructor.addTypeDescription(desc);
             constructor.addTypeDescription(ksDesc);
             constructor.addTypeDescription(cfDesc);
@@ -380,13 +381,13 @@ else if (conf.memtable_flush_writers == null)
         }
         catch (ConfigurationException e)
         {
-            logger.error("Fatal error: " + e.getMessage());
+            logger.error("Fatal error: " + e.getMessage(), e);
             System.err.println("Bad configuration; unable to start server");
             System.exit(1);
         }
         catch (YAMLException e)
         {
-            logger.error("Fatal error: " + e.getMessage());
+            logger.error("Fatal error: " + e.getMessage(), e);
             System.err.println("Bad configuration; unable to start server");
             System.exit(1);
         }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/SeedProviderDef.java b/cassandra/trunk/src/java/org/apache/cassandra/config/SeedProviderDef.java
index e69de29b..4e33bfeb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/SeedProviderDef.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/SeedProviderDef.java
@@ -0,0 +1,36 @@
+package org.apache.cassandra.config;
+
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+public class SeedProviderDef
+{
+    public String class_name;
+    public Map<String, String> parameters;
+    
+    public SeedProviderDef(LinkedHashMap p)
+    {
+        class_name = (String)p.get("class_name");
+        parameters = (Map<String, String>)((List)p.get("parameters")).get(0);
+    }
+}
