diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 7fdf69de..3cc6a629 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -90,7 +90,6 @@
     private ReentrantReadWriteLock sstableLock_ = new ReentrantReadWriteLock(true);
 
     private TimedStatsDeque readStats_ = new TimedStatsDeque(60000);
-    private TimedStatsDeque diskReadStats_ = new TimedStatsDeque(60000);
     private TimedStatsDeque writeStats_ = new TimedStatsDeque(60000);
 
     ColumnFamilyStore(String table, String columnFamilyName, boolean isSuper, int indexValue) throws IOException
@@ -1346,11 +1345,6 @@ public int getReadCount()
         return readStats_.size();
     }
 
-    public int getReadDiskHits()
-    {
-        return diskReadStats_.size();
-    }
-
     public double getReadLatency()
     {
         return readStats_.mean();
@@ -1394,6 +1388,8 @@ public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOE
     {
         assert columnFamily_.equals(filter.getColumnFamilyName());
 
+        long start = System.currentTimeMillis();
+
         // if we are querying subcolumns of a supercolumn, fetch the supercolumn with NQF, then filter in-memory.
         if (filter.path.superColumnName != null)
         {
@@ -1407,6 +1403,7 @@ public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOE
             SuperColumn scFiltered = filter.filterSuperColumn(sc, gcBefore);
             ColumnFamily cfFiltered = cf.cloneMeShallow();
             cfFiltered.addColumn(scFiltered);
+            readStats_.add(System.currentTimeMillis() - start);
             return cfFiltered;
         }
 
@@ -1476,6 +1473,7 @@ public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOE
                 }
             }
 
+            readStats_.add(System.currentTimeMillis() - start);
             sstableLock_.readLock().unlock();
         }
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
index 414b7d1a..096cb321 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
@@ -64,11 +64,6 @@
      */
     public int getReadCount();
 
-    /**
-     * @return the number of read operations on this column family that hit the disk in the last minute
-     */
-    public int getReadDiskHits();
-
     /**
      * @return average latency per read operation in the last minute
      */
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
index f4dde3ae..767adfe0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -372,7 +372,6 @@ public void printColumnFamilyStats(PrintStream outs) {
                     outs.println("\t\tMemtable Data Size: " + cfstore.getMemtableDataSize());
                     outs.println("\t\tMemtable Switch Count: " + cfstore.getMemtableSwitchCount());
                     outs.println("\t\tRead Count: " + cfstore.getReadCount());
-                    outs.println("\t\tRead Disk Count: " + cfstore.getReadDiskHits());
                     outs.println("\t\tRead Latency: " + String.format("%01.3f", cfstore.getReadLatency()) + " ms.");
                     outs.println("\t\tWrite Count: " + cfstore.getWriteCount());
                     outs.println("\t\tWrite Latency: " + String.format("%01.3f", cfstore.getWriteLatency()) + " ms.");
