diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/AbstractColumnFactory.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/AbstractColumnFactory.java
index 8e65d998..3926f162 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/AbstractColumnFactory.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/AbstractColumnFactory.java
@@ -104,7 +104,7 @@ public IColumn createColumn(String name)
         if(values.length == 2)
         {
 	        IColumn subColumn = new Column(values[1]);
-	        superColumn.addColumn(values[1], subColumn);
+	        superColumn.addColumn(subColumn);
         }
 		return superColumn;
 	}
@@ -126,7 +126,7 @@ public IColumn createColumn(String name, byte[] value, long timestamp, boolean d
             throw new IllegalArgumentException("Super Column " + name + " in invalid format. Must be in <super column name>:<column name> format.");
         IColumn superColumn = new SuperColumn(values[0]);
         IColumn subColumn = new Column(values[1], value, timestamp, deleted);
-        superColumn.addColumn(values[1], subColumn);
+        superColumn.addColumn(subColumn);
 		return superColumn;
 	}
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
index 721ec327..43a6717b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
@@ -157,7 +157,7 @@ public int serializedSize()
         return size();
     }
 
-    public void addColumn(String name, IColumn column)
+    public void addColumn(IColumn column)
     {
         throw new UnsupportedOperationException("This operation is not supported for simple columns.");
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index cbbedff6..801d0fc9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -637,7 +637,7 @@ static ColumnFamily removeDeleted(ColumnFamily cf, int gcBefore)
                     {
                         if (!subColumn.isMarkedForDelete() || subColumn.getLocalDeletionTime() > gcBefore)
                         {
-                            sc.addColumn(subColumn.name(), subColumn);
+                            sc.addColumn(subColumn);
                         }
                     }
                 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CountFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CountFilter.java
index 174b425c..2024052d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CountFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CountFilter.java
@@ -92,7 +92,7 @@ else if(values.length == 2 && columnFamily.isSuper())
         		for(IColumn subColumn : subColumns)
         		{
         			if (offset_ <=0 ){
-        				filteredSuperColumn.addColumn(subColumn.name(), subColumn);
+        				filteredSuperColumn.addColumn(subColumn);
         				countLimit_--;
         			} else
         				offset_--;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
index 3378bcfd..95cad339 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
@@ -39,7 +39,7 @@
     public byte[] value(String key);
     public Collection<IColumn> getSubColumns();
     public IColumn getSubColumn(String columnName);
-    public void addColumn(String name, IColumn column);
+    public void addColumn(IColumn column);
     public IColumn diff(IColumn column);
     public int getObjectCount();
     public byte[] digest();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
index 89e5ad65..2a437957 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
@@ -288,7 +288,7 @@ ColumnFamily getLocalCopy(String key, String columnFamilyColumn, IFilter filter)
                         columnFamily = cFamily.cloneMeShallow();
                         SuperColumn container = new SuperColumn(superColumn.name());
                         container.markForDeleteAt(superColumn.getLocalDeletionTime(), superColumn.getMarkedForDeleteAt());
-                        container.addColumn(subColumn.name(), subColumn);
+                        container.addColumn(subColumn);
                         columnFamily.addColumn(container);
                     }
                 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java
index 887ab6d4..1702d8c0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java
@@ -77,7 +77,7 @@ else if (values.length == 2 && columnFamily.isSuper())
     		        if ( names_.contains(subColumn.name()) )
     		        {
     		            names_.remove(subColumn.name());
-    		            filteredSuperColumn.addColumn(subColumn.name(), subColumn);
+    		            filteredSuperColumn.addColumn(subColumn);
     		        }
     				if( isDone() )
     				{
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
index bcf5836f..905c3226 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -174,21 +174,21 @@ public long timestamp(String key)
     	throw new IllegalArgumentException("Value was requested for a column that does not exist.");
     }
 
-    public void addColumn(String name, IColumn column)
+    public void addColumn(IColumn column)
     {
     	if (!(column instanceof Column))
     		throw new UnsupportedOperationException("A super column can only contain simple columns.");
-    	IColumn oldColumn = columns_.get(name);
+    	IColumn oldColumn = columns_.get(column.name());
     	if ( oldColumn == null )
         {
-    		columns_.put(name, column);
+    		columns_.put(column.name(), column);
             size_.addAndGet(column.size());
         }
     	else
     	{
     		if (((Column)oldColumn).comparePriority((Column)column) <= 0)
             {
-    			columns_.put(name, column);
+    			columns_.put(column.name(), column);
                 int delta = (-1)*oldColumn.size();
                 /* subtract the size of the oldColumn */
                 size_.addAndGet(delta);
@@ -211,7 +211,7 @@ public void putColumn(IColumn column)
 
         for (IColumn subColumn : column.getSubColumns())
         {
-        	addColumn(subColumn.name(), subColumn);
+        	addColumn(subColumn);
         }
         if (column.getMarkedForDeleteAt() > markedForDeleteAt)
         {
@@ -249,14 +249,14 @@ public IColumn diff(IColumn columnNew)
         	IColumn columnInternal = columns_.get(subColumn.name());
         	if(columnInternal == null )
         	{
-        		columnDiff.addColumn(subColumn.name(), subColumn);
+        		columnDiff.addColumn(subColumn);
         	}
         	else
         	{
             	IColumn subColumnDiff = columnInternal.diff(subColumn);
         		if(subColumnDiff != null)
         		{
-            		columnDiff.addColumn(subColumn.name(), subColumnDiff);
+            		columnDiff.addColumn(subColumnDiff);
         		}
         	}
         }
@@ -371,7 +371,7 @@ private void fillSuperColumn(IColumn superColumn, DataInputStream dis) throws IO
         for ( int i = 0; i < size; ++i )
         {
             IColumn subColumn = Column.serializer().deserialize(dis);
-            superColumn.addColumn(subColumn.name(), subColumn);
+            superColumn.addColumn(subColumn);
         }
     }
 
@@ -423,7 +423,7 @@ public IColumn deserialize(DataInputStream dis, String name, IFilter filter) thr
                     column = Column.serializer().deserialize(dis, filter);
                     if(column != null)
                     {
-                        superColumn.addColumn(column.name(), column);
+                        superColumn.addColumn(column);
                         column = null;
                         if(filter.isDone())
                         {
@@ -457,7 +457,7 @@ public IColumn deserialize(DataInputStream dis, String name, IFilter filter) thr
                     IColumn subColumn = Column.serializer().deserialize(dis, names[1], filter);
                     if ( subColumn != null )
                     {
-                        superColumn.addColumn(subColumn.name(), subColumn);
+                        superColumn.addColumn(subColumn);
                         break;
                     }
                 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java
index a6f1ac21..684d2db1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java
@@ -92,7 +92,7 @@ else if (values.length == 2 && columnFamily.isSuper())
         		{
 	    			if (  subColumn.timestamp()  >=  timeLimit_ )
 	    			{
-			            filteredSuperColumn.addColumn(subColumn.name(), subColumn);
+			            filteredSuperColumn.addColumn(subColumn);
 	    				++i;
 	    			}
 	    			else
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java
index 6a6bbb97..f2952f4a 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java
@@ -70,24 +70,24 @@ public void testRangeFilterOnSuperColumns() throws IOException
         byte[] val = "test value".getBytes();
         SuperColumn sc = null;
         sc = new SuperColumn("a");
-        sc.addColumn("a1", new Column("a1", val, System.currentTimeMillis()));
-        sc.addColumn("a2", new Column("a2", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("a1", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("a2", val, System.currentTimeMillis()));
         cf.addColumn(sc);
         sc = new SuperColumn("b");
-        sc.addColumn("b1", new Column("b1", val, System.currentTimeMillis()));
-        sc.addColumn("b2", new Column("b2", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("b1", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("b2", val, System.currentTimeMillis()));
         cf.addColumn(sc);
         sc = new SuperColumn("c");
-        sc.addColumn("c1", new Column("c1", val, System.currentTimeMillis()));
-        sc.addColumn("c2", new Column("c2", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("c1", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("c2", val, System.currentTimeMillis()));
         cf.addColumn(sc);
         sc = new SuperColumn("d");
-        sc.addColumn("d1", new Column("d1", val, System.currentTimeMillis()));
-        sc.addColumn("d2", new Column("d2", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("d1", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("d2", val, System.currentTimeMillis()));
         cf.addColumn(sc);
         sc = new SuperColumn("e");
-        sc.addColumn("e1", new Column("e1", val, System.currentTimeMillis()));
-        sc.addColumn("e2", new Column("e2", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("e1", val, System.currentTimeMillis()));
+        sc.addColumn(new Column("e2", val, System.currentTimeMillis()));
         cf.addColumn(sc);
 
         IFilter f = new RangeFilter("b", "d");
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RowTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RowTest.java
index 0bbc9d07..b8a236f0 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RowTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RowTest.java
@@ -25,7 +25,7 @@ public void testDiffColumnFamily()
     public void testDiffSuperColumn()
     {
         SuperColumn sc1 = new SuperColumn("one");
-        sc1.addColumn("subcolumn", new Column("subcolumn", "A".getBytes(), 0));
+        sc1.addColumn(new Column("subcolumn", "A".getBytes(), 0));
 
         SuperColumn sc2 = new SuperColumn("one");
         sc2.markForDeleteAt(0, 0);
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/SuperColumnTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/SuperColumnTest.java
index 11c0062c..5bc55e46 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/SuperColumnTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/SuperColumnTest.java
@@ -10,7 +10,7 @@
     public void testMissingSubcolumn() {
     	byte[] val = "sample value".getBytes();
     	SuperColumn sc = new SuperColumn("sc1");
-    	sc.addColumn("col1", new Column("col1",val,1L));
+    	sc.addColumn(new Column("col1",val,1L));
     	assertNotNull(sc.getSubColumn("col1"));
     	assertNull(sc.getSubColumn("col2"));
     }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
index 9bbf9624..49450bc8 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
@@ -129,11 +129,11 @@ public void testGetRowSuperColumnOffsetCount() throws Throwable
         RowMutation rm = new RowMutation(TABLE_NAME,TEST_KEY);
         ColumnFamily cf = new ColumnFamily("Super1","Super");
         SuperColumn sc1 = new SuperColumn("sc1");
-        sc1.addColumn("col1", new Column("col1","val1".getBytes(), 1L));
-        sc1.addColumn("col2", new Column("col2","val2".getBytes(), 1L));
+        sc1.addColumn(new Column("col1","val1".getBytes(), 1L));
+        sc1.addColumn(new Column("col2","val2".getBytes(), 1L));
         SuperColumn sc2 = new SuperColumn("sc2");
-        sc2.addColumn("col3", new Column("col3","val3".getBytes(), 1L));
-        sc2.addColumn("col4", new Column("col4","val4".getBytes(), 1L));
+        sc2.addColumn(new Column("col3","val3".getBytes(), 1L));
+        sc2.addColumn(new Column("col4","val4".getBytes(), 1L));
         cf.addColumn(sc1);
         cf.addColumn(sc2);
         rm.add(cf);
