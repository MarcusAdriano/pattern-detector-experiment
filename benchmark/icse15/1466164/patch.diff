diff --git a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
index 1dca8693..2a6d57f2 100644
--- a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
+++ b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
@@ -1534,7 +1534,7 @@ private void runBulkInsert(
         // bulk insert with replace to empty table/one index from an empty file 
         // import empty_file.dat into EMPTY_TABLE 
         doImportTable(
-                "APP", "EMPTY_TABLE", emptyFileName, "|", "``", null, 1);
+                "APP", "EMPTY_TABLE", emptyFileName, "|", "`", null, 1);
 
         commit();
 
diff --git a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index 3fc6be6a..6dfbd000 100644
--- a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -161,7 +161,7 @@ protected void decorateSQL(Statement s) throws SQLException
                   "language java parameter style java");
 
                 s.executeUpdate(
-                  "create function EMC.GETARTICLE(path VARCHAR(40)) " +
+                  "create function EMC.GETARTICLE(path VARCHAR(60)) " +
                   "RETURNS VARCHAR(256) " +
                   "NO SQL " +
                   "external name 'org.apache.derbyTesting.databaseclassloader.emc.getArticle' " +
diff --git a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
index 1e6a7e29..7ad10977 100644
--- a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
+++ b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
@@ -106,6 +106,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     protected static  final   String  BAD_CAST = "42846";
     protected static  final   String  DUPLICATE_CLAUSE = "42XAJ";
     protected static  final   String  FORBIDDEN_DROP_TRIGGER = "X0Y24";
+    protected static  final   String  STRING_TRUNCATION = "22001";
 
     ///////////////////////////////////////////////////////////////////////////////////
     //
diff --git a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index ac681426..93d676be 100644
--- a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -2406,10 +2406,10 @@ public  void    test_017_padding()
              "create table t_cc_char\n" +
              "(\n" +
              "    a char( 10 ),\n" +
-             "    b char( 5 ) generated always as( upper( a ) ),\n" +
+             "    b char( 5 ) generated always as( cast(upper( a ) as char(5))),\n" +
              "    c char( 10 ) generated always as( upper( a ) ),\n" +
              "    d char( 15 ) generated always as( upper( a ) ),\n" +
-             "    e varchar( 5 ) generated always as( upper( a ) ),\n" +
+             "    e varchar( 5 ) generated always as( cast(upper( a ) as varchar(5))),\n" +
              "    f varchar( 10 ) generated always as( upper( a ) ),\n" +
              "    g varchar( 15 ) generated always as( upper( a ) )\n" +
              ")\n"
@@ -2420,10 +2420,10 @@ public  void    test_017_padding()
              "create table t_cc_varchar\n" +
              "(\n" +
              "    a varchar( 10 ),\n" +
-             "    b char( 5 ) generated always as( upper( a ) ),\n" +
+             "    b char( 5 ) generated always as( cast(upper( a ) as char(5))),\n" +
              "    c char( 10 ) generated always as( upper( a ) ),\n" +
              "    d char( 15 ) generated always as( upper( a ) ),\n" +
-             "    e varchar( 5 ) generated always as( upper( a ) ),\n" +
+             "    e varchar( 5 ) generated always as( cast(upper( a ) as varchar(5))),\n" +
              "    f varchar( 10 ) generated always as( upper( a ) ),\n" +
              "    g varchar( 15 ) generated always as( upper( a ) )\n" +
              ")\n"
@@ -2526,12 +2526,12 @@ public  void    test_018_alterDatatype()
         goodStatement
             (
              conn,
-             "create table t_atac_3( a varchar( 5 ), b varchar( 5 ) generated always as ( upper( a )  ) )"
+             "create table t_atac_3( a varchar( 5 ), b varchar( 5 ) generated always as ( cast(upper( a ) as varchar(5)) ) )"
              );
         goodStatement
             (
              conn,
-             "create table t_atac_4( a varchar( 5 ) for bit data,  b varchar( 5 ) for bit data generated always as ( a )  )"
+             "create table t_atac_4( a varchar( 5 ) for bit data,  b varchar( 5 ) for bit data generated always as ( cast(a as varchar( 5 ) for bit data))  )"
              );
 
         //
@@ -5536,6 +5536,44 @@ public void test_derby_4779()
         );
     }
 
+
+    // Derby 5749
+    public void test_derby_5749()
+        throws Exception
+    {
+        Connection conn = getConnection();
+
+        goodStatement
+        (
+            conn,
+            "create table t_5749\n" +
+            "(c varchar(5) generated always as ('--' || b), b varchar(5))\n"
+        );
+
+        // fails on truncation
+        expectExecutionError
+        (
+            conn,
+            STRING_TRUNCATION,
+            "insert into t_5749 values (default, '12345')"
+        );
+
+        // Try an update case:
+        goodStatement
+        (
+            conn,
+            "insert into t_5749 values (default, '123')"
+        );
+
+        expectExecutionError
+        (
+            conn,
+            STRING_TRUNCATION,
+            "update t_5749 set b='12345'"
+        );
+
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
diff --git a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java
index 5ccb661f..a7aad691 100644
--- a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java
+++ b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 package org.apache.derbyTesting.functionTests.tests.lang;
 
 import java.io.UnsupportedEncodingException;
+import java.sql.CallableStatement;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -641,6 +642,52 @@ public void test_4459() throws Exception
         assertStatementError( CANNOT_STUFF_NULL_INTO_PRIMITIVE, s, "values( negateInt( getNullInt() ) )" );
     }
     
+    /**
+     * DERBY-5749: Too long (non-blank) argument for VARCHAR parameter does not
+     * throw as expected.
+     */
+    public void test_5749() throws SQLException
+    {
+        Statement s = createStatement();
+        s.executeUpdate("create table t5749(v varchar(5))");
+        s.executeUpdate(
+            "create procedure p5749 (a varchar(5)) modifies sql data " +
+            "external name '" + RoutineTest.class.getName() + ".p5749' " +
+            "language java parameter style java");
+        CallableStatement cs = prepareCall("call p5749(?)");
+        cs.setString(1, "123456");
+
+        // This silently truncates before fix of DERBY-5749
+        try {
+            cs.execute();
+            fail();
+        } catch (SQLException e) {
+            assertSQLState("22001", e);
+        }
+
+        // This silently truncates also
+        try {
+            s.executeUpdate("call p5749('123456')");
+            fail();
+        } catch (SQLException e) {
+            assertSQLState("22001", e);
+        }
+
+
+        PreparedStatement ps = prepareStatement("insert into t5749 values(?)");
+        ps.setString(1, "123456");
+        // This does not truncate
+        try {
+            ps.execute();
+            fail();
+        } catch (SQLException e) {
+            assertSQLState("22001", e);
+        }
+    }
+
+
+
+
     /*
     ** Routine implementations called from the tests but do
     *  not use DriverManager so that this test can be used on
@@ -689,5 +736,7 @@ public static int checkCount(int count)
     public static int negateInt( int arg ) { return -arg; }
     public static Integer getNullInt() { return null; }
     
+    public static void p5749 (String s) {
+    }
 }
 
diff --git a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java
index 3086e2b5..4691277e 100644
--- a/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java
+++ b/db/derby/code/branches/10.8.3.1_testcompat/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java
@@ -2044,7 +2044,7 @@ public void testImportExportProcedureNegative() throws Exception
         
         cSt = prepareCall(
             "call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP', 'T1' , "
-            + "'extinout/t1.dat' , '\\a', '\\', null) ");
+            + "'extinout/t1.dat' , '\\', '\\', null) ");
         assertStatementError("XIE0J", cSt);
                 
         //DO A VALID EXPORT AND  IMPORT
