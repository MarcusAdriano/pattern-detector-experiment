diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/AsciiStream.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/AsciiStream.java
index 9967961e..35f0c863 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/AsciiStream.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/AsciiStream.java
@@ -19,11 +19,17 @@
 */
 package org.apache.derby.client.am;
 
+import java.io.StringReader;
+
 public class AsciiStream extends java.io.InputStream {
     private java.io.Reader reader_;
     private String materializedString_;
     private int charsRead_ = 0;
 
+	public AsciiStream(String materializedString){
+		this(materializedString,new StringReader(materializedString));
+	}
+	
     public AsciiStream(String materializedString, java.io.Reader reader) {
         reader_ = reader;
         materializedString_ = materializedString;
@@ -34,7 +40,11 @@ public int read() throws java.io.IOException {
         ++charsRead_;
         if (oneChar != -1) // if not eos
         {
-            return 0x00ff & oneChar;
+		if(oneChar <= 0x00ff)
+			return oneChar;
+		else
+			return 0x003f;
+		
         } else {
             return -1; // end of stream
         }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index b167fb9f..0df9fe48 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -939,9 +939,8 @@ public String getString(int column) throws SqlException {
         java.io.InputStream result = null;
         if (wasNonNullSensitiveUpdate(column)) {
 		
-		result = new java.io.ByteArrayInputStream
-			(convertToAsciiByteArray((String) agent_.crossConverters_.setObject(java.sql.Types.CHAR,
-											    updatedColumns_[column - 1])));
+		result = new AsciiStream((String) agent_.crossConverters_.setObject(java.sql.Types.CHAR,
+										    updatedColumns_[column - 1]));
         } else {
             result = isNull(column) ? null : cursor_.getAsciiStream(column);
         }
@@ -3964,25 +3963,6 @@ private void resetRowsetSqlca() {
     }
 
 	
-	private static byte[] convertToAsciiByteArray(String original){
-
-		byte[] result = new byte[original.length()];
-
-		for(int i = 0;
-		    i < original.length();
-		    i ++){
-			
-			if(original.charAt(i) <= 0x00ff)
-				result[i] = (byte) original.charAt(i);
-			else
-				result[i] = 0x003f;
-		}
-
-		return result;
-
-	}
-	
-	
 	private CloseFilterInputStream createCloseFilterInputStream(java.io.InputStream is) throws SqlException {
 		
 		if(is == null){
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
index 0c6c8a8d..59cc36f7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
@@ -38,6 +38,8 @@
 import java.io.FileInputStream;
 import java.io.BufferedInputStream;
 import java.util.zip.CRC32;
+import java.io.Reader;
+import java.io.StringReader;
 
 /**
  * Test of JDBC result set Stream calls.
@@ -281,6 +283,9 @@ public static void main(String[] args) {
 			ppw.close();
 			rs.close();
 			stmt.close();
+			
+			TestOfGetAsciiStream.executeTestOfGetAsciiStream(con);
+
 			con.close();
 
 		}
@@ -302,4 +307,166 @@ static private void dumpSQLExceptions (SQLException se) {
 			se = se.getNextException();
 		}
 	}
+	
+	
+	static class TestOfGetAsciiStream {
+		
+		final static String TEST_STRING_DATA = 
+			"ABCDEFG" + 
+			"\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5" + 
+			"\u00ff\u0100" + 
+			"\u3042\u3044\u3046\u3048\u304a";
+				
+		
+		static private void executeTestOfGetAsciiStream(Connection conn) throws SQLException {
+			
+			System.out.println("Test of getAsciiStream");
+			createTestTable(conn);
+			executeTestRun(conn);
+
+		}
+		
+
+		static private void createTestTable(Connection conn) throws SQLException {
+
+			PreparedStatement st = null;
+			
+			try{
+				st = conn.prepareStatement("create table t3(text_data clob)");
+				st.executeUpdate();
+				
+			}finally{
+				if(st != null)
+					st.close();
+				
+			}
+			
+		}
+		
+
+		static private void executeTestRun(Connection conn) throws SQLException {
+			
+			insertTestData(conn);
+			printTestData(conn);
+			
+		}
+
+
+		static private void insertTestData(Connection conn) throws SQLException {
+			
+			PreparedStatement st = null;
+			
+			try{
+				
+				st = conn.prepareStatement("insert into t3(text_data) values(?)");
+				st.setCharacterStream(1,
+						      new StringReader(TEST_STRING_DATA),
+						      TEST_STRING_DATA.length());
+				st.executeUpdate();
+				
+			}finally{
+				if(st != null)
+					st.close();
+				
+			}
+
+		}
+
+
+		static private void printTestData(Connection conn) throws SQLException {
+			
+			PreparedStatement st = null;
+			ResultSet rs = null;
+			
+			try{
+				st = conn.prepareStatement("select text_data from t3");
+				rs = st.executeQuery();
+				
+				while(rs.next()){
+					printTestDataInARowViaStream(rs);
+					printTestDataInARowViaReader(rs);
+				}
+				
+			}catch(IOException e){
+				System.out.println("FAIL -- unexpected IOException: " + e.toString());
+				e.printStackTrace();
+				
+			}finally{
+				if(rs != null){
+					rs.close();
+				}
+
+				if(st != null){
+					st.close();
+				}
+				
+			}
+		}
+		
+		
+		static private void printTestDataInARowViaStream(ResultSet rs) throws SQLException, 
+										      IOException{
+			
+			InputStream is = null;
+
+			try{
+				is = rs.getAsciiStream(1);
+			
+				for(int c = is.read();
+				    c > -1;
+				    c = is.read()){
+					
+					System.out.print(getCharacterCodeString((char) c));
+				}
+				
+				System.out.println();
+				
+			}finally{
+				if(is != null)
+					is.close();
+			}
+				
+		}
+
+
+		static private void printTestDataInARowViaReader(ResultSet rs) throws SQLException, 
+										      IOException{
+
+			Reader reader = null;
+			
+			try{
+				reader = rs.getCharacterStream(1);
+
+				for(int c = reader.read();
+				    c > -1;
+				    c = reader.read()){
+					
+					System.out.print(getCharacterCodeString((char) c));
+
+				}
+			
+				System.out.println();
+				
+			}finally{
+				if(reader != null){
+					reader.close();
+				}
+			}
+			
+		}
+		
+		
+		private static String getCharacterCodeString(char c){
+
+			String hexString = Integer.toHexString((int) c);
+			
+			while(hexString.length() < 4){
+				hexString = "0" + hexString;
+			}
+			
+			return "U+" + hexString;
+		}
+		
+	}
+
 }
