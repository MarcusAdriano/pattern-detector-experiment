diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java
index 1ac7ad55..869c0179 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java
@@ -24,8 +24,15 @@
 import java.util.Map;
 
 import com.google.common.base.Charsets;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import com.google.common.io.Closeables;
 import com.google.common.io.Files;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.Set;
 import org.apache.commons.cli2.CommandLine;
 import org.apache.commons.cli2.Group;
 import org.apache.commons.cli2.Option;
@@ -44,12 +51,17 @@
 import org.apache.mahout.math.VectorWritable;
 import org.apache.mahout.utils.vectors.io.SequenceFileVectorWriter;
 import org.apache.mahout.utils.vectors.io.VectorWriter;
+import org.codehaus.jackson.map.ObjectMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 public final class Driver {
+
   private static final Logger log = LoggerFactory.getLogger(Driver.class);
   
+  /** used for JSON serialization/deserialization */
+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
+
   private Driver() { }
   
   public static void main(String[] args) throws IOException {
@@ -79,6 +91,9 @@ public static void main(String[] args) throws IOException {
       abuilder.withName("dictOut").withMinimum(1).withMaximum(1).create()).withDescription(
       "The file to output the label bindings").withShortName("t").create();
     
+    Option jsonDictonaryOpt = obuilder.withLongName("json-dictonary").withRequired(false)
+            .withDescription("Write dictonary in JSON format").withShortName("j").create();
+    
     Option delimiterOpt = obuilder.withLongName("delimiter").withRequired(false).withArgument(
       abuilder.withName("delimiter").withMinimum(1).withMaximum(1).create()).withDescription(
       "The delimiter for outputing the dictionary").withShortName("l").create();
@@ -86,8 +101,9 @@ public static void main(String[] args) throws IOException {
     Option helpOpt = obuilder.withLongName("help").withDescription("Print out help").withShortName("h")
         .create();
     Group group = gbuilder.withName("Options").withOption(inputOpt).withOption(outputOpt).withOption(maxOpt)
-        .withOption(helpOpt).withOption(dictOutOpt).withOption(delimiterOpt)
+        .withOption(helpOpt).withOption(dictOutOpt).withOption(jsonDictonaryOpt).withOption(delimiterOpt)
         .create();
+
     try {
       Parser parser = new Parser();
       parser.setGroup(group);
@@ -112,6 +128,7 @@ public static void main(String[] args) throws IOException {
 
         String delimiter = cmdLine.hasOption(delimiterOpt) ? cmdLine.getValue(delimiterOpt).toString() : "\t";
         File dictOut = new File(cmdLine.getValue(dictOutOpt).toString());
+        boolean jsonDictonary = cmdLine.hasOption(jsonDictonaryOpt);
         ARFFModel model = new MapBackedARFFModel();
         if (input.exists() && input.isDirectory()) {
           File[] files = input.listFiles(new FilenameFilter() {
@@ -122,10 +139,10 @@ public boolean accept(File file, String name) {
           });
           
           for (File file : files) {
-            writeFile(outDir, file, maxDocs, model, dictOut, delimiter);
+            writeFile(outDir, file, maxDocs, model, dictOut, delimiter, jsonDictonary);
           }
         } else {
-          writeFile(outDir, input, maxDocs, model, dictOut, delimiter);
+          writeFile(outDir, input, maxDocs, model, dictOut, delimiter, jsonDictonary);
         }
       }
       
@@ -135,29 +152,93 @@ public boolean accept(File file, String name) {
     }
   }
   
-  private static void writeLabelBindings(File dictOut, ARFFModel arffModel, String delimiter) throws IOException {
-    Map<String,Integer> labels = arffModel.getLabelBindings();
+  protected static void writeLabelBindings(File dictOut, ARFFModel arffModel, String delimiter, boolean jsonDictonary)
+    throws IOException {
     Writer writer = Files.newWriterSupplier(dictOut, Charsets.UTF_8, true).getOutput();
     try {
+      if (jsonDictonary) {
+        writeLabelBindingsJSON(writer, arffModel);
+      } else {
+        writeLabelBindings(writer, arffModel, delimiter);
+      }
+    } finally {
+      Closeables.closeQuietly(writer);
+    }
+  }
+
+  protected static void writeLabelBindingsJSON(Writer writer, ARFFModel arffModel) throws IOException  {
+
+    // Turn the map of labels into a list order by order of appearance
+    List<Entry<String, Integer>> attributes = Lists.newArrayList();
+    attributes.addAll(arffModel.getLabelBindings().entrySet());
+    Collections.sort(attributes, new Comparator<Map.Entry<String, Integer>>(){
+      @Override
+      public int compare(Entry<String, Integer> t, Entry<String, Integer> t1) {
+        return t.getValue().compareTo(t1.getValue());
+      }
+    });
+    
+    // write a map for each object
+    List<Map<String, Object>> jsonObjects = Lists.newLinkedList();
+    for (int i = 0; i < attributes.size(); i++) { 
+      
+      Entry<String, Integer> modelRepresentation = attributes.get(i);
+      Map<String, Object> jsonRepresentation = Maps.newHashMap();
+      jsonObjects.add(jsonRepresentation);
+      // the last one is the class label
+      jsonRepresentation.put("label", i < (attributes.size() - 1) ? String.valueOf(false) : String.valueOf(true));
+      String attribute = modelRepresentation.getKey();
+      jsonRepresentation.put("attribute", attribute);
+      Map<String, Integer> nominalValues = arffModel.getNominalMap().get(attribute);
+
+      if (nominalValues != null) {
+        String[] values = nominalValues.keySet().toArray(new String[1]);
+
+        jsonRepresentation.put("values", values);
+        jsonRepresentation.put("type", "categorical");
+      } else {
+        jsonRepresentation.put("type", "numerical");
+      }
+    }
+    writer.write(OBJECT_MAPPER.writeValueAsString(jsonObjects));
+  }
+
+  protected static void writeLabelBindings(Writer writer, ARFFModel arffModel, String delimiter) throws IOException {
+
+    Map<String, Integer> labels = arffModel.getLabelBindings();
       writer.write("Label bindings for Relation " + arffModel.getRelation() + '\n');
-      for (Map.Entry<String,Integer> entry : labels.entrySet()) {
+    for (Map.Entry<String, Integer> entry : labels.entrySet()) {
         writer.write(entry.getKey());
         writer.write(delimiter);
         writer.write(String.valueOf(entry.getValue()));
         writer.write('\n');
       }
       writer.write('\n');
-    } finally {
-      Closeables.closeQuietly(writer);
+    writer.write("Values for nominal attributes\n");
+    // emit allowed values for NOMINAL/categorical/enumerated attributes
+    Map<String, Map<String, Integer>> nominalMap = arffModel.getNominalMap();
+    // how many nominal attributes
+    writer.write(String.valueOf(nominalMap.size()) + "\n");
+    for (String attribute : nominalMap.keySet()) {
+      // the label of this attribute
+      writer.write(attribute + "\n");
+      Set<Entry<String, Integer>> attributeValues = nominalMap.get(attribute).entrySet();
+      // how many values does this attribute have
+      writer.write(attributeValues.size() + "\n");
+      for (Map.Entry<String, Integer> value : nominalMap.get(attribute).entrySet()) {
+        // the value and the value index
+        writer.write(String.format("%s%s%s\n", value.getKey(), delimiter, value.getValue().toString()));
+      }
     }
   }
   
-  private static void writeFile(String outDir,
+  protected static void writeFile(String outDir,
                                 File file,
                                 long maxDocs,
                                 ARFFModel arffModel,
                                 File dictOut,
-                                String delimiter) throws IOException {
+                                String delimiter,
+                                boolean jsonDictonary) throws IOException {
     log.info("Converting File: {}", file);
     ARFFModel model = new MapBackedARFFModel(arffModel.getWords(), arffModel.getWordCount() + 1, arffModel
         .getNominalMap());
@@ -167,7 +248,7 @@ private static void writeFile(String outDir,
     VectorWriter vectorWriter = getSeqFileWriter(outFile);
     try {
       long numDocs = vectorWriter.write(iteratable, maxDocs);
-      writeLabelBindings(dictOut, model, delimiter);
+      writeLabelBindings(dictOut, model, delimiter, jsonDictonary);
       log.info("Wrote: {} vectors", numDocs);
     } finally {
       Closeables.closeQuietly(vectorWriter);
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java
index c2e20666..942014f6 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java
@@ -17,6 +17,7 @@
 
 package org.apache.mahout.utils.vectors.arff;
 
+import java.io.IOException;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -24,6 +25,8 @@
 import java.util.Locale;
 import java.util.Map;
 
+import com.google.common.base.Charsets;
+import com.google.common.io.Resources;
 import org.apache.mahout.math.DenseVector;
 import org.apache.mahout.math.RandomAccessSparseVector;
 import org.apache.mahout.math.Vector;
@@ -34,17 +37,10 @@
 
   @Test
   public void testValues() throws Exception {
-    StringBuilder builder = new StringBuilder();
-    builder.append("%comments").append('\n').append("@RELATION Mahout").append('\n').append(
-      "@ATTRIBUTE foo numeric").append('\n').append("@ATTRIBUTE bar numeric").append('\n').append(
-      "@ATTRIBUTE timestamp DATE \"yyyy-MM-dd HH:mm:ss\"").append('\n').append("@ATTRIBUTE junk string")
-        .append('\n').append("@ATTRIBUTE theNominal {c,b,a}").append('\n').append("@DATA").append('\n')
-        .append("1,2, \"2009-01-01 5:55:55\", foo, c").append('\n').append("2,3").append('\n').append(
-          "{0 5,1 23}").append('\n');
-    ARFFModel model = new MapBackedARFFModel();
-    ARFFVectorIterable iterable = new ARFFVectorIterable(builder.toString(), model);
+    ARFFVectorIterable iterable = readModelFromResource("sample.arff");
+
     assertEquals("Mahout", iterable.getModel().getRelation());
-    Map<String,Integer> bindings = iterable.getModel().getLabelBindings();
+    Map<String, Integer> bindings = iterable.getModel().getLabelBindings();
     assertNotNull(bindings);
     assertEquals(5, bindings.size());
     Iterator<Vector> iter = iterable.iterator();
@@ -73,8 +69,7 @@ public void testValues() throws Exception {
 
   @Test
   public void testDense() throws Exception {
-    ARFFModel model = new MapBackedARFFModel();
-    Iterable<Vector> iterable = new ARFFVectorIterable(SAMPLE_DENSE_ARFF, model);
+    Iterable<Vector> iterable = readModelFromResource("sample-dense.arff");
     Vector firstVector = iterable.iterator().next();
     assertEquals(1.0, firstVector.get(0), 0);
     assertEquals(65.0, firstVector.get(1), 0);
@@ -91,8 +86,7 @@ public void testDense() throws Exception {
 
   @Test
   public void testSparse() throws Exception {
-    ARFFModel model = new MapBackedARFFModel();
-    Iterable<Vector> iterable = new ARFFVectorIterable(SAMPLE_SPARSE_ARFF, model);
+    Iterable<Vector> iterable = readModelFromResource("sample-sparse.arff");
     
     Vector firstVector = iterable.iterator().next();
     assertEquals(23.1, firstVector.get(1), 0);
@@ -109,44 +103,41 @@ public void testSparse() throws Exception {
 
   @Test
   public void testNonNumeric() throws Exception {
-    
     MapBackedARFFModel model = new MapBackedARFFModel();
-    ARFFVectorIterable iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
+    ARFFVectorIterable iterable = getVectors("non-numeric-1.arff", model);
     int count = 0;
     for (Vector vector : iterable) {
       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
       count++;
     }
     
-    iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
+    iterable = getVectors("non-numeric-1.arff", model);
     Iterator<Vector> iter = iterable.iterator();
     Vector firstVector = iter.next();
     
     assertEquals(1.0, firstVector.get(2), 0);
     
     assertEquals(10, count);
-    Map<String,Map<String,Integer>> nominalMap = iterable.getModel().getNominalMap();
+    Map<String, Map<String, Integer>> nominalMap = iterable.getModel().getNominalMap();
     assertNotNull(nominalMap);
     assertEquals(1, nominalMap.size());
-    Map<String,Integer> noms = nominalMap.get("bar");
+    Map<String, Integer> noms = nominalMap.get("bar");
     assertNotNull("nominals for bar are null", noms);
     assertEquals(2, noms.size());
-    Map<Integer,ARFFType> integerARFFTypeMap = model.getTypeMap();
+    Map<Integer, ARFFType> integerARFFTypeMap = model.getTypeMap();
     assertNotNull("Type map null", integerARFFTypeMap);
     assertEquals(5, integerARFFTypeMap.size());
-    Map<String,Long> words = model.getWords();
+    Map<String, Long> words = model.getWords();
     assertNotNull("words null", words);
     assertEquals(10, words.size());
-    // System.out.println("Words: " + words);
-    Map<Integer,DateFormat> integerDateFormatMap = model.getDateMap();
+    Map<Integer, DateFormat> integerDateFormatMap = model.getDateMap();
     assertNotNull("date format null", integerDateFormatMap);
     assertEquals(1, integerDateFormatMap.size());
   }
 
   @Test
   public void testDate() throws Exception {
-    MapBackedARFFModel model = new MapBackedARFFModel();
-    ARFFVectorIterable iterable = new ARFFVectorIterable(DATE_ARFF, model);
+    ARFFVectorIterable iterable = readModelFromResource("date.arff");
     Iterator<Vector> iter = iterable.iterator();
     Vector firstVector = iter.next();
     
@@ -185,7 +176,7 @@ public void testDate() throws Exception {
   @Test
   public void testMultipleNoms() throws Exception {
     MapBackedARFFModel model = new MapBackedARFFModel();
-    ARFFVectorIterable iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
+    ARFFVectorIterable iterable = getVectors("non-numeric-1.arff", model);
     int count = 0;
     for (Vector vector : iterable) {
       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
@@ -204,12 +195,13 @@ public void testMultipleNoms() throws Exception {
     Map<String,Long> words = model.getWords();
     assertNotNull("words null", words);
     assertEquals(10, words.size());
-    // System.out.println("Words: " + words);
+
     Map<Integer,DateFormat> integerDateFormatMap = model.getDateMap();
     assertNotNull("date format null", integerDateFormatMap);
     assertEquals(1, integerDateFormatMap.size());
-    model = new MapBackedARFFModel(model.getWords(), model.getWordCount(), model.getNominalMap());
-    iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF2, model);
+
+
+    iterable = getVectors("non-numeric-2.arff", model);
     count = 0;
     for (Vector vector : iterable) {
       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
@@ -248,20 +240,9 @@ public void testNumerics() throws Exception {
 
   @Test
   public void testQuotes() throws Exception {
-    
     // ARFF allows quotes on identifiers
-    String arff = "@RELATION 'quotes'\n"
-        + "@ATTRIBUTE 'theNumeric' NUMERIC\n"
-        + "@ATTRIBUTE \"theInteger\" INTEGER\n"
-        + "@ATTRIBUTE theReal REAL\n"
-        + "@ATTRIBUTE theNominal {\"double-quote\", 'single-quote', no-quote}\n"
-        + "@DATA\n"
-        + "1.0,2,3.0,\"no-quote\"\n"
-        + "4.0,5,6.0,single-quote\n"
-        + "7.0,8,9.0,'double-quote'\n"
-      ;
     ARFFModel model = new MapBackedARFFModel();
-    ARFFVectorIterable iterable = new ARFFVectorIterable(arff, model);
+    ARFFVectorIterable iterable = getVectors("quoted-id.arff", model);
     model = iterable.getModel();
     assertNotNull(model);
     assertEquals("quotes", model.getRelation());
@@ -295,92 +276,14 @@ public void testQuotes() throws Exception {
     assertEquals(nominalMap.get("double-quote"), it.next().get(3), EPSILON);
   }
 
-  private static final String SAMPLE_DENSE_ARFF = "   % Comments\n" + "   % \n" + "   % Comments go here"
-                                                  + "   % \n" + "   @RELATION golf\n" + '\n'
-                                                  + "   @ATTRIBUTE outlook {sunny,overcast, rain}\n"
-                                                  + "   @ATTRIBUTE temperature   NUMERIC\n"
-                                                  + "   @ATTRIBUTE humidity  NUMERIC\n"
-                                                  + "   @ATTRIBUTE windy {false, true}\n" 
-                                                  + "   @ATTRIBUTE class {dont_play, play}\n" + "  \n" + '\n'  
-                                                  + '\n' + "   @DATA\n" 
-                                                  + "   sunny,    65, ?, false, dont_play, {2} \n"
-                                                  + "   sunny,    80, 90,  true, dont_play\n" 
-                                                  + "   overcast, 83, 78, false, play ,{3} \n"
-                                                  + "   rain,     70, 96, false, play\n" 
-                                                  + "   rain,     68, 80, false, play\n"
-                                                  + "   rain,     65, 70, true, play\n";
-  
-  private static final String SAMPLE_SPARSE_ARFF = "   % Comments\n" + "   % \n" + "   % Comments go here"
-                                                   + "   % \n" + "   @RELATION Mahout\n" + '\n'
-                                                   + "   @ATTRIBUTE foo  NUMERIC\n"
-                                                   + "   @ATTRIBUTE bar   NUMERIC\n"
-                                                   + "   @ATTRIBUTE hockey  NUMERIC\n"
-                                                   + "   @ATTRIBUTE football   NUMERIC\n"
-                                                   + "   @ATTRIBUTE tennis   NUMERIC\n" + "  \n" + '\n'
-                                                   + '\n' + "   @DATA\n" + "   {1 23.1,2 3.23,3 1.2,4 ?} {5}\n"
-                                                   + "   {0 2.9}\n" + "   {0 2.7,2 3.2,3 1.3,4 0.2} {10} \n"
-                                                   + "   {1 2.6,2 3.1,3 1.23,4 0.2}\n"
-                                                   + "   {1 23.0,2 3.6,3 1.2,4 0.2}\n"
-                                                   + "   {0 23.2,1 3.9,3 1.7,4 0.2}\n"
-                                                   + "   {0 2.6,1 3.2,2 1.2,4 0.3}\n"
-                                                   + "   {1 23.0,2 3.2,3 1.23}\n"
-                                                   + "   {1 2.2,2 2.94,3 0.2}\n" + "   {1 2.9,2 3.1}\n";
-  
-  private static final String NON_NUMERIC_ARFF = "   % Comments\n" + "   % \n" + "   % Comments go here"
-                                                 + "   % \n" + "   @RELATION Mahout\n" + '\n'
-                                                 + "   @ATTRIBUTE junk  NUMERIC\n"
-                                                 + "   @ATTRIBUTE foo  NUMERIC\n"
-                                                 + "   @ATTRIBUTE bar   {c,d}\n"
-                                                 + "   @ATTRIBUTE hockey  string\n"
-                                                 + "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" + "  \n"
-                                                 + '\n' + '\n' + "   @DATA\n"
-                                                 + "   {2 c,3 gretzky,4 1973-10-23}\n"
-                                                 + "   {1 2.9,2 d,3 orr,4 1973-11-23}\n"
-                                                 + "   {2 c,3 bossy,4 1981-10-23}\n"
-                                                 + "   {1 2.6,2 c,3 lefleur,4 1989-10-23}\n"
-                                                 + "   {3 esposito,4 1973-04-23}\n"
-                                                 + "   {1 23.2,2 d,3 chelios,4 1999-2-23}\n"
-                                                 + "   {3 richard,4 1973-10-12}\n"
-                                                 + "   {3 howe,4 1983-06-23}\n"
-                                                 + "   {0 2.2,2 d,3 messier,4 2008-11-23}\n"
-                                                 + "   {2 c,3 roy,4 1973-10-13}\n";
-  
-  private static final String NON_NUMERIC_ARFF2 = "   % Comments\n" + "   % \n" + "   % Comments go here"
-                                                  + "   % \n" + "   @RELATION Mahout\n" + '\n'
-                                                  + "   @ATTRIBUTE junk  NUMERIC\n"
-                                                  + "   @ATTRIBUTE foo  NUMERIC\n"
-                                                  + "   @ATTRIBUTE test   {f,z}\n"
-                                                  + "   @ATTRIBUTE hockey  string\n"
-                                                  + "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" + "  \n"
-                                                  + '\n' + '\n' + "   @DATA\n"
-                                                  + "   {2 f,3 gretzky,4 1973-10-23}\n"
-                                                  + "   {1 2.9,2 z,3 orr,4 1973-11-23}\n"
-                                                  + "   {2 f,3 bossy,4 1981-10-23}\n"
-                                                  + "   {1 2.6,2 f,3 lefleur,4 1989-10-23}\n"
-                                                  + "   {3 esposito,4 1973-04-23}\n"
-                                                  + "   {1 23.2,2 z,3 chelios,4 1999-2-23}\n"
-                                                  + "   {3 richard,4 1973-10-12}\n"
-                                                  + "   {3 howe,4 1983-06-23}\n"
-                                                  + "   {0 2.2,2 f,3 messier,4 2008-11-23}\n"
-                                                  + "   {2 f,3 roy,4 1973-10-13}\n";
-  
-  private static final String DATE_ARFF = "   % Comments\n"
-                                          + "   % \n"
-                                          + "   % Comments go here"
-                                          + "   % \n"
-                                          + "   @RELATION MahoutDateTest\n"
-                                          + '\n'
-                                          + "   @ATTRIBUTE junk  NUMERIC\n"
-                                          + "   @ATTRIBUTE date1   \n"
-                                          + "   @ATTRIBUTE date2   date \"yyyy.MM.dd G 'at' HH:mm:ss z\" \n"
-                                          + "   @ATTRIBUTE date3   date \"EEE, MMM d, ''yy\" \n"
-                                          + "   @ATTRIBUTE date4   date \"K:mm a, z\" \n"
-                                          + "   @ATTRIBUTE date5   date \"yyyyy.MMMMM.dd GGG hh:mm aaa\" \n"
-                                          + "   @ATTRIBUTE date6   date \"EEE, d MMM yyyy HH:mm:ss Z\" \n"
-                                          + "  \n"
-                                          + '\n'
-                                          + '\n'
-                                          + "   @DATA\n"
-                                          + "   {0 1,1 \"2001-07-04T12:08:56\",2 \"2001.07.04 AD at 12:08:56 PDT\",3 \"Wed, Jul 4, '01,4 0:08 PM, PDT\",4 \"0:08 PM, PDT\", 5 \"02001.July.04 AD 12:08 PM\" ,6 \"Wed, 4 Jul 2001 12:08:56 -0700\"  }\n"
-                                          + "   {0 2,1 \"2001-08-04T12:09:56\",2 \"2011.07.04 AD at 12:08:56 PDT\",3 \"Mon, Jul 4, '11,4 0:08 PM, PDT\",4 \"0:08 PM, PDT\", 5 \"02001.July.14 AD 12:08 PM\" ,6 \"Mon, 4 Jul 2011 12:08:56 -0700\"  }\n";
+  static ARFFVectorIterable getVectors(String resourceName, ARFFModel model) throws IOException {
+    String sample = Resources.toString(Resources.getResource(resourceName), Charsets.UTF_8);
+    return new ARFFVectorIterable(sample, model);
+  }
+
+  private static ARFFVectorIterable readModelFromResource(String resourceName) throws IOException {
+    ARFFModel model = new MapBackedARFFModel();
+    return getVectors(resourceName, model);
+  }
+
 }
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/DriverTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/DriverTest.java
index e69de29b..e20bb188 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/DriverTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/DriverTest.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright 2013 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.mahout.utils.vectors.arff;
+
+import java.io.IOException;
+import java.io.StringWriter;
+
+import com.google.common.base.Charsets;
+import com.google.common.io.Resources;
+import org.apache.mahout.utils.MahoutTestCase;
+import org.junit.Test;
+
+/**
+ * Test case for {@link Driver}
+ */
+public class DriverTest extends MahoutTestCase {
+
+  @Test
+  public void dictionary() throws IOException {
+
+    ARFFModel model = new MapBackedARFFModel();
+    ARFFVectorIterableTest.getVectors("sample-dense.arff", model);
+    StringWriter writer = new StringWriter();
+    Driver.writeLabelBindings(writer, model, ",");
+
+    String expected = Resources.toString(Resources.getResource("expected-arff-dictionary.csv"), Charsets.UTF_8);
+
+    assertEquals(expected, writer.toString());
+  }
+
+
+  @Test
+  public void dictionaryJSON() throws IOException {
+    ARFFModel model = new MapBackedARFFModel();
+    ARFFVectorIterableTest.getVectors("sample-dense.arff", model);
+    StringWriter writer = new StringWriter();
+    Driver.writeLabelBindingsJSON(writer, model);
+    assertEquals(Resources.toString(Resources.getResource("expected-arff-schema.json"), Charsets.UTF_8), writer.toString());
+  }
+}
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java
index e69de29b..ad348443 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2013 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.utils.vectors.arff;
+
+import org.apache.mahout.utils.MahoutTestCase;
+import org.junit.Test;
+
+import java.util.Map;
+
+
+public class MapBackedARFFModelTest extends MahoutTestCase {
+
+  @Test
+  public void processNominal() {
+    String windy = "windy";
+    String breezy = "breezy";
+
+    ARFFModel model = new MapBackedARFFModel();
+    model.addNominal(windy, breezy, 77);
+    model.addNominal(windy, "strong", 23);
+    model.addNominal(windy, "nuking", 55);
+    Map<String, Map<String, Integer>> nominalMap = model.getNominalMap();
+
+    assertEquals(1, nominalMap.size());
+    Map<String, Integer> windyValues = nominalMap.get(windy);
+    assertEquals(77, windyValues.get(breezy).intValue());
+  }
+}
