diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/FullRunningAverageAndStdDevWritable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/FullRunningAverageAndStdDevWritable.java
index e69de29b..d71e507e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/FullRunningAverageAndStdDevWritable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/FullRunningAverageAndStdDevWritable.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.cf.taste.hadoop.slopeone;
+
+import org.apache.hadoop.io.Writable;
+import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
+import org.apache.mahout.math.Varint;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public final class FullRunningAverageAndStdDevWritable implements Writable {
+  
+  private FullRunningAverageAndStdDev average;
+  
+  public FullRunningAverageAndStdDevWritable(FullRunningAverageAndStdDev average) {
+    this.average = average;
+  }
+  
+  public FullRunningAverageAndStdDev getAverage() {
+    return average;
+  }
+
+  @Override
+  public String toString() {
+    return new StringBuilder()
+        .append(average.getAverage()).append('\t')
+        .append(average.getCount()).append('\t')
+        .append(average.getMk()).append('\t')
+        .append(average.getSk()).toString();
+  }
+  
+  @Override
+  public void write(DataOutput dataOutput) throws IOException {
+    Varint.writeUnsignedVarInt(average.getCount(), dataOutput);
+    dataOutput.writeDouble(average.getAverage());
+    dataOutput.writeDouble(average.getMk());
+    dataOutput.writeDouble(average.getSk());
+  }
+
+  @Override
+  public void readFields(DataInput dataInput) throws IOException {
+    int count = Varint.readUnsignedVarInt(dataInput);
+    double diff = dataInput.readDouble();
+    double mk = dataInput.readDouble();
+    double sk = dataInput.readDouble();
+    average = new FullRunningAverageAndStdDev(count, diff, mk, sk);
+  }
+
+}
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java
index f544a137..a8c95f95 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java
@@ -81,7 +81,7 @@ public int run(String[] args) throws IOException, ClassNotFoundException, Interr
                                           FloatWritable.class,
                                           SlopeOneDiffsToAveragesReducer.class,
                                           EntityEntityWritable.class,
-                                          FloatWritable.class,
+                                          FullRunningAverageAndStdDevWritable.class,
                                           TextOutputFormat.class);
       FileOutputFormat.setOutputCompressorClass(diffsToAveragesJob, GzipCodec.class);
       diffsToAveragesJob.waitForCompletion(true);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java
index 67550622..c49fe5cd 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java
@@ -22,20 +22,19 @@
 import org.apache.hadoop.io.FloatWritable;
 import org.apache.hadoop.mapreduce.Reducer;
 import org.apache.mahout.cf.taste.hadoop.EntityEntityWritable;
+import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
 
 public final class SlopeOneDiffsToAveragesReducer extends
-    Reducer<EntityEntityWritable,FloatWritable, EntityEntityWritable,FloatWritable> {
+    Reducer<EntityEntityWritable,FloatWritable,EntityEntityWritable,FullRunningAverageAndStdDevWritable> {
   
   @Override
   protected void reduce(EntityEntityWritable key,
                         Iterable<FloatWritable> values,
                         Context context) throws IOException, InterruptedException {
-    int count = 0;
-    double total = 0.0;
+    FullRunningAverageAndStdDev average = new FullRunningAverageAndStdDev();
     for (FloatWritable value : values) {
-      total += value.get();
-      count++;
+      average.addDatum(value.get());
     }
-    context.write(key, new FloatWritable((float) (total / count)));
+    context.write(key, new FullRunningAverageAndStdDevWritable(average));
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverage.java
index 96e38503..1863d2b7 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverage.java
@@ -70,6 +70,11 @@ public synchronized double getAverage() {
     return average;
   }
 
+  @Override
+  public RunningAverage inverse() {
+    return new InvertedRunningAverage(this);
+  }
+
   @Override
   public synchronized String toString() {
     return String.valueOf(average);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverageAndStdDev.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverageAndStdDev.java
index 0546ef82..619b6b78 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverageAndStdDev.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FixedRunningAverageAndStdDev.java
@@ -33,6 +33,11 @@ public FixedRunningAverageAndStdDev(double average, double stdDev, int count) {
     this.stdDev = stdDev;
   }
 
+  @Override
+  public RunningAverageAndStdDev inverse() {
+    return new InvertedRunningAverageAndStdDev(this);
+  }
+
   @Override
   public synchronized String toString() {
     return super.toString() + ',' + stdDev;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverage.java
index 0957a585..808a0699 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverage.java
@@ -96,6 +96,11 @@ public synchronized double getAverage() {
     return average;
   }
   
+  @Override
+  public RunningAverage inverse() {
+    return new InvertedRunningAverage(this);
+  }
+  
   @Override
   public synchronized String toString() {
     return String.valueOf(average);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverageAndStdDev.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverageAndStdDev.java
index f9fa5712..d9d1aee3 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverageAndStdDev.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FullRunningAverageAndStdDev.java
@@ -42,6 +42,14 @@ public FullRunningAverageAndStdDev(int count, double average, double mk, double
     recomputeStdDev();
   }
 
+  public double getMk() {
+    return mk;
+  }
+  
+  public double getSk() {
+    return sk;
+  }
+
   @Override
   public synchronized double getStandardDeviation() {
     return stdDev;
@@ -86,6 +94,11 @@ private synchronized void recomputeStdDev() {
     stdDev = count > 1 ? Math.sqrt(sk / (count - 1)) : Double.NaN;
   }
   
+  @Override
+  public RunningAverageAndStdDev inverse() {
+    return new InvertedRunningAverageAndStdDev(this);
+  }
+  
   @Override
   public synchronized String toString() {
     return String.valueOf(String.valueOf(getAverage()) + ',' + stdDev);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverage.java
index 4ee46b35..86e73dea 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverage.java
@@ -50,4 +50,9 @@ public double getAverage() {
     return -delegate.getAverage();
   }
   
+  @Override
+  public RunningAverage inverse() {
+    return delegate;
+  }
+  
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverageAndStdDev.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverageAndStdDev.java
index 84a274a0..56a8feac 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverageAndStdDev.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/InvertedRunningAverageAndStdDev.java
@@ -55,4 +55,9 @@ public double getStandardDeviation() {
     return delegate.getStandardDeviation();
   }
   
+  @Override
+  public RunningAverageAndStdDev inverse() {
+    return delegate;
+  }
+  
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverage.java
index 3c6a9685..eab47c7f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverage.java
@@ -59,4 +59,9 @@
   
   double getAverage();
   
+  /**
+   * @return a (possibly immutable) object whose average is the negative of this object's
+   */
+  RunningAverage inverse();
+  
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverageAndStdDev.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverageAndStdDev.java
index 1782633b..7f4dcdea 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverageAndStdDev.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverageAndStdDev.java
@@ -27,4 +27,9 @@
   /** @return standard deviation of data */
   double getStandardDeviation();
   
+  /**
+   * @return a (possibly immutable) object whose average is the negative of this object's
+   */
+  RunningAverageAndStdDev inverse();
+  
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java
index f3a6b0d1..75ee10ca 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java
@@ -87,6 +87,11 @@ public synchronized double getAverage() {
     return average;
   }
   
+  @Override
+  public RunningAverage inverse() {
+    return new InvertedRunningAverage(this);
+  }
+  
   @Override
   public synchronized String toString() {
     return String.valueOf(average);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java
index 34f34328..a1336231 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java
@@ -76,6 +76,11 @@ public synchronized double getStandardDeviation() {
                          / (totalWeight * totalWeight - totalSquaredWeight));
   }
   
+  @Override
+  public RunningAverageAndStdDev inverse() {
+    return new InvertedRunningAverageAndStdDev(this);
+  }
+  
   @Override
   public synchronized String toString() {
     return String.valueOf(String.valueOf(getAverage()) + ',' + getStandardDeviation());
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java
index 73bdc703..8d70167e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java
@@ -32,7 +32,6 @@
 import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
 import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
 import org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage;
-import org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev;
 import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
 import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
 import org.apache.mahout.cf.taste.impl.common.RunningAverage;
@@ -132,11 +131,7 @@ public RunningAverage getDiff(long itemID1, long itemID2) {
       average = level2Map.get(itemID2);
     }
     if (inverted) {
-      if (average == null) {
-        return null;
-      }
-      return stdDevWeighted ? new InvertedRunningAverageAndStdDev((RunningAverageAndStdDev) average)
-          : new InvertedRunningAverage(average);
+      return average == null ? null : average.inverse();
     } else {
       return average;
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java
index 44223606..a343dc07 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java
@@ -25,15 +25,18 @@
 import java.util.Map;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.regex.Pattern;
 
 import org.apache.mahout.cf.taste.common.Refreshable;
+import org.apache.mahout.cf.taste.common.Weighting;
 import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
 import org.apache.mahout.cf.taste.impl.common.FastIDSet;
 import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
+import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
 import org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage;
 import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
 import org.apache.mahout.cf.taste.impl.common.RunningAverage;
-import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
+import org.apache.mahout.cf.taste.impl.recommender.slopeone.SlopeOneRecommender;
 import org.apache.mahout.cf.taste.model.PreferenceArray;
 import org.apache.mahout.cf.taste.recommender.slopeone.DiffStorage;
 import org.apache.mahout.common.iterator.FileLineIterator;
@@ -48,12 +51,21 @@
  * one diff per line:
  * </p>
  * 
- * {@code itemID1,itemID2,diff}
+ * {@code itemID1,itemID2,diff[,count[,mk,sk]]}
+ * 
+ * <p>
+ * The fourth column is optional, and is a count representing the number of occurrences of the item-item pair
+ * that contribute to the diff. It is assumed to be 1 if not present. The fifth and sixth arguments are
+ * computed values used by {@link FullRunningAverageAndStdDev} implementations to compute a running standard deviation.
+ * They are required if using {@link Weighting#WEIGHTED} with {@link SlopeOneRecommender}.
+ * </p>
  * 
  * <p>
  * Commas or tabs can be delimiters. This is intended for use in conjuction with the output of
  * {@link org.apache.mahout.cf.taste.hadoop.slopeone.SlopeOneAverageDiffsJob}.
  * </p>
+ *
+ * <p>Note that the same item-item pair should not appear on multiple lines -- one line per item-item pair.</p>
  */
 public final class FileDiffStorage implements DiffStorage {
   
@@ -61,6 +73,7 @@
   
   private static final long MIN_RELOAD_INTERVAL_MS = 60 * 1000L; // 1 minute?
   private static final char COMMENT_CHAR = '#';
+  private static final Pattern SEPARATOR = Pattern.compile("[\t,]");
   
   private final File dataFile;
   private long lastModified;
@@ -107,10 +120,9 @@ private void buildDiffs() {
           iterator.next();
           firstLine = iterator.peek();
         }
-        char delimiter = FileDataModel.determineDelimiter(firstLine);
         long averageCount = 0L;
         while (iterator.hasNext()) {
-          averageCount = processLine(iterator.next(), delimiter, averageCount);
+          averageCount = processLine(iterator.next(), averageCount);
         }
         
         pruneInconsequentialDiffs();
@@ -124,20 +136,20 @@ private void buildDiffs() {
     }
   }
   
-  private long processLine(String line, char delimiter, long averageCount) {
+  private long processLine(String line, long averageCount) {
 
     if (line.isEmpty() || line.charAt(0) == COMMENT_CHAR) {
       return averageCount;
     }
     
-    int delimiterOne = line.indexOf(delimiter);
-    Preconditions.checkArgument(delimiterOne >= 0, "Bad line: %s", line);
-    int delimiterTwo = line.indexOf(delimiter, delimiterOne + 1);
-    Preconditions.checkArgument(delimiterTwo >= 0, "Bad line: %s", line);
-    
-    long itemID1 = Long.parseLong(line.substring(0, delimiterOne));
-    long itemID2 = Long.parseLong(line.substring(delimiterOne + 1, delimiterTwo));
-    double diff = Double.parseDouble(line.substring(delimiterTwo + 1));
+    String[] tokens = SEPARATOR.split(line);
+    Preconditions.checkArgument(tokens.length >=3 && tokens.length != 5, "Bad line: %s", line);
+
+    long itemID1 = Long.parseLong(tokens[0]);
+    long itemID2 = Long.parseLong(tokens[1]);
+    double diff = Double.parseDouble(tokens[2]);
+    int count = tokens.length >= 4 ? Integer.parseInt(tokens[3]) : 1;
+    boolean hasMkSk = tokens.length >= 5;
     
     if (itemID1 > itemID2) {
       long temp = itemID1;
@@ -151,14 +163,20 @@ private long processLine(String line, char delimiter, long averageCount) {
       averageDiffs.put(itemID1, level1Map);
     }
     RunningAverage average = level1Map.get(itemID2);
-    if (average == null && averageCount < maxEntries) {
-      average = new FullRunningAverage();
+    if (average != null) {
+      throw new IllegalArgumentException("Duplicated line for item-item pair " + itemID1 + " / " + itemID2);
+    }
+    if (averageCount < maxEntries) {
+      if (hasMkSk) {
+        double mk = Double.parseDouble(tokens[4]);
+        double sk = Double.parseDouble(tokens[5]);
+        average = new FullRunningAverageAndStdDev(count, diff, mk, sk);
+      } else {
+        average = new FullRunningAverage(count, diff);
+      }
       level1Map.put(itemID2, average);
       averageCount++;
     }
-    if (average != null) {
-      average.addDatum(diff);
-    }
     
     allRecommendableItemIDs.add(itemID1);
     allRecommendableItemIDs.add(itemID2);
@@ -222,10 +240,7 @@ public RunningAverage getDiff(long itemID1, long itemID2) {
       average = level2Map.get(itemID2);
     }
     if (inverted) {
-      if (average == null) {
-        return null;
-      }
-      return new InvertedRunningAverage(average);
+      return average == null ? null : average.inverse();
     } else {
       return average;
     }
