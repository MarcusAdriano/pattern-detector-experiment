diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
index 7a3aece7..2efd2535 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
@@ -62,7 +62,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * The maximum length in bytes for strings sent by {@code writeLDString()},
      * which is the maximum unsigned integer value that fits in two bytes.
      */
-    private final static int MAX_VARCHAR_BYTE_LENGTH = 0xFFFF;
+    final static int MAX_VARCHAR_BYTE_LENGTH = 0xFFFF;
 
     /**
      * Output buffer.
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 68a4d72d..0fd65f2b 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -167,8 +167,20 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private final static int SHUTDOWN_CHECK_ATTEMPTS = 100;
     private final static int SHUTDOWN_CHECK_INTERVAL= 100;
 
-    // maximum reply size
-    private final static int MAXREPLY = 32767;
+    /**
+     * Maximum reply size. The reply buffer must be large enough to hold the
+     * largest reply that {@link #readBytesReply(String)} and
+     * {@link #readStringReply(String)} can receive. That is, a reply header
+     * (4 bytes), a status byte (1 byte), a length field (2 bytes) and the
+     * longest value (in bytes) that could be written by
+     * {@link DDMWriter#writeLDBytes(byte[])} or
+     * {@link DDMWriter#writeLDString(String)}.
+     */
+    private final static int MAXREPLY =
+            REPLY_HEADER_LENGTH
+            + 1     // status byte
+            + 2     // length field
+            + DDMWriter.MAX_VARCHAR_BYTE_LENGTH;
 
     // Application Server Attributes.
     private static String att_srvclsnm;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java
index bb196ce2..54ca42c0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java
@@ -78,8 +78,14 @@ public RuntimeInfoTest(String name) {
 	public static Test suite() {
 		TestSuite suite = new TestSuite("RuntimeInfoTest");
         
-        suite.addTest(decorateTest(englishLocale));
-        suite.addTest(decorateTest(germanLocale));
+        // Run testRunTests in both English and German locale
+        suite.addTest(decorateTest(englishLocale, "testRunTests"));
+        suite.addTest(decorateTest(germanLocale, "testRunTests"));
+
+        // Other test cases, only tested in a single locale.
+        suite.addTest(
+                decorateTest(englishLocale, "testRuntimeInfoWithLongValues"));
+
 		return suite;
 	}	
 	
@@ -188,6 +194,33 @@ public void x_testRuntimeInfoAfterConnClose() throws Exception {
 		assertEquals("Output doesn't match", expectedOutput, s);
 	}
 
+    /**
+     * Regression test case for DERBY-6456, which caused an infinite loop if
+     * the runtimeinfo output was more than 32KB.
+     */
+    public void testRuntimeInfoWithLongValues() throws Exception {
+        // First open many connections on the server, so that the reply from
+        // getRuntimeInfo() will be long.
+        for (int i = 0; i < 200; i++) {
+            prepareAndExecuteQuery(openDefaultConnection(),
+                "VALUES 'Hello, World! How are you today?',\n"
+              + "'Not that bad today, actually. Thanks for asking.'\n"
+              + "-- Let's add some more text to increase the output length.\n"
+              + "-- And even more here... The statement text, including this\n"
+              + "-- comment, will be included in the runtimeinfo output.\n");
+        }
+
+        // This call used to hang.
+        String runtimeinfo =
+            NetworkServerTestSetup.getNetworkServerControl().getRuntimeInfo();
+
+        // For debugging:
+        println(runtimeinfo);
+
+        // Output gets truncated to 65535 bytes (DERBY-5220).
+        assertEquals(65535, runtimeinfo.length());
+    }
+
 	public static PreparedStatement prepareAndExecuteQuery(Connection conn,
 			String sql) throws SQLException {
 		PreparedStatement ps = conn.prepareStatement(sql);
@@ -232,8 +265,8 @@ private void printIfVerbose(String name,String s) {
 	 * 
 	 * @return the decorated test
 	 */
-	private static Test decorateTest(Locale serverLocale) {
-        Test test = new TestSuite(RuntimeInfoTest.class);
+    private static Test decorateTest(Locale serverLocale, String testName) {
+        Test test = new RuntimeInfoTest(testName);
         
         test = TestConfiguration.clientServerDecorator(test);
         
