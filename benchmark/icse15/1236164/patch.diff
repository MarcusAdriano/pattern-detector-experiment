diff --git a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
index 2b93c950..5efd4e35 100644
--- a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
+++ b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
@@ -230,7 +230,8 @@ public void refreshBundle(long bundleIdentifier) throws IOException {
      */
     public boolean refreshBundleAndWait(long bundleIdentifier) throws IOException {
         Bundle[] bundleArray = new Bundle[1];
-        return refreshBundlesAndWait(new long[] {bundleIdentifier}, bundleArray);
+        refreshBundlesAndWait(new long[] {bundleIdentifier}, bundleArray);
+        return isResolved(bundleArray[0].getState());
     }
 
     /**
@@ -258,11 +259,11 @@ public void refreshBundles(long[] bundleIdentifiers) throws IOException {
      */
     public CompositeData refreshBundlesAndWait(long[] bundleIdentifiers) throws IOException {
         Bundle [] bundles = bundleIdentifiers != null ? new Bundle[bundleIdentifiers.length] : null;
-        boolean result = refreshBundlesAndWait(bundleIdentifiers, bundles);
-        return constructResolveResult(bundles, result);
+        refreshBundlesAndWait(bundleIdentifiers, bundles);
+        return constructResolveResult(bundles);
     }
 
-    private boolean refreshBundlesAndWait(long[] bundleIdentifiers, Bundle[] bundles) throws IOException {
+    private void refreshBundlesAndWait(long[] bundleIdentifiers, Bundle[] bundles) throws IOException {
         final CountDownLatch latch = new CountDownLatch(1);
         FrameworkListener listener = new FrameworkListener() {
             public void frameworkEvent(FrameworkEvent event) {
@@ -280,7 +281,11 @@ public void frameworkEvent(FrameworkEvent event) {
                     }
                 }
                 packageAdmin.refreshPackages(bundles);
-                return latch.await(30, TimeUnit.SECONDS);
+
+                if (latch.await(30, TimeUnit.SECONDS))
+                    return;
+                else
+                    throw new IOException("Refresh operation timed out");
             } catch (InterruptedException e) {
                 IOException ex = new IOException();
                 ex.initCause(e);
@@ -291,21 +296,27 @@ public void frameworkEvent(FrameworkEvent event) {
         }
     }
 
-    private CompositeData constructResolveResult(Bundle[] bundles, boolean result) {
+    private CompositeData constructResolveResult(Bundle[] bundles) {
         if (bundles == null)
             bundles = context.getBundles();
 
+        boolean result = true;
         List<Long> successList = new ArrayList<Long>();
         for (Bundle bundle : bundles) {
             int state = bundle.getState();
-            if ((state & (Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE)) > 0) {
+            if (isResolved(state)) {
                 successList.add(bundle.getBundleId());
-            }
+            } else
+                result = false;
         }
 
         return new BatchResolveResult(result, successList.toArray(new Long[] {})).toCompositeData();
     }
 
+    private boolean isResolved(int state) {
+        return (state & (Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE)) > 0;
+    }
+
     /**
      * @see org.osgi.jmx.framework.FrameworkMBean#resolveBundle(long)
      */
@@ -346,8 +357,8 @@ public CompositeData resolve(long[] bundleIdentifiers) throws IOException {
         if (bundleIdentifiers != null)
             bundles = new Bundle[bundleIdentifiers.length];
 
-        boolean result = resolveBundles(bundleIdentifiers, bundles);
-        return constructResolveResult(bundles, result);
+        resolveBundles(bundleIdentifiers, bundles);
+        return constructResolveResult(bundles);
     }
 
     /**
diff --git a/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java b/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
index 277a8b8d..c1d8aa3c 100644
--- a/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
+++ b/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
@@ -320,7 +320,6 @@ public void testRefreshBundlesAndWait2() throws Exception {
 
         FrameworkMBean framework = getMBean(FrameworkMBean.OBJECTNAME, FrameworkMBean.class);
         CompositeData result = framework.refreshBundlesAndWait(null);
-        assertTrue((Boolean) result.get(FrameworkMBean.SUCCESS));
         Set<Long> completed = new HashSet<Long>(Arrays.asList((Long []) result.get(FrameworkMBean.COMPLETED)));
         assertTrue(completed.contains(bundleA.getBundleId()));
         assertTrue(completed.contains(bundleB.getBundleId()));
