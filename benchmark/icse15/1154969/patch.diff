diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java
index c3431a93..f3aa9506 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java
@@ -135,7 +135,7 @@ public CompressedRandomAccessReader(String dataFilePath, CompressionMetadata met
     {
         super(new File(dataFilePath), metadata.chunkLength, skipIOCache);
         this.metadata = metadata;
-        compressed = new byte[metadata.chunkLength];
+        compressed = new byte[Snappy.maxCompressedLength(metadata.chunkLength)];
         // can't use super.read(...) methods
         // that is why we are allocating special InputStream to read data from disk
         // from already open file descriptor
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedSequentialWriter.java b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedSequentialWriter.java
index a262a256..64907a8b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedSequentialWriter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedSequentialWriter.java
@@ -53,7 +53,7 @@ public CompressedSequentialWriter(File file, String indexFilePath, boolean skipI
         super(file, CHUNK_LENGTH, skipIOCache);
 
         // buffer for compression should be the same size as buffer itself
-        compressed = new byte[buffer.length];
+        compressed = new byte[Snappy.maxCompressedLength(buffer.length)];
 
         /* Index File (-CompressionInfo.db component) and it's header */
         metadataWriter = new CompressionMetadata.Writer(indexFilePath);
@@ -85,6 +85,7 @@ protected void flushData() throws IOException
         chunkCount++;
 
         // write data itself
+        assert compressedLength <= compressed.length;
         out.write(compressed, 0, compressedLength);
 
         // next chunk should be written right after current
