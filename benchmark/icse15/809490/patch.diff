diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
index 87ac06d5..59ee0e1a 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
@@ -627,6 +627,8 @@ public DataValueDescriptor normalize(DataValueDescriptor source,
 								"Normalization of " + t2 + " being asked to convert to " + t1);
 					}
 				}
+            } else {
+                SanityManager.THROWASSERT("cachedDest is null");
 			}
 		}
 
@@ -635,15 +637,9 @@ public DataValueDescriptor normalize(DataValueDescriptor source,
 			if (!isNullable())
 				throw StandardException.newException(SQLState.LANG_NULL_INTO_NON_NULL,"");
 
-			if (cachedDest == null)
-				cachedDest = getNull();
-			else
 				cachedDest.setToNull();
 		} else {
 
-			if (cachedDest == null)
-				cachedDest = getNull();
-
 			int jdbcId = getJDBCTypeId();
 
 			cachedDest.normalize(this, source);
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java
index 808822aa..14526b80 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java
@@ -52,6 +52,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private	int				numCols;
 	private int				startCol;
 
+    /**
+     * This array contains data value descriptors that can be used (and reused)
+     * by normalizeRow() to hold the normalized column values.
+     */
+    private final DataValueDescriptor[] cachedDestinations;
+
 	/* RESOLVE - We need to pass the ResultDescription for this ResultSet
 	 * as a parameter to the constructor and use it instead of the one from
 	 * the activation
@@ -107,6 +113,7 @@ public NormalizeResultSet(NoPutResultSet source,
 		
 		startCol = computeStartColumn( forUpdate, resultDescription );
 		normalizedRow = activation.getExecutionFactory().getValueRow(numCols);
+        cachedDestinations = new DataValueDescriptor[numCols];
 		recordConstructorTime();
 	}
 
@@ -350,10 +357,6 @@ public  static  int computeStartColumn( boolean isUpdate, ResultDescription desc
 	 */
 	private ExecRow normalizeRow(ExecRow sourceRow) throws StandardException
 	{
-		int					whichCol;
-
-		if (desiredTypes == null) { desiredTypes = fetchResultTypes( resultDescription ); }
-
         int                     count = resultDescription.getColumnCount();
 
 		for (int i = 1; i <= count; i++)
@@ -367,8 +370,9 @@ private ExecRow normalizeRow(ExecRow sourceRow) throws StandardException
                 { normalizedCol = sourceCol; }
 				else
                 {
-                    normalizedCol = normalizeColumn
-                        ( desiredTypes[i - 1], sourceRow, i, normalizedRow.getColumn(i), resultDescription );
+                    normalizedCol = normalizeColumn(
+                            getDesiredType(i), sourceRow, i,
+                            getCachedDestination(i), resultDescription);
                 }
 
 				normalizedRow.setColumn(i, normalizedCol);
@@ -378,13 +382,44 @@ private ExecRow normalizeRow(ExecRow sourceRow) throws StandardException
 		return normalizedRow;
 	}
 
+    /**
+     * Get a cached data value descriptor that can receive the normalized
+     * value of the specified column.
+     *
+     * @param col the column number (1-based)
+     * @return a data value descriptor of the correct type for the column
+     * @throws StandardException if a new data value descriptor cannot be
+     * created
+     */
+    private DataValueDescriptor getCachedDestination(int col)
+            throws StandardException {
+        int index = col - 1;
+        if (cachedDestinations[index] == null) {
+            cachedDestinations[index] = getDesiredType(col).getNull();
+        }
+        return cachedDestinations[index];
+    }
+
+    /**
+     * Get a data type descriptor that describes the desired type for the
+     * specified column.
+     *
+     * @param col the column number (1-based)
+     * @return a data type descriptor for the column
+     */
+    private DataTypeDescriptor getDesiredType(int col) {
+        if (desiredTypes == null) {
+            desiredTypes = fetchResultTypes(resultDescription);
+        }
+        return desiredTypes[col - 1];
+    }
+
     /**
      * <p>
      * Fetch the result datatypes out of the activation.
      * </p>
      */
-    private  DataTypeDescriptor[]    fetchResultTypes( ResultDescription desc )
-        throws StandardException
+    private DataTypeDescriptor[] fetchResultTypes(ResultDescription desc)
     {
         int     count = desc.getColumnCount();
 
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java
index e69de29b..244d0d24 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java
@@ -0,0 +1,89 @@
+/*
+
+Derby - Class org.apache.derbyTesting.functionTests.tests.lang.InsertTest
+
+Licensed to the Apache Software Foundation (ASF) under one or more
+contributor license agreements.  See the NOTICE file distributed with
+this work for additional information regarding copyright ownership.
+The ASF licenses this file to You under the Apache License, Version 2.0
+(the "License"); you may not use this file except in compliance with
+the License.  You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+import java.sql.Statement;
+import junit.framework.Test;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * This class contains test cases for the INSERT statement.
+ */
+public class InsertTest extends BaseJDBCTestCase {
+
+    public InsertTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        return TestConfiguration.defaultSuite(InsertTest.class);
+    }
+
+    /**
+     * Regression test case for DERBY-4348 where an INSERT INTO .. SELECT FROM
+     * statement would result in a LONG VARCHAR column becoming populated with
+     * the wrong values.
+     */
+    public void testInsertIntoSelectFromWithLongVarchar() throws SQLException {
+        // Generate the data that we want table T2 to hold when the test
+        // completes.
+        String[][] data = new String[100][2];
+        for (int i = 0; i < data.length; i++) {
+            // first column should have integers 0,1,...,99
+            data[i][0] = Integer.toString(i);
+            // second column should always be -1
+            data[i][1] = "-1";
+        }
+
+        // Turn off auto-commit so that the tables used in the test are
+        // automatically cleaned up in tearDown().
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.execute("create table t1(a long varchar)");
+
+        // Fill table T1 with the values we want to see in T2's first column.
+        PreparedStatement insT1 = prepareStatement("insert into t1 values ?");
+        for (int i = 0; i < data.length; i++) {
+            insT1.setString(1, data[i][0]);
+            insT1.executeUpdate();
+        }
+
+        // Create table T2 and insert the contents of T1. Column B must have
+        // a default value and a NOT NULL constraint in order to expose
+        // DERBY-4348. The presence of NOT NULL makes the INSERT statement use
+        // a NormalizeResultSet, and the bug was caused by a bug in the
+        // normalization.
+        s.execute("create table t2(a long varchar, b int default -1 not null)");
+        s.execute("insert into t2(a) select * from t1");
+
+        // Verify that T1 contains the expected values. Use an ORDER BY to
+        // guarantee the same ordering as in data[][].
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select * from t2 order by int(cast (a as varchar(10)))"),
+                data);
+    }
+}
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index 0bdbe63b..dddfac29 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -69,6 +69,7 @@ public static Test suite() {
         suite.addTest(FloatTypesTest.suite());
         suite.addTest(GrantRevokeTest.suite());
         suite.addTest(GroupByExpressionTest.suite());
+        suite.addTest(InsertTest.suite());
 		suite.addTest(LangScripts.suite());
         suite.addTest(MathTrigFunctionsTest.suite());
         suite.addTest(PrepareExecuteDDL.suite());
