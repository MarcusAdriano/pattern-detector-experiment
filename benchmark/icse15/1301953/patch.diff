diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
index 95e247eb..abd97135 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
@@ -933,6 +933,9 @@ private void writeChecksumLogRecord(byte[] buffer)
 
 	}
 
+    /** Return the length of a checksum record */
+    public  int getChecksumLogRecordSize() { return checksumLogRecordSize; }
+
 
 	protected void writeEndMarker(int marker) throws IOException, StandardException 
 	{
diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java
index c77bed90..4d037de1 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java
@@ -90,9 +90,9 @@ public LogCounter(long fileNumber, long position) {
 			SanityManager.ASSERT(position > 0, "illegal file position");
 
 			SanityManager.ASSERT(position < MAX_LOGFILE_SIZE,
-							 "log file position exceeded max log file size");
+							 "log file position exceeded max log file size. log file position = " + position );
 			SanityManager.ASSERT(fileNumber < MAX_LOGFILE_NUMBER,
-							 "log file number exceeded max log file number");
+							 "log file number exceeded max log file number. log file number = " + fileNumber );
 		}
 
 		this.fileNumber = fileNumber;
@@ -118,9 +118,9 @@ static public final long makeLogInstantAsLong(long filenum, long filepos)
 			SanityManager.ASSERT(filepos > 0, "illegal file position");
 
 			SanityManager.ASSERT(filepos < MAX_LOGFILE_SIZE,
-							 "log file position exceeded max log file size");
+							 "log file position exceeded max log file size. log file position = " + filepos );
 			SanityManager.ASSERT(filenum < MAX_LOGFILE_NUMBER,
-							 "log file number exceeded max log file number");
+							 "log file number exceeded max log file number. log file number = " + filenum );
 		}
 
 		return ((filenum << FILE_NUMBER_SHIFT) | filepos);
diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
index 5e2e081b..52522134 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
@@ -221,6 +221,8 @@ long spare (value set to 0)
 								  Serviceable, java.security.PrivilegedExceptionAction
 {
 
+	private static final    long INT_LENGTH = 4L;
+
 	private static int fid = StoredFormatIds.FILE_STREAM_LOG_FILE; 
 
 	// format Id must fit in 4 bytes
@@ -1028,7 +1030,7 @@ public void recover(
 
                         // successfully init'd the log file - set up markers,
                         // and position at the end of the log.
-						endPosition = theLog.getFilePointer();
+						setEndPosition( theLog.getFilePointer() );
 						lastFlush   = endPosition;
 						
 						//if write sync is true , prellocate the log file
@@ -1099,7 +1101,7 @@ public void recover(
 
 					if (!ReadOnlyDB)
 					{
-						endPosition = LogCounter.getLogFilePosition(logEnd);
+						setEndPosition( LogCounter.getLogFilePosition(logEnd) );
 
 						//
 						// The end of the log is at endPosition.  Which is where
@@ -2094,7 +2096,7 @@ public void switchLogFile() throws StandardException
 					
 					logOut.writeEndMarker(0);
 
-					endPosition += 4;
+					setEndPosition( endPosition + INT_LENGTH );
 					//set that we are in log switch to prevent flusher 
 					//not requesting  to switch log again 
 					inLogSwitch = true; 
@@ -2114,7 +2116,7 @@ public void switchLogFile() throws StandardException
 					
 					logWrittenFromLastCheckPoint += endPosition;
 
-					endPosition = newLog.getFilePointer();
+					setEndPosition( newLog.getFilePointer() );
 					lastFlush = endPosition;
 					
 					if(isWriteSynced)
@@ -3376,7 +3378,7 @@ else if (!verifyLogFormat(logFile, logFileNumber))
                             SQLState.LOG_SEGMENT_NOT_EXIST, logFile.getPath());
                     }
 
-					endPosition = firstLog.getFilePointer();
+					setEndPosition( firstLog.getFilePointer() );
 					lastFlush = firstLog.getFilePointer();
 
                     //if write sync is true , prellocate the log file
@@ -3796,14 +3798,17 @@ public long appendLogRecord(byte[] data, int offset, int length,
 				 */
 
 				// see if the log file is too big, if it is, switch to the next
-				// log file
-				if ((endPosition + LOG_RECORD_OVERHEAD + length) >=
+				// log file. account for an extra INT_LENGTH because switchLogFile()
+                // writes an extra 0 at the end of the log. in addition, a checksum log record
+                // may need to be written (see DERBY-2254).
+                int     checksumLogRecordSize = logOut.getChecksumLogRecordSize();
+				if ( (endPosition + LOG_RECORD_OVERHEAD + length + INT_LENGTH + checksumLogRecordSize) >=
 					LogCounter.MAX_LOGFILE_SIZE)
 				{
 					switchLogFile();
 
 					// still too big??  Giant log record?
-					if ((endPosition + LOG_RECORD_OVERHEAD + length) >=
+                    if ( (endPosition + LOG_RECORD_OVERHEAD + length + INT_LENGTH + checksumLogRecordSize) >=
 						LogCounter.MAX_LOGFILE_SIZE) 
                     {
 						throw StandardException.newException(
@@ -3816,7 +3821,7 @@ public long appendLogRecord(byte[] data, int offset, int length,
 				}
 
 				//reserve the space for the checksum log record
-				endPosition += logOut.reserveSpaceForChecksum(length, logFileNumber,endPosition);
+				setEndPosition( endPosition + logOut.reserveSpaceForChecksum(length, logFileNumber,endPosition) );
 
 				// don't call currentInstant since we are already in a
 				// synchronzied block 
@@ -3845,7 +3850,7 @@ public long appendLogRecord(byte[] data, int offset, int length,
 					}
 				}
 
-				endPosition += (length + LOG_RECORD_OVERHEAD);
+				setEndPosition( endPosition + (length + LOG_RECORD_OVERHEAD) );
 			}
 		}
 		catch (IOException ioe)
@@ -4661,19 +4666,19 @@ private long logtest_appendPartialLogRecord(byte[] data, int offset,
 				{
 					// reserve the space for the checksum log record
 					// NOTE:  bytesToWrite include the log record overhead.
-					endPosition += 
+					setEndPosition( endPosition +
 						logOut.reserveSpaceForChecksum(((length + LOG_RECORD_OVERHEAD) 
 														< bytesToWrite ? length :
 														(bytesToWrite - LOG_RECORD_OVERHEAD)),
-													   logFileNumber,endPosition);
+													   logFileNumber,endPosition) );
 					instant = currentInstant();
 
 					//check if the length of the records to be written is 
 					//actually smaller than the number of bytesToWrite 
 					if(length + LOG_RECORD_OVERHEAD < bytesToWrite)
-						endPosition += (length + LOG_RECORD_OVERHEAD);
+                    { setEndPosition( endPosition + (length + LOG_RECORD_OVERHEAD) ); }
 					else
-						endPosition += bytesToWrite;
+                    { setEndPosition( endPosition + bytesToWrite ); }
 
 					while(true)		// so we can break out without returning out of
 						// sync block...
@@ -5296,7 +5301,7 @@ public void initializeReplicationSlaveRole()
                 logEndInstant = scanOfHighestLogFile.getLogRecordEnd();
             }
 
-            endPosition = LogCounter.getLogFilePosition(logEndInstant);
+            setEndPosition( LogCounter.getLogFilePosition(logEndInstant) );
 
             // endPosition and logFileNumber now point to the end of the
             // highest log file. This is where a new log record should be
@@ -5734,6 +5739,17 @@ private synchronized boolean runBooleanAction(int action, StorageFile file) {
 		}
 	}
 
+    /** set the endPosition of the log and make sure the new position won't spill off the end of the log */
+    private void    setEndPosition( long newPosition )
+    {
+		if (SanityManager.DEBUG)
+        {
+			SanityManager.ASSERT(newPosition < LogCounter.MAX_LOGFILE_SIZE,
+							 "log file would spill past its legal end if the end were set to = " + newPosition );
+		}
+
+        endPosition = newPosition;
+    }
 
 	
 
