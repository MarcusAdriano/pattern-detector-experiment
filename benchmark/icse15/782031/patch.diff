diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
index b014a734..f8eb5f6e 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
@@ -150,7 +150,7 @@ public IRStatistics evaluate(RecommenderBuilder recommenderBuilder,
     return new IRStatisticsImpl(precision.getAverage(), recall.getAverage(), fallOut.getAverage());
   }
 
-  private void processOtherUser(Object id,
+  private static void processOtherUser(Object id,
                                 Collection<Item> relevantItems,
                                 Collection<User> trainingUsers,
                                 User user2) {
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/BooleanUserGenericUserBasedRecommender.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/BooleanUserGenericUserBasedRecommender.java
index 1c0075bd..bf066793 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/BooleanUserGenericUserBasedRecommender.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/BooleanUserGenericUserBasedRecommender.java
@@ -175,7 +175,7 @@ public double estimatePreference(Object userID, Object itemID) throws TasteExcep
    * This computation is in a technical sense, wrong, since in the domain of "boolean preference users"
    * where all preference values are 1, this method should only ever return 1.0 or NaN. This isn't
    * terribly useful however since it means results can't be ranked by preference value (all are 1).
-   * So instead this returns a sum of similarties to any other user in the neighborhood who has also
+   * So instead this returns a sum of similarities to any other user in the neighborhood who has also
    * rated the item.
    */
   private double doEstimatePreference(User theUser, Collection<User> theNeighborhood, Object itemID)
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
index d95843d9..2ac69ed1 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
@@ -145,7 +145,7 @@ public TreeClusteringRecommender(DataModel dataModel,
   }
 
   /**
-   * @param dataModel {@link DataModel} which provdes {@link User}s
+   * @param dataModel {@link DataModel} which provides {@link User}s
    * @param clusterSimilarity {@link ClusterSimilarity} used to compute cluster similarity
    * @param clusteringThreshold clustering similarity threshold; clusters will be aggregated into larger
    * clusters until the next two nearest clusters' similarity drops below this threshold
