diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index 35b63c22..1f7ebb2f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -2253,16 +2253,17 @@ public void testBlobAfterCommit() throws Exception {
 
 
         assertTrue("FAIL - shortBlob is NULL", shortBlob != null);
-        // this should give blob/clob unavailable exceptions on client
+        // This should give blob/clob unavailable exceptions with both
+        // client and embedded driver.
         try {
             shortBlob.length();
-            if (usingDerbyNetClient()) {
                 fail("FAIL - should not be able to access Blob after commit");
-            }
         } catch (SQLException e) {
-            checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            assertTrue("FAIL - method should not fail when using embedded",
-                       usingDerbyNetClient());
+            if (usingEmbedded()) {
+                checkException(INVALID_BLOB, e);
+            } else {
+                checkException(INVALID_LOCATOR, e);
+            }
         }
 
         assertTrue("FAIL - blob is NULL", blob != null);
@@ -2271,31 +2272,51 @@ public void testBlobAfterCommit() throws Exception {
             blob.length();
             fail("FAIL - should not be able to access large Blob after commit");
         } catch (SQLException e) {
-            checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
+            if (usingEmbedded()) {
+                checkException(INVALID_BLOB, e);
+            } else {
+                checkException(INVALID_LOCATOR, e);
+            }
         }
         try {
             blob.getBytes(2,3);
             fail("FAIL - should not be able to access large Blob after commit");
         } catch (SQLException e) {
-            checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
+            if (usingEmbedded()) {
+                checkException(INVALID_BLOB, e);
+            } else {
+                checkException(INVALID_LOCATOR, e);
+            }
         }
         try {
             blob.getBinaryStream();
             fail("FAIL - should not be able to access large Blob after commit");
         } catch (SQLException e) {
-            checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
+            if (usingEmbedded()) {
+                checkException(INVALID_BLOB, e);
+            } else {
+                checkException(INVALID_LOCATOR, e);
+            }
         }
         try {
             blob.position("foo".getBytes("US-ASCII"),2);
             fail("FAIL - should not be able to access large Blob after commit");
         } catch (SQLException e) {
-            checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
+            if (usingEmbedded()) {
+                checkException(INVALID_BLOB, e);
+            } else {
+                checkException(INVALID_LOCATOR, e);
+            }
         }
         try {
             blob.position(blob,2);
             fail("FAIL - should not be able to access large Blob after commit");
         } catch (SQLException e) {
-            checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
+            if (usingEmbedded()) {
+                checkException(INVALID_BLOB, e);
+            } else {
+                checkException(INVALID_LOCATOR, e);
+            }
         }
     }
 
@@ -3199,5 +3220,6 @@ private void checkException(String SQLState, SQLException se)
     private static final String BLOB_ACCESSED_AFTER_COMMIT = "XJ073";
     private static final String NO_CURRENT_CONNECTION = "08003";
     private static final String INVALID_BLOB = "XJ215";
+    private static final String INVALID_LOCATOR = "XJ217";
 
 }
