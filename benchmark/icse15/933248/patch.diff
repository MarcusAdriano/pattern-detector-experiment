diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 8902aa6a..239ca29c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -796,7 +796,7 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
                 iterators.add(iter);
             }
 
-            Comparator<IColumn> comparator = filter.getColumnComparator(getComparator());
+            Comparator<IColumn> comparator = QueryFilter.getColumnComparator(getComparator());
             Iterator collated = IteratorUtils.collatedIterator(comparator, iterators);
             if (!collated.hasNext())
                 return null;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index bf500add..62c0fb42 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -554,9 +554,9 @@ public void run()
 
             // restore partitioners (in case we were serialized)
             if (ltree.partitioner() == null)
-                ltree.partitioner(ss.getPartitioner());
+                ltree.partitioner(StorageService.getPartitioner());
             if (rtree.partitioner() == null)
-                rtree.partitioner(ss.getPartitioner());
+                rtree.partitioner(StorageService.getPartitioner());
 
             // determine the ranges where responsibility overlaps
             Set<Range> interesting = new HashSet(ss.getRangesForEndPoint(cf.left, local));
