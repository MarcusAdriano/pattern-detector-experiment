diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java
index c28d662e..358e3e6f 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java
@@ -104,7 +104,9 @@ protected void parseSYNCCTL() throws DRDAProtocolException
 			if (xid == null)
 				connThread.missingCodePoint(CodePoint.XID);
 			
-			if (! readXAFlags)
+			// All but Recover and forget require xaFlags
+			if (syncType != CodePoint.SYNCTYPE_REQ_FORGET && 
+				! readXAFlags)
 				if (SanityManager.DEBUG)
 					connThread.missingCodePoint(CodePoint.XAFLAGS);
 		}
@@ -146,6 +148,9 @@ protected void parseSYNCCTL() throws DRDAProtocolException
 				break;
 			case CodePoint.SYNCTYPE_INDOUBT:
 				//recover sync type
+				if (readXAFlags)
+					recoverXA(xaflags);
+				else
 				recoverXA();
 				break;
 			default:
@@ -459,19 +464,25 @@ private void forgetXATransaction(Xid xid) throws DRDAProtocolException
 					 xaRetVal, null);		
 	}
 
+	// JCC doesn't send xaflags but always wants TMSTARTRSCAN.  
+	//So default to that if we got no xaflags
+	private void recoverXA() throws DRDAProtocolException
+	{
+		recoverXA(XAResource.TMSTARTRSCAN);
+	}
 
 	/**
 	 * Call recover. Send SYNCCRD response with indoubt list
 	 * 
 	 *  @throws DRDAProtocolException
 	 */
-	private void recoverXA() throws DRDAProtocolException
+	private void recoverXA(int xaflags) throws DRDAProtocolException
 	{
 		XAResource xaResource = getXAResource();
 		int xaRetVal = xaResource.XA_OK;
 		Xid[] indoubtXids = null;
 		try {
-			indoubtXids = xaResource.recover(XAResource.TMSTARTRSCAN);
+			indoubtXids = xaResource.recover(xaflags);
 		} catch (XAException xe)
 		{
 			xaRetVal = processXAException(xe);
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
index 6904f730..f3b4b465 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
@@ -122,6 +122,11 @@ public static boolean isJCCFramework()
 		return false;
 	}
 
+	public static boolean isEmbeddedFramework()
+	{
+		return (getFramework() == EMBEDDED_FRAMEWORK);
+	}
+
 	/**
 	   Get the framework from the System Property framework
 	   @return  constant for framework being used
@@ -242,7 +247,7 @@ public static void loadDriver() throws Exception
 	 *                will mean ds.setDatabaseName("wombat") will be called
 	 *  @return datasource for current framework
 	 */
-	public static javax.sql.XADataSource getXADatasource(Properties attrs)
+	public static javax.sql.XADataSource getXADataSource(Properties attrs)
 	{
 		
 		String classname = getDataSourcePrefix() + XA_DATASOURCE_STRING + "DataSource";
@@ -260,12 +265,11 @@ public static void loadDriver() throws Exception
 	 */
 	public static javax.sql.ConnectionPoolDataSource getConnectionPoolDataSource(Properties attrs)
 	{
-		
 		String classname = getDataSourcePrefix() + CONNECTION_POOL_DATASOURCE_STRING + "DataSource";
 		return (javax.sql.ConnectionPoolDataSource) getDataSourceWithReflection(classname, attrs);
 	}
 
-	private static String getDataSourcePrefix()
+	public static String getDataSourcePrefix()
 		{
 			framework = getFramework();
 			switch(framework)
@@ -277,7 +281,7 @@ private static String getDataSourcePrefix()
 				case DERBY_NET_CLIENT_FRAMEWORK:
 					return "org.apache.derby.jdbc.Client";
 				case EMBEDDED_FRAMEWORK:
-					return "org.apache.derby.jdbc.Embed";
+					return "org.apache.derby.jdbc.Embedded";
 				default:
 					Exception e = new Exception("FAIL: No DataSource Prefix for framework: " + framework);
 					e.printStackTrace();
@@ -285,6 +289,8 @@ private static String getDataSourcePrefix()
 			return null;
 		}
 
+
+
 	static private Class[] STRING_ARG_TYPE = {String.class};
 	static private Class[] INT_ARG_TYPE = {Integer.TYPE};
 	static private Class[] BOOLEAN_ARG_TYPE = { Boolean.TYPE };
diff --git a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
index fa4702c9..b2853049 100644
--- a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
+++ b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
@@ -53,6 +53,7 @@
 	private PooledConnection currentPooledConnection;
 
 	private boolean isJCC;
+	private boolean isNetClient;
 	private String framework;
 
   xaHelper()
@@ -62,10 +63,12 @@
 	  
 	public void setFramework(String fm)
 	{
-		framework = fm.toUpperCase();
+		framework = fm.toUpperCase(Locale.ENGLISH);
 		if (framework.endsWith("NET") ||
 			framework.equals("DB2JCC"))
 			isJCC = true;
+		else if (framework.equals("DERBYNETCLIENT"))
+				 isNetClient = true;
 
 	}
 		
@@ -84,7 +87,7 @@ public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
 
 			  databaseName = parser.stringValue(dbname.image);
 			  
-			  if (isJCC)
+			  if (isJCC || isNetClient)
 			  {
 			  xaHelper.setDataSourceProperty(currentXADataSource,
 											 "ServerName", "localhost");
@@ -92,9 +95,6 @@ public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
 											 "portNumber", 1527);
 			  
 			  xaHelper.setDataSourceProperty(currentXADataSource,
-											 "driverType", 4);
-
-			  xaHelper.setDataSourceProperty(currentXADataSource, 
 											 "retrieveMessagesFromServerOnGetMessage", true);
 			  String user;
 			  String password;
@@ -107,12 +107,15 @@ public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
 			  //xaHelper.setDataSourceProperty(currentXADataSource,
 			  //"traceFile", "trace.out." + framework);
 			  }
+			  if (isJCC)
+				  xaHelper.setDataSourceProperty(currentXADataSource,
+												 "driverType", 4);
 
 			  xaHelper.setDataSourceProperty(currentXADataSource, "databaseName", databaseName);
 
 			if (shutdown != null && shutdown.toString().toLowerCase(Locale.ENGLISH).equals("shutdown"))
 			{	
-				if (isJCC)
+				if (isJCC || isNetClient)
 					xaHelper.setDataSourceProperty(currentXADataSource,"databaseName", databaseName + ";shutdown=true");
 				else
 					xaHelper.setDataSourceProperty(currentXADataSource, "shutdownDatabase", "shutdown");
@@ -124,7 +127,7 @@ public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
 			}
 			else if (create != null && create.toLowerCase(java.util.Locale.ENGLISH).equals("create"))
 			{
-				if (isJCC)
+				if (isJCC || isNetClient)
 					xaHelper.setDataSourceProperty(currentXADataSource,"databaseName", databaseName + ";create=true");
 				else
 					xaHelper.setDataSourceProperty(currentXADataSource,
@@ -373,13 +376,14 @@ private void handleException(Throwable t) throws SQLException
 			case XAException.XAER_RMERR : error = "XAER_RMERR "; break;
 			case XAException.XAER_RMFAIL : error = "XAER_RMFAIL "; break;
 			}
+			//t.printStackTrace(System.out);
 			throw new ijException(error);
 
 		}
 		else // StandardException or run time exception, log it first
 		{
 			String info = LocalizedResource.getMessage("IJ_01SeeClouLog", t.toString(), t.getMessage());
-			t.printStackTrace(System.out);
+			//		t.printStackTrace(System.out);
 			throw new ijException(info);
 		}
 	}
@@ -485,6 +489,9 @@ private XADataSource getXADataSource() throws Exception
 			if (isJCC)
 				return (XADataSource) 
 					(Class.forName("com.ibm.db2.jcc.DB2XADataSource").newInstance());
+			else if (isNetClient)
+				return (XADataSource) 
+					(Class.forName("org.apache.derby.jdbc.ClientXADataSource").newInstance());
 			else
 				return (XADataSource)(Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource").newInstance());
 		}
