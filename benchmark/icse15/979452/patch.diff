diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
index e214f388..ae7b8465 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
@@ -248,6 +248,9 @@ public Random newRandom() {
       throw new IllegalStateException("please call LuceneTestCase.newRandom only once per test");
     }
     this.seed = Long.valueOf(seedRnd.nextLong());
+    if (VERBOSE) {
+      System.out.println("NOTE: random seed of testcase '" + getName() + "' is: " + this.seed);
+    }
     return new Random(seed);
   }
   
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
index 3fa12efd..6a5db61d 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
@@ -324,6 +324,9 @@ public Random newRandom() {
       throw new IllegalStateException("please call LuceneTestCaseJ4.newRandom only once per test");
     }
     this.seed = Long.valueOf(seedRnd.nextLong());
+    if (VERBOSE) {
+      System.out.println("NOTE: random seed of testcase '" + getName() + "' is: " + this.seed);
+    }
     return new Random(seed);
   }
 
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8.java
index 5ddedf71..970c9705 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8.java
@@ -46,15 +46,44 @@ private boolean matches(ByteRunAutomaton a, int code) {
   private void testOne(Random r, ByteRunAutomaton a, int startCode, int endCode, int iters) {
 
     // Verify correct ints are accepted
+    final int nonSurrogateCount;
+    final boolean ovSurStart;
+    if (endCode < UnicodeUtil.UNI_SUR_HIGH_START ||
+        startCode > UnicodeUtil.UNI_SUR_LOW_END) {
+      // no overlap w/ surrogates
+      nonSurrogateCount = endCode - startCode + 1;
+      ovSurStart = false;
+    } else if (isSurrogate(startCode)) {
+      // start of range overlaps surrogates
+      nonSurrogateCount = endCode - startCode + 1 - (UnicodeUtil.UNI_SUR_LOW_END - startCode + 1);
+      ovSurStart = false;
+    } else if (isSurrogate(endCode)) {
+      // end of range overlaps surrogates
+      ovSurStart = true;
+      nonSurrogateCount = endCode - startCode + 1 - (endCode - UnicodeUtil.UNI_SUR_HIGH_START + 1);
+    } else {
+      // range completely subsumes surrogates
+      ovSurStart = true;
+      nonSurrogateCount = endCode - startCode + 1 - (UnicodeUtil.UNI_SUR_LOW_END - UnicodeUtil.UNI_SUR_HIGH_START + 1);
+    }
+
+    assert nonSurrogateCount > 0;
+        
     for(int iter=0;iter<iters;iter++) {
       // pick random code point in-range
 
-      final int code = _TestUtil.nextInt(r, startCode, endCode);
-      if ((code >= UnicodeUtil.UNI_SUR_HIGH_START && code <= UnicodeUtil.UNI_SUR_HIGH_END) |
-          (code >= UnicodeUtil.UNI_SUR_LOW_START && code <= UnicodeUtil.UNI_SUR_LOW_END)) {
-        iter--;
-        continue;
+      int code = startCode + r.nextInt(nonSurrogateCount);
+      if (isSurrogate(code)) {
+        if (ovSurStart) {
+          code = UnicodeUtil.UNI_SUR_LOW_END + 1 + (code - UnicodeUtil.UNI_SUR_HIGH_START);
+        } else {
+          code = UnicodeUtil.UNI_SUR_LOW_END + 1 + (code - startCode);
+        }
       }
+
+      assert code >= startCode && code <= endCode: "code=" + code + " start=" + startCode + " end=" + endCode;
+      assert !isSurrogate(code);
+
       assertTrue("DFA for range " + startCode + "-" + endCode + " failed to match code=" + code, 
                  matches(a, code));
     }
@@ -97,6 +126,10 @@ private int getCodeStart(Random r) {
     }
   }
 
+  private static boolean isSurrogate(int code) {
+    return code >= UnicodeUtil.UNI_SUR_HIGH_START && code <= UnicodeUtil.UNI_SUR_LOW_END;
+  }
+
   public void testRandomRanges() throws Exception {
     final Random r = random;
     int ITERS = 10*_TestUtil.getRandomMultiplier();
@@ -114,6 +147,11 @@ public void testRandomRanges() throws Exception {
         endCode = x1;
       }
       
+      if (isSurrogate(startCode) && isSurrogate(endCode)) {
+        iter--;
+        continue;
+      }
+      
       final Automaton a = new Automaton();
       final State end = new State();
       end.setAccept(true);
@@ -166,9 +204,10 @@ public void testSpecialCase3() throws Exception {
   }
   
   public void testRandomRegexes() throws Exception {
-    for (int i = 0; i < 250*_TestUtil.getRandomMultiplier(); i++)
+    for (int i = 0; i < 250*_TestUtil.getRandomMultiplier(); i++) {
       assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());
   }
+  }
   
   private void assertAutomaton(Automaton automaton) throws Exception {
     CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);
