diff --git a/db/derby/code/branches/10.0/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java b/db/derby/code/branches/10.0/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java
index a9dc7044..5d799665 100644
--- a/db/derby/code/branches/10.0/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java
+++ b/db/derby/code/branches/10.0/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java
@@ -353,9 +353,12 @@ public void	executeConstantAction( Activation activation )
 					return;
 				}
 
+				//Duplicate indexes share the physical conglomerate underneath
 				conglomId = cd.getConglomerateNumber();
 				indexRowGenerator = cd.getIndexDescriptor();
-				conglomerateUUID = cd.getUUID();
+				//DERBY-655 and DERBY-1343  
+				//Duplicate indexes will have unqiue logical conglomerate UUIDs.  
+				conglomerateUUID = dd.getUUIDFactory().createUUID();
 				duplicate = true;
 				break;
 			}
diff --git a/db/derby/code/branches/10.0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata.java b/db/derby/code/branches/10.0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata.java
index 03dda2e7..859c71b9 100644
--- a/db/derby/code/branches/10.0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata.java
+++ b/db/derby/code/branches/10.0/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata.java
@@ -781,6 +781,24 @@ public static void main(String[] args) {
 			}
 			s.execute("drop table t1");
 
+			// test DERBY-655, DERBY-1343
+			// If a table has duplicate backing index, then it will share the 
+			// physical conglomerate with the existing index, but the duplicate
+			// indexes should have their own unique logical congomerates 
+			// associated with them. That way, it will be possible to 
+			// distinguish the 2 indexes in SYSCONGLOMERATES from each other.
+			s.execute("CREATE TABLE Derby655t1(c11_ID BIGINT NOT NULL)");
+			s.execute("CREATE TABLE Derby655t2 (c21_ID BIGINT NOT NULL primary key)");
+			s.execute("ALTER TABLE Derby655t1 ADD CONSTRAINT F_12 Foreign Key (c11_ID) REFERENCES Derby655t2 (c21_ID) ON DELETE CASCADE ON UPDATE NO ACTION");
+			s.execute("CREATE TABLE Derby655t3(c31_ID BIGINT NOT NULL primary key)");
+			s.execute("ALTER TABLE Derby655t2 ADD CONSTRAINT F_443 Foreign Key (c21_ID) REFERENCES Derby655t3(c31_ID) ON DELETE CASCADE ON UPDATE NO ACTION");
+			dmd = con.getMetaData();
+			System.out.println("\ngetImportedKeys('',null,null,'','APP','Derby655t1' ):");
+			dumpRS(met.getImportedKeys("", "APP", "DERBY655T1"));
+			s.execute("drop table Derby655t1");
+			s.execute("drop table Derby655t2");
+			s.execute("drop table Derby655t3");
+
 			// tiny test moved over from no longer used metadata2.sql
 			// This checks for a bug where you get incorrect behavior on a nested connection.
 			// if you do not get an error, the bug does not occur.			
