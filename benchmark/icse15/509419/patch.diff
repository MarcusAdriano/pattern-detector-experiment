diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
index 8b11f515..fb86f3be 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
@@ -23,34 +23,40 @@
 import java.security.AccessController;
 import java.sql.SQLException;
 import java.util.ArrayList;
+import java.util.List;
+
+import javax.sql.DataSource;
 
 import junit.extensions.TestSetup;
 import junit.framework.Test;
 
 /**
- * Shutdown and drop the current database at tearDown time.
+ * Shutdown and drop the database identified by the logical
+ * name passed in when creating this decorator.
  *
  */
-class DropDatabaseSetup extends BaseJDBCTestSetup {
+class DropDatabaseSetup extends TestSetup {
 
-    DropDatabaseSetup(Test test) {
+    private final String logicalDBName;
+    DropDatabaseSetup(Test test, String logicalDBName) {
         super(test);
+        this.logicalDBName = logicalDBName;
      }
     
     /**
-     * Drop the last database added to the list of used databases.
+     * Shutdown the database and then remove all of its files.
      */
     protected void tearDown() throws Exception {
         
+        TestConfiguration config = TestConfiguration.getCurrent();
+        
         // Ensure the database is booted
         // since that is what shutdownDatabase() requires.
-        getConnection().close();
-        super.tearDown();
-        
-        TestConfiguration.getCurrent().shutdownDatabase();
+        config.openConnection(logicalDBName).close();
+        String dbName = config.getPhysicalDatabaseName(logicalDBName);
+        DataSource ds = JDBCDataSource.getDataSource(dbName);
+        JDBCDataSource.shutdownDatabase(ds);
 
-        ArrayList usedDbs = TestConfiguration.getCurrent().getUsedDatabaseNames();
-        String dbName = (String) usedDbs.get(usedDbs.size()-1);
         dbName = dbName.replace('/', File.separatorChar);
         
         String dsh = BaseTestCase.getSystemProperty("derby.system.home");
@@ -93,11 +99,11 @@ private static void removeDir(File dir) {
                 if (entry.isDirectory()) {
                     removeDir(entry);
                 } else {
-                    assertTrue(entry.delete());
+                    assertTrue(entry.getPath(), entry.delete());
                 }
             }
         }
 
-        assertTrue(dir.delete());
+        assertTrue(dir.getPath(), dir.delete());
     }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 8be9c01b..850281af 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -25,6 +25,7 @@
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.SQLException;
+import java.util.List;
 import java.util.Properties;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -312,7 +313,7 @@ public static TestSetup singleUseDatabaseDecorator(Test test)
     {
         String dbName = generateUniqueDatabaseName();
 
-        return new DatabaseChangeSetup(new DropDatabaseSetup(test), dbName, dbName, true);
+        return new DatabaseChangeSetup(new DropDatabaseSetup(test, dbName), dbName, dbName, true);
     }
     
     /**
@@ -333,7 +334,7 @@ public static TestSetup singleUseDatabaseDecorator(Test test)
      */
     public static TestSetup additionalDatabaseDecorator(Test test, String logicalDbName)
     {
-        return new DatabaseChangeSetup(new DropDatabaseSetup(test),
+        return new DatabaseChangeSetup(new DropDatabaseSetup(test, logicalDbName),
                                        logicalDbName,
                                        generateUniqueDatabaseName(),
                                        false);
@@ -763,12 +764,13 @@ public String getDefaultDatabaseName() {
     }
     
     /**
-     * Return the names of all used databases.
+     * Return the physical name for a database
+     * given its logical name.
      * 
-     * @return The ArrayList containing the database names.
+     * @return Physical name of the database.
      */
-    public ArrayList getUsedDatabaseNames() {
-        return usedDbNames;
+    String getPhysicalDatabaseName(String logicalName) {
+        return (String) logicalDbMapping.get(logicalName);
     }
 
     /**
