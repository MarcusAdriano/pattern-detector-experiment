diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java
index e171e107..fe6a79aa 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java
@@ -216,11 +216,10 @@ public static void export(String ssTableFile, PrintStream outs, String[] keys, S
             if (scanner.hasNext())
             {
                 SSTableIdentityIterator row = (SSTableIdentityIterator) scanner.next();
+
                 try
                 {
                     serializeRow(outs, row);
-                    if (i != 1)
-                        outs.println(",");
                 }
                 catch (IOException ioexc)
                 {
@@ -232,6 +231,9 @@ public static void export(String ssTableFile, PrintStream outs, String[] keys, S
                     System.err.println("ERROR: Out of memory deserializing row " + key);
                     continue;
                 }
+
+                if (i != 1)
+                    outs.println(",");
             }
         }
         
@@ -274,12 +276,12 @@ else if (elementWritten)
             catch (IOException ioexcep)
             {
                 System.err.println("WARNING: Corrupt row " + bytesToHex(row.getKey().key) + " (skipping).");
-                continue;
+                elementWritten = false;
             }
             catch (OutOfMemoryError oom)
             {
                 System.err.println("ERROR: Out of memory deserializing row " + bytesToHex(row.getKey().key));
-                continue;
+                elementWritten = false;
             }
         }
         
