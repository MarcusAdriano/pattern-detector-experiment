diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
index 9db7894c..8481e335 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
@@ -24,6 +24,8 @@
 import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
 import org.apache.mahout.cf.taste.impl.common.RandomUtils;
 import org.apache.mahout.cf.taste.impl.common.RunningAverage;
+import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
+import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
 import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
 import org.apache.mahout.cf.taste.impl.model.GenericUser;
 import org.apache.mahout.cf.taste.model.DataModel;
@@ -54,6 +56,13 @@
 
   private static final Logger log = LoggerFactory.getLogger(GenericRecommenderIRStatsEvaluator.class);
 
+  /**
+   * Pass as "relevanceThreshold" argument to
+   * {@link #evaluate(RecommenderBuilder, DataModel, Rescorer, int, double, double)} to have it attempt
+   * to compute a reasonable threshold. Note that this will impact performance.
+   */
+  public static final double CHOOSE_THRESHOLD = Double.NaN;
+
   private final Random random;
 
   public GenericRecommenderIRStatsEvaluator() {
@@ -92,9 +101,15 @@ public IRStatistics evaluate(RecommenderBuilder recommenderBuilder,
         Object id = user.getID();
         Collection<Item> relevantItems = new HashSet<Item>(at);
         Preference[] prefs = user.getPreferencesAsArray();
+        double theRelevanceThreshold;
+        if (Double.isNaN(relevanceThreshold)) {
+          theRelevanceThreshold = computeThreshold(prefs);
+        } else {
+          theRelevanceThreshold = relevanceThreshold;
+        }
         for (int i = 0; i < prefs.length; i++) {
           Preference pref = prefs[i];
-          if (pref.getValue() >= relevanceThreshold) {
+          if (pref.getValue() >= theRelevanceThreshold) {
             relevantItems.add(pref.getItem());
           }
         }
@@ -167,4 +182,16 @@ private void processOtherUser(Object id,
     }
   }
 
+  private static double computeThreshold(Preference[] prefs) {
+    if (prefs.length < 2) {
+      // Not enough data points -- return a threshold that allows everything
+      return Double.NEGATIVE_INFINITY;
+    }
+    RunningAverageAndStdDev stdDev = new FullRunningAverageAndStdDev();
+    for (int i = 0; i < prefs.length; i++) {
+      stdDev.addDatum(prefs[i].getValue());
+    }
+    return stdDev.getAverage() + stdDev.getStandardDeviation();
+  }
+
 }
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/PearsonCorrelationSimilarity.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/PearsonCorrelationSimilarity.java
index d953e7dd..a92f4d3b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/PearsonCorrelationSimilarity.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/PearsonCorrelationSimilarity.java
@@ -20,7 +20,6 @@
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.common.Weighting;
 import org.apache.mahout.cf.taste.model.DataModel;
-import org.apache.mahout.cf.taste.model.Item;
 import org.apache.mahout.cf.taste.model.User;
 
 /**
@@ -38,8 +37,6 @@
  *
  * <p><code>sumXY / sqrt(sumX2 * sumY2)</code></p>
  *
- * <p>where <code>size</code> is the number of {@link Item}s in the {@link DataModel}.</p>
- *
  * <p>Note that this correlation "centers" its data, shifts the user's preference values so that
  * each of their means is 0. This is necessary to achieve expected behavior on all data sets.</p>
  *
