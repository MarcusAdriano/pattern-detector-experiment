diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ClobStreamControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ClobStreamControl.java
index 72a7aecf..838e6802 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ClobStreamControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ClobStreamControl.java
@@ -124,6 +124,22 @@ public synchronized InputStream getRawByteStream()
         return this.bytes.getInputStream(0L);
     }
 
+    /**
+     * Constructs a <code>ClobStreamControl</code> object and
+     * initializes with a initial String.
+     *
+     * @param dbName name of the database the CLOB value belongs to
+     * @param data initial value in String
+     * @param conChild connection object used to obtain synchronization object
+     */
+    ClobStreamControl (String dbName, String data, ConnectionChild conChild)
+                          throws IOException, SQLException, StandardException {
+        if (conChild == null) {
+            throw new NullPointerException("conChild cannot be <null>");
+        }
+        this.conChild = conChild;
+        bytes = new LOBStreamControl(dbName, getByteFromString (data));
+    }
     /**
      * Finds the corresponding byte position for the given UTF-8 character
      * position, starting from the byte position <code>startPos</code>.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 00024050..2ac2639c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -112,8 +112,7 @@ multiple threads and sucks data from the stream (returned from
      EmbedBlob(byte [] blobBytes,EmbedConnection con) throws SQLException {
         super(con);
          try {
-             control = new LOBStreamControl (con.getDBName());
-             control.write (blobBytes, 0, blobBytes.length, 0);
+             control = new LOBStreamControl (con.getDBName(), blobBytes);
              materialized = true;
              //add entry in connection so it can be cleared 
              //when transaction is not valid
@@ -149,9 +148,9 @@ protected EmbedBlob(DataValueDescriptor dvd, EmbedConnection con)
 
             if (SanityManager.DEBUG)
                 SanityManager.ASSERT(dvdBytes != null,"blob has a null value underneath");
-            control = new LOBStreamControl (getEmbedConnection().getDBName());
             try {
-                control.write (dvdBytes, 0, dvdBytes.length, pos);
+                control = new LOBStreamControl (
+                            getEmbedConnection().getDBName(), dvdBytes);
             }
             catch (SQLException e) {
                 throw StandardException.newException (e.getSQLState());
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index cd890fed..fc7e4d99 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -113,9 +113,9 @@ protected EmbedClob(EmbedConnection con, DataValueDescriptor dvd)
         InputStream storeStream = dvd.getStream();
         // See if a String or a stream will be the source of the Clob.
         if (storeStream == null) {
-            this.clob = new ClobStreamControl(con.getDBName(), this);
             try {
-                this.clob.insertString (dvd.getString(), 1L);
+                clob = new ClobStreamControl(con.getDBName(),
+                        dvd.getString(), this);
             }
             catch (SQLException sqle) {
                 throw StandardException.newException (sqle.getSQLState(), sqle);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
index 6aa8aa45..589def72 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
@@ -45,12 +45,17 @@ Licensed to the Apache Software Foundation (ASF) under one
 
 /**
  * This class acts as a layer of blob/clob repository (in memory or file).
- * The max bytes of data stored in memory is MAX_BUF_SIZE. When write
- * increases the data beyond this value a temporary file is created and data
- * is moved into that. If truncate reduces the size of the file below
- * MAX_BUF_SIZE the data moved into memory.
+ * The max bytes of data stored in memory depends on the way this
+ * class is created. If the class is created with initial data, the buffer
+ * size is set to the size of the byte array supplied. If no initial data
+ * is supplied or if the initial data size is less than DEFAULT_MAX_BUF_SIZE,
+ * The buffer size is set to DEFAULT_MAX_BUF_SIZE.
+ * When write increases the data beyond this value a temporary file is created
+ * and data is moved into that. If truncate reduces the size of the file below
+ * initial buffer size (max of DEFAULT_MAX_BUF_SIZE and initial byte array size)
+ * the data moved into memory.
  *
- * This class also creates Input- and OutputStream which can be used to access
+ * This class also creates InputStream and OutputStream which can be used to access
  * blob data irrespective of if its in memory or in file.
  */
 
@@ -59,15 +64,33 @@ Licensed to the Apache Software Foundation (ASF) under one
     private StorageFile lobFile;
     private byte [] dataBytes = new byte [0];
     private boolean isBytes = true;
-    //keeping max 4k bytes in memory
-    //randomly selected value
-    private final int MAX_BUF_SIZE = 4096;
+    private final int bufferSize;
     private String dbName;
     private long updateCount;
+    private static final int DEFAULT_MAX_BUF_SIZE = 4096;
 
-    public LOBStreamControl (String dbName) {
+    /**
+     * Creates an empty LOBStreamControl.
+     * @param dbName database name
+     */
+    LOBStreamControl (String dbName) {
+        this.dbName = dbName;
+        updateCount = 0;
+        //default buffer size
+        bufferSize = DEFAULT_MAX_BUF_SIZE;
+    }
+
+    /**
+     * Creates a LOBStreamControl and initializes with a bytes array.
+     * @param dbName database name
+     * @param data initial value
+     */
+    LOBStreamControl (String dbName, byte [] data)
+                throws IOException, SQLException, StandardException {
         this.dbName = dbName;
         updateCount = 0;
+        bufferSize = Math.max (DEFAULT_MAX_BUF_SIZE, data.length);
+        write (data, 0, data.length, 0);
     }
 
     private void init(byte [] b, long len)
@@ -107,6 +130,7 @@ public Object run() throws IOException, StandardException {
         //now this call will write into the file
         if (len != 0)
             write(b, 0, (int) len, 0);
+        dataBytes = null;
     }
 
     private long updateData(byte[] bytes, int offset, int len, long pos)
@@ -186,7 +210,7 @@ synchronized long write(int b, long pos)
         isValidPostion(pos);
         updateCount++;
         if (isBytes) {
-            if (pos < MAX_BUF_SIZE) {
+            if (pos < bufferSize) {
                 byte [] bytes = {(byte) b};
                 updateData(bytes, 0, 1, pos);
                 return pos + 1;
@@ -223,7 +247,7 @@ synchronized long write(byte[] b, int off, int len, long pos)
         }
         updateCount++;
         if (isBytes) {
-            if (pos + len <= MAX_BUF_SIZE)
+            if (pos + len <= bufferSize)
                 return updateData(b, off, len, pos);
             else {
                 init(dataBytes, pos);
@@ -331,7 +355,7 @@ synchronized void truncate(long size)
             System.arraycopy(dataBytes, 0, tmpByte, 0, (int) size);
             dataBytes = tmpByte;
         } else {
-            if (size < MAX_BUF_SIZE) {
+            if (size < bufferSize) {
                 dataBytes = new byte [(int) size];
                 read(dataBytes, 0, dataBytes.length, 0);
                 isBytes = true;
@@ -356,11 +380,10 @@ synchronized void truncate(long size)
      */
     synchronized void copyData(InputStream inStream,
             long length) throws IOException, SQLException, StandardException {
-        byte [] data = new byte [MAX_BUF_SIZE];
+        byte [] data = new byte [bufferSize];
         long sz = 0;
         while (sz < length) {
-            int len = (int) (((length - sz) >= MAX_BUF_SIZE) ? MAX_BUF_SIZE
-                    : length - sz);
+            int len = (int) Math.min (length - sz, bufferSize);
             inStream.read(data, 0, len);
             write(data, 0, len, sz);
             sz += len;
@@ -420,7 +443,7 @@ synchronized long replaceBytes (byte [] buf, long stPos, long endPos)
         long length = getLength();
         long finalLength = length - endPos + stPos + buf.length;
         if (isBytes) {
-            if (finalLength > MAX_BUF_SIZE) {
+            if (finalLength > bufferSize) {
                 init (dataBytes, stPos);
                 write (buf, 0, buf.length, getLength());
                 if (endPos < length)
