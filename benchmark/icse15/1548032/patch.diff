diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index 39ec90f2..63be7b99 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -1875,12 +1875,27 @@ public void crossCheckGetColumnRowAndResultSetMetaData(
         int col = rs.getInt("ORDINAL_POSITION");
         Version dataVersion = getDataVersion( getConnection() );
         
+        String catalogName = rs.getString("TABLE_CAT");
+        String schemaName = rs.getString("TABLE_SCHEM");
+        String tableName = rs.getString("TABLE_NAME");
+
+        // Check that the catalog/schema/table names reported by the
+        // ResultSetMetaData are correct. Note that for views, RSMD will
+        // return data for the underlying table, not for the view itself.
+        // Therefore, skip the check for views.
+        ResultSet views =
+            rs.getStatement().getConnection().getMetaData().getTables(
+                    catalogName, schemaName, tableName, JDBC.GET_TABLES_VIEW);
+        boolean isView = JDBC.assertDrainResults(views) > 0;
+
+        if (!isView) {
         assertEquals("RSMD.getCatalogName",
-                rsmdt.getCatalogName(col), rs.getString("TABLE_CAT"));
+                         catalogName, rsmdt.getCatalogName(col));
         assertEquals("RSMD.getSchemaName",
-                rsmdt.getSchemaName(col), rs.getString("TABLE_SCHEM"));
+                         schemaName, rsmdt.getSchemaName(col));
         assertEquals("RSMD.getTableName",
-                rsmdt.getTableName(col), rs.getString("TABLE_NAME"));
+                         tableName, rsmdt.getTableName(col));
+        }
         
         assertEquals("COLUMN_NAME",
                 rsmdt.getColumnName(col), rs.getString("COLUMN_NAME"));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java
index e54aba70..970bb43e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java
@@ -104,4 +104,127 @@ public void testTriggerWhenClause() throws SQLException {
                 break;
         }
     }
+
+    /**
+     * Test how dropping trigger dependencies works across upgrade and
+     * downgrade. Regression test for DERBY-2041.
+     */
+    public void testDropTriggerDependencies() throws SQLException {
+        if (!oldAtLeast(10, 2)) {
+            // Support for SYNONYMS was added in 10.1. Support for CALL
+            // statements in trigger actions was added in 10.2. Since this
+            // test case uses both of those features, skip it on the oldest
+            // versions.
+            return;
+        }
+
+        setAutoCommit(false);
+        Statement s = createStatement();
+        switch (getPhase()) {
+            case PH_CREATE:
+                // Let's create some objects to use in the triggers.
+                s.execute("create table d2041_t(x int)");
+                s.execute("create table d2041_table(x int)");
+                s.execute("create table d2041_synonym_table(x int)");
+                s.execute("create synonym d2041_synonym "
+                        + "for d2041_synonym_table");
+                s.execute("create view d2041_view(x) as values 1");
+                s.execute("create function d2041_func(i int) returns int "
+                        + "language java parameter style java "
+                        + "external name 'java.lang.Math.abs' no sql");
+                s.execute("create procedure d2041_proc() "
+                        + "language java parameter style java "
+                        + "external name 'java.lang.Thread.yield' no sql");
+
+                // Create the triggers with the old version.
+                createDerby2041Triggers(s);
+                commit();
+                break;
+            case PH_SOFT_UPGRADE:
+                // Drop the trigger dependencies. Since the triggers were
+                // created with the old version, the dependencies were not
+                // registered, so expect the DROP operations to succeed.
+                dropDerby2041TriggerDeps(s, false);
+
+                // The triggers still exist, so it is possible to drop them.
+                dropDerby2041Triggers(s);
+
+                // We want to use the objects further, so roll back the
+                // DROP operations.
+                rollback();
+
+                // Recreate the triggers with the new version.
+                dropDerby2041Triggers(s);
+                createDerby2041Triggers(s);
+                commit();
+
+                // Dropping the dependencies now should fail.
+                dropDerby2041TriggerDeps(s, true);
+                break;
+            case PH_POST_SOFT_UPGRADE:
+                // After downgrade, the behaviour isn't quite consistent. The
+                // dependencies were registered when the triggers were created
+                // with the new version, but the old versions only have code
+                // to detect some of the dependencies. So some will fail and
+                // others will succeed.
+
+                // Dependencies on tables and synonyms are detected.
+                assertStatementError("X0Y25", s, "drop table d2041_table");
+                assertStatementError("X0Y25", s, "drop synonym d2041_synonym");
+
+                // Dependencies on views, functions and procedures are not
+                // detected.
+                s.execute("drop view d2041_view");
+                s.execute("drop function d2041_func");
+                s.execute("drop procedure d2041_proc");
+
+                // Restore the database state.
+                rollback();
+                break;
+            case PH_HARD_UPGRADE:
+                // In hard upgrade, we should be able to detect the
+                // dependencies registered when the triggers were created
+                // in the soft-upgraded database.
+                dropDerby2041TriggerDeps(s, true);
+        }
+    }
+
+    private void createDerby2041Triggers(Statement s) throws SQLException {
+        s.execute("create trigger d2041_tr1 after insert on d2041_t "
+                + "for each row mode db2sql insert into d2041_table values 1");
+        s.execute("create trigger d2041_tr2 after insert on d2041_t "
+                + "for each row mode db2sql "
+                + "insert into d2041_synonym values 1");
+        s.execute("create trigger d2041_tr3 after insert on d2041_t "
+                + "for each row mode db2sql select * from d2041_view");
+        s.execute("create trigger d2041_tr4 after insert on d2041_t "
+                + "for each row mode db2sql values d2041_func(1)");
+        s.execute("create trigger d2041_tr5 after insert on d2041_t "
+                + "for each row mode db2sql call d2041_proc()");
+    }
+
+    private void dropDerby2041Triggers(Statement s) throws SQLException {
+        for (int i = 1; i <= 5; i++) {
+            s.execute("drop trigger d2041_tr" + i);
+        }
+    }
+
+    private void dropDerby2041TriggerDeps(Statement s, boolean expectFailure)
+            throws SQLException {
+        String[] stmts = {
+            "drop table d2041_table",
+            "drop synonym d2041_synonym",
+            "drop view d2041_view",
+            "drop function d2041_func",
+            "drop procedure d2041_proc",
+        };
+
+        for (String stmt : stmts) {
+            if (expectFailure) {
+                assertStatementError("X0Y25", s, stmt);
+            } else {
+                assertUpdateCount(s, 0, stmt);
+            }
+        }
+    }
 }
