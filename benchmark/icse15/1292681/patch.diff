diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index 85b351f6..cdd61486 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -86,7 +86,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.RowLocation;
 import org.apache.derby.iapi.util.IdUtil;
 import org.apache.derby.iapi.util.StringUtil;
-import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
 import org.apache.derby.impl.sql.compile.CollectNodesVisitor;
 import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;
 import org.apache.derby.impl.sql.compile.ColumnReference;
@@ -2367,9 +2366,10 @@ private void truncateTable()
 
 			for (int index = 0; index < numIndexes; index++)
 			{
+                IndexRowGenerator curIndex = compressIRGs[index];
 				// create a single index row template for each index
-				indexRows[index] = compressIRGs[index].getIndexRowTemplate();
-				compressIRGs[index].getIndexRow(emptyHeapRow, 
+                indexRows[index] = curIndex.getIndexRowTemplate();
+                curIndex.getIndexRow(emptyHeapRow, 
 											  rl, 
 											  indexRows[index],
 											  (FormatableBitSet) null);
@@ -2378,15 +2378,15 @@ private void truncateTable()
 				 * No need to try to enforce uniqueness here as
 				 * index should be valid.
 				 */
-				int[] baseColumnPositions = 
-                    compressIRGs[index].baseColumnPositions();
+                int[] baseColumnPositions = curIndex.baseColumnPositions();
 
-				boolean[] isAscending = compressIRGs[index].isAscending();
+                boolean[] isAscending = curIndex.isAscending();
 
 				int numColumnOrderings;
 				numColumnOrderings = baseColumnPositions.length + 1;
 				ordering[index]    = new ColumnOrdering[numColumnOrderings];
-                collation[index]   = new int[baseColumnPositions.length + 1];
+                collation[index]   = curIndex.getColumnCollationIds(
+                                                td.getColumnDescriptorList());
 
 				for (int ii =0; ii < numColumnOrderings - 1; ii++) 
 				{
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
index 6643bd7c..1dca8693 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
@@ -1827,6 +1827,39 @@ private void runDerby2670()
         s.close();
     }
 
+    /**
+     * Tests that truncating a table with indexes leaves us with a valid set
+     * of conglomerates.
+     */
+    private void runDerby5530TruncateIndex()
+            throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.executeUpdate("create table d5530i (val varchar(10))");
+        s.executeUpdate("create index idx on d5530i(val)");
+        s.executeUpdate("truncate table d5530i");
+        s.executeUpdate("insert into d5530i values 'one', 'two'");
+        ResultSet rs = s.executeQuery("select * from d5530i");
+        JDBC.assertUnorderedResultSet(rs, new String[][] {{"one"}, {"two"}});
+        rollback();
+    }
+
+    /**
+     * Tests that truncating a table without indexes leaves us with a valid
+     * conglomerate.
+     */
+    private void runDerby5530TruncateNoIndex()
+            throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.executeUpdate("create table d5530 (val varchar(10))");
+        s.executeUpdate("truncate table d5530");
+        s.executeUpdate("insert into d5530 values 'one', 'two'");
+        ResultSet rs = s.executeQuery("select * from d5530");
+        JDBC.assertUnorderedResultSet(rs, new String[][] {{"one"}, {"two"}});
+        rollback();
+    }
+
     /**
      * Shared code to run all test cases against a single collation.
      * <p>
@@ -1894,6 +1927,8 @@ private void runTestIter(
 
         runLikeTests(db_index);
 
+        runDerby5530TruncateNoIndex();
+        runDerby5530TruncateIndex();
 
         /*
         TODO -MIKEM, this test does not work yet.
