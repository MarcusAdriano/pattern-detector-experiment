diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/diag/LockTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/diag/LockTable.java
index ec5e593b..338234c0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/diag/LockTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/diag/LockTable.java
@@ -53,9 +53,7 @@
 	the database.
 	
 	This virtual table can be invoked by calling it directly
-	<PRE> select * from new org.apache.derby.diag.LockTable() t; </PRE>
-	or through the system alias LOCKTABLE
-	<PRE> select * from new LOCKTABLE() t; </PRE> 
+	<PRE> select * from SYSCS_DIAG.LOCK_TABLE </PRE>
 	
 	<P>The LockTable virtual table takes a snap shot of the lock table while
 	the system is in flux, so it is possible that some locks may be in
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/diag/TransactionTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/diag/TransactionTable.java
index 4a050e45..ee32fa73 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/diag/TransactionTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/diag/TransactionTable.java
@@ -50,9 +50,7 @@
 	
 	This virtual table can be invoked by calling it
 	directly
-	<PRE> select * from new org.apache.derby.diag.TransactionTable() t; </PRE>
-	or through the system alias TransactionTable
-	<PRE> select * from new TRANSACTIONTABLE() t; </PRE> 
+	<PRE> select * from SYSCS_DIAG.TRANSACTION_TABLE </PRE>
 
 	<P>The TransactionTable virtual table takes a snap shot of the 
 	transaction table while the system is in flux, so it is possible that some
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java
index 46dfbad8..2eaf93a5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java
@@ -211,13 +211,12 @@ else if (cursorTargetTableName != null)
 				}
 			}
 
-			/* descriptor must exist, tables already bound.
-			 * No need to do this for VTI as VTI was bound in
-			 * super.bindTables() above.
-			 */
-			verifyTargetTable();
+
 		}
 
+		// descriptor must exist, tables already bound.
+		verifyTargetTable();
+
 		/* Generate a select list for the ResultSetNode - CurrentRowLocation(). */
 		if (SanityManager.DEBUG)
 		SanityManager.ASSERT((resultSet.resultColumns == null),
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
index e2789211..1f6e793d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
@@ -269,13 +269,12 @@ else if (cursorTargetTableName != null)
 						currentOfNode.getCursorName());
 				}
 			}
+		}
 
 			// because we verified that the tables match
 			// and we already bound the cursor or the select,
 			// the table descriptor should always be found.
 			verifyTargetTable();
-		}
-
 
 		/* OVERVIEW - We generate a new ResultColumn, CurrentRowLocation(), and
 		 * prepend it to the beginning of the source ResultColumnList.  This
