diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index ecb6f235..1b14f2ae 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -83,9 +83,9 @@
     /**
      * @return The (ksname,cfname) pair for the given id, or null if it has been dropped.
      */
-    public static final Pair<String,String> getCF(int id)
+    public static final Pair<String,String> getCF(Integer cfId)
     {
-        return cfIdMap.inverse().get(Integer.valueOf(id));
+        return cfIdMap.inverse().get(cfId);
     }
     
     /**
@@ -114,13 +114,13 @@ public static final void fixMaxId()
     public final double rowCacheSize; // default 0
     public final double keyCacheSize; // default 0.01
     public final double readRepairChance; //chance 0 to 1, of doing a read repair; defaults 1.0 (always)
-    public final int cfId;
+    public final Integer cfId;
     public boolean preloadRowCache;
 
     // BytesToken because byte[].hashCode|equals is inherited from Object.  gggrrr...
     public final Map<ByteArrayKey, ColumnDefinition> column_metadata;
 
-    private CFMetaData(String tableName, String cfName, ColumnFamilyType cfType, ClockType clockType, AbstractType comparator, AbstractType subcolumnComparator, AbstractReconciler reconciler, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance, int cfId, Map<ByteArrayKey, ColumnDefinition> column_metadata)
+    private CFMetaData(String tableName, String cfName, ColumnFamilyType cfType, ClockType clockType, AbstractType comparator, AbstractType subcolumnComparator, AbstractReconciler reconciler, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance, Integer cfId, Map<ByteArrayKey, ColumnDefinition> column_metadata)
     {
         assert column_metadata != null;
         this.tableName = tableName;
@@ -283,7 +283,7 @@ else if (obj == null || obj.getClass() != getClass())
             .append(rowCacheSize, rhs.rowCacheSize)
             .append(keyCacheSize, rhs.keyCacheSize)
             .append(readRepairChance, rhs.readRepairChance)
-            .append(cfId, rhs.cfId)
+            .append(cfId.intValue(), rhs.cfId.intValue())
             .append(column_metadata, rhs.column_metadata)
             .isEquals();
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 06296d3e..d3817115 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -761,9 +761,9 @@ public static CFMetaData getCFMetaData(String tableName, String cfName)
         return ksm.cfMetaData().get(cfName);
     }
     
-    public static CFMetaData getCFMetaData(int cfid)
+    public static CFMetaData getCFMetaData(Integer cfId)
     {
-        Pair<String,String> cf = CFMetaData.getCF(cfid);
+        Pair<String,String> cf = CFMetaData.getCF(cfId);
         if (cf == null)
             return null;
         return getCFMetaData(cf.left, cf.right);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index 0b7b7e95..ad1541e4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -46,9 +46,9 @@ public static ColumnFamilySerializer serializer()
         return serializer;
     }
 
-    public static ColumnFamily create(int cfid)
+    public static ColumnFamily create(Integer cfId)
     {
-        return create(DatabaseDescriptor.getCFMetaData(cfid));
+        return create(DatabaseDescriptor.getCFMetaData(cfId));
     }
 
     public static ColumnFamily create(String tableName, String cfName)
@@ -63,7 +63,7 @@ public static ColumnFamily create(CFMetaData cfm)
         return new ColumnFamily(cfm.cfType, cfm.clockType, cfm.comparator, cfm.subcolumnComparator, cfm.reconciler, cfm.cfId);
     }
 
-    private final int cfid;
+    private final Integer cfid;
     private final ColumnFamilyType type;
     private final ClockType clockType;
     private final AbstractReconciler reconciler;
@@ -73,7 +73,7 @@ public static ColumnFamily create(CFMetaData cfm)
     final AtomicInteger localDeletionTime = new AtomicInteger(Integer.MIN_VALUE);
     private ConcurrentSkipListMap<byte[], IColumn> columns;
 
-    public ColumnFamily(ColumnFamilyType type, ClockType clockType, AbstractType comparator, AbstractType subcolumnComparator, AbstractReconciler reconciler, int cfid)
+    public ColumnFamily(ColumnFamilyType type, ClockType clockType, AbstractType comparator, AbstractType subcolumnComparator, AbstractReconciler reconciler, Integer cfid)
     {
         this.type = type;
         this.clockType = clockType;
@@ -119,7 +119,7 @@ public ColumnFamily cloneMe()
         return cf;
     }
 
-    public int id()
+    public Integer id()
     {
         return cfid;
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index d2c10a16..f76ee8bb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -107,7 +107,7 @@ public boolean accept(File dir, String name)
     private final String table_;
     public final String columnFamily_;
 
-    private volatile Integer memtableSwitchCount = 0;
+    private volatile int memtableSwitchCount = 0;
 
     /* This is used to generate the next index for a SSTable */
     private AtomicInteger fileIndexGenerator_ = new AtomicInteger(0);
@@ -210,7 +210,7 @@ public boolean accept(File dir, String name)
         ssTables_.add(sstables);
     }
 
-    public void addToCompactedRowStats(Long rowsize)
+    public void addToCompactedRowStats(long rowsize)
     {
         if (minRowCompactedSize < 1 || rowsize < minRowCompactedSize)
             minRowCompactedSize = rowsize;
@@ -379,7 +379,7 @@ public void runMayThrow() throws InterruptedException, IOException
                     {
                         // if we're not writing to the commit log, we are replaying the log, so marking
                         // the log header with "you can discard anything written before the context" is not valid
-                        final int cfId = DatabaseDescriptor.getTableMetaData(table_).get(columnFamily_).cfId;
+                        final Integer cfId = DatabaseDescriptor.getTableMetaData(table_).get(columnFamily_).cfId;
                         logger_.debug("Discarding {}", cfId);
                         CommitLog.instance().discardCompletedSegments(cfId, ctx);
                     }
@@ -1203,29 +1203,29 @@ public long getRecentBloomFilterFalsePositives()
 
     public double getBloomFilterFalseRatio()
     {
-        Long falseCount = 0L;
-        Long trueCount = 0L;
+        long falseCount = 0L;
+        long trueCount = 0L;
         for (SSTableReader sstable: getSSTables())
         {
             falseCount += sstable.getBloomFilterFalsePositiveCount();
             trueCount += sstable.getBloomFilterTruePositiveCount();
         }
-        if (falseCount.equals(0L) && trueCount.equals(0L))
+        if (falseCount == 0L && trueCount == 0L)
             return 0d;
-        return falseCount.doubleValue() / (trueCount.doubleValue() + falseCount.doubleValue());
+        return (double) falseCount / (trueCount + falseCount);
     }
 
     public double getRecentBloomFilterFalseRatio()
     {
-        Long falseCount = 0L;
-        Long trueCount = 0L;
+        long falseCount = 0L;
+        long trueCount = 0L;
         for (SSTableReader sstable: getSSTables())
         {
             falseCount += sstable.getRecentBloomFilterFalsePositiveCount();
             trueCount += sstable.getRecentBloomFilterTruePositiveCount();
         }
-        if (falseCount.equals(0L) && trueCount.equals(0L))
+        if (falseCount == 0L && trueCount == 0L)
             return 0d;
-        return falseCount.doubleValue() / (trueCount.doubleValue() + falseCount.doubleValue());
+        return (double) falseCount / (trueCount + falseCount);
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 96977fa9..1c5763fc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -257,7 +257,7 @@ public void run()
     }
     
     /** removes a cf from internal structures (doesn't change disk files). */
-    public void dropCf(int cfId) throws IOException
+    public void dropCf(Integer cfId) throws IOException
     {
         assert columnFamilyStores.containsKey(cfId);
         ColumnFamilyStore cfs = columnFamilyStores.remove(cfId);
@@ -279,14 +279,14 @@ public void dropCf(int cfId) throws IOException
     }
     
     /** adds a cf to internal structures, ends up creating disk files). */
-    public void initCf(int cfId, String cfName)
+    public void initCf(Integer cfId, String cfName)
     {
         assert !columnFamilyStores.containsKey(cfId) : cfId;
         columnFamilyStores.put(cfId, ColumnFamilyStore.createColumnFamilyStore(name, cfName));
     }
     
     /** basically a combined drop and add */
-    public void renameCf(int cfId, String newName) throws IOException
+    public void renameCf(Integer cfId, String newName) throws IOException
     {
         dropCf(cfId);
         initCf(cfId, newName);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
index 47203b5b..9b9aafd7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
@@ -366,7 +366,7 @@ public void add(RowMutation rowMutation, Object serializedRow) throws IOExceptio
      * The bit flag associated with this column family is set in the
      * header and this is used to decide if the log file can be deleted.
     */
-    public void discardCompletedSegments(final int cfId, final CommitLogSegment.CommitLogContext context) throws IOException
+    public void discardCompletedSegments(final Integer cfId, final CommitLogSegment.CommitLogContext context) throws IOException
     {
         Callable task = new Callable()
         {
@@ -397,7 +397,7 @@ public Object call() throws IOException
      * param @ id id of the columnFamily being flushed to disk.
      *
     */
-    private void discardCompletedSegmentsInternal(CommitLogSegment.CommitLogContext context, int id) throws IOException
+    private void discardCompletedSegmentsInternal(CommitLogSegment.CommitLogContext context, Integer id) throws IOException
     {
         if (logger.isDebugEnabled())
             logger.debug("discard completed log segments for " + context + ", column family " + id + ".");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java
index c3216960..2b7d75f2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java
@@ -62,23 +62,24 @@ private CommitLogHeader(Map<Integer, Integer> cfDirtiedAt, int cfCount)
         assert cfDirtiedAt.size() <= cfCount;
     }
         
-    boolean isDirty(int cfId)
+    boolean isDirty(Integer cfId)
     {
         return cfDirtiedAt.containsKey(cfId);
     } 
     
-    int getPosition(int index)
+    int getPosition(Integer cfId)
     {
-        Integer x = cfDirtiedAt.get(index);
+        Integer x = cfDirtiedAt.get(cfId);
         return x == null ? 0 : x;
     }
     
-    void turnOn(int cfId, long position)
+    void turnOn(Integer cfId, long position)
     {
+        assert position >= 0 && position <= Integer.MAX_VALUE;
         cfDirtiedAt.put(cfId, (int)position);
     }
 
-    void turnOff(int cfId)
+    void turnOff(Integer cfId)
     {
         cfDirtiedAt.remove(cfId);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
index 94a9c440..6b5712be 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
@@ -96,7 +96,7 @@ private static BufferedRandomAccessFile createWriter(String file) throws IOExcep
                 }
                 else
                 {
-                    int id = cfm.cfId;
+                    Integer id = cfm.cfId;
                     if (!header.isDirty(id))
                     {
                         header.turnOn(id, logWriter.getFilePointer());
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
index 4d83eeb5..66727f46 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
@@ -47,7 +47,7 @@
     private String tableName;
     private String oldName;
     private String newName;
-    private int cfId;
+    private Integer cfId;
     
     RenameColumnFamily(DataInputStream din) throws IOException
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
index 90e111f7..541522c2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
@@ -62,7 +62,7 @@ public void add(long n)
         buckets.incrementAndGet(index);
     }
 
-    public long[] get(Boolean reset)
+    public long[] get(boolean reset)
     {
         long[] rv = new long[numBuckets];
         for (int i = 0; i < numBuckets; i++)
