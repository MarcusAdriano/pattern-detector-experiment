diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/DatabaseMetaData.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/DatabaseMetaData.java
index f3e390b9..73612a17 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/DatabaseMetaData.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/DatabaseMetaData.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 
 import org.apache.derby.shared.common.reference.SQLState;
+import org.apache.derby.iapi.services.info.JVMInfo;
 
 // Note:
 //   Tag members using the strictest visibility.
@@ -2275,7 +2276,7 @@ public int getJDBCMajorVersion() throws SQLException {
 
     public int getJDBCMinorVersion() throws SQLException {
         checkForClosedConnection();
-        return 0;
+        return JVMInfo.jdbcMinorVersion();
     }
 
     public int getSQLStateType() throws SQLException {
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java
index 996ad4e1..3a5f838f 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.client.am.ClientMessageId;
 import org.apache.derby.client.am.SqlException;
 import org.apache.derby.shared.common.reference.SQLState;
+import org.apache.derby.iapi.services.info.JVMInfo;
 
 public class NetDatabaseMetaData40 extends org.apache.derby.client.net.NetDatabaseMetaData {
     
@@ -51,7 +52,8 @@ public int getJDBCMajorVersion() throws SQLException {
      */
     public int getJDBCMinorVersion() throws SQLException {
         checkForClosedConnection();
-        return 1;
+        //return 1;
+        return JVMInfo.jdbcMinorVersion();
     }
 
     /**
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
index 2440e479..20451ccb 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
@@ -61,6 +61,36 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public static final int J2SE_17 = 8; // Java SE 7
     public static final int J2SE_18 = 9;
 
+
+    public static int jdbcMajorVersion()
+    { 
+        switch (JDK_ID)
+        { 
+        case J2SE_14: return 3; 
+        case J2SE_142: return 3; 
+        case J2SE_15: return 3; 
+        case J2SE_16: return 4; 
+        case J2SE_17: return 4; 
+        case J2SE_18: 
+        default: return 4;
+        }
+    }
+
+    public static int jdbcMinorVersion()
+    {
+        switch (JDK_ID)
+        { 
+        case J2SE_14: return 0; 
+        case J2SE_142: return 0; 
+        case J2SE_15: return 0; 
+        case J2SE_16: return 0; 
+        case J2SE_17: return 1; 
+        case J2SE_18: 
+        default: return 2; 
+        }
+    } 
+
+
 	public static final boolean J2ME;
 
 	static 
@@ -175,14 +205,15 @@ private static boolean vmCheck(String vmVersion, String id)
 	*/
 	public static String derbyVMLevel()
 	{
+		String jdbcVersion = jdbcMajorVersion() + "." + jdbcMinorVersion();
 		switch (JDK_ID)
 		{
-		case J2SE_14: return J2ME ? "J2ME - JDBC for CDC/FP 1.1" : "J2SE 1.4 - JDBC 3.0";
-		case J2SE_142: return "J2SE 1.4.2 - JDBC 3.0";
-		case J2SE_15: return "J2SE 5.0 - JDBC 3.0";
-        case J2SE_16: return "Java SE 6 - JDBC 4.1";
-        case J2SE_17: return "Java SE 7 - JDBC 4.1";
-        case J2SE_18: return "Java SE 8 - JDBC 4.1";
+		case J2SE_14: return J2ME ? "J2ME - JDBC for CDC/FP 1.1" : "J2SE 1.4 - JDBC " + jdbcVersion;
+		case J2SE_142: return "J2SE 1.4.2 - JDBC " + jdbcVersion;
+		case J2SE_15: return "J2SE 5.0 - JDBC " + jdbcVersion;
+        case J2SE_16: return "Java SE 6 - JDBC " + jdbcVersion;
+        case J2SE_17: return "Java SE 7 - JDBC " + jdbcVersion;
+        case J2SE_18: return "Java SE 8 - JDBC " + jdbcVersion;
 		default: return "?-?";
 		}
 	}
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java
index db6e1b38..883d49f1 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.RowIdLifetime;
 import java.sql.SQLException;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.services.info.JVMInfo;
 
 public class EmbedDatabaseMetaData40 extends EmbedDatabaseMetaData {
     
@@ -46,7 +47,7 @@ public int getJDBCMajorVersion() {
      * @return JDBC version minor number
      */
     public int getJDBCMinorVersion() {
-        return 1;
+        return JVMInfo.jdbcMinorVersion();
     }
 
     public RowIdLifetime getRowIdLifetime() throws SQLException {
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index 090e67e2..0488fd3a 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -690,11 +690,21 @@ else if (usingDerbyNetClient())
         
         int expectedJDBCMajor = -1;
         int expectedJDBCMinor = -1;
-        if (JDBC.vmSupportsJDBC4())
+        if (JDBC.vmSupportsJDBC42())
+        {
+            expectedJDBCMajor = 4;
+            expectedJDBCMinor = 2;
+        }
+        else if (JDBC.vmSupportsJDBC41())
         {
             expectedJDBCMajor = 4;
             expectedJDBCMinor = 1;
         }
+        else if (JDBC.vmSupportsJDBC4())
+        {
+            expectedJDBCMajor = 4;
+            expectedJDBCMinor = 0;
+        }
         else if (JDBC.vmSupportsJDBC3())
         {
             expectedJDBCMajor = 3;
