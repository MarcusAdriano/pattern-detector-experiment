diff --git a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
index 497eac1b..c1d78881 100644
--- a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
+++ b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
@@ -84,6 +84,8 @@ static void initClientMessageIds()
         clientMessageIds.add(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION);
         clientMessageIds.add(SQLState.LOB_METHOD_ON_CLOSED_CONNECTION);
         clientMessageIds.add(SQLState.QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET);
+        clientMessageIds.add(SQLState.MULTIPLE_RESULTS_ON_EXECUTE_QUERY);
+        clientMessageIds.add(SQLState.USE_EXECUTE_UPDATE_WITH_NO_RESULTS);
         clientMessageIds.add(SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE);
         clientMessageIds.add(SQLState.LANG_CANT_INVALIDATE_OPEN_RESULT_SET);
         clientMessageIds.add(SQLState.YEAR_EXCEEDS_MAXIMUM);
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
index 23779b9e..302da520 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
@@ -127,89 +127,6 @@ protected void finalize() throws java.lang.Throwable {
 
     //---------------------------entry points-------------------------------------
 
-    public boolean execute() throws SQLException {
-        try
-        {
-            synchronized (connection_) {
-                if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceEntry(this, "execute");
-                }
-                boolean b = executeX();
-                if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceExit(this, "execute", b);
-                }
-                return b;
-            }
-        }
-        catch ( SqlException se )
-        {
-            throw se.getSQLException();
-        }
-    }
-
-    // also used by SQLCA
-    boolean executeX() throws SqlException {
-        super.flowExecute(executeMethod__);
-        return resultSet_ != null;
-    }
-
-    public java.sql.ResultSet executeQuery() throws SQLException {
-        try
-        {
-            synchronized (connection_) {
-                if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceEntry(this, "executeQuery");
-                }
-                ResultSet resultSet = executeQueryX();
-                if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceExit(this, "executeQuery", resultSet);
-                }
-                return resultSet;
-            }
-        }
-        catch ( SqlException se )
-        {
-            throw se.getSQLException();
-        }
-    }
-
-    // also used by DBMD methods
-    ResultSet executeQueryX() throws SqlException {
-        super.flowExecute(executeQueryMethod__);
-        super.checkExecuteQueryPostConditions("java.sql.CallableStatement");
-        return resultSet_;
-    }
-
-    public int executeUpdate() throws SQLException {
-        try
-        {
-            synchronized (connection_) {
-                if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceEntry(this, "executeUpdate");
-                }
-                int updateValue = executeUpdateX();
-                if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceExit(this, "executeUpdate", updateValue);
-                }
-                return updateValue;
-            }
-        }
-        catch ( SqlException se )
-        {
-            throw se.getSQLException();
-        }
-    }
-
-    int executeUpdateX() throws SqlException {
-        super.flowExecute(executeUpdateMethod__);
-
-        super.checkExecuteUpdatePostConditions("java.sql.CallableStatement");
-        // make sure update count >= 0 even if derby don't support update count for call
-        //return (updateCount_ < 0) ? 0 : updateCount_;
-        return updateCount_;
-    }
-
-
     public void clearParameters() throws SQLException {
         synchronized (connection_) {
             if (agent_.loggingEnabled()) {
@@ -1428,6 +1345,14 @@ public Reader getCharacterStream(int parameterIndex)
     
     //----------------------------helper methods----------------------------------
 
+    /**
+     * Returns the name of the java.sql interface implemented by this class.
+     * @return name of java.sql interface
+     */
+    protected String getJdbcStatementInterfaceName() {
+        return "java.sql.CallableStatement";
+    }
+
     private int checkForEscapedCallWithResult(int parameterIndex) throws SqlException {
         if (escapedProcedureCallWithResult_) {
             parameterIndex--;
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
index fa2acdbb..d8768675 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -360,8 +360,6 @@ public int executeUpdate(String sql) throws SQLException {
     // also called by some DBMD methods
     ResultSet executeQueryX() throws SqlException {
         flowExecute(executeQueryMethod__);
-
-        super.checkExecuteQueryPostConditions("java.sql.PreparedStatement");
         return resultSet_;
     }
 
@@ -388,7 +386,6 @@ public int executeUpdate() throws SQLException {
 
     private int executeUpdateX() throws SqlException {
         flowExecute(executeUpdateMethod__);
-        checkExecuteUpdatePostConditions("java.sql.PreparedStatement");
         return updateCount_;
     }
 
@@ -1297,7 +1294,8 @@ public boolean execute() throws SQLException {
         }
     }
 
-    private boolean executeX() throws SqlException {
+    // also used by SQLCA
+    boolean executeX() throws SqlException {
         flowExecute(executeMethod__);
 
         return resultSet_ != null;
@@ -1882,6 +1880,7 @@ void flowExecute(int executeType) throws SqlException {
 
             if (sqlMode_ == isCall__) {
                 parseStorProcReturnedScrollableRowset();
+                checkForStoredProcResultSetCount(executeType);
                 // When there are no result sets back, we will commit immediately when autocommit is true.
                 // make sure a commit is not performed when making the call to the sqlca message procedure
                 if (connection_.autoCommit_ && resultSet_ == null && resultSetList_ == null && isAutoCommittableStatement_) {
@@ -2107,6 +2106,14 @@ public void completeLocalRollback(java.util.Iterator listenerIterator) {
 
     //----------------------------internal use only helper methods----------------
 
+    /**
+     * Returns the name of the java.sql interface implemented by this class.
+     * @return name of java.sql interface
+     */
+    protected String getJdbcStatementInterfaceName() {
+        return "java.sql.PreparedStatement";
+    }
+
     private int checkSetterPreconditions(int parameterIndex) throws SqlException {
         super.checkForClosedStatement();
         parameterIndex = checkForEscapedCallWithResult(parameterIndex);
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
index 2427b2b9..7f99e52d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
@@ -419,26 +419,9 @@ protected SqlWarning getSqlWarnings() {
 
     private ResultSet executeQueryX(String sql) throws SqlException {
         flowExecute(executeQueryMethod__, sql);
-
-        checkExecuteQueryPostConditions("java.sql.Statement");
         return resultSet_;
     }
 
-    void checkExecuteQueryPostConditions(String jdbcStatementInterfaceName) throws SqlException {
-        // We'll just rely on finalizers to close the dangling result sets.
-        if (resultSetList_ != null && resultSetList_.length != 1) {
-            throw new SqlException(agent_.logWriter_, 
-                new ClientMessageId(SQLState.MULTIPLE_RESULTS_ON_EXECUTE_QUERY),
-                jdbcStatementInterfaceName, jdbcStatementInterfaceName);
-        }
-
-        if (resultSet_ == null) {
-            throw new SqlException(agent_.logWriter_, 
-                new ClientMessageId(SQLState.USE_EXECUTE_UPDATE_WITH_NO_RESULTS),
-                jdbcStatementInterfaceName, jdbcStatementInterfaceName);
-        }
-    }
-
     public int executeUpdate(String sql) throws SQLException {
         try
         {
@@ -461,26 +444,9 @@ public int executeUpdate(String sql) throws SQLException {
 
     private int executeUpdateX(String sql) throws SqlException {
         flowExecute(executeUpdateMethod__, sql);
-
-        checkExecuteUpdatePostConditions("java.sql.Statement");
         return updateCount_;
     }
 
-    void checkExecuteUpdatePostConditions(String jdbcStatementInterfaceName) throws SqlException {
-        // We'll just rely on finalizers to close the dangling result sets.
-        if (resultSetList_ != null) {
-            throw new SqlException(agent_.logWriter_, 
-                new ClientMessageId(SQLState.MULTIPLE_RESULTS_ON_EXECUTE_QUERY),
-                jdbcStatementInterfaceName, jdbcStatementInterfaceName);
-        }
-
-        // We'll just rely on the finalizer to close the dangling result set.
-        if (resultSet_ != null) {
-            throw new SqlException(agent_.logWriter_, 
-                new ClientMessageId(SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE));
-        }
-    }
-
     /**
      * Returns false unless <code>iface</code> is implemented 
      * 
@@ -2079,6 +2045,7 @@ else if (sqlUpdateMode_ == isInsertSql__ && generatedKeysColumnNames_ != null) {
         // In the case of executing a call to a stored procedure.
         if (sqlMode_ == isCall__) {
             parseStorProcReturnedScrollableRowset();
+            checkForStoredProcResultSetCount(executeType);
             // When there is no result sets back, we will commit immediately when autocommit is true.
             if (connection_.autoCommit_ && resultSet_ == null && resultSetList_ == null) {
                 connection_.flowAutoCommit();
@@ -2233,6 +2200,14 @@ private void markPrepared() {
 
     //-------------------------------helper methods-------------------------------
 
+    /**
+     * Returns the name of the java.sql interface implemented by this class.
+     * @return name of java.sql interface
+     */
+    protected String getJdbcStatementInterfaceName() {
+        return "java.sql.Statement";
+    }
+
     // Should investigate if it can be optimized..  if we can avoid this parsing..
     //
     void parseSqlAndSetSqlModes(String sql) throws SqlException {
@@ -2368,6 +2343,76 @@ void checkForAppropriateSqlMode(int executeType, int sqlMode) throws SqlExceptio
         }
     }
 
+    /**
+     * Checks that the number of result sets returned by the statement
+     * is consistent with the executed type. <code>executeQuery()</code>
+     * should return exactly one result set and <code>executeUpdate()</code>
+     * none. Raises an exception if the result set count does not match the
+     * execute type.
+     *
+     * @param executeType one of <code>executeQueryMethod__</code>,
+     * <code>executeUpdateMethod__</code> and <code>executeMethod__</code>
+     * @exception SqlException if the number of result sets does not
+     *                         match the execute type
+     */
+    private void checkResultSetCount(int executeType) throws SqlException {
+        switch (executeType) {
+        case executeQueryMethod__:
+            // We'll just rely on finalizers to close the dangling result sets.
+            if (resultSetList_ != null && resultSetList_.length > 1) {
+                throw new
+                    SqlException(agent_.logWriter_,
+                                 new ClientMessageId(
+                                    SQLState.MULTIPLE_RESULTS_ON_EXECUTE_QUERY),
+                                 getJdbcStatementInterfaceName(),
+                                 getJdbcStatementInterfaceName());
+            }
+            if (resultSet_ == null || resultSetList_.length == 0) {
+                ClientMessageId messageId =
+                    new ClientMessageId(
+                                SQLState.USE_EXECUTE_UPDATE_WITH_NO_RESULTS);
+                throw new SqlException(agent_.logWriter_, messageId,
+                                       getJdbcStatementInterfaceName(),
+                                       getJdbcStatementInterfaceName());
+            }
+            break;
+        case executeUpdateMethod__:
+            // We'll just rely on finalizers to close the dangling result sets.
+            if (resultSet_ != null && resultSetList_.length > 0) {
+                ClientMessageId messageId =
+                    new ClientMessageId(
+                        SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE);
+                throw new SqlException(agent_.logWriter_, messageId);
+            }
+            break;
+        }
+    }
+
+    /**
+     * Checks that a stored procedure returns the correct number of
+     * result sets given its execute type. If the number is incorrect,
+     * make sure the transaction is rolled back when auto commit is
+     * enabled.
+     *
+     * @param executeType one of <code>executeQueryMethod__</code>,
+     * <code>executeUpdateMethod__</code> and <code>executeMethod__</code>
+     * @exception SqlException if the number of result sets does not
+     *                         match the execute type
+     * @see #checkResultSetCount(int)
+     */
+    protected final void checkForStoredProcResultSetCount(int executeType)
+        throws SqlException
+    {
+        try {
+            checkResultSetCount(executeType);
+        } catch (SqlException se) {
+            if (connection_.autoCommit_) {
+                connection_.flowRollback();
+            }
+            throw se;
+        }
+    }
+
     void checkForClosedStatement() throws SqlException {
         // For some odd reason, there was a JVM hotspot error with Sun's 1.4 JDK
         // when the code was written like this:
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 9b14c177..cd30b885 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1233,6 +1233,8 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_NO_BULK_INSERT_REPLACE_WITH_TRIGGER_DURING_EXECUTION   = "X0Y72.S";
 	String LANG_NO_SET_TRAN_ISO_IN_GLOBAL_CONNECTION                   = "X0Y77.S";
 	String LANG_INVALID_CALL_TO_EXECUTE_QUERY		                   = "X0Y78.S";
+    String MULTIPLE_RESULTS_ON_EXECUTE_QUERY = "X0Y78.S.1";
+    String USE_EXECUTE_UPDATE_WITH_NO_RESULTS = "X0Y78.S.2";
 	String LANG_INVALID_CALL_TO_EXECUTE_UPDATE		                   = "X0Y79.S";
 	String LANG_NULL_DATA_IN_NON_NULL_COLUMN               	   	   	   = "X0Y80.S";
     String LANG_IGNORE_MISSING_INDEX_ROW_DURING_DELETE                 = "X0Y83.S";
@@ -1454,11 +1456,9 @@ The message identifier (ie. the value that matches a field in this class)
     String UNABLE_TO_UNWRAP = "XJ128.S";
     
     String EXCEEDED_MAX_SECTIONS = "XJ200.S";
-    String MULTIPLE_RESULTS_ON_EXECUTE_QUERY = "XJ201.S";
     String CURSOR_INVALID_NAME = "XJ202.S";
     String CURSOR_DUPLICATE_NAME = "XJ203.S";
     String UNABLE_TO_OPEN_RS_WITH_REQUESTED_HOLDABILITY = "XJ204.S";
-    String USE_EXECUTE_UPDATE_WITH_NO_RESULTS = "XJ205.S";
     String NO_TOKENS_IN_SQL_TEXT = "XJ206.S";
     String CANT_USE_EXEC_QUERY_FOR_UPDATE = "XJ207.S";
     String BATCH_NON_ATOMIC_FAILURE = "XJ208.S";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
index e05cc3f8..f82b6844 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
@@ -373,7 +373,7 @@ public void testRollbackStoredProcWithExecuteUpdate() throws SQLException {
      * <code>executeQuery()</code> are correctly rolled back when the
      * query fails because the number of returned result sets is zero.
      *
-     * <p> This test case fails with the client driver and JCC (DERBY-1364).
+     * <p> This test case fails with JCC.
      *
      * @exception SQLException if a database error occurs
      */
@@ -401,7 +401,7 @@ public void xtestRollbackStoredProcWhenExecuteQueryReturnsNothing()
      * query fails because the number of returned result sets is more
      * than one.
      *
-     * <p> This test case fails with the client driver and JCC (DERBY-1364).
+     * <p> This test case fails with JCC.
      *
      * @exception SQLException if a database error occurs
      */
@@ -428,7 +428,7 @@ public void xtestRollbackStoredProcWhenExecuteQueryReturnsTooMuch()
      * <code>executeUpdate()</code> are correctly rolled back when the
      * query fails because the stored procedure returned a result set.
      *
-     * <p> This test case fails with the client driver and JCC (DERBY-1364).
+     * <p> This test case fails with JCC.
      *
      * @exception SQLException if a database error occurs
      */
@@ -450,6 +450,101 @@ public void xtestRollbackStoredProcWhenExecuteUpdateReturnsResults()
         stmt.close();
     }
 
+    /**
+     * Tests that the effects of executing a stored procedure with
+     * <code>executeQuery()</code> are correctly rolled back when the
+     * query fails because the number of returned result sets is zero.
+     *
+     * <p> This test case fails with JCC.
+     *
+     * @exception SQLException if a database error occurs
+     */
+    public void xtestRollbackStoredProcWhenExecuteQueryReturnsNothing_prepared()
+        throws SQLException
+    {
+        conn.setAutoCommit(true);
+        PreparedStatement ps =
+            conn.prepareStatement("CALL PROC_WITH_SIDE_EFFECTS(?)");
+        ps.setInt(1, 0);
+        try {
+            ResultSet rs = ps.executeQuery();
+            fail("executeQuery() didn't fail.");
+        } catch (SQLException sqle) {
+            assertNoResultSetFromExecuteQuery(sqle);
+        }
+        Statement stmt = conn.createStatement();
+        ResultSet rs = stmt.executeQuery("SELECT * FROM SIMPLE_TABLE");
+        assertFalse("Side effects from stored procedure not rolled back.",
+                    rs.next());
+        rs.close();
+        ps.close();
+        stmt.close();
+    }
+
+    /**
+     * Tests that the effects of executing a stored procedure with
+     * <code>executeQuery()</code> are correctly rolled back when the
+     * query fails because the number of returned result sets is more
+     * than one.
+     *
+     * <p> This test case fails with JCC.
+     *
+     * @exception SQLException if a database error occurs
+     */
+    public void xtestRollbackStoredProcWhenExecuteQueryReturnsTooMuch_prepared()
+        throws SQLException
+    {
+        conn.setAutoCommit(true);
+        PreparedStatement ps =
+            conn.prepareStatement("CALL PROC_WITH_SIDE_EFFECTS(?)");
+        ps.setInt(1, 2);
+        try {
+            ResultSet rs = ps.executeQuery();
+            fail("executeQuery() didn't fail.");
+        } catch (SQLException sqle) {
+            assertMultipleResultsFromExecuteQuery(sqle);
+        }
+        Statement stmt = conn.createStatement();
+        ResultSet rs = stmt.executeQuery("SELECT * FROM SIMPLE_TABLE");
+        assertFalse("Side effects from stored procedure not rolled back.",
+                    rs.next());
+        rs.close();
+        ps.close();
+        stmt.close();
+    }
+
+    /**
+     * Tests that the effects of executing a stored procedure with
+     * <code>executeUpdate()</code> are correctly rolled back when the
+     * query fails because the stored procedure returned a result set.
+     *
+     * <p> This test case fails with JCC.
+     *
+     * @exception SQLException if a database error occurs
+     */
+    public void
+        xtestRollbackStoredProcWhenExecuteUpdateReturnsResults_prepared()
+        throws SQLException
+    {
+        conn.setAutoCommit(true);
+        PreparedStatement ps =
+            conn.prepareStatement("CALL PROC_WITH_SIDE_EFFECTS(?)");
+        ps.setInt(1, 1);
+        try {
+            ps.executeUpdate();
+            fail("executeUpdate() didn't fail.");
+        } catch (SQLException sqle) {
+            assertResultsFromExecuteUpdate(sqle);
+        }
+        Statement stmt = conn.createStatement();
+        ResultSet rs = stmt.executeQuery("SELECT * FROM SIMPLE_TABLE");
+        assertFalse("Side effects from stored procedure not rolled back.",
+                    rs.next());
+        rs.close();
+        ps.close();
+        stmt.close();
+    }
+
     /**
      * Tests that closed result sets are not returned when calling
      * <code>executeQuery()</code>.
@@ -521,14 +616,10 @@ public void testDynamicResultSetsFromOtherConnectionWithExecuteUpdate()
      * @param sqle a <code>SQLException</code> value
      */
     private static void assertNoResultSetFromExecuteQuery(SQLException sqle) {
-        if (usingEmbedded()) {
-            assertSQLState("Unexpected SQL state.", "X0Y78", sqle);
-        } else if (usingDerbyNetClient()) {
-            assertSQLState("Unexpected SQL state.", "XJ205", sqle);
-        } else if (usingDerbyNet()) {
+        if (usingDerbyNet()) {
             assertNull("Unexpected SQL state.", sqle.getSQLState());
         } else {
-            fail("Unrecognized framework.");
+            assertSQLState("Unexpected SQL state.", "X0Y78", sqle);
         }
     }
 
@@ -540,14 +631,10 @@ private static void assertNoResultSetFromExecuteQuery(SQLException sqle) {
      */
     private static void assertMultipleResultsFromExecuteQuery(SQLException sqle)
     {
-        if (usingEmbedded()) {
-            assertSQLState("Unexpected SQL state.", "X0Y78", sqle);
-        } else if (usingDerbyNetClient()) {
-            assertSQLState("Unexpected SQL state.", "XJ201", sqle);
-        } else if (usingDerbyNet()) {
+        if (usingDerbyNet()) {
             assertNull("Unexpected SQL state.", sqle.getSQLState());
         } else {
-            fail("Unrecognized framework.");
+            assertSQLState("Unexpected SQL state.", "X0Y78", sqle);
         }
     }
 
@@ -558,14 +645,10 @@ private static void assertMultipleResultsFromExecuteQuery(SQLException sqle)
      * @param sqle a <code>SQLException</code> value
      */
     private static void assertResultsFromExecuteUpdate(SQLException sqle) {
-        if (usingEmbedded()) {
-            assertSQLState("Unexpected SQL state.", "X0Y79", sqle);
-        } else if (usingDerbyNetClient()) {
-            assertSQLState("Unexpected SQL state.", "XJ201", sqle);
-        } else if (usingDerbyNet()) {
+        if (usingDerbyNet()) {
             assertNull("Unexpected SQL state.", sqle.getSQLState());
         } else {
-            fail("Unrecognized framework.");
+            assertSQLState("Unexpected SQL state.", "X0Y79", sqle);
         }
 
     }
@@ -592,8 +675,6 @@ public static Test suite() {
             suite.addTest
                 (new ProcedureTest
                  ("xtestExecuteUpdateWithNoDynamicResultSets_callable"));
-        }
-        if (usingEmbedded()) {
             suite.addTest
                 (new ProcedureTest
                  ("xtestRollbackStoredProcWhenExecuteQueryReturnsNothing"));
@@ -603,6 +684,18 @@ public static Test suite() {
             suite.addTest
                 (new ProcedureTest
                  ("xtestRollbackStoredProcWhenExecuteUpdateReturnsResults"));
+            suite.addTest
+                (new ProcedureTest
+                 ("xtestRollbackStoredProcWhenExecuteQueryReturnsNothing" +
+                  "_prepared"));
+            suite.addTest
+                (new ProcedureTest
+                 ("xtestRollbackStoredProcWhenExecuteQueryReturnsTooMuch" +
+                  "_prepared"));
+            suite.addTest
+                (new ProcedureTest
+                 ("xtestRollbackStoredProcWhenExecuteUpdateReturnsResults" +
+                  "_prepared"));
         }
         return new TestSetup(suite) {
             public void setUp() throws Exception {
