diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 7e5a8ff7..571cf6a4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -96,6 +96,8 @@
 import java.util.Enumeration;
 import java.util.Properties;
 import java.util.Vector;
+import java.util.HashSet;
+import java.util.Set;
 
 /**
  * A FromBaseTable represents a table in the FROM list of a DML statement,
@@ -4005,12 +4007,22 @@ void doSpecialMaxScan()
 	 * Is it possible to do a distinct scan on this ResultSet tree.
 	 * (See SelectNode for the criteria.)
 	 *
+	 * @param distinctColumns the set of distinct columns
 	 * @return Whether or not it is possible to do a distinct scan on this ResultSet tree.
 	 */
-	boolean isPossibleDistinctScan()
+	boolean isPossibleDistinctScan(Set distinctColumns)
 	{
-		return (restrictionList == null ||
-				restrictionList.size() == 0);
+		if ((restrictionList != null && restrictionList.size() != 0)) {
+			return false;
+		}
+
+		HashSet columns = new HashSet();
+		for (int i = 0; i < resultColumns.size(); i++) {
+			ResultColumn rc = (ResultColumn) resultColumns.elementAt(i);
+			columns.add(rc.getExpression());
+		}
+
+		return columns.equals(distinctColumns);
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
index 7658cb97..5175d630 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
@@ -64,6 +64,8 @@
 import org.apache.derby.iapi.services.classfile.VMOpcode;
 
 import java.util.Properties;
+import java.util.HashSet;
+import java.util.Set;
 
 /**
  * A ProjectRestrictNode represents a result set for any of the basic DML
@@ -1608,16 +1610,26 @@ public int updateTargetLockMode()
 	 * Is it possible to do a distinct scan on this ResultSet tree.
 	 * (See SelectNode for the criteria.)
 	 *
+	 * @param distinctColumns the set of distinct columns
 	 * @return Whether or not it is possible to do a distinct scan on this ResultSet tree.
 	 */
-	boolean isPossibleDistinctScan()
+	boolean isPossibleDistinctScan(Set distinctColumns)
 	{
 		if (restriction != null || 
 			(restrictionList != null && restrictionList.size() != 0))
 		{
 			return false;
 		}
-		return childResult.isPossibleDistinctScan();
+
+		HashSet columns = new HashSet();
+		for (int i = 0; i < resultColumns.size(); i++) {
+			ResultColumn rc = (ResultColumn) resultColumns.elementAt(i);
+			BaseColumnNode bc = rc.getBaseColumnNode();
+			if (bc == null) return false;
+			columns.add(bc);
+		}
+
+		return columns.equals(distinctColumns) && childResult.isPossibleDistinctScan(distinctColumns);
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
index e562d552..e6e15736 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
@@ -1750,4 +1750,28 @@ public TableName getTableNameObject() {
 	/* Get the wrapped reference if any */
 	public	ColumnReference	getReference() { return reference; }
 	
+	/**
+	 * Get the source BaseColumnNode for this result column. The
+	 * BaseColumnNode cannot be found unless the ResultColumn is bound
+	 * and is a simple reference to a column in a BaseFromTable.
+	 *
+	 * @return a BaseColumnNode,
+	 *   or null if a BaseColumnNode cannot be found
+	 */
+	public BaseColumnNode getBaseColumnNode() {
+		ValueNode vn = expression;
+		while (true) {
+			if (vn instanceof ResultColumn) {
+				vn = ((ResultColumn) vn).expression;
+			} else if (vn instanceof ColumnReference) {
+				vn = ((ColumnReference) vn).getSource();
+			} else if (vn instanceof VirtualColumnNode) {
+				vn = ((VirtualColumnNode) vn).getSourceColumn();
+			} else if (vn instanceof BaseColumnNode) {
+				return (BaseColumnNode) vn;
+			} else {
+				return null;
+			}
+		}
+	}
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index a553c9cb..e8171b9a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -72,6 +72,7 @@
 
 import java.util.Properties;
 import java.util.Vector;
+import java.util.Set;
 
 /**
  * A ResultSetNode represents a result set, that is, a set of rows.  It is
@@ -1857,9 +1858,10 @@ void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)
 	 * Is it possible to do a distinct scan on this ResultSet tree.
 	 * (See SelectNode for the criteria.)
 	 *
+	 * @param distinctColumns the set of distinct columns
 	 * @return Whether or not it is possible to do a distinct scan on this ResultSet tree.
 	 */
-	boolean isPossibleDistinctScan()
+	boolean isPossibleDistinctScan(Set distinctColumns)
 	{
 		return false;
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index 83fe88a1..2ff43628 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -43,6 +43,7 @@
 import org.apache.derby.iapi.util.JBitSet;
 
 import java.util.Vector;
+import java.util.HashSet;
 
 /**
  * A SelectNode represents the result set for any of the basic DML
@@ -1335,14 +1336,29 @@ public ResultSetNode genProjectRestrict(int origFromListSize)
 			 *	   FromBaseTable.  This is because all of a table's columns must come
 			 *	   from the same conglomerate in order to get consistent data.
 			 */
+			boolean distinctScanPossible = false;
 			if (origFromListSize == 1 &&
 				(! orderByAndDistinctMerged) &&
-				resultColumns.countNumberOfSimpleColumnReferences() == resultColumns.size() &&
-				prnRSN.isPossibleDistinctScan())
+				resultColumns.countNumberOfSimpleColumnReferences() == resultColumns.size())
 			{
+				boolean simpleColumns = true;
+				HashSet distinctColumns = new HashSet();
+				int size = resultColumns.size();
+				for (int i = 1; i <= size; i++) {
+					BaseColumnNode bc = resultColumns.getResultColumn(i).getBaseColumnNode();
+					if (bc == null) {
+						simpleColumns = false;
+						break;
+					}
+					distinctColumns.add(bc);
+				}
+				if (simpleColumns && prnRSN.isPossibleDistinctScan(distinctColumns)) {
 				prnRSN.markForDistinctScan();
+					distinctScanPossible = true;
+			}
 			}
-			else
+
+			if (!distinctScanPossible)
 			{
 				/* We can't do a distinct scan. Determine if we can filter out 
 				 * duplicates without a sorter. 
