diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
index cca6f657..eb4720af 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
@@ -37,9 +37,7 @@
 
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.BundleEvent;
 import org.osgi.framework.ServiceReference;
-import org.osgi.framework.SynchronousBundleListener;
 import org.osgi.service.blueprint.container.BlueprintEvent;
 import org.osgi.service.blueprint.container.BlueprintListener;
 import org.osgi.service.blueprint.container.EventConstants;
@@ -58,7 +56,7 @@
  *
  * @version $Rev$, $Date$
  */
-class BlueprintEventDispatcher implements BlueprintListener, SynchronousBundleListener {
+class BlueprintEventDispatcher implements BlueprintListener {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(BlueprintEventDispatcher.class);
 
@@ -76,8 +74,6 @@
 
         this.sharedExecutor = sharedExecutor;
 
-        bundleContext.addBundleListener(this);
-
         EventAdminListener listener = null;
         try {
             getClass().getClassLoader().loadClass("org.osgi.service.event.EventAdmin");
@@ -220,10 +216,8 @@ void destroy() {
         }
     }
 
-    public void bundleChanged(BundleEvent event) {
-        if (BundleEvent.STOPPING == event.getType()) {
-            states.remove(event.getBundle());
-        }
+    public void removeBlueprintBundle(Bundle bundle) {
+        states.remove(bundle);
     }
 
     private static class EventAdminListener implements BlueprintListener {
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
index 64496841..92549183 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
@@ -203,6 +203,7 @@ private void destroyContext(Bundle bundle) {
             LOGGER.debug("Destroying BlueprintContainer for bundle {}", bundle.getSymbolicName());
             blueprintContainer.destroy();
         }
+        eventDispatcher.removeBlueprintBundle(bundle);
     }
     
     private void checkBundle(Bundle bundle) {
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java
index 99f3e58f..87a9a338 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java
@@ -26,7 +26,6 @@
 
 import org.apache.aries.blueprint.NamespaceHandler;
 import org.osgi.framework.Bundle;
-import org.osgi.framework.BundleContext;
 import org.xml.sax.SAXException;
 
 /**
@@ -37,7 +36,7 @@
 public interface NamespaceHandlerRegistry {
 
     /**
-     * Retrieve the <code>NamespaceHandler</code> for the specified URI
+     * Retrieve the <code>NamespaceHandler</code> for the specified URI. Make sure
      *
      * @param uri the namespace identifying the namespace handler
      * @param bundle the blueprint bundle to be checked for class space consistency
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
index a7beec1c..1464e59c 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
@@ -73,12 +73,18 @@ public ComponentDefinitionRegistry parse(InputStream is, Bundle clientBundle, bo
   private ComponentDefinitionRegistry validateAndPopulate (Parser parser, Bundle clientBundle, boolean validate) 
   throws IOException, SAXException { 
     Set<URI> nsuris = parser.getNamespaces();
+    ComponentDefinitionRegistry cdr;
     NamespaceHandlerSet nshandlers = _namespaceHandlerRegistry.getNamespaceHandlers(nsuris, clientBundle);
+    try {
     if (validate) { 
       parser.validate( nshandlers.getSchema());
     }
-    ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
+        cdr = new ComponentDefinitionRegistryImpl();
     parser.populate(nshandlers, cdr);
+    } finally {
+        nshandlers.destroy();
+    }
+    
     return cdr;   
   }
 
diff --git a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManager.java b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManager.java
index c50701e3..2199228d 100644
--- a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManager.java
+++ b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManager.java
@@ -18,7 +18,6 @@
  */
 package org.apache.aries.jpa.container.context.impl;
 
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -117,7 +116,7 @@ public void bundleChanged(BundleEvent event) {
     
     //We only care about bundles stopping
     if (event.getType() == BundleEvent.STOPPING) {
-      Set<String> contextsToBeRemoved = Collections.emptySet();
+      Set<String> contextsToBeRemoved = new HashSet<String>();
       Bundle frameworkBundle = bundle.getBundleContext().getBundle(0);
       PersistenceContextManager manager = null;
       boolean removeManager = false;
@@ -149,6 +148,12 @@ public void bundleChanged(BundleEvent event) {
           removeManager = true;
           manager = managers.remove(bundle);
           bundle.getBundleContext().removeBundleListener(this);
+          
+          for (Bundle b : bundle.getBundleContext().getBundles()) {
+              if (persistenceContexts.containsKey(b)) {
+                contextsToBeRemoved.addAll(persistenceContexts.remove(b));
+              }
+            }
         }
       }
       
diff --git a/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManagerTest.java b/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManagerTest.java
index e69de29b..0df60615 100644
--- a/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManagerTest.java
+++ b/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/impl/GlobalPersistenceManagerTest.java
@@ -0,0 +1,122 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.jpa.container.context.impl;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Hashtable;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry;
+import org.apache.aries.mocks.BundleMock;
+import org.apache.aries.unittest.mocks.MethodCall;
+import org.apache.aries.unittest.mocks.Skeleton;
+import org.junit.Before;
+import org.junit.Test;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.BundleEvent;
+
+import static org.junit.Assert.*;
+
+public class GlobalPersistenceManagerTest {
+    private GlobalPersistenceManager sut;
+    private Bundle client;
+    private Bundle otherClient;
+    private Bundle framework;
+    
+    @Before
+    public void setup()
+    {
+        framework = Skeleton.newMock(new BundleMock("framework", new Hashtable<Object, Object>()), Bundle.class);
+
+        BundleContext ctx = Skeleton.newMock(BundleContext.class);
+        Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(BundleContext.class, "getBundle", long.class), framework);
+        
+        client = Skeleton.newMock(Bundle.class);
+        Skeleton.getSkeleton(client).setReturnValue(new MethodCall(Bundle.class, "getBundleContext"), ctx);
+
+        otherClient = Skeleton.newMock(Bundle.class);
+        Skeleton.getSkeleton(otherClient).setReturnValue(new MethodCall(Bundle.class, "getBundleContext"), ctx);        
+        
+        sut = new GlobalPersistenceManager();
+        sut.setRegistry(new JTAPersistenceContextRegistry());
+        
+        Skeleton.getSkeleton(framework.getBundleContext()).setReturnValue(
+                new MethodCall(BundleContext.class, "getBundles"), new Bundle[] {framework, client, otherClient});
+    }
+    
+    @Test
+    public void testRegister() throws Exception {
+        sut.registerContext("name", client, new HashMap<String, Object>());
+        sut.registerContext("otherName", otherClient, new HashMap<String, Object>());
+        
+        assertEquals(1, getManagers().size());
+        assertEquals(new HashSet<String>(Arrays.asList("name")), getContexts().get(client));
+        assertEquals(new HashSet<String>(Arrays.asList("otherName")), getContexts().get(otherClient));
+        
+        sut.registerContext("name2", client, new HashMap<String, Object>());
+        assertEquals(new HashSet<String>(Arrays.asList("name", "name2")), getContexts().get(client));
+    }
+    
+    @Test
+    public void testStopFramework() throws Exception {
+        sut.registerContext("name", client, new HashMap<String, Object>());
+        sut.registerContext("otherName", otherClient, new HashMap<String, Object>());
+
+        sut.bundleChanged(new BundleEvent(BundleEvent.STOPPING, framework));
+        
+        assertTrue(getManagers().isEmpty());
+        assertTrue(getContexts().isEmpty());
+    }
+    
+    @Test
+    public void testIndividual() throws Exception {
+        sut.registerContext("name", client, new HashMap<String, Object>());
+        sut.registerContext("otherName", otherClient, new HashMap<String, Object>());
+        
+        sut.bundleChanged(new BundleEvent(BundleEvent.STOPPING, client));
+        assertEquals(1, getManagers().size());
+        assertNull(getContexts().get(client));
+        assertNotNull(getContexts().get(otherClient));
+        
+        sut.bundleChanged(new BundleEvent(BundleEvent.STOPPING, otherClient));
+        assertEquals(1, getManagers().size());
+        assertNull(getContexts().get(client));
+        assertNull(getContexts().get(otherClient));
+        
+        sut.bundleChanged(new BundleEvent(BundleEvent.STOPPING, framework));
+        assertTrue(getManagers().isEmpty());
+    }
+    
+    private Map<Bundle,PersistenceContextManager> getManagers() throws Exception {
+        Field f = GlobalPersistenceManager.class.getDeclaredField("managers");
+        f.setAccessible(true);
+        return (Map<Bundle,PersistenceContextManager>) f.get(sut);
+    }
+    
+    private Map<Bundle, Set<String>> getContexts() throws Exception {
+        Field f = GlobalPersistenceManager.class.getDeclaredField("persistenceContexts");
+        f.setAccessible(true);
+        return (Map<Bundle,Set<String>>) f.get(sut);        
+    }
+}
