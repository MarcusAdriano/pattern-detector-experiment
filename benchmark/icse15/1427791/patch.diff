diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIterator.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIterator.java
index 5079f5ce..d7beeb19 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIterator.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIterator.java
@@ -20,8 +20,7 @@
 import java.util.NoSuchElementException;
 
 import com.google.common.base.Preconditions;
-import org.apache.commons.math.MathException;
-import org.apache.commons.math.distribution.PascalDistributionImpl;
+import org.apache.commons.math3.distribution.PascalDistribution;
 
 /**
  * Wraps a {@link LongPrimitiveIterator} and returns only some subset of the elements that it would,
@@ -29,7 +28,7 @@
  */
 public final class SamplingLongPrimitiveIterator extends AbstractLongPrimitiveIterator {
   
-  private final PascalDistributionImpl geometricDistribution;
+  private final PascalDistribution geometricDistribution;
   private final LongPrimitiveIterator delegate;
   private long next;
   private boolean hasNext;
@@ -38,7 +37,7 @@ public SamplingLongPrimitiveIterator(LongPrimitiveIterator delegate, double samp
     Preconditions.checkNotNull(delegate);
     Preconditions.checkArgument(samplingRate > 0.0 && samplingRate <= 1.0);
     // Geometric distribution is special case of negative binomial (aka Pascal) with r=1:
-    geometricDistribution = new PascalDistributionImpl(1, samplingRate);
+    geometricDistribution = new PascalDistribution(1, samplingRate);
     this.delegate = delegate;
     this.hasNext = true;
     doNext();
@@ -68,12 +67,7 @@ public long peek() {
   }
   
   private void doNext() {
-    int toSkip;
-    try {
-      toSkip = geometricDistribution.sample();
-    } catch (MathException e) {
-      throw new IllegalStateException(e);
-    }
+    int toSkip = geometricDistribution.sample();
     delegate.skip(toSkip);
     if (delegate.hasNext()) {
       next = delegate.next();
@@ -93,13 +87,9 @@ public void remove() {
   @Override
   public void skip(int n) {
     int toSkip = 0;
-    try {
       for (int i = 0; i < n; i++) {
         toSkip += geometricDistribution.sample();
       }
-    } catch (MathException e) {
-      throw new IllegalStateException(e);
-    }
     delegate.skip(toSkip);
     if (delegate.hasNext()) {
       next = delegate.next();
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java
index ea16c963..e2ecc469 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java
@@ -21,8 +21,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.AbstractIterator;
-import org.apache.commons.math.MathException;
-import org.apache.commons.math.distribution.PascalDistributionImpl;
+import org.apache.commons.math3.distribution.PascalDistribution;
 import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
 
 /**
@@ -31,25 +30,20 @@
  */
 public final class SamplingIterator<T> extends AbstractIterator<T> {
   
-  private final PascalDistributionImpl geometricDistribution;
+  private final PascalDistribution geometricDistribution;
   private final Iterator<? extends T> delegate;
 
   public SamplingIterator(Iterator<? extends T> delegate, double samplingRate) {
     Preconditions.checkNotNull(delegate);
     Preconditions.checkArgument(samplingRate > 0.0 && samplingRate <= 1.0);
     // Geometric distribution is special case of negative binomial (aka Pascal) with r=1:
-    geometricDistribution = new PascalDistributionImpl(1, samplingRate);
+    geometricDistribution = new PascalDistribution(1, samplingRate);
     this.delegate = delegate;
   }
 
   @Override
   protected T computeNext() {
-    int toSkip;
-    try {
-      toSkip = geometricDistribution.sample();
-    } catch (MathException e) {
-      throw new IllegalStateException(e);
-    }
+    int toSkip = geometricDistribution.sample();
     if (delegate instanceof SkippingIterator<?>) {
       SkippingIterator<? extends T> skippingDelegate = (SkippingIterator<? extends T>) delegate;
       skippingDelegate.skip(toSkip);
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIteratorTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIteratorTest.java
index 6cc0187b..4204ed3c 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIteratorTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/SamplingLongPrimitiveIteratorTest.java
@@ -62,9 +62,11 @@ public void testExactSizeMatch() {
 
   @Test
   public void testSample() {
+    double p = 0.1;
+    int n = 1000;
+    double sd = Math.sqrt(n * p * (1.0 - p));
     for (int i = 0; i < 1000; i++) {
-      SamplingLongPrimitiveIterator t = new SamplingLongPrimitiveIterator(
-          countingIterator(1000), 0.1);
+      SamplingLongPrimitiveIterator t = new SamplingLongPrimitiveIterator(countingIterator(n), p);
       int k = 0;
       while (t.hasNext()) {
         long v = t.nextLong();
@@ -72,9 +74,9 @@ public void testSample() {
         assertTrue(v >= 0L);
         assertTrue(v < 1000L);
       }
-      double sd = Math.sqrt(0.9 * 0.1 * 1000);
-      assertTrue(k >= 100 - 4 * sd);
-      assertTrue(k <= 100 + 4 * sd);
+      // Should be +/- 5 standard deviations except in about 1 out of 1.7M cases
+      assertTrue(k >= 100 - 5 * sd);
+      assertTrue(k <= 100 + 5 * sd);
     }
   }
 
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/PoissonSampler.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/PoissonSampler.java
index 2e86a787..163918c4 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/PoissonSampler.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/PoissonSampler.java
@@ -18,8 +18,7 @@
 package org.apache.mahout.math.random;
 
 import com.google.common.collect.Lists;
-import org.apache.commons.math.distribution.PoissonDistribution;
-import org.apache.commons.math.distribution.PoissonDistributionImpl;
+import org.apache.commons.math3.distribution.PoissonDistribution;
 import org.apache.mahout.common.RandomUtils;
 
 import java.util.List;
@@ -29,15 +28,16 @@
  * Samples from a Poisson distribution.  Should probably not be used for lambda > 1000 or so.
  */
 public final class PoissonSampler extends AbstractSamplerFunction {
-    private double limit = 1;
 
+  private double limit;
     private Multinomial<Integer> partial;
     private final Random gen;
     private final PoissonDistribution pd;
 
     public PoissonSampler(double lambda) {
+    limit = 1;
         gen = RandomUtils.getRandom();
-        pd = new PoissonDistributionImpl(lambda);
+    pd = new PoissonDistribution(lambda);
     }
 
     @Override
@@ -49,10 +49,12 @@ public Double sample() {
         if (u < limit) {
             List<WeightedThing<Integer>> steps = Lists.newArrayList();
             limit = 1;
-            for (int i = 0; u / 20 < limit; i++) {
+      int i = 0;
+      while (u / 20 < limit) {
                 double pdf = pd.probability(i);
                 limit -= pdf;
                 steps.add(new WeightedThing<Integer>(i, pdf));
+        i++;
             }
             steps.add(new WeightedThing<Integer>(steps.size(), limit));
             partial = new Multinomial<Integer>(steps);
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java
index 8631fba9..b3a78111 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java
@@ -16,10 +16,9 @@
  */
 package org.apache.mahout.math.ssvd;
 
-import org.apache.commons.math.linear.Array2DRowRealMatrix;
-import org.apache.commons.math.linear.EigenDecomposition;
-import org.apache.commons.math.linear.EigenDecompositionImpl;
-import org.apache.commons.math.linear.RealMatrix;
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+import org.apache.commons.math3.linear.EigenDecomposition;
+import org.apache.commons.math3.linear.RealMatrix;
 
 /**
  * wraps appropriate eigen solver for BBt matrix. Can be either colt or apache
@@ -44,8 +43,7 @@
 
   public EigenSolverWrapper(double[][] bbt) {
     int dim = bbt.length;
-    EigenDecomposition evd2 = new EigenDecompositionImpl(
-        new Array2DRowRealMatrix(bbt), 0);
+    EigenDecomposition evd2 = new EigenDecomposition(new Array2DRowRealMatrix(bbt));
     eigenvalues = evd2.getRealEigenvalues();
     RealMatrix uHatrm = evd2.getV();
     uHat = new double[dim][];
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java
index 40c04a3c..4b204c8c 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java
@@ -17,11 +17,9 @@
 
 package org.apache.mahout.math.jet.random;
 
-import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.FunctionEvaluationException;
-import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.analysis.integration.RombergIntegrator;
-import org.apache.commons.math.analysis.integration.UnivariateRealIntegrator;
+import org.apache.commons.math3.analysis.UnivariateFunction;
+import org.apache.commons.math3.analysis.integration.RombergIntegrator;
+import org.apache.commons.math3.analysis.integration.UnivariateIntegrator;
 import org.junit.Assert;
 
 import java.util.Arrays;
@@ -40,7 +38,7 @@ public static void checkDistribution(final AbstractContinousDistribution dist,
                                        double[] x,
                                        double offset,
                                        double scale,
-                                       int n) throws ConvergenceException, FunctionEvaluationException {
+                                       int n) {
     double[] xs = Arrays.copyOf(x, x.length);
     for (int i = 0; i < xs.length; i++) {
       xs[i] = xs[i]*scale+ offset;
@@ -78,9 +76,9 @@ public static void checkDistribution(final AbstractContinousDistribution dist,
     k[k.length - 1] = n - lastJ;
 
     // now verify probabilities by comparing to integral of pdf
-    UnivariateRealIntegrator integrator = new RombergIntegrator();
+    UnivariateIntegrator integrator = new RombergIntegrator();
     for (int i = 0; i < xs.length - 1; i++) {
-      double delta = integrator.integrate(new UnivariateRealFunction() {
+      double delta = integrator.integrate(1000000, new UnivariateFunction() {
         @Override
         public double value(double v) {
           return dist.pdf(v);
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/NormalTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/NormalTest.java
index 0b5aa522..756ec284 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/NormalTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/NormalTest.java
@@ -17,9 +17,7 @@
 
 package org.apache.mahout.math.random;
 
-import org.apache.commons.math.MathException;
-import org.apache.commons.math.distribution.NormalDistribution;
-import org.apache.commons.math.distribution.NormalDistributionImpl;
+import org.apache.commons.math3.distribution.NormalDistribution;
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.MahoutTestCase;
 import org.apache.mahout.math.stats.OnlineSummarizer;
@@ -29,6 +27,7 @@
 import java.util.Arrays;
 
 public class NormalTest extends MahoutTestCase {
+
     @Override
     @Before
     public void setUp() {
@@ -42,21 +41,20 @@ public void testOffset() {
         for (int i = 0; i < 10001; i++) {
             s.add(sampler.sample());
         }
-
         assertEquals(String.format("m = %.3f, sd = %.3f", s.getMean(), s.getSD()), 2, s.getMean(), 0.04 * s.getSD());
         assertEquals(5, s.getSD(), 0.12);
     }
 
     @Test
-    public void testSample() throws MathException {
+  public void testSample() throws Exception {
         double[] data = new double[10001];
         Sampler<Double> sampler = new Normal();
-        for (int i = 0; i < 10001; i++) {
+    for (int i = 0; i < data.length; i++) {
             data[i] = sampler.sample();
         }
         Arrays.sort(data);
 
-        NormalDistribution reference = new NormalDistributionImpl();
+    NormalDistribution reference = new NormalDistribution();
 
         assertEquals("Median", reference.inverseCumulativeProbability(0.5), data[5000], 0.04);
     }
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/PoissonSamplerTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/PoissonSamplerTest.java
index d69e63a4..592524aa 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/PoissonSamplerTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/PoissonSamplerTest.java
@@ -17,14 +17,14 @@
 
 package org.apache.mahout.math.random;
 
-import org.apache.commons.math.distribution.PoissonDistribution;
-import org.apache.commons.math.distribution.PoissonDistributionImpl;
+import org.apache.commons.math3.distribution.PoissonDistribution;
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.MahoutTestCase;
 import org.junit.Before;
 import org.junit.Test;
 
 public class PoissonSamplerTest extends MahoutTestCase {
+
     @Override
     @Before
     public void setUp() {
@@ -44,7 +44,7 @@ private static void checkDistribution(PoissonSampler pd, double alpha) {
             count[pd.sample().intValue()]++;
         }
 
-        PoissonDistribution ref = new PoissonDistributionImpl(alpha);
+    PoissonDistribution ref = new PoissonDistribution(alpha);
         for (int i = 0; i < count.length; i++) {
             assertEquals(ref.probability(i), count[i] / 10000.0, 2.0e-2);
         }
