diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 021dc565..dcc6869d 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -2786,6 +2786,32 @@ public ResultSetNode preprocess(int numTables,
 									FromList fromList)
 								throws StandardException
 	{
+        //
+        // We're done with binding, so we should know which columns
+        // are referenced. We check to see if SYSUSERS.PASSWORD is referenced.
+        // Even the DBO is not allowed to SELECT that column.
+        // This is to prevent us from instantiating the password as a
+        // String. See DERBY-866.
+        // We do this check before optimization because the optimizer may
+        // change the result column list as it experiments with different access paths.
+        // At preprocess() time, the result column list should be the columns in the base
+        // table.
+        //
+        if ( authorizeSYSUSERS )
+        {
+            int passwordColNum = SYSUSERSRowFactory.PASSWORD_COL_NUM;
+
+            FormatableBitSet    refCols = resultColumns.getReferencedFormatableBitSet( false, true, false );
+
+            if (
+                (refCols.getLength() >= passwordColNum ) && refCols.isSet( passwordColNum - 1 )
+               )
+            {
+                throw StandardException.newException
+                    ( SQLState.HIDDEN_COLUMN, SYSUSERSRowFactory.TABLE_NAME, SYSUSERSRowFactory.PASSWORD_COL_NAME );
+            }
+        }
+        
 		/* Generate the referenced table map */
 		referencedTableMap = new JBitSet(numTables);
 		referencedTableMap.set(tableNumber);
@@ -3262,30 +3288,6 @@ public void generate(ActivationClassBuilder acb,
 								MethodBuilder mb)
 							throws StandardException
 	{
-        //
-        // By now the map of referenced columns has been filled in.
-        // We check to see if SYSUSERS.PASSWORD is referenced.
-        // Even the DBO is not allowed to SELECT that column.
-        // This is to prevent us from instantiating the password as a
-        // String. The char[] inside the String can hang around, unzeroed
-        // and be read by a memory-sniffer. See DERBY-866.
-        //
-        if ( authorizeSYSUSERS )
-        {
-            int passwordColNum = SYSUSERSRowFactory.PASSWORD_COL_NUM;
-            
-            if (
-                ( referencedCols == null ) || // select * from sys.sysusers results in a null referecedCols
-                (
-                 (referencedCols.getLength() >= passwordColNum ) && referencedCols.isSet( passwordColNum - 1 )
-                )
-               )
-            {
-                throw StandardException.newException
-                    ( SQLState.HIDDEN_COLUMN, SYSUSERSRowFactory.TABLE_NAME, SYSUSERSRowFactory.PASSWORD_COL_NAME );
-            }
-        }
-        
 		generateResultSet( acb, mb );
 
 		/*
diff --git a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBOAccessTest.java b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBOAccessTest.java
index b8253e34..6c858bb1 100644
--- a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBOAccessTest.java
+++ b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBOAccessTest.java
@@ -188,6 +188,9 @@ public  void    testSYSUSERS() throws Exception
         goodStatement( dboConnection, "create view v2 as select username, hashingscheme, lastmodified from sys.sysusers" );
         if ( authorizationIsOn() ) { goodStatement( dboConnection, "grant select on v2 to public" ); }
 
+        goodStatement( dboConnection, "create view v3 as select username, hashingscheme, lastmodified from sys.sysusers where password is null" );
+        if ( authorizationIsOn() ) { goodStatement( dboConnection, "grant select on v3 to public" ); }
+
         vetDBO_OKProbes( dboConnection, true );
         vetDBO_OKProbes( janetConnection, !authorizationIsOn() );
 
@@ -202,6 +205,8 @@ private void    vetDBO_OKProbes( Connection conn, boolean shouldSucceed )
         vetUserProbes( conn, shouldSucceed, "select count(*) from sys.sysusers", ONLY_DBO );
         vetUserProbes( conn, shouldSucceed, "select username, hashingscheme, lastmodified from sys.sysusers", ONLY_DBO );
         vetUserProbes( conn, shouldSucceed, "select username from sys.sysusers", ONLY_DBO );
+        vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers", ONLY_DBO );
+        vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers where username = 'FRED'", ONLY_DBO );
 
         // can't use views to subvert authorization checks
         vetUserProbes( conn, shouldSucceed, "select count(*) from test_dbo.v2", ONLY_DBO );
@@ -218,6 +223,8 @@ private void    vetUnauthorizedProbes( Connection conn, boolean shouldSucceed, S
         vetUserProbes( conn, shouldSucceed, "select password from sys.sysusers", expectedSQLState );
         vetUserProbes( conn, shouldSucceed, "select username, password from sys.sysusers", expectedSQLState );
         vetUserProbes( conn, shouldSucceed, "select username from sys.sysusers where password = 'foo'", expectedSQLState );
+        vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers where password is not null", expectedSQLState );
+        vetUserProbes( conn, shouldSucceed, "select * from test_dbo.v3", expectedSQLState );
     }
     private void    vetUserProbes
         ( Connection conn, boolean shouldSucceed, String query, String expectedSQLState )
