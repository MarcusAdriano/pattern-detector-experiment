diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
index 67990941..bbbe565a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
@@ -20,6 +20,7 @@
 package org.apache.cassandra.concurrent;
 
 import java.lang.management.ManagementFactory;
+import java.util.List;
 import java.util.concurrent.*;
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
@@ -35,6 +36,7 @@
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean
 {
     private static Logger logger_ = Logger.getLogger(DebuggableThreadPoolExecutor.class);
+    private final String mbeanName;
 
     public DebuggableThreadPoolExecutor(String threadPoolName) 
     {
@@ -52,9 +54,10 @@ public DebuggableThreadPoolExecutor(int corePoolSize,
         super.prestartAllCoreThreads();
 
         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+        mbeanName = "org.apache.cassandra.concurrent:type=" + threadFactory.id;
         try
         {
-            mbs.registerMBean(this, new ObjectName("org.apache.cassandra.concurrent:type=" + threadFactory.id));
+            mbs.registerMBean(this, new ObjectName(mbeanName));
         }
         catch (Exception e)
         {
@@ -85,6 +88,33 @@ public void rejectedExecution(Runnable r, ThreadPoolExecutor executor)
         }
     }
 
+    private void unregisterMBean()
+    {
+        try
+        {
+            ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName(mbeanName));
+        }
+        catch (Exception ex)
+        {
+            // don't let it get in the way, but notify.
+            logger_.error(ex.getMessage(), ex);
+        }
+    }
+
+    @Override
+    public void shutdown()
+    {
+        unregisterMBean();
+        super.shutdown();
+    }
+
+    @Override
+    public List<Runnable> shutdownNow()
+    {
+        unregisterMBean();
+        return super.shutdownNow();
+    }
+
     /**
      * Get the number of completed tasks
      */
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index 3b70d176..f5d8d356 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -122,7 +122,7 @@ public synchronized static Gossiper instance()
         return gossiper_;
     }
 
-    private Timer gossipTimer_ = new Timer(false);
+    private Timer gossipTimer_;
     private InetAddress localEndPoint_;
     private long aVeryLongTime_;
     private Random random_ = new Random();
@@ -144,6 +144,7 @@ public synchronized static Gossiper instance()
 
     private Gossiper()
     {
+        gossipTimer_ = new Timer(false);
         aVeryLongTime_ = 259200 * 1000;
         /* register with the Failure Detector for receiving Failure detector events */
         FailureDetector.instance().registerFailureDetectionEventListener(this);
@@ -834,6 +835,7 @@ public synchronized void addApplicationState(String key, ApplicationState appSta
     public void stop()
     {
         gossipTimer_.cancel();
+        gossipTimer_ = new Timer(false); // makes the Gossiper reentrant.
     }
 }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index 8ff93f6a..654899c2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -70,6 +70,9 @@
     /* List of sockets we are listening on */
     private static Map<InetAddress, SelectionKey> listenSockets_ = new HashMap<InetAddress, SelectionKey>();
     
+    /* List of UdpConnections we are listening on */
+    private static Map<InetAddress, UdpConnection> udpConnections_ = new HashMap<InetAddress, UdpConnection>();
+    
     /* Lookup table for registering message handlers based on the verb. */
     private static Map<String, IVerbHandler> verbHandlers_;
 
@@ -215,6 +218,7 @@ public void listenUDP(InetAddress localEp)
         {
             connection.init(localEp);
             endPoints_.add(localEp);     
+            udpConnections_.put(localEp, connection);
         }
         catch ( IOException e )
         {
@@ -497,7 +501,7 @@ public static void shutdown()
         logger_.info("Shutting down ...");
         synchronized (MessagingService.class)
         {
-            /* Stop listening on any socket */
+            /* Stop listening on any TCP socket */
             for (SelectionKey skey : listenSockets_.values())
             {
                 skey.cancel();
@@ -509,6 +513,13 @@ public static void shutdown()
             }
             listenSockets_.clear();
 
+            /* Stop listening on any UDP ports. */
+            for (UdpConnection con : udpConnections_.values())
+            {
+                con.close();
+            }
+            udpConnections_.clear();
+
             /* Shutdown the threads in the EventQueue's */
             messageDeserializationExecutor_.shutdownNow();
             messageDeserializerExecutor_.shutdownNow();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java
index 7623a059..2a053dd1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java
@@ -35,6 +35,9 @@
     // workaround JDK select/register bug
     Object gate = new Object();
 
+    // flag to indicate that shutdown has been requested.
+    private boolean shutdownRequested = false;
+
     // The static selector manager which is used by all applications
     private static SelectorManager manager;
     
@@ -84,6 +87,12 @@ public SelectionKey register(SelectableChannel channel,
         }
     }      
 
+    // requests the thread to shutdown. However, it brings no guarantees. Added for testing.
+    private void requestShutdown()
+    {
+        shutdownRequested = true;
+    }
+
     /**
      * This method starts the socket manager listening for events. It is
      * designed to be started when this thread's start() method is invoked.
@@ -102,6 +111,11 @@ public void run()
             {
                 throw new RuntimeException(e);
             }
+            if (shutdownRequested)
+            {
+                shutdownRequested = false;
+                break;
+            }
         }
     }
 
@@ -144,6 +158,22 @@ protected void doProcess() throws IOException
         }
     }
 
+    /**
+     * Intended to reset the singleton as part of testing.
+     */
+    static void reset()
+    {
+        synchronized(SelectorManager.class)
+        {
+            if (manager != null)
+                manager.requestShutdown();
+            manager = null;
+            if (udpManager != null)
+                udpManager.requestShutdown();
+            udpManager = null;
+        }
+    }
+
     /**
      * Returns the SelectorManager applications should use.
      * 
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
index f2be63ab..e9c086d5 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
@@ -20,6 +20,7 @@
 package org.apache.cassandra;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.junit.BeforeClass;
 
@@ -31,6 +32,13 @@
     private static Logger logger = Logger.getLogger(CleanupHelper.class);
 
     @BeforeClass
+    public static void cleanupAndLeaveDirs()
+    {
+        mkdirs();
+        cleanup();
+        mkdirs();
+    }
+
     public static void cleanup()
     {
         // we clean the fs twice, once to start with (so old data files don't get stored by anything static if this is the first run)
@@ -39,6 +47,10 @@ public static void cleanup()
                 DatabaseDescriptor.getLogFileLocation(),
         };
 
+        // try to delete the directories themselves too. don't panic if this fails. it probably means that the process
+        // doesn't have permissions to do so, or it contains non-cassandra generated files that were intentionally
+        // put there.
+
         for (String dirName : directoryNames)
         {
             File dir = new File(dirName);
@@ -48,10 +60,14 @@ public static void cleanup()
             }
             for (File f : dir.listFiles())
             {
-                if (!f.delete()) {
+                if (!f.delete())
+                {
                     logger.error("could not delete " + f);
             }
         }
+
+            if (!dir.delete())
+                logger.warn("could not delete " + dir.getPath());
     }
 
         // cleanup data directory which are stored as data directory/table/data files
@@ -72,8 +88,24 @@ public static void cleanup()
                         }
                     }
                 }
+                if (!tableFile.delete())
+                    logger.warn("could not delete " + dir.getPath());
+            }
+
+            if (!dir.delete())
+                logger.warn("could not delete " + dir.getPath());
             }
         }
 
+    public static void mkdirs()
+    {
+        try
+        {
+            DatabaseDescriptor.createAllDirectories();
+        }
+        catch (IOException e)
+        {
+            throw new RuntimeException(e);
+        }
     }
 }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/net/NetPackageAccessor.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/net/NetPackageAccessor.java
index e69de29b..408bfbaa 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/net/NetPackageAccessor.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/net/NetPackageAccessor.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.net;
+
+/**
+    For accesing package-level members created for the sole purpose of testing.
+ */
+public class NetPackageAccessor
+{
+    public static void resetSelectorManager()
+    {
+        SelectorManager.reset();
+    }
+}
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/service/StorageServiceTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/service/StorageServiceTest.java
index e69de29b..0ec9ffe7 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/service/StorageServiceTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/service/StorageServiceTest.java
@@ -0,0 +1,68 @@
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+
+package org.apache.cassandra.service;
+
+import org.apache.cassandra.CleanupHelper;
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.net.NetPackageAccessor;
+import org.junit.Test;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+
+import java.io.File;
+import java.io.IOException;
+
+public class StorageServiceTest
+{
+    @Test
+    public void testClientOnlyMode() throws IOException
+    {
+        CleanupHelper.mkdirs();
+        CleanupHelper.cleanup();
+        StorageService.instance().initClient();
+
+        // verify that no storage directories were created.
+        for (String path : DatabaseDescriptor.getAllDataFileLocations())
+        {
+            assertFalse(new File(path).exists());
+        }
+        StorageService.instance().stopClient();
+        NetPackageAccessor.resetSelectorManager();
+    }
+
+    @Test
+    public void testRegularMode() throws IOException, InterruptedException
+    {
+        CleanupHelper.mkdirs();
+        CleanupHelper.cleanup();
+        StorageService.instance().initServer();
+        for (String path : DatabaseDescriptor.getAllDataFileLocations())
+        {
+            // verify that storage directories are there.
+            assertTrue(new File(path).exists());
+        }
+        // a proper test would be to call decommission here, but decommission() mixes both shutdown and datatransfer
+        // calls.  This test is only interested in the shutdown-related items which a properly handled by just
+        // stopping the client.
+        //StorageService.instance().decommission();
+        StorageService.instance().stopClient();
+        NetPackageAccessor.resetSelectorManager();
+    }
+}
