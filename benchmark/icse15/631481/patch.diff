diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 54782a9a..f2a80eed 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -2742,15 +2742,15 @@ private void endTransactionActivationHandling(boolean forRollback) throws Standa
 				continue;
 			}
 
-			ResultSet activationResultSet = null;
-			boolean resultsetReturnsRows = false;
-			if (a.getResultSet() != null) {
-				activationResultSet = a.getResultSet();
-				resultsetReturnsRows = activationResultSet.returnsRows();
-			}
+			//Determine if the activation has a resultset and if that resultset
+			//returns rows. For such an activation, we need to take special
+			//actions during commit and rollback as explained in the comments
+			//below.
+			ResultSet activationResultSet = a.getResultSet();
+			boolean resultsetReturnsRows =  
+				(activationResultSet != null) && activationResultSet.returnsRows(); ;
 
 			if (forRollback) { 
-				if (activationResultSet != null) 
 					if (resultsetReturnsRows)
 						//Since we are dealing with rollback, we need to reset 
 						//the activation no matter what the holdability might 
@@ -2771,9 +2771,6 @@ private void endTransactionActivationHandling(boolean forRollback) throws Standa
 				}
 			} else {
 				//We are dealing with commit here. 
-				if (activationResultSet != null) {
-					//if the activation has resultset associated with it, then 
-					//use following criteria to take the action
 					if (resultsetReturnsRows){
 						if (a.getResultSetHoldability() == false)
 							//Close result sets that return rows and are not held 
@@ -2791,7 +2788,6 @@ private void endTransactionActivationHandling(boolean forRollback) throws Standa
 							//before doing any row operations.
 							activationResultSet.clearCurrentRow();							
 					}
-				}
 				a.clearHeapConglomerateController();
 			}
 		}
