diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnIndexer.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnIndexer.java
index 748b7804..c36b6f8c 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnIndexer.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnIndexer.java
@@ -83,7 +83,7 @@ private static BloomFilter createColumnBloomFilter(Collection<IColumn> columns)
             columnCount += column.getObjectCount();
         }
 
-        BloomFilter bf = new BloomFilter(columnCount, 4);
+        BloomFilter bf = BloomFilter.getFilter(columnCount, 4);
         for (IColumn column : columns)
         {
             bf.add(column.name());
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java
index 581904b5..a3869786 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java
@@ -49,7 +49,7 @@ public SSTableWriter(String filename, long keyCount, IPartitioner partitioner) t
         super(filename, partitioner);
         dataFile = new BufferedRandomAccessFile(path, "rw", (int)(DatabaseDescriptor.getFlushDataBufferSizeInMB() * 1024 * 1024));
         indexFile = new BufferedRandomAccessFile(indexFilename(), "rw", (int)(DatabaseDescriptor.getFlushIndexBufferSizeInMB() * 1024 * 1024));
-        bf = new BloomFilter((int)keyCount, 15); // TODO fix long -> int cast
+        bf = BloomFilter.getFilter(keyCount, 15);
     }
 
     private long beforeAppend(DecoratedKey decoratedKey) throws IOException
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/tools/ThreadListBuilder.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/tools/ThreadListBuilder.java
index 940c1332..e69de29b 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/tools/ThreadListBuilder.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/tools/ThreadListBuilder.java
@@ -1,94 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.tools;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.InputStreamReader;
-import java.io.RandomAccessFile;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.cassandra.io.DataOutputBuffer;
-import org.apache.cassandra.utils.BloomFilter;
-
-
-public class ThreadListBuilder
-{
-    private final static int bufSize_ = 64*1024*1024;
-    private final static int count_ = 128*1024*1024;
-    
-    public static void main(String[] args) throws Throwable
-    {
-        if ( args.length != 2 )
-        {
-            System.out.println("Usage : java org.apache.cassandra.tools.ThreadListBuilder <directory containing files to be processed> <directory to dump the bloom filter in.>");
-            System.exit(1);
-        }
-        
-        File directory = new File(args[0]);
-        File[] files = directory.listFiles();
-        List<DataOutputBuffer> buffers = new ArrayList<DataOutputBuffer>();    
-        BloomFilter bf = new BloomFilter(count_, 8);        
-        int keyCount = 0;
-        
-        /* Process the list of files. */
-        for ( File file : files )
-        {
-            System.out.println("Processing file " + file);
-            BufferedReader bufReader = new BufferedReader( new InputStreamReader( new FileInputStream(file) ), ThreadListBuilder.bufSize_ );
-            String line = null;
-            
-            while ( (line = bufReader.readLine()) != null )
-            {
-                /* After accumulating count_ keys reset the bloom filter. */
-                if ( keyCount > 0 && keyCount % count_ == 0 )
-                {                       
-                    DataOutputBuffer bufOut = new DataOutputBuffer();
-                    BloomFilter.serializer().serialize(bf, bufOut);
-                    System.out.println("Finished serializing the bloom filter");
-                    buffers.add(bufOut);
-                    bf = new BloomFilter(count_, 8);
-                }
-                line = line.trim();                
-                bf.add(line);
-                ++keyCount;
-            }
-        }
-        
-        /* Add the bloom filter assuming the last one was left out */
-        DataOutputBuffer bufOut = new DataOutputBuffer();
-        BloomFilter.serializer().serialize(bf, bufOut);
-        buffers.add(bufOut);
-        
-        
-        int size = buffers.size();
-        for ( int i = 0; i < size; ++i )
-        {
-            DataOutputBuffer buffer = buffers.get(i);
-            String file = args[1] + File.separator + "Bloom-Filter-" + i + ".dat";
-            RandomAccessFile raf = new RandomAccessFile(file, "rw");
-            raf.write(buffer.getData(), 0, buffer.getLength());
-            raf.close();
-            buffer.close();
-        }
-        System.out.println("Done writing the bloom filter to disk");
-    }
-}
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomCalculations.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomCalculations.java
index d48a7566..ddaf587d 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomCalculations.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomCalculations.java
@@ -27,12 +27,10 @@
  * Filter class by helping to choose correct values of 'bits per element' and
  * 'number of hash functions, k'.
  */
-public class BloomCalculations {
+class BloomCalculations {
 
-    private static final int maxBuckets = 15;
     private static final int minBuckets = 2;
     private static final int minK = 1;
-    private static final int maxK = 8;
     private static final int[] optKPerBuckets =
             new int[]{1, // dummy K for 0 buckets per element
                       1, // dummy K for 1 buckets per element
@@ -65,17 +63,17 @@
     };  // the first column is a dummy column representing K=0.
 
     /**
-     * Given the number of buckets that can be used per element, return the optimal
-     * number of hash functions in order to minimize the false positive rate.
+     * Given the number of buckets that can be used per element, return a
+     * specification that minimizes the false positive rate.
      *
-     * @param bucketsPerElement
-     * @return The number of hash functions that minimize the false positive rate.
+     * @param bucketsPerElement The number of buckets per element for the filter.
+     * @return A spec that minimizes the false positive rate.
      */
-    public static int computeBestK(int bucketsPerElement){
-        assert bucketsPerElement >= 0;
-        if(bucketsPerElement >= optKPerBuckets.length)
-            return optKPerBuckets[optKPerBuckets.length-1];
-        return optKPerBuckets[bucketsPerElement];
+    public static BloomSpecification computeBloomSpec(int bucketsPerElement)
+    {
+        assert bucketsPerElement >= 1;
+        assert bucketsPerElement <= probs.length - 1;
+        return new BloomSpecification(optKPerBuckets[bucketsPerElement], bucketsPerElement);
     }
 
     /**
@@ -100,17 +98,25 @@ public BloomSpecification(int k, int bucketsPerElement) {
      * is considered more expensive than computing power, preference is given
      * to minimizing buckets per element rather than number of hash functions.
      *
+     * @param maxBucketsPerElement The maximum number of buckets available for the filter.
      * @param maxFalsePosProb The maximum tolerable false positive rate.
      * @return A Bloom Specification which would result in a false positive rate
-     * less than specified by the function call.
+     * less than specified by the function call
+     * @throws UnsupportedOperationException if a filter satisfying the parameters cannot be met
      */
-    public static BloomSpecification computeBucketsAndK(double maxFalsePosProb){
+    public static BloomSpecification computeBloomSpec(int maxBucketsPerElement, double maxFalsePosProb)
+    {
+        assert maxBucketsPerElement >= 1;
+        assert maxBucketsPerElement <= probs.length - 1;
+        int maxK = probs[maxBucketsPerElement].length - 1;
+
         // Handle the trivial cases
         if(maxFalsePosProb >= probs[minBuckets][minK]) {
             return new BloomSpecification(2, optKPerBuckets[2]);
         }
-        if(maxFalsePosProb < probs[maxBuckets][maxK]) {
-            return new BloomSpecification(maxK, maxBuckets);
+        if (maxFalsePosProb < probs[maxBucketsPerElement][maxK]) {
+            throw new UnsupportedOperationException(String.format("Unable to satisfy %s with %s buckets per element",
+                                                                  maxFalsePosProb, maxBucketsPerElement));
         }
 
         // First find the minimal required number of buckets:
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomFilter.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomFilter.java
index 2228d7ba..1be3a8ac 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomFilter.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/utils/BloomFilter.java
@@ -25,10 +25,15 @@
 
 import org.apache.cassandra.io.ICompactSerializer;
 
+import org.apache.log4j.Logger;
+
 public class BloomFilter extends Filter
 {
+    private static final Logger logger = Logger.getLogger(BloomFilter.class);
     static ICompactSerializer<BloomFilter> serializer_ = new BloomFilterSerializer();
 
+    private static final int EXCESS = 20;
+
     public static ICompactSerializer<BloomFilter> serializer()
     {
         return serializer_;
@@ -36,26 +41,63 @@
 
     private BitSet filter_;
 
-    public BloomFilter(int numElements, int bucketsPerElement)
+    BloomFilter(int hashes, BitSet filter)
     {
-        this(BloomCalculations.computeBestK(bucketsPerElement), new BitSet(numElements * bucketsPerElement + 20));
+        hashCount = hashes;
+        filter_ = filter;
     }
 
-    public BloomFilter(int numElements, double maxFalsePosProbability)
+    private static BitSet bucketsFor(long numElements, int bucketsPer)
     {
-        BloomCalculations.BloomSpecification spec = BloomCalculations
-                .computeBucketsAndK(maxFalsePosProbability);
-        filter_ = new BitSet(numElements * spec.bucketsPerElement + 20);
-        hashCount = spec.K;
+        long numBits = numElements * bucketsPer + EXCESS;
+        return new BitSet((int)Math.min(Integer.MAX_VALUE, numBits));
     }
 
-    /*
-     * This version is only used by the deserializer.
+    /**
+     * Calculates the maximum number of buckets per element that this implementation
+     * can support.  Crucially, it will lower the bucket count if necessary to meet
+     * BitSet's size restrictions.
      */
-    BloomFilter(int hashes, BitSet filter)
+    private static int maxBucketsPerElement(long numElements)
     {
-        hashCount = hashes;
-        filter_ = filter;
+        numElements = Math.max(1, numElements);
+        double v = (Integer.MAX_VALUE - EXCESS) / (double)numElements;
+        if (v < 1.0)
+        {
+            throw new UnsupportedOperationException("Cannot compute probabilities for " + numElements + " elements.");
+        }
+        return Math.min(BloomCalculations.probs.length - 1, (int)v);
+    }
+
+    /**
+     * @return A BloomFilter with the lowest practical false positive probability
+     * for the given number of elements.
+     */
+    public static BloomFilter getFilter(long numElements, int targetBucketsPerElem)
+    {
+        int maxBucketsPerElement = Math.max(1, maxBucketsPerElement(numElements));
+        int bucketsPerElement = Math.min(targetBucketsPerElem, maxBucketsPerElement);
+        if (bucketsPerElement < targetBucketsPerElem)
+        {
+            logger.warn(String.format("Cannot provide an optimal BloomFilter for %d elements (%d/%d buckets per element).",
+                                      numElements, bucketsPerElement, targetBucketsPerElem));
+        }
+        BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement);
+        return new BloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
+    }
+
+    /**
+     * @return The smallest BloomFilter that can provide the given false positive
+     * probability rate for the given number of elements.
+     *
+     * Asserts that the given probability can be satisfied using this filter.
+     */
+    public static BloomFilter getFilter(long numElements, double maxFalsePosProbability)
+    {
+        assert maxFalsePosProbability <= 1.0 : "Invalid probability";
+        int bucketsPerElement = maxBucketsPerElement(numElements);
+        BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement, maxFalsePosProbability);
+        return new BloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
     }
 
     public void clear()
diff --git a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/BloomFilterTest.java b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/BloomFilterTest.java
index 51023b06..5af1652e 100644
--- a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/BloomFilterTest.java
+++ b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/BloomFilterTest.java
@@ -26,13 +26,10 @@
 public class BloomFilterTest
 {
     public BloomFilter bf;
-    public BloomCalculations.BloomSpecification spec = BloomCalculations.computeBucketsAndK(0.0001);
-    static final int ELEMENTS = 10000;
 
     public BloomFilterTest()
     {
-        bf = new BloomFilter(ELEMENTS, spec.bucketsPerElement);
-        assert bf != null;
+        bf = BloomFilter.getFilter(FilterTest.ELEMENTS, FilterTest.MAX_FAILURE_RATE);
     }
 
     @Before
@@ -41,6 +38,19 @@ public void clear()
         bf.clear();
     }
 
+    @Test(expected=UnsupportedOperationException.class)
+    public void testBloomLimits1()
+    {
+        int maxBuckets = BloomCalculations.probs.length - 1;
+        int maxK = BloomCalculations.probs[maxBuckets].length - 1;
+
+        // possible
+        BloomCalculations.computeBloomSpec(maxBuckets, BloomCalculations.probs[maxBuckets][maxK]);
+
+        // impossible, throws
+        BloomCalculations.computeBloomSpec(maxBuckets, BloomCalculations.probs[maxBuckets][maxK] / 2);
+    }
+
     @Test
     public void testOne()
     {
@@ -68,7 +78,7 @@ public void testWords()
         {
             return;
         }
-        BloomFilter bf2 = new BloomFilter(KeyGenerator.WordGenerator.WORDS / 2, FilterTest.spec.bucketsPerElement);
+        BloomFilter bf2 = BloomFilter.getFilter(KeyGenerator.WordGenerator.WORDS / 2, FilterTest.MAX_FAILURE_RATE);
         int skipEven = KeyGenerator.WordGenerator.WORDS % 2 == 0 ? 0 : 2;
         FilterTest.testFalsePositives(bf2,
                                       new KeyGenerator.WordGenerator(skipEven, 2),
diff --git a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/FilterTest.java b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/FilterTest.java
index cc9214b9..2f56aec5 100644
--- a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/FilterTest.java
+++ b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/utils/FilterTest.java
@@ -56,7 +56,7 @@ public void testManyRandom()
     // used by filter subclass tests
 
     static final double MAX_FAILURE_RATE = 0.1;
-    public static final BloomCalculations.BloomSpecification spec = BloomCalculations.computeBucketsAndK(MAX_FAILURE_RATE);
+    public static final BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(15, MAX_FAILURE_RATE);
     static final int ELEMENTS = 10000;
 
     static final ResetableIterator<String> intKeys()
