diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index da7bff12..7f50e2ff 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -110,7 +110,7 @@ public void run()
         }).start();
     }
 
-    public static void guessTokenIfNotSpecified() throws IOException
+    public static void guessTokenIfNotSpecified(TokenMetadata metadata) throws IOException
     {
         StorageService ss = StorageService.instance();
         StorageLoadBalancer slb = StorageLoadBalancer.instance();
@@ -122,8 +122,10 @@ public static void guessTokenIfNotSpecified() throws IOException
         {
             double maxLoad = 0;
             InetAddress maxEndpoint = null;
-            for (Map.Entry<InetAddress,Double> entry : slb.getLoadInfo().entrySet())
+            for (Map.Entry<InetAddress, Double> entry : slb.getLoadInfo().entrySet())
             {
+                if (!metadata.isMember(entry.getKey()))
+                    continue;
                 if (maxEndpoint == null || entry.getValue() > maxLoad)
                 {
                     maxEndpoint = entry.getKey();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
index 2fdf0b18..f9487071 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
@@ -114,6 +114,7 @@ public void update(Token token, InetAddress endpoint)
     public Token getToken(InetAddress endpoint)
     {
         assert endpoint != null;
+        assert isMember(endpoint); // don't want to return nulls
 
         lock.readLock().lock();
         try
@@ -126,7 +127,7 @@ public Token getToken(InetAddress endpoint)
         }
     }
     
-    public boolean isKnownEndPoint(InetAddress endpoint)
+    public boolean isMember(InetAddress endpoint)
     {
         assert endpoint != null;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 3c840918..4aaba28a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -272,7 +272,7 @@ public void start() throws IOException
         {
             logger_.info("Starting in bootstrap mode (first, sleeping to get load information)");
             Gossiper.instance().addApplicationState(MODE, new ApplicationState(MODE_MOVING));
-            BootStrapper.guessTokenIfNotSpecified();
+            BootStrapper.guessTokenIfNotSpecified(tokenMetadata_);
             new BootStrapper(replicationStrategy_, FBUtilities.getLocalAddress(), getLocalToken(), tokenMetadata_).startBootstrap(); // handles token update
         }
         else
@@ -373,17 +373,18 @@ public void onChange(InetAddress endpoint, EndPointState epState)
             Token newToken = getPartitioner().getTokenFactory().fromString(nodeIdState.getState());
             if (logger_.isDebugEnabled())
               logger_.debug("CHANGE IN STATE FOR " + endpoint + " - has token " + nodeIdState.getState());
-            Token oldToken = tokenMetadata_.getToken(endpoint);
 
-            if ( oldToken != null )
+            if (tokenMetadata_.isMember(endpoint))
             {
+                Token oldToken = tokenMetadata_.getToken(endpoint);
+
                 /*
                  * If oldToken equals the newToken then the node had crashed
                  * and is coming back up again. If oldToken is not equal to
                  * the newToken this means that the node is being relocated
                  * to another position in the ring.
                 */
-                if ( !oldToken.equals(newToken) )
+                if (!oldToken.equals(newToken))
                 {
                     if (logger_.isDebugEnabled())
                       logger_.debug("Relocation for endpoint " + endpoint);
@@ -414,7 +415,7 @@ public void onChange(InetAddress endpoint, EndPointState epState)
              * If we are here and if this node is UP and already has an entry
              * in the token map. It means that the node was behind a network partition.
             */
-            if ( epState.isAlive() && tokenMetadata_.isKnownEndPoint(endpoint) )
+            if (epState.isAlive() && tokenMetadata_.isMember(endpoint))
             {
                 if (logger_.isDebugEnabled())
                   logger_.debug("InetAddress " + endpoint + " just recovered from a partition. Sending hinted data.");
