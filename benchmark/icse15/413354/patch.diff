diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 473acdfc..732c6087 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -27,7 +27,6 @@
 import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 import org.apache.derby.iapi.sql.compile.OptimizerFactory;
 import org.apache.derby.iapi.types.DataValueFactory;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java
index c46296b5..22b1d2d1 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java
@@ -84,14 +84,13 @@
 	 * @param defaultUUID			The UUID for the default, if any.
 	 * @param autoincStart	Start value for an autoincrement column.
 	 * @param autoincInc	Increment for autoincrement column
-	 * @param autoinc		boolean value for sanity checking.
 	 */
 
 	public ColumnDescriptor(String columnName, int columnPosition,
 					 DataTypeDescriptor columnType, DataValueDescriptor columnDefault,
 					 DefaultInfo columnDefaultInfo,
 					 TableDescriptor table,
-					 UUID defaultUUID, long autoincStart, long autoincInc, boolean autoinc)
+					 UUID defaultUUID, long autoincStart, long autoincInc)
 	{
 		this.columnName = columnName;
 		this.columnPosition = columnPosition;
@@ -105,7 +104,7 @@ public ColumnDescriptor(String columnName, int columnPosition,
 			this.uuid = table.getUUID();
 		}
 
-		assertAutoinc(autoinc,
+		assertAutoinc(autoincInc != 0,
 			      autoincInc,
 			      columnDefaultInfo);
 
@@ -132,14 +131,13 @@ public ColumnDescriptor(String columnName, int columnPosition,
 	 * @param defaultUUID			The UUID for the default, if any.
 	 * @param autoincStart	Start value for an autoincrement column.
 	 * @param autoincInc	Increment for autoincrement column
-	 * @param autoinc		Boolean value, for sanity checking.
 	 */
 	public ColumnDescriptor(String columnName, int columnPosition,
 		DataTypeDescriptor columnType, DataValueDescriptor columnDefault,
 		DefaultInfo columnDefaultInfo,
 		UUID uuid,
 		UUID defaultUUID,
-        long autoincStart, long autoincInc, boolean autoinc)
+        long autoincStart, long autoincInc)
 
 	{
 		this.columnName = columnName;
@@ -150,7 +148,7 @@ public ColumnDescriptor(String columnName, int columnPosition,
 		this.uuid = uuid;
 		this.defaultUUID = defaultUUID;
 
-		assertAutoinc(autoinc,
+		assertAutoinc(autoincInc!=0,
 			      autoincInc,
 			      columnDefaultInfo);
 		
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index aaf3bea8..c24e7429 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -2938,7 +2938,7 @@ private void addSPSParams(SPSDescriptor spsd, TransactionController tc, boolean
                         (DataValueDescriptor)parameterDefaults[index],
                     (DefaultInfo) null,
                     uuid,
-                    (UUID) null, 0, 0, false);
+                    (UUID) null, 0, 0);
 										
 			addDescriptorNow(cd, null, SYSCOLUMNS_CATALOG_NUM, 
 						  false, // no chance of duplicates here
@@ -3126,7 +3126,7 @@ public void	updateSPS(
 										  (DefaultInfo) null,
 										  uuid,
 										  (UUID) null,
-										  0, 0, false);
+										  0, 0);
 										
 				updateColumnDescriptor(cd,
 									   cd.getReferencingUUID(), 
@@ -6865,7 +6865,7 @@ private	ColumnDescriptor	makeColumnDescriptor( SystemColumn		column,
 		return new ColumnDescriptor
 			(column.getName(), column.getID(), typeDesc, null, null, td,
 			 (UUID) null, // No defaults yet for system columns
-			 0, 0, false
+			 0, 0
 			 );
 	}
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java
index cebbab81..76a31a04 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java
@@ -487,11 +487,6 @@ else if (object instanceof DefaultInfoImpl)
 		/* 9th column is AUTOINCREMENTINC (long) */
 		autoincInc = row.getColumn(SYSCOLUMNS_AUTOINCREMENTINC).getLong();
 
-		/* NOTE: We use the autoincColumn variable in order to work around 
-		 * a 1.3.0 HotSpot bug.  (#4361550)
-		 */
-		boolean autoincColumn = (autoincInc != 0); 
-
 		DataValueDescriptor col = row.getColumn(SYSCOLUMNS_AUTOINCREMENTSTART);
 		autoincStart = col.getLong();
 
@@ -500,8 +495,7 @@ else if (object instanceof DefaultInfoImpl)
 
 		colDesc = new ColumnDescriptor(columnName, columnNumber,
 							dataTypeServices, defaultValue, defaultInfo, uuid, 
-							defaultUUID, autoincStart, autoincInc, 
-							autoincColumn);
+							defaultUUID, autoincStart, autoincInc);
 		return colDesc;
 	}
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSFILESRowFactory.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSFILESRowFactory.java
index 886669f6..507a81c0 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSFILESRowFactory.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/catalog/SYSFILESRowFactory.java
@@ -26,7 +26,6 @@
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java
index 3054198f..c537e453 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java
@@ -26,7 +26,6 @@
 
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 
 import org.apache.derby.iapi.sql.ResultSet;
 import org.apache.derby.iapi.sql.Activation;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromList.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromList.java
index 84217c1d..193cbf56 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromList.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromList.java
@@ -33,7 +33,6 @@
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 
 import org.apache.derby.iapi.error.StandardException;
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
index b637b291..bf4fd2fc 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
@@ -28,7 +28,6 @@
 import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
index dfa5b0ad..9e28014a 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
@@ -39,7 +39,6 @@
 
 import org.apache.derby.iapi.reference.ClassName;
 
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index c9ba77d2..51533a58 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -723,7 +723,7 @@ public void bindResultColumnsByName(ResultColumnList fullRCL,
 											null,
 											(TableDescriptor) null,
 											null,
-											0, 0, false);
+											0, 0);
 			rc.setColumnDescriptor(null, cd);
 			rc.setVirtualColumnId(index + 1);
 		}
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
index d5fb5a11..b217c4c8 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
@@ -21,7 +21,6 @@
 package	org.apache.derby.impl.sql.compile;
 
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 
 import org.apache.derby.iapi.error.StandardException;
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
index 860bad59..f951bd79 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
@@ -40,7 +40,6 @@
 
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index 0573151f..93862a0f 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -624,8 +624,7 @@ private void addNewColumnToTable(Activation activation,
 												   td,
 												   defaultUUID,
 												   columnInfo[ix].autoincStart,
-												   columnInfo[ix].autoincInc,
-												   columnInfo[ix].autoincInc != 0
+												   columnInfo[ix].autoincInc
 												   );
 
 		dd.addDescriptor(columnDescriptor, td,
@@ -927,8 +926,7 @@ private void modifyColumnType(Activation activation,
 									td,
 									columnDescriptor.getDefaultUUID(),
 								    columnInfo[ix].autoincStart,
-								    columnInfo[ix].autoincInc,
-								    columnInfo[ix].autoincInc != 0
+								    columnInfo[ix].autoincInc
 									);
 		
 
@@ -970,8 +968,7 @@ private void modifyColumnConstraint(Activation activation,
 									td,
 									columnDescriptor.getDefaultUUID(),
 									columnDescriptor.getAutoincStart(),
-									columnDescriptor.getAutoincInc(),
-									columnDescriptor.getAutoincInc() != 0);
+									columnDescriptor.getAutoincInc());
 		
 
 
@@ -1038,8 +1035,7 @@ private void modifyColumnDefault(Activation activation,
 												   td,
 												   defaultUUID,
 												   columnInfo[ix].autoincStart,
-												   columnInfo[ix].autoincInc,
-												   columnInfo[ix].autoincInc != 0
+												   columnInfo[ix].autoincInc
 												   );
 
 		// Update the ColumnDescriptor with new default info
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java
index b1905d65..406b0a46 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java
@@ -30,7 +30,6 @@
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
 import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java
index fbc4c429..1156269e 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java
@@ -265,10 +265,8 @@ public void	executeConstantAction( Activation activation )
 								   td,
 								   defaultUUID,
 								   columnInfo[ix].autoincStart,
-								   columnInfo[ix].autoincInc,
-								   columnInfo[ix].autoincInc != 0
+								   columnInfo[ix].autoincInc
 							   );
-
 			cdlArray[ix] = columnDescriptor;
 		}
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateViewConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateViewConstantAction.java
index 71d62130..c6a1d6cd 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateViewConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/CreateViewConstantAction.java
@@ -175,8 +175,7 @@ public void	executeConstantAction( Activation activation )
 								   td,
 								   (UUID) null,
 								   columnInfo[ix].autoincStart,
-								   columnInfo[ix].autoincInc,
-								   columnInfo[ix].autoincInc != 0
+								   columnInfo[ix].autoincInc
 							   );
 			cdlArray[ix] = columnDescriptor;
 		}
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java
index 4f72b054..a9ee5dc9 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java
@@ -33,7 +33,6 @@
 
 import org.apache.derby.iapi.sql.StatementType;
 
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropIndexConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropIndexConstantAction.java
index 9699f88b..33a4c2c1 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropIndexConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropIndexConstantAction.java
@@ -27,7 +27,6 @@
 import org.apache.derby.iapi.sql.depend.Dependency;
 import org.apache.derby.iapi.sql.depend.Dependent;
 
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropSchemaConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropSchemaConstantAction.java
index c7d1edcb..8f2553f9 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropSchemaConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropSchemaConstantAction.java
@@ -22,7 +22,6 @@
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.error.StandardException;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropViewConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropViewConstantAction.java
index 3838841d..5750fe5b 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropViewConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/DropViewConstantAction.java
@@ -25,7 +25,6 @@
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java
index 2ceb893a..d0b8b245 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java
@@ -42,7 +42,6 @@
 
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 
 import org.apache.derby.iapi.store.access.Qualifier;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/IndexConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/IndexConstantAction.java
index f5098629..e82de1b3 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/IndexConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/IndexConstantAction.java
@@ -24,7 +24,6 @@
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java
index 3f1ff8c5..ec3940c1 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java
@@ -32,7 +32,6 @@
 import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.sql.execute.ConstantAction;
 import org.apache.derby.iapi.sql.execute.ExecRow;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/SetConstraintsConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/SetConstraintsConstantAction.java
index b3934339..5419f3a2 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/SetConstraintsConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/SetConstraintsConstantAction.java
@@ -34,7 +34,6 @@
 import org.apache.derby.iapi.sql.StatementType;
 
 import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java
index 4a75b3e7..a27e9614 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java
@@ -32,7 +32,6 @@
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JitTest.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JitTest.java
index e69de29b..8de0f1a1 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JitTest.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JitTest.java
@@ -0,0 +1,191 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.JitTest
+
+   Copyright (c) 2001, 2006 The Apache Software Foundation or its licensors, where applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.sql.SQLException;
+
+import org.apache.derby.tools.ij;
+import org.apache.derby.tools.JDBCDisplayUtil;
+
+/**
+ * DERBY-1327
+ * Identity column can be created with wrong and very large start with 
+ * value with "J2RE 1.5.0 IBM Windows 32 build pwi32dev-20060412 (SR2)" 
+ * with JIT on
+ */
+public class JitTest {
+
+  public static void main (String args[]) 
+  { 
+    try {
+    	/* Load the JDBC Driver class */
+    	// use the ij utility to read the property file and
+    	// make the initial connection.
+    	ij.getPropertyArg(args);
+    	Connection conn = ij.startJBMS();
+
+    	//add tests specific to a jit issue
+    	testDerby1327BadStartWithForAutoIncColumn(conn);
+    	conn.close();
+    } catch (Exception e) {
+    	System.out.println("FAIL -- unexpected exception "+e);
+    	JDBCDisplayUtil.ShowException(System.out, e);
+      	e.printStackTrace();
+    }
+  }
+  
+  /**
+   * After some number of table creations with JIT turned on, the START WITH  
+   * value for the table being created and all the ones already created gets 
+   * mysteriously changed with pwi32dev-20060412 (SR2)
+   * 
+   * @throws Exception
+   */
+  public static void testDerby1327BadStartWithForAutoIncColumn(Connection conn) 
+  	throws Exception
+  {
+	conn.setAutoCommit(false);
+		Statement stmt = null;		
+
+		DatabaseMetaData md = conn.getMetaData() ;
+		System.out.println(md.getDatabaseProductVersion());
+		System.out.println(md.getDatabaseProductName());
+		System.out.println(md.getDriverName());
+		dropAllAppTables(conn);
+		System.out.println("Create tables until we get a wrong Start with value");
+		stmt = conn.createStatement();
+
+		// numBadStartWith will be changed if any columns get a bad start with value.
+		int numBadStartWith = 0; 
+		String createTableSQL = null;
+		try {
+			// create 200 tables.  Break out if we get a table that has a bad
+			// start with value.
+			for (int i = 0; (i < 200) && (numBadStartWith == 0); i++)
+			{
+				String tableName = "APP.MYTABLE" + i;
+			    createTableSQL = "CREATE TABLE " + tableName + 
+				"  (ROLEID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY ("+
+				"START WITH 2, INCREMENT BY 1), INSTANCEID INTEGER, STATUS"+
+				" INTEGER, LOGICAL_STATE INTEGER, LSTATE_TSTAMP  TIMESTAMP,"+
+				" UPDT_TSTAMP TIMESTAMP, TSTAMP TIMESTAMP,"+
+				" CLALEVEL1_CLALEVEL2_CLALEVEL2ID VARCHAR(255),  "+
+				"CLALEVEL1_CLALEVEL2_CLALEVEL3_CLALEVEL3ID VARCHAR(255))";
+				
+				stmt.executeUpdate(createTableSQL);
+				conn.commit();
+                numBadStartWith = checkBadStartWithCols(conn,2);
+				if (numBadStartWith > 0)
+					break;
+			}
+		} catch (SQLException se)
+		{
+			System.out.println("Failed on " + createTableSQL);
+			JDBCDisplayUtil.ShowSQLException(System.out,se);
+
+		}
+		
+		if (numBadStartWith == 0)
+		{
+			System.out.println("PASS: All 200 tables created without problems");
+			dropAllAppTables(conn);
+		}
+		stmt.close();
+		conn.rollback();
+  } 
+
+
+  /**
+   * Check that all tables in App do not have a an autoincrementstart value
+   * greater tan maxautoincrementstart
+   * @param conn
+   * @param maxautoincrementstart  Maximum expected autoincrementstart value
+   * @return number of columns with bad autoincrementstart value
+   */
+  	private static int checkBadStartWithCols(Connection conn, int
+  	  		maxautoincrementstart) throws Exception
+  	{
+  		Statement stmt = conn.createStatement();
+  		ResultSet rs =stmt.executeQuery("select count(autoincrementstart) from"+
+  				" sys.syscolumns c, sys.systables t, sys.sysschemas s WHERE"+
+				" t.schemaid =  s.schemaid and s.schemaname = 'APP' and"+
+				" autoincrementstart > " +  maxautoincrementstart);
+
+  		rs.next();
+  		int numBadStartWith = rs.getInt(1);
+  		if (numBadStartWith > 0)
+  			System.out.println(numBadStartWith + " columns have bad START WITH VALUE");
+  		rs.close();
+  		
+  		if (numBadStartWith > 0)
+  		{
+  			rs =stmt.executeQuery("select tablename, columnname,"+
+  					" autoincrementstart from sys.syscolumns c, sys.systables t,"+
+					" sys.sysschemas s WHERE t.schemaid = s.schemaid and"+
+					" s.schemaname = 'APP' and autoincrementstart > 2 ORDER"+
+					" BY tablename");
+  			while (rs.next())
+  			{
+  				System.out.println("Unexpected start value: " +
+  								   rs.getLong(3) + 
+  								   " on column " + rs.getString(1) +
+  								   "(" + rs.getString(2) + ")");
+  				
+  				
+  			}
+  		}
+         return numBadStartWith;
+  	}
+
+  	/**
+       * Drop all tables in schema APP
+  	 * @param conn
+  	 * @throws SQLException
+  	 */
+  	private  static void dropAllAppTables(Connection conn) throws SQLException
+  	{
+  		Statement stmt1 = conn.createStatement();
+  		Statement stmt2 = conn.createStatement();
+  		System.out.println("Drop all tables in APP schema");
+  		ResultSet rs = stmt1.executeQuery("SELECT tablename from sys.systables"+
+  				" t, sys.sysschemas s where t.schemaid = s.schemaid and"+
+				" s.schemaname = 'APP'");
+
+  		while (rs.next())
+  		{
+  			String tableName = rs.getString(1);
+  			
+  			try {
+  				stmt2.executeUpdate("DROP TABLE " + tableName);
+  			}
+  			catch (SQLException se)
+  			{
+  				System.out.println("Error dropping table:" + tableName);
+  				se.printStackTrace();
+  				continue;
+  			}
+  		}
+  	}
+}
