diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/UUIDGen.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/UUIDGen.java
index e69de29b..500bf77b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/UUIDGen.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/UUIDGen.java
@@ -0,0 +1,62 @@
+package org.apache.cassandra.utils;
+
+import org.safehaus.uuid.EthernetAddress;
+import org.safehaus.uuid.UUIDGenerator;
+
+import java.math.BigInteger;
+import java.net.InetAddress;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Random;
+import java.util.UUID;
+
+/**
+ * Generates type 1 (time-based) UUIDs
+ */
+public class UUIDGen
+{
+    /** creates a type1 uuid but substitutes hash of the IP where the mac would go. */
+    public static synchronized UUID makeType1UUIDFromHost(InetAddress addr)
+    {
+        try
+        {
+            MessageDigest digest = MessageDigest.getInstance("MD5");
+            digest.update(addr.getAddress());
+            byte[] md5 = digest.digest();
+            byte[] fauxMac = new byte[6];
+            System.arraycopy(md5, 0, fauxMac, 0, Math.min(md5.length, fauxMac.length));
+            return makeType1UUID(UUIDGenerator.getInstance().generateTimeBasedUUID(new EthernetAddress(fauxMac)).toByteArray());
+        }
+        catch (NoSuchAlgorithmException ex)
+        {
+            throw new RuntimeException("Your platform has no support for generating MD5 sums");
+        }
+    }
+
+    /** creates a type 1 uuid from raw bytes. */
+    static UUID makeType1UUID(byte[] raw)
+    {
+        long most = 0;
+        long least = 0;
+        assert raw.length == 16;
+        for (int i = 0; i < 8; i++)
+            most = (most << 8) | (raw[i] & 0xff);
+        for (int i =8 ; i < 16; i++)
+            least = (least << 8) | (raw[i] & 0xff);
+        return new UUID(most, least);
+    }
+
+    /** decomposes a uuid into raw bytes. */
+    static byte[] decompose(UUID uuid)
+    {
+        long most = uuid.getMostSignificantBits();
+        long least = uuid.getLeastSignificantBits();
+        byte[] b = new byte[16];
+        for (int i = 0; i < 8; i++)
+        {
+            b[i] = (byte)(most >>> ((7-i) * 8));
+            b[8+i] = (byte)(least >>> ((7-i) * 8));
+        }
+        return b;
+    }
+}
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/UUIDTests.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/UUIDTests.java
index e69de29b..b733eae1 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/UUIDTests.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/UUIDTests.java
@@ -0,0 +1,56 @@
+package org.apache.cassandra.utils;
+
+import org.apache.cassandra.db.marshal.TimeUUIDType;
+import org.junit.Test;
+
+import java.math.BigInteger;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.UUID;
+
+
+public class UUIDTests
+{
+    @Test
+    public void verifyType1() throws UnknownHostException
+    {
+        
+        UUID uuid = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"));
+        assert uuid.version() == 1;
+    }
+
+    @Test
+    public void verifyOrdering1() throws UnknownHostException
+    {
+        UUID one = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"));
+        UUID two = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.2"));
+        assert one.timestamp() < two.timestamp();
+    }
+
+
+    @Test
+    public void testDecomposeAndRaw() throws UnknownHostException
+    {
+        UUID a = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"));
+        byte[] decomposed = UUIDGen.decompose(a);
+        UUID b = UUIDGen.makeType1UUID(decomposed);
+        assert a.equals(b);
+    }
+
+    @Test
+    public void testTimeUUIDType() throws UnknownHostException
+    {
+        TimeUUIDType comp = new TimeUUIDType();
+        byte[] first = UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1")));
+        byte[] second = UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1")));
+        assert comp.compare(first, second) < 0;
+        assert comp.compare(second, first) > 0;
+        byte[] sameAsFirst = UUIDGen.decompose(UUIDGen.makeType1UUID(first));
+        assert comp.compare(first, sameAsFirst) == 0;
+    }
+
+    private void assertNonZero(BigInteger i)
+    {
+        assert i.toString(2).indexOf("1") > -1;
+    }
+}
