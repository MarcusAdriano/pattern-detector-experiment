diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index ac68954b..fde444fb 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -1632,12 +1632,11 @@ private boolean implementsDerbyStyleVTICosting( String className )
         throws StandardException
     {
         Constructor     constructor = null;
-        Class           vtiClass = null;
+        Class           vtiClass = lookupClass( className );
+        Class           vtiCostingClass = lookupClass( VTICosting.class.getName() );
         
         try {
-            vtiClass = Class.forName( className );
-
-            if ( !VTICosting.class.isAssignableFrom( vtiClass ) ) { return false; }
+            if ( !vtiCostingClass.isAssignableFrom( vtiClass ) ) { return false; }
         }
         catch (Throwable t)
         {
@@ -1669,9 +1668,10 @@ private VTICosting  getVTICosting()
     {
         if ( !isDerbyStyleTableFunction ) { return (version2) ? (VTICosting) ps : (VTICosting) rs; }
         
-        try {
             String              className = methodCall.getJavaClassName();
-            Class               vtiClass = Class.forName( className );
+        Class               vtiClass = lookupClass( className );
+        
+        try {
             Constructor         constructor = vtiClass.getConstructor( new Class[] {} );
             VTICosting          result = (VTICosting) constructor.newInstance( null );
 
@@ -1682,4 +1682,20 @@ private VTICosting  getVTICosting()
             throw StandardException.unexpectedUserException( t );
         }
     }
+
+    /**
+     * Lookup the class that holds the VTI.
+     */
+    private Class lookupClass( String className )
+        throws StandardException
+    {
+        try {
+            return getClassFactory().getClassInspector().getClass( className );
+        }
+        catch (ClassNotFoundException t)
+        {
+            throw StandardException.unexpectedUserException( t );
+        }
+    }
+
 }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index 2fd41349..a2fe21bc 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -105,6 +105,7 @@ public static Test suite()
                 "testLoadJavaClassDirectly3",
                 "testLoadDerbyClassIndirectly",
                 "testIndirectLoading",
+                "testTableFunctionInJar",
             };
             
             for (int i = 0; i < orderedTests.length; i++)
@@ -138,6 +139,7 @@ public static Test suite()
                    "functionTests/tests/lang/dcl_ot2.jar",
                    "functionTests/tests/lang/dcl_ot3.jar",
                    "functionTests/tests/lang/dcl_id.jar",
+                   "functionTests/tests/lang/dummy_vti.jar",
                    });
            
            }
@@ -992,6 +994,90 @@ public void testIndirectLoading() throws SQLException, MalformedURLException
         
     }
 
+    /**
+     * Test that table functions can be invoked from inside jar files stored in
+     * the database.
+     */
+    public void testTableFunctionInJar() throws SQLException, MalformedURLException
+    {
+        
+        String jarName = "EMC.DUMMY_VTI";
+
+        installJar("dummy_vti.jar", jarName );
+
+        setDBClasspath( jarName );
+
+        Statement s = createStatement();
+
+        // register a scalar function
+        s.executeUpdate
+            (
+             "create function reciprocal( original double ) returns double\n" +
+             "language java\n" +
+             "parameter style java\n" +
+             "no sql\n" +
+             "external name 'DummyVTI.reciprocal'"
+             );
+
+        // register the table function
+        s.executeUpdate
+            (
+             "create function dummyVTI()\n" +
+             "returns table( tablename varchar( 128 ) )\n" +
+             "language java\n" +
+             "parameter style DERBY_JDBC_RESULT_SET\n" +
+             "reads sql data\n" +
+             "external name 'DummyVTI.dummyVTI'\n"
+             );
+
+        // register another table function in a class which doesn't exist
+        s.executeUpdate
+            (
+             "create function dummyVTI2()\n" +
+             "returns table( tablename varchar( 128 ) )\n" +
+             "language java\n" +
+             "parameter style DERBY_JDBC_RESULT_SET\n" +
+             "reads sql data\n" +
+             "external name 'DummyVTI2.dummyVTI'\n"
+             );
+
+        // invoke the scalar function
+        JDBC.assertFullResultSet(
+                s.executeQuery
+                (
+                 "values ( reciprocal( 2.0 ) )"
+                 ),
+                new String[][] {
+                    {"0.5"},
+                    });
+
+        
+        // invoke the table function
+        JDBC.assertFullResultSet(
+                s.executeQuery
+                (
+                 "select * from table( dummyVTI() ) s where tablename='SYSTABLES'"
+                 ),
+                new String[][] {
+                    {"SYSTABLES"},
+                    });
+
+        // verify that a missing class raises an exception
+        try {
+            s.executeQuery
+                (
+                 "select * from table( dummyVTI2() ) s where tablename='SYSTABLES'"
+                 );
+            fail( "Should have seen a ClassNotFoundException." );
+        } catch (SQLException e) {
+            assertSQLState("XJ001", e);
+        }
+        
+        setDBClasspath(null);
+        
+        s.close();
+    }
+    
             
   
     private void installJar(String resource, String jarName) throws SQLException, MalformedURLException
