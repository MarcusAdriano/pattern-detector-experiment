diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
index f2e2d336..bd61cb3a 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
@@ -38,109 +38,91 @@ public CloseableDirectory(IDirectory delegate) {
 		this.delegate = delegate;
 	}
 	
-	@Override
 	public String getName() {
 		checkNotClosed();
 		return delegate.getName();
 	}
 
-	@Override
 	public boolean isDirectory() {
 		checkNotClosed();
 		return delegate.isDirectory();
 	}
 
-	@Override
 	public boolean isFile() {
 		checkNotClosed();
 		return delegate.isFile();
 	}
 
-	@Override
 	public long getLastModified() {
 		checkNotClosed();
 		return delegate.getLastModified();
 	}
 
-	@Override
 	public IFile getFile(String name) {
 		checkNotClosed();
 		return delegate.getFile(name);
 	}
 
-	@Override
 	public long getSize() {
 		checkNotClosed();
 		return delegate.getSize();
 	}
 
-	@Override
 	public IDirectory convert() {
 		checkNotClosed();
 		return delegate.convert();
 	}
 
-	@Override
 	public IDirectory convertNested() {
 		checkNotClosed();
 		return delegate.convertNested();
 	}
 
-	@Override
 	public boolean isRoot() {
 		checkNotClosed();
 		return delegate.isRoot();
 	}
 
-	@Override
 	public IDirectory getParent() {
 		checkNotClosed();
 		return delegate.getParent();
 	}
 
-	@Override
 	public IDirectory getRoot() {
 		checkNotClosed();
 		return delegate.getRoot();
 	}
 
-	@Override
 	public Iterator<IFile> iterator() {
 		checkNotClosed();
 		return delegate.iterator();
 	}
 
-	@Override
 	public List<IFile> listFiles() {
 		checkNotClosed();
 		return delegate.listFiles();
 	}
 
-	@Override
 	public List<IFile> listAllFiles() {
 		checkNotClosed();
 		return delegate.listAllFiles();
 	}
 
-	@Override
 	public ICloseableDirectory toCloseable() {
 		checkNotClosed();
 		return delegate.toCloseable();
 	}
 
-	@Override
 	public InputStream open() throws IOException, UnsupportedOperationException {
 		checkNotClosed();
 		return delegate.open();
 	}
 
-	@Override
 	public URL toURL() throws MalformedURLException {
 		checkNotClosed();
 		return delegate.toURL();
 	}
 
-	@Override
 	public final void close() throws IOException {
 		if (closed.compareAndSet(false, true)) {
 			cleanup();
@@ -153,7 +135,6 @@ protected void checkNotClosed() {
 		if (isClosed()) throw new IllegalStateException("ICloseableDirectory is closed");
 	}
 
-	@Override
 	public boolean isClosed() {
 		return closed.get();
 	}
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
index b5aa8f67..2ae1d4cb 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
@@ -44,7 +44,6 @@ public DirectoryImpl(File dir, File rootFile)
     super(dir, rootFile);
   }
 
-  @Override
   public IFile getFile(String name)
   {
     File desiredFile = new File(file, name);
@@ -61,14 +60,12 @@ public IFile getFile(String name)
     return result;
   }
 
-  @Override
   public boolean isRoot()
   {
     boolean result = (rootDirFile == file);
     return result;
   }
 
-  @Override
   public List<IFile> listFiles()
   {
     List<IFile> files = new ArrayList<IFile>();
@@ -85,7 +82,6 @@ public boolean isRoot()
     return files;
   }
   
-  @Override
   public List<IFile> listAllFiles()
   {
     List<IFile> files = new ArrayList<IFile>();
@@ -104,31 +100,26 @@ public boolean isRoot()
     return files;
   }
   
-  @Override
   public Iterator<IFile> iterator()
   {
 	return listFiles().iterator();
   }
 
-  @Override
   public IDirectory getParent()
   {
     return isRoot() ? null : super.getParent();
   }
 
-  @Override
   public IDirectory convert()
   {
     return this;
   }
 
-  @Override
   public InputStream open() throws IOException
   {
     throw new UnsupportedOperationException();
   }
 
-  @Override
   public long getLastModified()
   {
     long result = super.getLastModified();
@@ -140,7 +131,6 @@ public long getLastModified()
     return result;
   }
 
-  @Override
   public ICloseableDirectory toCloseable() {
 	return new CloseableDirectory(this);
   }
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
index 3d4776c6..eb24f9dd 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
@@ -57,68 +57,58 @@ public FileImpl(File f, File rootFile)
     else name = file.getAbsolutePath().substring(rootDir.length() + 1).replace('\\', '/');
   }
   
-  @Override
   public IDirectory convert()
   {
     return null;
   }
 
-  @Override
   public long getLastModified()
   {
     long result = file.lastModified();
     return result;
   }
 
-  @Override
   public String getName()
   {
     return name;
   }
 
-  @Override
   public IDirectory getParent()
   {
     IDirectory parent = new DirectoryImpl(file.getParentFile(), rootDirFile);
     return parent;
   }
 
-  @Override
   public long getSize()
   {
     long size = file.length();
     return size;
   }
 
-  @Override
   public boolean isDirectory()
   {
     boolean result = file.isDirectory();
     return result;
   }
 
-  @Override
   public boolean isFile()
   {
     boolean result = file.isFile();
     return result;
   }
 
-  @Override
   public InputStream open() throws IOException
   {
     InputStream is = new FileInputStream(file);
     return is;
   }
 
-  @Override
   public IDirectory getRoot()
   {
     IDirectory root = new DirectoryImpl(rootDirFile, rootDirFile);
     return root;
   }
 
-  @Override
   public URL toURL() throws MalformedURLException
   {
     URL result = file.toURI().toURL();
@@ -150,7 +140,6 @@ public String toString()
     return file.getAbsolutePath();
   }
 
-  @Override
   public IDirectory convertNested() {
 	  if (isDirectory()) return convert();
 	  else return FileSystemImpl.getFSRoot(file, getParent());
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
index 455b660d..017d92f1 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
@@ -58,22 +58,18 @@ public NestedZipDirectory(NestedZipDirectory other, NestedCloseableDirectory cac
 		super(other, cache);
 	}
 	
-	@Override
 	public IDirectory convert() {
 		return this;
 	}
 
-	@Override
 	public Iterator<IFile> iterator() {
 		return listFiles().iterator();
 	}
 
-	@Override
 	public List<IFile> listFiles() {
 		return listFiles(false);
 	}
 
-	@Override
 	public List<IFile> listAllFiles() {
 		return listFiles(true);
 	}
@@ -145,7 +141,6 @@ private NestedZipDirectory buildParent(ZipEntry entry, Map<String,ZipEntry> entr
 		return result;
 	}
 
-	@Override
 	public IFile getFile(String name) {
 		Map<String,ZipEntry> entries = new HashMap<String, ZipEntry>();
 		ZipEntry ze;
@@ -194,27 +189,22 @@ public IFile getFile(String name) {
 	}
 
 	
-	@Override
 	public boolean isDirectory() {
 		return true;
 	}
 
-	@Override
 	public InputStream open() throws IOException, UnsupportedOperationException {
 		throw new UnsupportedOperationException();
 	}
 
-	@Override
 	public boolean isFile() {
 		return false;
 	}
 
-	@Override
 	public boolean isRoot() {
 		return false;
 	}
 
-	@Override
 	public ICloseableDirectory toCloseable() {
 		try {
 			return new NestedCloseableDirectory(archive, this);			
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
index f32afef1..fcf9216f 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
@@ -93,49 +93,40 @@ public String getNameInZip() {
 		return nameInZip;
 	}
 	
-	@Override
 	public String getName() {
 		return name;
 	}
 
-	@Override
 	public boolean isDirectory() {
 		return false;
 	}
 
-	@Override
 	public boolean isFile() {
 		return true;
 	}
 
-	@Override
 	public long getLastModified() {
 		return lastModified;
 	}
 
-	@Override
 	public long getSize() {
 		return size;
 	}
 
-	@Override
 	public IDirectory convert() {
 		return null;
 	}
 
-	@Override
 	public IDirectory convertNested() {
 		if (isDirectory()) return convert();
 		else if (FileSystemImpl.isValidZip(this)) return new NestedZipDirectory(this);
 		else return null;
 	}
 
-	@Override
 	public IDirectory getParent() {
 		return parent;
 	}
 
-	@Override
 	public InputStream open() throws IOException, UnsupportedOperationException {
 		if (cache != null && !!!cache.isClosed()) {
 			ZipFile zip = cache.getZipFile();
@@ -160,12 +151,10 @@ public InputStream open() throws IOException, UnsupportedOperationException {
 		}
 	}
 
-	@Override
 	public IDirectory getRoot() {
 		return archive.getRoot();
 	}
 
-	@Override
 	public URL toURL() throws MalformedURLException
 	{
 		if (nameInZip.length() == 0) return archive.toURL();
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
index 19b8502c..bfc1109a 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
@@ -81,7 +81,6 @@ public ZipDirectory(ZipDirectory other, ZipCloseableDirectory cache) {
 	  zipRoot = other.zipRoot;
   }
 
-  @Override
   public IFile getFile(String name)
   {
     IFile result = null;
@@ -136,19 +135,16 @@ private ZipDirectory buildParent(ZipEntry foundEntry)
     return result;
   }
 
-  @Override
   public boolean isRoot()
   {
 	  return getParent() == null;
   }
 
-  @Override
   public List<IFile> listFiles()
   {
 	  return listFiles(false);
   }
 
-  @Override
   public List<IFile> listAllFiles()
   {
 	  return listFiles(true);
@@ -194,37 +190,31 @@ protected static boolean isInDir(String parentDir, ZipEntry possibleEntry, boole
     return result;
   }
 
-  @Override
   public Iterator<IFile> iterator()
   {
     return listFiles().iterator();
   }
 
-  @Override
   public IDirectory convert()
   {
     return this;
   }
 
-  @Override
   public boolean isDirectory()
   {
     return true;
   }
 
-  @Override
   public boolean isFile()
   {
     return false;
   }
 
-  @Override
   public InputStream open() 
   {
     throw new UnsupportedOperationException();
   }
 
-  @Override
   public IDirectory getRoot()
   {
     return root;
@@ -263,7 +253,6 @@ private ZipEntry getEntry(String entryName) {
     return entryFile;
   }
 
-  @Override
   public ICloseableDirectory toCloseable() {
 	  try {
 		  return new ZipCloseableDirectory(zip, this);
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
index 5202091a..678aeac5 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
@@ -135,26 +135,22 @@ public String getZipPathToRoot() {
 	  return zipPathToRoot;
   }
   
-  @Override
   public IDirectory convert()
   {
     return null;
   }
   
-  @Override
   public IDirectory convertNested() {
 	  if (isDirectory()) return convert();
 	  else if (FileSystemImpl.isValidZip(this)) return new NestedZipDirectory(this); 
 	  else return null;
   }	
 
-  @Override
   public long getLastModified()
   {
     return lastModified;
   }
 
-  @Override
   public String getName()
   {
     return name;
@@ -170,44 +166,37 @@ public String getNameInZip()
 	  }
   }
 
-  @Override
   public IDirectory getParent()
   {
     return parent;
   }
 
-  @Override
   public long getSize()
   {
     return size;
   }
 
-  @Override
   public boolean isDirectory()
   {
     return false;
   }
 
-  @Override
   public boolean isFile()
   {
     return true;
   }
 
-  @Override
   public InputStream open() throws IOException
   {
     InputStream is = new SpecialZipInputStream(entry);
     return is;
   }
   
-  @Override
   public IDirectory getRoot()
   {
     return parent.getRoot();
   }
 
-  @Override
   public URL toURL() throws MalformedURLException
   {
     String entryURL = "jar:" + url + "!/" + entry.getName();
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
index 82c8ff07..5c48496e 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
@@ -45,7 +45,6 @@ public BundleToClassLoaderAdapter(Bundle bundle)
   public URL getResource(final String name)
   {
     return AccessController.doPrivileged(new PrivilegedAction<URL>() {
-      @Override
 	public URL run()
       {
         return b.getResource(name);
@@ -76,7 +75,6 @@ public InputStream getResourceAsStream(String name)
     Enumeration<URL> urls;
     try {
       urls = AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
-        @Override
 		@SuppressWarnings("unchecked")
         public Enumeration<URL> run() throws IOException
         {
@@ -116,7 +114,6 @@ public InputStream getResourceAsStream(String name)
   {
     try {
       Class<?> result = AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
-        @Override
 		public Class<?> run() throws ClassNotFoundException
         {
           return b.loadClass(name);
@@ -136,7 +133,6 @@ public InputStream getResourceAsStream(String name)
     }
   }
 
-  @Override
   public Bundle getBundle()
   {
     return b;
