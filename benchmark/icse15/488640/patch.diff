diff --git a/lucene/java/trunk/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java b/lucene/java/trunk/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java
index bb10c482..68b10952 100644
--- a/lucene/java/trunk/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java
+++ b/lucene/java/trunk/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java
@@ -342,8 +342,12 @@ private static void addGram(String text, Document doc, int ng1, int ng2) {
   }
 
   protected void finalize() throws Throwable {
+    try {
     if (reader != null) {
       reader.close();
     }
+    } finally {
+      super.finalize();
+    }
   }
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
index b0ef8d60..5a62477d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
@@ -721,11 +721,15 @@ public final synchronized void close() throws IOException {
   protected abstract void doClose() throws IOException;
 
   /** Release the write lock, if needed. */
-  protected void finalize() {
+  protected void finalize() throws Throwable {
+    try {
     if (writeLock != null) {
       writeLock.release();                        // release write lock
       writeLock = null;
     }
+    } finally {
+      super.finalize();
+    }
   }
 
 
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
index 61339e5f..c3b833cc 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
@@ -202,7 +202,7 @@ public void setTermIndexInterval(int interval) {
    */
   public IndexWriter(String path, Analyzer a, boolean create)
        throws IOException {
-    this(FSDirectory.getDirectory(path, create), a, create, true);
+    init(path, a, create);
   }
 
   /**
@@ -222,7 +222,7 @@ public IndexWriter(String path, Analyzer a, boolean create)
    */
   public IndexWriter(File path, Analyzer a, boolean create)
        throws IOException {
-    this(FSDirectory.getDirectory(path, create), a, create, true);
+    init(path, a, create);
   }
 
   /**
@@ -242,10 +242,86 @@ public IndexWriter(File path, Analyzer a, boolean create)
    */
   public IndexWriter(Directory d, Analyzer a, boolean create)
        throws IOException {
-    this(d, a, create, false);
+    init(d, a, create, false);
+  }
+
+  /**
+   * Constructs an IndexWriter for the index in
+   * <code>path</code>, creating it first if it does not
+   * already exist, otherwise appending to the existing
+   * index.  Text will be analyzed with <code>a</code>.
+   *
+   * @param path the path to the index directory
+   * @param a the analyzer to use
+   * @throws IOException if the directory cannot be
+   *  created or read/written to
+   */
+  public IndexWriter(String path, Analyzer a) 
+    throws IOException {
+    if (IndexReader.indexExists(path)) {
+      init(path, a, false);
+    } else {
+      init(path, a, true);
+    }
+  }
+
+  /**
+   * Constructs an IndexWriter for the index in
+   * <code>path</code>, creating it first if it does not
+   * already exist, otherwise appending to the existing
+   * index.  Text will be analyzed with
+   * <code>a</code>.
+   *
+   * @param path the path to the index directory
+   * @param a the analyzer to use
+   * @throws IOException if the directory cannot be
+   *  created or read/written to
+   */
+  public IndexWriter(File path, Analyzer a) 
+    throws IOException {
+    if (IndexReader.indexExists(path)) {
+      init(path, a, false);
+    } else {
+      init(path, a, true);
+    }
+  }
+
+  /**
+   * Constructs an IndexWriter for the index in
+   * <code>d</code>, creating it first if it does not
+   * already exist, otherwise appending to the existing
+   * index.  Text will be analyzed with <code>a</code>.
+   *
+   * @param d the index directory
+   * @param a the analyzer to use
+   * @throws IOException if the directory cannot be
+   *  created or read/written to
+   */
+  public IndexWriter(Directory d, Analyzer a) 
+    throws IOException {
+    if (IndexReader.indexExists(d)) {
+      init(d, a, false, false);
+    } else {
+      init(d, a, true, false);
+    }
   }
 
   private IndexWriter(Directory d, Analyzer a, final boolean create, boolean closeDir)
+    throws IOException {
+    init(d, a, create, closeDir);
+  }
+
+  private void init(String path, Analyzer a, final boolean create)
+    throws IOException {
+    init(FSDirectory.getDirectory(path, create, null, false), a, create, true);
+  }
+
+  private void init(File path, Analyzer a, final boolean create)
+    throws IOException {
+    init(FSDirectory.getDirectory(path, create, null, false), a, create, true);
+  }
+
+  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)
     throws IOException {
       this.closeDir = closeDir;
       directory = d;
@@ -418,7 +494,38 @@ public static long getDefaultWriteLockTimeout() {
     return IndexWriter.WRITE_LOCK_TIMEOUT;
   }
 
-  /** Flushes all changes to an index and closes all associated files. */
+  /**
+   * Flushes all changes to an index and closes all
+   * associated files.
+   *
+   * <p> If an Exception is hit during close, eg due to disk
+   * full or some other reason, then both the on-disk index
+   * and the internal state of the IndexWriter instance will
+   * be consistent.  However, the close will not be complete
+   * even though part of it (flushing buffered documents)
+   * may have succeeded, so the write lock will still be
+   * held.</p>
+   * 
+   * <p> If you can correct the underlying cause (eg free up
+   * some disk space) then you can call close() again.
+   * Failing that, if you want to force the write lock to be
+   * released (dangerous, because you may then lose buffered
+   * docs in the IndexWriter instance) then you can do
+   * something like this:</p>
+   *
+   * <pre>
+   * try {
+   *   writer.close();
+   * } finally {
+   *   if (IndexReader.isLocked(directory)) {
+   *     IndexReader.unlock(directory);
+   *   }
+   * }
+   * </pre>
+   *
+   * after which, you must be certain not to use the writer
+   * instance anymore.</p>
+   */
   public synchronized void close() throws IOException {
     flushRamSegments();
     ramDirectory.close();
@@ -431,11 +538,15 @@ public synchronized void close() throws IOException {
   }
 
   /** Release the write lock, if needed. */
-  protected void finalize() throws IOException {
+  protected void finalize() throws Throwable {
+    try {
     if (writeLock != null) {
       writeLock.release();                        // release write lock
       writeLock = null;
     }
+    } finally {
+      super.finalize();
+    }
   }
 
   /** Returns the Directory used by this index. */
@@ -479,11 +590,12 @@ public synchronized int docCount() {
    * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
    * discarded.
    *
-   * Note that if an Exception is hit (eg disk full) then
-   * the index will be consistent, but this document will
-   * not have been added.  Furthermore, it's possible the
-   * index will have one segment in non-compound format even
-   * when using compound files.
+   * <p> Note that if an Exception is hit (eg disk full)
+   * then the index will be consistent, but this document
+   * may not have been added.  Furthermore, it's possible
+   * the index will have one segment in non-compound format
+   * even when using compound files (when a merge has
+   * partially succeeded).</p>
    */
   public void addDocument(Document doc) throws IOException {
     addDocument(doc, analyzer);
@@ -495,8 +607,8 @@ public void addDocument(Document doc) throws IOException {
    * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
    * discarded.
    *
-   * See @link #addDocument(Document) for details on index
-   * state after an IOException.
+   * <p>See {@link #addDocument(Document)} for details on
+   * index and IndexWriter state after an Exception.</p>
    */
   public void addDocument(Document doc, Analyzer analyzer) throws IOException {
     DocumentWriter dw =
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java
index 299159fd..9bd7d7bf 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java
@@ -187,11 +187,14 @@ private void initialize(SegmentInfo si) throws IOException {
     }
   }
 
-  protected void finalize() {
+  protected void finalize() throws Throwable {
+    try {
      // patch for pre-1.4.2 JVMs, whose ThreadLocals leak
      termVectorsLocal.set(null);
+    } finally {
      super.finalize();
   }
+  }
 
   protected void doCommit() throws IOException {
     if (deletedDocsDirty) {               // re-write deleted
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/TermInfosReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/TermInfosReader.java
index 062b61af..00b3b62d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/TermInfosReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/TermInfosReader.java
@@ -55,9 +55,13 @@
 			  fieldInfos, true);
   }
 
-  protected void finalize() {
+  protected void finalize() throws Throwable {
+    try {
     // patch for pre-1.4.2 JVMs, whose ThreadLocals leak
     enumerators.set(null);
+    } finally {
+      super.finalize();
+    }
   }
 
   public int getSkipInterval() {
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java b/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
index 4f70cb57..54273f9f 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
@@ -554,8 +554,12 @@ public long length() {
     return length;
   }
 
-  protected void finalize() throws IOException {
+  protected void finalize() throws Throwable {
+    try {
     close();            // close the file
+    } finally {
+      super.finalize();
+    }
   }
 
   public Object clone() {
@@ -607,8 +611,12 @@ public long length() throws IOException {
     return file.length();
   }
 
-  protected void finalize() throws IOException {
+  protected void finalize() throws Throwable {
+    try {
     close();          // close the file
+    } finally {
+      super.finalize();
+    }
   }
 
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/store/NativeFSLockFactory.java b/lucene/java/trunk/src/java/org/apache/lucene/store/NativeFSLockFactory.java
index ab3842be..31fec428 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/store/NativeFSLockFactory.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/store/NativeFSLockFactory.java
@@ -333,9 +333,13 @@ public String toString() {
     return "NativeFSLock@" + path;
   }
 
-  public void finalize() {
+  public void finalize() throws Throwable {
+    try {
     if (isLocked()) {
       release();
     }
+    } finally {
+      super.finalize();
+    }
   }
 }
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
index d94f63d8..3043467c 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -39,7 +39,7 @@ public void testDocCount() throws IOException
         IndexWriter.setDefaultWriteLockTimeout(2000);
         assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());
 
-        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
+        writer  = new IndexWriter(dir, new WhitespaceAnalyzer());
 
         IndexWriter.setDefaultWriteLockTimeout(1000);
 
@@ -58,7 +58,7 @@ public void testDocCount() throws IOException
         reader.close();
 
         // test doc count before segments are merged/index is optimized
-        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
+        writer = new IndexWriter(dir, new WhitespaceAnalyzer());
         assertEquals(100, writer.docCount());
         writer.close();
 
@@ -68,7 +68,7 @@ public void testDocCount() throws IOException
         reader.close();
 
         // optimize the index and check that the new doc count is correct
-        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
+        writer = new IndexWriter(dir, new WhitespaceAnalyzer());
         writer.optimize();
         assertEquals(60, writer.docCount());
         writer.close();
@@ -445,6 +445,8 @@ public void testCreateWithReader() throws IOException {
         if (tempDir == null)
             throw new IOException("java.io.tmpdir undefined, cannot run test");
         File indexDir = new File(tempDir, "lucenetestindexwriter");
+
+        try {
         Directory dir = FSDirectory.getDirectory(indexDir, true);
 
         // add one document & close writer
@@ -467,8 +469,79 @@ public void testCreateWithReader() throws IOException {
         assertEquals("should be one document", reader2.numDocs(), 1);
         reader.close();
         reader2.close();
+        } finally {
+          rmDir(indexDir);
+        }
+    }
+
+
+    // Same test as above, but use IndexWriter constructor
+    // that takes File:
+    public void testCreateWithReader2() throws IOException {
+        String tempDir = System.getProperty("java.io.tmpdir");
+        if (tempDir == null)
+            throw new IOException("java.io.tmpdir undefined, cannot run test");
+        File indexDir = new File(tempDir, "lucenetestindexwriter");
+        try {
+          // add one document & close writer
+          IndexWriter writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true);
+          addDoc(writer);
+          writer.close();
+
+          // now open reader:
+          IndexReader reader = IndexReader.open(indexDir);
+          assertEquals("should be one document", reader.numDocs(), 1);
+
+          // now open index for create:
+          writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true);
+          assertEquals("should be zero documents", writer.docCount(), 0);
+          addDoc(writer);
+          writer.close();
+
+          assertEquals("should be one document", reader.numDocs(), 1);
+          IndexReader reader2 = IndexReader.open(indexDir);
+          assertEquals("should be one document", reader2.numDocs(), 1);
+          reader.close();
+          reader2.close();
+        } finally {
         rmDir(indexDir);
     }
+    }
+
+    // Same test as above, but use IndexWriter constructor
+    // that takes String:
+    public void testCreateWithReader3() throws IOException {
+        String tempDir = System.getProperty("tempDir");
+        if (tempDir == null)
+            throw new IOException("java.io.tmpdir undefined, cannot run test");
+
+        String dirName = tempDir + "/lucenetestindexwriter";
+        try {
+
+          // add one document & close writer
+          IndexWriter writer = new IndexWriter(dirName, new WhitespaceAnalyzer(), true);
+          addDoc(writer);
+          writer.close();
+
+          // now open reader:
+          IndexReader reader = IndexReader.open(dirName);
+          assertEquals("should be one document", reader.numDocs(), 1);
+
+          // now open index for create:
+          writer = new IndexWriter(dirName, new WhitespaceAnalyzer(), true);
+          assertEquals("should be zero documents", writer.docCount(), 0);
+          addDoc(writer);
+          writer.close();
+
+          assertEquals("should be one document", reader.numDocs(), 1);
+          IndexReader reader2 = IndexReader.open(dirName);
+          assertEquals("should be one document", reader2.numDocs(), 1);
+          reader.close();
+          reader2.close();
+        } finally {
+          rmDir(new File(dirName));
+        }
+    }
 
     // Simulate a writer that crashed while writing segments
     // file: make sure we can still open the index (ie,
@@ -619,9 +692,11 @@ public void testSimulatedCorruptIndex2() throws IOException {
 
     private void rmDir(File dir) {
         File[] files = dir.listFiles();
+        if (files != null) {
         for (int i = 0; i < files.length; i++) {
             files[i].delete();
         }
+        }
         dir.delete();
     }
 }
