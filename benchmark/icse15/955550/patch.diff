diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestByteSlices.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestByteSlices.java
index 6e4b66c5..7492f680 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestByteSlices.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestByteSlices.java
@@ -73,7 +73,7 @@ synchronized void recycleByteBlocks(List<byte[]> blocks) {
   public void testBasic() throws Throwable {
     ByteBlockPool pool = new ByteBlockPool(new ByteBlockAllocator());
 
-    final int NUM_STREAM = 25;
+    final int NUM_STREAM = 100*_TestUtil.getRandomMultiplier();
 
     ByteSliceWriter writer = new ByteSliceWriter(pool);
 
@@ -109,8 +109,9 @@ public void testBasic() throws Throwable {
         for(int j=0;j<numValue;j++) {
           if (VERBOSE)
             System.out.println("    write " + (counters[stream]+j));
+          // write some large (incl. negative) ints:
+          writer.writeVInt(r.nextInt());
           writer.writeVInt(counters[stream]+j);
-          //writer.writeVInt(ti);
         }
         counters[stream] += numValue;
         uptos[stream] = writer.getAddress();
@@ -122,11 +123,12 @@ public void testBasic() throws Throwable {
         if (VERBOSE)
           System.out.println("  stream=" + stream + " count=" + counters[stream]);
 
-        if (starts[stream] != uptos[stream]) {
+        if (starts[stream] != -1 && starts[stream] != uptos[stream]) {
           reader.init(pool, starts[stream], uptos[stream]);
-          for(int j=0;j<counters[stream];j++) 
+          for(int j=0;j<counters[stream];j++) {
+            reader.readVInt();
             assertEquals(j, reader.readVInt());
-            //assertEquals(ti, reader.readVInt());
+          }
         }
       }
 
