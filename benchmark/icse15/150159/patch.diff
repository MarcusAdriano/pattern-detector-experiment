diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
index 69ec0eda..ee5238b0 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
@@ -49,8 +49,8 @@ public StandardTokenizer(Reader reader) {
     case NUM:
       token = jj_consume_token(NUM);
       break;
-    case SIGRAM:
-      token = jj_consume_token(SIGRAM);
+    case CJK:
+      token = jj_consume_token(CJK);
       break;
     case 0:
       token = jj_consume_token(0);
@@ -81,7 +81,7 @@ public StandardTokenizer(Reader reader) {
       jj_la1_0();
    }
    private static void jj_la1_0() {
-      jj_la1_0 = new int[] {0x4ff,};
+      jj_la1_0 = new int[] {0x10ff,};
    }
 
   public StandardTokenizer(CharStream stream) {
@@ -160,8 +160,8 @@ final private int jj_ntk() {
 
   public ParseException generateParseException() {
     jj_expentries.removeAllElements();
-    boolean[] la1tokens = new boolean[16];
-    for (int i = 0; i < 16; i++) {
+    boolean[] la1tokens = new boolean[15];
+    for (int i = 0; i < 15; i++) {
       la1tokens[i] = false;
     }
     if (jj_kind >= 0) {
@@ -177,7 +177,7 @@ public ParseException generateParseException() {
         }
       }
     }
-    for (int i = 0; i < 16; i++) {
+    for (int i = 0; i < 15; i++) {
       if (la1tokens[i]) {
         jj_expentry = new int[1];
         jj_expentry[0] = i;
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerConstants.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerConstants.java
index 56cec38f..917db107 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerConstants.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerConstants.java
@@ -15,12 +15,11 @@
   int NUM = 7;
   int P = 8;
   int HAS_DIGIT = 9;
-  int SIGRAM = 10;
-  int ALPHA = 11;
-  int LETTER = 12;
-  int CJK = 13;
-  int DIGIT = 14;
-  int NOISE = 15;
+  int ALPHA = 10;
+  int LETTER = 11;
+  int CJK = 12;
+  int DIGIT = 13;
+  int NOISE = 14;
 
   int DEFAULT = 0;
 
@@ -35,7 +34,6 @@
     "<NUM>",
     "<P>",
     "<HAS_DIGIT>",
-    "<SIGRAM>",
     "<ALPHA>",
     "<LETTER>",
     "<CJK>",
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerTokenManager.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerTokenManager.java
index 427f9f35..ab799212 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerTokenManager.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerTokenManager.java
@@ -10,7 +10,7 @@
   public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
 private final int jjMoveStringLiteralDfa0_0()
 {
-   return jjMoveNfa_0(1, 0);
+   return jjMoveNfa_0(0, 0);
 }
 private final void jjCheckNAdd(int state)
 {
@@ -103,7 +103,7 @@ private final int jjMoveNfa_0(int startState, int curPos)
          {
             switch(jjstateSet[--i])
             {
-               case 1:
+               case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
                      if (kind > 1)
@@ -113,6 +113,10 @@ private final int jjMoveNfa_0(int startState, int curPos)
                   if ((0x3ff000000000000L & l) != 0L)
                      jjCheckNAddStates(18, 23);
                   break;
+               case 1:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddStates(18, 23);
+                  break;
                case 2:
                case 39:
                   if ((0x3ff000000000000L & l) != 0L)
@@ -382,7 +386,7 @@ else if (curChar < 128)
          {
             switch(jjstateSet[--i])
             {
-               case 1:
+               case 0:
                   if ((0x7fffffe07fffffeL & l) != 0L)
                      jjCheckNAddStates(30, 35);
                   if ((0x7fffffe07fffffeL & l) != 0L)
@@ -671,12 +675,11 @@ else if (curChar < 128)
          {
             switch(jjstateSet[--i])
             {
-               case 1:
+               case 0:
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 10)
-                        kind = 10;
-                     jjCheckNAdd(0);
+                     if (kind > 12)
+                        kind = 12;
                   }
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                      jjCheckNAddStates(18, 23);
@@ -689,12 +692,9 @@ else if (curChar < 128)
                   if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                      jjCheckNAddStates(30, 35);
                   break;
-               case 0:
-                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 10)
-                     kind = 10;
-                  jjCheckNAdd(0);
+               case 1:
+                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(18, 23);
                   break;
                case 2:
                   if (jjCanMove_2(hiByte, i1, i2, l1, l2))
@@ -1023,15 +1023,15 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
 }
 public static final String[] jjstrLiteralImages = {
 "", null, null, null, null, null, null, null, null, null, null, null, null, 
-null, null, null, };
+null, null, };
 public static final String[] lexStateNames = {
    "DEFAULT", 
 };
 static final long[] jjtoToken = {
-   0x4ffL, 
+   0x10ffL, 
 };
 static final long[] jjtoSkip = {
-   0x8000L, 
+   0x4000L, 
 };
 protected CharStream input_stream;
 private final int[] jjrounds = new int[73];
@@ -1117,9 +1117,9 @@ public Token getNextToken()
    jjmatchedKind = 0x7fffffff;
    jjmatchedPos = 0;
    curPos = jjMoveStringLiteralDfa0_0();
-   if (jjmatchedPos == 0 && jjmatchedKind > 15)
+   if (jjmatchedPos == 0 && jjmatchedKind > 14)
    {
-      jjmatchedKind = 15;
+      jjmatchedKind = 14;
    }
    if (jjmatchedKind != 0x7fffffff)
    {
