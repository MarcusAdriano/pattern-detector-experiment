diff --git a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
index e42b4aa9..3efb7cd8 100644
--- a/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
+++ b/incubator/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
@@ -61,6 +61,7 @@
 import org.apache.aries.application.resolver.obr.impl.OBRBundleInfo;
 import org.apache.aries.application.resolver.obr.impl.RepositoryGeneratorImpl;
 import org.apache.aries.application.resolver.obr.impl.ResourceWrapper;
+import org.apache.aries.application.utils.AppConstants;
 import org.apache.aries.application.utils.filesystem.IOUtils;
 import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
 import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
@@ -146,41 +147,12 @@ public boolean getReturnOptionalResources()
   {
      log.debug(LOG_ENTRY, "resolve", new Object[]{appName, appVersion,byValueBundles, inputs});
     Collection<ImportedBundle> importedBundles = toImportedBundle(inputs);
-    DataModelHelper helper = repositoryAdmin.getHelper();
-
-   
     Collection<ModelledResource> toReturn = new ArrayList<ModelledResource>();
-    Repository appRepo;
-    try {      
-      ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
-      RepositoryGeneratorImpl.generateRepository(repositoryAdmin, appName + "_" + appVersion, byValueBundles, bytesOut);
-      appRepo = helper.readRepository(new InputStreamReader(new ByteArrayInputStream(bytesOut.toByteArray())));
-    } catch (Exception e) {
-      throw new ResolverException(e);
-    } 
-        
-    List<Repository> resolveRepos = new ArrayList<Repository>();
-    // add system repository
-    resolveRepos.add(repositoryAdmin.getSystemRepository());
-    // add local repository
-    resolveRepos.add(getLocalRepository(repositoryAdmin));
-    // add application repository
-    resolveRepos.add(appRepo);
-    
-
-    
-   // Need to refresh the repositories added to repository admin
-    
-    // add user-defined repositories
-    Repository[] repos = repositoryAdmin.listRepositories();
-    for (Repository r : repos) {
-      resolveRepos.add(r);      
-    }     
-    Resolver obrResolver = repositoryAdmin.resolver(resolveRepos.toArray(new Repository[resolveRepos.size()]));
-    addPlatformRepositories (obrResolver, appName);
     
+    Resolver obrResolver = getConfiguredObrResolver(appName, appVersion, byValueBundles);
     // add a resource describing the requirements of the application metadata.
     obrResolver.add(createApplicationResource( appName, appVersion, importedBundles));
+    
     if (obrResolver.resolve()) {
       
       List<Resource> requiredResources = retrieveRequiredResources(obrResolver);
@@ -239,50 +211,30 @@ public boolean getReturnOptionalResources()
     
   }
  
-  @Deprecated
-  @Override
-  public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) throws ResolverException
+  private Resolver getConfiguredObrResolver(String appName, String appVersion,
+      Collection<ModelledResource> byValueBundles) throws ResolverException
   {
-    log.trace("resolving {}", app);
+    log.debug(LOG_ENTRY, "getConfiguredObrResolver", new Object[]{appName, appVersion,byValueBundles });
     DataModelHelper helper = repositoryAdmin.getHelper();
-
-    
-    ApplicationMetadata appMeta = app.getApplicationMetadata();
-
-    String appName = appMeta.getApplicationSymbolicName();
-    Version appVersion = appMeta.getApplicationVersion();
-    List<Content> appContent = appMeta.getApplicationContents();
-
-    Collection<Content> useBundleContent = appMeta.getUseBundles();
-    List<Content> contents = new ArrayList<Content>();
-    contents.addAll(appContent);
-    contents.addAll(useBundleContent);
-    if ((constraints != null ) && (constraints.length > 0 )) {
-      for (ResolveConstraint con: constraints) {
-        contents.add(ManifestHeaderProcessor.parseContent(con.getBundleName(), con.getVersionRange().toString()));
-      }
-    }
-
     Repository appRepo;
     try {
-      
       ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
-      RepositoryGeneratorImpl.generateRepository(repositoryAdmin, appName + "_" + appVersion, toModelledResource(app.getBundleInfo()), bytesOut);
-      
+      RepositoryGeneratorImpl.generateRepository(repositoryAdmin, appName + "_" + appVersion, byValueBundles, bytesOut);
       appRepo = helper.readRepository(new InputStreamReader(new ByteArrayInputStream(bytesOut.toByteArray())));
     } catch (Exception e) {
       throw new ResolverException(e);
     } 
         
     List<Repository> resolveRepos = new ArrayList<Repository>();
-    
     // add system repository
     resolveRepos.add(repositoryAdmin.getSystemRepository());
- // add local repository
+    // add local repository if configured
+    if (!(excludeLocalRuntime())) {
     resolveRepos.add(getLocalRepository(repositoryAdmin));
+    }
     // add application repository
     resolveRepos.add(appRepo);
-    
+    // Need to refresh the repositories added to repository admin 
     // add user-defined repositories
     Repository[] repos = repositoryAdmin.listRepositories();
     for (Repository r : repos) {
@@ -290,7 +242,33 @@ public boolean getReturnOptionalResources()
     }    
     Resolver obrResolver = repositoryAdmin.resolver(resolveRepos.toArray(new Repository[resolveRepos.size()]));
     addPlatformRepositories (obrResolver, appName);
+    log.debug(LOG_EXIT, "getConfiguredObrResolver", obrResolver);
+    return obrResolver;
+  }
+ 
     
+  @Deprecated
+  @Override
+  public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) throws ResolverException
+  {
+    log.trace("resolving {}", app);
+    ApplicationMetadata appMeta = app.getApplicationMetadata();
+
+    String appName = appMeta.getApplicationSymbolicName();
+    Version appVersion = appMeta.getApplicationVersion();
+    List<Content> appContent = appMeta.getApplicationContents();
+
+    Collection<Content> useBundleContent = appMeta.getUseBundles();
+    List<Content> contents = new ArrayList<Content>();
+    contents.addAll(appContent);
+    contents.addAll(useBundleContent);
+    if ((constraints != null ) && (constraints.length > 0 )) {
+      for (ResolveConstraint con: constraints) {
+        contents.add(ManifestHeaderProcessor.parseContent(con.getBundleName(), con.getVersionRange().toString()));
+      }
+    }
+
+    Resolver obrResolver = getConfiguredObrResolver(appName, appVersion.toString(), toModelledResource(app.getBundleInfo()));
     // add a resource describing the requirements of the application metadata.
     obrResolver.add(createApplicationResource( appName, appVersion, contents));
     if (obrResolver.resolve()) {
@@ -335,6 +313,8 @@ public boolean getReturnOptionalResources()
     }
   }
   
+  
+  
   @Override
   public BundleInfo getBundleInfo(String bundleSymbolicName, Version bundleVersion)
   {
@@ -710,5 +690,8 @@ private Repository getLocalRepository(RepositoryAdmin admin)
    }
    
 
+   private boolean excludeLocalRuntime() {   
+     return Boolean.parseBoolean(System.getProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP));     
+   }
 
 }
