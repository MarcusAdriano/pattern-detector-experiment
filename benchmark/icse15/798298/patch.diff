diff --git a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
index c9f74e42..8b55d062 100644
--- a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
+++ b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
@@ -30,11 +30,11 @@
 
     public int get_column_count(String table, String key, ColumnParent column_parent) throws InvalidRequestException, TException;
 
-    public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int block_for) throws InvalidRequestException, UnavailableException, TException;
+    public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int consistency_level) throws InvalidRequestException, UnavailableException, TException;
 
-    public void batch_insert(String table, BatchMutation batch_mutation, int block_for) throws InvalidRequestException, UnavailableException, TException;
+    public void batch_insert(String table, BatchMutation batch_mutation, int consistency_level) throws InvalidRequestException, UnavailableException, TException;
 
-    public void remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int block_for) throws InvalidRequestException, UnavailableException, TException;
+    public void remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int consistency_level) throws InvalidRequestException, UnavailableException, TException;
 
     public List<SuperColumn> get_slice_super(String table, String key, String column_family, byte[] start, byte[] finish, boolean is_ascending, int count) throws InvalidRequestException, TException;
 
@@ -42,7 +42,7 @@
 
     public SuperColumn get_super_column(String table, String key, SuperColumnPath super_column_path) throws InvalidRequestException, NotFoundException, TException;
 
-    public void batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int block_for) throws InvalidRequestException, UnavailableException, TException;
+    public void batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int consistency_level) throws InvalidRequestException, UnavailableException, TException;
 
     public List<String> get_key_range(String table, String column_family, String start, String finish, int count) throws InvalidRequestException, TException;
 
@@ -249,13 +249,13 @@ public int recv_get_column_count() throws InvalidRequestException, TException
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_column_count failed: unknown result");
     }
 
-    public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int block_for) throws InvalidRequestException, UnavailableException, TException
+    public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int consistency_level) throws InvalidRequestException, UnavailableException, TException
     {
-      send_insert(table, key, column_path, value, timestamp, block_for);
+      send_insert(table, key, column_path, value, timestamp, consistency_level);
       recv_insert();
     }
 
-    public void send_insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int block_for) throws TException
+    public void send_insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("insert", TMessageType.CALL, seqid_));
       insert_args args = new insert_args();
@@ -264,7 +264,7 @@ public void send_insert(String table, String key, ColumnPath column_path, byte[]
       args.column_path = column_path;
       args.value = value;
       args.timestamp = timestamp;
-      args.block_for = block_for;
+      args.consistency_level = consistency_level;
       args.write(oprot_);
       oprot_.writeMessageEnd();
       oprot_.getTransport().flush();
@@ -290,19 +290,19 @@ public void recv_insert() throws InvalidRequestException, UnavailableException,
       return;
     }
 
-    public void batch_insert(String table, BatchMutation batch_mutation, int block_for) throws InvalidRequestException, UnavailableException, TException
+    public void batch_insert(String table, BatchMutation batch_mutation, int consistency_level) throws InvalidRequestException, UnavailableException, TException
     {
-      send_batch_insert(table, batch_mutation, block_for);
+      send_batch_insert(table, batch_mutation, consistency_level);
       recv_batch_insert();
     }
 
-    public void send_batch_insert(String table, BatchMutation batch_mutation, int block_for) throws TException
+    public void send_batch_insert(String table, BatchMutation batch_mutation, int consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("batch_insert", TMessageType.CALL, seqid_));
       batch_insert_args args = new batch_insert_args();
       args.table = table;
       args.batch_mutation = batch_mutation;
-      args.block_for = block_for;
+      args.consistency_level = consistency_level;
       args.write(oprot_);
       oprot_.writeMessageEnd();
       oprot_.getTransport().flush();
@@ -328,13 +328,13 @@ public void recv_batch_insert() throws InvalidRequestException, UnavailableExcep
       return;
     }
 
-    public void remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int block_for) throws InvalidRequestException, UnavailableException, TException
+    public void remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int consistency_level) throws InvalidRequestException, UnavailableException, TException
     {
-      send_remove(table, key, column_path_or_parent, timestamp, block_for);
+      send_remove(table, key, column_path_or_parent, timestamp, consistency_level);
       recv_remove();
     }
 
-    public void send_remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int block_for) throws TException
+    public void send_remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("remove", TMessageType.CALL, seqid_));
       remove_args args = new remove_args();
@@ -342,7 +342,7 @@ public void send_remove(String table, String key, ColumnPathOrParent column_path
       args.key = key;
       args.column_path_or_parent = column_path_or_parent;
       args.timestamp = timestamp;
-      args.block_for = block_for;
+      args.consistency_level = consistency_level;
       args.write(oprot_);
       oprot_.writeMessageEnd();
       oprot_.getTransport().flush();
@@ -490,19 +490,19 @@ public SuperColumn recv_get_super_column() throws InvalidRequestException, NotFo
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_super_column failed: unknown result");
     }
 
-    public void batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int block_for) throws InvalidRequestException, UnavailableException, TException
+    public void batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int consistency_level) throws InvalidRequestException, UnavailableException, TException
     {
-      send_batch_insert_super_column(table, batch_mutation_super, block_for);
+      send_batch_insert_super_column(table, batch_mutation_super, consistency_level);
       recv_batch_insert_super_column();
     }
 
-    public void send_batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int block_for) throws TException
+    public void send_batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("batch_insert_super_column", TMessageType.CALL, seqid_));
       batch_insert_super_column_args args = new batch_insert_super_column_args();
       args.table = table;
       args.batch_mutation_super = batch_mutation_super;
-      args.block_for = block_for;
+      args.consistency_level = consistency_level;
       args.write(oprot_);
       oprot_.writeMessageEnd();
       oprot_.getTransport().flush();
@@ -879,7 +879,7 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         insert_result result = new insert_result();
         try {
-          iface_.insert(args.table, args.key, args.column_path, args.value, args.timestamp, args.block_for);
+          iface_.insert(args.table, args.key, args.column_path, args.value, args.timestamp, args.consistency_level);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
         } catch (UnavailableException ue) {
@@ -909,7 +909,7 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         batch_insert_result result = new batch_insert_result();
         try {
-          iface_.batch_insert(args.table, args.batch_mutation, args.block_for);
+          iface_.batch_insert(args.table, args.batch_mutation, args.consistency_level);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
         } catch (UnavailableException ue) {
@@ -939,7 +939,7 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         remove_result result = new remove_result();
         try {
-          iface_.remove(args.table, args.key, args.column_path_or_parent, args.timestamp, args.block_for);
+          iface_.remove(args.table, args.key, args.column_path_or_parent, args.timestamp, args.consistency_level);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
         } catch (UnavailableException ue) {
@@ -1055,7 +1055,7 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         batch_insert_super_column_result result = new batch_insert_super_column_result();
         try {
-          iface_.batch_insert_super_column(args.table, args.batch_mutation_super, args.block_for);
+          iface_.batch_insert_super_column(args.table, args.batch_mutation_super, args.consistency_level);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
         } catch (UnavailableException ue) {
@@ -4396,7 +4396,7 @@ public void validate() throws TException {
     private static final TField COLUMN_PATH_FIELD_DESC = new TField("column_path", TType.STRUCT, (short)3);
     private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)4);
     private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)5);
-    private static final TField BLOCK_FOR_FIELD_DESC = new TField("block_for", TType.I32, (short)6);
+    private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)6);
 
     public String table;
     public static final int TABLE = 1;
@@ -4408,13 +4408,13 @@ public void validate() throws TException {
     public static final int VALUE = 4;
     public long timestamp;
     public static final int TIMESTAMP = 5;
-    public int block_for;
-    public static final int BLOCK_FOR = 6;
+    public int consistency_level;
+    public static final int CONSISTENCY_LEVEL = 6;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
       public boolean timestamp = false;
-      public boolean block_for = false;
+      public boolean consistency_level = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
@@ -4428,7 +4428,7 @@ public void validate() throws TException {
           new FieldValueMetaData(TType.STRING)));
       put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I64)));
-      put(BLOCK_FOR, new FieldMetaData("block_for", TFieldRequirementType.DEFAULT, 
+      put(CONSISTENCY_LEVEL, new FieldMetaData("consistency_level", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I32)));
     }});
 
@@ -4437,7 +4437,7 @@ public void validate() throws TException {
     }
 
     public insert_args() {
-      this.block_for = 0;
+      this.consistency_level = 0;
 
     }
 
@@ -4447,7 +4447,7 @@ public insert_args(
       ColumnPath column_path,
       byte[] value,
       long timestamp,
-      int block_for)
+      int consistency_level)
     {
       this();
       this.table = table;
@@ -4456,8 +4456,8 @@ public insert_args(
       this.value = value;
       this.timestamp = timestamp;
       this.__isset.timestamp = true;
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
     /**
@@ -4479,8 +4479,8 @@ public insert_args(insert_args other) {
       }
       __isset.timestamp = other.__isset.timestamp;
       this.timestamp = other.timestamp;
-      __isset.block_for = other.__isset.block_for;
-      this.block_for = other.block_for;
+      __isset.consistency_level = other.__isset.consistency_level;
+      this.consistency_level = other.consistency_level;
     }
 
     @Override
@@ -4602,26 +4602,26 @@ public void setTimestampIsSet(boolean value) {
       this.__isset.timestamp = value;
     }
 
-    public int getBlock_for() {
-      return this.block_for;
+    public int getConsistency_level() {
+      return this.consistency_level;
     }
 
-    public void setBlock_for(int block_for) {
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+    public void setConsistency_level(int consistency_level) {
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
-    public void unsetBlock_for() {
-      this.__isset.block_for = false;
+    public void unsetConsistency_level() {
+      this.__isset.consistency_level = false;
     }
 
-    // Returns true if field block_for is set (has been asigned a value) and false otherwise
-    public boolean isSetBlock_for() {
-      return this.__isset.block_for;
+    // Returns true if field consistency_level is set (has been asigned a value) and false otherwise
+    public boolean isSetConsistency_level() {
+      return this.__isset.consistency_level;
     }
 
-    public void setBlock_forIsSet(boolean value) {
-      this.__isset.block_for = value;
+    public void setConsistency_levelIsSet(boolean value) {
+      this.__isset.consistency_level = value;
     }
 
     public void setFieldValue(int fieldID, Object value) {
@@ -4666,11 +4666,11 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
-      case BLOCK_FOR:
+      case CONSISTENCY_LEVEL:
         if (value == null) {
-          unsetBlock_for();
+          unsetConsistency_level();
         } else {
-          setBlock_for((Integer)value);
+          setConsistency_level((Integer)value);
         }
         break;
 
@@ -4696,8 +4696,8 @@ public Object getFieldValue(int fieldID) {
       case TIMESTAMP:
         return new Long(getTimestamp());
 
-      case BLOCK_FOR:
-        return new Integer(getBlock_for());
+      case CONSISTENCY_LEVEL:
+        return getConsistency_level();
 
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
@@ -4717,8 +4717,8 @@ public boolean isSet(int fieldID) {
         return isSetValue();
       case TIMESTAMP:
         return isSetTimestamp();
-      case BLOCK_FOR:
-        return isSetBlock_for();
+      case CONSISTENCY_LEVEL:
+        return isSetConsistency_level();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -4782,12 +4782,12 @@ public boolean equals(insert_args that) {
           return false;
       }
 
-      boolean this_present_block_for = true;
-      boolean that_present_block_for = true;
-      if (this_present_block_for || that_present_block_for) {
-        if (!(this_present_block_for && that_present_block_for))
+      boolean this_present_consistency_level = true;
+      boolean that_present_consistency_level = true;
+      if (this_present_consistency_level || that_present_consistency_level) {
+        if (!(this_present_consistency_level && that_present_consistency_level))
           return false;
-        if (this.block_for != that.block_for)
+        if (this.consistency_level != that.consistency_level)
           return false;
       }
 
@@ -4847,10 +4847,10 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case BLOCK_FOR:
+          case CONSISTENCY_LEVEL:
             if (field.type == TType.I32) {
-              this.block_for = iprot.readI32();
-              this.__isset.block_for = true;
+              this.consistency_level = iprot.readI32();
+              this.__isset.consistency_level = true;
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -4895,8 +4895,8 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
       oprot.writeI64(this.timestamp);
       oprot.writeFieldEnd();
-      oprot.writeFieldBegin(BLOCK_FOR_FIELD_DESC);
-      oprot.writeI32(this.block_for);
+      oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
+      oprot.writeI32(this.consistency_level);
       oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -4948,8 +4948,16 @@ public String toString() {
       sb.append(this.timestamp);
       first = false;
       if (!first) sb.append(", ");
-      sb.append("block_for:");
-      sb.append(this.block_for);
+      sb.append("consistency_level:");
+      String consistency_level_name = ConsistencyLevel.VALUES_TO_NAMES.get(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(consistency_level_name);
+        sb.append(" (");
+      }
+      sb.append(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(")");
+      }
       first = false;
       sb.append(")");
       return sb.toString();
@@ -4958,6 +4966,9 @@ public String toString() {
     public void validate() throws TException {
       // check for required fields
       // check that fields of type enum have valid values
+      if (isSetConsistency_level() && !ConsistencyLevel.VALID_VALUES.contains(consistency_level)){
+        throw new TProtocolException("The field 'consistency_level' has been assigned the invalid value " + consistency_level);
+      }
     }
 
   }
@@ -5240,18 +5251,18 @@ public void validate() throws TException {
     private static final TStruct STRUCT_DESC = new TStruct("batch_insert_args");
     private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)1);
     private static final TField BATCH_MUTATION_FIELD_DESC = new TField("batch_mutation", TType.STRUCT, (short)2);
-    private static final TField BLOCK_FOR_FIELD_DESC = new TField("block_for", TType.I32, (short)3);
+    private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)3);
 
     public String table;
     public static final int TABLE = 1;
     public BatchMutation batch_mutation;
     public static final int BATCH_MUTATION = 2;
-    public int block_for;
-    public static final int BLOCK_FOR = 3;
+    public int consistency_level;
+    public static final int CONSISTENCY_LEVEL = 3;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
-      public boolean block_for = false;
+      public boolean consistency_level = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
@@ -5259,7 +5270,7 @@ public void validate() throws TException {
           new FieldValueMetaData(TType.STRING)));
       put(BATCH_MUTATION, new FieldMetaData("batch_mutation", TFieldRequirementType.DEFAULT, 
           new StructMetaData(TType.STRUCT, BatchMutation.class)));
-      put(BLOCK_FOR, new FieldMetaData("block_for", TFieldRequirementType.DEFAULT, 
+      put(CONSISTENCY_LEVEL, new FieldMetaData("consistency_level", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I32)));
     }});
 
@@ -5268,20 +5279,20 @@ public void validate() throws TException {
     }
 
     public batch_insert_args() {
-      this.block_for = 0;
+      this.consistency_level = 0;
 
     }
 
     public batch_insert_args(
       String table,
       BatchMutation batch_mutation,
-      int block_for)
+      int consistency_level)
     {
       this();
       this.table = table;
       this.batch_mutation = batch_mutation;
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
     /**
@@ -5294,8 +5305,8 @@ public batch_insert_args(batch_insert_args other) {
       if (other.isSetBatch_mutation()) {
         this.batch_mutation = new BatchMutation(other.batch_mutation);
       }
-      __isset.block_for = other.__isset.block_for;
-      this.block_for = other.block_for;
+      __isset.consistency_level = other.__isset.consistency_level;
+      this.consistency_level = other.consistency_level;
     }
 
     @Override
@@ -5349,26 +5360,26 @@ public void setBatch_mutationIsSet(boolean value) {
       }
     }
 
-    public int getBlock_for() {
-      return this.block_for;
+    public int getConsistency_level() {
+      return this.consistency_level;
     }
 
-    public void setBlock_for(int block_for) {
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+    public void setConsistency_level(int consistency_level) {
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
-    public void unsetBlock_for() {
-      this.__isset.block_for = false;
+    public void unsetConsistency_level() {
+      this.__isset.consistency_level = false;
     }
 
-    // Returns true if field block_for is set (has been asigned a value) and false otherwise
-    public boolean isSetBlock_for() {
-      return this.__isset.block_for;
+    // Returns true if field consistency_level is set (has been asigned a value) and false otherwise
+    public boolean isSetConsistency_level() {
+      return this.__isset.consistency_level;
     }
 
-    public void setBlock_forIsSet(boolean value) {
-      this.__isset.block_for = value;
+    public void setConsistency_levelIsSet(boolean value) {
+      this.__isset.consistency_level = value;
     }
 
     public void setFieldValue(int fieldID, Object value) {
@@ -5389,11 +5400,11 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
-      case BLOCK_FOR:
+      case CONSISTENCY_LEVEL:
         if (value == null) {
-          unsetBlock_for();
+          unsetConsistency_level();
         } else {
-          setBlock_for((Integer)value);
+          setConsistency_level((Integer)value);
         }
         break;
 
@@ -5410,8 +5421,8 @@ public Object getFieldValue(int fieldID) {
       case BATCH_MUTATION:
         return getBatch_mutation();
 
-      case BLOCK_FOR:
-        return new Integer(getBlock_for());
+      case CONSISTENCY_LEVEL:
+        return getConsistency_level();
 
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
@@ -5425,8 +5436,8 @@ public boolean isSet(int fieldID) {
         return isSetTable();
       case BATCH_MUTATION:
         return isSetBatch_mutation();
-      case BLOCK_FOR:
-        return isSetBlock_for();
+      case CONSISTENCY_LEVEL:
+        return isSetConsistency_level();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -5463,12 +5474,12 @@ public boolean equals(batch_insert_args that) {
           return false;
       }
 
-      boolean this_present_block_for = true;
-      boolean that_present_block_for = true;
-      if (this_present_block_for || that_present_block_for) {
-        if (!(this_present_block_for && that_present_block_for))
+      boolean this_present_consistency_level = true;
+      boolean that_present_consistency_level = true;
+      if (this_present_consistency_level || that_present_consistency_level) {
+        if (!(this_present_consistency_level && that_present_consistency_level))
           return false;
-        if (this.block_for != that.block_for)
+        if (this.consistency_level != that.consistency_level)
           return false;
       }
 
@@ -5506,10 +5517,10 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case BLOCK_FOR:
+          case CONSISTENCY_LEVEL:
             if (field.type == TType.I32) {
-              this.block_for = iprot.readI32();
-              this.__isset.block_for = true;
+              this.consistency_level = iprot.readI32();
+              this.__isset.consistency_level = true;
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -5541,8 +5552,8 @@ public void write(TProtocol oprot) throws TException {
         this.batch_mutation.write(oprot);
         oprot.writeFieldEnd();
       }
-      oprot.writeFieldBegin(BLOCK_FOR_FIELD_DESC);
-      oprot.writeI32(this.block_for);
+      oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
+      oprot.writeI32(this.consistency_level);
       oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -5569,8 +5580,16 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("block_for:");
-      sb.append(this.block_for);
+      sb.append("consistency_level:");
+      String consistency_level_name = ConsistencyLevel.VALUES_TO_NAMES.get(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(consistency_level_name);
+        sb.append(" (");
+      }
+      sb.append(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(")");
+      }
       first = false;
       sb.append(")");
       return sb.toString();
@@ -5579,6 +5598,9 @@ public String toString() {
     public void validate() throws TException {
       // check for required fields
       // check that fields of type enum have valid values
+      if (isSetConsistency_level() && !ConsistencyLevel.VALID_VALUES.contains(consistency_level)){
+        throw new TProtocolException("The field 'consistency_level' has been assigned the invalid value " + consistency_level);
+      }
     }
 
   }
@@ -5863,7 +5885,7 @@ public void validate() throws TException {
     private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)2);
     private static final TField COLUMN_PATH_OR_PARENT_FIELD_DESC = new TField("column_path_or_parent", TType.STRUCT, (short)3);
     private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)4);
-    private static final TField BLOCK_FOR_FIELD_DESC = new TField("block_for", TType.I32, (short)5);
+    private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)5);
 
     public String table;
     public static final int TABLE = 1;
@@ -5873,13 +5895,13 @@ public void validate() throws TException {
     public static final int COLUMN_PATH_OR_PARENT = 3;
     public long timestamp;
     public static final int TIMESTAMP = 4;
-    public int block_for;
-    public static final int BLOCK_FOR = 5;
+    public int consistency_level;
+    public static final int CONSISTENCY_LEVEL = 5;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
       public boolean timestamp = false;
-      public boolean block_for = false;
+      public boolean consistency_level = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
@@ -5891,7 +5913,7 @@ public void validate() throws TException {
           new StructMetaData(TType.STRUCT, ColumnPathOrParent.class)));
       put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I64)));
-      put(BLOCK_FOR, new FieldMetaData("block_for", TFieldRequirementType.DEFAULT, 
+      put(CONSISTENCY_LEVEL, new FieldMetaData("consistency_level", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I32)));
     }});
 
@@ -5900,7 +5922,7 @@ public void validate() throws TException {
     }
 
     public remove_args() {
-      this.block_for = 0;
+      this.consistency_level = 0;
 
     }
 
@@ -5909,7 +5931,7 @@ public remove_args(
       String key,
       ColumnPathOrParent column_path_or_parent,
       long timestamp,
-      int block_for)
+      int consistency_level)
     {
       this();
       this.table = table;
@@ -5917,8 +5939,8 @@ public remove_args(
       this.column_path_or_parent = column_path_or_parent;
       this.timestamp = timestamp;
       this.__isset.timestamp = true;
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
     /**
@@ -5936,8 +5958,8 @@ public remove_args(remove_args other) {
       }
       __isset.timestamp = other.__isset.timestamp;
       this.timestamp = other.timestamp;
-      __isset.block_for = other.__isset.block_for;
-      this.block_for = other.block_for;
+      __isset.consistency_level = other.__isset.consistency_level;
+      this.consistency_level = other.consistency_level;
     }
 
     @Override
@@ -6036,26 +6058,26 @@ public void setTimestampIsSet(boolean value) {
       this.__isset.timestamp = value;
     }
 
-    public int getBlock_for() {
-      return this.block_for;
+    public int getConsistency_level() {
+      return this.consistency_level;
     }
 
-    public void setBlock_for(int block_for) {
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+    public void setConsistency_level(int consistency_level) {
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
-    public void unsetBlock_for() {
-      this.__isset.block_for = false;
+    public void unsetConsistency_level() {
+      this.__isset.consistency_level = false;
     }
 
-    // Returns true if field block_for is set (has been asigned a value) and false otherwise
-    public boolean isSetBlock_for() {
-      return this.__isset.block_for;
+    // Returns true if field consistency_level is set (has been asigned a value) and false otherwise
+    public boolean isSetConsistency_level() {
+      return this.__isset.consistency_level;
     }
 
-    public void setBlock_forIsSet(boolean value) {
-      this.__isset.block_for = value;
+    public void setConsistency_levelIsSet(boolean value) {
+      this.__isset.consistency_level = value;
     }
 
     public void setFieldValue(int fieldID, Object value) {
@@ -6092,11 +6114,11 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
-      case BLOCK_FOR:
+      case CONSISTENCY_LEVEL:
         if (value == null) {
-          unsetBlock_for();
+          unsetConsistency_level();
         } else {
-          setBlock_for((Integer)value);
+          setConsistency_level((Integer)value);
         }
         break;
 
@@ -6119,8 +6141,8 @@ public Object getFieldValue(int fieldID) {
       case TIMESTAMP:
         return new Long(getTimestamp());
 
-      case BLOCK_FOR:
-        return new Integer(getBlock_for());
+      case CONSISTENCY_LEVEL:
+        return getConsistency_level();
 
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
@@ -6138,8 +6160,8 @@ public boolean isSet(int fieldID) {
         return isSetColumn_path_or_parent();
       case TIMESTAMP:
         return isSetTimestamp();
-      case BLOCK_FOR:
-        return isSetBlock_for();
+      case CONSISTENCY_LEVEL:
+        return isSetConsistency_level();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -6194,12 +6216,12 @@ public boolean equals(remove_args that) {
           return false;
       }
 
-      boolean this_present_block_for = true;
-      boolean that_present_block_for = true;
-      if (this_present_block_for || that_present_block_for) {
-        if (!(this_present_block_for && that_present_block_for))
+      boolean this_present_consistency_level = true;
+      boolean that_present_consistency_level = true;
+      if (this_present_consistency_level || that_present_consistency_level) {
+        if (!(this_present_consistency_level && that_present_consistency_level))
           return false;
-        if (this.block_for != that.block_for)
+        if (this.consistency_level != that.consistency_level)
           return false;
       }
 
@@ -6252,10 +6274,10 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case BLOCK_FOR:
+          case CONSISTENCY_LEVEL:
             if (field.type == TType.I32) {
-              this.block_for = iprot.readI32();
-              this.__isset.block_for = true;
+              this.consistency_level = iprot.readI32();
+              this.__isset.consistency_level = true;
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -6295,8 +6317,8 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
       oprot.writeI64(this.timestamp);
       oprot.writeFieldEnd();
-      oprot.writeFieldBegin(BLOCK_FOR_FIELD_DESC);
-      oprot.writeI32(this.block_for);
+      oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
+      oprot.writeI32(this.consistency_level);
       oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -6335,8 +6357,16 @@ public String toString() {
       sb.append(this.timestamp);
       first = false;
       if (!first) sb.append(", ");
-      sb.append("block_for:");
-      sb.append(this.block_for);
+      sb.append("consistency_level:");
+      String consistency_level_name = ConsistencyLevel.VALUES_TO_NAMES.get(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(consistency_level_name);
+        sb.append(" (");
+      }
+      sb.append(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(")");
+      }
       first = false;
       sb.append(")");
       return sb.toString();
@@ -6345,6 +6375,9 @@ public String toString() {
     public void validate() throws TException {
       // check for required fields
       // check that fields of type enum have valid values
+      if (isSetConsistency_level() && !ConsistencyLevel.VALID_VALUES.contains(consistency_level)){
+        throw new TProtocolException("The field 'consistency_level' has been assigned the invalid value " + consistency_level);
+      }
     }
 
   }
@@ -9061,18 +9094,18 @@ public void validate() throws TException {
     private static final TStruct STRUCT_DESC = new TStruct("batch_insert_super_column_args");
     private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)1);
     private static final TField BATCH_MUTATION_SUPER_FIELD_DESC = new TField("batch_mutation_super", TType.STRUCT, (short)2);
-    private static final TField BLOCK_FOR_FIELD_DESC = new TField("block_for", TType.I32, (short)3);
+    private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)3);
 
     public String table;
     public static final int TABLE = 1;
     public BatchMutationSuper batch_mutation_super;
     public static final int BATCH_MUTATION_SUPER = 2;
-    public int block_for;
-    public static final int BLOCK_FOR = 3;
+    public int consistency_level;
+    public static final int CONSISTENCY_LEVEL = 3;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
-      public boolean block_for = false;
+      public boolean consistency_level = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
@@ -9080,7 +9113,7 @@ public void validate() throws TException {
           new FieldValueMetaData(TType.STRING)));
       put(BATCH_MUTATION_SUPER, new FieldMetaData("batch_mutation_super", TFieldRequirementType.DEFAULT, 
           new StructMetaData(TType.STRUCT, BatchMutationSuper.class)));
-      put(BLOCK_FOR, new FieldMetaData("block_for", TFieldRequirementType.DEFAULT, 
+      put(CONSISTENCY_LEVEL, new FieldMetaData("consistency_level", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I32)));
     }});
 
@@ -9089,20 +9122,20 @@ public void validate() throws TException {
     }
 
     public batch_insert_super_column_args() {
-      this.block_for = 0;
+      this.consistency_level = 0;
 
     }
 
     public batch_insert_super_column_args(
       String table,
       BatchMutationSuper batch_mutation_super,
-      int block_for)
+      int consistency_level)
     {
       this();
       this.table = table;
       this.batch_mutation_super = batch_mutation_super;
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
     /**
@@ -9115,8 +9148,8 @@ public batch_insert_super_column_args(batch_insert_super_column_args other) {
       if (other.isSetBatch_mutation_super()) {
         this.batch_mutation_super = new BatchMutationSuper(other.batch_mutation_super);
       }
-      __isset.block_for = other.__isset.block_for;
-      this.block_for = other.block_for;
+      __isset.consistency_level = other.__isset.consistency_level;
+      this.consistency_level = other.consistency_level;
     }
 
     @Override
@@ -9170,26 +9203,26 @@ public void setBatch_mutation_superIsSet(boolean value) {
       }
     }
 
-    public int getBlock_for() {
-      return this.block_for;
+    public int getConsistency_level() {
+      return this.consistency_level;
     }
 
-    public void setBlock_for(int block_for) {
-      this.block_for = block_for;
-      this.__isset.block_for = true;
+    public void setConsistency_level(int consistency_level) {
+      this.consistency_level = consistency_level;
+      this.__isset.consistency_level = true;
     }
 
-    public void unsetBlock_for() {
-      this.__isset.block_for = false;
+    public void unsetConsistency_level() {
+      this.__isset.consistency_level = false;
     }
 
-    // Returns true if field block_for is set (has been asigned a value) and false otherwise
-    public boolean isSetBlock_for() {
-      return this.__isset.block_for;
+    // Returns true if field consistency_level is set (has been asigned a value) and false otherwise
+    public boolean isSetConsistency_level() {
+      return this.__isset.consistency_level;
     }
 
-    public void setBlock_forIsSet(boolean value) {
-      this.__isset.block_for = value;
+    public void setConsistency_levelIsSet(boolean value) {
+      this.__isset.consistency_level = value;
     }
 
     public void setFieldValue(int fieldID, Object value) {
@@ -9210,11 +9243,11 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
-      case BLOCK_FOR:
+      case CONSISTENCY_LEVEL:
         if (value == null) {
-          unsetBlock_for();
+          unsetConsistency_level();
         } else {
-          setBlock_for((Integer)value);
+          setConsistency_level((Integer)value);
         }
         break;
 
@@ -9231,8 +9264,8 @@ public Object getFieldValue(int fieldID) {
       case BATCH_MUTATION_SUPER:
         return getBatch_mutation_super();
 
-      case BLOCK_FOR:
-        return new Integer(getBlock_for());
+      case CONSISTENCY_LEVEL:
+        return getConsistency_level();
 
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
@@ -9246,8 +9279,8 @@ public boolean isSet(int fieldID) {
         return isSetTable();
       case BATCH_MUTATION_SUPER:
         return isSetBatch_mutation_super();
-      case BLOCK_FOR:
-        return isSetBlock_for();
+      case CONSISTENCY_LEVEL:
+        return isSetConsistency_level();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -9284,12 +9317,12 @@ public boolean equals(batch_insert_super_column_args that) {
           return false;
       }
 
-      boolean this_present_block_for = true;
-      boolean that_present_block_for = true;
-      if (this_present_block_for || that_present_block_for) {
-        if (!(this_present_block_for && that_present_block_for))
+      boolean this_present_consistency_level = true;
+      boolean that_present_consistency_level = true;
+      if (this_present_consistency_level || that_present_consistency_level) {
+        if (!(this_present_consistency_level && that_present_consistency_level))
           return false;
-        if (this.block_for != that.block_for)
+        if (this.consistency_level != that.consistency_level)
           return false;
       }
 
@@ -9327,10 +9360,10 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case BLOCK_FOR:
+          case CONSISTENCY_LEVEL:
             if (field.type == TType.I32) {
-              this.block_for = iprot.readI32();
-              this.__isset.block_for = true;
+              this.consistency_level = iprot.readI32();
+              this.__isset.consistency_level = true;
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -9362,8 +9395,8 @@ public void write(TProtocol oprot) throws TException {
         this.batch_mutation_super.write(oprot);
         oprot.writeFieldEnd();
       }
-      oprot.writeFieldBegin(BLOCK_FOR_FIELD_DESC);
-      oprot.writeI32(this.block_for);
+      oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
+      oprot.writeI32(this.consistency_level);
       oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -9390,8 +9423,16 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("block_for:");
-      sb.append(this.block_for);
+      sb.append("consistency_level:");
+      String consistency_level_name = ConsistencyLevel.VALUES_TO_NAMES.get(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(consistency_level_name);
+        sb.append(" (");
+      }
+      sb.append(this.consistency_level);
+      if (consistency_level_name != null) {
+        sb.append(")");
+      }
       first = false;
       sb.append(")");
       return sb.toString();
@@ -9400,6 +9441,9 @@ public String toString() {
     public void validate() throws TException {
       // check for required fields
       // check that fields of type enum have valid values
+      if (isSetConsistency_level() && !ConsistencyLevel.VALID_VALUES.contains(consistency_level)){
+        throw new TProtocolException("The field 'consistency_level' has been assigned the invalid value " + consistency_level);
+      }
     }
 
   }
diff --git a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/ConsistencyLevel.java b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/ConsistencyLevel.java
index e69de29b..0ce14bd3 100644
--- a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/ConsistencyLevel.java
+++ b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/ConsistencyLevel.java
@@ -0,0 +1,29 @@
+/**
+ * Autogenerated by Thrift
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ */
+package org.apache.cassandra.service;
+
+
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Collections;
+import org.apache.thrift.IntRangeSet;
+import java.util.Map;
+import java.util.HashMap;
+
+public class ConsistencyLevel {
+  public static final int ZERO = 0;
+  public static final int ONE = 1;
+  public static final int QUORUM = 2;
+  public static final int ALL = 3;
+
+  public static final IntRangeSet VALID_VALUES = new IntRangeSet(ZERO, ONE, QUORUM, ALL);
+  public static final Map<Integer, String> VALUES_TO_NAMES = new HashMap<Integer, String>() {{
+    put(ZERO, "ZERO");
+    put(ONE, "ONE");
+    put(QUORUM, "QUORUM");
+    put(ALL, "ALL");
+  }};
+}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index ef393958..492003d0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -197,7 +197,7 @@ private void executeSet(CommonTree ast) throws TException, InvalidRequestExcepti
             try
             {
                 thriftClient_.insert(tableName, key, new ColumnPath(columnFamily, null, columnName.getBytes("UTF-8")),
-                                     value.getBytes(), System.currentTimeMillis(), 1);
+                                 value.getBytes(), System.currentTimeMillis(), ConsistencyLevel.ONE);
             }
             catch (UnsupportedEncodingException e)
             {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 8f050098..90d113b1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -35,6 +35,7 @@
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.db.filter.QueryPath;
+import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.LogUtil;
 import org.apache.cassandra.dht.OrderPreservingPartitioner;
 import org.apache.thrift.TException;
@@ -248,7 +249,7 @@ public int get_column_count(String table, String key, ColumnParent column_parent
         return columns.size();
 	}
 
-    public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int block_for)
+    public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
         logger.debug("insert");
@@ -264,10 +265,10 @@ public void insert(String table, String key, ColumnPath column_path, byte[] valu
         {
             throw new InvalidRequestException(e.getMessage());
         }
-        doInsert(block_for, rm);
+        doInsert(consistency_level, rm);
     }
 
-    public void batch_insert(String table, BatchMutation batch_mutation, int block_for)
+    public void batch_insert(String table, BatchMutation batch_mutation, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
         logger.debug("batch_insert");
@@ -275,10 +276,10 @@ public void batch_insert(String table, BatchMutation batch_mutation, int block_f
         Set<String> cfNames = rm.columnFamilyNames();
         ThriftValidation.validateKeyCommand(rm.key(), rm.table(), cfNames.toArray(new String[cfNames.size()]));
 
-        doInsert(block_for, rm);
+        doInsert(consistency_level, rm);
     }
 
-    public void remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int block_for)
+    public void remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
         logger.debug("remove");
@@ -287,14 +288,14 @@ public void remove(String table, String key, ColumnPathOrParent column_path_or_p
         RowMutation rm = new RowMutation(table, key.trim());
         rm.delete(new QueryPath(column_path_or_parent), timestamp);
 
-        doInsert(block_for, rm);
+        doInsert(consistency_level, rm);
 	}
 
-    private void doInsert(int block, RowMutation rm) throws UnavailableException
+    private void doInsert(int consistency_level, RowMutation rm) throws UnavailableException
     {
-        if (block > 0)
+        if (consistency_level != ConsistencyLevel.ZERO)
         {
-            StorageProxy.insertBlocking(rm,block);
+            StorageProxy.insertBlocking(rm, consistency_level);
         }
         else
         {
@@ -391,7 +392,7 @@ public SuperColumn get_super_column(String table, String key, SuperColumnPath su
         return new SuperColumn(column.name(), thriftifyColumns(column.getSubColumns()));
     }
 
-    public void batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int block_for)
+    public void batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
         logger.debug("batch_insert_SuperColumn");
@@ -399,7 +400,7 @@ public void batch_insert_super_column(String table, BatchMutationSuper batch_mut
         Set<String> cfNames = rm.columnFamilyNames();
         ThriftValidation.validateKeyCommand(rm.key(), rm.table(), cfNames.toArray(new String[cfNames.size()]));
 
-        doInsert(block_for, rm);
+        doInsert(consistency_level, rm);
     }
 
     public String get_string_property(String propertyName)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index db238500..b261c181 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -150,7 +150,7 @@ public static void insert(RowMutation rm)
         }
     }
     
-    public static void insertBlocking(RowMutation rm, int blockFor) throws UnavailableException
+    public static void insertBlocking(RowMutation rm, int consistency_level) throws UnavailableException
     {
         long startTime = System.currentTimeMillis();
         Message message = null;
@@ -169,6 +169,23 @@ public static void insertBlocking(RowMutation rm, int blockFor) throws Unavailab
             {
                 throw new UnavailableException();
             }
+            int blockFor;
+            if (consistency_level == ConsistencyLevel.ONE)
+            {
+                blockFor = 1;
+            }
+            else if (consistency_level == ConsistencyLevel.QUORUM)
+            {
+                blockFor = (DatabaseDescriptor.getReplicationFactor() >> 1) + 1;
+            }
+            else if (consistency_level == ConsistencyLevel.ALL)
+            {
+                blockFor = DatabaseDescriptor.getReplicationFactor();
+            }
+            else
+            {
+                throw new UnsupportedOperationException("invalid consistency level " + consistency_level);
+            }
             QuorumResponseHandler<Boolean> quorumResponseHandler = new QuorumResponseHandler<Boolean>(blockFor, new WriteResponseResolver());
             logger.debug("insertBlocking writing key " + rm.key() + " to " + message.getMessageId() + "@[" + StringUtils.join(endpoints, ", ") + "]");
 
@@ -189,7 +206,7 @@ public static void insertBlocking(RowMutation rm, int blockFor) throws Unavailab
 
     public static void insertBlocking(RowMutation rm) throws UnavailableException
     {
-        insertBlocking(rm, (DatabaseDescriptor.getReplicationFactor() >> 1) + 1);
+        insertBlocking(rm, ConsistencyLevel.QUORUM);
     }
     
     private static Map<String, Message> constructMessages(Map<String, ReadCommand> readMessages) throws IOException
