diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.java b/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.java
index 5a0f476f..f55e6d68 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.java
@@ -48,37 +48,36 @@
   private final static long ALIGN = 512;
   private final static long ALIGN_NOT_MASK = ~(ALIGN-1);
 
+  private final int forcedBufferSize;
+
   /** Create a new NIOFSDirectory for the named location.
    * 
    * @param path the path of the directory
    * @param lockFactory the lock factory to use, or null for the default
    * ({@link NativeFSLockFactory});
+   * @param forcedBufferSize if this is 0, just use Lucene's
+   *    default buffer size; else, force this buffer size.
+   *    For best performance, force the buffer size to
+   *    something fairly large (eg 1 MB), but note that this
+   *    will eat up the JRE's direct buffer storage space
    * @throws IOException
    */
-  public DirectIOLinuxDirectory(File path, LockFactory lockFactory) throws IOException {
+  public DirectIOLinuxDirectory(File path, LockFactory lockFactory, int forcedBufferSize) throws IOException {
     super(path, lockFactory);
-  }
-
-  /** Create a new NIOFSDirectory for the named location and {@link NativeFSLockFactory}.
-   *
-   * @param path the path of the directory
-   * @throws IOException
-   */
-  public DirectIOLinuxDirectory(File path) throws IOException {
-    super(path, null);
+    this.forcedBufferSize = forcedBufferSize;
   }
 
   @Override
   public IndexInput openInput(String name, int bufferSize) throws IOException {
     ensureOpen();
-    return new DirectIOLinuxIndexInput(new File(getDirectory(), name), bufferSize);
+    return new DirectIOLinuxIndexInput(new File(getDirectory(), name), forcedBufferSize == 0 ? bufferSize : forcedBufferSize);
   }
 
   @Override
   public IndexOutput createOutput(String name) throws IOException {
     ensureOpen();
     ensureCanWrite(name);
-    return new DirectIOLinuxIndexOutput(new File(getDirectory(), name), 4096);
+    return new DirectIOLinuxIndexOutput(new File(getDirectory(), name), forcedBufferSize == 0 ? BufferedIndexOutput.BUFFER_SIZE : forcedBufferSize);
   }
 
   private final static class DirectIOLinuxIndexOutput extends IndexOutput {
