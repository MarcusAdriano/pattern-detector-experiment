diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
index 3a678014..671735a2 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
@@ -51,6 +51,16 @@
 
   private boolean waitOnSolr = false;
 
+  private int lastPort;
+
+  private String shards;
+
+  private String dataDir;
+  
+  private volatile boolean startedBefore = false;
+
+  private String solrHome;
+
   public JettySolrRunner(String solrHome, String context, int port) {
     this.init(solrHome, context, port);
   }
@@ -63,6 +73,7 @@ public JettySolrRunner(String solrHome, String context, int port, String solrCon
   private void init(String solrHome, String context, int port) {
     this.context = context;
     server = new Server(port);
+    this.solrHome = solrHome;
     server.setStopAtShutdown(true);
     System.setProperty("solr.solr.home", solrHome);
     if (System.getProperty("jetty.testMode") != null) {
@@ -93,15 +104,17 @@ public void lifeCycleStarting(LifeCycle arg0) {
       }
 
       public void lifeCycleStarted(LifeCycle arg0) {
-        System.setProperty("hostPort", Integer.toString(getLocalPort()));
-        if (solrConfigFilename != null)
-          System.setProperty("solrconfig", solrConfigFilename);
+        lastPort = getLocalPort();
+        System.out.println("start on port:" + lastPort);
+        System.setProperty("hostPort", Integer.toString(lastPort));
+        if (solrConfigFilename != null) System.setProperty("solrconfig",
+            solrConfigFilename);
         dispatchFilter = root.addFilter(SolrDispatchFilter.class, "*",
             Handler.REQUEST);
-        if (solrConfigFilename != null)
-          System.clearProperty("solrconfig");
+        if (solrConfigFilename != null) System.clearProperty("solrconfig");
 
         System.clearProperty("solr.solr.home");
+        
       }
 
       public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {
@@ -122,6 +135,20 @@ public void start() throws Exception {
   }
 
   public void start(boolean waitForSolr) throws Exception {
+    // if started before, make a new server
+    if (startedBefore) {
+      init(solrHome, context, lastPort);
+    } else {
+      startedBefore = true;
+    }
+    
+    if( dataDir != null) {
+      System.setProperty("solr.data.dir", dataDir);
+    }
+    if(shards != null) {
+      System.setProperty("shard", shards);
+    }
+    
     if (!server.isRunning()) {
       server.start();
     }
@@ -134,6 +161,9 @@ public void start(boolean waitForSolr) throws Exception {
         }
       }
     }
+    
+    System.clearProperty("shard");
+    System.clearProperty("solr.data.dir");
   }
 
   public void stop() throws Exception {
@@ -181,6 +211,16 @@ public static void main(String[] args) {
       ex.printStackTrace();
     }
   }
+
+  public void setShards(String shardList) {
+     this.shards = shardList;
+    
+  }
+
+  public void setDataDir(String dataDir) {
+    this.dataDir = dataDir;
+    
+  }
 }
 
 class NoLog implements Logger {
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index a99a9769..c2daf729 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -21,11 +21,14 @@
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.net.InetAddress;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.Set;
 import java.util.concurrent.TimeoutException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -485,17 +488,36 @@ ZkNodeProps addToZk(final CloudDescriptor cloudDesc, String shardUrl,
 						+ stat.getVersion());
 				CloudState state = CloudState.load(data);
 				Map<String,Slice> slices = state.getSlices(cloudDesc.getCollectionName());
-				if (slices != null && slices.containsKey(shardZkNodeName)) {
+        
+				boolean recover = false;
+        if (slices != null) {
+			    Set<String> nodes = new HashSet<String>();
+		
+			    for (Slice s : slices.values()) {
+			      System.out.println("add slice: "+ s.getName());
+			      for (String node : s.getShards().keySet()) {
+			        System.out.println("add node: "+ node);
+			        nodes.add(node);
+			      }
+			    }
+			    System.out.println("print recovery:" + nodes + " name: " + shardZkNodeName);
+          if (nodes.contains(shardZkNodeName)) {
 				  // TODO: we where already registered - go into recovery mode
 				  System.out.println("RECOVERY");
+            recover = true;
+				}
 				}
-				
+				// we need a new copy to modify
+        state = new CloudState(state.getLiveNodes(), state.getCollectionStates());
 				state.addSlice(cloudDesc.getCollectionName(), slice);
 
 				try {
 					zkClient.setData(ZkStateReader.CLUSTER_STATE,
 							CloudState.store(state), stat.getVersion());
 					updated = true;
+					if (recover) {
+					  System.out.println("do recovery");
+					}
 				} catch (KeeperException e) {
 					if (e.code() != Code.BADVERSION) {
 						throw e;
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
index 988102bd..a73bb977 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
@@ -463,9 +463,15 @@ public void doTest() throws Exception {
     // query("q","matchesnothing","fl","*,score", "debugQuery", "true");
 
     // this should trigger a recovery phase on deadShard
+
     deadShard.start(true);
     
     
+    // kill the other shard3 replica
+    JettySolrRunner deadShard3 = killShard("shard3", 0);
+    
+    // should fail
+    //query("q", "id:[1 TO 5]", CommonParams.DEBUG, CommonParams.QUERY);
     
     // Thread.sleep(10000000000L);
     if (DEBUG) {
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java
index b053feab..d2aedd34 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java
@@ -61,7 +61,8 @@ public CloudState() {
 	public CloudState(Set<String> liveNodes,
 			Map<String, Map<String, Slice>> collectionStates) {
 		this.liveNodes = liveNodes;
-		this.collectionStates = collectionStates;
+		this.collectionStates = new HashMap<String, Map<String, Slice>>(collectionStates.size());
+		this.collectionStates.putAll(collectionStates);
 	}
 
 	public Slice getSlice(String collection, String slice) {
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/Slice.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/Slice.java
index ccfa9b13..a51da33b 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/Slice.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/Slice.java
@@ -38,4 +38,10 @@ public Slice(String name, Map<String,ZkNodeProps> shards) {
   public String getName() {
     return name;
   }
+
+  @Override
+  public String toString() {
+    return "Slice [shards=" + shards + ", name=" + name + "]";
+  }
+
 }
diff --git a/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java b/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
index 0bf70aed..52cd9191 100644
--- a/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -238,14 +238,12 @@ public JettySolrRunner createJetty(File baseDir, String dataDir, String shardId)
   }
   
   public JettySolrRunner createJetty(File baseDir, String dataDir, String shardList, String solrConfigOverride) throws Exception {
-    System.setProperty("solr.data.dir", dataDir);
-    if(shardList != null) {
-      System.setProperty("shard", shardList);
-    }
-    JettySolrRunner jetty = new JettySolrRunner(getSolrHome(), "/solr", 0, solrConfigOverride);
 
+    JettySolrRunner jetty = new JettySolrRunner(getSolrHome(), "/solr", 0, solrConfigOverride);
+    jetty.setShards(shardList);
+    jetty.setDataDir(dataDir);
     jetty.start();
-    System.clearProperty("shard");
+
     return jetty;
   }
   
