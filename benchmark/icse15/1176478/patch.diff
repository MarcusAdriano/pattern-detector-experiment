diff --git a/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager.java b/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager.java
index 7385fa66..077db75d 100644
--- a/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager.java
+++ b/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager.java
@@ -309,17 +309,28 @@ public boolean reopen(boolean applyDeletes) throws IOException {
     final IndexSearcher startSearcher = noDeletesSearchingGen.get() > searchingGen.get() ? noDeletesCurrentSearcher : currentSearcher;
     final IndexReader nextReader = startSearcher.getIndexReader().reopen(writer, applyDeletes);
 
+    if (nextReader != startSearcher.getIndexReader()) {
     final IndexSearcher nextSearcher = new IndexSearcher(nextReader, es);
     if (warmer != null) {
+        boolean success = false;
+        try {
       warmer.warm(nextSearcher);
+          success = true;
+        } finally {
+          if (!success) {
+            nextReader.decRef();
+          }
+        }
     }
 
     // Transfer reference to swapSearcher:
     swapSearcher(nextSearcher,
                  newSearcherGen,
                  applyDeletes);
-
     return true;
+    } else {
+      return false;
+    }
   }
 
   // Steals a reference from newSearcher:
diff --git a/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager.java b/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager.java
index 5bdd28ee..9049e9a5 100644
--- a/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager.java
+++ b/lucene/dev/trunk/lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager.java
@@ -142,7 +142,15 @@ public boolean maybeReopen()
         if (newReader != currentSearcher.getIndexReader()) {
           IndexSearcher newSearcher = new IndexSearcher(newReader, es);
           if (warmer != null) {
+            boolean success = false;
+            try {
             warmer.warm(newSearcher);
+              success = true;
+            } finally {
+              if (!success) {
+                newReader.decRef();
+              }
+            }
           }
           swapSearcher(newSearcher);
           return true;
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
index 5cd79b1b..58135319 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -752,17 +752,18 @@ public SearcherCallableNoSort(Lock lock, IndexSearcher searcher, LeafSlice slice
     public TopDocs call() throws IOException {
       final TopDocs docs = searcher.search (slice.leaves, weight, filter, after, nDocs);
       final ScoreDoc[] scoreDocs = docs.scoreDocs;
+      lock.lock();
+      try {
       for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq
         final ScoreDoc scoreDoc = scoreDocs[j];
         //it would be so nice if we had a thread-safe insert 
-        lock.lock();
-        try {
-          if (scoreDoc == hq.insertWithOverflow(scoreDoc))
+          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {
             break;
+          }
+        }
         } finally {
           lock.unlock();
         }
-      }
       return docs;
     }
   }
diff --git a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
index 984ef364..4c5d3a87 100644
--- a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
+++ b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
@@ -616,17 +616,22 @@ public void warm(IndexReader reader) throws IOException {
     assertEquals("index=" + writer.segString() + " addCount=" + addCount + " delCount=" + delCount, addCount.get() - delCount.get(), s.getIndexReader().numDocs());
     releaseSearcher(s);
 
-    if (es != null) {
-      es.shutdown();
-      es.awaitTermination(1, TimeUnit.SECONDS);
-    }
-
     writer.commit();
+
     assertEquals("index=" + writer.segString() + " addCount=" + addCount + " delCount=" + delCount, addCount.get() - delCount.get(), writer.numDocs());
 
     assertFalse(writer.anyNonBulkMerges);
     doClose();
     writer.close(false);
+
+    // Cannot shutdown until after writer is closed because
+    // writer has merged segment warmer that uses IS to run
+    // searches, and that IS may be using this es!
+    if (es != null) {
+      es.shutdown();
+      es.awaitTermination(1, TimeUnit.SECONDS);
+    }
+
     _TestUtil.checkIndex(dir);
     dir.close();
     _TestUtil.rmDir(tempDir);
