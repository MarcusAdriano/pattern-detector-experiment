diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/LocalitySensitiveHashSearch.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/LocalitySensitiveHashSearch.java
index a95d3d60..cd69b0b3 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/LocalitySensitiveHashSearch.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/LocalitySensitiveHashSearch.java
@@ -188,12 +188,15 @@ private void initialize(int numDimensions) {
   @Override
   public List<WeightedThing<Vector>> search(Vector query, int limit) {
     PriorityQueue<WeightedThing<Vector>> top = searchInternal(query);
-    List<WeightedThing<Vector>> results = Lists.newArrayListWithExpectedSize(limit);
-    while (limit > 0 && top.size() != 0) {
+    List<WeightedThing<Vector>> results = Lists.newArrayListWithExpectedSize(top.size());
+    while (top.size() != 0) {
       WeightedThing<Vector> wv = top.pop();
       results.add(new WeightedThing<Vector>(((HashedVector) wv.getValue()).getVector(), wv.getWeight()));
     }
     Collections.reverse(results);
+    if (limit < results.size()) {
+      results = results.subList(0, limit);
+    }
     return results;
   }
 
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java
index 7d889dcc..0e8edb27 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java
@@ -17,6 +17,8 @@
 
 package org.apache.mahout.math.neighborhood;
 
+import static org.hamcrest.Matchers.*;
+
 import java.util.Arrays;
 import java.util.List;
 
@@ -207,6 +209,17 @@ public void testSearchFirst() {
     }
   }
 
+  @Test
+  public void testSearchLimiting() {
+    searcher.clear();
+    searcher.addAll(dataPoints);
+    for (Vector datapoint : dataPoints) {
+      List<WeightedThing<Vector>> firstTwo = searcher.search(datapoint, 2);
+
+      assertThat("Search limit isn't respected", firstTwo.size(), is(lessThanOrEqualTo(2)));
+    }
+  }
+
   @Test
   public void testRemove() {
     searcher.clear();
