diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index e58037d4..cef24a75 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -1872,6 +1872,16 @@ public void addDescriptorArray(TupleDescriptor[] tuple, TupleDescriptor parent,
 	*/
 	public boolean checkVersion(int majorVersion, String feature) throws StandardException;
 	
+    /**
+     * Check if the database is read only and requires some form of upgrade
+     * that makes the stored prepared statements invalid.
+     *
+     * @return {@code true} if the stored prepared statements are invalid
+     * because of an upgrade and the database is read only, {@code false}
+     * otherwise
+     */
+    public boolean isReadOnlyUpgrade();
+	
     /**
      * Add or remove a permission to the permission database.
      *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
index 34d488a6..72eb18fe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
@@ -393,7 +393,7 @@ public final synchronized void prepareAndRelease(LanguageConnectionContext lcc)
 		setCompileTime();
 		setParams(preparedStatement.getParameterTypes());
 
-		if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade) {
+		if (!dd.isReadOnlyUpgrade()) {
 
 			/*
 			** Indicate that we are going to write the data
@@ -689,7 +689,7 @@ public final synchronized ExecPreparedStatement getPreparedStatement(boolean rec
 			
 
 
-			if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) (lcc.getDataDictionary())).readOnlyUpgrade) {
+			if (!lcc.getDataDictionary().isReadOnlyUpgrade()) {
 
 				//bug 4821 - First try compiling on a nested transaction so we can release
 				//the locks after the compilation. But if we get lock time out on the
@@ -1100,7 +1100,7 @@ private void updateSYSSTATEMENTS(LanguageConnectionContext lcc, int mode, Transa
 
 		DataDictionary dd = getDataDictionary();
 
-		if (((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade)
+		if (dd.isReadOnlyUpgrade())
 			return;
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
index e7bea538..903ef958 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
@@ -555,7 +555,7 @@ private void handleMinorRevisionChange(TransactionController tc, DD_Version from
 			// invalidate all the procedures we need to indicate that
 			// any procedure we read off disk is automatically invalid,
 			// so we do not try to load the generated class.
-			bootingDictionary.readOnlyUpgrade = true;
+			bootingDictionary.setReadOnlyUpgrade();
 		}
 
 		bootingDictionary.clearCaches();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index ccbac3c2..5204d4b9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -428,7 +428,8 @@ and a different point release (later than 5.1.25?)
 		that created it.
 
 	*/
-	public boolean readOnlyUpgrade;
+	private boolean readOnlyUpgrade;
+
     /**
      * Tells if the automatic index statistics refresher has been disabled.
      * <p>
@@ -10487,6 +10488,18 @@ public boolean checkVersion(int requiredMajorVersion, String feature) throws Sta
 		return dictionaryVersion.checkVersion(requiredMajorVersion, feature);
 	}
 		
+    public boolean isReadOnlyUpgrade() {
+        return readOnlyUpgrade;
+    }
+
+    /**
+     * Mark this database as a read only database whose stored prepared
+     * statements are invalid because some kind of upgrade is needed.
+     */
+    void setReadOnlyUpgrade() {
+        readOnlyUpgrade = true;
+    }
+
 	/**
 	** Create system built-in metadata stored prepared statements.
 	*/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java
index 9b758b7d..a362a820 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java
@@ -307,7 +307,7 @@ public TupleDescriptor buildDescriptor(
 
 		// In soft upgrade mode the plan may not be understand by this engine
 		// so force a recompile.
-		if (((DataDictionaryImpl) dd).readOnlyUpgrade) {
+		if (dd.isReadOnlyUpgrade()) {
 			valid = false;
 		} else {
 			// 5th column is VALID (boolean)
diff --git a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
index d73116b8..9845de88 100644
--- a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
+++ b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
@@ -775,6 +775,10 @@ public boolean checkVersion(int majorVersion, String feature)
 		return false;
 	}
 
+    public boolean isReadOnlyUpgrade() {
+        return false;
+    }
+
 	public boolean addRemovePermissionsDescriptor(boolean add,
 			PermissionsDescriptor perm, String grantee, TransactionController tc)
 			throws StandardException {
