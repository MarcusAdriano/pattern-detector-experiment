diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassFormatOutput.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassFormatOutput.java
index 9554a17e..d932cb30 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassFormatOutput.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassFormatOutput.java
@@ -50,9 +50,22 @@ public ClassFormatOutput(int size) {
 	}
 
 	public void putU1(int i) throws IOException {
+		// ensure the format of the class file is not
+		// corrupted by writing an incorrect, truncated value.
+		if (i > 255)
+			ClassFormatOutput.limit("U1", 255, i);
 		write(i);
 	}
 	public void putU2(int i) throws IOException {
+		putU2("U2", i);
+
+	}
+	public void putU2(String limit, int i) throws IOException {
+		
+		// ensure the format of the class file is not
+		// corrupted by writing an incorrect, truncated value.
+		if (i > 65535)
+			ClassFormatOutput.limit(limit, 65535, i);
 		write(i >> 8);
 		write(i);
 	}
@@ -71,4 +84,17 @@ public void writeTo(OutputStream outTo) throws IOException {
 	public byte[] getData() {
 		return ((AccessibleByteArrayOutputStream) out).getInternalByteArray();
 	}
+
+	/**
+	 * Throw an ClassFormatError if a limit of the Java class file format is reached.
+	 * @param name Terse limit description from JVM spec.
+	 * @param limit What the limit is.
+	 * @param value What the value for the current class is
+	 * @throws IOException Thrown when limit is exceeded.
+	 */
+	static void limit(String name, int limit, int value)
+		throws IOException
+	{
+		throw new IOException(name + "(" + value + " > " + limit + ")");
+	}
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassHolder.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassHolder.java
index f0a28cd8..dd93b0bb 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassHolder.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/classfile/ClassHolder.java
@@ -113,14 +113,19 @@ public ClassHolder(String fullyQualifiedName, String superClassName,
 		method_info = new MemberTable(0);
 	}
 
-	public void put(ClassFormatOutput out) throws IOException {
+	private void put(ClassFormatOutput out) throws IOException {
 
 		/* Write out the header */
 		out.putU4(VMDescriptor.JAVA_CLASS_FORMAT_MAGIC);
 		out.putU2(VMDescriptor.JAVA_CLASS_FORMAT_MINOR_VERSION);
 		out.putU2(VMDescriptor.JAVA_CLASS_FORMAT_MAJOR_VERSION);
 
-		out.putU2(cptEntries.size());
+		// special case checking that the number of constant
+		// pool entries does not exceed the limit of 65535
+		// (as it is stored as a U2).
+		// Special case to allow somewhat easier debugging
+		// of the resulting failure.
+		out.putU2("constant_pool", cptEntries.size());
 		cptPut(out);
 
 		out.putU2(access_flags);
@@ -165,8 +170,12 @@ public void put(ClassFormatOutput out) throws IOException {
 	**	Public methods from ClassHolder.
 	*/
 
-
-	public ByteArray getFileFormat() {
+	/**
+	 * Convert the object representation of the class into
+	 * its class file format.
+	 * @exception IOException error writing the class
+	 */
+	public ByteArray getFileFormat() throws IOException {
 
 		int classFileSize = 4 + (10 * 2);
 		classFileSize += cptEstimatedSize;
@@ -183,17 +192,13 @@ public ByteArray getFileFormat() {
 		if (attribute_info != null)
 			classFileSize += attribute_info.classFileSize();
 
-		try {
+	
 			ClassFormatOutput cfo = new ClassFormatOutput(classFileSize + 200);
 
 			put(cfo);
 
 			return new ByteArray(cfo.getData(), 0, cfo.size());
 
-		} catch (IOException e) {
-			return null;
-		}
-
 	}
 
 	/*
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java
index 5dd4c213..81f6e3e9 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java
@@ -84,7 +84,7 @@
 	 * generated, if there are no constructors then
 	 * the default no-arg constructor will be defined.
 	 */
-	ByteArray getClassBytecode();
+	ByteArray getClassBytecode() throws StandardException;
 
 	/**
 	 * the class's unqualified name
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
index f291bdbd..0af2ee63 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
@@ -31,7 +31,9 @@
 
 import org.apache.derby.iapi.services.monitor.Monitor;
 
+import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.Property;
+import org.apache.derby.iapi.reference.SQLState;
 
 import org.apache.derby.iapi.util.ByteArray;
 import org.apache.derby.iapi.services.classfile.VMOpcode;
@@ -105,16 +107,16 @@ public LocalField addField(String javaType, String name, int modifiers) {
 	 * generated, if there are no constructors then
 	 * the default no-arg constructor will be defined.
 	 */
-	public ByteArray getClassBytecode() {
+	public ByteArray getClassBytecode() throws StandardException {
 
 		// return if already done
 		if (bytecode != null) return bytecode;
 
+		try {
+
 		if (SanityManager.DEBUG) {
 		  if (SanityManager.DEBUG_ON("ClassLineNumbers")) {
 
-			try {
-
 				ClassFormatOutput sout = new ClassFormatOutput(2);
 
 				int cpiUTF = classHold.addUtf8("GC.java");
@@ -122,16 +124,17 @@ public ByteArray getClassBytecode() {
 				sout.putU2(cpiUTF);
 
 				classHold.addAttribute("SourceFile", sout);
-			} catch (IOException ioe) {
-				SanityManager.THROWASSERT("i/o exception generating class file " + ioe.toString());
 			}
 		  }
-		}
-
 
 		// the class is now complete, get its bytecode.
 		bytecode = classHold.getFileFormat();
 
+		} catch (IOException ioe) {
+			throw StandardException.newException(
+					SQLState.GENERATED_CLASS_LINKAGE_ERROR, ioe, getFullName());
+		}
+
 		// release resources, we have the code now.
 		// name is not released, it may still be accessed.
 		classHold = null;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/GClass.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/GClass.java
index 5054d9f7..91fb63e6 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/GClass.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/GClass.java
@@ -59,7 +59,8 @@ public GeneratedClass getGeneratedClass() throws StandardException {
 		return cf.loadGeneratedClass(qualifiedName, getClassBytecode());
 	}
 
-	protected void writeClassFile(String dir, boolean logMessage, Throwable t) {
+	protected void writeClassFile(String dir, boolean logMessage, Throwable t)
+		throws StandardException {
 
 		if (SanityManager.DEBUG) {
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java
index 321e8f8d..f73f4791 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java
@@ -263,7 +263,8 @@ public int getClassLoaderVersion() {
 		return -1;
 	}
 
-	public ByteArray buildSpecificFactory(String className, String factoryName) {
+	public ByteArray buildSpecificFactory(String className, String factoryName)
+		throws StandardException {
 
 		ClassBuilder cb = javaFactory.newClassBuilder(this, CodeGeneration.GENERATED_PACKAGE_PREFIX,
 			Modifier.PUBLIC | Modifier.FINAL, factoryName, "org.apache.derby.impl.services.reflect.GCInstanceFactory");
