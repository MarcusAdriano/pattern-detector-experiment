diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
index b9670bd3..e240da77 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
@@ -875,7 +875,7 @@ else if (permuteState == JUMPING)  //still jumping
 						if (joinPosition == 0)
 							newCost = 0.0;
 						else
-							newCost = recoverCostFromProposedJoinOrder();
+							newCost = recoverCostFromProposedJoinOrder(false);
 					}
 				}
 
@@ -958,7 +958,7 @@ else if (permuteState == JUMPING)  //still jumping
 							else
 							{
 								prevEstimatedCost =
-									recoverCostFromProposedJoinOrder();
+									recoverCostFromProposedJoinOrder(true);
 							}
 						}
 
@@ -1274,15 +1274,26 @@ private void endOfRoundCleanup()
 	 * to recover the "1500" that we lost in the process of adding and
 	 * subtracting 3.14E40.
 	 */
-	private double recoverCostFromProposedJoinOrder()
+	private double recoverCostFromProposedJoinOrder(boolean sortAvoidance)
 		throws StandardException
 	{
 		double recoveredCost = 0.0d;
 		for (int i = 0; i < joinPosition; i++)
 		{
+			if (sortAvoidance)
+			{
 			recoveredCost +=
 				optimizableList.getOptimizable(proposedJoinOrder[i])
-					.getBestAccessPath().getCostEstimate().getEstimatedCost();
+						.getBestSortAvoidancePath().getCostEstimate()
+							.getEstimatedCost();
+			}
+			else
+			{
+				recoveredCost +=
+					optimizableList.getOptimizable(proposedJoinOrder[i])
+						.getBestAccessPath().getCostEstimate()
+							.getEstimatedCost();
+			}
 		}
 
 		return recoveredCost;
