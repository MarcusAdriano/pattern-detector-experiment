diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfo.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfo.java
index e69de29b..11474b7f 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfo.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfo.java
@@ -0,0 +1,43 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+import java.util.List;
+import java.util.Map;
+
+public interface ComponentInfo {
+   String getId();
+   /**
+    * always needed, id's must be unique globally, or within their containing component info.
+    * (impl notes.. (for bundles)
+    * Id's will probably NOT be bundle id's... we need the id to be fixed between framework restarts,
+    * to enable things like storing coords for onscreen renderings of components
+    * Id's will probably end up being path based, /component.id/component.id etc .. for sanities sake.
+    * Component properties are information that forms part of a component, keys will vary depending on 
+    * what the component represents. The GUI will handle rendering based on key names.
+    */
+   Map<String,String> getComponentProperties();
+
+   
+   /**
+	* children are only supported in concept currently.. no gui work done yet for them..   
+    * List of any contained components for this component.    
+    */
+   List<ComponentInfo> getChildren(); 
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfoProvider.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfoProvider.java
index e69de29b..6f1f99d9 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfoProvider.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfoProvider.java
@@ -0,0 +1,76 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+import java.util.Collection;
+
+/**
+ * Provides information about components within a model.
+ * 
+ * Good usage practice would be to subscribe a listener .. and THEN call
+ * getComponents.. (doing it the other way round risks leaving a window during
+ * which a change could occur, and you not be informed). (doing it this way
+ * round, at worst, you'll see an update before you handle getComponents, and
+ * since an update can be an add, you'll just process it twice)
+ * 
+ */
+public interface ComponentInfoProvider {
+
+	/**
+	 * Callback interface implemented by users of the ComponentInfoProvider
+	 * interface, allowing notification of changes, or deletions to components
+	 * they have been informed about.
+	 */
+	static interface ComponentInfoListener {
+		// called to add, or update a component.
+		public void updateComponent(ComponentInfo b);
+
+		public void removeComponent(ComponentInfo b);
+	};
+
+	/**
+	 * Gets the current set of 'top level' components in this model.
+	 * 
+	 * Any nested components are only obtainable via the 'getChildren' method on
+	 * ComponentInfo.
+	 * 
+	 * @return
+	 */
+	Collection<ComponentInfo> getComponents();
+
+	/**
+	 * Gets a component for an id previously returned via getComponents, or
+	 * updateComponent
+	 * 
+	 * @param id
+	 * @return component, or null if component id is either unknown, or deleted.
+	 */
+	ComponentInfo getComponentForId(String id);
+
+	/**
+	 * Add a listener to this Info Provider, to be informed of
+	 * changes/deletions.
+	 * 
+	 * @param listener
+	 */
+	public void registerComponentInfoListener(ComponentInfoListener listener);
+
+	// TODO: unregisterComponentInfoListener ;-)
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ModelInfoService.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ModelInfoService.java
index e69de29b..a4ed520d 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ModelInfoService.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ModelInfoService.java
@@ -0,0 +1,30 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+/**
+ * The top level service interface published to the service registry
+ *
+ * A model is something with components, with relationships between them.
+ */
+public interface ModelInfoService {
+	String getName();
+	ComponentInfoProvider getComponentInfoProvider();
+	RelationshipInfoProvider getRelationshipInfoProvider();
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ParameterizedRelationshipAspect.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ParameterizedRelationshipAspect.java
index e69de29b..722fe18d 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ParameterizedRelationshipAspect.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ParameterizedRelationshipAspect.java
@@ -0,0 +1,30 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+import java.util.List;
+
+public interface ParameterizedRelationshipAspect extends RelationshipAspect{
+	   static class Parameter{
+		   String key;
+		   String value;
+	   };
+	   List<Parameter> getProvidedParameters(); //any parameters specified by the supplier of the dependency.
+	   List<Parameter> getConsumedParameters(); //any parameters specified by the consumer of the dependency.
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipAspect.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipAspect.java
index e69de29b..a08e0fc6 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipAspect.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipAspect.java
@@ -0,0 +1,23 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+public interface RelationshipAspect {
+	public String getType();
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfo.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfo.java
index e69de29b..4f2a6321 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfo.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfo.java
@@ -0,0 +1,38 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+import java.util.List;
+
+//This represents a single dependency between two components
+public interface RelationshipInfo {
+	
+	   //relationships are unique by type&name combined.
+	
+	   String getType(); //String describing the type of this dependency.		   
+	   String getName();  //name of this dependency.
+	   
+	   //the provider/consumer side of this relationship.
+	   ComponentInfo getProvidedBy();	   
+	   //consumers can of course, be empty. (thats empty.. NOT null)
+	   List<ComponentInfo> getConsumedBy();
+	   
+	   //relationship aspects are not fully integrated yet.. avoid until stable ;-)
+	   List<RelationshipAspect> getRelationshipAspects();   
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfoProvider.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfoProvider.java
index e69de29b..345e9c0f 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfoProvider.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfoProvider.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+import java.util.Collection;
+
+public interface RelationshipInfoProvider {
+	static interface RelationshipInfoListener {
+		public void updateRelationship(RelationshipInfo b);
+
+		public void removeRelationship(RelationshipInfo b);
+	};
+
+	Collection<RelationshipInfo> getRelationships();
+
+	public void registerRelationshipInfoListener(
+			RelationshipInfoListener listener);
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/VersionedRelationshipAspect.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/VersionedRelationshipAspect.java
index e69de29b..27824f7d 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/VersionedRelationshipAspect.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/VersionedRelationshipAspect.java
@@ -0,0 +1,25 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.api;
+
+public interface VersionedRelationshipAspect extends RelationshipAspect {
+	   String getProvidedVersion(); //this will be an exact version.
+	   String getConsumedVersion(); //this will be either a range, or an exact version. 
+	                                //provided version will either match, or be in the range.
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/ComponentInfoImpl.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/ComponentInfoImpl.java
index e69de29b..2fd0c18a 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/ComponentInfoImpl.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/ComponentInfoImpl.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.info;
+
+import java.util.List;
+import java.util.Map;
+import org.apache.aries.samples.goat.api.ComponentInfo;
+
+public class ComponentInfoImpl implements ComponentInfo {
+
+	List<ComponentInfo> children;
+	Map<String,String> componentProperties;
+	String id;
+	public List<ComponentInfo> getChildren() {
+		return children;
+	}
+	public void setChildren(List<ComponentInfo> children) {
+		this.children = children;
+	}
+	public Map<String, String> getComponentProperties() {
+		return componentProperties;
+	}
+	public void setComponentProperties(Map<String, String> componentProperties) {
+		this.componentProperties = componentProperties;
+	}
+	public String getId() {
+		return id;
+	}
+	public void setId(String id) {
+		this.id = id;
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/RelationshipInfoImpl.java b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/RelationshipInfoImpl.java
index e69de29b..75a19c13 100644
--- a/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/RelationshipInfoImpl.java
+++ b/aries/trunk/samples-sandbox/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/RelationshipInfoImpl.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.info;
+import java.util.List;
+import org.apache.aries.samples.goat.api.RelationshipInfo;
+import org.apache.aries.samples.goat.api.RelationshipAspect;
+import org.apache.aries.samples.goat.api.ComponentInfo;;
+
+public class RelationshipInfoImpl implements RelationshipInfo {
+	List<ComponentInfo> consumedBy;
+	List<RelationshipAspect> relationshipAspects;
+	String name;
+	ComponentInfo providedBy;
+	String type;
+	public List<ComponentInfo> getConsumedBy() {
+		return consumedBy;
+	}
+	public void setConsumedBy(List<ComponentInfo> consumedBy) {
+		this.consumedBy = consumedBy;
+	}
+	public List<RelationshipAspect> getRelationshipAspects() {
+		return relationshipAspects;
+	}
+	public void setRelationshipAspects(List<RelationshipAspect> relationshipAspects) {
+		this.relationshipAspects = relationshipAspects;
+	}
+	public String getName() {
+		return name;
+	}
+	public void setName(String name) {
+		this.name = name;
+	}
+	public ComponentInfo getProvidedBy() {
+		return providedBy;
+	}
+	public void setProvidedBy(ComponentInfo providedBy) {
+		this.providedBy = providedBy;
+	}
+	public String getType() {
+		return type;
+	}
+	public void setType(String type) {
+		this.type = type;
+	}
+	
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-bundlecontext-modelprovider/src/main/java/org/apache/aries/samples/goat/bundlecontextmodel/BundleContextInfoProvider.java b/aries/trunk/samples-sandbox/goat/goat-bundlecontext-modelprovider/src/main/java/org/apache/aries/samples/goat/bundlecontextmodel/BundleContextInfoProvider.java
index e69de29b..1d704ecd 100644
--- a/aries/trunk/samples-sandbox/goat/goat-bundlecontext-modelprovider/src/main/java/org/apache/aries/samples/goat/bundlecontextmodel/BundleContextInfoProvider.java
+++ b/aries/trunk/samples-sandbox/goat/goat-bundlecontext-modelprovider/src/main/java/org/apache/aries/samples/goat/bundlecontextmodel/BundleContextInfoProvider.java
@@ -0,0 +1,297 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.bundlecontextmodel;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+
+import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.BundleEvent;
+import org.osgi.framework.BundleListener;
+import org.osgi.framework.ServiceEvent;
+import org.osgi.framework.ServiceListener;
+import org.osgi.framework.ServiceReference;
+import org.osgi.service.packageadmin.ExportedPackage;
+import org.osgi.service.packageadmin.PackageAdmin;
+
+import org.apache.aries.samples.goat.info.ComponentInfoImpl;
+import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
+
+import org.apache.aries.samples.goat.api.ComponentInfo;
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+import org.apache.aries.samples.goat.api.ModelInfoService;
+import org.apache.aries.samples.goat.api.RelationshipAspect;
+import org.apache.aries.samples.goat.api.RelationshipInfo;
+import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
+
+public class BundleContextInfoProvider implements ModelInfoService, RelationshipInfoProvider, ComponentInfoProvider, BundleListener, ServiceListener {
+	
+	private Map<String, ComponentInfo>biCache = new HashMap<String,ComponentInfo>();
+	
+	private Map<String, RelationshipInfo>riCache = new HashMap<String,RelationshipInfo>();
+	
+	private List<ComponentInfoListener> clisteners=null;
+	private List<RelationshipInfoListener> rlisteners=null;
+
+	private BundleContext ctx=null;
+	
+	public BundleContextInfoProvider(BundleContext ctx){
+		System.err.println("BCIP built!");
+		this.ctx = ctx;
+		this.clisteners = Collections.synchronizedList(new ArrayList<ComponentInfoListener>());
+		this.rlisteners = Collections.synchronizedList(new ArrayList<RelationshipInfoListener>());
+		this.ctx.addBundleListener(this);		
+		this.ctx.addServiceListener(this);		
+	}
+	
+	
+
+	public List<ComponentInfo> getComponents() {
+		System.err.println("BCIP getBundles called");
+		Bundle[] bundles = this.ctx.getBundles();
+		List<ComponentInfo> result = new ArrayList<ComponentInfo>();
+		
+		for(int i=0; i<bundles.length; i++){
+			System.err.println("BCIP converting "+i);
+			result.add( getComponentForId( getKeyForBundle(bundles[i])) );
+		}
+
+		System.err.println("BCIP returning data");
+		return result;
+	}
+
+
+	public void registerComponentInfoListener(ComponentInfoListener listener) {
+		clisteners.add(listener);
+	}
+	
+	public void registerRelationshipInfoListener(RelationshipInfoListener listener) {
+		rlisteners.add(listener);
+	}
+
+	
+	private Bundle getBundleForIDKey(BundleContext ctx, String id){
+		String s =id.substring("/root/".length());
+		Long l = Long.parseLong(s);
+		return ctx.getBundle(l.longValue());
+	}
+
+	private String bundleStateToString(int bundleState){
+		switch(bundleState){
+		case Bundle.UNINSTALLED : return "UNINSTALLED";
+		case Bundle.INSTALLED : return "INSTALLED";
+		case Bundle.RESOLVED : return "RESOLVED";
+		case Bundle.STARTING : return "STARTING";
+		case Bundle.STOPPING : return "STOPPING";
+		case Bundle.ACTIVE : return "ACTIVE";
+		default : return "UNKNOWN["+bundleState+"]";
+		}
+	} 
+	
+	public ComponentInfo getComponentForId(String id) {
+		if(biCache.containsKey(id)){
+			return biCache.get(id);
+		}
+		
+		Bundle b = getBundleForIDKey(ctx,id);		
+		ComponentInfoImpl bii = new ComponentInfoImpl();
+		
+		bii.setId(getKeyForBundle(b));
+		
+		HashSet<Long> allDepSet = new HashSet<Long>();
+		
+		bii.setComponentProperties(new HashMap<String,String>());
+		
+		bii.getComponentProperties().put("BundleID", ""+b.getBundleId());
+		bii.getComponentProperties().put("State", bundleStateToString(b.getState()));
+		bii.getComponentProperties().put("SymbolicName", b.getSymbolicName());
+		bii.getComponentProperties().put("Version", ""+b.getVersion());
+		
+		Enumeration<String> e = b.getHeaders().keys();
+		while(e.hasMoreElements()){
+			String key = e.nextElement();
+
+			//Ideally we'd add everything here.. but until we add the filtering in the ui
+			//its easier to just filter here.. for now, all 'extra' properties are removed.
+
+			if(! (key.equals("Import-Package") || key.equals("Export-Package")) ){
+			  //bii.getComponentProperties().put(key, String.valueOf(b.getHeaders().get(key)));
+			}
+		}
+		
+		bii.setChildren(new ArrayList<ComponentInfo>());
+		
+		biCache.put(id, bii);		
+		return bii;
+	}
+
+
+
+	public void bundleChanged(BundleEvent arg0) {
+		String id = getKeyForBundle(arg0.getBundle());
+		if(biCache.containsKey(id)){
+			biCache.remove(id);
+		}
+
+		ComponentInfo bi = getComponentForId(getKeyForBundle(arg0.getBundle()));
+		
+		for(ComponentInfoListener bil : clisteners){
+			bil.updateComponent(bi);
+		}
+		
+	}
+
+	private String getKeyForBundle(Bundle b){
+		return "/root/"+b.getBundleId();
+	}
+
+	@Override
+	public List<RelationshipInfo> getRelationships() {
+		
+		ArrayList<RelationshipInfo> r = new ArrayList<RelationshipInfo>();
+		
+		Bundle bundles[] = ctx.getBundles();
+		PackageAdmin pa = (PackageAdmin)ctx.getService(ctx.getServiceReference(PackageAdmin.class.getName().toString()));
+		
+		if(bundles!=null && bundles.length!=0){
+			for(Bundle b: bundles){
+				String bkey = getKeyForBundle(b);
+				ComponentInfo ci = getComponentForId(bkey);
+				
+				//add all the packages..
+				//we only add exports, as imports are implied in the reverse
+				ExportedPackage eps[] = pa.getExportedPackages(b);
+				if(eps!=null && eps.length!=0){
+					for(ExportedPackage ep : eps){
+						RelationshipInfoImpl ri = new RelationshipInfoImpl();
+						ri.setProvidedBy( ci );
+						ri.setType("Package");
+						ri.setName(ep.getName());
+						ri.setRelationshipAspects(new ArrayList<RelationshipAspect>());
+						ri.setConsumedBy(new ArrayList<ComponentInfo>());
+						//TODO: add versioning aspect.
+						Bundle imps[] = ep.getImportingBundles();
+						if(imps!=null && imps.length!=0){
+							for(Bundle imp : imps){
+								ri.getConsumedBy().add(getComponentForId(getKeyForBundle(imp)));
+							}
+						}
+						r.add(ri);						
+					}
+				}
+			
+				//add all the services.. 
+				//we only add registered services, as ones in use are handled in the reverse
+				ServiceReference srs[] = b.getRegisteredServices();
+				if(srs!=null && srs.length!=0){
+					for(ServiceReference sr : srs){	
+						RelationshipInfoImpl ri = getRIforSR(sr);
+						ri.setProvidedBy( ci );
+						r.add(ri);
+					}
+				}
+				
+			}
+		}
+		
+		
+		return r;
+	}
+
+    private RelationshipInfoImpl getRIforSR(ServiceReference sr){
+		RelationshipInfoImpl ri = new RelationshipInfoImpl();
+		ri.setType("Service");
+		String serviceNames="";
+		String []objectClasses = (String[])sr.getProperty("objectClass");
+		if(objectClasses!=null){
+			for(String objectClass : objectClasses){
+				serviceNames+=","+objectClass;
+			}
+		}
+		if(serviceNames.length()>1){
+			serviceNames = serviceNames.substring(1);
+		}
+		
+		ri.setName(serviceNames);
+		ri.setRelationshipAspects(new ArrayList<RelationshipAspect>());
+		//TODO: add service parameters
+		ri.setConsumedBy(new ArrayList<ComponentInfo>());
+		
+		Bundle using[] = sr.getUsingBundles();
+		if(using!=null && using.length!=0){
+			for(Bundle u : using){
+				ri.getConsumedBy().add(getComponentForId(getKeyForBundle(u)));
+			}
+		}
+        return ri;
+    }
+
+	@Override
+	public String getName() {
+		return "Bundle Context Info Provider 1.0";
+	}
+
+
+
+	@Override
+	public ComponentInfoProvider getComponentInfoProvider() {
+		return this;
+	}
+
+
+
+	@Override
+	public RelationshipInfoProvider getRelationshipInfoProvider() {
+		return this;
+	}
+
+
+
+	@Override
+	public void serviceChanged(ServiceEvent arg0) {
+		if(arg0.getType() == ServiceEvent.REGISTERED || arg0.getType() == ServiceEvent.MODIFIED || arg0.getType() == ServiceEvent.MODIFIED_ENDMATCH){
+			ServiceReference sr = arg0.getServiceReference();
+			RelationshipInfoImpl ri = getRIforSR(sr);
+			ComponentInfo ci = getComponentForId(getKeyForBundle(sr.getBundle()));
+			ri.setProvidedBy(ci);
+			
+			for(RelationshipInfoListener ril : rlisteners){
+				ril.updateRelationship(ri);
+			}
+		}else if(arg0.getType() == ServiceEvent.UNREGISTERING){
+			ServiceReference sr = arg0.getServiceReference();
+			RelationshipInfoImpl ri = getRIforSR(sr);
+			ComponentInfo ci = getComponentForId(getKeyForBundle(sr.getBundle()));
+			ri.setProvidedBy(ci);
+			
+			for(RelationshipInfoListener ril : rlisteners){
+				ril.removeRelationship(ri);
+			}			
+		}
+		
+
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java b/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
index e69de29b..8a87f00b 100644
--- a/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
+++ b/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.dummy;
+
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.aries.samples.goat.info.ComponentInfoImpl;
+
+import org.apache.aries.samples.goat.api.ComponentInfo;
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+
+public class DummyInfoProvider implements ComponentInfoProvider {
+	
+	ComponentInfoImpl a = new ComponentInfoImpl();
+	ComponentInfoImpl b = new ComponentInfoImpl();
+	ComponentInfoImpl c = new ComponentInfoImpl();
+		
+	public DummyInfoProvider(){
+				
+		a.setId("/root/"+1);
+		Map<String,String> props = new HashMap<String,String>();
+		props.put("SymbolicName", "Uber.Bundle");
+		props.put("Version", "1.0.0");
+		props.put("State", "ACTIVE");
+		props.put("BundleID", "1");
+		a.setComponentProperties(props);
+		
+		b.setId("/root/"+2);
+		props = new HashMap<String,String>();
+		props.put("SymbolicName", "Fred");
+		props.put("Version", "1.0.0");
+		props.put("State", "RESOLVED");
+		props.put("BundleID", "2");
+		b.setComponentProperties(props);
+		
+		c.setId("/root/"+3);
+		props = new HashMap<String,String>();
+		props.put("SymbolicName", "Wilma");
+		props.put("Version", "1.0.0");
+		props.put("State", "ACTIVE");
+		props.put("BundleID", "3");
+		c.setComponentProperties(props);
+	}
+
+	@Override
+	public List<ComponentInfo> getComponents() {
+		List<ComponentInfo> result = new ArrayList<ComponentInfo>();
+		result.add(a);
+		result.add(b);
+		result.add(c);
+		return result;
+	}
+
+	@Override
+	public ComponentInfo getComponentForId(String id) {
+		if("/root/1".equals(id)) return a;
+		if("/root/2".equals(id)) return b;
+		if("/root/3".equals(id)) return c;
+		return null;
+	}
+
+	@Override
+	public void registerComponentInfoListener(ComponentInfoListener listener) {
+		//no-op
+	}
+
+}
+
diff --git a/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService.java b/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService.java
index e69de29b..1a4930b4 100644
--- a/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService.java
+++ b/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.dummy;
+
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+import org.apache.aries.samples.goat.api.ModelInfoService;
+import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
+
+public class DummyModelService implements ModelInfoService {
+
+	private final static ComponentInfoProvider cip = new DummyInfoProvider();
+	private final static RelationshipInfoProvider rip = new DummyRelationshipProvider(cip);
+	
+	@Override
+	public String getName() {
+		return "Dummy Model Service";
+	}
+
+	@Override
+	public ComponentInfoProvider getComponentInfoProvider() {
+		return cip;
+	}
+
+	@Override
+	public RelationshipInfoProvider getRelationshipInfoProvider() {
+		return rip;
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java b/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
index e69de29b..441fbd16 100644
--- a/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
+++ b/aries/trunk/samples-sandbox/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
@@ -0,0 +1,112 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.dummy;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
+
+import org.apache.aries.samples.goat.api.ComponentInfo;
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+import org.apache.aries.samples.goat.api.RelationshipInfo;
+import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
+
+public class DummyRelationshipProvider implements RelationshipInfoProvider {
+
+	ComponentInfoProvider cip = null;
+	
+	public DummyRelationshipProvider(ComponentInfoProvider cip){
+		this.cip = cip;
+	}
+	
+	@Override
+	public List<RelationshipInfo> getRelationships() {
+		
+		ArrayList<RelationshipInfo> ris = new ArrayList<RelationshipInfo>();
+		
+		ComponentInfo ci1 = cip.getComponentForId("/root/1");
+		ComponentInfo ci2 = cip.getComponentForId("/root/2");
+		ComponentInfo ci3 = cip.getComponentForId("/root/3");
+		
+		RelationshipInfoImpl ri1 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri2 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri3 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri4 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri5 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri6 = new RelationshipInfoImpl();
+		ris.add(ri1);
+		ris.add(ri2);
+		ris.add(ri3);
+		ris.add(ri4);
+		ris.add(ri5);
+		ris.add(ri6);
+		
+		ri1.setName("i.am.exported.by.1.and.used.by.2.and.3");
+		ri1.setProvidedBy(ci1);
+		ArrayList<ComponentInfo> c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		c.add(ci3);
+		ri1.setConsumedBy(c);
+		ri1.setType("Package"); 
+		
+		ri2.setName("i.am.exported.by.1.and.used.by.3");
+		ri2.setProvidedBy(ci1);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci3);
+		ri2.setConsumedBy(c);
+		ri2.setType("Package"); 
+		
+		ri3.setName("i.am.exported.by.2.and.used.by.3");
+		ri3.setProvidedBy(ci2);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci3);
+		ri3.setConsumedBy(c);
+		ri3.setType("Package"); 
+		
+		ri4.setName("i.am.exported.by.3.and.used.by.2");
+		ri4.setProvidedBy(ci3);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		ri4.setConsumedBy(c);
+		ri4.setType("Package"); 
+
+		ri5.setName("i.am.a.funky.service.from.3.used.by.2");
+		ri5.setProvidedBy(ci3);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		ri5.setConsumedBy(c);
+		ri5.setType("Service");
+		
+		ri6.setName("i.am.a.funky.service.from.1.used.by.2");
+		ri6.setProvidedBy(ci1);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		ri6.setConsumedBy(c);
+		ri6.setType("Service");
+		return ris;
+	}
+
+	@Override
+	public void registerRelationshipInfoListener(RelationshipInfoListener listener) {
+		// TODO Auto-generated method stub
+
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java b/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
index e69de29b..a5deabd6 100644
--- a/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
+++ b/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.dummy2;
+
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.aries.samples.goat.info.ComponentInfoImpl;
+
+import org.apache.aries.samples.goat.api.ComponentInfo;
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+
+public class DummyInfoProvider implements ComponentInfoProvider {
+	
+	ComponentInfoImpl a = new ComponentInfoImpl();
+	ComponentInfoImpl b = new ComponentInfoImpl();
+	ComponentInfoImpl c = new ComponentInfoImpl();
+		
+	public DummyInfoProvider(){
+				
+		a.setId("/root/"+1);
+		Map<String,String> props = new HashMap<String,String>();
+		props.put("SymbolicName", "Mickey.Bundle");
+		props.put("Version", "1.0.0");
+		props.put("State", "RESOLVED");
+		props.put("BundleID", "1");
+		a.setComponentProperties(props);
+		
+		b.setId("/root/"+2);
+		props = new HashMap<String,String>();
+		props.put("SymbolicName", "Mouse");
+		props.put("Version", "1.0.0");
+		props.put("State", "ACTIVE");
+		props.put("BundleID", "2");
+		b.setComponentProperties(props);
+		
+		c.setId("/root/"+3);
+		props = new HashMap<String,String>();
+		props.put("SymbolicName", "Barney");
+		props.put("Version", "1.0.0");
+		props.put("State", "ACTIVE");
+		props.put("BundleID", "3");
+		c.setComponentProperties(props);
+	}
+
+	@Override
+	public List<ComponentInfo> getComponents() {
+		List<ComponentInfo> result = new ArrayList<ComponentInfo>();
+		result.add(a);
+		result.add(b);
+		result.add(c);
+		return result;
+	}
+
+	@Override
+	public ComponentInfo getComponentForId(String id) {
+		if("/root/1".equals(id)) return a;
+		if("/root/2".equals(id)) return b;
+		if("/root/3".equals(id)) return c;
+		return null;
+	}
+
+	@Override
+	public void registerComponentInfoListener(ComponentInfoListener listener) {
+		//no-op
+	}
+
+}
+
diff --git a/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService2.java b/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService2.java
index e69de29b..0faabe50 100644
--- a/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService2.java
+++ b/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService2.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.dummy2;
+
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+import org.apache.aries.samples.goat.api.ModelInfoService;
+import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
+
+public class DummyModelService2 implements ModelInfoService {
+
+	private final static ComponentInfoProvider cip = new DummyInfoProvider();
+	private final static RelationshipInfoProvider rip = new DummyRelationshipProvider(cip);
+	
+	@Override
+	public String getName() {
+		return "Dummy Model Service";
+	}
+
+	@Override
+	public ComponentInfoProvider getComponentInfoProvider() {
+		return cip;
+	}
+
+	@Override
+	public RelationshipInfoProvider getRelationshipInfoProvider() {
+		return rip;
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java b/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
index e69de29b..71aec4ba 100644
--- a/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
+++ b/aries/trunk/samples-sandbox/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
@@ -0,0 +1,112 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.dummy2;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
+
+import org.apache.aries.samples.goat.api.ComponentInfo;
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+import org.apache.aries.samples.goat.api.RelationshipInfo;
+import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
+
+public class DummyRelationshipProvider implements RelationshipInfoProvider {
+
+	ComponentInfoProvider cip = null;
+	
+	public DummyRelationshipProvider(ComponentInfoProvider cip){
+		this.cip = cip;
+	}
+	
+	@Override
+	public List<RelationshipInfo> getRelationships() {
+		
+		ArrayList<RelationshipInfo> ris = new ArrayList<RelationshipInfo>();
+		
+		ComponentInfo ci1 = cip.getComponentForId("/root/1");
+		ComponentInfo ci2 = cip.getComponentForId("/root/2");
+		ComponentInfo ci3 = cip.getComponentForId("/root/3");
+		
+		RelationshipInfoImpl ri1 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri2 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri3 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri4 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri5 = new RelationshipInfoImpl();
+		RelationshipInfoImpl ri6 = new RelationshipInfoImpl();
+		ris.add(ri1);
+		ris.add(ri2);
+		ris.add(ri3);
+		ris.add(ri4);
+		ris.add(ri5);
+		ris.add(ri6);
+		
+		ri1.setName("i.am.exported.by.1.and.used.by.2.and.3");
+		ri1.setProvidedBy(ci1);
+		ArrayList<ComponentInfo> c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		c.add(ci3);
+		ri1.setConsumedBy(c);
+		ri1.setType("Package"); 
+		
+		ri2.setName("i.am.exported.by.1.and.used.by.3");
+		ri2.setProvidedBy(ci1);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci3);
+		ri2.setConsumedBy(c);
+		ri2.setType("Package"); 
+		
+		ri3.setName("i.am.exported.by.2.and.used.by.3");
+		ri3.setProvidedBy(ci2);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci3);
+		ri3.setConsumedBy(c);
+		ri3.setType("Package"); 
+		
+		ri4.setName("i.am.exported.by.3.and.used.by.2");
+		ri4.setProvidedBy(ci3);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		ri4.setConsumedBy(c);
+		ri4.setType("Package"); 
+
+		ri5.setName("i.am.a.funky.service.from.3.used.by.2");
+		ri5.setProvidedBy(ci3);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		ri5.setConsumedBy(c);
+		ri5.setType("Service");
+		
+		ri6.setName("i.am.a.funky.service.from.1.used.by.2");
+		ri6.setProvidedBy(ci1);
+		c = new ArrayList<ComponentInfo>();
+		c.add(ci2);
+		ri6.setConsumedBy(c);
+		ri6.setType("Service");
+		return ris;
+	}
+
+	@Override
+	public void registerRelationshipInfoListener(RelationshipInfoListener listener) {
+		// TODO Auto-generated method stub
+
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/Activator.java b/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/Activator.java
index e69de29b..db76bdf3 100644
--- a/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/Activator.java
+++ b/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/Activator.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.aries.samples.goat.enhancer;
+
+import org.osgi.framework.BundleActivator;
+import org.osgi.framework.BundleContext;
+
+public class Activator implements BundleActivator {
+
+	private ServiceInterceptor interceptor;
+
+	@Override
+	public void start(BundleContext ctx) throws Exception {
+		interceptor = new ServiceInterceptor(ctx);
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see
+	 * org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
+	 */
+	@Override
+	public void stop(BundleContext arg0) throws Exception {
+		interceptor.stop();
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ModelInfoEnhancerService.java b/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ModelInfoEnhancerService.java
index e69de29b..6c846803 100644
--- a/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ModelInfoEnhancerService.java
+++ b/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ModelInfoEnhancerService.java
@@ -0,0 +1,339 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.enhancer;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.aries.samples.goat.api.ComponentInfo;
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+import org.apache.aries.samples.goat.api.ModelInfoService;
+import org.apache.aries.samples.goat.api.RelationshipInfo;
+import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
+
+import org.apache.aries.samples.goat.info.ComponentInfoImpl;
+import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
+
+public class ModelInfoEnhancerService implements ModelInfoService,
+		ComponentInfoProvider, RelationshipInfoProvider,
+		ComponentInfoProvider.ComponentInfoListener,
+		RelationshipInfoProvider.RelationshipInfoListener {
+
+	private static final String SERVICE_REGISTRATION = "Service registration";
+
+	private static final String SERVICE_USAGE = "Service usage";
+
+	// TODO where should we expose these shared strings?
+	private static final String SERVICE = "Service";
+
+	private ModelInfoService originalService;
+
+	private final Map<String, ComponentInfo> components = new HashMap<String, ComponentInfo>();
+	private final Map<String, RelationshipInfo> relationships = new HashMap<String, RelationshipInfo>();
+
+	private final List<ComponentInfoListener> clisteners;
+	private final List<RelationshipInfoListener> rlisteners;
+
+	public ModelInfoEnhancerService(ModelInfoService infoService) {
+
+		clisteners = Collections
+				.synchronizedList(new ArrayList<ComponentInfoListener>());
+		rlisteners = Collections
+				.synchronizedList(new ArrayList<RelationshipInfoListener>());
+
+		this.originalService = infoService;
+		Collection<ComponentInfo> originalComponents = originalService
+				.getComponentInfoProvider().getComponents();
+		// We keep all the original components
+		for (ComponentInfo info : originalComponents) {
+			components.put(info.getId(), info);
+		}
+		// We add a new component for each service
+		Collection<RelationshipInfo> originalRelationships = originalService
+				.getRelationshipInfoProvider().getRelationships();
+		// We keep all the original components
+		for (RelationshipInfo rel : originalRelationships) {
+
+			if (SERVICE.equals(rel.getType())) {
+				ComponentInfoImpl serviceComponent = new ComponentInfoImpl();
+				String id = constructServiceComponentId(rel);
+				serviceComponent.setId(id);
+				Map<String, String> componentProperties = new HashMap<String, String>();
+				componentProperties.put("Name", rel.getName());
+				serviceComponent.setComponentProperties(componentProperties);
+
+				components.put(id, serviceComponent);
+
+				// Make new relationships;
+
+				RelationshipInfoImpl registration = new RelationshipInfoImpl();
+				registration.setType(SERVICE_REGISTRATION);
+				registration.setName(rel.getName());
+				registration.setProvidedBy(rel.getProvidedBy());
+				registration.setRelationshipAspects(rel
+						.getRelationshipAspects());
+
+				ArrayList<ComponentInfo> arrayList = new ArrayList<ComponentInfo>();
+				arrayList.add(serviceComponent);
+				registration.setConsumedBy(arrayList);
+
+				relationships.put(constructId(registration), registration);
+
+				RelationshipInfoImpl consumption = new RelationshipInfoImpl();
+				consumption.setType(SERVICE_USAGE);
+				consumption.setName(rel.getName());
+				consumption.setProvidedBy(serviceComponent);
+				consumption.setConsumedBy(rel.getConsumedBy());
+				consumption
+						.setRelationshipAspects(rel.getRelationshipAspects());
+
+				relationships.put(constructId(consumption), consumption);
+
+			} else {
+				// Pass non-service relationships through
+				relationships.put(constructId(rel), rel);
+
+			}
+
+			originalService.getComponentInfoProvider()
+					.registerComponentInfoListener(this);
+			originalService.getRelationshipInfoProvider()
+					.registerRelationshipInfoListener(this);
+		}
+
+	}
+
+	@Override
+	public String getName() {
+		return "Model Enhancer Service";
+	}
+
+	@Override
+	public ComponentInfoProvider getComponentInfoProvider() {
+		return this;
+	}
+
+	@Override
+	public RelationshipInfoProvider getRelationshipInfoProvider() {
+		return this;
+	}
+
+	@Override
+	public Collection<RelationshipInfo> getRelationships() {
+		return relationships.values();
+	}
+
+	@Override
+	public Collection<ComponentInfo> getComponents() {
+		return components.values();
+	}
+
+	@Override
+	public ComponentInfo getComponentForId(String id) {
+		return components.get(id);
+	}
+
+	@Override
+	public void registerRelationshipInfoListener(
+			RelationshipInfoListener listener) {
+		rlisteners.add(listener);
+	}
+
+	@Override
+	public void registerComponentInfoListener(ComponentInfoListener listener) {
+		clisteners.add(listener);
+	}
+
+	@Override
+	public void updateRelationship(RelationshipInfo r) {
+		if (SERVICE.equals(r.getType())) {
+			updateSyntheticServiceArtefactsAndNotifyListeners(r);
+		} else {
+			// Update our copy
+			relationships.put(constructId(r), r);
+			// This shouldn't affect us, but pass it on to our listeners
+			for (RelationshipInfoListener listener : rlisteners) {
+				listener.updateRelationship(r);
+			}
+		}
+
+	}
+
+	@Override
+	public void removeRelationship(RelationshipInfo r) {
+
+		if (SERVICE.equals(r.getType())) {
+			removeSyntheticServiceArtefactsAndNotifyListeners(r);
+		} else {
+			// We don't want to track this relationship anymore
+			String id = constructId(r);
+			RelationshipInfo relationship = relationships.get(id);
+			relationships.remove(id);
+			if (relationship != null) {
+				// This shouldn't affect us, but pass it on to our listeners
+				for (RelationshipInfoListener listener : rlisteners) {
+					listener.removeRelationship(relationship);
+				}
+			}
+		}
+
+	}
+
+	@Override
+	public void updateComponent(ComponentInfo b) {
+		// Update our copy
+		components.put(b.getId(), b);
+		// This shouldn't affect us, but pass it on to our listeners
+		for (ComponentInfoListener listener : clisteners) {
+			listener.updateComponent(b);
+		}
+
+	}
+
+	@Override
+	public void removeComponent(ComponentInfo b) {
+		// This shouldn't affect us unless it has relationships pointing to it
+		// Cheerfully assume that gets handled upstream
+
+		// We don't want to know about this component anymore
+		ComponentInfo component = components.remove(b);
+		if (component != null) {// This shouldn't affect us, but pass it on to
+								// our listeners
+			for (ComponentInfoListener listener : clisteners) {
+				listener.removeComponent(component);
+			}
+		}
+
+	}
+
+	private String constructServiceComponentId(RelationshipInfo rel) {
+		return "/syntheticenhancedservices/" + rel.getName() + "/"
+				+ rel.getProvidedBy().getId();
+	}
+
+	private String constructId(RelationshipInfo b) {
+		return b.getType() + "/" + b.getName() + "/"
+				+ b.getProvidedBy().getId();
+	}
+
+	private void removeSyntheticServiceArtefactsAndNotifyListeners(
+			RelationshipInfo r) {
+		// We need to remove our two relationships and the synthetic
+		// component
+
+		String componentId = constructServiceComponentId(r);
+
+		// Do the relationships first
+		// The registration has type "service registration", and the
+		// original provider and name
+		String registrationRelationshipId = SERVICE_REGISTRATION + "/"
+				+ r.getName() + "/" + r.getProvidedBy().getId();
+		RelationshipInfo registrationRelationship = relationships
+				.get(registrationRelationshipId);
+
+		// The consumers have type "service usage", and the
+		// original name, and the new provided by
+
+		String usageRelationshipId = SERVICE_USAGE + "/" + r.getName() + "/"
+				+ componentId;
+		RelationshipInfo usageRelationship = relationships
+				.get(usageRelationshipId);
+
+		relationships.remove(usageRelationshipId);
+		relationships.remove(registrationRelationshipId);
+
+		// Tell our listeners about the relationships first
+
+		for (RelationshipInfoListener listener : rlisteners) {
+			if (usageRelationship != null) {
+				listener.removeRelationship(usageRelationship);
+			}
+			if (registrationRelationship != null) {
+				listener.removeRelationship(registrationRelationship);
+			}
+
+		}
+
+		ComponentInfo component = components.remove(componentId);
+		if (component != null) {
+			// Tell our listeners their service component went away
+			for (ComponentInfoListener listener : clisteners) {
+				listener.removeComponent(component);
+			}
+		}
+	}
+
+	private void updateSyntheticServiceArtefactsAndNotifyListeners(
+			RelationshipInfo r) {
+		// We need to update our two relationships and the synthetic
+		// component
+		// Hopefully the thing which changed won't prevent us
+		// from finding our relationship
+
+		String componentId = constructServiceComponentId(r);
+
+		// Do the relationships first
+		// The registration has type "service registration", and the
+		// original provider and name
+		String registrationRelationshipId = SERVICE_REGISTRATION + "/"
+				+ r.getName() + "/" + r.getProvidedBy().getId();
+		RelationshipInfoImpl registrationRelationship = (RelationshipInfoImpl) relationships
+				.get(registrationRelationshipId);
+		registrationRelationship.setName(r.getName());
+		registrationRelationship.setRelationshipAspects(r
+				.getRelationshipAspects());
+
+		// The consumers have type "service usage", and the
+		// original name, and the new provided by
+
+		String usageRelationshipId = SERVICE_USAGE + "/" + r.getName() + "/"
+				+ componentId;
+		RelationshipInfoImpl usageRelationship = (RelationshipInfoImpl) relationships
+				.get(usageRelationshipId);
+
+		// The consumers may have changed, so we update the usage relationship
+		usageRelationship.setConsumedBy(r.getConsumedBy());
+		usageRelationship.setName(r.getName());
+		usageRelationship.setRelationshipAspects(r.getRelationshipAspects());
+
+		// Tell our listeners about the relationships first
+
+		for (RelationshipInfoListener listener : rlisteners) {
+			if (usageRelationship != null) {
+				listener.updateRelationship(usageRelationship);
+			}
+			if (registrationRelationship != null) {
+				listener.updateRelationship(registrationRelationship);
+			}
+
+		}
+
+		ComponentInfo component = components.get(componentId);
+		if (component != null) {
+			// Tell our listeners their service component was updated
+			for (ComponentInfoListener listener : clisteners) {
+				listener.updateComponent(component);
+			}
+		}
+	}
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ServiceInterceptor.java b/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ServiceInterceptor.java
index e69de29b..13458847 100644
--- a/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ServiceInterceptor.java
+++ b/aries/trunk/samples-sandbox/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ServiceInterceptor.java
@@ -0,0 +1,131 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.aries.samples.goat.enhancer;
+
+import java.util.Dictionary;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Map;
+
+import org.apache.aries.samples.goat.api.ModelInfoService;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.InvalidSyntaxException;
+import org.osgi.framework.ServiceEvent;
+import org.osgi.framework.ServiceListener;
+import org.osgi.framework.ServiceReference;
+import org.osgi.framework.ServiceRegistration;
+
+public class ServiceInterceptor implements ServiceListener {
+
+	private static final String DISPLAY_NAME = "displayName";
+	/**
+   * 
+   */
+	public static final String SERVICE_ID = "service.id";
+	private final BundleContext ctx;
+	private final Map<String, ServiceRegistration> registrations = new HashMap<String, ServiceRegistration>();
+
+	public ServiceInterceptor(BundleContext ctx) {
+		this.ctx = ctx;
+		// Check all the existing services
+		try {
+			// Handle any existing services
+			ServiceReference[] references = ctx.getAllServiceReferences(
+					ModelInfoService.class.getName(), null);
+
+
+			ctx.addServiceListener(this, "(objectclass='"
+						+ ModelInfoService.class.getName() + "')");
+
+			//If we found any service references...
+			if(references != null && references.length != 0) {
+				for (ServiceReference reference : references) {
+					registerServiceEnhancer(reference);
+				}
+			}
+
+
+		} catch (InvalidSyntaxException e) {
+			e.printStackTrace();
+		}
+		// We could listen for find events and mask the original services if we
+		// wanted to
+		// ServiceRegistration findRegistration =
+		// ctx.registerService(FindHook.class.getName(),
+		// new InterceptorFindHook(), null);
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see
+	 * org.osgi.framework.ServiceListener#serviceChanged(org.osgi.framework.
+	 * ServiceEvent)
+	 */
+	@Override
+	public void serviceChanged(ServiceEvent event) {
+		ServiceReference reference = event.getServiceReference();
+		if (event != null && event.getType() == ServiceEvent.REGISTERED) {
+			registerServiceEnhancer(reference);
+
+		} else if (event != null
+				&& event.getType() == ServiceEvent.UNREGISTERING) {
+			// Better unregister our enhancer
+			Object id = reference.getProperty(SERVICE_ID);
+			ServiceRegistration registration = registrations.get(id);
+			if (registration != null) {
+				registration.unregister();
+				registrations.remove(id);
+			}
+		}
+
+	}
+
+	@SuppressWarnings({ "rawtypes", "unchecked" })
+	private void registerServiceEnhancer(ServiceReference reference) {
+		Object actualService = ctx.getService(reference);
+
+		if (actualService instanceof ModelInfoService) {
+			ModelInfoService infoService = (ModelInfoService) actualService;
+			Object serviceId = reference.getProperty(SERVICE_ID);
+			Object enhancer = new ModelInfoEnhancerService(infoService);
+			Dictionary properties = new Hashtable();
+			Object originalDisplayName = reference.getProperty(DISPLAY_NAME);
+			properties.put(DISPLAY_NAME, originalDisplayName + " [enhanced]");
+			ServiceRegistration registration = ctx.registerService(
+					ModelInfoService.class.getName(), enhancer, properties);
+			registrations.put(serviceId + "", registration);
+		} else {
+			System.out.println("Oh dear - unexpected service "
+					+ actualService.getClass());
+		}
+	}
+
+	/**
+   * 
+   */
+	public void stop() {
+		for (ServiceRegistration registration : registrations.values()) {
+			registration.unregister();
+		}
+
+	}
+
+}
diff --git a/aries/trunk/samples-sandbox/goat/goat-web/src/main/java/org/apache/aries/samples/goat/web/ServerSideClass.java b/aries/trunk/samples-sandbox/goat/goat-web/src/main/java/org/apache/aries/samples/goat/web/ServerSideClass.java
index e69de29b..16d2cc87 100644
--- a/aries/trunk/samples-sandbox/goat/goat-web/src/main/java/org/apache/aries/samples/goat/web/ServerSideClass.java
+++ b/aries/trunk/samples-sandbox/goat/goat-web/src/main/java/org/apache/aries/samples/goat/web/ServerSideClass.java
@@ -0,0 +1,284 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.goat.web;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.servlet.ServletContext;
+
+import org.apache.aries.samples.goat.info.ComponentInfoImpl;
+import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
+
+import org.apache.aries.samples.goat.api.ComponentInfo;
+import org.apache.aries.samples.goat.api.ComponentInfoProvider;
+import org.apache.aries.samples.goat.api.ModelInfoService;
+import org.apache.aries.samples.goat.api.RelationshipInfo;
+import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
+
+import org.directwebremoting.Browser;
+import org.directwebremoting.ScriptBuffer;
+import org.directwebremoting.ScriptSession;
+import org.directwebremoting.ServerContextFactory;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.InvalidSyntaxException;
+import org.osgi.framework.ServiceReference;
+
+public class ServerSideClass {
+
+	private String modelInfoServiceHint = "";
+
+	private ModelInfoService ModelInfoService = null;
+
+	private Map<ModelInfoService, ComponentInfoProvider.ComponentInfoListener> clisteners = new HashMap<ModelInfoService, ComponentInfoProvider.ComponentInfoListener>();
+	private Map<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener> rlisteners = new HashMap<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener>();
+
+	private class ComponentInfoListenerImpl implements
+			ComponentInfoProvider.ComponentInfoListener {
+		String server;
+
+		public ComponentInfoListenerImpl(String server) {
+			this.server = server;
+		}
+
+		public void updateComponent(ComponentInfo b) {
+			if (this.server.equals(modelInfoServiceHint)) {
+				// todo: only issue the add for the new bundle, and affected
+				// other bundles.
+				//getInitialComponents(modelInfoServiceHint);
+				//System.out.println("State is: " + b.getComponentProperties().get("State"));
+				addFunctionCall("addComponent", b);
+			}
+		}
+
+		public void removeComponent(ComponentInfo b) {
+			// todo
+		}
+	}
+	private class RelationshipInfoListenerImpl implements
+			RelationshipInfoProvider.RelationshipInfoListener {
+		String server;
+
+		public RelationshipInfoListenerImpl(String server) {
+			this.server = server;
+		}
+
+		public void updateRelationship(RelationshipInfo r) {
+			if (this.server.equals(modelInfoServiceHint)) {
+				addFunctionCall("addRelationship", r);
+			}
+		}
+
+		public void removeRelationship(RelationshipInfo r) {
+			// todo
+		}
+	}
+
+	public ServerSideClass() {
+		System.err.println("SSC Built!");
+
+	}
+
+	@SuppressWarnings("unused")
+	private String bundleStateToString(int bundleState) {
+		switch (bundleState) {
+		case Bundle.UNINSTALLED:
+			return "UNINSTALLED";
+		case Bundle.INSTALLED:
+			return "INSTALLED";
+		case Bundle.RESOLVED:
+			return "RESOLVED";
+		case Bundle.STARTING:
+			return "STARTING";
+		case Bundle.STOPPING:
+			return "STOPPING";
+		case Bundle.ACTIVE:
+			return "ACTIVE";
+		default:
+			return "UNKNOWN[" + bundleState + "]";
+		}
+	}
+
+	/**
+	 * this is invoked by a page onload.. so until it's invoked.. we dont care
+	 * about components
+	 */
+	public void getInitialComponents(String dataProvider) {
+
+		System.err.println("GET INITIAL BUNDLES ASKED TO USE DATAPROVIDER "
+				+ dataProvider);
+
+		if (dataProvider == null)
+			throw new IllegalArgumentException(
+					"Unable to accept 'null' as a dataProvider");
+
+		// do we need to update?
+		if (!this.modelInfoServiceHint.equals(dataProvider)) {
+
+			this.modelInfoServiceHint = dataProvider;
+
+			if (!(this.ModelInfoService == null)) {
+				// we already had a provider.. we need to shut down the existing
+				// components & relationships in the browsers..
+				addFunctionCall("forgetAboutEverything");
+			}
+
+			ServletContext context = org.directwebremoting.ServerContextFactory
+					.get().getServletContext();
+			Object o = context.getAttribute("osgi-bundlecontext");
+			if (o != null) {
+				if (o instanceof BundleContext) {
+					BundleContext b_ctx = (BundleContext) o;
+
+					System.err.println("Looking up bcip");
+					try {
+						ServiceReference sr[] = b_ctx.getServiceReferences(
+								ModelInfoService.class.getName(),
+								"(displayName=" + this.modelInfoServiceHint
+										+ ")");
+						if (sr != null) {
+							System.err.println("Getting bcip");
+							this.ModelInfoService = (ModelInfoService) b_ctx
+									.getService(sr[0]);
+							System.err.println("Got bcip "
+									+ this.ModelInfoService);
+						} else {
+							System.err.println("UNABLE TO FIND BCIP!!");
+							System.err.println("UNABLE TO FIND BCIP!!");
+							System.err.println("UNABLE TO FIND BCIP!!");
+						}
+					} catch (InvalidSyntaxException ise) {
+
+					}
+
+					if (this.ModelInfoService != null) {
+						if (!rlisteners.containsKey(this.ModelInfoService)) {
+							RelationshipInfoProvider.RelationshipInfoListener rl = new RelationshipInfoListenerImpl(
+									this.modelInfoServiceHint);
+							rlisteners.put(this.ModelInfoService, rl);
+							this.ModelInfoService.getRelationshipInfoProvider()
+									.registerRelationshipInfoListener(rl);
+						}
+
+						if (!clisteners.containsKey(this.ModelInfoService)) {
+							ComponentInfoProvider.ComponentInfoListener cl = new ComponentInfoListenerImpl(
+									this.modelInfoServiceHint);
+							clisteners.put(this.ModelInfoService, cl);
+							this.ModelInfoService.getComponentInfoProvider()
+									.registerComponentInfoListener(cl);
+						}
+					}
+				}
+			}
+
+		}
+
+		Collection<ComponentInfo> bis = this.ModelInfoService
+				.getComponentInfoProvider().getComponents();
+		System.err.println("Got " + (bis == null ? "null" : bis.size())
+				+ " components back from the provider ");
+		if (bis != null) {
+			for (ComponentInfo b : bis) {
+
+				System.err.println("Adding Component .. " + b.getId());
+
+				addFunctionCall("addComponent", b);
+			}
+		}
+
+		Collection<RelationshipInfo> ris = this.ModelInfoService
+				.getRelationshipInfoProvider().getRelationships();
+		System.err.println("Got " + (ris == null ? "null" : ris.size())
+				+ " relationships back from the provider ");
+		if (ris != null) {
+			for (RelationshipInfo r : ris) {
+				System.err.println("Adding relationship type " + r.getType()
+						+ " called " + r.getName() + " from "
+						+ r.getProvidedBy().getId());
+
+				addFunctionCall("addRelationship", r);
+			}
+		}
+
+	}
+
+	private void addFunctionCall(String name, Object... params) {
+		final ScriptBuffer script = new ScriptBuffer();
+		script.appendScript(name).appendScript("(");
+		for (int i = 0; i < params.length; i++) {
+			if (i != 0)
+				script.appendScript(",");
+			script.appendData(params[i]);
+		}
+		script.appendScript(");");
+		Browser.withAllSessions(new Runnable() {
+			public void run() {
+				for (ScriptSession s : Browser.getTargetSessions()) {
+					s.addScript(script);
+				}
+			}
+		});
+	}
+
+	public String[] getProviders() {
+		System.err.println("Getting providers...");
+		ArrayList<String> result = new ArrayList<String>();
+		ServletContext context = ServerContextFactory.get().getServletContext();
+		Object o = context.getAttribute("osgi-bundlecontext");
+		if (o != null) {
+			if (o instanceof BundleContext) {
+				BundleContext b_ctx = (BundleContext) o;
+				try {
+					System.err.println("Getting providers [2]...");
+					ServiceReference[] srs = b_ctx.getServiceReferences(
+							ModelInfoService.class.getName(), null);
+					System.err.println("Got.. " + srs);
+					if (srs == null || srs.length == 0) {
+						System.err.println("NO DATA PROVIDERS");
+						throw new RuntimeException(
+								"Unable to find any data providers");
+					}
+					System.err.println("Processing srs as loop.");
+					for (ServiceReference sr : srs) {
+						System.err.println("Processing srs entry...");
+
+						String name = (String.valueOf(sr
+								.getProperty("displayName")));
+
+						result.add(name);
+					}
+					System.err.println("Processed srs as loop.");
+				} catch (InvalidSyntaxException e) {
+					// wont happen, the exception relates to the filter, (2nd
+					// arg above), which is constant null.
+				}
+			}
+		}
+		System.err.println("Returning " + result.size());
+		String[] arr = new String[result.size()];
+		arr = result.toArray(arr);
+		for (String x : arr) {
+			System.err.println(" - " + x);
+		}
+		return arr;
+	}
+}
