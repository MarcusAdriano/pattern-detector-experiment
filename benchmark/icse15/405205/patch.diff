diff --git a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
index ea4459f1..726e7625 100644
--- a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
+++ b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
@@ -104,6 +104,7 @@ static void initClientMessageIds()
         clientMessageIds.add(SQLState.SECMECH_NOT_SUPPORTED);
         clientMessageIds.add(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED);
         clientMessageIds.add(SQLState.JDBC_DRIVER_REGISTER);
+        clientMessageIds.add(SQLState.NO_CURRENT_ROW);
     }
 
 	public static void main(String[] args) throws Exception {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 05aaf8f0..7e68e8f4 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -3483,7 +3483,7 @@ private boolean updateRowX() throws SqlException {
         
         if (isOnInsertRow_) {
             throw new SqlException(agent_.logWriter_, 
-                new ClientMessageId(SQLState.CURSOR_NOT_POSITIONED_ON_INSERT_ROW));
+                new ClientMessageId(SQLState.NO_CURRENT_ROW));
         }
 
         //if not on a valid row, then do not accept updateXXX calls
@@ -3609,7 +3609,7 @@ private void deleteRowX() throws SqlException {
 
         if (isOnInsertRow_) {
             throw new SqlException(agent_.logWriter_, 
-                new ClientMessageId(SQLState.CURSOR_NOT_POSITIONED_ON_INSERT_ROW));
+                new ClientMessageId(SQLState.NO_CURRENT_ROW));
         }
 
         if (preparedStatementForDelete_ == null) {
@@ -3655,7 +3655,7 @@ private void refreshRowX() throws SqlException {
 	checkForUpdatableResultSet("refreshRow");
         if (isBeforeFirstX() || isAfterLastX() || isOnInsertRow_) {
             throw new SqlException(agent_.logWriter_,
-                new ClientMessageId(SQLState.CURSOR_CANNOT_INVOKE_ON_INSROW_OR_INVALIDROW_OR_READONLY));
+                new ClientMessageId(SQLState.NO_CURRENT_ROW));
         }
 	
         // this method does nothing if ResultSet is TYPE_SCROLL_INSENSITIVE
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 5e348dda..13281048 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1488,7 +1488,6 @@ The message identifier (ie. the value that matches a field in this class)
     String TOO_MANY_COMMANDS_FOR_BATCH = "XJ116.S";
     String CANNOT_BATCH_QUERIES = "XJ117.S";
     String QUERY_BATCH_ON_NON_QUERY_STATEMENT = "XJ118.S";
-    String CURSOR_CANNOT_INVOKE_ON_INSROW_OR_INVALIDROW_OR_READONLY = "XJ120.S";
     String CURSOR_INVALID_OPERATION_AT_CURRENT_POSITION = "XJ121.S";
     String CURSOR_NO_UPDATE_CALLS_ON_CURRENT_ROW = "XJ122.S";
     String CURSOR_NOT_ON_CURRENT_OR_INSERT_ROW = "XJ123.S";
