diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index 58222f49..1d1479d1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -88,6 +88,7 @@ multiple threads and sucks data from the stream (returned from
     EmbedClob(EmbedConnection con) throws SQLException {
         super(con);
         this.clob = new ClobStreamControl (con.getDBName(), this);
+        con.addLOBMapping (this);
     }
 
     /**
@@ -153,6 +154,7 @@ the class implementing the getStream() method for dvd.getStream(),
             }
             this.clob = new StoreStreamClob(storeStream, this);
         }
+        con.addLOBMapping (this);
     }
 
     /**
@@ -678,9 +680,9 @@ public void free()
      * @throws SQLException if the Clob is not valid
      */
     private void checkValidity() throws SQLException{
+        localConn.checkIfClosed();        
         if(!isValid)
             throw newSQLException(SQLState.LOB_OBJECT_INVALID);
-        localConn.checkIfClosed();
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index 256db739..41b1dc95 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -1248,107 +1248,72 @@ public void testClobAfterCommit() throws Exception {
         // this should give blob/clob unavailable exceptions on client
         try {
             shortClob.length();
-            //Check to see if we are running in the client
-            //and a SQLException has not been thrown.
-            if (usingDerbyNetClient()) {
                 //Should have thrown an SQLException in the
-                //Network Client.
                 fail("FAIL - should not be able to access Clob after commit");
-            }
         } catch (SQLException e) {
-            //The same SQLState String BLOB_ACCESSED_AFTER_COMMIT
+            //The same SQLState String INVALID_LOB
             //is used for LOB's(Both Clob and Blob). Ensure that
             //we get the expected exception by comparing the SQLState.
             checkException(INVALID_LOB, e);
-            //In the embedded clobs of small size are
-            //accessible after commit. Hence ensure that
-            //we are dealing with the Embedded side here.
-            assertTrue("FAIL - method should not fail when using embedded",
-                       usingDerbyNetClient());
         }
 
         // these should all give blob/clob data unavailable exceptions
         try {
             clob.length();
-            //Large Clobs on the Embedded side and the NetworkClient
-            //side are not accessible after commit. Should have thrown
-            //an SQLException here.
+            //Large Clobs not accessible after commit. 
+            //Should have thrown an SQLException here.
             fail("FAIL - should not be able to access large Clob after commit");
         } catch (SQLException e) {
-            //The same SQLState String BLOB_ACCESSED_AFTER_COMMIT
+            //The same SQLState String INVALID_LOB
             //is used for LOB's(Both Clob and Blob). Ensure that
             //we get the expected exception by comparing the SQLState.
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(INVALID_LOB, e);
             }
-        }
         try {
             clob.getSubString(2,3);
-            //Large Clobs on the Embedded side and the NetworkClient
-            //side are not accessible after commit. Should have thrown
-            //an SQLException here.
+            //Large Clobs are not accessible after commit. 
+            //Should have thrown an SQLException here.
             fail("FAIL - should not be able to access large Clob after commit");
         } catch (SQLException e) {
-            //The same SQLState String BLOB_ACCESSED_AFTER_COMMIT
+            //The same SQLState String INVALID_LOB
             //is used for LOB's(Both Clob and Blob). Ensure that
             //we get the expected exception by comparing the SQLState.
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(INVALID_LOB, e);
             }
-        }
         try {
             clob.getAsciiStream();
-            //Large Clobs on the Embedded side and the NetworkClient
-            //side are not accessible after commit. Should have thrown
-            //an SQLException here.
+            //Large Clobs are not accessible after commit. 
+            //Should have thrown an SQLException here.
             fail("FAIL - should not be able to access large Clob after commit");
         } catch (SQLException e) {
-            //The same SQLState String BLOB_ACCESSED_AFTER_COMMIT
+            //The same SQLState String INVALID_LOB
             //is used for LOB's(Both Clob and Blob). Ensure that
             //we get the expected exception by comparing the SQLState.
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(INVALID_LOB, e);
             }
-        }
         try {
             clob.position("foo",2);
-            //Large Clobs on the Embedded side and the NetworkClient
-            //side are not accessible after commit. Should have thrown
-            //an SQLException here.
+            //Large Clobs are not accessible after commit. 
+            //Should have thrown an SQLException here.
             fail("FAIL - should not be able to access large Clob after commit");
         } catch (SQLException e) {
-            //The same SQLState String BLOB_ACCESSED_AFTER_COMMIT
+            //The same SQLState String INVALID_LOB
             //is used for LOB's(Both Clob and Blob). Ensure that
             //we get the expected exception by comparing the SQLState.
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(INVALID_LOB, e);
             }
-        }
         try {
             clob.position(clob,2);
-            //Large Clobs on the Embedded side and the NetworkClient
-            //side are not accessible after commit. Should have thrown
-            //an SQLException here.
+            //Large Clobs are not accessible after commit. 
+            //Should have thrown an SQLException here.
             fail("FAIL - should not be able to access large Clob after commit");
         } catch (SQLException e) {
-            //The same SQLState String BLOB_ACCESSED_AFTER_COMMIT
+            //The same SQLState String INVALID_LOB
             //is used for LOB's(Both Clob and Blob). Ensure that
             //we get the expected exception by comparing the SQLState.
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(INVALID_LOB, e);
             }
         }
-    }
 
     /**
      * test accessing clob after closing the connection
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
index 2e1ff567..97572592 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
@@ -139,7 +139,7 @@ public void testClobCreateLocatorSP() throws SQLException {
         //remember in setup a locator is already created
         //hence expected value is 2
         assertEquals("The locator values returned by " +
-            "SYSIBM.CLOBCREATELOCATOR() are incorrect", 2, locator);
+            "SYSIBM.CLOBCREATELOCATOR() are incorrect", 4, locator);
         cs.close();
     }
 
