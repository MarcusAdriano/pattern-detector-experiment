diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index e3f5803e..4a8226d0 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -212,7 +212,7 @@ void runLeaderProcess(boolean weAreReplacement) throws KeeperException,
       }
       
       // should I be leader?
-      if (weAreReplacement && !shouldIBeLeader(leaderProps, core)) {
+      if (weAreReplacement && !shouldIBeLeader(leaderProps, core, weAreReplacement)) {
         rejoinLeaderElection(leaderSeqPath, core);
         return;
       }
@@ -399,7 +399,7 @@ private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)
     leaderElector.joinElection(this, true);
   }
 
-  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {
+  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core, boolean weAreReplacement) {
     log.info("Checking if I should try and be the leader.");
     
     if (isClosed) {
@@ -407,6 +407,12 @@ private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {
       return false;
     }
     
+    if (!weAreReplacement) {
+      // we are the first node starting in the shard - there is a configurable wait
+      // to make sure others participate in sync and leader election, we can be leader
+      return true;
+    }
+    
     if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished()
         .equals(ZkStateReader.ACTIVE)) {
       log.info("My last published State was Active, it's okay to be the leader.");
