diff --git a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java
index c8345ef6..7bffc88b 100644
--- a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java
+++ b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java
@@ -20,8 +20,14 @@
 import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
 import static org.ops4j.pax.exam.OptionUtils.combine;
 
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Properties;
 
 import org.junit.After;
 import org.junit.Before;
@@ -31,6 +37,8 @@
 import org.ops4j.pax.exam.Option;
 import org.ops4j.pax.exam.junit.JUnit4TestRunner;
 import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
+import org.ops4j.pax.url.mvn.Handler;
+import org.ops4j.pax.url.mvn.ServiceConstants;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
@@ -88,6 +96,7 @@ public static MavenArtifactProvisionOption mavenBundle(String groupId,
         .versionAsInProject();
   }
 
+  
   protected static Option[] updateOptions(Option[] options) {
     // We need to add pax-exam-junit here when running with the ibm
     // jdk to avoid the following exception during the test run:
@@ -150,4 +159,55 @@ public static MavenArtifactProvisionOption mavenBundle(String groupId,
     }
   }
  
+  public static URL getUrlToEba(String groupId, String artifactId) throws MalformedURLException {
+    String artifactVersion = getArtifactVersion(groupId, artifactId);
+
+    // Need to use handler from org.ops4j.pax.url.mvn
+    URL urlToEba = new URL(null,
+        ServiceConstants.PROTOCOL + ":" + groupId + "/" +artifactId + "/"
+            + artifactVersion + "/eba", new Handler());
+    return urlToEba;
+  }
+
+  public static String getArtifactVersion(final String groupId, final String artifactId)
+  {
+    final Properties dependencies = new Properties();
+    try {
+      InputStream in = getFileFromClasspath("META-INF/maven/dependencies.properties");
+      try {
+        dependencies.load(in);
+      } finally {
+        in.close();
+      }
+      final String version = dependencies.getProperty(groupId + "/" + artifactId + "/version");
+      if (version == null) {
+        throw new RuntimeException("Could not resolve version. Do you have a dependency for "
+            + groupId + "/" + artifactId + " in your maven project?");
+      }
+      return version;
+    } catch (IOException e) {
+      // TODO throw a better exception
+      throw new RuntimeException(
+          "Could not resolve version. Did you configure the depends-maven-plugin in your maven project? "
+              + " Or maybe you did not run the maven build and you are using an IDE?");
+    }
+  }  
+
+  private static InputStream getFileFromClasspath( final String filePath )
+    throws FileNotFoundException
+  {
+    try
+    {
+        URL fileURL = AbstractIntegrationTest.class.getClassLoader().getResource( filePath );
+        if( fileURL == null )
+        {
+            throw new FileNotFoundException( "File [" + filePath + "] could not be found in classpath" );
+        }
+        return fileURL.openStream();
+    }
+    catch (IOException e)
+    {
+        throw new FileNotFoundException( "File [" + filePath + "] could not be found: " + e.getMessage() );
+    }
+  }
 }
diff --git a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
index 9940e983..608aacec 100644
--- a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
+++ b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
@@ -28,6 +28,7 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.FileReader;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -404,6 +405,42 @@ public void testMutlipleServices() throws Exception{
    
   }
 
+
+
+  //Test for JIRA-461 which currently fails.
+//  @Test
+//  public void testTwitter() throws Exception
+//  {
+//    RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
+//    Repository[] repos = repositoryAdmin.listRepositories();
+//    for (Repository repo : repos) {
+//      repositoryAdmin.removeRepository(repo.getURI());
+//    }
+//
+//    // Use the superclasses' getUrlToEba() method instead of the pax-exam mavenBundle() method because pax-exam is running in a
+//    // diffference bundle which doesn't have visibility to the META-INF/maven/dependencies.properties file used to figure out the
+//    // version of the maven artifact.
+//    URL twitterEbaUrl = getUrlToEba("org.apache.aries.application.itest.twitter",
+//        "org.apache.aries.application.itest.twitter.eba");
+//
+//    AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
+//    repositoryAdmin.addRepository("http://sigil.codecauldron.org/spring-external.obr");
+//    AriesApplication app = manager.createApplication(twitterEbaUrl);
+//    //installing requires a valid url for the bundle in repository.xml
+//
+//    app = manager.resolve(app);
+//
+//    DeploymentMetadata depMeta = app.getDeploymentMetadata();
+//    List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
+//    Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
+//    Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
+//    assertEquals(provision.toString(), 2, provision.size());
+//    assertEquals(useBundles.toString(), 0, useBundles.size());
+//    assertEquals(appContent.toString(), 1, appContent.size());
+//    AriesApplicationContext ctx = manager.install(app);
+//    ctx.start();
+//  }
+  
   private void generateOBRRepoXML(boolean nullURI, String ... bundleFiles) throws Exception
   {
     Set<ModelledResource> mrs = new HashSet<ModelledResource>();
