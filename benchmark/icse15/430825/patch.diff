diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Blob.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Blob.java
index 2911ccb9..4699a49f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Blob.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Blob.java
@@ -125,8 +125,29 @@ public long length() throws SQLException {
         }
     }
 
-    // can return an array that may be have a length shorter than the supplied
-    // length (no padding occurs)
+  /**
+   * Returns as an array of bytes part or all of the <code>BLOB</code>
+   * value that this <code>Blob</code> object designates.  The byte
+   * array contains up to <code>length</code> consecutive bytes
+   * starting at position <code>pos</code>.
+   * The starting position must be between 1 and the length
+   * of the BLOB plus 1. This allows for zero-length BLOB values, from
+   * which only zero-length byte arrays can be returned. 
+   * If a larger length is requested than there are bytes available,
+   * characters from the start position to the end of the BLOB are returned.
+   * @param pos the ordinal position of the first byte in the
+   * <code>BLOB</code> value to be extracted; the first byte is at
+   * position 1
+   * @param length is the number of consecutive bytes to be copied
+   * @return a byte array containing up to <code>length</code>
+   * consecutive bytes from the <code>BLOB</code> value designated
+   * by this <code>Blob</code> object, starting with the
+   * byte at position <code>startPos</code>.
+   * @exception SQLException if there is an error accessing the
+   * <code>BLOB</code>
+   * NOTE: If the starting position is the length of the BLOB plus 1,
+   * zero bytess are returned regardless of the length requested.
+   */
     public byte[] getBytes(long pos, int length) throws SQLException {
         //call checkValidity to exit by throwing a SQLException if
         //the Blob object has been freed by calling free() on it
@@ -142,6 +163,11 @@ public long length() throws SQLException {
                         new ClientMessageId(SQLState.BLOB_BAD_POSITION), 
                         new Long(pos));
                 }
+                if (pos > this.length() + 1) {
+                    throw new SqlException(agent_.logWriter_, 
+                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), 
+                        new Long(pos));
+                }
                 if (length < 0) {
                     throw new SqlException(agent_.logWriter_, 
                         new ClientMessageId(SQLState.BLOB_NONPOSITIVE_LENGTH),
@@ -163,14 +189,14 @@ public long length() throws SQLException {
     private byte[] getBytesX(long pos, int length) throws SqlException {
         checkForClosedConnection();
 
-        // we may need to check for overflow on this cast
         long actualLength;
         try {
+            // actual length is the lesser of the number of bytes requested
+            // and the number of bytes available from pos to the end
             actualLength = Math.min(this.length() - pos + 1, (long) length);
         } catch ( SQLException se ) {
             throw new SqlException(se);
         }
-
         byte[] retVal = new byte[(int) actualLength];
         System.arraycopy(binaryString_, (int) pos + dataOffset_ - 1, retVal, 0, (int) actualLength);
         return retVal;
@@ -225,6 +251,11 @@ public long position(byte[] pattern, long start) throws SQLException {
                     throw new SqlException(agent_.logWriter_, 
                         new ClientMessageId(SQLState.BLOB_NULL_PATTERN_OR_SEARCH_STR));
                 }
+                if (start < 1) {
+                    throw new SqlException(agent_.logWriter_, 
+                        new ClientMessageId(SQLState.BLOB_BAD_POSITION), 
+                            new Long(start));
+                }
                 long pos = positionX(pattern, start);
                 if (agent_.loggingEnabled()) {
                     agent_.logWriter_.traceExit(this, "position(byte[], long)", pos);
@@ -258,6 +289,11 @@ public long position(java.sql.Blob pattern, long start) throws SQLException {
                     throw new SqlException(agent_.logWriter_, 
                         new ClientMessageId(SQLState.BLOB_NULL_PATTERN_OR_SEARCH_STR));
                 }
+                if (start < 1) {
+                    throw new SqlException(agent_.logWriter_, 
+                        new ClientMessageId(SQLState.BLOB_BAD_POSITION), 
+                            new Long(start));
+                }
                 long pos = positionX(pattern, start);
                 if (agent_.loggingEnabled()) {
                     agent_.logWriter_.traceExit(this, "position(Blob, long)", pos);
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
index 500d0bf4..28d8acd4 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
@@ -229,6 +229,28 @@ public long length() throws SQLException {
         }
     }
 
+  /**
+   * Returns a copy of the specified substring
+   * in the <code>CLOB</code> value
+   * designated by this <code>Clob</code> object.
+   * The substring begins at position
+   * <code>pos</code> and has up to <code>length</code> consecutive
+   * characters. The starting position must be between 1 and the length
+   * of the CLOB plus 1. This allows for zero-length CLOB values, from
+   * which only zero-length substrings can be returned. 
+   * If a larger length is requested than there are characters available,
+   * characters to the end of the CLOB are returned.
+   * @param pos the first character of the substring to be extracted.
+   *            The first character is at position 1.
+   * @param length the number of consecutive characters to be copied
+   * @return a <code>String</code> that is the specified substring in
+   *         the <code>CLOB</code> value designated by this <code>Clob</code> object
+   * @exception SQLException if there is an error accessing the
+   * <code>CLOB</code>
+
+   * NOTE: If the starting position is the length of the CLOB plus 1,
+   * zero characters are returned regardless of the length requested.
+   */
     public String getSubString(long pos, int length) throws SQLException {
         
         //call checkValidity to exit by throwing a SQLException if
@@ -244,8 +266,6 @@ public String getSubString(long pos, int length) throws SQLException {
                     agent_.logWriter_.traceEntry(this, "getSubString", (int) pos, length);
                 }
 
-                // We can also do a check for pos > length()
-                // Defer it till FP7 so that proper testing can be performed on this
                 if ( pos <= 0 ) {
                     throw new SqlException(agent_.logWriter_,
                         new ClientMessageId(SQLState.BLOB_BAD_POSITION),
@@ -258,6 +278,11 @@ public String getSubString(long pos, int length) throws SQLException {
                         new Integer(length));
                 }
 
+                if (pos > this.length() + 1) {
+                    throw new SqlException(agent_.logWriter_, 
+                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), 
+                        new Long(pos));                    
+                }
                 retVal = getSubStringX(pos, length);
 
                 if (agent_.loggingEnabled()) {
@@ -276,6 +301,8 @@ private String getSubStringX(long pos, int length) throws SqlException {
         try
         {
             checkForClosedConnection();
+            // actual length is the lesser of the length requested
+            // and the number of characters available from pos to the end
             long actualLength = Math.min(this.length() - pos + 1, (long) length);
             return string_.substring((int) pos - 1, (int) (pos - 1 + actualLength));
         }
@@ -378,6 +405,11 @@ public long position(String searchstr, long start) throws SQLException {
                     throw new SqlException(agent_.logWriter_, 
                         new ClientMessageId(SQLState.BLOB_NULL_PATTERN_OR_SEARCH_STR));
                 }
+                if (start < 1) {
+                    throw new SqlException(agent_.logWriter_, 
+                        new ClientMessageId(SQLState.BLOB_BAD_POSITION), 
+                            new Long(start));
+                }
 
                 long pos = positionX(searchstr, start);
                 if (agent_.loggingEnabled()) {
@@ -424,6 +456,12 @@ public long position(java.sql.Clob searchstr, long start) throws SQLException {
                             searchstr,
                             start);
                 }
+                if (start < 1) {
+                    throw new SqlException(agent_.logWriter_, 
+                        new ClientMessageId(SQLState.BLOB_BAD_POSITION), 
+                            new Long(start));
+                }
+
                 if (searchstr == null) {
                     throw new SqlException(agent_.logWriter_, 
                         new ClientMessageId(SQLState.BLOB_NULL_PATTERN_OR_SEARCH_STR));
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index eeab556b..90284e83 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -294,7 +294,12 @@ public long length()
    * Returns as an array of bytes part or all of the <code>BLOB</code>
    * value that this <code>Blob</code> object designates.  The byte
    * array contains up to <code>length</code> consecutive bytes
-   * starting at position <code>pos</code>.
+   * starting at position <code>startPos</code>.
+   * The starting position must be between 1 and the length
+   * of the BLOB plus 1. This allows for zero-length BLOB values, from
+   * which only zero-length byte arrays can be returned. 
+   * If a larger length is requested than there are bytes available,
+   * characters from the start position to the end of the BLOB are returned.
    * @param startPos the ordinal position of the first byte in the
    * <code>BLOB</code> value to be extracted; the first byte is at
    * position 1
@@ -302,13 +307,12 @@ public long length()
    * @return a byte array containing up to <code>length</code>
    * consecutive bytes from the <code>BLOB</code> value designated
    * by this <code>Blob</code> object, starting with the
-   * byte at position <code>pos</code>.
+   * byte at position <code>startPos</code>.
    * @exception SQLException if there is an error accessing the
    * <code>BLOB</code>
-   NOTE: return new byte[0] if startPos is too large
+   * NOTE: If the starting position is the length of the BLOB plus 1,
+   * zero bytess are returned regardless of the length requested.
    */
-   // PT stream part may get pushed to store
-
     public byte[] getBytes(long startPos, int length)
         throws SQLException
     {
@@ -322,7 +326,7 @@ public long length()
             if (startPos < 1)
                 throw StandardException.newException(
                     SQLState.BLOB_BAD_POSITION, new Long(startPos));
-            if (length <= 0)
+            if (length < 0)
                 throw StandardException.newException(
                     SQLState.BLOB_NONPOSITIVE_LENGTH, new Integer(length));
 
@@ -330,8 +334,8 @@ public long length()
             // if we have a byte array, not a stream
             if (isBytes)
             {
-                // if blob length is less than pos bytes, raise an exception
-                if (myBytes.length < startPos)
+                // if blob length is less than pos bytes + 1, raise an exception
+                if (myBytes.length + 1 < startPos)
                     throw StandardException.newException(
                         SQLState.BLOB_POSITION_TOO_LARGE, new Long(startPos));
                 // cannot go over length of array
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index 142bab08..aa62c219 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -210,7 +210,11 @@ public long length() throws SQLException
    * designated by this <code>Clob</code> object.
    * The substring begins at position
    * <code>pos</code> and has up to <code>length</code> consecutive
-   * characters.
+   * characters. The starting position must be between 1 and the length
+   * of the CLOB plus 1. This allows for zero-length CLOB values, from
+   * which only zero-length substrings can be returned. 
+   * If a larger length is requested than there are characters available,
+   * characters from the start position to the end of the CLOB are returned.
    * @param pos the first character of the substring to be extracted.
    *            The first character is at position 1.
    * @param length the number of consecutive characters to be copied
@@ -219,9 +223,9 @@ public long length() throws SQLException
    * @exception SQLException if there is an error accessing the
    * <code>CLOB</code>
 
-   NOTE: return the empty string if pos is too large
+   * NOTE: If the starting position is the length of the CLOB plus 1,
+   * zero characters are returned regardless of the length requested.
    */
-
     public String getSubString(long pos, int length) throws SQLException
     {
         //call checkValidity to exit by throwing a SQLException if
@@ -231,7 +235,7 @@ public String getSubString(long pos, int length) throws SQLException
         if (pos < 1)
             throw Util.generateCsSQLException(
                 SQLState.BLOB_BAD_POSITION, new Long(pos));
-        if (length <= 0)
+        if (length < 0)
             throw Util.generateCsSQLException(
                 SQLState.BLOB_NONPOSITIVE_LENGTH, new Integer(length));
 
@@ -239,11 +243,11 @@ public String getSubString(long pos, int length) throws SQLException
         if (isString)
         {
             int sLength = myString.length();
-            if (sLength < pos)
+            if (sLength + 1 < pos)
                 throw Util.generateCsSQLException(
                     SQLState.BLOB_POSITION_TOO_LARGE, new Long(pos));
             int endIndex = ((int) pos) + length - 1;
-            // cannot go over length of string, or we get an exception
+            // cannot go over length of string
             return myString.substring(((int) pos) - 1, (sLength > endIndex ? endIndex : sLength));
         }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
index 8cfae39c..bdd52ecf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
@@ -922,6 +922,10 @@ private static void clobTest2(Connection conn)
                 blobclob4BLOB.printInterval(clob, 68, 50, 4, i, clobLength);
                 blobclob4BLOB.printInterval(clob, 1, 50, 5, i, clobLength);
                 blobclob4BLOB.printInterval(clob, 1, 1, 6, i, clobLength);
+                blobclob4BLOB.printInterval(
+                        clob, 1, 0, 7, i, clobLength); // length 0 at start
+                blobclob4BLOB.printInterval(
+                        clob, clobLength + 1, 0, 8, i, clobLength); // and end
                 /*
                 System.out.println(i + "(0) " + clob.getSubString(9905,50));
                 System.out.println(i + "(1) " + clob.getSubString(5910,150));
@@ -934,7 +938,7 @@ private static void clobTest2(Connection conn)
                 if (clobLength > 100)
                 {
                     String res = clob.getSubString(clobLength-99,200);
-                    System.out.println(i + "(7) ");
+                    System.out.println(i + "(9) ");
                     if (res.length() != 100)
                         System.out.println("FAIL : length of substring is " +
                             res.length() + " should be 100");
@@ -1470,11 +1474,6 @@ private static void clobTest6(Connection conn)
 
             
             // 0 or negative position value
-			if (isDerbyNet)
-				System.out.println(" negative tests for clob.getSubstring won't run  for network server  until 5243 is fixed");
-			if (! isDerbyNet)
-			{
-
 				try
 				{
 					clob.getSubString(0,5);
@@ -1497,16 +1496,30 @@ private static void clobTest6(Connection conn)
             {
                 TestUtil.dumpSQLExceptions(e, isOutOfBoundException(e));
             }
-            // zero length value
+            // boundary negative 1 length
+            try {
+                clob.getSubString(1,-1);
+                System.out.println("FAIL = getSubString(1,-1)");
+            } catch (SQLException e) {
+                 TestUtil.dumpSQLExceptions(e, isOutOfBoundException(e));
+             }
+            // before start with length zero
             try
             {
-                clob.getSubString(1,0);
- 				System.out.println("FAIL = getSubString(1,0)");
+                clob.getSubString(0,0);
+ 				System.out.println("FAIL = getSubString(0,0)");
            }
             catch (SQLException e)
             {
                 TestUtil.dumpSQLExceptions(e, isOutOfBoundException(e));
             }
+            // 2 past end with length 0
+            try {
+                clob.getSubString(clobLength + 2,0);
+                System.out.println("FAIL = getSubString(clobLength + 2,0)");
+            }  catch (SQLException e) {
+                TestUtil.dumpSQLExceptions(e, isOutOfBoundException(e));
+            }
             // 0 or negative position value
             try
             {
@@ -1549,7 +1562,6 @@ private static void clobTest6(Connection conn)
             }
             System.out.println("clobTest6 finished");
 			}
-        }
 		catch (SQLException e) {
 			TestUtil.dumpSQLExceptions(e);
 		}
@@ -3264,6 +3276,10 @@ private static void blobTest2(Connection conn)
                 blobclob4BLOB.printInterval(blob, 68, 50, 4, i, blobLength);
                 blobclob4BLOB.printInterval(blob, 1, 50, 5, i, blobLength);
                 blobclob4BLOB.printInterval(blob, 1, 1, 6, i, blobLength);
+                blobclob4BLOB.printInterval(
+                        blob, 1, 0, 7, i, blobLength); // length 0 at start
+                blobclob4BLOB.printInterval(
+                        blob, blobLength + 1, 0, 8, i, blobLength); // and end
                 /*
                 System.out.println(i + "(0) " + new String(blob.getBytes(9905,50), "US-ASCII"));
                 System.out.println(i + "(1) " + new String(blob.getBytes(5910,150), "US-ASCII"));
@@ -3276,7 +3292,7 @@ private static void blobTest2(Connection conn)
                 if (blobLength > 100)
                 {
                     byte[] res = blob.getBytes(blobLength-99,200);
-                    System.out.println(i + "(7) ");
+                    System.out.println(i + "(9) ");
                     if (res.length != 100)
                         System.out.println("FAIL : length of bytes is " +
                             res.length + " should be 100");
@@ -3745,12 +3761,24 @@ private static void blobTest6(Connection conn)
                 // zero length value
                 try
                 {
-                    blob.getBytes(1,0);
+                    blob.getBytes(1,-1);
                 }
         		catch (SQLException e)
                 {
 			        TestUtil.dumpSQLExceptions(e,isOutOfBoundException(e));
 		        }
+                // before begin length 0
+                try {
+                    blob.getBytes(0,0);
+                } catch (SQLException e) {
+                    TestUtil.dumpSQLExceptions(e,isOutOfBoundException(e));
+                }
+                // after end length 0
+                try {
+                    blob.getBytes(blobLength + 2,0);
+                } catch (SQLException e) {
+                    TestUtil.dumpSQLExceptions(e,isOutOfBoundException(e));
+                }
                 // 0 or negative position value
                 try
                 {
@@ -4616,7 +4644,7 @@ private static void clobNegativeTest_Derby265(Connection conn)
     static void printInterval(Clob clob, long pos, int length,
         int testNum, int iteration, int clobLength)
     {
-		if (pos > clobLength)
+		if (pos > clobLength + 1)
 			System.out.println("CLOB getSubString " + pos + " > " + clobLength);
         try
         {
@@ -4635,7 +4663,7 @@ static void printInterval(Clob clob, long pos, int length,
 			if (l1 != clobLength) {
 				System.out.println("CHECK - test has mismatched lengths " + l1 + " != " + clobLength);
 			}
-			if (pos > clobLength)
+			if (pos > clobLength + 1)
 				System.out.println("CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE " + pos + " > " + clobLength);
 
 
@@ -4646,7 +4674,7 @@ static void printInterval(Clob clob, long pos, int length,
 			boolean expected = false;
 
 
-			if (pos < 1 || pos > clobLength)
+			if (pos < 1 || pos > clobLength + 1)
 			{
 				if (isOutOfBoundException(e))
 					expected = true;
@@ -4680,7 +4708,7 @@ static void printInterval(Clob clob, long pos, int length,
     static void printInterval(Blob blob, long pos, int length,
         int testNum, int iteration, long blobLength)
     {
-		if (pos > blobLength)
+		if (pos > blobLength + 1)
 			System.out.println("testing Blob.getBytes() with pos " + pos + " > " + blobLength);
         try
         {
@@ -4693,7 +4721,7 @@ static void printInterval(Blob blob, long pos, int length,
 			if (l1 != blobLength) {
 				System.out.println("CHECK - test has mismatched lengths " + l1 + " != " + blobLength);
 			}
-			if (pos > blobLength)
+			if (pos > blobLength + 1)
 				System.out.println("FAIL testing Blob.getBytes() with pos " + pos + " > " + blobLength);
         }
 		catch (SQLException e)
@@ -4701,15 +4729,15 @@ static void printInterval(Blob blob, long pos, int length,
 			String state = e.getSQLState();
 			boolean expected = false;
 
-			if (pos < 1 || pos > blobLength)
+			if (pos < 1 || pos > blobLength + 1)
 				expected = isOutOfBoundException(e);
 
 			TestUtil.dumpSQLExceptions(e, expected);
 		}
 		catch (Exception e)
 		{
-			if ((pos > blobLength) && isDerbyNet)
-				System.out.println("Known JCC Bug 5914");
+			System.out.println("FAIL: Caught exception " + 
+                                e.toString());
 		}
     }
     static void printPosition(
