diff --git a/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexConfig.java b/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexConfig.java
index 9cc553d6..065ce167 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexConfig.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexConfig.java
@@ -39,6 +39,8 @@
   public static final int defMaxFieldLength=SolrConfig.config.getInt(defaultsName +"/maxFieldLength", -1);
   public static final int defWriteLockTimeout=SolrConfig.config.getInt(defaultsName +"/writeLockTimeout", -1);
   public static final int defCommitLockTimeout=SolrConfig.config.getInt(defaultsName +"/commitLockTimeout", -1);
+  public static final String defLockType=SolrConfig.config.get(defaultsName +"/lockType", null);
+  
 
   /*** These are "final" in lucene 1.9
   static {
@@ -54,6 +56,7 @@
   public final int maxFieldLength;
   public final int writeLockTimeout;
   public final int commitLockTimeout;
+  public final String lockType;
 
   public SolrIndexConfig(String prefix)  {
     useCompoundFile=SolrConfig.config.getBool(prefix+"/useCompoundFile", defUseCompoundFile);
@@ -63,5 +66,6 @@ public SolrIndexConfig(String prefix)  {
     maxFieldLength= SolrConfig.config.getInt(prefix+"/maxFieldLength",defMaxFieldLength);
     writeLockTimeout= SolrConfig.config.getInt(prefix+"/writeLockTimeout", defWriteLockTimeout);
     commitLockTimeout= SolrConfig.config.getInt(prefix+"/commitLockTimeout", defCommitLockTimeout);
+    lockType=SolrConfig.config.get(prefix+"/lockType", defLockType);
   }
 }
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexWriter.java b/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexWriter.java
index 1af9f153..9043d19c 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexWriter.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/update/SolrIndexWriter.java
@@ -18,6 +18,13 @@
 package org.apache.solr.update;
 
 import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.NativeFSLockFactory;
+import org.apache.lucene.store.NoLockFactory;
+import org.apache.lucene.store.SimpleFSLockFactory;
+import org.apache.lucene.store.SingleInstanceLockFactory;
+import org.apache.solr.common.SolrException;
 import org.apache.solr.schema.IndexSchema;
 
 import java.util.logging.Logger;
@@ -55,13 +62,39 @@ private void init(String name, IndexSchema schema, SolrIndexConfig config) {
 
   }
 
+  private static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {
+	  Directory d = FSDirectory.getDirectory(path);
+
+    String rawLockType = (null == config) ? null : config.lockType;
+    if (null == rawLockType) {
+      // we default to "simple" for backwards compatiblitiy
+      log.warning("No lockType configured for "+path+" assuming 'simple'");
+      rawLockType = "simple";
+    }
+    final String lockType = rawLockType.toLowerCase().trim();
+    
+	  if ("simple".equals(lockType)) {
+		  d.setLockFactory(new SimpleFSLockFactory(path));
+	  } else if("native".equals(lockType)) {
+		  d.setLockFactory(new NativeFSLockFactory(path));
+	  } else if("single".equals(lockType)) {
+		  d.setLockFactory(new SingleInstanceLockFactory());
+	  } else if("none".equals(lockType)) {
+		  d.setLockFactory(new NoLockFactory());
+	  } else {
+      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
+                              "Unrecognized lockType: " + rawLockType);
+	  } 
+	  return d;
+  }
+
   public SolrIndexWriter(String name, String path, boolean create, IndexSchema schema) throws IOException {
-    super(path, schema.getAnalyzer(), create);
+    super(getDirectory(path, null), schema.getAnalyzer(), create);
     init(name, schema, null);
   }
 
   public SolrIndexWriter(String name, String path, boolean create, IndexSchema schema, SolrIndexConfig config) throws IOException {
-    super(path, schema.getAnalyzer(), create);
+    super(getDirectory(path, config), schema.getAnalyzer(), create);
     init(name, schema,config);
   }
 
