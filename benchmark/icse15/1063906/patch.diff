diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
index 96a96232..bf469f60 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Connection;
 import java.sql.Statement;
 import java.net.Socket;
+import java.io.File;
 import java.lang.Integer;
 
 import org.apache.derby.jdbc.EmbeddedSimpleDataSource;
@@ -53,6 +54,11 @@ public static void main(String[] args) {
             stmt = con.createStatement();
 
             stmt.execute("create table t1(i int)");
+            // Once we are finished creating the database and making the
+            // connection, create the file minionComplete that BootLockTest
+            //can check in order to proceed with its work.
+            File checkFile = new File(BootLockTest.minionCompleteFileName);
+            checkFile.createNewFile();
             //infinite loop until we get killed by BootLockTest.java
             for(;;)
             {
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
index 669539ca..bd4faa03 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
@@ -58,6 +58,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     private final static String dbName = "BootLockTestDB";
     private final static String dbDir = DEFAULT_DB_DIR + File.separator + dbName;
+    public static String minionCompleteFileName = BootLockTest.dbDir + 
+        File.separator + "minionComplete";
     private final static String dbLockFile = dbDir + File.separator +
     DataFactory.DB_LOCKFILE_NAME;
     private final static String dbExLockFile = dbDir + File.separator +
@@ -181,14 +183,12 @@ private void waitForMinionBoot(Process p, int waitmillis) throws InterruptedExce
         BufferedReader minionSysErr = new BufferedReader(
             new InputStreamReader(p.getErrorStream()));
         String minionErrLine= null ;
+        File checkFile = new File(minionCompleteFileName);
         do {
-            if (lockFile.exists() && servicePropertiesFile.exists()) { 
-                // if the lock file is there and service.properties,
-                // the database has booted, return. If we don't check for
-                // service.properties, we may get just an error that the
-                // directory already exists. We'll give a few seconds too
-                // for service.properties to finish writing.
-                Thread.sleep(3000);
+            if (checkFile.exists()) { 
+                //The checkFile was created by BootLockMinion when we were
+                //sure it was finished with creating the database and making 
+                //the connection. It will get cleaned up with the database.
                 return;
             }
             // otherwise sleep for a second and try again
