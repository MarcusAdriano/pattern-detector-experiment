diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/messages/TestNLS.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/messages/TestNLS.java
index 581f4754..a99333a4 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/messages/TestNLS.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/messages/TestNLS.java
@@ -26,15 +26,20 @@
 
 import java.util.Locale;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LocalizedTestCase;
 
 /**
  */
-public class TestNLS extends TestCase {
+public class TestNLS extends LocalizedTestCase {
   public void testMessageLoading() {
     Message invalidSyntax = new MessageImpl(
         MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
-    assertEquals("Syntax Error: XXX", invalidSyntax.getLocalizedMessage());
+    /* 
+     * if the default locale is ja, you get ja as a fallback:
+     * see ResourceBundle.html#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)
+     */
+    if (!Locale.getDefault().getLanguage().equals("ja"))
+      assertEquals("Syntax Error: XXX", invalidSyntax.getLocalizedMessage(Locale.ENGLISH));
   }
 
   public void testMessageLoading_ja() {
@@ -46,11 +51,21 @@ public void testMessageLoading_ja() {
 
   public void testNLSLoading() {
     String message = NLS
-        .getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION);
+        .getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION, Locale.ENGLISH);
+    /* 
+     * if the default locale is ja, you get ja as a fallback:
+     * see ResourceBundle.html#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)
+     */
+    if (!Locale.getDefault().getLanguage().equals("ja"))
     assertEquals("Truncated unicode escape sequence.", message);
 
-    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
+    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX, Locale.ENGLISH,
         "XXX");
+    /* 
+     * if the default locale is ja, you get ja as a fallback:
+     * see ResourceBundle.html#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)
+     */
+    if (!Locale.getDefault().getLanguage().equals("ja"))
     assertEquals("Syntax Error: XXX", message);
   }
 
@@ -70,10 +85,20 @@ public void testNLSLoading_xx_XX() {
     String message = NLS.getLocalizedMessage(
         MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION,
         locale);
+    /* 
+     * if the default locale is ja, you get ja as a fallback:
+     * see ResourceBundle.html#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)
+     */
+    if (!Locale.getDefault().getLanguage().equals("ja"))
     assertEquals("Truncated unicode escape sequence.", message);
 
     message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
         locale, "XXX");
+    /* 
+     * if the default locale is ja, you get ja as a fallback:
+     * see ResourceBundle.html#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)
+     */
+    if (!Locale.getDefault().getLanguage().equals("ja"))
     assertEquals("Syntax Error: XXX", message);
   }
 
