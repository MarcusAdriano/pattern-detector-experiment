diff --git a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index ee65e6ba..0f68c665 100644
--- a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -28,8 +28,7 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.regex.Pattern;
-import javax.management.MBeanServer;
-import javax.management.ObjectName;
+import javax.management.*;
 
 import com.google.common.collect.Iterables;
 import org.apache.cassandra.db.compaction.LeveledManifest;
@@ -54,6 +53,7 @@
 import org.apache.cassandra.db.marshal.AbstractType;
 import org.apache.cassandra.dht.*;
 import org.apache.cassandra.io.sstable.*;
+import org.apache.cassandra.io.sstable.Descriptor;
 import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.IndexClause;
@@ -257,18 +257,15 @@ private ColumnFamilyStore(Table table, String columnFamilyName, IPartitioner par
         }
     }
 
-    // called when dropping or renaming a CF. Performs mbean housekeeping and invalidates CFS to other operations.
-    public void unregisterMBean()
+    /** call when dropping or renaming a CF. Performs mbean housekeeping and invalidates CFS to other operations */
+    public void invalidate()
     {
         try
         {
             valid = false;
-            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
-            ObjectName nameObj = new ObjectName(mbeanName);
-            if (mbs.isRegistered(nameObj))
-                mbs.unregisterMBean(nameObj);
-           
-            indexManager.unregisterMBeans();
+            unregisterMBean();
+            data.removeAllSSTables();
+            indexManager.invalidate();
         }
         catch (Exception e)
         {
@@ -277,6 +274,14 @@ public void unregisterMBean()
         }
     }
 
+    void unregisterMBean() throws MalformedObjectNameException, InstanceNotFoundException, MBeanRegistrationException
+    {
+        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+        ObjectName nameObj = new ObjectName(mbeanName);
+        if (mbs.isRegistered(nameObj))
+            mbs.unregisterMBean(nameObj);
+    }
+
     public long getMinRowSize()
     {
         return data.getMinRowSize();
@@ -987,12 +992,6 @@ public boolean isValid()
         return valid;
     }
 
-    public void removeAllSSTables() throws IOException
-    {
-        data.removeAllSSTables();
-        indexManager.removeAllIndexes();
-    }
-
     public long getMemtableColumnsCount()
     {
         return getMemtableThreadSafe().getOperations();
diff --git a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/Table.java b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/Table.java
index 9b51703b..7b53ea45 100644
--- a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/Table.java
@@ -29,7 +29,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.concurrent.ConcurrentHashMap;
@@ -41,7 +40,6 @@
 import org.apache.cassandra.db.commitlog.CommitLog;
 import org.apache.cassandra.db.filter.QueryFilter;
 import org.apache.cassandra.db.filter.QueryPath;
-import org.apache.cassandra.db.index.SecondaryIndex;
 import org.apache.cassandra.io.sstable.SSTableDeletingTask;
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.io.util.FileUtils;
@@ -343,7 +341,6 @@ public void dropCf(Integer cfId) throws IOException
             return;
         
         unloadCf(cfs);
-        cfs.removeAllSSTables();
     }
     
     // disassociate a cfs from this table instance.
@@ -361,7 +358,7 @@ private void unloadCf(ColumnFamilyStore cfs) throws IOException
         {
             throw new IOException(e);
         }
-        cfs.unregisterMBean();
+        cfs.invalidate();
     }
     
     /** adds a cf to internal structures, ends up creating disk files). */
diff --git a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndex.java b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndex.java
index 2c3e2265..4f43993e 100644
--- a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndex.java
+++ b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndex.java
@@ -132,9 +132,9 @@ public boolean isIndexBuilt(ByteBuffer columnName)
     public abstract void renameIndex(String newCfName) throws IOException;
     
     /**
-     * Unregisters this index's mbean if one exists
+     * Remove the index and unregisters this index's mbean if one exists
      */
-    public abstract void unregisterMbean();
+    public abstract void invalidate();
     
     
     /**
diff --git a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java
index cba45b1e..99004eaf 100644
--- a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java
+++ b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java
@@ -239,22 +239,12 @@ public SecondaryIndex getIndexForColumn(ByteBuffer column)
     }
 
     /**
-     * Remove all index MBeans
+     * Remove the index
      */
-    public void unregisterMBeans()
+    public void invalidate()
     {
         for (Map.Entry<ByteBuffer, SecondaryIndex> entry : indexesByColumn.entrySet())
-            entry.getValue().unregisterMbean();
-    }
-    
-    /**
-     * Remove all underlying index data
-     * @throws IOException 
-     */
-    public void removeAllIndexes() throws IOException
-    {
-        for (Map.Entry<ByteBuffer, SecondaryIndex> entry : indexesByColumn.entrySet())
-            entry.getValue().removeIndex(entry.getKey());
+            entry.getValue().invalidate();
     }
     
     /**
diff --git a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java
index 1557bd10..492a0278 100644
--- a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java
+++ b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java
@@ -109,8 +109,7 @@ public void updateColumn(DecoratedKey<?> valueKey, ByteBuffer rowKey, IColumn co
 
     public void removeIndex(ByteBuffer columnName) throws IOException
     {        
-        indexCfs.removeAllSSTables();
-        indexCfs.unregisterMBean();
+        indexCfs.invalidate();
     }
 
     public void forceBlockingFlush() throws IOException
@@ -129,9 +128,9 @@ public void forceBlockingFlush() throws IOException
         }
     }
 
-    public void unregisterMbean()
+    public void invalidate()
     {
-        indexCfs.unregisterMBean();
+        indexCfs.invalidate();
     }
 
     public ColumnFamilyStore getIndexCfs()
diff --git a/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/KeyCacheTest.java b/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/KeyCacheTest.java
index cd1fe2ce..d60754e5 100644
--- a/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/KeyCacheTest.java
+++ b/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/KeyCacheTest.java
@@ -90,12 +90,13 @@ public void testKeyCacheLoad() throws Exception
         store.invalidateKeyCache();
         assert store.getKeyCacheSize() == 0;
 
-        // load the cache from disk
+        // load the cache from disk.  unregister the old mbean so we can recreate a new CFS object.
+        // but don't invalidate() the old CFS, which would nuke the data we want to try to load
         store.unregisterMBean(); // unregistering old MBean to test how key cache will be loaded
         ColumnFamilyStore newStore = ColumnFamilyStore.createColumnFamilyStore(Table.open(TABLE1), COLUMN_FAMILY3);
-        assert newStore.getKeyCacheSize() == 100;
+        assertEquals(100, newStore.getKeyCacheSize());
 
-        assert savedMap.size() == 100;
+        assertEquals(100, savedMap.size());
         for (Map.Entry<Pair<Descriptor, DecoratedKey>, Long> entry : savedMap.entrySet())
         {
             assert newStore.getKeyCache().get(entry.getKey()).equals(entry.getValue());
diff --git a/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/compaction/CompactionsTest.java b/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/compaction/CompactionsTest.java
index c5c76ea0..fff1a6da 100644
--- a/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/compaction/CompactionsTest.java
+++ b/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/db/compaction/CompactionsTest.java
@@ -39,7 +39,6 @@
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.io.sstable.*;
 import org.apache.cassandra.utils.ByteBufferUtil;
-import org.apache.cassandra.utils.FBUtilities;
 
 public class CompactionsTest extends CleanupHelper
 {
@@ -231,7 +230,7 @@ private void testDontPurgeAccidentaly(String k, boolean forceDeserialize) throws
         ColumnFamilyStore store = table.getColumnFamilyStore(cfname);
 
         // disable compaction while flushing
-        store.removeAllSSTables();
+        store.clearUnsafe();
         store.disableAutoCompaction();
 
         // Add test row
diff --git a/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java b/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
index adbbd010..71b18900 100644
--- a/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
+++ b/cassandra/branches/cassandra-1.0/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
@@ -28,7 +28,6 @@
 import java.util.*;
 
 import org.apache.cassandra.CleanupHelper;
-import org.apache.cassandra.Util;
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.columniterator.IdentityQueryFilter;
 import org.apache.cassandra.db.context.CounterContext;
@@ -80,9 +79,7 @@ public static void setup() throws Exception
         Util.compactAll(cfs).get();
         assertEquals(1, cfs.getSSTables().size());
         SSTableReader sstable = cfs.getSSTables().iterator().next();
-        // We acquire a reference now, because removeAllSSTables will mark the sstable compacted, and we have work to do with it
-        sstable.acquireReference();
-        cfs.removeAllSSTables();
+        cfs.clearUnsafe();
 
         // transfer the first and last key
         logger.debug("Transferring " + cfs.columnFamily);
