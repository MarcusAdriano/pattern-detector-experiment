diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
index 6c04f2d7..027d065b 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
@@ -51,8 +51,6 @@ public void testFilteredSearch() throws IOException {
     searchFiltered(writer, directory, filter, enforceSingleSegment);
     // run the test on more than one segment
     enforceSingleSegment = false;
-    // reset - it is stateful
-    filter.reset();
     writer.close();
     writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));
     // we index 60 docs - this will create 6 segments
@@ -61,8 +59,7 @@ public void testFilteredSearch() throws IOException {
     directory.close();
   }
 
-  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {
-    try {
+  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) throws IOException {
       for (int i = 0; i < 60; i++) {//Simple docs
         Document doc = new Document();
         doc.add(newStringField(FIELD, Integer.toString(i), Field.Store.YES));
@@ -83,15 +80,9 @@ public void searchFiltered(IndexWriter writer, Directory directory, Filter filte
       assertEquals("Number of matched documents", 1, hits.length);
       reader.close();
     }
-    catch (IOException e) {
-      fail(e.getMessage());
-    }
-    
-  }
  
   public static final class SimpleDocIdSetFilter extends Filter {
     private final int[] docs;
-    private int index;
     
     public SimpleDocIdSetFilter(int[] docs) {
       this.docs = docs;
@@ -103,20 +94,14 @@ public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {
       final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());
       int docBase = context.docBase;
       final int limit = docBase+context.reader().maxDoc();
-      for (;index < docs.length; index++) {
+      for (int index=0;index < docs.length; index++) {
         final int docId = docs[index];
-        if(docId > limit)
-          break;
-        if (docId >= docBase) {
+        if (docId >= docBase && docId < limit) {
           set.set(docId-docBase);
         }
       }
       return set.cardinality() == 0 ? null:set;
     }
-    
-    public void reset(){
-      index = 0;
-    }
   }
 
 }
