diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Parser.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Parser.java
index 573e9d06..d7935cfa 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Parser.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Parser.java
@@ -23,12 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
-/* Strictly speaking we shouldn't import classes under the impl hierarchy here
- * but this is work in progress.
- * manish - Wed Mar 28 13:05:19 PST 2001
- */
-import org.apache.derby.impl.sql.compile.StatementNode;
-
 /**
  * The Parser interface is intended to work with Jack-generated parsers (now JavaCC).
  * We will specify "STATIC=false" when building Jack parsers - this specifies
@@ -56,12 +50,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @exception StandardException		Thrown on failure
 	 */
-	public StatementNode	parseStatement(String statementSQLText,
+	public Visitable parseStatement(String statementSQLText,
 		Object[] paramDefaults) 
 		throws StandardException;
 
 
-	public StatementNode parseStatement(String statementSQLText)
+	public Visitable parseStatement(String statementSQLText)
 		throws StandardException;
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index 90955880..af6d78f8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.NumberDataValue;
 import org.apache.derby.iapi.types.DataValueFactory;
 import org.apache.derby.iapi.services.daemon.IndexStatisticsDaemon;
+import org.apache.derby.iapi.sql.compile.Visitable;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.sql.execute.ExecutionFactory;
 import org.apache.derby.iapi.error.StandardException;
@@ -38,8 +39,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.catalog.UUID;
 import org.apache.derby.iapi.services.uuid.UUIDFactory;
 
-import org.apache.derby.impl.sql.compile.StatementNode;
-
 import java.sql.Types;
 import java.util.List;
 import java.util.Hashtable;
@@ -1290,7 +1289,7 @@ public TriggerDescriptor getTriggerDescriptor(String name, SchemaDescriptor sd)
 	 * @throws StandardException
 	 */
 	public String getTriggerActionString(
-			StatementNode actionStmt,
+			Visitable actionStmt,
 			String oldReferencingName,
 			String newReferencingName,
 			String triggerDefinition,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
index 33f08fa8..4eb6ad48 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
@@ -41,7 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.Parser;
-import org.apache.derby.impl.sql.compile.StatementNode;
+import org.apache.derby.iapi.sql.compile.Visitable;
 
 import java.io.ObjectOutput;
 import java.io.ObjectInput;
@@ -370,7 +370,7 @@ public SPSDescriptor getActionSPS(LanguageConnectionContext lcc)
 			compSchema = getDataDictionary().getSchemaDescriptor(triggerSchemaId, null);
 			CompilerContext newCC = lcc.pushCompilerContext(compSchema);
 			Parser	pa = newCC.getParser();
-			StatementNode stmtnode = (StatementNode)pa.parseStatement(triggerDefinition);
+			Visitable stmtnode = pa.parseStatement(triggerDefinition);
 			lcc.popCompilerContext(newCC);
 					
 			actionSPS.setText(getDataDictionary().getTriggerActionString(stmtnode, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index 23c3890c..3414b5ed 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -327,7 +327,8 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 
 				//Only top level statements go through here, nested statement
 				//will invoke this method from other places
-				StatementNode qt = p.parseStatement(statementText, paramDefaults);
+				StatementNode qt = (StatementNode)
+                        p.parseStatement(statementText, paramDefaults);
 
 				parseTime = getCurrentTimeMillis(lcc);
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index e29f1c6e..0a052adc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.Property;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.reference.Limits;
+import org.apache.derby.iapi.sql.compile.Visitable;
 import org.apache.derby.iapi.sql.conn.Authorizer;
 
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
@@ -72,9 +73,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.impl.sql.compile.CollectNodesVisitor;
 import org.apache.derby.impl.sql.compile.ColumnReference;
-import org.apache.derby.impl.sql.compile.FromBaseTable;
-import org.apache.derby.impl.sql.compile.QueryTreeNode;
-import org.apache.derby.impl.sql.compile.StatementNode;
 import org.apache.derby.impl.sql.compile.TableName;
 import org.apache.derby.impl.sql.depend.BasicDependencyManager;
 
@@ -4750,7 +4748,7 @@ public int compare(Object o1, Object o2) {
 	 * @throws StandardException
 	 */
 	public String getTriggerActionString(
-			StatementNode actionStmt,
+			Visitable actionStmt,
 			String oldReferencingName,
 			String newReferencingName,
 			String triggerDefinition,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
index dd26c386..6bfc9ed2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
@@ -21,10 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package	org.apache.derby.impl.sql.compile;
 
-import java.lang.reflect.Modifier;
 import java.util.Enumeration;
 import java.util.Hashtable;
-import java.util.HashSet;
 import java.util.Vector;
 
 import org.apache.derby.catalog.DefaultInfo;
@@ -546,7 +544,7 @@ private void getResultColumnList(FromBaseTable	fromBaseTable,
 		/* Finally, we can call the parser */
 		// Since this is always nested inside another SQL statement, so topLevel flag
 		// should be false
-		StatementNode qt = p.parseStatement(select);
+		Visitable qt = p.parseStatement(select);
 		if (SanityManager.DEBUG)
 		{
 			if (! (qt instanceof CursorNode))
@@ -1394,7 +1392,7 @@ public boolean requiresDeferredProcessing()
 		/* Finally, we can call the parser */
 		// Since this is always nested inside another SQL statement, so topLevel flag
 		// should be false
-		StatementNode qt = p.parseStatement(select);
+		Visitable qt = p.parseStatement(select);
 		if (SanityManager.DEBUG)
 		{
 			if (! (qt instanceof CursorNode))
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java
index 9d8a9e4c..9797b592 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java
@@ -21,8 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package	org.apache.derby.impl.sql.compile;
 
-import org.apache.derby.iapi.services.context.ContextManager;
-
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
@@ -30,20 +28,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.Parser;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
+import org.apache.derby.iapi.sql.compile.Visitable;
 
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
-import org.apache.derby.iapi.types.TypeId;
-
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
-import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 
 import org.apache.derby.iapi.error.StandardException;
 
-import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
-
 import org.apache.derby.catalog.types.DefaultInfoImpl;
 
 import java.util.Vector;
@@ -256,7 +250,7 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 		/* Finally, we can call the parser */
 		// Since this is always nested inside another SQL statement, so topLevel flag
 		// should be false
-		StatementNode qt = p.parseStatement(values);
+		Visitable qt = p.parseStatement(values);
 		if (SanityManager.DEBUG)
 		{
 			if (! (qt instanceof CursorNode))
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java
index e7e9ed9c..111314d7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java
@@ -21,14 +21,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.compile;
 
-import org.apache.derby.impl.sql.compile.QueryTreeNode;
-import org.apache.derby.iapi.sql.compile.Parser;
-import org.apache.derby.iapi.sql.Statement;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Parser;
+import org.apache.derby.iapi.sql.compile.Visitable;
 
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
-import org.apache.derby.iapi.services.sanity.SanityManager;
 
 public class ParserImpl implements Parser
 {
@@ -73,7 +71,7 @@ public ParserImpl(CompilerContext cc)
 		this.cc = cc;
 	}
 
-	public StatementNode parseStatement(String statementSQLText) 
+	public Visitable parseStatement(String statementSQLText)
 		throws StandardException
 	{
 		return parseStatement(statementSQLText, (Object[])null);
@@ -126,7 +124,7 @@ private SQLParser getParser()
 	 * @exception StandardException	Thrown on error
 	 */
 
-	public StatementNode parseStatement(String statementSQLText, Object[] paramDefaults) 
+	public Visitable parseStatement(String statementSQLText, Object[] paramDefaults)
 		throws StandardException
 	{
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index 13d04486..0d6f3df3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -37,7 +37,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.classfile.VMOpcode;
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 import org.apache.derby.iapi.services.context.ContextManager;
-import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.loader.ClassFactory;
 import org.apache.derby.iapi.services.loader.ClassInspector;
 import org.apache.derby.iapi.services.sanity.SanityManager;
@@ -783,7 +782,7 @@ StatementNode parseStatement(String sql, boolean internalSQL) throws StandardExc
 		try
 		{
 			Parser p = newCC.getParser();
-			return p.parseStatement(sql);
+			return (StatementNode) p.parseStatement(sql);
 		}
 
 		finally
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index 6e7048a0..cd2eba0e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -21,8 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package	org.apache.derby.impl.sql.compile;
 
-import org.apache.derby.iapi.services.context.ContextManager;
-
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.CostEstimate;
@@ -34,7 +32,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.compile.Visitable;
 import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
-import org.apache.derby.iapi.sql.compile.RowOrdering;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
@@ -44,35 +41,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 
-import org.apache.derby.iapi.sql.execute.ExecutionContext;
-
-import org.apache.derby.iapi.sql.Activation;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
-import org.apache.derby.iapi.types.StringDataValue;
 import org.apache.derby.iapi.sql.ResultColumnDescriptor;
 import org.apache.derby.iapi.sql.ResultDescription;
-import org.apache.derby.iapi.sql.ResultSet;
-
-import org.apache.derby.iapi.types.TypeId;
 
 import org.apache.derby.iapi.store.access.TransactionController;
 
-import org.apache.derby.iapi.services.loader.GeneratedMethod;
-
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.reference.ClassName;
 
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 
-import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
-import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
-
 import org.apache.derby.iapi.util.JBitSet;
 import org.apache.derby.iapi.services.classfile.VMOpcode;
 
 import org.apache.derby.catalog.types.DefaultInfoImpl;
 
-import java.util.Properties;
 import java.util.Vector;
 import java.util.Set;
 
@@ -1242,7 +1226,7 @@ private ResultSetNode generateProjectRestrictForInsert(
 		/* Finally, we can call the parser */
 		// Since this is always nested inside another SQL statement, so topLevel flag
 		// should be false
-		StatementNode qt = p.parseStatement(values);
+		Visitable qt = p.parseStatement(values);
 		if (SanityManager.DEBUG)
 		{
 			if (! (qt instanceof CursorNode))
diff --git a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
index c3914f1d..afc462c0 100644
--- a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
+++ b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.monitor.ModuleSupportable;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.uuid.UUIDFactory;
+import org.apache.derby.iapi.sql.compile.Visitable;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.sql.depend.DependencyManager;
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
@@ -65,7 +66,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.DataValueFactory;
 import org.apache.derby.iapi.types.NumberDataValue;
 import org.apache.derby.iapi.types.RowLocation;
-import org.apache.derby.impl.sql.compile.StatementNode;
 
 /**
  * DataDictionary implementation that does nothing!
@@ -489,7 +489,7 @@ public void invalidateAllSPSPlans() throws StandardException {
 	}
 
 	public String getTriggerActionString(
-			StatementNode actionStmt,
+			Visitable actionStmt,
 			String oldReferencingName,
 			String newReferencingName,
 			String triggerDefinition,
