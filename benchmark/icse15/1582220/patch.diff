diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index dcaf7a9f..48262ef4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -29,7 +29,6 @@ Licensed to the Apache Software Foundation (ASF) under one
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.net.URLClassLoader;
 import java.security.AccessController;
 import java.sql.CallableStatement;
 import java.sql.Connection;
@@ -46,6 +45,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 import junit.framework.TestSuite;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.ClasspathSetup;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.JDBCDataSource;
@@ -72,7 +72,7 @@ public DatabaseClassLoadingTest(String name)
      * Ordering is important here so the fixtures are added
      * explicitly.
      */
-    public static Test suite()
+    public static Test suite() throws Exception
     {
         final TestSuite suite = new TestSuite("DatabaseClassLoadingTest");
         
@@ -117,8 +117,15 @@ public static Test suite()
            suite.addTest(SecurityManagerSetup.noSecurityManager(
                    new DatabaseClassLoadingTest("testDatabaseInJar"))); 
 
+            // DERBY-2162: Only run this test case on platforms that support
+            // the URLClassLoader.close() method. Otherwise, we won't be able
+            // to delete the jar file afterwards.
+            if (ClasspathSetup.supportsClose()) {
            suite.addTest(SecurityManagerSetup.noSecurityManager(
-                   new DatabaseClassLoadingTest("testDatabaseInClasspath")));
+                    new ClasspathSetup(
+                        new DatabaseClassLoadingTest("testDatabaseInClasspath"),
+                        SupportFilesSetup.getReadOnlyURL("dclt.jar"))));
+            }
            
            // No security manager because the test uses getClass().getClassLoader()
            // in an installed jar to ensure that the class loader for
@@ -638,34 +645,11 @@ public void testDatabaseInJar() throws SQLException
         readOnlyTest(ds);
     }
     
-    public void testDatabaseInClasspath() throws SQLException, MalformedURLException
+    public void testDatabaseInClasspath() throws SQLException
     {
         String dbName = "classpath:dbro";
         DataSource ds = JDBCDataSource.getDataSource(dbName);
-        
-        try {
-            ds.getConnection();
-            fail("opened database before it was on classpath");
-        } catch (SQLException e)
-        {
-           assertSQLState("XJ004", e);
-        }
-        
-        URL jarURL = SupportFilesSetup.getReadOnlyURL("dclt.jar");
-        
-        // DERBY-2179 - temp disable using the class loader
-        // (since due to DERBY-2162) it's not working anyway)
-        // need to re-write code not to assume there is no
-        // existing thread context loader.
-        //setContextClassLoader(jarURL);
-        try {
-            // Disabled due to DERBY-2162, running this opens
-            // the database thus accessing resources and means the
-            // jar file cannot be cleaned up.
-            // readOnlyTest(ds);
-        } finally {
-            //setContextClassLoader(null);
-        } 
+        readOnlyTest(ds);
     }
     
     /**
@@ -1331,17 +1315,4 @@ private static void addFile(ZipOutputStream zos, File f, String dbName, int old)
         in.close();
         zos.closeEntry();
     }
-    
-    private static void setContextClassLoader(final URL url)
-    {
-        AccessController.doPrivileged
-        (new java.security.PrivilegedAction<Void>() {
-            public Void run()  {
-                URLClassLoader cl = 
-                    url == null ? null : new URLClassLoader(new URL[] {url});
-                java.lang.Thread.currentThread().setContextClassLoader(cl);
-              return null;
-            }
-        });
-    }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java
index 352d0d43..3fda7f42 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java
@@ -27,19 +27,13 @@
 import org.apache.derbyTesting.junit.Decorator;
 
 
-public class FullCollationTests extends CollationTest {
-    
-    public FullCollationTests(String name) {
-        super(name);
-       
-    }
-
+public class FullCollationTests extends TestSuite {
     
     /**
      * Return a suite that uses a single use database with
      * a primary fixture from this test plus all tests
      */
-    public static Test suite() 
+    public static Test suite() throws Exception
     {
         TestSuite suite = new TestSuite("FullCollationTests:territory=" +"no_NO");
         suite.addTest(new CollationTest("testNorwayCollation"));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java
index f10d1ba1..32cc2fd6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.lang;
 
 import java.io.File;
+import java.net.URL;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -351,17 +352,16 @@ private String  nameOfTest()
     /**
      * Construct top level suite in this JUnit test
      */
-    public static Test suite()
+    public static Test suite() throws Exception
     {
         TestSuite suite = new TestSuite();
 
         //
         // Special version of the test which uses an encrypted database for credentials.
-        // Not run on windows until DERBY-5618 is addressed.
-        // Also not run on small devices because encryption is not supported there
-        // by default.
+        // Only run on platforms where we can expect cleanup of support files
+        // to succeed (DERBY-5618).
         //
-        if ( !onWindows() && !JDBC.vmSupportsJSR169() )
+        if (enableSubprotocolTests())
         {
             suite.addTest
                 (
@@ -380,9 +380,21 @@ public static Test suite()
         // should be OK to run in the local time zone.
         return new TimeZoneTestSetup(suite, "GMT");
     }
-    private static  boolean onWindows()
-    {
-        return getSystemProperty("os.name").startsWith("Windows");
+
+    /**
+     * Check whether or not tests for subprotocols should be enabled
+     * on this platform.
+     */
+    private static boolean enableSubprotocolTests() {
+        // DERBY-5618: On Windows, we are not able to delete the jar files
+        // used by the tests for the classpath subsubprotocol if we don't
+        // close the URLClassLoader when we're done. Closing the class loader
+        // can only be done on Java 7 and higher.
+        //
+        // Run the tests if the Java version supports URLClassLoader.close(),
+        // or if we're on a non-Windows platform (where the jar files can be
+        // deleted even if the class loader hasn't been closed).
+        return ClasspathSetup.supportsClose() || !isWindowsPlatform();
     }
 
     /**
@@ -390,7 +402,7 @@ private static  boolean onWindows()
      * Create a suite of all test configurations.
      * </p>
      */
-    private static  Test   allConfigurations( boolean clientServer )
+    private static Test allConfigurations(boolean clientServer) throws Exception
     {
         TestSuite suite = new TestSuite();
 
@@ -442,9 +454,10 @@ private static  Test   allConfigurations( boolean clientServer )
              );
         
         //
-        // For testing subprotocols. Cleanup of support files is blocked by DERBY-5618.
+        // For testing subprotocols. Only run on platforms where we can
+        // expect cleanup of support files to succeed (DERBY-5618).
         //
-        if ( !onWindows() )
+        if (enableSubprotocolTests())
         {
             //
             // NATIVE authentication with credentials in read-only databases accessed via jar subprotocol
@@ -481,7 +494,7 @@ private static  Test   allConfigurations( boolean clientServer )
                   ( CLASSPATH, NATIVE, LOCAL, DONT_DISABLE_AUTH, DISABLE_JAVA_SECURITY )
                   ).decorate( clientServer )
                  );
-        }   // end if !onWindows()
+        }
 
         return suite;
     }
@@ -493,7 +506,7 @@ private static  Test   allConfigurations( boolean clientServer )
      * stored properties that can't be removed at tearDown time.
      * </p>
      */
-    private Test    decorate( boolean clientServer )
+    private Test decorate(boolean clientServer) throws Exception
     {
         String      credentialsDBPhysicalName = TestConfiguration.generateUniqueDatabaseName();
         
@@ -534,24 +547,17 @@ private Test    decorate( boolean clientServer )
         //    };
         
         //
-        // For testing subprotocols. Cleanup of support files is blocked by DERBY-5618.
+        // For testing subprotocols. Only run on platforms where we can
+        // expect cleanup of support files to succeed (DERBY-5618).
         //
-        if ( !onWindows() )
+        if (enableSubprotocolTests())
         {
-            // Add the jar files needed for testing jar and classpath subprotocols.
-            result = new SupportFilesSetup( result, SUPPORT_FILES_SOURCE, null, SUPPORT_FILES_TARGET, null );
-
-            //
             // Add a jar file to the classpath so that we can test the classpath subprotocol.
-            //
-            File        currentDirectory = currentDirectory();
-            File        readOnlyDirectory = new File( currentDirectory, SupportFilesSetup.EXTIN );
-            File        nast2Jar = new File( readOnlyDirectory, NAST2_JAR_FILE );
+            URL nast2Jar = SupportFilesSetup.getReadOnlyURL(NAST2_JAR_FILE);
+            result = new ClasspathSetup(result, nast2Jar);
 
-            try {
-                result = new ClasspathSetup( result, nast2Jar.toURI().toURL() );
-            }
-            catch (Exception e) { printStackTrace( e ); }
+            // Add the jar files needed for testing jar and classpath subprotocols.
+            result = new SupportFilesSetup( result, SUPPORT_FILES_SOURCE, null, SUPPORT_FILES_TARGET, null );
         }
         
         //
@@ -866,12 +872,11 @@ private void    vetCoreBehavior()   throws Exception
 
         ///////////////////////////////////////////////////////////////////////////////////
         //
-        // Vet databases accessed via subprotocols. Not run on Windows machines
-        // because of DERBY-5618.
+        // Vet databases accessed via subprotocols.
         //
         ///////////////////////////////////////////////////////////////////////////////////
 
-        if ( !onWindows() )
+        if (enableSubprotocolTests())
         {
             // database accessed via jar subprotocol
             vetProtocol( jarDBName( _credentialsDBLocation ) );
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index 19297182..54756c30 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -49,7 +49,7 @@ private _Suite(String name) {
 		super(name);
 	}
 
-	public static Test suite() {
+    public static Test suite() throws Exception {
 
 		TestSuite suite = new TestSuite("lang");
         
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java
index f48ee637..2f607ec3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java
@@ -19,10 +19,13 @@
  */
 package org.apache.derbyTesting.junit;
 
+import java.io.Closeable;
+import java.io.IOException;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.security.PrivilegedExceptionAction;
 
 import junit.extensions.TestSetup;
 import junit.framework.Test;
@@ -49,6 +52,7 @@
 
     private URL             _resource;
     private ClassLoader _originalClassLoader;
+    private URLClassLoader _newClassLoader;
 
     ///////////////////////////////////////////////////////////////////////////////////
     //
@@ -61,7 +65,7 @@
      * Add the indicated URL to the classpath.
      * </p>
      */
-    public  ClasspathSetup( Test test, URL resource )  throws Exception
+    public ClasspathSetup(Test test, URL resource)
     {
         super( test );
         
@@ -84,9 +88,9 @@ public Void run()
                  { 
                      _originalClassLoader = Thread.currentThread().getContextClassLoader();
 
-                     URLClassLoader newClassLoader = new URLClassLoader( new URL[] { _resource }, _originalClassLoader );
+                     _newClassLoader = new URLClassLoader( new URL[] { _resource }, _originalClassLoader );
 
-                     Thread.currentThread().setContextClassLoader( newClassLoader );
+                     Thread.currentThread().setContextClassLoader( _newClassLoader );
                      
                      return null;
                  }
@@ -94,22 +98,42 @@ public Void run()
              );
     }
     
-    protected void tearDown()
+    protected void tearDown() throws Exception
     {
         AccessController.doPrivileged
             (
-             new PrivilegedAction<Void>()
+             new PrivilegedExceptionAction<Void>()
              {
-                 public Void run()
+                 public Void run() throws IOException
                  { 
                      Thread.currentThread().setContextClassLoader( _originalClassLoader );
                      
+                     // On Java 7 and higher, URLClassLoader implements the
+                     // Closable interface and has a close() method. Use that
+                     // method, if it's available, to free all resources
+                     // associated with the class loader. DERBY-2162.
+                     if (_newClassLoader instanceof Closeable) {
+                        ((Closeable) _newClassLoader).close();
+                     }
+
                      return null;
                  }
              }
              );
-    }
 
-}
+        _originalClassLoader = null;
+        _newClassLoader = null;
+        _resource = null;
+    }
 
+    /**
+     * Check whether this platform supports closing a {@code URLClassLoader}.
+     *
+     * @return {@code true} if {@code URLClassLoader} has a {@code close()}
+     * method (Java 7 and higher), or {@code false} otherwise
+     */
+    public static boolean supportsClose() {
+        return Closeable.class.isAssignableFrom(URLClassLoader.class);
+    }
 
+}
