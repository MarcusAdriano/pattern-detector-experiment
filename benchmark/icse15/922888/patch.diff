diff --git a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/BundleStateMBean.java b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/BundleStateMBean.java
index af920eeb..bf191edd 100644
--- a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/BundleStateMBean.java
+++ b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/BundleStateMBean.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,8 @@
  * emits events that clients can use to get notified of the changes in the
  * bundle state of the framework.
  * 
- * @version $Rev$
+ * @version $Revision$
+ * @ThreadSafe
  */
 public interface BundleStateMBean {
 	/**
@@ -75,7 +76,9 @@
 	 * {@link #KEY_ITEM}.
 	 */
 	TabularType HEADERS_TYPE = Item.tabularType("HEADERS",
-			"The table of bundle headers", HEADER_TYPE, new String[] { KEY });
+																"The table of bundle headers",
+																HEADER_TYPE,
+																KEY);
 
 	/**
 	 * The key LOCATION, used in {@link #LOCATION_ITEM}.
@@ -219,7 +222,7 @@
 	Item REMOVAL_PENDING_ITEM = new Item(REMOVAL_PENDING,
 			"Whether the bundle is pending removal", SimpleType.BOOLEAN);
 	/**
-	 * The key REQUIRED, used in {@value #REQUIRED_ITEM}.
+	 * The key REQUIRED, used in {@link #REQUIRED_ITEM}.
 	 */
 	String REQUIRED = "Required";
 
@@ -230,7 +233,7 @@
 	Item REQUIRED_ITEM = new Item(REQUIRED, "Whether the bundle is required",
 			SimpleType.BOOLEAN);
 	/**
-	 * The key FRAGMENT, used in {@value #FRAGMENT_ITEM}.
+	 * The key FRAGMENT, used in {@link #FRAGMENT_ITEM}.
 	 */
 	String FRAGMENT = "Fragment";
 
@@ -241,7 +244,7 @@
 	Item FRAGMENT_ITEM = new Item(FRAGMENT, "Whether the bundle is a fragment",
 			SimpleType.BOOLEAN);
 	/**
-	 * The key REGISTERED_SERVICES, used in {@value #REGISTERED_SERVICES_ITEM}.
+	 * The key REGISTERED_SERVICES, used in {@link #REGISTERED_SERVICES_ITEM}.
 	 */
 	String REGISTERED_SERVICES = "RegisteredServices";
 
@@ -254,7 +257,7 @@
 			"The registered services of the bundle",
 			JmxConstants.LONG_ARRAY_TYPE);
 	/**
-	 * The key SERVICES_IN_USE, used in {@value #SERVICES_IN_USE_ITEM}.
+	 * The key SERVICES_IN_USE, used in {@link #SERVICES_IN_USE_ITEM}.
 	 */
 	String SERVICES_IN_USE = "ServicesInUse";
 
@@ -417,10 +420,11 @@
 
 	/**
 	 * The Tabular Type for a list of bundles. The row type is
-	 * {@link #BUNDLE_TYPE}.
+	 * {@link #BUNDLE_TYPE} and the index is {@link #IDENTIFIER}.
 	 */
 	TabularType BUNDLES_TYPE = Item.tabularType("BUNDLES", "A list of bundles",
-			BUNDLE_TYPE, new String[] { IDENTIFIER });
+																BUNDLE_TYPE,
+																IDENTIFIER);
 
 	/**
 	 * Answer the list of identifiers of the bundles this bundle depends upon
diff --git a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/cm/ConfigurationAdminMBean.java b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/cm/ConfigurationAdminMBean.java
index 688a509e..1d3936bc 100644
--- a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/cm/ConfigurationAdminMBean.java
+++ b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/cm/ConfigurationAdminMBean.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,8 @@
  * This MBean provides the management interface to the OSGi Configuration
  * Administration Service.
  * 
- * @version $Rev$
+ * @version $Revision$
+ * @ThreadSafe
  */
 public interface ConfigurationAdminMBean {
 	/**
@@ -54,7 +55,7 @@
 	 * @return the pid of the created configuation
 	 * @throws IOException if the operation failed
 	 */
-	String createFactoryConfiguration(String factoryPid, String location)
+	String createFactoryConfigurationForLocation(String factoryPid, String location)
 			throws IOException;
 
 	/**
@@ -72,7 +73,7 @@ String createFactoryConfiguration(String factoryPid, String location)
 	 * @param location the bundle location
 	 * @throws IOException if the operation fails
 	 */
-	void delete(String pid, String location) throws IOException;
+	void deleteForLocation(String pid, String location) throws IOException;
 
 	/**
 	 * Delete the configurations matching the filter specification.
@@ -112,7 +113,7 @@ String createFactoryConfiguration(String factoryPid, String location)
 	 * @return the factory PID
 	 * @throws IOException if the operation fails
 	 */
-	String getFactoryPid(String pid, String location) throws IOException;
+	String getFactoryPidForLocation(String pid, String location) throws IOException;
 
 	/**
 	 * Answer the contents of the configuration <p/>
@@ -136,7 +137,7 @@ String createFactoryConfiguration(String factoryPid, String location)
 	 * @return the table of contents
 	 * @throws IOException if the operation fails
 	 */
-	TabularData getProperties(String pid, String location) throws IOException;
+	TabularData getPropertiesForLocation(String pid, String location) throws IOException;
 
 	/**
 	 * Answer the list of PID/Location pairs of the configurations managed by
@@ -182,6 +183,6 @@ String createFactoryConfiguration(String factoryPid, String location)
 	 * @param properties the table of properties
 	 * @throws IOException if the operation fails
 	 */
-	void update(String pid, String location, TabularData properties)
+	void updateForLocation(String pid, String location, TabularData properties)
 			throws IOException;
 }
diff --git a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/provisioning/ProvisioningServiceMBean.java b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/provisioning/ProvisioningServiceMBean.java
index 9a5b8328..c8b97a1f 100644
--- a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/provisioning/ProvisioningServiceMBean.java
+++ b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/service/provisioning/ProvisioningServiceMBean.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,8 @@
  * This MBean represents the management interface to the OSGi Initial
  * Provisioning Service
  * 
- * @version $Rev$
+ * @version $Revision$
+ * @ThreadSafe
  */
 public interface ProvisioningServiceMBean {
 	/**
@@ -54,7 +55,7 @@
 	 *         Provisioning Information dictionary and no bundles must be
 	 *         started or installed.
 	 */
-	public void addInformation(String zipURL) throws IOException;
+	public void addInformationFromZip(String zipURL) throws IOException;
 
 	/**
 	 * Adds the key/value pairs contained in <code>info</code> to the
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
index 8c9aabb7..2b894da3 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
@@ -57,13 +57,13 @@ public ConfigurationAdmin(org.osgi.service.cm.ConfigurationAdmin configurationAd
      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#createFactoryConfiguration(java.lang.String)
      */
     public String createFactoryConfiguration(String factoryPid) throws IOException {
-        return createFactoryConfiguration(factoryPid, null); 
+        return createFactoryConfigurationForLocation(factoryPid, null); 
     }
 
     /**
-     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#createFactoryConfiguration(java.lang.String, java.lang.String)
+     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#createFactoryConfigurationForLocation(java.lang.String, java.lang.String)
      */
-    public String createFactoryConfiguration(String factoryPid, String location) throws IOException {
+    public String createFactoryConfigurationForLocation(String factoryPid, String location) throws IOException {
         if (factoryPid == null || factoryPid.length() < 1) {
             throw new IllegalArgumentException("Argument factoryPid cannot be null or empty");
         }
@@ -75,13 +75,13 @@ public String createFactoryConfiguration(String factoryPid, String location) thr
      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#delete(java.lang.String)
      */
     public void delete(String pid) throws IOException {
-       delete(pid, null);
+       deleteForLocation(pid, null);
     }
 
     /**
-     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#delete(java.lang.String, java.lang.String)
+     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#deleteForLocation(java.lang.String, java.lang.String)
      */
-    public void delete(String pid, String location) throws IOException {
+    public void deleteForLocation(String pid, String location) throws IOException {
         if (pid == null || pid.length() < 1) {
             throw new IllegalArgumentException("Argument pid cannot be null or empty");
         }
@@ -149,13 +149,13 @@ public String getBundleLocation(String pid) throws IOException {
      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getFactoryPid(java.lang.String)
      */
     public String getFactoryPid(String pid) throws IOException {
-       return getFactoryPid(pid, null);
+       return getFactoryPidForLocation(pid, null);
     }
 
     /**
-     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getFactoryPid(java.lang.String, java.lang.String)
+     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getFactoryPidForLocation(java.lang.String, java.lang.String)
      */
-    public String getFactoryPid(String pid, String location) throws IOException {
+    public String getFactoryPidForLocation(String pid, String location) throws IOException {
         if (pid == null || pid.length() < 1) {
             throw new IllegalArgumentException("Argument pid cannot be null or empty");
         }
@@ -167,14 +167,14 @@ public String getFactoryPid(String pid, String location) throws IOException {
      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getProperties(java.lang.String)
      */
     public TabularData getProperties(String pid) throws IOException {
-       return getProperties(pid, null);
+       return getPropertiesForLocation(pid, null);
     }
 
     /**
-     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getProperties(java.lang.String, java.lang.String)
+     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getPropertiesForLocation(java.lang.String, java.lang.String)
      */
     @SuppressWarnings("unchecked")
-    public TabularData getProperties(String pid, String location) throws IOException {
+    public TabularData getPropertiesForLocation(String pid, String location) throws IOException {
         if (pid == null || pid.length() < 1) {
             throw new IllegalArgumentException("Argument pid cannot be null or empty");
         }
@@ -206,14 +206,14 @@ public void setBundleLocation(String pid, String location) throws IOException {
      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#update(java.lang.String, javax.management.openmbean.TabularData)
      */
     public void update(String pid, TabularData configurationTable) throws IOException {
-        update(pid, null, configurationTable);
+        updateForLocation(pid, null, configurationTable);
     }
 
     /**
-     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#update(java.lang.String, java.lang.String, javax.management.openmbean.TabularData)
+     * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#updateForLocation(java.lang.String, java.lang.String, javax.management.openmbean.TabularData)
      */
     @SuppressWarnings("unchecked")
-    public void update(String pid, String location, TabularData configurationTable) throws IOException {
+    public void updateForLocation(String pid, String location, TabularData configurationTable) throws IOException {
         if (pid == null || pid.length() < 1) {
             throw new IllegalArgumentException("Argument pid cannot be null or empty");
         }
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningService.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningService.java
index 83fb9e04..070ea89c 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningService.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningService.java
@@ -52,9 +52,9 @@ public ProvisioningService(org.osgi.service.provisioning.ProvisioningService pro
     }
     
     /**
-     * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#addInformation(java.lang.String)
+     * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#addInformationFromZip(java.lang.String)
      */
-    public void addInformation(String zipURL) throws IOException {
+    public void addInformationFromZip(String zipURL) throws IOException {
         if (zipURL == null || zipURL.length() < 1) {
             throw new IllegalArgumentException("Argument zipURL cannot be null or empty");
         }
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminTest.java
index 09f786fe..f4f97334 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminTest.java
@@ -59,7 +59,7 @@ public void testCreateFactoryConfiguration() throws Exception {
         
         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
         assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfiguration(fpid));
-        assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfiguration(fpid, "/bundlex"));
+        assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfigurationForLocation(fpid, "/bundlex"));
         
     }
 
@@ -80,7 +80,7 @@ public void testDelete() throws Exception {
         reset(config);
         
         when(admin.getConfiguration(pid, "location")).thenReturn(config);
-        mbean.delete(pid, "location");
+        mbean.deleteForLocation(pid, "location");
         verify(config).delete();
         
     }
@@ -160,7 +160,7 @@ public void testGetFactoryPid() throws Exception {
         
         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
         assertEquals(factoryPid, mbean.getFactoryPid(factoryPid  + "-1260133982371-0"));
-        assertEquals(factoryPid, mbean.getFactoryPid(factoryPid  + "-1260133982371-0", "location"));
+        assertEquals(factoryPid, mbean.getFactoryPidForLocation(factoryPid  + "-1260133982371-0", "location"));
         
     }
 
@@ -180,7 +180,7 @@ public void testGetProperties() throws Exception {
         
         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
         
-        TabularData properties = mbean.getProperties(pid, null);
+        TabularData properties = mbean.getPropertiesForLocation(pid, null);
         assertNotNull(properties);
         assertEquals(PROPERTIES_TYPE, properties.getTabularType());
         assertEquals(2, properties.values().size());
@@ -231,7 +231,7 @@ public void testUpdateTabularData() throws Exception {
         when(admin.getConfiguration(pid, null)).thenReturn(config);
         
         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
-        mbean.update(pid, null, data);
+        mbean.updateForLocation(pid, null, data);
         
         ArgumentCaptor<Dictionary> props = ArgumentCaptor.forClass(Dictionary.class);
         verify(config).update(props.capture());
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java
index 1d8e7f8c..414721b3 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java
@@ -18,8 +18,10 @@
 
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
+import static org.osgi.jmx.framework.BundleStateMBean.BUNDLES_TYPE;
 import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE;
 import static org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES;
 import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENT;
@@ -56,7 +58,6 @@
 import javax.management.openmbean.TabularData;
 import javax.management.openmbean.TabularDataSupport;
 
-import org.apache.aries.jmx.codec.BundleData;
 import org.apache.aries.jmx.codec.BundleData.Header;
 import org.junit.Test;
 import org.osgi.framework.Bundle;
@@ -161,6 +162,22 @@ public void testToCompositeData() throws Exception {
         assertEquals("0.0.0", (String) compositeData.get(VERSION));
         TabularData headerTable = (TabularData) compositeData.get(HEADERS);
         assertEquals(4, headerTable.values().size());
+        CompositeData header = headerTable.get(new Object[]{Constants.BUNDLE_SYMBOLICNAME});
+        assertNotNull(header);
+        String value = (String) header.get(VALUE);
+        assertEquals("test", value);
+        String key = (String)header.get(KEY);
+        assertEquals(Constants.BUNDLE_SYMBOLICNAME, key);
+        
+        
+        TabularData bundleTable = new TabularDataSupport(BUNDLES_TYPE);
+        bundleTable.put(b.toCompositeData());
+   
+        CompositeData bundleData = bundleTable.get(new Object[]{Long.valueOf(1)});
+        assertNotNull(bundleData);
+        String location = (String) bundleData.get(LOCATION);
+        assertEquals("location", location);
+        
         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , (String[]) compositeData.get(EXPORTED_PACKAGES));
         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"}, (String[]) compositeData.get(IMPORTED_PACKAGES));
         assertArrayEquals(new Long[] { new Long(44), new Long(66) }, (Long[]) compositeData.get(REQUIRED_BUNDLES));
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceTest.java
index dddecd59..a882a944 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceTest.java
@@ -53,7 +53,7 @@
 
    
     @Test
-    public void testAddInformation() throws Exception {
+    public void testAddInformationFromZip() throws Exception {
 
         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
         ProvisioningService mbean = new ProvisioningService(provService);
@@ -62,7 +62,7 @@ public void testAddInformation() throws Exception {
         InputStream is = mock(InputStream.class);
         doReturn(is).when(spiedMBean).createStream("file://prov.zip");
         
-        spiedMBean.addInformation("file://prov.zip");
+        spiedMBean.addInformationFromZip("file://prov.zip");
         verify(provService).addInformation(any(ZipInputStream.class));
         verify(is).close();
         
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminMBeanTest.java
index 842bcb34..bbfebc43 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/cm/ConfigurationAdminMBeanTest.java
@@ -185,7 +185,7 @@ public void testMBeanInterface() throws Exception {
         assertEquals(2, config.get("A2"));
         
         //delete
-        mbean.delete("org.apache.aries.jmx.test.ServiceA", a.getLocation());
+        mbean.deleteForLocation("org.apache.aries.jmx.test.ServiceA", a.getLocation());
         
         Thread.sleep(1000);
         assertNull(managedServiceA.getConfig());
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceMBeanTest.java
index 2d1792a1..0477abc6 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/provisioning/ProvisioningServiceMBeanTest.java
@@ -123,7 +123,7 @@ public void testMBeanInterface() throws Exception {
         
         provZip.deleteOnExit();
         
-        mbean.addInformation(provZip.toURL().toExternalForm());
+        mbean.addInformationFromZip(provZip.toURL().toExternalForm());
         
         //check the info has been added
         
