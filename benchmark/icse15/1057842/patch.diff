diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/Classify.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/Classify.java
index ba6119ac..b0e17e5b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/Classify.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/Classify.java
@@ -110,6 +110,7 @@ public static void main(String[] args) throws Exception {
     BayesParameters params = new BayesParameters();
     params.setGramSize(gramSize);
     String modelBasePath = (String) cmdLine.getValue(pathOpt);
+    params.setBasePath(modelBasePath);
     
     log.info("Loading model from: {}", params.print());
     
@@ -136,11 +137,11 @@ public static void main(String[] args) throws Exception {
       if ("bayes".equalsIgnoreCase(classifierType)) {
         log.info("Using Bayes Classifier");
         algorithm = new BayesAlgorithm();
-        datastore = new HBaseBayesDatastore(modelBasePath, params);
+        datastore = new HBaseBayesDatastore(params);
       } else if ("cbayes".equalsIgnoreCase(classifierType)) {
         log.info("Using Complementary Bayes Classifier");
         algorithm = new CBayesAlgorithm();
-        datastore = new HBaseBayesDatastore(modelBasePath, params);
+        datastore = new HBaseBayesDatastore(params);
       } else {
         throw new IllegalArgumentException("Unrecognized classifier type: " + classifierType);
       }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java
index 684a7c53..046f9088 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java
@@ -174,7 +174,7 @@ public static void main(String[] args) throws IOException, InvalidDatastoreExcep
       
       params.setGramSize(gramSize);
       params.set("verbose", Boolean.toString(verbose));
-      params.set("basePath", modelBasePath);
+      params.setBasePath(modelBasePath);
       params.set("classifierType", classifierType);
       params.set("dataSource", dataSource);
       params.set("defaultCat", defaultCat);
@@ -223,11 +223,11 @@ public boolean accept(File file, String s) {
       if (params.get("classifierType").equalsIgnoreCase("bayes")) {
         log.info("Testing Bayes Classifier");
         algorithm = new BayesAlgorithm();
-        datastore = new HBaseBayesDatastore(params.get("basePath"), params);
+        datastore = new HBaseBayesDatastore(params);
       } else if (params.get("classifierType").equalsIgnoreCase("cbayes")) {
         log.info("Testing Complementary Bayes Classifier");
         algorithm = new CBayesAlgorithm();
-        datastore = new HBaseBayesDatastore(params.get("basePath"), params);
+        datastore = new HBaseBayesDatastore(params);
       } else {
         throw new IllegalArgumentException("Unrecognized classifier type: " + params.get("classifierType"));
       }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/BayesParameters.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/BayesParameters.java
index fff77c29..7674faeb 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/BayesParameters.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/BayesParameters.java
@@ -17,26 +17,64 @@
 
 package org.apache.mahout.classifier.bayes.common;
 
+import java.io.IOException;
+
 import org.apache.mahout.common.Parameters;
 
 /**
  * BayesParameter used for passing parameters to the Map/Reduce Jobs parameters include gramSize,
  */
-public class BayesParameters extends Parameters {
+public final class BayesParameters extends Parameters {
+
+  private static final String DEFAULT_MIN_SUPPORT = "-1";
+  private static final String DEFAULT_MIN_DF = "-1";
+
+  public BayesParameters() {
+
+  }
+
+  public BayesParameters(String serializedString) throws IOException {
+    super(parseParams(serializedString));
+  }
+
+  public int getGramSize() {
+    return Integer.parseInt(get("gramSize"));
+  }
 
   public void setGramSize(int gramSize) {
     set("gramSize", Integer.toString(gramSize));
   }
   
+  public int getMinSupport() {
+    return Integer.parseInt(get("minSupport", DEFAULT_MIN_SUPPORT));
+  }
+  
   public void setMinSupport(int minSupport) {
     set("minSupport", Integer.toString(minSupport));
   }
   
+  public int getMinDF() {
+    return Integer.parseInt(get("minDf", DEFAULT_MIN_DF));
+  }
+  
   public void setMinDF(int minDf) {
     set("minDf", Integer.toString(minDf)); 
   }
   
+  public boolean isSkipCleanup() {
+    return Boolean.parseBoolean(get("skipCleanup", "false"));
+  }
+  
   public void setSkipCleanup(boolean b) {
     set("skipCleanup", Boolean.toString(b));
   }
+
+  public String getBasePath() {
+    return get("basePath");
+  }
+
+  public void setBasePath(String basePath) {
+    set("basePath", basePath);
+  }
+
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java
index 538e014e..a552c5e6 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java
@@ -30,6 +30,7 @@
 import org.apache.hadoop.hbase.client.HTable;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.mahout.classifier.bayes.common.BayesParameters;
 import org.apache.mahout.classifier.bayes.exceptions.InvalidDatastoreException;
 import org.apache.mahout.classifier.bayes.interfaces.Datastore;
 import org.apache.mahout.classifier.bayes.mapreduce.common.BayesConstants;
@@ -67,8 +68,8 @@
   
   private double sigmaJSigmaK = -1.0;
   
-  public HBaseBayesDatastore(String hbaseTable, Parameters params) {
-    this.hbaseTable = hbaseTable;
+  public HBaseBayesDatastore(BayesParameters params) {
+    this.hbaseTable = params.getBasePath();
     this.parameters = params;
     this.tableCache = new HybridCache<String,Result>(50000, 100000);
     alphaI = Double.valueOf(parameters.get("alpha_i", "1.0"));
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java
index 47f2e9bf..eb9cda6c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java
@@ -23,10 +23,10 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
+import org.apache.mahout.classifier.bayes.common.BayesParameters;
 import org.apache.mahout.classifier.bayes.exceptions.InvalidDatastoreException;
 import org.apache.mahout.classifier.bayes.interfaces.Datastore;
 import org.apache.mahout.classifier.bayes.io.SequenceFileModelReader;
-import org.apache.mahout.common.Parameters;
 import org.apache.mahout.math.Matrix;
 import org.apache.mahout.math.SparseMatrix;
 import org.apache.mahout.math.map.OpenIntDoubleHashMap;
@@ -54,7 +54,7 @@
   
   private final Matrix weightMatrix = new SparseMatrix(new int[] {1, 0});
   
-  private final Parameters params;
+  private final BayesParameters params;
   
   private double thetaNormalizer = 1.0;
   
@@ -62,8 +62,8 @@
   
   private double sigmaJsigmaK = 1.0;
   
-  public InMemoryBayesDatastore(Parameters params) {
-    String basePath = params.get("basePath");
+  public InMemoryBayesDatastore(BayesParameters params) {
+    String basePath = params.getBasePath();
     this.params = params;
     params.set("sigma_j", basePath + "/trainer-weights/Sigma_j/part-*");
     params.set("sigma_k", basePath + "/trainer-weights/Sigma_k/part-*");
@@ -76,7 +76,7 @@ public InMemoryBayesDatastore(Parameters params) {
   @Override
   public void initialize() throws InvalidDatastoreException {
     Configuration conf = new Configuration();
-    String basePath = params.get("basePath");
+    String basePath = params.getBasePath();
     try {
       SequenceFileModelReader.loadModel(this, FileSystem.get(new Path(basePath).toUri(), conf), params, conf);
     } catch (IOException e) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java
index 11535326..8b565db5 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java
@@ -30,6 +30,7 @@
 import org.apache.mahout.classifier.ClassifierResult;
 import org.apache.mahout.classifier.bayes.algorithm.BayesAlgorithm;
 import org.apache.mahout.classifier.bayes.algorithm.CBayesAlgorithm;
+import org.apache.mahout.classifier.bayes.common.BayesParameters;
 import org.apache.mahout.classifier.bayes.datastore.HBaseBayesDatastore;
 import org.apache.mahout.classifier.bayes.datastore.InMemoryBayesDatastore;
 import org.apache.mahout.classifier.bayes.exceptions.InvalidDatastoreException;
@@ -37,7 +38,6 @@
 import org.apache.mahout.classifier.bayes.interfaces.Datastore;
 import org.apache.mahout.classifier.bayes.mapreduce.common.BayesConstants;
 import org.apache.mahout.classifier.bayes.model.ClassifierContext;
-import org.apache.mahout.common.Parameters;
 import org.apache.mahout.common.StringTuple;
 import org.apache.mahout.common.nlp.NGrams;
 import org.slf4j.Logger;
@@ -96,7 +96,7 @@ public void map(Text key, Text value,
   @Override
   public void configure(JobConf job) {
     try {
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      BayesParameters params = new BayesParameters(job.get("bayes.parameters", ""));
       log.info("Bayes Parameter {}", params.print());
       log.info("{}", params.print());
       Algorithm algorithm;
@@ -119,11 +119,11 @@ public void configure(JobConf job) {
         if (params.get("classifierType").equalsIgnoreCase("bayes")) {
           log.info("Testing Bayes Classifier");
           algorithm = new BayesAlgorithm();
-          datastore = new HBaseBayesDatastore(params.get("basePath"), params);
+          datastore = new HBaseBayesDatastore(params);
         } else if (params.get("classifierType").equalsIgnoreCase("cbayes")) {
           log.info("Testing Complementary Bayes Classifier");
           algorithm = new CBayesAlgorithm();
-          datastore = new HBaseBayesDatastore(params.get("basePath"), params);
+          datastore = new HBaseBayesDatastore(params);
         } else {
           throw new IllegalArgumentException("Unrecognized classifier type: " + params.get("classifierType"));
         }
@@ -135,7 +135,7 @@ public void configure(JobConf job) {
       classifier.initialize();
       
       defaultCategory = params.get("defaultCat");
-      gramSize = Integer.valueOf(params.get("gramSize"));
+      gramSize = params.getGramSize();
     } catch (IOException ex) {
       log.warn(ex.toString(), ex);
     } catch (InvalidDatastoreException e) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesDriver.java
index 1407cd0c..68074965 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesDriver.java
@@ -59,7 +59,7 @@ public void runJob(Path input, Path output, BayesParameters params) throws IOExc
     BayesThetaNormalizerDriver normalizer = new BayesThetaNormalizerDriver();
     normalizer.runJob(input, output, params);
     
-    if (Boolean.parseBoolean(params.get("skipCleanup"))) {
+    if (params.isSkipCleanup()) {
       return;
     }
     
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java
index a7745f2c..4fb31685 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java
@@ -97,7 +97,7 @@ public void configure(JobConf job) {
       vocabCountString = job.get("cnaivebayes.vocabCount", vocabCountString);
       vocabCount = stringifier.fromString(vocabCountString);
       
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      Parameters params = new Parameters(job.get("bayes.parameters", ""));
       alphaI = Double.valueOf(params.get("alpha_i", "1.0"));
       
     } catch (IOException ex) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerReducer.java
index 4ddcad9c..963150fc 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerReducer.java
@@ -78,7 +78,7 @@ public void reduce(StringTuple key,
   @Override
   public void configure(JobConf job) {
     try {
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      Parameters params = new Parameters(job.get("bayes.parameters", ""));
       if (params.get("dataSource").equals("hbase")) {
         useHbase = true;
       } else {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesDriver.java
index f2bd2d6b..a2456cfe 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesDriver.java
@@ -59,7 +59,7 @@ public void runJob(Path input, Path output, BayesParameters params) throws IOExc
     CBayesThetaNormalizerDriver normalizer = new CBayesThetaNormalizerDriver();
     normalizer.runJob(input, output, params);
     
-    if (Boolean.parseBoolean(params.get("skipCleanup"))) {
+    if (params.isSkipCleanup()) {
       return;
     }
     
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java
index 5741b7e7..e2b800e5 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java
@@ -126,7 +126,7 @@ public void configure(JobConf job) {
       String vocabCountString = job.get("cnaivebayes.vocabCount", stringifier.toString(vocabCount));
       vocabCount = stringifier.fromString(vocabCountString);
       
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      Parameters params = new Parameters(job.get("bayes.parameters", ""));
       alphaI = Double.valueOf(params.get("alpha_i", "1.0"));
       
     } catch (IOException ex) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java
index 55d9c563..ad857799 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java
@@ -78,7 +78,7 @@ public void reduce(StringTuple key,
   @Override
   public void configure(JobConf job) {
     try {
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      Parameters params = new Parameters(job.get("bayes.parameters", ""));
       if (params.get("dataSource").equals("hbase")) {
         useHbase = true;
       } else {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java
index 740f6fa5..b2500526 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java
@@ -32,7 +32,7 @@
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.shingle.ShingleFilter;
 import org.apache.lucene.analysis.tokenattributes.TermAttribute;
-import org.apache.mahout.common.Parameters;
+import org.apache.mahout.classifier.bayes.common.BayesParameters;
 import org.apache.mahout.common.StringTuple;
 import org.apache.mahout.common.iterator.ArrayIterator;
 import org.apache.mahout.math.function.ObjectIntProcedure;
@@ -170,9 +170,9 @@ public boolean apply(String token, int dKJ) {
   @Override
   public void configure(JobConf job) {
     try {
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      BayesParameters params = new BayesParameters(job.get("bayes.parameters", ""));
       log.info("Bayes Parameter {}", params.print());
-      gramSize = Integer.valueOf(params.get("gramSize"));
+      gramSize = params.getGramSize();
       
     } catch (IOException ex) {
       log.warn(ex.toString(), ex);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java
index a234008d..85bdec1c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java
@@ -29,7 +29,7 @@
 import org.apache.hadoop.mapred.OutputCollector;
 import org.apache.hadoop.mapred.Reducer;
 import org.apache.hadoop.mapred.Reporter;
-import org.apache.mahout.common.Parameters;
+import org.apache.mahout.classifier.bayes.common.BayesParameters;
 import org.apache.mahout.common.StringTuple;
 
 import com.google.common.base.Preconditions;
@@ -40,9 +40,6 @@
   
   private static final Logger log = LoggerFactory.getLogger(BayesFeatureReducer.class);
   
-  private static final String DEFAULT_MIN_SUPPORT = "-1";
-  private static final String DEFAULT_MIN_DF = "-1";
-  
   private double minSupport = -1;  
   private double minDf      = -1;
   
@@ -112,10 +109,10 @@ public void reduce(StringTuple key,
   @Override
   public void configure(JobConf job) {
     try {
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      BayesParameters params = new BayesParameters(job.get("bayes.parameters", ""));
       log.info("Bayes Parameter {}", params.print());
-      minSupport = Integer.valueOf(params.get("minSupport", DEFAULT_MIN_SUPPORT));
-      minDf      = Integer.valueOf(params.get("minDf", DEFAULT_MIN_DF));
+      minSupport = params.getMinSupport();
+      minDf      = params.getMinDF();
     } catch (IOException ex) {
       log.warn(ex.toString(), ex);
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfReducer.java
index 3cfd253d..d721e3d1 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfReducer.java
@@ -99,7 +99,7 @@ public void reduce(StringTuple key,
   @Override
   public void configure(JobConf job) {
     try {
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      Parameters params = new Parameters(job.get("bayes.parameters", ""));
       if (params.get("dataSource").equals("hbase")) {
         useHbase = true;
       } else {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesWeightSummerReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesWeightSummerReducer.java
index 6200d991..25ca8772 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesWeightSummerReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesWeightSummerReducer.java
@@ -92,7 +92,7 @@ public void reduce(StringTuple key,
   @Override
   public void configure(JobConf job) {
     try {
-      Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
+      Parameters params = new Parameters(job.get("bayes.parameters", ""));
       if (params.get("dataSource").equals("hbase")) {
         useHbase = true;
       } else {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java
index e7ded262..12bdbe18 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java
@@ -33,13 +33,15 @@
   
   private Map<String,String> params = new HashMap<String,String>();
   
-  // private Configuration conf = new Configuration();
-  
   public Parameters() {
 
   }
   
-  private Parameters(Map<String,String> params) {
+  public Parameters(String serializedString) throws IOException {
+    this(parseParams(serializedString));
+  }
+
+  protected Parameters(Map<String,String> params) {
     this.params = params;
   }
   
@@ -59,9 +61,9 @@ public void set(String key, String value) {
   @Override
   public String toString() {
     Configuration conf = new Configuration();
-    conf
-        .set("io.serializations",
-          "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");
+    conf.set("io.serializations",
+             "org.apache.hadoop.io.serializer.JavaSerialization,"
+             + "org.apache.hadoop.io.serializer.WritableSerialization");
     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<Map<String,String>>(conf,
         GenericsUtil.getClass(params));
     try {
@@ -77,15 +79,15 @@ public String print() {
     return params.toString();
   }
   
-  public static Parameters fromString(String serializedString) throws IOException {
+  public static Map<String,String> parseParams(String serializedString) throws IOException {
     Configuration conf = new Configuration();
-    conf
-        .set("io.serializations",
-          "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");
+    conf.set("io.serializations",
+             "org.apache.hadoop.io.serializer.JavaSerialization,"
+             + "org.apache.hadoop.io.serializer.WritableSerialization");
     Map<String,String> params = new HashMap<String,String>();
     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<Map<String,String>>(conf,
         GenericsUtil.getClass(params));
-    params = mapStringifier.fromString(serializedString);
-    return new Parameters(params);
+    return mapStringifier.fromString(serializedString);
   }
+
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/AggregatorReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/AggregatorReducer.java
index 25787012..55c021de 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/AggregatorReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/AggregatorReducer.java
@@ -49,7 +49,7 @@ protected void reduce(Text key, Iterable<TopKStringPatterns> values, Context con
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
     super.setup(context);
-    Parameters params = Parameters.fromString(context.getConfiguration().get("pfp.parameters", ""));
+    Parameters params = new Parameters(context.getConfiguration().get("pfp.parameters", ""));
     maxHeapSize = Integer.valueOf(params.get("maxHeapSize", "50"));
     
   }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java
index 43f5e709..807361d6 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java
@@ -54,7 +54,7 @@ protected void map(LongWritable offset, Text input, Context context) throws IOEx
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
     super.setup(context);
-    Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
+    Parameters params = new Parameters(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
     splitter = Pattern.compile(params.get(PFPGrowth.SPLIT_PATTERN, PFPGrowth.SPLITTER.toString()));
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java
index 2ee9161d..12777c4f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java
@@ -71,7 +71,7 @@ protected void map(LongWritable offset, TransactionTree input, Context context)
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
     super.setup(context);
-    Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
+    Parameters params = new Parameters(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
     
     OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
     int i = 0;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java
index 819d0611..68d0c6ba 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java
@@ -109,7 +109,7 @@ public int compare(Pair<Integer,Long> o1, Pair<Integer,Long> o2) {
   protected void setup(Context context) throws IOException, InterruptedException {
     
     super.setup(context);
-    Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
+    Parameters params = new Parameters(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
     
     int i = 0;
     for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java
index d1352d82..74028856 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java
@@ -70,7 +70,7 @@ protected void map(LongWritable offset, Text input, Context context) throws IOEx
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
     super.setup(context);
-    Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
+    Parameters params = new Parameters(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
     
     int i = 0;
     for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesClassifierSelfTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesClassifierSelfTest.java
index 1f1f73b4..8eca5336 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesClassifierSelfTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesClassifierSelfTest.java
@@ -75,7 +75,7 @@ public void testSelfTestBayes() throws Exception {
     TrainClassifier.trainNaiveBayes(bayesInputPath, bayesModelPath, params);
     
     params.set("verbose", "true");
-    params.set("basePath", bayesModelPath.toString());
+    params.setBasePath(bayesModelPath.toString());
     params.set("classifierType", "bayes");
     params.set("dataSource", "hdfs");
     params.set("defaultCat", "unknown");
@@ -89,8 +89,7 @@ public void testSelfTestBayes() throws Exception {
     ResultAnalyzer resultAnalyzer = new ResultAnalyzer(classifier.getLabels(), params.get("defaultCat"));
     
     for (String[] entry : ClassifierData.DATA) {
-      List<String> document = new NGrams(entry[1], Integer.parseInt(params.get("gramSize")))
-          .generateNGramsWithoutLabel();
+      List<String> document = new NGrams(entry[1], params.getGramSize()).generateNGramsWithoutLabel();
       assertEquals(3, classifier.classifyDocument(document.toArray(new String[document.size()]),
         params.get("defaultCat"), 100).length);
       ClassifierResult result = classifier.classifyDocument(document.toArray(new String[document.size()]), params
@@ -128,7 +127,7 @@ public void testSelfTestCBayes() throws Exception {
     TrainClassifier.trainCNaiveBayes(bayesInputPath, bayesModelPath, params);
     
     params.set("verbose", "true");
-    params.set("basePath", bayesModelPath.toString());
+    params.setBasePath(bayesModelPath.toString());
     params.set("classifierType", "cbayes");
     params.set("dataSource", "hdfs");
     params.set("defaultCat", "unknown");
@@ -141,8 +140,7 @@ public void testSelfTestCBayes() throws Exception {
     classifier.initialize();
     ResultAnalyzer resultAnalyzer = new ResultAnalyzer(classifier.getLabels(), params.get("defaultCat"));
     for (String[] entry : ClassifierData.DATA) {
-      List<String> document = new NGrams(entry[1], Integer.parseInt(params.get("gramSize")))
-          .generateNGramsWithoutLabel();
+      List<String> document = new NGrams(entry[1], params.getGramSize()).generateNGramsWithoutLabel();
       assertEquals(3, classifier.classifyDocument(document.toArray(new String[document.size()]),
         params.get("defaultCat"), 100).length);
       ClassifierResult result = classifier.classifyDocument(document.toArray(new String[document.size()]), params
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleMapper.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleMapper.java
index 41c6f51e..6ca49eda 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleMapper.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleMapper.java
@@ -71,7 +71,7 @@ protected void map(LongWritable key, Text value, Context context) throws IOExcep
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
     super.setup(context);
-    Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
+    Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
     splitter = Pattern.compile(params.get("splitPattern", "[ \t]*\t[ \t]*"));
     
     int selectedFieldCount = Integer.valueOf(params.get("selectedFieldCount", "0"));
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java
index a31fc7ad..61a3691d 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java
@@ -31,8 +31,8 @@
   private int maxTransactionLength = 100;
   
   @Override
-  protected void reduce(Text key, Iterable<StringTuple> values, Context context) throws IOException,
-                                                                                InterruptedException {
+  protected void reduce(Text key, Iterable<StringTuple> values, Context context)
+    throws IOException, InterruptedException {
     Collection<String> items = new HashSet<String>();
     
     for (StringTuple value : values) {
@@ -68,7 +68,7 @@ protected void reduce(Text key, Iterable<StringTuple> values, Context context) t
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
     super.setup(context);
-    Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
+    Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
     maxTransactionLength = Integer.valueOf(params.get("maxTransactionLength", "100"));
   }
 }
