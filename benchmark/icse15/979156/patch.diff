diff --git a/cassandra/branches/cassandra-0.6/contrib/bmt_example/CassandraBulkLoader.java b/cassandra/branches/cassandra-0.6/contrib/bmt_example/CassandraBulkLoader.java
index 4fa6cf61..e1492038 100644
--- a/cassandra/branches/cassandra-0.6/contrib/bmt_example/CassandraBulkLoader.java
+++ b/cassandra/branches/cassandra-0.6/contrib/bmt_example/CassandraBulkLoader.java
@@ -1,4 +1,4 @@
-/**
+/*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -17,7 +17,7 @@
  */
  
  /**
-  * Cassandra has a backdoor called the Binary Memtable. The purpose of this backdoor is to
+  * Cassandra has a back door called the Binary Memtable. The purpose of this backdoor is to
   * mass import large amounts of data, without using the Thrift interface.
   *
   * Inserting data through the binary memtable, allows you to skip the commit log overhead, and an ack
@@ -36,6 +36,12 @@
   * in the mapper, so that the end result generates the data set into a column oriented subset. Once you get to the
   * reduce aspect, you can generate the ColumnFamilies you want inserted, and send it to your nodes.
   *
+  * For Cassandra 0.6.4, we modified this example to wait for acks from all Cassandra nodes for each row
+  * before proceeding to the next.  This means to keep Cassandra similarly busy you can either
+  * 1) add more reducer tasks,
+  * 2) remove the "wait for acks" block of code,
+  * 3) parallelize the writing of rows to Cassandra, e.g. with an Executor.
+  *
   * THIS CANNOT RUN ON THE SAME IP ADDRESS AS A CASSANDRA INSTANCE.
   */
   
@@ -60,7 +66,10 @@
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 
+import org.apache.cassandra.net.IAsyncResult;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.StorageService;
@@ -173,10 +182,24 @@ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text>
 
             /* Get serialized message to send to cluster */
             message = createMessage(keyspace, key.toString(), cfName, columnFamilies);
+            List<IAsyncResult> results = new ArrayList<IAsyncResult>();
             for (InetAddress endpoint: StorageService.instance.getNaturalEndpoints(keyspace, key.toString()))
             {
                 /* Send message to end point */
-                MessagingService.instance.sendOneWay(message, endpoint);
+                results.add(MessagingService.instance.sendRR(message, endpoint));
+            }
+            /* wait for acks */
+            for (IAsyncResult result : results)
+            {
+                try
+                {
+                    result.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
+                }
+                catch (TimeoutException e)
+                {
+                    // you should probably add retry logic here
+                    throw new RuntimeException(e);
+                }
             }
             
             output.collect(key, new Text(" inserted into Cassandra node(s)"));
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/BinaryVerbHandler.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
index e6fc2922..708723a9 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
@@ -23,6 +23,7 @@
 
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
+import org.apache.cassandra.net.MessagingService;
 
 import org.apache.log4j.Logger;
 
@@ -40,11 +41,16 @@ public void doVerb(Message message)
             RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(new DataInputStream(buffer));
             RowMutation rm = rmMsg.getRowMutation();
             rm.applyBinary();
+
+            WriteResponse response = new WriteResponse(rm.getTable(), rm.key(), true);
+            Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
+            if (logger_.isDebugEnabled())
+              logger_.debug("binary " + rm + " applied.  Sending response to " + message.getMessageId() + "@" + message.getFrom());
+            MessagingService.instance.sendOneWay(responseMessage, message.getFrom());
         }
         catch (Exception e)
         {
             throw new RuntimeException(e);
         }
     }
-
 }
