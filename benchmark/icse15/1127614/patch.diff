diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
index fe5b40d8..74b6c733 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
@@ -94,7 +94,7 @@ public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPer
                   -> FormatPostingsPositionsConsumer
                     -> IMPL: FormatPostingsPositionsWriter
     */
-
+    try {
     int start = 0;
     while(start < numAllFields) {
       final FieldInfo fieldInfo = allFields.get(start).fieldInfo;
@@ -134,7 +134,8 @@ public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPer
       FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();
       perThread.termsHashPerThread.reset(true);
     }
-
+    } finally {
+    }
     consumer.finish();
   }
 
@@ -176,6 +177,7 @@ void appendPostings(String fieldName, SegmentWriteState state,
       segDeletes = null;
     }
 
+    try {
     // TODO: really TermsHashPerField should take over most
     // of this loop, including merge sort of terms from
     // multiple threads and interacting with the
@@ -214,6 +216,7 @@ void appendPostings(String fieldName, SegmentWriteState state,
         delDocLimit = 0;
       }
 
+        try {
       // Now termStates has numToMerge FieldMergeStates
       // which all share the same term.  Now we must
       // interleave the docID streams.
@@ -258,6 +261,7 @@ void appendPostings(String fieldName, SegmentWriteState state,
         if (!currentFieldOmitTermFreqAndPositions) {
           // omitTermFreqAndPositions == false so we do write positions &
           // payload          
+              try {
           int position = 0;
           for(int j=0;j<termDocFreq;j++) {
             final int code = prox.readVInt();
@@ -278,9 +282,10 @@ void appendPostings(String fieldName, SegmentWriteState state,
 
             posConsumer.addPosition(position, payloadBuffer, 0, payloadLength);
           } //End for
-
+              } finally {
           posConsumer.finish();
         }
+            }
 
         if (!minState.nextDoc()) {
 
@@ -306,12 +311,14 @@ void appendPostings(String fieldName, SegmentWriteState state,
           }
         }
       }
-
+        } finally {
       docConsumer.finish();
     }
-
+      }
+    } finally {
     termsConsumer.finish();
   }
+  }
 
   final UnicodeUtil.UTF8Result termsUTF8 = new UnicodeUtil.UTF8Result();
 }
