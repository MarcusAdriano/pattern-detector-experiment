diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java
index 51242040..a27b15c9 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java
@@ -36,12 +36,17 @@
   private final FieldInfo fieldInfo;
   private int addedValues = 0;
   private final BytesRef emptyBytesRef = new BytesRef();
+  private final Counter iwBytesUsed;
+  private long bytesUsed;
 
   // nocommit this needs to update bytesUsed?
 
-  public BinaryDocValuesWriter(FieldInfo fieldInfo, Counter counter) {
+  public BinaryDocValuesWriter(FieldInfo fieldInfo, Counter iwBytesUsed) {
     this.fieldInfo = fieldInfo;
-    this.bytesRefArray = new BytesRefArray(counter);
+    this.bytesRefArray = new BytesRefArray(iwBytesUsed);
+    bytesUsed = bytesRefArray.bytesUsed();
+    this.iwBytesUsed = iwBytesUsed;
+    iwBytesUsed.addAndGet(bytesUsed);
   }
 
   public void addValue(int docID, BytesRef value) {
@@ -62,6 +67,13 @@ public void addValue(int docID, BytesRef value) {
     }
     addedValues++;
     bytesRefArray.append(value);
+    updateBytesUsed();
+  }
+
+  private void updateBytesUsed() {
+    final long newBytesUsed = bytesRefArray.bytesUsed();
+    iwBytesUsed.addAndGet(newBytesUsed - bytesUsed);
+    bytesUsed = newBytesUsed;
   }
 
   @Override
@@ -104,19 +116,9 @@ public BytesRef next() {
                                    };
                                  }
                                });
-
-    // nocommit
-    //reset();
   }
 
   @Override
   public void abort() {
-    // nocommit
-    //reset();
-  }
-
-  private void reset() {
-    // nocommit
-    //bytesRefArray.clear();
   }
 }
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java
index d7f3f618..5608e274 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java
@@ -42,6 +42,7 @@ public NumericDocValuesWriter(FieldInfo fieldInfo, Counter iwBytesUsed) {
     bytesUsed = pending.ramBytesUsed();
     this.fieldInfo = fieldInfo;
     this.iwBytesUsed = iwBytesUsed;
+    iwBytesUsed.addAndGet(bytesUsed);
   }
 
   public void addValue(int docID, long value) {
@@ -108,22 +109,9 @@ public Number next() {
                                    };
                                  }
                                });
-
-    // nocommit
-    //reset();
   }
 
   @Override
   public void abort() {
-    // nocommit
-    //reset();
-  }
-
-  // nocommit do we really need this...?  can't/doesn't parent alloc
-  // a new instance after flush?
-  void reset() {
-    // nocommit
-    //pending = new AppendingLongBuffer();
-    //updateBytesUsed();
   }
 }
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java
index dbe1d9fa..5f7dd302 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java
@@ -39,6 +39,7 @@
   private int[] pending = new int[DEFAULT_PENDING_SIZE];
   private int pendingIndex = 0;
   private final Counter iwBytesUsed;
+  private long bytesUsed;
   private final FieldInfo fieldInfo;
 
   private static final BytesRef EMPTY = new BytesRef(BytesRef.EMPTY_BYTES);
@@ -116,7 +117,6 @@ public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws
 
     final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());
     final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;
-    iwBytesUsed.addAndGet(sortedValueRamUsage);
     final int[] ordMap = new int[valueCount];
 
     for(int ord=0;ord<valueCount;ord++) {
@@ -187,25 +187,9 @@ public Number next() {
                                   };
                                 }
                               });
-    
-    iwBytesUsed.addAndGet(-sortedValueRamUsage);
-    // nocommit
-    //reset();
   }
 
   @Override
   public void abort() {
-    // nocommit
-    //reset();
-  }
-
-  private void reset() {
-    // nocommit
-    /*
-    iwBytesUsed.addAndGet((pending.length - DEFAULT_PENDING_SIZE) * RamUsageEstimator.NUM_BYTES_INT);
-    pending = ArrayUtil.shrink(pending, DEFAULT_PENDING_SIZE);
-    pendingIndex = 0;
-    hash.clear();
-    */
   }
 }
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/util/BytesRefHash.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/util/BytesRefHash.java
index d8b110bf..9a10c5be 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/util/BytesRefHash.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/util/BytesRefHash.java
@@ -208,8 +208,7 @@ private boolean shrink(int targetSize) {
       newSize /= 2;
     }
     if (newSize != hashSize) {
-      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT
-          * -(hashSize - newSize));
+      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -(hashSize - newSize));
       hashSize = newSize;
       ords = new int[hashSize];
       Arrays.fill(ords, -1);
@@ -248,8 +247,7 @@ public void clear() {
   public void close() {
     clear(true);
     ords = null;
-    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT
-        * -hashSize);
+    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -hashSize);
   }
 
   /**
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java b/lucene/dev/branches/lucene4547/lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
index 0d3186cf..49652a94 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
@@ -64,6 +64,8 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 
+// nocommit fails: ant test  -Dtestcase=TestBackwardsCompatibility -Dtests.method=testExactFileNames -Dtests.seed=F5A14C72AFCA024E -Dtests.slow=true -Dtests.locale=pl_PL -Dtests.timezone=America/Argentina/La_Rioja -Dtests.file.encoding=ISO-8859-1
+
 /*
   Verify we can read the pre-5.0 file format, do searches
   against it, and add documents to it.
