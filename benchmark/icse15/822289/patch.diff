diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
index 0be2a23c..e502904b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
@@ -127,11 +127,17 @@ ValueNode eliminateNots(boolean underNotNode)
 		/* Set type info for the operator node */
 		leftBCO.bindComparisonOperator();
 
+        // DERBY-4388: If leftOperand is a ColumnReference, it may be remapped
+        // during optimization, and that requires the less-than node and the
+        // greater-than node to have separate objects.
+        ValueNode leftClone = (leftOperand instanceof ColumnReference) ?
+            leftOperand.getClone() : leftOperand;
+
 		/* leftO > rightOList.elementAt(1) */
 		rightBCO = (BinaryComparisonOperatorNode) 
 					nodeFactory.getNode(
 								C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,
-								leftOperand, 
+								leftClone,
 								rightOperandList.elementAt(1),
 								cm);
 		/* Set type info for the operator node */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java
index ba0fa636..814ddd35 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InbetweenTest.java
@@ -4501,4 +4501,27 @@ public void testReproductionBeetle5135() throws SQLException{
         conn.rollback();
         st.close();
     }
+
+    /**
+     * Regression test cases for DERBY-4388, where the not elimination in
+     * BetweenOperatorNode could make column references point to the wrong
+     * result sets after optimization, causing NullPointerExceptions.
+     */
+    public void testDerby4388NotElimination() throws SQLException {
+        setAutoCommit(false); // for easy cleanup with rollback() in tearDown()
+        Statement s = createStatement();
+        s.execute("create table d4388_t1(a int)");
+        s.execute("create table d4388_t2(b int)");
+        s.execute("insert into d4388_t1 values 0,1,2,3,4,5,6");
+        s.execute("insert into d4388_t2 values 0,1,2,3");
+        // The queries below used to cause NullPointerException.
+        JDBC.assertFullResultSet(
+                s.executeQuery("select * from d4388_t1 left join d4388_t2 " +
+                               "on a=b where b not between 1 and 5"),
+                new String[][]{{"0", "0"}});
+        JDBC.assertFullResultSet(
+                s.executeQuery("select * from d4388_t2 right join d4388_t1 " +
+                               "on a=b where b not between 1 and 5"),
+                new String[][]{{"0", "0"}});
+    }
 }
