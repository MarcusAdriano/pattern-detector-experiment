diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
index da36a438..acc064a4 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
@@ -405,7 +405,7 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 		/* Error if no match found in fromList */
 		if (matchingRC == null)
 		{
-			throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND, getFullColumnName());
+			throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND, getSQLColumnName());
 		}
 
 		/* Set the columnNumber from the base table.
@@ -417,22 +417,20 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 	}
 
 	/**
-	 * Get the full column name of this column for purposes of error
-	 * messages or debugging.  The full column name includes the table
-	 * name and schema name, if any.
+	 * Get the column name for purposes of error
+	 * messages or debugging. This returns the column
+	 * name as used in the SQL statement. Thus if it was qualified
+	 * with a table, alias name that will be included.
 	 *
-	 * @return	The full column name in the form schema.table.column
+	 * @return	The  column name in the form [[schema.]table.]column
 	 */
 
-	public String getFullColumnName()
+	public String getSQLColumnName()
 	{
-		String	fullColumnName = "";
+		if (tableName == null)
+			return columnName;
 
-		if (tableName != null)
-			fullColumnName += tableName.getFullTableName() + ".";
-		fullColumnName += columnName;
-
-		return fullColumnName;
+		return tableName.toString() + "." + columnName;
 	}
 
 	/**
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
index 606105ab..648f8463 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
@@ -544,7 +544,7 @@ public ResultColumn bindColumnReference(ColumnReference columnReference)
 				else
 				{
 					throw StandardException.newException(SQLState.LANG_AMBIGUOUS_COLUMN_NAME, 
-							 columnReference.getFullColumnName());
+							 columnReference.getSQLColumnName());
 				}
 			}
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
index e95151a4..b5d37768 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
@@ -552,7 +552,7 @@ public ResultColumn getMatchingColumn(ColumnReference columnReference) throws St
 			if (leftRC != null)
 			{
 				throw StandardException.newException(SQLState.LANG_AMBIGUOUS_COLUMN_NAME, 
-						 columnReference.getFullColumnName());
+						 columnReference.getSQLColumnName());
 			}
 			resultColumn = rightRC;
 		}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableName.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableName.java
index 7fa2fd3b..37e533f0 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableName.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableName.java
@@ -46,6 +46,7 @@
 	*/
 	String	tableName;
 	String	schemaName;
+	private boolean hasSchema;
 
 	/*
 	** These fields are used to track the being and end
@@ -66,6 +67,7 @@
 
 	public void init(Object schemaName, Object tableName)
 	{
+		hasSchema = schemaName != null;
 		this.schemaName = (String) schemaName;
 		this.tableName = (String) tableName;
 	}
@@ -88,8 +90,7 @@ public void init(Object schemaName, Object tableName)
 		Object	tokEndOffset
 	)
 	{
-		this.schemaName = (String) schemaName;
-		this.tableName = (String) tableName;
+		init(schemaName, tableName);
 		this.tokBeginOffset = ((Integer) tokBeginOffset).intValue();
 		this.tokEndOffset = ((Integer) tokEndOffset).intValue();
 	}
@@ -177,7 +178,10 @@ public String getFullTableName()
 
 	public String toString()
 	{
+		if (hasSchema)
 		return getFullTableName();
+		else
+			return tableName;
 	}
 
 	/**
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java
index bb3ae308..35c85846 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java
@@ -77,12 +77,12 @@ public Visitable visit(Visitable node)
 		
 			if (groupByList == null)
 			{
-				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_NON_GROUPED_SELECT_LIST, cr.getFullColumnName());
+				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_NON_GROUPED_SELECT_LIST, cr.getSQLColumnName());
 			}
 
 			if (groupByList.containsColumnReference(cr) == null)
 			{
-				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getFullColumnName());
+				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getSQLColumnName());
 			}
 		} 
 		/*
