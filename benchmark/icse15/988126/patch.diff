diff --git a/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/CollocCombiner.java b/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/CollocCombiner.java
index ccdacb45..ea4c289d 100644
--- a/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/CollocCombiner.java
+++ b/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/CollocCombiner.java
@@ -18,6 +18,7 @@
 package org.apache.mahout.utils.nlp.collocations.llr;
 
 import java.io.IOException;
+import java.util.Iterator;
 
 import org.apache.hadoop.mapreduce.Reducer;
 
@@ -28,16 +29,19 @@
   protected void reduce(GramKey key, Iterable<Gram> values, Context context) throws IOException, InterruptedException {
 
     int freq = 0;
+    Gram value = null;
 
-    // accumulate frequencies from values.
-    for (Gram gramValue : values) {
-      freq += gramValue.getFrequency();
+    // accumulate frequencies from values, preserve the last value
+    // to write to the context.
+    for (Iterator<Gram> it = values.iterator(); it.hasNext(); ) {
+      value = it.next();
+      freq += value.getFrequency();
     }
 
-    Gram sum = new Gram();
-    sum.setFrequency(freq);
-
-    context.write(key, sum);
+    if (value != null) {
+      value.setFrequency(freq);
+      context.write(key, value);
+    }
   }
 
 }
