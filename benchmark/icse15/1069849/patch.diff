diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLChar.java
index 42c60ed1..bc797646 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -1566,19 +1566,17 @@ public void setValue(
                 formatJDBCTime( cal, sb);
                 sb.append('.');
 
-                int micros = 
-                    (theValue.getNanos() + SQLTimestamp.FRACTION_TO_NANO/2) / 
-                        SQLTimestamp.FRACTION_TO_NANO;
+                int nanos = theValue.getNanos();
 
-                if (micros == 0)
+                if (nanos == 0)
                 {
                     // Add a single zero after the decimal point to match
                     // the format from Timestamp.toString().
                     sb.append('0');
                 }
-                else if (micros > 0)
+                else if (nanos > 0)
                 {
-                    String microsStr = Integer.toString( micros);
+                    String microsStr = Integer.toString( nanos);
                     if(microsStr.length() > SQLTimestamp.MAX_FRACTION_DIGITS)
                     {
                         sb.append(
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java
index 570ac107..c5615cf2 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java
@@ -85,8 +85,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 						implements DateTimeDataValue
 {
 
-    static final int MAX_FRACTION_DIGITS = 6; // Only microsecond resolution on conversion to/from strings
-    static final int FRACTION_TO_NANO = 1000; // 10**(9 - MAX_FRACTION_DIGITS)
+    static final int MAX_FRACTION_DIGITS = 9; // Only nanosecond resolution on conversion to/from strings
+    static final int FRACTION_TO_NANO = 1; // 10**(9 - MAX_FRACTION_DIGITS)
 
     static final int ONE_BILLION = 1000000000;
     
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
index 99201cff..f43bdcf5 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
@@ -1236,16 +1236,16 @@ public void testISOFormat_WrongTimestampFormat() throws SQLException{
     }
     
     /**
-     *  Don't allow more than microseconds in ISO format: cloudscape rejects.
+     * Don't allow more than nanoseconds in ISO format.
      */
-    public void testISOFormat_MoreThanMicroseconds() throws SQLException{
+    public void testISOFormat_MoreThanNanoseconds() throws SQLException{
         Statement st = createStatement();
         
         assertStatementError("22007", st, "insert into ts (ts1) values "
-                + "('2003-03-05-17.05.43.999999999')");
+                + "('2003-03-05-17.05.43.999999999999')");
 
         assertStatementError("22007", st, " insert into ts (ts1) values "
-                + "('2003-03-05-17.05.43.999999000')");
+                + "('2003-03-05-17.05.43.999999999000')");
 
         st.close();
     }
@@ -1784,6 +1784,15 @@ public void testDerby3856() throws SQLException {
                 "10:00:00");
     }
 
+    /**
+     * Test case to show that timestamp function accepts nanoseconds
+     * resolution (DERBY-4625).
+     */
+    public void testNanosecondResolution() throws SQLException{
+    	assertSingleValue("values timestamp('2010-04-21 12:00:00.123456789')",
+    			"2010-04-21 12:00:00.123456789");
+    }
+
     /**
      * Execute an SQL statement and check that it returns a single, specific
      * value.
