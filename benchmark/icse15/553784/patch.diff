diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
index 2d99f052..a996c8f2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
@@ -623,6 +623,9 @@ private void setResultType(TypeId resultType) throws StandardException
 	}
 	/**
 	 * Bind locate operator
+	 * The variable receiver is the string which will searched
+	 * The variable leftOperand is the search character that will looked in the
+	 *     receiver variable.
 	 *
 	 * @return	The new top of the expression tree.
 	 *
@@ -643,18 +646,22 @@ public ValueNode locateBind() throws StandardException
 			if( leftOperand.requiresTypeFromContext())
 			{
 				receiver.setType(getVarcharDescriptor());
+	            //Since both receiver and leftOperands are parameters, use the
+				//collation of compilation schema for receiver.
+				receiver.setCollationUsingCompilationSchema(
+						StringDataValue.COLLATION_DERIVATION_IMPLICIT);            	
 			}
 			else
 			{
 				if( leftOperand.getTypeId().isStringTypeId() )
 				{
+					//Since the leftOperand is not a parameter, receiver will
+					//get it's collation from leftOperand through following
+					//setType method
 					receiver.setType(
 							         leftOperand.getTypeServices());
 				}
 			}
-			//collation of ? operand should be same as the compilation schema
-			receiver.setCollationUsingCompilationSchema(
-					StringDataValue.COLLATION_DERIVATION_IMPLICIT);
 		}
 							                            
 		/*
@@ -675,9 +682,14 @@ public ValueNode locateBind() throws StandardException
 							         receiver.getTypeServices());
 				}
 			}
-			//collation of ? operand should be same as the compilation schema
-			leftOperand.setCollationUsingCompilationSchema(
-					StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+			//collation of ? operand should be picked up from the context.
+            //By the time we come here, receiver will have correct collation
+            //set on it and hence we can rely on it to get correct collation
+            //for this ? 
+			leftOperand.getTypeServices().setCollationDerivation(
+					receiver.getTypeServices().getCollationDerivation());
+			leftOperand.getTypeServices().setCollationType(
+        			receiver.getTypeServices().getCollationType());            	
 		}
 
 		/*
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index ba2530ef..4e5ce7f3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -858,6 +858,22 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     //No rows returned because the result of TRIM is going to be 'YSCOLUMNS'
     JDBC.assertEmpty(rs);
     
+    //Do parameter testing for LOCATE
+    //Following will fail because 'LOOKFORME' has collation of territory based
+    //but TABLENAME has collation of UCS_BASIC and hence LOCATE will fail 
+    //because the collation types of it's two operands do not match
+    ps = conn.prepareStatement("SELECT TABLENAME FROM SYS.SYSTABLES WHERE " +
+    		" LOCATE(?, TABLENAME) != 0");
+    ps.setString(1, "ABC");
+    rs = ps.executeQuery();
+    JDBC.assertEmpty(rs);
+    //Just switch the parameter position and try the sql again
+    ps = conn.prepareStatement("SELECT TABLENAME FROM SYS.SYSTABLES WHERE " +
+    		" LOCATE(TABLENAME, ?) != 0");
+    ps.setString(1, "ABC");
+    rs = ps.executeQuery();
+    JDBC.assertEmpty(rs);
+    
     //Do parameter testing with IN and subquery
     //Following will work just fine because ? will take it's collation from the
     //context which in this case will be collation of TABLENAME which has 
