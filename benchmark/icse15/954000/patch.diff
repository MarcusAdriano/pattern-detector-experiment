diff --git a/cassandra/trunk/contrib/word_count/src/WordCountSetup.java b/cassandra/trunk/contrib/word_count/src/WordCountSetup.java
index e8436cb8..aa55a511 100644
--- a/cassandra/trunk/contrib/word_count/src/WordCountSetup.java
+++ b/cassandra/trunk/contrib/word_count/src/WordCountSetup.java
@@ -46,6 +46,8 @@ public static void main(String[] args) throws Exception
         Map<byte[], Map<String,List<Mutation>>> mutationMap;
         Column c;
 
+        // text0: no rows
+
         // text1: 1 row, 1 word
         c = new Column("text1".getBytes(), "word1".getBytes(), new Clock(System.currentTimeMillis()));
         mutationMap = getMutationMap("key0".getBytes(), WordCount.COLUMN_FAMILY, c);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 3771d2ca..bed5272e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -47,7 +47,7 @@ public CliClient(CliSessionState css, Cassandra.Client thriftClient)
     }
 
     // Execute a CLI Statement 
-    public void executeCLIStmt(String stmt) throws TException, NotFoundException, InvalidRequestException, UnavailableException, TimedOutException, IllegalAccessException, ClassNotFoundException, InstantiationException
+    public void executeCLIStmt(String stmt) throws TException, NotFoundException, InvalidRequestException, UnavailableException, TimedOutException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException
     {
         CommonTree ast = null;
 
@@ -243,7 +243,7 @@ private static long timestampMicros()
     }
 
     private void doSlice(String keyspace, String key, String columnFamily, byte[] superColumnName)
-            throws InvalidRequestException, UnavailableException, TimedOutException, TException, UnsupportedEncodingException, IllegalAccessException, NotFoundException, InstantiationException, ClassNotFoundException
+            throws InvalidRequestException, UnavailableException, TimedOutException, TException, UnsupportedEncodingException, IllegalAccessException, NotFoundException, InstantiationException, NoSuchFieldException
     {
         SliceRange range = new SliceRange(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 1000000);
         List<ColumnOrSuperColumn> columns = thriftClient_.get_slice(key.getBytes(),
@@ -276,34 +276,36 @@ private void doSlice(String keyspace, String key, String columnFamily, byte[] su
         css_.out.println("Returned " + size + " results.");
     }
  
-    private String formatSuperColumnName(String keyspace, String columnFamily, SuperColumn column) throws NotFoundException, TException, ClassNotFoundException, IllegalAccessException, InstantiationException
+    private String formatSuperColumnName(String keyspace, String columnFamily, SuperColumn column) throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
     {
         return getFormatTypeForColumn(keyspacesMap.get(keyspace).get(columnFamily).get("CompareWith")).getString(column.name);
     }
 
-    private String formatSubcolumnName(String keyspace, String columnFamily, Column subcolumn) throws NotFoundException, TException, ClassNotFoundException, IllegalAccessException, InstantiationException
+    private String formatSubcolumnName(String keyspace, String columnFamily, Column subcolumn) throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
     {
         return getFormatTypeForColumn(keyspacesMap.get(keyspace).get(columnFamily).get("CompareSubcolumnsWith")).getString(subcolumn.name);
     }
 
-    private String formatColumnName(String keyspace, String columnFamily, Column column) throws ClassNotFoundException, NotFoundException, TException, IllegalAccessException, InstantiationException
+    private String formatColumnName(String keyspace, String columnFamily, Column column) throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
     {
         return getFormatTypeForColumn(keyspacesMap.get(keyspace).get(columnFamily).get("CompareWith")).getString(column.name);
     }
 
-    private AbstractType getFormatTypeForColumn(String compareWith) throws ClassNotFoundException, IllegalAccessException, InstantiationException
+    private AbstractType getFormatTypeForColumn(String compareWith) throws IllegalAccessException, InstantiationException, NoSuchFieldException
     {
         AbstractType type;
         try {
-            type = (AbstractType) Class.forName(compareWith).newInstance();
+            // Get the singleton instance of the AbstractType subclass
+            Class c = Class.forName(compareWith);
+            type = (AbstractType) c.getField("instance").get(c);
         } catch (ClassNotFoundException e) {
-            type = BytesType.class.newInstance();
+            type = BytesType.instance;
         }
         return type;
     }
 
     // Execute GET statement
-    private void executeGet(CommonTree ast) throws TException, NotFoundException, InvalidRequestException, UnavailableException, TimedOutException, UnsupportedEncodingException, IllegalAccessException, InstantiationException, ClassNotFoundException
+    private void executeGet(CommonTree ast) throws TException, NotFoundException, InvalidRequestException, UnavailableException, TimedOutException, UnsupportedEncodingException, IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchFieldException
     {
         if (!CliMain.isConnected() || !hasKeySpace())
             return;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java
index 8e7facb0..57486fa1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilySerializer.java
@@ -128,7 +128,9 @@ private AbstractType readComparator(DataInput dis) throws IOException
 
         try
         {
-            return (AbstractType)Class.forName(className).getConstructor().newInstance();
+            // Get the singleton instance of the AbstractType subclass
+            Class c = Class.forName(className);
+            return (AbstractType) c.getField("instance").get(c);
         }
         catch (ClassNotFoundException e)
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
index 3ea8eff0..f5ca25f2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
@@ -187,7 +187,7 @@ else if (startToken.equals(split.getEndToken()))
          */
         private void maybeConnect() throws InvalidRequestException, TException, AuthenticationException, 
             AuthorizationException, NotFoundException, InstantiationException, IllegalAccessException, 
-            ClassNotFoundException
+            ClassNotFoundException, NoSuchFieldException
         {
             // only need to connect once
             if (socket != null && socket.isOpen())
@@ -213,7 +213,9 @@ private void maybeConnect() throws InvalidRequestException, TException, Authenti
                 Map<String, Map<String,String>> desc = client.describe_keyspace(keyspace);
                 Map<String,String> ksProps = desc.get(cfName);
                 String compClass = ksProps.get("CompareWith");
-                comparator = (AbstractType) Class.forName(compClass).newInstance();
+                // Get the singleton instance of the AbstractType subclass
+                Class c = Class.forName(compClass);
+                comparator = (AbstractType) c.getField("instance").get(c);
             }
         }
 
