diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java
index 8cc181aa..a7736bbc 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java
@@ -251,7 +251,7 @@ public int run(String[] args) throws Exception {
       writer.flush();
     } finally {
       if (shouldClose) {
-        Closeables.closeQuietly(writer);
+        Closeables.close(writer, true);
       }
     }
 
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java
index 53515e53..26946dc8 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java
@@ -19,6 +19,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.collect.Collections2;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
@@ -79,6 +80,12 @@ public static String buildJson(Iterable<Pair<String, Double>> iterable, StringBu
   }
 
   public static List<Pair<Integer, Double>> topEntries(Vector vector, int maxEntries) {
+    // Get the size of nonZero elements in the input vector
+    int sizeOfNonZeroElementsInVector = Iterables.size(vector.nonZeroes());
+    // If the sizeOfNonZeroElementsInVector < maxEntries then set maxEntries to sizeOfNonZeroElementsInVector
+    // else the call to queue.pop() returns a Pair(null, null) and the subsequent
+    // call to pair.getFirst() throws a NullPointerException
+    maxEntries = (sizeOfNonZeroElementsInVector < maxEntries) ? sizeOfNonZeroElementsInVector : maxEntries;
     PriorityQueue<Pair<Integer, Double>> queue = new TDoublePQ<Integer>(-1, maxEntries);
     for (Element e : vector.nonZeroes()) {
       queue.insertWithOverflow(Pair.of(e.index(), e.get()));
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java
index 08cde74d..b193bda0 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java
@@ -17,6 +17,7 @@
 
 package org.apache.mahout.utils.vectors;
 
+import com.google.common.collect.Iterables;
 import org.apache.mahout.math.SequentialAccessSparseVector;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.utils.MahoutTestCase;
@@ -51,4 +52,22 @@ public void testJsonFormatting() throws Exception {
         VectorHelper.vectorToJson(v, dictionary, 2, false));
   }
 
+  @Test
+  public void testTopEntries() throws Exception {
+    Vector v = new SequentialAccessSparseVector(10);
+    v.set(2, 3.1);
+    v.set(4, 1.0);
+    v.set(6, 8.1);
+    v.set(7, -100);
+    v.set(9, 12.2);
+    v.set(1, 0.0);
+    v.set(3, 0.0);
+    v.set(8, 2.7);
+    assertEquals(6, VectorHelper.topEntries(v, 6).size());
+    // when sizeOfNonZeroElementsInVector < maxEntries
+    assertTrue(VectorHelper.topEntries(v, 9).size() < 9);
+    // when sizeOfNonZeroElementsInVector > maxEntries
+    assertTrue(VectorHelper.topEntries(v, 5).size() < Iterables.size(v.nonZeroes()));
+  }
+
 }
