diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index 1d850b26..339ddc0a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -24,6 +24,13 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.apache.cassandra.db.HintedHandOffManager;
+import org.apache.cassandra.db.SystemTable;
+import org.apache.cassandra.db.Table;
+import org.apache.cassandra.db.marshal.BytesType;
+import org.apache.cassandra.db.marshal.TimeUUIDType;
+import org.apache.cassandra.db.marshal.UTF8Type;
+import org.apache.cassandra.db.migration.Migration;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 
@@ -37,13 +44,19 @@
     public final static double DEFAULT_KEY_CACHE_SIZE = 200000;
     public final static double DEFAULT_ROW_CACHE_SIZE = 0.0;
     public final static boolean DEFAULT_PRELOAD_ROW_CACHE = false;
+    private static final int MIN_CF_ID = 1000;
 
-    private static final AtomicInteger idGen = new AtomicInteger(0);
+    private static final AtomicInteger idGen = new AtomicInteger(MIN_CF_ID);
     
     private static final Map<Integer, String> currentCfNames = new HashMap<Integer, String>();
     
     private static final Map<Pair<String, String>, Integer> cfIdMap = new HashMap<Pair<String, String>, Integer>();
 
+    public static final CFMetaData StatusCf = new CFMetaData(Table.SYSTEM_TABLE, SystemTable.STATUS_CF, ColumnFamilyType.Standard, new UTF8Type(), null, "persistent metadata for the local node", 0, false, 0.01, 0);
+    public static final CFMetaData HintsCf = new CFMetaData(Table.SYSTEM_TABLE, HintedHandOffManager.HINTS_CF, ColumnFamilyType.Super, new UTF8Type(), new BytesType(), "hinted handoff data", 0, false, 0.01, 1);
+    public static final CFMetaData MigrationsCf = new CFMetaData(Table.SYSTEM_TABLE, Migration.MIGRATIONS_CF, ColumnFamilyType.Standard, new TimeUUIDType(), null, "individual schema mutations", 0, false, 2);
+    public static final CFMetaData SchemaCf = new CFMetaData(Table.SYSTEM_TABLE, Migration.SCHEMA_CF, ColumnFamilyType.Standard, new UTF8Type(), null, "current state of the schema", 0, false, 3);
+
     public static final Map<Pair<String, String>, Integer> getCfIdMap()
     {
         return Collections.unmodifiableMap(cfIdMap);    
@@ -66,7 +79,7 @@ public static final int getId(String table, String cfName)
     public static final void fixMaxId()
     {
         // never set it to less than 1000. this ensures that we have enough system CFids for future use.
-        idGen.set(cfIdMap.size() == 0 ? 1000 : Math.max(Collections.max(cfIdMap.values()) + 1, 1000));
+        idGen.set(cfIdMap.size() == 0 ? MIN_CF_ID : Math.max(Collections.max(cfIdMap.values()) + 1, MIN_CF_ID));
     }
     
     public final String tableName;            // name of table which has this column family
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 24961513..c7f7589a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -277,43 +277,17 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)
                 CommitLog.setSegmentSize(conf.commitlog_rotation_threshold_in_mb * 1024 * 1024);
 
             // Hardcoded system tables
-            final CFMetaData[] systemCfDefs = new CFMetaData[]
-            {
-                new CFMetaData(Table.SYSTEM_TABLE,
-                               SystemTable.STATUS_CF,
-                               ColumnFamilyType.Standard,
-                               new UTF8Type(),
-                               null,
-                               "persistent metadata for the local node",
-                               0,
-                               false,
-                               0.01),
-                new CFMetaData(Table.SYSTEM_TABLE,
-                               HintedHandOffManager.HINTS_CF,
-                               ColumnFamilyType.Super,
-                               new UTF8Type(),
-                               new BytesType(),
-                               "hinted handoff data",
-                               0,
-                               false,
-                               0.01),
-               new CFMetaData(Table.SYSTEM_TABLE, Migration.MIGRATIONS_CF, ColumnFamilyType.Standard, new TimeUUIDType(), null, "individual schema mutations", 0, false, 0),
-                new CFMetaData(Table.SYSTEM_TABLE, Migration.SCHEMA_CF, ColumnFamilyType.Standard, new UTF8Type(), null, "current state of the schema", 0, false, 0)
-            };
-            KSMetaData systemMeta = new KSMetaData(Table.SYSTEM_TABLE, null, -1, systemCfDefs);
-            CFMetaData.map(systemCfDefs[0]);
-            CFMetaData.map(systemCfDefs[1]);
-            CFMetaData.map(systemCfDefs[2]);
-            CFMetaData.map(systemCfDefs[3]);
+            KSMetaData systemMeta = new KSMetaData(Table.SYSTEM_TABLE, null, -1, new CFMetaData[]{CFMetaData.StatusCf,
+                                                                                                  CFMetaData.HintsCf,
+                                                                                                  CFMetaData.MigrationsCf,
+                                                                                                  CFMetaData.SchemaCf
+            });
+            CFMetaData.map(CFMetaData.StatusCf);
+            CFMetaData.map(CFMetaData.HintsCf);
+            CFMetaData.map(CFMetaData.MigrationsCf);
+            CFMetaData.map(CFMetaData.SchemaCf);
             tables.put(Table.SYSTEM_TABLE, systemMeta);
                 
-            // NOTE: make sure that all system CFMs defined by now. calling fixMaxId at this point will set the base id
-            // to a value that leaves room for future system cfms.
-            // TODO: I've left quite a bit of space for more system CFMs to be defined (up to 1000). However, there is no
-            // way to guarantee the assignment of the right IDS to the system CFMs other than rigidly controlling the order
-            // they ar map()ed in.  It might be a good idea to explicitly set the ids in a static initializer somewhere.
-            CFMetaData.fixMaxId();
-            
             /* Load the seeds for node contact points */
             if (conf.seeds == null || conf.seeds.length <= 0)
             {
