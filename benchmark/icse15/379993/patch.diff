diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
index f1b7450d..eb0849f5 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
@@ -903,7 +903,9 @@ synchronized public void setTransactionIsolation(int level) throws SQLException
                         "Transaction isolation level " + level + " is an invalid argument for java.sql.Connection.setTransactionIsolation()." +
                         " See Javadoc specification for a list of valid arguments.", "XJ045");
             }
-            if (setTransactionIsolationStmt == null) {
+            if (setTransactionIsolationStmt == null  || 
+            		!(setTransactionIsolationStmt.openOnClient_ &&
+            				setTransactionIsolationStmt.openOnServer_)) {
                 setTransactionIsolationStmt =
                         createStatementX(java.sql.ResultSet.TYPE_FORWARD_ONLY,
                                 java.sql.ResultSet.CONCUR_READ_ONLY,
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index 23e232e4..dbfa7b3e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -111,11 +111,6 @@
 	 */
 	private final Object nogc = SecurityCheck.class;
   
-	// setTransactionIsolation in some contexts used in this test is 
-	// causing  java.sql.SQLException: Invalid operation: statement closed
-	// error on client. These cases are omitted for now where they cause the
-	// statement closed error
-	private static boolean  causesStmtClosedOnSetTransactionIsolation = TestUtil.isDerbyNetClientFramework();
 
 	public static void main(String[] args) throws Exception {
 
@@ -368,7 +363,6 @@ protected void runTest(String[] args) throws Exception {
 		printState("initial local", cs1);
 		xar.start(xid, XAResource.TMNOFLAGS);
 		printState("initial  X1", cs1);
-		if (!causesStmtClosedOnSetTransactionIsolation)
 			cs1.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
 		cs1.setReadOnly(true);
 		setHoldability(cs1, false);
@@ -413,10 +407,7 @@ protected void runTest(String[] args) throws Exception {
 		// attach to the global and commit it.
 		// state should be that of the local after the commit.
 		cs1 = xac.getConnection();
-		if (! causesStmtClosedOnSetTransactionIsolation)
-		{
 			cs1.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
-		}
 		printState("pre-X1 commit - local", cs1);
 		xar.start(xid, XAResource.TMJOIN);
 		printState("pre-X1 commit - X1", cs1);
@@ -492,6 +483,11 @@ protected void runTest(String[] args) throws Exception {
 		cs1.setAutoCommit(false);
 
 		checkLocks(cs1);
+		// For client the test only runs this far 
+		// More DERBY-435 checkins will take it further.
+		if (TestUtil.isDerbyNetClientFramework())
+				return;
+		
 		Statement sru1 = cs1.createStatement();
 		sru1.setCursorName("SN1");
 		sru1.executeUpdate("create table ru(i int)");
