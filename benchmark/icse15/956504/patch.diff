diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
index dec76e40..c111ef93 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
@@ -70,10 +70,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * then we will not be able to recompile the statement.
 	 *
 	 * @param lcc			The LanguageConnectionContext.
-	 *
+	 * @return the re-prepared statement (may be a new PreparedStatement)
 	 * @exception StandardException thrown if unable to perform
 	 */
-	void rePrepare(LanguageConnectionContext lcc) 
+	PreparedStatement rePrepare(LanguageConnectionContext lcc)
 		throws StandardException;
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
index a30230b6..a5a90414 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
@@ -258,13 +258,13 @@ public ResultSet execute() throws StandardException
 		** the statement at the same time we're trying to execute it.
 		*/
 		// synchronized (ps)
-		{
+
 			/* Has the activation class changed or has the activation been
 			 * invalidated? */
 			if (gc != ps.getActivationClass() || !ac.isValid())
 			{
-
                 GeneratedClass newGC;
+	        ExecPreparedStatement newPS;
 
 				if (gc != ps.getActivationClass()) {
 					// ensure the statement is valid by rePreparing it.
@@ -275,16 +275,16 @@ public ResultSet execute() throws StandardException
 					// NullPointerException being thrown later. Therefore,
 					// synchronize on ps to close the window.
 					synchronized (ps) {
-						ps.rePrepare(getLanguageConnectionContext());
-						newGC = ps.getActivationClass();
+					newPS = (ExecPreparedStatement) ps.rePrepare(getLanguageConnectionContext());
+					newGC = newPS.getActivationClass();
+				}
 					}
-				} else {
-					// Reuse the generated class, we just want a new activation
-					// since the old is no longer valid.
+			else
+			{
 					newGC = gc;
+				newPS = ps;
 				}
 
-
 				/*
 				** If we get here, it means the Activation has been invalidated
 				** or the PreparedStatement has been recompiled.  Get a new
@@ -295,16 +295,15 @@ public ResultSet execute() throws StandardException
 				*/
 				BaseActivation		newAC = (BaseActivation) newGC.newInstance(lcc);
 
-				DataTypeDescriptor[]	newParamTypes = ps.getParameterTypes();
+			DataTypeDescriptor[] newParamTypes = newPS.getParameterTypes();
 
 				/*
 				** Link the new activation to the prepared statement.
 				*/
-				newAC.setupActivation(ps, ac.getScrollable());
+			newAC.setupActivation(newPS, ac.getScrollable());
 
 				newAC.setParameters(ac.getParameterValueSet(), paramTypes);
 
-
 				/*
 				** IMPORTANT
 				**
@@ -332,9 +331,9 @@ public ResultSet execute() throws StandardException
 				/* Remember the new class information */
 				ac = newAC;
 				gc = newGC;
+			ps = newPS;
 				paramTypes = newParamTypes;
 			}
-		}
 
 		String cursorName = ac.getCursorName();
 		if (cursorName != null)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index eb0e225a..d71a0aeb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -223,14 +223,14 @@ private boolean isUpToDate() {
         return isValid && (activationClass != null) && !compilingStatement;
     }
 
-	public void rePrepare(LanguageConnectionContext lcc) 
+	public PreparedStatement rePrepare(LanguageConnectionContext lcc)
 		throws StandardException {
 		if (!upToDate()) {
 			PreparedStatement ps = statement.prepare(lcc);
-
-			if (SanityManager.DEBUG)
-				SanityManager.ASSERT(ps == this, "ps != this");
+			return ps;
 		}
+
+		return this;
 	}
 
 	/**
@@ -247,7 +247,10 @@ public Activation getActivation(LanguageConnectionContext lcc,
 			GeneratedClass gc = getActivationClass();
 
 			if (gc == null) {
-				rePrepare(lcc);
+				PreparedStatement ps = rePrepare(lcc);
+
+				if (SanityManager.DEBUG)
+					SanityManager.ASSERT(ps == this, "ps != this");
 				gc = getActivationClass();
 			}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index 9018957f..714b1724 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -171,11 +171,18 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 		// cache of prepared statement objects...
 		synchronized (preparedStmt) 
 		{
+			for (;;)
+			{
+				if (preparedStmt.compilingStatement)
+				{
+					preparedStmt = new GenericPreparedStatement(this);
+					break;
+				}
 
-			for (;;) {
-
-				if (foundInCache) {
-					if (preparedStmt.referencesSessionSchema()) {
+				if (foundInCache)
+				{
+					if (preparedStmt.referencesSessionSchema())
+					{
 						// cannot use this state since it is private to a connection.
 						// switch to a new statement.
 						foundInCache = false;
@@ -189,17 +196,9 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 					return preparedStmt;
 				}
 
-				if (!preparedStmt.compilingStatement) {
 					break;
 				}
 
-				try {
-					preparedStmt.wait();
-				} catch (InterruptedException ie) {
-					throw StandardException.interrupt(ie);
-				}
-			}
-
 			preparedStmt.compilingStatement = true;
 			preparedStmt.setActivationClass(null);
 		}
@@ -542,7 +541,6 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 		{
 			synchronized (preparedStmt) {
 				preparedStmt.compilingStatement = false;
-				preparedStmt.notifyAll();
 			}
 		}
 
