diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
index 5e8de98f..abfc53ff 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
@@ -72,6 +72,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public class VersionCombinationConfigurator {
 
+    private static final String EMB_DRIVER =
+                                    "org.apache.derby.jdbc.EmbeddedDriver";
+
     /** Name of the configuration, only used for informational purposes. */
     private final String name;
     /** Decides if combinations have to involve trunk (as server or client). */
@@ -281,20 +284,25 @@ private boolean skipServerVersion(DerbyVersion version) {
      * Returns the running distribution, which is typically trunk.
      *
      * @return Information about the running distribution.
-     * @throws IllegalArgumentException if parsing the version string fails, or
-     *      if trunk is run off the classes directory
+     * @throws IllegalStateException if parsing the version string fails, if
+     *      required Derby classes are missing, or if trunk is run off the
+     *      classes directory
      */
     private DerbyDistribution getRunningDistribution() {
-        File libDir = new File(getClassURI(getClass()));
-        if (libDir.isDirectory()) {
-            throw new IllegalStateException("only running off jars is " +
-                    "supported, currently running off " + libDir);
+        File libDir;
+        try {
+            libDir = getJarDirectoryOf(Class.forName(EMB_DRIVER));
+        } catch (ClassNotFoundException cnfe) {
+            // Add relevant information to the error message, the cause and
+            // its stack trace is not printed by default in this context.
+            throw new IllegalStateException(
+                    "missing Derby class: " + cnfe.getMessage(), cnfe);
         }
-        // Get the directory the JAR file is living in.
-        libDir = libDir.getParentFile();
+        File testingDir = getJarDirectoryOf(getClass());
         DerbyVersion version = DerbyVersion.parseVersionString(
                 sysinfo.getVersionString());
-        DerbyDistribution dist = DerbyDistribution.getInstance(libDir, version);
+        DerbyDistribution dist = DerbyDistribution.newInstance(
+                                                version, libDir, testingDir);
         if (dist == null) {
             throw new IllegalStateException(
                     "failed to get running distribution (programming error?)");
@@ -302,6 +310,22 @@ private DerbyDistribution getRunningDistribution() {
         return dist;
     }
 
+    /**
+     * Returns the directory for the JAR file containing the given class.
+     *
+     * @return A directory path.
+     * @throws IllegalStateException if the class isn't loaded from a JAR
+     */
+    private File getJarDirectoryOf(Class clazz) {
+        File jarPath = new File(getClassURI(clazz));
+        if (jarPath.isDirectory()) {
+            throw new IllegalStateException("only running off jars is " +
+                    "supported, currently running off directory " + jarPath);
+        }
+        // Get the directory the JAR file is living in.
+        return jarPath.getParentFile();
+    }
+
     /**
      * Sorts and filters out distributions based on the configurator settings.
      *
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java
index e3952d82..eb88c443 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java
@@ -35,12 +35,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * based on the version of the Derby distribution.
  * <p>
  * <em>Implementation note</em>: For simplicity distributions off the classes
- * directory has been forbidden. The main reason for this is that it is
+ * directory have been forbidden. The main reason for this is that it is
  * sometimes a hard requirement that you must include only a single JAR from a
  * distribution on the classpath. One such example is the compatibility test,
  * where you need the testing code from one distribution and the client driver
- * from another. While it is possible to support such a configuration in many
- * scenarios, it complicates things quite a bit. Generating the JARs when
+ * from another. While it is possible to support such a configuration running
+ * off the {@code classes}-directory in many scenarios, it complicates
+ * the creation and handling of classpath string. Generating the JARs when
  * testing on trunk seems like an acceptable price to pay.
  */
 public class DerbyDistribution
@@ -296,22 +297,49 @@ private static String constructJarClasspath(File[] jars) {
     }
 
     /**
-     * Returns an instance based on the given library directory and version.
      * <p>
-     * This method is capable of understanding the difference of JAR based
-     * distribution and a distribution running off the classes-directory.
+     * Returns a distribution with the specified version, based on the given
+     * library directory.
+     * </p>
+     *
+     * <p>
+     * It is the responsibility of the caller to ensure that the specified
+     * version matches the JARs in the given directory.
+     * </p>
+     *
+     * @param version the version of the distribution
+     * @param baseDir the base dir for the distribution, holding the Derby JARs
+     * @return A representation of the distribution, or {@code null} if
+     *      the specified directory doesn't contain a valid distribution.
+     * @throws IllegalArgumentException if {@code version} is {@code null}
+     */
+    public static DerbyDistribution newInstance(DerbyVersion version,
+                                                File baseDir) {
+        return newInstance(version, baseDir, baseDir);
+    }
+
+    /**
+     * <p>
+     * Returns a distribution with the specified version, based on the given
+     * library and testing directories.
+     * </p>
+     *
+     * <p>
+     * It is the responsibility of the caller to ensure that the specified
+     * version matches the JARs in the given directories.
+     * </p>
      *
-     * @param dir the base directory for the distribution (either the classes
-     *      directory or a directory holding the Derby JAR files)
      * @param version the version of the distribution
+     * @param baseDir the directory holding the production JARs
+     * @param testDir the directory holding the testing JAR
      * @return A representation of the distribution, or {@code null} if
-     *      the specified directory is determined to be invalid.
+     *      the specified directories don't make up a valid distribution.
      * @throws IllegalArgumentException if {@code version} is {@code null}
      */
-    public static DerbyDistribution getInstance(File dir,
-                                                DerbyVersion version) {
-        File[] productionJars = getProductionJars(dir);
-        File[] testingJars = getTestingJars(dir);
+    public static DerbyDistribution newInstance(DerbyVersion version,
+                                                File baseDir, File testDir) {
+        File[] productionJars = getProductionJars(baseDir);
+        File[] testingJars = getTestingJars(testDir);
         List tmpJars = new ArrayList();
         tmpJars.addAll(Arrays.asList(productionJars));
         tmpJars.addAll(Arrays.asList(testingJars));
@@ -320,7 +348,9 @@ public static DerbyDistribution getInstance(File dir,
         }
         // Invalid distribution, ignore it.
         BaseTestCase.println("Distribution deemed invalid (note that running " +
-                "off classes isn't supported): " + dir.getAbsolutePath());
+                "off classes isn't supported): " + baseDir.getAbsolutePath() +
+                (baseDir.equals(testDir) ? ""
+                                         : ", " + testDir.getAbsolutePath()));
         return null;
     }
 }
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/ReleaseRepository.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/ReleaseRepository.java
index 91a01280..e2bbdeb6 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/ReleaseRepository.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/ReleaseRepository.java
@@ -192,8 +192,8 @@ public boolean accept(File pathname) {
                         dir.getAbsolutePath());
                 continue;
             }
-            DerbyDistribution dist = DerbyDistribution.getInstance(
-                    dir, version);
+            DerbyDistribution dist = DerbyDistribution.newInstance(
+                    version, dir);
             // TODO: 10.0.1.2 is considered invalid because it doesn't have a
             //       a client JAR. Accept, ignore, or warn all the time?
             if (dist == null) {
