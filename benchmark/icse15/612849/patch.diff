diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java
index fd09d4e0..4a71ecb7 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java
@@ -146,6 +146,11 @@ boolean calculateColumnOffsetsForRow_(int rowIndex,
         }
 
         NetSqlca[] netSqlca = this.parseSQLCARD(qrydscTypdef_);
+        // If we don't have at least one byte in the buffer for the DA null indicator,
+        // then we need to send a CNTQRY request to fetch the next block of data.
+        // Read the DA null indicator. Do this before we close mark the statement
+        // closed on the server. DERBY-3230
+        daNullIndicator = readFdocaOneByte();
 
         if (netSqlca != null) {
             for (int i=0;i<netSqlca.length; i++) {
@@ -183,10 +188,7 @@ boolean calculateColumnOffsetsForRow_(int rowIndex,
         setIsUpdataDeleteHole(rowIndex, receivedDeleteHoleWarning);
         setIsRowUpdated(receivedRowUpdatedWarning);
         
-        // If we don't have at least one byte in the buffer for the DA null indicator,
-        // then we need to send a CNTQRY request to fetch the next block of data.
-        // Read the DA null indicator.
-        daNullIndicator = readFdocaOneByte();
+        
 
         // In the case for held cursors, the +100 comes back as part of the QRYDTA, and as
         // we are parsing through the row that contains the SQLCA with +100, we mark the
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java
index 5d39df5e..18f9fa87 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java
@@ -1248,6 +1248,41 @@ public void testLargeParameters_b() throws Exception
         ps.close();
     }
 
+    /**
+     * Test fix for protocol error if splitQRYDTA occurs during DRDAConnThread.doneData()
+     * DERBY-3230
+     * @throws SQLException
+     */
+    public void testDerby3230() throws SQLException {
+        Statement s = createStatement();
+        s.executeUpdate("CREATE TABLE TAB (col1 varchar(32672) NOT NULL)");
+        PreparedStatement ps = prepareStatement("INSERT INTO TAB VALUES(?)");
+        ps.setString(1,makeString(15000));
+        ps.executeUpdate();
+        ps.setString(1,makeString(7500));
+        ps.executeUpdate();
+        ps.setString(1,makeString(5000));
+        ps.executeUpdate();
+        ps.setString(1,makeString(2000));
+        ps.executeUpdate();
+        ps.setString(1,makeString(1600));
+        ps.executeUpdate();
+        ps.setString(1,makeString(800));
+        ps.executeUpdate();
+        ps.setString(1,makeString(400));
+        ps.executeUpdate();
+        ps.setString(1,makeString(200));
+        ps.executeUpdate();
+        ps.setString(1,makeString(100));
+        ps.executeUpdate();
+        ps.setString(1,makeString(56));
+        ps.executeUpdate();
+            
+        ResultSet rs = s.executeQuery("SELECT * from tab");
+        // drain the resultset
+        JDBC.assertDrainResults(rs);
+                   
+    }
     /**
      * Return a string of the given length.  The string will contain just 'X'
      * characters.
