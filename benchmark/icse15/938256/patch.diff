diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
index d6d6ceea..ec833d94 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
@@ -77,9 +77,11 @@ public void applyModels()
         // reinitialize the table.
         KSMetaData ksm = DatabaseDescriptor.getTableDefinition(cfm.tableName);
         ksm = makeNewKeyspaceDefinition(ksm);
+        if (!clientMode)
         Table.open(ksm.name).initCf(cfm.cfId, cfm.cfName);
         DatabaseDescriptor.setTableDefinition(ksm, newVersion);
         
+        if (!clientMode)
         // force creation of a new commit log segment.
         CommitLog.instance().forceNewSegment();    
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
index db54982b..05a537c9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
@@ -69,9 +69,12 @@ public void applyModels() throws IOException
         DatabaseDescriptor.setTableDefinition(ksm, newVersion);
         // these definitions could have come from somewhere else.
         CFMetaData.fixMaxId();
+        if (!clientMode)
+        {
         Table.open(ksm.name);
         CommitLog.instance().forceNewSegment();
     }
+    }
     
     private static final class Serializer implements ICompactSerializer<AddKeyspace>
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java
index 528ec597..7dd1d50a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java
@@ -87,6 +87,8 @@ private KSMetaData makeNewKeyspaceDefinition(KSMetaData ksm)
     @Override
     public void beforeApplyModels()
     {
+        if (clientMode)
+            return;
         ColumnFamilyStore cfs = Table.open(tableName).getColumnFamilyStore(cfName);
         cfs.snapshot(Table.getTimestampedSnapshotName(null));
     }
@@ -106,6 +108,9 @@ public void applyModels() throws IOException
         KSMetaData ksm = makeNewKeyspaceDefinition(existing);
         CFMetaData.purge(cfm);
         DatabaseDescriptor.setTableDefinition(ksm, newVersion);
+        
+        if (!clientMode)
+        {
         Table.open(ksm.name).dropCf(cfm.cfId);
         
         // indicate that some files need to be deleted (eventually)
@@ -116,6 +121,7 @@ public void applyModels() throws IOException
 
         Migration.cleanupDeadFiles(blockOnFileDeletion);   
     }
+    }
     
     private static final class Serializer implements ICompactSerializer<DropColumnFamily>
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropKeyspace.java
index ae789a59..c20842e7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropKeyspace.java
@@ -70,6 +70,7 @@ public ICompactSerializer getSerializer()
     @Override
     public void beforeApplyModels()
     {
+        if (!clientMode)
         Table.open(name).snapshot(null);
     }
 
@@ -86,18 +87,25 @@ public void applyModels() throws IOException
         for (CFMetaData cfm : ksm.cfMetaData().values())
         {
             CFMetaData.purge(cfm);
+            if (!clientMode)
+            {
             table.dropCf(cfm.cfId);
             SystemTable.markForRemoval(cfm);
         }
+        }
                         
         // reset defs.
         DatabaseDescriptor.clearTableDefinition(ksm, newVersion);
+        
+        if (!clientMode)
+        {
         CommitLog.instance().forceNewSegment();
         Migration.cleanupDeadFiles(blockOnFileDeletion);
         
         // clear up any local hinted data for this keyspace.
         HintedHandOffManager.renameHints(name, null);
     }
+    }
     
     private static final class Serializer implements ICompactSerializer<DropKeyspace>
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
index 0d7677fc..61354dd9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -18,21 +18,17 @@
 
 package org.apache.cassandra.db.migration;
 
-import org.apache.cassandra.concurrent.StageManager;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.config.KSMetaData;
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.db.CompactionManager;
 import org.apache.cassandra.db.DecoratedKey;
-import org.apache.cassandra.db.DefsTable;
 import org.apache.cassandra.db.IColumn;
 import org.apache.cassandra.db.RowMutation;
 import org.apache.cassandra.db.Table;
-import org.apache.cassandra.db.filter.NamesQueryFilter;
 import org.apache.cassandra.db.filter.QueryFilter;
 import org.apache.cassandra.db.filter.QueryPath;
-import org.apache.cassandra.db.filter.SliceQueryFilter;
 import org.apache.cassandra.gms.ApplicationState;
 import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.io.ICompactSerializer;
@@ -41,7 +37,6 @@
 import org.apache.cassandra.utils.UUIDGen;
 import static org.apache.cassandra.utils.FBUtilities.UTF8;
 
-import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -50,8 +45,6 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.OutputStream;
-import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.UUID;
@@ -89,10 +82,14 @@
     protected final UUID newVersion;
     protected UUID lastVersion;
     
+    // this doesn't follow the serialized migration around.
+    protected final transient boolean clientMode;
+    
     Migration(UUID newVersion, UUID lastVersion)
     {
         this.newVersion = newVersion;
         this.lastVersion = lastVersion;
+        clientMode = StorageService.instance.isClientMode();
     }
 
     /** override this to perform logic before writing the migration or applying it.  defaults to nothing. */
@@ -106,11 +103,14 @@ public final void apply() throws IOException
             throw new IOException("Previous version mismatch. cannot apply.");
         // write to schema
         assert rm != null;
+        if (!clientMode)
         rm.apply();
 
         beforeApplyModels();
         
         // write migration.
+        if (!clientMode)
+        {
         long now = System.currentTimeMillis();
         byte[] buf = getBytes();
         RowMutation migration = new RowMutation(Table.DEFINITIONS, MIGRATIONS_KEY);
@@ -139,12 +139,16 @@ public final void apply() throws IOException
                 throw new IOException(e);
             }
         }
+        }
         
         applyModels(); 
     }
     
     public final void announce()
     {
+        if (StorageService.instance.isClientMode())
+            return;
+        
         // immediate notification for esiting nodes.
         MigrationManager.announce(newVersion, Gossiper.instance.getLiveMembers());
         // this is for notifying nodes as they arrive in the cluster.
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
index 952c7616..4458eb9d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
@@ -105,15 +105,19 @@ public void applyModels() throws IOException
     {
         // leave it up to operators to ensure there are no writes going on durng the file rename. Just know that
         // attempting row mutations on oldcfName right now would be really bad.
+        if (!clientMode)
         renameCfStorageFiles(tableName, oldName, newName);
         
         // reset defs.
         KSMetaData ksm = makeNewKeyspaceDefinition(DatabaseDescriptor.getTableDefinition(tableName));
         DatabaseDescriptor.setTableDefinition(ksm, newVersion);
-        Table.open(ksm.name).renameCf(cfId, newName);
         
+        if (!clientMode)
+        {
+            Table.open(ksm.name).renameCf(cfId, newName);
         CommitLog.instance().forceNewSegment();
     }
+    }
     
     // if this errors out, we are in a world of hurt.
     private static void renameCfStorageFiles(String table, String oldCfName, String newCfName) throws IOException
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
index b3d8c79d..fb3f4048 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
@@ -80,6 +80,7 @@ public ICompactSerializer getSerializer()
     @Override
     public void applyModels() throws IOException
     {
+        if (!clientMode)
         renameKsStorageFiles(oldName, newName);
         
         KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(oldName);
@@ -88,6 +89,9 @@ public void applyModels() throws IOException
         // it helps if the node is reasonably quiescent with respect to this ks.
         DatabaseDescriptor.clearTableDefinition(oldKsm, newVersion);
         DatabaseDescriptor.setTableDefinition(newKsm, newVersion);
+        
+        if (!clientMode)
+        {
         Table.clear(oldKsm.name);
         Table.open(newName);
         // this isn't strictly necessary since the set of all cfs was not modified.
@@ -95,6 +99,7 @@ public void applyModels() throws IOException
 
         HintedHandOffManager.renameHints(oldName, newName);
     }
+    }
     
     private static void renameKsStorageFiles(String oldKs, String newKs) throws IOException
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 825cb8e9..9c96c099 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -18,6 +18,7 @@
 
 package org.apache.cassandra.service;
 
+import java.io.IOError;
 import java.io.IOException;
 import java.lang.management.ManagementFactory;
 import java.lang.reflect.Constructor;
@@ -306,6 +307,17 @@ public synchronized void initClient() throws IOException
         Gossiper.instance.register(this);
         Gossiper.instance.start(FBUtilities.getLocalAddress(), (int)(System.currentTimeMillis() / 1000)); // needed for node-ring gathering.
         setMode("Client", false);
+        
+        // sleep a while to allow gossip to warm up (the other nodes need to know about this one before they can reply).
+        try
+        {
+            Thread.sleep(5000L);
+        }
+        catch (Exception ex)
+        {
+            throw new IOError(ex);
+        }
+        MigrationManager.announce(DatabaseDescriptor.getDefsVersion(), DatabaseDescriptor.getSeeds());
     }
 
     public synchronized void initServer() throws IOException
