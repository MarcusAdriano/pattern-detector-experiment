diff --git a/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java b/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
index 735349b6..4a01f778 100644
--- a/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
+++ b/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
@@ -86,7 +86,7 @@ protected void testCompaction(int sstableCount, int rowsPerSSTable, int colsPerR
                 }
                 rows.put(key, SSTableUtils.createCF(Long.MIN_VALUE, Integer.MIN_VALUE, cols));
             }
-            SSTableReader sstable = SSTableUtils.writeSSTable(rows);
+            SSTableReader sstable = SSTableUtils.prepare().write(rows);
             sstables.add(sstable);
             store.addSSTable(sstable);
         }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
index 6eb3dcde..1f0cc128 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
@@ -40,7 +40,7 @@ public void testSingleWrite() throws IOException {
 
         Map<ByteBuffer, ByteBuffer> map = new HashMap<ByteBuffer,ByteBuffer>();
         map.put(key, bytes);
-        SSTableReader ssTable = SSTableUtils.writeRawSSTable("Keyspace1", "Standard1", map);
+        SSTableReader ssTable = SSTableUtils.prepare().cf("Standard1").writeRaw(map);
 
         // verify
         verifySingle(ssTable, bytes, key);
@@ -68,7 +68,7 @@ public void testManyWrites() throws IOException {
         }
 
         // write
-        SSTableReader ssTable = SSTableUtils.writeRawSSTable("Keyspace1", "Standard2", map);
+        SSTableReader ssTable = SSTableUtils.prepare().cf("Standard2").writeRaw(map);
 
         // verify
         verifyMany(ssTable, map);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
index 518a87f4..02d788bc 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
@@ -71,47 +71,98 @@ public static File tempSSTableFile(String tablename, String cfname, int generati
         return datafile;
     }
 
-    public static SSTableReader writeSSTable(Set<String> keys) throws IOException
+    /**
+     * @return A Context with chainable methods to configure and write a SSTable.
+     */
+    public static Context prepare()
+    {
+        return new Context();
+    }
+
+    public static class Context
+    {
+        private String ksname = TABLENAME;
+        private String cfname = CFNAME;
+        private Descriptor dest = null;
+        private boolean cleanup = true;
+        private int generation = 0;
+
+        Context() {}
+
+        public Context ks(String ksname)
+        {
+            this.ksname = ksname;
+            return this;
+        }
+
+        public Context cf(String cfname)
+        {
+            this.cfname = cfname;
+            return this;
+        }
+
+        /**
+         * Set an alternate path for the written SSTable: if unset, the SSTable will
+         * be cleaned up on JVM exit.
+         */
+        public Context dest(Descriptor dest)
+        {
+            this.dest = dest;
+            this.cleanup = false;
+            return this;
+        }
+
+        /**
+         * Sets the generation number for the generated SSTable. Ignored if "dest()" is set.
+         */
+        public Context generation(int generation)
+        {
+            this.generation = generation;
+            return this;
+        }
+
+        public SSTableReader write(Set<String> keys) throws IOException
     {
         Map<String, ColumnFamily> map = new HashMap<String, ColumnFamily>();
         for (String key : keys)
         {
-            ColumnFamily cf = ColumnFamily.create(TABLENAME, CFNAME);
+                ColumnFamily cf = ColumnFamily.create(ksname, cfname);
             cf.addColumn(new Column(ByteBuffer.wrap(key.getBytes()), ByteBuffer.wrap(key.getBytes()), 0));
             map.put(key, cf);
         }
-        return writeSSTable(map);
+            return write(map);
     }
 
-    public static SSTableReader writeSSTable(Map<String, ColumnFamily> entries) throws IOException
+        public SSTableReader write(Map<String, ColumnFamily> entries) throws IOException
     {
         Map<ByteBuffer, ByteBuffer> map = new HashMap<ByteBuffer, ByteBuffer>();
         for (Map.Entry<String, ColumnFamily> entry : entries.entrySet())
         {
             DataOutputBuffer buffer = new DataOutputBuffer();
             ColumnFamily.serializer().serializeWithIndexes(entry.getValue(), buffer);
-            map.put(ByteBuffer.wrap(entry.getKey().getBytes()), ByteBuffer.wrap(Arrays.copyOf(buffer.getData(), buffer.getLength())));
-        }
-        return writeRawSSTable(TABLENAME, CFNAME, map);
+                map.put(ByteBuffer.wrap(entry.getKey().getBytes()),
+                        ByteBuffer.wrap(buffer.asByteArray()));
     }
-
-    public static SSTableReader writeRawSSTable(String tablename, String cfname, Map<ByteBuffer, ByteBuffer> entries) throws IOException
-    {
-        return writeRawSSTable(tablename, cfname, entries, 0);
+            return writeRaw(map);
     }
 
-    public static SSTableReader writeRawSSTable(String tablename, String cfname, Map<ByteBuffer, ByteBuffer> entries, int generation) throws IOException
+        /**
+         * @Deprecated: Writes the binary content of a row, which should be encapsulated.
+         */
+        public SSTableReader writeRaw(Map<ByteBuffer, ByteBuffer> entries) throws IOException
     {
-        File datafile = tempSSTableFile(tablename, cfname, generation);
+            File datafile = (dest == null) ? tempSSTableFile(ksname, cfname, generation) : new File(dest.filenameFor(Component.DATA));
         SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), entries.size());
         SortedMap<DecoratedKey, ByteBuffer> sortedEntries = new TreeMap<DecoratedKey, ByteBuffer>();
         for (Map.Entry<ByteBuffer, ByteBuffer> entry : entries.entrySet())
             sortedEntries.put(writer.partitioner.decorateKey(entry.getKey()), entry.getValue());
         for (Map.Entry<DecoratedKey, ByteBuffer> entry : sortedEntries.entrySet())
             writer.append(entry.getKey(), entry.getValue());
-        new File(writer.descriptor.filenameFor(Component.PRIMARY_INDEX)).deleteOnExit();
-        new File(writer.descriptor.filenameFor(Component.FILTER)).deleteOnExit();
-        return writer.closeAndOpenReader();
+            SSTableReader reader = writer.closeAndOpenReader();
+            if (cleanup)
+                for (Component comp : reader.components)
+                    new File(reader.descriptor.filenameFor(comp)).deleteOnExit();
+            return reader;
+        }
     }
-
 }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterAESCommutativeTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterAESCommutativeTest.java
index 66083abb..cb2dea52 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterAESCommutativeTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterAESCommutativeTest.java
@@ -157,7 +157,7 @@ public void testRecoverAndOpenAESCommutative() throws IOException, ExecutionExce
         cf.clear();
 
         // write out unmodified CF
-        SSTableReader orig = SSTableUtils.writeRawSSTable(keyspace, cfname, entries, 0);
+        SSTableReader orig = SSTableUtils.prepare().ks(keyspace).cf(cfname).generation(0).writeRaw(entries);
 
         // whack the index to trigger the recover
         FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.PRIMARY_INDEX));
@@ -170,7 +170,7 @@ public void testRecoverAndOpenAESCommutative() throws IOException, ExecutionExce
             ).get();
 
         // write out cleaned CF
-        SSTableReader cleaned = SSTableUtils.writeRawSSTable(keyspace, cfname, cleanedEntries, 0);
+        SSTableReader cleaned = SSTableUtils.prepare().ks(keyspace).cf(cfname).generation(0).writeRaw(cleanedEntries);
 
         // verify
         BufferedRandomAccessFile origFile    = new BufferedRandomAccessFile(orig.descriptor.filenameFor(SSTable.COMPONENT_DATA), "r", 8 * 1024 * 1024);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterTest.java
index 3a808047..da5937f2 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableWriterTest.java
@@ -76,7 +76,7 @@ public void testRecoverAndOpen() throws IOException, ExecutionException, Interru
         ColumnFamily.serializer().serializeWithIndexes(cf, buffer);               
         entries.put(ByteBufferUtil.bytes("k3"), ByteBuffer.wrap(Arrays.copyOf(buffer.getData(), buffer.getLength())));
         
-        SSTableReader orig = SSTableUtils.writeRawSSTable("Keyspace1", "Indexed1", entries);        
+        SSTableReader orig = SSTableUtils.prepare().cf("Indexed1").writeRaw(entries);        
         // whack the index to trigger the recover
         FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.PRIMARY_INDEX));
         FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.FILTER));
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
index 83b3e32e..019a19dd 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
@@ -119,7 +119,7 @@ public void testTransferTableMultiple() throws Exception
         content.add("transfer1");
         content.add("transfer2");
         content.add("transfer3");
-        SSTableReader sstable = SSTableUtils.writeSSTable(content);
+        SSTableReader sstable = SSTableUtils.prepare().write(content);
         String tablename = sstable.getTableName();
         String cfname = sstable.getColumnFamilyName();
 
@@ -127,7 +127,7 @@ public void testTransferTableMultiple() throws Exception
         content2.add("test");
         content2.add("test2");
         content2.add("test3");
-        SSTableReader sstable2 = SSTableUtils.writeSSTable(content2);
+        SSTableReader sstable2 = SSTableUtils.prepare().write(content2);
 
         // transfer the first and last key
         IPartitioner p = StorageService.getPartitioner();
