diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
index cd652ec5..0dca057b 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
@@ -36,24 +36,18 @@
 
   private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
   private final ClassLoader loader;
-  private String currentClassInternalName;
-  private String currentSuperClassInternalName;
  
   
-  public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader, String currentClassInternalName, String currentSuperClassInternalName) {
+  public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
     super(arg0, arg1);
     
     this.loader = loader;
-    this.currentClassInternalName = currentClassInternalName;
-    this.currentSuperClassInternalName = currentSuperClassInternalName;
   }
   
-  public OSGiFriendlyClassWriter(int arg0, ClassLoader loader, String currentClassInternalName, String currentSuperClassInternalName) {
+  public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
     super(arg0);
     
     this.loader = loader;
-    this.currentClassInternalName = currentClassInternalName;
-    this.currentSuperClassInternalName = currentSuperClassInternalName;
   }
 
   /**
@@ -61,25 +55,15 @@ public OSGiFriendlyClassWriter(int arg0, ClassLoader loader, String currentClass
    * not be sufficient because it expects to find the common parent using a single
    * classloader, though in fact the common parent may only be loadable by another
    * bundle from which an intermediate class is loaded
+   *
+   * precondition: arg0 and arg1 are not equal. (checked before this method is called)
    */
   @Override
   protected final String getCommonSuperClass(String arg0, String arg1) {
-    //---------------  see asm ow2 316320 which proposes putting the generic common cases in ClassWriter.internalGetCommonSuperClass
-    //If the two are equal then return either
-    if(arg0.equals(arg1))
-      return arg0;
-
     //If either is Object, then Object must be the answer
-    if(arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME))
+    if(arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME)) {
       return OBJECT_INTERNAL_NAME;
-
-    // If either of these class names are the current class then we can short
-    // circuit to the superclass (which we already know)
-    if(arg0.equals(currentClassInternalName))
-      return getCommonSuperClass(currentSuperClassInternalName, arg1);
-    else if (arg1.equals(currentClassInternalName))
-      return getCommonSuperClass(arg0, currentSuperClassInternalName);
-    //---------------- end asm 316320 proposal
+    }
     Set<String> names = new HashSet<String>();
     names.add(arg0);
     names.add(arg1);
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
index 76731d2a..26a6a3d6 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
@@ -61,7 +61,7 @@
   InterfaceCombiningClassAdapter(String className,
       ClassLoader loader, Class<?> superclass, Collection<Class<?>> interfaces) {
     super(Opcodes.ASM4);
-    writer = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_FRAMES, loader, className, (superclass!=null)? superclass.getName(): null);
+    writer = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_FRAMES, loader);
     ClassVisitor cv = new OSGiFriendlyClassVisitor(writer, ClassWriter.COMPUTE_FRAMES);
     adapter = new InterfaceUsingWovenProxyAdapter(cv, className, loader);
 
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
index 0816b44b..34425f85 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
@@ -77,7 +77,7 @@ public final void weave(WovenClass wovenClass) {
     
     try {
       bytes = WovenProxyGenerator.getWovenProxy(wovenClass.getBytes(),
-          wovenClass.getClassName(), wovenClass.getBundleWiring().getClassLoader());
+              wovenClass.getBundleWiring().getClassLoader());
       
     } catch (Exception e) {
       if(e instanceof RuntimeException && 
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
index b381da5f..bdd013fb 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
@@ -34,7 +34,7 @@
  */
 public final class WovenProxyGenerator
 {
-  public static final byte[] getWovenProxy(byte[] original, String className, ClassLoader loader){
+  public static final byte[] getWovenProxy(byte[] original, ClassLoader loader){
     ClassReader cReader = new ClassReader(original);
     //Don't weave interfaces, enums or annotations
     if((cReader.getAccess() & (ACC_INTERFACE | ACC_ANNOTATION | ACC_ENUM)) != 0)
@@ -44,11 +44,11 @@
     //maxs are fine (and faster)
     int computeVal = AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? 
         ClassWriter.COMPUTE_FRAMES : ClassWriter.COMPUTE_MAXS;
-    ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, computeVal, loader, cReader.getClassName(), cReader.getSuperName());
+    ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, computeVal, loader);
     ClassVisitor cv = new OSGiFriendlyClassVisitor(cWriter, computeVal );
     //Wrap our outer layer to add the original SerialVersionUID if it was previously being defaulted
     ClassVisitor weavingAdapter = new SyntheticSerialVerUIDAdder(
-                               new WovenProxyAdapter(cv, className, loader));
+                               new WovenProxyAdapter(cv, cReader.getClassName(), loader));
     
     // If we are Java 1.6 + then we need to skip frames as they will be recomputed
     cReader.accept(weavingAdapter, AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? ClassReader.SKIP_FRAMES : 0);
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
index 946fdfaa..bccddddf 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
@@ -122,7 +122,7 @@
         }
       }
       if(weave)
-        bytes = WovenProxyGenerator.getWovenProxy(bytes, className, this);
+        bytes = WovenProxyGenerator.getWovenProxy(bytes, this);
       
       return defineClass(className, bytes, 0, bytes.length);
     }
