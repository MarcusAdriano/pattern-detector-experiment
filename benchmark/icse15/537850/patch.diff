diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java
index 2f618459..6e3b866f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java
@@ -72,7 +72,7 @@ public SQLException getSQLException (String message, String sqlState,
         } else if (sqlState.startsWith(SQLState.INTEGRITY_VIOLATION_PREFIX)) {
             ex = new SQLIntegrityConstraintViolationException(message, sqlState,
                     errCode);
-        } else if (sqlState.startsWith(SQLState.AUTHORIZATION_PREFIX)) {
+        } else if (sqlState.startsWith(SQLState.AUTHORIZATION_SPEC_PREFIX)) {
             ex = new SQLInvalidAuthorizationSpecException(message, sqlState,
                     errCode);
         } else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX) ||
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
index be3448ef..9cb95816 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
@@ -80,7 +80,7 @@ public SQLException getSQLException(String message, String messageId,
         } else if (sqlState.startsWith(SQLState.INTEGRITY_VIOLATION_PREFIX)) {
             ex = new SQLIntegrityConstraintViolationException(message, sqlState,
                     severity, t);
-        } else if (sqlState.startsWith(SQLState.AUTHORIZATION_PREFIX)) {
+        } else if (sqlState.startsWith(SQLState.AUTHORIZATION_SPEC_PREFIX)) {
             ex = new SQLInvalidAuthorizationSpecException(message, sqlState,
                     severity, t);
         }        
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 53fef2f7..e06b7a4c 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -585,6 +585,7 @@ The message identifier (ie. the value that matches a field in this class)
 	** A group for standard SQLExceptions.
 	**
 	** 2200J-00R - For SQL/XML errors (based on SQL/XML[2006]).
+	** 4250x - access rule violations
 	** 428?? - adding some DB2 compatible errors
 	** 42X00-42Zxx for compilation errors 
 	** 46000  for SQLJ errors (for now, leave this range empty)
@@ -727,6 +728,24 @@ The message identifier (ie. the value that matches a field in this class)
 
 	String LANG_NULL_TO_PRIMITIVE_PARAMETER                            = "39004";
 	String LANG_SYNTAX_OR_ACCESS_VIOLATION                             = "42000";
+
+	// Fix for Derby-1828 - access rule violations should use SQL state 42
+	String AUTH_NO_TABLE_PERMISSION                                    = "42500";
+	String AUTH_NO_TABLE_PERMISSION_FOR_GRANT                          = "42501";
+	String AUTH_NO_COLUMN_PERMISSION                                   = "42502";
+	String AUTH_NO_COLUMN_PERMISSION_FOR_GRANT                         = "42503";
+	String AUTH_NO_EXECUTE_PERMISSION                                  = "42504";
+	String AUTH_NO_EXECUTE_PERMISSION_FOR_GRANT                        = "42505";
+	String AUTH_NOT_OWNER                                              = "42506";
+	String AUTH_NO_ACCESS_NOT_OWNER                                    = "42507";
+	String AUTH_NOT_DATABASE_OWNER                                     = "42508";
+	String AUTH_GRANT_REVOKE_NOT_ALLOWED                               = "42509";
+	String AUTH_NO_OBJECT_PERMISSION                                   = "4250A";
+	String AUTH_INVALID_AUTHORIZATION_PROPERTY                         = "4250B";
+	String AUTH_USER_IN_READ_AND_WRITE_LISTS                           = "4250C";
+	String AUTH_DUPLICATE_USERS                                        = "4250D";
+	String AUTH_INTERNAL_BAD_UUID                                      = "4250E";
+
 	String LANG_DB2_NOT_NULL_COLUMN_INVALID_DEFAULT                    = "42601";
 	String LANG_DB2_INVALID_HEXADECIMAL_CONSTANT                    = "42606";
 	String LANG_DB2_STRING_CONSTANT_TOO_LONG                    = "54002";
@@ -1363,32 +1382,13 @@ The message identifier (ie. the value that matches a field in this class)
 	/*
 	** Authorization and Authentication
 	*/
-	String AUTHORIZATION_PREFIX="28";
+	String AUTHORIZATION_SPEC_PREFIX="28";
 	
-	String AUTH_DATABASE_CONNECTION_REFUSED                            = "04501.C";
 	String AUTH_SET_CONNECTION_READ_ONLY_IN_ACTIVE_XACT                = "25501";
 	String AUTH_WRITE_WITH_READ_ONLY_CONNECTION                        = "25502";
 	String AUTH_DDL_WITH_READ_ONLY_CONNECTION                          = "25503";
 	String AUTH_CANNOT_SET_READ_WRITE                                  = "25505";
-	String AUTH_INVALID_AUTHORIZATION_PROPERTY                         = "28501";
 	String AUTH_INVALID_USER_NAME                                      = "28502.C";
-	String AUTH_USER_IN_READ_AND_WRITE_LISTS                           = "28503";
-	String AUTH_DUPLICATE_USERS                                        = "28504";
-	String AUTH_INTERNAL_BAD_UUID                                      = "28505";
-	String AUTH_NO_TABLE_PERMISSION                                    = "28506";
-	String AUTH_NO_TABLE_PERMISSION_FOR_GRANT                          = "28507";
-	String AUTH_NO_COLUMN_PERMISSION                                   = "28508";
-	String AUTH_NO_COLUMN_PERMISSION_FOR_GRANT                         = "28509";
-	String AUTH_NO_EXECUTE_PERMISSION                                  = "2850A";
-	String AUTH_NO_EXECUTE_PERMISSION_FOR_GRANT                        = "2850B";
-	String AUTH_NOT_OWNER                                              = "2850C";
-	String AUTH_NO_ACCESS_NOT_OWNER                                    = "2850D";
-	String AUTH_NOT_DATABASE_OWNER                                     = "2850E";
-	String AUTH_GRANT_REVOKE_NOT_ALLOWED                               = "2850F";
-	String AUTH_NO_OBJECT_PERMISSION                                   = "2850G";
-	String AUTH_SHUTDOWN_NOT_DB_OWNER                                  = "2850H.C";
-	String AUTH_ENCRYPT_NOT_DB_OWNER                                   = "2850I.C";
-	String AUTH_HARD_UPGRADE_NOT_DB_OWNER                              = "2850J.C";
 
 	/*
 	** Dependency manager
@@ -1558,6 +1558,12 @@ The message identifier (ie. the value that matches a field in this class)
     String LOGIN_FAILED = "08004";
     String NET_CONNECT_AUTH_FAILED                          = "08004.C.1";
     String NET_DATABASE_NOT_FOUND                           = "08004.C.2";
+    String AUTH_DATABASE_CONNECTION_REFUSED                 = "08004.C.3"; 
+    //DERBY-1828: AUTH_DATABASE_CONNECTION_REFUSED used to be "04501.C"; 
+    String AUTH_SHUTDOWN_NOT_DB_OWNER                       = "08004.C.4";
+    String AUTH_ENCRYPT_NOT_DB_OWNER                        = "08004.C.5";
+    String AUTH_HARD_UPGRADE_NOT_DB_OWNER                   = "08004.C.6";
+    //DERBY-1828: AUTH_x_NOT_DB_OWNER used to be "2850H/I/J.C";
         
     // There can be multiple causes for 08003, which according
     // to SQL2003 spec means "connection does not exist"
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
index cf649190..94fe38f0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
@@ -165,10 +165,10 @@ public void testConnectShutdownAuthentication() throws SQLException {
         assertConnectionOK(dbName, "dan", ("dan" + PASSWORD_SUFFIX));
         assertConnectionWOUPOK(dbName, "dan", ("dan" + PASSWORD_SUFFIX));
         // try shutdown (but only dbo can do it)
-        assertShutdownFail("2850H", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
-        assertShutdownWOUPFail("2850H", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
-        assertShutdownFail("2850H", dbName, "system", "admin");
-        assertShutdownWOUPFail("2850H", dbName, "system", "admin");
+        assertShutdownFail("08004", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
+        assertShutdownWOUPFail("08004", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
+        assertShutdownFail("08004", dbName, "system", "admin");
+        assertShutdownWOUPFail("08004", dbName, "system", "admin");
         assertShutdownUsingConnAttrsOK(dbName, "APP", ("APP" + PASSWORD_SUFFIX));
         
         // ensure that a password is encrypted
@@ -197,14 +197,14 @@ public void testConnectShutdownAuthentication() throws SQLException {
         assertConnectionFail("08004", dbName, "nomen", "nescio");
         assertConnectionWOUPFail("08004", dbName, "nomen", "nescio");
         // attempt to shutdown db as one of the allowed users, will fail...
-        assertShutdownFail("2850H", dbName, "francois", ("francois" + PASSWORD_SUFFIX));
+        assertShutdownFail("08004", dbName, "francois", ("francois" + PASSWORD_SUFFIX));
         // ...for only dbowner can shutdown db.
         assertShutdownWOUPOK(dbName, "APP", ("APP" + PASSWORD_SUFFIX));
         // check simple connect ok as another allowed user, also revive db
         assertConnectionOK(dbName, "jeff", ("jeff" + PASSWORD_SUFFIX));
         // but dan wasn't on the list
-        assertConnectionFail("04501", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
-        assertShutdownFail("04501", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
+        assertConnectionFail("08004", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
+        assertShutdownFail("08004", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
 
         // now change fullAccessUsers & test again
         conn1 = 
@@ -214,9 +214,9 @@ public void testConnectShutdownAuthentication() throws SQLException {
         conn1.commit();
         conn1.close();
         assertConnectionOK(dbName, "dan", ("dan" + PASSWORD_SUFFIX)); 
-        assertShutdownFail("2850H", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
+        assertShutdownFail("08004", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
         // but dbo was not on list...
-        assertShutdownFail("04501", dbName, "APP", ("APP" + PASSWORD_SUFFIX));
+        assertShutdownFail("08004", dbName, "APP", ("APP" + PASSWORD_SUFFIX));
         // now add dbo back in...
         conn1 = openDefaultConnection("francois", ("francois" + PASSWORD_SUFFIX));
         setDatabaseProperty(
@@ -233,12 +233,12 @@ public void testConnectShutdownAuthentication() throws SQLException {
         // just checking that it's still not working if we try again
         assertConnectionFail("08004", dbName, "badUser", "badPwd");
         // system is not on the list...
-        assertConnectionFail("04501", dbName, "system", "admin");
+        assertConnectionFail("08004", dbName, "system", "admin");
         // dan's on the list, but this isn't the pwd
         assertConnectionFail("08004", dbName, "dan", "badPwd");
         assertConnectionFail("08004", dbName, "jamie", ("dan" + PASSWORD_SUFFIX));
         // check some shutdowns
-        assertShutdownFail("04501", dbName, "system", "admin");
+        assertShutdownFail("08004", dbName, "system", "admin");
         assertShutdownFail("08004", dbName, "badUser", "badPwd");
         assertShutdownFail("08004", dbName, "dan", "badPwd");
         assertShutdownFail("08004", dbName, "badUser", ("dan" + PASSWORD_SUFFIX));
@@ -527,10 +527,10 @@ public Object run(){
             assertConnectionOK(dbName, zeus, apollo);
             assertConnectionFail("08004", dbName, apollo, apollo);
             // shutdown only allowd by DBO
-            assertShutdownFail("2850H", dbName, zeus, apollo);
+            assertShutdownFail("08004", dbName, zeus, apollo);
             assertConnectionOK(dbName, apollo, zeus);
             assertShutdownFail("08004", dbName, zeus, zeus);
-            assertShutdownFail("2850H", dbName, apollo, zeus);
+            assertShutdownFail("08004", dbName, apollo, zeus);
             assertShutdownUsingSetShutdownOK(
                 dbName, "APP", ("APP" + PASSWORD_SUFFIX));
 
@@ -631,7 +631,7 @@ protected void assertFailSetDatabaseProperty(
         setDBP.setString(1, propertyName);
         setDBP.setString(2, value);
         // user jamie cannot be both readOnly and fullAccess
-        assertStatementError("28503", setDBP);
+        assertStatementError("4250C", setDBP);
     }
     
     protected void setDatabaseProperty(
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
index ff636afc..1d928dc1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
@@ -296,7 +296,7 @@ private void vetShutdownException (String user, SQLException e)
             } else {
                 assertSQLState("database shutdown restriction, " +
                                "authentication,  not db owner",
-                               "2850H", e);
+                               "08004", e);
             }
             break;
         case SQLAUTHORIZATION:
@@ -306,7 +306,7 @@ private void vetShutdownException (String user, SQLException e)
             } else {
                 assertSQLState("database shutdown restriction, " +
                                "SQL authorization, not db owner",
-                               "2850H", e);
+                               "08004", e);
             }
             break;
         default:
@@ -578,7 +578,7 @@ private void bringDbUp(String bootPassword) throws SQLException
      */
     private void vetEncryptionAttempt (String user, SQLException e)
     {
-        vetAttempt(user, e, "2850I", "(re)encryption");
+        vetAttempt(user, e, "08004", "(re)encryption");
     }
 
     /**
@@ -715,7 +715,7 @@ public void testHardUpgrade() throws SQLException
      */
     private void vetHardUpgradeAttempt (String user, SQLException e)
     {
-        vetAttempt(user, e, "2850J", "hard upgrade");
+        vetAttempt(user, e, "08004", "hard upgrade");
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
index 4d75d985..bed19fe8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
@@ -96,150 +96,150 @@ public void test_errorcode() throws Exception
         JDBC.assertFullResultSet(rs,expRS);
         // Test severe error messages. Existing messages should not change SQLState.
         // new ones can be added.
-        rs = s.executeQuery("select * from SYSCS_DIAG.Error_messages where SEVERITY >= 40000");
+        rs = s.executeQuery("select * from SYSCS_DIAG.Error_messages where SEVERITY >= 40000 order by SQL_STATE");
         //Utilities.showResultSet(rs);
         String [][] expectedRows = 
-        {{"XBM0N","JDBC Driver registration with java.sql.DriverManager failed. See next exception for details. ","45000"},
-            {"XSTB5","Creating database with logging disabled encountered unexpected problem.","50000"},
-            {"XSDG2","Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}","45000"},
-            {"28502","The user name '{0}' is not valid. ","40000"},
+            {{"08000","Connection closed by unknown interrupt.","40000"},
+             {"08001","A connection could not be established because the security token is larger than the maximum allowed by the network protocol.","40000"},
+             {"08001","A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
+             {"08001","A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
+             {"08001","Required Derby DataSource property {0} not set.","40000"},
+             {"08001","{0} : Error connecting to server {1} on port {2} with message {3}.","40000"},
+             {"08001","SocketException: '{0}'","40000"},
+             {"08001","Unable to open stream on socket: '{0}'.","40000"},
+             {"08001","User id length ({0}) is outside the range of 1 to {1}.","40000"},
+             {"08001","Password length ({0}) is outside the range of 1 to {1}.","40000"},
+             {"08001","User id can not be null.","40000"},
+             {"08001","Password can not be null.","40000"},
+             {"08001","A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol.","40000"},
+             {"08003","No current connection.","40000"},
+             {"08003","getConnection() is not valid on a closed PooledConnection.","40000"},
+             {"08003","Lob method called after connection was closed","40000"},
+             {"08003","The underlying physical connection is stale or closed.","40000"},
+             {"08004","Connection refused : {0}","40000"},
+             {"08004","Connection authentication failure occurred.  Reason: {0}.","40000"},
+             {"08004","The connection was refused because the database {0} was not found.","40000"},
+             {"08004","Database connection refused.","40000"},
+             {"08004","User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation.","40000"},
+             {"08004","User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation.","40000"},
+             {"08004","User '{0}' cannot hard upgrade database '{1}'. Only the database owner can perform this operation.","40000"},
+             {"08006","An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
+             {"08006","Database '{0}' shutdown.","45000"},
             {"0A000","The DRDA command {0} is not currently implemented.  The connection has been terminated.","40000"},
-            {"XSLAP","Database at {0} is at version {1}. Beta databases cannot be upgraded,","45000"},
+             {"28502","The user name '{0}' is not valid.","40000"},
             {"57017","There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated.","40000"},
+             {"58009","The connection was terminated because the encoding is not supported.","40000"},
+             {"58009","Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: invalid FDOCA LID.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: SECTKN was not returned.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated.","40000"},
+             {"58009","SocketException: '{0}'","40000"},
+             {"58009","A communications error has been detected: {0}.","40000"},
+             {"58009","An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
+             {"58009","Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated.","40000"},
+             {"58009","Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated.","40000"},
+             {"58009","A network protocol error was encountered and the connection has been terminated: {0}","40000"},
+             {"58010","A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server.","40000"},
+             {"58014","The DDM command 0x{0} is not supported.  The connection has been terminated.","40000"},
+             {"58015","The DDM object 0x{0} is not supported.  The connection has been terminated.","40000"},
+             {"58016","The DDM parameter 0x{0} is not supported.  The connection has been terminated.","40000"},
+             {"58017","The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated.","40000"},
+             {"XBM01","Startup failed due to an exception. See next exception for details.","45000"},
+             {"XBM02","Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software.","45000"},
+             {"XBM03","Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED.","45000"},
+             {"XBM05","Startup failed due to missing product version information for {0}.","45000"},
+             {"XBM06","Startup failed. An encrypted database cannot be accessed without the correct boot password.","45000"},
+             {"XBM07","Startup failed. Boot password must be at least 8 bytes long.","45000"},
+             {"XBM08","Could not instantiate {0} StorageFactory class {1}.","45000"},
+             {"XBM0G","Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path.","45000"},
+             {"XBM0H","Directory {0} cannot be created.","45000"},
+             {"XBM0I","Directory {0} cannot be removed.","45000"},
+             {"XBM0J","Directory {0} already exists.","45000"},
+             {"XBM0K","Unknown sub-protocol for database name {0}.","45000"},
+             {"XBM0L","Specified authentication scheme class {0} does implement the authentication interface {1}.","45000"},
+             {"XBM0M","Error creating instance of authentication scheme class {0}.","45000"},
+             {"XBM0N","JDBC Driver registration with java.sql.DriverManager failed. See next exception for details.","45000"},
+             {"XBM0P","Service provider is read-only. Operation not permitted.","45000"},
             {"XBM0Q","File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted.","45000"},
-            {"XSLA0","Cannot flush the log file to disk {0}.","45000"},
-            {"08003","The underlying physical connection is stale or closed.","40000"},
-            {"08003","Lob method called after connection was closed","40000"},
-            {"08003","getConnection() is not valid on a closed PooledConnection.","40000"},
-            {"XBM01","Startup failed due to an exception. See next exception for details. ","45000"},
-            {"XSDG5","Database is not in create mode when createFinished is called.","45000"},
-            {"XJ081","Conflicting create/restore/recovery attributes specified.","40000"},
+             {"XBM0R","Unable to remove File {0}.","45000"},
+             {"XBM0S","Unable to rename file '{0}' to '{1}'","45000"},
+             {"XBM0T","Ambiguous sub-protocol for database name {0}.","45000"},
+             {"XBM0X","Supplied territory description '{0}' is invalid, expecting ln[_CO[_variant]]\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale.","45000"},
+             {"XBM0Y","Backup database directory {0} not found. Please make sure that the specified backup path is right.","45000"},
+             {"XBM0Z","Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct.","45000"},
+             {"XCW00","Unsupported upgrade from '{0}' to '{1}'.","45000"},
+             {"XJ004","Database '{0}' not found.","40000"},
+             {"XJ015","Derby system shutdown.","50000"},
             {"XJ028","The URL '{0}' is not properly formed.","40000"},
-            {"XSLAS","Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted.","45000"},
-            {"08006","Database '{0}' shutdown.","45000"},
-            {"XSLAC","Database at {0} have incompatible format with the current version of software, it may have been created by or upgraded by a later version.","45000"},
-            {"XBM0T","Ambiguous sub-protocol for database name {0}.   ","45000"},
-            {"XSLA3","Log Corrupted, has invalid data in the log stream.","45000"},
-            {"2850H","User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation.","40000"},
-            {"XSDG8","Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct. ","45000"},
-            {"XSDB0","Unexpected exception on in-memory page {0}","45000"},
-            {"XSLAF","A Read Only database was created with dirty data buffers.","45000"},
-            {"XSLA6","Cannot recover the database.","45000"},
-            {"XBM0G","Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path. ","45000"},
-            {"XBM07","Startup failed. Boot password must be at least 8 bytes long.","45000"},
             {"XJ040","Failed to start database '{0}', see the next exception for details.","40000"},
+             {"XJ041","Failed to create database '{0}', see the next exception for details.","40000"},
+             {"XJ049","Conflicting create attributes specified.","40000"},
+             {"XJ05B","JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'.","40000"},
+             {"XJ081","Conflicting create/restore/recovery attributes specified.","40000"},
+             {"XJ213","The traceLevel connection property does not have a valid format for a number.","40000"},
+             {"XSDB0","Unexpected exception on in-memory page {0}","45000"},
+             {"XSDB1","Unknown page format at page {0}","45000"},
+             {"XSDB2","Unknown container format at container {0} : {1}","45000"},
             {"XSDB3","Container information cannot change once written: was {0}, now {1}","45000"},
-            {"XSLAI","Cannot log the checkpoint log record","45000"},
-            {"XBM0Z","Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct. ","45000"},
-            {"XBM0J","Directory {0} already exists.","45000"},
-            {"58015","The DDM object 0x{0} is not supported.  The connection has been terminated.","40000"},
+             {"XSDB4","Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly.","45000"},
+             {"XSDB5","Log has change record on page {0}, which is beyond the end of the container.","45000"},
             {"XSDB6","Another instance of Derby may have already booted the database {0}.","45000"},
-            {"XSLAL","log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}.","45000"},
-            {"XBM0M","Error creating instance of authentication scheme class {0}.","45000"},
-            {"XSDG1","Page {0} could not be written to disk, please check if disk is full.","45000"},
+             {"XSDB7","WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred.","45000"},
+             {"XSDB8","WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The db2j.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand.","45000"},
             {"XSDB9","Stream container {0} is corrupt.","45000"},
-            {"08004","The connection was refused because the database {0} was not found.","40000"},
-            {"08004","Connection authentication failure occurred.  Reason: {0}.","40000"},
-            {"XSLAO","Recovery failed unexpected problem {0}.","45000"},
-            {"XBM0P","Service provider is read-only. Operation not permitted. ","45000"},
-            {"XJ049","Conflicting create attributes specified.","40000"},
-            {"XSLAR","Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct. ","45000"},
-            {"XSLAB","Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform.","45000"},
-            {"XBM0S","Unable to rename file '{0}' to '{1}'","45000"},
-            {"XSLA2","System will shutdown, got I/O Exception while accessing log file.","45000"},
-            {"XBM03","Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED.","45000"},
+             {"XSDBA","Attempt to allocate object {0} failed.","45000"},
+             {"XSDG0","Page {0} could not be read from disk.","45000"},
+             {"XSDG1","Page {0} could not be written to disk, please check if disk is full.","45000"},
+             {"XSDG2","Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}","45000"},
+             {"XSDG3","Meta-data for Container {0} could not be accessed","45000"},
+             {"XSDG5","Database is not in create mode when createFinished is called.","45000"},
+             {"XSDG6","Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted.","45000"},
             {"XSDG7","Directory {0} could not be removed during restore. Please make sure that permissions are correct.","45000"},
-            {"XSLAE","Control file at {0} cannot be written or updated.","45000"},
+             {"XSDG8","Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct.","45000"},
+             {"XSLA0","Cannot flush the log file to disk {0}.","45000"},
+             {"XSLA1","Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also.","45000"},
+             {"XSLA2","System will shutdown, got I/O Exception while accessing log file.","45000"},
+             {"XSLA3","Log Corrupted, has invalid data in the log stream.","45000"},
+             {"XSLA4","Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.","45000"},
             {"XSLA5","Cannot read log stream for some reason to rollback transaction {0}.","45000"},
-            {"08001","A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol.","40000"},
-            {"08001","Password can not be null.","40000"},
-            {"08001","User id can not be null.","40000"},
-            {"08001","Password length ({0}) is outside the range of 1 to {1}.","40000"},
-            {"XBM06","Startup failed. An encrypted database cannot be accessed without the correct boot password.  ","45000"},
-            {"08004","Connection refused : {0}","40000"},
-            {"08001","User id length ({0}) is outside the range of 1 to {1}.","40000"},
-            {"08003","No current connection.","40000"},
-            {"08001","Unable to open stream on socket: '{0}'.","40000"},
-            {"2850J","User '{0}' cannot hard upgrade database '{1}'. Only the database owner can perform this operation.","40000"},
-            {"08001","SocketException: '{0}'","40000"},
-            {"08001","{0} : Error connecting to server {1} on port {2} with message {3}.","40000"},
-            {"08000","Connection closed by unknown interrupt.","40000"},
-            {"08001","Required Derby DataSource property {0} not set.","40000"},
-            {"XSDB2","Unknown container format at container {0} : {1}","45000"},
-            {"XSLAH","A Read Only database is being updated.","45000"},
-            {"XBM0Y","Backup database directory {0} not found. Please make sure that the specified backup path is right.","45000"},
+             {"XSLA6","Cannot recover the database.","45000"},
+             {"XSLA7","Cannot redo operation {0} in the log.","45000"},
             {"XSLA8","Cannot rollback transaction {0}, trying to compensate {1} operation with {2}","45000"},
-            {"XBM0I","Directory {0} cannot be removed.","45000"},
-            {"58014","The DDM command 0x{0} is not supported.  The connection has been terminated.","40000"},
-            {"XSTB0","An exception was thrown during transaction abort.","50000"},
-            {"XSDB5","Log has change record on page {0}, which is beyond the end of the container.","45000"},
+             {"XSLAA","The store has been marked for shutdown by an earlier exception.","45000"},
+             {"XSLAB","Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform.","45000"},
+             {"XSLAC","Database at {0} have incompatible format with the current version of software, it may have been created by or upgraded by a later version.","45000"},
+             {"XSLAD","log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}.","45000"},
+             {"XSLAE","Control file at {0} cannot be written or updated.","45000"},
+             {"XSLAF","A Read Only database was created with dirty data buffers.","45000"},
+             {"XSLAH","A Read Only database is being updated.","45000"},
+             {"XSLAI","Cannot log the checkpoint log record","45000"},
+             {"XSLAJ","The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts.","45000"},
             {"XSLAK","Database has exceeded largest log file number {0}.","45000"},
-            {"XBM0L","Specified authentication scheme class {0} does implement the authentication interface {1}.","45000"},
-            {"58017","The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated.","40000"},
-            {"XSTB3","Cannot abort transaction because the log manager is null, probably due to an earlier error.","50000"},
-            {"XSDG0","Page {0} could not be read from disk.","45000"},
-            {"XSDB8","WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The db2j.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand.","45000"},
+             {"XSLAL","log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}.","45000"},
+             {"XSLAM","Cannot verify database format at {1} due to IOException.","45000"},
             {"XSLAN","Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}.","45000"},
-            {"XXXXX","Normal database session close.","40000"},
-            {"XSTB6","Cannot substitute a transaction table with another while one is already in use.","50000"},
-            {"XSDG3","Meta-data for Container {0} could not be accessed","45000"},
-            {"58009","A network protocol error was encountered and the connection has been terminated: {0}","40000"},
-            {"XJ015","Derby system shutdown.","50000"},
-            {"XCW00","Unsupported upgrade from '{0}' to '{1}'.","45000"},
+             {"XSLAO","Recovery failed unexpected problem {0}.","45000"},
+             {"XSLAP","Database at {0} is at version {1}. Beta databases cannot be upgraded,","45000"},
             {"XSLAQ","cannot create log file at directory {0}.","45000"},
-            {"04501","Database connection refused.","40000"},
-            {"XSLAA","The store has been marked for shutdown by an earlier exception.","45000"},
-            {"XBM0R","Unable to remove File {0}.  ","45000"},
-            {"XSLA1","Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also.","45000"},
-            {"XJ004","Database '{0}' not found.","40000"},
-            {"XBM02","Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software.","45000"},
-            {"XSDG6","Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted.","45000"},
+             {"XSLAR","Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct.","45000"},
+             {"XSLAS","Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted.","45000"},
             {"XSLAT","The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct.","45000"},
-            {"XSLAD","log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}.","45000"},
-            {"XSLA4","Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.  ","45000"},
-            {"XBM05","Startup failed due to missing product version information for {0}.","45000"},
-            {"58010","A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server. ","40000"},
-            {"2850I","User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation.","40000"},
-            {"XSDBA","Attempt to allocate object {0} failed.","45000"},
-            {"XSDB1","Unknown page format at page {0}","45000"},
-            {"XJ05B","JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'.","40000"},
-            {"XBM0X","Supplied territory description '{0}' is invalid, expecting ln[_CO[_variant]]\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale.","45000"},
-            {"XSLA7","Cannot redo operation {0} in the log.","45000"},
-            {"XBM0H","Directory {0} cannot be created.","45000"},
-            {"XBM08","Could not instantiate {0} StorageFactory class {1}.","45000"},
-            {"XJ041","Failed to create database '{0}', see the next exception for details.","40000"},
-            {"58009","Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated.","40000"},
-            {"58009","Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated.","40000"},
-            {"58009","Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated.","40000"},
-            {"58009","An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
-            {"58009","A communications error has been detected: {0}.","40000"},
-            {"58009","SocketException: '{0}'","40000"},
-            {"08006","An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
-            {"XSDB4","Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly.","45000"},
-            {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated.","40000"},
-            {"XJ213","The traceLevel connection property does not have a valid format for a number.","40000"},
-            {"58009","Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: SECTKN was not returned.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: invalid FDOCA LID.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated.","40000"},
-            {"XSLAJ","The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts.","45000"},
-            {"58009","Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated.","40000"},
-            {"58009","Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated.","40000"},
-            {"58009","The connection was terminated because the encoding is not supported.","40000"},
-            {"58009","Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated.","40000"},
-            {"08001","A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
-            {"08001","A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
-            {"08001","A connection could not be established because the security token is larger than the maximum allowed by the network protocol.","40000"},
-            {"XBM0K","Unknown sub-protocol for database name {0}.","45000"},
-            {"58016","The DDM parameter 0x{0} is not supported.  The connection has been terminated.","40000"},
+             {"XSTB0","An exception was thrown during transaction abort.","50000"},
             {"XSTB2","Cannot log transaction changes, maybe trying to write to a read only database.","50000"},
-            {"XSDB7","WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred.","45000"},
-            {"XSLAM","Cannot verify database format at {1} due to IOException.","45000"}};
+             {"XSTB3","Cannot abort transaction because the log manager is null, probably due to an earlier error.","50000"},
+             {"XSTB5","Creating database with logging disabled encountered unexpected problem.","50000"},
+             {"XSTB6","Cannot substitute a transaction table with another while one is already in use.","50000"},
+             {"XXXXX","Normal database session close.","40000"}};
 
         JDBC.assertFullResultSet(rs, expectedRows);
         conn.rollback();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
index 4eec5b26..18ff8209 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
@@ -136,19 +136,19 @@ public void testGrantRevokeDDL() throws Exception
         // Following revokes should fail. Only owner can revoke 
         // permissions
         
-        assertStatementError("2850C", st_barConnection,
+        assertStatementError("42506", st_barConnection,
             "revoke select on satheesh.tsat from public");
         
-        assertStatementError("2850C", st_barConnection,
+        assertStatementError("42506", st_barConnection,
             " revoke insert on satheesh.tsat from foo");
         
-        assertStatementError("2850C", st_barConnection,
+        assertStatementError("42506", st_barConnection,
             " revoke update(i) on satheesh.tsat from foo");
         
-        assertStatementError("2850C", st_barConnection,
+        assertStatementError("42506", st_barConnection,
             " revoke update on satheesh.tsat from foo");
         
-        assertStatementError("2850C", st_barConnection,
+        assertStatementError("42506", st_barConnection,
             " revoke delete on satheesh.tsat from foo");
         
         // set connection satConnection
@@ -314,10 +314,10 @@ public void testGrantRevokeDDL() throws Exception
         st_satConnection.executeUpdate(
             " grant select on v1 to bar");
         
-        assertStatementError("2850F", st_satConnection,
+        assertStatementError("42509", st_satConnection,
             " grant insert on v1 to foo");
         
-        assertStatementError("2850F", st_satConnection,
+        assertStatementError("42509", st_satConnection,
             " grant update on v1 to public");
         
         // Tests for synonym. Not supported currently.
@@ -398,24 +398,24 @@ public void testGrantRevokeDDL() throws Exception
         
         // All these DDLs should fail.
         
-        assertStatementError("2850D", st_swiperConnection,
+        assertStatementError("42507", st_swiperConnection,
             "create table NotMyTable (i int, j int)");
         
-        assertStatementError("2850D", st_swiperConnection,
+        assertStatementError("42507", st_swiperConnection,
             " drop table tsat");
         
-        assertStatementError("2850D", st_swiperConnection,
+        assertStatementError("42507", st_swiperConnection,
             " drop index tsat_ind");
         
-        assertStatementError("2850D", st_swiperConnection,
+        assertStatementError("42507", st_swiperConnection,
             " create view myview as select * from satheesh.tsat");
         
-        assertStatementError("2850D", st_swiperConnection,
+        assertStatementError("42507", st_swiperConnection,
             " CREATE FUNCTION FuncNotMySchema(P1 INT) RETURNS INT "
             + "NO SQL RETURNS NULL ON NULL INPUT EXTERNAL NAME "
             + "'java.lang.Math.abs' LANGUAGE JAVA PARAMETER STYLE JAVA");
         
-        assertStatementError("2850D", st_swiperConnection,
+        assertStatementError("42507", st_swiperConnection,
             " alter table tsat add column k int");
         
         st_swiperConnection.executeUpdate(
@@ -426,16 +426,16 @@ public void testGrantRevokeDDL() throws Exception
         
         // Some simple DML tests. Should all fail.
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             "select * from satheesh.tsat");
         
-        assertStatementError("28506", st_swiperConnection,
+        assertStatementError("42500", st_swiperConnection,
             " insert into satheesh.tsat values (1, 2)");
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             " update satheesh.tsat set i=j");
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             " create table my_tsat (i int not null, c char(10), "
             + "constraint fk foreign key(i) references satheesh.tsat)");
         
@@ -457,7 +457,7 @@ public void testGrantRevokeDDL() throws Exception
         
         // Now some of these should pass
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             "select * from satheesh.tsat");
         
         rs = st_swiperConnection.executeQuery(
@@ -468,7 +468,7 @@ public void testGrantRevokeDDL() throws Exception
         
         JDBC.assertEmpty(rs);
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             " select i from satheesh.tsat where j=2");
         
         rs = st_swiperConnection.executeQuery(
@@ -480,7 +480,7 @@ public void testGrantRevokeDDL() throws Exception
         
         JDBC.assertEmpty(rs);
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             " select i from satheesh.tsat where 2 > (select "
             + "count(j) from satheesh.tsat)");
         
@@ -499,7 +499,7 @@ public void testGrantRevokeDDL() throws Exception
         assertUpdateCount(st_swiperConnection, 0,
             " update satheesh.tsat set j=2 where i=2");
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             " update satheesh.tsat set j=2 where j=1");
         
         rs = st_swiperConnection.executeQuery(
@@ -519,7 +519,7 @@ public void testGrantRevokeDDL() throws Exception
         
         JDBC.assertEmpty(rs);
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             " select b from satheesh.table1 t1, satheesh.tsat t2 "
             + "where t1.a = t2.j");
         
@@ -532,14 +532,14 @@ public void testGrantRevokeDDL() throws Exception
                 
         JDBC.assertEmpty(rs);
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             " select * from satheesh.table1, (select j from "
             + "satheesh.tsat) table2");
         
         // GrantRevoke TODO: This one should pass, but currently 
         // fails. Bind update expression in two steps.
         
-        assertStatementError("28508", st_swiperConnection,
+        assertStatementError("42502", st_swiperConnection,
             "update satheesh.tsat set j=i");
         
         st_swiperConnection.executeUpdate(
@@ -553,11 +553,11 @@ public void testGrantRevokeDDL() throws Exception
         
         // Should fail
         
-        assertStatementError("28506", st_swiperConnection,
+        assertStatementError("42500", st_swiperConnection,
             "create trigger trig_sat1 after update on "
             + "satheesh.tsat for each statement values 1");
         
-        assertStatementError("28506", st_swiperConnection,
+        assertStatementError("42500", st_swiperConnection,
             " create trigger trig_sat2 no cascade before delete "
             + "on satheesh.tsat for each statement values 1");
         
@@ -595,11 +595,11 @@ public void testGrantRevokeDDL() throws Exception
         
         // set connection swiperConnection
         
-        assertStatementError("28506", st_swiperConnection,
+        assertStatementError("42500", st_swiperConnection,
             " create trigger trig_sat1 after update on "
             + "satheesh.tsat for each statement values 1");
         
-        assertStatementError("28506", st_swiperConnection,
+        assertStatementError("42500", st_swiperConnection,
             " create trigger trig_sat2 no cascade before delete "
             + "on satheesh.tsat for each statement values 1");
         
@@ -679,10 +679,10 @@ public void testGrantRevokeDDL() throws Exception
         st_swiperConnection.executeUpdate(
             " set schema satheesh");
         
-        assertStatementError("2850A", st_swiperConnection,
+        assertStatementError("42504", st_swiperConnection,
             " values f_abs(-5)");
         
-        assertStatementError("2850A", st_swiperConnection,
+        assertStatementError("42504", st_swiperConnection,
             " select f_abs(-4) from sys.systables where "
             + "tablename like 'SYSTAB%'");
         
@@ -735,10 +735,10 @@ public void testGrantRevokeDDL() throws Exception
         
         // set connection swiperConnection
         
-        assertStatementError("2850A", st_swiperConnection,
+        assertStatementError("42504", st_swiperConnection,
             " values f_abs(-5)");
         
-        assertStatementError("2850A", st_swiperConnection,
+        assertStatementError("42504", st_swiperConnection,
             " select f_abs(-4) from sys.systables where "
             + "tablename like 'SYSTAB%'");
         
@@ -792,19 +792,19 @@ public void testGrantRevokeDDL() throws Exception
         
         // Negative tests. Should all fail
         
-        assertStatementError("2850E", st_swiperConnection,
+        assertStatementError("42508", st_swiperConnection,
             "create schema myFriend");
         
-        assertStatementError("2850E", st_swiperConnection,
+        assertStatementError("42508", st_swiperConnection,
             " create schema mySchema authorization me");
         
-        assertStatementError("2850E", st_swiperConnection,
+        assertStatementError("42508", st_swiperConnection,
             " create schema myschema authorization swiper");
         
         Connection CONNECTION0 = openUserConnection("sam");
         Statement st_CONNECTION0 = CONNECTION0.createStatement();
       
-        assertStatementError("2850E", st_CONNECTION0,
+        assertStatementError("42508", st_CONNECTION0,
             " create schema sam authorization swiper");
         
         // Should pass
@@ -871,10 +871,10 @@ public void testGrantRevokeDDL() throws Exception
         // schemas.. Should fail
         
         
-        assertStatementError("2850E", st_swiperConnection,
+        assertStatementError("42508", st_swiperConnection,
             " create table mywork.t1(i int)");
         
-        assertStatementError("2850E", st_swiperConnection,
+        assertStatementError("42508", st_swiperConnection,
             " create view mywork.v1 as select * from swiper.swiperTab");
         
         // Implicit schema creation should only work if creating 
@@ -883,7 +883,7 @@ public void testGrantRevokeDDL() throws Exception
         Connection monicaConnection = openUserConnection("monica");
         Statement st_monicaConnection = monicaConnection.createStatement();
         
-        assertStatementError("2850E", st_monicaConnection,
+        assertStatementError("42508", st_monicaConnection,
             " create table mywork.t1 ( i int)");
         
         st_monicaConnection.executeUpdate(
@@ -980,28 +980,28 @@ public void testGrantRevokeDDL() throws Exception
         
         // Try granting or revoking from system tables. Should fail
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             "grant select on sys.systables to sam");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " grant delete on sys.syscolumns to sam");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " grant update(alias) on sys.sysaliases to swiper");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " revoke all privileges on sys.systableperms from public");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " revoke trigger on sys.sysroutineperms from sam");
         
         // Try granting or revoking from system routines that is 
         // expected fail
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             "grant execute on procedure sysibm.sqlprocedures to sam");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " revoke execute on procedure sysibm.sqlcamessage "
             + "from public restrict");
         
@@ -1062,15 +1062,15 @@ public void testGrantRevokeDDL() throws Exception
         cSt = samConnection.prepareCall(
             "call SYSCS_UTIL.SYSCS_EXPORT_TABLE('SAM', "
             + "'SAMTABLE' , 'extinout/table.dat', null, null, null)");
-        assertStatementError("2850A", cSt);
+        assertStatementError("42504", cSt);
         
         cSt = samConnection.prepareCall(
             " call "
             + "SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.storag"
             + "e.pageSize', '4096')");
-        assertStatementError("2850A", cSt);
+        assertStatementError("42504", cSt);
         
-        assertStatementError("2850A", st_samConnection,
+        assertStatementError("42504", st_samConnection,
             " values "
             + "SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('derby.storag"
             + "e.pageSize')");
@@ -1202,7 +1202,7 @@ public void testGrantRevokeDDL() throws Exception
  
         // following select will fail because no permissions
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select * from mamta1.t11");
         
         st_mamta3.executeUpdate(
@@ -1213,7 +1213,7 @@ public void testGrantRevokeDDL() throws Exception
         
         // following select will fail because no permissions
         
-        assertStatementError("28508", st_mamta4,
+        assertStatementError("42502", st_mamta4,
             "select * from mamta1.t11");
         
         st_mamta4.executeUpdate(
@@ -1298,7 +1298,7 @@ public void testGrantRevokeDDL() throws Exception
         // following will fail because no select permissions on 
         // all the columns
         
-        assertStatementError("28508", st_mamta2,
+        assertStatementError("42502", st_mamta2,
             "select * from mamta1.t11");
         
         // set connection mamta3
@@ -1306,7 +1306,7 @@ public void testGrantRevokeDDL() throws Exception
         // following will fail because no update permission on 
         // column c113
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "update mamta1.t11 set c113=3");
         
         rs = st_mamta3.executeQuery(
@@ -1327,7 +1327,7 @@ public void testGrantRevokeDDL() throws Exception
         // following will fail because no select permission on 
         // column c112
         
-        assertStatementError("28508", st_mamta4,
+        assertStatementError("42502", st_mamta4,
             "select c112 from mamta1.t11");
         
         // set connection mamta1
@@ -1488,21 +1488,21 @@ public void testGrantRevokeDDL() throws Exception
         // since mamta3 is not dba, following will fail because no 
         // access to mamta2.v22
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create view v31 as select * from mamta2.v22");
         
         // mamta3 has access to mamta1.t11 since there is PUBLIC 
         // select access on that table but there is no access to 
         // mamta2.v22
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create view v32 as select v22.c111 as a, t11.c111 "
             + "as b from mamta2.v22 v22, mamta1.t11 t11");
         
         // Try to create a view with no privilege to more than one 
         // object.
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create view v33 as select v22.c111 as a, t11.c111 "
             + "as b from mamta2.v22 v22, mamta1.t11 t11, mamta2.v21");
         
@@ -1513,26 +1513,26 @@ public void testGrantRevokeDDL() throws Exception
         
         // should fail
         
-        assertStatementError("2850G", st_mamta2,
+        assertStatementError("4250A", st_mamta2,
             "grant select on v22 to mamta3");
         
         // set connection mamta3
         
         // should fail
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create view v31 as select * from mamta2.v22");
         
         // following will fail because mamta3 has no access to v22
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create view v32 as select v22.c111 as a, t11.c111 "
             + "as b from mamta2.v22 v22, mamta1.t11 t11");
         
         // following will still fail because mamta3 doesn't have 
         // access to mamta1.t12.c121
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create view v33 as select v22.c111 as a, t12.c121 "
             + "as b from mamta2.v22 v22, mamta1.t12 t12");
         
@@ -1541,14 +1541,14 @@ public void testGrantRevokeDDL() throws Exception
         // privilege on v23 to mamta3
         
         
-        assertStatementError("2850G", st_mamta2,
+        assertStatementError("4250A", st_mamta2,
             " grant select on v23 to mamta3");
         
         // set connection mamta3
         
         // should fail
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create view v34 as select * from mamta2.v23");
         
         // should fail
@@ -1630,7 +1630,7 @@ public void testGrantRevokeDDL() throws Exception
         // following will fail because no execute permissions on 
         // mamta1.f_abs1
         
-        assertStatementError("2850A", st_mamta2,
+        assertStatementError("42504", st_mamta2,
             "create view v25(c251) as (values mamta1.f_abs1(-1))");
         
         // set connection mamta1
@@ -1736,12 +1736,12 @@ public void testGrantRevokeDDL() throws Exception
         // following will fail because no access on column 
         // mamta1.t14.c142
         
-        assertStatementError("28508", st_mamta2,
+        assertStatementError("42502", st_mamta2,
             "create view v26 as (select * from mamta1.t14 where c142=1)");
         
         // following will fail for the same reason
         
-        assertStatementError("28508", st_mamta2,
+        assertStatementError("42502", st_mamta2,
             "create view v26 as (select c141 from mamta1.t14 "
             + "where c142=1)");
         
@@ -2025,14 +2025,14 @@ public void testGrantRevokeDDL() throws Exception
         // mamta3 has not been granted select privileges on 
         // mamta2.v21ViewTest
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select * from mamta2.v21ViewTest");
         
         // set connection mamta2
         
         // give select privileges on the view to mamta3, should fail
         
-        assertStatementError("2850G", st_mamta2,
+        assertStatementError("4250A", st_mamta2,
             "grant select on v21ViewTest to mamta3");
         
         // set connection mamta3
@@ -2040,7 +2040,7 @@ public void testGrantRevokeDDL() throws Exception
         // select from mamta2.v21ViewTest will fail for mamta3 
         // because mamta3 has no select privilege on mamta2.v21ViewTest
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select * from mamta2.v21ViewTest");
         
         // set connection satConnection
@@ -2068,7 +2068,7 @@ public void testGrantRevokeDDL() throws Exception
         // mamta3 because dba took away the select privilege on 
         // mamta2.v21ViewTest
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select * from mamta2.v21ViewTest");
         
         // set connection mamta2
@@ -2457,7 +2457,7 @@ public void testGrantRevokeDDL() throws Exception
         
         // should fail
         
-        assertStatementError("2850G", st_mamta2,
+        assertStatementError("4250A", st_mamta2,
             "grant select on v21ViewTest to mamta3");
         
         rs = st_mamta2.executeQuery(
@@ -2491,7 +2491,7 @@ public void testGrantRevokeDDL() throws Exception
         // following should fail because not all the privileges 
         // are in place
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "create trigger tr31t31TriggerTest after insert on "
             + "t31TriggerTest for each statement insert into "
             + "t32TriggerTest values (select c111 from "
@@ -2995,12 +2995,12 @@ public void testGrantRevokeDDL() throws Exception
         
         // grant permission to mamta3, should fail
         
-        assertStatementError("2850G", st_mamta2,
+        assertStatementError("4250A", st_mamta2,
             "grant select on v21ViewTest to mamta3");
         
         // set connection mamta3
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             " create view v31ViewTest as select * from mamta2.v21ViewTest");
         
         assertStatementError("42X05", st_mamta3,
@@ -3975,7 +3975,7 @@ public void testGrantRevokeDDL() throws Exception
         // following should fail because mamta2 doesn't have 
         // trigger permission on mamta1.t11TriggerTest
         
-        assertStatementError("28506", st_mamta2,
+        assertStatementError("42500", st_mamta2,
             "create trigger tr11t11TriggerTest after insert on "
             + "mamta1.t11TriggerTest for each statement insert into "
             + "mamta1.t12RoutineTest values (1)");
@@ -3998,7 +3998,7 @@ public void testGrantRevokeDDL() throws Exception
         // following will fail becuae mamta2 has TRIGGER privilege 
         // but not INSERT privilege on mamta1.t11TriggerTest
         
-        assertStatementError("28506", st_mamta2,
+        assertStatementError("42500", st_mamta2,
             "insert into mamta1.t11TriggerTest values(3)");
         
         // set connection mamta1
@@ -4165,7 +4165,7 @@ public void testGrantRevokeDDL() throws Exception
         // will fail because mamta2 doesn't have INSERT privilege 
         // on mamta3.t31TriggerTest
         
-        assertStatementError("28506", st_mamta2,
+        assertStatementError("42500", st_mamta2,
             "insert into mamta3.t31TriggerTest values(1)");
         
         // set connection mamta3
@@ -4387,7 +4387,7 @@ public void testGrantRevokeDDL() throws Exception
         
         JDBC.assertFullResultSet(rs, expRS, true);
         
-        assertStatementError("2850G", st_mamta3,
+        assertStatementError("4250A", st_mamta3,
             " grant select on v21ViewTest to mamta2");
         
         // set connection mamta2
@@ -4398,7 +4398,7 @@ public void testGrantRevokeDDL() throws Exception
         // the routine    (which is underneath the view) and hence 
         // select from view will fail
         
-        assertStatementError("28508", st_mamta2,
+        assertStatementError("42502", st_mamta2,
             "select * from mamta3.v21ViewTest");
         
         // set connection mamta1
@@ -4410,7 +4410,7 @@ public void testGrantRevokeDDL() throws Exception
         
         // should fail
         
-        assertStatementError("28508", st_mamta2,
+        assertStatementError("42502", st_mamta2,
             "select * from mamta3.v21ViewTest");
         
         // set connection mamta1
@@ -4445,7 +4445,7 @@ public void testGrantRevokeDDL() throws Exception
             " create view v21ViewTest as select * from "
             + "mamta1.t11TriggerTest");
         
-        assertStatementError("2850G", st_mamta2,
+        assertStatementError("4250A", st_mamta2,
             " grant select on v21ViewTest to mamta4");
         
         // set connection mamta3
@@ -4470,7 +4470,7 @@ public void testGrantRevokeDDL() throws Exception
         assertStatementError("42X94", st_mamta4,
             " drop trigger tr41t41");
         
-        assertStatementError("28508", st_mamta4,
+        assertStatementError("42502", st_mamta4,
             " create trigger tr41t41 after insert on "
             + "t41TriggerTest for each statement insert into "
             + "mamta3.t31TriggerTest (select * from mamta2.v21ViewTest)");
@@ -4539,17 +4539,17 @@ public void testGrantRevokeDDL() throws Exception
         
         // will fail because no permissions on mamta4.t41TriggerTest
         
-        assertStatementError("28506", st_mamta3,
+        assertStatementError("42500", st_mamta3,
             "insert into mamta4.t41TriggerTest values(1)");
         
         // will fail because no permissions on mamta2.v21ViewTest
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select * from mamta2.v21ViewTest");
         
         // will fail because no permissions on mamta1.t11TriggerTest
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select * from mamta1.t11TriggerTest");
         
         // set connection mamta4
@@ -4816,7 +4816,7 @@ public void testGrantRevokeDDL() throws Exception
         // following attempt to create insert trigger again will 
         // fail because trigger privilege has been revoked.
         
-        assertStatementError("28506", st_mamta2,
+        assertStatementError("42500", st_mamta2,
             "create trigger tr11t11 after insert on "
             + "mamta1.t11TriggerRevokeTest for each "
             + "statement insert into t21TriggerRevokeTest values(99)");
@@ -5632,16 +5632,16 @@ public void testGrantRevokeDDL() throws Exception
         
         // Try granting or revoking to mamta1. Should all fail
         
-        assertStatementError("2850F", st_mamta1,
+        assertStatementError("42509", st_mamta1,
             "grant select on mamta1Table to mamta1");
         
-        assertStatementError("2850F", st_mamta1,
+        assertStatementError("42509", st_mamta1,
             " revoke select on mamta1Table from mamta1");
         
-        assertStatementError("2850F", st_mamta1,
+        assertStatementError("42509", st_mamta1,
             " grant execute on function f_abs to mamta1");
         
-        assertStatementError("2850F", st_mamta1,
+        assertStatementError("42509", st_mamta1,
             " revoke execute on function f_abs from mamta1 restrict");
         
         // set connection satConnection
@@ -5652,16 +5652,16 @@ public void testGrantRevokeDDL() throws Exception
         st.executeUpdate(
             " set schema mamta1");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " grant select on mamta1Table to mamta1");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " revoke select on mamta1Table from mamta1");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " grant execute on function f_abs to mamta1");
         
-        assertStatementError("2850F", st,
+        assertStatementError("42509", st,
             " revoke execute on function f_abs from mamta1 restrict");
         
         // But Grant/Revoke to another user should pass
@@ -5701,10 +5701,10 @@ public void testGrantRevokeDDL() throws Exception
         
         // expect errors
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "lock table user1.t100 in exclusive mode");
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             " lock table user1.t100 in share mode");
         
         // set connection user1
@@ -5733,10 +5733,10 @@ public void testGrantRevokeDDL() throws Exception
         
         // expect errors
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "lock table user1.t100 in exclusive mode");
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             " lock table user1.t100 in share mode");
         
         user2.commit();
@@ -5763,12 +5763,12 @@ public void testGrantRevokeDDL() throws Exception
         // attempt to grant this view to others, should fail since 
         // user2 does not have grant privilege on object user1.t1
         
-        assertStatementError("2850C", st_user2,
+        assertStatementError("42506", st_user2,
             "grant select on user1.t1 to user3");
         
         // expect error
         
-        assertStatementError("2850G", st_user2,
+        assertStatementError("4250A", st_user2,
             "grant select on v1 to user3");
         
         // set connection user2
@@ -6065,7 +6065,7 @@ public void testGrantRevokeDDL() throws Exception
         // should fail because mamta3 doesn't have any permission 
         // on this column in table mamta2.t1Derby1847
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select c3 from mamta2.t1Derby1847");
         
         // set connection mamta2
@@ -6097,7 +6097,7 @@ public void testGrantRevokeDDL() throws Exception
         // should fail because mamta3 lost it's select permission 
         // on new column in table mamta2.t1Derby1847
         
-        assertStatementError("28508", st_mamta3,
+        assertStatementError("42502", st_mamta3,
             "select c3 from mamta2.t1Derby1847");
         
         // set connection mamta2
@@ -6195,7 +6195,7 @@ public void testGrantRevokeDDL() throws Exception
         try {
             ResultSet crs2 = ps_crs2.executeQuery();
         } catch (SQLException e) {
-        	assertSQLState("28508", e);
+            assertSQLState("42502", e);
         }
         
         user2.setAutoCommit(true);
@@ -6243,7 +6243,7 @@ public void testGrantRevokeDDL() throws Exception
         try {
             ResultSet crs2 = ps_crs2.executeQuery();
         } catch (SQLException e) {
-        	assertSQLState("28508", e);
+            assertSQLState("42502", e);
         }
         
         // set connection user1
@@ -6553,7 +6553,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // should fail
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select * from user1.t1 where i = 1");
         
         // set connection user1
@@ -6589,7 +6589,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // should fail
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select * from user1.t1 where i = 1");
         
         // set connection user1
@@ -6625,7 +6625,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // should fail
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select * from user1.t1 where i = 1");
         
         // set connection user1
@@ -6833,7 +6833,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // should fail
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select * from user1.t1 where i = 1");
         
         // set connection user1
@@ -6963,50 +6963,50 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // test SELECT privilege, expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select * from user1.t1");
         
         // test INSERT privilege, expect error
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "insert into user1.t1(c1) values 4");
         
         // test UPDATE privilege, expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "update user1.t1 set c1=10");
         
         // test DELETE privilege, expect error
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "delete from user1.t1");
         
         // test REFERENCES privilege, expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "create table t2 (c1 int primary key not null, c2 "
             + "int references user1.t1)");
         
         // test TRIGGER privilege, expect error
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "create trigger trigger1 after update on user1.t1 "
             + "for each statement values integer('123')");
         
         // try to DROP user1.idx1 index, expect error
         
-        assertStatementError("2850D", st_user2,
+        assertStatementError("42507", st_user2,
             "drop index user1.idx1");
         
         // try to DROP user1.t1 table, expect error
         
-        assertStatementError("2850D", st_user2,
+        assertStatementError("42507", st_user2,
             "drop table user1.t1");
         
         // non privileged user try to grant privileges on 
         // user1.t1, expect error
         
-        assertStatementError("2850C", st_user2,
+        assertStatementError("42506", st_user2,
             "grant "
             + "select,insert,delete,update,references,trigger on "
             + "user1.t1 to user2");
@@ -7014,7 +7014,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         // try to grant privileges for public on user1.t1, expect 
         // error
         
-        assertStatementError("2850C", st_user2,
+        assertStatementError("42506", st_user2,
             "grant "
             + "select,insert,delete,update,references,trigger on "
             + "user1.t1 to public");
@@ -7022,18 +7022,18 @@ public void testGrantRevokeDDL2() throws SQLException {
         // try to grant all privileges for user2 on user1.t1, 
         // expect error
         
-        assertStatementError("2850C", st_user2,
+        assertStatementError("42506", st_user2,
             "grant ALL PRIVILEGES on user1.t1 to user2");
         
         // try to grant all privileges on user1.t1 to public, 
         // expect error
         
-        assertStatementError("2850C", st_user2,
+        assertStatementError("42506", st_user2,
             "grant ALL PRIVILEGES on user1.t1 to public");
         
         // try to revoke user1 from table user1.t1, expect error
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             "revoke "
             + "select,insert,delete,update,references,trigger on "
             + "user1.t1 from user1");
@@ -7041,13 +7041,13 @@ public void testGrantRevokeDDL2() throws SQLException {
         // try to revoke all privileges from user1 on table 
         // user1.t1, expect error
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             "revoke ALL PRIVILEGES on user1.t1 from user1");
         
         // try to revoke execute on a non-existing function on 
         // user1.t1, expect error
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             "revoke execute on function user1.f1 from user1 restrict");
         
         st_user2.executeUpdate(
@@ -7055,22 +7055,22 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // try revoking yourself from user2.t2, expect error
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             "revoke select on t2 from user2");
         
         // try granting yourself again on user2.t2, expect error. Why?
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             "grant select on t2 to user2");
         
         // try granting yourself multiple times, expect error.  Why?
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             "grant insert on t2 to user2,user2,user2");
         
         // try to execute user1.F_ABS1, expect error
         
-        assertStatementError("2850A", st_user2,
+        assertStatementError("42504", st_user2,
             "values user1.F_ABS1(-9)");
         
         // set connection user1
@@ -7172,7 +7172,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // try to insert from t1, expect error
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "insert into user1.t1 values (5, 'e')");
         
         // ok
@@ -7223,7 +7223,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // error
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "insert into user1.t1 values (2, 'abc', 'ABC')");
         
         // ok
@@ -7252,7 +7252,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // user3 does not have permission to execute, expect error
         
-        assertStatementError("2850A", st_user3,
+        assertStatementError("42504", st_user3,
             "values user1.F_ABS1(-8)");
         
         // ok
@@ -7415,12 +7415,12 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", st_user3,
+        assertStatementError("42502", st_user3,
             "select * from user1.t1");
         
         // expect error
         
-        assertStatementError("28508", st_user3,
+        assertStatementError("42502", st_user3,
             "update user1.t1 set c2 = 'user3'");
         
         // set connection test_dbo
@@ -7504,12 +7504,12 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select * from user1.t4");
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select c1 from user1.t4");
         
         // ok
@@ -7523,7 +7523,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "update user1.t4 set c1=10, c3=100");
         
         // ok
@@ -7548,12 +7548,12 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select c2 from user1.t4");
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "update user1.t4 set c2='ABC'");
         
         // set connection user2
@@ -7566,7 +7566,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("2850E", st_user2,
+        assertStatementError("42508", st_user2,
             "create table myschema.t5 (i int)");
         
         // ok
@@ -7576,10 +7576,10 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("2850E", st_user2,
+        assertStatementError("42508", st_user2,
             "CREATE SCHEMA w3 AUTHORIZATION user2");
         
-        assertStatementError("2850E", st_user2,
+        assertStatementError("42508", st_user2,
             " create table w3.t1 (i int)");
         
         // expect error, already exists
@@ -7589,7 +7589,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("2850E", st_user2,
+        assertStatementError("42508", st_user2,
             "CREATE SCHEMA myschema");
         
         // expect error
@@ -7616,7 +7616,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("2850D", st_user5,
+        assertStatementError("42507", st_user5,
             "DROP SCHEMA w3 RESTRICT");
         
         // set connection user1
@@ -7634,7 +7634,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "select tablename from user1.sv1");
 
         st.executeUpdate(
@@ -7709,7 +7709,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "create view svc (i) as select * from user1.sva "
             + "union select * from user1.svb");
         
@@ -7798,14 +7798,14 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error, don't have with grant option
         
-        assertStatementError("2850G", st_user2,
+        assertStatementError("4250A", st_user2,
             "grant select on user2.v02ap to user3");
         
         // set connection user3
         
         // expect error
         
-        assertStatementError("28508", st_user3,
+        assertStatementError("42502", st_user3,
             "create view v03ap as select * from user2.v02ap");
         
         assertStatementError("42Y07", st_user3,
@@ -7878,7 +7878,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "create table rt2 (c1 int primary key not null, c2 "
             + "int not null, c3 int not null, constraint rt2fk "
             + "foreign key(c1) references user1.rt1)");
@@ -7933,7 +7933,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect errors
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             "create table rt3 (c1 int primary key not null, c2 "
             + "int not null, c3 int not null, constraint rt3fk "
             + "foreign key(c1) references user1.rt1)");
@@ -8078,7 +8078,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect errors
         
-        assertStatementError("2850A", st_user2,
+        assertStatementError("42504", st_user2,
             "values user1.F_ABS1(10) + user1.F_ABS2(-10)");
         
         // set connection user1
@@ -8107,13 +8107,13 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect errors
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             "revoke execute on function ABS from user2 restrict");
         
         assertStatementError("42X01", st_user2,
             " revoke execute on function AVG from user2 restrict");
         
-        assertStatementError("2850F", st_user2,
+        assertStatementError("42509", st_user2,
             " revoke execute on function LENGTH from user2 restrict");
         
         // set connection user1
@@ -8130,7 +8130,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("2850A", st_user2,
+        assertStatementError("42504", st_user2,
             "values user1.F_ABS1(10) + user1.F_ABS2(-10)");
         
         // set connection user1
@@ -8170,232 +8170,232 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // not allowed. expect errors, sanity check
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             "grant ALL PRIVILEGES on sys.sysaliases to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.syschecks to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.syscolperms to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.syscolumns to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysconglomerates to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysconstraints to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysdepends to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysfiles to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysforeignkeys to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.syskeys to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysroutineperms to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysschemas to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysstatistics to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysstatements to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.systableperms to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.systables to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.systriggers to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on sys.sysviews to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant ALL PRIVILEGES on syscs_diag.lock_table to user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysaliases to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.syschecks to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.syscolperms to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.syscolumns to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysconglomerates to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysconstraints to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysdepends to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysfiles to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysforeignkeys to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.syskeys to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysroutineperms to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysschemas to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysstatistics to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysstatements to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.systableperms to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.systables to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.systriggers to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on sys.sysviews to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " grant select on syscs_diag.lock_table to user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysaliases from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.syschecks from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.syscolperms from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.syscolumns from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysconglomerates from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysconstraints from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysdepends from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysfiles from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysforeignkeys from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.syskeys from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysroutineperms from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysschemas from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysstatistics from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysstatements from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.systableperms from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.systables from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.systriggers from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on sys.sysviews from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke ALL PRIVILEGES on syscs_diag.lock_table from user2");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysaliases from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.syschecks from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.syscolperms from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.syscolumns from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysconglomerates from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysconstraints from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysdepends from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysfiles from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysforeignkeys from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.syskeys from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysroutineperms from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysschemas from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysstatistics from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysstatements from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.systableperms from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.systables from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.systriggers from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on sys.sysviews from user2, public");
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             " revoke select on syscs_diag.lock_table from user2, public");
         
         // set connection user3
@@ -8412,53 +8412,53 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         CallableStatement cSt3 = user3.prepareCall(
             "CALL SQLJ.INSTALL_JAR ('bogus.jar','user2.bogus',0)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SQLJ.REPLACE_JAR ('bogus1.jar', 'user2.bogus')");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SQLJ.REMOVE_JAR  ('user2.bogus', 0)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         // test backup routines, only db owner have privileges by 
         // default expect errors
         
         cSt3 = user3.prepareCall(
             "CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE('backup1')");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL "
             + "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCH"
             + "IVE_MODE('backup3', 1)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL "
             + "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCH"
             + "IVE_MODE_NOWAIT('backup4', 1)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         // test admin routines, only db owner have privileges by 
         // default
         
         cSt3 = user3.prepareCall(
             "CALL SYSCS_UTIL.SYSCS_FREEZE_DATABASE()");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SYSCS_UTIL.SYSCS_UNFREEZE_DATABASE()");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE(1)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         // set connection user1
         //ij(USER3)> -- test statistical routines, available for 
@@ -8556,23 +8556,23 @@ public void testGrantRevokeDDL2() throws SQLException {
         cSt3 = user3.prepareCall(
             " CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE ('USER3', "
             + "'TABLEEXP1', 'myfile.del', null, null, null)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE ('USER3', "
             + "'TABLEIMP1', 'myfile.del', null, null, null, 0)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SYSCS_UTIL.SYSCS_EXPORT_QUERY('select * from "
             + "user3.TABLEEXP1','myfile.del', null, null, null)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         cSt3 = user3.prepareCall(
             " CALL SYSCS_UTIL.SYSCS_IMPORT_DATA ('USER3', "
             + "'TABLEIMP1', null, '1,3,4', 'myfile.del', null, "
             + "null, null,0)");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
         // test property handling routines, only db owner have 
         // privileges by default expect errors
@@ -8580,9 +8580,9 @@ public void testGrantRevokeDDL2() throws SQLException {
         cSt3 = user3.prepareCall(
             "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY "
             + "('derby.locks.deadlockTimeout', '10')");
-        assertStatementError("2850A", cSt3);
+        assertStatementError("42504", cSt3);
         
-        assertStatementError("2850A", st_user3,
+        assertStatementError("42504", st_user3,
             " VALUES "
             + "SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('derby.locks."
             + "deadlockTimeout')");
@@ -8604,7 +8604,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         // test check table routines, only db owner have privilege 
         // by default
         
-        assertStatementError("2850A", st_user3,
+        assertStatementError("42504", st_user3,
             "VALUES SYSCS_UTIL.SYSCS_CHECK_TABLE('USER3', 'TABLEEXP1')");
         
         // set connection user1
@@ -8650,7 +8650,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect errors
         
-        assertStatementError("2850D", st_user2,
+        assertStatementError("42507", st_user2,
             "drop synonym user1.s1");
         
         assertStatementError("42X65", st_user2,
@@ -8709,19 +8709,19 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // set connection user2
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             " select * from user1.t1000");
         
         user2.setAutoCommit(false);
         
         // should fail
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "lock table user1.t1000 in share mode");
         
         // should fail
         
-        assertStatementError("28506", st_user2,
+        assertStatementError("42500", st_user2,
             "lock table user1.t1000 in exclusive mode");
         
         user2.commit();
@@ -8736,7 +8736,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         user1.rollback();
         
         
-        assertStatementError("28508", st_user2,
+        assertStatementError("42502", st_user2,
             " select * from user1.t1000");
         
         // set connection user1
@@ -8993,7 +8993,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // DERBY-1858 expect error
         
-        assertStatementError("2850D", st_user2,
+        assertStatementError("42507", st_user2,
             "drop schema user4 restrict");
         
         // set connection dbo
@@ -9026,7 +9026,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", pSt2);
+        assertStatementError("42502", pSt2);
         
         // set connection user1
         
@@ -9063,7 +9063,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("28508", pSt2);
+        assertStatementError("42502", pSt2);
         
         
         // set connection user2
@@ -9084,7 +9084,7 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect error
         
-        assertStatementError("2850F", st_user1,
+        assertStatementError("42509", st_user1,
             "revoke select on user2.tshared0 from user2");
         
         // set connection user2
@@ -9310,30 +9310,30 @@ public void testGrantRevokeDDL2() throws SQLException {
         
         // expect errors
         
-        assertStatementError("2850G", st_user4,
+        assertStatementError("4250A", st_user4,
             "grant select on vshared1 to user5");
         
-        assertStatementError("2850G", st_user4,
+        assertStatementError("4250A", st_user4,
             " grant select on vshared2 to user5");
         
-        assertStatementError("2850G", st_user4,
+        assertStatementError("4250A", st_user4,
             " grant select on vshared3 to user5");
         
-        assertStatementError("2850G", st_user4,
+        assertStatementError("4250A", st_user4,
             " grant select on vshared4 to user5");
         
         // set connection user5
         
-        assertStatementError("28508", st_user5,
+        assertStatementError("42502", st_user5,
             " select * from user4.vshared1");
         
-        assertStatementError("28508", st_user5,
+        assertStatementError("42502", st_user5,
             " select * from user4.vshared2");
         
-        assertStatementError("28508", st_user5,
+        assertStatementError("42502", st_user5,
             " select * from user4.vshared3");
         
-        assertStatementError("28508", st_user5,
+        assertStatementError("42502", st_user5,
             " select * from user4.vshared4");
         
         // set connection user1
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
index 6a32dae2..b48a08aa 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
@@ -750,22 +750,22 @@ public void testOtherUserCannotRevokeOwnerPrivileges() throws SQLException {
         try {
         	revoke(users[2], "select", "s1", "t1", "public");
         } catch (SQLException e) {
-        	assertSQLState("2850C", e);
+            assertSQLState("42506", e);
         }
         try {
         	revoke(users[2], "select", "s1", "t1", users[0]);
         } catch (SQLException e) {
-        	assertSQLState("2850F", e);
+            assertSQLState("42509", e);
         }
         try {
         	revoke(users[2], "insert", "s1", "t1", users[1]);
         } catch (SQLException e) {
-        	assertSQLState("2850C", e);
+            assertSQLState("42506", e);
         }
         try {
         	revoke(users[2], "update(c1)", "s1", "t1", users[2]);
         } catch (SQLException e) {
-        	assertSQLState("2850C", e);
+            assertSQLState("42506", e);
         }
     }
     
@@ -1014,7 +1014,7 @@ public void assertSelectPrivilege(boolean hasPrivilege, String user, String sche
     	    }
     	} catch (SQLException e) {
     		if (!hasPrivilege) {
-    			assertSQLState("28508", e);
+    			assertSQLState("42502", e);
     		} else {
     			e.printStackTrace();
     			fail("Unexpected lack of select privilege.");
@@ -1046,7 +1046,7 @@ public void assertDeletePrivilege(boolean hasPrivilege, String user, String sche
     	    }
     	} catch (SQLException e) {
     		if (!hasPrivilege) {
-    			assertSQLState("28506", e);
+    			assertSQLState("42500", e);
     		} else {
     			fail("Unexpected lack of delete privilege.");
     			e.printStackTrace();
@@ -1096,7 +1096,7 @@ public void assertInsertPrivilege(boolean hasPrivilege, String user, String sche
     	    }
     	} catch (SQLException e) {
     		if (!hasPrivilege) {
-    			assertSQLState("28508", e);
+    			assertSQLState("42502", e);
     		} else {
     			fail("Unexpected lack of insert privilege on " + schema + "." + table + " by " + user);
     		}
@@ -1158,7 +1158,7 @@ public void assertUpdatePrivilege(boolean hasPrivilege, String user, String sche
         	    }
     		} catch (SQLException e) {
         		if (!hasPrivilege) {
-        			assertSQLState("28508", e);
+        			assertSQLState("42502", e);
         		} else {
         			e.printStackTrace();
         			fail("Unexpected lack of privilege to update on " + schema + "." + table + " by " + user);
@@ -1205,7 +1205,7 @@ public void assertReferencesPrivilege(boolean hasPrivilege, String user, String
         	    }
         	} catch (SQLException e) {
         		if (!hasPrivilege) {
-        			assertSQLState("28508", e);
+        			assertSQLState("42502", e);
         		} else {
         			e.printStackTrace();
         			fail("Unexpected lack of references privilege");
@@ -1243,7 +1243,7 @@ public void assertTriggerPrivilege(boolean hasPrivilege, String user, String sch
     	    }
     	} catch (SQLException e) {
     		if (!hasPrivilege) {
-    			assertSQLState("28506", e);
+    			assertSQLState("42500", e);
     		} else {
     			e.printStackTrace();
     			fail("Unexpected lack of trigger privilege on " + schema + "." + table + " by " + user);
@@ -1283,7 +1283,7 @@ public void assertFunctionPrivilege(boolean hasPrivilege, String user, String sc
 				if (forProcedure) 
 					assertSQLState("42Y03", e);
 				else 
-   				    assertSQLState("2850A", e);
+					assertSQLState("42504", e);
 			} else {
 				e.printStackTrace();
 				fail("Unexpected lack of function execute privilege");
@@ -1316,7 +1316,7 @@ public void assertProcedurePrivilege(boolean hasPrivilege, String user, String s
 			rs = ps.getResultSet();
 		} catch (SQLException e) {
 			if (!hasPrivilege)
-				assertSQLState("2850A", e);
+				assertSQLState("42504", e);
 			else {
 				e.printStackTrace();
 				fail("Unexpected lack of procedure execute privilege.");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java
index 7d9d2534..486b1255 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java
@@ -242,7 +242,7 @@ private void dbaTest()
     private void nonDbaTest()
         throws Exception
     {
-        String          reservedToDBO = "2850A";
+        String          reservedToDBO = "42504";
         Connection  conn = openUserConnection( NON_DBO_USER );
 
         assertTrue( "Initially, should be able to read property.", canReadProperty() );
