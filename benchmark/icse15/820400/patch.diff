diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Column.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Column.java
index b8d99690..996584b8 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Column.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Column.java
@@ -20,10 +20,13 @@
 
 import java.util.Collection;
 import java.nio.ByteBuffer;
+import java.security.MessageDigest;
+import java.io.IOException;
 
 import org.apache.commons.lang.ArrayUtils;
 
 import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.io.DataOutputBuffer;
 
 
 /**
@@ -172,13 +175,21 @@ public IColumn diff(IColumn column)
         return null;
     }
 
-    public byte[] digest()
+    public void updateDigest(MessageDigest digest)
     {
-        StringBuilder stringBuilder = new StringBuilder();
-        stringBuilder.append(name);
-        stringBuilder.append(":");
-        stringBuilder.append(timestamp);
-        return stringBuilder.toString().getBytes();
+        digest.update(name);
+        digest.update(value);
+        DataOutputBuffer buffer = new DataOutputBuffer();
+        try
+        {
+            buffer.writeLong(timestamp);
+            buffer.writeBoolean(isMarkedForDelete);
+        }
+        catch (IOException e)
+        {
+            throw new RuntimeException(e);
+        }
+        digest.update(buffer.getData(), 0, buffer.getLength());
     }
 
     public int getLocalDeletionTime()
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamily.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamily.java
index c3bddd42..4f1315dc 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -26,12 +26,11 @@
 import java.util.SortedSet;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.ConcurrentSkipListMap;
+import java.security.MessageDigest;
 
-import org.apache.commons.lang.ArrayUtils;
 import org.apache.log4j.Logger;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.io.ICompactSerializer2;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.marshal.AbstractType;
@@ -347,21 +346,12 @@ public String toString()
     	return sb.toString();
     }
 
-    public byte[] digest()
+    public void updateDigest(MessageDigest digest)
     {
-        byte[] xorHash = ArrayUtils.EMPTY_BYTE_ARRAY;
         for (IColumn column : columns_.values())
         {
-            if (xorHash.length == 0)
-            {
-                xorHash = column.digest();
-            }
-            else
-            {
-                xorHash = FBUtilities.xor(xorHash, column.digest());
-            }
+            column.updateDigest(digest);
         }
-        return xorHash;
     }
 
     public long getMarkedForDeleteAt()
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/IColumn.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/IColumn.java
index 13809964..a9208576 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/IColumn.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/IColumn.java
@@ -19,6 +19,7 @@
 package org.apache.cassandra.db;
 
 import java.util.Collection;
+import java.security.MessageDigest;
 
 import org.apache.cassandra.db.marshal.AbstractType;
 
@@ -42,7 +43,7 @@
     public void addColumn(IColumn column);
     public IColumn diff(IColumn column);
     public int getObjectCount();
-    public byte[] digest();
+    public void updateDigest(MessageDigest digest);
     public int getLocalDeletionTime(); // for tombstone GC, so int is sufficient granularity
     public String getString(AbstractType comparator);
 }
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Row.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Row.java
index 103dd054..378d4151 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Row.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Row.java
@@ -26,6 +26,8 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.Arrays;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
@@ -170,20 +172,22 @@ public Row cloneMe()
 
     public byte[] digest()
     {
-        Set<String> cfamilies = columnFamilies_.keySet();
-        byte[] xorHash = ArrayUtils.EMPTY_BYTE_ARRAY;
-        for (String cFamily : cfamilies)
+        MessageDigest digest;
+        try
         {
-            if (xorHash.length == 0)
-            {
-                xorHash = columnFamilies_.get(cFamily).digest();
+            digest = MessageDigest.getInstance("MD5");
             }
-            else
+        catch (NoSuchAlgorithmException e)
             {
-                xorHash = FBUtilities.xor(xorHash, columnFamilies_.get(cFamily).digest());
+            throw new AssertionError(e);
             }
+
+        for (String cFamily : columnFamilies_.keySet())
+        {
+            columnFamilies_.get(cFamily).updateDigest(digest);
         }
-        return xorHash;
+
+        return digest.digest();
     }
 
     void clear()
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/SuperColumn.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/SuperColumn.java
index 293efefa..270c670e 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -23,15 +23,13 @@
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.ConcurrentSkipListMap;
+import java.security.MessageDigest;
 
-import org.apache.commons.lang.ArrayUtils;
 import org.apache.log4j.Logger;
 
-import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.io.ICompactSerializer2;
+import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.db.marshal.AbstractType;
-import org.apache.cassandra.db.marshal.MarshalException;
 
 
 public final class SuperColumn implements IColumn, IColumnContainer
@@ -270,17 +268,24 @@ public IColumn diff(IColumn columnNew)
         	return null;
     }
 
-    public byte[] digest()
+    public void updateDigest(MessageDigest digest)
     {
-    	byte[] xorHash = ArrayUtils.EMPTY_BYTE_ARRAY;
-    	if(name_ == null)
-    		return xorHash;
-    	xorHash = name_.clone();
-    	for(IColumn column : columns_.values())
+        assert name_ != null;
+        digest.update(name_);
+        DataOutputBuffer buffer = new DataOutputBuffer();
+        try
     	{
-			xorHash = FBUtilities.xor(xorHash, column.digest());
+            buffer.writeLong(markedForDeleteAt);
+        }
+        catch (IOException e)
+        {
+            throw new RuntimeException(e);
+        }
+        digest.update(buffer.getData(), 0, buffer.getLength());
+        for (IColumn column : columns_.values())
+        {
+            column.updateDigest(digest);
     	}
-    	return xorHash;
     }
 
     public String getString(AbstractType comparator)
diff --git a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
index 40e58890..66ab5bb9 100644
--- a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
+++ b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
@@ -132,11 +132,4 @@ public void testMergeAndAdd()
         //addcolumns will only add if timestamp >= old timestamp
         assert Arrays.equals(val, cf_result.getColumn("col2".getBytes()).value());
     }
-
-    @Test
-    public void testEmptyDigest()
-    {
-        ColumnFamily cf = ColumnFamily.create("Keyspace1", "Standard1");
-        assert cf.digest().length == 0;
-    }
 }
