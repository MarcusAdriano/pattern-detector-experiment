diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
index 4a2664fe..ba4af223 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
@@ -87,7 +87,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     // volatile on threadsInPageIO, is just to ensure that we get a correct
     // value for debugging: we can't always use channelCleanupMonitor
-    // then. Not safe on 1.4, but who cares..
+    // then. Otherwise protected by channelCleanupMonitor. Debugging value not
+    // safe on 1.4, but who cares..
     private volatile int threadsInPageIO = 0;
 
     // volatile on restoreChannelInProgress: corner case where we can't use
@@ -330,6 +331,9 @@ private void readPage(long pageNumber, byte[] pageData, long offset)
 
 
         boolean success = false;
+        int retries = MAX_INTERRUPT_RETRIES;
+
+      try {
         while (!success) {
             try {
                 if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
@@ -393,9 +397,14 @@ private void readPage(long pageNumber, byte[] pageData, long offset)
                 // Recovery is in progress, wait for another interrupted thread
                 // to clean up.
                 awaitRestoreChannel(e, stealthMode);
+
+                if (retries-- == 0) {
+                    throw StandardException.newException(
+                        SQLState.FILE_IO_INTERRUPTED);
             }
         }
-
+        }
+      } finally {
         if (stealthMode) {
             // don't touch threadsInPageIO
         } else {
@@ -404,6 +413,7 @@ private void readPage(long pageNumber, byte[] pageData, long offset)
             }
         }
     }
+    }
 
     private void readPage0(long pageNumber, byte[] pageData, long offset)
          throws IOException, StandardException
@@ -533,6 +543,7 @@ protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
         boolean success = false;
         int retries = MAX_INTERRUPT_RETRIES;
 
+      try {
         while (!success) {
             try {
                 if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
@@ -600,7 +611,7 @@ protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
                 }
             }
         }
-
+      } finally {
         if (stealthMode) {
             // don't touch threadsInPageIO
         } else {
@@ -609,6 +620,7 @@ protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
             }
         }
     }
+    }
 
     /**
      * Use when seeing an exception during IO and when another thread is
@@ -831,12 +843,17 @@ private boolean recoverContainerAfterInterrupt(
                     // for us to clean up (see ClosedChannelException case)
                     break;
                 }
-            }
 
             if (retries-- == 0) {
+                    // Clean up state and throw
+                    threadDoingRestore = null;
+                    restoreChannelInProgress = false;
+                    channelCleanupMonitor.notifyAll();
+
                 throw StandardException.newException(
                         SQLState.FILE_IO_INTERRUPTED);
             }
+            }
 
             try {
                 Thread.sleep(INTERRUPT_RETRY_SLEEP);
