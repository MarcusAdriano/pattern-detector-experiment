diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java
index be57a1f8..62d801f1 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java
@@ -187,7 +187,7 @@ static String providerErrorName(String cps) {
 
 		@exception StandardException Standard Derby error policy
 	 */
-	private String encryptKey(byte[] secretKey, byte[] bootPassword)
+	private EncryptedKeyResult encryptKey(byte[] secretKey, byte[] bootPassword)
 		 throws StandardException
 	{
 		// In case of AES, care needs to be taken to allow for 16 bytes muck as well
@@ -215,7 +215,9 @@ private String encryptKey(byte[] secretKey, byte[] bootPassword)
 		// encrypt the secretKey using the key generated of muck from  boot password and the generated IV  
 		tmpCipherProvider.encrypt(secretKey, 0, secretKey.length, result, 0);
 
-		return org.apache.derby.iapi.util.StringUtil.toHexString(result, 0, result.length);
+		String hexOutput = org.apache.derby.iapi.util.StringUtil.toHexString(result, 0, result.length);
+
+        return new EncryptedKeyResult( hexOutput, secretKey );
 
 	}
 	
@@ -749,11 +751,12 @@ public void saveProperties(Properties properties)
 	}
 
 	private String saveSecretKey(byte[] secretKey, byte[] bootPassword) throws StandardException {
-		String encryptedKey = encryptKey(secretKey, bootPassword);
+		EncryptedKeyResult ekr = encryptKey(secretKey, bootPassword);
+		String encryptedKey = ekr.hexOutput;
 
 		// make a verification key out of the message digest of
 		// the generated key
-		int verifyKey = digest(secretKey);
+		int verifyKey = digest(ekr.paddedInputKey);
 
 		return encryptedKey.concat("-" + verifyKey);
 
@@ -1021,4 +1024,17 @@ private InputStream privAccessGetInputStream(StorageFactory storageFactory,Strin
 	    }
 	}
 
+    // tuple for returning results from encryptKey()
+    private static final class EncryptedKeyResult
+    {
+        public String hexOutput;
+        public byte[] paddedInputKey;
+
+        public EncryptedKeyResult( String hexOutput, byte[] paddedInputKey )
+        {
+            this.hexOutput = hexOutput;
+            this.paddedInputKey = paddedInputKey;
+        }
+    }
+    
 }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java
index 97605f28..29914fce 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java
@@ -1,6 +1,6 @@
 /*
  *
- * Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest
+ * Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptionAESTest
  *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -219,10 +219,6 @@ protected void runTestEncryptionKeyLengths(
         validateDBContents(con);
         // Shutdown the database.
         con.close();
-        // bug DERBY-3710 - with encryptionKeyLength=192,
-        // we cannot connect after a shutdown. Works fine with 128 and 256.
-        // the if is to workaround DERBY-3710, can be removed when it's fixed.
-        if (!encryptionKeyLength.equals("192"))
             shutdown(dbName);
         // Reconnect using correct key length.
         con = getConnection(dbName, encryptionAlgorithm, attributes);
@@ -232,9 +228,6 @@ protected void runTestEncryptionKeyLengths(
         con = getDriverManagerConnection(dbName, encryptionAlgorithm, attributes);
         validateDBContents(con);
         con.close();
-        // Shutdown the database.
-        // the if is to workaround DERBY-3710
-        if (!encryptionKeyLength.equals("192"))
             shutdown(dbName);
         String[] keyLengths = {"128", "192", "256", "512"};
         for (int i=0 ; i < keyLengths.length ; i++) {
@@ -247,16 +240,30 @@ protected void runTestEncryptionKeyLengths(
                     encryptionKeyLength, attributes);
             }
         }
-        // workaround DERBY-3710; otherwise the db was shutdown
-        // in the method runMismatchKeyLength.
-        if (encryptionKeyLength.equals("192"))
+
+        // now try re-encrypting with a different boot password
+        attributes = new String[]
         {
+                ("encryptionKeyLength=" + encryptionKeyLength),
+                "bootPassword=Thursday",
+                "newBootPassword=Saturday"
+            };
+        con = getDriverManagerConnection(dbName, encryptionAlgorithm, attributes);
+        validateDBContents(con);
+        con.close();
+        shutdown(dbName);
+
+        // reconnect to make sure we don't have another variant of DERBY-3710
             attributes = new String[] 
-               {("encryptionKeyLength=" + encryptionKeyLength),
-                 "bootPassword=Thursday"};
+            {
+                ("encryptionKeyLength=" + encryptionKeyLength),
+                "bootPassword=Saturday"
+            };
+        con = getDriverManagerConnection(dbName, encryptionAlgorithm, attributes);
+        validateDBContents(con);
+        con.close();
             shutdown(dbName);
         }
-    }
 
     /**
      * attempt to connect and verify the SQLState if it's expected to fail
@@ -267,13 +274,11 @@ public void runMismatchKeyLength(String dbName, String encryptionAlgorithm,
         Connection con = null;
         // try connecting
         // all combinations work - (if unrestricted policy jars are
-        // in place) except with length 192 if we've done a shutdown.
+        // in place)
         try {
             con = getConnection(dbName, encryptionAlgorithm, attributes );
             validateDBContents(con);
             con.close();
-            // workaround DERBY-3710
-            if (!encryptionKeyLength.equals("192"))
                 shutdown(dbName);
         } catch (SQLException e) {
             e.printStackTrace();
