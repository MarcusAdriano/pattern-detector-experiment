diff --git a/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java b/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java
index c8dbf516..76feb983 100644
--- a/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java
+++ b/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java
@@ -36,12 +36,13 @@
  */
 public class CartesianShapeFilter extends Filter {
 
+  private static final Logger log = Logger.getLogger(CartesianShapeFilter.class.getName());
+
   /**
    * 
    */
   private static final long serialVersionUID = 1L;
   private Shape shape;
-  private Logger log = Logger.getLogger(getClass().getName());
   private String fieldName;
   
   CartesianShapeFilter(Shape shape, String fieldName){
diff --git a/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java b/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java
index 41275271..df884012 100644
--- a/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java
+++ b/lucene/java/trunk/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java
@@ -19,6 +19,8 @@
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.HashMap;
+import java.io.IOException;
+import java.io.ObjectInputStream;
 
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.spatial.tier.DistanceHandler.Precision;
@@ -36,7 +38,7 @@
   protected double distance;
 
   protected int nextDocBase; 
-  protected final WeakHashMap<String,Double> distanceLookupCache;
+  protected transient WeakHashMap<String,Double> distanceLookupCache;
 
   /** Filters the startingFilter by precise distance
    *  checking filter */
@@ -61,6 +63,12 @@ public DistanceFilter(Filter startingFilter, double distance) {
     distanceLookupCache = new WeakHashMap<String,Double>();
   }
 
+  /** needed for deserialization, because the cache is transient */
+  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
+    stream.defaultReadObject();
+    distanceLookupCache = new WeakHashMap<String,Double>();
+  }
+
   public Map<Integer,Double> getDistances(){
     return distances;
   }
