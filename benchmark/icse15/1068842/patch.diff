diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java
index 51e42891..26a15fb5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java
@@ -158,6 +158,11 @@ List of all connection (JDBC) attributes by the system.
 	*/
 	String SHUTDOWN_ATTR = "shutdown";
 
+	/**
+     * The attribute that is to keep autoloading idiom for driver
+     */
+    String DEREGISTER_ATTR = "deregister";
+
 	/**
 		The attribute that is used to request a database create.
 	*/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
index 0aab6f11..0cfec80f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
@@ -60,12 +60,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	// This flag is set if the engine is forcibly brought down.
 	private	static	boolean	_engineForcedDown = false;
 	
-    // This flag is set if AutoloadedDriver exists
-    private static boolean activeautoloadeddriver = false;
 
     //This is the driver that memorizes the autoloadeddriver (DERBY-2905)
     private static Driver _autoloadedDriver;
 
+    //This flag is set is deregister attribute is set by user, 
+    //default is true (DERBY-2905)
+    private static boolean deregister = true;
 	//
 	// This is the driver that's specific to the JDBC level we're running at.
 	// It's the module which boots the whole Derby engine.
@@ -93,7 +94,6 @@ protected static void   registerMe( AutoloadedDriver me )
 		try {
             _autoloadedDriver = me;
             DriverManager.registerDriver( _autoloadedDriver );
-            activeautoloadeddriver = true;
 		}
 		catch (SQLException se)
 		{
@@ -227,8 +227,10 @@ static	void	registerDriverModule( Driver driver )
 		_engineForcedDown = false;
 		
         try {
-            if (!activeautoloadeddriver)
-                DriverManager.registerDriver(_driverModule);
+            if (_autoloadedDriver == null) {
+                _autoloadedDriver = new AutoloadedDriver();
+                DriverManager.registerDriver(_autoloadedDriver);
+            }
         } catch (SQLException e) {
             if (SanityManager.DEBUG)
                 SanityManager.THROWASSERT(e);
@@ -244,9 +246,9 @@ static	void	unregisterDriverModule()
 	{
 		_engineForcedDown = true;
         try {
-            if (activeautoloadeddriver) {
+            // deregister is false if user set deregister=false attribute (DERBY-2905)
+            if (deregister && _autoloadedDriver != null) {
                 DriverManager.deregisterDriver(_autoloadedDriver);
-                activeautoloadeddriver = false;
                 _autoloadedDriver = null;
             } else {
                 DriverManager.deregisterDriver(_driverModule);
@@ -267,5 +269,19 @@ private	static	boolean	isBooted()
 		return ( _driverModule != null );
 	}
 	
+    /**
+     * @param theValue set the deregister value
+     */
+    public static void setDeregister(boolean theValue) {
+        AutoloadedDriver.deregister = theValue;
+    }
+
+    /**
+     * @return the deregister value
+     */
+    public static boolean getDeregister() {
+        return deregister;
+    }
+
 }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
index 284859ac..06ac8f6a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
@@ -159,6 +159,7 @@ public void stop() {
 
 			String[][] connBooleanAttributes = {
 				{Attribute.SHUTDOWN_ATTR, MessageId.CONN_SHUT_DOWN_CLOUDSCAPE},
+                {Attribute.DEREGISTER_ATTR, MessageId.CONN_DEREGISTER_AUTOLOADEDDRIVER},
 				{Attribute.CREATE_ATTR, MessageId.CONN_CREATE_DATABASE},
 				{Attribute.DATA_ENCRYPTION, MessageId.CONN_DATA_ENCRYPTION},
 				{Attribute.UPGRADE_ATTR, MessageId.CONN_UPGRADE_DATABASE},
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
index 2f63e80f..5d82eaeb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
@@ -223,6 +223,15 @@ public Connection connect(String url, Properties info)
                                     getTextMessage(MessageId.AUTH_INVALID));
 					}
 
+                    // DERBY-2905, allow users to provide deregister attribute to 
+                    // left AutoloadedDriver in DriverManager, default value is true
+                    if (finfo.getProperty(Attribute.DEREGISTER_ATTR) != null) {
+                        boolean deregister = Boolean.valueOf(
+                                finfo.getProperty(Attribute.DEREGISTER_ATTR))
+                                .booleanValue();
+                        AutoloadedDriver.setDeregister(deregister);
+                    }
+
 					// check for shutdown privileges
 					// DERBY-3495: uncomment to enable system privileges checks
 					//final String user = IdUtil.getUserNameFromURLProps(finfo);
@@ -383,6 +392,7 @@ protected FormatableProperties getAttributes(String url, Properties info)
 		checkBoolean(finfo, Attribute.DATA_ENCRYPTION);
 		checkBoolean(finfo, Attribute.CREATE_ATTR);
 		checkBoolean(finfo, Attribute.SHUTDOWN_ATTR);
+        checkBoolean(finfo, Attribute.DEREGISTER_ATTR);
 		checkBoolean(finfo, Attribute.UPGRADE_ATTR);
 
 		return finfo;
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
index d6b846bb..14594d04 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
@@ -114,6 +114,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	String CONN_SHUT_DOWN_ENGINE		    = "J003"; // shutting down Derby Engine
 	String CONN_DATABASE_IDENTITY			= "J004"; // database identity
 	String CONN_SHUT_DOWN_CLOUDSCAPE		= "J005"; // shut down Derby
+    String CONN_DEREGISTER_AUTOLOADEDDRIVER = "J006"; // remove registered AutoloadedDriver
 	String CONN_CREATE_DATABASE				= "J007"; // create database
 	String CONN_NO_DETAILS					= "J008"; // no details
     String CONN_DATA_ENCRYPTION             = "J010"; // encrypt database on disk
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
index c31a13c9..26ee4adf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
@@ -25,6 +25,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.SQLException;
+import java.sql.Statement;
+
 import javax.sql.DataSource;
 import java.util.Enumeration;
 
@@ -123,6 +125,7 @@ public static Test suite() {
                 // left registered in the driver manager
                 // and that after a shutdown, an explicit load
                 // can restart the engine.
+                suite.addTest(new AutoloadTest("testAssertShutdownOK"));
                 suite.addTest(new AutoloadTest("testShutdownDeRegister"));
                 suite.addTest(new AutoloadTest("testExplicitReload"));
             }
@@ -182,8 +185,8 @@ private static Test baseAutoLoadSuite(String which)
 	// ///////////////////////////////////////////////////////////
 
     /**
-     * Test DERBY-2905:Shutting down embedded Derby does not remove all code,
-     * the AutoloadDriver is left registered in the DriverManager.
+     * Test DERBY-2905:Shutting down embedded Derby does remove all code,
+     * the AutoloadDriver is dergistered from DriverManager.
      * 
      * @throws Exception
      */
@@ -214,15 +217,21 @@ public void testAutoloadDriverUnregister() throws Exception {
             String driverClass = getTestConfiguration().getJDBCClient()
                     .getJDBCDriverName();
 
+            //Derby should be able to get a connection if AutoloaderDriver is
+            //not in DriverManager. Make a connection to test it. Derby-2905
             Class.forName(driverClass).newInstance();
             url = getTestConfiguration().getJDBCUrl();
             user = getTestConfiguration().getUserName();
             password = getTestConfiguration().getUserPassword();
             DriverManager.getConnection(url, user, password);
+            //newInstance is gettin AutoloadedDriver
+            AutoloadedDriver = "org.apache.derby.jdbc.AutoloadedDriver";
+            assertTrue(getRegisteredDrivers(AutoloadedDriver));
 
             // shut down engine
             TestConfiguration.getCurrent().shutdownEngine();
 
+            assertFalse(getRegisteredDrivers(AutoloadedDriver));
             assertFalse(getRegisteredDrivers(Driver40));
             assertFalse(getRegisteredDrivers(Driver30));
             assertFalse(getRegisteredDrivers(Driver20));
@@ -471,8 +480,8 @@ private boolean getRegisteredDrivers(String driver) {
 	return false;
     }
 
-    private void assertShutdownOK() throws SQLException {
-
+    public void testAssertShutdownOK() throws SQLException {
+        String AutoloadedDriver = getAutoloadedDriverName();
         Connection conn = getConnection();
 
         if (usingEmbedded()) {
@@ -488,7 +497,20 @@ private void assertShutdownOK() throws SQLException {
             assertTrue(conn.isClosed());
         } else if (usingDerbyNetClient()) {
             DataSource ds = JDBCDataSource.getDataSource();
-            JDBCDataSource.setBeanProperty(ds, "connectionAttributes","shutdown=true");
+            //Case 1: Test the deregister attribute error
+            JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
+                    "shutdown=true;deregiste=false");
+            try {
+                ds.getConnection();
+                fail("expected shutdown to fail");
+            } catch (SQLException e) {
+                // expect 08006 on successful shutdown
+                assertSQLState("08006", e);
+            }
+            //Case 2: Test with deregister=false, AutoloadedDriver should
+            //still be in DriverManager
+            JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
+                    "shutdown=tru e;deregister=false");
             try {
                 ds.getConnection();
                 fail("expected shutdown to fail");
@@ -496,6 +518,26 @@ private void assertShutdownOK() throws SQLException {
                 // expect 08006 on successful shutdown
                 assertSQLState("08006", e);
             }
+            //DERBY-2905 deregister=false should keep AutoloadedDriver in
+            //DriverManager
+            assertTrue(getRegisteredDrivers(AutoloadedDriver));
+            //Test getting a connection just right after the shutdown.
+            String url = getTestConfiguration().getJDBCUrl();
+            conn = DriverManager.getConnection(url);
+            Statement stmt = conn.createStatement();
+            stmt.executeUpdate("values 1");
+            JDBCDataSource.setBeanProperty(ds, "connectonAttributes",
+                    "shutdown=true;deregister=true");
+            try {
+                ds.getConnection();
+                fail("expected shutdown to fail");
+            } catch (SQLException e) {
+                // expect 08006 on successful shutdown
+                assertSQLState("08006", e);
+            }
+            //DERBY-2905 deregister=true should deregister AutoloadedDriver in
+            //DriverManager
+            assertFalse(getRegisteredDrivers(AutoloadedDriver));
         }
     }
 
