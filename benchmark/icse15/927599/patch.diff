diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
index 452807ff..f0020d1b 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
@@ -30,13 +30,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
-import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
-
 import org.apache.derby.iapi.services.compiler.LocalField;
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 import org.apache.derby.iapi.sql.compile.Visitable;
 import org.apache.derby.iapi.sql.compile.Visitor;
 
+import org.apache.derby.iapi.util.JBitSet;
+
 import java.lang.reflect.Modifier;
 
 import java.util.Vector;
@@ -375,6 +375,17 @@ public Visitable accept(Visitor v) throws StandardException
 		return returnNode;
 	}
 	/**
+     * Categorize this predicate.
+     *
+     * @see ValueNode#categorize(JBitSet, boolean)
+     */
+    public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
+        throws StandardException
+    {
+        return argumentsList.categorize(referencedTabs, simplePredsOnly);
+    }
+
+	/**
 	 * Preprocess an expression tree.  We do a number of transformations
 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
 	 * subquery flattening.
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java
index 6828a137..624e7486 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java
@@ -1184,6 +1184,26 @@ public void testColumnRemappingDerby4342() throws SQLException {
                 "1");
     }
 
+    /**
+     * Regression test for DERBY-4594. A join with COALESCE in the WHERE
+     * clause failed with NullPointerException or with
+     * ArrayIndexOutOfBoundsException because the predicates had not been
+     * properly categorized in CoalesceFunctionNode.
+     */
+    public void testPredicateCategorizationDerby4594() throws SQLException {
+        s.execute("create table d4594_t1 (a1 int)");
+        s.execute("create table d4594_t2 (a2 int)");
+        s.execute("insert into d4594_t1 values 1");
+        // failed with NullPointerException
+        JDBC.assertEmpty(s.executeQuery(
+                "select 1 from d4594_t1 join d4594_t2 on 1=1 " +
+                "where coalesce(a2, 0) <> 1"));
+        // failed with ArrayIndexOutOfBoundsException
+        JDBC.assertEmpty(s.executeQuery(
+                "select 1 from d4594_t1 left join d4594_t2 on 1=1 " +
+                "where coalesce(a2, 0) <> 1"));
+    }
+
     /**************supporting methods *******************/
     private void dumpRS(ResultSet rs, String expectedValue) throws SQLException
     {
