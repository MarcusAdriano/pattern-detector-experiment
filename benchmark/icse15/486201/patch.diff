diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/JarReader.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/JarReader.java
index b1441930..88aa1637 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/JarReader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/JarReader.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.iapi.services.loader;
 
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.io.StorageFile;
 
 /**
 	Abstract out the loading of JarFiles.
@@ -30,12 +31,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public interface JarReader {
 
 	/**
-		Load the contents of a Jarfile. The return is either
-		an java.io.InputStream representing the contents of the JarFile
-		or a java.io.File representing the location of the file.
-		If the jar does not exist an exception is thrown.
+	 * Get the StorageFile for an installed jar file.
 	*/
-	Object readJarFile(String schemaName, String sqlName)
+	StorageFile getJarFile(String schemaName, String sqlName)
 		throws StandardException;
 }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
index a95b2cdb..526edb20 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
@@ -790,7 +790,7 @@ protected void pushClassFactoryContext(ContextManager cm, ClassFactory cf) {
 	/*
 	** Methods of JarReader
 	*/
-	public Object readJarFile(String schemaName, String sqlName)
+	public StorageFile getJarFile(String schemaName, String sqlName)
 		throws StandardException {
 
 		DataDictionaryContext ddc =
@@ -808,15 +808,7 @@ public Object readJarFile(String schemaName, String sqlName)
 
 		String externalName = org.apache.derby.impl.sql.execute.JarDDL.mkExternalName(schemaName, sqlName, fr.getSeparatorChar());
 
-		StorageFile f = fr.getAsFile(externalName, generationId);
-		if (f instanceof java.io.File)
-			return f;
-
-		try {
-			return f.getInputStream();
-		} catch (java.io.IOException ioe) {
-            throw StandardException.newException(SQLState.LANG_FILE_ERROR, ioe, ioe.toString());    
-		}
+		return fr.getAsFile(externalName, generationId);
 	}
 
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
index ee03e79b..7c7f6b36 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.InputStream;
 import java.io.IOException;
 
@@ -43,6 +44,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.reference.MessageId;
 import org.apache.derby.iapi.services.i18n.MessageService;
+import org.apache.derby.io.StorageFile;
 
 
 class JarLoader extends ClassLoader {
@@ -52,6 +54,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private final String[] name;
     
+    /**
+     * Handle to the installed jar file.
+     */
+    private StorageFile installedJar;
+    
     /**
      * When the jar file can be manipulated as a java.util.JarFile
      * this holds the reference to the open jar. When the jar can
@@ -77,44 +84,52 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		this.vs = vs;
 	}
 
-	// Initialize the class loader so it knows if it
-	// is loading from a ZipFile or an InputStream
+	/**
+	 *  Initialize the class loader so it knows if it
+	 *  is loading from a ZipFile or an InputStream
+	 */
 	void initialize() {
 
-		Object zipData = load();
+		String schemaName = name[IdUtil.DBCP_SCHEMA_NAME];
+		String sqlName = name[IdUtil.DBCP_SQL_JAR_NAME];
 
+		Exception e;
 		try {
+			installedJar =
+				updateLoader.getJarReader().getJarFile(
+					schemaName, sqlName);
 
-			if (zipData instanceof File) {
-                jar = new JarFile((File) zipData);
+			if (installedJar instanceof File) {
+				jar = new JarFile((File) installedJar);
 				return;
 			}
 
-            // Jar is only accessible as an INputStream,
+			// Jar is only accessible as an InputStream,
             // which means we need to re-open the stream for
-            // each access. Thus we close the stream now as we have
-            // no further use for it.
-			if (zipData instanceof InputStream) {
+			// each access.
+
 				isStream = true;
-				try {
-					((InputStream) zipData).close();
-				} catch (IOException ioe) {
-				}
 				return;
-			}
+
 		} catch (IOException ioe) {
-			if (vs != null)
-				vs.println(MessageService.getTextMessage(MessageId.CM_LOAD_JAR_EXCEPTION, getJarName(), ioe));
+			e = ioe;
+		} catch (StandardException se) {
+			e = se;
 		}
 
+		if (vs != null)
+			vs.println(MessageService.getTextMessage(
+					MessageId.CM_LOAD_JAR_EXCEPTION, getJarName(), e));
+
 		// No such zip.
 		setInvalid();	
 	}
 
 	/**
-		Handle all requests to the top-level loader.
-
-		@exception ClassNotFoundException Class can not be found
+	 * Handle all requests to the top-level loader.
+	 * 
+	 * @exception ClassNotFoundException
+	 *                Class can not be found
 	*/
 	public Class loadClass(String className, boolean resolve) 
 		throws ClassNotFoundException {
@@ -164,10 +179,13 @@ Class loadClassData(String className, String jvmClassName, boolean resolve) {
 
 			if (isStream) {
 				// have to use a new stream each time
-				return loadClassData((InputStream) load(),
+				return loadClassData(installedJar.getInputStream(),
 						className, jvmClassName, resolve);
 			}
 
+			return null;
+		} catch (FileNotFoundException fnfe) {
+			// No such entry.
 			return null;
 		} catch (IOException ioe) {
 			if (vs != null)
@@ -188,7 +206,11 @@ InputStream getStream(String name) {
 			return getRawStream(name);
 
 		if (isStream) {
-			return getRawStream((InputStream) load(), name);
+			try {
+				return getRawStream(installedJar.getInputStream(), name);
+			} catch (FileNotFoundException e) {
+				// no such entry
+			}
 		}
 		return null;
 	}
@@ -287,24 +309,6 @@ Class checkLoaded(String className, boolean resolve) {
 		return c;
 	}
 
-	private Object load() {
-
-		String[] dbJarName = name;
-
-		String schemaName = dbJarName[IdUtil.DBCP_SCHEMA_NAME];
-		String sqlName = dbJarName[IdUtil.DBCP_SQL_JAR_NAME];
-
-		// don't need a connection, just call the code directly
-		try {
-			return updateLoader.getJarReader().readJarFile(schemaName, sqlName);
-		} catch (StandardException se) {
-			if (vs != null)
-				vs.println(MessageService.getTextMessage(MessageId.CM_LOAD_JAR_EXCEPTION, getJarName(), se));
-			return null;
-		}
-
-	}
-
     /**
      * Set this loader to be invaid so that it will not
      * resolve any classes or resources.
