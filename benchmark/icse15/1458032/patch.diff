diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
index 82110530..d427a619 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
@@ -204,7 +204,7 @@ private void closeDirectory(CacheValue cacheValue) {
   protected abstract Directory create(String path, DirContext dirContext) throws IOException;
   
   @Override
-  public boolean exists(String path) {
+  public boolean exists(String path) throws IOException {
     // back compat behavior
     File dirFile = new File(path);
     return dirFile.canRead() && dirFile.list().length > 0;
@@ -231,7 +231,7 @@ public final Directory get(String path,  DirContext dirContext, String rawLockTy
   @Override
   public final Directory get(String path,  DirContext dirContext, String rawLockType, boolean forceNew)
       throws IOException {
-    String fullPath = new File(path).getAbsolutePath();
+    String fullPath = normalize(path);
     synchronized (this) {
       if (closed) {
         throw new RuntimeException("Already closed");
@@ -271,7 +271,7 @@ public final Directory get(String path,  DirContext dirContext, String rawLockTy
         newCacheValue.directory = directory;
         newCacheValue.path = fullPath;
         
-        injectLockFactory(directory, path, rawLockType);
+        injectLockFactory(directory, fullPath, rawLockType);
         
         byDirectoryCache.put(directory, newCacheValue);
         byPathCache.put(fullPath, newCacheValue);
@@ -372,4 +372,11 @@ private static Directory injectLockFactory(Directory dir, String lockPath,
     }
     return dir;
   }
+  
+  protected String stripTrailingSlash(String path) {
+    if (path.endsWith("/")) {
+      path = path.substring(0, path.length() - 1);
+    }
+    return path;
+  }
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java
index b5b5a6a6..a72bda82 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java
@@ -111,16 +111,7 @@ public void setPropertiesName(String propertiesName) {
   public String getDataDir() {
     String dataDir = this.dataDir;
     if (dataDir == null) dataDir = getDefaultDataDir();
-    if (new File(dataDir).isAbsolute()) {
       return dataDir;
-    } else {
-      if (new File(instanceDir).isAbsolute()) {
-        return SolrResourceLoader.normalizeDir(SolrResourceLoader.normalizeDir(instanceDir) + dataDir);
-      } else  {
-        return SolrResourceLoader.normalizeDir(coreContainer.getSolrHome() +
-                SolrResourceLoader.normalizeDir(instanceDir) + dataDir);
-      }
-    }
   }
 
   public void setDataDir(String s) {
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
index 3180ed22..dd899e42 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
@@ -18,6 +18,7 @@
  */
 
 import java.io.Closeable;
+import java.io.File;
 import java.io.IOException;
 
 import org.apache.lucene.store.Directory;
@@ -77,9 +78,10 @@
   
   /**
    * Returns true if a Directory exists for a given path.
+   * @throws IOException If there is a low-level I/O error.
    * 
    */
-  public abstract boolean exists(String path);
+  public abstract boolean exists(String path) throws IOException;
   
   /**
    * Removes the Directory's persistent storage.
@@ -172,6 +174,15 @@ public String normalize(String path) throws IOException {
     return path;
   }
   
+  /**
+   * @param path the path to check
+   * @return true if absolute, as in not relative
+   */
+  public boolean isAbsolute(String path) {
+    // back compat
+    return new File(path).isAbsolute();
+  }
+  
   public static long sizeOfDirectory(Directory directory) throws IOException {
     final String[] files = directory.listAll();
     long size = 0;
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
index eb8610e7..1f317260 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
@@ -16,7 +16,6 @@
  * limitations under the License.
  */
 
-import java.io.File;
 import java.io.IOException;
 
 import org.apache.lucene.store.Directory;
@@ -28,8 +27,8 @@
 public abstract class EphemeralDirectoryFactory extends CachingDirectoryFactory {
   
   @Override
-  public boolean exists(String path) {
-    String fullPath = new File(path).getAbsolutePath();
+  public boolean exists(String path) throws IOException {
+    String fullPath = normalize(path);
     synchronized (this) {
       CacheValue cacheValue = byPathCache.get(fullPath);
       Directory directory = null;
@@ -48,6 +47,12 @@ public boolean isPersistent() {
     return false;
   }
   
+  @Override
+  public boolean isAbsolute(String path) {
+    return true;
+  }
+  
+  
   @Override
   public void remove(Directory dir) throws IOException {
     // ram dir does not persist its dir anywhere
@@ -60,6 +65,7 @@ public void remove(String path) throws IOException {
   
   @Override
   public String normalize(String path) throws IOException {
+    path = stripTrailingSlash(path);
     return path;
   }
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java
index 1ddffe12..4bc5b599 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java
@@ -66,4 +66,9 @@ protected Directory create(String path, DirContext dirContext) throws IOExceptio
     }
     return mapDirectory;
   }
+  
+  @Override
+  public boolean isAbsolute(String path) {
+    return new File(path).isAbsolute();
+  }
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java
index 3a6534af..303f0015 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java
@@ -16,13 +16,12 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.NIOFSDirectory;
-import org.apache.solr.core.DirectoryFactory.DirContext;
-
 import java.io.File;
 import java.io.IOException;
 
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.NIOFSDirectory;
+
 
 /**
  * Factory to instantiate {@link org.apache.lucene.store.NIOFSDirectory}
@@ -35,4 +34,9 @@ protected Directory create(String path, DirContext dirContext) throws IOExceptio
     return new NIOFSDirectory(new File(path));
   }
   
+  @Override
+  public boolean isAbsolute(String path) {
+    return new File(path).isAbsolute();
+  }
+  
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java
index 578555c0..72a26ca4 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java
@@ -55,4 +55,9 @@ protected Directory create(String path, DirContext dirContext) throws IOExceptio
     return new NRTCachingDirectory(FSDirectory.open(new File(path)), maxMergeSizeMB, maxCachedMB);
   }
 
+  @Override
+  public boolean isAbsolute(String path) {
+    return new File(path).isAbsolute();
+  }
+
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SimpleFSDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SimpleFSDirectoryFactory.java
index a125d095..7489d751 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SimpleFSDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SimpleFSDirectoryFactory.java
@@ -16,13 +16,12 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.SimpleFSDirectory;
-import org.apache.solr.core.DirectoryFactory.DirContext;
-
 import java.io.File;
 import java.io.IOException;
 
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.SimpleFSDirectory;
+
 
 /**
  * Factory to instantiate {@link org.apache.lucene.store.SimpleFSDirectory}
@@ -35,4 +34,8 @@ protected Directory create(String path, DirContext dirContext) throws IOExceptio
     return new SimpleFSDirectory(new File(path));
   }
 
+  @Override
+  public boolean isAbsolute(String path) {
+    return new File(path).isAbsolute();
+  }
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SolrCore.java
index b1939c86..a7dbfba4 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -459,7 +459,7 @@ void initIndex(boolean reload) throws IOException {
       boolean indexExists = getDirectoryFactory().exists(indexDir);
       boolean firstTime;
       synchronized (SolrCore.class) {
-        firstTime = dirs.add(new File(indexDir).getCanonicalPath());
+        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));
       }
       boolean removeLocks = solrConfig.unlockOnStartup;
 
@@ -656,11 +656,27 @@ public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema sche
     coreDescriptor = cd;
     this.setName( name );
     resourceLoader = config.getResourceLoader();
-    if (dataDir == null){
-      if(cd.usingDefaultDataDir()) dataDir = config.getDataDir();
-      if(dataDir == null) dataDir = cd.getDataDir();
+
+    this.solrConfig = config;
+    
+    if (updateHandler == null) {
+      initDirectoryFactory();
     }
 
+    if (dataDir == null) {
+      if (cd.usingDefaultDataDir()) dataDir = config.getDataDir();
+      if (dataDir == null) {
+        dataDir = cd.getDataDir();
+        try {
+          if (!directoryFactory.isAbsolute(dataDir)) {
+            dataDir = directoryFactory.normalize(SolrResourceLoader
+                .normalizeDir(cd.getInstanceDir()) + dataDir);
+          }
+        } catch (IOException e) {
+          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);
+        }
+      }
+    }
     dataDir = SolrResourceLoader.normalizeDir(dataDir);
 
     log.info(logid+"Opening new SolrCore at " + resourceLoader.getInstanceDir() + ", dataDir="+dataDir);
@@ -700,7 +716,6 @@ public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema sche
 
     this.schema = schema;
     this.dataDir = dataDir;
-    this.solrConfig = config;
     this.startTime = System.currentTimeMillis();
     this.maxWarmingSearchers = config.maxWarmingSearchers;
 
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
index b92f539b..ef54aec0 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
@@ -43,13 +43,21 @@ protected Directory create(String path, DirContext dirContext) throws IOExceptio
   
   @Override
   public String normalize(String path) throws IOException {
-    return new File(path).getCanonicalPath();
+    String cpath = new File(path).getCanonicalPath();
+    
+    return stripTrailingSlash(cpath);
   }
   
   public boolean isPersistent() {
     return true;
   }
   
+  @Override
+  public boolean isAbsolute(String path) {
+    // back compat
+    return new File(path).isAbsolute();
+  }
+  
   @Override
   public void remove(Directory dir) throws IOException {
     CacheValue val = byDirectoryCache.get(dir);
@@ -60,10 +68,9 @@ public void remove(Directory dir) throws IOException {
     FileUtils.deleteDirectory(dirFile);
   }
   
-
   @Override
   public void remove(String path) throws IOException {
-    String fullPath = new File(path).getAbsolutePath();
+    String fullPath = normalize(path);
     File dirFile = new File(fullPath);
     FileUtils.deleteDirectory(dirFile);
   }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index edbef176..d312e7c9 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -439,9 +439,13 @@ boolean fetchLatestIndex(final SolrCore core, boolean forceReplication) throws I
             @Override
             public void preClose() {
               LOG.info("removing old index files " + freezeIndexDir);
+              try {
               if (core.getDirectoryFactory().exists(freezeIndexDirPath)) {
                 DirectoryFactory.empty(freezeIndexDir);
               }
+              } catch (IOException e) {
+                SolrException.log(LOG, null, e);
+              }
             }
             
             @Override
@@ -674,13 +678,14 @@ private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOExcepti
     
   }
 
-
   /**
    * All the files are copied to a temp dir first
    */
   private String createTempindexDir(SolrCore core, String tmpIdxDirName) {
-    File tmpIdxDir = new File(core.getDataDir(), tmpIdxDirName);
-    return tmpIdxDir.toString();
+    // TODO: there should probably be a DirectoryFactory#concatPath(parent, name)
+    // or something
+    String tmpIdxDir = core.getDataDir() + tmpIdxDirName;
+    return tmpIdxDir;
   }
 
   private void reloadCore() {
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
index 4ec7df04..fec51e25 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
@@ -22,7 +22,6 @@
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.store.Directory;
 import org.apache.solr.SolrTestCaseJ4;
-import org.apache.solr.core.DirectoryFactory.DirContext;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index 070955b6..3222ea74 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -71,7 +71,7 @@
 public class TestReplicationHandler extends SolrTestCaseJ4 {
 
 
-  private static final String CONF_DIR = "." + File.separator + "solr"
+  private static final String CONF_DIR = "solr"
       + File.separator + "collection1" + File.separator + "conf"
       + File.separator;
 
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory.java
index 6deaa61b..ab905a55 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.File;
 import java.io.IOException;
 
 import org.apache.lucene.store.Directory;
@@ -55,4 +56,11 @@ protected Directory create(String path, DirContext dirContext) throws IOExceptio
     return dir;
   }
 
+  @Override
+  public boolean isAbsolute(String path) {
+    // TODO: kind of a hack - we don't know what the delegate is, so
+    // we treat it as file based since this works on most ephem impls
+    return new File(path).isAbsolute();
+  }
+
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java
index a7aeb0f9..4a71cb21 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java
@@ -43,4 +43,11 @@ public Directory create(String path, DirContext dirContext) throws IOException {
     }
     return dir;
   }
+  
+  @Override
+  public boolean isAbsolute(String path) {
+    // TODO: kind of a hack - we don't know what the delegate is, so
+    // we treat it as file based since this works on most ephem impls
+    return new File(path).isAbsolute();
+  }
 }
