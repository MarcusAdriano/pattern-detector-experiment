diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index 755e5ec7..1d5d20ef 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -214,7 +214,8 @@ protected void tearDown() throws Exception
         String[]        startupProperties = getStartupProperties( authenticationRequired, useCustomDerbyProperties );
         String[]        startupArgs = getStartupArgs( unsecureSet );
 
-        TestSetup   testSetup = new NetworkServerTestSetup
+        Test  testSetup = SecurityManagerSetup.noSecurityManager(
+                new NetworkServerTestSetup
             (
              secureServerTest,
              startupProperties,
@@ -222,7 +223,7 @@ protected void tearDown() throws Exception
              true,
              secureServerTest._outcome.serverShouldComeUp(),
              secureServerTest._inputStreamHolder
-             );
+             ));
 
         // if using the custom derby.properties, copy the custom properties to a visible place
         if ( useCustomDerbyProperties )
@@ -239,8 +240,6 @@ protected void tearDown() throws Exception
 
         Test        test = TestConfiguration.defaultServerDecorator( testSetup );
 
-        test = SecurityManagerSetup.noSecurityManager( test );
-
         return test;
     }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
index ef06994d..de795469 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import junit.extensions.TestSetup;
 import junit.framework.Test;
 
+import org.apache.derbyTesting.junit.BaseTestSetup;
 import org.apache.derbyTesting.junit.JDBCDataSource;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
@@ -35,7 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * Decorator that sets the phase of the upgrade process
  * for a suite of upgrade tests.
  */
-final class PhaseChanger extends TestSetup {
+final class PhaseChanger extends BaseTestSetup {
 
     private final int phase;
     private final int[] version;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java
index 74d376d7..7a34ac1d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java
@@ -29,7 +29,7 @@
  * Base class for JDBC JUnit test decorators.
  */
 public abstract class BaseJDBCTestSetup
-    extends TestSetup {
+    extends BaseTestSetup {
 	
 	public BaseJDBCTestSetup(Test test) {
 		super(test);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestSetup.java
index e69de29b..f98df94b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestSetup.java
@@ -0,0 +1,61 @@
+/*
+ *
+ * Derby - Class BaseTestSetup
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, 
+ * software distributed under the License is distributed on an 
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific 
+ * language governing permissions and limitations under the License.
+ */
+package org.apache.derbyTesting.junit;
+
+import junit.extensions.TestSetup;
+import junit.framework.Test;
+import junit.framework.TestResult;
+
+/**
+ * TestSetup/Decorator base class for Derby's JUnit
+ * tests. Installs the security manager according
+ * to the configuration before executing any setup
+ * or tests. Matches the security manager setup
+ * provided by BaseTestCase.
+ *
+ */
+public abstract class BaseTestSetup extends TestSetup {
+    
+    protected BaseTestSetup(Test test) {
+        super(test);
+    }
+
+    /**
+     * Setup the security manager for this Derby decorator/TestSetup
+     * and then call the part's run method to run the decorator and
+     * the test it wraps.
+     */
+    public final void run(TestResult result)
+    {
+        // install a default security manager if one has not already been
+        // installed
+        if ( System.getSecurityManager() == null )
+        {
+            if (TestConfiguration.getCurrent().defaultSecurityManagerSetup())
+            {
+                BaseTestCase.assertSecurityManager();
+            }
+        }
+        
+        super.run(result);
+    }
+
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java
index 8aba8f8a..f12f1697 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java
@@ -61,7 +61,7 @@ private Decorator() {
      */
     public static Test encryptedDatabase(Test test)
     {
-        test = new TestSetup(test) {
+        test = new BaseTestSetup(test) {
             
             /**
              * Create an encrypted database using a
@@ -69,8 +69,6 @@ public static Test encryptedDatabase(Test test)
              */
             protected void setUp() throws SQLException
             {
-                String bootPhrase = getBootPhrase(16);
-
                 DataSource ds = JDBCDataSource.getDataSource();
                                
                 JDBCDataSource.setBeanProperty(ds,
@@ -108,7 +106,7 @@ protected void setUp() throws SQLException
      */
     public static Test encryptedDatabase(Test test, final String algorithm)
     {
-        test = new TestSetup(test) {
+        test = new BaseTestSetup(test) {
             
             /**
              * Create an encrypted database using a
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
index 905b0e26..905a42f2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
@@ -35,7 +35,7 @@
  * name passed in when creating this decorator.
  *
  */
-class DropDatabaseSetup extends TestSetup {
+class DropDatabaseSetup extends BaseTestSetup {
 
     final String logicalDBName;
     DropDatabaseSetup(Test test, String logicalDBName) {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
index c00763e4..8e0d6732 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
@@ -41,7 +41,7 @@
  * and it does not support starting it from a remote 
  * machine.
  */
-final public class NetworkServerTestSetup extends TestSetup {
+final public class NetworkServerTestSetup extends BaseTestSetup {
 
     /** Setting maximum wait time to 300 seconds.   For some systems it looks
      *  like restarting a server to listen on the same port is blocked waiting
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
index 28a69ab6..c8cba517 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.net.URL;
 import java.security.AccessController;
+import java.security.Policy;
 import java.security.PrivilegedActionException;
 import java.util.Enumeration;
 import java.util.Properties;
@@ -75,6 +76,10 @@ public SecurityManagerSetup(Test test, String policyResource)
 	 * mode of no security manager as it may not have enough information
 	 * to re-install the security manager. So the passed in test
 	 * will be skipped.
+     * 
+     * @param test Test to run without a security manager. Note that
+     * this must be an instance of BaseTestCase as this call depends
+     * on setup code in that class. Arbitrary Test instances cannot be passed in.
 	 */
 	public static Test noSecurityManager(Test test)
 	{
@@ -85,18 +90,6 @@ public static Test noSecurityManager(Test test)
 	}
 	
     /**
-     * Same as noSecurityManager() above but takes a TestSetup
-     * instead of a BaseTestCase.
-     */
-    public static Test noSecurityManager(TestSetup tSetup)
-    {
-		if (externalSecurityManagerInstalled)
-			return new TestSuite("skipped due to external security manager "
-                    + tSetup.toString());
-		return new SecurityManagerSetup(tSetup, "<NONE>");
-    }
-
-	/**
 	 * "Install" no security manager.
 	 * 
 	 */
@@ -183,7 +176,8 @@ private static void installSecurityManager(String policyFile)
 
 
                 public Object run() {
-				System.setSecurityManager(new SecurityManager());
+                    SecurityManager sm = new SecurityManager();
+				System.setSecurityManager(sm);
 				return null;
 			}
 		});
@@ -206,10 +200,11 @@ private static void setSecurityPolicy(Properties set,
 			catch (Exception e) { System.out.println( "Unreadable url: " + policyResource ); }
 		}
 
-		if (policyURL != null)
+		if (policyURL != null) {
 			set.setProperty("java.security.policy",
 					policyURL.toExternalForm());
 	}
+	}
 
 	
 	/**
