diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClosedObjectTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClosedObjectTest.java
index bc416515..2d132bc0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClosedObjectTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClosedObjectTest.java
@@ -41,6 +41,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
+import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
 
 /**
  * Test that all methods on <code>ResultSet</code>,
@@ -702,7 +703,7 @@ public final void tearDown() throws SQLException {
          * @exception SQLException if an error occurs
          */
         protected Connection newConnection_() throws SQLException {
-            DataSource ds = getDataSource();
+            DataSource ds = TestDataSourceFactory.getDataSource();
             return ds.getConnection(CONFIG.getUserName(),
                                     CONFIG.getUserPassword());
         }
@@ -730,7 +731,7 @@ public PoolDataSourceDecorator(Test test) {
          * @exception SQLException if an error occurs
          */
         protected Connection newConnection_() throws SQLException {
-            ConnectionPoolDataSource ds = getConnectionPoolDataSource();
+            ConnectionPoolDataSource ds = TestDataSourceFactory.getConnectionPoolDataSource();
             PooledConnection pc =
                 ds.getPooledConnection(CONFIG.getUserName(),
                                        CONFIG.getUserPassword());
@@ -759,7 +760,7 @@ public XADataSourceDecorator(Test test) {
          * @exception SQLException if an error occurs
          */
         protected Connection newConnection_() throws SQLException {
-            XADataSource ds = getXADataSource();
+            XADataSource ds = TestDataSourceFactory.getXADataSource();
             XAConnection xac = ds.getXAConnection(CONFIG.getUserName(),
                                                   CONFIG.getUserPassword());
             return xac.getConnection();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java
index 50f84994..87c3fec8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java
@@ -22,6 +22,7 @@
 import junit.framework.*;
 
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
+import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
 import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
 
 import java.io.FileInputStream;
@@ -420,7 +421,7 @@ public void setUp()
             throws SQLException {
             //The ConnectionPoolDataSource object
             //used to get a PooledConnection object
-            ConnectionPoolDataSource cpDataSource = getConnectionPoolDataSource();
+            ConnectionPoolDataSource cpDataSource = TestDataSourceFactory.getConnectionPoolDataSource();
             PooledConnection pConn = cpDataSource.getPooledConnection();
             //doing a getConnection() returns a Connection object
             //that internally contains a BrokeredConnection40 object
@@ -474,7 +475,7 @@ public void setUp()
             throws SQLException {
             // Use a XADataSource to obtain a XAConnection object, and
             // finally a "real" connection.
-            con = getXADataSource().getXAConnection().getConnection();
+            con = TestDataSourceFactory.getXADataSource().getXAConnection().getConnection();
         }
         
     } // End class XAConnectionTest
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java
index ef447d61..593e8b0a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java
@@ -23,6 +23,7 @@
 import junit.framework.*;
 
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
+import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
 import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
 
 import java.sql.*;
@@ -52,7 +53,7 @@ public DataSourceTest(String name) {
      * Create a default DataSource
      */
     public void setUp() {
-        ds = getDataSource();
+        ds = TestDataSourceFactory.getDataSource();
     }
     
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
index 9899a4fd..4bf43ee6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
@@ -25,6 +25,7 @@
 import junit.framework.*;
 
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
+import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
 
 /*
     This class is used to test the JDBC4 statement event 
@@ -68,8 +69,8 @@ public StatementEventsTest(String name) {
      *
      */
     public void setUp() throws SQLException {
-        XADataSource xadatasource = getXADataSource();
-        ConnectionPoolDataSource cpds = getConnectionPoolDataSource();
+        XADataSource xadatasource = TestDataSourceFactory.getXADataSource();
+        ConnectionPoolDataSource cpds = TestDataSourceFactory.getConnectionPoolDataSource();
         
         pooledConnection = cpds.getPooledConnection();
         xaconnection = xadatasource.getXAConnection();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java
index 7a0a7b28..98e5221f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java
@@ -32,6 +32,7 @@
 
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
+import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
 
 /**
  * JUnit test which checks that only expected methods throw SQLFeatureNotSupporteException.
@@ -326,7 +327,7 @@ public	void	testSupportedMethods()
 		( HashSet<String> unsupportedList, HashSet<String> notUnderstoodList )
 		throws Exception
 	{
-		DataSource			ds = getDataSource();
+		DataSource			ds = TestDataSourceFactory.getDataSource();
 		Connection			conn = ds.getConnection();
 
 		vetObject( ds, unsupportedList, notUnderstoodList );
@@ -341,7 +342,7 @@ public	void	testSupportedMethods()
 		( HashSet<String> unsupportedList, HashSet<String> notUnderstoodList )
 		throws Exception
 	{
-		ConnectionPoolDataSource	ds = getConnectionPoolDataSource();
+		ConnectionPoolDataSource	ds = TestDataSourceFactory.getConnectionPoolDataSource();
 		PooledConnection			pc = ds.getPooledConnection
 			(CONFIG.getUserName(), CONFIG.getUserPassword());
 		Connection					conn = pc.getConnection();
@@ -359,7 +360,7 @@ public	void	testSupportedMethods()
 		( HashSet<String> unsupportedList, HashSet<String> notUnderstoodList )
 		throws Exception
 	{
-		XADataSource				ds = getXADataSource();
+		XADataSource				ds = TestDataSourceFactory.getXADataSource();
 		XAConnection				xaconn = ds.getXAConnection
 			(CONFIG.getUserName(), CONFIG.getUserPassword());
 		Connection					conn = xaconn.getConnection();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java
index 1eb54243..f878f5d7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java
@@ -33,6 +33,7 @@
 import junit.framework.TestSuite;
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
+import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
 
 /**
  * JUnit test which checks that all methods specified by the
@@ -147,7 +148,7 @@ public static Test suite() throws SQLException {
     private static void collectClassesFromDataSource(Set<ClassInfo> classes)
         throws SQLException
     {
-        DataSource ds = getDataSource();
+        DataSource ds = TestDataSourceFactory.getDataSource();
         addClass(classes, ds.getClass(), javax.sql.DataSource.class);
         collectClassesFromConnection(ds.getConnection
                                      (CONFIG.getUserName(),
@@ -167,7 +168,7 @@ private static void collectClassesFromDataSource(Set<ClassInfo> classes)
         collectClassesFromConnectionPoolDataSource(Set<ClassInfo> classes)
         throws SQLException
     {
-        ConnectionPoolDataSource cpds = getConnectionPoolDataSource();
+        ConnectionPoolDataSource cpds = TestDataSourceFactory.getConnectionPoolDataSource();
         addClass(classes,
                  cpds.getClass(), javax.sql.ConnectionPoolDataSource.class);
 
@@ -192,7 +193,7 @@ private static void collectClassesFromDataSource(Set<ClassInfo> classes)
     private static void collectClassesFromXADataSource(Set<ClassInfo> classes)
         throws SQLException
     {
-        XADataSource xads = getXADataSource();
+        XADataSource xads = TestDataSourceFactory.getXADataSource();
         addClass(classes, xads.getClass(), javax.sql.XADataSource.class);
 
         XAConnection xaconn = xads.getXAConnection(CONFIG.getUserName(),
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/XA40Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/XA40Test.java
index 9dc39f5a..b67be044 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/XA40Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/XA40Test.java
@@ -21,6 +21,7 @@
 package org.apache.derbyTesting.functionTests.tests.jdbc4;
 
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
+import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
 
 import junit.framework.*;
 
@@ -69,7 +70,7 @@ public XA40Test(String name) {
      */
     public void setUp() 
         throws SQLException {
-        xads = getXADataSource();
+        xads = TestDataSourceFactory.getXADataSource();
         xac = xads.getXAConnection();
         xar = xac.getXAResource();
         con = xac.getConnection();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java
index 40e9ad17..b57070c9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java
@@ -21,10 +21,6 @@
 package org.apache.derbyTesting.functionTests.util;
 
 import java.sql.*;
-import java.util.Properties;
-import javax.sql.DataSource;
-import javax.sql.ConnectionPoolDataSource;
-import javax.sql.XADataSource;
 
 /**
  * Base class for JDBC JUnit tests.
@@ -80,104 +76,17 @@ public static Connection getConnection()
                         CONFIG.getUserPassword());
             }
             else {
-                con = getXADataSource().getXAConnection (CONFIG.getUserName(),
+                con = TestDataSourceFactory.getXADataSource().getXAConnection (CONFIG.getUserName(),
                             CONFIG.getUserPassword()).getConnection();                
             }
         } else {
             //Use DataSource for JSR169
-            con = getDataSource().getConnection();
+            con = TestDataSourceFactory.getDataSource().getConnection();
         }
         return con;
     }
 
     /**
-     * Generate properties which can be set on a
-     * <code>DataSource</code> in order to connect to the default
-     * database.
-     *
-     * @return a <code>Properties</code> object containing server
-     * name, port number, database name and other attributes needed to
-     * connect to the default database
-     */
-    private static Properties getDefaultDataSourceProperties() {
-        Properties attrs = new Properties();
-        if (!usingEmbedded()) {
-            attrs.setProperty("serverName", CONFIG.getHostName());
-            attrs.setProperty("portNumber", Integer.toString(CONFIG.getPort()));
-        }
-        attrs.setProperty("databaseName", CONFIG.getDatabaseName());
-        attrs.setProperty("connectionAttributes", "create=true");
-        return attrs;
-    }
-
-    /**
-     * Return a <code>DataSource</code> for the appropriate framework.
-     *
-     * @param attrs properties for the data source
-     * @return a <code>DataSource</code> object
-     * @see TestUtil#getDataSource(Properties)
-     */
-    public static DataSource getDataSource(Properties attrs) {
-        return TestUtil.getDataSource(attrs);
-    }
-
-    /**
-     * Return a <code>DataSource</code> which can establish a
-     * connection to the default database.
-     *
-     * @return a <code>DataSource</code> object
-     */
-    public static DataSource getDataSource() {
-        return getDataSource(getDefaultDataSourceProperties());
-    }
-
-    /**
-     * Return a <code>ConnectionPoolDataSource</code> for the
-     * appropriate framework.
-     *
-     * @param attrs properties for the data source
-     * @return a <code>ConnectionPoolDataSource</code> object
-     * @see TestUtil#getConnectionPoolDataSource(Properties)
-     */
-    public static ConnectionPoolDataSource
-        getConnectionPoolDataSource(Properties attrs)
-    {
-        return TestUtil.getConnectionPoolDataSource(attrs);
-    }
-
-    /**
-     * Return a <code>ConnectionPoolDataSource</code> which can
-     * establish a connection to the default database.
-     *
-     * @return a <code>ConnectionPoolDataSource</code> object
-     */
-    public static ConnectionPoolDataSource getConnectionPoolDataSource() {
-        return getConnectionPoolDataSource(getDefaultDataSourceProperties());
-    }
-
-    /**
-     * Return an <code>XADataSource</code> for the appropriate
-     * framework.
-     *
-     * @param attrs properties for the data source
-     * @return an <code>XADataSource</code> object
-     * @see TestUtil#getXADataSource(Properties)
-     */
-    public static XADataSource getXADataSource(Properties attrs) {
-        return TestUtil.getXADataSource(attrs);
-    }
-
-    /**
-     * Return an <code>XADataSource</code> which can establish a
-     * connection to the default database.
-     *
-     * @return an <code>XADataSource</code> object
-     */
-    public static XADataSource getXADataSource() {
-        return getXADataSource(getDefaultDataSourceProperties());
-    }
-
-   /**
     * Tell if the client is embedded.
     *
     * @return <code>true</code> if using the embedded client
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
index 4e25fa80..fb5632c5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
@@ -280,4 +280,24 @@ public boolean isSingleLegXA () {
      */
     private final static String UNUSED = "file://unused/";
 
+    /**
+     * Generate properties which can be set on a
+     * <code>DataSource</code> in order to connect to the default
+     * database.
+     *
+     * @return a <code>Properties</code> object containing server
+     * name, port number, database name and other attributes needed to
+     * connect to the default database
+     */
+    public static Properties getDefaultDataSourceProperties() {
+        Properties attrs = new Properties();
+        if (!(DERBY_TEST_CONFIG.getJDBCClient() == JDBCClient.EMBEDDED)) {
+            attrs.setProperty("serverName", DERBY_TEST_CONFIG.getHostName());
+            attrs.setProperty("portNumber", Integer.toString(DERBY_TEST_CONFIG.getPort()));
+        }
+        attrs.setProperty("databaseName", DERBY_TEST_CONFIG.getDatabaseName());
+        attrs.setProperty("connectionAttributes", "create=true");
+        return attrs;
+    }
+        
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java
index e69de29b..ab1a2e12 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java
@@ -0,0 +1,104 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.util.TestUtil
+
+   Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+
+package org.apache.derbyTesting.functionTests.util;
+
+import java.util.Properties;
+import javax.sql.DataSource;
+import javax.sql.ConnectionPoolDataSource;
+import javax.sql.XADataSource;
+
+/**
+ * Utility class for JDBC JUnit tests.
+ * Contains methods to obtain the various datasources.
+ */
+
+public class TestDataSourceFactory {
+
+    /**
+     * Return a <code>DataSource</code> for the appropriate framework.
+     *
+     * @param attrs properties for the data source
+     * @return a <code>DataSource</code> object
+     * @see TestUtil#getDataSource(Properties)
+     */
+    public static DataSource getDataSource(Properties attrs) {
+        return TestUtil.getDataSource(attrs);
+    }
+
+    /**
+     * Return a <code>DataSource</code> which can establish a
+     * connection to the default database.
+     *
+     * @return a <code>DataSource</code> object
+     */
+    public static DataSource getDataSource() {
+        return getDataSource(TestConfiguration.getDefaultDataSourceProperties());
+    }
+
+    /**
+     * Return a <code>ConnectionPoolDataSource</code> for the
+     * appropriate framework.
+     *
+     * @param attrs properties for the data source
+     * @return a <code>ConnectionPoolDataSource</code> object
+     * @see TestUtil#getConnectionPoolDataSource(Properties)
+     */
+    public static ConnectionPoolDataSource
+        getConnectionPoolDataSource(Properties attrs)
+    {
+        return TestUtil.getConnectionPoolDataSource(attrs);
+    }
+
+    /**
+     * Return a <code>ConnectionPoolDataSource</code> which can
+     * establish a connection to the default database.
+     *
+     * @return a <code>ConnectionPoolDataSource</code> object
+     */
+    public static ConnectionPoolDataSource getConnectionPoolDataSource() {
+        return getConnectionPoolDataSource(TestConfiguration.getDefaultDataSourceProperties());
+    }
+
+    /**
+     * Return an <code>XADataSource</code> for the appropriate
+     * framework.
+     *
+     * @param attrs properties for the data source
+     * @return an <code>XADataSource</code> object
+     * @see TestUtil#getXADataSource(Properties)
+     */
+    public static XADataSource getXADataSource(Properties attrs) {
+        return TestUtil.getXADataSource(attrs);
+    }
+
+    /**
+     * Return an <code>XADataSource</code> which can establish a
+     * connection to the default database.
+     *
+     * @return an <code>XADataSource</code> object
+     */
+    public static XADataSource getXADataSource() {
+        return getXADataSource(TestConfiguration.getDefaultDataSourceProperties());
+    }	
+
+}
+
