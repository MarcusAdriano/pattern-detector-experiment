diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
index 8182ab99..9168e8e2 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
@@ -60,7 +60,7 @@
 
   final int termsIndexDivisor;
   
-  private final SegmentReader owner;
+  private final Object ownerCoreCacheKey;
   
   final StoredFieldsReader fieldsReaderOrig;
   final TermVectorsReader termVectorsReaderOrig;
@@ -110,6 +110,11 @@ protected TermVectorsReader initialValue() {
   
   SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentInfoPerCommit si, IOContext context, int termsIndexDivisor) throws IOException {
     
+    // SegmentReader uses us as the coreCacheKey; we cannot
+    // call owner.getCoreCacheKey() because that will return
+    // null!:
+    this.ownerCoreCacheKey = this;
+
     if (termsIndexDivisor == 0) {
       throw new IllegalArgumentException("indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)");
     }
@@ -166,12 +171,6 @@ protected TermVectorsReader initialValue() {
         decRef();
       }
     }
-    
-    // Must assign this at the end -- if we hit an
-    // exception above core, we don't want to attempt to
-    // purge the FieldCache (will hit NPE because core is
-    // not assigned yet).
-    this.owner = owner;
   }
   
   void incRef() {
@@ -348,7 +347,7 @@ void decRef() throws IOException {
   private void notifyCoreClosedListeners() {
     synchronized(coreClosedListeners) {
       for (CoreClosedListener listener : coreClosedListeners) {
-        listener.onClose(owner);
+        listener.onClose(ownerCoreCacheKey);
       }
     }
   }
@@ -369,8 +368,4 @@ public long ramBytesUsed() {
         ((fieldsReaderOrig!=null)? fieldsReaderOrig.ramBytesUsed() : 0) + 
         ((termVectorsReaderOrig!=null) ? termVectorsReaderOrig.ramBytesUsed() : 0);
   }
-  @Override
-  public String toString() {
-    return "SegmentCoreReader(owner=" + owner + ")";
-  }
 }
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
index 763143f5..1ee9007f 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
@@ -209,6 +209,8 @@ public Directory directory() {
   // same entry in the FieldCache.  See LUCENE-1579.
   @Override
   public Object getCoreCacheKey() {
+    // NOTE: if this every changes, be sure to fix
+    // SegmentCoreReader's ownerCoreCacheKey to match!
     return core;
   }
 
@@ -273,9 +275,9 @@ public NumericDocValues getNormValues(String field) throws IOException {
    * @lucene.experimental
    */
   public static interface CoreClosedListener {
-    /** Invoked when the shared core of the provided {@link
+    /** Invoked when the shared core of the original {@code
      *  SegmentReader} has closed. */
-    public void onClose(SegmentReader owner);
+    public void onClose(Object ownerCoreCacheKey);
   }
   
   /** Expert: adds a CoreClosedListener to this reader's shared core */
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCache.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
index a26ace89..663a079a 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
@@ -29,6 +29,7 @@
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.BinaryDocValues;
 import org.apache.lucene.index.DocTermOrds;
+import org.apache.lucene.index.IndexReader; // javadocs
 import org.apache.lucene.index.SortedDocValues;
 import org.apache.lucene.index.SortedSetDocValues;
 import org.apache.lucene.index.Terms;
@@ -503,7 +504,7 @@ public TermsEnum termsEnum(Terms terms) throws IOException {
    *
    * @see #getInts(AtomicReader, String, IntParser, boolean)
    */
-  public Ints getInts (AtomicReader reader, String field, boolean setDocsWithField) throws IOException;
+  public Ints getInts(AtomicReader reader, String field, boolean setDocsWithField) throws IOException;
 
   /**
    * Returns an {@link Ints} over the values found in documents in the given
@@ -529,7 +530,7 @@ public TermsEnum termsEnum(Terms terms) throws IOException {
    * @throws IOException
    *           If any error occurs.
    */
-  public Ints getInts (AtomicReader reader, String field, IntParser parser, boolean setDocsWithField) throws IOException;
+  public Ints getInts(AtomicReader reader, String field, IntParser parser, boolean setDocsWithField) throws IOException;
 
   /**
    * Returns a {@link Floats} over the values found in documents in the given
@@ -537,7 +538,7 @@ public TermsEnum termsEnum(Terms terms) throws IOException {
    *
    * @see #getFloats(AtomicReader, String, FloatParser, boolean)
    */
-  public Floats getFloats (AtomicReader reader, String field, boolean setDocsWithField) throws IOException;
+  public Floats getFloats(AtomicReader reader, String field, boolean setDocsWithField) throws IOException;
 
   /**
    * Returns a {@link Floats} over the values found in documents in the given
@@ -563,7 +564,7 @@ public TermsEnum termsEnum(Terms terms) throws IOException {
    * @throws IOException
    *           If any error occurs.
    */
-  public Floats getFloats (AtomicReader reader, String field, FloatParser parser, boolean setDocsWithField) throws IOException;
+  public Floats getFloats(AtomicReader reader, String field, FloatParser parser, boolean setDocsWithField) throws IOException;
 
   /**
    * Returns a {@link Longs} over the values found in documents in the given
@@ -644,14 +645,14 @@ public TermsEnum termsEnum(Terms terms) throws IOException {
    * @return The values in the given field for each document.
    * @throws IOException  If any error occurs.
    */
-  public BinaryDocValues getTerms (AtomicReader reader, String field, boolean setDocsWithField) throws IOException;
+  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException;
 
   /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},
    *  but you can specify whether more RAM should be consumed in exchange for
    *  faster lookups (default is "true").  Note that the
    *  first call for a given reader and field "wins",
    *  subsequent calls will share the same cache entry. */
-  public BinaryDocValues getTerms (AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;
+  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;
 
   /** Checks the internal cache for an appropriate entry, and if none
    * is found, reads the term values in <code>field</code>
@@ -663,7 +664,7 @@ public TermsEnum termsEnum(Terms terms) throws IOException {
    * @return The values in the given field for each document.
    * @throws IOException  If any error occurs.
    */
-  public SortedDocValues getTermsIndex (AtomicReader reader, String field) throws IOException;
+  public SortedDocValues getTermsIndex(AtomicReader reader, String field) throws IOException;
 
   /** Expert: just like {@link
    *  #getTermsIndex(AtomicReader,String)}, but you can specify
@@ -671,7 +672,7 @@ public TermsEnum termsEnum(Terms terms) throws IOException {
    *  faster lookups (default is "true").  Note that the
    *  first call for a given reader and field "wins",
    *  subsequent calls will share the same cache entry. */
-  public SortedDocValues getTermsIndex (AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;
+  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;
 
   /**
    * Checks the internal cache for an appropriate entry, and if none is found, reads the term values
@@ -776,7 +777,7 @@ public String toString() {
    * </p>
    * @lucene.experimental
    */
-  public abstract CacheEntry[] getCacheEntries();
+  public CacheEntry[] getCacheEntries();
 
   /**
    * <p>
@@ -789,16 +790,17 @@ public String toString() {
    * </p>
    * @lucene.experimental
    */
-  public abstract void purgeAllCaches();
+  public void purgeAllCaches();
 
   /**
    * Expert: drops all cache entries associated with this
-   * reader.  NOTE: this reader must precisely match the
-   * reader that the cache entry is keyed on. If you pass a
-   * top-level reader, it usually will have no effect as
-   * Lucene now caches at the segment reader level.
+   * reader {@link IndexReader#getCoreCacheKey}.  NOTE: this cache key must
+   * precisely match the reader that the cache entry is
+   * keyed on. If you pass a top-level reader, it usually
+   * will have no effect as Lucene now caches at the segment
+   * reader level.
    */
-  public abstract void purge(AtomicReader r);
+  public void purgeByCacheKey(Object coreCacheKey);
 
   /**
    * If non-null, FieldCacheImpl will warn whenever
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 7e92aa54..c6cc79ee 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -80,9 +80,9 @@ public synchronized void purgeAllCaches() {
   }
 
   @Override
-  public synchronized void purge(AtomicReader r) {
+  public synchronized void purgeByCacheKey(Object coreCacheKey) {
     for(Cache c : caches.values()) {
-      c.purge(r);
+      c.purgeByCacheKey(coreCacheKey);
     }
   }
 
@@ -112,8 +112,8 @@ public synchronized void purge(AtomicReader r) {
   // per-segment fieldcaches don't purge until the shared core closes.
   final SegmentReader.CoreClosedListener purgeCore = new SegmentReader.CoreClosedListener() {
     @Override
-    public void onClose(SegmentReader owner) {
-      FieldCacheImpl.this.purge(owner);
+    public void onClose(Object ownerCoreCacheKey) {
+      FieldCacheImpl.this.purgeByCacheKey(ownerCoreCacheKey);
     }
   };
 
@@ -122,7 +122,7 @@ public void onClose(SegmentReader owner) {
     @Override
     public void onClose(IndexReader owner) {
       assert owner instanceof AtomicReader;
-      FieldCacheImpl.this.purge((AtomicReader) owner);
+      FieldCacheImpl.this.purgeByCacheKey(((AtomicReader) owner).getCoreCacheKey());
     }
   };
   
@@ -157,10 +157,9 @@ protected abstract Object createValue(AtomicReader reader, CacheKey key, boolean
         throws IOException;
 
     /** Remove this reader from the cache, if present. */
-    public void purge(AtomicReader r) {
-      Object readerKey = r.getCoreCacheKey();
+    public void purgeByCacheKey(Object coreCacheKey) {
       synchronized(readerCache) {
-        readerCache.remove(readerKey);
+        readerCache.remove(coreCacheKey);
       }
     }
 
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds.java b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds.java
index 524a2a01..c9daae68 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds.java
@@ -172,7 +172,7 @@ public void testRandom() throws Exception {
     AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);
     verify(slowR, idToOrds, termsArray, null);
 
-    FieldCache.DEFAULT.purge(slowR);
+    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());
 
     r.close();
     dir.close();
@@ -291,7 +291,7 @@ public void testRandomWithPrefix() throws Exception {
       verify(slowR, idToOrdsPrefix, termsArray, prefixRef);
     }
 
-    FieldCache.DEFAULT.purge(slowR);
+    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());
 
     r.close();
     dir.close();
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
index f2084ad4..32a28448 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
@@ -305,7 +305,7 @@ public void test() throws IOException {
     termOrds = cache.getDocTermOrds(reader, "bogusfield");
     assertTrue(termOrds.getValueCount() == 0);
 
-    FieldCache.DEFAULT.purge(reader);
+    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());
   }
 
   public void testEmptyIndex() throws Exception {
@@ -316,7 +316,7 @@ public void testEmptyIndex() throws Exception {
     AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);
     FieldCache.DEFAULT.getTerms(reader, "foobar", true);
     FieldCache.DEFAULT.getTermsIndex(reader, "foobar");
-    FieldCache.DEFAULT.purge(reader);
+    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());
     r.close();
     dir.close();
   }
diff --git a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
index 2ac8d621..621baca8 100644
--- a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
+++ b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
@@ -132,7 +132,7 @@ public static void check(Random random, Query q1, IndexSearcher s, boolean wrap)
   
   public static void purgeFieldCache(IndexReader r) throws IOException {
     // this is just a hack, to get an atomic reader that contains all subreaders for insanity checks
-    FieldCache.DEFAULT.purge(SlowCompositeReaderWrapper.wrap(r));
+    FieldCache.DEFAULT.purgeByCacheKey(SlowCompositeReaderWrapper.wrap(r).getCoreCacheKey());
   }
   
   /** This is a MultiReader that can be used for randomly wrapping other readers
