diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/CcsidManager.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/CcsidManager.java
index c519410f..397d71e2 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/CcsidManager.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/CcsidManager.java
@@ -37,6 +37,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // This was specifically added to help build the CRRTKNs.
     byte[] numToSnaRequiredCrrtknChar_;
 
+    /* DRDA CCSID levels for UTF8 and EBCDIC */
+    public static final int UTF8_CCSID = 1208;
+    
     CcsidManager(byte space,
                  byte dot,
                  byte[] numToCharRepresentation,
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java
index 0feba3bb..5c9dd6ea 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java
@@ -192,7 +192,7 @@ public NetAgent(NetConnection netConnection,
             statementReply_ = (StatementReply) resultSetReply_;
             packageReply_ = (ConnectionReply) statementReply_;
             connectionReply_ = (ConnectionReply) packageReply_;
-            NetXAConnectionRequest netXAConnectionRequest_ = new NetXAConnectionRequest(this, currentCcsidManager_, netConnection_.commBufferSize_);
+            NetXAConnectionRequest netXAConnectionRequest_ = new NetXAConnectionRequest(this, netConnection_.commBufferSize_);
             netResultSetRequest_ = (NetResultSetRequest) netXAConnectionRequest_;
             netStatementRequest_ = (NetStatementRequest) netResultSetRequest_;
             netPackageRequest_ = (NetPackageRequest) netStatementRequest_;
@@ -217,7 +217,7 @@ public NetAgent(NetConnection netConnection,
             statementReply_ = (StatementReply) resultSetReply_;
             packageReply_ = (ConnectionReply) statementReply_;
             connectionReply_ = (ConnectionReply) packageReply_;
-            netResultSetRequest_ = new NetResultSetRequest(this, currentCcsidManager_, netConnection_.commBufferSize_);
+            netResultSetRequest_ = new NetResultSetRequest(this, netConnection_.commBufferSize_);
             netStatementRequest_ = (NetStatementRequest) netResultSetRequest_;
             netPackageRequest_ = (NetPackageRequest) netStatementRequest_;
             netConnectionRequest_ = (NetConnectionRequest) netPackageRequest_;
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java
index bc32a396..dc3d0fc9 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionRequest.java
@@ -29,8 +29,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.shared.common.reference.SQLState;
 
 public class NetConnectionRequest extends Request implements ConnectionRequestInterface {
-    NetConnectionRequest(NetAgent netAgent, CcsidManager ccsidManager, int bufferSize) {
-        super(netAgent, ccsidManager, bufferSize);
+    NetConnectionRequest(NetAgent netAgent, int bufferSize) {
+        super(netAgent, bufferSize);
     }
     //----------------------------- entry points ---------------------------------
 
@@ -485,7 +485,7 @@ private void buildRDBNAM(String rdbnam, boolean dontSendOnConversionError) throw
         // see if we can optimize
         if (dontSendOnConversionError) {
             try {
-                ccsidManager_.convertFromJavaString(rdbnam, netAgent_);
+                netAgent_.getCurrentCcsidManager().convertFromJavaString(rdbnam, netAgent_);
             } catch (SqlException se)  {
                 netAgent_.exceptionConvertingRdbnam = se;
                 return;
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetPackageRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetPackageRequest.java
index ca62ebbe..6d13286d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetPackageRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetPackageRequest.java
@@ -30,8 +30,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class NetPackageRequest extends NetConnectionRequest {
     static final String COLLECTIONNAME = "NULLID";
 
-    NetPackageRequest(NetAgent netAgent, CcsidManager ccsidManager, int bufferSize) {
-        super(netAgent, ccsidManager, bufferSize);
+    NetPackageRequest(NetAgent netAgent, int bufferSize) {
+        super(netAgent, bufferSize);
     }
 
     // RDB Package Name, Consistency Token
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetRequest.java
index ccb8ddab..47289a95 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetRequest.java
@@ -31,8 +31,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class NetResultSetRequest extends NetStatementRequest
         implements ResultSetRequestInterface {
-    public NetResultSetRequest(NetAgent netAgent, CcsidManager ccsidManager, int bufferSize) {
-        super(netAgent, ccsidManager, bufferSize);
+    public NetResultSetRequest(NetAgent netAgent, int bufferSize) {
+        super(netAgent, bufferSize);
     }
 
     //----------------------------- entry points ---------------------------------
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
index f0f54485..cbc23c8f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
@@ -52,8 +52,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // is still needed for non-promototed LOBs
     java.util.HashMap promototedParameters_ = new java.util.HashMap();
 
-    NetStatementRequest(NetAgent netAgent, CcsidManager ccsidManager, int bufferSize) {
-        super(netAgent, ccsidManager, bufferSize);
+    NetStatementRequest(NetAgent netAgent, int bufferSize) {
+        super(netAgent, bufferSize);
     }
 
     //----------------------------- entry points ---------------------------------
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnectionRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnectionRequest.java
index 4d79fd75..cd8929cf 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnectionRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnectionRequest.java
@@ -27,8 +27,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.client.am.SqlException;
 
 public class NetXAConnectionRequest extends NetResultSetRequest {
-    NetXAConnectionRequest(NetAgent netAgent, CcsidManager ccsidManager, int bufferSize) {
-        super(netAgent, ccsidManager, bufferSize);
+    NetXAConnectionRequest(NetAgent netAgent, int bufferSize) {
+        super(netAgent, bufferSize);
     }
 
     //----------------------------- entry points ---------------------------------
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Reply.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Reply.java
index 45606d4f..6f1e78a2 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Reply.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Reply.java
@@ -38,7 +38,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     protected org.apache.derby.client.am.Agent agent_;
     protected NetAgent netAgent_; //cheat-link to (NetAgent) agent_
 
-    private CcsidManager ccsidManager_;
     protected final static int DEFAULT_BUFFER_SIZE = 32767;
     protected byte[] buffer_;
     protected int pos_;
@@ -73,7 +72,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     Reply(NetAgent netAgent, int bufferSize) {
         buffer_ = new byte[bufferSize];
         agent_ = netAgent_ = netAgent;
-        ccsidManager_ = netAgent.getCurrentCcsidManager();
         ddmCollectionLenStack_ = new int[Reply.MAX_MARKS_NESTING];
         initialize();
     }
@@ -668,7 +666,8 @@ final String readString(int length) throws DisconnectException {
         ensureBLayerDataInBuffer(length);
         adjustLengths(length);
 
-        String result = ccsidManager_.convertToJavaString(buffer_, pos_, length);
+        String result = netAgent_.getCurrentCcsidManager()
+                            .convertToJavaString(buffer_, pos_, length);
         pos_ += length;
         return result;
     }
@@ -695,7 +694,8 @@ final String readString() throws DisconnectException {
         int len = ddmScalarLen_;
         ensureBLayerDataInBuffer(len);
         adjustLengths(len);
-        String result = ccsidManager_.convertToJavaString(buffer_, pos_, len);
+        String result = netAgent_.getCurrentCcsidManager()
+                            .convertToJavaString(buffer_, pos_, len);
         pos_ += len;
         return result;
     }
@@ -1253,7 +1253,8 @@ final int readFastInt() throws DisconnectException {
     }
 
     final String readFastString(int length) throws DisconnectException {
-        String result = ccsidManager_.convertToJavaString(buffer_, pos_, length);
+        String result = netAgent_.getCurrentCcsidManager()
+                            .convertToJavaString(buffer_, pos_, length);
         pos_ += length;
         return result;
     }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
index 190876b5..1bf4ba91 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
@@ -54,11 +54,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private int[] markStack_ = new int[MAX_MARKS_NESTING];
     private int top_ = 0;
 
-    // the ccsid manager for the connection is stored in this object.  it will
-    // be used when constructing character ddm data.  it will NOT be used for
-    // building any FDOCA data.
-    protected CcsidManager ccsidManager_;
-
     //  This Object tracks the location of the current
     //  Dss header length bytes.  This is done so
     //  the length bytes can be automatically
@@ -82,21 +77,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // construct a request object specifying the minimum buffer size
     // to be used to buffer up the built requests.  also specify the ccsid manager
     // instance to be used when building ddm character data.
-    Request(NetAgent netAgent, int minSize, CcsidManager ccsidManager) {
+    Request(NetAgent netAgent, int minSize) {
         netAgent_ = netAgent;
         bytes_ = new byte[minSize];
-        ccsidManager_ = ccsidManager;
         clearBuffer();
     }
 
-    // construct a request object specifying the ccsid manager instance
-    // to be used when building ddm character data.  This will also create
-    // a buffer using the default size (see final static DEFAULT_BUFFER_SIZE value).
-    Request(NetAgent netAgent, CcsidManager ccsidManager, int bufferSize) {
-        //this (netAgent, Request.DEFAULT_BUFFER_SIZE, ccsidManager);
-        this(netAgent, bufferSize, ccsidManager);
-    }
-
     protected final void clearBuffer() {
         offset_ = 0;
         top_ = 0;
@@ -115,13 +101,6 @@ final void initialize() {
         correlationID_ = 0;
     }
 
-    // set the ccsid manager value.  this method allows the ccsid manager to be
-    // changed so a request object can be reused by different connections with
-    // different ccsid managers.
-    final void setCcsidMgr(CcsidManager ccsidManager) {
-        ccsidManager_ = ccsidManager;
-    }
-
     // ensure length at the end of the buffer for a certain amount of data.
     // if the buffer does not contain sufficient room for the data, the buffer
     // will be expanded by the larger of (2 * current size) or (current size + length).
@@ -1162,7 +1141,12 @@ final void writeScalarString(int codePoint, String string) throws SqlException {
      */
     final void writeScalarString(int codePoint, String string, int byteMinLength,
             int byteLengthLimit, String sqlState) throws SqlException {        
-        int maxByteLength = ccsidManager_.maxBytesPerChar() * string.length();
+        
+        /* Grab the current CCSID MGR from the NetAgent */ 
+        CcsidManager currentCcsidMgr = netAgent_.getCurrentCcsidManager();
+        
+        int maxByteLength = currentCcsidMgr.getByteLength(string);
+
         ensureLength(offset_ + maxByteLength + 4);
         // Skip length for now until we know actual length
         int lengthOffset = offset_;
@@ -1171,7 +1155,7 @@ final void writeScalarString(int codePoint, String string, int byteMinLength,
         bytes_[offset_++] = (byte) ((codePoint >>> 8) & 0xff);
         bytes_[offset_++] = (byte) (codePoint & 0xff);
         
-        offset_ = ccsidManager_.convertFromJavaString(string, bytes_, offset_, netAgent_);
+        offset_ = currentCcsidMgr.convertFromJavaString(string, bytes_, offset_, netAgent_);
        
         int stringByteLength = offset_ - lengthOffset - 4;
         // reset the buffer and throw an SQLException if the length is too long
@@ -1183,7 +1167,7 @@ final void writeScalarString(int codePoint, String string, int byteMinLength,
         // pad if we don't reach the byteMinLength limit
         if (stringByteLength < byteMinLength) {
             for (int i = stringByteLength ; i < byteMinLength; i++) {
-                bytes_[offset_++] = ccsidManager_.space_;
+                bytes_[offset_++] = currentCcsidMgr.space_;
             }
             stringByteLength = byteMinLength;
         }
@@ -1207,11 +1191,16 @@ final void writeScalarString(int codePoint, String string, int byteMinLength,
     // character data. This method also assumes that the string.length() will
     // be the number of bytes following the conversion.
     final void writeScalarPaddedString(String string, int paddedLength) throws SqlException {
-        int stringLength = string.length();
         ensureLength(offset_ + paddedLength);
-        offset_ = ccsidManager_.convertFromJavaString(string, bytes_, offset_, netAgent_);
+        
+        /* Grab the current CCSID MGR from the NetAgent */ 
+        CcsidManager currentCcsidMgr = netAgent_.getCurrentCcsidManager();
+        
+        int stringLength = currentCcsidMgr.getByteLength(string);
+        
+        offset_ = currentCcsidMgr.convertFromJavaString(string, bytes_, offset_, netAgent_);
         for (int i = 0; i < paddedLength - stringLength; i++) {
-            bytes_[offset_++] = ccsidManager_.space_;
+            bytes_[offset_++] = currentCcsidMgr.space_;
         }
     }
 
@@ -1327,7 +1316,8 @@ final void maskOutPassword() {
                 mask.append(maskChar);
             }
             // try to write mask over password.
-            ccsidManager_.convertFromJavaString(mask.toString(), bytes_, passwordStart_, netAgent_);
+            netAgent_.getCurrentCcsidManager()
+                    .convertFromJavaString(mask.toString(), bytes_, passwordStart_, netAgent_);
         } catch (SqlException sqle) {
             // failed to convert mask,
             // them simply replace with 0xFF.
@@ -1564,8 +1554,11 @@ final void writeUDT( Object val ) throws SqlException
     // ccsid manager or typdef rules.  should this method write ddm character
     // data or fodca data right now it is coded for ddm char data only
     final void writeDDMString(String s) throws SqlException {
-        ensureLength(offset_ + s.length());
-        offset_ = ccsidManager_.convertFromJavaString(s, bytes_, offset_, netAgent_);
+        CcsidManager currentCcsidManager = netAgent_.getCurrentCcsidManager();
+        
+        ensureLength(offset_ + currentCcsidManager.getByteLength(s));
+        
+        offset_ = currentCcsidManager.convertFromJavaString(s, bytes_, offset_, netAgent_);
     }
 
     private void buildLengthAndCodePointForLob(int codePoint,
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index d2104332..dd350081 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -608,10 +608,10 @@ private void initialize()
 		
 		/* At this stage we can initialize the strings as we have
 		 * the CcsidManager for the DDMWriter. */
-		rdbnam = new DRDAString(writer.getCurrentCcsidManager());
-	    rdbcolid = new DRDAString(writer.getCurrentCcsidManager());
-	    pkgid = new DRDAString(writer.getCurrentCcsidManager());
-	    pkgcnstkn = new DRDAString(writer.getCurrentCcsidManager());
+		rdbnam = new DRDAString(writer);
+	    rdbcolid = new DRDAString(writer);
+	    pkgid = new DRDAString(writer);
+	    pkgcnstkn = new DRDAString(writer);
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAString.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAString.java
index df21fda2..b5d7bebb 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAString.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAString.java
@@ -31,8 +31,9 @@
 final class DRDAString {
     /** Buffer representing the string. */
     private byte[] buffer;
-    /** Object used to convert byte buffer to string. */
-    private final CcsidManager ccsidManager;
+    
+    /** Keep the DDMWriter as it contains the current CCSID manager being used */
+    private final DDMWriter writer;
 
     /** True if the contents were modified in the previous call to
      * <code>setBytes</code>. */
@@ -47,9 +48,9 @@
      * @param m a <code>CcsidManager</code> value specifying
      * which encoding is used
      */
-    DRDAString(CcsidManager m) {
+    DRDAString(DDMWriter w) {
         this.buffer = new byte[0];
-        this.ccsidManager = m;
+        this.writer = w;
         this.cachedString = null;
     }
 
@@ -112,7 +113,7 @@ public boolean wasModified() {
     public String toString() {
         if (cachedString == null) {
             cachedString =
-                ccsidManager.convertToJavaString(buffer);
+                writer.getCurrentCcsidManager().convertToJavaString(buffer);
         }
         return cachedString;
     }
