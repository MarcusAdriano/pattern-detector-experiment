diff --git a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java
index 141892c1..671ca64d 100644
--- a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java
+++ b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java
@@ -38,10 +38,10 @@
   public Statement apply(final Statement s, final Description d) {
     return new Statement() {
       public void evaluate() throws Throwable {
-        before();
-        
         final ArrayList<Throwable> errors = new ArrayList<Throwable>();
+
         try {
+          before();
           s.evaluate();
         } catch (Throwable t) {
           errors.add(t);
diff --git a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
index 88cb0cc4..d134044c 100644
--- a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
@@ -1106,11 +1106,4 @@ protected File getDataFile(String name) throws IOException {
       throw new IOException("Cannot find resource: " + name);
     }
   }
-
-  /**
-   * @see SuppressCodecs 
-   */
-  static boolean shouldAvoidCodec(String codec) {
-    return classEnvRule.shouldAvoidCodec(codec);
-  }
 }
diff --git a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
index 4450e88c..6b611bd8 100644
--- a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
+++ b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
@@ -38,6 +38,8 @@
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
+import org.junit.internal.AssumptionViolatedException;
+
 import com.carrotsearch.randomizedtesting.RandomizedContext;
 
 import static org.apache.lucene.util.LuceneTestCase.*;
@@ -80,6 +82,10 @@ protected void before() throws Exception {
       System.setProperty("solr.directoryFactory", "org.apache.solr.core.MockDirectoryFactory");
     }
     
+    // Restore more Solr properties. 
+    restoreProperties.put("solr.solr.home", System.getProperty("solr.solr.home"));
+    restoreProperties.put("solr.data.dir", System.getProperty("solr.data.dir"));
+
     // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:
     try {
       final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField("loader");
@@ -106,7 +112,7 @@ protected void before() throws Exception {
       throw new RuntimeException("Cannot access internals of Codec and NamedSPILoader classes", e);
     }
     
-    // if verbose: print some debugging stuff about which codecs are loaded
+    // if verbose: print some debugging stuff about which codecs are loaded.
     if (VERBOSE) {
       Set<String> codecs = Codec.availableCodecs();
       for (String codec : codecs) {
@@ -129,7 +135,7 @@ public void message(String component, String message) {
             final String name;
             if (Thread.currentThread().getName().startsWith("TEST-")) {
               // The name of the main thread is way too
-              // long when looking at IW verbose output...:
+              // long when looking at IW verbose output...
               name = "main";
             } else {
               name = Thread.currentThread().getName();
@@ -146,8 +152,6 @@ public void message(String component, String message) {
     if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {
       SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);
       avoidCodecs.addAll(Arrays.asList(a.value()));
-      System.err.println("NOTE: Suppressing codecs " + Arrays.toString(a.value()) 
-          + " for " + targetClass.getSimpleName() + ".");
     }
     
     PREFLEX_IMPERSONATION_IS_ACTIVE = false;
@@ -205,6 +209,39 @@ public String toString() {
     timeZone = testTimeZone.equals("random") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);
     TimeZone.setDefault(timeZone);
     similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    
+
+    // Check codec restrictions once at class level.
+    try {
+      checkCodecRestrictions(codec);
+    } catch (AssumptionViolatedException e) {
+      System.err.println("NOTE: " + e.getMessage() + " Suppressed codecs: " + 
+          Arrays.toString(avoidCodecs.toArray()));
+      throw e;
+    }
+  }
+
+  /**
+   * Check codec restrictions.
+   * 
+   * @throws AssumptionViolatedException if the class does not work with a given codec.
+   */
+  private void checkCodecRestrictions(Codec codec) {
+    assumeFalse("Class not allowed to use codec: " + codec.getName() + ".",
+        shouldAvoidCodec(codec.getName()));
+
+    if (codec instanceof RandomCodec && !avoidCodecs.isEmpty()) {
+      for (String name : ((RandomCodec)codec).formatNames) {
+        assumeFalse("Class not allowed to use postings format: " + name + ".",
+            shouldAvoidCodec(name));
+      }
+    }
+
+    PostingsFormat pf = codec.postingsFormat();
+    assumeFalse("Class not allowed to use postings format: " + pf.getName() + ".",
+        shouldAvoidCodec(pf.getName()));
+
+    assumeFalse("Class not allowed to use postings format: " + LuceneTestCase.TEST_POSTINGSFORMAT + ".", 
+        shouldAvoidCodec(LuceneTestCase.TEST_POSTINGSFORMAT));
   }
 
   /**
@@ -223,17 +260,14 @@ protected void after() throws Exception {
 
     Codec.setDefault(savedCodec);
     InfoStream.setDefault(savedInfoStream);
-    Locale.setDefault(savedLocale);
-    TimeZone.setDefault(savedTimeZone);
-
-    System.clearProperty("solr.solr.home");
-    System.clearProperty("solr.data.dir");
+    if (savedLocale != null) Locale.setDefault(savedLocale);
+    if (savedTimeZone != null) TimeZone.setDefault(savedTimeZone);
   }
 
   /**
    * Should a given codec be avoided for the currently executing suite?
    */
-  public boolean shouldAvoidCodec(String codec) {
+  private boolean shouldAvoidCodec(String codec) {
     return !avoidCodecs.isEmpty() && avoidCodecs.contains(codec);
   }
 }
diff --git a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java
index d6a0a90a..1b37bd49 100644
--- a/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java
+++ b/lucene/dev/branches/branch_4x/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java
@@ -1,10 +1,6 @@
 package org.apache.lucene.util;
 
-import org.apache.lucene.codecs.Codec;
-import org.apache.lucene.codecs.PostingsFormat;
-import org.apache.lucene.index.RandomCodec;
 import org.apache.lucene.search.BooleanQuery;
-import org.junit.internal.AssumptionViolatedException;
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -32,27 +28,6 @@
 
   protected void before() {
     savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();
-
-    Codec codec = Codec.getDefault();
-    if (LuceneTestCase.shouldAvoidCodec(codec.getName())) {
-      throw new AssumptionViolatedException(
-          "Method not allowed to use codec: " + codec.getName() + ".");
-    }
-    // TODO: make this more efficient
-    if (codec instanceof RandomCodec) {
-      for (String name : ((RandomCodec)codec).formatNames) {
-        if (LuceneTestCase.shouldAvoidCodec(name)) {
-          throw new AssumptionViolatedException(
-              "Method not allowed to use postings format: " + name + ".");
-        }
-      }
-    }
-    PostingsFormat pf = codec.postingsFormat();
-    if (LuceneTestCase.shouldAvoidCodec(pf.getName())) {
-      throw new AssumptionViolatedException(
-          "Method not allowed to use postings format: " + pf.getName() + ".");
-    }
-    
   }
 
   protected void after() {
