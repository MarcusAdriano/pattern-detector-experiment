diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 845446ee..4c952a80 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -877,6 +877,7 @@ public boolean isKeyInRemainingSSTables(DecoratedKey key, Set<SSTable> sstablesT
      */
     public void addSSTable(SSTableReader sstable)
     {
+        assert sstable.getColumnFamilyName().equals(columnFamily);
         ssTables.add(Arrays.asList(sstable));
         CompactionManager.instance.submitMinorIfNeeded(this);
     }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/StreamInSession.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/StreamInSession.java
index 49d59205..43ee05ba 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/StreamInSession.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/StreamInSession.java
@@ -48,7 +48,6 @@
     private final Runnable callback;
     private String table;
     private final List<Future<SSTableReader>> buildFutures = new ArrayList<Future<SSTableReader>>();
-    private ColumnFamilyStore cfs;
     private PendingFile current;
 
     private StreamInSession(Pair<InetAddress, Long> context, Runnable callback)
@@ -92,13 +91,11 @@ public void setTable(String table)
 
     public void addFiles(Collection<PendingFile> files)
     {
-        for(PendingFile file : files)
+        for (PendingFile file : files)
         {
             if(logger.isDebugEnabled())
                 logger.debug("Adding file {} to Stream Request queue", file.getFilename());
             this.files.add(file);
-            if (cfs == null)
-                cfs = Table.open(file.desc.ksname).getColumnFamilyStore(file.desc.cfname);
         }
     }
 
@@ -130,16 +127,20 @@ public void closeIfFinished() throws IOException
         if (files.isEmpty())
         {
             // wait for bloom filters and row indexes to finish building
-            List<SSTableReader> sstables = new ArrayList<SSTableReader>(buildFutures.size());
+            HashMap <ColumnFamilyStore, List<SSTableReader>> cfstores = new HashMap<ColumnFamilyStore, List<SSTableReader>>();
             for (Future<SSTableReader> future : buildFutures)
             {
                 try
                 {
                     SSTableReader sstable = future.get();
+                    assert sstable.getTableName().equals(table);
                     if (sstable == null)
                         continue;
+                    ColumnFamilyStore cfs = Table.open(sstable.getTableName()).getColumnFamilyStore(sstable.getColumnFamilyName());
                     cfs.addSSTable(sstable);
-                    sstables.add(sstable);
+                    if (!cfstores.containsKey(cfs))
+                        cfstores.put(cfs, new ArrayList<SSTableReader>());
+                    cfstores.get(cfs).add(sstable);
                 }
                 catch (InterruptedException e)
                 {
@@ -152,8 +153,11 @@ public void closeIfFinished() throws IOException
             }
 
             // build secondary indexes
-            if (cfs != null && !cfs.getIndexedColumns().isEmpty())
-                cfs.buildSecondaryIndexes(sstables, cfs.getIndexedColumns());
+            for (Map.Entry<ColumnFamilyStore, List<SSTableReader>> entry : cfstores.entrySet())
+            {
+                if (entry.getKey() != null && !entry.getKey().getIndexedColumns().isEmpty())
+                    entry.getKey().buildSecondaryIndexes(entry.getValue(), entry.getKey().getIndexedColumns());
+            }
 
             // send reply to source that we're done
             StreamReply reply = new StreamReply("", getSessionId(), StreamReply.Status.SESSION_FINISHED);
