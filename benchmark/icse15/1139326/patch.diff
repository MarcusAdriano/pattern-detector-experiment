diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/db/Table.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/db/Table.java
index 80c9f364..685d1ce3 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/db/Table.java
@@ -253,7 +253,7 @@ public void clearSnapshot(String tag) throws IOException
     }
     
     /**
-     * @return A list of open SSTableReaders
+     * @return A list of open SSTableReaders (TODO: ensure that the caller doesn't modify these).
      */
     public List<SSTableReader> getAllSSTables()
     {
diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/net/MessagingService.java
index 8d7acac2..1eab78e9 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/net/MessagingService.java
@@ -58,9 +58,7 @@
 public final class MessagingService implements MessagingServiceMBean
 {
     public static final int VERSION_07 = 1;
-    public static final int VERSION_080 = 2;
-    public static final int version_ = 81;
-
+    public static final int version_ = 2;
     //TODO: make this parameter dynamic somehow.  Not sure if config is appropriate.
     private SerializerType serializerType_ = SerializerType.BINARY;
 
diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/AntiEntropyService.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 798d27cd..9c211217 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -494,7 +494,7 @@ void performStreamingRepair() throws IOException
                 StreamOutSession outsession = StreamOutSession.create(request.cf.left, request.endpoint, callback);
                 StreamOut.transferSSTables(outsession, sstables, differences, OperationType.AES);
                 // request ranges from the remote node
-                StreamIn.requestRanges(request.endpoint, request.cf.left, Collections.singletonList(cfstore), differences, callback, OperationType.AES);
+                StreamIn.requestRanges(request.endpoint, request.cf.left, differences, callback, OperationType.AES);
             }
             catch(Exception e)
             {
diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/StorageService.java
index 77f3dc0f..0d65e756 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/service/StorageService.java
@@ -2326,7 +2326,7 @@ public void run()
                     public void run()
                     {
                         // TODO each call to transferRanges re-flushes, this is potentially a lot of waste
-                        StreamOut.transferRanges(newEndpoint, Table.open(table), Arrays.asList(range), callback, OperationType.UNBOOTSTRAP);
+                        StreamOut.transferRanges(newEndpoint, table, Arrays.asList(range), callback, OperationType.UNBOOTSTRAP);
                     }
                 });
             }
diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamIn.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamIn.java
index afa07930..b044328c 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamIn.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamIn.java
@@ -24,11 +24,7 @@
 import java.io.IOException;
 import java.net.InetAddress;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.ArrayList;
-import java.util.List;
 
-import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.gms.Gossiper;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
@@ -51,29 +47,22 @@
 {
     private static Logger logger = LoggerFactory.getLogger(StreamIn.class);
 
-    /** Request ranges for all column families in the given keyspace. */
-    public static void requestRanges(InetAddress source, String tableName, Collection<Range> ranges, Runnable callback, OperationType type)
-    {
-        requestRanges(source, tableName, Table.open(tableName).getColumnFamilyStores(), ranges, callback, type);
-    }
-
     /**
-     * Request ranges to be transferred from specific CFs
+     * Request ranges to be transferred from source to local node
      */
-    public static void requestRanges(InetAddress source, String tableName, Collection<ColumnFamilyStore> columnFamilies, Collection<Range> ranges, Runnable callback, OperationType type)
+    public static void requestRanges(InetAddress source, String tableName, Collection<Range> ranges, Runnable callback, OperationType type)
     {
         assert ranges.size() > 0;
 
         if (logger.isDebugEnabled())
             logger.debug("Requesting from {} ranges {}", source, StringUtils.join(ranges, ", "));
         StreamInSession session = StreamInSession.create(source, callback);
-        StreamRequestMessage srm = new StreamRequestMessage(FBUtilities.getLocalAddress(),
+        Message message = new StreamRequestMessage(FBUtilities.getLocalAddress(), 
                                                             ranges,
                                                             tableName,
-                                                            columnFamilies,
                                                             session.getSessionId(),
-                                                            type);
-        Message message = srm.getMessage(Gossiper.instance.getVersion(source));
+                                                   type)
+                .getMessage(Gossiper.instance.getVersion(source));
         MessagingService.instance().sendOneWay(message, source);
     }
 
diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamOut.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamOut.java
index c9ac6718..48d40a3e 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamOut.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamOut.java
@@ -22,21 +22,21 @@
 import java.io.IOError;
 import java.io.IOException;
 import java.net.InetAddress;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
-import com.google.common.collect.Iterables;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.dht.Range;
 import org.apache.cassandra.io.sstable.Descriptor;
 import org.apache.cassandra.io.sstable.SSTable;
 import org.apache.cassandra.io.sstable.SSTableReader;
-import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.Pair;
 
 /**
@@ -65,48 +65,74 @@
     private static Logger logger = LoggerFactory.getLogger(StreamOut.class);
 
     /**
-     * Stream the given ranges to the target endpoint from each CF in the given keyspace.
+     * Split out files for all tables on disk locally for each range and then stream them to the target endpoint.
     */
-    public static void transferRanges(InetAddress target, Table table, Collection<Range> ranges, Runnable callback, OperationType type)
+    public static void transferRanges(InetAddress target, String tableName, Collection<Range> ranges, Runnable callback, OperationType type)
     {
-        StreamOutSession session = StreamOutSession.create(table.name, target, callback);
-        transferRanges(session, table.getColumnFamilyStores(), ranges, type);
+        assert ranges.size() > 0;
+        
+        // this is so that this target shows up as a destination while anticompaction is happening.
+        StreamOutSession session = StreamOutSession.create(tableName, target, callback);
+
+        logger.info("Beginning transfer to {}", target);
+        logger.debug("Ranges are {}", StringUtils.join(ranges, ","));
+
+        try
+        {
+            Table table = flushSSTable(tableName);
+            // send the matching portion of every sstable in the keyspace
+            transferSSTables(session, table.getAllSSTables(), ranges, type);
+        }
+        catch (IOException e)
+        {
+            throw new IOError(e);
+        }
     }
 
     /**
-     * Flushes matching column families from the given keyspace, or all columnFamilies
-     * if the cf list is empty.
+     * (1) dump all the memtables to disk.
+     * (2) determine the minimal file sections we need to send for the given ranges
+     * (3) transfer the data.
      */
-    private static void flushSSTables(Iterable<ColumnFamilyStore> stores) throws IOException
+    private static Table flushSSTable(String tableName) throws IOException
     {
-        logger.info("Flushing memtables for {}...", stores);
-        List<Future<?>> flushes;
-        flushes = new ArrayList<Future<?>>();
-        for (ColumnFamilyStore cfstore : stores)
+        Table table = Table.open(tableName);
+        logger.info("Flushing memtables for {}...", tableName);
+        for (Future<?> f : table.flush())
         {
-            Future<?> flush = cfstore.forceFlush();
-            if (flush != null)
-                flushes.add(flush);
+            try
+    {
+                f.get();
+            }
+            catch (InterruptedException e)
+        {
+                throw new RuntimeException(e);
+        }
+            catch (ExecutionException e)
+            {
+                throw new RuntimeException(e);
+            }
         }
-        FBUtilities.waitOnFutures(flushes);
+        return table;
     }
 
     /**
-     * Stream the given ranges to the target endpoint from each of the given CFs.
+     * Split out files for all tables on disk locally for each range and then stream them to the target endpoint.
     */
-    public static void transferRanges(StreamOutSession session, Iterable<ColumnFamilyStore> cfses, Collection<Range> ranges, OperationType type)
+    public static void transferRangesForRequest(StreamOutSession session, Collection<Range> ranges, OperationType type)
     {
         assert ranges.size() > 0;
 
         logger.info("Beginning transfer to {}", session.getHost());
         logger.debug("Ranges are {}", StringUtils.join(ranges, ","));
+
         try
         {
-            flushSSTables(cfses);
-            Iterable<SSTableReader> sstables = Collections.emptyList();
-            for (ColumnFamilyStore cfStore : cfses)
-                sstables = Iterables.concat(sstables, cfStore.getSSTables());
-            transferSSTables(session, sstables, ranges, type);
+            Table table = flushSSTable(session.table);
+            // send the matching portion of every sstable in the keyspace
+            List<PendingFile> pending = createPendingFiles(table.getAllSSTables(), ranges, type);
+            session.addFilesToStream(pending);
+            session.begin();
         }
         catch (IOException e)
         {
@@ -115,10 +141,9 @@ public static void transferRanges(StreamOutSession session, Iterable<ColumnFamil
     }
 
     /**
-     * Low-level transfer of matching portions of a group of sstables from a single table to the target endpoint.
-     * You should probably call transferRanges instead.
+     * Transfers matching portions of a group of sstables from a single table to the target endpoint.
      */
-    public static void transferSSTables(StreamOutSession session, Iterable<SSTableReader> sstables, Collection<Range> ranges, OperationType type) throws IOException
+    public static void transferSSTables(StreamOutSession session, Collection<SSTableReader> sstables, Collection<Range> ranges, OperationType type) throws IOException
     {
         List<PendingFile> pending = createPendingFiles(sstables, ranges, type);
 
@@ -129,7 +154,7 @@ public static void transferSSTables(StreamOutSession session, Iterable<SSTableRe
     }
 
     // called prior to sending anything.
-    private static List<PendingFile> createPendingFiles(Iterable<SSTableReader> sstables, Collection<Range> ranges, OperationType type)
+    private static List<PendingFile> createPendingFiles(Collection<SSTableReader> sstables, Collection<Range> ranges, OperationType type)
     {
         List<PendingFile> pending = new ArrayList<PendingFile>();
         for (SSTableReader sstable : sstables)
@@ -140,7 +165,7 @@ public static void transferSSTables(StreamOutSession session, Iterable<SSTableRe
                 continue;
             pending.add(new PendingFile(sstable, desc, SSTable.COMPONENT_DATA, sections, type));
         }
-        logger.info("Stream context metadata {}, {} sstables.", pending, Iterables.size(sstables));
+        logger.info("Stream context metadata {}, {} sstables.", pending, sstables.size());
         return pending;
     }
 }
diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
index 4b98d7da..153b5bdd 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
@@ -23,13 +23,10 @@
 
 import java.io.*;
 import java.net.InetAddress;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 
-import com.google.common.collect.Iterables;
-
-import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.db.ColumnFamilyStore;
-import org.apache.cassandra.db.Table;
 import org.apache.cassandra.dht.AbstractBounds;
 import org.apache.cassandra.dht.Range;
 import org.apache.cassandra.io.ICompactSerializer;
@@ -69,15 +66,13 @@
     // if these are specified, file shoud not be.
     protected final Collection<Range> ranges;
     protected final String table;
-    protected final Iterable<ColumnFamilyStore> columnFamilies;
     protected final OperationType type;
 
-    StreamRequestMessage(InetAddress target, Collection<Range> ranges, String table, Iterable<ColumnFamilyStore> columnFamilies, long sessionId, OperationType type)
+    StreamRequestMessage(InetAddress target, Collection<Range> ranges, String table, long sessionId, OperationType type)
     {
         this.target = target;
         this.ranges = ranges;
         this.table = table;
-        this.columnFamilies = columnFamilies;
         this.sessionId = sessionId;
         this.type = type;
         file = null;
@@ -91,7 +86,6 @@
         this.type = file.type;
         ranges = null;
         table = null;
-        columnFamilies = null;
     }
     
     public Message getMessage(Integer version)
@@ -116,8 +110,6 @@ public String toString()
         {
             sb.append(table);
             sb.append("@");
-            sb.append(columnFamilies.toString());
-            sb.append("@");
             sb.append(target);
             sb.append("------->");
             for ( Range range : ranges )
@@ -154,16 +146,8 @@ public void serialize(StreamRequestMessage srm, DataOutputStream dos, int versio
                 {
                     AbstractBounds.serializer().serialize(range, dos);
                 }
-
                 if (version > MessagingService.VERSION_07)
                     dos.writeUTF(srm.type.name());
-
-                if (version > MessagingService.VERSION_080)
-                {
-                    dos.writeInt(Iterables.size(srm.columnFamilies));
-                    for (ColumnFamilyStore cfs : srm.columnFamilies)
-                        dos.writeInt(cfs.metadata.cfId);
-                }
             }
         }
 
@@ -189,16 +173,7 @@ public StreamRequestMessage deserialize(DataInputStream dis, int version) throws
                 OperationType type = OperationType.RESTORE_REPLICA_COUNT;
                 if (version > MessagingService.VERSION_07)
                     type = OperationType.valueOf(dis.readUTF());
-
-                List<ColumnFamilyStore> stores = new ArrayList<ColumnFamilyStore>();
-                if (version > MessagingService.VERSION_080)
-                {
-                    int cfsSize = dis.readInt();
-                    for (int i = 0; i < cfsSize; ++i)
-                        stores.add(Table.open(table).getColumnFamilyStore(dis.readInt()));
-                }
-
-                return new StreamRequestMessage(target, ranges, table, stores, sessionId, type);
+                return new StreamRequestMessage(target, ranges, table, sessionId, type);
             }
         }
     }
diff --git a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
index 7a444b61..8fa15b1f 100644
--- a/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
+++ b/cassandra/branches/cassandra-0.8.1/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
@@ -51,7 +51,7 @@ public void doVerb(Message message, String id)
                 logger.debug(srm.toString());
 
             StreamOutSession session = StreamOutSession.create(srm.table, message.getFrom(), srm.sessionId);
-            StreamOut.transferRanges(session, srm.columnFamilies, srm.ranges, srm.type);
+            StreamOut.transferRangesForRequest(session, srm.ranges, srm.type);
         }
         catch (IOException ex)
         {
diff --git a/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/SerializationsTest.java b/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
index 707f3291..7c33d25b 100644
--- a/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
+++ b/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
@@ -22,7 +22,6 @@
 
 
 import org.apache.cassandra.AbstractSerializationsTester;
-import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.db.RowMutation;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.db.filter.QueryPath;
@@ -42,7 +41,9 @@
 import java.io.File;
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 
 public class SerializationsTest extends AbstractSerializationsTester
 {
@@ -145,8 +146,7 @@ private void testStreamRequestMessageWrite() throws IOException
         Collection<Range> ranges = new ArrayList<Range>();
         for (int i = 0; i < 5; i++)
             ranges.add(new Range(new BytesToken(ByteBufferUtil.bytes(Integer.toString(10*i))), new BytesToken(ByteBufferUtil.bytes(Integer.toString(10*i+5)))));
-        List<ColumnFamilyStore> stores = Collections.singletonList(Table.open("Keyspace1").getColumnFamilyStore("Standard1"));
-        StreamRequestMessage msg0 = new StreamRequestMessage(FBUtilities.getLocalAddress(), ranges, "Keyspace1", stores, 123L, OperationType.RESTORE_REPLICA_COUNT);
+        StreamRequestMessage msg0 = new StreamRequestMessage(FBUtilities.getLocalAddress(), ranges, "Keyspace1", 123L, OperationType.RESTORE_REPLICA_COUNT);
         StreamRequestMessage msg1 = new StreamRequestMessage(FBUtilities.getLocalAddress(), makePendingFile(true, 100, OperationType.BOOTSTRAP), 124L);
         StreamRequestMessage msg2 = new StreamRequestMessage(FBUtilities.getLocalAddress(), makePendingFile(false, 100, OperationType.BOOTSTRAP), 124L);
 
diff --git a/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java b/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
index 417bd8ec..08637c65 100644
--- a/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
+++ b/cassandra/branches/cassandra-0.8.1/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
@@ -23,10 +23,12 @@
 import static org.apache.cassandra.Util.column;
 
 import java.net.InetAddress;
+import java.nio.ByteBuffer;
 import java.util.*;
 
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.Util;
+import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.compaction.CompactionManager;
 import org.apache.cassandra.db.columniterator.IdentityQueryFilter;
