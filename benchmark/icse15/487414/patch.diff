diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
index 04e81de2..3ba6c61e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
@@ -411,45 +411,10 @@ public void bindStatement() throws StandardException
 			}
 		}
 
-		// colmap[x] == y means that column x in the target table
-		// maps to column y in the source result set.
-		// colmap[x] == -1 means that column x in the target table
-		// maps to its default value.
-		// both colmap indexes and values are 0-based.
-
-		/* if the list is in order and complete, we don't have to change
-		 * the tree. If it is not, then we call RSN.enhanceRCLForInsert() 
-		 * which will either
-		 * (reorder and/or "enhance" the source RCL within the same RSN) or
-		 * (generate and return a PRN with a new reordered/enhanced RCL above
-		 * the existing RSN).  This way, RSN's that understand how to do projections
-		 * can avoid the additional PRN while those that do not will get one.
-		 */
-		/* NOTE - javascope gives confusing branch coverage info here.  By
-		 * breaking apart the following if condition, I have verified that
-		 * we test all cases.  (Jerry 7/17/97)
-		 */
-		if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
-		{
-			// one thing we do know is that all of the resultsets underneath
-			// us have their resultColumn names filled in with the names of
-			// the target table columns.  That makes generating the mapping
-			// "easier" -- we simply generate the names of the target table columns
-			// that are included.  For the missing columns, we generate default
-			// value expressions.
-
-			resultSet = resultSet.enhanceRCLForInsert(numTableColumns, colMap, 
-													  dataDictionary,
+		enhanceAndCheckForAutoincrement(resultSet, inOrder,
+				numTableColumns, colMap, dataDictionary,
 													  targetTableDescriptor, targetVTI);
-		}
 
-		if (resultSet instanceof UnionNode)
-		{
-			// If we are inserting a number of rows in VALUES clause, we need to
-			// examine each row for 'autoincrement'.
-			resultColumnList.checkAutoincrementUnion(resultSet);
-		}
-		else resultColumnList.checkAutoincrement(resultSet.getResultColumns());
 		resultColumnList.checkStorableExpressions(resultSet.getResultColumns());
 		/* Insert a NormalizeResultSetNode above the source if the source
 		 * and target column types and lengths do not match.
@@ -529,6 +494,104 @@ public void bindStatement() throws StandardException
 		getCompilerContext().popCurrentPrivType();
 	}
 
+	/**
+	 * Process ResultSet column lists for projection and autoincrement.
+	 *
+	 * This method recursively descends the result set node tree. When
+	 * it finds a simple result set, it processes any autoincrement
+	 * columns in that rs by calling checkAutoIncrement. When it finds
+	 * a compound result set, like a Union or a PRN, it recursively
+	 * descends to the child(ren) nodes. Union nodes can arise due to
+	 * multi-rows in VALUES clause), PRN nodes can arise when the set
+	 * of columns being inserted is a subset of the set of columns in 
+	 * the table.
+	 *
+	 * In addition to checking for autoincrement columns in the result set,
+	 * we may need to enhance and re-order the column list to match the
+	 * column list of the table we are inserting into. This work is handled
+	 * by ResultsetNode.enhanceRCLForInsert.
+	 *
+	 * Note that, at the leaf level, we need to enhance the RCL first, then
+	 * check for autoincrement columns. At the non-leaf levels, we have
+	 * to enhance the RCL, but we don't have to check for autoincrement
+	 * columns, since they only occur at the leaf level.
+	 *
+	 * This way, all ColumnDescriptor of all rows will be set properly.
+	 *
+	 * @param resultSet			current node in the result set tree
+	 * @param inOrder			FALSE if the column list needs reordering
+	 * @param numTableColumns   # of columns in target RCL
+	 * @param colMap            correspondence between RCLs
+	 * @param dataDictionary    DataDictionary to use
+	 * @param targetTD          Table Descriptor for target
+	 * @param targetVTI         Target description if it is a VTI
+	 *
+	 * @exception StandardException Thrown on error
+	 */
+	private void enhanceAndCheckForAutoincrement(ResultSetNode resultSet, 
+			boolean inOrder, int numTableColumns, int []colMap, 
+			DataDictionary dataDictionary,
+			TableDescriptor targetTableDescriptor,
+			FromVTI targetVTI)
+		throws StandardException
+	{
+		/*
+		 * Some implementation notes:
+		 * 
+		 * colmap[x] == y means that column x in the target table
+		 * maps to column y in the source result set.
+		 * colmap[x] == -1 means that column x in the target table
+		 * maps to its default value.
+		 * both colmap indexes and values are 0-based.
+		 *
+		 * if the list is in order and complete, we don't have to change
+		 * the tree. If it is not, then we call RSN.enhanceRCLForInsert() 
+		 * which will reorder ("enhance") the source RCL within the same RSN)
+		 *
+		 * one thing we do know is that all of the resultsets underneath
+		 * us have their resultColumn names filled in with the names of
+		 * the target table columns.  That makes generating the mapping
+		 * "easier" -- we simply generate the names of the target table columns
+		 * that are included.  For the missing columns, we generate default
+		 * value expressions.
+		 */
+
+		if (resultSet instanceof SingleChildResultSetNode)
+		{
+			enhanceAndCheckForAutoincrement(
+				((SingleChildResultSetNode)resultSet).getChildResult(),
+				inOrder, numTableColumns, colMap, dataDictionary,
+				targetTableDescriptor, targetVTI);
+			if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
+				resultSet.enhanceRCLForInsert(
+						numTableColumns, colMap, dataDictionary,
+						targetTableDescriptor, targetVTI);
+		}
+		else if (resultSet instanceof UnionNode)
+		{
+			enhanceAndCheckForAutoincrement(
+				((TableOperatorNode)resultSet).getLeftResultSet(),
+				inOrder, numTableColumns, colMap, dataDictionary,
+				targetTableDescriptor, targetVTI);
+			enhanceAndCheckForAutoincrement(
+				((TableOperatorNode)resultSet).getRightResultSet(),
+				inOrder, numTableColumns, colMap, dataDictionary,
+				targetTableDescriptor, targetVTI);
+			if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
+				resultSet.enhanceRCLForInsert(
+						numTableColumns, colMap, dataDictionary,
+						targetTableDescriptor, targetVTI);
+		}
+		else
+		{
+			if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
+				resultSet.enhanceRCLForInsert(
+						numTableColumns, colMap, dataDictionary,
+						targetTableDescriptor, targetVTI);
+			resultColumnList.checkAutoincrement(resultSet.getResultColumns());
+		}
+	}
+
 	int getPrivType()
 	{
 		return Authorizer.INSERT_PRIV;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index 33767956..1c2cc0c8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -2252,36 +2252,6 @@ else if (!thisRC.getName().equals(otherRC.getName()))
 		}
 	}
 
-	/**
-	 * If the resultset is a UnionNode (e.g., multi-rows in VALUES clause), we recursively call itself.
-	 * checkAutoincrement() will set ColumnDescriptor for autoincrement columns.
-	 * This way, all ColumnDescriptor of all rows will be set properly.
-	 */
-	public void	checkAutoincrementUnion(ResultSetNode rs)
-		throws StandardException
-	{
-		ResultSetNode lrs = ((TableOperatorNode)rs).getLeftResultSet();
-		ResultSetNode rrs = ((TableOperatorNode)rs).getRightResultSet();
-
-		if (lrs instanceof UnionNode)
-		{
-			this.checkAutoincrementUnion(lrs);
-		}
-		else
-		{
-			this.checkAutoincrement(lrs.getResultColumns());
-		}
-
-		if (rrs instanceof UnionNode)
-		{
-			this.checkAutoincrementUnion(rrs);
-		}
-		else
-		{
-			this.checkAutoincrement(rrs.getResultColumns());
-		}
-	}
-
 	/**
 	 * Do the 2 RCLs have the same type & length.
 	 * This is useful for UNIONs when deciding whether a NormalizeResultSet is required.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index ca3e648c..943b1079 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -1044,9 +1044,7 @@ public void markStatementResultSet()
 	 * This ResultSet is the source for an Insert.  The target RCL
 	 * is in a different order and/or a superset of this RCL.  In most cases
 	 * we will reorder and/or add defaults to the current RCL so that is
-	 * matches the target RCL.  Those RSNs whose generate() method does
-	 * not handle projects will insert a PRN, with a new RCL which matches
-	 * the target RCL, above the current RSN.
+	 * matches the target RCL.
 	 * NOTE - The new or enhanced RCL will be fully bound.
 	 *
 	 * @param numTargetColumns	# of columns in target RCL
@@ -1056,12 +1054,10 @@ public void markStatementResultSet()
 	 * @param dataDictionary	DataDictionary to use
 	 * @param targetTD			TableDescriptor for target if the target is not a VTI, null if a VTI
      * @param targetVTI         Target description if it is a VTI, null if not a VTI
-	 *
-	 * @return ResultSetNode	The new top of the tree
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap, 
+	public void enhanceRCLForInsert(int numTargetColumns, int[] colMap, 
 											 DataDictionary dataDictionary,
 											 TableDescriptor targetTD,
                                              FromVTI targetVTI)
@@ -1072,7 +1068,6 @@ public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap,
 							(ResultColumnList) getNodeFactory().getNode(
 												C_NodeTypes.RESULT_COLUMN_LIST,
 												getContextManager());
-		int numResultSetColumns = resultColumns.size();
 
 		/* Create a massaged version of the source RCL.
 		 * (Much simpler to build new list and then assign to source,
@@ -1098,8 +1093,6 @@ public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap,
 
 		/* Set the source RCL to the massaged version */
 		resultColumns = newResultCols;
-
-		return this;
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
index 9ba711ca..a3bb99ae 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
@@ -883,108 +883,6 @@ public void setResultToBooleanTrueNode(boolean onlyConvertAlls)
 		rightResultSet.setResultToBooleanTrueNode(onlyConvertAlls);
 	}
 
-	/**
-	 * This ResultSet is the source for an Insert.  The target RCL
-	 * is in a different order and/or a superset of this RCL.  In most cases
-	 * we will reorder and/or add defaults to the current RCL so that is
-	 * matches the target RCL.  Those RSNs whose generate() method does
-	 * not handle projects will insert a PRN, with a new RCL which matches
-	 * the target RCL, above the current RSN.
-	 * NOTE - The new or enhanced RCL will be fully bound.
-	 *
-	 * @param numTargetColumns	# of columns in target RCL
-	 * @param colMap			int array representation of correspondence between
-	 *							RCLs - colmap[i] = -1 -> missing in current RCL
-	 *								   colmap[i] = j -> targetRCL(i) <-> thisRCL(j+1)
-	 * @param dataDictionary	DataDictionary to use
-	 * @param targetTD			TableDescriptor for target if the target is not a VTI, null if a VTI
-     * @param targetVTI         Target description if it is a VTI, null if not a VTI
-	 *
-	 * @return ResultSetNode	The new top of the tree
-	 *
-	 * @exception StandardException		Thrown on error
-	 */
-	public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap, 
-											 DataDictionary dataDictionary,
-											 TableDescriptor targetTD,
-                                             FromVTI targetVTI)
-			throws StandardException
-	{
-		// our newResultCols are put into the bound form straight away.
-		ResultColumnList newResultCols =
-								(ResultColumnList) getNodeFactory().getNode(
-												C_NodeTypes.RESULT_COLUMN_LIST,
-												getContextManager());
-		int numResultSetColumns = resultColumns.size();
-
-		/* Create a massaged version of the source RCL.
-		 * (Much simpler to build new list and then assign to source,
-		 * rather than massage the source list in place.)
-		 */
-		for (int index = 0; index < numTargetColumns; index++)
-		{
-			ResultColumn	newResultColumn;
-			ResultColumn	oldResultColumn;
-			ColumnReference newColumnReference;
-
-			if (colMap[index] != -1)
-			{
-				// getResultColumn uses 1-based positioning, so offset the colMap entry appropriately
-				oldResultColumn = resultColumns.getResultColumn(colMap[index]+1);
-
-				newColumnReference = (ColumnReference) getNodeFactory().getNode(
-												C_NodeTypes.COLUMN_REFERENCE,
-												oldResultColumn.getName(),
-												null,
-												getContextManager());
-				/* The ColumnReference points to the source of the value */
-				newColumnReference.setSource(oldResultColumn);
-				// colMap entry is 0-based, columnId is 1-based.
-				newColumnReference.setType(oldResultColumn.getExpressionType());
-
-				// Source of an insert, so nesting levels must be 0
-				newColumnReference.setNestingLevel(0);
-				newColumnReference.setSourceLevel(0);
-
-				// because the insert already copied the target table's
-				// column descriptors into the result, we grab it from there.
-				// alternatively, we could do what the else clause does,
-				// and look it up in the DD again.
-				newResultColumn = (ResultColumn) getNodeFactory().getNode(
-						C_NodeTypes.RESULT_COLUMN,
-						oldResultColumn.getType(),
-						newColumnReference,
-						getContextManager());
-			}
-			else
-			{
-				newResultColumn = genNewRCForInsert(targetTD, targetVTI, index + 1, dataDictionary);
-			}
-
-			newResultCols.addResultColumn(newResultColumn);
-		}
-
-		/* The generated ProjectRestrictNode now has the ResultColumnList
-		 * in the order that the InsertNode expects.
-		 * NOTE: This code here is an exception to several "rules":
-		 *		o  This is the only ProjectRestrictNode that is currently
-		 *		   generated outside of preprocess().
-		 *	    o  The UnionNode is the only node which is not at the
-		 *		   top of the query tree which has ColumnReferences under
-		 *		   its ResultColumnList prior to expression push down.
-		 */
-		return (ResultSetNode) getNodeFactory().getNode(
-									C_NodeTypes.PROJECT_RESTRICT_NODE,
-									this,
-									newResultCols,
-									null,
-									null,
-									null,
-									null,
-									tableProperties,
-									getContextManager());
-	}
-
 	/**
 	 * Evaluate whether or not the subquery in a FromSubquery is flattenable.  
 	 * Currently, a FSqry is flattenable if all of the following are true:
