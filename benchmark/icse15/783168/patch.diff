diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/OptimizablePredicateList.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/OptimizablePredicateList.java
index f76b178f..ca23483f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/OptimizablePredicateList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/OptimizablePredicateList.java
@@ -123,6 +123,21 @@ void classify(Optimizable optTable, ConglomerateDescriptor cd)
 	 */
 	public void markAllPredicatesQualifiers();
 
+	/**
+	 * Check into the predicate list if the passed column has an equijoin 
+	 * predicate on it.
+	 * 
+	 * @param optTable
+	 * @param columnNumber
+	 * @param isNullOkay
+	 * @return
+	 * @throws StandardException
+	 */
+	public int hasEqualityPredicateOnOrderedColumn(Optimizable optTable,
+			  int columnNumber,
+			  boolean isNullOkay)
+	throws StandardException;
+
 	/**
 	 * Is there an optimizable equality predicate on the specified column?
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java
index 453c93b9..ebea16a7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.util.JBitSet;
+import org.apache.derby.impl.sql.compile.PredicateList;
 
 /**
  * This interface provides a representation of the required ordering of rows
@@ -43,6 +44,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * given a RowOrdering.
 	 *
 	 * @param rowOrdering	The order of rows in question
+	 * @param optimizableList	The current join order being considered by 
+	 *    the optimizer. We need to look into this to determine if the outer
+	 *    optimizables are single row resultset if the order by column is
+	 *    on an inner optimizable and that inner optimizable is not a one
+	 *    row resultset. DERBY-3926
 	 *
 	 * @return	SORT_REQUIRED if sorting is required,
 	 *			ELIMINATE_DUPS if no sorting is required but duplicates
@@ -52,7 +58,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	int sortRequired(RowOrdering rowOrdering) throws StandardException;
+	int sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList) 
+	throws StandardException;
 
 	/**
 	 * Tell whether sorting is required for this RequiredRowOrdering,
@@ -63,6 +70,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @param rowOrdering	The order of rows in the partial join order
 	 * @param tableMap		A bit map of the tables in the partial join order
+	 * @param optimizableList	The current join order being considered by 
+	 *    the optimizer. We need to look into this to determine if the outer
+	 *    optimizables are single row resultset if the order by column is
+	 *    on an inner optimizable and that inner optimizable is not a one
+	 *    row resultset. DERBY-3926
 	 *
 	 * @return	SORT_REQUIRED if sorting is required,
 	 *			ELIMINATE_DUPS if no sorting is required by duplicates
@@ -72,7 +84,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	int sortRequired(RowOrdering rowOrdering, JBitSet tableMap)
+	int sortRequired(RowOrdering rowOrdering, JBitSet tableMap, 
+			OptimizableList optimizableList)
 			throws StandardException;
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RowOrdering.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RowOrdering.java
index 1e4d22a7..a6bf05ae 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RowOrdering.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/RowOrdering.java
@@ -130,14 +130,28 @@ void addOrderedColumn(int direction,
 	/**
 	 * Tell this RowOrdering that it is always ordered on the given column
 	 * of the given optimizable.  This is useful when a column in the
-	 * optimizable has an equals comparison with a constant expression.
-	 * This is reset when the optimizable is removed from this RowOrdering.
+	 * optimizable has an equals comparison with a constant expression or
+	 * it is involved in a equijoin with an optimizable which is always 
+	 * ordered on the column on which the equijoin is happening. This is 
+	 * reset when the optimizable is removed from this RowOrdering.
 	 *
 	 * @param optimizable	The table in question
 	 * @param columnNumber	The number of the column in question.
 	 */
 	void columnAlwaysOrdered(Optimizable optimizable, int columnNumber);
 
+	/**
+	 * Return true if the column is always ordered. That will be true if the
+	 * column has a constant comparison predicate on it or it is involved in
+	 * a equijoin with an optimizable which is always ordered on the column
+	 * on which the equijoin is happening.
+	 *
+	 * @param tableNumber	The table in question
+	 * @param columnNumber	The number of the column in question.
+	 * @return	true means this column is always ordered
+	*/
+	public boolean isColumnAlwaysOrdered(int tableNumber, int columnNumber);
+
 	/**
 	 * Ask whether the given table is always ordered.
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 06635d6b..1cc7bad3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -462,6 +462,13 @@ public boolean nextAccessPath(Optimizer optimizer,
 
 				for (int i = 0; i < baseColumnPositions.length; i++)
 				{
+					//Check if the order by column has equijoin on another 
+					//column which is already identified as an ordered column
+					if (doesOrderByColumnHaveEquiJoin(
+							irg, predList, rowOrdering))
+						rowOrdering.columnAlwaysOrdered(this, 
+								baseColumnPositions[i]);
+
 					/*
 					** Don't add the column to the ordering if it's already
 					** an ordered column.  This can happen in the following
@@ -4363,6 +4370,86 @@ private boolean isStrictlyOrdered(ColumnReference[] crs, ConglomerateDescriptor
 		return true;
 	}
 
+	//Check if the columns in the index have an equijoin on them
+	//with other already ordered columns from the other optimizables. This
+	//is done by going through the columns in the index and checking the
+	//predicate list for equijoins on the index columns. 
+	private boolean doesOrderByColumnHaveEquiJoin(IndexRowGenerator irg,
+			OptimizablePredicateList predList, RowOrdering ro)
+	throws StandardException
+	{
+		if (predList == null)
+		{
+			return false;
+		}
+
+		// is this a unique index. 
+		if (! irg.isUnique())
+		{
+			return false;
+		}
+
+		PredicateList restrictionList = (PredicateList) predList;
+
+		int[] baseColumnPositions = irg.baseColumnPositions();
+
+		for (int index = 0; index < baseColumnPositions.length; index++)
+		{
+			// get the column number at this position
+			int curCol = baseColumnPositions[index];
+
+			//Check if this column from the index has an equi join predicate
+			//on them.
+			int j = restrictionList.hasEqualityPredicateOnOrderedColumn(
+					this, curCol, true);
+			if (j == -1)
+				return false;
+
+			//We have found a predicate which has an equi join involving the
+			//index column. Now ensure that the equi join is with a column
+			//which is already identified as always ordered.
+			Predicate		predicate;
+			predicate = (Predicate) restrictionList.elementAt(j);
+			ValueNode vn = predicate.getAndNode().getLeftOperand();
+			ColumnReference cr;
+  			if (vn instanceof BinaryRelationalOperatorNode)
+  			{
+  				BinaryRelationalOperatorNode bon = 
+  					(BinaryRelationalOperatorNode) vn;
+  				cr = null;
+				if (bon.columnOnOneSide(this) == 
+					BinaryRelationalOperatorNode.LEFT)
+				{
+	  				//If the index column is on left side, then look for the 
+					//operand on the other side to see if it is of type 
+					//ColumnReference. If it is, then check if that column 
+					//is identified as always ordered
+					if (bon.getRightOperand() instanceof ColumnReference)
+						cr = (ColumnReference)bon.getRightOperand();
+				} else
+				{
+	  				//If the index column is on right side, then look for the 
+					//operand on the other side to see if it is of type 
+					//ColumnReference. If it is, then check if that column 
+					//is identified as always ordered
+					if (bon.getLeftOperand() instanceof ColumnReference)
+						cr = (ColumnReference)bon.getLeftOperand();
+				}
+				if (cr!=null)
+				{
+					//We have found that the index column is involved in an
+					//equijoin with another column. Now check if that other
+					//column is always ordered
+					if (ro.orderedOnColumn(1, cr.getTableNumber(), 
+							cr.getColumnNumber()))
+						return true;
+				}
+  			}
+		}
+
+		return false;
+	}
+
 	/**
 	 * Is this a one-row result set with the given conglomerate descriptor?
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
index 6abdb75a..1d1f0d05 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
@@ -1789,7 +1789,8 @@ else if (bestCost.rowCount() < currentCost.rowCount())
 				if (requiredRowOrdering != null &&
 					curOpt.considerSortAvoidancePath())
 				{
-					if (requiredRowOrdering.sortRequired(bestRowOrdering) ==
+					if (requiredRowOrdering.sortRequired(
+							bestRowOrdering, optimizableList) == 
 									RequiredRowOrdering.NOTHING_REQUIRED)
 					{
 						if (optimizerTrace)
@@ -2246,8 +2247,9 @@ private void costBasedCostOptimizable(Optimizable optimizable,
 				** path avoid a sort?
 				*/
 				if (requiredRowOrdering.sortRequired(currentRowOrdering,
-														assignedTableMap)
-										== RequiredRowOrdering.NOTHING_REQUIRED)
+														assignedTableMap,
+														optimizableList)
+										==RequiredRowOrdering.NOTHING_REQUIRED)
 				{
 					ap = optimizable.getBestSortAvoidancePath();
 					bestCostEstimate = ap.getCostEstimate();
@@ -2377,7 +2379,8 @@ public void	considerCost(Optimizable optimizable,
 				** path avoid a sort?
 				*/
 				if (requiredRowOrdering.sortRequired(currentRowOrdering,
-														assignedTableMap)
+														assignedTableMap,
+														optimizableList)
 										== RequiredRowOrdering.NOTHING_REQUIRED)
 				{
 					ap = optimizable.getBestSortAvoidancePath();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
index f3946220..103b4103 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
@@ -22,7 +22,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package	org.apache.derby.impl.sql.compile;
 
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Optimizable;
 import org.apache.derby.iapi.sql.compile.CostEstimate;
+import org.apache.derby.iapi.sql.compile.OptimizableList;
 import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
 import org.apache.derby.iapi.sql.compile.RowOrdering;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
@@ -437,9 +439,10 @@ public void generate(ActivationClassBuilder acb,
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public int sortRequired(RowOrdering rowOrdering) throws StandardException
+	public int sortRequired(RowOrdering rowOrdering,
+			OptimizableList optimizableList) throws StandardException
 	{
-		return sortRequired(rowOrdering, (JBitSet) null);
+		return sortRequired(rowOrdering, (JBitSet) null, optimizableList);
 	}
 
 	/**
@@ -447,7 +450,9 @@ public int sortRequired(RowOrdering rowOrdering) throws StandardException
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public int sortRequired(RowOrdering rowOrdering, JBitSet tableMap)
+	public int sortRequired(RowOrdering rowOrdering, 
+			JBitSet tableMap,
+			OptimizableList optimizableList)
 				throws StandardException
 	{
 		/*
@@ -531,7 +536,92 @@ public int sortRequired(RowOrdering rowOrdering, JBitSet tableMap)
 					return RequiredRowOrdering.NOTHING_REQUIRED;
 				}
 			}
+			/*
+			 * Does this order by column belong to the outermost optimizable in
+			 * the current join order?
+			 * 
+			 * If yes, then we do not need worry about the ordering of the rows
+			 * feeding into it. Because the order by column is associated with 
+			 * the outermost optimizable, optimizer will not have to deal with 
+			 * the order of any rows coming in from the previous optimizables. 
+			 * 
+			 * But if the current order by column belongs to an inner 
+			 * optimizable in the join order, then go through the following
+			 * if condition logic.
+			 */
 
+			/* If the following boolean is true, then it means that the join 
+			 * order being considered has more than one table 
+			 */
+			boolean moreThanOneTableInJoinOrder = tableMap!=null?
+					(!tableMap.hasSingleBitSet()) : false;
+			if (moreThanOneTableInJoinOrder) 
+			{
+				/*
+				 * First check if the order by column has a constant comparison
+				 * predicate on it or it belongs to an optimizable which is 
+				 * always ordered(that means it is a single row table) or the 
+				 * column is involved in an equijoin with an optimizable which 
+				 * is always ordered on the column on which the equijoin is 
+				 * happening. If yes, then we know that the rows will always be 
+				 * sorted and hence we do not need to worry if (any) prior 
+				 * optimizables in join order are one-row resultsets or not. 
+				 */
+				if ((!rowOrdering.alwaysOrdered(cr.getTableNumber())) &&
+						(!rowOrdering.isColumnAlwaysOrdered(
+								cr.getTableNumber(), cr.getColumnNumber())))
+				{
+					/*
+					 * The current order by column is not always ordered which 
+					 * means that the rows from it will not necessarily be in 
+					 * the sorted order on that column. Because of this, we 
+					 * need to make sure that the outer optimizables (outer to 
+					 * the order by columns's optimizable) in the join order 
+					 * are all one row optimizables, meaning that they can at 
+					 * the most return only one row. If they return more than 
+					 * one row, then it will require multiple scans of the 
+					 * order by column's optimizable and the rows returned 
+					 * from those multiple scans may not be ordered correctly.
+					 */
+					for (int i=0; i < optimizableList.size(); i++)
+					{
+						//Get one outer optimizable at a time from the join
+						//order
+						Optimizable considerOptimizable = 
+							optimizableList.getOptimizable(i);
+						//If we have come across the optimizable for the order 
+						//by column in the join order, then we do not need to 
+						//look at the inner optimizables in the join order. As
+						//long as the outer optimizables are one row resultset,
+						//we are fine to consider sort avoidance.
+						if (considerOptimizable.getTableNumber() == 
+							cr.getTableNumber())
+							break;
+						/*
+						 * The following if condition is checking if the
+						 * outer optimizable to the order by column's 
+						 * optimizable is one row resultset or not. 
+						 * 
+						 * If the outer optimizable is one row resultset, 
+						 * then move on to the next optimizable in the join 
+						 * order and do the same check on that optimizable. 
+						 * Continue this  until we are done checking that all 
+						 * the outer optimizables in the join order are single 
+						 * row resultsets. If we run into an outer optimizable 
+						 * which is not one row resultset, then we can not 
+						 * consider sort avoidance for the query.
+						 */
+						if (rowOrdering.alwaysOrdered(
+								considerOptimizable.getTableNumber()))
+							continue;
+						else
+							//This outer optimizable can return more than 
+							//one row. Because of this, we can't avoid the
+							//sorting for this query.
+							return RequiredRowOrdering.SORT_REQUIRED;
+					}
+				}
+			}
 			if ( ! rowOrdering.alwaysOrdered(cr.getTableNumber()))
 			{
 				/*
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
index e41d2dc0..bdb72c4b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
@@ -325,6 +325,45 @@ public void markAllPredicatesQualifiers()
 		numberOfQualifiers = size;
 	}
 
+	/**
+	 * @see OptimizablePredicateList#hasEqualityPredicateOnOrderedColumn
+	 *
+	 * @exception StandardException		Thrown on error
+	 */
+	public int hasEqualityPredicateOnOrderedColumn(Optimizable optTable,
+													  int columnNumber,
+													  boolean isNullOkay)
+							throws StandardException
+	{
+		ValueNode opNode = null;
+		int size = size();
+		for (int index = 0; index < size; index++)
+		{
+			AndNode			andNode;
+			Predicate		predicate;
+			predicate = (Predicate) elementAt(index);
+			//We are not looking at constant comparison predicate.
+			if (predicate.getReferencedMap().hasSingleBitSet())
+			{
+				continue;
+			}
+
+			andNode = (AndNode) predicate.getAndNode();
+
+			// skip non-equality predicates
+			opNode = andNode.getLeftOperand();
+
+			if (opNode.optimizableEqualityNode(optTable,
+											   columnNumber,
+											   isNullOkay))
+			{
+				return index;
+			}
+		}
+
+		return -1;
+	}
+
 	/**
 	 * @see OptimizablePredicateList#hasOptimizableEqualityPredicate
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowOrderingImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowOrderingImpl.java
index 94a66212..765dcaf2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowOrderingImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowOrderingImpl.java
@@ -39,7 +39,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	** This ColumnOrdering represents the columns that can be considered
 	** ordered no matter what.  For example, columns that are compared to
 	** constants with = are always ordered.  Also, all columns in a one-row
-	** result set are ordered.
+	** result set are ordered. Another instance of always ordered is when
+	** the column is involved in an equijoin with an optimizable which is 
+	** always ordered on the column on which the equijoin is happening.
 	*/
 	ColumnOrdering	columnsAlwaysOrdered;
 
@@ -61,6 +63,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		alwaysOrderedOptimizables = new Vector();
 	}
 
+	/** @see RowOrdering#isColumnAlwaysOrdered */
+	public boolean isColumnAlwaysOrdered(int tableNumber, int columnNumber){
+		return (columnsAlwaysOrdered.contains(tableNumber, columnNumber)); 
+	}
+
 	/**
 	 * @see RowOrdering#orderedOnColumn
 	 *
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java
index 145c12f3..fa7338ef 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java
@@ -49,6 +49,13 @@ protected void setUp() throws SQLException {
         getConnection().setAutoCommit(false);
         Statement st = createStatement();
 
+        st.executeUpdate("create table a(col1 int, col2 int)");
+        st.executeUpdate("insert into a values(1,1),(1,1)");
+        st.executeUpdate("create table b(col1 int, col2 int)");
+        st.executeUpdate("insert into b values(2,2),(2,2)");
+        st.executeUpdate("create table c(col1 int, col2 int)");
+        st.executeUpdate("insert into c values(3,3),(3,3)");
+
         st.executeUpdate(
                 "create TABLE table1 (id BIGINT NOT NULL, PRIMARY KEY(id))");
 
@@ -9993,6 +10000,30 @@ protected void setUp() throws SQLException {
                 "UPDATE table2 SET value='true' WHERE id=2147483696 "
                 + "AND name='has_address'");
             
+            //Start of tables creation for DERBY-4240 repro
+            st.executeUpdate(
+            		"CREATE TABLE test1 (id BIGINT NOT NULL, name VARCHAR(255), "+
+            		"PRIMARY KEY (id))");
+            st.executeUpdate(
+            		"CREATE TABLE test2 (entity_id BIGINT, rel_id BIGINT)");
+            st.executeUpdate(
+            		"CREATE INDEX idx_test2 ON test2 (entity_id)");
+            st.executeUpdate(
+            		"INSERT INTO test1 (id, name) VALUES (102, 'Tom')");
+            st.executeUpdate(
+            		"INSERT INTO test1 (id, name) VALUES (1, null)");
+            st.executeUpdate(
+            		"INSERT INTO test1 (id, name) VALUES (103, 'Jerry')");
+            st.executeUpdate(
+            		"INSERT INTO test1 (id, name) VALUES (101, 'Pupy')");
+            st.executeUpdate(
+            		"INSERT INTO test2 (entity_id, rel_id) VALUES (1, 102)");
+            st.executeUpdate(
+            		"INSERT INTO test2 (entity_id, rel_id) VALUES (1, 101)");
+            st.executeUpdate(
+            		"INSERT INTO test2 (entity_id, rel_id) VALUES (1, 103)");
+            //End of tables creation for DERBY-4240 repro
+
             getConnection().commit();
             st.close();
     }
@@ -10002,11 +10033,95 @@ protected void tearDown() throws Exception {
         rollback();
         stmt.executeUpdate("drop table table2");
         stmt.executeUpdate("drop table table1");
+        stmt.executeUpdate("drop table a");
+        stmt.executeUpdate("drop table b");
+        stmt.executeUpdate("drop table c");
+        //drop tables needed for DERBY-4240
+        stmt.executeUpdate("drop table test1");
+        stmt.executeUpdate("drop table test2");
         stmt.close();
         commit();
         super.tearDown();
     }
 
+    /**
+     * Add a test case for DERBY-4240 where the rows were not ordered despite
+     * an order by clause. The fix for DERBY-3926 took care of the bug. 
+     */
+    public void testDerby4240OrderByCase() throws SQLException {
+        String sql1 = 
+        	"SELECT t1.id, t1.name FROM test2 t2 INNER JOIN test1 t1 "+
+        	"ON t2.rel_id = t1.id WHERE t2.entity_id = 1 ORDER BY t1.id ASC";
+        Statement s;
+        ResultSet rs;
+        RuntimeStatisticsParser rtsp;
+        String [][] result;
+
+        s = createStatement();
+        s.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
+        rs = s.executeQuery(sql1);
+		rtsp = SQLUtilities.getRuntimeStatisticsParser(s);
+		assertTrue(rtsp.whatSortingRequired());
+        rs = s.executeQuery(sql1);
+        result = new String[][] {
+                {"101", "Pupy"},{"102", "Tom"}, {"103", "Jerry"}};
+        JDBC.assertFullResultSet(rs, result);
+    }
+
+    /**
+     * Some more tests for order by and sort avoidance logic
+     */
+    public void testAdditionalOrderByCases() throws SQLException {
+        String sql1;
+        Statement s;
+        ResultSet rs;
+        RuntimeStatisticsParser rtsp;
+        String [][] result;
+
+        s = createStatement();
+        s.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
+        
+        sql1 = "select a.col1, b.col2, c.col2 from a, b, c where c.col1=3 " +
+        "order by a.col1, c.col1";
+        rs = s.executeQuery(sql1);
+		rtsp = SQLUtilities.getRuntimeStatisticsParser(s);
+		assertTrue(rtsp.whatSortingRequired());
+        rs = s.executeQuery(sql1);
+        result = new String[][] {
+                {"1", "2", "3"},{"1", "2", "3"}, {"1", "2", "3"},   
+                {"1", "2", "3"},{"1", "2", "3"}, {"1", "2", "3"},   
+                {"1", "2", "3"},{"1", "2", "3"}};
+        JDBC.assertFullResultSet(rs, result);
+        
+        sql1 = "select a.col1, b.col2, c.col2 from a, b, c where a.col1=1 "+
+        "and b.col1 = 2 and c.col1=3 order by a.col1, b.col1, c.col1";
+        rs = s.executeQuery(sql1);
+		rtsp = SQLUtilities.getRuntimeStatisticsParser(s);
+		assertFalse(rtsp.whatSortingRequired());
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, result);
+
+        sql1 = "select c.col1, b.col1, a.col1 from a, b, c where a.col1=1 "+
+        "and b.col1 = 2 and c.col1=3 order by c.col1, b.col1, a.col1";
+        result = new String[][] {
+                {"3", "2", "1"},{"3", "2", "1"}, {"3", "2", "1"},   
+                {"3", "2", "1"},{"3", "2", "1"}, {"3", "2", "1"},   
+                {"3", "2", "1"},{"3", "2", "1"}};
+        rs = s.executeQuery(sql1);
+		rtsp = SQLUtilities.getRuntimeStatisticsParser(s);
+		assertFalse(rtsp.whatSortingRequired());
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, result);
+
+        sql1 = "select c.col1, b.col1, a.col1 from a, b, c where a.col1=1 "+
+        "and b.col1 = 2 and c.col1=3 order by c.col2, b.col2, a.col2";
+        rs = s.executeQuery(sql1);
+		rtsp = SQLUtilities.getRuntimeStatisticsParser(s);
+		assertTrue(rtsp.whatSortingRequired());
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, result);
+}
+
     /**
      * Test for forcing a order of tables in the FROM list user optimizer
      * overrides. This ordering of table is going to require us to do sorting.
@@ -10053,7 +10168,7 @@ public void testWithNoOptimizerOverrides() throws SQLException {
 		RuntimeStatisticsParser rtsp = SQLUtilities.getRuntimeStatisticsParser(s);
 		assertTrue(rtsp.usedSpecificIndexForIndexScan("TABLE2","KEY3"));
 		assertTrue(rtsp.usedTableScan("TABLE1"));
-		assertFalse(rtsp.whatSortingRequired());
+		assertTrue(rtsp.whatSortingRequired());
   
         rs = s.executeQuery(sql1);
         String[][] result = {
@@ -10085,7 +10200,7 @@ public void testForcedIndexUseForWrongOrder() throws SQLException {
 				s);
 		assertTrue(rtsp.usedSpecificIndexForIndexScan("TABLE2","KEY3"));
 		assertTrue(rtsp.usedTableScan("TABLE1"));
-		assertFalse(rtsp.whatSortingRequired());
+		assertTrue(rtsp.whatSortingRequired());
 
 		rs = s.executeQuery(sql1);
         String[][] result = {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index c518889a..4403346b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -155,6 +155,7 @@ public static Test suite() {
         suite.addTest(LangHarnessJavaTest.suite());
         		
         suite.addTest(ResultSetsFromPreparedStatementTest.suite());
+        suite.addTest(OrderByAndSortAvoidance.suite());
 
         // tests that do not run with JSR169
         if (JDBC.vmSupportsJDBC3())  
