diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintQuiesceParticipant.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintQuiesceParticipant.java
index 1ffabd31..85779fb3 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintQuiesceParticipant.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintQuiesceParticipant.java
@@ -37,8 +37,8 @@
 
 public class BlueprintQuiesceParticipant implements QuiesceParticipant 
 {
-	private BundleContext ctx;
-	private BlueprintExtender extender;
+	private final BundleContext ctx;
+	private final BlueprintExtender extender;
 	
 	public BlueprintQuiesceParticipant(BundleContext context, BlueprintExtender extender)
 	{
@@ -83,8 +83,8 @@ public void quiesce(QuiesceCallback callback, List<Bundle> bundlesToQuiesce)
 	{
 		/** The bundle being quiesced */
 		private final Bundle bundleToQuiesce;
-		private QuiesceCallback callback;
-		private BlueprintExtender extender;
+		private final QuiesceCallback callback;
+		private final BlueprintExtender extender;
 		
 		public QuiesceBundle(QuiesceCallback callback, Bundle bundleToQuiesce, 
 				BlueprintExtender extender) 
@@ -99,6 +99,8 @@ public void run()
 		{
 			BlueprintContainerImpl container = extender.getBlueprintContainerImpl(bundleToQuiesce);
 						
+			// have we got an actual blueprint bundle
+			if (container != null) {
 			BlueprintRepository repository = container.getRepository();
 			Set<String> names = repository.getNames();
 			container.quiesce();
@@ -118,6 +120,11 @@ public void run()
 			{
 				callback.bundleQuiesced(bundleToQuiesce);
 			}
+			} else {
+			  // for non-Blueprint bundles just call return completed
+			  
+			  callback.bundleQuiesced(bundleToQuiesce);
+			}
 		}
 	}
 	
@@ -134,7 +141,7 @@ public void run()
 	  /** The single bundle being quiesced by this DestroyCallback */
 	  private final Bundle toQuiesce;
 	
-	  private Set<String> services = new HashSet<String>();
+	  private final Set<String> services = new HashSet<String>();
 	    
 	  public QuiesceDelegatingCallback(QuiesceCallback cbk, Bundle b) 
 	  {
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/BPQuiesceTest.java b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/BPQuiesceTest.java
index e69de29b..6fe49b55 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/BPQuiesceTest.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/BPQuiesceTest.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.container;
+
+import java.util.Arrays;
+import java.util.concurrent.Semaphore;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.aries.quiesce.manager.QuiesceCallback;
+import org.apache.aries.unittest.mocks.MethodCall;
+import org.apache.aries.unittest.mocks.Skeleton;
+import org.junit.Test;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleContext;
+
+import static junit.framework.Assert.*;
+
+public class BPQuiesceTest {
+  @Test
+  public void canQuiesceNoBPBundle() throws Exception {
+    BundleContext ctx = Skeleton.newMock(BundleContext.class);
+    Bundle bpBundle = Skeleton.newMock(Bundle.class);
+    Bundle testBundle = Skeleton.newMock(Bundle.class);
+    
+    Skeleton.getSkeleton(ctx).setReturnValue(
+        new MethodCall(BundleContext.class, "getBundle"), bpBundle);
+    
+    BlueprintQuiesceParticipant bqp = new BlueprintQuiesceParticipant(ctx, new BlueprintExtender() {
+      @Override
+      protected BlueprintContainerImpl getBlueprintContainerImpl(Bundle bundle) {
+        return null;
+      }      
+    });
+    
+    final Semaphore result = new Semaphore(0);
+    
+    QuiesceCallback qc = new QuiesceCallback() {
+      public void bundleQuiesced(Bundle... bundlesQuiesced) {
+        result.release();
+      }
+    };
+    
+    bqp.quiesce(qc, Arrays.asList(testBundle));
+    
+    assertTrue(result.tryAcquire(2, TimeUnit.SECONDS));
+  }
+}
