diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 3a459fe6..ceee4dc9 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -2305,6 +2305,14 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,
 					tableDescriptor.getHeapConglomerateId()
 					);
 
+            // Bail out if the descriptor couldn't be found. The conglomerate
+            // probably doesn't exist anymore.
+            if (baseConglomerateDescriptor == null) {
+                throw StandardException.newException(
+                        SQLState.STORE_CONGLOMERATE_DOES_NOT_EXIST,
+                        new Long(tableDescriptor.getHeapConglomerateId()));
+            }
+
 			/* Build the 0-based array of base column names. */
 			columnNames = resultColumns.getColumnNames();
 
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index d86ec825..bf0dd439 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -289,7 +289,7 @@ public void	executeConstantAction(
 			sd = getAndCheckSchemaDescriptor(dd, schemaId, "ALTER TABLE");
 		}
 		
-		/* Prepare all dependents to invalidate.  (This is there chance
+		/* Prepare all dependents to invalidate.  (This is their chance
 		 * to say that they can't be invalidated.  For example, an open
 		 * cursor referencing a table/view that the user is attempting to
 		 * alter.) If no one objects, then invalidate any dependent objects.
@@ -1243,14 +1243,6 @@ private void compressTable(
                 TransactionController.MODE_TABLE,
                 TransactionController.ISOLATION_SERIALIZABLE);
 
-		// invalidate any prepared statements that depended on this table 
-        // (including this one), this fixes problem with threads that start up 
-        // and block on our lock, but do not see they have to recompile their 
-        // plan.  We now invalidate earlier however they still might recompile
-        // using the old conglomerate id before we commit our DD changes.
-		//
-		dm.invalidateFor(td, DependencyManager.COMPRESS_TABLE, lcc);
-
 		rl = compressHeapCC.newRowLocationTemplate();
 
 		// Get the properties on the old heap
@@ -1374,6 +1366,10 @@ private void compressTable(
 		// Update sys.sysconglomerates with new conglomerate #
 		dd.updateConglomerateDescriptor(cd, newHeapConglom, tc);
 
+        // Now that the updated information is available in the system tables,
+        // we should invalidate all statements that use the old conglomerates
+        dm.invalidateFor(td, DependencyManager.COMPRESS_TABLE, lcc);
+
 		// Drop the old conglomerate
 		tc.dropConglomerate(oldHeapConglom);
 		cleanUp();
@@ -1463,15 +1459,6 @@ private void truncateTable(Activation activation)
                                 TransactionController.MODE_TABLE,
                                 TransactionController.ISOLATION_SERIALIZABLE);
 
-		// invalidate any prepared statements that
-		// depended on this table (including this one)
-		// bug 3653 has threads that start up and block on our lock, but do
-		// not see they have to recompile their plan.    We now invalidate earlier
-		// however they still might recompile using the old conglomerate id before we
-		// commit our DD changes.
-		//
-		dm.invalidateFor(td, DependencyManager.TRUNCATE_TABLE, lcc);
-
 		rl = compressHeapCC.newRowLocationTemplate();
 		// Get the properties on the old heap
 		compressHeapCC.getInternalTablePropertySet(properties);
@@ -1557,6 +1544,11 @@ private void truncateTable(Activation activation)
 
 		// Update sys.sysconglomerates with new conglomerate #
 		dd.updateConglomerateDescriptor(cd, newHeapConglom, tc);
+
+        // Now that the updated information is available in the system tables,
+        // we should invalidate all statements that use the old conglomerates
+        dm.invalidateFor(td, DependencyManager.TRUNCATE_TABLE, lcc);
+
 		// Drop the old conglomerate
 		tc.dropConglomerate(oldHeapConglom);
 		cleanUp();
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java
index e69de29b..9f333be3 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java
@@ -0,0 +1,114 @@
+/*
+
+Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest
+
+Licensed to the Apache Software Foundation (ASF) under one or more
+contributor license agreements.  See the NOTICE file distributed with
+this work for additional information regarding copyright ownership.
+The ASF licenses this file to You under the Apache License, Version 2.0
+(the "License"); you may not use this file except in compliance with
+the License.  You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import junit.framework.Test;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * Test cases for compressing tables.
+ */
+public class CompressTableTest extends BaseJDBCTestCase {
+
+    public CompressTableTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        // compress table is an embedded feature, no need to run network tests
+        return new CleanDatabaseTestSetup(
+                TestConfiguration.embeddedSuite(CompressTableTest.class));
+    }
+
+    /**
+     * Test that statement invalidation works when SYSCS_COMPRESS_TABLE calls
+     * and other statements accessing the same table execute concurrently.
+     * DERBY-4275.
+     */
+    public void testConcurrentInvalidation() throws Exception {
+        Statement s = createStatement();
+        s.execute("create table d4275(x int)");
+        s.execute("insert into d4275 values 1");
+
+        // Object used by the main thread to tell the helper thread to stop.
+        // The helper thread stops once the list is non-empty.
+        final List stop = Collections.synchronizedList(new ArrayList());
+
+        // Holder for anything thrown by the run() method in the helper thread.
+        final Throwable[] error = new Throwable[1];
+
+        // Set up a helper thread that executes a query against the table
+        // until the main thread tells it to stop.
+        Connection c2 = openDefaultConnection();
+        final PreparedStatement ps = c2.prepareStatement("select * from d4275");
+
+        Thread t = new Thread() {
+            public void run() {
+                try {
+                    while (stop.isEmpty()) {
+                        JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
+                    }
+                } catch (Throwable t) {
+                    error[0] = t;
+                }
+            }
+        };
+
+        t.start();
+
+        // Compress the table while a query is being executed against the
+        // same table to force invalidation of the running statement. Since
+        // the problem we try to reproduce is timing-dependent, do it 100
+        // times to increase the chance of hitting the bug.
+        try {
+            for (int i = 0; i < 100; i++) {
+                s.execute(
+                    "call syscs_util.syscs_compress_table('APP', 'D4275', 1)");
+            }
+        } finally {
+            // We're done, so tell the helper thread to stop.
+            stop.add(Boolean.TRUE);
+        }
+
+        t.join();
+
+        // Before DERBY-4275, the helper thread used to fail with an error
+        // saying the container was not found.
+        if (error[0] != null) {
+            fail("Helper thread failed", error[0]);
+        }
+
+        // Cleanup.
+        ps.close();
+        c2.close();
+    }
+}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index a9ba548c..d4ec5316 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -61,6 +61,7 @@ public static Test suite() {
 
         suite.addTest(org.apache.derbyTesting.functionTests.tests.memory.TriggerTests.suite());
         suite.addTest(AnsiTrimTest.suite());
+        suite.addTest(CompressTableTest.suite());
         suite.addTest(CreateTableFromQueryTest.suite());
         suite.addTest(DatabaseClassLoadingTest.suite());
         suite.addTest(DynamicLikeOptimizationTest.suite());
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 7b5c6249..d7c5ad0f 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -568,11 +568,11 @@ public static void removeDirectory(File dir)
      *
      * @exception AssertionFailedError
      */
-    public static void fail(String msg, Exception e)
+    public static void fail(String msg, Throwable t)
             throws AssertionFailedError {
 
         AssertionFailedError ae = new AssertionFailedError(msg);
-        ae.initCause(e);
+        ae.initCause(t);
         throw ae;
     }
 } // End class BaseTestCase
