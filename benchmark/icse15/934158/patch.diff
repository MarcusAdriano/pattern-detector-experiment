diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 886c2991..8a610abf 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -863,7 +863,6 @@ private boolean getRangeRows(List<Row> rows, byte[] superColumn, final AbstractB
         {
             // pull rows out of the iterator
             boolean first = true;
-            IPartitioner partitioner = StorageService.getPartitioner(); 
             while(iterator.hasNext())
             {
                 Row current = iterator.next();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java
index 65067bf3..d1442ec4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java
@@ -18,15 +18,10 @@
 
 package org.apache.cassandra.db;
 
-import java.io.DataOutput;
-import java.io.IOException;
-import java.io.DataInput;
 import java.util.Comparator;
 
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.dht.Token;
-import org.apache.cassandra.io.ICompactSerializer2;
-import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
 
@@ -54,15 +49,6 @@ public int compare(DecoratedKey o1, DecoratedKey o2)
     public final T token;
     public final byte[] key;
 
-    @Deprecated
-    public DecoratedKey(T token, String key)
-    {
-        super();
-        assert token != null;
-        this.token = token;
-        this.key = key == null ? null : key.getBytes(FBUtilities.UTF8);
-    }
-
     public DecoratedKey(T token, byte[] key)
     {
         super();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java
index 8185bfad..6fcc5d9f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java
@@ -23,7 +23,6 @@
 
 import org.apache.commons.lang.ArrayUtils;
 
-import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.SuperColumn;
 
 class IdentityQueryFilter extends SliceQueryFilter
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
index fa23ce80..9854d2e0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
@@ -25,7 +25,6 @@
 
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.io.util.FileDataInput;
-import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.ReducingIterator;
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.marshal.AbstractType;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/ByteOrderedPartitioner.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/ByteOrderedPartitioner.java
index 92b4e192..d5f45b04 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/ByteOrderedPartitioner.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/ByteOrderedPartitioner.java
@@ -18,19 +18,6 @@
 
 package org.apache.cassandra.dht;
 
-import java.math.BigInteger;
-import java.text.Collator;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.Locale;
-import java.util.Random;
-
-import org.apache.commons.lang.ArrayUtils;
-
-import org.apache.cassandra.db.DecoratedKey;
-import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.utils.Pair;
-
 public class ByteOrderedPartitioner extends AbstractByteOrderedPartitioner
 {
     public BytesToken getToken(byte[] key)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java
index d87b8e27..f28d578d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java
@@ -66,7 +66,6 @@
      * (This is NOT a method to create a Token from its string representation;
      * for that, use TokenFactory.fromString.)
      */
-    @Deprecated
     public T getToken(byte[] key);
 
     /**
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/Util.java b/cassandra/trunk/test/unit/org/apache/cassandra/Util.java
index 33711970..14401725 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/Util.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/Util.java
@@ -99,11 +99,6 @@ public static ColumnFamilyStore writeColumnFamily(List<RowMutation> rms) throws
         return store;
     }
     
-    public static ColumnFamily getColumnFamily(Table table, String key, String cfName) throws IOException
-    {
-        return getColumnFamily(table, dk(key), cfName);
-    }
-
     public static ColumnFamily getColumnFamily(Table table, DecoratedKey key, String cfName) throws IOException
     {
         ColumnFamilyStore cfStore = table.getColumnFamilyStore(cfName);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
index 37462cfe..bc2244c9 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
@@ -1,8 +1,6 @@
 package org.apache.cassandra.io.sstable;
 
 import java.io.IOException;
-import java.util.HashSet;
-import java.util.Set;
 import java.util.concurrent.ExecutionException;
 
 import org.junit.Test;
@@ -12,7 +10,6 @@
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.io.util.FileDataInput;
-import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
 
 import org.apache.cassandra.Util;
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
index 7bfd5f42..269dc593 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
@@ -19,21 +19,15 @@
 
 package org.apache.cassandra.io.sstable;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.*;
 
 import org.junit.Test;
-import static org.junit.Assert.*;
 
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.io.util.BufferedRandomAccessFile;
-import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.utils.FBUtilities;
 
-import com.google.common.base.Predicate;
-import com.google.common.base.Predicates;
-
 public class SSTableTest extends CleanupHelper
 {
     @Test
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/service/AntiEntropyServiceTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/service/AntiEntropyServiceTest.java
index 831e873d..95c26728 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/service/AntiEntropyServiceTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/service/AntiEntropyServiceTest.java
@@ -145,11 +145,11 @@ public void testValidatorAdd() throws Throwable
         validator.prepare();
 
         // add a row with the minimum token
-        validator.add(new CompactedRow(new DecoratedKey(min, "nonsense!"),
+        validator.add(new CompactedRow(new DecoratedKey(min, "nonsense!".getBytes(FBUtilities.UTF8)),
                                        new DataOutputBuffer()));
 
         // and a row after it
-        validator.add(new CompactedRow(new DecoratedKey(mid, "inconceivable!"),
+        validator.add(new CompactedRow(new DecoratedKey(mid, "inconceivable!".getBytes(FBUtilities.UTF8)),
                                        new DataOutputBuffer()));
         validator.complete();
 
