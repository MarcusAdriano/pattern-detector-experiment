diff --git a/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java b/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java
index 47a8a7ce..0e956d27 100644
--- a/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java
+++ b/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java
@@ -133,8 +133,8 @@ public void setLocation(String location, Job job) throws IOException
         SliceRange range = new SliceRange(BOUND, BOUND, false, LIMIT);
         SlicePredicate predicate = new SlicePredicate().setSlice_range(range);
         conf = job.getConfiguration();
-        ConfigHelper.setSlicePredicate(conf, predicate);
-        ConfigHelper.setColumnFamily(conf, ksname, cfname);
+        ConfigHelper.setInputSlicePredicate(conf, predicate);
+        ConfigHelper.setInputColumnFamily(conf, ksname, cfname);
     }
 
     @Override
diff --git a/cassandra/trunk/contrib/word_count/src/WordCount.java b/cassandra/trunk/contrib/word_count/src/WordCount.java
index c850e04d..5651a2a5 100644
--- a/cassandra/trunk/contrib/word_count/src/WordCount.java
+++ b/cassandra/trunk/contrib/word_count/src/WordCount.java
@@ -129,9 +129,9 @@ public int run(String[] args) throws Exception
             job.setInputFormatClass(ColumnFamilyInputFormat.class);
             FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PATH_PREFIX + i));
 
-            ConfigHelper.setColumnFamily(job.getConfiguration(), KEYSPACE, COLUMN_FAMILY);
+            ConfigHelper.setInputColumnFamily(job.getConfiguration(), KEYSPACE, COLUMN_FAMILY);
             SlicePredicate predicate = new SlicePredicate().setColumn_names(Arrays.asList(columnName.getBytes()));
-            ConfigHelper.setSlicePredicate(job.getConfiguration(), predicate);
+            ConfigHelper.setInputSlicePredicate(job.getConfiguration(), predicate);
 
             job.waitForCompletion(true);
         }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
index fdb35145..afbe235a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
@@ -70,11 +70,11 @@
 
     private void validateConfiguration(Configuration conf)
     {
-        if (ConfigHelper.getKeyspace(conf) == null || ConfigHelper.getColumnFamily(conf) == null)
+        if (ConfigHelper.getInputKeyspace(conf) == null || ConfigHelper.getInputColumnFamily(conf) == null)
         {
             throw new UnsupportedOperationException("you must set the keyspace and columnfamily with setColumnFamily()");
         }
-        if (ConfigHelper.getSlicePredicate(conf) == null)
+        if (ConfigHelper.getInputSlicePredicate(conf) == null)
         {
             throw new UnsupportedOperationException("you must set the predicate with setPredicate");
         }
@@ -87,11 +87,11 @@ private void validateConfiguration(Configuration conf)
         validateConfiguration(conf);
 
         // cannonical ranges and nodes holding replicas
-        List<TokenRange> masterRangeNodes = getRangeMap(ConfigHelper.getKeyspace(conf));
+        List<TokenRange> masterRangeNodes = getRangeMap(ConfigHelper.getInputKeyspace(conf));
 
         splitsize = ConfigHelper.getInputSplitSize(context.getConfiguration());
-        keyspace = ConfigHelper.getKeyspace(context.getConfiguration());
-        cfName = ConfigHelper.getColumnFamily(context.getConfiguration());
+        keyspace = ConfigHelper.getInputKeyspace(context.getConfiguration());
+        cfName = ConfigHelper.getInputColumnFamily(context.getConfiguration());
         
         // cannonical ranges, split into pieces, fetching the splits in parallel 
         ExecutorService executor = Executors.newCachedThreadPool();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyOutputFormat.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyOutputFormat.java
index bb630a53..4df84ffc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyOutputFormat.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyOutputFormat.java
@@ -27,15 +27,11 @@
 import java.util.List;
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import org.apache.cassandra.auth.AllowAllAuthenticator;
 import org.apache.cassandra.auth.SimpleAuthenticator;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.IColumn;
-import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.AuthenticationException;
 import org.apache.cassandra.thrift.AuthenticationRequest;
 import org.apache.cassandra.thrift.AuthorizationException;
@@ -55,6 +51,8 @@
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.transport.TSocket;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * The <code>ColumnFamilyOutputFormat</code> acts as a Hadoop-specific
@@ -108,9 +106,9 @@
     public void checkOutputSpecs(JobContext context) throws IOException, InterruptedException
     {
         validateConfiguration(context.getConfiguration());
-        String keyspace = ConfigHelper.getKeyspace(context.getConfiguration());
-        String columnFamily = ConfigHelper.getColumnFamily(context.getConfiguration());
-        SlicePredicate slicePredicate = ConfigHelper.getSlicePredicate(context.getConfiguration());
+        String keyspace = ConfigHelper.getOutputKeyspace(context.getConfiguration());
+        String columnFamily = ConfigHelper.getOutputColumnFamily(context.getConfiguration());
+        SlicePredicate slicePredicate = ConfigHelper.getOutputSlicePredicate(context.getConfiguration());
         assert slicePredicate != null;
         if (slicePredicate.column_names == null && slicePredicate.slice_range == null)
             slicePredicate = slicePredicate.setColumn_names(new ArrayList<byte[]>());
@@ -130,10 +128,8 @@ public void checkOutputSpecs(JobContext context) throws IOException, Interrupted
         }
         if (keySlices.size() > 0)
         {
-            throw new IOException("The column family " + columnFamily
-                                  + " in the keyspace " + keyspace + " already has "
-                                  + keySlices.size() + " keys in the slice predicate "
-                                  + slicePredicate);
+            throw new IOException(String.format("The column family %s in the keyspace %s already has %d keys in the slice predicate %s", 
+                                                columnFamily, keyspace, keySlices.size(), slicePredicate));
         }
     }
     
@@ -188,15 +184,14 @@ public OutputCommitter getOutputCommitter(TaskAttemptContext context) throws IOE
      */
     public void validateConfiguration(Configuration conf)
     {
-        if (ConfigHelper.getKeyspace(conf) == null || ConfigHelper.getColumnFamily(conf) == null)
+        if (ConfigHelper.getOutputKeyspace(conf) == null || ConfigHelper.getOutputColumnFamily(conf) == null)
         {
             throw new UnsupportedOperationException("you must set the keyspace and columnfamily with setColumnFamily()");
         }
-        if (ConfigHelper.getSlicePredicate(conf) == null)
+        if (ConfigHelper.getOutputSlicePredicate(conf) == null)
         {
-            System.out.println("Since no slice predicate was specified, all columns in "
-                               + ConfigHelper.getColumnFamily(conf)
-                               + " will be overwritten");
+            System.err.printf("Since no slice predicate was specified, all columns in %s will be overwritten%n",
+                              ConfigHelper.getOutputColumnFamily(conf));
         }
     }
 
@@ -218,10 +213,10 @@ public void validateConfiguration(Configuration conf)
         TBinaryProtocol binaryProtocol = new TBinaryProtocol(socket, false, false);
         Cassandra.Client client = new Cassandra.Client(binaryProtocol);
         socket.open();
-        client.set_keyspace(ConfigHelper.getKeyspace(context.getConfiguration()));
+        client.set_keyspace(ConfigHelper.getOutputKeyspace(context.getConfiguration()));
         Map<String, String> creds = new HashMap<String, String>();
-        creds.put(SimpleAuthenticator.USERNAME_KEY, ConfigHelper.getKeyspaceUserName(context.getConfiguration()));
-        creds.put(SimpleAuthenticator.PASSWORD_KEY, ConfigHelper.getKeyspacePassword(context.getConfiguration()));
+        creds.put(SimpleAuthenticator.USERNAME_KEY, ConfigHelper.getOutputKeyspaceUserName(context.getConfiguration()));
+        creds.put(SimpleAuthenticator.PASSWORD_KEY, ConfigHelper.getOutputKeyspacePassword(context.getConfiguration()));
         AuthenticationRequest authRequest = new AuthenticationRequest(creds);
         if (!(DatabaseDescriptor.getAuthenticator() instanceof AllowAllAuthenticator))
             client.login(authRequest);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
index f5ca25f2..0586670d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
@@ -91,15 +91,15 @@ public void initialize(InputSplit split, TaskAttemptContext context) throws IOEx
     {
         this.split = (ColumnFamilySplit) split;
         Configuration conf = context.getConfiguration();
-        predicate = ConfigHelper.getSlicePredicate(conf);
+        predicate = ConfigHelper.getInputSlicePredicate(conf);
         totalRowCount = ConfigHelper.getInputSplitSize(conf);
         batchRowCount = ConfigHelper.getRangeBatchSize(conf);
-        cfName = ConfigHelper.getColumnFamily(conf);
-        keyspace = ConfigHelper.getKeyspace(conf);
+        cfName = ConfigHelper.getInputColumnFamily(conf);
+        keyspace = ConfigHelper.getInputKeyspace(conf);
         
         Map<String, String> creds = new HashMap<String, String>();
-        creds.put(SimpleAuthenticator.USERNAME_KEY, ConfigHelper.getKeyspaceUserName(conf));
-        creds.put(SimpleAuthenticator.PASSWORD_KEY, ConfigHelper.getKeyspacePassword(conf));
+        creds.put(SimpleAuthenticator.USERNAME_KEY, ConfigHelper.getInputKeyspaceUserName(conf));
+        creds.put(SimpleAuthenticator.PASSWORD_KEY, ConfigHelper.getInputKeyspacePassword(conf));
         authRequest = new AuthenticationRequest(creds);
         
         iter = new RowIterator();
@@ -214,7 +214,7 @@ private void maybeConnect() throws InvalidRequestException, TException, Authenti
                 Map<String,String> ksProps = desc.get(cfName);
                 String compClass = ksProps.get("CompareWith");
                 // Get the singleton instance of the AbstractType subclass
-                Class c = Class.forName(compClass);
+                Class<?> c = Class.forName(compClass);
                 comparator = (AbstractType) c.getField("instance").get(c);
             }
         }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java
index 7965f830..abdd5b73 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java
@@ -106,7 +106,7 @@
     {
         this.context = context;
         this.mutationsByEndpoint = new HashMap<InetAddress,Map<byte[],Map<String,List<Mutation>>>>();
-        this.ringCache = new RingCache(ConfigHelper.getKeyspace(context.getConfiguration()));
+        this.ringCache = new RingCache(ConfigHelper.getOutputKeyspace(context.getConfiguration()));
         this.batchThreshold = context.getConfiguration().getLong(ColumnFamilyOutputFormat.BATCH_THRESHOLD, Long.MAX_VALUE);
     }
     
@@ -161,7 +161,7 @@ public synchronized void write(byte[] key, List<IColumn> value) throws IOExcepti
 
         Clock clock = new Clock(System.currentTimeMillis());
         List<Mutation> mutationList = new ArrayList<Mutation>();
-        cfMutation.put(ConfigHelper.getColumnFamily(context.getConfiguration()), mutationList);
+        cfMutation.put(ConfigHelper.getOutputColumnFamily(context.getConfiguration()), mutationList);
 
         if (value == null)
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ConfigHelper.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ConfigHelper.java
index f3619810..890f803a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ConfigHelper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ConfigHelper.java
@@ -21,7 +21,6 @@
  */
 
 
-import org.apache.cassandra.thrift.InvalidRequestException;
 import org.apache.cassandra.thrift.SlicePredicate;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.hadoop.conf.Configuration;
@@ -32,24 +31,29 @@
 
 public class ConfigHelper
 {
-    private static final String KEYSPACE_CONFIG = "cassandra.input.keyspace";
-    private static final String KEYSPACE_USERNAME_CONFIG = "cassandra.input.keyspace.username";
-    private static final String KEYSPACE_PASSWD_CONFIG = "cassandra.input.keyspace.passwd";
-    private static final String COLUMNFAMILY_CONFIG = "cassandra.input.columnfamily";
-    private static final String PREDICATE_CONFIG = "cassandra.input.predicate";
+    private static final String INPUT_KEYSPACE_CONFIG = "cassandra.input.keyspace";
+    private static final String OUTPUT_KEYSPACE_CONFIG = "cassandra.output.keyspace";
+    private static final String INPUT_KEYSPACE_USERNAME_CONFIG = "cassandra.input.keyspace.username";
+    private static final String INPUT_KEYSPACE_PASSWD_CONFIG = "cassandra.input.keyspace.passwd";
+    private static final String OUTPUT_KEYSPACE_USERNAME_CONFIG = "cassandra.output.keyspace.username";
+    private static final String OUTPUT_KEYSPACE_PASSWD_CONFIG = "cassandra.output.keyspace.passwd";
+    private static final String INPUT_COLUMNFAMILY_CONFIG = "cassandra.input.columnfamily";
+    private static final String OUTPUT_COLUMNFAMILY_CONFIG = "cassandra.output.columnfamily";
+    private static final String INPUT_PREDICATE_CONFIG = "cassandra.input.predicate";
+    private static final String OUTPUT_PREDICATE_CONFIG = "cassandra.output.predicate";
     private static final String INPUT_SPLIT_SIZE_CONFIG = "cassandra.input.split.size";
     private static final int DEFAULT_SPLIT_SIZE = 64*1024;
     private static final String RANGE_BATCH_SIZE_CONFIG = "cassandra.range.batch.size";
     private static final int DEFAULT_RANGE_BATCH_SIZE = 4096;
 
     /**
-     * Set the keyspace and column family for this job.
+     * Set the keyspace and column family for the input of this job.
      *
      * @param conf Job configuration you are about to run
      * @param keyspace
      * @param columnFamily
      */
-    public static void setColumnFamily(Configuration conf, String keyspace, String columnFamily)
+    public static void setInputColumnFamily(Configuration conf, String keyspace, String columnFamily)
     {
         if (keyspace == null)
         {
@@ -60,8 +64,30 @@ public static void setColumnFamily(Configuration conf, String keyspace, String c
             throw new UnsupportedOperationException("columnfamily may not be null");
         }
 
-        conf.set(KEYSPACE_CONFIG, keyspace);
-        conf.set(COLUMNFAMILY_CONFIG, columnFamily);
+        conf.set(INPUT_KEYSPACE_CONFIG, keyspace);
+        conf.set(INPUT_COLUMNFAMILY_CONFIG, columnFamily);
+    }
+
+    /**
+     * Set the keyspace and column family for the output of this job.
+     *
+     * @param conf Job configuration you are about to run
+     * @param keyspace
+     * @param columnFamily
+     */
+    public static void setOutputColumnFamily(Configuration conf, String keyspace, String columnFamily)
+    {
+        if (keyspace == null)
+        {
+            throw new UnsupportedOperationException("keyspace may not be null");
+        }
+        if (columnFamily == null)
+        {
+            throw new UnsupportedOperationException("columnfamily may not be null");
+        }
+
+        conf.set(OUTPUT_KEYSPACE_CONFIG, keyspace);
+        conf.set(OUTPUT_COLUMNFAMILY_CONFIG, columnFamily);
     }
 
     /**
@@ -116,14 +142,30 @@ public static int getInputSplitSize(Configuration conf)
      * @param conf Job configuration you are about to run
      * @param predicate
      */
-    public static void setSlicePredicate(Configuration conf, SlicePredicate predicate)
+    public static void setInputSlicePredicate(Configuration conf, SlicePredicate predicate)
+    {
+        conf.set(INPUT_PREDICATE_CONFIG, predicateToString(predicate));
+    }
+
+    public static SlicePredicate getInputSlicePredicate(Configuration conf)
+    {
+        return predicateFromString(conf.get(INPUT_PREDICATE_CONFIG));
+    }
+
+    /**
+     * Set the predicate that determines what columns will be selected from each row.
+     *
+     * @param conf Job configuration you are about to run
+     * @param predicate
+     */
+    public static void setOutputSlicePredicate(Configuration conf, SlicePredicate predicate)
     {
-        conf.set(PREDICATE_CONFIG, predicateToString(predicate));
+        conf.set(OUTPUT_PREDICATE_CONFIG, predicateToString(predicate));
     }
 
-    public static SlicePredicate getSlicePredicate(Configuration conf)
+    public static SlicePredicate getOutputSlicePredicate(Configuration conf)
     {
-        return predicateFromString(conf.get(PREDICATE_CONFIG));
+        return predicateFromString(conf.get(OUTPUT_PREDICATE_CONFIG));
     }
 
     private static String predicateToString(SlicePredicate predicate)
@@ -157,23 +199,43 @@ private static SlicePredicate predicateFromString(String st)
         return predicate;
     }
 
-    public static String getKeyspace(Configuration conf)
+    public static String getInputKeyspace(Configuration conf)
+    {
+        return conf.get(INPUT_KEYSPACE_CONFIG);
+    }
+    
+    public static String getOutputKeyspace(Configuration conf)
+    {
+        return conf.get(OUTPUT_KEYSPACE_CONFIG);
+    }
+    
+    public static String getInputKeyspaceUserName(Configuration conf)
+    {
+    	return conf.get(INPUT_KEYSPACE_USERNAME_CONFIG);
+    }
+    
+    public static String getInputKeyspacePassword(Configuration conf)
+    {
+    	return conf.get(INPUT_KEYSPACE_PASSWD_CONFIG);
+    }
+
+    public static String getOutputKeyspaceUserName(Configuration conf)
     {
-        return conf.get(KEYSPACE_CONFIG);
+    	return conf.get(OUTPUT_KEYSPACE_USERNAME_CONFIG);
     }
     
-    public static String getKeyspaceUserName(Configuration conf)
+    public static String getOutputKeyspacePassword(Configuration conf)
     {
-    	return conf.get(KEYSPACE_USERNAME_CONFIG);
+    	return conf.get(OUTPUT_KEYSPACE_PASSWD_CONFIG);
     }
     
-    public static String getKeyspacePassword(Configuration conf)
+    public static String getInputColumnFamily(Configuration conf)
     {
-    	return conf.get(KEYSPACE_PASSWD_CONFIG);
+        return conf.get(INPUT_COLUMNFAMILY_CONFIG);
     }
 
-    public static String getColumnFamily(Configuration conf)
+    public static String getOutputColumnFamily(Configuration conf)
     {
-        return conf.get(COLUMNFAMILY_CONFIG);
+        return conf.get(OUTPUT_COLUMNFAMILY_CONFIG);
     }
 }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java
index 40b4f689..69ec4a95 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java
@@ -21,16 +21,14 @@
  */
 
 
-import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import org.junit.Test;
-
 import org.apache.cassandra.thrift.SlicePredicate;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.hadoop.conf.Configuration;
+import org.junit.Test;
 
 public class ColumnFamilyInputFormatTest
 {
@@ -45,9 +43,9 @@ public void testSlicePredicate()
         SlicePredicate originalPredicate = new SlicePredicate().setColumn_names(columnNames);
 
         Configuration conf = new Configuration();
-        ConfigHelper.setSlicePredicate(conf, originalPredicate);
+        ConfigHelper.setInputSlicePredicate(conf, originalPredicate);
 
-        SlicePredicate rtPredicate = ConfigHelper.getSlicePredicate(conf);
+        SlicePredicate rtPredicate = ConfigHelper.getInputSlicePredicate(conf);
         assert rtPredicate.column_names.size() == 1;
         assert Arrays.equals(originalPredicate.column_names.get(0), rtPredicate.column_names.get(0));
     }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/SampleColumnFamilyOutputTool.java b/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/SampleColumnFamilyOutputTool.java
index db0735da..edc22ef2 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/SampleColumnFamilyOutputTool.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/SampleColumnFamilyOutputTool.java
@@ -57,10 +57,10 @@ public int run(String[] args)
         // In case your job runs out of memory, use this setting 
         // (provided you're on Hadoop 0.20.1 or later)
         // job.getConfiguration().setInt(JobContext.IO_SORT_MB, 1);
-        ConfigHelper.setColumnFamily(job.getConfiguration(),
+        ConfigHelper.setOutputColumnFamily(job.getConfiguration(),
                                      ColumnFamilyOutputFormatTest.KEYSPACE,
                                      ColumnFamilyOutputFormatTest.COLUMN_FAMILY);
-        ConfigHelper.setSlicePredicate(job.getConfiguration(), new SlicePredicate());
+        ConfigHelper.setOutputSlicePredicate(job.getConfiguration(), new SlicePredicate());
 
         SequenceFileInputFormat.addInputPath(job, inputdir);
         
