diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher.java
index 1a06e56b..a2db6697 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher.java
@@ -77,13 +77,13 @@ public void process(WatchedEvent event) {
       byte[] data = zkClient.getData(path, this, null);
       processStateChange(data);
     } catch (KeeperException e) {
-      //stop working on any keeper error
+      // nocommit: stop working on any keeper error
       e.printStackTrace();
       stop = true;
     } catch (InterruptedException e) {
       // Restore the interrupted status
       Thread.currentThread().interrupt();
-      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, "", e);
+      return;
     }
   }
 
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index fdcda71e..dada6fef 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -47,10 +47,8 @@
 import org.apache.solr.handler.ReplicationHandler;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
-import org.apache.zookeeper.KeeperException.Code;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
-import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.data.Stat;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -82,6 +80,7 @@
   public final static String COLLECTION_PARAM_PREFIX="collection.";
   public final static String CONFIGNAME_PROP="configName";
 
+  // nocommit: access to this is not thread safe!
   private final HashMap<String, CoreState> coreStates = new HashMap<String, CoreState>();
   private SolrZkClient zkClient;
   
@@ -487,6 +486,9 @@ public String register(String coreName, final CoreDescriptor desc) throws Except
       cloudDesc.setShardId(shardId);
       props.put("shard_id", shardId);
     } else {
+      // shard id was picked up in getShardId
+      props.put("shard_id", cloudDesc.getShardId());
+      shardId = cloudDesc.getShardId();
       publishState(cloudDesc, shardZkNodeName, props);
     }
 
@@ -530,7 +532,17 @@ public String register(String coreName, final CoreDescriptor desc) throws Except
     if (doRecovery) {
       doRecovery(collection, desc, cloudDesc, iamleader);
     }
-    addToZk(collection, desc, cloudDesc, shardUrl, shardZkNodeName, ZkStateReader.ACTIVE);
+    //ZkNodeProps newProps = addToZk(collection, desc, cloudDesc, shardUrl, shardZkNodeName, ZkStateReader.ACTIVE);
+    
+    // publish new props
+    Map<String,String> finalProps = new HashMap<String,String>();
+    finalProps.put(ZkStateReader.URL_PROP, shardUrl);
+    finalProps.put(ZkStateReader.NODE_NAME_PROP, getNodeName());
+    finalProps.put(ZkStateReader.ROLES_PROP, cloudDesc.getRoles());
+    finalProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);
+    finalProps.put(ZkStateReader.SHARD_ID_PROP, shardId);
+    
+    publishState(cloudDesc, shardZkNodeName, finalProps);
 
     return shardId;
   }
@@ -559,91 +571,6 @@ private boolean getShardId(final CoreDescriptor desc,
     return true;
   }
 
-
-  ZkNodeProps addToZk(String collection, final CoreDescriptor desc, final CloudDescriptor cloudDesc, String shardUrl,
-      final String shardZkNodeName, String state)
-      throws Exception {
-
-    Map<String,String> props = new HashMap<String,String>();
-    props.put(ZkStateReader.URL_PROP, shardUrl);
-    
-    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());
-    
-    props.put(ZkStateReader.ROLES_PROP, cloudDesc.getRoles());
-    
-    props.put(ZkStateReader.STATE_PROP, state);
-    
-    System.out.println("update state to:" + state);
-    ZkNodeProps zkProps = new ZkNodeProps(props);
-
-    Map<String, ZkNodeProps> shardProps = new HashMap<String, ZkNodeProps>();
-    shardProps.put(shardZkNodeName, zkProps);
-		Slice slice = new Slice(cloudDesc.getShardId(), shardProps);
-		
-		boolean persisted = false;
-		Stat stat = zkClient.exists(ZkStateReader.CLUSTER_STATE, null);
-		if (stat == null) {
-			log.info(ZkStateReader.CLUSTER_STATE + " does not exist, attempting to create");
-			try {
-				CloudState clusterState = new CloudState();
-
-				clusterState.addSlice(cloudDesc.getCollectionName(), slice);
-
-				zkClient.create(ZkStateReader.CLUSTER_STATE,
-						CloudState.store(clusterState), Ids.OPEN_ACL_UNSAFE,
-						CreateMode.PERSISTENT);
-				persisted = true;
-				log.info(ZkStateReader.CLUSTER_STATE);
-			} catch (KeeperException e) {
-				if (e.code() != Code.NODEEXISTS) {
-					// If this node exists, no big deal
-					throw e;
-				}
-			}
-		}
-		if (!persisted) {
-	
-			boolean updated = false;
-			
-			// TODO: we don't want to retry forever
-			// give up at some point
-			while (!updated) {
-		    stat = zkClient.exists(ZkStateReader.CLUSTER_STATE, null);
-				log.info("Attempting to update " + ZkStateReader.CLUSTER_STATE + " version "
-						+ stat.getVersion());
-				CloudState clusterState = CloudState.load(zkClient, zkStateReader.getCloudState().getLiveNodes());
-
-				// our second state read - should only need one? (see register)
-        slice = clusterState.getSlice(cloudDesc.getCollectionName(), cloudDesc.getShardId());
-        
-        Map<String, ZkNodeProps> shards = new HashMap<String, ZkNodeProps>();
-        shards.putAll(slice.getShards());
-        shards.put(shardZkNodeName, zkProps);
-        Slice newSlice = new Slice(slice.getName(), shards);
-        
-
-        CloudState newClusterState = new CloudState(clusterState.getLiveNodes(), clusterState.getCollectionStates());
-        clusterState.addSlice(collection, newSlice);
-    
-
-				try {
-					zkClient.setData(ZkStateReader.CLUSTER_STATE,
-							CloudState.store(clusterState), stat.getVersion());
-					updated = true;
-				} catch (KeeperException e) {
-					if (e.code() != Code.BADVERSION) {
-						throw e;
-					}
-					log.info("Failed to update " + ZkStateReader.CLUSTER_STATE + ", retrying");
-					System.out.println("Failed to update " + ZkStateReader.CLUSTER_STATE + ", retrying");
-				}
-
-			}
-		}
-    return zkProps;
-  }
-
-
   private void doRecovery(String collection, final CoreDescriptor desc,
       final CloudDescriptor cloudDesc, boolean iamleader) throws Exception,
       SolrServerException, IOException {
@@ -923,6 +850,7 @@ private void publishState(CloudDescriptor cloudDesc, String shardZkNodeName,
     try {
 
       if (!zkClient.exists(nodePath)) {
+        // nocommit: race condition - someone else might make the node first
         zkClient.makePath(nodePath);
       }
       
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
index 61bb4e8f..84426723 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
@@ -219,7 +219,9 @@ private void createJettys(int numJettys) throws Exception,
       SolrServer client = createNewSolrServer(j.getLocalPort());
       clients.add(client);
     }
-    
+    // we have to wait for the cloud state to be updated
+    // TODO: instead we should poll or something
+    Thread.sleep(1000);
     updateMappingsFromZk(jettys, clients);
     
     this.jettys.addAll(jettys);
@@ -236,7 +238,7 @@ private void createJettys(int numJettys) throws Exception,
   }
 
   private void updateMappingsFromZk(List<JettySolrRunner> jettys,
-      List<SolrServer> clients) throws InterruptedException, TimeoutException,
+      List<SolrServer> clients) throws Exception,
       IOException, KeeperException, URISyntaxException {
     for (SolrServer client : clients) {
       // find info for this client in zk
@@ -244,7 +246,9 @@ private void updateMappingsFromZk(List<JettySolrRunner> jettys,
       zkStateReader.updateCloudState(true);
       Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(
           DEFAULT_COLLECTION);
+      System.out.println("thestate:" + zkStateReader.getCloudState());
 
+      printLayout();
       
       for (Map.Entry<String,Slice> slice : slices.entrySet()) {
         Map<String,ZkNodeProps> theShards = slice.getValue().getShards();
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
index 7ddd6a30..34408177 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 
-import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.request.UpdateRequest;
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
index 4b855eb6..87a69b98 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
@@ -191,6 +191,8 @@ public void testAutoShard() throws Exception {
       cloudDesc.setShardId(null);
 
       assertEquals("shard1", shard1);
+      
+      zkController.printLayoutToStdOut();
       assertEquals("shard2", shard2);
       assertEquals("shard3", shard3);
       assertEquals("shard1", shard4);
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java
index cd5e64e0..249ecda7 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudState.java
@@ -133,6 +133,16 @@ public static CloudState load(SolrZkClient zkClient, Set<String> liveNodes) thro
 	}
 	
 	public static CloudState load(byte[] state, Set<String> liveNodes) throws KeeperException, InterruptedException {
+	  String dataString = null;
+    if (state != null) {
+      try {
+        dataString = new String(state, "UTF-8");
+      } catch (UnsupportedEncodingException e1) {
+        // TODO Auto-generated catch block
+        e1.printStackTrace();
+      }
+    }
+	  System.out.println("read state:" + dataString);
 	    
 	  Map<String,Map<String,Slice>> colStates = new HashMap<String, Map<String, Slice>>();
 	  
@@ -146,6 +156,8 @@ public static CloudState load(byte[] state, Set<String> liveNodes) throws Keeper
 				db.setErrorHandler(xmllog);
 				Document doc = db.parse(is);
 	
+				
+				
 				Element root = doc.getDocumentElement();
 	
 				NodeList collectionStates = root.getChildNodes();
@@ -225,6 +237,7 @@ public static CloudState load(byte[] state, Set<String> liveNodes) throws Keeper
 		}
 		
 		CloudState cloudState = new CloudState(liveNodes, colStates);
+		System.out.println("read state: "+ cloudState);
 		return cloudState;
 	}
 
@@ -261,7 +274,9 @@ public static CloudState load(byte[] state, Set<String> liveNodes) throws Keeper
 		w.write("</clusterstate>");
 		w.flush();
 		w.close();
-		return stringWriter.toString().getBytes("UTF-8");
+		String xml = stringWriter.toString();
+		System.out.println("xml:" + xml);
+		return xml.getBytes("UTF-8");
 
 	}
 
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudStateUtility.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudStateUtility.java
index bcdc7695..2e3e9c02 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudStateUtility.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/CloudStateUtility.java
@@ -35,6 +35,7 @@ public static CloudState get(SolrZkClient zkClient, Stat stat)
   }
   
   public static void update(SolrZkClient zkClient, CloudState state, Stat stat) throws KeeperException, InterruptedException, IOException {
+    System.out.println("publish state: "+ state);
     zkClient.setData(ZkStateReader.CLUSTER_STATE,
         CloudState.store(state));
   }
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
index 90c4a937..4d43fa33 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
@@ -24,7 +24,6 @@
 import java.io.UnsupportedEncodingException;
 import java.util.List;
 import java.util.concurrent.TimeoutException;
-import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
 import javax.xml.transform.OutputKeys;
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
index 9a021284..30e1f79f 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
@@ -43,6 +43,8 @@
   public static final String NODE_NAME_PROP = "node_name";
   public static final String ROLES_PROP = "roles";
   public static final String STATE_PROP = "state";
+  public static final String SHARD_ID_PROP = "shard_id";
+  
   public static final String LIVE_NODES_ZKNODE = "/live_nodes";
   public static final String CLUSTER_STATE = "/clusterstate.xml";
 
@@ -56,6 +58,8 @@
   public static final String LEADER_ELECT_ZKNODE = "/leader_elect";
 
 
+
+
   private static class ZKTF implements ThreadFactory {
     private static ThreadGroup tg = new ThreadGroup("ZkStateReader");
     @Override
@@ -138,11 +142,12 @@ public synchronized void createClusterStateWatchersAndUpdate() throws KeeperExce
       public void process(WatchedEvent event) {
         log.info("A cluster state change has occurred");
         try {
+          // remake watch
           byte[] data = zkClient.getData(CLUSTER_STATE, this, null);
           // delayed approach
           // ZkStateReader.this.updateCloudState(false, false);
           synchronized (ZkStateReader.this.getUpdateLock()) {
-            CloudState clusterState = CloudState.load(zkClient, ZkStateReader.this.cloudState
+            CloudState clusterState = CloudState.load(data, ZkStateReader.this.cloudState
                 .getLiveNodes());
             // update volatile
             cloudState = clusterState;
