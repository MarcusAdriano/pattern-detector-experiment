diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
index c94afe1d..80f0c755 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
@@ -216,7 +216,7 @@ private static Test decorateWithPolicy(Test test) {
         return test;
     }
 
-    private static void verifyProperties(String[] expectedValues) { 
+    private static Properties getTheProperties() {
         Properties p;
         try {
             p = NetworkServerTestSetup.getNetworkServerControl().getCurrentProperties();
@@ -226,24 +226,47 @@ private static void verifyProperties(String[] expectedValues) {
             e.printStackTrace();
             fail("unexpected exception getting properties from server");
         }
+        return p;
+    }
+
+    // check for 1 Property/Value pair, passing in expected as a String
+    // "<propertyName>=<expectedPropertyValue>"
+    private static void verifyProperties(String expectedPropAndValue) {
+        Properties p = getTheProperties();
+        assertPropertyValueCorrect(p, expectedPropAndValue);
+        p=null;
+    }
         
-        Enumeration e = p.propertyNames();
+    // check for an array of Property/Value pairs, passing each expected pair 
+    // in as a String "<propertyName>=<expectedPropertyValue>"
+    private static void verifyProperties(String[] expectedValues) { 
+        Properties p = getTheProperties();
         // for debugging:
         for (int i=0 ; i<expectedValues.length; i++){
             println("expV: " + expectedValues[i]);
         }
         assertEquals(expectedValues.length , p.size());
-        for ( int i = 0 ; i < p.size() ; i++)
+        for ( int i = 0 ; i < expectedValues.length ; i++)
         {
-            String propName = (String)e.nextElement();
-            // next line for debugging
-            println("propName: " + propName);
-            String propval = (String)p.get(propName);
-            assertEquals(expectedValues[i], propval);
+            assertPropertyValueCorrect(p, expectedValues[i]);
         }
         p = null;
     }
     
+    private static void assertPropertyValueCorrect(Properties p, String expectedPropAndValue) {
+        String[] expPropValueString = expectedPropAndValue.split("=");
+        try {
+            // for debugging
+            String actualPropertyValue = p.getProperty(expPropValueString[0]);
+            println("exppropName: " + expPropValueString[0]);
+            println("exppropValue: " + expPropValueString[1]);
+            println("actualpropValue: " + actualPropertyValue);
+            assertEquals(expPropValueString[1],actualPropertyValue);
+        } catch(Exception e) {
+            fail("could not find property " + expPropValueString[0]);
+        }
+    }
+    
     public int getAlternativePort() throws SQLException {
 
         Exception failException = null;
@@ -538,14 +561,18 @@ public void ttestDefaultProperties() throws SQLException
     {
         //check that default properties are used
         verifyProperties(new String[] {
-                // getProperties returns properties in sequence:
-                // maxThreads; sslMode; keepAlive; minThreads; portNumber;
-                // logConnections; timeSlice; startNetworkServer; host; traceAll 
-                "0", "off", "true", "0", 
+                "derby.drda.maxThreads=0", 
+                "derby.drda.sslMode=off", 
+                "derby.drda.keepAlive=true", 
+                "derby.drda.minThreads=0", 
+                "derby.drda.portNumber=" + 
                 String.valueOf(TestConfiguration.getCurrent().getPort()),
-                "false", "0", "false", 
+                "derby.drda.logConnections=false", 
+                "derby.drda.timeSlice=0", 
+                "derby.drda.startNetworkServer=false",
+                "derby.drda.host=" +
                 String.valueOf(TestConfiguration.getCurrent().getHostName()), 
-                "false"});     
+                "derby.drda.traceAll=false"});
     }
        
     /**
@@ -554,30 +581,9 @@ public void ttestDefaultProperties() throws SQLException
     public void testToggleTrace() 
     throws SQLException, IOException, InterruptedException
     {        
-        String[] expectedTraceOff = new String[] {
-                // getProperties returns properties in sequence:
-                // traceDirectory; maxThreads; sslMode; keepAlive; minThreads; 
-                // portNumber; logConnections; timeSlice; startNetworkServer;
-                // host; traceAll
-                getSystemProperty("derby.system.home"),
-                "0", "off", "true", "0", 
-                String.valueOf(TestConfiguration.getCurrent().getPort()),
-                "false", "0", "false", 
-                //String.valueOf(TestConfiguration.getCurrent().getHostName()),
-                "127.0.0.1", 
-                "false"};     
-        String[] expectedTraceOn = new String[] {
-                // getProperties returns properties in sequence:
-                // traceDirectory; maxThreads; sslMode; keepAlive; minThreads; 
-                // portNumber; logConnections; timeSlice; startNetworkServer;
-                // host; traceAll
-                getSystemProperty("derby.system.home"),
-                "0", "off", "true", "0", 
-                String.valueOf(TestConfiguration.getCurrent().getPort()),
-                "false", "0", "false", 
-                //String.valueOf(TestConfiguration.getCurrent().getHostName()),
-                "127.0.0.1", 
-                "true"};     
+        // we only care about the traceAll property, the rest will be unchanged
+        String expectedTraceOff = "derby.drda.traceAll=false";
+        String expectedTraceOn = "derby.drda.traceAll=true";      
         
         verifyProperties(expectedTraceOff);     
 
@@ -599,30 +605,9 @@ public void testToggleTrace()
     public void testToggleLogConnections() 
     throws SQLException, IOException, InterruptedException
     {
-        String[] expectedLogConnectionsOff = new String[] {
-                // getProperties returns properties in sequence:
-                // traceDirectory; maxThreads; sslMode; keepAlive; minThreads; 
-                // portNumber; logConnections; timeSlice; startNetworkServer;
-                // host; traceAll
-                getSystemProperty("derby.system.home"),
-                "0", "off", "true", "0", 
-                String.valueOf(TestConfiguration.getCurrent().getPort()),
-                "false", "0", "false", 
-                //String.valueOf(TestConfiguration.getCurrent().getHostName()),
-                "127.0.0.1", 
-                "false"};     
-        String[] expectedLogConnectionsOn = new String[] {
-                // getProperties returns properties in sequence:
-                // traceDirectory; maxThreads; sslMode; keepAlive; minThreads; 
-                // portNumber; logConnections; timeSlice; startNetworkServer;
-                // host; traceAll
-                getSystemProperty("derby.system.home"),
-                "0", "off", "true", "0", 
-                String.valueOf(TestConfiguration.getCurrent().getPort()),
-                "true", "0", "false", 
-                //String.valueOf(TestConfiguration.getCurrent().getHostName()),
-                "127.0.0.1", 
-                "false"};     
+        // only care about the LogConnections property; the rest is unchanged
+        String expectedLogConnectionsOff = "derby.drda.logConnections=false";
+        String expectedLogConnectionsOn = "derby.drda.logConnections=true";       
         
         verifyProperties(expectedLogConnectionsOff);     
 
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java
index 3150db08..e1a243ba 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java
@@ -45,7 +45,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class SysinfoTest extends BaseJDBCTestCase {
 
     private static String TARGET_POLICY_FILE_NAME="sysinfo.policy";
-    private String OUTPUT;
+    private String [] OUTPUT;
 
     /**
      * Set to true before adding a test to the suite to add some extra properties.
@@ -62,41 +62,41 @@ public SysinfoTest(String name) {
         /**
          * Output from sysinfo without the extra properties. 
          */
-        String OUTPUT1 = 
-            "--------- Derby Network Server Information --------\n" + 
-            "derby.drda.maxThreads=0\n" + 
-            "derby.drda.sslMode=off\n" + 
-            "derby.drda.keepAlive=true\n" + 
-            "derby.drda.minThreads=0\n" + 
-            "derby.drda.portNumber=1527\n" + 
-            "derby.drda.logConnections=false\n" + 
-            "derby.drda.timeSlice=0\n" + 
-            "derby.drda.startNetworkServer=false\n" + 
-            "derby.drda.traceAll=false\n" + 
-            "--------- Derby Information --------\n" + 
-            "------------------------------------------------------\n" + 
-            "----------------- Locale Information -----------------\n" + 
-            "------------------------------------------------------";
+        String [] OUTPUT1 = {
+            "--------- Derby Network Server Information --------" , 
+            "derby.drda.maxThreads=0" ,
+            "derby.drda.sslMode=off" , 
+            "derby.drda.keepAlive=true" , 
+            "derby.drda.minThreads=0" , 
+            "derby.drda.portNumber=1527" , 
+            "derby.drda.logConnections=false" ,
+            "derby.drda.timeSlice=0" , 
+            "derby.drda.startNetworkServer=false" , 
+            "derby.drda.traceAll=false" ,
+            "--------- Derby Information --------" , 
+            "------------------------------------------------------" , 
+            "----------------- Locale Information -----------------" , 
+            "------------------------------------------------------"};
 
         /**
          * Output by sysinfo with the extra properties.
          */
-        String OUTPUT2 = 
-            "--------- Derby Network Server Information --------\n" + 
-            "derby.drda.securityMechanism=USER_ONLY_SECURITY\n" + 
-            "derby.drda.maxThreads=0\n" + 
-            "derby.drda.sslMode=off\n" + 
-            "derby.drda.keepAlive=true\n" + 
-            "derby.drda.minThreads=0\n" + 
-            "derby.drda.portNumber=1527\n" + 
-            "derby.drda.logConnections=false\n" + 
-            "derby.drda.timeSlice=0\n" + 
-            "derby.drda.startNetworkServer=false\n" + 
-            "derby.drda.traceAll=false\n" + 
-            "--------- Derby Information --------\n" + 
-            "------------------------------------------------------\n" + 
-            "----------------- Locale Information -----------------\n" + 
-            "------------------------------------------------------";
+        String [] OUTPUT2 = {
+            "--------- Derby Network Server Information --------" , 
+            "derby.drda.securityMechanism=USER_ONLY_SECURITY" , 
+            "derby.drda.maxThreads=0" ,
+            "derby.drda.sslMode=off" ,
+            "derby.drda.keepAlive=true" , 
+            "derby.drda.minThreads=0" , 
+            "derby.drda.portNumber=1527" , 
+            "derby.drda.logConnections=false" ,
+            "derby.drda.timeSlice=0" ,
+            "derby.drda.startNetworkServer=false" , 
+            "derby.drda.traceAll=false" ,
+            "--------- Derby Information --------" , 
+            "------------------------------------------------------" , 
+            "----------------- Locale Information -----------------" , 
+            "------------------------------------------------------"};
 
         if (useProperties)
             OUTPUT = OUTPUT2;
@@ -203,7 +203,8 @@ private static Test decorateTest() {
      */	
     public void testSysinfo() throws Exception {
         String[] SysInfoCmd = 
-            new String[] {"org.apache.derby.drda.NetworkServerControl", "sysinfo"};
+            new String[] {"org.apache.derby.drda.NetworkServerControl", "sysinfo",
+            "-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
 
         Process p = execJavaCmd(SysInfoCmd);
         String s = readProcessOutput(p);
@@ -211,8 +212,7 @@ public void testSysinfo() throws Exception {
         s = sed(s);
 
         print("testSysinfo", s);
-        assertEquals(OUTPUT,s);
-
+        assertMatchingStringExists(s);
     }
 
     /**
@@ -223,11 +223,11 @@ public void testSysinfo() throws Exception {
     public void testSysinfoMethod() throws Exception {	
 
         String s = NetworkServerTestSetup.
-        getNetworkServerControlDefault().getSysinfo();
+        getNetworkServerControl(TestConfiguration.getCurrent().getPort()).getSysinfo();
         s = sed(s);
 
         print("testSysinfoMethod", s);
-        assertEquals(OUTPUT, s);
+        assertMatchingStringExists(s);
     }		
 
     /**
@@ -239,13 +239,14 @@ public void testSysinfoLocale() throws Exception {
 
         String[] SysInfoLocaleCmd = 
             new String[] {"-Duser.language=de", "-Duser.country=DE", 
-                "org.apache.derby.drda.NetworkServerControl", "sysinfo"};
+                "org.apache.derby.drda.NetworkServerControl", "sysinfo",
+                "-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
         Process p = execJavaCmd(SysInfoLocaleCmd);
         String s = readProcessOutput(p);
         s = sed(s);
 
         print("testSysinfoLocale", s);
-        assertEquals(OUTPUT, s);
+        assertMatchingStringExists(s);
     }
 
     /**
@@ -261,7 +262,7 @@ private String sed(String s) {
          * asserting that output is correct.
          */
         String[] sed = {"Version", "version", "Java", "OS", 
-                "[0-9*].[0-9*].[0-9*]","JRE - JDBC","derby.drda.traceDirectory",
+                "[0-9*]\\.[0-9*]\\.[0-9*]","JRE - JDBC","derby.drda.traceDirectory",
                 "Unable to access Protection Domain","listing properties",
                 "Current Locale",           //Remove these because locale info is
                 "Found support for locale:" //not printed when running from jars..
@@ -313,4 +314,33 @@ public Object run() {
         }
         return url.getPath();
     }
+    
+    private void assertMatchingStringExists(String actualOutput) {
+        String delimiter = "\n";
+        String [] actualOutputArray = actualOutput.split(delimiter);
+        int lineCount = actualOutputArray.length;
+        assertEquals(OUTPUT.length, lineCount);
+        for (int i=0 ; i<lineCount ; i++)
+        {
+            String fullExpOutput="";
+            for (int j=0 ; j < OUTPUT.length; j++) {
+                fullExpOutput=fullExpOutput + OUTPUT[j] + "\n";
+            }
+            String ns = actualOutputArray[i];
+            assertTrue("Output string: " + ns + 
+                "\ndoesn't match any of the expected strings: \n" + 
+                fullExpOutput,
+                searchMatchingString(ns));
+        }
+    }
+        
+    private boolean searchMatchingString(String substring){
+        for (int i=0; i<OUTPUT.length;i++)
+        {
+            if (!substring.equals(OUTPUT[i]))
+                continue;
+            else return true;
+        }
+        return false;
+    }
 }
