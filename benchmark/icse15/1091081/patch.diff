diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java
index 7ca7185d..4213feb4 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java
@@ -349,20 +349,15 @@ private boolean setupConnection() throws StandardException {
             return true; // will not reach this if timeout
         } catch (StandardException se) {
             throw se;
-        } catch (Exception e) {
-            // SocketTimeoutException is wrapped in
-            // PrivilegedActionException.
-            Throwable cause = e.getCause();
-            if (cause instanceof SocketTimeoutException) {
-                // Timeout! 
+        } catch (SocketTimeoutException ste) {
+            // Got a timeout. Return normally and let the caller retry.
                 return false;
-            } else {
+        } catch (Exception e) {
                 throw StandardException.newException
                     (SQLState.REPLICATION_CONNECTION_EXCEPTION, e,
                     dbname, getHostName(), String.valueOf(getPortNumber()));
             }
         }
-    }
 
     /**
      * Write the reason for the lost connection to the log (derby.log)
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Derby4910.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Derby4910.java
index e69de29b..0957dd9d 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Derby4910.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Derby4910.java
@@ -0,0 +1,135 @@
+/*
+ 
+Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_Derby4910
+ 
+Licensed to the Apache Software Foundation (ASF) under one or more
+contributor license agreements.  See the NOTICE file distributed with
+this work for additional information regarding copyright ownership.
+The ASF licenses this file to You under the Apache License, Version 2.0
+(the "License"); you may not use this file except in compliance with
+the License.  You may obtain a copy of the License at
+ 
+   http://www.apache.org/licenses/LICENSE-2.0
+ 
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+ 
+ */
+package org.apache.derbyTesting.functionTests.tests.replicationTests;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+import org.apache.derbyTesting.junit.SecurityManagerSetup;
+
+
+/**
+ * Test that the startSlave command doesn't fail if it takes more than a
+ * second before the master attempts to connect to the slave. Regression test
+ * case for DERBY-4910.
+ */
+
+public class ReplicationRun_Local_Derby4910 extends ReplicationRun
+{
+    
+    /**
+     * Creates a new instance of this test class.
+     * @param testcaseName Identifying the test.
+     */
+    public ReplicationRun_Local_Derby4910(String testcaseName)
+    {
+        super(testcaseName);
+    }
+    
+    public static Test suite()
+    {
+        TestSuite suite = new TestSuite("Replication test - DERBY-4910");
+        
+        suite.addTestSuite( ReplicationRun_Local_Derby4910.class );
+        
+        return SecurityManagerSetup.noSecurityManager(suite);
+
+    }
+
+    /**
+     * Test that a slave can wait a while for the master to connect without
+     * timing out. The startSlave command used to time out after one second
+     * before DERBY-4910.
+     */
+    public void testSlaveWaitsForMaster() throws Exception
+    {
+        cleanAllTestHosts();
+        
+        initEnvironment();
+        
+        initMaster(masterServerHost,
+                replicatedDb);
+        
+        masterServer = startServer(masterJvmVersion, derbyMasterVersion,
+                masterServerHost, ALL_INTERFACES, masterServerPort,
+                masterDbSubPath);
+        
+        slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
+                slaveServerHost, ALL_INTERFACES, slaveServerPort,
+                slaveDbSubPath);
+        
+        startServerMonitor(slaveServerHost);
+        
+        bootMasterDatabase(jvmVersion,
+                masterDatabasePath +FS+ masterDbSubPath, replicatedDb,
+                masterServerHost, masterServerPort,
+                null // bootLoad, // The "test" to start when booting db.
+                );
+        
+        initSlave(slaveServerHost,
+                jvmVersion,
+                replicatedDb);
+        
+        startSlave(jvmVersion, replicatedDb,
+                slaveServerHost, slaveServerPort,
+                slaveServerHost, 
+                slaveReplPort,
+                testClientHost);
+
+        // DERBY-4910: The slave used to time out after one second if the
+        // master hadn't connected to it yet. Wait for three seconds before
+        // starting the master to verify that this isn't a problem anymore.
+        Thread.sleep(3000L);
+        
+        startMaster(jvmVersion, replicatedDb,
+                masterServerHost, masterServerPort,
+                masterServerHost,
+                slaveServerPort, slaveServerHost,
+                slaveReplPort);
+        
+        // Replication "load"
+        String dbPath = masterDatabasePath + FS + masterDbSubPath + FS +
+                replicatedDb;
+        
+        int tuplesToInsert = 10000;
+        _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
+                dbPath, tuplesToInsert);
+        
+        failOver(jvmVersion,
+                masterDatabasePath, masterDbSubPath, replicatedDb,
+                masterServerHost, masterServerPort,
+                testClientHost);
+        
+        connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
+                slaveServerHost,slaveServerPort,
+                testClientHost);
+        
+        // verifySlave();
+        dbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
+        _verifyDatabase(slaveServerHost, slaveServerPort,
+            dbPath, tuplesToInsert);
+        // We should verify the master as well, 
+        // at least to see that we still can connect.
+        // verifyMaster();
+        dbPath = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
+        _verifyDatabase(masterServerHost, masterServerPort,
+            dbPath, tuplesToInsert);
+    }
+}
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
index baa875d5..12ec473f 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
@@ -79,6 +79,8 @@ public static Test suite() throws SQLException {
             suite.addTest(ReplicationRun_Local_Encrypted_1.suite());
 
             suite.addTest(ReplicationRun_Local_3_p6.suite());
+
+            suite.addTest(ReplicationRun_Local_Derby4910.suite());
         }
 
 		return suite;
