diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java
index cde14087..d98b83ac 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java
@@ -21,7 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.services.timer;
 
-import java.util.Timer;
+import java.util.TimerTask;
 
 /**
  * This class provides access to Timer objects for various purposes.
@@ -30,10 +30,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public interface TimerFactory
 {
     /**
-     * Returns a Timer object that can be used for adding TimerTasks
-     * that cancel executing statements.
+     * Schedule a task.
      *
-     * @return a Timer object for cancelling statements.
+     * @param task the task to schedule
+     * @param delay how many milliseconds to wait before executing the task
      */
-    public Timer getCancellationTimer();
+    void schedule(TimerTask task, long delay);
+
+    /**
+     * Cancel a task.
+     *
+     * @param task the task to cancel
+     */
+    void cancel(TimerTask task);
 }
diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java
index e69de29b..d4e45d46 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java
@@ -0,0 +1,54 @@
+/*
+
+   Derby - Class org.apache.derby.impl.services.timer.Java5SingletonTimerFactory
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.impl.services.timer;
+
+import java.util.TimerTask;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * Extension of {@code SingletonTimerFactory} that takes advantage of the
+ * new {@code Timer.purge()} method in Java 5.
+ */
+public class Java5SingletonTimerFactory extends SingletonTimerFactory {
+    /**
+     * The number of times {@link #cancel(TimerTask)} has been called.
+     * Used for determining whether it's time to purge cancelled tasks from
+     * the timer.
+     */
+    private final AtomicInteger cancelCount = new AtomicInteger();
+
+    @Override public void cancel(TimerTask task) {
+        super.cancel(task);
+
+        // DERBY-6114: Cancelled tasks stay in the timer's queue until they
+        // are scheduled to run, unless we call the purge() method. This
+        // prevents garbage collection of the tasks. Even though the tasks
+        // are small objects, there could be many of them, especially when
+        // both the transaction throughput and tasks' delays are high, it
+        // could lead to OutOfMemoryErrors. Since purge() could be a heavy
+        // operation if the queue is big, we don't call it every time a task
+        // is cancelled.
+        if (cancelCount.incrementAndGet() % 1000 == 0) {
+            getCancellationTimer().purge();
+        }
+    }
+}
diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
index 047ba50d..895c070a 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.security.PrivilegedAction;
 import java.util.Timer;
 import java.util.Properties;
+import java.util.TimerTask;
 
 
 /**
@@ -119,17 +120,27 @@ public Object run()  {
      * Returns a Timer object that can be used for adding TimerTasks
      * that cancel executing statements.
      *
-     * Implements the TimerFactory interface.
-     *
      * @return a Timer object for cancelling statements.
-     *
-     * @see TimerFactory
      */
-    public Timer getCancellationTimer()
+    Timer getCancellationTimer()
     {
         return singletonTimer;
     }
 
+    // TimerFactory interface methods
+
+    /** {@inheritDoc} */
+    public void schedule(TimerTask task, long delay) {
+        singletonTimer.schedule(task, delay);
+    }
+
+    /** {@inheritDoc} */
+    public void cancel(TimerTask task) {
+        task.cancel();
+    }
+
+    // ModuleControl interface methods
+
     /**
      * Currently does nothing, singleton Timer instance is initialized
      * in the constructor.
diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java
index 7f0bcb68..671f29af 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java
@@ -50,7 +50,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import java.util.ArrayList;
 import java.util.Iterator;
-import java.util.Timer;
 import java.util.TimerTask;
 
 /**
@@ -184,10 +183,14 @@ public void forgetContext() {
             synchronized (this) {
                 statementContext = null;
             }
-            cancel();
+            getTimerFactory().cancel(this);
         }
     }
 
+    private static TimerFactory getTimerFactory() {
+        return Monitor.getMonitor().getTimerFactory();
+    }
+
 	// StatementContext Interface
 
 	public void setInUse
@@ -209,10 +212,8 @@ public void forgetContext() {
 		this.pvs = pvs;
 		rollbackParentContext = false;
         if (timeoutMillis > 0) {
-            TimerFactory factory = Monitor.getMonitor().getTimerFactory();
-            Timer timer = factory.getCancellationTimer();
             cancelTask = new CancelQueryTask(this);
-            timer.schedule(cancelTask, timeoutMillis);
+            getTimerFactory().schedule(cancelTask, timeoutMillis);
         }
 	}
 
diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/jdbc/XATransactionState.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/jdbc/XATransactionState.java
index 99655b79..a8a73c42 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/jdbc/XATransactionState.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/jdbc/XATransactionState.java
@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 
 import java.sql.SQLException;
-import java.util.Timer;
 import java.util.TimerTask;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.timer.TimerFactory;
@@ -120,7 +119,9 @@ public void run() {
         }
     }
 
-
+    private static TimerFactory getTimerFactory() {
+        return Monitor.getMonitor().getTimerFactory();
+    }
 
 	XATransactionState(ContextManager cm, EmbedConnection conn, 
                 EmbedXAResource resource, XAXactId xid) {
@@ -315,7 +316,7 @@ boolean end(EmbedXAResource resource, int flags,
 	}
 
    /**
-    * Schedule a timeout task wich will rollback the global transaction
+    * Schedule a timeout task which will rollback the global transaction
     * after the specified time will elapse.
     *
     * @param timeoutMillis The number of milliseconds to be elapsed before
@@ -327,10 +328,8 @@ synchronized void scheduleTimeoutTask(long timeoutMillis) {
         // schedule a time out task if the timeout was specified
         if (timeoutMillis > 0) {
             // take care of the transaction timeout
-            TimerFactory timerFactory = Monitor.getMonitor().getTimerFactory();
-            Timer timer = timerFactory.getCancellationTimer();
             timeoutTask = new CancelXATransactionTask(this);
-            timer.schedule(timeoutTask, timeoutMillis);
+            getTimerFactory().schedule(timeoutTask, timeoutMillis);
         } else {
             timeoutTask = null;
         }
@@ -375,7 +374,7 @@ synchronized int xa_prepare() throws SQLException {
       */
     private void xa_finalize() {
         if (timeoutTask != null) {
-            timeoutTask.cancel();
+            getTimerFactory().cancel(timeoutTask);
             timeoutTask = null;
         }
         performTimeoutRollback = false;
diff --git a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java
index 522dc7c0..499f64f4 100644
--- a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java
+++ b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java
@@ -43,8 +43,6 @@ public static Test suite() throws Exception{
         suite.addTest(Derby3009Test.suite());
         suite.addTest(Derby5730Test.suite());
         suite.addTest(MemoryLeakFixesTest.suite());
-
-        // DERBY-5394: Let this test run as the last test - it eats up memory.
         suite.addTest(XAMemTest.suite());
         return suite;
     }
