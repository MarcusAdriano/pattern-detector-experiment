diff --git a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/IndexFileNames.java b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/IndexFileNames.java
index 2c9b28d0..0b3719ee 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/IndexFileNames.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/IndexFileNames.java
@@ -236,10 +236,6 @@ public static boolean matchesExtension(String filename, String ext) {
   public static String stripSegmentName(String filename) {
     // If it is a .del file, there's an '_' after the first character
     int idx = filename.indexOf('_', 1);
-    if (idx == -1) {
-      // nocommit messy -- for doc value filenames
-      idx = filename.indexOf('-', 1);
-    }
     if (idx == -1) {
       // If it's not, strip everything that's before the '.'
       idx = filename.indexOf('.');
diff --git a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer.java b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer.java
index cb0db654..ee37af41 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer.java
@@ -36,6 +36,8 @@
   private final Directory mainDirectory;
   private Directory directory;
   
+  final static String DOC_VALUES_SEGMENT_SUFFIX = "dv";
+  
   public DefaultDocValuesConsumer(PerDocWriteState state) throws IOException {
     super(state);
     mainDirectory = state.directory;
@@ -47,7 +49,7 @@ protected Directory getDirectory() throws IOException {
     // lazy init
     if (directory == null) {
       directory = new CompoundFileDirectory(mainDirectory,
-                                            IndexFileNames.segmentFileName(segmentName, "dv",
+                                            IndexFileNames.segmentFileName(segmentName, DOC_VALUES_SEGMENT_SUFFIX,
                                                                            IndexFileNames.COMPOUND_FILE_EXTENSION), context, true);
     }
     return directory;
@@ -64,11 +66,11 @@ public static void files(Directory dir, SegmentInfo segmentInfo, Set<String> fil
     FieldInfos fieldInfos = segmentInfo.getFieldInfos();
     for (FieldInfo fieldInfo : fieldInfos) {
       if (fieldInfo.hasDocValues()) {
-        files.add(IndexFileNames.segmentFileName(segmentInfo.name, "dv", IndexFileNames.COMPOUND_FILE_EXTENSION));
-        files.add(IndexFileNames.segmentFileName(segmentInfo.name, "dv", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
-        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, "dv", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); 
-        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, "dv", IndexFileNames.COMPOUND_FILE_EXTENSION)); 
-        return;
+        files.add(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION));
+        files.add(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
+        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); 
+        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION)); 
+        break;
       }
     }
   }
diff --git a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer.java b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer.java
index e3b15d2c..d1fee751 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer.java
@@ -46,7 +46,8 @@
   public DefaultDocValuesProducer(SegmentReadState state) throws IOException {
     if (state.fieldInfos.anyDocValuesFields()) {
       cfs = new CompoundFileDirectory(state.dir, 
-                                      IndexFileNames.segmentFileName(state.segmentInfo.name, "dv", IndexFileNames.COMPOUND_FILE_EXTENSION), 
+                                      IndexFileNames.segmentFileName(state.segmentInfo.name,
+                                                                     DefaultDocValuesConsumer.DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION), 
                                       state.context, false);
       docValues = load(state.fieldInfos, state.segmentInfo.name, state.segmentInfo.docCount, cfs, state.context);
     } else {
diff --git a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java
index d15f0914..619b1241 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java
@@ -59,7 +59,7 @@ public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {
   }
 
   public static String docValuesId(String segmentsName, int fieldId) {
-    return segmentsName + "-" + fieldId;
+    return segmentsName + "_" + fieldId;
   }
   
   
diff --git a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/Bytes.java b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/Bytes.java
index 6ec333b0..aac08af3 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/Bytes.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/Bytes.java
@@ -61,6 +61,9 @@
  * @lucene.experimental
  */
 public final class Bytes {
+
+  static final String DV_SEGMENT_SUFFIX = "dv";
+
   // TODO - add bulk copy where possible
   private Bytes() { /* don't instantiate! */
   }
@@ -244,7 +247,7 @@ protected IndexOutput getOrCreateDataOut() throws IOException {
       if (datOut == null) {
         boolean success = false;
         try {
-          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, "",
+          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,
               DATA_EXTENSION), context);
           CodecUtil.writeHeader(datOut, codecName, version);
           success = true;
@@ -269,7 +272,7 @@ protected IndexOutput getOrCreateIndexOut() throws IOException {
       boolean success = false;
       try {
         if (idxOut == null) {
-          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, "",
+          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,
               INDEX_EXTENSION), context);
           CodecUtil.writeHeader(idxOut, codecName, version);
         }
@@ -307,10 +310,10 @@ public void add(int docID, PerDocFieldValues docValues) throws IOException {
     @Override
     public void files(Collection<String> files) throws IOException {
       assert datOut != null;
-      files.add(IndexFileNames.segmentFileName(id, "", DATA_EXTENSION));
+      files.add(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX, DATA_EXTENSION));
       if (idxOut != null) { // called after flush - so this must be initialized
         // if needed or present
-        final String idxFile = IndexFileNames.segmentFileName(id, "",
+        final String idxFile = IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,
             INDEX_EXTENSION);
         files.add(idxFile);
       }
@@ -334,11 +337,11 @@ protected BytesReaderBase(Directory dir, String id, String codecName,
       IndexInput indexIn = null;
       boolean success = false;
       try {
-        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, "",
+        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,
                                                               Writer.DATA_EXTENSION), context);
         version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);
         if (doIndex) {
-          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, "",
+          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,
                                                                  Writer.INDEX_EXTENSION), context);
           final int version2 = CodecUtil.checkHeader(indexIn, codecName,
                                                      maxVersion, maxVersion);
diff --git a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/PackedIntValues.java b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/PackedIntValues.java
index 013684ef..03e4c1e3 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/PackedIntValues.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/index/values/PackedIntValues.java
@@ -156,7 +156,7 @@ public void add(int docID, PerDocFieldValues docValues) throws IOException {
     protected PackedIntsReader(Directory dir, String id, int numDocs,
         IOContext context) throws IOException {
       datIn = dir.openInput(
-          IndexFileNames.segmentFileName(id, "", Writer.DATA_EXTENSION),
+                IndexFileNames.segmentFileName(id, Bytes.DV_SEGMENT_SUFFIX, Writer.DATA_EXTENSION),
           context);
       this.numDocs = numDocs;
       boolean success = false;
diff --git a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/store/CompoundFileWriter.java b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/store/CompoundFileWriter.java
index 68c71b9e..37ae0a53 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/store/CompoundFileWriter.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/java/org/apache/lucene/store/CompoundFileWriter.java
@@ -87,6 +87,7 @@
 
   private final Directory directory;
   private final Map<String, FileEntry> entries = new HashMap<String, FileEntry>();
+  private final Set<String> seenIDs = new HashSet<String>();
   // all entries that are written to a sep. file but not yet moved into CFS
   private final Queue<FileEntry> pendingEntries = new LinkedList<FileEntry>();
   private boolean closed = false;
@@ -221,12 +222,8 @@ protected void writeEntryTable(Collection<FileEntry> entries,
       IndexOutput entryOut) throws IOException {
     entryOut.writeInt(ENTRY_FORMAT_CURRENT);
     entryOut.writeVInt(entries.size());
-    final Set<String> seenIDs = new HashSet<String>();
     for (FileEntry fe : entries) {
-      final String id = IndexFileNames.stripSegmentName(fe.file);
-      assert !seenIDs.contains(id): "file=\"" + fe.file + "\" maps to id=\"" + id + "\", which was written more than once";
-      seenIDs.add(id);
-      entryOut.writeString(id);
+      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));
       entryOut.writeLong(fe.offset);
       entryOut.writeLong(fe.length);
     }
@@ -244,6 +241,9 @@ IndexOutput createOutput(String name, IOContext context) throws IOException {
       final FileEntry entry = new FileEntry();
       entry.file = name;
       entries.put(name, entry);
+      final String id = IndexFileNames.stripSegmentName(name);
+      assert !seenIDs.contains(id): "file=\"" + name + "\" maps to id=\"" + id + "\", which was already written";
+      seenIDs.add(id);
       final DirectCFSIndexOutput out;
       if (outputTaken.compareAndSet(false, true)) {
         out = new DirectCFSIndexOutput(dataOut, entry, false);
