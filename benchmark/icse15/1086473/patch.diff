diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java
index 981bf6ca..e47ae79d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java
@@ -42,6 +42,8 @@
 import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
 import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
 import org.apache.mahout.math.DenseVector;
+import org.apache.mahout.math.RandomAccessSparseVector;
+import org.apache.mahout.math.SequentialAccessSparseVector;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.VectorWritable;
 import org.apache.mahout.math.hadoop.stochasticsvd.QJob.QJobKeyWritable;
@@ -148,8 +150,18 @@ protected void map(Writable key, VectorWritable value, Context context)
                                                                         // A row
                                                                         // labels.
 
-      int n = aRow.size();
       Vector btRow = btValue.get();
+      if ( (aRow instanceof SequentialAccessSparseVector) ||
+          (aRow instanceof RandomAccessSparseVector )) {
+        for ( Vector.Element el:aRow ) { 
+          double mul=el.get();
+          for ( int j =0; j < kp; j++ ) 
+            btRow.setQuick(j, mul * qRow.getQuick(j));
+          btKey.set(el.index());
+          context.write(btKey, btValue);
+        }
+      } else { 
+        int n = aRow.size();
       for (int i = 0; i < n; i++) {
         double mul = aRow.getQuick(i);
         for (int j = 0; j < kp; j++)
@@ -157,6 +169,7 @@ protected void map(Writable key, VectorWritable value, Context context)
         btKey.set(i);
         context.write(btKey, btValue);
       }
+      }
 
     }
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/Omega.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/Omega.java
index 6fdc6d2e..697f8bc8 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/Omega.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/Omega.java
@@ -20,6 +20,7 @@
 import java.util.Arrays;
 import java.util.Random;
 
+import org.apache.mahout.math.RandomAccessSparseVector;
 import org.apache.mahout.math.SequentialAccessSparseVector;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.Vector.Element;
@@ -59,7 +60,8 @@ public void computeYRow(Vector aRow, double[] yRow) {
     assert yRow.length == kp;
 
     Arrays.fill(yRow, 0);
-    if (aRow instanceof SequentialAccessSparseVector) {
+    if ((aRow instanceof SequentialAccessSparseVector)||
+        (aRow instanceof RandomAccessSparseVector)){
       int j = 0;
       for (Element el : aRow) {
         accumDots(j, el.get(), yRow);
