diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java
index 7280896e..ff11acb9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java
@@ -92,13 +92,6 @@ public static Test suite()
         Test test = suite;
         TestSetup setup = 
             new CleanDatabaseTestSetup(test) {
-                protected void decorateSQL(Statement s) throws SQLException {
-                    // table used to test  export.
-                    s.execute("CREATE TABLE BOOKS(id int," +
-                              "name varchar(30)," + 
-                              "content clob, " + 
-                              "pic blob )");
-                }
                  protected void setUp() throws Exception {
                      super.setUp();
                      //shutdown the database. 
@@ -127,28 +120,14 @@ protected void setUp() throws Exception
         loader_2 = createDerbyClassLoader(urls);
     }
 
-
-    /**
-     * Given a loaded class, this
-     * routine asks the class's class loader for information about where the
-     * class was loaded from. Typically, this is a file, which might be
-     * either a class file or a jar file. The routine figures that out, and
-     * returns the name of the file. If it can't figure it out, it returns null
-     */
-    private DerbyURLClassLoader createDerbyClassLoader(final URL[] urls) 
+    protected void    tearDown()
         throws Exception 
     {
-        try {
-            return (DerbyURLClassLoader)AccessController.doPrivileged(
-            new java.security.PrivilegedExceptionAction(){   
-             public Object run()
-             {
-                 return new DerbyURLClassLoader(urls);
-             }
-         });
-        }catch(PrivilegedActionException pae) {
-            throw pae.getException();
-        }
+        if ( mainLoader != null ) { setThreadLoader(mainLoader); }
+
+        loader_1 = null;
+        loader_2 = null;
+        mainLoader = null;
     }
 
 
@@ -159,41 +138,20 @@ public Object run()
      * either a class file or a jar file. The routine figures that out, and
      * returns the name of the file. If it can't figure it out, it returns null
      */
-    private static URL getFileWhichLoadedClass(final Class cls) throws Exception 
+    private DerbyURLClassLoader createDerbyClassLoader(final URL[] urls) 
+        throws Exception 
     {
-        try {
-         return (URL)AccessController.doPrivileged(
+        return (DerbyURLClassLoader)AccessController.doPrivileged
+            (
          new java.security.PrivilegedExceptionAction(){   
              public Object run()
              {
-                 CodeSource cs = null;
-                 cs = cls.getProtectionDomain().getCodeSource ();
-                 if ( cs == null )
-                     return null;        
-                 return cs.getLocation ();
+                     return new DerbyURLClassLoader(urls);
                  }
          });
-        }catch(PrivilegedActionException pae) {
-            throw pae.getException();
-        }
     }
     
-    private URL getURL(final File file) throws MalformedURLException
-    {
-        try {
-            return (URL) AccessController.doPrivileged
-            (new java.security.PrivilegedExceptionAction(){
-
-                public Object run() throws MalformedURLException{
-                return file.toURL();
 
-                }
-            }
-             );
-        } catch (PrivilegedActionException e) {
-            throw (MalformedURLException) e.getException();
-        } 
-    }
 
     /* 
      * Test booting a database, that was alreadt booted by another class loader.
@@ -214,7 +172,6 @@ public void testBootingAnAlreadyBootedDatabase() throws SQLException
         
         // first boot the database using one loader and attempt 
         // to boot it using another loader, it should fail to boot.
-        try {
 
             setThreadLoader(loader_1);
             DataSource ds_1 = JDBCDataSource.getDataSource();
@@ -233,13 +190,6 @@ public void testBootingAnAlreadyBootedDatabase() throws SQLException
             // shutdown the database.
             setThreadLoader(loader_1);
             JDBCDataSource.shutdownDatabase(ds_1);
-            
-        } catch (SQLException se) {
-            dumpSQLException(se);
-        }finally {
-            // set the thread context loader back to the generic one. 
-            setThreadLoader(mainLoader);
-        }
     }
 
     
@@ -251,7 +201,6 @@ public void testBootingDatabaseShutdownByAnotherCLR() throws SQLException
     {
         // first boot the database using one loader and shutdown and then 
         // attempt to boot it using another loader, it should boot.
-        try {
 
             setThreadLoader(loader_1);
             DataSource ds_1 = JDBCDataSource.getDataSource();
@@ -264,13 +213,6 @@ public void testBootingDatabaseShutdownByAnotherCLR() throws SQLException
             ds_2.getConnection();
             // shutdown the database.
             JDBCDataSource.shutdownDatabase(ds_2);
-            
-        } catch (SQLException se) {
-            dumpSQLException(se);
-        }finally {
-            // set the thread context loader back to the generic one. 
-            setThreadLoader(mainLoader);
-        }
     }
 
 
@@ -288,15 +230,6 @@ public Object run()  {
     }
 
 
-    private static void dumpSQLException(SQLException se)
-    {
-		while (se != null)
-		{
-			se.printStackTrace();
-			se = se.getNextException();
-		}		
-	}	
-
 	private static void assertPreventDualBoot(SQLException ne) {
 		assertNotNull(ne);
 		String state = ne.getSQLState();
