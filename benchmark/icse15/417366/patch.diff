diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 9df8e745..d917ad3b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -3835,7 +3835,7 @@ public boolean repositionScrollableResultSetBeforeJDBC1PositionedUpdateDelete()
         long rowToFetch = getRowUncast() - absolutePosition_;
 
         // if rowToFetch is zero, already positioned on the current row
-        if (rowToFetch != 0 || cursorUnpositionedOnServer_) {
+        if (rowToFetch != 0) {
             writePositioningFetch_((generatedSection_ == null) ? statement_.section_ : generatedSection_,
                     scrollOrientation_relative__,
                     rowToFetch);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java
index be0262fc..b4304377 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java
@@ -210,6 +210,18 @@ Only valid of returnsRows() returns false.
 	 */
 	ExecRow	setAfterLastRow() throws StandardException;
 
+    /**
+	 * Clear the current row. The cursor keeps it current position,
+	 * however it cannot be used for positioned updates or deletes
+	 * until a fetch is done.
+	 * This is done after a commit on holdable
+	 * result sets.
+	 * A fetch is achieved by calling one of the positioning 
+	 * methods: getLastRow(), getNextRow(), getPreviousRow(), 
+	 * getFirstRow(), getRelativeRow(..) or getAbsoluteRow(..).
+	 */
+	void clearCurrentRow();
+	 
     /**
 		Determine if the result set is at one of the positions
 		according to the constants above (ISBEFOREFIRST etc).
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java
index d1d31f5a..6b46a044 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java
@@ -149,12 +149,6 @@
 	 */
 	public void setCurrentRow(ExecRow row);
 
-	/**
-	 * Clear the current row
-	 *
-	 */
-	public void clearCurrentRow();
-
 	/**
 	 * Do we need to relock the row when going to the heap.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
index 7f2bffa8..b1d873aa 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
@@ -361,12 +361,15 @@ public ResultDescription getResultDescription() {
 	public void reset() throws StandardException
 	{
 		// if resultset holdability after commit is false, close it
-		if (resultSet != null && (!resultSetHoldability || !resultSet.returnsRows())) {
+		if (resultSet != null) {
+			if (!resultSetHoldability || !resultSet.returnsRows()) {			
 			// would really like to check if it is open,
 			// this is as close as we can approximate that.
 			resultSet.close();
 			resultSet = null; // forget about it, prepare for next exec.
-
+			} else if (resultSet.returnsRows()) {
+				resultSet.clearCurrentRow();
+			}
 		}
 		updateHeapCC = null;
 		// REMIND: do we need to get them to stop input as well?
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
index 4dda0161..351f960a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
@@ -114,7 +114,7 @@ public ExecRow	getNextRowCore() throws StandardException {
 
 				// requalify the current row
 				if (cursorRow == null) {
-				     throw StandardException.newException(SQLState.LANG_NO_CURRENT_ROW, cursorName);
+					throw StandardException.newException(SQLState.NO_CURRENT_ROW);
 				}
 				// we know it will be requested, may as well get it now.
 				rowLocation = cursor.getRowLocation();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java
index 0fe9c33f..b09aabea 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java
@@ -358,6 +358,7 @@ public final void setCurrentRow(ExecRow row)
 	 */
 	public final void clearCurrentRow()
 	{
+		currentRow = null;
 		activation.clearCurrentRow(resultSetNumber);
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
index 98f1038c..95003cff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
@@ -313,6 +313,16 @@ public ExecRow	setAfterLastRow()
 		throw StandardException.newException(SQLState.LANG_DOES_NOT_RETURN_ROWS, "afterLast");
 	}
 
+    /**
+	 * Clear the current row. This is done after a commit on holdable
+	 * result sets.
+	 * This is a no-op on result set which do not provide rows.
+	 */
+	public final void clearCurrentRow() 
+	{
+		
+	}
+
     /**
      * Determine if the cursor is before the first row in the result 
      * set.   
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
index 081c257d..3efd9f5d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
@@ -18,6 +18,7 @@
  * language governing permissions and limitations under the License.
  */
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -244,6 +245,125 @@ public void testFailOnUpdateOfReadOnlyResultSet5()
         assertFailOnUpdate(rs);
     }
 
+    /**
+     * Test that when doing an update immediately after
+     * a commit, the update fails, because the cursor has been 
+     * postioned between the current row and the next row.
+     * The test uses a FORWARD_ONLY resultset and ResultSet update methods
+     * when doing the update.
+     */
+    public void testCursorStateAfterCommit1() 
+        throws SQLException
+    {
+        testCursorStateAfterCommit(false, ResultSet.TYPE_FORWARD_ONLY);
+    }
+
+    /** 
+     * Test that when doing an update immediately after
+     * a commit, the update fails, because the cursor has been 
+     * postioned between the current row and the next row.
+     * The test uses a SCROLL_INSENSITIVE resultset and ResultSet update methods
+     * when doing the update.
+     */
+    public void testCursorStateAfterCommit2() 
+        throws SQLException
+    {
+        testCursorStateAfterCommit(false, ResultSet.TYPE_SCROLL_INSENSITIVE);
+    }
+    
+     /** 
+     * Test that when doing an update immediately after
+     * a commit, the update fails, because the cursor has been 
+     * postioned between the current row and the next row.
+     * The test uses a FORWARD_ONLY resultset and positioned updates.
+     */
+    public void testCursorStateAfterCommit3() 
+        throws SQLException
+    {
+        testCursorStateAfterCommit(true, ResultSet.TYPE_FORWARD_ONLY);
+    }
+
+    /** 
+     * Test that when doing an update immediately after
+     * a commit, the update fails, because the cursor has been 
+     * postioned between the current row and the next row.
+     * The test uses a SCROLL_INSENSITIVE resultset and positioned updates.
+     */
+    public void testCursorStateAfterCommit4() 
+        throws SQLException
+    {
+        testCursorStateAfterCommit(true, ResultSet.TYPE_SCROLL_INSENSITIVE);
+    }
+    
+    /** 
+     * Test that when doing an update immediately after
+     * a commit, the update fails, because the cursor has been 
+     * postioned between the current row and the next row.
+     * If the cursor gets repositioned, it allows an update.
+     * @param positioned true to use positioned update, otherwise use 
+     *                   ResultSet.updateRow()
+     * @param resultSetType type of result set (as in ResultSet.getType())
+     */
+    private void testCursorStateAfterCommit(final boolean positioned, 
+                                            final int resultSetType) 
+        throws SQLException
+    {
+        final Statement s = con.createStatement(resultSetType, 
+                                                ResultSet.CONCUR_UPDATABLE);
+        final String cursorName = getNextCursorName();
+        s.setCursorName(cursorName);
+        
+        final ResultSet rs = s.executeQuery("select a from t1");
+        final int recordToUpdate = 5;
+        
+        if (resultSetType==ResultSet.TYPE_FORWARD_ONLY) {
+            for (int i = 0; i < recordToUpdate; i++) {
+                rs.next();
+            }
+        } else {
+            rs.absolute(recordToUpdate);
+        }
+        
+        con.commit();
+        
+        PreparedStatement ps = 
+            con.prepareStatement("update t1 set a=? where current of " +
+                                 cursorName);
+        // First: check that we get an exception on update without repositioning:
+        try {
+            if (positioned) {
+                ps.setInt(1, -1);
+                ps.executeUpdate();                
+                fail("Expected exception to be thrown on positioned update " + 
+                     "since cursor is not positioned");
+            } else {
+                rs.updateInt(1, -1);
+                rs.updateRow();
+                fail("Expected exception to be thrown on updateRow() since " +
+                     "cursor is not positioned");
+            }
+        } catch (SQLException e) {
+            assertSQLState("Unexpected SQLState when updating row after commit",
+                           SQLStateConstants.INVALID_CURSOR_STATE_NO_SUBCLASS,
+                           e);
+        }
+        
+        // Check that we after a repositioning can update:
+        if (resultSetType==ResultSet.TYPE_FORWARD_ONLY) {
+            rs.next();
+        } else {
+            rs.relative(0);
+        }
+        if (positioned) {
+            ps.setInt(1, -1);
+            ps.executeUpdate();                
+        } else {
+            rs.updateInt(1, -1);
+            rs.updateRow();
+        }
+        
+    }
+
     /**
      * Test that you can correctly run multiple updateXXX() + updateRow() 
      * combined with cancelRowUpdates().
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/currentof.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/currentof.java
index ee2d3eca..add59e81 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/currentof.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/currentof.java
@@ -238,7 +238,7 @@ static void testDelete() throws SQLException {
    		} catch (SQLException se) {
 			String m = se.getSQLState();
 			JDBCDisplayUtil.ShowSQLException(System.out,se);
-			if ("XCL08".equals(m)) {
+			if ("24000".equals(m)) {
 				caught = true;
 				System.out.println("PASS: Attempt to delete cursor before first row caught");
 			} else {
@@ -296,7 +296,7 @@ static void testDelete() throws SQLException {
    		} catch (SQLException se) {
 			String m = se.getSQLState();
 			JDBCDisplayUtil.ShowSQLException(System.out,se);
-			if ("XCL08".equals(m)) {
+			if ("24000".equals(m)) {
 				caught = true;
 				System.out.println("PASS: Attempt to delete cursor past last row caught");
 			} else {
@@ -593,7 +593,7 @@ static void testUpdate() throws SQLException {
    		} catch (SQLException se) {
 			String m = se.getSQLState();
 			JDBCDisplayUtil.ShowSQLException(System.out,se);
-			if ("XCL08".equals(m)) {
+			if ("24000".equals(m)) {
 				caught = true;
 				System.out.println("PASS: Attempt to update cursor before first row caught");
 			} else {
@@ -628,7 +628,7 @@ static void testUpdate() throws SQLException {
    		} catch (SQLException se) {
 			String m = se.getSQLState();
 			JDBCDisplayUtil.ShowSQLException(System.out,se);
-			if ("XCL08".equals(m)) {
+			if ("24000".equals(m)) {
 				caught = true;
 				System.out.println("PASS: Attempt to update cursor past last row caught");
 			} else {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java
index 4bde1b27..41064c30 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseJDBCTestCase.java
@@ -130,10 +130,8 @@ public static void assertSQLState(String message,
                                       SQLException exception) {
         // Make sure exception is not null. We want to separate between a
         // null-exception object, and a null-SQLState.
-        if (exception == null) {
-            throw new IllegalArgumentException("Exception cannot be null " +
-                                               "when asserting SQLState");
-        }
+        assertNotNull("Exception cannot be null when asserting on SQLState", 
+                      exception);
         
         String state = exception.getSQLState();
         
