diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
index d3ac41e6..3b683586 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
@@ -338,7 +338,7 @@ public abstract void checkpointInRollForwardRecovery(LogInstant cinstant,
 		throws StandardException;
 
 	
-    /*
+    /**
      * Make the transaction block the online backup.
      *
      * @param wait if <tt>true</tt>, waits until the transaction
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
index 17c5e644..3fbcbc87 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
@@ -60,7 +60,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	*/
 	public LockFactory getLockFactory();
 
-	/*
+	/**
 	 * Return the module providing XAresource interface to the transaction
      * table.
      *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java
index 55b8f20c..0c0f4bc4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java
@@ -167,7 +167,7 @@ void add(Xact xact, boolean exclude)
 		}
 	}
 
-	/*
+	/**
 		remove the transaction Id an return false iff the transaction is found
 		in the table and it doesn't need exclusion during quiesce state
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
index 35131715..3c33485d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
@@ -2332,7 +2332,7 @@ void setPostComplete() {
 	}
 
 
-    /*
+    /**
      * Make the transaction block the online backup.
      *
      * @param wait if <tt>true</tt>, waits until the transaction
@@ -2352,7 +2352,7 @@ public boolean blockBackup(boolean wait)
 		return backupBlocked;
 	}
 	
-	/*
+	/**
 	 * Unblock the backup, if it was blocked by some operation in 
 	 * this transaction. Unblocking is done at commit/abort of this 
 	 * transaction.
@@ -2651,20 +2651,20 @@ public String toString()
 	}
 
 	
-	/* 
+	/**
 	 * Get string id of the transaction that would be when the Transaction
 	 * is IN active state.
 	 *
-	 *This transaction "name" will be the same id which is returned in
+	 * This transaction "name" will be the same id which is returned in
 	 * the TransactionInfo information if Tx is already in Active State.
 	 * If the Transaction is in IDLE state, Transaction ID is 
 	 * incremented when getActiveStateTxIdString() on raw transaction is called,
 	 * instead of the Tx ID being incremented when Transaction gets into
 	 * active state. The reason for incrementing the Tx ID earlier than when Tx
 	 * is actually goes into active state is some debug statement cases like 
-	 * log statement text. SQL  statements are wriited  to log before they are
-	 * actully executed; In such cases we would like to display the actual TX ID on which 
-	 * locks are acquired when the statement is executed.
+	 * log statement text. SQL statements are written to log before they are
+	 * actually executed; In such cases we would like to display the actual TX
+	 * ID on which locks are acquired when the statement is executed.
 	 * @return The a string which identifies the transaction.  
 	 */
 	public String getActiveStateTxIdString()
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
index 66bed274..98fc543b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
@@ -667,7 +667,7 @@ public void setNewTransactionId(TransactionId oldxid, Xact t)
 			add(t, excludeMe);
 	}
 
-	/*
+	/**
 	**	Set the shortTranId, this is called by the log factory after recovery
 	*/
 	public void resetTranId()
@@ -843,7 +843,7 @@ public boolean hasPreparedXact()
 
 
 
-	/*
+	/**
 		remove the transaction Id an return false iff the transaction is found
 		in the table and it doesn't need exclusion from quiesce state
 	 */
@@ -914,7 +914,7 @@ final LockingPolicy getLockingPolicy(
 		return null;
 	}
 
-	/*
+	/**
 		Return the transaction table to be logged with the checkpoint operation
 	 */
 	public Formatable getTransactionTable()
@@ -922,7 +922,7 @@ public Formatable getTransactionTable()
 		return ttab;
 	}
 
-	/*
+	/**
 		Use this transaction table, which is gotten from a checkpoint
 		operation.  Use ONLY during recovery.
 	 */
@@ -966,13 +966,15 @@ public void useTransactionTable(Formatable transactionTable)
 	}
 
 
-	// @return false, if the Database creation finished
+	/**
+	 * @return false, if the Database creation finished
+	 */
 	public boolean inDatabaseCreation()
 	{
 		return inCreateNoLog;
 	}
 	
-	/*
+	/**
 	 * Return the module providing XAresource interface to the transaction 
      * table. 
      *
