diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java
index 8c0d5434..bf5ec7cc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.sql.execute.rts;
 
 import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.i18n.MessageService;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
@@ -36,8 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	extends RealDeleteResultSetStatistics
 {
 
-	/* Leave these fields public for object inspectors */
-	public 	ResultSetStatistics[] 	dependentTrackingArray;
+	private 	ResultSetStatistics[] 	dependentTrackingArray;
 
 	// CONSTRUCTORS
 
@@ -56,7 +56,7 @@ public	RealDeleteCascadeResultSetStatistics(
 								)
 	{
 		super(rowCount, deferred, indexesUpdated, tableLock, executeTime, sourceResultSetStatistics);
-		this.dependentTrackingArray = dependentTrackingArray;
+		this.dependentTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( dependentTrackingArray );
 	}
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java
index df3b0b42..b9dc453b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.execute.rts;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.util.PropertyUtil;
 import org.apache.derby.iapi.util.StringUtil;
@@ -116,7 +117,7 @@ public	RealHashScanStatistics(
 		this.indexName = indexName;
 		this.isConstraint = isConstraint;
 		this.hashtableSize = hashtableSize;
-		this.hashKeyColumns = hashKeyColumns;
+		this.hashKeyColumns = ArrayUtil.copy( hashKeyColumns );
 		this.scanQualifiers = scanQualifiers;
 		this.nextQualifiers = nextQualifiers;
 		this.scanProperties = new FormatableProperties();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java
index e3d7d3ce..a8c753fb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.sql.execute.rts;
 
 import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
 import org.apache.derby.iapi.services.i18n.MessageService;
@@ -98,7 +99,7 @@ public	RealHashTableStatistics(
 			optimizerEstimatedCost
 			);
 		this.hashtableSize = hashtableSize;
-		this.hashKeyColumns = hashKeyColumns;
+		this.hashKeyColumns = ArrayUtil.copy( hashKeyColumns );
 		this.nextQualifiers = nextQualifiers;
 		this.scanProperties = new FormatableProperties();
 		if (scanProperties != null)
@@ -109,7 +110,7 @@ public	RealHashTableStatistics(
 				this.scanProperties.put(key, scanProperties.get(key));
 			}
 		}
-		this.subqueryTrackingArray = subqueryTrackingArray;
+		this.subqueryTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( subqueryTrackingArray );
 		this.childResultSetStatistics = childResultSetStatistics;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealProjectRestrictStatistics.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealProjectRestrictStatistics.java
index b8cbf8de..3f7d3657 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealProjectRestrictStatistics.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RealProjectRestrictStatistics.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
 import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
 import org.apache.derby.iapi.services.i18n.MessageService;
@@ -96,7 +97,7 @@ public	RealProjectRestrictStatistics(
 		this.doesProjection = doesProjection;
 		this.restrictionTime = restrictionTime;
 		this.projectionTime = projectionTime;
-		this.subqueryTrackingArray = subqueryTrackingArray;
+		this.subqueryTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( subqueryTrackingArray );
 		this.childResultSetStatistics = childResultSetStatistics;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java
index a2c2858b..b379717a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.sql.execute.rts;
 
 import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.io.Formatable;
 
@@ -97,11 +98,15 @@ public	RunTimeStatisticsImpl(
 		this.optimizeTime = optimizeTime;
 		this.generateTime = generateTime;
 		this.executeTime = executeTime;
-		this.beginCompilationTimestamp = beginCompilationTimestamp;
-		this.endCompilationTimestamp = endCompilationTimestamp;
-		this.beginExecutionTimestamp = beginExecutionTimestamp;
-		this.endExecutionTimestamp = endExecutionTimestamp;
-		this.subqueryTrackingArray = subqueryTrackingArray;
+		this.beginCompilationTimestamp =beginCompilationTimestamp == null ?
+            null : (Timestamp) beginCompilationTimestamp.clone();
+		this.endCompilationTimestamp = endCompilationTimestamp == null ?
+            null : (Timestamp) endCompilationTimestamp.clone();
+		this.beginExecutionTimestamp = beginExecutionTimestamp == null ?
+            null : (Timestamp) beginExecutionTimestamp.clone();
+		this.endExecutionTimestamp = endExecutionTimestamp == null ?
+            null : (Timestamp) endExecutionTimestamp.clone();
+		this.subqueryTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( subqueryTrackingArray );
 		this.topResultSetStatistics = topResultSetStatistics;
 	}
 
@@ -174,7 +179,7 @@ public long getExecuteTimeInMillis()
 	 */
 	public Timestamp getBeginCompilationTimestamp()
 	{
-		return beginCompilationTimestamp;
+		return beginCompilationTimestamp == null ?  null : (Timestamp) beginCompilationTimestamp.clone();
 	}
 
 	/**
@@ -184,7 +189,7 @@ public Timestamp getBeginCompilationTimestamp()
 	 */
 	public Timestamp getEndCompilationTimestamp()
 	{
-		return endCompilationTimestamp;
+		return endCompilationTimestamp == null ? null : (Timestamp) endCompilationTimestamp.clone();
 	}
 
 	/**
@@ -194,7 +199,7 @@ public Timestamp getEndCompilationTimestamp()
 	 */
 	public Timestamp getBeginExecutionTimestamp()
 	{
-		return beginExecutionTimestamp;
+		return beginExecutionTimestamp == null ? null : (Timestamp) beginExecutionTimestamp.clone();
 	}
 
 	/**
@@ -204,7 +209,7 @@ public Timestamp getBeginExecutionTimestamp()
 	 */
 	public Timestamp getEndExecutionTimestamp()
 	{
-		return endExecutionTimestamp;
+		return endExecutionTimestamp == null ? null : (Timestamp) endExecutionTimestamp.clone();
 	}
 
 	/**
