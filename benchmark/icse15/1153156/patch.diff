diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/SystemTable.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/SystemTable.java
index 32b641cb..94b27894 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/SystemTable.java
@@ -404,9 +404,8 @@ public static NodeId getCurrentLocalNodeId()
      * table)
      * @param newNodeId the new current local node id to record
      */
-    public static void writeCurrentLocalNodeId(NodeId oldNodeId, NodeId newNodeId)
+    public static void writeCurrentLocalNodeId(NodeId oldNodeId, NodeId newNodeId, long now)
     {
-        long now = System.currentTimeMillis();
         ByteBuffer ip = ByteBuffer.wrap(FBUtilities.getLocalAddress().getAddress());
 
         ColumnFamily cf = ColumnFamily.create(Table.SYSTEM_TABLE, NODE_ID_CF);
@@ -441,7 +440,7 @@ public static void writeCurrentLocalNodeId(NodeId oldNodeId, NodeId newNodeId)
         ColumnFamily cf = table.getColumnFamilyStore(NODE_ID_CF).getColumnFamily(filter);
 
         NodeId previous = null;
-        for (IColumn c : cf.getReverseSortedColumns())
+        for (IColumn c : cf)
         {
             if (previous != null)
                 l.add(new NodeId.NodeIdRecord(previous, c.timestamp()));
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java
index f4375ebb..59883aad 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java
@@ -193,7 +193,7 @@ protected IColumn getReduced()
             assert container != null;
             IColumn reduced = container.iterator().next();
             ColumnFamily purged = shouldPurge ? ColumnFamilyStore.removeDeleted(container, controller.gcBefore) : container;
-            if (purged != null && purged.metadata().getDefaultValidator().isCommutative())
+            if (shouldPurge && purged != null && purged.metadata().getDefaultValidator().isCommutative())
             {
                 CounterColumn.removeOldShards(purged, controller.gcBefore);
             }
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java
index b168a4ae..6f151fee 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java
@@ -82,8 +82,9 @@ public PrecompactedRow(CompactionController controller, List<SSTableIdentityIter
                 cf.addAll(thisCF);
             }
         }
-        compactedCf = controller.shouldPurge(key) ? ColumnFamilyStore.removeDeleted(cf, controller.gcBefore) : cf;
-        if (compactedCf != null && compactedCf.metadata().getDefaultValidator().isCommutative())
+        boolean shouldPurge = controller.shouldPurge(key);
+        compactedCf = shouldPurge ? ColumnFamilyStore.removeDeleted(cf, controller.gcBefore) : cf;
+        if (shouldPurge && compactedCf != null && compactedCf.metadata().getDefaultValidator().isCommutative())
         {
             CounterColumn.removeOldShards(compactedCf, controller.gcBefore);
         }
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/context/CounterContext.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/context/CounterContext.java
index aff555c5..54d66e0c 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/context/CounterContext.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/context/CounterContext.java
@@ -21,6 +21,8 @@
 import java.security.MessageDigest;
 import java.util.*;
 
+import org.apache.log4j.Logger;
+
 import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.db.DBConstants;
 import org.apache.cassandra.utils.ByteBufferUtil;
@@ -65,6 +67,8 @@
     private static final int COUNT_LENGTH = DBConstants.longSize_;
     private static final int STEP_LENGTH = NodeId.LENGTH + CLOCK_LENGTH + COUNT_LENGTH;
 
+    private static final Logger logger = Logger.getLogger(CounterContext.class);
+
     // Time in ms since a node id has been renewed before we consider using it
     // during a merge
     private static final long MIN_MERGE_DELAY = 5 * 60 * 1000; // should be aplenty
@@ -524,6 +528,8 @@ public ByteBuffer computeOldShardMerger(ByteBuffer context, List<NodeId.NodeIdRe
             if (now - currRecord.timestamp < MIN_MERGE_DELAY)
                 return context;
 
+            assert !currRecord.id.equals(NodeId.getLocalId());
+
             int c = state.getNodeId().compareTo(currRecord.id);
             if (c == 0)
             {
@@ -539,6 +545,8 @@ public ByteBuffer computeOldShardMerger(ByteBuffer context, List<NodeId.NodeIdRe
                 }
                 else
                 {
+                    assert !foundState.getNodeId().equals(state.getNodeId());
+
                     // Found someone to merge it to
                     int nbDelta = foundState.isDelta() ? 1 : 0;
                     nbDelta += state.isDelta() ? 1 : 0;
@@ -585,20 +593,24 @@ public ByteBuffer removeOldShards(ByteBuffer context, int gcBefore)
         int hlength = headerLength(context);
         ContextState state = new ContextState(context, hlength);
         int removedBodySize = 0, removedHeaderSize = 0;
+        boolean forceFixing = false;
         while (state.hasRemaining())
         {
             long clock = state.getClock();
-            if (clock < 0 && -((int)(clock / 1000)) < gcBefore)
+            if (clock < 0 && -((int)(clock / 1000)) < gcBefore && (state.getCount() == 0 || !state.isDelta()))
             {
-                assert state.getCount() == 0;
                 removedBodySize += STEP_LENGTH;
                 if (state.isDelta())
                     removedHeaderSize += HEADER_ELT_LENGTH;
             }
+            else if (clock < 0 && state.getCount() != 0 && state.isDelta())
+            {
+                forceFixing = true;
+            }
             state.moveToNext();
         }
 
-        if (removedBodySize == 0)
+        if (removedBodySize == 0 && !forceFixing)
             return context;
 
         int newSize = context.remaining() - removedHeaderSize - removedBodySize;
@@ -608,16 +620,31 @@ public ByteBuffer removeOldShards(ByteBuffer context, int gcBefore)
         ContextState cleaned = new ContextState(cleanedContext, newHlength);
 
         state.reset();
+        long toAddBack = 0;
         while (state.hasRemaining())
         {
             long clock = state.getClock();
-            if (clock > 0 || -((int)(clock / 1000)) >= gcBefore)
+            if (!(clock < 0 && -((int)(clock / 1000)) < gcBefore && (state.getCount() == 0 || !state.isDelta())))
+            {
+                if (clock < 0 && state.getCount() != 0 && state.isDelta())
+                {
+                    // we should not get there, but we have been creating problematic context prior to #2968
+                    if (state.getNodeId().equals(NodeId.getLocalId()))
+                        throw new RuntimeException("Merged counter shard with a count != 0 (likely due to #2968). You need to restart this node with -Dcassandra.renew_counter_id=true to fix.");
+
+                    // we will "fix" it, but log a message
+                    logger.info("Collectable old shard with a count != 0. Will fix.");
+                    cleaned.writeElement(state.getNodeId(), clock - 1L, 0, true);
+                    toAddBack += state.getCount();
+                }
+                else
             {
                 state.copyTo(cleaned);
             }
+            }
             state.moveToNext();
         }
-        return cleanedContext;
+        return toAddBack == 0 ? cleanedContext : merge(cleanedContext, create(toAddBack));
     }
 
     /**
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/utils/NodeId.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/utils/NodeId.java
index 0823089f..3ffc7507 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/utils/NodeId.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/utils/NodeId.java
@@ -192,7 +192,7 @@ public void maybeRenew(CounterColumn column)
                 // no recorded local node id, generating a new one and saving it
                 id = generate();
                 logger.info("No saved local node id, using newly generated: {}", id);
-                SystemTable.writeCurrentLocalNodeId(null, id);
+                SystemTable.writeCurrentLocalNodeId(null, id, System.currentTimeMillis());
                 current = new AtomicReference<NodeId>(id);
                 olds = new CopyOnWriteArrayList();
             }
@@ -206,11 +206,12 @@ public void maybeRenew(CounterColumn column)
 
         synchronized void renewCurrent()
         {
+            long now = System.currentTimeMillis();
             NodeId newNodeId = generate();
             NodeId old = current.get();
-            SystemTable.writeCurrentLocalNodeId(old, newNodeId);
+            SystemTable.writeCurrentLocalNodeId(old, newNodeId, now);
             current.set(newNodeId);
-            olds.add(new NodeIdRecord(old));
+            olds.add(new NodeIdRecord(old, now));
         }
     }
 
@@ -219,15 +220,27 @@ synchronized void renewCurrent()
         public final NodeId id;
         public final long timestamp;
 
-        public NodeIdRecord(NodeId id)
-        {
-            this(id, System.currentTimeMillis());
-        }
-
         public NodeIdRecord(NodeId id, long timestamp)
         {
             this.id = id;
             this.timestamp = timestamp;
         }
+
+        @Override
+        public boolean equals(Object o)
+        {
+            if (this == o)
+                return true;
+            if (o == null || getClass() != o.getClass())
+                return false;
+
+            NodeIdRecord otherRecord = (NodeIdRecord)o;
+            return id.equals(otherRecord.id) && timestamp == otherRecord.timestamp;
+        }
+
+        public String toString()
+        {
+            return String.format("(%s, %d)", id.toString(), timestamp);
+        }
     }
 }
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
index 461ab266..a7ddb905 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
@@ -137,7 +137,8 @@ public static void loadSchema()
                                                  st,
                                                  bytes,
                                                  null)
-                                                 .defaultValidator(CounterColumnType.instance),
+                                                 .defaultValidator(CounterColumnType.instance)
+                                                 .mergeShardsChance(1.0),
                                   new CFMetaData(ks1,
                                                  "SuperCounter1",
                                                  su,
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CounterMutationTest.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CounterMutationTest.java
index 7bc5cd29..5296de11 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CounterMutationTest.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CounterMutationTest.java
@@ -18,9 +18,13 @@
 package org.apache.cassandra.db;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.util.List;
 
 import org.junit.Test;
+import static org.junit.Assert.fail;
 
+import org.apache.cassandra.db.context.CounterContext;
 import org.apache.cassandra.db.filter.*;
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.thrift.*;
@@ -63,4 +67,60 @@ public void testMutateSuperColumns() throws IOException
         assert sc2.getSubColumns().size() == 1;
         assert sc2.getSubColumn(bytes("Column2")) != null;
     }
+
+    @Test
+    public void testGetOldShardFromSystemTable() throws IOException
+    {
+        // Renewing a bunch of times and checking we get the same thing from
+        // the system table that what is in memory
+        NodeId.renewLocalId();
+        NodeId.renewLocalId();
+        NodeId.renewLocalId();
+
+        List<NodeId.NodeIdRecord> inMem = NodeId.getOldLocalNodeIds();
+        List<NodeId.NodeIdRecord> onDisk = SystemTable.getOldLocalNodeIds();
+
+        assert inMem.equals(onDisk);
+    }
+
+    @Test
+    public void testRemoveOldShardFixCorrupted() throws IOException
+    {
+        CounterContext ctx = CounterContext.instance();
+
+        // Check that corrupted context created prior to #2968 are fixed by removeOldShards
+        NodeId id1 = NodeId.getLocalId();
+        NodeId.renewLocalId();
+        NodeId id2 = NodeId.getLocalId();
+
+        ContextState state = ContextState.allocate(3, 2);
+        state.writeElement(NodeId.fromInt(1), 1, 4, false);
+        state.writeElement(id1, 3, 2, true);
+        state.writeElement(id2, -System.currentTimeMillis(), 5, true); // corrupted!
+
+        assert ctx.total(state.context) == 11;
+
+        try
+        {
+            ctx.removeOldShards(state.context, Integer.MAX_VALUE);
+            fail("RemoveOldShards should throw an exception if the current id is non-sensical");
+        }
+        catch (RuntimeException e) {}
+
+        NodeId.renewLocalId();
+        ByteBuffer cleaned = ctx.removeOldShards(state.context, Integer.MAX_VALUE);
+        assert ctx.total(cleaned) == 11;
+
+        // Check it is not corrupted anymore
+        ContextState state2 = new ContextState(cleaned);
+        while (state2.hasRemaining())
+        {
+            assert state2.getClock() >= 0 || state2.getCount() == 0;
+            state2.moveToNext();
+        }
+
+        // Check that if we merge old and clean on another node, we keep the right count
+        ByteBuffer onRemote = ctx.merge(ctx.clearAllDelta(state.context), ctx.clearAllDelta(cleaned));
+        assert ctx.total(onRemote) == 11;
+    }
 }
