diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/FileStreamTask.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/FileStreamTask.java
index c9746ac0..2023abc0 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/FileStreamTask.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/FileStreamTask.java
@@ -37,6 +37,8 @@
     private static Logger logger = Logger.getLogger( FileStreamTask.class );
     
     public static final int CHUNK_SIZE = 32*1024*1024;
+    // around 10 minutes at the default rpctimeout
+    public static final int MAX_CONNECT_ATTEMPTS = 8;
 
     private final String file;
     private final long startPosition;
@@ -53,11 +55,10 @@
     
     public void runMayThrow() throws IOException
     {
-        SocketChannel channel = SocketChannel.open();
-        // force local binding on correctly specified interface.
-        channel.socket().bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
-        // obey the unwritten law that all nodes on a cluster must use the same storage port.
-        channel.connect(new InetSocketAddress(to, DatabaseDescriptor.getStoragePort()));
+        SocketChannel channel = connect();
+
+        // successfully connected: stream.
+        // (at this point, if we fail, it is the receiver's job to re-request)
         try
         {
             stream(channel);
@@ -112,4 +113,41 @@ private void stream(SocketChannel channel) throws IOException
         }
     }
 
+    /**
+     * Connects to the destination, with backoff for failed attempts.
+     * TODO: all nodes on a cluster must currently use the same storage port
+     * @throws IOException If all attempts fail.
+     */
+    private SocketChannel connect() throws IOException
+    {
+        SocketChannel channel = SocketChannel.open();
+        // force local binding on correctly specified interface.
+        channel.socket().bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
+        int attempts = 0;
+        while (true)
+        {
+            try
+            {
+                channel.connect(new InetSocketAddress(to, DatabaseDescriptor.getStoragePort()));
+                // success
+                return channel;
+            }
+            catch (IOException e)
+            {
+                if (++attempts >= MAX_CONNECT_ATTEMPTS)
+                    throw e;
+
+                long waitms = DatabaseDescriptor.getRpcTimeout() * (long)Math.pow(2, attempts);
+                logger.warn("Failed attempt " + attempts + " to connect to " + to + " to stream " + file + ". Retrying in " + waitms + " ms. (" + e + ")");
+                try
+                {
+                    Thread.sleep(waitms);
+                }
+                catch (InterruptedException wtf)
+                {
+                    throw new RuntimeException(wtf);
+                }
+            }
+        }
+    }
 }
