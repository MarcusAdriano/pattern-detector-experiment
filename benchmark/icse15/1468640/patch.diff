diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java
index 834f7d0d..a61f2707 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java
@@ -965,6 +965,33 @@ public void testDouble() throws IOException {
     dir.close();
   }
   
+  /** Tests sorting on type double with +/- zero */
+  public void testDoubleSignedZero() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
+    Document doc = new Document();
+    doc.add(newStringField("value", "+0", Field.Store.YES));
+    writer.addDocument(doc);
+    doc = new Document();
+    doc.add(newStringField("value", "-0", Field.Store.YES));
+    writer.addDocument(doc);
+    doc = new Document();
+    IndexReader ir = writer.getReader();
+    writer.close();
+    
+    IndexSearcher searcher = newSearcher(ir);
+    Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
+
+    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);
+    assertEquals(2, td.totalHits);
+    // numeric order
+    assertEquals("-0", searcher.doc(td.scoreDocs[0].doc).get("value"));
+    assertEquals("+0", searcher.doc(td.scoreDocs[1].doc).get("value"));
+
+    ir.close();
+    dir.close();
+  }
+  
   /** Tests sorting on type double with a missing value */
   public void testDoubleMissing() throws IOException {
     Directory dir = newDirectory();
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSortDocValues.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSortDocValues.java
index 466ed5c8..595b8579 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSortDocValues.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSortDocValues.java
@@ -602,6 +602,35 @@ public void testDouble() throws IOException {
     dir.close();
   }
   
+  /** Tests sorting on type double with +/- zero */
+  public void testDoubleSignedZero() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
+    Document doc = new Document();
+    doc.add(new DoubleDocValuesField("value", +0D));
+    doc.add(newStringField("value", "+0", Field.Store.YES));
+    writer.addDocument(doc);
+    doc = new Document();
+    doc.add(new DoubleDocValuesField("value", -0D));
+    doc.add(newStringField("value", "-0", Field.Store.YES));
+    writer.addDocument(doc);
+    doc = new Document();
+    IndexReader ir = writer.getReader();
+    writer.close();
+    
+    IndexSearcher searcher = newSearcher(ir);
+    Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
+
+    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);
+    assertEquals(2, td.totalHits);
+    // numeric order
+    assertEquals("-0", searcher.doc(td.scoreDocs[0].doc).get("value"));
+    assertEquals("+0", searcher.doc(td.scoreDocs[1].doc).get("value"));
+
+    ir.close();
+    dir.close();
+  }
+  
   /** Tests sorting on type double in reverse */
   public void testDoubleReverse() throws IOException {
     Directory dir = newDirectory();
diff --git a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
index 1ea8c790..9cafcafa 100644
--- a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
+++ b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
@@ -124,6 +124,26 @@ public void testDocValuesSorting() {
         "//str[@name='id'][.='2']");
   }
 
+  public void testDocValuesSorting2() {
+    assertU(adoc("id", "1", "doubledv", "12"));
+    assertU(adoc("id", "2", "doubledv", "50.567"));
+    assertU(adoc("id", "3", "doubledv", "+0"));
+    assertU(adoc("id", "4", "doubledv", "4.9E-324"));
+    assertU(adoc("id", "5", "doubledv", "-0"));
+    assertU(adoc("id", "6", "doubledv", "-5.123"));
+    assertU(adoc("id", "7", "doubledv", "1.7976931348623157E308"));
+    assertU(commit());
+    assertQ(req("fl", "id", "q", "*:*", "sort", "doubledv asc"),
+        "//result/doc[1]/str[@name='id'][.='6']",
+        "//result/doc[2]/str[@name='id'][.='5']",
+        "//result/doc[3]/str[@name='id'][.='3']",
+        "//result/doc[4]/str[@name='id'][.='4']",
+        "//result/doc[5]/str[@name='id'][.='1']",
+        "//result/doc[6]/str[@name='id'][.='2']",
+        "//result/doc[7]/str[@name='id'][.='7']"
+        );
+  }
+
   public void testDocValuesFaceting() {
     for (int i = 0; i < 50; ++i) {
       assertU(adoc("id", "" + i));
