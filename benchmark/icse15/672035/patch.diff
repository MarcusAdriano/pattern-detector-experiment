diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
index 17420329..dcd1635d 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
@@ -1368,8 +1368,29 @@ public boolean spaceForCopy(int num_rows, int[] spaceNeeded)
 		return((freeSpace - bytesNeeded) >= 0);
 	}
 
-	protected boolean spaceForCopy(int spaceNeeded)
+    /**
+     * Does this page have enough space to move the row to it.
+     * <p>
+     * Calculate if a row of length "spaceNeeded" with current record id
+     * "source_id" will fit on this page.
+     *
+     * @param spaceNeeded   length of the row encoded with source_id record id.
+     * @param source_id     record id of the row being moved. 
+     *
+	 * @return true if the record will fit on this page, after being given a
+     *         new record id as the next id on this page.
+     *
+     * @exception  StandardException  Standard exception policy.
+     **/
+	protected boolean spaceForCopy(
+    int spaceNeeded, 
+    int source_id)
 	{
+        spaceNeeded = 
+            spaceNeeded 
+            - StoredRecordHeader.getStoredSizeRecordId(source_id) 
+            + StoredRecordHeader.getStoredSizeRecordId(nextId);
+
         // add up the space needed by the rows, add in minimumRecordSize
         // if length of actual row is less than minimumRecordSize.
         int bytesNeeded = slotEntrySize + 
@@ -6860,6 +6881,7 @@ public int moveRecordForCompressAtSlot(
                 false);
 
             int row_size = getRecordPortionLength(slot);
+            int record_id = getHeaderAtSlot(slot).getId();
 
             // first see if row will fit on current page being used to insert
             StoredPage dest_page = 
@@ -6868,7 +6890,7 @@ public int moveRecordForCompressAtSlot(
             if (dest_page != null)
             {
                 if ((dest_page.getPageNumber() >= getPageNumber()) ||
-                    (!dest_page.spaceForCopy(row_size)))
+                    (!dest_page.spaceForCopy(row_size, record_id)))
                 {
                     // page won't work
                     dest_page.unlatch();
@@ -6886,7 +6908,7 @@ public int moveRecordForCompressAtSlot(
                 if (dest_page != null)
                 {
                     if ((dest_page.getPageNumber() >= getPageNumber()) ||
-                        (!dest_page.spaceForCopy(row_size)))
+                        (!dest_page.spaceForCopy(row_size, record_id)))
                     {
                         // page won't work
                         dest_page.unlatch();
@@ -7990,8 +8012,6 @@ public String toString()
      * 00000130: 0000 0000 0000 0000 0000 0000 0000 0000  ................
      *
      * <p>
-     * RESOLVE - this has been hacked together and is not efficient.  There
-     * are probably some java utilities to use.
      *
 	 * @return The string with the hex dump in it.
      *
@@ -8004,8 +8024,10 @@ private static String pagedataToHexDump(byte[] data)
 
 	private String pageHeaderToString()
 	{
-		if (SanityManager.DEBUG) {
-			return "page id " + getIdentity() + 
+        if (SanityManager.DEBUG) 
+        {
+            return 
+                "page id: "             + getIdentity()     + 
 				" Overflow: " + isOverflowPage +
 				" PageVersion: " + getPageVersion() +
 				" SlotsInUse: " + slotsInUse +
@@ -8015,13 +8037,16 @@ private String pageHeaderToString()
 				" firstFreeByte: " + firstFreeByte + 
 				" freeSpace: " + freeSpace + 
 				" totalSpace: " + totalSpace + 
-				" spareSpace: " + spareSpace + 
+                " spareSpace: "         + spareSpace        + "%" + 
+                " minimumRecordSize : " + minimumRecordSize +
                 " PageSize: " + getPageSize() +
                 "\n";
 		}
 		else
+        {
 			return null;
 	}
+    }
 
 	private String recordToString(int slot)
 	{
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java
index f1a90b1c..464c74a1 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java
@@ -733,6 +733,19 @@ else if ((status & RECORD_OVERFLOW) == 0)
         return;
 	}
 
+    /**
+     * Return length on disk of the record id portion of the record header
+     *
+     * Record id is part of the record header and is stored in an internal
+     * compressed format.  The length of this format depends on the value
+     * of the record id.
+     *
+     * @return length of encoded record id on disk.
+     **/
+    public static final int getStoredSizeRecordId(int record_id)
+    {
+        return(CompressedNumber.sizeInt(record_id));
+    }
 
 	public String toString()
 	{
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3625Test.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3625Test.java
index e69de29b..d9d136aa 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3625Test.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3625Test.java
@@ -0,0 +1,276 @@
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import org.apache.derby.shared.common.sanity.SanityManager;
+
+import junit.framework.Assert;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.sql.SQLException;
+
+
+/*
+Class org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test
+
+Licensed to the Apache Software Foundation (ASF) under one or more
+contributor license agreements.  See the NOTICE file distributed with
+this work for additional information regarding copyright ownership.
+The ASF licenses this file to you under the Apache License, Version 2.0
+(the "License"); you may not use this file except in compliance with
+the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+
+/**
+
+Test to reproduce DERBY-3625, failure in inline compress, in some 
+circumstances depending on exact size of data and state of pages during
+the defragment phase.  
+
+Would throw following error:
+
+ERROR XSDA3: Limitation: Record cannot be updated or inserted due to lack of 
+space on the page. Use the parameters derby.storage.pageSize and/or 
+derby.storage.pageReservedSpace to work around this limitation.^M
+
+**/
+
+public class Derby3625Test extends StoreBaseTest
+{
+    /**************************************************************************
+     * Fields of the class
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Constructors for This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Private/Protected methods of This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Public Methods of This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Public Methods of XXXX class:
+     **************************************************************************
+     */
+
+    public Derby3625Test(String name) 
+    {
+        super(name);
+    }
+    
+    /**
+     * DERBY-3625 test case
+     * <p>
+     * Derby 3625 is caused by a bug where compress calculates the space
+     * needed to fit a moved row from page A to B, and assumes that the space
+     * required on page B is the same on page A.  The problem is that in 
+     * some cases due to the stored format of the changing record id the space
+     * required on B may be more than A.  In the case where there is exactly
+     * enough space by the initial calculation the move fails because one or
+     * 3 more bytes may be necessary to make the move and the compress fails.
+     * <p>
+     * To test:
+     *   fill page 1 with dummy rows, page 1 has a special control row on it
+     *       so it can't ever be empty so use page 2 instead.
+     *   fill page 2 with dummy rows such and empty it such that the 
+     *       next row id on it is greater that 64 which takes 2 bytes to store 
+     *       vs. 1 for rowid's less * that 64.
+     *   fill page 3 and 4 with some dummy rows which will be deleted to give
+     *       compress table room to work during defragment.
+     *   fill page 4 with 2 rows which fit on page 2 with 1 byte stored record
+     *        id's but will not fit with 2 byte stored record id's.  
+     *        These will not be deleted and the bug is exercised as 
+     *        defragment tries to move these rows to page 2 after it has 
+     *        been reclaimed as a free page.
+     **/
+    public void testTwoToOneByteCase()
+        throws SQLException
+    {
+        PreparedStatement insert_stmt = 
+            prepareStatement("INSERT INTO testCompress VALUES(?, ?, ?)");
+
+        // page 0 - container info/bit map, does not affect test
+
+        // page 1 - fill it up and leave rows on it.  page 1 has a special
+        // row on it that can never be deleted so this page never can be
+        // made free.
+
+        // insert one blob padded row that will fill page 1
+        byte[] pad_blob = new byte[32630];
+        insert_stmt.setInt(     1, 1);
+        insert_stmt.setBytes(   2, pad_blob);
+        insert_stmt.setString(  3, "page 1");
+        insert_stmt.executeUpdate();
+
+        // page 2 - fill it completely with enough rows such that future
+        // rows will force a 2 byte row id, ie. more than 64 rows.  Later
+        // in this test all the rows will be deleted from this page so that
+        // the page is on the free list for compress defragment to use it.
+
+        pad_blob = new byte[302];
+        insert_stmt.setInt(     1, 2);
+        insert_stmt.setBytes(   2, pad_blob);
+        insert_stmt.setString(  3, "page 2");
+        for (int i = 0; i < 98; i++)
+        {
+            insert_stmt.executeUpdate();
+        }
+
+        // page 3 - fill it for another free page.
+        insert_stmt.setInt(     1, 3);
+        insert_stmt.setBytes(   2, pad_blob);
+        insert_stmt.setString(  3, "page 3");
+        for (int i = 0; i < 98; i++)
+        {
+            insert_stmt.executeUpdate();
+        }
+
+        // page 4 -  2 rows, with one byte free.  When these are moved to 
+        // a free page with bigger rowid's they will take 2 more bytes and
+        // will not both fit on the page.
+        //
+        // I didn't track it down, but for some reason I could not fill a page
+        // completely if there was only one row on the page, it kept turning
+        // the blob column into a long row.  I was just picking magic numbers
+        // for the blob column to make it fit.
+        //
+        // With 2 rows I was able to fill the page up to one empty byte.  
+        // Then with the bug the first row would move to page 2 which is
+        // now free but take one more byte than it did on this page.  And
+        // finally when the second row was moved it would think it would fit
+        // but throw an exception when the rowid compressed version would
+        // cause it to be one byte bigger than the original row.
+        pad_blob = new byte[100];
+        insert_stmt.setInt(     1, 4);
+        insert_stmt.setBytes(   2, pad_blob);
+        insert_stmt.setString(  3, "page 4");
+        insert_stmt.executeUpdate();
+        pad_blob = new byte[32534];
+        insert_stmt.setInt(     1, 4);
+        insert_stmt.setBytes(   2, pad_blob);
+        insert_stmt.setString(  3, "page 4");
+        insert_stmt.executeUpdate();
+
+        commit();
+
+        int space_info[] = getSpaceInfo("APP", "TESTCOMPRESS", true);
+
+        // space after initial insert setup should be 4 pages
+        // 0 - container info - not reflected in allocated page count, 
+        // 1 - dummy data left on the page, 
+        // 2 - bunch of short records to be deleted to make free page
+        // 3 - bunch of short records to be deleted to make free page
+        // 4 - short and long record to exercise bug.
+        Assert.assertEquals(
+            "wrong allocated page count in test setup", 
+            4, space_info[SPACE_INFO_NUM_ALLOC]);
+
+        Statement stmt = createStatement();
+
+        // Delete rows on page 2 and 3 to allow defragment to try and move
+        // the page 4 row up.
+        stmt.executeUpdate("DELETE FROM testCompress where id = 2 or id = 3");
+        commit();
+
+        // Before fixing the bug, this compress call would throw the 
+        // following exception:
+        //
+        // ERROR XSDA3: Limitation: Record cannot be updated or inserted due 
+        // to lack of space on the page. Use the parameters 
+        // derby.storage.pageSize and/or derby.storage.pageReservedSpace to 
+        // work around this limitation.
+
+        CallableStatement call_compress = 
+            prepareCall(
+                "CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, 1, 1, 1)");
+
+        call_compress.setString(1, "APP");
+        call_compress.setString(2, "TESTCOMPRESS");
+        call_compress.executeUpdate();
+
+        commit();
+
+        space_info = getSpaceInfo("APP", "TESTCOMPRESS", true);
+
+        // space after the test should be 3 pages: 
+        // 0 - container info - not reflected in allocated page count, 
+        // 1 - dummy data left on the page, 
+        // 2 - one short record, but long record did not fit
+        // 3 - long record on an empty page.
+        Assert.assertEquals(
+            "wrong allocated page count", 3, space_info[SPACE_INFO_NUM_ALLOC]);
+
+        insert_stmt.close();
+    }
+    
+    protected static Test baseSuite(String name) 
+    {
+        TestSuite suite = new TestSuite(name);
+        suite.addTestSuite(Derby3625Test.class);
+        return new CleanDatabaseTestSetup(
+                DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
+        {
+            /**
+             * Creates the tables used in the test cases.
+             * @exception SQLException if a database error occurs
+             */
+            protected void decorateSQL(Statement stmt) throws SQLException
+            {
+                Connection conn = stmt.getConnection();
+
+                CallableStatement set_dbprop =  conn.prepareCall(
+                    "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
+                set_dbprop.setString(1,"derby.storage.pageReservedSpace");
+                set_dbprop.setString(2,"0");
+                set_dbprop.executeUpdate();
+                
+                // create a table, with blob it will be 32k page size
+                stmt.executeUpdate(
+                    "CREATE TABLE testCompress " +
+                        "(id int, padcol blob(1M), c varchar(200))");
+
+                set_dbprop.setString(2, null);
+                set_dbprop.executeUpdate();
+
+                set_dbprop.close();
+
+                conn.setAutoCommit(false);
+            }
+        };
+    }
+
+    public static Test suite() 
+    {
+        TestSuite suite = new TestSuite("Derby3625Test");
+        suite.addTest(baseSuite("Derby36625Test:embedded"));
+        return suite;
+    }
+}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/StoreBaseTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/StoreBaseTest.java
index e69de29b..3876e9f5 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/StoreBaseTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/StoreBaseTest.java
@@ -0,0 +1,169 @@
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import org.apache.derby.shared.common.sanity.SanityManager;
+
+import junit.framework.Assert;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.sql.SQLException;
+
+
+/*
+Class org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test
+
+Licensed to the Apache Software Foundation (ASF) under one or more
+contributor license agreements.  See the NOTICE file distributed with
+this work for additional information regarding copyright ownership.
+The ASF licenses this file to you under the Apache License, Version 2.0
+(the "License"); you may not use this file except in compliance with
+the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+
+/**
+
+Utility functions useful when testing store.
+
+Maybe move this stuff to BaseJDBCTestCase if they seem useful to others.
+
+**/
+
+public class StoreBaseTest extends BaseJDBCTestCase 
+{
+    /**************************************************************************
+     * Fields of the class
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Constructors for This class:
+     **************************************************************************
+     */
+    public StoreBaseTest(String name) 
+    {
+        super(name);
+    }
+
+    /**************************************************************************
+     * Private/Protected methods of This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Public Methods of This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Public Methods of XXXX class:
+     **************************************************************************
+     */
+
+    /**
+     * call the space table vti.
+     * <p>
+     * Utility test function to call the space table vti to get information
+     * about allocated and free pages.  Information is passed back in an
+     * int array as follows:
+     *   is_index                 = ret_info[0];
+     *   num_alloc                = ret_info[1];
+     *   num_free                 = ret_info[2];
+     *   page_size                = ret_info[3];
+     *   estimate_space_savings   = ret_info[4];
+     * <p>
+     *
+     *
+     **/
+    protected static final int SPACE_INFO_IS_INDEX          = 0;
+    protected static final int SPACE_INFO_NUM_ALLOC         = 1;
+    protected static final int SPACE_INFO_NUM_FREE          = 2;
+    protected static final int SPACE_INFO_NUM_UNFILLED      = 3;
+    protected static final int SPACE_INFO_PAGE_SIZE         = 4;
+    protected static final int SPACE_INFO_ESTIMSPACESAVING  = 5;
+
+    protected static final int SPACE_INFO_NUMCOLS           = 6;
+
+    protected int[] getSpaceInfo(
+    String      schemaName,
+    String      tableName,
+    boolean     commit_xact)
+		throws SQLException
+    {
+        String stmt_str = 
+            "select " + 
+                "conglomeratename, " +
+                "isindex, "           + 
+                "numallocatedpages, " + 
+                "numfreepages, "      + 
+                "numunfilledpages, "  + 
+                "pagesize, "          + 
+                "estimspacesaving "   + 
+            "from new org.apache.derby.diag.SpaceTable('" +
+                tableName + "') t where isindex = 0";
+
+        PreparedStatement space_stmt = prepareStatement(stmt_str);
+        ResultSet         rs         = space_stmt.executeQuery();
+
+        boolean rows_found = rs.next();
+
+        Assert.assertTrue(
+            "No rows returned from space table query on table: " +
+            schemaName + "." + tableName, rows_found);
+
+        int[] ret_info = new int[SPACE_INFO_NUMCOLS];
+        String conglomerate_name        = rs.getString(1);
+        for (int i = 0; i < SPACE_INFO_NUMCOLS; i++)
+        {
+            ret_info[i] = rs.getInt(i + 2);
+        }
+
+        rows_found = rs.next();
+
+        Assert.assertFalse(
+            "More than one row returned from space query on table: " +
+            schemaName + "." + tableName, rows_found);
+
+        // debug info
+        println(
+            "Space information for " + schemaName + "." + tableName + ":");
+        println(
+            "isindex = " + ret_info[SPACE_INFO_IS_INDEX]);
+        println(
+            "num_alloc = " + ret_info[SPACE_INFO_NUM_ALLOC]);
+        println(
+            "num_free = " + ret_info[SPACE_INFO_NUM_FREE]);
+        println(
+            "num_unfilled = " + ret_info[SPACE_INFO_NUM_UNFILLED]);
+        println(
+            "page_size = " + ret_info[SPACE_INFO_PAGE_SIZE]);
+        println(
+            "estimspacesaving = " + ret_info[SPACE_INFO_ESTIMSPACESAVING]);
+
+        rs.close();
+
+        if (commit_xact)
+            commit();
+
+        return(ret_info);
+    }
+}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
index dd6efbb1..68071c4e 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
@@ -54,6 +54,7 @@ public static Test suite() {
         
         suite.addTest(BootAllTest.suite());
 
+        suite.addTest(Derby3625Test.suite());
         // Encryption only supported for Derby in J2SE/J2EE environments.
         // J2ME (JSR169) does not support encryption.
         if (JDBC.vmSupportsJDBC3()) {
