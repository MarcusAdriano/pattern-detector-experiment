diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
index 6424e832..49c5af77 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
@@ -221,12 +221,11 @@ public static SQLException javaException(Throwable t) {
 
 	public static SQLException notImplemented() {
 
-		return newEmbedSQLException(SQLState.NOT_IMPLEMENTED,
-			new Object[] {MessageService.getTextMessage(MessageId.CONN_NO_DETAILS)},
-                StandardException.getSeverityFromIdentifier(SQLState.NOT_IMPLEMENTED));
+		return notImplemented( MessageService.getTextMessage(MessageId.CONN_NO_DETAILS) );
 	}
 
 	public static SQLException notImplemented(String feature) {
+
 		return newEmbedSQLException(SQLState.NOT_IMPLEMENTED,
 			new Object[] {feature},
                 StandardException.getSeverityFromIdentifier(SQLState.NOT_IMPLEMENTED));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/JavaVersionHolder.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/JavaVersionHolder.java
index 52343971..0bb7b9f5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/JavaVersionHolder.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/JavaVersionHolder.java
@@ -121,4 +121,20 @@ public int getMinorNumber()
     {
         return minor;
     }
+
+	/**
+	 * <p>
+	 * Return true if we are at least at the passed in version.
+	 * </p>
+	 */
+	public	boolean	atLeast( int baseMajor, int baseMinor )
+	{
+		if ( major < baseMajor ) { return false; }
+		if ( major > baseMajor ) { return true; }
+
+		// same major number
+
+		return ( minor >= baseMinor );
+	}
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index 0e187873..078298b1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -240,7 +240,9 @@ public static void main(String[] args)
             System.setProperties(sp);
         }
         
-        getProperties(sp);
+        JavaVersionHolder	jvh = getProperties(sp);
+		boolean				isJDBC4 = jvh.atLeast( 1, 6 );
+
         // Setup the directories for the test and test output
         setDirectories(scriptName,sp);
 
@@ -337,7 +339,7 @@ public static void main(String[] args)
                     {
                         Sed sed = new Sed();
                         sed.exec(tmpOutFile,finalOutFile, isSed, 
-                                        NetServer.isClientConnection(framework), isI18N);
+                                        NetServer.isClientConnection(framework), isI18N, isJDBC4);
 		    }
 		    catch (ClassFormatError cfe)
 		    {
@@ -829,7 +831,7 @@ else if (useCommonDB == true)
             (new BufferedWriter(new FileWriter(diffFile.getPath()), 4096), true);
     }
 
-    private static void getProperties(Properties sp)
+    private static JavaVersionHolder getProperties(Properties sp)
         throws Exception
     {
         // Get any properties specified on the command line
@@ -1151,6 +1153,7 @@ private static void getProperties(Properties sp)
 		if (uscdb != null && uscdb.equals("true"))
 			useCommonDB = true;
 		
+		return jvh;
     }
 
     private static String createPropString()
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
index e6ec8cda..b6309072 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
@@ -39,6 +39,7 @@
 
 public class Sed
 {
+	private	static	final	String	SQL_EXCEPTION_FILTERED_SUBSTITUTION = "SQL Exception:";
 
     public Sed()
     {
@@ -51,11 +52,12 @@ public static void main(String[] args) throws Exception {
         }
         File src = new File(args[0]);
         File tgt = new File(args[1]);
-        new Sed().exec(src,tgt,null, false, false);
+        new Sed().exec(src,tgt,null, false, false,false);
     }
 
     // The arguments should be the names of the input and output files
-    public void exec(File srcFile, File dstFile, InputStream isSed, boolean isJCC, boolean isI18N)
+    public void exec
+		(File srcFile, File dstFile, InputStream isSed, boolean isJCC, boolean isI18N, boolean isJDBC4)
         throws IOException
     {
     	String hostName = TestUtil.getHostName();
@@ -171,6 +173,26 @@ public void exec(File srcFile, File dstFile, InputStream isSed, boolean isJCC, b
         // Filter out localhost, or hostName
         searchStrings.addElement(hostName);
 
+		if ( isJDBC4 )
+		{
+			// Filters for the sql exception class names which appear in
+			// exception messages. These are different in JDBC3 and JDBC4.
+			searchStrings.addElement("java.sql.SQLDataException:");
+			searchStrings.addElement("java.sql.SQLDataSetSyncException:");
+			searchStrings.addElement("java.sql.SQLException:");
+			searchStrings.addElement("java.sql.SQLFeatureNotSupportedException:");
+			searchStrings.addElement("java.sql.SQLIntegrityConstraintViolationException:");
+			searchStrings.addElement("java.sql.SQLInvalidAuthorizationSpecException:");
+			searchStrings.addElement("java.sql.SQLNonTransientConnectionException:");
+			searchStrings.addElement("java.sql.SQLNonTransientException:");
+			searchStrings.addElement("java.sql.SQLRuntimeException:");
+			searchStrings.addElement("java.sql.SQLSyntaxErrorException:");
+			searchStrings.addElement("java.sql.SQLTimeoutException:");
+			searchStrings.addElement("java.sql.SQLTransactionRollbackException:");
+			searchStrings.addElement("java.sql.SQLTransientConnectionException:");
+			searchStrings.addElement("java.sql.SQLTransientException:");
+		}
+		
         Vector subStrings = new Vector();
         subStrings.addElement("Transaction:(XXX)|");
         subStrings.addElement("Read ... bytes");
@@ -209,6 +231,25 @@ public void exec(File srcFile, File dstFile, InputStream isSed, boolean isJCC, b
         subStrings.addElement("xxxFILTERED-SAX-EXCEPTIONxxx'.");
         // Filter out localhost, or hostName
         subStrings.addElement("xxxFILTERED_HOSTNAMExxx");
+
+		if ( isJDBC4 )
+		{
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+			subStrings.addElement(SQL_EXCEPTION_FILTERED_SUBSTITUTION);
+		}
+
         doWork(srcFile, dstFile, null, deleteLines, searchStrings, subStrings, isSed, isI18N);
         
     } // end exec
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java
index 4aaf4d94..038a58f0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java
@@ -159,7 +159,7 @@ public static void massageSqlFile (String hostName, String fileName) throws Exce
         original.close();
         Sed hostSed = new Sed();
         InputStream sedIs = new ByteArrayInputStream(("substitute=localhost;" + hostName).getBytes("UTF-8"));
-        hostSed.exec(tmpFile, orgFile, sedIs, false, false);		
+        hostSed.exec(tmpFile, orgFile, sedIs, false, false, false);		
     }
 
 	public static void main (String args[]) throws Exception
