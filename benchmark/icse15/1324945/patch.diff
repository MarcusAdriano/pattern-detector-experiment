diff --git a/lucene/dev/branches/lucene3969/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/dev/branches/lucene3969/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index af9c5b09..ab6b7ca7 100644
--- a/lucene/dev/branches/lucene3969/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/dev/branches/lucene3969/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -759,7 +759,7 @@ public TermsEnum iterator(TermsEnum reuse) {
             }
 
             @Override
-            public long getUniqueTermCount() {
+            public long size() {
               return info.sortedTerms.length;
             }
 
@@ -785,7 +785,7 @@ public int getDocCount() throws IOException {
       }
 
       @Override
-      public int getUniqueFieldCount() {
+      public int size() {
         return sortedFields.length;
       }
     }
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
index 0c892c2d..6e523545 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
@@ -202,7 +202,7 @@ public Terms terms(String field) throws IOException {
   }
 
   @Override
-  public int getUniqueFieldCount() {
+  public int size() {
     return fields.size();
   }
 
@@ -261,7 +261,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() {
+    public long size() {
       return numTerms;
     }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
index 97543020..cd70abbe 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
@@ -216,7 +216,7 @@ public Terms terms(String field) throws IOException {
   }
 
   @Override
-  public int getUniqueFieldCount() {
+  public int size() {
     return fields.size();
   }
 
@@ -455,7 +455,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() {
+    public long size() {
       return numTerms;
     }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
index 1f30e9a4..b356b233 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
@@ -166,17 +166,17 @@ public int merge(MergeState mergeState) throws IOException {
   /** Safe (but, slowish) default method to write every
    *  vector field in the document.  This default
    *  implementation requires that the vectors implement
-   *  both Fields.getUniqueFieldCount and
-   *  Terms.getUniqueTermCount. */
+   *  both Fields.size and
+   *  Terms.size. */
   protected final void addAllDocVectors(Fields vectors, FieldInfos fieldInfos) throws IOException {
     if (vectors == null) {
       startDocument(0);
       return;
     }
 
-    final int numFields = vectors.getUniqueFieldCount();
+    final int numFields = vectors.size();
     if (numFields == -1) {
-      throw new IllegalStateException("vectors.getUniqueFieldCount() must be implemented (it returned -1)");
+      throw new IllegalStateException("vectors.size() must be implemented (it returned -1)");
     }
     startDocument(numFields);
     
@@ -195,9 +195,9 @@ protected final void addAllDocVectors(Fields vectors, FieldInfos fieldInfos) thr
         // FieldsEnum shouldn't lie...
         continue;
       }
-      final int numTerms = (int) terms.getUniqueTermCount();
+      final int numTerms = (int) terms.size();
       if (numTerms == -1) {
-        throw new IllegalStateException("vector.getUniqueTermCount() must be implemented (it returned -1)");
+        throw new IllegalStateException("terms.size() must be implemented (it returned -1)");
       }
       final TermsEnum termsEnum = terms.iterator(null);
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
index a3edb7ba..621fe44f 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
@@ -161,7 +161,7 @@ public Terms terms(String field) {
   }
 
   @Override
-  public int getUniqueFieldCount() {
+  public int size() {
     return preTerms.size();
   }
 
@@ -246,7 +246,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() throws IOException {
+    public long size() throws IOException {
       return -1;
     }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
index 62406fc8..c66e0584 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
@@ -270,7 +270,7 @@ public Terms terms(String field) throws IOException {
     }
 
     @Override
-    public int getUniqueFieldCount() {
+    public int size() {
       if (fieldNumbers == null) {
         return 0;
       } else {
@@ -307,7 +307,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() {
+    public long size() {
       return numTerms;
     }
 
@@ -660,7 +660,7 @@ public Fields get(int docID) throws IOException {
     }
     if (tvx != null) {
       Fields fields = new TVFields(docID);
-      if (fields.getUniqueFieldCount() == 0) {
+      if (fields.size() == 0) {
         // TODO: we can improve writer here, eg write 0 into
         // tvx file, so we know on first read from tvx that
         // this doc has no TVs
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java
index af223fe6..8e83f6d0 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java
@@ -300,7 +300,7 @@ public Terms terms(String field) throws IOException {
     }
 
     @Override
-    public int getUniqueFieldCount() {
+    public int size() {
       if (fieldNumbers == null) {
         return 0;
       } else {
@@ -335,7 +335,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() {
+    public long size() {
       return numTerms;
     }
 
@@ -674,7 +674,7 @@ public Fields get(int docID) throws IOException {
     }
     if (tvx != null) {
       Fields fields = new TVFields(docID);
-      if (fields.getUniqueFieldCount() == 0) {
+      if (fields.size() == 0) {
         // TODO: we can improve writer here, eg write 0 into
         // tvx file, so we know on first read from tvx that
         // this doc has no TVs
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
index 89d8bb35..8badc9ba 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
@@ -824,7 +824,7 @@ public int getDocCount() throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() throws IOException {
+    public long size() throws IOException {
       return termCount;
     }
 
@@ -888,7 +888,7 @@ public Terms terms(String field) {
       }
       
       @Override
-      public int getUniqueFieldCount() {
+      public int size() {
         return fields.size();
       }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java
index e4436835..23cb6bdc 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java
@@ -248,7 +248,7 @@ public Terms terms(String field) throws IOException {
     }
     
     @Override
-    public int getUniqueFieldCount() {
+    public int size() {
       return fields.size();
     }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
index af4a826b..c3b252df 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
@@ -596,7 +596,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() {
+    public long size() {
       return (long) termCount;
     }
 
@@ -641,7 +641,7 @@ synchronized public Terms terms(String field) throws IOException {
   }
 
   @Override
-  public int getUniqueFieldCount() {
+  public int size() {
     return -1;
   }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
index 1aeabdd6..03d6825f 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
@@ -257,7 +257,7 @@ public Terms terms(String field) throws IOException {
     }
 
     @Override
-    public int getUniqueFieldCount() throws IOException {
+    public int size() throws IOException {
       return fields.size();
     }
   }
@@ -281,7 +281,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() throws IOException {
+    public long size() throws IOException {
       return terms.size();
     }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index 36836842..610f39a2 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -1051,7 +1051,7 @@ public Status checkIndex(List<String> onlySegments) throws IOException {
         long termCount = -1;
         
         if (status.termCount-termCountStart > 0) {
-          termCount = fields.terms(field).getUniqueTermCount();
+          termCount = fields.terms(field).size();
           
           if (termCount != -1 && termCount != status.termCount - termCountStart) {
             throw new RuntimeException("termCount mismatch " + termCount + " vs " + (status.termCount - termCountStart));
@@ -1104,7 +1104,7 @@ public Status checkIndex(List<String> onlySegments) throws IOException {
       }
     }
     
-    int fieldCount = fields.getUniqueFieldCount();
+    int fieldCount = fields.size();
     
     if (fieldCount != -1) {
       if (fieldCount < 0) {
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Fields.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Fields.java
index 81b1dbdf..4cfe57af 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Fields.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Fields.java
@@ -36,7 +36,7 @@
    *  measure isn't stored by the codec. Note that, just like 
    *  other term measures, this measure does not take deleted 
    *  documents into account. */
-  public abstract int getUniqueFieldCount() throws IOException;
+  public abstract int size() throws IOException;
   
   /** Returns the number of terms for all fields, or -1 if this 
    *  measure isn't stored by the codec. Note that, just like 
@@ -53,7 +53,7 @@ public long getUniqueTermCount() throws IOException {
       }
       Terms terms = terms(field);
       if (terms != null) {
-        final long termCount = terms.getUniqueTermCount();
+        final long termCount = terms.size();
         if (termCount == -1) {
           return -1;
         }
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
index e1a302f4..cc67c40e 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
@@ -56,8 +56,8 @@ public Terms terms(String field) throws IOException {
     }
 
     @Override
-    public int getUniqueFieldCount() throws IOException {
-      return in.getUniqueFieldCount();
+    public int size() throws IOException {
+      return in.size();
     }
 
     @Override
@@ -86,8 +86,8 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
     }
 
     @Override
-    public long getUniqueTermCount() throws IOException {
-      return in.getUniqueTermCount();
+    public long size() throws IOException {
+      return in.size();
     }
 
     @Override
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiFields.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiFields.java
index e2df431f..9bd226cd 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiFields.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiFields.java
@@ -228,7 +228,7 @@ public Terms terms(String field) throws IOException {
   }
 
   @Override
-  public int getUniqueFieldCount() {
+  public int size() {
     return -1;
   }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java
index 14c1f5df..c18ac6cc 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java
@@ -96,7 +96,7 @@ public TermsEnum iterator(TermsEnum reuse) throws IOException {
   }
 
   @Override
-  public long getUniqueTermCount() throws IOException {
+  public long size() throws IOException {
     return -1;
   }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
index 545eead4..8e76d375 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
@@ -197,7 +197,7 @@ public Terms terms(String field) throws IOException {
     }
     
     @Override
-    public int getUniqueFieldCount() throws IOException {
+    public int size() throws IOException {
       return fields.size();
     }
   }
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Terms.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Terms.java
index 174ddce8..435837ae 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Terms.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/index/Terms.java
@@ -81,7 +81,7 @@ protected BytesRef nextSeekTerm(BytesRef term) throws IOException {
    *  measure isn't stored by the codec. Note that, just like 
    *  other term measures, this measure does not take deleted 
    *  documents into account. */
-  public abstract long getUniqueTermCount() throws IOException;
+  public abstract long size() throws IOException;
   
   /** Returns the sum of {@link TermsEnum#totalTermFreq} for
    *  all terms in this field, or -1 if this measure isn't
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 0c2513ca..79b75006 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -1114,7 +1114,7 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
         // is fine -- GrowableWriter will reallocate as needed
         long numUniqueTerms = 0;
         try {
-          numUniqueTerms = terms.getUniqueTermCount();
+          numUniqueTerms = terms.size();
         } catch (UnsupportedOperationException uoe) {
           numUniqueTerms = -1;
         }
@@ -1165,7 +1165,7 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
           if (termOrd == termOrdToBytesOffset.size()) {
             // NOTE: this code only runs if the incoming
             // reader impl doesn't implement
-            // getUniqueTermCount (which should be uncommon)
+            // size (which should be uncommon)
             termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));
           }
           termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));
@@ -1252,7 +1252,7 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
         // is fine -- GrowableWriter will reallocate as needed
         long numUniqueTerms = 0;
         try {
-          numUniqueTerms = terms.getUniqueTermCount();
+          numUniqueTerms = terms.size();
         } catch (UnsupportedOperationException uoe) {
           numUniqueTerms = -1;
         }
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java
index 8d1c7740..51346cb7 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java
@@ -21,7 +21,6 @@
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.codecs.Codec;
-import org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat;
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.DocsEnum;
@@ -63,7 +62,7 @@ protected void add(int base, AtomicReader r) throws IOException {
           enums.put(docs, true);
         }
         
-        assertEquals(terms.getUniqueTermCount(), enums.size());  
+        assertEquals(terms.size(), enums.size());
       }
     }.run();
     IOUtils.close(writer, open, dir);
@@ -100,7 +99,7 @@ public void testReuseDocsEnumSameBitsOrNull() throws IOException {
         docs = iterator.docs(new Bits.MatchNoBits(open.maxDoc()), docs, random.nextBoolean());
         enums.put(docs, true);
       }
-      assertEquals(terms.getUniqueTermCount(), enums.size());  
+      assertEquals(terms.size(), enums.size());
       
       enums.clear();
       iterator = terms.iterator(null);
@@ -141,7 +140,7 @@ public void testReuseDocsEnumDifferentReader() throws IOException {
         docs = iterator.docs(null, randomDocsEnum("body", term, sequentialSubReaders2, bits), random.nextBoolean());
         enums.put(docs, true);
       }
-      assertEquals(terms.getUniqueTermCount(), enums.size());  
+      assertEquals(terms.size(), enums.size());
       
       iterator = terms.iterator(null);
       enums.clear();
@@ -150,7 +149,7 @@ public void testReuseDocsEnumDifferentReader() throws IOException {
         docs = iterator.docs(bits, randomDocsEnum("body", term, sequentialSubReaders2, bits), random.nextBoolean());
         enums.put(docs, true);
       }
-      assertEquals(terms.getUniqueTermCount(), enums.size());  
+      assertEquals(terms.size(), enums.size());
     }
     IOUtils.close(writer, firstReader, secondReader, dir);
   }
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/document/TestDocument.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/document/TestDocument.java
index 90a11dfe..e23a9443 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/document/TestDocument.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/document/TestDocument.java
@@ -21,7 +21,6 @@
 
 import org.apache.lucene.analysis.EmptyTokenizer;
 import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.DocsAndPositionsEnum;
 import org.apache.lucene.index.Fields;
@@ -345,7 +344,7 @@ public void testTransitionAPI() throws Exception {
       Fields tvFields = r.getTermVectors(0);
       Terms tvs = tvFields.terms(field);
       assertNotNull(tvs);
-      assertEquals(2, tvs.getUniqueTermCount());
+      assertEquals(2, tvs.size());
       TermsEnum tvsEnum = tvs.iterator(null);
       assertEquals(new BytesRef("abc"), tvsEnum.next());
       final DocsAndPositionsEnum dpEnum = tvsEnum.docsAndPositions(null, null, false);
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
index 77032dab..512bb31e 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
@@ -290,11 +290,11 @@ public void testMixedTermVectorSettingsSameField() throws Exception {
     // f1
     Terms tfv1 = reader.getTermVectors(0).terms("f1");
     assertNotNull(tfv1);
-    assertEquals("the 'with_tv' setting should rule!",2,tfv1.getUniqueTermCount());
+    assertEquals("the 'with_tv' setting should rule!",2,tfv1.size());
     // f2
     Terms tfv2 = reader.getTermVectors(0).terms("f2");
     assertNotNull(tfv2);
-    assertEquals("the 'with_tv' setting should rule!",2,tfv2.getUniqueTermCount());
+    assertEquals("the 'with_tv' setting should rule!",2,tfv2.size());
     reader.close();
   }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
index 7c416ca2..ed7d5f4b 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
@@ -184,8 +184,8 @@ public void assertFields(Fields leftFields, Fields rightFields, boolean deep) th
    * checks that top-level statistics on Fields are the same 
    */
   public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {
-    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {
-      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());
+    if (leftFields.size() != -1 && rightFields.size() != -1) {
+      assertEquals(info, leftFields.size(), rightFields.size());
     }
     
     if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {
@@ -238,8 +238,8 @@ public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exce
     if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {
       assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());
     }
-    if (leftTerms.getUniqueTermCount() != -1 && rightTerms.getUniqueTermCount() != -1) {
-      assertEquals(info, leftTerms.getUniqueTermCount(), rightTerms.getUniqueTermCount());
+    if (leftTerms.size() != -1 && rightTerms.size() != -1) {
+      assertEquals(info, leftTerms.size(), rightTerms.size());
     }
   }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java
index 242063ea..2ee7d1f3 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java
@@ -19,10 +19,8 @@
 
 import java.io.IOException;
 
-import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.codecs.Codec;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.TextField;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
@@ -120,7 +118,7 @@ public void testMerge() throws IOException {
 
     Terms vector = mergedReader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);
     assertNotNull(vector);
-    assertEquals(3, vector.getUniqueTermCount());
+    assertEquals(3, vector.size());
     TermsEnum termsEnum = vector.iterator(null);
 
     int i = 0;
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java
index c84382b9..870f5fe3 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java
@@ -193,7 +193,7 @@ public static void checkNorms(AtomicReader reader) throws IOException {
   public void testTermVectors() throws IOException {
     Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);
     assertNotNull(result);
-    assertEquals(3, result.getUniqueTermCount());
+    assertEquals(3, result.size());
     TermsEnum termsEnum = result.iterator(null);
     while(termsEnum.next() != null) {
       String term = termsEnum.term().utf8ToString();
@@ -204,6 +204,6 @@ public void testTermVectors() throws IOException {
 
     Fields results = reader.getTermVectors(0);
     assertTrue(results != null);
-    assertEquals("We do not have 3 term freq vectors", 3, results.getUniqueFieldCount());      
+    assertEquals("We do not have 3 term freq vectors", 3, results.size());
   }    
 }
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
index e309fbf9..304bf73f 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
@@ -600,7 +600,7 @@ public static void verifyEquals(Document d1, Document d2) {
 
   public static void verifyEquals(Fields d1, Fields d2) throws IOException {
     if (d1 == null) {
-      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);
+      assertTrue(d2 == null || d2.size() == 0);
       return;
     }
     assertTrue(d2 != null);
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
index 8fd532c5..73b49e91 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
@@ -204,7 +204,7 @@ public void testReader() throws IOException {
     for (int j = 0; j < 5; j++) {
       Terms vector = reader.get(j).terms(testFields[0]);
       assertNotNull(vector);
-      assertEquals(testTerms.length, vector.getUniqueTermCount());
+      assertEquals(testTerms.length, vector.size());
       TermsEnum termsEnum = vector.iterator(null);
       for (int i = 0; i < testTerms.length; i++) {
         final BytesRef text = termsEnum.next();
@@ -223,7 +223,7 @@ public void testDocsEnum() throws IOException {
     for (int j = 0; j < 5; j++) {
       Terms vector = reader.get(j).terms(testFields[0]);
       assertNotNull(vector);
-      assertEquals(testTerms.length, vector.getUniqueTermCount());
+      assertEquals(testTerms.length, vector.size());
       TermsEnum termsEnum = vector.iterator(null);
       DocsEnum docsEnum = null;
       for (int i = 0; i < testTerms.length; i++) {
@@ -250,7 +250,7 @@ public void testPositionReader() throws IOException {
     BytesRef[] terms;
     Terms vector = reader.get(0).terms(testFields[0]);
     assertNotNull(vector);
-    assertEquals(testTerms.length, vector.getUniqueTermCount());
+    assertEquals(testTerms.length, vector.size());
     TermsEnum termsEnum = vector.iterator(null);
     DocsAndPositionsEnum dpEnum = null;
     for (int i = 0; i < testTerms.length; i++) {
@@ -287,7 +287,7 @@ public void testPositionReader() throws IOException {
 
     Terms freqVector = reader.get(0).terms(testFields[1]); //no pos, no offset
     assertNotNull(freqVector);
-    assertEquals(testTerms.length, freqVector.getUniqueTermCount());
+    assertEquals(testTerms.length, freqVector.size());
     termsEnum = freqVector.iterator(null);
     assertNotNull(termsEnum);
     for (int i = 0; i < testTerms.length; i++) {
@@ -306,7 +306,7 @@ public void testOffsetReader() throws IOException {
     assertNotNull(vector);
     TermsEnum termsEnum = vector.iterator(null);
     assertNotNull(termsEnum);
-    assertEquals(testTerms.length, vector.getUniqueTermCount());
+    assertEquals(testTerms.length, vector.size());
     DocsAndPositionsEnum dpEnum = null;
     for (int i = 0; i < testTerms.length; i++) {
       final BytesRef text = termsEnum.next();
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.java
index 6e80bc2b..5df001c0 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.java
@@ -120,7 +120,7 @@ public int getDocCount() throws IOException {
         }
 
         @Override
-        public long getUniqueTermCount() throws IOException {
+        public long size() throws IOException {
           return -1;
         }
       });
diff --git a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java
index 9e2d3915..838ca96b 100644
--- a/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java
+++ b/lucene/dev/branches/lucene3969/lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java
@@ -98,7 +98,7 @@ public void testTermVectors() throws IOException {
     for (int i = 0; i < hits.length; i++) {
       Fields vectors = searcher.reader.getTermVectors(hits[i].doc);
       assertNotNull(vectors);
-      assertEquals("doc=" + hits[i].doc + " tv=" + vectors, 1, vectors.getUniqueFieldCount());
+      assertEquals("doc=" + hits[i].doc + " tv=" + vectors, 1, vectors.size());
     }
     Terms vector;
     vector = searcher.reader.getTermVectors(hits[0].doc).terms("noTV");
@@ -121,13 +121,13 @@ public void testTermVectorsFieldOrder() throws IOException {
     IndexReader reader = writer.getReader();
     writer.close();
     Fields v = reader.getTermVectors(0);
-    assertEquals(4, v.getUniqueFieldCount());
+    assertEquals(4, v.size());
     String[] expectedFields = new String[]{"a", "b", "c", "x"};
     int[] expectedPositions = new int[]{1, 2, 0};
     FieldsEnum fieldsEnum = v.iterator();
     for(int i=0;i<expectedFields.length;i++) {
       assertEquals(expectedFields[i], fieldsEnum.next());
-      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());
+      assertEquals(3, v.terms(expectedFields[i]).size());
 
       DocsAndPositionsEnum dpEnum = null;
       Terms terms = fieldsEnum.terms();
@@ -166,7 +166,7 @@ public void testTermPositionVectors() throws IOException {
     for (int i = 0; i < hits.length; i++) {
       Fields vectors = searcher.reader.getTermVectors(hits[i].doc);
       assertNotNull(vectors);
-      assertEquals(1, vectors.getUniqueFieldCount());
+      assertEquals(1, vectors.size());
       
       TermsEnum termsEnum = vectors.terms("field").iterator(null);
       assertNotNull(termsEnum.next());
@@ -205,7 +205,7 @@ public void testTermOffsetVectors() throws IOException {
     for (int i = 0; i < hits.length; i++) {
       Fields vectors = searcher.reader.getTermVectors(hits[i].doc);
       assertNotNull(vectors);
-      assertEquals(1, vectors.getUniqueFieldCount());
+      assertEquals(1, vectors.size());
     }
   }
 
@@ -303,7 +303,7 @@ public void testKnownSetOfDocuments() throws IOException {
     Terms vector = knownSearcher.reader.getTermVectors(hits[1].doc).terms("field");
     assertNotNull(vector);
     //System.out.println("Vector: " + vector);
-    assertEquals(10, vector.getUniqueTermCount());
+    assertEquals(10, vector.size());
     TermsEnum termsEnum = vector.iterator(null);
     while(termsEnum.next() != null) {
       String term = termsEnum.term().utf8ToString();
@@ -371,7 +371,7 @@ public void testRareVectors() throws IOException {
 
       Fields vectors = searcher.reader.getTermVectors(hits[i].doc);
       assertNotNull(vectors);
-      assertEquals(1, vectors.getUniqueFieldCount());
+      assertEquals(1, vectors.size());
     }
     reader.close();
   }
@@ -418,10 +418,10 @@ public void testMixedVectrosVectors() throws IOException {
 
     Fields vectors = searcher.reader.getTermVectors(hits[0].doc);
     assertNotNull(vectors);
-    assertEquals(1, vectors.getUniqueFieldCount());
+    assertEquals(1, vectors.size());
     Terms vector = vectors.terms("field");
     assertNotNull(vector);
-    assertEquals(1, vector.getUniqueTermCount());
+    assertEquals(1, vector.size());
     TermsEnum termsEnum = vector.iterator(null);
     assertNotNull(termsEnum.next());
     assertEquals("one", termsEnum.term().utf8ToString());
diff --git a/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java b/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
index 75667c40..bf3d0324 100644
--- a/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
+++ b/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
@@ -110,7 +110,7 @@ public Terms terms(String field) {
     }
 
     @Override
-    public int getUniqueFieldCount() {
+    public int size() {
       return fieldToTerms.size();
     }
 
@@ -136,7 +136,7 @@ public void close() {
     }
 
     @Override
-    public long getUniqueTermCount() {
+    public long size() {
       return termToDocs.size();
     }
 
diff --git a/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java b/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
index 6c11e41c..972f8ae5 100644
--- a/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
+++ b/lucene/dev/branches/lucene3969/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
@@ -130,7 +130,7 @@ public FieldFilterFields(Fields in) {
     }
 
     @Override
-    public int getUniqueFieldCount() throws IOException {
+    public int size() throws IOException {
       // TODO: add faster implementation!
       int c = 0;
       final FieldsEnum it = iterator();
diff --git a/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java b/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
index 263fc8b7..2d0b26d4 100644
--- a/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
+++ b/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
@@ -30,7 +30,6 @@
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DocsAndPositionsEnum;
-import org.apache.lucene.index.DocsEnum;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Terms;
@@ -106,7 +105,7 @@ public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {
 
     IndexReader r = IndexReader.open(dir);
     Terms vector = r.getTermVectors(0).terms("field");
-    assertEquals(1, vector.getUniqueTermCount());
+    assertEquals(1, vector.size());
     TermsEnum termsEnum = vector.iterator(null);
     termsEnum.next();
     assertEquals(2, termsEnum.totalTermFreq());
diff --git a/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java b/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java
index 17aeafcf..8551bcc5 100644
--- a/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java
+++ b/lucene/dev/branches/lucene3969/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java
@@ -450,6 +450,10 @@ protected TokenStreamComponents createComponents(String fieldName, Reader reader
     }
   }
   
+  // NOTE: this is an invalid test... SynFilter today can't
+  // properly consume a graph... we can re-enable this once
+  // we fix that...
+  /*
   // Adds MockGraphTokenFilter before SynFilter:
   public void testRandom2GraphBefore() throws Exception {
     final int numIters = atLeast(10);
@@ -474,6 +478,7 @@ protected TokenStreamComponents createComponents(String fieldName, Reader reader
       checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);
     }
   }
+  */
 
   // Adds MockGraphTokenFilter after SynFilter:
   public void testRandom2GraphAfter() throws Exception {
diff --git a/lucene/dev/branches/lucene3969/modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java b/lucene/dev/branches/lucene3969/modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
index a6890aff..cbee4f6a 100644
--- a/lucene/dev/branches/lucene3969/modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
+++ b/lucene/dev/branches/lucene3969/modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
@@ -753,7 +753,7 @@ public void testIndexWriterSettings() throws Exception {
     IndexReader reader = IndexReader.open(dir);
     Fields tfv = reader.getTermVectors(0);
     assertNotNull(tfv);
-    assertTrue(tfv.getUniqueFieldCount() > 0);
+    assertTrue(tfv.size() > 0);
     reader.close();
   }
 
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
index 9d48d1a7..b9e74098 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
@@ -58,9 +58,13 @@ public int getTermInfosIndexDivisor() {
    * Creates a new IndexReader instance using the given Directory.
    * 
    * @param indexDir indexDir index location
+   * @param core {@link SolrCore} instance where this reader will be used. NOTE:
+   * this SolrCore instance may not be fully configured yet, but basic things like
+   * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getSchema()} and
+   * {@link SolrCore#getSolrConfig()} are valid.
    * @return An IndexReader instance
    * @throws IOException
    */
-  public abstract DirectoryReader newReader(Directory indexDir)
+  public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)
       throws IOException;
 }
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/StandardIndexReaderFactory.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/StandardIndexReaderFactory.java
index b68ee0f9..535be1e5 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/StandardIndexReaderFactory.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/core/StandardIndexReaderFactory.java
@@ -31,7 +31,7 @@
 public class StandardIndexReaderFactory extends IndexReaderFactory {
   
   @Override
-  public DirectoryReader newReader(Directory indexDir) throws IOException {
+  public DirectoryReader newReader(Directory indexDir, SolrCore core) throws IOException {
     return DirectoryReader.open(indexDir, termInfosIndexDivisor);
   }
 }
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
index 9f254a81..6df7a214 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
@@ -595,7 +595,7 @@ private static void getDetailedFieldInfo(SolrQueryRequest req, String field, Sim
       if (freq > tiq.minFreq) {
         UnicodeUtil.UTF8toUTF16(text, spare);
         String t = spare.toString();
-        tiq.distinctTerms = new Long(terms.getUniqueTermCount()).intValue();
+        tiq.distinctTerms = new Long(terms.size()).intValue();
 
         tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));
         if (tiq.size() > numTerms) { // if tiq full
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java
index e7756e1f..f49fee86 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java
@@ -17,7 +17,6 @@
 
 package org.apache.solr.handler.admin;
 
-import org.apache.commons.io.IOUtils;
 import org.apache.solr.cloud.ZkSolrResourceLoader;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
@@ -38,7 +37,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.URISyntaxException;
 import java.util.Date;
@@ -88,11 +86,9 @@
   
   protected Set<String> hiddenFiles;
   
-  private static ShowFileRequestHandler instance;
   public ShowFileRequestHandler()
   {
     super();
-    instance = this; // used so that getFileContents can access hiddenFiles
   }
 
   @Override
@@ -281,29 +277,6 @@ private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp)
     rsp.setHttpCaching(false);
   }
   
-  /**
-   * This is a utility function that lets you get the contents of an admin file
-   * 
-   * It is only used so that we can get rid of "/admin/get-file.jsp" and include
-   * "admin-extra.html" in "/admin/index.html" using jsp scriptlets
-   */
-  public static String getFileContents(SolrCore core, String path )
-  {
-    if( instance != null && instance.hiddenFiles != null ) {
-      if( instance.hiddenFiles.contains( path ) ) {
-        return ""; // ignore it...
-      }
-    }
-    InputStream input = null;
-    try {
-      input = core.getResourceLoader().openResource(path);
-      return IOUtils.toString( input, "UTF-8" );
-    } catch( Exception ex ) {
-    } finally {
-      IOUtils.closeQuietly(input);
-    }
-    return "";
-  }
 
   //////////////////////// SolrInfoMBeans methods //////////////////////
 
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java
index 52df1448..0081e240 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java
@@ -177,7 +177,7 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw
           // Something in the category changed
           // Now iterate the real beans
           
-          NamedList<NamedList<Object>> cat = new NamedList<NamedList<Object>>();
+          NamedList<NamedList<Object>> cat = new SimpleOrderedMap<NamedList<Object>>();
           for(int j=0;j<ref_cat.size();j++) {
             String name = ref_cat.getName(j);
             NamedList<Object> ref_bean = ref_cat.get(name);
@@ -205,7 +205,7 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw
   }
   
   public NamedList diffNamedList(NamedList ref, NamedList now) {
-    NamedList out = new NamedList();
+    NamedList out = new SimpleOrderedMap();
     for(int i=0; i<ref.size(); i++) {
       String name = ref.getName(i);
       Object r = ref.getVal(i);
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index 5a9312e3..b2ae0edf 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -117,7 +117,7 @@
 
   public SolrIndexSearcher(SolrCore core, String path, IndexSchema schema, SolrIndexConfig config, String name, boolean enableCache, DirectoryFactory directoryFactory) throws IOException {
     // we don't need to reserve the directory because we get it from the factory
-    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType)), true, enableCache, false, directoryFactory);
+    this(core, schema,name, core.getIndexReaderFactory().newReader(directoryFactory.get(path, config.lockType), core), true, enableCache, false, directoryFactory);
   }
 
   public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, DirectoryReader r, boolean closeReader, boolean enableCache, boolean reserveDirectory, DirectoryFactory directoryFactory) throws IOException {
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/LogLevelSelection.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/LogLevelSelection.java
index 5a93d539..e69de29b 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/LogLevelSelection.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/LogLevelSelection.java
@@ -1,316 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.servlet;
-
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.solr.handler.admin.LogLevelHandler;
-
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.*;
-import java.util.logging.Level;
-import java.util.logging.LogManager;
-import java.util.logging.Logger;
-
-
-/**
- * Admin JDK Logger level report and selection servlet.
- *
- * @since solr 1.3
- * @deprecated  {@link LogLevelHandler} this servlet will be removed before solr 4.0
- */
-public final class LogLevelSelection extends HttpServlet {
-  @Override
-  public void init() throws ServletException {
-  }
-
-  /**
-   * Processes an HTTP GET request and changes the logging level as
-   * specified.
-   */
-  @Override
-  public void doGet(HttpServletRequest request,
-                    HttpServletResponse response)
-          throws IOException, ServletException {
-    // Output page
-
-    response.setContentType("text/html");
-    PrintWriter out = response.getWriter();
-    out.write("<html><head>\n");
-    out.write("<title>Solr Admin: JDK Log Level Selector</title>\n");
-    out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"solr-admin.css\" />");
-    out.write("</head><body>\n");
-    out.write("<a href=\".\"><img border=\"0\" align=\"right\" height=\"78\" width=\"142\" src=\"img/solr.png\" alt=\"Solr\"></a>");
-    out.write("<h1 style='margin-bottom:5px;'>JDK Log Level Selector</h1>");
-    out.write("<h2 style='color:#AA0000; margin-top:0px;'>This will be removed before Solr 4.0.  See <a href='/#/logging'>logging</a></h1>");
-
-    out.write("<p>Below is the complete JDK Log hierarchy with " +
-            "intermediate logger/categories synthesized.  " +
-            "The effective logging level is shown to the " +
-            "far right. If a logger has unset level, then " +
-            "the effective level is that of the nearest ancestor " +
-            "with a level setting.  Note that this only shows " +
-            "JDK Log levels.</p>\n");
-
-    out.write("<form method='POST'>\n");
-
-    out.write("<input type='submit' name='submit' value='set' " +
-            "class='button'>\n");
-    out.write("<input type='submit' name='submit' value='cancel' " +
-            "class='button'>\n");
-    out.write("<br><br>\n");
-
-    out.write("<table cellspacing='2' cellpadding='2'>");
-
-    out.write("<tr bgcolor='#CCCCFF'>" +
-            "<th align=left>Logger/Category name<br>" +
-            "<th colspan=9>Level</th>" +
-            "</tr><tr bgcolor='#CCCCFF'>" +
-            "<td bgcolor='#AAAAAA'>" +
-            "(Dark rows don't yet exist.)</td>");
-
-    for (int j = 0; j < LEVELS.length; ++j) {
-      out.write("<th align=left>");
-      if (LEVELS[j] != null) out.write(LEVELS[j].toString());
-      else out.write("unset");
-      out.write("</th>");
-    }
-    out.write("<th align=left>Effective</th>\n");
-    out.write("</tr>\n");
-
-    Iterator iWrappers = buildWrappers().iterator();
-    while (iWrappers.hasNext()) {
-
-      LogWrapper wrapper = (LogWrapper) iWrappers.next();
-
-      out.write("<tr");
-      if (wrapper.logger == null) {
-        out.write(" bgcolor='#AAAAAA'");
-      }
-      //out.write( ( wrapper.logger != null ) ? "#DDDDDD" : "#AAAAAA" );
-      out.write("><td>");
-      if ("".equals(wrapper.name)) {
-        out.write("root");
-      } else {
-        out.write(wrapper.name);
-      }
-      out.write("</td>\n");
-      for (int j = 0; j < LEVELS.length; ++j) {
-        out.write("<td align=center>");
-        if (!wrapper.name.equals("root") ||
-                (LEVELS[j] != null)) {
-          out.write("<input type='radio' name='");
-          if ("".equals(wrapper.name)) {
-            out.write("root");
-          } else {
-            out.write(wrapper.name);
-          }
-          out.write("' value='");
-          if (LEVELS[j] != null) out.write(LEVELS[j].toString());
-          else out.write("unset");
-          out.write('\'');
-          if (LEVELS[j] == wrapper.level()) out.write(" checked");
-          out.write('>');
-        }
-        out.write("</td>\n");
-      }
-      out.write("<td align=center>");
-      if (wrapper.logger != null) {
-        out.write(getEffectiveLevel(wrapper.logger).toString());
-      }
-      out.write("</td></tr>\n");
-    }
-    out.write("</table>\n");
-
-    out.write("<br>\n");
-    out.write("<input type='submit' name='submit' value='set' " +
-            "class='button'>\n");
-    out.write("<input type='submit' name='submit' value='cancel' " +
-            "class='button'>\n");
-
-    out.write("</form>\n");
-
-    out.write("</body></html>\n");
-  }
-
-
-  @Override
-  public void doPost(HttpServletRequest request,
-                     HttpServletResponse response)
-          throws IOException, ServletException {
-    if (request.getParameter("submit").equals("set")) {
-
-      Map paramMap = request.getParameterMap();
-
-      Iterator iParams = paramMap.entrySet().iterator();
-      while (iParams.hasNext()) {
-        Map.Entry p = (Map.Entry) iParams.next();
-        String name = (String) p.getKey();
-        String value = ((String[]) p.getValue())[0];
-
-        if (name.equals("submit")) continue;
-        Logger logger;
-        LogManager logManager = LogManager.getLogManager();
-        if ("root".equals(name)) {
-          logger = logManager.getLogger("");
-        } else logger = logManager.getLogger(name);
-
-        if ("unset".equals(value)) {
-          if ((logger != null) && (logger.getLevel() != null)) {
-            logger.setLevel(null);
-            log.info("Unset log level on '" + name + "'.");
-          }
-        } else {
-          Level level = Level.parse(value);
-          if (logger == null) logger = Logger.getLogger(name);
-          if (logger.getLevel() != level) {
-            logger.setLevel(level);
-            log.info("Set '" + name + "' to " +
-                    level + " level.");
-          }
-        }
-      }
-    } else {
-      log.fine("Selection form cancelled");
-    }
-
-    // Redirect back to standard get page.
-    response.sendRedirect(request.getRequestURI());
-  }
-
-
-  private Collection buildWrappers() {
-    // Use tree to get sorted results
-    SortedSet<LogWrapper> roots = new TreeSet<LogWrapper>();
-
-    roots.add(LogWrapper.ROOT);
-
-    LogManager logManager = LogManager.getLogManager();
-
-    Enumeration<String> loggerNames = logManager.getLoggerNames();
-    while (loggerNames.hasMoreElements()) {
-      String name = loggerNames.nextElement();
-      Logger logger = Logger.getLogger(name);
-      LogWrapper wrapper = new LogWrapper(logger);
-      roots.remove(wrapper); // Make sure add occurs
-      roots.add(wrapper);
-
-      while (true) {
-        int dot = name.lastIndexOf(".");
-        if (dot < 0) break;
-        name = name.substring(0, dot);
-        roots.add(new LogWrapper(name)); // if not already
-      }
-    }
-
-    return roots;
-  }
-
-  private Level getEffectiveLevel(Logger logger) {
-    Level level = logger.getLevel();
-    if (level != null) {
-      return level;
-    }
-    for (Level l : LEVELS) {
-      if (l == null) {
-        // avoid NPE
-        continue;
-      }
-      if (logger.isLoggable(l)) {
-        // return first level loggable
-        return l;
-      }
-    }
-    return Level.OFF;
-  }
-
-  private static class LogWrapper
-          implements Comparable {
-    public static LogWrapper ROOT =
-            new LogWrapper(LogManager.getLogManager().getLogger(""));
-
-    public LogWrapper(Logger logger) {
-      this.logger = logger;
-      this.name = logger.getName();
-    }
-
-    public LogWrapper(String name) {
-      this.name = name;
-    }
-
-
-    public int compareTo(Object other) {
-      if (this.equals(other)) return 0;
-      if (this == ROOT) return -1;
-      if (other == ROOT) return 1;
-
-      return name.compareTo(((LogWrapper) other).name);
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      if (this == obj)
-        return true;
-      if (obj == null)
-        return false;
-      if (getClass() != obj.getClass())
-        return false;
-      LogWrapper other = (LogWrapper) obj;
-      if (name == null) {
-        if (other.name != null)
-          return false;
-      } else if (!name.equals(other.name))
-        return false;
-      return true;
-    }
-    
-    @Override
-    public int hashCode() {
-      final int prime = 31;
-      int result = 1;
-      result = prime * result + ((name == null) ? 0 : name.hashCode());
-      return result;
-    }
-
-    public Level level() {
-      if (logger != null) return logger.getLevel();
-      return null;
-    }
-
-    public Logger logger = null;
-    public String name;
-  }
-
-  private static Level[] LEVELS = {
-          null, // aka unset
-          Level.FINEST,
-          Level.FINE,
-          Level.CONFIG,
-          Level.INFO,
-          Level.WARNING,
-          Level.SEVERE,
-          Level.OFF
-          // Level.ALL -- ignore.  It is useless.
-  };
-
-  private Logger log = Logger.getLogger(getClass().getName());
-}
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java
index e69de29b..f37fa5a3 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java
@@ -0,0 +1,67 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.servlet;
+
+import java.io.IOException;
+
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * A Simple redirection servlet to help us deprecate old UI elements
+ */
+public class RedirectServlet extends HttpServlet{
+  
+  static final String CONTEXT_KEY = "${context}";
+  
+  String destination;
+  int code = HttpServletResponse.SC_MOVED_PERMANENTLY;
+  
+  public void init(ServletConfig config) throws ServletException {
+    super.init(config);
+    
+    destination = config.getInitParameter("destination");
+    if(destination==null) {
+      throw new ServletException("RedirectServlet missing destination configuration");
+    }
+    if( "false".equals(config.getInitParameter("permanent") )) {
+      code = HttpServletResponse.SC_MOVED_TEMPORARILY;
+    }
+    
+    // Replace the context key
+    if(destination.startsWith(CONTEXT_KEY)) {
+      destination = config.getServletContext().getContextPath()
+          +destination.substring(CONTEXT_KEY.length());
+    }
+  }
+  
+  public void doGet(HttpServletRequest req, HttpServletResponse res)
+          throws ServletException,IOException {
+      
+    res.setStatus(code);
+    res.setHeader("Location", destination);
+  }
+
+  public void doPost(HttpServletRequest req, HttpServletResponse res)
+          throws ServletException,IOException {
+    doGet(req,res);
+  }
+}
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/TestDistributedSearch.java b/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/TestDistributedSearch.java
index a8022b51..0b9f3a9a 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/TestDistributedSearch.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/TestDistributedSearch.java
@@ -358,7 +358,9 @@ public void doTest() throws Exception {
     // Thread.sleep(10000000000L);
   }
   
-  protected void queryPartialResults(final List<String> upShards, List<SolrServer> upClients, Object... q) throws Exception {
+  protected void queryPartialResults(final List<String> upShards, 
+                                     final List<SolrServer> upClients, 
+                                     Object... q) throws Exception {
     
     final ModifiableSolrParams params = new ModifiableSolrParams();
 
@@ -385,8 +387,8 @@ protected void queryPartialResults(final List<String> upShards, List<SolrServer>
           @Override
           public void run() {
             for (int j = 0; j < stress; j++) {
-              int which = r.nextInt(clients.size());
-              SolrServer client = clients.get(which);
+              int which = r.nextInt(upClients.size());
+              SolrServer client = upClients.get(which);
               try {
                 QueryResponse rsp = client.query(new ModifiableSolrParams(params));
                 if (verifyStress) {
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java b/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
index e920b1d5..6ae10625 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
@@ -93,7 +93,7 @@ private void deleteNode(final String path) {
 
     public void close(){
       try {
-        deleteNode(ZkStateReader.LIVE_NODES_ZKNODE + "/" + "node1");
+        deleteNode(ZkStateReader.LIVE_NODES_ZKNODE + "/" + nodeName);
         zkClient.close();
       } catch (InterruptedException e) {
         //e.printStackTrace();
@@ -127,7 +127,7 @@ public void publishState(String coreName, String stateName, int numShards)
           ZkStateReader.toJSON(coreStates.values().toArray(
               new CoreState[coreStates.size()])), true);
       
-      for (int i = 0; i < 10; i++) {
+      for (int i = 0; i < 30; i++) {
         String shardId = getShardId(coreName);
         if (shardId != null) {
           try {
@@ -154,11 +154,11 @@ private String getShardId(final String coreName) {
           collection);
       if (slices != null) {
         for (Slice slice : slices.values()) {
-          if (slice.getShards().containsKey(nodeName + "_" + coreName))
-          ;
+          if (slice.getShards().containsKey(nodeName + "_" + coreName)) {
           return slice.getName();
         }
       }
+      }
       return null;
     }
   }    
diff --git a/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java b/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
index 09ca9fce..0578d405 100644
--- a/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
+++ b/lucene/dev/branches/lucene3969/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
@@ -61,7 +61,7 @@ public Directory create(String path) throws IOException {
     static volatile boolean newReaderCalled = false;
 
     @Override
-    public DirectoryReader newReader(Directory indexDir) throws IOException {
+    public DirectoryReader newReader(Directory indexDir, SolrCore core) throws IOException {
       TestIndexReaderFactory.newReaderCalled = true;
       return DirectoryReader.open(indexDir);
     }
