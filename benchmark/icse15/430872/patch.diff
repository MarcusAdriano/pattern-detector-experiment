diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java
index b9b8446f..51ff9703 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java
@@ -20,8 +20,9 @@
 package org.apache.derbyTesting.functionTests.util;
 
 import junit.framework.TestCase;
-import java.io.InputStream;
+
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Reader;
 import java.io.PrintStream;
 import java.net.URL;
@@ -76,11 +77,21 @@ public BaseTestCase(String name) {
      * setUp, tearDown methods and decorators.
      */
     public final void runBare() throws Throwable {
-    	// Not ready for prime time!
-    	// SecurityManagerSetup.installSecurityManager();
+        // still not ready for prime time
+    	//if (getTestConfiguration().defaultSecurityManagerSetup())
+    	//	assertSecurityManager();
+    	
     	super.runBare();
     }
     
+    /**
+     * Return the current configuration for the test.
+     */
+    public final TestConfiguration getTestConfiguration()
+    {
+    	return CONFIG;
+    }
+    
     /**
      * Print alarm string
      * @param text String to print
@@ -205,6 +216,27 @@ public Object run(){
 	     );
     }  
     
+    /**
+     * Open the URL for a a test resource, e.g. a policy
+     * file or a SQL script.
+     * @param url URL obtained from getTestResource
+     * @return An open stream
+    */
+    protected static InputStream openTestResource(final URL url)
+        throws PrivilegedActionException
+    {
+    	return (InputStream)AccessController.doPrivileged
+	    (new java.security.PrivilegedExceptionAction(){
+
+		    public Object run() throws IOException{
+			return url.openStream();
+
+		    }
+
+		}
+	     );    	
+    }
+    
     /**
      * Assert a security manager is installed.
      *
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/SecurityManagerSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/SecurityManagerSetup.java
index a2e3f2a9..9e287447 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/SecurityManagerSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/SecurityManagerSetup.java
@@ -76,6 +76,17 @@ public static Test noSecurityManager(BaseTestCase test)
 		return new SecurityManagerSetup(test, "<NONE>");
 	}
 	
+	/**
+	 * Install a SecurityManager with the default test policy
+	 * file:
+	 * org/apache/derbyTesting/functionTests/util/derby_tests.policy
+	 * 
+	 */
+	static void noSecurityManager() throws PrivilegedActionException
+	{
+		installSecurityManager("<NONE>");
+	}
+	
 	/**
 	 * Install specific polciy file with the security manager
 	 * including the special case of no security manager.
@@ -148,6 +159,10 @@ public Object run() {
 	private static void setSecurityPolicy(Properties set,
 			String policyResource) throws PrivilegedActionException
 	{
+		if ("<NONE>".equals(policyResource)) {
+			set.setProperty("java.security.policy", policyResource);
+			return;
+		}
 		URL policyURL = BaseTestCase.getTestResource(policyResource);
 
 		if (policyURL != null)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
index b9702510..c4da1d09 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
@@ -426,4 +426,28 @@ private static void loadJDBCDriver(String driverClass)
         }
     }
         
+    /*
+     * SecurityManager related configuration.
+     */
+    
+    /**
+     * Install the default security manager setup,
+     * for the current configuration.
+     * @throws PrivilegedActionException 
+     */
+    boolean defaultSecurityManagerSetup() throws PrivilegedActionException {
+    	
+    	// Testing with the DB2 client has not been performed
+    	// under the security manager since it's not part
+    	// of Derby so no real interest in tracking down issues.
+    	if (jdbcClient.isDB2Client()) {
+    		SecurityManagerSetup.noSecurityManager();
+    		return false;
+    	} else {
+    		SecurityManagerSetup.installSecurityManager();
+    		return true;
+    	}
+    }
+    
+        
 }
