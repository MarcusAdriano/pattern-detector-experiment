diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
index b9016ea7..328a4706 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
@@ -83,6 +83,7 @@
     /** The list of listeners for this reference.  This list will be lazy created */
     protected List<Listener> listeners;
 
+    protected final Object monitor = new Object();
     private final List<ServiceReference> references = new ArrayList<ServiceReference>();
     private final AtomicBoolean started = new AtomicBoolean();
     private final AtomicBoolean satisfied = new AtomicBoolean();
@@ -129,7 +130,7 @@ public void start(SatisfactionListener listener) {
                 satisfied.set(optional);
                 // Synchronized block on references so that service events won't interfere with initial references tracking
                 // though this may not be sufficient because we don't control ordering of those events
-                synchronized (references) {
+                synchronized (monitor) {
                     getBundleContextForServiceLookup().addServiceListener(this, getOsgiFilter());
                     ServiceReference[] references = getBundleContextForServiceLookup().getServiceReferences(null, getOsgiFilter());
                     if (references != null) {
@@ -149,7 +150,7 @@ public void start(SatisfactionListener listener) {
 
     public void stop() {
         if (started.compareAndSet(true, false)) {
-            synchronized (references) {
+            synchronized (monitor) {
                 getBundleContextForServiceLookup().removeServiceListener(this);
                 doStop();
                 for (Iterator<ServiceReference> it = references.iterator(); it.hasNext();) {
@@ -330,7 +331,7 @@ public void run() {
     private void serviceAdded(ServiceReference ref) {
         LOGGER.debug("Tracking reference {} for OSGi service {}", ref, getOsgiFilter());
         if (isStarted()) {
-            synchronized (references) {
+            synchronized (monitor) {
                 if (references.contains(ref)) {
                     return;
                 }
@@ -344,7 +345,7 @@ private void serviceAdded(ServiceReference ref) {
     private void serviceModified(ServiceReference ref) {
         // ref must be in references and must be satisfied
         if (isStarted()) {
-            synchronized (references) {
+            synchronized (monitor) {
                 if (references.contains(ref)) {
                     track(ref);
                 }
@@ -357,7 +358,7 @@ private void serviceRemoved(ServiceReference ref) {
             LOGGER.debug("Untracking reference {} for OSGi service {}", ref, getOsgiFilter());
             boolean removed;
             boolean satisfied;
-            synchronized (references) {
+            synchronized (monitor) {
                 removed = references.remove(ref);
                 satisfied = optional || !references.isEmpty();
             }
@@ -439,13 +440,13 @@ protected void unbind(ServiceReference reference, Object service) {
     }
     
     public List<ServiceReference> getServiceReferences() {
-        synchronized (references) {
+        synchronized (monitor) {
             return new ArrayList<ServiceReference>(references);
         }
     }
 
     public ServiceReference getBestServiceReference() {
-        synchronized (references) {
+        synchronized (monitor) {
             int length = references.size();
             if (length == 0) { /* if no service is being tracked */
                 return null;
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
index f19d9ea4..45c85eb9 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
@@ -50,7 +50,6 @@
     private final List<ManagedCollection> collections = new ArrayList<ManagedCollection>();
     private final DynamicCollection<ServiceDispatcher> storage = new DynamicCollection<ServiceDispatcher>();
     private final List<ServiceDispatcher> unboundDispatchers = new ArrayList<ServiceDispatcher>();
-    private final Object monitor = new Object();
     
     public ReferenceListRecipe(String name,
                          ExtendedBlueprintContainer blueprintContainer,
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
index 1c815860..0a1b2b28 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
@@ -61,7 +61,6 @@
     private volatile ServiceReference trackedServiceReference;
     private volatile Object trackedService;
     private Object defaultBean;
-    private final Object monitor = new Object();
 
     private final Collection<Class<?>> proxyChildBeanClasses;
     private final Collection<WeakReference<Voidable>> proxiedChildren;
