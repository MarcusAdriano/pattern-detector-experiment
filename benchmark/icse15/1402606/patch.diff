diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
index c0683c7b..845ae0b7 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
@@ -111,7 +111,6 @@ protected AbstractServiceReferenceRecipe(String name,
         {
         	accessControlContext = null;
         }
-
     }
 
 
@@ -120,6 +119,7 @@ public CollectionRecipe getListenersRecipe() {
         return listenersRecipe;
     }
 
+    static boolean waited = false;
     public void start(SatisfactionListener listener) {
         if (listener == null) throw new NullPointerException("satisfactionListener is null");
         if (started.compareAndSet(false, true)) {
@@ -158,6 +158,7 @@ public void stop() {
                 }
                 satisfied.set(false);
             }
+            satisfactionListener = null;
         }
     }
 
@@ -301,10 +302,10 @@ protected Object createProxy(final Callable<Object> dispatcher, Set<Class<?>> in
     }
 
     public void serviceChanged(final ServiceEvent event) {
+        final int eventType = event.getType();
+        final ServiceReference ref = event.getServiceReference();
         blueprintContainer.getExecutors().submit(new Runnable() {
             public void run() {
-                int eventType = event.getType();
-                ServiceReference ref = event.getServiceReference();
                 switch (eventType) {
                     case ServiceEvent.REGISTERED:
                         serviceAdded(ref);
@@ -322,6 +323,7 @@ public void run() {
 
     private void serviceAdded(ServiceReference ref) {
         LOGGER.debug("Tracking reference {} for OSGi service {}", ref, getOsgiFilter());
+        if (isStarted()) {
         synchronized (references) {
             if (references.contains(ref)) {
                 return;
@@ -331,13 +333,21 @@ private void serviceAdded(ServiceReference ref) {
         track(ref);
         setSatisfied(true);
     }
+    }
 
     private void serviceModified(ServiceReference ref) {
         // ref must be in references and must be satisfied
+        if (isStarted()) {
+            synchronized (references) {
+                if (references.contains(ref)) {
         track(ref);
     }
+            }
+        }
+    }
 
     private void serviceRemoved(ServiceReference ref) {
+        if (isStarted()) {
         LOGGER.debug("Untracking reference {} for OSGi service {}", ref, getOsgiFilter());
         boolean removed;
         boolean satisfied;
@@ -350,6 +360,7 @@ private void serviceRemoved(ServiceReference ref) {
         }
         setSatisfied(satisfied);
     }
+    }
     
     protected Class getInterfaceClass() {
         Class clz = getRuntimeClass(metadata);
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
index 8a3e8414..663b6abb 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
@@ -475,6 +475,7 @@ private void processTypeConverters() throws Exception {
     }
 
     private void processProcessors() throws Exception {
+        boolean changed = false;
         // Instanciate ComponentDefinitionRegistryProcessor and BeanProcessor
         for (BeanMetadata bean : getMetadata(BeanMetadata.class)) {
             if (bean instanceof ExtendedBeanMetadata && !((ExtendedBeanMetadata) bean).isProcessor()) {
@@ -495,12 +496,16 @@ private void processProcessors() throws Exception {
             if (ComponentDefinitionRegistryProcessor.class.isAssignableFrom(clazz)) {
                 Object obj = repository.create(bean.getId(), ProxyUtils.asList(ComponentDefinitionRegistryProcessor.class));
                 ((ComponentDefinitionRegistryProcessor) obj).process(componentDefinitionRegistry);
+                changed = true;
             } else if (Processor.class.isAssignableFrom(clazz)) {
                 Object obj = repository.create(bean.getId(), ProxyUtils.asList(Processor.class));
                 this.processors.add((Processor) obj);
+                changed = true;
             } else {
                 continue;
             }
+        }
+        if (changed) {
             // Update repository with recipes processed by the processors
             untrackServiceReferences();
             Repository tmpRepo = new RecipeBuilder(this, tempRecipeIdSpace).createRepository();
@@ -527,7 +532,6 @@ private void processProcessors() throws Exception {
                     LOGGER.debug("Recipe {} is already instantiated and cannot be updated", new Object[] { name });
                 }
             }
-            
             getSatisfiableDependenciesMap(true);
             trackServiceReferences();
         }
