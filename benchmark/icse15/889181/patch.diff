diff --git a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/FuzzyQuery.java b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/FuzzyQuery.java
index 539a4572..ccff995d 100644
--- a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/FuzzyQuery.java
+++ b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/FuzzyQuery.java
@@ -24,76 +24,21 @@
 import org.apache.lucene.util.ToStringUtils;
 
 import java.io.IOException;
-import java.io.Serializable;
-import java.util.PriorityQueue;
 
 /** Implements the fuzzy search query. The similarity measurement
  * is based on the Levenshtein (edit distance) algorithm.
  * 
- * Warning: this query is not very scalable with its default prefix
+ * <p><em>Warning:</em> this query is not very scalable with its default prefix
  * length of 0 - in this case, *every* term will be enumerated and
  * cause an edit score calculation.
  * 
+ * <p>This query uses {@link MultiTermQuery#TOP_TERMS_SCORING_BOOLEAN_REWRITE)
+ * as default. So terms will be collected and scored according to their
+ * edit distance. Only the top terms are used for building the {@link BooleanQuery}.
+ * It is not recommended to change the rewrite mode for fuzzy queries.
  */
 public class FuzzyQuery extends MultiTermQuery {
   
-  private static class FuzzyRewrite extends RewriteMethod implements Serializable {
-    @Override
-    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
-      int maxSize = BooleanQuery.getMaxClauseCount();
-      PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>(1024);
-      
-      TermsEnum termsEnum = query.getTermsEnum(reader);
-      assert termsEnum != null;
-      final String field = query.field;
-      if (field == null)
-        throw new NullPointerException("If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.");
-      final MultiTermQuery.BoostAttribute boostAtt =
-        termsEnum.attributes().addAttribute(MultiTermQuery.BoostAttribute.class);
-      ScoreTerm bottomSt = null;
-      TermRef t;
-      final Term placeholderTerm = new Term(field);
-      while ((t = termsEnum.next()) != null) {
-        if (t == null) break;
-        ScoreTerm st = new ScoreTerm(placeholderTerm.createTerm(t.toString()), boostAtt.getBoost());
-        if (stQueue.size() < maxSize) {
-          // record the current bottom item
-          if (bottomSt == null || st.compareTo(bottomSt) > 0) {
-            bottomSt = st;
-          }
-          // add to PQ, as it is not yet filled up
-          stQueue.offer(st);
-        } else {
-          assert bottomSt != null;
-          // only add to PQ, if the ScoreTerm is greater than the current bottom,
-          // as all entries will be enqueued after the current bottom and will never be visible
-          if (st.compareTo(bottomSt) < 0) {
-            stQueue.offer(st);
-          }
-        }
-        //System.out.println("current: "+st.term+"("+st.score+"), bottom: "+bottomSt.term+"("+bottomSt.score+")");
-      }
-      
-      BooleanQuery bq = new BooleanQuery(true);
-      int size = Math.min(stQueue.size(), maxSize);
-      for(int i = 0; i < size; i++){
-        ScoreTerm st = stQueue.poll();
-        TermQuery tq = new TermQuery(st.term);      // found a match
-        tq.setBoost(query.getBoost() * st.score); // set the boost
-        bq.add(tq, BooleanClause.Occur.SHOULD);          // add to query
-      }
-      query.incTotalNumberOfTerms(bq.clauses().size());
-      return bq;
-    }
-
-    // Make sure we are still a singleton even after deserializing
-    protected Object readResolve() {
-      return FUZZY_REWRITE;
-    }
-  }
-  
-  private final static RewriteMethod FUZZY_REWRITE = new FuzzyRewrite();
-
   public final static float defaultMinSimilarity = 0.5f;
   public final static int defaultPrefixLength = 0;
   
@@ -122,6 +67,7 @@ protected Object readResolve() {
   public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {
     super(term.field());
     this.term = term;
+    setRewriteMethod(TOP_TERMS_SCORING_BOOLEAN_REWRITE);
     
     if (minimumSimilarity >= 1.0f)
       throw new IllegalArgumentException("minimumSimilarity >= 1");
@@ -136,7 +82,6 @@ else if (minimumSimilarity < 0.0f)
     
     this.minimumSimilarity = minimumSimilarity;
     this.prefixLength = prefixLength;
-    rewriteMethod = FUZZY_REWRITE;
   }
   
   /**
@@ -193,11 +138,11 @@ public Term getTerm() {
     return term;
   }
 
-  @Override
-  public void setRewriteMethod(RewriteMethod method) {
-    throw new UnsupportedOperationException("FuzzyQuery cannot change rewrite method");
-  }
-  
+  /**
+   * @deprecated This class was used in previous FuzzyQuery implementations, but is now replaced by
+   * a new rewrite mode {@link MultiTermQuery#TOP_TERMS_SCORING_BOOLEAN_REWRITE}.
+   */
+  @Deprecated
   protected static class ScoreTerm implements Comparable<ScoreTerm> {
     public Term term;
     public float score;
diff --git a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/MultiTermQuery.java b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/MultiTermQuery.java
index cad6a7c0..4e0254e5 100644
--- a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -21,7 +21,7 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
-
+import java.util.PriorityQueue;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
@@ -54,7 +54,11 @@
  * <p>The recommended rewrite method is {@link
  * #CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}: it doesn't spend CPU
  * computing unhelpful scores, and it tries to pick the most
- * performant rewrite method given the query.
+ * performant rewrite method given the query. If you
+ * need scoring (like {@link FuzzyQuery}, use
+ * {@link #TOP_TERMS_SCORING_BOOLEAN_REWRITE} which uses
+ * a priority queue to only collect competitive terms
+ * and not hit this limitation.
  *
  * Note that {@link QueryParser} produces
  * MultiTermQueries using {@link
@@ -67,7 +71,8 @@
   
   /** Add this {@link Attribute} to a {@link TermsEnum} returned by {@link #getTermsEnum}
    * and update the boost on each returned term. This enables to control the boost factor
-   * for each matching term in {@link #SCORING_BOOLEAN_QUERY_REWRITE} mode.
+   * for each matching term in {@link #SCORING_BOOLEAN_QUERY_REWRITE} or
+   * {@link TOP_TERMS_SCORING_BOOLEAN_QUERY_REWRITE} mode.
    * {@link FuzzyQuery} is using this to take the edit distance into account.
    */
   public static interface BoostAttribute extends Attribute {
@@ -119,7 +124,7 @@ public void copyTo(AttributeImpl target) {
     public abstract Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException;
   }
 
-  private static final class ConstantScoreFilterRewrite extends RewriteMethod implements Serializable {
+  private static final class ConstantScoreFilterRewrite extends RewriteMethod {
     @Override
     public Query rewrite(IndexReader reader, MultiTermQuery query) {
       Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));
@@ -147,54 +152,70 @@ protected Object readResolve() {
    *  @see #setRewriteMethod */
   public final static RewriteMethod CONSTANT_SCORE_FILTER_REWRITE = new ConstantScoreFilterRewrite();
 
-  private static class ScoringBooleanQueryRewrite extends RewriteMethod implements Serializable {
-    @Override
-    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
+  private abstract static class BooleanQueryRewrite extends RewriteMethod {
 
+    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {
       final TermsEnum termsEnum = query.getTermsEnum(reader);
       if (termsEnum != null) {
         final BoostAttribute boostAtt =
           termsEnum.attributes().addAttribute(BoostAttribute.class);
-      
-        // nocommit -- if no terms we'd want to return NullQuery
-        BooleanQuery result = new BooleanQuery(true);
-        final String field = query.field;
-        if (field == null)
+        if (query.field == null)
           throw new NullPointerException("If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.");
         int count = 0;
         TermRef term;
-        final Term placeholderTerm = new Term(field);
+        final Term placeholderTerm = new Term(query.field);
         while ((term = termsEnum.next()) != null) {
-          TermQuery tq = new TermQuery(placeholderTerm.createTerm(term.toString())); // found a match
-          tq.setBoost(query.getBoost() * boostAtt.getBoost()); // set the boost
-          result.add(tq, BooleanClause.Occur.SHOULD); // add to query
+          if (collector.collect(placeholderTerm.createTerm(term.toString()), boostAtt.getBoost())) {
           count++;
+          } else {
+            break;
         }
-        query.incTotalNumberOfTerms(count);
-        return result;
+        }
+        return count;
       } else {
         // deprecated case
         final FilteredTermEnum enumerator = query.getEnum(reader);
-        BooleanQuery result = new BooleanQuery(true);
         int count = 0;
         try {
           do {
             Term t = enumerator.term();
             if (t != null) {
-              TermQuery tq = new TermQuery(t); // found a match
-              tq.setBoost(query.getBoost() * enumerator.difference()); // set the boost
-              result.add(tq, BooleanClause.Occur.SHOULD); // add to query
+              if (collector.collect(t, enumerator.difference())) {
               count++;
+              } else {
+                break;
+              }
             }
           } while (enumerator.next());    
         } finally {
           enumerator.close();
         }
-        query.incTotalNumberOfTerms(count);
-        return result;
+        return count;
       }
     }
 
+    protected interface TermCollector {
+      /** return false to stop collecting */
+      boolean collect(Term t, float boost) throws IOException;
+    }
+    
+  }
+  
+  private static class ScoringBooleanQueryRewrite extends BooleanQueryRewrite {
+    @Override
+    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {
+      final BooleanQuery result = new BooleanQuery(true);
+      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {
+        public boolean collect(Term t, float boost) {
+          TermQuery tq = new TermQuery(t); // found a match
+          tq.setBoost(query.getBoost() * boost); // set the boost
+          result.add(tq, BooleanClause.Occur.SHOULD); // add to query
+          return true;
+        }
+      }));
+      return result;
+    }
+
     // Make sure we are still a singleton even after deserializing
     protected Object readResolve() {
       return SCORING_BOOLEAN_QUERY_REWRITE;
@@ -216,6 +237,69 @@ protected Object readResolve() {
    *  @see #setRewriteMethod */
   public final static RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE = new ScoringBooleanQueryRewrite();
 
+  private static final class TopTermsScoringBooleanQueryRewrite extends BooleanQueryRewrite {
+    @Override
+    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
+      final int maxSize = BooleanQuery.getMaxClauseCount();
+      final PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>();
+      collectTerms(reader, query, new TermCollector() {
+        public boolean collect(Term t, float boost) {
+          // ignore uncompetetive hits
+          if (stQueue.size() >= maxSize && boost <= stQueue.peek().boost)
+            return true;
+          // add new entry in PQ
+          st.term = t;
+          st.boost = boost;
+          stQueue.offer(st);
+          // possibly drop entries from queue
+          st = (stQueue.size() > maxSize) ? stQueue.poll() : new ScoreTerm();
+          return true;
+        }
+        
+        // reusable instance
+        private ScoreTerm st = new ScoreTerm();
+      });
+      
+      final BooleanQuery bq = new BooleanQuery(true);
+      for (final ScoreTerm st : stQueue) {
+        TermQuery tq = new TermQuery(st.term);    // found a match
+        tq.setBoost(query.getBoost() * st.boost); // set the boost
+        bq.add(tq, BooleanClause.Occur.SHOULD);   // add to query
+      }
+      query.incTotalNumberOfTerms(bq.clauses().size());
+      return bq;
+    }
+
+    // Make sure we are still a singleton even after deserializing
+    protected Object readResolve() {
+      return TOP_TERMS_SCORING_BOOLEAN_REWRITE;
+    }
+  
+    private static class ScoreTerm implements Comparable<ScoreTerm> {
+      public Term term;
+      public float boost;
+      
+      public int compareTo(ScoreTerm other) {
+        if (this.boost == other.boost)
+          return other.term.compareTo(this.term);
+        else
+          return Float.compare(this.boost, other.boost);
+      }
+    }
+  }
+  
+  /** A rewrite method that first translates each term into
+   *  {@link BooleanClause.Occur#SHOULD} clause in a
+   *  BooleanQuery, and keeps the scores as computed by the
+   *  query.
+   *
+   * <p>This rewrite mode only uses the top scoring terms
+   * so it will not overflow the boolean max clause count.
+   * It is the default rewrite mode for {@link FuzzyQuery}.
+   *
+   *  @see #setRewriteMethod */
+  public final static RewriteMethod TOP_TERMS_SCORING_BOOLEAN_REWRITE = new TopTermsScoringBooleanQueryRewrite();
+
   private static class ConstantScoreBooleanQueryRewrite extends ScoringBooleanQueryRewrite implements Serializable {
     @Override
     public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
@@ -258,7 +342,7 @@ protected Object readResolve() {
    *  Otherwise, {@link #CONSTANT_SCORE_FILTER_REWRITE} is
    *  used.
    */
-  public static class ConstantScoreAutoRewrite extends RewriteMethod implements Serializable {
+  public static class ConstantScoreAutoRewrite extends BooleanQueryRewrite {
 
     // Defaults derived from rough tests with a 20.0 million
     // doc Wikipedia index.  With more than 350 terms in the
@@ -299,7 +383,7 @@ public double getDocCountPercent() {
     }
 
     @Override
-    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
+    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {
 
       // Get the enum and start visiting terms.  If we
       // exhaust the enum before hitting either of the
@@ -307,98 +391,59 @@ public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOExceptio
       // ConstantFilterRewrite:
       final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());
       final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);
-      int docVisitCount = 0;
 
-      TermsEnum termsEnum = query.getTermsEnum(reader);
-      if (termsEnum != null) {
-        final Collection<TermRef> pendingTerms = new ArrayList<TermRef>();
-        final String field = query.field;
-        if (field == null)
-          throw new NullPointerException("If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.");
-        TermRef term;
-        while ((term = termsEnum.next()) != null) {
-          pendingTerms.add((TermRef) term.clone());
-          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {
-            // Too many terms -- cut our losses now and make a filter.
-            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));
-            result.setBoost(query.getBoost());
-            return result;
-          }
-          // Loading the TermInfo from the terms dict here
-          // should not be costly, because 1) the
-          // query/filter will load the TermInfo when it
-          // runs, and 2) the terms dict has a cache:
-          docVisitCount += reader.docFreq(field, term);
-        }
-      
-        // Enumeration is done, and we hit a small
-        // enough number of terms & docs -- just make a
-        // BooleanQuery, now
+      final CutOffTermCollector col = new CutOffTermCollector(reader, docCountCutoff, termCountLimit);
+      collectTerms(reader, query, col);
 
-        // nocommit: if pendingTerms.size()==0 return NullQuery
+      if (col.hasCutOff) {
+        return CONSTANT_SCORE_FILTER_REWRITE.rewrite(reader, query);
+      } else {
         final Query result;
-        if (pendingTerms.isEmpty()) {
+        if (col.pendingTerms.isEmpty()) {
           result = new BooleanQuery(true);
         } else {
           BooleanQuery bq = new BooleanQuery(true);
-          final Term placeholderTerm = new Term(field);
-          for(TermRef termRef : pendingTerms) {
-            TermQuery tq = new TermQuery(placeholderTerm.createTerm(termRef.toString()));
+          for(Term term : col.pendingTerms) {
+            TermQuery tq = new TermQuery(term);
             bq.add(tq, BooleanClause.Occur.SHOULD);
           }
           // Strip scores
           result = new ConstantScoreQuery(new QueryWrapperFilter(bq));
           result.setBoost(query.getBoost());
         }
-        query.incTotalNumberOfTerms(pendingTerms.size());
+        query.incTotalNumberOfTerms(col.pendingTerms.size());
         return result;
-      } else {
-        final Collection<Term> pendingTerms = new ArrayList<Term>();
+      }
+    }
 
-        // deprecated case
-        FilteredTermEnum enumerator = query.getEnum(reader);
-        try {
-          while(true) {
-            Term t = enumerator.term();
-            if (t != null) {
+    private static final class CutOffTermCollector implements TermCollector {
+      CutOffTermCollector(IndexReader reader, int docCountCutoff, int termCountLimit) {
+        this.reader = reader;
+        this.docCountCutoff = docCountCutoff;
+        this.termCountLimit = termCountLimit;
+      }
+    
+      public boolean collect(Term t, float boost) throws IOException {
               pendingTerms.add(t);
+        if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {
+          hasCutOff = true;
+          return false;
+        }
               // Loading the TermInfo from the terms dict here
               // should not be costly, because 1) the
               // query/filter will load the TermInfo when it
               // runs, and 2) the terms dict has a cache:
+        // @deprecated: in 4.0 use TermRef for collectTerms()
               docVisitCount += reader.docFreq(t);
+        return true;
             }
 
-            if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {
-              // Too many terms -- make a filter.
-              Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));
-              result.setBoost(query.getBoost());
-              return result;
-            } else  if (!enumerator.next()) {
-              // Enumeration is done, and we hit a small
-              // enough number of terms & docs -- just make a
-              // BooleanQuery, now
-              final Query result;
-              if (pendingTerms.isEmpty()) {
-                result = new BooleanQuery(true);
-              } else {
-                BooleanQuery bq = new BooleanQuery(true);
-                for(Term term : pendingTerms) {
-                  TermQuery tq = new TermQuery(term);
-                  bq.add(tq, BooleanClause.Occur.SHOULD);
-                }
-                // Strip scores
-                result = new ConstantScoreQuery(new QueryWrapperFilter(bq));
-                result.setBoost(query.getBoost());
-              }
-              query.incTotalNumberOfTerms(pendingTerms.size());
-              return result;
-            }
-          }
-        } finally {
-          enumerator.close();
-        }
-      }
+      int docVisitCount = 0;
+      boolean hasCutOff = false;
+      
+      final IndexReader reader;
+      final int docCountCutoff, termCountLimit;
+      final ArrayList<Term> pendingTerms = new ArrayList<Term>();
     }
     
     @Override
