diff --git a/aries/trunk/spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java b/aries/trunk/spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
index ba058fc3..225fa0c8 100644
--- a/aries/trunk/spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
+++ b/aries/trunk/spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
@@ -74,7 +74,7 @@ public ProviderBundleTrackerCustomizer(BaseActivator activator, Bundle spiBundle
         Map<String, Object> customAttributes = new HashMap<String, Object>();
         if (bundle.getHeaders().get(SpiFlyConstants.REQUIRE_CAPABILITY) != null) {
             try {
-                providedServices = readRequireCapability(bundle.getHeaders(), customAttributes);
+                providedServices = readServiceLoaderMediatorCapabilityMetadata(bundle.getHeaders(), customAttributes);
             } catch (InvalidSyntaxException e) {
                 log(LogService.LOG_ERROR, "Unable to read capabilities from bundle " + bundle, e);
             }
@@ -191,7 +191,7 @@ public ProviderBundleTrackerCustomizer(BaseActivator activator, Bundle spiBundle
     // An empty list returned means 'all SPIs'
     // A return value of null means no SPIs
     // A populated list means: only these SPIs
-    private List<String> readRequireCapability(Dictionary<?,?> headers, Map<String, Object> customAttributes) throws InvalidSyntaxException {
+    private List<String> readServiceLoaderMediatorCapabilityMetadata(Dictionary<?,?> headers, Map<String, Object> customAttributes) throws InvalidSyntaxException {
         Object requirementHeader = headers.get(SpiFlyConstants.REQUIRE_CAPABILITY);
         if (requirementHeader == null)
             return null;
@@ -250,9 +250,6 @@ public ProviderBundleTrackerCustomizer(BaseActivator activator, Bundle spiBundle
             if ("".equals(registerDirective.trim()))
                 return null;
 
-            if ("*".equals(registerDirective.trim()))
-                return properties;
-
             if (implName.equals(registerDirective.trim()))
                 return properties;
         }
@@ -295,14 +292,14 @@ private GenericMetadata findCapability(List<GenericMetadata> capabilities, Strin
         return null;
     }
 
-    private static Collection<GenericMetadata> findAllMetadata(List<GenericMetadata> requirements, String namespace) {
-        List<GenericMetadata> reqs = new ArrayList<ManifestHeaderProcessor.GenericMetadata>();
-        for (GenericMetadata req : requirements) {
-            if (namespace.equals(req.getNamespace())) {
-                reqs.add(req);
+    private static Collection<GenericMetadata> findAllMetadata(List<GenericMetadata> requirementsOrCapabilities, String namespace) {
+        List<GenericMetadata> reqsCaps = new ArrayList<ManifestHeaderProcessor.GenericMetadata>();
+        for (GenericMetadata reqCap : requirementsOrCapabilities) {
+            if (namespace.equals(reqCap.getNamespace())) {
+                reqsCaps.add(reqCap);
             }
         }
-        return reqs;
+        return reqsCaps;
     }
 
     public void modifiedBundle(Bundle bundle, BundleEvent event, Object registrations) {
