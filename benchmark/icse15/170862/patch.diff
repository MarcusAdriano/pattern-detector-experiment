diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
index 3d394a0c..0df96a36 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
@@ -231,7 +231,27 @@ public NetworkServerControl() throws Exception
 	 * See class comments for more information
 	 */
     public static void main(String args[]) {
-		NetworkServerControlImpl.execute(args);
+        NetworkServerControlImpl server = null;
+        try
+        {
+            server = new NetworkServerControlImpl();
+    		server.executeWork(args);
+        }
+        catch (Exception e)
+        {
+			//if there was an error, exit(1)
+			if ((e.getMessage() == null) ||
+				!e.getMessage().equals(NetworkServerControlImpl.UNEXPECTED_ERR))
+			{
+				if (server != null)
+					server.consoleExceptionPrint(e);
+				else
+					e.printStackTrace();  // default output stream is System.out
+			}
+			// else, we've already printed a trace, so just exit.
+			System.exit(1);
+		}
+		System.exit(0);
 		
 	}
 
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index a28fe737..cbefaa01 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -133,7 +133,7 @@
 	private final static String DRDA_PROP_DEBUG = "derby.drda.debug";
 	private final static String CLOUDSCAPE_DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";
 
-	protected final static String UNEXPECTED_ERR = "Unexpected exception";
+	public final static String UNEXPECTED_ERR = "Unexpected exception";
 
 	private final static int MIN_MAXTHREADS = -1;
 	private final static int MIN_TIMESLICE = -1;
@@ -1719,36 +1719,6 @@ private String getCLSSysInfo() throws IOException
 		return bos.toString();
 	}
 
-	/**
-	 * Execute the command given on the command line
-	 *
-	 * @param args	array of arguments indicating command to be executed
-	 *
-	 * @exception Exception	throws an exception if an error occurs
-	 * see class comments for more information
-	 */
-	public static void execute(String args[]) 
-	{
-		NetworkServerControlImpl server = null;
-		try {
-			server = new NetworkServerControlImpl();
-			server.executeWork(args);
-		} catch (Exception e){
-			//if there was an error, exit(1)
-			if ((e.getMessage() == null) ||
-				!e.getMessage().equals(NetworkServerControlImpl.UNEXPECTED_ERR))
-			{
-				if (server != null)
-					server.consoleExceptionPrint(e);
-				else
-					e.printStackTrace();  // default output stream is System.out
-			}
-			// else, we've already printed a trace, so just exit.
-			System.exit(1);
-		}
-		System.exit(0);
-	}
-
 
 	/**
 	 * Execute the command given on the command line
@@ -1758,7 +1728,7 @@ public static void execute(String args[])
 	 * @exception Exception	throws an exception if an error occurs
 	 * see class comments for more information
 	 */
-	protected void executeWork(String args[]) throws Exception
+	public void executeWork(String args[]) throws Exception
 	{
 		// For convenience just use NetworkServerControlImpls log writer for user messages
 		logWriter = makePrintWriter(System.out);
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java
index 5b0bb1dc..ec04e647 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java
@@ -56,14 +56,29 @@
 		"ping", "-p", "9393"};
 
     private static  BufferedOutputStream bos = null;
+    
 	/**
 	 * Execute the given command and dump the results to standard out
 	 *
 	 * @param args	command and arguments
 	 * @exception Exception
 	 */
+    private static void execCmdDumpResults (String[] args)
+        throws Exception
+    {
+        execCmdDumpResults(args, 0);
+    }
 
-	private static void execCmdDumpResults (String[] args) throws Exception
+	/**
+	 * Execute the given command and dump the results to standard out
+	 *
+	 * @param args	command and arguments
+     * @param expectedExitCode the exit code that we expect from running this
+	 * @exception Exception
+	 */
+
+	private static void execCmdDumpResults (String[] args, int expectedExitCode)
+        throws Exception
 	{
         // We need the process inputstream and errorstream
         ProcessStreamResult prout = null;
@@ -100,6 +115,13 @@ private static void execCmdDumpResults (String[] args) throws Exception
 		prout.Wait();
 		prerr.Wait();
 
+        // DERBY-214
+        if ( pr.exitValue() != expectedExitCode )
+        {
+            System.out.println("FAIL: expected exit code of " +
+                expectedExitCode + ", got exit code of " + pr.exitValue());
+        }
+
 	}
 
 
@@ -124,17 +146,17 @@ public static void main (String args[]) throws Exception
 			//test connection - specifying host and port
 			execCmdDumpResults(TestConnectionCmd2);	
 			//test connection - specifying non-existant host and port
-			execCmdDumpResults(TestConnectionCmd3);	
+			execCmdDumpResults(TestConnectionCmd3, 1);	
 			//test connection - specifying non-existant host with '-' in the name
-			execCmdDumpResults(TestConnectionCmd3a);	
+			execCmdDumpResults(TestConnectionCmd3a, 1);	
 			//test connection - specifying host but no port
 			execCmdDumpResults(TestConnectionCmd4);	
 			//test connection - specifying host and invalid port
-			execCmdDumpResults(TestConnectionCmd5);	
+			execCmdDumpResults(TestConnectionCmd5, 1);	
 			//test connection - specifying no host and valid port
 			execCmdDumpResults(TestConnectionCmd6);	
 			//test connection - specifying no host and invalid port
-			execCmdDumpResults(TestConnectionCmd7);	
+			execCmdDumpResults(TestConnectionCmd7, 1);	
 
 			System.out.println("End test");
 			bos.close();
