diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/FailureDetector.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/FailureDetector.java
index 2f045efd..961058cf 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/FailureDetector.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/FailureDetector.java
@@ -122,6 +122,13 @@ public boolean isAlive(InetAddress ep)
         return epState != null && epState.isAlive();
     }
     
+    public void clear(InetAddress ep)
+    {
+        ArrivalWindow heartbeatWindow = arrivalSamples_.get(ep);
+        if (heartbeatWindow != null)
+            heartbeatWindow.clear();
+    }
+
     public void report(InetAddress ep)
     {
         if (logger_.isTraceEnabled())
@@ -150,6 +157,8 @@ public void interpret(InetAddress ep)
         
         if ( phi > phiConvictThreshold_ )
         {     
+            logger_.trace("notifying listeners that {} is down", ep);
+            logger_.trace("intervals: {} mean: {}", hbWnd, hbWnd.mean());
             for ( IFailureDetectionEventListener listener : fdEvntListeners_ )
             {
                 listener.convict(ep, phi);
@@ -206,6 +215,11 @@ public static void main(String[] args) throws Throwable
     // change.
     private final double PHI_FACTOR = 1.0 / Math.log(10.0);
 
+    // in the event of a long partition, never record an interval longer than the rpc timeout,
+    // since if a host is regularly experiencing connectivity problems lasting this long we'd
+    // rather mark it down quickly instead of adapting
+    private final double MAX_INTERVAL_IN_MS = DatabaseDescriptor.getRpcTimeout();
+
     ArrivalWindow(int size)
     {
         arrivalIntervals_ = new BoundedStatsDeque(size);
@@ -222,8 +236,11 @@ synchronized void add(double value)
         {
             interArrivalTime = Gossiper.intervalInMillis / 2;
         }
-        tLast_ = value;            
+        if (interArrivalTime <= MAX_INTERVAL_IN_MS)
         arrivalIntervals_.add(interArrivalTime);        
+        else
+            logger_.debug("Ignoring interval time of {}", interArrivalTime);
+        tLast_ = value;
     }
     
     synchronized double sum()
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java
index 0efb94f7..3c92aaf1 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -665,6 +665,13 @@ void notifyFailureDetector(InetAddress endpoint, EndpointState remoteEndpointSta
             if ( remoteGeneration > localGeneration )
             {
                 localEndpointState.updateTimestamp();
+                // this node was dead and the generation changed, this indicates a reboot, or possibly a takeover
+                // we will clean the fd intervals for it and relearn them
+                if (!localEndpointState.isAlive())
+                {
+                    logger.debug("Clearing interval times for {} due to generation change", endpoint);
+                    fd.clear(endpoint);
+                }
                 fd.report(endpoint);
                 return;
             }
@@ -676,6 +683,7 @@ void notifyFailureDetector(InetAddress endpoint, EndpointState remoteEndpointSta
                 if ( remoteVersion > localVersion )
                 {
                     localEndpointState.updateTimestamp();
+                    // just a version change, report to the fd
                     fd.report(endpoint);
                 }
             }
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/IFailureDetector.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/IFailureDetector.java
index 426eec80..8d45b47a 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/IFailureDetector.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/IFailureDetector.java
@@ -38,6 +38,12 @@
      */
     public boolean isAlive(InetAddress ep);
     
+    /**
+     * Clear any existing interval timings for this endpoint
+     * @param ep
+     */
+    public void clear(InetAddress ep);
+
     /**
      * This method is invoked by any entity wanting to interrogate the status of an endpoint. 
      * In our case it would be the Gossiper. The Failure Detector will then calculate Phi and
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/FailureDetector.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/FailureDetector.java
index 6cb3ae2c..90fa1131 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/FailureDetector.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/FailureDetector.java
@@ -150,6 +150,13 @@ public boolean isAlive(InetAddress ep)
         return epState != null && epState.isAlive();
     }
     
+    public void clear(InetAddress ep)
+    {
+        ArrivalWindow heartbeatWindow = arrivalSamples_.get(ep);
+        if (heartbeatWindow != null)
+            heartbeatWindow.clear();
+    }
+
     public void report(InetAddress ep)
     {
         if (logger_.isTraceEnabled())
@@ -178,6 +185,8 @@ public void interpret(InetAddress ep)
         
         if ( phi > phiConvictThreshold_ )
         {     
+            logger_.trace("notifying listeners that {} is down", ep);
+            logger_.trace("intervals: {} mean: {}", hbWnd, hbWnd.mean());
             for ( IFailureDetectionEventListener listener : fdEvntListeners_ )
             {
                 listener.convict(ep, phi);
@@ -234,6 +243,11 @@ public static void main(String[] args) throws Throwable
     // change.
     private final double PHI_FACTOR = 1.0 / Math.log(10.0);
 
+    // in the event of a long partition, never record an interval longer than the rpc timeout,
+    // since if a host is regularly experiencing connectivity problems lasting this long we'd
+    // rather mark it down quickly instead of adapting
+    private final double MAX_INTERVAL_IN_MS = DatabaseDescriptor.getRpcTimeout();
+
     ArrivalWindow(int size)
     {
         arrivalIntervals_ = new BoundedStatsDeque(size);
@@ -250,8 +264,11 @@ synchronized void add(double value)
         {
             interArrivalTime = Gossiper.intervalInMillis / 2;
         }
-        tLast_ = value;            
+        if (interArrivalTime <= MAX_INTERVAL_IN_MS)
         arrivalIntervals_.add(interArrivalTime);        
+        else
+            logger_.debug("Ignoring interval time of {}", interArrivalTime);
+        tLast_ = value;
     }
     
     synchronized double sum()
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/Gossiper.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/Gossiper.java
index e0672d77..cdc88d33 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -685,6 +685,13 @@ void notifyFailureDetector(InetAddress endpoint, EndpointState remoteEndpointSta
             if ( remoteGeneration > localGeneration )
             {
                 localEndpointState.updateTimestamp();
+                // this node was dead and the generation changed, this indicates a reboot, or possibly a takeover
+                // we will clean the fd intervals for it and relearn them
+                if (!localEndpointState.isAlive())
+                {
+                    logger.debug("Clearing interval times for {} due to generation change", endpoint);
+                    fd.clear(endpoint);
+                }
                 fd.report(endpoint);
                 return;
             }
@@ -696,6 +703,7 @@ void notifyFailureDetector(InetAddress endpoint, EndpointState remoteEndpointSta
                 if ( remoteVersion > localVersion )
                 {
                     localEndpointState.updateTimestamp();
+                    // just a version change, report to the fd
                     fd.report(endpoint);
                 }
             }
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/IFailureDetector.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/IFailureDetector.java
index 426eec80..8d45b47a 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/IFailureDetector.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/gms/IFailureDetector.java
@@ -38,6 +38,12 @@
      */
     public boolean isAlive(InetAddress ep);
     
+    /**
+     * Clear any existing interval timings for this endpoint
+     * @param ep
+     */
+    public void clear(InetAddress ep);
+
     /**
      * This method is invoked by any entity wanting to interrogate the status of an endpoint. 
      * In our case it would be the Gossiper. The Failure Detector will then calculate Phi and
