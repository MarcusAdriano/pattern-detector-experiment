diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java
index 0db92dfd..a414a089 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java
@@ -223,7 +223,7 @@ else if (format == SegmentInfos.FORMAT_CHECKSUM) {
               final int pos = termPositions.nextPosition();
               if (pos < 0)
                 throw new RuntimeException("term " + term + ": doc " + doc + ": pos " + pos + " is out of bounds");
-              if (pos <= lastPos)
+              if (pos < lastPos)
                 throw new RuntimeException("term " + term + ": doc " + doc + ": pos " + pos + " < lastPos " + lastPos);
             }
           }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java b/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java
index 3f14cc6a..b52a241c 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java
@@ -239,11 +239,13 @@ public void invertField(Fieldable field, Analyzer analyzer, final int maxFieldLe
 
       try {
         offsetEnd = offset-1;
-        Token token;
         for(;;) {
-          token = stream.next(localToken);
+          Token token = stream.next(localToken);
           if (token == null) break;
           position += (token.getPositionIncrement() - 1);
+          // LUCENE-1255: don't allow negative positon
+          if (position < 0)
+            position = 0;
           addPosition(token);
           if (++length >= maxFieldLength) {
             if (threadState.docWriter.infoStream != null)
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
index a09d8efa..bbb6bdf1 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
@@ -1692,8 +1692,11 @@ private void closeInternal(boolean waitForMerges) throws CorruptIndexException,
       throw oom;
     } finally {
       synchronized(this) {
-        if (!closed)
+        if (!closed) {
           closing = false;
+          if (infoStream != null)
+            message("hit exception while closing");
+        }
         notifyAll();
       }
     }
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
index 79e41838..e34c80e3 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -30,6 +30,7 @@
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.analysis.WhitespaceTokenizer;
 import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.SinkTokenizer;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
@@ -40,6 +41,9 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Hits;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.spans.SpanTermQuery;
+import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.store.RAMDirectory;
@@ -3549,4 +3553,46 @@ public void testIncrementalUnicodeStrings() throws Throwable {
         assertEquals(expected[i], utf16a.result[i]);
     }
   }
+
+  // LUCENE-1255
+  public void testNegativePositions() throws Throwable {
+    SinkTokenizer tokens = new SinkTokenizer();
+    Token t = new Token();
+    t.setTermText("a");
+    t.setPositionIncrement(0);
+    tokens.add(t);
+    t.setTermText("b");
+    t.setPositionIncrement(1);
+    tokens.add(t);
+    t.setTermText("c");
+    tokens.add(t);
+
+    MockRAMDirectory dir = new MockRAMDirectory();
+    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);
+    Document doc = new Document();
+    doc.add(new Field("field", tokens));
+    w.addDocument(doc);
+    w.commit();
+
+    IndexSearcher s = new IndexSearcher(dir);
+    PhraseQuery pq = new PhraseQuery();
+    pq.add(new Term("field", "a"));
+    pq.add(new Term("field", "b"));
+    pq.add(new Term("field", "c"));
+    Hits hits = s.search(pq);
+    assertEquals(1, hits.length());
+
+    Query q = new SpanTermQuery(new Term("field", "a"));
+    hits = s.search(q);
+    assertEquals(1, hits.length());
+    TermPositions tps = s.getIndexReader().termPositions(new Term("field", "a"));
+    assertTrue(tps.next());
+    assertEquals(1, tps.freq());
+    assertEquals(0, tps.nextPosition());
+    w.close();
+
+    assertTrue(_TestUtil.checkIndex(dir));
+    s.close();
+    dir.close();
+  }
 }
