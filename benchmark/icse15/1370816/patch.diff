diff --git a/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/BooleanScorer2.java b/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/BooleanScorer2.java
index bc8f947d..170a96e1 100644
--- a/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/BooleanScorer2.java
+++ b/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/BooleanScorer2.java
@@ -175,7 +175,7 @@ private Scorer countingConjunctionSumScorer(boolean disableCoord,
                                               List<Scorer> requiredScorers) throws IOException {
     // each scorer from the list counted as a single matcher
     final int requiredNrMatchers = requiredScorers.size();
-    return new ConjunctionScorer(weight, disableCoord ? 1.0f : similarity.coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {
+    return new ConjunctionScorer(weight, requiredScorers) {
       private int lastScoredDoc = -1;
       // Save the score of lastScoredDoc, so that we don't compute it more than
       // once in score().
@@ -201,7 +201,7 @@ private Scorer countingConjunctionSumScorer(boolean disableCoord,
   private Scorer dualConjunctionSumScorer(boolean disableCoord,
                                           Similarity similarity,
                                           Scorer req1, Scorer req2) throws IOException { // non counting.
-    return new ConjunctionScorer(weight, disableCoord ? 1.0f : similarity.coord(2, 2), req1, req2);
+    return new ConjunctionScorer(weight, req1, req2);
     // All scorers match, so defaultSimilarity always has 1 as
     // the coordination factor.
     // Therefore the sum of the scores of two scorers
diff --git a/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java b/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
index 13887138..4146cbfd 100644
--- a/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
+++ b/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
@@ -26,17 +26,15 @@
 class ConjunctionScorer extends Scorer {
   
   private final Scorer[] scorers;
-  private final float coord;
   private int lastDoc = -1;
 
-  public ConjunctionScorer(Weight weight, float coord, Collection<Scorer> scorers) throws IOException {
-    this(weight, coord, scorers.toArray(new Scorer[scorers.size()]));
+  public ConjunctionScorer(Weight weight, Collection<Scorer> scorers) throws IOException {
+    this(weight, scorers.toArray(new Scorer[scorers.size()]));
   }
 
-  public ConjunctionScorer(Weight weight, float coord, Scorer... scorers) throws IOException {
+  public ConjunctionScorer(Weight weight, Scorer... scorers) throws IOException {
     super(weight);
     this.scorers = scorers;
-    this.coord = coord;
     
     for (int i = 0; i < scorers.length; i++) {
       if (scorers[i].nextDoc() == NO_MORE_DOCS) {
@@ -134,7 +132,7 @@ public float score() throws IOException {
     for (int i = 0; i < scorers.length; i++) {
       sum += scorers[i].score();
     }
-    return sum * coord;
+    return sum;
   }
 
   @Override
diff --git a/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java b/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
index f33804cd..1b62cebf 100644
--- a/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
+++ b/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
@@ -227,6 +227,14 @@ public float coord(int overlap, int maxOverlap) {
     }
   }
 
+  // die serialization, die
+  static class FunkySimilarity extends DefaultSimilarity {
+    @Override
+    public float coord(int overlap, int maxOverlap) {
+      return overlap / ((float)maxOverlap + 1);
+    }
+  }
+
   @Test
   public void testRandomQueries() throws Exception {
     String[] vals = {"w1","w2","w3","w4","w5","xx","yy","zzz"};
@@ -247,6 +255,13 @@ public void testRandomQueries() throws Exception {
         Sort sort = Sort.INDEXORDER;
 
         QueryUtils.check(random, q1,searcher);
+        final Similarity oldSim = searcher.getSimilarity();
+        try {
+          searcher.setSimilarity(new FunkySimilarity());
+          QueryUtils.check(random, q1,searcher);
+        } finally {
+          searcher.setSimilarity(oldSim);
+        }
 
         TopFieldCollector collector = TopFieldCollector.create(sort, 1000,
             false, true, true, true);
