diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index 9af2e84c..9ee3e5af 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -21,7 +21,6 @@
 import java.net.UnknownHostException;
 import java.util.Collection;
 import java.util.Arrays;
-import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.ExecutorService;
 import java.io.IOException;
@@ -43,7 +42,6 @@
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.*;
 import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.db.filter.IdentityQueryFilter;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.utils.WrappedRunnable;
 import org.cliffc.high_scale_lib.NonBlockingHashSet;
@@ -113,17 +111,21 @@ private static boolean sendMessage(InetAddress endPoint, String tableName, Strin
         }
 
         Table table = Table.open(tableName);
-        RowMutation rm = new RowMutation(tableName, key);
-        for (ColumnFamilyStore cfstore : table.getColumnFamilyStores())
+        for (ColumnFamilyStore cfs : table.getColumnFamilyStores())
         {
-            ColumnFamily cf = cfstore.getColumnFamily(new IdentityQueryFilter(key, new QueryPath(cfstore.getColumnFamilyName())));
-            if (cf != null)
+            byte[] startColumn = ArrayUtils.EMPTY_BYTE_ARRAY;
+            while (true)
+            {
+                QueryFilter filter = new SliceQueryFilter(tableName, new QueryPath(cfs.getColumnFamilyName()), startColumn, ArrayUtils.EMPTY_BYTE_ARRAY, false, PAGE_SIZE);
+                ColumnFamily cf = cfs.getColumnFamily(filter);
+                if (pagingFinished(cf, startColumn))
+                    break;
+                startColumn = cf.getColumnNames().last();
+                RowMutation rm = new RowMutation(tableName, key);
                 rm.add(cf);
-        }
         Message message = rm.makeRowMutationMessage();
         WriteResponseHandler responseHandler = new WriteResponseHandler(1, tableName);
         MessagingService.instance.sendRR(message, new InetAddress[] { endPoint }, responseHandler);
-
         try
         {
             responseHandler.get();
@@ -131,6 +133,8 @@ private static boolean sendMessage(InetAddress endPoint, String tableName, Strin
         catch (TimeoutException e)
         {
             return false;
+        }
+            }
         }
         return true;
     }
