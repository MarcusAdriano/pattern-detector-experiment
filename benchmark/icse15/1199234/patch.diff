diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UnaryArithmeticParameterTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UnaryArithmeticParameterTest.java
index 7b75c914..4f50b42b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UnaryArithmeticParameterTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UnaryArithmeticParameterTest.java
@@ -1,6 +1,6 @@
 /*
 
-Derby - Class org.apache.derbyTesting.functionTests.tests.lang.unaryArithmeticParameterTest
+Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest
 
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
@@ -81,9 +81,9 @@ protected void tearDown() throws Exception {
 	}
 	/**
 	 * Test using parameters with unary minus and unary plus
-	 * @throws SQLException
+	 * @throws Exception
 	 */
-		public void testParametersForUnaryMinusAndPlus() throws SQLException {
+		public void testParametersForUnaryMinusAndPlus() throws Exception {
 			PreparedStatement ps = prepareStatement("insert into t1 values(?,+?,-?,?)");
 			ps.setInt(1,3);
 			ps.setInt(2,3);
@@ -126,9 +126,9 @@ public void testParametersForUnaryMinusAndPlus() throws SQLException {
 			}
 		/**
 		 * Tests ABS function with Unary plus and Unary minus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testABSWithUnaryMinusAndPlus() throws SQLException {
+		public void testABSWithUnaryMinusAndPlus() throws Exception {
 			Statement s = createStatement();
 			s.execute("CREATE FUNCTION ABS_FUNCT(P1 INT) RETURNS INT CALLED ON NULL INPUT EXTERNAL NAME 'java.lang.Math.abs' LANGUAGE JAVA PARAMETER STYLE JAVA");
 			PreparedStatement ps = prepareStatement("select * from t1 where -? = abs_funct(+?)");
@@ -145,9 +145,9 @@ public void testABSWithUnaryMinusAndPlus() throws SQLException {
 		}	
 		/**
 		 * Tests MAX function with Unary plus and Unary minus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testMAXWithUnaryMinusAndPlus() throws SQLException{
+		public void testMAXWithUnaryMinusAndPlus() throws Exception{
 			Statement s = createStatement();
 			s.execute("CREATE FUNCTION MAX_CNI(P1 INT, P2 INT) RETURNS INT CALLED ON NULL INPUT EXTERNAL NAME 'java.lang.Math.max' LANGUAGE JAVA PARAMETER STYLE JAVA");
 			PreparedStatement ps = prepareStatement("select * from t1 where -? = max_cni(-5,-1)");
@@ -180,9 +180,9 @@ public void testMAXWithUnaryMinusAndPlus() throws SQLException{
 			}
 		/**
 		 * Tests BETWEEN with unary minus and unary plus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testBETWEENWithUnaryMinusAndPlus() throws SQLException{
+		public void testBETWEENWithUnaryMinusAndPlus() throws Exception{
 			PreparedStatement ps = prepareStatement("select * from t1 where c11 between -? and +?");
 			ps.setInt(1,-1);
 			ps.setInt(2,1);
@@ -194,9 +194,9 @@ public void testBETWEENWithUnaryMinusAndPlus() throws SQLException{
 		}
 		/**
 		 * Tests NOT IN with unary minus and unary plus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testNOTINWithUnaryMinusAndPlus() throws SQLException{
+		public void testNOTINWithUnaryMinusAndPlus() throws Exception{
 			PreparedStatement ps = prepareStatement("select * from t1 where +? not in (-?, +?, 2, ?)");
 			ps.setInt(1,-11);
 			ps.setInt(2,1);
@@ -218,9 +218,9 @@ public void testNOTINWithUnaryMinusAndPlus() throws SQLException{
 		}
 		/**
 		 * Tests operators with Unary plus and unary Minus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testOperatorsWithUnaryMinusAndPlus() throws SQLException{
+		public void testOperatorsWithUnaryMinusAndPlus() throws Exception{
 			PreparedStatement ps = prepareStatement("select * from t1 where +? < c12");
 			ps.setInt(1,0);
 			int[] expectedTypes=new int[]{Types.SMALLINT};
@@ -251,9 +251,9 @@ public void testOperatorsWithUnaryMinusAndPlus() throws SQLException{
 		}
 		/**
 		 * Tests Casting with unary plus and unary minus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testCastWithUnaryMinusAndPlus()throws SQLException{
+		public void testCastWithUnaryMinusAndPlus()throws Exception{
 			PreparedStatement ps = prepareStatement("select cast(-? as smallint), cast(+? as int) from t1");
 			ps.setInt(1,2);
 			ps.setInt(2,2);
@@ -265,9 +265,9 @@ public void testCastWithUnaryMinusAndPlus()throws SQLException{
 		}
 		/**
 		 * Tests NullIf with unary minus and unary plus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testNullIfWithUnaryMinusAndPlus() throws SQLException{
+		public void testNullIfWithUnaryMinusAndPlus() throws Exception{
 			PreparedStatement ps = prepareStatement("select nullif(-?,c11) from t1");
 			ps.setInt(1,22);
 			int[] expectedTypes= new int[]{Types.INTEGER};
@@ -278,9 +278,9 @@ public void testNullIfWithUnaryMinusAndPlus() throws SQLException{
 		}
 		/**
 		 * Tests SQRT with unary minus and unary plus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testSQRTWithUnaryMinusAndPlus() throws SQLException{
+		public void testSQRTWithUnaryMinusAndPlus() throws Exception{
 			PreparedStatement ps = prepareStatement("select sqrt(-?) from t1");
 			ps.setInt(1,-64);
 			int[] expectedTypes= new int[]{Types.DOUBLE};
@@ -291,9 +291,9 @@ public void testSQRTWithUnaryMinusAndPlus() throws SQLException{
 		}
 		/**
 		 * Tests "select case when -?=c11 then -? else c12 end from t1"
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testSelectWithUnaryMinusAndPlus() throws SQLException{
+		public void testSelectWithUnaryMinusAndPlus() throws Exception{
 			PreparedStatement ps =prepareStatement("select case when -?=c11 then -? else c12 end from t1");
 			ps.setInt(1,1);
 			ps.setInt(2,22);
@@ -305,9 +305,9 @@ public void testSelectWithUnaryMinusAndPlus() throws SQLException{
 		}
 		/**
 		 * Negative tests for unary minus and unary plus
-		 * @throws SQLException
+		 * @throws Exception
 		 */
-		public void testExpectedErrors() throws SQLException{
+		public void testExpectedErrors() throws Exception{
 			assertCompileError("42X34","select * from t1 where c11 = any (select -? from t2)");
 			
 			// -?/+? at the beginning and/ at the end of where clause
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/J2EEDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/J2EEDataSource.java
index 71e01397..1e0a2b19 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/J2EEDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/J2EEDataSource.java
@@ -1,6 +1,6 @@
 /*
  *
- * Derby - Class org.apache.derbyTesting.junit.JDBCDataSource
+ * Derby - Class org.apache.derbyTesting.junit.J2EEDataSource
  *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JAXPFinder.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JAXPFinder.java
index 46dbe6e0..f356949d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JAXPFinder.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JAXPFinder.java
@@ -1,6 +1,6 @@
 /*
  *
- * Derby - Class org.apache.derbyTesting.functionTests.util.JAXPFinder
+ * Derby - Class org.apache.derbyTesting.junit.JAXPFinder
  *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
index f89bad70..6c2cb15c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
@@ -20,6 +20,7 @@
 package org.apache.derbyTesting.junit;
 
 import java.io.IOException;
+import java.lang.reflect.Method;
 import java.sql.*;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -44,14 +45,6 @@
      */
     public static class GeneratedId {
         public boolean equals(Object o) {
-            // unless JSR169, use String.matches...
-            if (JDBC.vmSupportsJDBC3()) 
-            {
-                return o instanceof String &&
-                ((String) o).matches("SQL[0-9]{15}");
-            }
-            else
-            {
                 String tmpstr = (String)o;
                 boolean b = true;
                 if (!(o instanceof String))
@@ -72,7 +65,6 @@ public boolean equals(Object o) {
                 }
             return b;
             }
-        }
         public String toString() {
             return "xxxxGENERATED-IDxxxx";
         }
@@ -781,18 +773,28 @@ public static void assertColumnTypes(ResultSet rs,
      * @param expectedTypes Array of expected parameter types.
      */
     public static void assertParameterTypes (PreparedStatement ps,
-	        int[] expectedTypes) throws SQLException
+	        int[] expectedTypes) throws Exception
 	    {
-		ParameterMetaData pmd = ps.getParameterMetaData();
-	        int actualParams = pmd.getParameterCount();
+            if ( vmSupportsJSR169() )
+	    {
+                Assert.fail( "The assertParameterTypes() method only works on platforms which support ParameterMetaData." );
+            }
+
+            Object pmd = ps.getClass().getMethod( "getParameterMetaData", null ).invoke(  ps, null );
+            int actualParams = ((Integer) pmd.getClass().getMethod( "getParameterCount", null ).invoke( pmd, null )).intValue();
 
 	        Assert.assertEquals("Unexpected parameter count:",
-	                expectedTypes.length, pmd.getParameterCount());
+	                expectedTypes.length, actualParams );
+
+            Method  getParameterType = pmd.getClass().getMethod( "getParameterType", new Class[] { Integer.TYPE } );
 
 	        for (int i = 0; i < actualParams; i++)
 	        {
-	            Assert.assertEquals("Types do not match for parameter " + (i+1),
-	                    expectedTypes[i], pmd.getParameterType(i+1));
+	            Assert.assertEquals
+                    ("Types do not match for parameter " + (i+1),
+                     expectedTypes[i],
+                     ((Integer) getParameterType.invoke( pmd, new Object[] { new Integer( i + 1 ) } )).intValue()
+                     );
 	        }
 	    }
     
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java
index c9351a8d..29633786 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/RuntimeStatisticsParser.java
@@ -417,17 +417,8 @@ public String toString() {
         if (startStartIndex >= 0 && endStartIndex >= 0)
         {
             String positionLines = statistics.substring(startStartIndex, endStartIndex);
-            if (JDBC.vmSupportsJSR169())
-            {
-                // do something else then split.
-                String [] startPositionLines = Utilities.split(positionLines, '\n');
-                return startPositionLines;
-            }
-            else
-            {
-                String [] startPositionLines = positionLines.split("\n");
-                return startPositionLines;
-            }
+            
+            return Utilities.split(positionLines, '\n');
         }
         else 
             return null;
@@ -445,17 +436,8 @@ public String toString() {
         if (startStopIndex >= 0 && endStopIndex >= 0)
         {
             String positionLines = statistics.substring(startStopIndex, endStopIndex);
-            if (JDBC.vmSupportsJSR169())
-            {
-                // do something else then split.
-                String [] stopPositionLines = Utilities.split(positionLines, '\n');
-                return stopPositionLines;
-            }
-            else
-            {
-                String [] stopPositionLines = positionLines.split("\n");
-                return stopPositionLines;
-            }
+            
+            return Utilities.split(positionLines, '\n');
         }
         else 
             return null;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java
index 1e3d79ca..b97df8a5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java
@@ -1,6 +1,6 @@
 /*
 
-   Derby - Class org.apache.derby.impl.services.bytecode.CodeChunk
+   Derby - Class org.apache.derbyTesting.junit.XATestUtil
 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XML.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XML.java
index cb406ab3..5216e59f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XML.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XML.java
@@ -340,6 +340,15 @@ protected static String getJAXPParserLocation()
         if (!classpathHasJAXP())
             return null;
 
-        return JAXPFinder.getJAXPParserLocation();
+        try {
+            Class   jaxpFinderClass = Class.forName( "org.apache.derbyTesting.junit.JAXPFinder" );
+            Method  locatorMethod = jaxpFinderClass.getDeclaredMethod( "getJAXPParserLocation", null );
+
+            return (String) locatorMethod.invoke(  null, null );
+        }
+        catch (Exception e)
+        {
+            throw new UnsupportedOperationException( e.getClass().getName() + ": " + e.getMessage() );
+        }
     }
 }
