diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
index 94f316d1..3f747e47 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
@@ -531,7 +531,9 @@ public StoreCostController getStoreCostController(long conglomerateNumber)
 	/**
 	 * Add a schema privilege to the list of used privileges.
 	 *
-	 * @param schemaDescriptor
+	 * @param schema	Schema name of the object that is being accessed
+	 * @param aid		Requested authorizationId for new schema
+	 * @param privType	Either CREATE_SCHEMA_PRIV or MODIFY_SCHEMA_PRIV
 	 */
 	public void addRequiredSchemaPriv(String schema, String aid, boolean privType);
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index 5b3534c6..3640a9e7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -177,7 +177,7 @@
 	 * Push a data dictionary context onto the
 	 * current context manager.
 	 *
-	 * @param nested true iff this is a nested data dictionary context.
+	 * @param cm Context manager
 	 */
 	DataDictionaryContext pushDataDictionaryContext(ContextManager cm);
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
index a5851867..5c065db6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
@@ -755,7 +755,7 @@ public void addRequiredColumnPriv( ColumnDescriptor column)
 	/**
 	 * Add a table or view privilege to the list of used table privileges.
 	 *
-	 * @param table
+	 * @see CompilerContext#addRequiredRoutinePriv
 	 */
 	public void addRequiredTablePriv( TableDescriptor table)
 	{
@@ -769,7 +769,7 @@ public void addRequiredTablePriv( TableDescriptor table)
 	/**
 	 * Add a routine execute privilege to the list of used routine privileges.
 	 *
-	 * @param routine
+	 * @see CompilerContext#addRequiredRoutinePriv
 	 */
 	public void addRequiredRoutinePriv( AliasDescriptor routine)
 	{
@@ -784,7 +784,7 @@ public void addRequiredRoutinePriv( AliasDescriptor routine)
 	/**
 	 * Add a required schema privilege to the list privileges.
 	 *
-	 * @param SchemaDescriptor
+	 * @see CompilerContext#addRequiredSchemaPriv
 	 */
 	public void addRequiredSchemaPriv(String schemaName, String aid, boolean privType)
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
index 1ab0e6c6..df459bd4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
@@ -119,7 +119,6 @@ public void init(
 				// 6 - Short - SQL control
 				// 7 - Boolean - CALLED ON NULL INPUT (always TRUE for procedures)
 				// 8 - TypeDescriptor - return type (always NULL for procedures)
-				// 9 - Boolean - externalSecurity (false for invoker, true for definer)
 
 				Object[] routineElements = (Object[]) aliasSpecificInfo;
 				Object[] parameters = (Object[]) routineElements[0];
@@ -192,9 +191,6 @@ public void init(
 				else
 					calledOnNullInput = calledOnNullInputO.booleanValue();
 
-				// GrantRevoke TODO: Figure out how to save external security info. Putting this in
-				// RoutineAliasInfo may not be the best long term solution
-
 				aliasInfo = new RoutineAliasInfo(this.methodName, paramCount, names, types, modes, drs,
 						((Short) routineElements[5]).shortValue(),	// parameter style
 						sqlAllowed, calledOnNullInput, (TypeDescriptor) routineElements[8]);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java
index f94c4090..463bd769 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java
@@ -51,12 +51,13 @@ abstract public void executeGrantRevoke( Activation activation,
 
 	/**
 	 * Determines whether a user is the owner of an object
-	 * (table, function, or procedure).
+	 * (table, function, or procedure). Note that DBA can access
+	 * database objects without needing to be their owner
 	 *
-	 * @param user
-	 * @param objectDescriptor
-	 * @param sd
-	 * @param DataDictionary
+	 * @param user					authorizationId of current user
+	 * @param objectDescriptor		object being checked against
+	 * @param sd					SchemaDescriptor
+	 * @param dd					DataDictionary
 	 *
 	 * @exception StandardException if user does not own the object
 	 */
