diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NaiveTrustManager.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NaiveTrustManager.java
index 3b21663a..85840c75 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NaiveTrustManager.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NaiveTrustManager.java
@@ -21,13 +21,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.client.net;
 
+import java.io.FileInputStream;
 import javax.net.SocketFactory;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
+import javax.net.ssl.KeyManagerFactory;
+import java.security.KeyStore;
 import java.security.cert.X509Certificate;
 import java.security.cert.CertificateException;
 
+
 /**
  * This is a naive trust manager we use when we don't want server
  * authentication. Any certificate will be accepted. 
@@ -52,16 +56,51 @@ private NaiveTrustManager()
      **/
     public static SocketFactory getSocketFactory()
         throws java.security.NoSuchAlgorithmException,
-               java.security.KeyManagementException
+               java.security.KeyManagementException,
+               java.security.NoSuchProviderException,
+               java.security.KeyStoreException,
+               java.security.UnrecoverableKeyException,
+               java.security.cert.CertificateException,
+               java.io.IOException
     {
         if (thisManager == null) {
             thisManager = new TrustManager [] {new NaiveTrustManager()};
         }
         
         SSLContext ctx = SSLContext.getInstance("SSL");
+        
+        if (ctx.getProvider().getName().equals("SunJSSE") &&
+            (System.getProperty("javax.net.ssl.keyStore") != null) &&
+            (System.getProperty("javax.net.ssl.keyStorePassword") != null)) {
+            
+            // SunJSSE does not give you a working default keystore
+            // when using your own trust manager. Since a keystore is
+            // needed on the client when the server does
+            // peerAuthentication, we have to provide one working the
+            // same way as the default one.
+
+            String keyStore = 
+                System.getProperty("javax.net.ssl.keyStore");
+            String keyStorePassword =
+                System.getProperty("javax.net.ssl.keyStorePassword");
+            
+            KeyStore ks = KeyStore.getInstance("JKS");
+            ks.load(new FileInputStream(keyStore),
+                    keyStorePassword.toCharArray());
+            
+            KeyManagerFactory kmf = 
+                KeyManagerFactory.getInstance("SunX509", "SunJSSE");
+            kmf.init(ks, keyStorePassword.toCharArray());
+
+            ctx.init(kmf.getKeyManagers(),
+                     thisManager,
+                     null); // Use default random source
+        } else {
         ctx.init(null, // Use default key manager
                  thisManager,
                  null); // Use default random source
+        }
+
         return ctx.getSocketFactory();
     }
     
@@ -76,7 +115,7 @@ public void checkClientTrusted(X509Certificate[] chain,
                                    String authType)
         throws CertificateException
     {
-        // Reject all attemtpts to truts a client. We should never end
+        // Reject all attemtpts to trust a client. We should never end
         // up here.
         throw new CertificateException();
     }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/OpenSocketAction.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/OpenSocketAction.java
index 0dfa89ec..071bae66 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/OpenSocketAction.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/OpenSocketAction.java
@@ -41,7 +41,12 @@ public Object run()
         throws java.net.UnknownHostException, 
                java.io.IOException,
                java.security.NoSuchAlgorithmException,
-               java.security.KeyManagementException {
+               java.security.KeyManagementException,
+               java.security.NoSuchProviderException,
+               java.security.KeyStoreException,
+               java.security.UnrecoverableKeyException,
+               java.security.cert.CertificateException
+    {
         
         SocketFactory sf;
         switch (clientSSLMode_) {
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java
index edf8ba8b..4b59ee3a 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java
@@ -21,12 +21,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.drda;
 
+import java.io.FileInputStream;
 import javax.net.SocketFactory;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
+import javax.net.ssl.KeyManagerFactory;
+import java.security.KeyStore;
 import java.security.cert.X509Certificate;
 import java.security.cert.CertificateException;
+import org.apache.derby.iapi.services.property.PropertyUtil;
+
 
 /**
  * This is a naive trust manager we use when we don't want server
@@ -52,16 +57,51 @@ private NaiveTrustManager()
      **/
     public static SocketFactory getSocketFactory()
         throws java.security.NoSuchAlgorithmException,
-               java.security.KeyManagementException
+               java.security.KeyManagementException,
+               java.security.NoSuchProviderException,
+               java.security.KeyStoreException,
+               java.security.UnrecoverableKeyException,
+               java.security.cert.CertificateException,
+               java.io.IOException
     {
         if (thisManager == null) {
             thisManager = new TrustManager [] {new NaiveTrustManager()};
         }
         
         SSLContext ctx = SSLContext.getInstance("SSL");
+        
+        if (ctx.getProvider().getName().equals("SunJSSE") &&
+            (PropertyUtil.getSystemProperty("javax.net.ssl.keyStore") != null) &&
+            (PropertyUtil.getSystemProperty("javax.net.ssl.keyStorePassword") != null)) {
+            
+            // SunJSSE does not give you a working default keystore
+            // when using your own trust manager. Since a keystore is
+            // needed on the client when the server does
+            // peerAuthentication, we have to provide one working the
+            // same way as the default one.
+
+            String keyStore = 
+                PropertyUtil.getSystemProperty("javax.net.ssl.keyStore");
+            String keyStorePassword =
+                PropertyUtil.getSystemProperty("javax.net.ssl.keyStorePassword");
+            
+            KeyStore ks = KeyStore.getInstance("JKS");
+            ks.load(new FileInputStream(keyStore),
+                    keyStorePassword.toCharArray());
+            
+            KeyManagerFactory kmf = 
+                KeyManagerFactory.getInstance("SunX509", "SunJSSE");
+            kmf.init(ks, keyStorePassword.toCharArray());
+
+            ctx.init(kmf.getKeyManagers(),
+                     thisManager,
+                     null); // Use default random source
+        } else {
         ctx.init(null, // Use default key manager
                  thisManager,
                  null); // Use default random source
+        }
+
         return ctx.getSocketFactory();
     }
     
@@ -76,7 +116,7 @@ public void checkClientTrusted(X509Certificate[] chain,
                                    String authType)
         throws CertificateException
     {
-        // Reject all attemtpts to truts a client. We should never end
+        // Reject all attemtpts to trust a client. We should never end
         // up here.
         throw new CertificateException();
     }
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 9e6669c0..a41e2646 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -2333,7 +2333,11 @@ public Object run()
 										throws UnknownHostException,
 											   IOException, 
 											   java.security.NoSuchAlgorithmException,
-											   java.security.KeyManagementException
+											   java.security.KeyManagementException,
+                                               java.security.NoSuchProviderException,
+                                               java.security.KeyStoreException,
+                                               java.security.UnrecoverableKeyException,
+                                               java.security.cert.CertificateException
 									{
 										if (hostAddress == null)
 											hostAddress = InetAddress.getByName(hostArg);
