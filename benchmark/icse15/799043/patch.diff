diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index ca06e635..b5f8b0aa 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -31,6 +31,8 @@
 import org.apache.cassandra.db.marshal.AsciiType;
 import org.apache.cassandra.db.marshal.UTF8Type;
 import org.apache.cassandra.db.marshal.BytesType;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.locator.IEndPointSnitch;
 import org.apache.cassandra.utils.FileUtils;
 import org.apache.cassandra.utils.XMLUtils;
 import org.w3c.dom.Node;
@@ -62,7 +64,6 @@
     private static int currentIndex_ = 0;
     private static String logFileDirectory_;
     private static String bootstrapFileDirectory_;
-    private static boolean rackAware_ = false;
     private static int consistencyThreads_ = 4; // not configurable
     private static int concurrentReaders_ = 8;
     private static int concurrentWriters_ = 32;
@@ -86,8 +87,12 @@
      * corresponding meta data for that column family.
     */
     private static Map<String, Map<String, CFMetaData>> tableToCFMetaDataMap_;
-    /* Hashing strategy Random or OPHF */
-    private static String partitionerClass_;
+
+    private static IPartitioner partitioner_;
+
+    private static IEndPointSnitch endPointSnitch_;
+    private static Class replicaPlacementStrategyClass_;
+
     /* if the size of columns or super-columns are more than this, indexing will kick in */
     private static int columnIndexSizeInKB_;
     /* Number of hours to keep a memtable in memory */
@@ -143,18 +148,35 @@
             commitLogSyncDelay_ = Integer.valueOf(xmlUtils.getNodeValue("/Storage/CommitLogSyncDelay"));
 
             /* Hashing strategy */
-            partitionerClass_ = xmlUtils.getNodeValue("/Storage/Partitioner");
+            String partitionerClassName = xmlUtils.getNodeValue("/Storage/Partitioner");
+            if (partitionerClassName == null)
+            {
+                throw new ConfigurationException("Missing partitioner directive /Storage/Partitioner");
+            }
             try
             {
-                Class.forName(DatabaseDescriptor.getPartitionerClass());
+                Class cls = Class.forName(partitionerClassName);
+                partitioner_ = (IPartitioner) cls.getConstructor().newInstance();
             }
-            catch (NullPointerException e)
+            catch (ClassNotFoundException e)
             {
-                throw new ConfigurationException("Missing partitioner directive /Storage/Partitioner");
+                throw new ConfigurationException("Invalid partitioner class " + partitionerClassName);
+            }
+
+            /* end point snitch */
+            String endPointSnitchClassName = xmlUtils.getNodeValue("/Storage/EndPointSnitch");
+            if (endPointSnitchClassName == null)
+            {
+                throw new ConfigurationException("Missing endpointsnitch directive /Storage/EndPointSnitch");
+            }
+            try
+            {
+                Class cls = Class.forName(endPointSnitchClassName);
+                endPointSnitch_ = (IEndPointSnitch) cls.getConstructor().newInstance();
             }
             catch (ClassNotFoundException e)
             {
-                throw new ConfigurationException("Invalid partitioner class " + partitionerClass_);
+                throw new ConfigurationException("Invalid endpointsnitch class " + endPointSnitchClassName);
             }
 
             /* Callout location */
@@ -288,10 +310,20 @@
             tableToCFMetaDataMap_ = new HashMap<String, Map<String, CFMetaData>>();
             tableKeysCachedFractions_ = new HashMap<String, Double>();
 
-            /* Rack Aware option */
-            value = xmlUtils.getNodeValue("/Storage/RackAware");
-            if ( value != null )
-                rackAware_ = Boolean.parseBoolean(value);
+            /* See which replica placement strategy to use */
+            String replicaPlacementStrategyClassName = xmlUtils.getNodeValue("/Storage/ReplicaPlacementStrategy");
+            if (replicaPlacementStrategyClassName == null)
+            {
+                throw new ConfigurationException("Missing replicaplacementstrategy directive /Storage/ReplicaPlacementStrategy");
+            }
+            try
+            {
+                replicaPlacementStrategyClass_ = Class.forName(replicaPlacementStrategyClassName);
+            }
+            catch (ClassNotFoundException e)
+            {
+                throw new ConfigurationException("Invalid replicaplacementstrategy class " + replicaPlacementStrategyClassName);
+            }
 
             /* Read the table related stuff from config */
             NodeList tables = xmlUtils.getRequestedNodeList("/Storage/Tables/Table");
@@ -542,9 +574,19 @@ public static int getGcGraceInSeconds()
         return gcGraceInSeconds_;
     }
 
-    public static String getPartitionerClass()
+    public static IPartitioner getPartitioner()
     {
-        return partitionerClass_;
+        return partitioner_;
+    }
+    
+    public static IEndPointSnitch getEndPointSnitch()
+    {
+        return endPointSnitch_;
+    }
+
+    public static Class getReplicaPlacementStrategyClass()
+    {
+        return replicaPlacementStrategyClass_;
     }
     
     public static String getCalloutLocation()
@@ -760,11 +802,6 @@ public static void setLogFileLocation(String logLocation)
         logFileDirectory_ = logLocation;
     }
 
-    public static boolean isRackAware()
-    {
-        return rackAware_;
-    }
-
     public static Set<String> getSeeds()
     {
         return seeds_;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 5e01ed3c..472b16aa 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -21,6 +21,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.lang.management.ManagementFactory;
+import java.lang.reflect.InvocationTargetException;
 import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -203,7 +204,7 @@ public StorageService()
     {
         init();
         storageLoadBalancer_ = new StorageLoadBalancer(this);
-        endPointSnitch_ = new EndPointSnitch();
+        endPointSnitch_ = DatabaseDescriptor.getEndPointSnitch();
         
         /* register the verb handlers */
         MessagingService.getMessagingInstance().registerVerbHandlers(StorageService.tokenVerbHandler_, new TokenUpdateVerbHandler());
@@ -232,23 +233,17 @@ public StorageService()
         StageManager.registerStage(StorageService.readStage_,
                                    new MultiThreadedStage(StorageService.readStage_, DatabaseDescriptor.getConcurrentReaders()));
 
-        if ( DatabaseDescriptor.isRackAware() )
-            nodePicker_ = new RackAwareStrategy(tokenMetadata_, partitioner_, DatabaseDescriptor.getReplicationFactor(), DatabaseDescriptor.getStoragePort());
-        else
-            nodePicker_ = new RackUnawareStrategy(tokenMetadata_, partitioner_, DatabaseDescriptor.getReplicationFactor(), DatabaseDescriptor.getStoragePort());
-    }
-
-    static
-    {
+        Class cls = DatabaseDescriptor.getReplicaPlacementStrategyClass();
+        Class [] parameterTypes = new Class[] { TokenMetadata.class, IPartitioner.class, int.class, int.class };
         try
         {
-            Class cls = Class.forName(DatabaseDescriptor.getPartitionerClass());
-            partitioner_ = (IPartitioner) cls.getConstructor().newInstance();
+            nodePicker_ = (IReplicaPlacementStrategy)cls.getConstructor(parameterTypes).newInstance(tokenMetadata_, partitioner_, DatabaseDescriptor.getReplicationFactor(), DatabaseDescriptor.getStoragePort());
         }
         catch (Exception e)
         {
             throw new RuntimeException(e);
         }
+        partitioner_ = DatabaseDescriptor.getPartitioner();
     }
     
     public void start() throws IOException
