diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
index 9c4456af..17b98cf6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
@@ -18,6 +18,8 @@
 package org.apache.cassandra.db;
 
 import java.io.Closeable;
+import java.io.IOError;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Comparator;
@@ -128,8 +130,7 @@ protected Row getReduced()
                 Comparator<IColumn> colComparator = filter.filter.getColumnComparator(comparator);
                 Iterator<IColumn> colCollated = IteratorUtils.collatedIterator(colComparator, colIters);
 
-                ColumnFamily returnCF = null;
-                
+                ColumnFamily returnCF;
                 // First check if this row is in the rowCache. If it is we can skip the rest
                 ColumnFamily cached = cfs.getRawCachedRow(key);
                 if (cached != null)
@@ -137,7 +138,7 @@ protected Row getReduced()
                     QueryFilter keyFilter = new QueryFilter(key, filter.path, filter.filter);
                     returnCF = cfs.filterColumnFamily(cached, keyFilter, gcBefore);
                 }
-                else
+                else if (colCollated.hasNext())
                 {
                     returnCF = firstMemtable.getColumnFamily(key);            
                     // TODO this is a little subtle: the Memtable ColumnIterator has to be a shallow clone of the source CF,
@@ -145,16 +146,27 @@ protected Row getReduced()
                     // (for sstable ColumnIterators we do not care if it is a shallow clone or not.)
                     returnCF = returnCF == null ? ColumnFamily.create(firstMemtable.getTableName(), filter.getColumnFamilyName())
                             : returnCF.cloneMeShallow();
-
-                    if (colCollated.hasNext())
+                    long lastDeletedAt = Long.MIN_VALUE;
+                    for (IColumnIterator columns : colIters)
+                    {
+                        columns.hasNext(); // force cf initializtion
+                        try
                     {
+                            if (columns.getColumnFamily().isMarkedForDelete())
+                                lastDeletedAt = Math.max(lastDeletedAt, columns.getColumnFamily().getMarkedForDeleteAt());
+                        }
+                        catch (IOException e)
+                        {
+                            throw new IOError(e);
+                        }
+                    }
+                    returnCF.markedForDeleteAt.set(lastDeletedAt);
                         filter.collectCollatedColumns(returnCF, colCollated, gcBefore);
                     }
                     else
                     {
                         returnCF = null;
                     }
-                }
 
                 Row rv = new Row(key, returnCF);
                 colIters.clear();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/columniterator/IColumnIterator.java b/cassandra/trunk/src/java/org/apache/cassandra/db/columniterator/IColumnIterator.java
index d35215f6..6311bdd9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/columniterator/IColumnIterator.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/columniterator/IColumnIterator.java
@@ -33,6 +33,7 @@
     /**
      *  returns the CF of the column being iterated.  Do not modify the returned CF; clone first.
      *  The CF is only guaranteed to be available after a call to next() or hasNext().
+     * Guaranteed to be non-null.
      * @throws IOException 
      */
     public abstract ColumnFamily getColumnFamily() throws IOException;
