diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java
index 359d097e..0b9b0594 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java
@@ -32,12 +32,11 @@
 public abstract class AbstractMatrix implements Matrix {
 
   protected Map<String, Integer> columnLabelBindings;
-
   protected Map<String, Integer> rowLabelBindings;
+  protected int rows;
+  protected int columns;
 
-  protected int rows, columns;
-
-  public AbstractMatrix(int rows, int columns) {
+  protected AbstractMatrix(int rows, int columns) {
     this.rows = rows;
     this.columns = columns;
   }
@@ -678,17 +677,21 @@ public void set(double value) {
 
     @Override
     public double getQuick(int index) {
-      Vector v = rowToColumn ? matrix.viewRow(index) : matrix.viewRow(index);
-      return v == null ? 0 : v.getQuick(transposeOffset);
+      Vector v = rowToColumn ? matrix.viewColumn(index) : matrix.viewRow(index);
+      return v == null ? 0.0 : v.getQuick(transposeOffset);
     }
 
     @Override
     public void setQuick(int index, double value) {
-      Vector v = rowToColumn ? matrix.viewRow(index) : matrix.viewRow(index);
+      Vector v = rowToColumn ? matrix.viewColumn(index) : matrix.viewRow(index);
       if (v == null) {
         v = newVector(numCols);
+        if (rowToColumn) {
+          matrix.assignColumn(index, v);
+        } else {
         matrix.assignRow(index, v);
       }
+      }
       v.setQuick(transposeOffset, value);
     }
 
