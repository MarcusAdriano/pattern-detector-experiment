diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index b471a001..ff714093 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.StringReader;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -34,9 +35,15 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.FilteredTermEnum;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;
+import org.apache.lucene.search.spans.SpanOrQuery;
+import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util._TestUtil;
 
@@ -175,4 +182,60 @@ private String randomTerm() {
       return _TestUtil.randomUnicodeString(random);
     }
   }
+
+  // Just an MTQ that (evilly) returns null from getField():
+  public static class EmptyMTQ extends MultiTermQuery {
+    @Override
+    protected FilteredTermEnum getEnum(IndexReader reader) {
+      return new FilteredTermEnum() {
+        @Override
+        protected boolean termCompare(Term term) {
+          return true;
+        }
+
+        @Override
+        public float difference() {
+          return 0.0f;
+        }
+
+        @Override
+        protected boolean endEnum() {
+          return true;
+        }
+      };
+    }
+
+    @Override
+    public String toString(String s) {
+      return "";
+    }
+
+    public String getField() {
+      return null;
+    }
+  }
+    
+  // LUCENE-3831
+  public void testNullPointerException() throws IOException {
+    EmptyMTQ q = new EmptyMTQ();
+    SpanQuery wrappedquery = new SpanMultiTermQueryWrapper<EmptyMTQ>(q);
+        
+    MemoryIndex mindex = new MemoryIndex();
+    mindex.addField("field", new MockAnalyzer(random).tokenStream("field", new StringReader("hello there")));
+
+    // This throws an NPE
+    assertEquals(0, mindex.search(wrappedquery), 0.00001f);
+  }
+
+  // LUCENE-3831
+  public void testPassesIfWrapped() throws IOException {
+    EmptyMTQ q = new EmptyMTQ();
+    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<EmptyMTQ>(q));
+
+    MemoryIndex mindex = new MemoryIndex();
+    mindex.addField("field", new MockAnalyzer(random).tokenStream("field", new StringReader("hello there")));
+
+    // This passes though
+    assertEquals(0, mindex.search(wrappedquery), 0.00001f);
+  }
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
index 28fd905a..556b14ce 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
@@ -73,9 +73,13 @@ public void normalize(float queryNorm) {
 
   @Override
   public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {
+    if (query.getField() == null) {
+      return null;
+    } else {
     return new SpanScorer(query.getSpans(reader), this, similarity, reader
         .norms(query.getField()));
   }
+  }
 
   @Override
   public Explanation explain(IndexReader reader, int doc)
diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
index 66101241..13743f56 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
@@ -17,26 +17,27 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
+
+import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.CheckHits;
+import org.apache.lucene.search.DefaultSimilarity;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.CheckHits;
-import org.apache.lucene.search.Similarity;
-import org.apache.lucene.search.DefaultSimilarity;
 import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.Searcher;
+import org.apache.lucene.search.Similarity;
+import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 import org.apache.lucene.util.LuceneTestCase;
-import java.io.IOException;
 
 public class TestSpans extends LuceneTestCase {
   private IndexSearcher searcher;
