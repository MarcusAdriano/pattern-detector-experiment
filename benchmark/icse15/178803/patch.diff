diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 731c47c2..eb56c120 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -125,8 +125,16 @@ implementing the getStream() method for dvd.getStream(), does not
             if (SanityManager.DEBUG)
                 SanityManager.ASSERT(myStream instanceof Resetable);
 
-            ((Resetable)myStream).initStream();
-            // set up the buffer for trashing the bytes to set the position of the
+            try {
+                ((Resetable) myStream).initStream();
+            } catch (StandardException se) {
+                if (se.getMessageId().equals(SQLState.DATA_CONTAINER_CLOSED)) {
+                    throw StandardException
+                            .newException(SQLState.BLOB_ACCESSED_AFTER_COMMIT);
+                }
+            }
+            // set up the buffer for trashing the bytes to set the position of
+            // the
             // stream, only need a buffer when we have a long column
             buf = new byte[BLOB_BUF_SIZE];
         }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index a4074ea8..5ec0fa04 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -113,8 +113,14 @@ the class implementing the getStream() method for dvd.getStream(),
             if (SanityManager.DEBUG)
                 SanityManager.ASSERT(myStream instanceof Resetable);
 
-            ((Resetable)myStream).initStream();
-
+            try {
+                ((Resetable) myStream).initStream();
+            } catch (StandardException se) {
+                if (se.getMessageId().equals(SQLState.DATA_CONTAINER_CLOSED)) {
+                    throw StandardException
+                            .newException(SQLState.BLOB_ACCESSED_AFTER_COMMIT);
+                }
+            }
         }
     }
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
index 4904e659..1e354da1 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
@@ -848,12 +848,6 @@ else if ((mode & MODE_TRUNCATE_ON_ROLLBACK) ==
 	*/
 	public final RawTransaction getTransaction() 
     {
-
-		if (SanityManager.DEBUG) 
-        {
-			SanityManager.ASSERT(xact != null);
-		}
-
 		return xact;
 	}
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java
index d74701d9..1b77f124 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java
@@ -21,6 +21,7 @@
 package org.apache.derby.impl.store.raw.data;
 
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.reference.SQLState;
 
 import org.apache.derby.iapi.store.raw.RecordHandle;
 
@@ -138,6 +139,12 @@ the end of the transaction (or until the enclosing blob/clob object is
     */
     public void initStream() throws StandardException
     {
+        // it is possible that the transaction in which the stream was 
+        // created is committed and no longer valid
+        // dont want to get NPE but instead throw error that
+        // container was not opened
+        if (owner.getTransaction() == null)
+            throw StandardException.newException(SQLState.DATA_CONTAINER_CLOSED);
         /*
         We might want to use the mode and isolation level of the container.
         This would have the advantage that, if the isolation level
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
index 07dd24ce..59a2151d 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
@@ -167,6 +167,8 @@ public static void main(String[] args)
             clobTestSelfDestructive2(conn);
 
             conn.commit();
+            clobNegativeTest_Derby265(conn);
+            blobNegativeTest_Derby265(conn);
             conn.close();
             System.out.println("FINISHED TEST blobclob :-)");
 
@@ -3785,6 +3787,144 @@ private static void blobTest96(Connection conn)
 		}
     }
 
+    
+    
+    /**
+     * Test fix for derby-265.
+     * Test that if getBlob is called after the transaction 
+     * in which it was created is committed, a proper user error
+     * is thrown instead of an NPE. 
+     * Basically per the spec, getBlob is valid only for the duration of 
+     * the transaction in it was created in
+     * @param conn
+     * @throws SQLException
+     * @throws FileNotFoundException
+     * @throws IOException
+     */
+    private static void blobNegativeTest_Derby265(Connection conn)
+            throws SQLException, FileNotFoundException,IOException {
+        // basically setup the tables for clob and blob
+        Statement s = conn.createStatement();
+        s.execute("create table \"MAPS_BLOB\"(MAP_ID int, MAP_NAME varchar(20),REGION varchar(20),AREA varchar(20), PHOTO_FORMAT varchar(20),PICTURE blob(2G))");
+        conn.setAutoCommit(false);
+        PreparedStatement ps = conn.prepareStatement("insert into \"MAPS_BLOB\" values(?,?,?,?,?,?)");
+        
+        for (int i = 0; i < 3; i++) {
+            FileInputStream fis = new FileInputStream(fileName[4]);
+            ps.setInt(1, i);
+            ps.setString(2, "x" + i);
+            ps.setString(3, "abc");
+            ps.setString(4, "abc");
+            ps.setString(5, "abc");
+            ps.setBinaryStream(6, new java.io.BufferedInputStream(fis), 300000);
+            ps.executeUpdate();
+            fis.close();
+        }
+        conn.commit();
+
+        conn.setAutoCommit(true);
+        System.out.println("-----------------------------");
+
+        s = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
+                ResultSet.CONCUR_READ_ONLY);
+        s.execute("SELECT \"MAP_ID\", \"MAP_NAME\", \"REGION\", \"AREA\", \"PHOTO_FORMAT\", \"PICTURE\" FROM \"MAPS_BLOB\"");
+        ResultSet rs1 = s.getResultSet();
+        Statement s2 = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
+                ResultSet.CONCUR_READ_ONLY);
+        s2.executeQuery("SELECT \"MAP_ID\", \"MAP_NAME\", \"REGION\", \"AREA\", \"PHOTO_FORMAT\", \"PICTURE\" FROM \"MAPS_BLOB\"");
+        ResultSet rs2 = s2.getResultSet();
+        rs2.next();
+
+        Blob b2 = rs2.getBlob(6);
+        rs1.next();
+        Blob b1 = rs1.getBlob(6);
+        try {
+            rs1.close();
+            rs2.next();
+            rs2.getBlob(6);
+        } catch (SQLException sqle) {
+            if ("XJ073".equals(sqle.getSQLState()))
+                System.out.println("Expected Exception " + sqle.getMessage());
+            else
+                System.out.println("FAIL -- unexpected exception:"
+                        + sqle.toString());
+        }
+        finally {
+            rs2.close();
+            s2.close();
+            s.close();
+            ps.close();
+        }
+
+    }
+
+    /**
+     * Test fix for derby-265.
+     * Test that if getClob is called after the transaction 
+     * in which it was created is committed, a proper user error
+     * is thrown instead of an NPE. 
+     * Basically per the spec, getClob is valid only for the duration of 
+     * the transaction in it was created in
+     * @param conn
+     * @throws SQLException
+     * @throws FileNotFoundException
+     * @throws IOException
+     */
+    private static void clobNegativeTest_Derby265(Connection conn)
+            throws SQLException, FileNotFoundException,IOException {
+
+        // basically setup the tables for clob 
+        Statement s = conn.createStatement();
+        s.execute("create table \"MAPS\"(MAP_ID int, MAP_NAME varchar(20),REGION varchar(20),AREA varchar(20), PHOTO_FORMAT varchar(20),PICTURE clob(2G))");
+        conn.setAutoCommit(false);
+        PreparedStatement ps = conn.prepareStatement("insert into \"MAPS\" values(?,?,?,?,?,?)");
+        for (int i = 0; i < 3; i++) {
+            FileReader fr = new FileReader(fileName[4]);
+            ps.setInt(1, i);
+            ps.setString(2, "x" + i);
+            ps.setString(3, "abc");
+            ps.setString(4, "abc");
+            ps.setString(5, "abc");
+            ps.setCharacterStream(6, new java.io.BufferedReader(fr),300000);
+            ps.executeUpdate();
+            fr.close();
+        }
+        conn.commit();
+
+        conn.setAutoCommit(true);
+        System.out.println("-----------------------------");
+        s = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
+                ResultSet.CONCUR_READ_ONLY);
+        s.execute("SELECT \"MAP_ID\", \"MAP_NAME\", \"REGION\", \"AREA\", \"PHOTO_FORMAT\", \"PICTURE\" FROM \"MAPS\"");
+        ResultSet rs1 = s.getResultSet();
+        Statement s2 = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
+                ResultSet.CONCUR_READ_ONLY);
+        s2.executeQuery("SELECT \"MAP_ID\", \"MAP_NAME\", \"REGION\", \"AREA\", \"PHOTO_FORMAT\", \"PICTURE\" FROM \"MAPS\"");
+        ResultSet rs2 = s2.getResultSet();
+        rs2.next();
+
+        Clob b2 = rs2.getClob(6); // should be fine
+        rs1.next();
+        Clob b1 = rs1.getClob(6);
+        try {
+            rs1.close(); // this commits the transaction
+            rs2.next();
+            rs2.getClob(6); // no longer valid
+        } catch (SQLException sqle) {
+            if ("XJ073".equals(sqle.getSQLState()))
+                System.out.println("Expected Exception " + sqle.getMessage());
+            else
+                System.out.println("FAIL -- unexpected exception:"
+                        + sqle.toString());
+        }
+        finally {
+            rs2.close();
+            s2.close();
+            s.close();
+            ps.close();
+        }
+
+    }
     static void printInterval(Clob clob, long pos, int length,
         int testNum, int iteration, int clobLength)
     {
