diff --git a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/JiraConnector.java b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/JiraConnector.java
index 1cbdfdcd..5f312a54 100644
--- a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/JiraConnector.java
+++ b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/JiraConnector.java
@@ -44,15 +44,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	public static String jira_releaseNotesSource =
 		"http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss" +
-		"&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=50" +
-		"&reset=true&decorator=none&customfield_12310090=" +
-		"Existing+Application+Impact&customfield_12310090=Release+Note+Needed";
+		"&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=100" +
+		"&reset=true&decorator=none&customfield_12310090=Release+Note+Needed";
 
 	public static String jira_fixedBugsSource =
 		"http://issues.apache.org/jira/sr/jira.issueviews:" +
 		"searchrequest-xml/temp/SearchRequest.xml?&pid=10594&resolution=1&" +
-		"fixVersion=10.3.0.0&sorter/field=issuekey&sorter/order=DESC&" +
-		"tempMax=1000&reset=true&decorator=none";
+		"fixVersion=10.3.0.0&fixVersion=10.3.1.0&fixVersion=10.3.1.1&sorter/field=issuekey&sorter/order=DESC&" +
+		"tempMax=2000&reset=true&decorator=none";
 
 	// other urls to some cute jira reports in xml.
 	// all 
diff --git a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java
index ada72015..15ffa293 100644
--- a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java
+++ b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java
@@ -111,7 +111,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // major sections
     private static  final   String  OVERVIEW_SECTION = "Overview";
     private static  final   String  NEW_FEATURES_SECTION = "New Features";
-    private static  final   String  BUG_FIXES_SECTION = "Bug Fixes";
+    private static  final   String  BUG_FIXES_SECTION = "CHANGES";
     private static  final   String  ISSUES_SECTION = "Issues";
     private static  final   String  BUILD_ENVIRONMENT_SECTION = "Build Environment";
 
@@ -165,6 +165,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private static  final   String  JIRA_KEY = "key";
     private static  final   String  JIRA_NAME = "name";
     private static  final   String  JIRA_TITLE = "title";
+    private static  final   String  JIRA_FIXIN = "fixVersion";
 
     // managing releaseNote.html
     private static  final   String  RN_SUMMARY_OF_CHANGE = "Summary of Change";
@@ -588,7 +589,12 @@ private void buildBugList( GeneratorState gs )
         String          previousReleaseID = getPreviousReleaseID( gs );
         String          deltaStatement =
             "The following issues are addressed by Derby release " + releaseID +
-            ". These issues are not addressed in the preceding " + previousReleaseID + " release.";
+            ". These issues are not addressed in the preceding " + 
+              previousReleaseID + " release." +
+            "Note that some of these issues were discovered during development" +
+            " of the release and may not affect earlier releases. " +
+            "This list includes bugs, improvements and new features, including sub-tasks," +
+            " but not issues with only test or web content changes.";
 
         addParagraph( bugListSection, deltaStatement );
 
@@ -597,6 +603,8 @@ private void buildBugList( GeneratorState gs )
 
         for ( int i = 0; i < count; i++ )
         {
+        	if (bugs[i] == null)
+        		continue;
             JiraIssue   issue = bugs[ i ];
             Element     row = insertRow( table );
             Element     linkColumn = insertColumn( row );
@@ -631,6 +639,8 @@ private void buildIssuesList( GeneratorState gs )
         int                 count = bugs.length;
         String          releaseID = getReleaseID( gs );
         String          previousReleaseID = getPreviousReleaseID( gs );
+        String          greleaseID = releaseID;
+        String          gpreviousReleaseID = previousReleaseID;
         String          deltaStatement =
             "Compared with the previous release (" + previousReleaseID +
             "), Derby release " + releaseID + " introduces the following new features " +
@@ -642,6 +652,8 @@ private void buildIssuesList( GeneratorState gs )
 
         for ( int i = 0; i < count; i++ )
         {
+        	if (bugs[ i ] == null)
+        		continue;
             JiraIssue       issue = bugs[ i ];
             
             Document    releaseNote = null;
@@ -1282,6 +1294,19 @@ private Element getFirstChild( Element node, String childName )
         return retval;
     }
 
+    private Element getNextChild( Element node, String childName, int index )
+    throws Exception
+    {
+    	Element retval = (Element) node.getElementsByTagName( childName ).item( index );
+
+    	if ( retval == null )
+    	{
+    		throw new BuildException( "Could not find child element '" + childName + "' in parent element '" + node.getNodeName() + "'." );
+    	}
+
+    	return retval;
+    }
+    
     private Element getOptionalChild( Element node, String childName )
         throws Exception
     {
@@ -1380,7 +1405,17 @@ private void replaceTag( Document doc, String tag, String replacementText )
         int                 count = itemList.getLength();
         JiraIssue[]     issues = new JiraIssue[ count ];
 
-        for ( int i = 0; i < count; i++ ) { issues[ i ] = makeJiraIssue( (Element) itemList.item( i ) ); }
+        
+        
+        //for ( int i = 0; i < count; i++ ) { issues[ i ] = makeJiraIssue( (Element) itemList.item( i ) ); }
+        for ( int i = 0; i < count; i++ ) 
+        { 
+        	JiraIssue ji =  makeJiraIssue( (Element) itemList.item( i ) ); 
+        	if (ji != null)
+        	{
+        		issues[ i ] = ji; 
+        	}
+        }             
 
         return issues;
     }
@@ -1407,8 +1442,83 @@ private JiraIssue   makeJiraIssue( Element itemElement )
         //
         title = title.substring( title.indexOf( ']' ) + 2, title.length() );        
 
+        //return new JiraIssue( key, title, releaseNoteAttachmentID );
+        String type=squeezeText(getFirstChild(itemElement, "type"));
+        if (!(type.equals("Bug") || type.equals("New Feature") || type.equals("Improvement") || type.equals("Sub-task")))
+        	return null;
+
+        try {
+        	String component=squeezeText(getOptionalChild(itemElement, "component"));
+        	if (component != null)
+        	{   
+        		NodeList        subItemList = itemElement.getElementsByTagName( "component" );
+        		int             compcount = subItemList.getLength();
+        		for (int i=0; i<compcount; i++)
+        		{
+        			if (component.equals("Test") || component.equals("Web content"))
+        				return null;
+        			try {
+        				component = squeezeText(getNextChild(itemElement, "component", i+1));
+        			} catch (Exception e) {
+        				// nothing...
+        			}
+        		}
+        	}
+        } catch (NullPointerException e) {
+        	// do nothing, now...
+        }
+
+        try {
+        	String resolution=squeezeText(getOptionalChild(itemElement, "resolution"));
+        	if (resolution != null)
+        	{   
+        		if (!resolution.equals("Fixed"))
+        			return null;
+        	}
+        } catch (Exception e) {
+        	return null;
+        }
+
+        String fixVersion=null;
+        try {
+        	fixVersion=squeezeText(getOptionalChild(itemElement, JIRA_FIXIN));
+        } catch (Exception e) {
+        	return null;
+        }
+
+        while (fixVersion != null)
+        {
+
+        	NodeList        subItemList = itemElement.getElementsByTagName( JIRA_FIXIN );
+        	int             fixcount = subItemList.getLength();
+        	for (int i=0; i<fixcount; i++)
+        	{
+        		// if we encounter the previous release's ID, we can do away with entire issue
+        		if (_previousReleaseID.equals(fixVersion))
+        		{
+        			return null;
+        		}
+        		// hardcode excluding 10.2.1.6; we want to exclude those also
+        		if (fixVersion.equals("10.2.1.6"))
+        		{
+        			return null;
+        		}
+        		// if the first fixVersion does not match the current release, or the beta,
+        		// check the next one
+        		if ( (!_releaseID.equals(fixVersion)) && (!"10.3.0.0".equals(fixVersion))) {
+        			try {
+        				fixVersion = squeezeText(getNextChild( itemElement, JIRA_FIXIN, i+1));
+        				continue;
+        			} catch (Exception e) {
+        				fixVersion=null;
+        				return null;
+        			}
+        		}
+        	}
         return new JiraIssue( key, title, releaseNoteAttachmentID );
     }
+        return null;
+    }
 
     /**
      * <p>
