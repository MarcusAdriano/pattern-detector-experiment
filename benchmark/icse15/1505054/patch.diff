diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
index 679bb150..5f572aec 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
@@ -412,16 +412,26 @@ private void updateIndexStatsMinion(LanguageConnectionContext lcc,
                                         ConglomerateDescriptor[] cds,
                                         boolean asBackgroundTask)
             throws StandardException {
+
+        // can only properly identify disposable stats if cds == null, 
+        // which means we are processing all indexes on the conglomerate.
+        // If user sets 
+        // Property.STORAGE_AUTO_INDEX_STATS_DEBUG_KEEP_DISPOSABLE_STATS
+        // then we will not drop any orphaned stats.
+        // If not, then we will always drop orphaned stats, even in
+        // soft upgraded databases.
         final boolean identifyDisposableStats =
-                (cds == null && !FORCE_OLD_BEHAVIOR && !dbIsPre10_8);
+                (cds == null && !FORCE_OLD_BEHAVIOR);
+
         // Fetch descriptors if we're updating statistics for all indexes.
         if (cds == null) {
             cds = td.getConglomerateDescriptors();
         }
+
         // Extract/derive information from the table descriptor
         long[] conglomerateNumber = new long[cds.length];
         ExecIndexRow[] indexRow = new ExecIndexRow[cds.length];
-        UUID[] objectUUID = new UUID[cds.length];
+
 
         TransactionController tc = lcc.getTransactionExecute();
         ConglomerateController heapCC =
@@ -432,6 +442,13 @@ private void updateIndexStatsMinion(LanguageConnectionContext lcc,
                         ? TransactionController.ISOLATION_READ_UNCOMMITTED
                         : TransactionController.ISOLATION_REPEATABLE_READ
                 );
+
+
+        // create a list of indexes that should have statistics, by looking
+        // at all indexes on the conglomerate. This set is the "non disposable
+        // stat list".
+        UUID[] non_disposable_objectUUID    = new UUID[cds.length];
+
         try
         {
             for (int i = 0; i < cds.length; i++)
@@ -442,9 +459,10 @@ private void updateIndexStatsMinion(LanguageConnectionContext lcc,
                     continue;
                 }
 
+                // at this point have found a stat for an existing index, 
+                // add it to the list of "non disposable stats"
                 conglomerateNumber[i] = cds[i].getConglomerateNumber();
-
-                objectUUID[i] = cds[i].getUUID();
+                non_disposable_objectUUID[i] = cds[i].getUUID();
 
                 indexRow[i] =
                     cds[i].getIndexDescriptor().getNullIndexRow(
@@ -457,23 +475,34 @@ private void updateIndexStatsMinion(LanguageConnectionContext lcc,
             heapCC.close();
         }
 
-        // Check for disposable statistics if we have the required information.
+        // Check for and drop disposable statistics if we have the required 
+        // information.
+        //
         // Note that the algorithm would drop valid statistics entries if
         // working on a subset of the table conglomerates/indexes.
+        // The above loop has populated "cds" with only existing indexes.
+
         if (identifyDisposableStats) {
+
             List existingStats = td.getStatistics();
+            
             StatisticsDescriptor[] stats = (StatisticsDescriptor[])
                     existingStats.toArray(
                         new StatisticsDescriptor[existingStats.size()]);
+
             // For now we know that disposable stats only exist in two cases,
             // and that we'll only get one match for both of them per table:
             //  a) orphaned statistics entries (i.e. DERBY-5681)
             //  b) single-column primary keys (TODO: after DERBY-3790 is done)
+            //
+            //  This loop looks for statistic entries to delete.  It deletes
+            //  those entries that don't have a matching conglomerate in the
+            //  non disposable object list.
             for (int si=0; si < stats.length; si++) {
                 UUID referencedIndex = stats[si].getReferenceID();
                 boolean isValid = false;
                 for (int ci=0; ci < conglomerateNumber.length; ci++) {
-                    if (referencedIndex.equals(objectUUID[ci])) {
+                    if (referencedIndex.equals(non_disposable_objectUUID[ci])) {
                         isValid = true;
                         break;
                     }
@@ -523,6 +552,7 @@ private void updateIndexStatsMinion(LanguageConnectionContext lcc,
 
             scanTimes[sci][0] = conglomerateNumber[indexNumber];
             scanTimes[sci][1] = System.currentTimeMillis();
+
             // Subtract one for the RowLocation added for indexes.
             int numCols = indexRow[indexNumber].nColumns() - 1;
             long[] cardinality = new long[numCols];
@@ -593,7 +623,8 @@ private void updateIndexStatsMinion(LanguageConnectionContext lcc,
             int retries = 0;
             while (true) {
                 try {
-                    writeUpdatedStats(lcc, td, objectUUID[indexNumber],
+                    writeUpdatedStats(lcc, td, 
+                            non_disposable_objectUUID[indexNumber],
                             cmp.getRowCount(), cardinality, asBackgroundTask);
                     break;
                 } catch (StandardException se) {
