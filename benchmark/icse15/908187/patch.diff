diff --git a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CaseInsensitiveMap.java b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CaseInsensitiveMap.java
index e69de29b..2fd6b4d9 100644
--- a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CaseInsensitiveMap.java
+++ b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CaseInsensitiveMap.java
@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.web.converter.impl;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Properties;
+
+import org.apache.aries.web.converter.WarToWabConverter;
+import org.osgi.framework.Constants;
+
+/**
+ * Simple key case-insensitive map where only selected set of keys are 
+ * treated in case-insensitive way.
+ */
+public class CaseInsensitiveMap extends HashMap<String, String> {
+    
+    private static final Map<String, String> DEFAULT_KEY_MAP = new HashMap<String, String>();
+    static {
+        addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_SYMBOLICNAME);
+        addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_VERSION);
+        addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_MANIFESTVERSION);
+        addKeyMapping(DEFAULT_KEY_MAP, Constants.IMPORT_PACKAGE);
+        addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_CLASSPATH);
+        addKeyMapping(DEFAULT_KEY_MAP, WarToWabConverter.WEB_CONTEXT_PATH);
+    }
+    
+    private static void addKeyMapping(Map<String, String> mappings, String name) {
+        mappings.put(name.toLowerCase(), name);
+    }
+    
+    private Map<String, String> keyMap;
+    
+    public CaseInsensitiveMap() {
+        this.keyMap = new HashMap<String, String>(DEFAULT_KEY_MAP);
+    }
+    
+    public CaseInsensitiveMap(Map<String, String> source) {
+        this();
+        putAll(source);
+    }
+    
+    public CaseInsensitiveMap(Properties source) {
+        this();
+        for (Map.Entry<Object, Object> entry : source.entrySet()) {
+            String key = entry.getKey().toString();
+            String value = entry.getValue().toString();
+            put(key, value);
+        }
+    }
+    
+    @Override
+    public String put(String name, String value) {
+        return super.put(getMappedName(name), value);
+    }
+    
+    @Override
+    public String get(Object name) {
+        if (!(name instanceof String)) {
+            return null;
+        }
+        return super.get(getMappedName((String) name));
+    }
+    
+    @Override
+    public boolean containsKey(Object name) {
+        if (!(name instanceof String)) {
+            return false;
+        }
+        return super.containsKey(getMappedName((String) name));
+    }
+    
+    private String getMappedName(String name) {
+        String mappedName = keyMap.get(name.toLowerCase());
+        if (mappedName == null) {
+            mappedName = name;
+        }
+        return mappedName;
+    }
+}
+
diff --git a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
index da347145..5fc9d4e4 100644
--- a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
+++ b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
@@ -63,7 +63,7 @@
   private static final String DEFAULT_IMPORT_PACKAGE_LIST = 
       SERVLET_IMPORTS + "," + JSP_IMPORTS;
 
-  private Properties properties;
+  private CaseInsensitiveMap properties;
 
   // InputStream for the new WAB file
   private byte[] wabFile;
@@ -80,6 +80,10 @@
   private ArrayList<String> classPath;
 
   public WarToWabConverterImpl(InputStreamProvider warFile, String name, Properties properties) throws IOException {
+      this(warFile, name, new CaseInsensitiveMap(properties));
+  }
+  
+  public WarToWabConverterImpl(InputStreamProvider warFile, String name, CaseInsensitiveMap properties) throws IOException {
     this.properties = properties;
     classPath = new ArrayList<String>();
     importPackages = new HashSet<String>();
@@ -214,7 +218,7 @@ private void scanForDependencies(final JarInputStream jarInput) throws IOExcepti
   }
 
   protected Manifest updateBundleManifest(Manifest manifest) throws IOException {
-      String webCPath = properties.getProperty(WEB_CONTEXT_PATH);
+      String webCPath = properties.get(WEB_CONTEXT_PATH);
       if (webCPath == null) {
           webCPath = manifest.getMainAttributes().getValue(WEB_CONTEXT_PATH);
       }
@@ -239,7 +243,7 @@ protected Manifest updateBundleManifest(Manifest manifest) throws IOException {
   
   private void checkParameter(String parameter) throws IOException {
       if (properties.containsKey(parameter)) {
-          throw new IOException("Cannot override " + parameter + " parameter when converting a bundle");
+          throw new IOException("Cannot override " + parameter + " header when converting a bundle");
       }
   }
   
@@ -257,9 +261,9 @@ protected Manifest updateManifest(Manifest manifest) throws IOException
     // Web-ContextPath
     //
 
-    String webCPath = properties.getProperty(WEB_CONTEXT_PATH);
+    String webCPath = properties.get(WEB_CONTEXT_PATH);
     if (webCPath == null) {
-        throw new IOException(WEB_CONTEXT_PATH + " parameter is required.");
+        throw new IOException(WEB_CONTEXT_PATH + " parameter is missing.");
     }
     properties.put(WEB_CONTEXT_PATH, addSlash(webCPath));  
 
@@ -276,7 +280,7 @@ protected Manifest updateManifest(Manifest manifest) throws IOException
     // Bundle-ManifestVersion
     //
 
-    String manifestVersion = properties.getProperty(Constants.BUNDLE_MANIFESTVERSION);
+    String manifestVersion = properties.get(Constants.BUNDLE_MANIFESTVERSION);
     if (manifestVersion == null) {
         manifestVersion = manifest.getMainAttributes().getValue(Constants.BUNDLE_MANIFESTVERSION);
         if (manifestVersion == null) {
@@ -309,7 +313,7 @@ protected Manifest updateManifest(Manifest manifest) throws IOException
     classpath.addAll(classPath);
     
     // Get the list from the URL and add to classpath (removing duplicates)
-    mergePathList(properties.getProperty(Constants.BUNDLE_CLASSPATH), classpath, ",");
+    mergePathList(properties.get(Constants.BUNDLE_CLASSPATH), classpath, ",");
 
     // Get the existing list from the manifest file and add to classpath
     // (removing duplicates)
@@ -358,7 +362,7 @@ public boolean contains(Object elem) {
     packages.clear();
     
     // Get the list from the URL and add to classpath (removing duplicates)
-    mergePathList(properties.getProperty(Constants.IMPORT_PACKAGE), packages, ",");
+    mergePathList(properties.get(Constants.IMPORT_PACKAGE), packages, ",");
 
     // Get the existing list from the manifest file and add to classpath
     // (removing duplicates)
@@ -391,9 +395,9 @@ public boolean contains(Object elem) {
     }
      
     // Take the properties map and add them to the manifest file
-    for (Map.Entry<Object, Object> entry : properties.entrySet()) {
-        String key = entry.getKey().toString();
-        String value = entry.getValue().toString();
+    for (Map.Entry<String, String> entry : properties.entrySet()) {
+        String key = entry.getKey();
+        String value = entry.getValue();
         manifest.getMainAttributes().put(new Attributes.Name(key), value);
     }
     
diff --git a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WARConnection.java b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WARConnection.java
index 59201b91..3ece2a9e 100644
--- a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WARConnection.java
+++ b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WARConnection.java
@@ -23,17 +23,17 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLConnection;
-import java.util.Properties;
 
 import org.apache.aries.web.converter.WarToWabConverter.InputStreamProvider;
+import org.apache.aries.web.converter.impl.CaseInsensitiveMap;
 import org.apache.aries.web.converter.impl.WarToWabConverterImpl;
 
 public class WARConnection extends URLConnection
 {
   private WarToWabConverterImpl converter = null;
-  private Properties properties;
+  private CaseInsensitiveMap properties;
   
-  protected WARConnection(URL url, Properties properties) throws MalformedURLException
+  protected WARConnection(URL url, CaseInsensitiveMap properties) throws MalformedURLException
   {
     super(url);
     this.properties = properties;
diff --git a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WAR_URLServiceHandler.java b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WAR_URLServiceHandler.java
index af79c3c8..d2b3b9f3 100644
--- a/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WAR_URLServiceHandler.java
+++ b/incubator/aries/trunk/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WAR_URLServiceHandler.java
@@ -23,9 +23,9 @@
 import java.net.URLConnection;
 import java.util.Dictionary;
 import java.util.Hashtable;
-import java.util.Properties;
 import java.util.StringTokenizer;
 
+import org.apache.aries.web.converter.impl.CaseInsensitiveMap;
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
 import org.osgi.service.url.AbstractURLStreamHandlerService;
@@ -46,7 +46,7 @@ public WAR_URLServiceHandler()
   public URLConnection openConnection(URL url) throws IOException
   {
     // Create properties object
-    Properties properties = new Properties();
+    CaseInsensitiveMap properties = new CaseInsensitiveMap();
     if (url.getQuery() != null)
     {
       String propString = url.getQuery();
diff --git a/incubator/aries/trunk/web/web-urlhandler/src/test/java/org/apache/aries/web/converter/impl/WabConverterTest.java b/incubator/aries/trunk/web/web-urlhandler/src/test/java/org/apache/aries/web/converter/impl/WabConverterTest.java
index d4fb9c15..a06e457f 100644
--- a/incubator/aries/trunk/web/web-urlhandler/src/test/java/org/apache/aries/web/converter/impl/WabConverterTest.java
+++ b/incubator/aries/trunk/web/web-urlhandler/src/test/java/org/apache/aries/web/converter/impl/WabConverterTest.java
@@ -87,7 +87,7 @@ public void testImportPackageMerge() throws Exception
     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(new byte[0]), WAR_FILE_NAME, properties);
     
     Manifest input = new Manifest();
-    input.getMainAttributes().putValue("Import-Package", "com.ibm.test,javax.servlet.http");
+    input.getMainAttributes().putValue(Constants.IMPORT_PACKAGE, "com.ibm.test,javax.servlet.http");
     
     Manifest res = sut.updateManifest(input);
     Attributes attrs = res.getMainAttributes();
@@ -97,7 +97,7 @@ public void testImportPackageMerge() throws Exception
         "javax.servlet.http,"+
         "javax.servlet;version=2.5,"+
         JSP_IMPORTS,
-        attrs.getValue("Import-Package"));
+        attrs.getValue(Constants.IMPORT_PACKAGE));
   }
     
   @Test
@@ -107,7 +107,7 @@ public void testImportPackageWithAttributesMerge() throws Exception
                 WarToWabConverter.WEB_CONTEXT_PATH, "/test",
                 Constants.IMPORT_PACKAGE, "javax.servlet.jsp; version=\"[2.0,2.1]\",javax.servlet.jsp.tagext; version=\"[2.0,2.1]\"");
       
-      String actual = attrs.getValue("Import-Package");
+      String actual = attrs.getValue(Constants.IMPORT_PACKAGE);
       System.out.println(actual);
       assertEquals(
            "javax.servlet.jsp; version=\"[2.0,2.1]\"," +
@@ -163,6 +163,19 @@ public void testPropertySupport() throws Exception {
                  attrs.getValue(Constants.IMPORT_PACKAGE));
   }
   
+  @Test
+  public void testPropertyCaseInsensitiveSupport() throws Exception {
+    Attributes attrs = convertWithProperties(
+        "web-contextpath", "WebFiles",
+        "bundle-VErsion", "1.0",
+        "import-PACKAGE", "org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0");
+    
+    assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
+    assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
+    assertEquals("org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0," + DEFAULT_IMPORTS,
+                 attrs.getValue(Constants.IMPORT_PACKAGE));
+  }
+  
   @Test
   public void testBundleContextPathOverride() throws Exception {
     Manifest m = new Manifest();
