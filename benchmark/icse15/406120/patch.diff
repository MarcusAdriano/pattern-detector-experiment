diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java
index 89ea8b62..a8fe166d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java
@@ -42,9 +42,7 @@
     protected byte[] sqlErrmcBytes_;
     protected byte[] sqlErrpBytes_;
     protected byte[] sqlWarnBytes_;
-    protected byte[] sqlStateBytes_;
 
-    protected int ccsid_;
     protected int sqlErrmcCcsid_;
     protected boolean containsSqlcax_ = true;
     protected long rowsetRowCount_;
@@ -167,25 +165,9 @@ synchronized public String getSqlErrp() {
     }
 
     synchronized public String getSqlState() {
-        if (sqlState_ != null) {
             return sqlState_;
         }
 
-        if (sqlStateBytes_ == null) {
-            return null;
-        }
-
-        try {
-            sqlState_ = bytes2String(sqlStateBytes_,
-                    0,
-                    sqlStateBytes_.length);
-            return sqlState_;
-        } catch (java.io.UnsupportedEncodingException e) {
-            // leave sqlState as null.
-            return null;
-        }
-    }
-
     // Gets the formatted message, can throw an exception.
     synchronized public String getMessage() throws SqlException {
         // should this be traced to see if we are calling a stored proc?
@@ -373,7 +355,7 @@ public boolean includesSqlCode(int[] codes) {
         }
     }
 
-    private String bytes2String(byte[] bytes, int offset, int length)
+    protected String bytes2String(byte[] bytes, int offset, int length)
             throws java.io.UnsupportedEncodingException {
         // Network server uses utf8 encoding
         return new String(bytes, offset, length, Typdef.UTF8ENCODING);
@@ -400,14 +382,12 @@ public boolean containsSqlcax() {
 
     public void resetRowsetSqlca(org.apache.derby.client.am.Connection connection,
                                  int sqlCode,
-                                 byte[] sqlStateBytes,
-                                 byte[] sqlErrpBytes,
-                                 int ccsid) {
+                                 String sqlState,
+                                 byte[] sqlErrpBytes) {
         connection_ = connection;
         sqlCode_ = sqlCode;
-        sqlStateBytes_ = sqlStateBytes;
+        sqlState_ = sqlState;
         sqlErrpBytes_ = sqlErrpBytes;
-        ccsid_ = ccsid;
     }
 
     public void setRowsetRowCount(long rowCount) {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
index 16eef6ce..4fb64ee0 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
@@ -2580,12 +2580,19 @@ private NetSqlca parseSQLCAGRP(Sqlca[] rowsetSqlca) throws DisconnectException {
         int sqlcode = readFastInt();
         byte[] sqlstate = readFastBytes(5);
         byte[] sqlerrproc = readFastBytes(8);
-        NetSqlca netSqlca = new NetSqlca(netAgent_.netConnection_,
+        NetSqlca netSqlca = null;
+        
+        try
+        {
+            netSqlca = new NetSqlca(netAgent_.netConnection_,
                 sqlcode,
                 sqlstate,
-                sqlerrproc,
-                netAgent_.targetTypdef_.getCcsidSbc());
-
+                    sqlerrproc);
+        }
+        catch(SqlException sqle)
+        {
+            throw new DisconnectException(netAgent_,sqle);
+        }
         parseSQLCAXGRP(netSqlca);
 
         if (netAgent_.targetSqlam_ >= NetConfiguration.MGRLVL_7) {
@@ -3108,8 +3115,6 @@ private int parseSQLDCGRP(Sqlca[] rowsetSqlca, int lastRow) throws DisconnectExc
         int sqldcLinen = readFastInt(); // LINE_NUMBER
         int sqldcRown = (int) readFastLong(); // ROW_NUMBER
 
-        try
-        {
             // save +20237 in the 0th entry of the rowsetSqlca's.
             // this info is going to be used when a subsequent fetch prior is issued, and if already
             // received a +20237 then we've gone beyond the first row and there is no need to
@@ -3117,29 +3122,21 @@ private int parseSQLDCGRP(Sqlca[] rowsetSqlca, int lastRow) throws DisconnectExc
             if (sqldcCode == 20237) {
                 rowsetSqlca[0] = new NetSqlca(netAgent_.netConnection_,
                         sqldcCode,
-                        sqldcState.getBytes(Typdef.UTF8ENCODING),
-                        null,
-                        netAgent_.targetTypdef_.getCcsidSbc());
+                    sqldcState,
+                    null);
             } else {
                 if (rowsetSqlca[sqldcRown] != null) {
                     rowsetSqlca[sqldcRown].resetRowsetSqlca(netAgent_.netConnection_,
                             sqldcCode,
-                            sqldcState.getBytes(Typdef.UTF8ENCODING),
-                            null,
-                            netAgent_.targetTypdef_.getCcsidSbc());
+                        sqldcState,
+                        null);
                 } else {
                     rowsetSqlca[sqldcRown] = new NetSqlca(netAgent_.netConnection_,
                             sqldcCode,
-                            sqldcState.getBytes(Typdef.UTF8ENCODING),
-                            null,
-                            netAgent_.targetTypdef_.getCcsidSbc());
+                        sqldcState,
+                        null);
                 }
             }
-        }
-        catch(UnsupportedEncodingException uee)
-        {
-            throw new DisconnectException(uee,netAgent_); 
-        }
 
         // reset all entries between lastRow and sqldcRown to null
         for (int i = lastRow + 1; i < sqldcRown; i++) {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java
index a26a642e..d36ae2cb 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetCursor.java
@@ -698,7 +698,7 @@ private NetSqlca parseSQLCAGRP(Typdef typdef) throws org.apache.derby.client.am.
         int sqlcode = readFdocaInt();
         byte[] sqlstate = readFdocaBytes(5);
         byte[] sqlerrproc = readFdocaBytes(8);
-        NetSqlca netSqlca = new NetSqlca(netAgent_.netConnection_, sqlcode, sqlstate, sqlerrproc, typdef.getCcsidSbc());
+        NetSqlca netSqlca = new NetSqlca(netAgent_.netConnection_, sqlcode, sqlstate, sqlerrproc);
 
         parseSQLCAXGRP(typdef, netSqlca);
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetSqlca.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetSqlca.java
index b590d1e5..4e3d25af 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetSqlca.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetSqlca.java
@@ -21,6 +21,10 @@
 package org.apache.derby.client.net;
 
 import org.apache.derby.client.am.Sqlca;
+import org.apache.derby.shared.common.reference.SQLState;
+import org.apache.derby.client.am.ClientMessageId;
+import org.apache.derby.client.am.SqlException;
+import java.io.UnsupportedEncodingException;
 
 public class NetSqlca extends Sqlca {
     // these are the same variables that are in the Sqlca except ccsids
@@ -28,16 +32,31 @@
 
     NetSqlca(org.apache.derby.client.am.Connection connection,
              int sqlCode,
-             byte[] sqlStateBytes,
-             byte[] sqlErrpBytes,
-             int ccsid) {
+             String sqlState,
+             byte[] sqlErrpBytes) {
         super(connection);
         sqlCode_ = sqlCode;
-        sqlStateBytes_ = sqlStateBytes;
+        sqlState_ = sqlState;
         sqlErrpBytes_ = sqlErrpBytes;
-        ccsid_ = ccsid;
     }
 
+    NetSqlca(org.apache.derby.client.am.Connection connection,
+            int sqlCode,
+            byte[] sqlState,
+            byte[] sqlErrpBytes) throws SqlException {
+       super(connection);
+       sqlCode_ = sqlCode;
+       try
+       {
+           sqlState_ = bytes2String(sqlState,0,sqlState.length);
+       }catch(UnsupportedEncodingException uee)
+       {
+            throw new SqlException(null, 
+                  new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),
+                       "sqlstate bytes", "SQLSTATE",uee);
+       }
+       sqlErrpBytes_ = sqlErrpBytes;
+   }
     protected void setSqlerrd(int[] sqlErrd) {
         sqlErrd_ = sqlErrd;
     }
