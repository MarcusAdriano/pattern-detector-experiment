diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Limits.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Limits.java
index d5010739..bc8c4dea 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Limits.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Limits.java
@@ -100,5 +100,31 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     static final double DB2_SMALLEST_POSITIVE_DOUBLE = +2.225E-307d;
     static final double DB2_LARGEST_NEGATIVE_DOUBLE  = -2.225E-307d;
 
+    // Limits on the length of the return values for the procedures in
+    // LOBStoredProcedure.
+
+    /**
+     * The maximum length of the data returned from the BLOB stored procedures.
+     * <p>
+     * This value is currently dictated by the maximum length of
+     * VARCHAR/VARBINARY, because these are the return types of the stored
+     * procedures.
+     */
+    int MAX_BLOB_RETURN_LEN = Limits.DB2_VARCHAR_MAXWIDTH;
+
+    /**
+     * The maximum length of the data returned from the CLOB stored procedures.
+     * <p>
+     * This value is currently dictated by the maximum length of
+     * VARCHAR/VARBINARY, because these are the return types of the stored
+     * procedures, and the modified UTF8 encoding used for CLOB data. This
+     * threshold value could be higher (equal to {@code MAX_BLOB_RETURN_LEN}),
+     * but then the procedure fetching data from the CLOB must be rewritten to
+     * have more logic.
+     * <p>
+     * For now we use the defensive assumption that all characters are
+     * represented by three bytes.
+     */
+    int MAX_CLOB_RETURN_LEN = MAX_BLOB_RETURN_LEN / 3;
     
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
index 9d78315d..832e71e0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
@@ -25,7 +25,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.Attribute;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
-import org.apache.derby.iapi.error.ExceptionSeverity;
 import org.apache.derby.iapi.jdbc.AuthenticationService;
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.iapi.services.context.ContextService;
@@ -34,8 +33,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.replication.slave.SlaveFactory;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
-import java.sql.Driver;
-import java.sql.DriverManager;
+import org.apache.derby.jdbc.InternalDriver;
+
 import java.sql.SQLException;
 import java.util.Properties;
 
@@ -413,19 +412,15 @@ private void handleShutdown(StandardException shutdownCause) {
         } 
         try {
             shutdownInitiated = true;
-            String driverName = 
-                "org.apache.derby.jdbc.EmbeddedDriver";
-
-            Class.forName(driverName).newInstance();
-
-            Driver embedDriver = 
-                DriverManager.getDriver(Attribute.PROTOCOL);
 
             String conStr = "jdbc:derby:"+dbname+";"+
                 Attribute.REPLICATION_INTERNAL_SHUTDOWN_SLAVE+
                 "=true";
 
-            embedDriver.connect(conStr, (Properties) null);
+            InternalDriver driver = InternalDriver.activeDriver();
+            if (driver != null) {
+                driver.connect(conStr, (Properties) null);
+            }
         } catch (Exception e) {
             // Todo: report error to derby.log if exception is not
             // SQLState.SHUTDOWN_DATABASE
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
index 323d45a2..27a4a0fe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
@@ -23,8 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.sql.Blob;
 import java.sql.Clob;
-import java.sql.Connection;
-import java.sql.DriverManager;
 import java.sql.SQLException;
 
 import org.apache.derby.iapi.jdbc.EngineLOB;
@@ -38,30 +36,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public class LOBStoredProcedure {
 
-    /**
-     * The maximum length of the data returned from the BLOB stored procedures.
-     * <p>
-     * This value is currently dictated by the maximum length of
-     * VARCHAR/VARBINARY, because these are the return types of the stored
-     * procedures.
-     */
-    public static final int MAX_BLOB_RETURN_LEN = Limits.DB2_VARCHAR_MAXWIDTH;
-
-    /**
-     * The maximum length of the data returned from the CLOB stored procedures.
-     * <p>
-     * This value is currently dictated by the maximum length of
-     * VARCHAR/VARBINARY, because these are the return types of the stored
-     * procedures, and the modified UTF8 encoding used for CLOB data. This
-     * threshold value could be higher (equal to {@code MAX_BLOB_RETURN_LEN}),
-     * but then the procedure fetching data from the CLOB must be rewritten to
-     * have more logic.
-     * <p>
-     * For now we use the defensive assumption that all characters are
-     * represented by three bytes.
-     */
-    public static final int MAX_CLOB_RETURN_LEN = MAX_BLOB_RETURN_LEN / 3;
-
     /**
      * Creates a new empty Clob and registers it in the HashMap in the
      * Connection and returns the locator value corresponding to this Clob.
@@ -174,7 +148,7 @@ public static String CLOBGETSUBSTRING(int LOCATOR,
         long pos, int len) throws SQLException {
         // Don't read more than what we can represent as a VARCHAR.
         // See DERBY-3769.
-        len = Math.min(len, MAX_CLOB_RETURN_LEN);
+        len = Math.min(len, Limits.MAX_CLOB_RETURN_LEN);
         return getClobObjectCorrespondingtoLOCATOR(LOCATOR).getSubString(pos, len);
     }
 
@@ -332,7 +306,7 @@ public static long BLOBGETLENGTH(int LOCATOR) throws SQLException {
     throws SQLException {
         // Don't read more than what we can represent as a VARBINARY.
         // See DERBY-3769.
-        len = Math.min(len, MAX_BLOB_RETURN_LEN);
+        len = Math.min(len, Limits.MAX_BLOB_RETURN_LEN);
         return getBlobObjectCorrespondingtoLOCATOR(LOCATOR).getBytes(pos, len);
     }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index d10d4103..80a0379e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -175,9 +175,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.sql.Types;
 
-// LOBStoredProcedure is imported only to get hold of a constant.
-import org.apache.derby.impl.jdbc.LOBStoredProcedure;
-
 /**
  * Standard database implementation of the data dictionary
  * that stores the information in the system catlogs.
@@ -2583,7 +2580,7 @@ void upgradeCLOBGETSUBSTRING_10_6( TransactionController tc )
              TransactionController.ISOLATION_REPEATABLE_READ,
              tc);
         RoutineAliasInfo   oldRai = (RoutineAliasInfo) oldAD.getAliasInfo();
-        TypeDescriptor     newReturnType = DataTypeDescriptor.getCatalogType( Types.VARCHAR, LOBStoredProcedure.MAX_CLOB_RETURN_LEN );
+        TypeDescriptor     newReturnType = DataTypeDescriptor.getCatalogType( Types.VARCHAR, Limits.MAX_CLOB_RETURN_LEN );
         RoutineAliasInfo   newRai = new RoutineAliasInfo
             (
              oldRai.getMethodName(),
@@ -12308,7 +12305,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 false,
                 DataTypeDescriptor.getCatalogType(
                     Types.VARCHAR,
-                    LOBStoredProcedure.MAX_CLOB_RETURN_LEN),
+                    Limits.MAX_CLOB_RETURN_LEN),
                 newlyCreatedRoutines,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -12504,7 +12501,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 false,
                 DataTypeDescriptor.getCatalogType(
                     Types.VARBINARY,
-                    LOBStoredProcedure.MAX_BLOB_RETURN_LEN),
+                    Limits.MAX_BLOB_RETURN_LEN),
                 newlyCreatedRoutines,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
index e80e9611..b4760de9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
@@ -66,9 +66,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // This is the driver that memorizes the autoloadeddriver (DERBY-2905)
     private static Driver _autoloadedDriver;
 
-    // This flag is true unless the deregister attribute has been set to
-    // false by the user (DERBY-2905)
-    private static boolean deregister = true;
 	//
 	// This is the driver that's specific to the JDBC level we're running at.
 	// It's the module which boots the whole Derby engine.
@@ -249,13 +246,13 @@ static	void	unregisterDriverModule()
 		_engineForcedDown = true;
         try {
             // deregister is false if user set deregister=false attribute (DERBY-2905)
-            if (deregister && _autoloadedDriver != null) {
+            if (InternalDriver.getDeregister() && _autoloadedDriver != null) {
                 DriverManager.deregisterDriver(_autoloadedDriver);
                 _autoloadedDriver = null;
             } else {
                 DriverManager.deregisterDriver(_driverModule);
                 //DERBY 5085, need to restore the default value
-                deregister = true;
+                InternalDriver.setDeregister(true);
             }
             _driverModule = null;
         } catch (SQLException e) {
@@ -273,20 +270,6 @@ private	static	boolean	isBooted()
 		return ( _driverModule != null );
 	}
 	
-    /**
-     * @param theValue set the deregister value
-     */
-    public static void setDeregister(boolean theValue) {
-        AutoloadedDriver.deregister = theValue;
-    }
-
-    /**
-     * @return the deregister value
-     */
-    public static boolean getDeregister() {
-        return deregister;
-    }
-
     /**
      * load slightly more capable driver if possible.
      * But if the vm level doesn't support it, then we fall
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
index 52af63b8..01593aab 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
@@ -77,6 +77,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private ContextService contextServiceFactory;
 	private AuthenticationService	authenticationService;
 
+    /**
+     * Tells whether or not {@code AutoloadedDriver} should deregister itself
+     * on shutdown. This flag is true unless the deregister attribute has been
+     * set to false by the user (DERBY-2905).
+     */
+    private static boolean deregister = true;
+
 	public static final InternalDriver activeDriver()
 	{
 		return activeDriver;
@@ -230,7 +237,7 @@ public Connection connect(String url, Properties info)
                         boolean deregister = Boolean.valueOf(
                                 finfo.getProperty(Attribute.DEREGISTER_ATTR))
                                 .booleanValue();
-                        AutoloadedDriver.setDeregister(deregister);
+                        InternalDriver.setDeregister(deregister);
                     }
 
 					// check for shutdown privileges
@@ -634,7 +641,25 @@ public DatabaseMetaData newEmbedDatabaseMetaData(EmbedConnection conn,
                            (ResultColumnDescriptor[] columnInfo) {
             return new EmbedResultSetMetaData(columnInfo);
         }
-}
-
 
+    /**
+     * Indicate to {@code AutoloadedDriver} whether it should deregister
+     * itself on shutdown.
+     *
+     * @param deregister whether or not {@code AutoloadedDriver} should
+     * deregister itself
+     */
+    static void setDeregister(boolean deregister) {
+        InternalDriver.deregister = deregister;
+    }
 
+    /**
+     * Check whether {@code AutoloadedDriver} should deregister itself on
+     * shutdown.
+     *
+     * @return the deregister value
+     */
+    static boolean getDeregister() {
+        return InternalDriver.deregister;
+    }
+}
