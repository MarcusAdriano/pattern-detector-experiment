diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
index d59aa2af..5768e613 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
@@ -113,7 +113,7 @@ public ReplicationMessageReceive(SlaveAddress slaveAddress,
      * @param timeout The amount of time, in milliseconds, this method
      * will wait for a connection to be established. If no connection
      * has been established before the timeout, a
-     * PrivilegedExceptionAction is raised with cause
+     * IOException is raised with cause
      * java.net.SocketTimeoutException
      * @param synchOnInstant the slave log instant, used to check that
      * the master and slave log files are in synch. If no chunks of log
@@ -123,11 +123,11 @@ public ReplicationMessageReceive(SlaveAddress slaveAddress,
      * Note that there is a difference!
      * @param dbname the name of the replicated database
      *
-     * @throws PrivilegedActionException if an exception occurs while trying
-     *                                   to open a connection.
+     *
      *
      * @throws IOException if an exception occurs while trying to create the
-     *                     <code>SocketConnection</code> class.
+     *                     <code>SocketConnection</code> class or while
+     *                     trying to open a connection.
      *
      * @throws ClassNotFoundException Class of a serialized object cannot
      *                                be found.
@@ -136,7 +136,6 @@ public ReplicationMessageReceive(SlaveAddress slaveAddress,
      */
     public void initConnection(int timeout, long synchOnInstant, String dbname)
         throws
-        PrivilegedActionException,
         IOException,
         StandardException,
         ClassNotFoundException {
@@ -148,15 +147,19 @@ public void initConnection(int timeout, long synchOnInstant, String dbname)
             serverSocket = createServerSocket();
         }
         serverSocket.setSoTimeout(timeout);
-        
+        Socket client = null;
+        try {
         //Start listening on the socket and accepting the connection
-        Socket client =
+            client =
             (Socket)
             AccessController.doPrivileged(new PrivilegedExceptionAction() {
             public Object run() throws IOException {
                 return serverSocket.accept();
             }
         });
+        } catch(PrivilegedActionException pea) {
+            throw (IOException) pea.getException();
+        }
         
         //create the SocketConnection object using the client connection.
         socketConn = new SocketConnection(client);
@@ -180,20 +183,26 @@ public Object run() throws IOException {
      *
      * @return an instance of the <code>ServerSocket</code> class.
      *
-     * @throws PrivilegedActionException if an exception occurs while trying
+     * @throws IOException if an exception occurs while trying
      *                                   to open a connection.
      */
-    private ServerSocket createServerSocket() throws PrivilegedActionException {
+    private ServerSocket createServerSocket() throws IOException {
         //create a ServerSocket at the specified host name and the
         //port number.
-        return   (ServerSocket) AccessController.doPrivileged
+        ServerSocket ss = null;
+        try { 
+            ss =   (ServerSocket) AccessController.doPrivileged
             (new PrivilegedExceptionAction() {
-            public Object run() throws IOException, StandardException {
+                public Object run() throws IOException  {
                 ServerSocketFactory sf = ServerSocketFactory.getDefault();
                 return sf.createServerSocket(slaveAddress.getPortNumber(),
                     0, slaveAddress.getHostAddress());
             }
         });
+            return ss;
+        } catch(PrivilegedActionException pea) {
+            throw (IOException) pea.getException();
+        }
     }
     
     /**
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java
index 8fcd93a2..ab2610fe 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java
@@ -101,11 +101,9 @@ public ReplicationMessageTransmit(SlaveAddress slaveAddress) {
      * end position in the current log file. If a chunk of log has
      * been shipped, this is the instant of the log record shipped
      * last. Note that there is a difference!
-     * @throws PrivilegedActionException if an exception occurs while trying
-     *                                   to open a connection.
      *
      * @throws IOException if an exception occurs while trying to create the
-     *         <code>SocketConnection</code> class.
+     *         <code>SocketConnection</code> class or open a connection.
      *
      * @throws StandardException If an error message is received from the
      *         server indicating incompatible software versions of master
@@ -115,7 +113,6 @@ public ReplicationMessageTransmit(SlaveAddress slaveAddress) {
      *         be found.
      */
     public void initConnection(int timeout, long synchOnInstant) throws
-        PrivilegedActionException,
         IOException,
         StandardException,
         ClassNotFoundException {
@@ -123,7 +120,7 @@ public void initConnection(int timeout, long synchOnInstant) throws
         Socket s = null;
         
         final int timeout_ = timeout;
-        
+        try {
         //create a connection to the slave.
         s = (Socket)
         AccessController.doPrivileged(new PrivilegedExceptionAction() {
@@ -137,6 +134,9 @@ public Object run() throws IOException {
                 return s_temp;
             }
         });
+        } catch(PrivilegedActionException pea) {
+            throw (IOException) pea.getException();
+        }
         
         // keep socket alive even if no log is shipped for a long time
         s.setKeepAlive(true);
