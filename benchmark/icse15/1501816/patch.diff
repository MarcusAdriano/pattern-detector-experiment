diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index b5056fb7..f6094dfa 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -52,6 +52,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
+import org.apache.derby.iapi.types.DataValueDescriptor;
+import org.apache.derby.catalog.DefaultInfo;
 
 import org.apache.derby.iapi.reference.ClassName;
 import org.apache.derby.iapi.reference.SQLState;
@@ -1925,10 +1927,27 @@ public Object getSharedState(String key) {
         TypeDescriptor[] types = td.getRowTypes();
         for ( int i = 0; i < columnNames.length; i++ )
         {
-            resultColumns.addColumn( exposedName, columnNames[ i ],
-                    DataTypeDescriptor.getType(types[i]));
+            String          columnName = columnNames[ i ];
+            DataTypeDescriptor  dtd = DataTypeDescriptor.getType(types[i]);
+            ResultColumn    rc = resultColumns.addColumn
+                ( exposedName, columnName, dtd );
+
+            //
+            // Stuff a column descriptor into the ResultColumn. We do this so that
+            // getColumnPosition() will return the column position within the
+            // table function's shape. Later on, projection may remove columns
+            // from the ResultColumnList. We don't want getColumnPosition() to say
+            // that the column position is the index into the abbreviated ResultColumnList.
+            // See DERBY-6040.
+            //
+            ColumnDescriptor    coldesc = new ColumnDescriptor
+                (
+                 columnName, i+1, dtd,
+                 (DataValueDescriptor) null, (DefaultInfo) null, (UUID) null, (UUID) null,
+                 0L, 0L, 0L
+                 );
+            rc.setColumnDescriptor( null, coldesc );
         }
-
     }
 
     /**
diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index a29a78b1..9ccae13c 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -3604,9 +3604,10 @@ else if (jdbcColumnType == Types.LONGVARCHAR ||
 
     /** 
      * Add a column to the list given a tablename, columnname, and datatype.
+     * Return the just-added column.
      *
      */
-    public void addColumn( TableName tableName, String columnName, DataTypeDescriptor dts )
+    public ResultColumn addColumn( TableName tableName, String columnName, DataTypeDescriptor dts )
         throws StandardException
     {
         ValueNode bcn = (ValueNode) getNodeFactory().getNode(
@@ -3622,6 +3623,8 @@ public void addColumn( TableName tableName, String columnName, DataTypeDescripto
                                                                   getContextManager());
         rc.setType(dts);
         addResultColumn(rc);
+
+        return rc;
     }
     
 	/**
