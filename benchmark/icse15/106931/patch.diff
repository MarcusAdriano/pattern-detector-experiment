diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
index 6a5c9029..438edd1e 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
@@ -33,6 +33,7 @@
 		<LI> 2 - JDK 1.2, 1.3
 		<LI> 4 - JDK 1.4.0 or 1.4.1
 		<LI> 5 - JDK 1.4.2
+		<LI> 6 - JDK 1.5
 		</UL>
 		@return The JVM's runtime environment.
 	*/
@@ -82,6 +83,10 @@ else if (javaVersion.equals("1.4"))
 			else
 				id = 5;
 		}
+        else if (javaVersion.equals("1.5"))
+        {
+            id = 6;
+        }
 		else
 		{
 			// aussme our lowest support unless the java spec
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java
index d0517b88..f79163bd 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java
@@ -32,10 +32,13 @@
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.services.cache.ClassSize;
+import org.apache.derby.iapi.services.info.JVMInfo;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.lang.Math;
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
 import java.io.ObjectOutput;
 import java.io.ObjectInput;
 import java.io.IOException;
@@ -130,7 +133,7 @@ public SQLDecimal(BigDecimal val)
 		value = val;
 	}
 
-	public SQLDecimal(BigDecimal val, int precision, int scale) 
+	public SQLDecimal(BigDecimal val, int nprecision, int scale)
 			throws StandardException
 	{
 		
@@ -309,8 +312,40 @@ public String	getString()
 		BigDecimal localValue = getBigDecimal();
 		if (localValue == null)
 			return null;
-		else
+		else if (JVMInfo.JDK_ID < 6)
 			return localValue.toString();
+        else
+        {
+            // use reflection so we can still compile using JDK1.4
+            // if we are prepared to require 1.5 to compile then this can be a direct call
+            try {
+                return (String) toPlainString.invoke(localValue, null);
+            } catch (IllegalAccessException e) {
+                // can't happen based on the JDK spec
+                throw new IllegalAccessError("toPlainString");
+            } catch (InvocationTargetException e) {
+                Throwable t = e.getTargetException();
+                if (t instanceof RuntimeException) {
+                    throw (RuntimeException) t;
+                } else if (t instanceof Error) {
+                    throw (Error) t;
+                } else {
+                    // can't happen
+                    throw new IncompatibleClassChangeError("toPlainString");
+                }
+            }
+        }
+	}
+
+    private static final Method toPlainString;
+    static {
+        Method m;
+        try {
+            m = BigDecimal.class.getMethod("toPlainString", null);
+        } catch (NoSuchMethodException e) {
+            m = null;
+        }
+        toPlainString = m;
 	}
 
 	public Object	getObject()
