diff --git a/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java b/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
index b2878a1e..1d7093b8 100644
--- a/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
+++ b/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
@@ -169,7 +169,8 @@ public static void createApplications() throws Exception
     //create the bundle
     bundle = ArchiveFixture.newJar()
     .binary("META-INF/MANIFEST.MF", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/META-INF/MANIFEST.MF")).end()
-    .binary("OSGI-INF/blueprint/blueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml")).end();
+    .binary("OSGI-INF/blueprint/blueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml")).end()
+    .binary("OSGI-INF/blueprint/anotherBlueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/OSGI-INF/blueprint/sample-blueprint.xml")).end();
     fout = new FileOutputStream(REPO_BUNDLE + ".jar");
     bundle.writeOut(fout);
     fout.close();
diff --git a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
index 83814a94..11a8b611 100644
--- a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
+++ b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
@@ -9,8 +9,10 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Queue;
 import java.util.Set;
 
 import org.apache.aries.application.InvalidAttributeException;
@@ -123,13 +125,7 @@ public ParsedServiceElements parseAllServiceElements(InputStream blueprintToPars
 	          
 	          Metadata value = entry.getValue();
 	          if (value instanceof CollectionMetadata) { 
-	            List<Metadata> values = ((CollectionMetadata)value).getValues();
-	            String[] theseValues = new String[values.size()];
-	            for (int i=0; i < values.size(); i++) { 
-	              Metadata m = values.get(i); 
-	              theseValues[i] = ((ValueMetadata)m).getStringValue();
-	            }
-	            serviceProps.put(key, theseValues);
+	            processMultiValueProperty(serviceProps, key, value);
 	          } else { 
 	            serviceProps.put(key, ((ValueMetadata)entry.getValue()).getStringValue());
 	          }
@@ -171,6 +167,43 @@ public ParsedServiceElements parseAllServiceElements(InputStream blueprintToPars
 	    _logger.debug(LOG_EXIT, "parseAllServiceElements", new Object[]{result});
 	    return result; 
 	  }	  
+    private void processMultiValueProperty(Map<String, Object> serviceProps,
+        String key, Metadata value) {
+      List<Metadata> values = ((CollectionMetadata)value).getValues();
+      Class<?> collectionClass = ((CollectionMetadata)value).getCollectionClass();
+      Object collectionValue;
+      
+      if(Collection.class.isAssignableFrom(collectionClass)) {
+        Collection<String> theseValues = getCollectionFromClass(collectionClass);
+        for(Metadata m : values) {
+          theseValues.add(((ValueMetadata)m).getStringValue());
+        }
+        collectionValue = theseValues;
+      } else {
+        String[] theseValues = new String[values.size()];
+        for (int i=0; i < values.size(); i++) { 
+          Metadata m = values.get(i); 
+          theseValues[i] = ((ValueMetadata)m).getStringValue();
+        }
+        collectionValue = theseValues;
+      }
+      serviceProps.put(key, collectionValue);
+    }	  
+	  
+	  private Collection<String> getCollectionFromClass(Class<?> collectionClass) {
+	    
+	    if(List.class.isAssignableFrom(collectionClass)) {
+	      return new ArrayList<String>();
+	    } else if (Set.class.isAssignableFrom(collectionClass)) {
+	      return new HashSet<String>();
+	    } else if (Queue.class.isAssignableFrom(collectionClass)) {
+	      //This covers Queue and Deque, which is caught by the isAssignableFrom check
+	      //as a sub-interface of Queue
+	      return new LinkedList<String>();
+	    } else {
+	      throw new IllegalArgumentException(collectionClass.getName());
+	    }
+	  }
 	  
 	  /**
 	   * Extract References metadata from a ComponentDefinitionRegistry. 
diff --git a/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/impl/ParserProxyTest.java b/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/impl/ParserProxyTest.java
index 4b29222a..c0a98ace 100644
--- a/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/impl/ParserProxyTest.java
+++ b/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/impl/ParserProxyTest.java
@@ -35,6 +35,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.TreeSet;
 
 import org.apache.aries.application.modelling.ModellingManager;
 import org.apache.aries.application.modelling.ParsedServiceElements;
@@ -218,6 +219,10 @@ public void checkMultiValues() throws Exception {
     Map<String, Object> props = new HashMap<String, Object>();
     props.put ("priority", "9");
     props.put("volume", "11");
+    props.put("property.list", Arrays.asList("1", "2", "3", "2", "1"));
+    //Deliberately miss off duplicate entries and reorder, the parser should still match this
+    props.put("property.set", new TreeSet<String>(Arrays.asList("2", "3", "1")));
+    props.put("property.array", new String[]{"1", "2", "3", "2", "1"});
     props.put("osgi.service.blueprint.compname", "myBean");
     expectedResults.add(_modellingManager.getExportedService("myService", 0, Arrays.asList("foo.bar.MyService"), props));
 
diff --git a/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRCapability.java b/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRCapability.java
index fcdd16e9..40b2c429 100644
--- a/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRCapability.java
+++ b/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRCapability.java
@@ -25,6 +25,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -99,6 +100,12 @@ public String getValue()
           if (value instanceof String[]) {
             String newValue = Arrays.toString((String[])value);
             value = newValue.substring(1, newValue.length() - 1);
+          } else if (value instanceof Collection) {
+            //We can't rely on Collections having a sensible toString() as it isn't
+            //part of the API (although all base Java ones do). We can use an array
+            //to get consistency
+            String newValue = Arrays.toString(((Collection<?>)value).toArray());
+            value = newValue.substring(1, newValue.length() - 1);
           }
           
           return String.valueOf(value);
@@ -112,7 +119,7 @@ public String getType()
           if (Constants.VERSION_ATTRIBUTE.equals(name) || (Constants.BUNDLE_VERSION_ATTRIBUTE.equals(name))) {
             type =  "version";
           } else if (Constants.OBJECTCLASS.equals(name) || (Constants.MANDATORY_DIRECTIVE + ":").equals(name) ||
-              entry.getValue() instanceof String[])
+              entry.getValue() instanceof String[] || entry.getValue() instanceof Collection)
             type = "set";
           return type;
         }
diff --git a/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java b/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
index e05a708f..1cc8718c 100644
--- a/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
+++ b/aries/trunk/application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
@@ -157,7 +157,7 @@ private  static void writeCapability(Capability c, Document doc, Element resourc
       String name = (String) entry.getName();
       String objectAttrs = entry.getValue();
 
-      String type = getType(name);
+      String type = (entry.getType() == null) ? getType(name) : entry.getType();
 
       // remove the beginning " and tailing "
       if (objectAttrs.startsWith("\"") && objectAttrs.endsWith("\""))
