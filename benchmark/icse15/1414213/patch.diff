diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
index f268e5bd..f8906644 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
@@ -93,6 +93,7 @@ private static String convertFileNameToLocation(String fileName) {
 	
 	private final List<Capability> capabilities;
 	private final DeploymentManifest deploymentManifest;
+	private final long id;
 	private final Repository localRepository;
 	private final Location location;
 	private final List<Requirement> requirements;
@@ -100,6 +101,7 @@ private static String convertFileNameToLocation(String fileName) {
 	private final SubsystemManifest subsystemManifest;
 	
 	public RawSubsystemResource(String location, IDirectory content) throws URISyntaxException, IOException, ResolutionException, ModellerException {
+		id = SubsystemIdentifier.getNextId();
 		this.location = new Location(location);
 		if (content == null)
 			content = this.location.open();
@@ -129,6 +131,7 @@ public RawSubsystemResource(IDirectory idir) throws IOException, URISyntaxExcept
 		requirements = subsystemManifest.toRequirements(this);
 		capabilities = subsystemManifest.toCapabilities(this);
 		deploymentManifest = initializeDeploymentManifest(idir);
+		id = Long.parseLong(deploymentManifest.getHeaders().get(DeploymentManifest.ARIESSUBSYSTEM_ID).getValue());
 		location = new Location(deploymentManifest.getHeaders().get(DeploymentManifest.ARIESSUBSYSTEM_LOCATION).getValue());
 	}
 	
@@ -158,6 +161,10 @@ public DeploymentManifest getDeploymentManifest() {
 		return deploymentManifest;
 	}
 	
+	public long getId() {
+		return id;
+	}
+	
 	public Repository getLocalRepository() {
 		return localRepository;
 	}
@@ -379,9 +386,12 @@ private SubsystemManifest computeSubsystemManifestBeforeRequirements(SubsystemMa
 	
 	private SubsystemSymbolicNameHeader computeSubsystemSymbolicNameHeader(SubsystemManifest manifest) {
 		SubsystemSymbolicNameHeader header = manifest.getSubsystemSymbolicNameHeader();
-		if (header == null)
-			header = new SubsystemSymbolicNameHeader(location.getSymbolicName());
+		if (header != null)
 		return header;
+		String symbolicName = location.getSymbolicName();
+		if (symbolicName == null)
+			symbolicName = "org.apache.aries.subsystem." + id;
+		return new SubsystemSymbolicNameHeader(symbolicName);
 	}
 	
 	private SubsystemVersionHeader computeSubsystemVersionHeader(SubsystemManifest manifest) {
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
index 9871b048..e9455f59 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
@@ -77,7 +77,6 @@
 	
 	private final List<Capability> capabilities;
 	private final DeploymentManifest deploymentManifest;
-	private final long id;
 	private final Collection<Resource> installableContent = new HashSet<Resource>();
 	private final Collection<Resource> installableDependencies = new HashSet<Resource>();
 	private final Collection<Resource> mandatoryResources = new HashSet<Resource>();
@@ -96,7 +95,6 @@ public SubsystemResource(String location, IDirectory content, BasicSubsystem par
 	public SubsystemResource(RawSubsystemResource resource, BasicSubsystem parent) throws IOException, BundleException, InvalidSyntaxException, URISyntaxException {
 		this.parent = parent;
 		this.resource = resource;
-		id = SubsystemIdentifier.getNextId();
 		preferredProviderRepository = new PreferredProviderRepository(this);
 		computeContentResources(resource.getDeploymentManifest());
 		capabilities = computeCapabilities();
@@ -113,7 +111,6 @@ public SubsystemResource(IDirectory directory) throws IOException, URISyntaxExce
 		resource = new RawSubsystemResource(directory);
 		preferredProviderRepository = null;
 		deploymentManifest = resource.getDeploymentManifest();
-		id = Long.parseLong(deploymentManifest.getHeaders().get(DeploymentManifest.ARIESSUBSYSTEM_ID).getValue());
 		computeContentResources(deploymentManifest);
 		capabilities = computeCapabilities();
 		computeDependencies(deploymentManifest);
@@ -167,7 +164,7 @@ public DeploymentManifest getDeploymentManifest() {
 	}
 	
 	public long getId() {
-		return id;
+		return resource.getId();
 	}
 	
 	public Collection<Resource> getInstallableContent() {
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java
index d30a0c40..24cccc3d 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java
@@ -19,10 +19,14 @@
 package org.apache.aries.subsystem.itests;
 
 import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
 import org.apache.aries.subsystem.itests.util.Utils;
 import org.apache.aries.unittest.fixture.ArchiveFixture;
@@ -37,6 +41,7 @@
 import org.osgi.framework.Bundle;
 import org.osgi.framework.Version;
 import org.osgi.service.subsystem.Subsystem;
+import org.osgi.service.subsystem.SubsystemConstants;
 
 @RunWith(MavenConfiguredJUnit4TestRunner.class)
 public class InstallTest extends SubsystemTest {
@@ -89,6 +94,9 @@ public static void createApplications() throws Exception {
 		}
 		createApplication("feature3", new String[]{"tb3.jar"});
 		createApplication("feature2", new String[]{"tb3.jar", "tb2.jar"});
+		createBundleA();
+		createApplicationA();
+		createCompositeA();
 		createdApplications = true;
 	}
 	
@@ -175,4 +183,71 @@ public void testLocationAsDirectoryUrl() throws Exception {
     		fail("Subsystem installation using directory URL as location failed");
     	}
     }
+    
+    /*
+	 * Bundle-SymbolicName: bundle.a.jar
+	 */
+	private static final String BUNDLE_A = "bundle.a.jar";
+	
+	private static void createBundleA() throws IOException {
+		createBundle(BUNDLE_A);
+	}
+    
+    /*
+	 * No symbolic name. No manifest.
+	 */
+	private static final String APPLICATION_A = "application.a.esa";
+	
+	private static void createApplicationA() throws IOException {
+		createApplicationAManifest();
+		createSubsystem(APPLICATION_A, BUNDLE_A);
+	}
+	
+	private static void createApplicationAManifest() throws IOException {
+		File manifest = new File(APPLICATION_A + ".mf");
+		if (manifest.exists())
+			assertTrue("Could not delete manifest", manifest.delete());
+	}
+    
+    @Test
+    public void testGeneratedSymbolicNameWithoutManifest() throws Exception {
+    	String expected = "org.apache.aries.subsystem.1";
+    	Subsystem a = installSubsystemFromFile(APPLICATION_A);
+    	try {
+    		assertSymbolicName(expected, a);
+    		assertSymbolicName(expected, a.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME));
+    	}
+    	finally {
+    		uninstallSubsystemSilently(a);
+    	}
+    }
+    
+    /*
+	 * Manifest with no symbolic name header.
+	 */
+	private static final String COMPOSITE_A = "composite.a.esa";
+	
+	private static void createCompositeA() throws IOException {
+		createCompositeAManifest();
+		createSubsystem(COMPOSITE_A);
+	}
+	
+	private static void createCompositeAManifest() throws IOException {
+		Map<String, String> attributes = new HashMap<String, String>();
+		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
+		createManifest(COMPOSITE_A + ".mf", attributes);
+	}
+	
+	@Test
+    public void testGeneratedSymbolicNameWithManifest() throws Exception {
+    	String expected = "org.apache.aries.subsystem.1";
+    	Subsystem a = installSubsystemFromFile(COMPOSITE_A);
+    	try {
+    		assertSymbolicName(expected, a);
+    		assertSymbolicName(expected, a.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME));
+    	}
+    	finally {
+    		uninstallSubsystemSilently(a);
+    	}
+    }
 }
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
index 074d615e..86fe3eb0 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
@@ -484,7 +484,11 @@ protected void assertSubsystemNotNull(Subsystem subsystem) {
 	}
 	
 	protected void assertSymbolicName(String expected, Subsystem subsystem) {
-		assertEquals("Wrong symbolic name: " + subsystem.getSymbolicName(), expected, subsystem.getSymbolicName());
+		assertSymbolicName(expected, subsystem.getSymbolicName());
+	}
+	
+	protected void assertSymbolicName(String expected, String actual) {
+		assertEquals("Wrong symbolic name", expected, actual);
 	}
 	
 	protected void assertType(String expected, Subsystem subsystem) {
@@ -552,8 +556,11 @@ protected static void createSubsystem(String name) throws IOException {
 	}
 	
 	protected static void createSubsystem(String name, String...contents) throws IOException {
+		File manifest = new File(name + ".mf");
+		ZipFixture fixture = ArchiveFixture.newZip();
+		if (manifest.exists())
 		// The following input stream is closed by ArchiveFixture.copy.
-		ZipFixture fixture = ArchiveFixture.newZip().binary("OSGI-INF/SUBSYSTEM.MF", new FileInputStream(name + ".mf"));
+			fixture.binary("OSGI-INF/SUBSYSTEM.MF", new FileInputStream(name + ".mf"));
 		if (contents != null) {
 			for (String content : contents) {
 				// The following input stream is closed by ArchiveFixture.copy.
