diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.java
index da2b5660..f4a93b3a 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.java
@@ -111,6 +111,7 @@ private IndexReaderContext build(CompositeReaderContext parent, IndexReader read
           children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);
           newDocBase += sequentialSubReaders[i].maxDoc();
         }
+        assert newDocBase == cr.maxDoc();
         return newParent;
       }
     }
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/ReaderUtil.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/ReaderUtil.java
index c44618e6..d3a7b1a0 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/ReaderUtil.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/ReaderUtil.java
@@ -101,20 +101,21 @@ public int run(int docBase) throws IOException {
       return run(docBase, topReader);
     }
 
-    private int run(int base, IndexReader reader) throws IOException {
+    private int run(final int base, final IndexReader reader) throws IOException {
       if (reader instanceof AtomicReader) {
         // atomic reader
         add(base, (AtomicReader) reader);
-        base += reader.maxDoc();
+        return base + reader.maxDoc();
       } else {
         assert reader instanceof CompositeReader : "must be a composite reader";
+        int newBase = base;
         IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();
         for (int i = 0; i < subReaders.length; i++) {
-          base = run(base, subReaders[i]);
+          newBase = run(newBase, subReaders[i]);
         }
+        assert newBase == base + reader.maxDoc();
+        return newBase;
       }
-
-      return base;
     }
 
     protected abstract void add(int base, AtomicReader r) throws IOException;
