diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/DirectoryReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/DirectoryReader.java
index 69ca67dc..605dab24 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/DirectoryReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/DirectoryReader.java
@@ -36,6 +36,7 @@
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.Lock;
 import org.apache.lucene.store.LockObtainFailedException;
+import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
 
 /** 
  * An IndexReader which reads indexes with multiple segments.
@@ -854,6 +855,12 @@ protected synchronized void doClose() throws IOException {
         if (ioe == null) ioe = e;
       }
     }
+
+    // NOTE: only needed in case someone had asked for
+    // FieldCache for top-level reader (which is generally
+    // not a good idea):
+    FieldCache.DEFAULT.purge(this);
+
     // throw the first exception
     if (ioe != null) throw ioe;
   }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/FilterIndexReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/FilterIndexReader.java
index 7cd1089b..561815be 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/FilterIndexReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/FilterIndexReader.java
@@ -20,6 +20,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.FieldSelector;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
 
 import java.io.IOException;
 import java.util.Collection;
@@ -241,7 +242,14 @@ public TermPositions termPositions() throws IOException {
   protected void doCommit(Map<String,String> commitUserData) throws IOException { in.commit(commitUserData); }
   
   @Override
-  protected void doClose() throws IOException { in.close(); }
+  protected void doClose() throws IOException {
+    in.close();
+
+    // NOTE: only needed in case someone had asked for
+    // FieldCache for top-level reader (which is generally
+    // not a good idea):
+    FieldCache.DEFAULT.purge(this);
+  }
 
 
   @Override
@@ -272,4 +280,12 @@ public boolean isOptimized() {
   public IndexReader[] getSequentialSubReaders() {
     return in.getSequentialSubReaders();
   }
+
+  /** If the subclass of FilteredIndexReader modifies the
+   *  contents of the FieldCache, you must override this
+   *  method to provide a different key */
+  @Override
+  public Object getFieldCacheKey() {
+    return in.getFieldCacheKey();
+  }
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java
index f13678c9..f6487bf5 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java
@@ -29,6 +29,7 @@
 import org.apache.lucene.index.DirectoryReader.MultiTermEnum;
 import org.apache.lucene.index.DirectoryReader.MultiTermPositions;
 import org.apache.lucene.search.Similarity;
+import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
 
 /** An IndexReader which reads multiple indexes, appending
  * their content. */
@@ -415,6 +416,11 @@ protected synchronized void doClose() throws IOException {
         subReaders[i].close();
       }
     }
+
+    // NOTE: only needed in case someone had asked for
+    // FieldCache for top-level reader (which is generally
+    // not a good idea):
+    FieldCache.DEFAULT.purge(this);
   }
   
   @Override
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/ParallelReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/ParallelReader.java
index 8727453b..b9e00e41 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/ParallelReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/ParallelReader.java
@@ -21,6 +21,7 @@
 import org.apache.lucene.document.FieldSelector;
 import org.apache.lucene.document.FieldSelectorResult;
 import org.apache.lucene.document.Fieldable;
+import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
 
 import java.io.IOException;
 import java.util.*;
@@ -470,6 +471,8 @@ protected synchronized void doClose() throws IOException {
         readers.get(i).close();
       }
     }
+
+    FieldCache.DEFAULT.purge(this);
   }
 
   @Override
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java
index 17ac9c1e..75da673d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentReader.java
@@ -38,6 +38,7 @@
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.util.BitVector;
 import org.apache.lucene.util.CloseableThreadLocal;
+import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
 
 /** @version $Id */
 /**
@@ -93,16 +94,19 @@
     final int readBufferSize;
     final int termsIndexDivisor;
 
+    private final SegmentReader origInstance;
+
     TermInfosReader tis;
     FieldsReader fieldsReaderOrig;
     TermVectorsReader termVectorsReaderOrig;
     CompoundFileReader cfsReader;
     CompoundFileReader storeCFSReader;
 
-    CoreReaders(Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {
+    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {
       segment = si.name;
       this.readBufferSize = readBufferSize;
       this.dir = dir;
+      this.origInstance = origInstance;
 
       boolean success = false;
 
@@ -233,6 +237,11 @@ synchronized void decRef() throws IOException {
         if (storeCFSReader != null) {
           storeCFSReader.close();
         }
+
+        // Force FieldCache to evict our entries at this point
+        if (freqStream != null) {
+          FieldCache.DEFAULT.purge(origInstance);
+        }
       }
     }
 
@@ -549,7 +558,7 @@ public static SegmentReader get(boolean readOnly,
     boolean success = false;
 
     try {
-      instance.core = new CoreReaders(dir, si, readBufferSize, termInfosIndexDivisor);
+      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);
       if (doOpenStores) {
         instance.core.openDocStores(si);
       }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCache.java b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCache.java
index 630340b5..4b2ece2b 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCache.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCache.java
@@ -593,6 +593,15 @@ public String toString() {
    */
   public abstract void purgeAllCaches();
 
+  /**
+   * Expert: drops all cache entries associated with this
+   * reader.  NOTE: this reader must precisely match the
+   * reader that the cache entry is keyed on. If you pass a
+   * top-level reader, it usually will have no effect as
+   * Lucene now caches at the segment reader level.
+   */
+  public abstract void purge(IndexReader r);
+
   /**
    * If non-null, FieldCacheImpl will warn whenever
    * entries are created that are not sane according to
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 56b92d77..b32dd67b 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -62,6 +62,12 @@ public void purgeAllCaches() {
     init();
   }
   
+  public void purge(IndexReader r) {
+    for(Cache c : caches.values()) {
+      c.purge(r);
+    }
+  }
+  
   public CacheEntry[] getCacheEntries() {
     List<CacheEntry> result = new ArrayList<CacheEntry>(17);
     for(final Class<?> cacheType: caches.keySet()) {
@@ -144,6 +150,14 @@ public void purgeAllCaches() {
     protected abstract Object createValue(IndexReader reader, Entry key)
         throws IOException;
 
+    /** Remove this reader from the cache, if present. */
+    public void purge(IndexReader r) {
+      Object readerKey = r.getFieldCacheKey();
+      synchronized(readerCache) {
+        readerCache.remove(readerKey);
+      }
+    }
+
     public Object get(IndexReader reader, Entry key) throws IOException {
       Map<Entry,Object> innerCache;
       Object value;
