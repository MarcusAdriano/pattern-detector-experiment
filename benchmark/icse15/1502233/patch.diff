diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java
index af16b663..7c855206 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java
@@ -224,7 +224,15 @@ public Object evaluate(String path, QName type) {
     }
   }
 
-  public Node getNode(String path, boolean errIfMissing) {
+  public Node getNode(String path, boolean errifMissing) {
+    return getNode(path, doc, errifMissing);
+  }
+
+  public Node getUnsubstitutedNode(String path, boolean errIfMissing) {
+    return getNode(path, origDoc, errIfMissing);
+  }
+
+  public Node getNode(String path, Document doc, boolean errIfMissing) {
    XPath xpath = xpathFactory.newXPath();
    Node nd = null;
    String xstr = normalize(path);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
index f7cedd79..c27c6750 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
@@ -95,6 +95,18 @@ public static ConfigSolr fromConfig(Config config) {
                     : new ConfigSolrXml(config, null);
   }
 
+
+  public PluginInfo getShardHandlerFactoryPluginInfo() {
+    Node node = config.getNode(getShardHandlerFactoryConfigPath(), false);
+    return (node == null) ? null : new PluginInfo(node, "shardHandlerFactory", false, true);
+  }
+
+  public Node getUnsubsititutedShardHandlerFactoryPluginNode() {
+    return config.getUnsubstitutedNode(getShardHandlerFactoryConfigPath(), false);
+  }
+
+  protected abstract String getShardHandlerFactoryConfigPath();
+
   // Ugly for now, but we'll at least be able to centralize all of the differences between 4x and 5x.
   public static enum CfgProp {
     SOLR_ADMINHANDLER,
@@ -112,10 +124,6 @@ public static ConfigSolr fromConfig(Config config) {
     SOLR_LOGGING_WATCHER_THRESHOLD,
     SOLR_MANAGEMENTPATH,
     SOLR_SHAREDLIB,
-    SOLR_SHARDHANDLERFACTORY_CLASS,
-    SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT,
-    SOLR_SHARDHANDLERFACTORY_NAME,
-    SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT,
     SOLR_SHARESCHEMA,
     SOLR_TRANSIENTCACHESIZE,
     SOLR_GENERICCORENODENAMES,
@@ -133,6 +141,7 @@ public static ConfigSolr fromConfig(Config config) {
 
   public ConfigSolr(Config config) {
     this.config = config;
+
   }
 
   // for extension & testing.
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXml.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXml.java
index 8199f75c..5687ce5c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXml.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXml.java
@@ -131,10 +131,6 @@ private void fillPropMap() {
     propMap.put(CfgProp.SOLR_LOGGING_ENABLED, doSub("solr/logging/str[@name='enabled']"));
     propMap.put(CfgProp.SOLR_LOGGING_WATCHER_SIZE, doSub("solr/logging/watcher/int[@name='size']"));
     propMap.put(CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, doSub("solr/logging/watcher/int[@name='threshold']"));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, doSub("solr/shardHandlerFactory/@class"));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, doSub("solr/shardHandlerFactory/@name"));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, doSub("solr/shardHandlerFactory/int[@name='connTimeout']"));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, doSub("solr/shardHandlerFactory/int[@name='socketTimeout']"));
   }
 
 
@@ -191,6 +187,11 @@ static Properties getCoreProperties(String instanceDir, CoreDescriptor dcore) {
     return p;
   }
 
+  @Override
+  protected String getShardHandlerFactoryConfigPath() {
+    return "solr/shardHandlerFactory";
+  }
+
   @Override
   public void substituteProperties() {
     config.substituteProperties();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXmlOld.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXmlOld.java
index fc9418a9..9e5855bb 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXmlOld.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolrXmlOld.java
@@ -48,6 +48,11 @@
 
   private NodeList coreNodes = null;
 
+  @Override
+  protected String getShardHandlerFactoryConfigPath() {
+    return "solr/cores/shardHandlerFactory";
+  }
+
   public ConfigSolrXmlOld(Config config) {
     super(config);
     try {
@@ -136,14 +141,6 @@ private void fillPropMap() {
         config.getVal("solr/cores/@transientCacheSize", false));
     propMap.put(CfgProp.SOLR_ZKCLIENTTIMEOUT,
         config.getVal("solr/cores/@zkClientTimeout", false));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS,
-        config.getVal("solr/shardHandlerFactory/@class", false));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_NAME,
-        config.getVal("solr/shardHandlerFactory/@name", false));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT,
-        config.getVal("solr/shardHandlerFactory/int[@name='connTimeout']", false));
-    propMap.put(CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT,
-        config.getVal("solr/shardHandlerFactory/int[@name='socketTimeout']", false));
     
     // These have no counterpart in 5.0, asking, for any of these in Solr 5.0
     // will result in an error being
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index 93f133b8..c05e7081 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -26,7 +26,6 @@
 import org.apache.solr.handler.admin.CollectionsHandler;
 import org.apache.solr.handler.admin.CoreAdminHandler;
 import org.apache.solr.handler.admin.InfoHandler;
-import org.apache.solr.handler.component.HttpShardHandlerFactory;
 import org.apache.solr.handler.component.ShardHandlerFactory;
 import org.apache.solr.logging.LogWatcher;
 import org.apache.solr.logging.jul.JulWatcher;
@@ -35,14 +34,11 @@
 import org.apache.solr.util.DefaultSolrThreadFactory;
 import org.apache.solr.util.FileUtils;
 import org.apache.solr.util.PropertiesUtil;
-import org.apache.solr.util.plugin.PluginInfoInitialized;
 import org.apache.zookeeper.KeeperException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.w3c.dom.Node;
 
 import javax.xml.xpath.XPathExpressionException;
-
 import java.io.File;
 import java.text.SimpleDateFormat;
 import java.util.Collection;
@@ -207,7 +203,7 @@ public void load()  {
       loader.reloadLuceneSPI();
     }
 
-    shardHandlerFactory = initShardHandler(cfg);
+    shardHandlerFactory = ShardHandlerFactory.newInstance(cfg.getShardHandlerFactoryPluginInfo(), loader);
 
     solrCores.allocateLazyCores(cfg, loader);
 
@@ -431,42 +427,6 @@ public SolrCore call() {
     }
   }
   
-  private ShardHandlerFactory initShardHandler(ConfigSolr configSolr) {
-    PluginInfo info = null;
-    Node shfn = configSolr.getConfig().getNode("solr/cores/shardHandlerFactory", false);
-
-    if (shfn != null) {
-      info = new PluginInfo(shfn, "shardHandlerFactory", false, true);
-    } else {
-      Map m = new HashMap();
-      m.put("class", HttpShardHandlerFactory.class.getName());
-      info = new PluginInfo("shardHandlerFactory", m, null, Collections.<PluginInfo>emptyList());
-    }
-
-    ShardHandlerFactory fac;
-    try {
-       fac = configSolr.getConfig().getResourceLoader().findClass(info.className, ShardHandlerFactory.class).newInstance();
-    } catch (Exception e) {
-      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
-                              "Error instantiating shardHandlerFactory class " + info.className);
-    }
-    if (fac instanceof PluginInfoInitialized) {
-      ((PluginInfoInitialized) fac).init(info);
-    }
-    return fac;
-  }
-
-  // To make this available to TestHarness.
-  protected void initShardHandler() {
-    if (cfg != null) {
-      initShardHandler(cfg);
-    } else {
-      // Cough! Hack! But tests run this way.
-      HttpShardHandlerFactory fac = new HttpShardHandlerFactory();
-      shardHandlerFactory = fac;
-    }
-  }
-
   private volatile boolean isShutDown = false;
   
   public boolean isShutDown() {
@@ -1110,6 +1070,7 @@ public void persistFile(File file) {
         cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null));
 
 
+    /*
     Map<String, String> shardHandlerAttrib = new HashMap<String, String>();
     addAttrib(shardHandlerAttrib, ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, "class",
         cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null));
@@ -1121,10 +1082,11 @@ public void persistFile(File file) {
         cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, null));
     addAttrib(shardHandlerProps, ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, "socketTimeout",
         cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, null));
+    */
 
     try {
       solrCores.persistCores(cfg.config.getOriginalConfig(), containerProperties, rootSolrAttribs,coresAttribs,
-          loggingAttribs, watcherAttribs, shardHandlerAttrib, shardHandlerProps, file, loader);
+          loggingAttribs, watcherAttribs, cfg.getUnsubsititutedShardHandlerFactoryPluginNode(), file, loader);
     } catch (XPathExpressionException e) {
       throw new SolrException(ErrorCode.SERVER_ERROR, null, e);
     }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java
index 5d397966..3248f858 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java
@@ -328,7 +328,7 @@ protected String getCoreToOrigName(SolrCore solrCore) {
   public void persistCores(Config cfg, Properties containerProperties,
       Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,
       Map<String, String> loggingAttribs, Map<String,String> watcherAttribs,
-      Map<String, String> shardHandlerAttrib, Map<String,String> shardHandlerProps,
+      Node shardHandlerNode,
       File file, SolrResourceLoader loader) throws XPathExpressionException {
 
 
@@ -361,8 +361,7 @@ public void persistCores(Config cfg, Properties containerProperties,
       solrXMLDef.coresAttribs = coresAttribs;
       solrXMLDef.loggingAttribs = loggingAttribs;
       solrXMLDef.watcherAttribs = watcherAttribs;
-      solrXMLDef.shardHandlerAttribs = shardHandlerAttrib;
-      solrXMLDef.shardHandlerProps = shardHandlerProps;
+      solrXMLDef.shardHandlerNode = shardHandlerNode;
       SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);
     }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java
index 4193da92..666fdc2c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java
@@ -21,13 +21,20 @@
 import org.apache.solr.common.util.XML;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.w3c.dom.Node;
 
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
+import java.io.StringWriter;
 import java.io.Writer;
 import java.nio.channels.FileChannel;
 import java.util.List;
@@ -81,22 +88,6 @@ void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {
       w.write(INDENT + "</logging>\n");
     }
 
-    // Output shard handler section if any
-    if (solrXMLDef.shardHandlerAttribs.size() > 0 || solrXMLDef.shardHandlerProps.size() > 0) {
-      w.write(INDENT + "<shardHandlerFactory");
-      for (Map.Entry<String, String> ent : solrXMLDef.shardHandlerAttribs.entrySet()) {
-        writeAttribute(w, ent.getKey(), ent.getValue());
-      }
-      w.write(">\n");
-      if (solrXMLDef.shardHandlerProps.size() > 0) {
-        for (Map.Entry<String, String> ent : solrXMLDef.shardHandlerProps.entrySet()) {
-          w.write(INDENT + INDENT + "<int name=\"" + ent.getKey() + "\"" + ">" + ent.getValue() + "</int>\n");
-        }
-      }
-      w.write(INDENT + "</shardHandlerFactory>\n");
-    }
-
-
     w.write(INDENT + "<cores");
     Map<String,String> coresAttribs = solrXMLDef.coresAttribs;
     Set<String> coreAttribKeys = coresAttribs.keySet();
@@ -110,10 +101,29 @@ void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {
       persist(w, coreDef);
     }
 
+    // Shard handler section
+    if (solrXMLDef.shardHandlerNode != null) {
+      w.write(nodeToXML(solrXMLDef.shardHandlerNode));
+    }
+
     w.write(INDENT + "</cores>\n");
     w.write("</solr>\n");
   }
   
+  private String nodeToXML(Node node) {
+    try {
+      TransformerFactory tfactory = TransformerFactory.newInstance();
+      Transformer tx = tfactory.newTransformer();
+      StringWriter buffer = new StringWriter();
+      tx.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
+      tx.transform(new DOMSource(node), new StreamResult(buffer));
+      return buffer.toString();
+    }
+    catch (Exception e) {
+      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error transforming XML: " + e.getMessage());
+    }
+  }
+  
   /** Writes the cores configuration node for a given core. */
   private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {
     w.write(INDENT + INDENT + "<core");
@@ -235,8 +245,7 @@ private static void fileCopy(File src, File dest) throws IOException {
     Map<String,String> coresAttribs;
     Map<String, String> loggingAttribs;
     Map<String, String> watcherAttribs;
-    Map<String, String> shardHandlerAttribs;
-    Map<String, String> shardHandlerProps;
+    Node shardHandlerNode;
     List<SolrCoreXMLDef> coresDefs;
   }
   
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java
index 07abdb6d..12710292 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java
@@ -17,9 +17,48 @@
  */
 
 
+import com.google.common.collect.ImmutableMap;
+import org.apache.solr.common.SolrException;
+import org.apache.solr.core.PluginInfo;
+import org.apache.solr.core.SolrResourceLoader;
+import org.apache.solr.util.plugin.PluginInfoInitialized;
+
+import java.util.Collections;
+import java.util.Locale;
+
 public abstract class ShardHandlerFactory {
 
   public abstract ShardHandler getShardHandler();
 
   public abstract void close();
+
+  /**
+   * Create a new ShardHandlerFactory instance
+   * @param info    a PluginInfo object defining which type to create.  If null,
+   *                the default {@link HttpShardHandlerFactory} will be used
+   * @param loader  a SolrResourceLoader used to find the ShardHandlerFactory classes
+   * @return a new, initialized ShardHandlerFactory instance
+   */
+  public static ShardHandlerFactory newInstance(PluginInfo info, SolrResourceLoader loader) {
+
+    if (info == null)
+      info = DEFAULT_SHARDHANDLER_INFO;
+
+    try {
+      ShardHandlerFactory shf = loader.findClass(info.className, ShardHandlerFactory.class).newInstance();
+      if (PluginInfoInitialized.class.isAssignableFrom(shf.getClass()))
+        PluginInfoInitialized.class.cast(shf).init(info);
+      return shf;
+    }
+    catch (Exception e) {
+      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
+          String.format(Locale.ROOT, "Error instantiating shardHandlerFactory class [%s]: %s",
+              info.className, e.getMessage()));
+    }
+
+  }
+
+  public static final PluginInfo DEFAULT_SHARDHANDLER_INFO =
+      new PluginInfo("shardHandlerFactory", ImmutableMap.of("class", HttpShardHandlerFactory.class.getName()),
+          null, Collections.<PluginInfo>emptyList());
 }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestShardHandlerFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestShardHandlerFactory.java
index 0f5fbca2..778b23b1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestShardHandlerFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestShardHandlerFactory.java
@@ -37,4 +37,14 @@ public void testXML() throws Exception {
     factory.close();
     cc.shutdown();
   }
+
+  public void testOldXML() throws Exception {
+    CoreContainer cc = CoreContainer.createAndLoad(TEST_HOME(), new File(TEST_HOME(), "solr-shardhandler-old.xml"));
+    ShardHandlerFactory factory = cc.getShardHandlerFactory();
+    assertTrue(factory instanceof MockShardHandlerFactory);
+    NamedList args = ((MockShardHandlerFactory)factory).args;
+    assertEquals("myMagicRequiredValue", args.get("myMagicRequiredParameter"));
+    factory.close();
+    cc.shutdown();
+  }
 }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer.java
index 2c4249e5..181bd475 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer.java
@@ -17,6 +17,23 @@
  * limitations under the License.
  */
 
+import org.apache.commons.io.FileUtils;
+import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util._TestUtil;
+import org.apache.solr.core.SolrXMLSerializer.SolrCoreXMLDef;
+import org.apache.solr.core.SolrXMLSerializer.SolrXMLDef;
+import org.junit.Test;
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.xpath.XPath;
+import javax.xml.xpath.XPathConstants;
+import javax.xml.xpath.XPathExpressionException;
+import javax.xml.xpath.XPathFactory;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -29,24 +46,6 @@
 import java.util.Map;
 import java.util.Properties;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.xpath.XPath;
-import javax.xml.xpath.XPathConstants;
-import javax.xml.xpath.XPathExpressionException;
-import javax.xml.xpath.XPathFactory;
-
-import org.apache.commons.io.FileUtils;
-import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util._TestUtil;
-import org.apache.solr.core.SolrXMLSerializer.SolrCoreXMLDef;
-import org.apache.solr.core.SolrXMLSerializer.SolrXMLDef;
-import org.junit.Test;
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.xml.sax.SAXException;
-
 
 public class TestSolrXMLSerializer extends LuceneTestCase {
   private static final XPathFactory xpathFactory = XPathFactory.newInstance();
@@ -144,8 +143,6 @@ private SolrXMLDef getTestSolrXMLDef(String defaultCoreNameKey,
     solrXMLDef.solrAttribs = rootSolrAttribs;
     solrXMLDef.coresAttribs = coresAttribs;
     solrXMLDef.loggingAttribs = new HashMap<String, String>();
-    solrXMLDef.shardHandlerProps = new HashMap<String, String>();
-    solrXMLDef.shardHandlerAttribs = new HashMap<String, String>();
     solrXMLDef.loggingAttribs = new HashMap<String, String>();
     solrXMLDef.watcherAttribs = new HashMap<String, String>();
     return solrXMLDef;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXml.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXml.java
index aa51aa89..be0f4d26 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXml.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXml.java
@@ -64,10 +64,6 @@ public void testAllInfoPresent() throws IOException, ParserConfigurationExceptio
       assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);
       assertEquals("Did not find expected value", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), "testManagementPath");
       assertEquals("Did not find expected value", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), "testSharedLib");
-      assertEquals("Did not find expected value", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), "testHttpShardHandlerFactory");
-      assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);
-      assertEquals("Did not find expected value", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), "testShardHandlerFactory");
-      assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);
       assertEquals("Did not find expected value", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), "testShareSchema");
       assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);
       assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);
@@ -109,8 +105,6 @@ public void testPropretySub() throws IOException, ParserConfigurationException,
       }
       assertEquals("Did not find expected value", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), "myCoreRoot");
       assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 8888);
-      assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 200);
-      assertEquals("Did not find expected value", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 220);
       assertEquals("Did not find expected value", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), "newShareSchema");
 
     } finally {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java
index 043a42ad..a4db81d9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java
@@ -601,10 +601,6 @@ private void gatherNodes(Node node, List<String> expressions, String path) {
           "  <logging class=\"${logclass:log4j.class}\" enabled=\"{logenable:true}\">\n" +
           "     <watcher size=\"{watchSize:13}\" threshold=\"${logThresh:54}\" />\n" +
           "  </logging>\n" +
-          "  <shardHandlerFactory name=\"${shhandler:shardHandlerFactory}\" class=\"${handlefac:HttpShardHandlerFactory}\">\n" +
-          "     <int name=\"socketTimeout\">${socketTimeout:120000}</int> \n" +
-          "     <int name=\"connTimeout\">${connTimeout:15000}</int> \n" +
-          "  </shardHandlerFactory> \n" +
           "  <cores adminPath=\"/admin/cores\" defaultCoreName=\"SystemVars1\" host=\"127.0.0.1\" \n" +
           "       hostPort=\"${hostPort:8983}\" hostContext=\"${hostContext:solr}\" \n" +
           "       zkClientTimeout=\"${solr.zkclienttimeout:30000}\" \n" +
@@ -625,6 +621,11 @@ private void gatherNodes(Node node, List<String> expressions, String path) {
           "      <property name=\"schema\" value=\"${schema:schema.xml}\"/>\n" +
           "      <property name=\"coreNodeName\" value=\"EricksCore\"/>\n" +
           "     </core>\n" +
+          "     <shardHandlerFactory name=\"${shhandler:shardHandlerFactory}\" class=\"${handlefac:HttpShardHandlerFactory}\">\n" +
+          "         <int name=\"socketTimeout\">${socketTimeout:120000}</int> \n" +
+          "         <int name=\"connTimeout\">${connTimeout:15000}</int> \n" +
+          "         <str name=\"arbitraryName\">${arbitrarySysValue:foobar}</str>\n" +
+          "     </shardHandlerFactory> \n" +
           "   </cores>\n" +
           "</solr>";
 
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
index 2284e89d..6ede9454 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
@@ -76,7 +76,6 @@
 import java.util.logging.ConsoleHandler;
 import java.util.logging.Handler;
 import java.util.logging.Level;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import static com.google.common.base.Preconditions.checkNotNull;
