diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/client/Load.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/client/Load.java
index c820fe4f..88bea546 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/client/Load.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/client/Load.java
@@ -84,6 +84,17 @@
      */
     public void setupLoad(Connection conn, short scale) throws Exception;
 
+    /**
+     * Set the number of total threads the loader is allowed to use
+     * to load data.
+     * If an implementation does not support multiple threads then
+     * the passed in value will be ignored.
+     * 
+     * @param threadCount Number of threads to use if loading supports
+     * multiple threading.
+     */
+    public void setThreadCount(int threadCount);
+
     /**
      * Follow the initial database population requirements in Section 4.3.3 
      * and populate all the required tables.
@@ -93,6 +104,6 @@
      * 
      * @throws SQLException
      */
-    public void populateAllTables() throws SQLException;
+    public void populateAllTables() throws Exception;
 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/load/SimpleInsert.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/load/SimpleInsert.java
index a8c81d16..35bf7976 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/load/SimpleInsert.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/load/SimpleInsert.java
@@ -43,7 +43,7 @@
     /**
      * Seed value for random number generator.
      */
-    private long seed = System.currentTimeMillis();
+    long seed = System.currentTimeMillis();
 
     /**
      * Utility to generate random data per the TPC-C requirements
@@ -62,9 +62,7 @@
      */
     public void setupLoad(Connection conn, short scale) throws SQLException {
 
-        this.conn = conn;
-        conn.setAutoCommit(false);
-        conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
+        setupConnection(conn, scale);
 
         Statement s = conn.createStatement();
         try {
@@ -81,28 +79,67 @@ public void setupLoad(Connection conn, short scale) throws SQLException {
         // Section 2.1.6.1 of TPC-C spec
         int loadRandomFactor = random.randomInt(0, 255);
         s.execute("INSERT INTO C VALUES(" + loadRandomFactor + ", -1, -1, -1)");
-        random = new OERandom(loadRandomFactor, -1, -1, seed);
+        s.close();
         conn.commit();
 
+        setRandomGenerator();
+    }
+    
+    /**
+     * Set the connection up to the intended state.
+     * Intended for use by sub-classes.
+     */
+    void setupConnection(Connection conn, short scale) throws SQLException
+    {
+        this.conn = conn;
+        conn.setAutoCommit(false);
+        conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
         this.scale = scale;
     }
 
+    /**
+     * Setup the random number generator to be used for the load.
+     * @throws SQLException
+     */
+    void setRandomGenerator() throws SQLException
+    {
+        Statement s = conn.createStatement();
+        ResultSet rs = s.executeQuery("SELECT CLOAD FROM C");
+        rs.next();
+        int loadRandomFactor = rs.getInt(1);
+        rs.close();
+        random = new OERandom(loadRandomFactor, -1, -1, seed);
+        s.close();
+        conn.commit();
+    }
+
     /**
      * Follow the initial database population requirements in Section 4.3.3 and
      * populate all the required tables.
      * 
      * @throws SQLException
      */
-    public void populateAllTables() throws SQLException {
+    public void populateAllTables() throws Exception {
         // load item table
         itemTable(1, Load.ITEM_COUNT);
 
-        // for each row in warehouse table, load the stock,
-        // district table. For each row in district table, load
-        // the customer table. for each row in customer table, load
-        // the history, and order table.
-
         for (short w = 1; w <= scale; w++) {
+            populateForOneWarehouse(w);
+        }
+
+    }
+    
+    /**
+     * Populate all the tables needed for a specific warehouse.
+     * for each row in warehouse table, load the stock,
+     * district table. For each row in district table, load
+     * the customer table. for each row in customer table, load
+     * the customer table. for each row in customer table, load
+     * @param w Warehouse to be populated.
+     * @throws SQLException
+     */
+    void populateForOneWarehouse(short w) throws SQLException
+    {
             warehouseTable(w);
             // for each warehouse: load the stock table
             stockTable(1, Load.STOCK_COUNT_W, w);
@@ -113,8 +150,6 @@ public void populateAllTables() throws SQLException {
             }
         }
 
-    }
-
     /**
      * Populate the ITEM table. See population requirements in section 4.3.3.1
      * <BR>
@@ -412,4 +447,10 @@ public void setSeed(long seed) {
         this.seed = seed;
     }
 
+    /**
+     * Ignore, this is a single threaded load.
+     */
+    public void setThreadCount(int threadCount) {
+    }
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Populate.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Populate.java
index bd3f05fc..458e96c5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Populate.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Populate.java
@@ -65,7 +65,7 @@
     /**
      * Warehouse scale factor
      */
-    private static short scale = 1;
+    static short scale = 1;
 
     /**
      * flag to indicate if we should create constraints before loading data
@@ -81,7 +81,7 @@
     /**
      * Load implementation used to populate the database
      */
-    private Load loader;
+    Load loader;
 
     /**
      * Create a test case with the given name.
@@ -126,7 +126,7 @@ public static void main(String[] args) throws Exception
      * parse arguments.
      * @param args arguments to parse
      */
-    private static void parseArgs(String[] args) {
+    static void parseArgs(String[] args) {
         for (int i = 0; i < args.length; i++) {
             String arg = args[i];
             if (arg.equals("-scale")) {
@@ -162,7 +162,11 @@ private static void printUsage() {
      * 
      * @return the tests to run
      */
-    public static Test suite() throws Exception {
+    public static Test suite() {
+        return loaderSuite(Populate.class);
+    }
+    
+    static Test loaderSuite(Class loader) {
         TestSuite suite = new TestSuite("Order Entry");
 
         // Create Schema
@@ -171,7 +175,7 @@ public static Test suite() throws Exception {
             Schema.addConstraints(suite);
         
         // this will populate db
-        suite.addTest(new Populate("testLoad"));
+        suite.addTestSuite(loader);
 
         if (!createConstraintsBeforeLoad)
             Schema.addConstraints(suite);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Schema.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Schema.java
index 0826a270..68b41c95 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Schema.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Schema.java
@@ -34,6 +34,7 @@
  */
 public class Schema extends JDBCPerfTestCase {
 
+    private String scriptBase;
 
     /**
      * Create a test case with the given name.
@@ -42,7 +43,8 @@
      *            of the test case.
      */
     public Schema(String name) {
-        super(name);
+        super("testScript");
+        scriptBase = name;
     }
 
     /**
@@ -81,11 +83,15 @@ static void addConstraints(TestSuite suite) {
     /**
      * Run a Order Entry script.
      */
-    public void runTest() throws UnsupportedEncodingException,
+    public void testScript() throws UnsupportedEncodingException,
     SQLException, PrivilegedActionException, IOException {
 
-        String script = "org/apache/derbyTesting/system/oe/schema/" + getName();
+        String script = "org/apache/derbyTesting/system/oe/schema/" + scriptBase;
         int errorCount = runScript(script, "US-ASCII");
         assertEquals("Errors in script ", 0, errorCount);
     }
+    
+    public String getName() {
+        return scriptBase;
+    }
 }
