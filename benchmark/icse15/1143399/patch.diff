diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java
index 3e6a37ba..8f6e1bc5 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java
@@ -78,7 +78,20 @@ public void assureSufficientLiveNodes() throws UnavailableException
                 localEndpoints++;
         }
         
-        if(localEndpoints < blockfor)
+        if (localEndpoints < blockfor)
+        {
+            if (logger.isDebugEnabled())
+            {
+                StringBuilder builder = new StringBuilder("Local replicas [");
+                for (InetAddress endpoint : endpoints)
+                {
+                    if (localdc.equals(snitch.getDatacenter(endpoint)))
+                        builder.append(endpoint).append(", ");
+                }
+                builder.append("] are insufficient to satisfy LOCAL_QUORUM requirement of ").append(blockfor).append(" live nodes");
+            }
+
             throw new UnavailableException();
     }
+    }
 }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ReadCallback.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ReadCallback.java
index a3e929c0..da8b286e 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ReadCallback.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ReadCallback.java
@@ -204,8 +204,12 @@ public int determineBlockFor(ConsistencyLevel consistencyLevel, String table)
     public void assureSufficientLiveNodes() throws UnavailableException
     {
         if (endpoints.size() < blockfor)
+        {
+            logger.debug("Live nodes {} do not satisfy ConsistencyLevel ({} required)",
+                         StringUtils.join(endpoints, ", "), blockfor);
             throw new UnavailableException();
     }
+    }
 
     public boolean isLatencyForSnitch()
     {
