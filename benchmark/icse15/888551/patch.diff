diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
index 93d1d997..63659465 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
@@ -34,6 +34,8 @@
  */
 public class Range implements Comparable<Range>, Serializable
 {
+    public static final long serialVersionUID = 1L;
+    
     private static ICompactSerializer<Range> serializer_;
     static
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index d8feb5b5..e6b77cb0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -557,7 +557,6 @@ public Differencer(CFTuple cf, InetAddress local, InetAddress remote, MerkleTree
         public void run()
         {
             StorageService ss = StorageService.instance();
-            Token minimum = ss.getPartitioner().getMinimumToken();
 
             // restore partitioners (in case we were serialized)
             if (ltree.partitioner() == null)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index f5703d03..323f8a34 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -548,7 +548,6 @@ else if (consistency_level == ConsistencyLevel.ALL)
                 throw new UnavailableException();
 
             // to make comparing the results from each node easy, we restrict each command to the data in the primary range for this iteration
-            IPartitioner<?> p = StorageService.getPartitioner();
             DecoratedKey startKey;
             DecoratedKey finishKey;
             if (primaryRange.left().equals(primaryRange.right()))
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java
index 0e264e2c..a79419fe 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java
@@ -20,7 +20,6 @@
 
 import java.io.Serializable;
 import java.util.*;
-import java.math.BigInteger;
 
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Iterators;
@@ -165,7 +164,6 @@ public void partitioner(IPartitioner partitioner)
     /**
      * @param ltree First tree.
      * @param rtree Second tree.
-     * @param active Only ranges that intersect this range will be returned.
      * @return A list of the largest contiguous ranges where the given trees disagree.
      */
     public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree)
@@ -273,11 +271,10 @@ TreeRange getHelper(Hashable hashable, Token pleft, Token pright, byte depth, To
      */
     public void invalidate(Token t)
     {
-        Token mintoken = partitioner.getMinimumToken();
-        invalidateHelper(root, mintoken, mintoken, (byte)0, t);
+        invalidateHelper(root, partitioner.getMinimumToken(), t);
     }
 
-    public void invalidateHelper(Hashable hashable, Token pleft, Token pright, byte depth, Token t)
+    private void invalidateHelper(Hashable hashable, Token pleft, Token t)
     {
         hashable.hash(null);
         if (hashable instanceof Leaf)
@@ -287,10 +284,10 @@ public void invalidateHelper(Hashable hashable, Token pleft, Token pright, byte
         Inner node = (Inner)hashable;
         if (Range.contains(pleft, node.token, t))
             // left child contains token
-            invalidateHelper(node.lchild, pleft, node.token, inc(depth), t);
+            invalidateHelper(node.lchild, pleft, t);
         else
             // right child contains token
-            invalidateHelper(node.rchild, node.token, pright, inc(depth), t);
+            invalidateHelper(node.rchild, node.token, t);
     }
 
     /**
@@ -319,7 +316,7 @@ public void invalidateHelper(Hashable hashable, Token pleft, Token pright, byte
     /**
      * @throws StopRecursion If no match could be found for the range.
      */
-    byte[] hashHelper(Hashable hashable, Range active, Range range) throws StopRecursion
+    private byte[] hashHelper(Hashable hashable, Range active, Range range) throws StopRecursion
     {
         if (hashable instanceof Leaf)
         {
@@ -382,7 +379,7 @@ public boolean split(Token t)
         return true;
     }
 
-    Hashable splitHelper(Hashable hashable, Token pleft, Token pright, byte depth, Token t) throws StopRecursion.TooDeep
+    private Hashable splitHelper(Hashable hashable, Token pleft, Token pright, byte depth, Token t) throws StopRecursion.TooDeep
     {
         if (depth >= hashdepth)
             throw new StopRecursion.TooDeep();
@@ -415,11 +412,10 @@ Hashable splitHelper(Hashable hashable, Token pleft, Token pright, byte depth, T
      */
     public void compact(Token t)
     {
-        Token mintoken = partitioner.getMinimumToken();
-        root = compactHelper(root, mintoken, mintoken, t);
+        root = compactHelper(root, t);
     }
 
-    Hashable compactHelper(Hashable hashable, Token pleft, Token pright, Token t)
+    private Hashable compactHelper(Hashable hashable, Token t)
     {
         // we reached a Leaf without finding an Inner to compact
         assert !(hashable instanceof Leaf);
@@ -438,10 +434,10 @@ Hashable compactHelper(Hashable hashable, Token pleft, Token pright, Token t)
         }
         else if (comp < 0)
             // recurse to the left
-            node.lchild(compactHelper(node.lchild(), pleft, node.token, t));
+            node.lchild(compactHelper(node.lchild(), t));
         else
             // recurse to the right
-            node.rchild(compactHelper(node.rchild(), node.token, pright, t));
+            node.rchild(compactHelper(node.rchild(), t));
         return node;
     }
 
@@ -476,6 +472,7 @@ public String toString()
      */
     public static class TreeRange extends Range
     {
+        public static final long serialVersionUID = 1L;
         private final MerkleTree tree;
         public final byte depth;
         public final Hashable hashable;
@@ -563,7 +560,7 @@ public void validate(PeekingIterator<RowHash> entries)
                 }
 
                 // hash relevant values from the iterator, and add to the context
-                return consume(left, right, depth, entries);
+                return consume(left, right, entries);
             }
             else
             {
@@ -577,7 +574,7 @@ public void validate(PeekingIterator<RowHash> entries)
          * Consumes and sequentially hashes values from the iterator that fall into the active
          * range. Should be called with an iterator that contains at least one matching entry.
          */
-        private byte[] consume(Token left, Token right, byte depth, PeekingIterator<RowHash> entries)
+        private byte[] consume(Token left, Token right, PeekingIterator<RowHash> entries)
         {
             byte[] sequentialHash = entries.next().hash;
             while (entries.hasNext() && Range.contains(left, right, entries.peek().token))
@@ -661,6 +658,7 @@ public TreeRange computeNext()
      */
     static class Inner extends Hashable
     {
+        public static final long serialVersionUID = 1L;
         public final Token token;
         private Hashable lchild;
         private Hashable rchild;
@@ -745,6 +743,7 @@ public String toString()
      */
     static class Leaf extends Hashable
     {
+        public static final long serialVersionUID = 1L;
         /**
          * Constructs a null hash.
          */
