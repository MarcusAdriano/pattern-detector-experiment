diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
index 65f165d9..e5ade548 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
@@ -253,14 +253,6 @@
      */
     public String system_drop_column_family(String column_family) throws InvalidRequestException, TException;
 
-    /**
-     * renames a column family. returns the new schema id.
-     * 
-     * @param old_name
-     * @param new_name
-     */
-    public String system_rename_column_family(String old_name, String new_name) throws InvalidRequestException, TException;
-
     /**
      * adds a keyspace and any column families that are part of it. returns the new schema id.
      * 
@@ -275,14 +267,6 @@
      */
     public String system_drop_keyspace(String keyspace) throws InvalidRequestException, TException;
 
-    /**
-     * renames a keyspace. returns the new schema id.
-     * 
-     * @param old_name
-     * @param new_name
-     */
-    public String system_rename_keyspace(String old_name, String new_name) throws InvalidRequestException, TException;
-
     /**
      * updates properties of a keyspace. returns the new schema id.
      * 
@@ -349,14 +333,10 @@
 
     public void system_drop_column_family(String column_family, AsyncMethodCallback<AsyncClient.system_drop_column_family_call> resultHandler) throws TException;
 
-    public void system_rename_column_family(String old_name, String new_name, AsyncMethodCallback<AsyncClient.system_rename_column_family_call> resultHandler) throws TException;
-
     public void system_add_keyspace(KsDef ks_def, AsyncMethodCallback<AsyncClient.system_add_keyspace_call> resultHandler) throws TException;
 
     public void system_drop_keyspace(String keyspace, AsyncMethodCallback<AsyncClient.system_drop_keyspace_call> resultHandler) throws TException;
 
-    public void system_rename_keyspace(String old_name, String new_name, AsyncMethodCallback<AsyncClient.system_rename_keyspace_call> resultHandler) throws TException;
-
     public void system_update_keyspace(KsDef ks_def, AsyncMethodCallback<AsyncClient.system_update_keyspace_call> resultHandler) throws TException;
 
     public void system_update_column_family(CfDef cf_def, AsyncMethodCallback<AsyncClient.system_update_column_family_call> resultHandler) throws TException;
@@ -1399,46 +1379,6 @@ public String recv_system_drop_column_family() throws InvalidRequestException, T
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "system_drop_column_family failed: unknown result");
     }
 
-    public String system_rename_column_family(String old_name, String new_name) throws InvalidRequestException, TException
-    {
-      send_system_rename_column_family(old_name, new_name);
-      return recv_system_rename_column_family();
-    }
-
-    public void send_system_rename_column_family(String old_name, String new_name) throws TException
-    {
-      oprot_.writeMessageBegin(new TMessage("system_rename_column_family", TMessageType.CALL, ++seqid_));
-      system_rename_column_family_args args = new system_rename_column_family_args();
-      args.setOld_name(old_name);
-      args.setNew_name(new_name);
-      args.write(oprot_);
-      oprot_.writeMessageEnd();
-      oprot_.getTransport().flush();
-    }
-
-    public String recv_system_rename_column_family() throws InvalidRequestException, TException
-    {
-      TMessage msg = iprot_.readMessageBegin();
-      if (msg.type == TMessageType.EXCEPTION) {
-        TApplicationException x = TApplicationException.read(iprot_);
-        iprot_.readMessageEnd();
-        throw x;
-      }
-      if (msg.seqid != seqid_) {
-        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "system_rename_column_family failed: out of sequence response");
-      }
-      system_rename_column_family_result result = new system_rename_column_family_result();
-      result.read(iprot_);
-      iprot_.readMessageEnd();
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      throw new TApplicationException(TApplicationException.MISSING_RESULT, "system_rename_column_family failed: unknown result");
-    }
-
     public String system_add_keyspace(KsDef ks_def) throws InvalidRequestException, TException
     {
       send_system_add_keyspace(ks_def);
@@ -1517,46 +1457,6 @@ public String recv_system_drop_keyspace() throws InvalidRequestException, TExcep
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "system_drop_keyspace failed: unknown result");
     }
 
-    public String system_rename_keyspace(String old_name, String new_name) throws InvalidRequestException, TException
-    {
-      send_system_rename_keyspace(old_name, new_name);
-      return recv_system_rename_keyspace();
-    }
-
-    public void send_system_rename_keyspace(String old_name, String new_name) throws TException
-    {
-      oprot_.writeMessageBegin(new TMessage("system_rename_keyspace", TMessageType.CALL, ++seqid_));
-      system_rename_keyspace_args args = new system_rename_keyspace_args();
-      args.setOld_name(old_name);
-      args.setNew_name(new_name);
-      args.write(oprot_);
-      oprot_.writeMessageEnd();
-      oprot_.getTransport().flush();
-    }
-
-    public String recv_system_rename_keyspace() throws InvalidRequestException, TException
-    {
-      TMessage msg = iprot_.readMessageBegin();
-      if (msg.type == TMessageType.EXCEPTION) {
-        TApplicationException x = TApplicationException.read(iprot_);
-        iprot_.readMessageEnd();
-        throw x;
-      }
-      if (msg.seqid != seqid_) {
-        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "system_rename_keyspace failed: out of sequence response");
-      }
-      system_rename_keyspace_result result = new system_rename_keyspace_result();
-      result.read(iprot_);
-      iprot_.readMessageEnd();
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      throw new TApplicationException(TApplicationException.MISSING_RESULT, "system_rename_keyspace failed: unknown result");
-    }
-
     public String system_update_keyspace(KsDef ks_def) throws InvalidRequestException, TException
     {
       send_system_update_keyspace(ks_def);
@@ -2469,40 +2369,6 @@ public String getResult() throws InvalidRequestException, TException {
       }
     }
 
-    public void system_rename_column_family(String old_name, String new_name, AsyncMethodCallback<system_rename_column_family_call> resultHandler) throws TException {
-      checkReady();
-      system_rename_column_family_call method_call = new system_rename_column_family_call(old_name, new_name, resultHandler, this, protocolFactory, transport);
-      manager.call(method_call);
-    }
-
-    public static class system_rename_column_family_call extends TAsyncMethodCall {
-      private String old_name;
-      private String new_name;
-      public system_rename_column_family_call(String old_name, String new_name, AsyncMethodCallback<system_rename_column_family_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.old_name = old_name;
-        this.new_name = new_name;
-      }
-
-      public void write_args(TProtocol prot) throws TException {
-        prot.writeMessageBegin(new TMessage("system_rename_column_family", TMessageType.CALL, 0));
-        system_rename_column_family_args args = new system_rename_column_family_args();
-        args.setOld_name(old_name);
-        args.setNew_name(new_name);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public String getResult() throws InvalidRequestException, TException {
-        if (getState() != State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
-        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_system_rename_column_family();
-      }
-    }
-
     public void system_add_keyspace(KsDef ks_def, AsyncMethodCallback<system_add_keyspace_call> resultHandler) throws TException {
       checkReady();
       system_add_keyspace_call method_call = new system_add_keyspace_call(ks_def, resultHandler, this, protocolFactory, transport);
@@ -2565,40 +2431,6 @@ public String getResult() throws InvalidRequestException, TException {
       }
     }
 
-    public void system_rename_keyspace(String old_name, String new_name, AsyncMethodCallback<system_rename_keyspace_call> resultHandler) throws TException {
-      checkReady();
-      system_rename_keyspace_call method_call = new system_rename_keyspace_call(old_name, new_name, resultHandler, this, protocolFactory, transport);
-      manager.call(method_call);
-    }
-
-    public static class system_rename_keyspace_call extends TAsyncMethodCall {
-      private String old_name;
-      private String new_name;
-      public system_rename_keyspace_call(String old_name, String new_name, AsyncMethodCallback<system_rename_keyspace_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.old_name = old_name;
-        this.new_name = new_name;
-      }
-
-      public void write_args(TProtocol prot) throws TException {
-        prot.writeMessageBegin(new TMessage("system_rename_keyspace", TMessageType.CALL, 0));
-        system_rename_keyspace_args args = new system_rename_keyspace_args();
-        args.setOld_name(old_name);
-        args.setNew_name(new_name);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public String getResult() throws InvalidRequestException, TException {
-        if (getState() != State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
-        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_system_rename_keyspace();
-      }
-    }
-
     public void system_update_keyspace(KsDef ks_def, AsyncMethodCallback<system_update_keyspace_call> resultHandler) throws TException {
       checkReady();
       system_update_keyspace_call method_call = new system_update_keyspace_call(ks_def, resultHandler, this, protocolFactory, transport);
@@ -2692,10 +2524,8 @@ public Processor(Iface iface)
       processMap_.put("describe_splits", new describe_splits());
       processMap_.put("system_add_column_family", new system_add_column_family());
       processMap_.put("system_drop_column_family", new system_drop_column_family());
-      processMap_.put("system_rename_column_family", new system_rename_column_family());
       processMap_.put("system_add_keyspace", new system_add_keyspace());
       processMap_.put("system_drop_keyspace", new system_drop_keyspace());
-      processMap_.put("system_rename_keyspace", new system_rename_keyspace());
       processMap_.put("system_update_keyspace", new system_update_keyspace());
       processMap_.put("system_update_column_family", new system_update_column_family());
     }
@@ -3626,44 +3456,6 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
 
     }
 
-    private class system_rename_column_family implements ProcessFunction {
-      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
-      {
-        system_rename_column_family_args args = new system_rename_column_family_args();
-        try {
-          args.read(iprot);
-        } catch (TProtocolException e) {
-          iprot.readMessageEnd();
-          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
-          oprot.writeMessageBegin(new TMessage("system_rename_column_family", TMessageType.EXCEPTION, seqid));
-          x.write(oprot);
-          oprot.writeMessageEnd();
-          oprot.getTransport().flush();
-          return;
-        }
-        iprot.readMessageEnd();
-        system_rename_column_family_result result = new system_rename_column_family_result();
-        try {
-          result.success = iface_.system_rename_column_family(args.old_name, args.new_name);
-        } catch (InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (Throwable th) {
-          LOGGER.error("Internal error processing system_rename_column_family", th);
-          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing system_rename_column_family");
-          oprot.writeMessageBegin(new TMessage("system_rename_column_family", TMessageType.EXCEPTION, seqid));
-          x.write(oprot);
-          oprot.writeMessageEnd();
-          oprot.getTransport().flush();
-          return;
-        }
-        oprot.writeMessageBegin(new TMessage("system_rename_column_family", TMessageType.REPLY, seqid));
-        result.write(oprot);
-        oprot.writeMessageEnd();
-        oprot.getTransport().flush();
-      }
-
-    }
-
     private class system_add_keyspace implements ProcessFunction {
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
@@ -3740,44 +3532,6 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
 
     }
 
-    private class system_rename_keyspace implements ProcessFunction {
-      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
-      {
-        system_rename_keyspace_args args = new system_rename_keyspace_args();
-        try {
-          args.read(iprot);
-        } catch (TProtocolException e) {
-          iprot.readMessageEnd();
-          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
-          oprot.writeMessageBegin(new TMessage("system_rename_keyspace", TMessageType.EXCEPTION, seqid));
-          x.write(oprot);
-          oprot.writeMessageEnd();
-          oprot.getTransport().flush();
-          return;
-        }
-        iprot.readMessageEnd();
-        system_rename_keyspace_result result = new system_rename_keyspace_result();
-        try {
-          result.success = iface_.system_rename_keyspace(args.old_name, args.new_name);
-        } catch (InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (Throwable th) {
-          LOGGER.error("Internal error processing system_rename_keyspace", th);
-          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing system_rename_keyspace");
-          oprot.writeMessageBegin(new TMessage("system_rename_keyspace", TMessageType.EXCEPTION, seqid));
-          x.write(oprot);
-          oprot.writeMessageEnd();
-          oprot.getTransport().flush();
-          return;
-        }
-        oprot.writeMessageBegin(new TMessage("system_rename_keyspace", TMessageType.REPLY, seqid));
-        result.write(oprot);
-        oprot.writeMessageEnd();
-        oprot.getTransport().flush();
-      }
-
-    }
-
     private class system_update_keyspace implements ProcessFunction {
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
@@ -24336,19 +24090,16 @@ public void validate() throws TException {
 
   }
 
-  public static class system_rename_column_family_args implements TBase<system_rename_column_family_args, system_rename_column_family_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_rename_column_family_args");
+  public static class system_add_keyspace_args implements TBase<system_add_keyspace_args, system_add_keyspace_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("system_add_keyspace_args");
 
-    private static final TField OLD_NAME_FIELD_DESC = new TField("old_name", TType.STRING, (short)1);
-    private static final TField NEW_NAME_FIELD_DESC = new TField("new_name", TType.STRING, (short)2);
+    private static final TField KS_DEF_FIELD_DESC = new TField("ks_def", TType.STRUCT, (short)1);
 
-    public String old_name;
-    public String new_name;
+    public KsDef ks_def;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      OLD_NAME((short)1, "old_name"),
-      NEW_NAME((short)2, "new_name");
+      KS_DEF((short)1, "ks_def");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -24363,10 +24114,8 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // OLD_NAME
-            return OLD_NAME;
-          case 2: // NEW_NAME
-            return NEW_NAME;
+          case 1: // KS_DEF
+            return KS_DEF;
           default:
             return null;
         }
@@ -24411,110 +24160,71 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.OLD_NAME, new FieldMetaData("old_name", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.NEW_NAME, new FieldMetaData("new_name", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.KS_DEF, new FieldMetaData("ks_def", TFieldRequirementType.REQUIRED, 
+          new StructMetaData(TType.STRUCT, KsDef.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_rename_column_family_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(system_add_keyspace_args.class, metaDataMap);
     }
 
-    public system_rename_column_family_args() {
+    public system_add_keyspace_args() {
     }
 
-    public system_rename_column_family_args(
-      String old_name,
-      String new_name)
+    public system_add_keyspace_args(
+      KsDef ks_def)
     {
       this();
-      this.old_name = old_name;
-      this.new_name = new_name;
+      this.ks_def = ks_def;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public system_rename_column_family_args(system_rename_column_family_args other) {
-      if (other.isSetOld_name()) {
-        this.old_name = other.old_name;
-      }
-      if (other.isSetNew_name()) {
-        this.new_name = other.new_name;
+    public system_add_keyspace_args(system_add_keyspace_args other) {
+      if (other.isSetKs_def()) {
+        this.ks_def = new KsDef(other.ks_def);
       }
     }
 
-    public system_rename_column_family_args deepCopy() {
-      return new system_rename_column_family_args(this);
+    public system_add_keyspace_args deepCopy() {
+      return new system_add_keyspace_args(this);
     }
 
     @Deprecated
-    public system_rename_column_family_args clone() {
-      return new system_rename_column_family_args(this);
-    }
-
-    public String getOld_name() {
-      return this.old_name;
-    }
-
-    public system_rename_column_family_args setOld_name(String old_name) {
-      this.old_name = old_name;
-      return this;
-    }
-
-    public void unsetOld_name() {
-      this.old_name = null;
-    }
-
-    /** Returns true if field old_name is set (has been asigned a value) and false otherwise */
-    public boolean isSetOld_name() {
-      return this.old_name != null;
-    }
-
-    public void setOld_nameIsSet(boolean value) {
-      if (!value) {
-        this.old_name = null;
-      }
+    public system_add_keyspace_args clone() {
+      return new system_add_keyspace_args(this);
     }
 
-    public String getNew_name() {
-      return this.new_name;
+    public KsDef getKs_def() {
+      return this.ks_def;
     }
 
-    public system_rename_column_family_args setNew_name(String new_name) {
-      this.new_name = new_name;
+    public system_add_keyspace_args setKs_def(KsDef ks_def) {
+      this.ks_def = ks_def;
       return this;
     }
 
-    public void unsetNew_name() {
-      this.new_name = null;
+    public void unsetKs_def() {
+      this.ks_def = null;
     }
 
-    /** Returns true if field new_name is set (has been asigned a value) and false otherwise */
-    public boolean isSetNew_name() {
-      return this.new_name != null;
+    /** Returns true if field ks_def is set (has been asigned a value) and false otherwise */
+    public boolean isSetKs_def() {
+      return this.ks_def != null;
     }
 
-    public void setNew_nameIsSet(boolean value) {
+    public void setKs_defIsSet(boolean value) {
       if (!value) {
-        this.new_name = null;
+        this.ks_def = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case OLD_NAME:
-        if (value == null) {
-          unsetOld_name();
-        } else {
-          setOld_name((String)value);
-        }
-        break;
-
-      case NEW_NAME:
+      case KS_DEF:
         if (value == null) {
-          unsetNew_name();
+          unsetKs_def();
         } else {
-          setNew_name((String)value);
+          setKs_def((KsDef)value);
         }
         break;
 
@@ -24527,11 +24237,8 @@ public void setFieldValue(int fieldID, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case OLD_NAME:
-        return getOld_name();
-
-      case NEW_NAME:
-        return getNew_name();
+      case KS_DEF:
+        return getKs_def();
 
       }
       throw new IllegalStateException();
@@ -24544,10 +24251,8 @@ public Object getFieldValue(int fieldId) {
     /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
     public boolean isSet(_Fields field) {
       switch (field) {
-      case OLD_NAME:
-        return isSetOld_name();
-      case NEW_NAME:
-        return isSetNew_name();
+      case KS_DEF:
+        return isSetKs_def();
       }
       throw new IllegalStateException();
     }
@@ -24560,30 +24265,21 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof system_rename_column_family_args)
-        return this.equals((system_rename_column_family_args)that);
+      if (that instanceof system_add_keyspace_args)
+        return this.equals((system_add_keyspace_args)that);
       return false;
     }
 
-    public boolean equals(system_rename_column_family_args that) {
+    public boolean equals(system_add_keyspace_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_old_name = true && this.isSetOld_name();
-      boolean that_present_old_name = true && that.isSetOld_name();
-      if (this_present_old_name || that_present_old_name) {
-        if (!(this_present_old_name && that_present_old_name))
-          return false;
-        if (!this.old_name.equals(that.old_name))
-          return false;
-      }
-
-      boolean this_present_new_name = true && this.isSetNew_name();
-      boolean that_present_new_name = true && that.isSetNew_name();
-      if (this_present_new_name || that_present_new_name) {
-        if (!(this_present_new_name && that_present_new_name))
+      boolean this_present_ks_def = true && this.isSetKs_def();
+      boolean that_present_ks_def = true && that.isSetKs_def();
+      if (this_present_ks_def || that_present_ks_def) {
+        if (!(this_present_ks_def && that_present_ks_def))
           return false;
-        if (!this.new_name.equals(that.new_name))
+        if (!this.ks_def.equals(that.ks_def))
           return false;
       }
 
@@ -24594,41 +24290,27 @@ public boolean equals(system_rename_column_family_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_old_name = true && (isSetOld_name());
-      builder.append(present_old_name);
-      if (present_old_name)
-        builder.append(old_name);
-
-      boolean present_new_name = true && (isSetNew_name());
-      builder.append(present_new_name);
-      if (present_new_name)
-        builder.append(new_name);
+      boolean present_ks_def = true && (isSetKs_def());
+      builder.append(present_ks_def);
+      if (present_ks_def)
+        builder.append(ks_def);
 
       return builder.toHashCode();
     }
 
-    public int compareTo(system_rename_column_family_args other) {
+    public int compareTo(system_add_keyspace_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      system_rename_column_family_args typedOther = (system_rename_column_family_args)other;
+      system_add_keyspace_args typedOther = (system_add_keyspace_args)other;
 
-      lastComparison = Boolean.valueOf(isSetOld_name()).compareTo(typedOther.isSetOld_name());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetOld_name()) {        lastComparison = TBaseHelper.compareTo(this.old_name, typedOther.old_name);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetNew_name()).compareTo(typedOther.isSetNew_name());
+      lastComparison = Boolean.valueOf(isSetKs_def()).compareTo(typedOther.isSetKs_def());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetNew_name()) {        lastComparison = TBaseHelper.compareTo(this.new_name, typedOther.new_name);
+      if (isSetKs_def()) {        lastComparison = TBaseHelper.compareTo(this.ks_def, typedOther.ks_def);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -24646,1385 +24328,10 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 1: // OLD_NAME
-            if (field.type == TType.STRING) {
-              this.old_name = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case 2: // NEW_NAME
-            if (field.type == TType.STRING) {
-              this.new_name = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          default:
-            TProtocolUtil.skip(iprot, field.type);
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      validate();
-
-      oprot.writeStructBegin(STRUCT_DESC);
-      if (this.old_name != null) {
-        oprot.writeFieldBegin(OLD_NAME_FIELD_DESC);
-        oprot.writeString(this.old_name);
-        oprot.writeFieldEnd();
-      }
-      if (this.new_name != null) {
-        oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
-        oprot.writeString(this.new_name);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("system_rename_column_family_args(");
-      boolean first = true;
-
-      sb.append("old_name:");
-      if (this.old_name == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.old_name);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("new_name:");
-      if (this.new_name == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.new_name);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-      if (old_name == null) {
-        throw new TProtocolException("Required field 'old_name' was not present! Struct: " + toString());
-      }
-      if (new_name == null) {
-        throw new TProtocolException("Required field 'new_name' was not present! Struct: " + toString());
-      }
-    }
-
-  }
-
-  public static class system_rename_column_family_result implements TBase<system_rename_column_family_result, system_rename_column_family_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_rename_column_family_result");
-
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
-    private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
-
-    public String success;
-    public InvalidRequestException ire;
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    public enum _Fields implements TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
-          case 1: // IRE
-            return IRE;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-
-    public static final Map<_Fields, FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_rename_column_family_result.class, metaDataMap);
-    }
-
-    public system_rename_column_family_result() {
-    }
-
-    public system_rename_column_family_result(
-      String success,
-      InvalidRequestException ire)
-    {
-      this();
-      this.success = success;
-      this.ire = ire;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public system_rename_column_family_result(system_rename_column_family_result other) {
-      if (other.isSetSuccess()) {
-        this.success = other.success;
-      }
-      if (other.isSetIre()) {
-        this.ire = new InvalidRequestException(other.ire);
-      }
-    }
-
-    public system_rename_column_family_result deepCopy() {
-      return new system_rename_column_family_result(this);
-    }
-
-    @Deprecated
-    public system_rename_column_family_result clone() {
-      return new system_rename_column_family_result(this);
-    }
-
-    public String getSuccess() {
-      return this.success;
-    }
-
-    public system_rename_column_family_result setSuccess(String success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been asigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public system_rename_column_family_result setIre(InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been asigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((String)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((InvalidRequestException)value);
-        }
-        break;
-
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
-      case IRE:
-        return getIre();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    public Object getFieldValue(int fieldId) {
-      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      }
-      throw new IllegalStateException();
-    }
-
-    public boolean isSet(int fieldID) {
-      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof system_rename_column_family_result)
-        return this.equals((system_rename_column_family_result)that);
-      return false;
-    }
-
-    public boolean equals(system_rename_column_family_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
-
-      boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
-      if (present_success)
-        builder.append(success);
-
-      boolean present_ire = true && (isSetIre());
-      builder.append(present_ire);
-      if (present_ire)
-        builder.append(ire);
-
-      return builder.toHashCode();
-    }
-
-    public int compareTo(system_rename_column_family_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-      system_rename_column_family_result typedOther = (system_rename_column_family_result)other;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(this.ire, typedOther.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        switch (field.id) {
-          case 0: // SUCCESS
-            if (field.type == TType.STRING) {
-              this.success = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case 1: // IRE
-            if (field.type == TType.STRUCT) {
-              this.ire = new InvalidRequestException();
-              this.ire.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          default:
-            TProtocolUtil.skip(iprot, field.type);
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      oprot.writeStructBegin(STRUCT_DESC);
-
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeString(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
-        oprot.writeFieldBegin(IRE_FIELD_DESC);
-        this.ire.write(oprot);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("system_rename_column_family_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-    }
-
-  }
-
-  public static class system_add_keyspace_args implements TBase<system_add_keyspace_args, system_add_keyspace_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_add_keyspace_args");
-
-    private static final TField KS_DEF_FIELD_DESC = new TField("ks_def", TType.STRUCT, (short)1);
-
-    public KsDef ks_def;
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    public enum _Fields implements TFieldIdEnum {
-      KS_DEF((short)1, "ks_def");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 1: // KS_DEF
-            return KS_DEF;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-
-    public static final Map<_Fields, FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.KS_DEF, new FieldMetaData("ks_def", TFieldRequirementType.REQUIRED, 
-          new StructMetaData(TType.STRUCT, KsDef.class)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_add_keyspace_args.class, metaDataMap);
-    }
-
-    public system_add_keyspace_args() {
-    }
-
-    public system_add_keyspace_args(
-      KsDef ks_def)
-    {
-      this();
-      this.ks_def = ks_def;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public system_add_keyspace_args(system_add_keyspace_args other) {
-      if (other.isSetKs_def()) {
-        this.ks_def = new KsDef(other.ks_def);
-      }
-    }
-
-    public system_add_keyspace_args deepCopy() {
-      return new system_add_keyspace_args(this);
-    }
-
-    @Deprecated
-    public system_add_keyspace_args clone() {
-      return new system_add_keyspace_args(this);
-    }
-
-    public KsDef getKs_def() {
-      return this.ks_def;
-    }
-
-    public system_add_keyspace_args setKs_def(KsDef ks_def) {
-      this.ks_def = ks_def;
-      return this;
-    }
-
-    public void unsetKs_def() {
-      this.ks_def = null;
-    }
-
-    /** Returns true if field ks_def is set (has been asigned a value) and false otherwise */
-    public boolean isSetKs_def() {
-      return this.ks_def != null;
-    }
-
-    public void setKs_defIsSet(boolean value) {
-      if (!value) {
-        this.ks_def = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case KS_DEF:
-        if (value == null) {
-          unsetKs_def();
-        } else {
-          setKs_def((KsDef)value);
-        }
-        break;
-
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case KS_DEF:
-        return getKs_def();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    public Object getFieldValue(int fieldId) {
-      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      switch (field) {
-      case KS_DEF:
-        return isSetKs_def();
-      }
-      throw new IllegalStateException();
-    }
-
-    public boolean isSet(int fieldID) {
-      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof system_add_keyspace_args)
-        return this.equals((system_add_keyspace_args)that);
-      return false;
-    }
-
-    public boolean equals(system_add_keyspace_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_ks_def = true && this.isSetKs_def();
-      boolean that_present_ks_def = true && that.isSetKs_def();
-      if (this_present_ks_def || that_present_ks_def) {
-        if (!(this_present_ks_def && that_present_ks_def))
-          return false;
-        if (!this.ks_def.equals(that.ks_def))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
-
-      boolean present_ks_def = true && (isSetKs_def());
-      builder.append(present_ks_def);
-      if (present_ks_def)
-        builder.append(ks_def);
-
-      return builder.toHashCode();
-    }
-
-    public int compareTo(system_add_keyspace_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-      system_add_keyspace_args typedOther = (system_add_keyspace_args)other;
-
-      lastComparison = Boolean.valueOf(isSetKs_def()).compareTo(typedOther.isSetKs_def());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetKs_def()) {        lastComparison = TBaseHelper.compareTo(this.ks_def, typedOther.ks_def);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        switch (field.id) {
-          case 1: // KS_DEF
-            if (field.type == TType.STRUCT) {
-              this.ks_def = new KsDef();
-              this.ks_def.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          default:
-            TProtocolUtil.skip(iprot, field.type);
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      validate();
-
-      oprot.writeStructBegin(STRUCT_DESC);
-      if (this.ks_def != null) {
-        oprot.writeFieldBegin(KS_DEF_FIELD_DESC);
-        this.ks_def.write(oprot);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("system_add_keyspace_args(");
-      boolean first = true;
-
-      sb.append("ks_def:");
-      if (this.ks_def == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ks_def);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-      if (ks_def == null) {
-        throw new TProtocolException("Required field 'ks_def' was not present! Struct: " + toString());
-      }
-    }
-
-  }
-
-  public static class system_add_keyspace_result implements TBase<system_add_keyspace_result, system_add_keyspace_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_add_keyspace_result");
-
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
-    private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
-
-    public String success;
-    public InvalidRequestException ire;
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    public enum _Fields implements TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
-          case 1: // IRE
-            return IRE;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-
-    public static final Map<_Fields, FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_add_keyspace_result.class, metaDataMap);
-    }
-
-    public system_add_keyspace_result() {
-    }
-
-    public system_add_keyspace_result(
-      String success,
-      InvalidRequestException ire)
-    {
-      this();
-      this.success = success;
-      this.ire = ire;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public system_add_keyspace_result(system_add_keyspace_result other) {
-      if (other.isSetSuccess()) {
-        this.success = other.success;
-      }
-      if (other.isSetIre()) {
-        this.ire = new InvalidRequestException(other.ire);
-      }
-    }
-
-    public system_add_keyspace_result deepCopy() {
-      return new system_add_keyspace_result(this);
-    }
-
-    @Deprecated
-    public system_add_keyspace_result clone() {
-      return new system_add_keyspace_result(this);
-    }
-
-    public String getSuccess() {
-      return this.success;
-    }
-
-    public system_add_keyspace_result setSuccess(String success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been asigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public system_add_keyspace_result setIre(InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been asigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((String)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((InvalidRequestException)value);
-        }
-        break;
-
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
-      case IRE:
-        return getIre();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    public Object getFieldValue(int fieldId) {
-      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      }
-      throw new IllegalStateException();
-    }
-
-    public boolean isSet(int fieldID) {
-      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof system_add_keyspace_result)
-        return this.equals((system_add_keyspace_result)that);
-      return false;
-    }
-
-    public boolean equals(system_add_keyspace_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
-
-      boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
-      if (present_success)
-        builder.append(success);
-
-      boolean present_ire = true && (isSetIre());
-      builder.append(present_ire);
-      if (present_ire)
-        builder.append(ire);
-
-      return builder.toHashCode();
-    }
-
-    public int compareTo(system_add_keyspace_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-      system_add_keyspace_result typedOther = (system_add_keyspace_result)other;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(this.ire, typedOther.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        switch (field.id) {
-          case 0: // SUCCESS
-            if (field.type == TType.STRING) {
-              this.success = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case 1: // IRE
-            if (field.type == TType.STRUCT) {
-              this.ire = new InvalidRequestException();
-              this.ire.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          default:
-            TProtocolUtil.skip(iprot, field.type);
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      oprot.writeStructBegin(STRUCT_DESC);
-
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeString(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
-        oprot.writeFieldBegin(IRE_FIELD_DESC);
-        this.ire.write(oprot);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("system_add_keyspace_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-    }
-
-  }
-
-  public static class system_drop_keyspace_args implements TBase<system_drop_keyspace_args, system_drop_keyspace_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_drop_keyspace_args");
-
-    private static final TField KEYSPACE_FIELD_DESC = new TField("keyspace", TType.STRING, (short)1);
-
-    public String keyspace;
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    public enum _Fields implements TFieldIdEnum {
-      KEYSPACE((short)1, "keyspace");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 1: // KEYSPACE
-            return KEYSPACE;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-
-    public static final Map<_Fields, FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.KEYSPACE, new FieldMetaData("keyspace", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_drop_keyspace_args.class, metaDataMap);
-    }
-
-    public system_drop_keyspace_args() {
-    }
-
-    public system_drop_keyspace_args(
-      String keyspace)
-    {
-      this();
-      this.keyspace = keyspace;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public system_drop_keyspace_args(system_drop_keyspace_args other) {
-      if (other.isSetKeyspace()) {
-        this.keyspace = other.keyspace;
-      }
-    }
-
-    public system_drop_keyspace_args deepCopy() {
-      return new system_drop_keyspace_args(this);
-    }
-
-    @Deprecated
-    public system_drop_keyspace_args clone() {
-      return new system_drop_keyspace_args(this);
-    }
-
-    public String getKeyspace() {
-      return this.keyspace;
-    }
-
-    public system_drop_keyspace_args setKeyspace(String keyspace) {
-      this.keyspace = keyspace;
-      return this;
-    }
-
-    public void unsetKeyspace() {
-      this.keyspace = null;
-    }
-
-    /** Returns true if field keyspace is set (has been asigned a value) and false otherwise */
-    public boolean isSetKeyspace() {
-      return this.keyspace != null;
-    }
-
-    public void setKeyspaceIsSet(boolean value) {
-      if (!value) {
-        this.keyspace = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case KEYSPACE:
-        if (value == null) {
-          unsetKeyspace();
-        } else {
-          setKeyspace((String)value);
-        }
-        break;
-
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case KEYSPACE:
-        return getKeyspace();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    public Object getFieldValue(int fieldId) {
-      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      switch (field) {
-      case KEYSPACE:
-        return isSetKeyspace();
-      }
-      throw new IllegalStateException();
-    }
-
-    public boolean isSet(int fieldID) {
-      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof system_drop_keyspace_args)
-        return this.equals((system_drop_keyspace_args)that);
-      return false;
-    }
-
-    public boolean equals(system_drop_keyspace_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_keyspace = true && this.isSetKeyspace();
-      boolean that_present_keyspace = true && that.isSetKeyspace();
-      if (this_present_keyspace || that_present_keyspace) {
-        if (!(this_present_keyspace && that_present_keyspace))
-          return false;
-        if (!this.keyspace.equals(that.keyspace))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
-
-      boolean present_keyspace = true && (isSetKeyspace());
-      builder.append(present_keyspace);
-      if (present_keyspace)
-        builder.append(keyspace);
-
-      return builder.toHashCode();
-    }
-
-    public int compareTo(system_drop_keyspace_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-      system_drop_keyspace_args typedOther = (system_drop_keyspace_args)other;
-
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(this.keyspace, typedOther.keyspace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        switch (field.id) {
-          case 1: // KEYSPACE
-            if (field.type == TType.STRING) {
-              this.keyspace = iprot.readString();
+          case 1: // KS_DEF
+            if (field.type == TType.STRUCT) {
+              this.ks_def = new KsDef();
+              this.ks_def.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -26044,9 +24351,9 @@ public void write(TProtocol oprot) throws TException {
       validate();
 
       oprot.writeStructBegin(STRUCT_DESC);
-      if (this.keyspace != null) {
-        oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
-        oprot.writeString(this.keyspace);
+      if (this.ks_def != null) {
+        oprot.writeFieldBegin(KS_DEF_FIELD_DESC);
+        this.ks_def.write(oprot);
         oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
@@ -26055,14 +24362,14 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("system_drop_keyspace_args(");
+      StringBuilder sb = new StringBuilder("system_add_keyspace_args(");
       boolean first = true;
 
-      sb.append("keyspace:");
-      if (this.keyspace == null) {
+      sb.append("ks_def:");
+      if (this.ks_def == null) {
         sb.append("null");
       } else {
-        sb.append(this.keyspace);
+        sb.append(this.ks_def);
       }
       first = false;
       sb.append(")");
@@ -26071,15 +24378,15 @@ public String toString() {
 
     public void validate() throws TException {
       // check for required fields
-      if (keyspace == null) {
-        throw new TProtocolException("Required field 'keyspace' was not present! Struct: " + toString());
+      if (ks_def == null) {
+        throw new TProtocolException("Required field 'ks_def' was not present! Struct: " + toString());
       }
     }
 
   }
 
-  public static class system_drop_keyspace_result implements TBase<system_drop_keyspace_result, system_drop_keyspace_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_drop_keyspace_result");
+  public static class system_add_keyspace_result implements TBase<system_add_keyspace_result, system_add_keyspace_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("system_add_keyspace_result");
 
     private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
     private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
@@ -26158,13 +24465,13 @@ public String getFieldName() {
       tmpMap.put(_Fields.IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_drop_keyspace_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(system_add_keyspace_result.class, metaDataMap);
     }
 
-    public system_drop_keyspace_result() {
+    public system_add_keyspace_result() {
     }
 
-    public system_drop_keyspace_result(
+    public system_add_keyspace_result(
       String success,
       InvalidRequestException ire)
     {
@@ -26176,7 +24483,7 @@ public system_drop_keyspace_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public system_drop_keyspace_result(system_drop_keyspace_result other) {
+    public system_add_keyspace_result(system_add_keyspace_result other) {
       if (other.isSetSuccess()) {
         this.success = other.success;
       }
@@ -26185,20 +24492,20 @@ public system_drop_keyspace_result(system_drop_keyspace_result other) {
       }
     }
 
-    public system_drop_keyspace_result deepCopy() {
-      return new system_drop_keyspace_result(this);
+    public system_add_keyspace_result deepCopy() {
+      return new system_add_keyspace_result(this);
     }
 
     @Deprecated
-    public system_drop_keyspace_result clone() {
-      return new system_drop_keyspace_result(this);
+    public system_add_keyspace_result clone() {
+      return new system_add_keyspace_result(this);
     }
 
     public String getSuccess() {
       return this.success;
     }
 
-    public system_drop_keyspace_result setSuccess(String success) {
+    public system_add_keyspace_result setSuccess(String success) {
       this.success = success;
       return this;
     }
@@ -26222,7 +24529,7 @@ public InvalidRequestException getIre() {
       return this.ire;
     }
 
-    public system_drop_keyspace_result setIre(InvalidRequestException ire) {
+    public system_add_keyspace_result setIre(InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -26302,12 +24609,12 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof system_drop_keyspace_result)
-        return this.equals((system_drop_keyspace_result)that);
+      if (that instanceof system_add_keyspace_result)
+        return this.equals((system_add_keyspace_result)that);
       return false;
     }
 
-    public boolean equals(system_drop_keyspace_result that) {
+    public boolean equals(system_add_keyspace_result that) {
       if (that == null)
         return false;
 
@@ -26349,13 +24656,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(system_drop_keyspace_result other) {
+    public int compareTo(system_add_keyspace_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      system_drop_keyspace_result typedOther = (system_drop_keyspace_result)other;
+      system_add_keyspace_result typedOther = (system_add_keyspace_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -26432,7 +24739,7 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("system_drop_keyspace_result(");
+      StringBuilder sb = new StringBuilder("system_add_keyspace_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -26460,19 +24767,16 @@ public void validate() throws TException {
 
   }
 
-  public static class system_rename_keyspace_args implements TBase<system_rename_keyspace_args, system_rename_keyspace_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_rename_keyspace_args");
+  public static class system_drop_keyspace_args implements TBase<system_drop_keyspace_args, system_drop_keyspace_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("system_drop_keyspace_args");
 
-    private static final TField OLD_NAME_FIELD_DESC = new TField("old_name", TType.STRING, (short)1);
-    private static final TField NEW_NAME_FIELD_DESC = new TField("new_name", TType.STRING, (short)2);
+    private static final TField KEYSPACE_FIELD_DESC = new TField("keyspace", TType.STRING, (short)1);
 
-    public String old_name;
-    public String new_name;
+    public String keyspace;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      OLD_NAME((short)1, "old_name"),
-      NEW_NAME((short)2, "new_name");
+      KEYSPACE((short)1, "keyspace");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -26487,10 +24791,8 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // OLD_NAME
-            return OLD_NAME;
-          case 2: // NEW_NAME
-            return NEW_NAME;
+          case 1: // KEYSPACE
+            return KEYSPACE;
           default:
             return null;
         }
@@ -26535,110 +24837,71 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.OLD_NAME, new FieldMetaData("old_name", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.NEW_NAME, new FieldMetaData("new_name", TFieldRequirementType.REQUIRED, 
+      tmpMap.put(_Fields.KEYSPACE, new FieldMetaData("keyspace", TFieldRequirementType.REQUIRED, 
           new FieldValueMetaData(TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_rename_keyspace_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(system_drop_keyspace_args.class, metaDataMap);
     }
 
-    public system_rename_keyspace_args() {
+    public system_drop_keyspace_args() {
     }
 
-    public system_rename_keyspace_args(
-      String old_name,
-      String new_name)
+    public system_drop_keyspace_args(
+      String keyspace)
     {
       this();
-      this.old_name = old_name;
-      this.new_name = new_name;
+      this.keyspace = keyspace;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public system_rename_keyspace_args(system_rename_keyspace_args other) {
-      if (other.isSetOld_name()) {
-        this.old_name = other.old_name;
-      }
-      if (other.isSetNew_name()) {
-        this.new_name = other.new_name;
+    public system_drop_keyspace_args(system_drop_keyspace_args other) {
+      if (other.isSetKeyspace()) {
+        this.keyspace = other.keyspace;
       }
     }
 
-    public system_rename_keyspace_args deepCopy() {
-      return new system_rename_keyspace_args(this);
+    public system_drop_keyspace_args deepCopy() {
+      return new system_drop_keyspace_args(this);
     }
 
     @Deprecated
-    public system_rename_keyspace_args clone() {
-      return new system_rename_keyspace_args(this);
-    }
-
-    public String getOld_name() {
-      return this.old_name;
-    }
-
-    public system_rename_keyspace_args setOld_name(String old_name) {
-      this.old_name = old_name;
-      return this;
-    }
-
-    public void unsetOld_name() {
-      this.old_name = null;
-    }
-
-    /** Returns true if field old_name is set (has been asigned a value) and false otherwise */
-    public boolean isSetOld_name() {
-      return this.old_name != null;
-    }
-
-    public void setOld_nameIsSet(boolean value) {
-      if (!value) {
-        this.old_name = null;
-      }
+    public system_drop_keyspace_args clone() {
+      return new system_drop_keyspace_args(this);
     }
 
-    public String getNew_name() {
-      return this.new_name;
+    public String getKeyspace() {
+      return this.keyspace;
     }
 
-    public system_rename_keyspace_args setNew_name(String new_name) {
-      this.new_name = new_name;
+    public system_drop_keyspace_args setKeyspace(String keyspace) {
+      this.keyspace = keyspace;
       return this;
     }
 
-    public void unsetNew_name() {
-      this.new_name = null;
+    public void unsetKeyspace() {
+      this.keyspace = null;
     }
 
-    /** Returns true if field new_name is set (has been asigned a value) and false otherwise */
-    public boolean isSetNew_name() {
-      return this.new_name != null;
+    /** Returns true if field keyspace is set (has been asigned a value) and false otherwise */
+    public boolean isSetKeyspace() {
+      return this.keyspace != null;
     }
 
-    public void setNew_nameIsSet(boolean value) {
+    public void setKeyspaceIsSet(boolean value) {
       if (!value) {
-        this.new_name = null;
+        this.keyspace = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case OLD_NAME:
-        if (value == null) {
-          unsetOld_name();
-        } else {
-          setOld_name((String)value);
-        }
-        break;
-
-      case NEW_NAME:
+      case KEYSPACE:
         if (value == null) {
-          unsetNew_name();
+          unsetKeyspace();
         } else {
-          setNew_name((String)value);
+          setKeyspace((String)value);
         }
         break;
 
@@ -26651,11 +24914,8 @@ public void setFieldValue(int fieldID, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case OLD_NAME:
-        return getOld_name();
-
-      case NEW_NAME:
-        return getNew_name();
+      case KEYSPACE:
+        return getKeyspace();
 
       }
       throw new IllegalStateException();
@@ -26668,10 +24928,8 @@ public Object getFieldValue(int fieldId) {
     /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
     public boolean isSet(_Fields field) {
       switch (field) {
-      case OLD_NAME:
-        return isSetOld_name();
-      case NEW_NAME:
-        return isSetNew_name();
+      case KEYSPACE:
+        return isSetKeyspace();
       }
       throw new IllegalStateException();
     }
@@ -26684,30 +24942,21 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof system_rename_keyspace_args)
-        return this.equals((system_rename_keyspace_args)that);
+      if (that instanceof system_drop_keyspace_args)
+        return this.equals((system_drop_keyspace_args)that);
       return false;
     }
 
-    public boolean equals(system_rename_keyspace_args that) {
+    public boolean equals(system_drop_keyspace_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_old_name = true && this.isSetOld_name();
-      boolean that_present_old_name = true && that.isSetOld_name();
-      if (this_present_old_name || that_present_old_name) {
-        if (!(this_present_old_name && that_present_old_name))
-          return false;
-        if (!this.old_name.equals(that.old_name))
-          return false;
-      }
-
-      boolean this_present_new_name = true && this.isSetNew_name();
-      boolean that_present_new_name = true && that.isSetNew_name();
-      if (this_present_new_name || that_present_new_name) {
-        if (!(this_present_new_name && that_present_new_name))
+      boolean this_present_keyspace = true && this.isSetKeyspace();
+      boolean that_present_keyspace = true && that.isSetKeyspace();
+      if (this_present_keyspace || that_present_keyspace) {
+        if (!(this_present_keyspace && that_present_keyspace))
           return false;
-        if (!this.new_name.equals(that.new_name))
+        if (!this.keyspace.equals(that.keyspace))
           return false;
       }
 
@@ -26718,41 +24967,27 @@ public boolean equals(system_rename_keyspace_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_old_name = true && (isSetOld_name());
-      builder.append(present_old_name);
-      if (present_old_name)
-        builder.append(old_name);
-
-      boolean present_new_name = true && (isSetNew_name());
-      builder.append(present_new_name);
-      if (present_new_name)
-        builder.append(new_name);
+      boolean present_keyspace = true && (isSetKeyspace());
+      builder.append(present_keyspace);
+      if (present_keyspace)
+        builder.append(keyspace);
 
       return builder.toHashCode();
     }
 
-    public int compareTo(system_rename_keyspace_args other) {
+    public int compareTo(system_drop_keyspace_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      system_rename_keyspace_args typedOther = (system_rename_keyspace_args)other;
+      system_drop_keyspace_args typedOther = (system_drop_keyspace_args)other;
 
-      lastComparison = Boolean.valueOf(isSetOld_name()).compareTo(typedOther.isSetOld_name());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetOld_name()) {        lastComparison = TBaseHelper.compareTo(this.old_name, typedOther.old_name);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetNew_name()).compareTo(typedOther.isSetNew_name());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetNew_name()) {        lastComparison = TBaseHelper.compareTo(this.new_name, typedOther.new_name);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(this.keyspace, typedOther.keyspace);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -26770,16 +25005,9 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 1: // OLD_NAME
-            if (field.type == TType.STRING) {
-              this.old_name = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case 2: // NEW_NAME
+          case 1: // KEYSPACE
             if (field.type == TType.STRING) {
-              this.new_name = iprot.readString();
+              this.keyspace = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -26799,14 +25027,9 @@ public void write(TProtocol oprot) throws TException {
       validate();
 
       oprot.writeStructBegin(STRUCT_DESC);
-      if (this.old_name != null) {
-        oprot.writeFieldBegin(OLD_NAME_FIELD_DESC);
-        oprot.writeString(this.old_name);
-        oprot.writeFieldEnd();
-      }
-      if (this.new_name != null) {
-        oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
-        oprot.writeString(this.new_name);
+      if (this.keyspace != null) {
+        oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
+        oprot.writeString(this.keyspace);
         oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
@@ -26815,22 +25038,14 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("system_rename_keyspace_args(");
+      StringBuilder sb = new StringBuilder("system_drop_keyspace_args(");
       boolean first = true;
 
-      sb.append("old_name:");
-      if (this.old_name == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.old_name);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("new_name:");
-      if (this.new_name == null) {
+      sb.append("keyspace:");
+      if (this.keyspace == null) {
         sb.append("null");
       } else {
-        sb.append(this.new_name);
+        sb.append(this.keyspace);
       }
       first = false;
       sb.append(")");
@@ -26839,18 +25054,15 @@ public String toString() {
 
     public void validate() throws TException {
       // check for required fields
-      if (old_name == null) {
-        throw new TProtocolException("Required field 'old_name' was not present! Struct: " + toString());
-      }
-      if (new_name == null) {
-        throw new TProtocolException("Required field 'new_name' was not present! Struct: " + toString());
+      if (keyspace == null) {
+        throw new TProtocolException("Required field 'keyspace' was not present! Struct: " + toString());
       }
     }
 
   }
 
-  public static class system_rename_keyspace_result implements TBase<system_rename_keyspace_result, system_rename_keyspace_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("system_rename_keyspace_result");
+  public static class system_drop_keyspace_result implements TBase<system_drop_keyspace_result, system_drop_keyspace_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("system_drop_keyspace_result");
 
     private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
     private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
@@ -26929,13 +25141,13 @@ public String getFieldName() {
       tmpMap.put(_Fields.IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(system_rename_keyspace_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(system_drop_keyspace_result.class, metaDataMap);
     }
 
-    public system_rename_keyspace_result() {
+    public system_drop_keyspace_result() {
     }
 
-    public system_rename_keyspace_result(
+    public system_drop_keyspace_result(
       String success,
       InvalidRequestException ire)
     {
@@ -26947,7 +25159,7 @@ public system_rename_keyspace_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public system_rename_keyspace_result(system_rename_keyspace_result other) {
+    public system_drop_keyspace_result(system_drop_keyspace_result other) {
       if (other.isSetSuccess()) {
         this.success = other.success;
       }
@@ -26956,20 +25168,20 @@ public system_rename_keyspace_result(system_rename_keyspace_result other) {
       }
     }
 
-    public system_rename_keyspace_result deepCopy() {
-      return new system_rename_keyspace_result(this);
+    public system_drop_keyspace_result deepCopy() {
+      return new system_drop_keyspace_result(this);
     }
 
     @Deprecated
-    public system_rename_keyspace_result clone() {
-      return new system_rename_keyspace_result(this);
+    public system_drop_keyspace_result clone() {
+      return new system_drop_keyspace_result(this);
     }
 
     public String getSuccess() {
       return this.success;
     }
 
-    public system_rename_keyspace_result setSuccess(String success) {
+    public system_drop_keyspace_result setSuccess(String success) {
       this.success = success;
       return this;
     }
@@ -26993,7 +25205,7 @@ public InvalidRequestException getIre() {
       return this.ire;
     }
 
-    public system_rename_keyspace_result setIre(InvalidRequestException ire) {
+    public system_drop_keyspace_result setIre(InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -27073,12 +25285,12 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof system_rename_keyspace_result)
-        return this.equals((system_rename_keyspace_result)that);
+      if (that instanceof system_drop_keyspace_result)
+        return this.equals((system_drop_keyspace_result)that);
       return false;
     }
 
-    public boolean equals(system_rename_keyspace_result that) {
+    public boolean equals(system_drop_keyspace_result that) {
       if (that == null)
         return false;
 
@@ -27120,13 +25332,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(system_rename_keyspace_result other) {
+    public int compareTo(system_drop_keyspace_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      system_rename_keyspace_result typedOther = (system_rename_keyspace_result)other;
+      system_drop_keyspace_result typedOther = (system_drop_keyspace_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -27203,7 +25415,7 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("system_rename_keyspace_result(");
+      StringBuilder sb = new StringBuilder("system_drop_keyspace_result(");
       boolean first = true;
 
       sb.append("success:");
