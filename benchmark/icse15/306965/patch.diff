diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/reference/SQLState.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/reference/SQLState.java
index edc87942..547f2c62 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/reference/SQLState.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/reference/SQLState.java
@@ -1357,7 +1357,7 @@ The message identifier (ie. the value that matches a field in this class)
     String TYPE_MISMATCH = "XJ020.S";
     String INVALID_JDBCTYPE = "XJ021.S";
     String SET_STREAM_FAILURE = "XJ022.S";
-    String SET_STREAM_INSUFFICIENT_DATA = "XJ023.S";
+    String SET_STREAM_INEXACT_LENGTH_DATA = "XJ023.S";
     String SET_UNICODE_INVALID_LENGTH = "XJ024.S";
     String NEGATIVE_STREAM_LENGTH = "XJ025.S";
     String NO_AUTO_COMMIT_ON = "XJ030.S";
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/RawToBinaryFormatStream.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/RawToBinaryFormatStream.java
index 22de4d11..185ed556 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/RawToBinaryFormatStream.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/RawToBinaryFormatStream.java
@@ -79,7 +79,7 @@ private void checkSufficientData() throws IOException
 		int remainingBytes = clearLimit();
 
 		if (remainingBytes > 0)
-			throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
+			throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INEXACT_LENGTH_DATA));
 
 		// if we had a limit try reading one more byte.
 		// JDBC 3.0 states the stream muct have the correct number of characters in it.
@@ -93,7 +93,7 @@ private void checkSufficientData() throws IOException
 				c = -1;
 			}
 			if (c >= 0)
-				throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
+				throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INEXACT_LENGTH_DATA));
 		}
 	}
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java
index 9371b2ff..e22030d2 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java
@@ -160,7 +160,7 @@ private void checkSufficientData() throws IOException
 		int remainingBytes = reader.clearLimit();
 
 		if (remainingBytes > 0)
-			throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
+			throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INEXACT_LENGTH_DATA));
 
 		// if we had a limit try reading one more character.
 		// JDBC 3.0 states the stream muct have the correct number of characters in it.
@@ -174,7 +174,7 @@ private void checkSufficientData() throws IOException
 				c = -1;
 			}
 			if (c >= 0)
-				throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
+				throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INEXACT_LENGTH_DATA));
 		}
 
 		// can put the correct length into the stream.
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/characterStreams.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/characterStreams.java
index dd318a6a..2832e9b4 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/characterStreams.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/characterStreams.java
@@ -83,6 +83,21 @@ public static void main(String[] args) {
 		System.out.println("Test characterStreams finished");
   }
 
+    
+    
+       private static void expectedException(SQLException sqle) {
+
+        while (sqle != null) {
+            String sqlState = sqle.getSQLState();
+            if (sqlState == null) {
+                sqlState = "<NULL>";
+            }
+            System.out.println("EXPECTED SQL Exception: (" + sqlState + ") "
+                    + sqle.getMessage());
+
+            sqle = sqle.getNextException();
+        }
+    }
 	static void setStreams(Connection conn) throws Exception {
 
 		ResultSet rs;
@@ -227,7 +242,8 @@ private static void setAscii(PreparedStatement ps, int targetCol) throws Excepti
 			ps.executeUpdate();
 			System.out.println("FAIL - MORE BYTES IN ASCII STREAM THAN SPECIFIED LENGTH - ACCEPTED");
 		} catch (SQLException sqle) {
-			System.out.println("MORE BYTES IN ASCII STREAM THAN SPECIFIED LENGTH - REJECTED " + sqle.toString());
+			System.out.println("MORE BYTES IN ASCII STREAM THAN SPECIFIED LENGTH - REJECTED ");
+            expectedException(sqle);
 		}
 
 		// more bytes than the stream contains
@@ -238,7 +254,8 @@ private static void setAscii(PreparedStatement ps, int targetCol) throws Excepti
 			ps.executeUpdate();
 			System.out.println("FAIL - LESS BYTES IN ASCII STREAM THAN SPECIFIED LENGTH - ACCEPTED");
 		} catch (SQLException sqle) {
-			System.out.println("LESS BYTES IN ASCII STREAM THAN SPECIFIED LENGTH - REJECTED " + sqle.toString());
+			System.out.println("LESS BYTES IN ASCII STREAM THAN SPECIFIED LENGTH - REJECTED ");
+            expectedException(sqle);
 		}
 
 		// null
@@ -263,7 +280,8 @@ private static void setCharacter(PreparedStatement ps, int targetCol) throws Exc
 			ps.executeUpdate();
 			System.out.println("FAIL - MORE CHARACTERS IN READER THAN SPECIFIED LENGTH - ACCEPTED");
 		} catch (SQLException sqle) {
-			System.out.println("MORE CHARACTERS IN READER THAN SPECIFIED LENGTH - REJECTED " + sqle.toString());
+			System.out.println("MORE CHARACTERS IN READER THAN SPECIFIED LENGTH - REJECTED ");
+            expectedException(sqle);
 		}
 
 		// more bytes than the stream contains,
@@ -273,7 +291,8 @@ private static void setCharacter(PreparedStatement ps, int targetCol) throws Exc
 			ps.executeUpdate();
 			System.out.println("FAIL - LESS CHARACTERS IN READER THAN SPECIFIED LENGTH - ACCEPTED");
 		} catch (SQLException sqle) {
-			System.out.println("LESS CHARACTERS IN READER STREAM THAN SPECIFIED LENGTH - REJECTED " + sqle.toString());
+			System.out.println("LESS CHARACTERS IN READER STREAM THAN SPECIFIED LENGTH - REJECTED ");
+            expectedException(sqle);
 		}
 
 		// null
