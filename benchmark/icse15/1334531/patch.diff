diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/solver/EigenDecomposition.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/solver/EigenDecomposition.java
index c8ea1ef6..249947d3 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/solver/EigenDecomposition.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/solver/EigenDecomposition.java
@@ -142,7 +142,7 @@ private void tred2() {
 
       // Scale to avoid under/overflow.
 
-      double scale = d.norm(1);
+      double scale = d.viewPart(0, i).norm(1);
       double h = 0.0;
 
 
@@ -876,8 +876,6 @@ private void hqr2(Matrix h) {
     }
   }
 
-
-
   private static boolean isSymmetric(Matrix a) {
     /*
     Symmetry flag.
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/solver/EigenDecompositionTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/solver/EigenDecompositionTest.java
index 50fa17e5..1a58ec48 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/solver/EigenDecompositionTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/solver/EigenDecompositionTest.java
@@ -31,6 +31,23 @@
 import static org.junit.Assert.assertEquals;
 
 public class EigenDecompositionTest {
+  @Test
+  public void testDegenerateMatrix() {
+    double[][] m = new double[][]{
+      new double[]{0.641284, 0.767303, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
+      new double[]{0.767303, 3.050159, 2.561342, 0.000000, 0.000000, 0.000000, 0.000000},
+      new double[]{0.000000, 2.561342, 5.000609, 0.810507, 0.000000, 0.000000, 0.000000},
+      new double[]{0.000000, 0.000000, 0.810507, 0.550477, 0.142853, 0.000000, 0.000000},
+      new double[]{0.000000, 0.000000, 0.000000, 0.142853, 0.254566, 0.000000, 0.000000},
+      new double[]{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.256073, 0.000000},
+      new double[]{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}};
+    Matrix x = new DenseMatrix(m);
+    EigenDecomposition eig = new EigenDecomposition(x, true);
+    Matrix d = eig.getD();
+    Matrix v = eig.getV();
+    check("EigenvalueDecomposition (evil)...", x.times(v), v.times(d));
+  }
+
   @Test
   public void testDeficientRank() {
     Matrix a = new DenseMatrix(10, 3).assign(new DoubleFunction() {
