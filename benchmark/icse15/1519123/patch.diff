diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java
index 2bc59445..e9d769ee 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java
@@ -437,7 +437,7 @@ public static String getTraceDirectory(Properties properties) {
                 Attribute.CLIENT_JVM_PROPERTY_PREFIX +
                 Attribute.CLIENT_TRACE_DIRECTORY);
 
-        if (traceDirectoryString == null) {
+        if (traceDirectoryString == null  && properties != null) {
             return properties.getProperty(Attribute.CLIENT_TRACE_DIRECTORY);
         } else {
             return traceDirectoryString;
@@ -1061,12 +1061,15 @@ public static int getTraceLevel(Properties properties) {
         traceLevelString  =
             readSystemProperty(Attribute.CLIENT_JVM_PROPERTY_PREFIX +
                                Attribute.CLIENT_TRACE_LEVEL);
-        if (traceLevelString == null) {
+        if (traceLevelString == null  && properties != null) {
             traceLevelString =
                 properties.getProperty(Attribute.CLIENT_TRACE_LEVEL);
         }
-
+        if (traceLevelString != null ) {
         return parseInt(traceLevelString, propertyDefault_traceLevel);
+        } else {
+            return propertyDefault_traceLevel;
+    }
     }
 
     synchronized public void setTraceLevel(int traceLevel) {
@@ -1132,6 +1135,22 @@ public int maxStatementsToPool() {
     void updateDataSourceValues(Properties prop)
         throws SqlException
     {
+        // DERBY-5553. System properties derby.client.traceDirectory
+        // and derby.client.traceLevel do not work for ClientXADataSource
+        // or ClientConnectionPoolDataSource
+        // Trace level and trace directory will be read from system
+        // properties if they are not specified in the Properties
+        // argument, so we check for them first to avoid getting cut
+        // off by the (prop == null) check below.
+        String traceDir = getTraceDirectory(prop);
+        if (traceDir != null) {
+            setTraceDirectory(traceDir);
+        }
+        
+        int traceLevel = getTraceLevel(prop);
+        if (traceLevel != propertyDefault_traceLevel) {
+            setTraceLevel(traceLevel);
+        }
         if (prop == null) {
             return;
         }
@@ -1145,9 +1164,6 @@ void updateDataSourceValues(Properties prop)
         if (prop.containsKey(Attribute.CLIENT_TRACE_FILE)) {
             setTraceFile(getTraceFile(prop));
         }
-        if (prop.containsKey(Attribute.CLIENT_TRACE_DIRECTORY)) {
-            setTraceDirectory(getTraceDirectory(prop));
-        }
         if (prop.containsKey(Attribute.CLIENT_TRACE_APPEND)) {
             setTraceFileAppend(getTraceFileAppend(prop));
         }
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ClientSideSystemPropertiesTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ClientSideSystemPropertiesTest.java
index 1960cb57..04015378 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ClientSideSystemPropertiesTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ClientSideSystemPropertiesTest.java
@@ -23,12 +23,18 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.io.File;
 import java.security.AccessController;
+import java.sql.Connection;
 import java.util.Properties;
 
+import javax.sql.PooledConnection;
+import javax.sql.XAConnection;
+
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.J2EEDataSource;
+import org.apache.derbyTesting.junit.JDBCDataSource;
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
@@ -39,7 +45,44 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *  because we have set the system properties to enable client side
      *  tracing. */
     public void testConnection() throws Exception {
-        getConnection().setAutoCommit(false);
+        Connection conn = openDefaultConnection();
+        conn.setAutoCommit(false);
+        checkTraceFileIsPresent();
+        conn.rollback();
+        conn.close();
+    }
+
+    public void testClientDataSourceConnection() throws Exception {
+       Connection conn = JDBCDataSource.getDataSource().getConnection();
+       conn.setAutoCommit(false);
+       checkTraceFileIsPresent();
+       conn.rollback();
+       conn.close();
+    }
+    
+    public void testClientCPDataSourceConnection() throws Exception {
+        PooledConnection pconn = J2EEDataSource.getConnectionPoolDataSource().
+                getPooledConnection(); 
+        Connection conn = pconn.getConnection();
+        conn.setAutoCommit(false);
+        checkTraceFileIsPresent();
+        conn.rollback();
+        conn.close();
+        pconn.close();
+     }
+
+    public void testClientXADataSourceConnection() throws Exception {
+        XAConnection xaconn = J2EEDataSource.getXADataSource().
+                getXAConnection();
+        Connection conn = xaconn.getConnection();
+        conn.setAutoCommit(false);
+        checkTraceFileIsPresent();
+        conn.close();
+        xaconn.close();
+     }
+
+    
+    private void checkTraceFileIsPresent() {
         //Make sure the connection above created a trace file. This check is 
         //made in the privilege block below by looking inside the 
         //trace Directory and making sure the file count is greater than 0.
@@ -75,7 +118,7 @@ public Object run(){
     						File tempFile;
     						for (;fileCounter<list.length; fileCounter++) {
     							tempFile = list[fileCounter];
-    							tempFile.delete();
+    							assertTrue(tempFile.delete());
         					}
 		        }
 	            return null;
