diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 73ad422e..2cb75d9c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -498,6 +498,15 @@ public void resetSchemaUsages(Activation activation, String schemaName)
 	 */
 	public String getCurrentSchemaName(Activation a);
 
+
+	/**
+	 * Return true if this schema name is the initial default schema for the
+	 * current session.
+	 * @param schemaName 
+	 * @return true
+	 */
+	public boolean isInitialDefaultSchema(String schemaName);
+
 	/**
 	 * Get the identity column value most recently generated.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index fa78022a..c0d02e16 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -1853,6 +1853,16 @@ public String getCurrentSchemaName(Activation a)
 		return s.getSchemaName();
 	}
 
+
+	/**
+	 * @see LanguageConnectionContext#isInitialDefaultSchema
+	 */
+	public boolean isInitialDefaultSchema(String schemaName) {
+		return cachedInitialDefaultSchemaDescr.getSchemaName().
+			equals(schemaName);
+	}
+
+
 	/**
 	 * @see LanguageConnectionContext#setDefaultSchema(SchemaDescriptor sd)
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
index 27d97e25..fc7c9efa 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
@@ -104,10 +104,12 @@ static SchemaDescriptor getSchemaDescriptorForCreate(
             CreateSchemaConstantAction csca
                 = new CreateSchemaConstantAction(schemaName, (String) null);
 
-			// DERBY-48: This operation creates a schema and we don't
-			// want to hold a lock for SYSSCHEMAS for the duration of
-			// the user transaction, so we perform the creation in a
-			// nested transaction if possible.
+			if (activation.getLanguageConnectionContext().
+					isInitialDefaultSchema(schemaName)) {
+				// DERBY-48: This operation creates the user's initial default
+				// schema and we don't want to hold a lock for SYSSCHEMAS for
+				// the duration of the user transaction, so we perform the
+				// creation in a nested transaction if possible.
 			TransactionController useTc    = null;
 			TransactionController nestedTc = null;
 
@@ -179,6 +181,21 @@ static SchemaDescriptor getSchemaDescriptorForCreate(
 				nestedTc.commit();
 				nestedTc.destroy();
 			}
+			} else {
+				// create the schema in the user transaction always
+				try {
+					csca.executeConstantAction(activation);
+				} catch (StandardException se) {
+					if (se.getMessageId()
+							.equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
+						// Ignore "Schema already exists". Another thread has
+						// probably created it after we checked for it
+					} else {
+						throw se;
+					}
+				}
+			}
+
 
 			sd = dd.getSchemaDescriptor(schemaName, tc, true);
 		}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java
index e64d785d..10c0af86 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java
@@ -208,7 +208,40 @@ public void testDerby3678 ()
         }
     }
 
-    protected void  tearDown() throws Exception {
+    /**
+     * Test that implicit schema creation of other schemas besides
+     * the initial default schema is still transactional.
+     */
+    public void testOtherImplicitSchemaCreation () throws SQLException
+    {
+        Connection c1 = openUserConnection("newuser");
+        c1.setAutoCommit(false);
+        Statement s1 = c1.createStatement();
+
+        // Will auto-create schema OTHERSCHEMA:
+        s1.executeUpdate("create table otherschema.t1(i int)");
+        s1.close();
+        
+        JDBC.assertSingleValueResultSet(
+            c1.createStatement().executeQuery(
+                "select schemaname from sys.sysschemas " +
+                "where schemaname='OTHERSCHEMA'"),
+            "OTHERSCHEMA");
+
+        c1.rollback();
+
+        JDBC.assertEmpty(
+            c1.createStatement().executeQuery(
+                "select schemaname from sys.sysschemas " +
+                "where schemaname='OTHERSCHEMA'"));
+        
+        c1.rollback();
+        c1.close();
+    }
+
+
+
+protected void  tearDown() throws Exception {
         try {
             createStatement().executeUpdate("drop schema newuser restrict");
         } catch (SQLException e) {
