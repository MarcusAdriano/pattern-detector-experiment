diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java
index 60ca3743..26fb5e66 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java
@@ -44,7 +44,17 @@ public AdaptiveWordValueEncoder(String name) {
   @Override
   public void addToVector(String originalForm, double weight, Vector data) {
     dictionary.add(originalForm);
-    super.addToVector(originalForm, weight, data);
+    super.addToVector(originalForm, getWeight(originalForm, weight), data);
+  }
+
+  @Override
+  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
+    return super.hashForProbe(originalForm, data, name, i);
+  }
+
+  @Override
+  protected double getWeight(String originalForm, double w) {
+    return w*weight(originalForm);
   }
 
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java
index 4c4d36fe..9e607794 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java
@@ -32,14 +32,24 @@ public void addToVector(String originalForm, double weight, Vector data) {
     int probes = getProbes();
     String name = getName();
     for (int i = 0; i < probes; i++) {
-      int n = hash(name, i, data.size());
+        int n = hashForProbe(originalForm, data, name, i);
       trace(null, n);
-      data.set(n, data.get(n) + weight);
+      data.set(n, data.get(n) + getWeight(originalForm,weight));
     }
   }
 
+  @Override
+  protected double getWeight(String originalForm, double w) {
+    return w;
+  }
+
   @Override
   public String asString(String originalForm) {
     return getName();
   }
+
+  protected int hashForProbe(String originalForm, Vector data, String name, int i){
+    return hash(name, i, data.size());
+  }
+
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java
index a4645cca..745d61a6 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java
@@ -39,12 +39,22 @@ public void addToVector(String originalForm, double weight, Vector data) {
     int probes = getProbes();
     String name = getName();
     for (int i = 0; i < probes; i++) {
-      int n = hash(name, CONTINUOUS_VALUE_HASH_SEED + i, data.size());
+      int n = hashForProbe(originalForm, data, name, i);
       trace(null, n);
-      data.set(n, data.get(n) + weight * Double.parseDouble(originalForm));
+      data.set(n, data.get(n) + getWeight(originalForm,weight));
     }
   }
 
+  @Override
+  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
+    return hash(name, CONTINUOUS_VALUE_HASH_SEED + i, data.size());
+  }
+
+  @Override
+  protected double getWeight(String originalForm, double w) {
+    return w * Double.parseDouble(originalForm);
+  }
+
   /**
    * Converts a value into a form that would help a human understand the internals of how the value
    * is being interpreted.  For text-like things, this is likely to be a list of the terms found with
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
index 9063730a..e5c31809 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
@@ -21,6 +21,8 @@
 import org.apache.mahout.math.Vector;
 
 import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -71,6 +73,19 @@ public void addToVector(String originalForm, Vector data) {
    */
   public abstract void addToVector(String originalForm, double weight, Vector data);
 
+  protected abstract int hashForProbe(String originalForm, Vector data, String name, int i);
+
+  protected Iterable<Integer> hashesForProbe(String originalForm, Vector data, String name, int i){
+    List<Integer> hashes = new ArrayList<Integer>();
+    hashes.add(hashForProbe(originalForm,data,name,i));
+  return hashes;
+  }
+
+  
+  protected double getWeight(String originalFor, double w){
+    return 1.0;
+  }
+
   // ******* Utility functions used by most implementations
 
   /**
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
index ba10d774..8f300ba9 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
@@ -25,9 +25,13 @@
 
   protected static final int INTERACTION_VALUE_HASH_SEED_1 = 100;
   protected static final int INTERACTION_VALUE_HASH_SEED_2 = 200;
+  protected static FeatureVectorEncoder firstEncoder;
+  protected static FeatureVectorEncoder secondEncoder;
 
-    public InteractionValueEncoder(String name) {
+  public InteractionValueEncoder(String name, FeatureVectorEncoder encoderOne, FeatureVectorEncoder encoderTwo) {
        super(name, 2);
+    firstEncoder = encoderOne;
+    secondEncoder = encoderTwo;
      }
 
   /**
@@ -47,41 +51,51 @@ public void addToVector(String originalForm, double w, Vector data) {
       * @param originalForm2 The original form of the second value as a string.
       * @param data          The vector to which the value should be added.
       */
-     public void addInteractionToVector(String originalForm1, String originalForm2, Vector data) {
+  public void addInteractionToVector(String originalForm1, String originalForm2, double weight, Vector data) {
        int probes = getProbes();
        String name = getName();
+    double w = getWeight(originalForm1, originalForm2, weight);
        for (int i = 0; i < probes; i++) {
-         int h1 = hash1(name, originalForm1, i, data.size());
-         int h2 = hash2(name, originalForm1, i, data.size());
-         int j =  hash1(name, originalForm2, i, data.size());
+      int h1 = firstEncoder.hashForProbe(originalForm1, data, name, i);
+      int h2 = secondEncoder.hashForProbe(originalForm1, data, name, i);
+      int j =  firstEncoder.hashForProbe(originalForm2, data, name, i);
          int n = (h1 + (j+1)*h2) % data.size();
          if(n < 0){
              n = n+data.size();
          }
          trace(String.format("%s:%s", originalForm1, originalForm2), n);
-         data.set(n, data.get(n) + 1);
+      data.set(n, data.get(n) + w);
        }
      }
 
+  protected double getWeight(String originalForm1, String originalForm2, double w) {
+    return firstEncoder.getWeight(originalForm1, 1.0) * secondEncoder.getWeight(originalForm2,1.0) * w;
+  }
+
   /**
-   * Converts a value into a form that would help a human understand the internals of how the
-   * value is being interpreted.  For text-like things, this is likely to be a list of the terms
-   * found with associated weights (if any).
+   * Converts a value into a form that would help a human understand the internals of how the value
+   * is being interpreted.  For text-like things, this is likely to be a list of the terms found with
+   * associated weights (if any).
    *
    * @param originalForm The original form of the value as a string.
    * @return A string that a human can read.
    */
   @Override
   public String asString(String originalForm) {
-    return String.format(Locale.ENGLISH, "%s:%s", getName(), originalForm);
+    return String.format("%s:%s", getName(), originalForm);
+  }
+
+  @Override
+  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
+    return hash(name, i, data.size());
   }
 
   protected int hash1(String term1, String term2, int probe, int numFeatures) {
-    return hash(term1, term2, probe + INTERACTION_VALUE_HASH_SEED_1, numFeatures);
+    return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_1,numFeatures);
   }
 
   protected int hash2(String term1, String term2, int probe, int numFeatures) {
-    return hash(term1, term2, probe + INTERACTION_VALUE_HASH_SEED_2, numFeatures);
+    return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_2,numFeatures);
   }
 }
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
index 8b2946e2..e119bb2d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
@@ -17,6 +17,8 @@
 
 package org.apache.mahout.vectors;
 
+import org.apache.mahout.math.Vector;
+
 import java.util.Collections;
 import java.util.Map;
 
@@ -37,6 +39,11 @@ public StaticWordValueEncoder(String name) {
     super(name);
   }
 
+  @Override
+  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
+    return hash(name, i, data.size());
+  }
+
   /**
    * Sets the weighting dictionary to be used by this encoder.  Also sets
    * the missing value weight to be half the smallest weight in the dictionary.
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java
index 3689f3c0..2248b95d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java
@@ -20,6 +20,8 @@
 import com.google.common.base.Splitter;
 import org.apache.mahout.math.Vector;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.regex.Pattern;
 
 /**
@@ -50,6 +52,20 @@ public void addToVector(String originalForm, double weight, Vector data) {
     }
   }
 
+    @Override
+    protected int hashForProbe(String originalForm, Vector data, String name, int i) {
+        return 0;
+    }
+
+    protected Iterable<Integer> hashesForProbe(String originalForm, Vector data, String name, int i){
+        List<Integer> hashes = new ArrayList<Integer>();
+        for (String word : tokenize(originalForm)){
+            hashes.add(hashForProbe(word,data,name,i));
+        }
+        return hashes;
+    }
+
+
   private Iterable<String> tokenize(CharSequence originalForm) {
     return onNonWord.split(originalForm);
   }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
index 7fc37c69..1ed0bbcc 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
@@ -41,14 +41,24 @@ protected WordValueEncoder(String name) {
   public void addToVector(String originalForm, double w, Vector data) {
     int probes = getProbes();
     String name = getName();
-    double weight = w * weight(originalForm);
+    double weight = getWeight(originalForm,w);
     for (int i = 0; i < probes; i++) {
-      int n = hash(name, originalForm, WORD_LIKE_VALUE_HASH_SEED + i, data.size());
+      int n = hashForProbe(originalForm, data, name, i);
       trace(originalForm, n);
       data.set(n, data.get(n) + weight);
     }
   }
 
+  @Override
+  protected double getWeight(String originalForm, double w) {
+    return w*weight(originalForm);    
+  }
+
+  @Override
+  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
+    return hash(name, originalForm, WORD_LIKE_VALUE_HASH_SEED + i, data.size());
+  }
+
   /**
    * Converts a value into a form that would help a human understand the internals of how the value
    * is being interpreted.  For text-like things, this is likely to be a list of the terms found with
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java
index f743416c..3450512e 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java
@@ -30,27 +30,40 @@
 public class InteractionValueEncoderTest {
   @Test
   public void testAddToVector() {
-    InteractionValueEncoder enc = new InteractionValueEncoder("interactions");
+    WordValueEncoder wv = new StaticWordValueEncoder("word");
+    ContinuousValueEncoder cv = new ContinuousValueEncoder("cont");
+    InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, cv);
     Vector v1 = new DenseVector(200);
-    enc.addInteractionToVector("a","b",v1);
+    enc.addInteractionToVector("a","1.0",1.0, v1);
     int k = enc.getProbes();
     // should set k distinct locations to 1
     Assert.assertEquals((float) k, v1.norm(1), 0);
     Assert.assertEquals(1.0, v1.maxValue(), 0);
+
     // adding same interaction again should increment weights
-    enc.addInteractionToVector("a","b",v1);
+    enc.addInteractionToVector("a","1.0",1.0,v1);
     Assert.assertEquals((float) k*2, v1.norm(1), 0);
     Assert.assertEquals(2.0, v1.maxValue(), 0);
 
     Vector v2 = new DenseVector(20000);
-    StaticWordValueEncoder wordEncoder = new StaticWordValueEncoder("test");
-    enc.addInteractionToVector("a","b",v2);
-    wordEncoder.addToVector("a", v2);
-    wordEncoder.addToVector("b", v2);
+    enc.addInteractionToVector("a","1.0",1.0,v2);
+    wv.addToVector("a", v2);
+    cv.addToVector("1.0", v2);
     k = enc.getProbes();
-    int j = wordEncoder.getProbes();
     //this assumes no hash collision
-    Assert.assertEquals((float) (k + 2*j), v2.norm(1), 0);
+    Assert.assertEquals((float) (k + wv.getProbes()+cv.getProbes()), v2.norm(1), 1e-3);
   }
 
+  @Test
+  public void testaddToVectorUsesProductOfWeights(){
+    WordValueEncoder wv = new StaticWordValueEncoder("word");
+    ContinuousValueEncoder cv = new ContinuousValueEncoder("cont");
+    InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, cv);
+    Vector v1 = new DenseVector(200);
+    enc.addInteractionToVector("a","0.9",0.5, v1);
+    int k = enc.getProbes();
+    // should set k distinct locations to 0.9*0.5
+    Assert.assertEquals((float) k*0.5*0.9, v1.norm(1), 0);
+    Assert.assertEquals(0.5*0.9, v1.maxValue(), 0);
+  }
 }
