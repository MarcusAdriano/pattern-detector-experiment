diff --git a/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/PreparedStatement.java
index 1e90f822..084c447a 100644
--- a/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 import java.io.Reader;
 import java.sql.SQLException;
+import java.util.ArrayList;
 import org.apache.derby.client.ClientPooledConnection;
 import org.apache.derby.jdbc.ClientDriver;
 
@@ -63,6 +64,8 @@ void setInput(int parameterIndex, Object input) {
 
     public ColumnMetaData parameterMetaData_; // type information for input sqlda
 
+    private ArrayList parameterTypeList;
+
 
     // The problem with storing the scrollable ResultSet associated with cursorName in scrollableRS_ is
     // that when the PreparedStatement is re-executed, it has a new ResultSet, however, we always do
@@ -86,6 +89,7 @@ private void initPreparedStatement() {
         parameterSet_ = null;
         parameterRegistered_ = null;
         parameterMetaData_ = null;
+        parameterTypeList = null;
         isAutoCommittableStatement_ = true;
         isPreparedStatement_ = true;
     }
@@ -1362,6 +1366,10 @@ public void addBatch() throws SQLException {
                 checkForClosedStatement();
                 checkThatAllParametersAreSet();
 
+                if (parameterTypeList == null) {
+                    parameterTypeList = new ArrayList();
+                }
+
                 // ASSERT: since OUT/INOUT parameters are not allowed, there should
                 //         be no problem in sharing the JDBC Wrapper object instances
                 //         since they will not be modified by the driver.
@@ -1373,8 +1381,13 @@ public void addBatch() throws SQLException {
                     System.arraycopy(parameters_, 0, inputsClone, 0, parameters_.length);
 
                     batch_.add(inputsClone);
+                    
+                    // Get a copy of the parameter type data and save it in a list
+                    // which will be used later on at the time of batch execution.
+                    parameterTypeList.add(parameterMetaData_.clientParamtertype_.clone());
                 } else {
                     batch_.add(null);
+                    parameterTypeList.add(null);
                 }
             }
         }
@@ -2027,6 +2040,7 @@ void flowExecute(int executeType) throws SqlException {
         }
 
         for (int i = 0; i < batchSize; i++) {
+            parameterMetaData_.clientParamtertype_ = (int[]) parameterTypeList.get(i);
             parameters_ = (Object[]) batch_.get(i);
 
             if (sqlMode_ != isCall__) {
@@ -2115,6 +2129,7 @@ void flowExecute(int executeType) throws SqlException {
         }
         // We need to clear the batch before any exception is thrown from agent_.endBatchedReadChain().
         batch_.clear();
+        parameterTypeList = null;
 
         // restore the saved input set, setting it to "current"
         parameters_ = savedInputs;
diff --git a/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java b/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
index 6e0d1683..91db456b 100644
--- a/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
+++ b/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Date;
 import java.sql.Time;
 import java.sql.Timestamp;
+import java.sql.Types;
 import java.sql.SQLException;
 import java.sql.BatchUpdateException;
 import java.io.ByteArrayInputStream; 
@@ -49,7 +50,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private static String[] testObjects =  // string array for cleaning up
         {"table t1", "table tab1", "table t2", "table bigtab", "table tstab",
          "table doubletab", "table numtab", "table Numeric_Tab", "table jira614", 
-	 "table jira614_a", "table jira428", "table jira125", 
+	 "table jira614_a", "table jira428", "table jira125", "table varcharclobtab", 
          "table jira125125125125125125125125125125125125125125125125125125125125125125125125125125125125125125125",
          "table jira1533_a", "table jira1533_b"};
 
@@ -310,6 +311,10 @@ else if (ts.before(temp))
 			testBigDecimalSetObject(conn);
 			testBigDecimalSetObjectWithScale(conn);
 
+			if (!TestUtil.isJCCFramework()) {
+				testVaryingClientParameterTypeBatch(conn);
+			}
+
 			test4975(conn);
 			test5130(conn);
 			test5172(conn);
@@ -336,6 +341,36 @@ else if (ts.before(temp))
 		}
 	}
 
+    // Test execution of batch update where the type of
+    // a parameter varies for difference entries in the batch.
+    private static void testVaryingClientParameterTypeBatch(Connection conn) throws Exception
+    {
+        Statement stmt = conn.createStatement();
+
+        try { stmt.execute("drop table varcharclobtab"); } catch (Throwable t) { }
+        stmt.execute("create table varcharclobtab (c1 varchar(100), c2 clob)");
+        stmt.close();
+        
+        PreparedStatement pStmt = conn.prepareStatement("insert into varcharclobtab VALUES(?,?)");
+
+        pStmt.setNull(1, Types.VARCHAR);
+        pStmt.setString(2, "clob");
+        pStmt.addBatch();
+        
+        pStmt.setString(1, "varchar");
+        pStmt.setNull(2, Types.CLOB);
+        pStmt.addBatch();
+     
+        // The following statement should not throw an exception.
+        try {
+            pStmt.executeBatch();
+        } catch (ClassCastException e) {
+            System.out.println("FAIL: ClassCastException thrown by testVaryingClientParameterTypeBatch test.");
+            throw e;
+        }
+        pStmt.close();
+    }
+
 	// Test creation and execution of many Prepared Statements
 	// Beetle 5130
 	private static void test5130 (Connection conn) throws Exception
