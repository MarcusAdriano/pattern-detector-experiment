diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
index ba67eea9..0d898037 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
@@ -31,6 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.sql.SQLException;
 
 import javax.naming.RefAddr;
 import javax.naming.Referenceable;
@@ -799,15 +800,24 @@ public short getSecurityMechanism(String password) {
      * Any attributes that can be set using a property of this DataSource implementation
      * (e.g user, password) should not be set in connectionAttributes. Conflicting
      * settings in connectionAttributes and properties of the DataSource will lead to
-     * unexpected behaviour. 
+     * unexpected behaviour. Specifically, databaseName attribute cannot be set using 
+     * this method. (DERBY-1130). databaseName has to be set using the DataSource 
+     * property.
      *
      * @param prop set to the list of Cloudscape connection attributes separated by semi-colons.   E.g., to specify an
      *             encryption bootPassword of "x8hhk2adf", and set upgrade to true, do the following: <PRE>
      *             ds.setConnectionAttributes("bootPassword=x8hhk2adf;upgrade=true"); </PRE> See Derby documentation for
      *             complete list.
+     * @throws SQLException if we attempt to set databaseName property in the connection attributes
      */
-    public final void setConnectionAttributes(String prop) {
+    public final void setConnectionAttributes(String prop) throws SQLException {
         connectionAttributes = prop;
+        
+        try {
+        	updateDataSourceValues(tokenizeAttributes(prop, null));
+        }  catch(SqlException se) {
+        	throw se.getSQLException();
+        }
     }
 
     /**
@@ -885,11 +895,17 @@ public boolean getTraceFileAppend() {
      * The dataSource keeps individual fields for the values that are relevant to the client. These need to be updated
      * when set connection attributes is called.
      */
-    void updateDataSourceValues(Properties prop) {
+    void updateDataSourceValues(Properties prop) throws SqlException {
         if (prop == null) {
             return;
         }
         
+        if (prop.containsKey(Attribute.DBNAME_ATTR)) {
+        	throw new SqlException(null, 
+                    new ClientMessageId(SQLState.ATTRIBUTE_NOT_ALLOWED),
+					Attribute.DBNAME_ATTR);
+        }
+        
         if (prop.containsKey(Attribute.USERNAME_ATTR)) {
             setUser(getUser(prop));
         }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java
index 11241cb9..9f43ea6c 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java
@@ -182,7 +182,6 @@ public Connection getConnection(String user, String password) throws SQLExceptio
         try
         {
             LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection("_sds");
-            updateDataSourceValues(tokenizeAttributes(getConnectionAttributes(), null));
             return ClientDriver.getFactory().newNetConnection
                     ((NetLogWriter) dncLogWriter, user,
                     password, this, -1, false);
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index dd51855c..f7d4987c 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1490,6 +1490,7 @@ The message identifier (ie. the value that matches a field in this class)
     String TRACELEVEL_FORMAT_INVALID = "XJ213.C";
     String IO_ERROR_UPON_LOB_FREE = "XJ214.S";
     String LOB_OBJECT_INVALID = "XJ215.S";
+    String ATTRIBUTE_NOT_ALLOWED = "XJ216.S";
     
     //XN - Network-level messages
     String NET_CONNECTION_RESET_NOT_ALLOWED_IN_UNIT_OF_WORK         = "XN001.S";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index 37bb9be4..ce1c6bd3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -47,6 +47,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
 import org.apache.derby.jdbc.EmbeddedDataSource;
 import org.apache.derby.jdbc.EmbeddedXADataSource;
+import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
+import org.apache.derby.jdbc.ClientDataSource;
+import org.apache.derby.jdbc.ClientXADataSource;
+
 import org.apache.derby.tools.JDBCDisplayUtil;
 import org.apache.derby.tools.ij;
 import org.apache.derbyTesting.functionTests.util.SecurityCheck;
@@ -686,10 +690,12 @@ protected void runTest(String[] args) throws Exception {
 		} catch (Exception e) {
 				System.out.println("; wrong, unexpected exception: " + e.toString());
 		}
-		// skip testDSRequestAuthentication for  client because of these 
-		// two issues:
-		// DERBY-1130 : Client should not allow databaseName to be set with
-		// setConnectionAttributes
+		
+		// DERBY-1130 - Client should not allow databaseName to be set with setConnectionAttributes
+		if (TestUtil.isDerbyNetClientFramework())
+			testClientDSConnectionAttributes();
+		
+		// skip testDSRequestAuthentication for  client because of this issue: 
 		// DERBY-1131 : Deprecate  Derby DataSource property attributesAsPassword
 		if (TestUtil.isDerbyNetClientFramework())
 			return;
@@ -1383,6 +1389,53 @@ private static void testDSRequestAuthentication() throws SQLException {
 		xads.setDatabaseName(null);
 	}
 
+	/**
+	 * Check that database name cannot be set using setConnectionAttributes 
+	 * for Derby client data sources. This method tests DERBY-1130.
+	 * 
+	 * @throws SQLException
+	 */
+	private static void testClientDSConnectionAttributes() throws SQLException {
+
+		ClientDataSource ds = new ClientDataSource();
+
+		System.out.println("DataSource - EMPTY");
+		dsConnectionRequests(ds);
+
+		System.out.println("DataSource - connectionAttributes=databaseName=wombat");
+		try{ 
+			ds.setConnectionAttributes("databaseName=wombat");
+		} catch (SQLException sqle) {
+			System.out.println("Expected exception - " + sqle.getMessage());
+		}
+		
+		
+		// now with ConnectionPoolDataSource
+		ClientConnectionPoolDataSource cpds = new ClientConnectionPoolDataSource();
+		System.out.println("ConnectionPoolDataSource - EMPTY");
+		dsConnectionRequests((ConnectionPoolDataSource)cpds);
+
+		System.out.println("ConnectionPoolDataSource - connectionAttributes=databaseName=wombat");
+		try {
+			cpds.setConnectionAttributes("databaseName=wombat");
+		} catch (SQLException sqle) {
+			System.out.println("Expected exception - " + sqle.getMessage());
+		}
+		
+		// now with XADataSource
+		ClientXADataSource xads = new ClientXADataSource();
+		System.out.println("XADataSource - EMPTY");
+		dsConnectionRequests((XADataSource) xads);
+
+		System.out.println("XADataSource - connectionAttributes=databaseName=wombat");
+		try {
+			xads.setConnectionAttributes("databaseName=wombat");
+		} catch (SQLException sqle) {
+			System.out.println("Expected exception - " + sqle.getMessage());
+		}
+		
+	}
+	
 	private static void dsConnectionRequests(DataSource ds) {
 		
 		SecurityCheck.inspect(ds, "javax.sql.DataSource");
