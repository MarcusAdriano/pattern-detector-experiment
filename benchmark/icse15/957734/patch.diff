diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 7e2d9343..bcb72fb5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -495,6 +495,22 @@ public void doConsistencyCheck(Row row, List<InetAddress> endpoints, ReadCommand
         return map;
     }
 
+    public Map<Range, List<String>> getPendingRangeToEndpointMap(String keyspace)
+    {
+        // some people just want to get a visual representation of things. Allow null and set it to the first
+        // non-system table.
+        if (keyspace == null)
+            keyspace = DatabaseDescriptor.getNonSystemTables().get(0);
+
+        Map<Range, List<String>> map = new HashMap<Range, List<String>>();
+        for (Map.Entry<Range, Collection<InetAddress>> entry : tokenMetadata_.getPendingRanges(keyspace).entrySet())
+        {
+            List<InetAddress> l = new ArrayList<InetAddress>(entry.getValue());
+            map.put(entry.getKey(), stringify(l));
+        }
+        return map;
+    }
+
     public Map<Range, List<InetAddress>> getRangeToAddressMap(String keyspace)
     {
         List<Range> ranges = getAllRanges(tokenMetadata_.sortedTokens());
@@ -981,6 +997,16 @@ public String getToken()
         return getLocalToken().toString();
     }
 
+    public Set<String> getLeavingNodes()
+    {
+        return stringify(tokenMetadata_.getLeavingEndpoints());
+    }
+
+    public Set<String> getJoiningNodes()
+    {
+        return stringify(tokenMetadata_.getBootstrapTokens().values());
+    }
+
     public Set<String> getLiveNodes()
     {
         return stringify(Gossiper.instance.getLiveMembers());
@@ -991,7 +1017,7 @@ public String getToken()
         return stringify(Gossiper.instance.getUnreachableMembers());
     }
 
-    private Set<String> stringify(Set<InetAddress> endpoints)
+    private Set<String> stringify(Collection<InetAddress> endpoints)
     {
         Set<String> stringEndpoints = new HashSet<String>();
         for (InetAddress ep : endpoints)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
index c77e1fe4..4558772a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
@@ -51,6 +51,20 @@
      */
     public Set<String> getUnreachableNodes();
 
+    /**
+     * Retrieve the list of nodes currently bootstrapping into the ring.
+     *
+     * @return set of IP addresses, as Strings
+     */
+    public Set<String> getJoiningNodes();
+
+    /**
+     * Retrieve the list of nodes currently leaving the ring.
+     *
+     * @return set of IP addresses, as Strings
+     */
+    public Set<String> getLeavingNodes();
+
     /**
      * Fetch a string representation of the token.
      *
@@ -66,6 +80,13 @@
      */
     public Map<Range, List<String>> getRangeToEndpointMap(String keyspace);
 
+    /**
+     * Retrieve a map of pending ranges to endpoints that describe the ring topology
+     * @param keyspace the keyspace to get the pending range map for.
+     * @return a map of pending ranges to endpoints
+     */
+    public Map<Range, List<String>> getPendingRangeToEndpointMap(String keyspace);
+
     /**
      * Numeric load value.
      */
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
index 27d85d23..aaff8292 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
@@ -43,7 +43,6 @@
 import org.apache.cassandra.dht.Range;
 
 import org.apache.commons.cli.*;
-import org.apache.commons.lang.StringUtils;
 
 public class NodeCmd {
     private static final String HOST_OPT_LONG = "host";
@@ -93,64 +92,55 @@ private static void printUsage()
     public void printRing(PrintStream outs)
     {
         Map<Range, List<String>> rangeMap = probe.getRangeToEndpointMap(null);
-        List<Range> ranges = new ArrayList<Range>(rangeMap.keySet());
+        Map<Range, List<String>> pendingRangeMap = probe.getPendingRangeToEndpoingMap(null);
+        Map<Range, List<String>> rangesToIterate = new HashMap<Range, List<String>>();
+
+        rangesToIterate.putAll(pendingRangeMap);
+        rangesToIterate.putAll(rangeMap);
+
+        List<Range> ranges = new ArrayList<Range>(rangesToIterate.keySet());
         Collections.sort(ranges);
         Set<String> liveNodes = probe.getLiveNodes();
         Set<String> deadNodes = probe.getUnreachableNodes();
+        Set<String> joiningNodes = probe.getJoiningNodes();
+        Set<String> leavingNodes = probe.getLeavingNodes();
         Map<String, String> loadMap = probe.getLoadMap();
 
-        // Print range-to-endpoint mapping
-        int counter = 0;
-        outs.print(String.format("%-14s", "Address"));
-        outs.print(String.format("%-11s", "Status"));
-        outs.print(String.format("%-14s", "Load"));
-        outs.print(String.format("%-43s", "Range"));
-        outs.println("Ring");
-        // emphasize that we're showing the right part of each range
+        outs.print(String.format("%-16s", "Address"));
+        outs.print(String.format("%-7s", "Status"));
+        outs.print(String.format("%-8s", "State"));
+        outs.print(String.format("%-16s", "Load"));
+        outs.print(String.format("%-44s", "Token"));
+        outs.println();
+        
+        // show pre-wrap token twice so you can always read a node's range as
+        // (previous line token, current line token]
         if (ranges.size() > 1)
-        {
             outs.println(String.format("%-14s%-11s%-14s%-43s", "", "", "", ranges.get(0).left));
-        }
-        // normal range & node info
+
         for (Range range : ranges) {
-            List<String> endpoints = rangeMap.get(range);
+            List<String> endpoints = rangesToIterate.get(range);
+
             String primaryEndpoint = endpoints.get(0);
+            outs.print(String.format("%-16s", primaryEndpoint));
 
-            outs.print(String.format("%-14s", primaryEndpoint));
+            String status =
+                    liveNodes.contains(primaryEndpoint) ? "Up" :
+                    deadNodes.contains(primaryEndpoint) ? "Down" :
+                    "?";
+            outs.print(String.format("%-7s", status));
 
-            String status = liveNodes.contains(primaryEndpoint)
-                          ? "Up"
-                          : deadNodes.contains(primaryEndpoint)
-                            ? "Down"
-                            : "?";
-            outs.print(String.format("%-11s", status));
+            String state =
+                    joiningNodes.contains(primaryEndpoint) ? "Joining" :
+                    leavingNodes.contains(primaryEndpoint) ? "Leaving" :
+                    "Normal";
+            outs.print(String.format("%-8s", state));
 
-            String load = loadMap.containsKey(primaryEndpoint) ? loadMap.get(primaryEndpoint) : "?";
-            outs.print(String.format("%-14s", load));
+            outs.print(String.format("%-16s", loadMap.containsKey(primaryEndpoint) ? loadMap.get(primaryEndpoint) : "?"));
 
-            outs.print(String.format("%-43s", range.right));
+            outs.print(String.format("%-44s", range.right));
 
-            String asciiRingArt;
-            if (counter == 0)
-            {
-                asciiRingArt = "|<--|";
-            }
-            else if (counter == (rangeMap.size() - 1))
-            {
-                asciiRingArt = "|-->|";
-            }
-            else
-            {
-                if ((rangeMap.size() > 4) && ((counter % 2) == 0))
-                    asciiRingArt = "v   |";
-                else if ((rangeMap.size() > 4) && ((counter % 2) != 0))
-                    asciiRingArt = "|   ^";
-                else
-                    asciiRingArt = "|   |";
-            }
-            outs.println(asciiRingArt);
-            
-            counter++;
+            outs.println();
         }
     }
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
index a0ed5c4e..82bd34cd 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -160,78 +160,24 @@ public void drain() throws IOException, InterruptedException, ExecutionException
         return ssProxy.getRangeToEndpointMap(tableName);
     }
     
-    public Set<String> getLiveNodes()
+    public Map<Range, List<String>> getPendingRangeToEndpoingMap(String tableName)
     {
-        return ssProxy.getLiveNodes();
+        return ssProxy.getPendingRangeToEndpointMap(tableName);
     }
 
-    /**
-     * Write a textual representation of the Cassandra ring.
-     * 
-     * @param outs the stream to write to
-     */
-    public void printRing(PrintStream outs)
-    {
-        Map<Range, List<String>> rangeMap = ssProxy.getRangeToEndpointMap(null);
-        List<Range> ranges = new ArrayList<Range>(rangeMap.keySet());
-        Collections.sort(ranges);
-        Set<String> liveNodes = ssProxy.getLiveNodes();
-        Set<String> deadNodes = ssProxy.getUnreachableNodes();
-        Map<String, String> loadMap = ssProxy.getLoadMap();
-
-        // Print range-to-endpoint mapping
-        int counter = 0;
-        outs.print(String.format("%-14s", "Address"));
-        outs.print(String.format("%-11s", "Status"));
-        outs.print(String.format("%-14s", "Load"));
-        outs.print(String.format("%-43s", "Range"));
-        outs.println("Ring");
-        // emphasize that we're showing the right part of each range
-        if (ranges.size() > 1)
+    public Set<String> getLiveNodes()
         {
-            outs.println(String.format("%-14s%-11s%-14s%-43s", "", "", "", ranges.get(0).left));
+        return ssProxy.getLiveNodes();
         }
-        // normal range & node info
-        for (Range range : ranges) {
-            List<String> endpoints = rangeMap.get(range);
-            String primaryEndpoint = endpoints.get(0);
-
-            outs.print(String.format("%-14s", primaryEndpoint));
 
-            String status = liveNodes.contains(primaryEndpoint)
-                          ? "Up"
-                          : deadNodes.contains(primaryEndpoint)
-                            ? "Down"
-                            : "?";
-            outs.print(String.format("%-11s", status));
-
-            String load = loadMap.containsKey(primaryEndpoint) ? loadMap.get(primaryEndpoint) : "?";
-            outs.print(String.format("%-14s", load));
-
-            outs.print(String.format("%-43s", range.right));
-
-            String asciiRingArt;
-            if (counter == 0)
-            {
-                asciiRingArt = "|<--|";
-            }
-            else if (counter == (rangeMap.size() - 1))
+    public Set<String> getJoiningNodes()
             {
-                asciiRingArt = "|-->|";
+        return ssProxy.getJoiningNodes();
             }
-            else
-            {
-                if ((rangeMap.size() > 4) && ((counter % 2) == 0))
-                    asciiRingArt = "v   |";
-                else if ((rangeMap.size() > 4) && ((counter % 2) != 0))
-                    asciiRingArt = "|   ^";
-                else
-                    asciiRingArt = "|   |";
-            }
-            outs.println(asciiRingArt);
             
-            counter++;
-        }
+    public Set<String> getLeavingNodes()
+    {
+        return ssProxy.getLeavingNodes();
     }
     
     public Set<String> getUnreachableNodes()
