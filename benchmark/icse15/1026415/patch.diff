diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index e15e1703..88259a3f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -1949,7 +1949,7 @@ private void printSliceList(CfDef columnFamilyDef, List<KeySlice> slices)
         for (KeySlice ks : slices)
         {
             css_.out.printf("-------------------\n");
-            css_.out.printf("RowKey: %s\n", new String(ks.key.array(),ks.key.position(),ks.key.remaining(), Charsets.UTF_8));
+            css_.out.printf("RowKey: %s\n", ByteBufferUtil.string(ks.key, Charsets.UTF_8));
 
             Iterator<ColumnOrSuperColumn> iterator = ks.getColumnsIterator();
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
index cd24d623..e6bae9d3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
@@ -120,9 +120,10 @@ public void serialize(RangeSliceCommand sliceCommand, DataOutputStream dos) thro
     {
         dos.writeUTF(sliceCommand.keyspace);
         dos.writeUTF(sliceCommand.column_family);
-        dos.writeInt(sliceCommand.super_column == null ? 0 : sliceCommand.super_column.remaining());
-        if (sliceCommand.super_column != null)
-            dos.write(sliceCommand.super_column.array(),sliceCommand.super_column.position()+sliceCommand.super_column.arrayOffset(),sliceCommand.super_column.remaining());
+        ByteBuffer sc = sliceCommand.super_column;
+        dos.writeInt(sc == null ? 0 : sc.remaining());
+        if (sc != null)
+            dos.write(sc.array(), sc.position() + sc.arrayOffset(), sc.remaining());
 
         TSerializer ser = new TSerializer(new TBinaryProtocol.Factory());
         FBUtilities.serialize(ser, sliceCommand.predicate, dos);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
index 60f3dcd1..165ef08a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
@@ -88,7 +88,7 @@ public void setIsDigestQuery(boolean isDigestQuery)
 	public void serialize(ReadResponse rm, DataOutputStream dos) throws IOException
 	{
         dos.writeInt(rm.digest().remaining());
-        dos.write(rm.digest().array(),rm.digest().position()+rm.digest().arrayOffset(),rm.digest().remaining());
+        dos.write(rm.digest().array(), rm.digest().position() + rm.digest().arrayOffset(), rm.digest().remaining());
         dos.writeBoolean(rm.isDigestQuery());
         
         if( !rm.isDigestQuery() && rm.row() != null )
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
index a5ca3a26..db2862b9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
@@ -178,9 +178,9 @@ private static void forceBlockingFlush(String cfname)
             {
                 try
                 {
-                    byte[] addr = new byte[column.value().remaining()];
-                    System.arraycopy(column.value().array(), column.value().position()+column.value().arrayOffset(), addr, 0, column.value().remaining());
-                    
+                    ByteBuffer v = column.value();
+                    byte[] addr = new byte[v.remaining()];
+                    System.arraycopy(v.array(), v.position() + v.arrayOffset(), addr, 0, v.remaining());
                     tokenMap.put(p.getTokenFactory().fromByteArray(column.name()), InetAddress.getByAddress(addr));
                 }
                 catch (UnknownHostException e)
@@ -304,8 +304,10 @@ public static boolean isBootstrapped()
                                                         new QueryPath(STATUS_CF),
                                                         BOOTSTRAP);
         ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(filter);
+        if (cf == null)
+            return false;
         IColumn c = cf.getColumn(BOOTSTRAP);
-        return cf != null && c.value().array()[c.value().position()+c.value().arrayOffset()] == 1;
+        return c.value().get(0) == 1;
     }
 
     public static void setBootstrapped(boolean isBootstrapped)
