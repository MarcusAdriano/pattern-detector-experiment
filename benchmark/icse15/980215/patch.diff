diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
index 4a8dc5ae..60f7bb28 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
@@ -50,6 +50,40 @@ public KSMetaData(String name, Class<? extends AbstractReplicationStrategy> stra
         this.cfMetaData = Collections.unmodifiableMap(cfmap);
     }
     
+    /**
+     * Copies this KSMetaData, adding an additional ColumnFamily.
+     */
+    public KSMetaData withColumnFamily(CFMetaData cfm)
+    {
+        List<CFMetaData> newCfs = new ArrayList<CFMetaData>(cfMetaData().values());
+        newCfs.add(cfm);
+        return new KSMetaData(name, strategyClass, replicationFactor, newCfs.toArray(new CFMetaData[newCfs.size()]));
+    }
+
+    /**
+     * Copies this KSMetaData, removing the ColumnFamily with the given name (which must exist).
+     */
+    public KSMetaData withoutColumnFamily(String cfName)
+    {
+        CFMetaData cfm = cfMetaData().get(cfName);
+        List<CFMetaData> newCfs = new ArrayList<CFMetaData>(cfMetaData().values());
+        newCfs.remove(cfm);
+        assert newCfs.size() == cfMetaData().size() - 1;
+        return new KSMetaData(name, strategyClass, replicationFactor, newCfs.toArray(new CFMetaData[newCfs.size()]));
+    }
+
+    /**
+     * Copies this KSMetaData, returning a renamed copy.
+     */
+    public KSMetaData withName(String ksName)
+    {
+        // cfs will need to have their tablenames reset, but their ids will not change
+        List<CFMetaData> newCfs = new ArrayList<CFMetaData>(cfMetaData().size());
+        for (CFMetaData oldCf : cfMetaData().values())
+            newCfs.add(CFMetaData.renameTable(oldCf, ksName));
+        return new KSMetaData(ksName, strategyClass, replicationFactor, newCfs.toArray(new CFMetaData[newCfs.size()]));
+    }
+
     public boolean equals(Object obj)
     {
         if (obj == null)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
index b30692ab..579f185b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
@@ -73,23 +73,16 @@ else if (ksm.cfMetaData().containsKey(cfm.cfName))
             throw new ConfigurationException("CF is already defined in that keyspace.");
         
         // clone ksm but include the new cf def.
-        KSMetaData newKsm = makeNewKeyspaceDefinition(ksm);
+        KSMetaData newKsm = ksm.withColumnFamily(cfm);
         
         rm = Migration.makeDefinitionMutation(newKsm, null, newVersion);
     }
     
-    private KSMetaData makeNewKeyspaceDefinition(KSMetaData ksm)
-    {
-        List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().values());
-        newCfs.add(cfm);
-        return new KSMetaData(ksm.name, ksm.strategyClass, ksm.replicationFactor, newCfs.toArray(new CFMetaData[newCfs.size()]));
-    }
-    
     public void applyModels() throws IOException
     {
         // reinitialize the table.
         KSMetaData ksm = DatabaseDescriptor.getTableDefinition(cfm.tableName);
-        ksm = makeNewKeyspaceDefinition(ksm);
+        ksm = ksm.withColumnFamily(cfm);
         try
         {
             CFMetaData.map(cfm);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java
index b5794051..b2454ac4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/DropColumnFamily.java
@@ -70,20 +70,10 @@ public DropColumnFamily(String tableName, String cfName, boolean blockOnFileDele
         else if (!ksm.cfMetaData().containsKey(cfName))
             throw new ConfigurationException("CF is not defined in that keyspace.");
         
-        KSMetaData newKsm = makeNewKeyspaceDefinition(ksm);
+        KSMetaData newKsm = ksm.withoutColumnFamily(cfName);
         rm = Migration.makeDefinitionMutation(newKsm, null, newVersion);
     }
 
-    private KSMetaData makeNewKeyspaceDefinition(KSMetaData ksm)
-    {
-        // clone ksm but do not include the new def
-        CFMetaData cfm = ksm.cfMetaData().get(cfName);
-        List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().values());
-        newCfs.remove(cfm);
-        assert newCfs.size() == ksm.cfMetaData().size() - 1;
-        return new KSMetaData(ksm.name, ksm.strategyClass, ksm.replicationFactor, newCfs.toArray(new CFMetaData[newCfs.size()]));
-    }
-
     @Override
     public void beforeApplyModels()
     {
@@ -105,7 +95,7 @@ public void applyModels() throws IOException
         // reinitialize the table.
         KSMetaData existing = DatabaseDescriptor.getTableDefinition(tableName);
         CFMetaData cfm = existing.cfMetaData().get(cfName);
-        KSMetaData ksm = makeNewKeyspaceDefinition(existing);
+        KSMetaData ksm = existing.withoutColumnFamily(cfName);
         CFMetaData.purge(cfm);
         DatabaseDescriptor.setTableDefinition(ksm, newVersion);
         
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
index 66727f46..b113f6be 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
@@ -38,8 +38,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 public class RenameColumnFamily extends Migration
 {
     private static final Serializer serializer = new Serializer();
@@ -86,12 +84,8 @@ public RenameColumnFamily(String tableName, String oldName, String newName) thro
     private KSMetaData makeNewKeyspaceDefinition(KSMetaData ksm)
     {
         CFMetaData oldCfm = ksm.cfMetaData().get(oldName);
-        List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().values());
-        newCfs.remove(oldCfm);
-        assert newCfs.size() == ksm.cfMetaData().size() - 1;
-        CFMetaData newCfm = CFMetaData.rename(oldCfm, newName);
-        newCfs.add(newCfm);
-        return new KSMetaData(ksm.name, ksm.strategyClass, ksm.replicationFactor, newCfs.toArray(new CFMetaData[newCfs.size()]));
+        KSMetaData temp = ksm.withoutColumnFamily(oldName);
+        return temp.withColumnFamily(CFMetaData.rename(oldCfm, newName));
     }
 
     @Override
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
index 04b09a44..db0f8bf6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
@@ -69,25 +69,11 @@ public RenameKeyspace(String oldName, String newName) throws ConfigurationExcept
             throw new ConfigurationException("Keyspace already exists.");
         
         // clone the ksm, replacing thename.
-        KSMetaData newKsm = rename(oldKsm, newName, false); 
+        KSMetaData newKsm = oldKsm.withName(newName); 
         
         rm = makeDefinitionMutation(newKsm, oldKsm, newVersion);
     }
     
-    private static KSMetaData rename(KSMetaData ksm, String newName, boolean purgeOldCfs)
-    {
-        // cfs will need to have their tablenames reset. CFMetaData are immutable, so new ones get created with the
-        // same ids.
-        List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().size());
-        for (CFMetaData oldCf : ksm.cfMetaData().values())
-        {
-            if (purgeOldCfs)
-                CFMetaData.purge(oldCf);
-            newCfs.add(CFMetaData.renameTable(oldCf, newName));
-        }
-        return new KSMetaData(newName, ksm.strategyClass, ksm.replicationFactor, newCfs.toArray(new CFMetaData[newCfs.size()]));
-    }
-
     @Override
     public ICompactSerializer getSerializer()
     {
@@ -102,8 +88,9 @@ public void applyModels() throws IOException
         
         KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(oldName);
         for (CFMetaData cfm : oldKsm.cfMetaData().values())
+            // remove cf mappings for previous ksname
             CFMetaData.purge(cfm);
-        KSMetaData newKsm = rename(oldKsm, newName, true);
+        KSMetaData newKsm = oldKsm.withName(newName);
         for (CFMetaData cfm : newKsm.cfMetaData().values())
         {
             try
