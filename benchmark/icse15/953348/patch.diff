diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java b/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
index 16436b84..8bc7c220 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
@@ -46,7 +46,12 @@
     private final long endPosition;
     private final InetAddress to;
 
-    FileStreamTask(String file, long startPosition, long endPosition, InetAddress from, InetAddress to)
+    FileStreamTask(String file, InetAddress to)
+    {
+        this(file, 0, new File(file).length(), to);
+    }
+
+    private FileStreamTask(String file, long startPosition, long endPosition, InetAddress to)
     {
         this.file = file;
         this.startPosition = startPosition;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index 8d6e570b..26e1fe47 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -306,15 +306,13 @@ public IAsyncResult sendRR(Message message, InetAddress to)
      * Stream a file from source to destination. This is highly optimized
      * to not hold any of the contents of the file in memory.
      * @param file name of file to stream.
-     * @param startPosition position inside the file
-     * @param endPosition
      * @param to endpoint to which we need to stream the file.
     */
 
-    public void stream(String file, long startPosition, long endPosition, InetAddress from, InetAddress to)
+    public void stream(String file, InetAddress to)
     {
         /* Streaming asynchronously on streamExector_ threads. */
-        Runnable streamingTask = new FileStreamTask(file, startPosition, endPosition, from, to);
+        Runnable streamingTask = new FileStreamTask(file, to);
         streamExecutor_.execute(streamingTask);
     }
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
index 19e3f0a1..3ca6b0e9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
@@ -40,7 +40,8 @@ public IncomingStreamReader(SocketChannel socketChannel)
     {
         this.socketChannel = socketChannel;
         InetSocketAddress remoteAddress = (InetSocketAddress)socketChannel.socket().getRemoteSocketAddress();
-        // this is the part where we are assuming files come in order from a particular host.
+        // this is the part where we are assuming files come in order from a particular host. it is brittle because
+        // any node could send a stream message to this host and it would just assume it is receiving the next file.
         pendingFile = StreamInManager.getNextIncomingFile(remoteAddress.getAddress());
         StreamInManager.activeStreams.put(remoteAddress.getAddress(), pendingFile);
         assert pendingFile != null;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
index ae7c9efc..bf13347e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
@@ -130,7 +130,7 @@ public void startNext()
             File file = new File(files.get(0).getFilename());
             if (logger.isDebugEnabled())
               logger.debug("Streaming " + file.length() + " length file " + file + " ...");
-            MessagingService.instance.stream(file.getAbsolutePath(), 0L, file.length(), FBUtilities.getLocalAddress(), to);
+            MessagingService.instance.stream(file.getAbsolutePath(), to);
         }
     }
 
