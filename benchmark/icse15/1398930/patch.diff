diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java
index 4ce1c445..2800b0fa 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java
@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.types;
 
+import java.sql.Clob;
+
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
@@ -66,6 +68,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         setCollator(collatorForCharacterDatatypes);
 	}
 
+	/**
+     * Create SQL CLOB value initially set to value that
+     * performs collation according to collatorForCharacterDatatypes 
+     */
+	CollatorSQLClob(Clob val, RuleBasedCollator collatorForCharacterDatatypes)
+	{
+		super(val);
+        setCollator(collatorForCharacterDatatypes);
+	}
+
 	/**
 	 * Set the RuleBasedCollator for this instance of CollatorSQLClob. It will
 	 * be used to do the collation.
@@ -136,7 +148,7 @@ public DataValueDescriptor cloneValue(boolean forceMaterialization)
 	 */
 	public DataValueDescriptor getNewNull()
 	{
-		CollatorSQLClob result = new CollatorSQLClob(null,
+		CollatorSQLClob result = new CollatorSQLClob((String) null,
 				holderForCollationSensitiveInfo.getCollatorForCollation());
 		return result;
 	}
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactory.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactory.java
index 5ee42613..d3e3adda 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactory.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactory.java
@@ -243,6 +243,18 @@ StringDataValue getLongvarcharDataValue(String value, StringDataValue previous,
         StringDataValue getClobDataValue(String value, StringDataValue previous,
                 int collationType) throws StandardException;
 
+        /**
+         * Get a StringDataValue to represent a SQL CLOB with the
+         * passed in collationType. A null argument means get a SQL NULL value.
+         * If previous is not null (Java reference) then it will be set
+         * to the value passed in and returned, otherwise a new StringDataValue
+         * will be created and set to the value.
+         * If collationType is equal to StringDataValue.COLLATION_TYPE_UCS_BASIC
+         * then the call is the equivalent of the overload without collationType.
+         */
+        StringDataValue getClobDataValue(Clob value, StringDataValue previous,
+                int collationType) throws StandardException;
+
         /**
          * Get a User-defined data value with the given value and type name.
          * A null argument means get a SQL null value.  The second arg uses
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java
index 8467bd29..85f7b179 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java
@@ -519,6 +519,22 @@ public StringDataValue getClobDataValue(Clob value, StringDataValue previous) th
             return previous;
         }
 
+        public StringDataValue getClobDataValue(Clob value,
+                StringDataValue previous, int collationType)
+            throws StandardException
+        {
+            if (collationType == StringDataValue.COLLATION_TYPE_UCS_BASIC)
+                return getClobDataValue(value, previous);
+            
+            if (previous == null)
+            {
+                return new CollatorSQLClob(value,
+                        getCharacterCollator(collationType));
+            }
+            
+            previous.setValue(value);
+            return previous;
+        }
     
         /**
          * Return a StringDataValue to represent a SQL CLOB
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 59f77b73..74e18a3b 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -21,6 +21,7 @@
 
 package org.apache.derbyTesting.functionTests.tests.lang;
 
+import java.sql.Clob;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.PreparedStatement;
@@ -37,6 +38,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.apache.derby.iapi.types.HarmonySerialClob;
+
 import org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest;
 import org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest;
 import org.apache.derbyTesting.functionTests.tests.nist.NistScripts;
@@ -2150,4 +2153,34 @@ private static Test collatedSuite(String locale, boolean caseInsensitive, String
 		  : Decorator.territoryCollatedDatabase(suite, locale);
   }
 
+    /**
+     * Test for an overload which was missing.
+     */
+    public void test_5951() throws Exception
+    {
+        Statement s = createStatement();
+        
+        ResultSet rs = null;
+        s.execute("CREATE TABLE derby5951( a clob )");
+        s.execute
+            (
+             "create function makeClob( contents varchar( 32672 ) ) returns clob\n" +
+             "language java parameter style java no sql deterministic\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.lang.CollationTest.makeClob'\n"
+             );
+        s.executeUpdate("INSERT INTO derby5951 VALUES( makeClob( 'a' ) )");
+        rs = s.executeQuery("select * from derby5591");
+        JDBC.assertFullResultSet(rs,
+                                 new String[][] {{"a"}});
+        
+        s.executeUpdate("DROP TABLE derby5591");
+        s.executeUpdate("DROP function makeClob");
+    }
+
+   /** Clob-creating function */
+    public  static  Clob    makeClob( String contents ) throws Exception
+    {
+        return new HarmonySerialClob( contents );
+    }
+
 }
