diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java
index 154c0a31..7103093e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java
@@ -563,7 +563,12 @@ private static void traverseAndBuildConditionalFPTreeData(int firstConditionalNo
         }
 
         if (prevConditional != -1) { // if there is a child element
+          int prevParent = conditionalTree.parent(prevConditional);
+          if (prevParent == -1) {
           conditionalTree.setParent(prevConditional, conditional);
+	        } else if (prevParent != conditional) {
+	          throw new IllegalStateException();
+          }
         }
 
         conditionalTree.addCount(conditional, nextNodeCount);
@@ -572,12 +577,16 @@ private static void traverseAndBuildConditionalFPTreeData(int firstConditionalNo
         pathNode = tree.parent(pathNode);
 
       }
+
       if (prevConditional != -1) {
+        int prevParent = conditionalTree.parent(prevConditional);
+        if (prevParent == -1) {
         conditionalTree.setParent(prevConditional, FPTree.ROOTNODEID);
-        if (conditionalTree.childCount(FPTree.ROOTNODEID) > 1
-            && conditionalTree.singlePath()) {
+	      } else if (prevParent != FPTree.ROOTNODEID) {
+          throw new IllegalStateException();
+        }
+        if (conditionalTree.childCount(FPTree.ROOTNODEID) > 1 && conditionalTree.singlePath()) {
           conditionalTree.setSinglePath(false);
-
         }
       }
       conditionalNode = tree.next(conditionalNode);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java
index 995863b5..7b00d5e2 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java
@@ -409,4 +409,33 @@ private void resizeHeaderTable() {
     System.arraycopy(oldProperties, 0, this.headerTableProperties, 0,
       headerTableCount);
   }
+
+  private void toStringHelper(StringBuilder sb, int currNode, String prefix) {
+    if (childCount[currNode] == 0) {
+      sb.append(prefix).append("-{attr:").append(attribute[currNode])
+        .append(", id: ").append(currNode)
+        .append(", cnt:").append(nodeCount[currNode]).append("}\n");
+    } else {
+      StringBuilder newPre = new StringBuilder(prefix);
+      newPre.append("-{attr:").append(attribute[currNode])
+        .append(", id: ").append(currNode)
+        .append(", cnt:").append(nodeCount[currNode]).append('}');
+      StringBuilder fakePre = new StringBuilder();
+      while (fakePre.length() < newPre.length()) {
+        fakePre.append(' ');
+      }
+      for (int i = 0; i < childCount[currNode]; i++) {
+        toStringHelper(sb, nodeChildren[currNode][i], (i == 0 ? newPre : fakePre).toString() + '-' + i + "->");
+      }
+    }
+  }
+  
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder("[FPTree\n");
+    toStringHelper(sb, 0, "  ");
+    sb.append("\n]\n");
+    return sb.toString();
+  }
+
 }
