diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 74494677..07a82464 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -25,9 +25,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 import java.io.Reader;
 import java.sql.SQLException;
+import java.util.Arrays;
 import org.apache.derby.client.am.SQLExceptionFactory;
 import org.apache.derby.shared.common.reference.SQLState;
-import org.apache.derby.shared.common.i18n.MessageUtil;
 import org.apache.derby.shared.common.sanity.SanityManager;
 
 public abstract class ResultSet implements java.sql.ResultSet,
@@ -205,7 +205,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // do not affect the resultSet after it has been created
     private int maxRows_;
     
-    private boolean[] streamUsedFlags_;
+    /**
+     * Indicates which columns have been fetched as a stream or as a LOB for a
+     * row. Created on-demand by a getXXXStream or a get[BC]lob call. Note that
+     * we only track columns that can be accessed as a stream or a LOB object.
+     */
+    private boolean[] columnUsedFlags_;
     
     //---------------------constructors/finalizer---------------------------------
 
@@ -294,7 +299,7 @@ boolean nextX() throws SqlException {
         // discard all previous updates when moving the cursor
         resetUpdatedColumns();
 	
-	unuseStreams();
+        unuseStreamsAndLOBs();
 
         // for TYPE_FORWARD_ONLY ResultSet, just call cursor.next()
         if (resultSetType_ == java.sql.ResultSet.TYPE_FORWARD_ONLY) {
@@ -1119,7 +1124,7 @@ public String getString(int column) throws SQLException {
             }
 
             checkGetterPreconditions(column);
-        useStream(column);
+            useStreamOrLOB(column);
 
             java.io.InputStream result = null;
             if (wasNonNullSensitiveUpdate(column)) {
@@ -1150,7 +1155,7 @@ public String getString(int column) throws SQLException {
             }
 
             checkGetterPreconditions(column);
-        useStream(column);
+            useStreamOrLOB(column);
 
             java.io.InputStream result = null;
             if (wasNonNullSensitiveUpdate(column)) {
@@ -1201,7 +1206,7 @@ public String getString(int column) throws SQLException {
             }
 
             checkGetterPreconditions(column);
-        useStream(column);
+            useStreamOrLOB(column);
 
             java.io.Reader result = null;
             if (wasNonNullSensitiveUpdate(column)) {
@@ -1232,6 +1237,7 @@ public String getString(int column) throws SQLException {
                 agent_.logWriter_.traceEntry(this, "getBlob", column);
             }
             checkGetterPreconditions(column);
+            useStreamOrLOB(column);
             java.sql.Blob result = null;
             if (wasNonNullSensitiveUpdate(column)) {
                 result = (java.sql.Blob) agent_.crossConverters_.setObject(java.sql.Types.BLOB,
@@ -1261,6 +1267,7 @@ public String getString(int column) throws SQLException {
                 agent_.logWriter_.traceEntry(this, "getClob", column);
             }
             checkGetterPreconditions(column);
+            useStreamOrLOB(column);
             java.sql.Clob result = null;
             if (wasNonNullSensitiveUpdate(column)) {
                 result = (java.sql.Clob) agent_.crossConverters_.setObject(java.sql.Types.CLOB,
@@ -2097,7 +2104,7 @@ public void beforeFirst() throws SQLException {
     private void beforeFirstX() throws SqlException {
         
 	resetRowsetFlags();
-	unuseStreams();
+        unuseStreamsAndLOBs();
 
         moveToCurrentRowX();
 
@@ -2137,7 +2144,7 @@ public void afterLast() throws SQLException {
 
     private void afterLastX() throws SqlException {
         resetRowsetFlags();
-    unuseStreams();
+        unuseStreamsAndLOBs();
     
         moveToCurrentRowX();
 
@@ -2189,7 +2196,7 @@ private boolean firstX() throws SqlException {
         resetUpdatedColumns();
 
         resetRowsetFlags();
-    unuseStreams();
+        unuseStreamsAndLOBs();
 
         // if first row is not in the current rowset, fetch the first rowset from the server.
         // rowIsInCurrentRowset with orientation first will always return false for dynamic cursors.
@@ -2244,7 +2251,7 @@ private boolean lastX() throws SqlException {
         resetUpdatedColumns();
 
         resetRowsetFlags();
-	unuseStreams();
+        unuseStreamsAndLOBs();
 
         // only get the rowCount for static cursors.
         if (rowCountIsUnknown()) {
@@ -2361,7 +2368,7 @@ public boolean absoluteX(int row) throws SqlException {
         resetUpdatedColumns();
 
         resetRowsetFlags();
-	unuseStreams();
+        unuseStreamsAndLOBs();
 
         if (maxRows_ > 0) {
             // if "row" is positive and > maxRows, fetch afterLast
@@ -2444,8 +2451,7 @@ private boolean relativeX(int rows) throws SqlException {
 
         // discard all previous updates when moving the cursor.
         resetUpdatedColumns();
-	
-	unuseStreams();
+        unuseStreamsAndLOBs();
 
         // If the resultset is empty, relative(n) is a null operation
         if (resultSetContainsNoRows()) {
@@ -2571,8 +2577,7 @@ private boolean previousX() throws SqlException {
 
         // discard all previous updates when moving the cursor.
         resetUpdatedColumns();
-	
-	unuseStreams();
+        unuseStreamsAndLOBs();
 
         isBeforeFirst_ = false;
         isFirst_ = false;
@@ -3692,7 +3697,7 @@ private void refreshRowX() throws SqlException {
                 throw new SqlException(sqle);
             }
 	    
-    	    unuseStreams();
+            unuseStreamsAndLOBs();
 	    
         }
     }
@@ -5486,33 +5491,34 @@ private void closeCloseFilterInputStream() throws SqlException {
 	}
     
     
-    void useStream(int columnIndex) throws SqlException {
-	
-	if(streamUsedFlags_[columnIndex - 1]){
+    /**
+     * Mark a column as already having a stream or LOB accessed from it.
+     * If the column was already accessed, throw an exception.
+     *
+     * @param columnIndex 1-based column index
+     * @throws SQLException if the column has already been accessed
+     */
+    void useStreamOrLOB(int columnIndex) throws SqlException {
+        if (columnUsedFlags_ == null) {
+            columnUsedFlags_ = new boolean[resultSetMetaData_.columns_];
+        }
+        if (columnUsedFlags_[columnIndex - 1]) {
 	    throw new SqlException(agent_.logWriter_,
             new ClientMessageId(SQLState.LANG_STREAM_RETRIEVED_ALREADY));
 	}
 
-	streamUsedFlags_[columnIndex - 1] = true;
-
+        columnUsedFlags_[columnIndex - 1] = true;
     }
 
 
-    private void unuseStreams(){
-	
-	if(streamUsedFlags_ == null){
-	    streamUsedFlags_ = new boolean[ resultSetMetaData_.columns_ ];
-	    return;
-	}
-
-	for(int i = 0;
-	    i < streamUsedFlags_.length;
-	    i ++){
-	    
-	    streamUsedFlags_[i] = false;
-	    
+    /**
+     * Clears the flags for used columns, typically invoked when changing the
+     * result set position.
+     */
+    private void unuseStreamsAndLOBs() {
+        if(columnUsedFlags_ != null){
+            Arrays.fill(columnUsedFlags_, false);
 	}
-	
     }
 
     private SQLException jdbc3MethodNotSupported()
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 8fe32cbe..04546b06 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -203,10 +203,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private int fetchSize;
     
     /**
-     * Indicates which columns have already been fetched
-     * as a stream for a row. Created on-demand by a getXXXStream call.
+     * Indicates which columns have been fetched as a stream or as a LOB for a
+     * row. Created on-demand by a getXXXStream or a get[BC]lob call. Note that
+     * we only track columns that can be accessed as a stream or a LOB object.
      */
-    private boolean[] streamUsedFlags;
+    private boolean[] columnUsedFlags;
     
 	/**
 	 * This class provides the glue between the Derby
@@ -509,8 +510,8 @@ protected boolean movePosition(int position, int row, String positionText)
 		    }
 
 			// Clear the indication of which columns were fetched as streams.
-			if (streamUsedFlags != null)
-			    Arrays.fill(streamUsedFlags, false);
+            if (columnUsedFlags != null)
+                Arrays.fill(columnUsedFlags, false);
 			if (columnGotUpdated != null && currentRowHasBeenUpdated) {
 				initializeUpdateRowModifiers();
 			}
@@ -1125,7 +1126,7 @@ public final Timestamp getTimestamp(int columnIndex) throws SQLException {
 		boolean pushStack = false;
 		try {
 
-		    useStream(columnIndex);
+            useStreamOrLOB(columnIndex);
 
             StringDataValue dvd = (StringDataValue)getColumn(columnIndex);
 
@@ -1238,7 +1239,7 @@ public final InputStream getBinaryStream(int columnIndex) throws SQLException {
 		boolean pushStack = false;
 		try {
 		    
-		    useStream(columnIndex);
+            useStreamOrLOB(columnIndex);
 
 			DataValueDescriptor dvd = getColumn(columnIndex);
 
@@ -3956,6 +3957,8 @@ public Blob getBlob(int columnIndex) throws SQLException {
 		// on the underlying connection. Do this
 		// outside of the connection synchronization.
 
+        useStreamOrLOB(columnIndex);
+
 		synchronized (getConnectionSynchronization()) {
 			int colType = getColumnType(columnIndex);
 
@@ -4007,6 +4010,8 @@ public final Clob getClob(int columnIndex) throws SQLException {
 		// on the underlying connection. Do this
 		// outside of the connection synchronization.
 
+        useStreamOrLOB(columnIndex);
+
 		synchronized (getConnectionSynchronization()) {
 			int colType = getColumnType(columnIndex);
 
@@ -4547,20 +4552,19 @@ private final SQLException dataTypeConversion(int column, String targetType) {
 	}
     
     /**
-     * Mark a column as already having a stream accessed from it.
-     * If the stream was already accessed, then throw an exception.
-     * @param columnIndex
-     * @throws SQLException
+     * Mark a column as already having a stream or LOB accessed from it.
+     * If the column was already accessed, throw an exception.
+     *
+     * @param columnIndex 1-based column index
+     * @throws SQLException if the column has already been accessed
      */
-    final void useStream(int columnIndex) throws SQLException {
-    	
-    	if (streamUsedFlags == null)
-    		streamUsedFlags = new boolean[getMetaData().getColumnCount()];
-    	
-    	else if (streamUsedFlags[columnIndex - 1])
+    final void useStreamOrLOB(int columnIndex) throws SQLException {
+        if (columnUsedFlags == null) {
+            columnUsedFlags = new boolean[getMetaData().getColumnCount()];
+        } else if (columnUsedFlags[columnIndex - 1]) {
 	        throw newSQLException(SQLState.LANG_STREAM_RETRIEVED_ALREADY);
-    	
-    	streamUsedFlags[columnIndex - 1] = true;
+        }
+        columnUsedFlags[columnIndex - 1] = true;
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index efac73c5..5efd54e2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -422,12 +422,13 @@ public void testTriggersWithClobColumn() throws Exception {
             assertTrue("statement trigger produced less rows " +
                     count, trigBRS.next());
 
-            if (origRS.getClob(1) != null) {
+            Clob origClob = origRS.getClob(1);
+            if (origClob != null) {
                 assertEquals("FAIL - Invalid checksum for row trigger",
-                        getStreamCheckSum(origRS.getClob(1).getAsciiStream()),
+                        getStreamCheckSum(origClob.getAsciiStream()),
                         getStreamCheckSum(trigARS.getClob(1).getAsciiStream()));
                 assertEquals("FAIL - Invalid checksum for statement trigger",
-                        getStreamCheckSum(origRS.getClob(1).getAsciiStream()),
+                        getStreamCheckSum(origClob.getAsciiStream()),
                         getStreamCheckSum(trigBRS.getClob(1).getAsciiStream()));
             }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java
index a876c0bd..97e1bbaf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java
@@ -27,14 +27,15 @@
 
 import java.sql.Blob;
 import java.sql.Clob;
-import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.sql.Statement;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
 import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.Decorator;
@@ -86,6 +87,127 @@ public void setUp() throws Exception {
         stmt2.close();
     }
 
+    /**
+     * Originally tested that the usage pattern {@code rs.getBlob().method()}
+     * didn't cause the underlying source stream to be closed too early. This
+     * behavior was forbidden, the test now checks that an exception is thrown.
+     * <p>
+     * Test description: Select from a BLOB column, access the BLOB using the
+     * pattern rs.getBlob(1).blobMethod() (note that we do not keep a reference
+     * to the Blob-object), provoke/invoke GC and finalization, and finally try
+     * to access the same BLOB again (through a different/another call to
+     * rs.getBlob(1)).
+     * <p>
+     * Note that the BLOB must be of a certain size (i.e. multiple pages), such
+     * that it is stored/accessed as a stream in store.
+     * <p>
+     * See DERBY-3844 and DERBY-4440.
+     *
+     * @throws Exception if something goes wrong
+     */
+    public void testGettingBlobTwice()
+            throws Exception {
+        setAutoCommit(false);
+        // We need a Blob represented as a stream in store.
+        int length = 71*1024+7;
+        PreparedStatement ps =
+                prepareStatement("insert into testBlobX1(a,b) values (?,?)");
+        ps.setInt(1, 2);
+        ps.setBinaryStream(2, new LoopingAlphabetStream(length), length);
+        ps.executeUpdate();
+        ps.close();
+
+        // Get a result set with the Blob.
+        ps = prepareStatement("select b from testBlobX1 where a = ?");
+        ps.setInt(1, 2);
+        ResultSet rs = ps.executeQuery();
+        assertTrue(rs.next());
+        Blob b = rs.getBlob(1);
+        try {
+            // Get the length, but don't keep a reference to the Blob.
+            assertEquals(length, rs.getBlob(1).length());
+            fail("Getting the Blob the second time should have failed");
+        } catch (SQLException sqle) {
+            assertSQLState("XCL18", sqle);
+        }
+
+        // Increase the likelyhood of getting the finalizer run.
+        // Create some junk to fill up the heap, hopefully not JIT'ed away...
+        int size = 10*1024; // 10 K
+        byte[] bytes = null;
+        for (int i=0; i < 50; i++) {
+            bytes = new byte[size *(i +1)];
+        }
+        // For good measure...
+        System.gc();
+        System.runFinalization();
+        try {
+            Thread.sleep(100L);
+        } catch (InterruptedException ie) {
+            // No need to reset the interrupted flag here in the test.
+        }
+
+        // This will fail if the finalizer caused the source stream to be
+        // closed and the source page to be unlatched.
+        InputStream is = b.getBinaryStream();
+        while (is.read() != -1) {
+            // Keep on reading...
+        }
+        assertNotNull(bytes);
+    }
+
+    /**
+     * Tests that accessing the same Clob multiple times on a row results in
+     * an exception being thrown.
+     *
+     * @throws Exception if something goes wrong
+     */
+    public void testGettingClobTwice()
+            throws SQLException {
+        // We need a few Clobs.
+        int length = 71*1024+7;
+        PreparedStatement ps =
+                prepareStatement("insert into testBlobX1(a,c) values (?,?)");
+        ps.setInt(1, 3);
+        ps.setCharacterStream(2, new LoopingAlphabetReader(length), length);
+        ps.executeUpdate();
+        ps.setInt(1, 4);
+        ps.setString(2, "short clob");
+        ps.executeUpdate();
+        ps.close();
+
+        // Get a result set with the Clobs.
+        final int clobCount = 2;
+        int count = 0;
+        ps = prepareStatement(
+                "select c from testBlobX1 where a >= ? and a <= ?");
+        ps.setInt(1, 3);
+        ps.setInt(2, 4);
+        ResultSet rs = ps.executeQuery();
+        assertTrue(rs.next());
+        do {
+            count++;
+            // First get a Clob.
+            Clob c = rs.getClob(1);
+            // Get a second Clob, which should fail.
+            try {
+                rs.getClob(1);
+                fail("Getting the Clob the second time should have failed");
+            } catch (SQLException sqle) {
+                assertSQLState("XCL18", sqle);
+            }
+            // Finally try to access the column as a stream.
+            try {
+                rs.getCharacterStream(1);
+                fail("Getting the Clob the third time should have failed");
+            } catch (SQLException sqle) {
+                assertSQLState("XCL18", sqle);
+            }
+        } while (rs.next());
+        rs.close();
+        assertEquals(clobCount, count);
+    }
+
     /**
      * Tests the BlobOutputStream.write(byte  b[], int off, int len) method
      **/
@@ -120,13 +242,14 @@ public void testBlobWrite3Param() throws Exception {
         rs3 = stmt3.executeQuery();
         assertTrue("FAIL -- blob not found", rs3.next());
 
-        long new_length = rs3.getBlob(1).length();
+        blob = rs3.getBlob(1);
+        long new_length = blob.length();
         assertEquals("FAIL -- wrong blob length;",
                 streamSize[0], new_length);
 
         // Check contents ...
         InputStream fStream = new LoopingAlphabetStream(streamSize[0]);
-        InputStream lStream = rs3.getBlob(1).getBinaryStream();
+        InputStream lStream = blob.getBinaryStream();
         assertTrue("FAIL - Blob and file contents do not match",
                 compareLob2File(fStream, lStream));
 
@@ -169,12 +292,13 @@ public void testBlobWrite1Param() throws Exception {
 
         assertTrue("FAIL -- blob not found", rs3.next());
 
-        long new_length = rs3.getBlob(1).length();
+        blob = rs3.getBlob(1);
+        long new_length = blob.length();
         assertEquals("FAIL -- wrong blob length", streamSize[1], new_length);
 
         // Check contents ...
         InputStream fStream = new LoopingAlphabetStream(streamSize[1]);
-        InputStream lStream = rs3.getBlob(1).getBinaryStream();
+        InputStream lStream = blob.getBinaryStream();
         assertTrue("FAIL - Blob and file contents do not match",
                 compareLob2File(fStream, lStream));
 
@@ -216,12 +340,13 @@ public void testClobAsciiWrite1Param() throws Exception
         rs3 = stmt3.executeQuery();
         assertTrue("FAIL -- clob not found", rs3.next());
 
-        long new_length = rs3.getClob(1).length();
+        clob = rs3.getClob(1);
+        long new_length = clob.length();
         assertEquals("FAIL -- wrong clob length", streamSize[1], new_length);
 
         // Check contents ...
         InputStream fStream = new LoopingAlphabetStream(streamSize[1]);
-        InputStream lStream = rs3.getClob(1).getAsciiStream();
+        InputStream lStream = clob.getAsciiStream();
         assertTrue("FAIL - Clob and file contents do not match", compareLob2File(fStream, lStream));
         fStream.close();
         lStream.close();
@@ -264,12 +389,13 @@ public void testClobAsciiWrite3Param() throws Exception {
 
         assertTrue("FAIL -- clob not found", rs3.next());
 
-        long new_length = rs3.getClob(1).length();
+        clob = rs3.getClob(1);
+        long new_length = clob.length();
         assertEquals("FAIL -- wrong clob length",
                 streamSize[0], new_length);
         // Check contents ...
         InputStream fStream = new LoopingAlphabetStream(streamSize[0]);
-        InputStream lStream = rs3.getClob(1).getAsciiStream();
+        InputStream lStream = clob.getAsciiStream();
         assertTrue("FAIL - Clob and file contents do not match",
                 compareLob2File(fStream, lStream));
 
@@ -306,12 +432,13 @@ public void testClobCharacterWrite3ParamChar() throws Exception
         rs3 = stmt3.executeQuery();
 
         assertTrue("FAIL -- clob not found", rs3.next());
-        long new_length = rs3.getClob(1).length();
+        clob = rs3.getClob(1);
+        long new_length = clob.length();
         assertEquals("FAIL -- wrong clob length",
                 testdata.length, new_length);
 
         // Check contents ...
-        Reader lStream = rs3.getClob(1).getCharacterStream();
+        Reader lStream = clob.getCharacterStream();
         assertTrue("FAIL - Clob and buffer contents do not match",
                 compareClobReader2CharArray(testdata, lStream));
 
@@ -344,11 +471,13 @@ public void testClobCharacterWrite3ParamString() throws Exception
         rs3.close();
         rs3 = stmt3.executeQuery();
         assertTrue("FAIL -- clob not found", rs3.next());
-        long new_length = rs3.getClob(1).length();
+
+        clob = rs3.getClob(1);
+        long new_length = clob.length();
         assertEquals("FAIL -- wrong clob length", unicodeTestString.length(), new_length);
 
         // Check contents ...
-        Reader lStream = rs3.getClob(1).getCharacterStream();
+        Reader lStream = clob.getCharacterStream();
         assertTrue("FAIL - Clob and buffer contents do not match",
                 compareClobReader2CharArray(
                     unicodeTestString.toCharArray(),
@@ -383,11 +512,13 @@ public void testClobCharacterWrite1ParamString() throws Exception
         rs3.close();
         rs3 = stmt3.executeQuery();
         assertTrue("FAIL -- clob not found", rs3.next());
-        long new_length = rs3.getClob(1).length();
+
+        clob = rs3.getClob(1);
+        long new_length = clob.length();
         assertEquals("FAIL -- wrong clob length", unicodeTestString.length(), new_length);
 
         // Check contents ...
-        Reader lStream = rs3.getClob(1).getCharacterStream();
+        Reader lStream = clob.getCharacterStream();
         assertTrue("FAIL - Clob and buffer contents do not match",
                 compareClobReader2CharArray(
                     unicodeTestString.toCharArray(),
@@ -425,11 +556,12 @@ public void testClobCharacterWrite1Char() throws Exception
         rs3.close();
         rs3 = stmt3.executeQuery();
         assertTrue("FAIL -- clob not found", rs3.next());
-        long new_length = rs3.getClob(1).length();
-        Clob fish = rs3.getClob(1);
+
+        clob = rs3.getClob(1);
+        long new_length = clob.length();
         assertEquals("FAIL -- wrong clob length", 1, new_length);
         // Check contents ...
-        Reader lStream = rs3.getClob(1).getCharacterStream();
+        Reader lStream = clob.getCharacterStream();
         char clobchar = (char) lStream.read();
         assertEquals("FAIL - fetched Clob and original contents do " +
                 "not match", testchar, clobchar);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index 659c7143..5fd23d34 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -2058,12 +2058,14 @@ private void assertResults( int[] expectedJdbcTypes, String[] columnNames, Resul
                     break;
 
                 case Types.BLOB:
-                    actualValue = squeezeString(  rs.getBlob( column ) );
-                    actualValueByName = squeezeString(  rs.getBlob( columnName ) );
+                    Blob blob = rs.getBlob(column);
+                    actualValue = squeezeString(blob);
+                    actualValueByName = squeezeString(blob);
                     break;
                 case Types.CLOB:
-                    actualValue = squeezeString(  rs.getClob( column ) );
-                    actualValueByName = squeezeString(  rs.getClob( columnName ) );
+                    Clob clob = rs.getClob(column);
+                    actualValue = squeezeString(clob);
+                    actualValueByName = squeezeString(clob);
                     break;
 
                 case Types.BINARY:
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java
index 94d732b2..350b877e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java
@@ -4518,11 +4518,12 @@ private void verifyData(int sqlType, int updateXXXName)
                             rs1.getBytes(updateXXXName)));
         } else if (sqlType == 13 && JDBC.vmSupportsJDBC3()) {
             // verify update made to CLOB column with updateXXX methods
-            int len = (int)rs.getClob(sqlType).length();
+            Clob clob = rs.getClob(sqlType);
+            int len = (int)clob.length();
             assertEquals("FAIL - wrong value on " + allSQLTypes[sqlType - 1] + 
                     " using " + allUpdateXXXNames[updateXXXName - 1],
                     rs1.getString(updateXXXName).trim(), 
-                    rs.getClob(sqlType).getSubString(1, len).trim());
+                    clob.getSubString(1, len).trim());
         } else if (sqlType == 14) {
             // verify update made to DATE column with updateXXX methods
             assertEquals("FAIL - wrong value on " + allSQLTypes[sqlType - 1] + 
@@ -4540,10 +4541,11 @@ private void verifyData(int sqlType, int updateXXXName)
                     rs1.getTimestamp(updateXXXName), rs.getTimestamp(sqlType));
         } else if (sqlType == 17 && JDBC.vmSupportsJDBC3()) {
             // verify update made to BLOB column with updateXXX methods
-            long len = rs.getBlob(sqlType).length();
+            Blob blob = rs.getBlob(sqlType);
+            long len = blob.length();
             assertTrue("FAIL - wrong value on " + allSQLTypes[sqlType - 1] + 
                     " using " + allUpdateXXXNames[updateXXXName - 1],
-                    Arrays.equals(rs.getBlob(sqlType).getBytes(1, (int)len), 
+                    Arrays.equals(blob.getBytes(1, (int)len),
                     rs1.getBytes(updateXXXName)));
         }
         
