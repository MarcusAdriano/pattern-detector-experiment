diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java
index 184f3200..a12dcb99 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.daemon.DaemonService;
 import org.apache.derby.impl.services.daemon.BasicDaemon;
 import org.apache.derby.iapi.services.monitor.Monitor;
+import org.apache.derby.iapi.util.PrivilegedThreadOps;
 
 public class SingleThreadDaemonFactory implements DaemonFactory
 {
@@ -46,6 +47,12 @@ public DaemonService createNewDaemon(String name)
 		BasicDaemon daemon = new BasicDaemon(contextService);
 
 		Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);
+		// DERBY-3745.  setContextClassLoader for thread to null to avoid
+		// leaking class loaders.
+		PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
+							  daemonThread, null);
+
+
 		daemonThread.start();
 		return daemon;
 	}
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index d67d772b..d93aa182 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -276,6 +276,11 @@ protected final void runWithState(Properties properties, PrintStream log) {
 		dontGC = new AntiGC(keepItems);
 
 		Thread dontGCthread = getDaemonThread(dontGC, "antiGC", true);
+		// DERBY-3745.  setContextClassLoader for thread to null to avoid
+		// leaking class loaders.
+		PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
+						dontGCthread, null);
+
 		dontGCthread.start();
 
 		if (SanityManager.DEBUG) {
@@ -2079,28 +2084,7 @@ public ResourceBundle getBundle(String messageId) {
 	}
 
 	public Thread getDaemonThread(Runnable task, String name, boolean setMinPriority) {
-		// DERBY-3745 We want to avoid the thread leaking class loaders,
-		// so we make the context class loader null before we create the
-		// thread.
-		ClassLoader savecl = null;
-		boolean hasGetClassLoaderPerms = false;
-		try {
-			savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
-			hasGetClassLoaderPerms = true;
-		}  catch (SecurityException se) {
-			// ignore security exception. Earlier versions of Derby, before
-			// the DERBY-3745 fix did not require getClassLoader permissions.
-			// We may leak class loaders if we are not able to get the 
-			// class loader, but we cannot just fail.
-		}
-		if (hasGetClassLoaderPerms)
-			PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-								 Thread.currentThread(), null);
 		Thread t =  new Thread(daemonGroup, task, "derby.".concat(name));
-		if (hasGetClassLoaderPerms)
-			PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
-							  Thread.currentThread(), savecl);
-
 		t.setDaemon(true);
 
 		if (setMinPriority) {
