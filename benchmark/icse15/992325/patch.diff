diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/similarity/item/ItemSimilarityTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/similarity/item/ItemSimilarityTest.java
index 0e711ae3..7096b3b2 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/similarity/item/ItemSimilarityTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/similarity/item/ItemSimilarityTest.java
@@ -75,7 +75,6 @@ public void testCountUsersMapper() throws Exception {
   /**
    * Applies an {@link IArgumentMatcher} to a {@link CountUsersKeyWritable} checking whether it matches the userID
    */
-  @Test
   static CountUsersKeyWritable keyForUserID(final long userID) {
     EasyMock.reportMatcher(new IArgumentMatcher() {
       @Override
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/df/data/DataTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/df/data/DataTest.java
index b460f28e..4aa035db 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/df/data/DataTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/df/data/DataTest.java
@@ -24,6 +24,7 @@
 import org.apache.mahout.common.MahoutTestCase;
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.df.data.conditions.Condition;
+import org.junit.Test;
 
 public class DataTest extends MahoutTestCase {
 
@@ -46,6 +47,7 @@ public void setUp() throws Exception {
    * Test method for
    * {@link org.apache.mahout.df.data.Data#subset(org.apache.mahout.df.data.conditions.Condition)}.
    */
+  @Test
   public void testSubset() {
     int n = 10;
 
@@ -79,7 +81,7 @@ public void testSubset() {
     }
   }
 
-
+  @Test
   public void testValues() throws Exception {
     Data data = Utils.randomData(rng, ATTRIBUTE_COUNT, DATA_SIZE);
 
@@ -104,6 +106,7 @@ private static int count(double[] values, double value) {
     return count;
   }
 
+  @Test
   public void testIdenticalTrue() throws Exception {
     // generate a small data, only to get the dataset
     Dataset dataset = Utils.randomData(rng, ATTRIBUTE_COUNT, 1).getDataset();
@@ -124,6 +127,7 @@ public void testIdenticalTrue() throws Exception {
     assertTrue(identical.isIdentical());
   }
 
+  @Test
   public void testIdenticalFalse() throws Exception {
     int n = 10;
 
@@ -142,6 +146,7 @@ public void testIdenticalFalse() throws Exception {
     }
   }
 
+  @Test
   public void testIdenticalLabelTrue() throws Exception {
     // generate a small data, only to get a dataset
     Dataset dataset = Utils.randomData(rng, ATTRIBUTE_COUNT, 1).getDataset();
@@ -162,6 +167,7 @@ public void testIdenticalLabelTrue() throws Exception {
     assertTrue(data.identicalLabel());
   }
 
+  @Test
   public void testIdenticalLabelFalse() throws Exception {
     int n = 10;
 
@@ -187,6 +193,7 @@ public void testIdenticalLabelFalse() throws Exception {
    * Test method for
    * {@link org.apache.mahout.df.data.Data#bagging(java.util.Random)}.
    */
+  @Test
   public void testBagging() {
     Data bag = data.bagging(rng);
 
@@ -206,6 +213,7 @@ public void testBagging() {
    * Test method for
    * {@link org.apache.mahout.df.data.Data#rsplit(java.util.Random, int)}.
    */
+  @Test
   public void testRsplit() {
 
     // rsplit should handle empty subsets
@@ -228,6 +236,7 @@ public void testRsplit() {
     assertEquals("source.size is incorrect", DATA_SIZE - subsize, source.size());
   }
 
+  @Test
   public void testCountLabel() throws Exception {
     Data data = Utils.randomData(rng, ATTRIBUTE_COUNT, DATA_SIZE);
     int[] counts = new int[data.getDataset().nblabels()];
@@ -248,6 +257,7 @@ public void testCountLabel() throws Exception {
     }
   }
 
+  @Test
   public void testMajorityLabel() throws Exception {
 
     // all instances have the same label
