diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java
index b466575c..4b592f43 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java
@@ -69,6 +69,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private UUID				defaultUUID;
 	private long				autoincStart;
 	private long				autoincInc;
+	private long				autoincValue;
 	//Following variable is used to see if the user is adding an autoincrement 
 	//column, or if user is altering the existing autoincrement column to change 
 	//the increment value or to change the start value. If none of the above,
@@ -154,6 +155,7 @@ public ColumnDescriptor(String columnName, int columnPosition,
 			      columnDefaultInfo);
 
 		this.autoincStart = autoincStart;
+		this.autoincValue = autoincStart;
 		this.autoincInc = autoincInc;
 
 	}
@@ -176,13 +178,14 @@ public ColumnDescriptor(String columnName, int columnPosition,
 	 * @param defaultUUID			The UUID for the default, if any.
 	 * @param autoincStart	Start value for an autoincrement column.
 	 * @param autoincInc	Increment for autoincrement column
+	 * @param autoincValue	Current value of the autoincrement column
 	 */
 	public ColumnDescriptor(String columnName, int columnPosition,
 		DataTypeDescriptor columnType, DataValueDescriptor columnDefault,
 		DefaultInfo columnDefaultInfo,
 		UUID uuid,
 		UUID defaultUUID,
-        long autoincStart, long autoincInc)
+        long autoincStart, long autoincInc, long autoincValue)
 
 	{
 		this.columnName = columnName;
@@ -198,6 +201,7 @@ public ColumnDescriptor(String columnName, int columnPosition,
 			      columnDefaultInfo);
 		
 		this.autoincStart = autoincStart;
+		this.autoincValue = autoincValue;
 		this.autoincInc = autoincInc;
 	}
 
@@ -380,10 +384,33 @@ public long getAutoincInc()
 		return autoincInc;
 	}
 
+	/**
+	 * Get the current value for an autoincrement column.
+	 *
+	 * One case in which this is used involves dropping a column
+	 * from a table. When ALTER TABLE DROP COLUMN runs, it drops
+	 * the column from SYSCOLUMNS, and then must adjust the
+	 * column positions of the other subsequent columns in the table
+	 * to account for the removal of the dropped columns. This
+	 * involves deleting and re-adding the column descriptors to
+	 * SYSCOLUMNS, but during that process we must be careful to
+	 * preserve the current value of any autoincrement column.
+	 *
+	 * @return the current value for an autoincrement column
+	 */
+	public long getAutoincValue()
+	{
+		return autoincValue;
+	}
+
 	public long getAutoinc_create_or_modify_Start_Increment()
 	{
 		return autoinc_create_or_modify_Start_Increment;
 	}
+	public void setAutoinc_create_or_modify_Start_Increment(int c_or_m)
+	{
+		autoinc_create_or_modify_Start_Increment = c_or_m;
+	}
 
 	/**
 	 * Set the ordinal position of the column.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 81c09e70..ab51c7b6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -3678,7 +3678,7 @@ private void addSPSParams(SPSDescriptor spsd, TransactionController tc, boolean
                         (DataValueDescriptor)parameterDefaults[index],
                     (DefaultInfo) null,
                     uuid,
-                    (UUID) null, 0, 0);
+                    (UUID) null, 0, 0, 0);
 										
 			addDescriptor(cd, null, SYSCOLUMNS_CATALOG_NUM, 
 						  false, // no chance of duplicates here
@@ -3862,7 +3862,7 @@ public void	updateSPS(
 										  (DefaultInfo) null,
 										  uuid,
 										  (UUID) null,
-										  0, 0);
+										  0, 0, 0);
 										
 				updateColumnDescriptor(cd,
 									   cd.getReferencingUUID(), 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java
index 96fe5f6f..230ff13f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java
@@ -154,6 +154,7 @@ public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
 		Object					defaultSerializable = null;
 		long					autoincStart = 0;
 		long					autoincInc = 0;
+		long					autoincValue = 0;
 		//The SYSCOLUMNS table's autoinc related columns change with different
 		//values depending on what happened to the autoinc column, ie is the 
 		//user adding an autoincrement column, or is user changing the existing 
@@ -174,6 +175,7 @@ public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
 			colID = new Integer(column.getPosition() );
 			autoincStart = column.getAutoincStart();
 			autoincInc   = column.getAutoincInc();
+			autoincValue   = column.getAutoincValue();
 			autoinc_create_or_modify_Start_Increment = column.getAutoinc_create_or_modify_Start_Increment();
 			if (column.getDefaultInfo() != null)
 			{
@@ -222,8 +224,15 @@ public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
 		if (autoinc_create_or_modify_Start_Increment == ColumnDefinitionNode.CREATE_AUTOINCREMENT ||
 				autoinc_create_or_modify_Start_Increment == ColumnDefinitionNode.MODIFY_AUTOINCREMENT_INC_VALUE)
 		{//user is adding an autoinc column or is changing the increment value of autoinc column
+			// This code also gets run when ALTER TABLE DROP COLUMN
+			// is used to drop a column other than the autoinc
+			// column, and the autoinc column gets removed from
+			// SYSCOLUMNS and immediately re-added with a different
+			// column position (to account for the dropped column).
+			// In this case, the autoincValue may have a
+			// different value than the autoincStart.
 			row.setColumn(SYSCOLUMNS_AUTOINCREMENTVALUE, 
-						  new SQLLongint(autoincStart));
+						  new SQLLongint(autoincValue));
 			row.setColumn(SYSCOLUMNS_AUTOINCREMENTSTART, 
 						  new SQLLongint(autoincStart));
 			row.setColumn(SYSCOLUMNS_AUTOINCREMENTINC, 
@@ -320,7 +329,7 @@ public TupleDescriptor buildDescriptor(
 		UUID				defaultUUID = null;
 		UUID				uuid = null;
 		UUIDFactory			uuidFactory = getUUIDFactory();
-		long autoincStart, autoincInc;
+		long autoincStart, autoincInc, autoincValue;
 
 		DataDescriptorGenerator	ddg = dd.getDataDescriptorGenerator();
 
@@ -393,7 +402,8 @@ else if (object instanceof DefaultInfoImpl)
 		DataTypeDescriptor dataTypeServices = 
 			DataTypeDescriptor.getType(catalogType);
 
-		/* 7th column is AUTOINCREMENTVALUE, not cached in descriptor (long) */
+		/* 7th column is AUTOINCREMENTVALUE (long) */
+		autoincValue = row.getColumn(SYSCOLUMNS_AUTOINCREMENTVALUE).getLong();
 
 		/* 8th column is AUTOINCREMENTSTART (long) */
 		autoincStart = row.getColumn(SYSCOLUMNS_AUTOINCREMENTSTART).getLong();
@@ -409,7 +419,8 @@ else if (object instanceof DefaultInfoImpl)
 
 		colDesc = new ColumnDescriptor(columnName, columnNumber,
 							dataTypeServices, defaultValue, defaultInfo, uuid, 
-							defaultUUID, autoincStart, autoincInc);
+							defaultUUID, autoincStart, autoincInc,
+                            autoincValue);
 		return colDesc;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index 121ace4a..663a7eb7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -79,6 +79,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.RowLocation;
 import org.apache.derby.iapi.types.StringDataValue;
 import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
+import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;
 
 /**
  *	This class  describes actions that are ALWAYS performed for an
@@ -931,11 +932,22 @@ else if (referencedCols[j] == droppedColumnPosition)
 		ColumnDescriptor[] cdlArray = 
             new ColumnDescriptor[size - columnDescriptor.getPosition()];
 
+		// For each column in this table with a higher column position,
+		// drop the entry from SYSCOLUMNS, but hold on to the column
+		// descriptor and reset its position to adjust for the dropped
+		// column. Then, re-add all those adjusted column descriptors
+		// back to SYSCOLUMNS
+		//
 		for (int i = columnDescriptor.getPosition(), j = 0; i < size; i++, j++)
 		{
 			ColumnDescriptor cd = (ColumnDescriptor) tab_cdl.elementAt(i);
 			dd.dropColumnDescriptor(td.getUUID(), cd.getColumnName(), tc);
 			cd.setPosition(i);
+			if (cd.isAutoincrement())
+			{
+				cd.setAutoinc_create_or_modify_Start_Increment(
+						ColumnDefinitionNode.CREATE_AUTOINCREMENT);
+			}
 			cdlArray[j] = cd;
 		}
 		dd.addDescriptorArray(cdlArray, td,
