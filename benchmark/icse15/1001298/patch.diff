diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
index 72f1a1f8..923356fd 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
@@ -71,8 +71,7 @@ public void removeDependency(Refreshable refreshable) {
    */
   @Override
   public void refresh(Collection<Refreshable> alreadyRefreshed) {
-    if (!refreshLock.isLocked()) {
-      refreshLock.lock();
+    if (refreshLock.tryLock()) {
       try {
         alreadyRefreshed = buildRefreshed(alreadyRefreshed);
         for (Refreshable dependency : dependencies) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java
index e1041fb9..60fff9e2 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java
@@ -125,7 +125,6 @@
   private final char delimiter;
   private final Pattern delimiterPattern;
   private final boolean hasPrefValues;
-  private boolean loaded;
   private DataModel delegate;
   private final ReentrantLock reloadLock;
   private final boolean transpose;
@@ -186,6 +185,8 @@ public FileDataModel(File dataFile, boolean transpose, long minReloadIntervalMS)
     this.reloadLock = new ReentrantLock();
     this.transpose = transpose;
     this.minReloadIntervalMS = minReloadIntervalMS;
+
+    reload();
   }
 
   public File getDataFile() {
@@ -197,11 +198,9 @@ public char getDelimiter() {
   }
 
   protected void reload() {
-    if (!reloadLock.isLocked()) {
-      reloadLock.lock();
+    if (reloadLock.tryLock()) {
       try {
         delegate = buildModel();
-        loaded = true;
       } catch (IOException ioe) {
         log.warn("Exception while reloading", ioe);
       } finally {
@@ -598,11 +597,6 @@ private void removeTimestamp(long userID,
       itemTimestamps.remove(itemID);
     }
   }
-  private void checkLoaded() {
-    if (!loaded) {
-      reload();
-    }
-  }
 
   /**
    * Subclasses may wish to override this if ID values in the file are not numeric. This provides a hook by
@@ -632,61 +626,51 @@ protected long readTimestampFromString(String value) {
 
   @Override
   public LongPrimitiveIterator getUserIDs() throws TasteException {
-    checkLoaded();
     return delegate.getUserIDs();
   }
 
   @Override
   public PreferenceArray getPreferencesFromUser(long userID) throws TasteException {
-    checkLoaded();
     return delegate.getPreferencesFromUser(userID);
   }
 
   @Override
   public FastIDSet getItemIDsFromUser(long userID) throws TasteException {
-    checkLoaded();
     return delegate.getItemIDsFromUser(userID);
   }
 
   @Override
   public LongPrimitiveIterator getItemIDs() throws TasteException {
-    checkLoaded();
     return delegate.getItemIDs();
   }
 
   @Override
   public PreferenceArray getPreferencesForItem(long itemID) throws TasteException {
-    checkLoaded();
     return delegate.getPreferencesForItem(itemID);
   }
 
   @Override
   public Float getPreferenceValue(long userID, long itemID) throws TasteException {
-    checkLoaded();
     return delegate.getPreferenceValue(userID, itemID);
   }
 
   @Override
   public Long getPreferenceTime(long userID, long itemID) throws TasteException {
-    checkLoaded();
     return delegate.getPreferenceTime(userID, itemID);
   }
 
   @Override
   public int getNumItems() throws TasteException {
-    checkLoaded();
     return delegate.getNumItems();
   }
 
   @Override
   public int getNumUsers() throws TasteException {
-    checkLoaded();
     return delegate.getNumUsers();
   }
 
   @Override
   public int getNumUsersWithPreferenceFor(long... itemIDs) throws TasteException {
-    checkLoaded();
     return delegate.getNumUsersWithPreferenceFor(itemIDs);
   }
 
@@ -698,14 +682,12 @@ public int getNumUsersWithPreferenceFor(long... itemIDs) throws TasteException {
    */
   @Override
   public void setPreference(long userID, long itemID, float value) throws TasteException {
-    checkLoaded();
     delegate.setPreference(userID, itemID, value);
   }
 
   /** See the warning at {@link #setPreference(long, long, float)}. */
   @Override
   public void removePreference(long userID, long itemID) throws TasteException {
-    checkLoaded();
     delegate.removePreference(userID, itemID);
   }
 
@@ -720,19 +702,16 @@ public void refresh(Collection<Refreshable> alreadyRefreshed) {
 
   @Override
   public boolean hasPreferenceValues() {
-    checkLoaded();
     return delegate.hasPreferenceValues();
   }
 
   @Override
   public float getMaxPreference() {
-    checkLoaded();
     return delegate.getMaxPreference();
   }
 
   @Override
   public float getMinPreference() {
-    checkLoaded();    
     return delegate.getMinPreference();
   }
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java
index f5146e47..46e43bc2 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileIDMigrator.java
@@ -46,11 +46,10 @@
   public static final long DEFAULT_MIN_RELOAD_INTERVAL_MS = 60 * 1000L; // 1 minute?
 
   private final File dataFile;
-  private final FastByIDMap<String> longToString;
+  private FastByIDMap<String> longToString;
   private final ReentrantLock reloadLock;
 
   private long lastModified;
-  private boolean loaded;
   private long minReloadIntervalMS;
 
   private static final Logger log = LoggerFactory.getLogger(FileIDMigrator.class);
@@ -60,7 +59,6 @@ public FileIDMigrator(File dataFile) throws FileNotFoundException {
   }
 
   public FileIDMigrator(File dataFile, long minReloadIntervalMS) throws FileNotFoundException {
-    super();
     longToString = new FastByIDMap<String>(100);
     if (dataFile == null) {
       throw new IllegalArgumentException("dataFile is null");
@@ -74,30 +72,20 @@ public FileIDMigrator(File dataFile, long minReloadIntervalMS) throws FileNotFou
     this.dataFile = dataFile;
     this.reloadLock = new ReentrantLock();
     this.lastModified = dataFile.lastModified();
-    this.loaded = false;
     this.minReloadIntervalMS = minReloadIntervalMS;
+
+    reload();
   }
 
   @Override
   public String toStringID(long longID) {
-    if (!loaded) {
-      reload();
-    }
-    synchronized (longToString) {
       return longToString.get(longID);
     }
-  }
 
   private void reload() {
-    if (!reloadLock.isLocked()) {
-      reloadLock.lock();
+    if (reloadLock.tryLock()) {
       try {
-        longToString.clear();
-        for (String line : new FileLineIterable(dataFile)) {
-          longToString.put(toLongID(line), line);
-        }
-        lastModified = dataFile.lastModified();
-        loaded = true;
+        longToString = buildMapping();
       } catch (IOException ioe) {
         throw new IllegalStateException(ioe);
       } finally {
@@ -106,9 +94,18 @@ private void reload() {
     }
   }
 
+  private FastByIDMap<String> buildMapping() throws IOException {
+    FastByIDMap<String> mapping = new FastByIDMap<String>();
+    for (String line : new FileLineIterable(dataFile)) {
+      mapping.put(toLongID(line), line);
+    }
+    lastModified = dataFile.lastModified();
+    return mapping;
+  }
+
   @Override
   public void refresh(Collection<Refreshable> alreadyRefreshed) {
-    if (!loaded || dataFile.lastModified() > lastModified + minReloadIntervalMS) {
+    if (dataFile.lastModified() > lastModified + minReloadIntervalMS) {
       log.debug("File has changed; reloading...");
       reload();
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java
index 94d9098f..6b69887b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender.java
@@ -51,11 +51,10 @@
   private static final Logger log = LoggerFactory.getLogger(ItemAverageRecommender.class);
   
   private final FastByIDMap<RunningAverage> itemAverages;
-  private boolean averagesBuilt;
   private final ReadWriteLock buildAveragesLock;
   private final RefreshHelper refreshHelper;
   
-  public ItemAverageRecommender(DataModel dataModel) {
+  public ItemAverageRecommender(DataModel dataModel) throws TasteException {
     super(dataModel);
     this.itemAverages = new FastByIDMap<RunningAverage>();
     this.buildAveragesLock = new ReentrantReadWriteLock();
@@ -67,6 +66,7 @@ public Object call() throws TasteException {
       }
     });
     refreshHelper.addDependency(dataModel);
+    buildAverageDiffs();
   }
   
   @Override
@@ -75,7 +75,6 @@ public Object call() throws TasteException {
       throw new IllegalArgumentException("howMany must be at least 1");
     }
     log.debug("Recommending items for user ID '{}'", userID);
-    checkAverageDiffsBuilt();
     
     FastIDSet possibleItemIDs = getAllOtherItems(userID);
     
@@ -95,7 +94,6 @@ public float estimatePreference(long userID, long itemID) throws TasteException
     if (actualPref != null) {
       return actualPref;
     }
-    checkAverageDiffsBuilt();
     return doEstimatePreference(itemID);
   }
   
@@ -109,12 +107,6 @@ private float doEstimatePreference(long itemID) {
     }
   }
   
-  private void checkAverageDiffsBuilt() throws TasteException {
-    if (!averagesBuilt) {
-      buildAverageDiffs();
-    }
-  }
-  
   private void buildAverageDiffs() throws TasteException {
     try {
       buildAveragesLock.writeLock().lock();
@@ -133,7 +125,6 @@ private void buildAverageDiffs() throws TasteException {
           average.addDatum(prefs.getValue(i));
         }
       }
-      averagesBuilt = true;
     } finally {
       buildAveragesLock.writeLock().unlock();
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java
index b57caaf3..6900ab99 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/ItemUserAverageRecommender.java
@@ -54,11 +54,10 @@
   private final FastByIDMap<RunningAverage> itemAverages;
   private final FastByIDMap<RunningAverage> userAverages;
   private final RunningAverage overallAveragePrefValue;
-  private boolean averagesBuilt;
   private final ReadWriteLock buildAveragesLock;
   private final RefreshHelper refreshHelper;
   
-  public ItemUserAverageRecommender(DataModel dataModel) {
+  public ItemUserAverageRecommender(DataModel dataModel) throws TasteException {
     super(dataModel);
     this.itemAverages = new FastByIDMap<RunningAverage>();
     this.userAverages = new FastByIDMap<RunningAverage>();
@@ -72,6 +71,7 @@ public Object call() throws TasteException {
       }
     });
     refreshHelper.addDependency(dataModel);
+    buildAverageDiffs();
   }
   
   @Override
@@ -80,7 +80,6 @@ public Object call() throws TasteException {
       throw new IllegalArgumentException("howMany must be at least 1");
     }
     log.debug("Recommending items for user ID '{}'", userID);
-    checkAverageDiffsBuilt();
     
     FastIDSet possibleItemIDs = getAllOtherItems(userID);
     
@@ -100,7 +99,6 @@ public float estimatePreference(long userID, long itemID) throws TasteException
     if (actualPref != null) {
       return actualPref;
     }
-    checkAverageDiffsBuilt();
     return doEstimatePreference(userID, itemID);
   }
   
@@ -122,12 +120,6 @@ private float doEstimatePreference(long userID, long itemID) {
     }
   }
   
-  private void checkAverageDiffsBuilt() throws TasteException {
-    if (!averagesBuilt) {
-      buildAverageDiffs();
-    }
-  }
-  
   private void buildAverageDiffs() throws TasteException {
     try {
       buildAveragesLock.writeLock().lock();
@@ -145,7 +137,6 @@ private void buildAverageDiffs() throws TasteException {
           overallAveragePrefValue.addDatum(value);
         }
       }
-      averagesBuilt = true;
     } finally {
       buildAveragesLock.writeLock().unlock();
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
index 1ae8b0d3..95e988c3 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
@@ -23,7 +23,6 @@
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
-import java.util.concurrent.locks.ReentrantLock;
 
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.common.TasteException;
@@ -74,8 +73,6 @@
   private FastByIDMap<List<RecommendedItem>> topRecsByUserID;
   private FastIDSet[] allClusters;
   private FastByIDMap<FastIDSet> clustersByUserID;
-  private boolean clustersBuilt;
-  private final ReentrantLock buildClustersLock;
   private final RefreshHelper refreshHelper;
   
   /**
@@ -88,7 +85,8 @@
    * @throws IllegalArgumentException
    *           if arguments are <code>null</code>, or <code>numClusters</code> is less than 2
    */
-  public TreeClusteringRecommender(DataModel dataModel, ClusterSimilarity clusterSimilarity, int numClusters) {
+  public TreeClusteringRecommender(DataModel dataModel, ClusterSimilarity clusterSimilarity, int numClusters)
+    throws TasteException {
     this(dataModel, clusterSimilarity, numClusters, 1.0);
   }
   
@@ -109,7 +107,7 @@ public TreeClusteringRecommender(DataModel dataModel, ClusterSimilarity clusterS
   public TreeClusteringRecommender(DataModel dataModel,
                                    ClusterSimilarity clusterSimilarity,
                                    int numClusters,
-                                   double samplingRate) {
+                                   double samplingRate) throws TasteException {
     super(dataModel);
     if (clusterSimilarity == null) {
       throw new IllegalArgumentException("clusterSimilarity is null");
@@ -125,7 +123,6 @@ public TreeClusteringRecommender(DataModel dataModel,
     this.clusteringThreshold = Double.NaN;
     this.clusteringByThreshold = false;
     this.samplingRate = samplingRate;
-    this.buildClustersLock = new ReentrantLock();
     this.refreshHelper = new RefreshHelper(new Callable<Object>() {
       @Override
       public Object call() throws TasteException {
@@ -135,6 +132,7 @@ public Object call() throws TasteException {
     });
     refreshHelper.addDependency(dataModel);
     refreshHelper.addDependency(clusterSimilarity);
+    buildClusters();
   }
   
   /**
@@ -150,7 +148,7 @@ public Object call() throws TasteException {
    */
   public TreeClusteringRecommender(DataModel dataModel,
                                    ClusterSimilarity clusterSimilarity,
-                                   double clusteringThreshold) {
+                                   double clusteringThreshold) throws TasteException {
     this(dataModel, clusterSimilarity, clusteringThreshold, 1.0);
   }
   
@@ -172,7 +170,7 @@ public TreeClusteringRecommender(DataModel dataModel,
   public TreeClusteringRecommender(DataModel dataModel,
                                    ClusterSimilarity clusterSimilarity,
                                    double clusteringThreshold,
-                                   double samplingRate) {
+                                   double samplingRate) throws TasteException {
     super(dataModel);
     if (clusterSimilarity == null) {
       throw new IllegalArgumentException("clusterSimilarity is null");
@@ -188,7 +186,6 @@ public TreeClusteringRecommender(DataModel dataModel,
     this.clusteringThreshold = clusteringThreshold;
     this.clusteringByThreshold = true;
     this.samplingRate = samplingRate;
-    this.buildClustersLock = new ReentrantLock();
     this.refreshHelper = new RefreshHelper(new Callable<Object>() {
       @Override
       public Object call() throws TasteException {
@@ -198,6 +195,7 @@ public Object call() throws TasteException {
     });
     refreshHelper.addDependency(dataModel);
     refreshHelper.addDependency(clusterSimilarity);
+    buildClusters();
   }
   
   @Override
@@ -267,14 +265,6 @@ public FastIDSet getCluster(long userID) throws TasteException {
   }
 
   private void buildClusters() throws TasteException {
-    if (clustersBuilt) {
-      return;
-    }
-    buildClustersLock.lock();
-    try {
-      if (clustersBuilt) {
-        return;
-      }
       DataModel model = getDataModel();
       int numUsers = model.getNumUsers();
       if (numUsers > 0) {
@@ -297,10 +287,6 @@ private void buildClusters() throws TasteException {
         clustersByUserID = new FastByIDMap<FastIDSet>();
         allClusters = NO_CLUSTERS;
       }
-      clustersBuilt = true;
-    } finally {
-      buildClustersLock.unlock();
-    }
   }
   
   private void findClusters(List<FastIDSet> newClusters) throws TasteException {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java
index 2a7bb9e9..4d85041f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java
@@ -26,7 +26,6 @@
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.concurrent.Callable;
-import java.util.concurrent.locks.ReentrantLock;
 
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.common.TasteException;
@@ -80,8 +79,6 @@
   private FastByIDMap<List<RecommendedItem>> topRecsByUserID;
   private FastIDSet[] allClusters;
   private FastByIDMap<FastIDSet> clustersByUserID;
-  private boolean clustersBuilt;
-  private final ReentrantLock buildClustersLock;
   private final RefreshHelper refreshHelper;
   
   /**
@@ -94,7 +91,8 @@
    * @throws IllegalArgumentException
    *           if arguments are <code>null</code>, or <code>numClusters</code> is less than 2
    */
-  public TreeClusteringRecommender2(DataModel dataModel, ClusterSimilarity clusterSimilarity, int numClusters) {
+  public TreeClusteringRecommender2(DataModel dataModel, ClusterSimilarity clusterSimilarity, int numClusters)
+    throws TasteException {
     super(dataModel);
     if (clusterSimilarity == null) {
       throw new IllegalArgumentException("clusterSimilarity is null");
@@ -106,7 +104,6 @@ public TreeClusteringRecommender2(DataModel dataModel, ClusterSimilarity cluster
     this.numClusters = numClusters;
     this.clusteringThreshold = Double.NaN;
     this.clusteringByThreshold = false;
-    this.buildClustersLock = new ReentrantLock();
     this.refreshHelper = new RefreshHelper(new Callable<Object>() {
       @Override
       public Object call() throws TasteException {
@@ -116,6 +113,7 @@ public Object call() throws TasteException {
     });
     refreshHelper.addDependency(dataModel);
     refreshHelper.addDependency(clusterSimilarity);
+    buildClusters();
   }
   
   /**
@@ -132,7 +130,7 @@ public Object call() throws TasteException {
    */
   public TreeClusteringRecommender2(DataModel dataModel,
                                     ClusterSimilarity clusterSimilarity,
-                                    double clusteringThreshold) {
+                                    double clusteringThreshold) throws TasteException {
     super(dataModel);
     if (clusterSimilarity == null) {
       throw new IllegalArgumentException("clusterSimilarity is null");
@@ -144,7 +142,6 @@ public TreeClusteringRecommender2(DataModel dataModel,
     this.numClusters = Integer.MIN_VALUE;
     this.clusteringThreshold = clusteringThreshold;
     this.clusteringByThreshold = true;
-    this.buildClustersLock = new ReentrantLock();
     this.refreshHelper = new RefreshHelper(new Callable<Object>() {
       @Override
       public Object call() throws TasteException {
@@ -154,6 +151,7 @@ public Object call() throws TasteException {
     });
     refreshHelper.addDependency(dataModel);
     refreshHelper.addDependency(clusterSimilarity);
+    buildClusters();
   }
   
   @Override
@@ -276,14 +274,6 @@ public int compareTo(ClusterClusterPair other) {
   }
   
   private void buildClusters() throws TasteException {
-    if (clustersBuilt) {
-      return;
-    }
-    buildClustersLock.lock();
-    try {
-      if (clustersBuilt) {
-        return;
-      }
       DataModel model = getDataModel();
       int numUsers = model.getNumUsers();
       
@@ -313,11 +303,6 @@ private void buildClusters() throws TasteException {
         allClusters = clusters.toArray(new FastIDSet[clusters.size()]);
         
       }
-      
-      clustersBuilt = true;
-    } finally {
-      buildClustersLock.unlock();
-    }
   }
   
   private boolean mergeClosestClusters(int numUsers, List<FastIDSet> clusters, boolean done) throws TasteException {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java
index 2c2f6f91..246a713f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java
@@ -62,7 +62,6 @@
   
   private final File dataFile;
   private long lastModified;
-  private boolean loaded;
   private final long maxEntries;
   private final FastByIDMap<FastByIDMap<RunningAverage>> averageDiffs;
   private final FastIDSet allRecommendableItemIDs;
@@ -95,6 +94,8 @@ public FileDiffStorage(File dataFile, long maxEntries) throws FileNotFoundExcept
     this.averageDiffs = new FastByIDMap<FastByIDMap<RunningAverage>>();
     this.allRecommendableItemIDs = new FastIDSet();
     this.buildAverageDiffsLock = new ReentrantReadWriteLock();
+
+    buildDiffs();
   }
   
   private void buildDiffs() {
@@ -206,16 +207,8 @@ private void updateAllRecommendableItems() {
     allRecommendableItemIDs.rehash();
   }
   
-  private void checkLoaded() {
-    if (!loaded) {
-      buildDiffs();
-      loaded = true;
-    }
-  }
-  
   @Override
   public RunningAverage getDiff(long itemID1, long itemID2) {
-    checkLoaded();
     
     boolean inverted = false;
     if (itemID1 > itemID2) {
@@ -248,7 +241,6 @@ public RunningAverage getDiff(long itemID1, long itemID2) {
   
   @Override
   public RunningAverage[] getDiffs(long userID, long itemID, PreferenceArray prefs) {
-    checkLoaded();
     try {
       buildAverageDiffsLock.readLock().lock();
       int size = prefs.length();
@@ -264,13 +256,11 @@ public RunningAverage getDiff(long itemID1, long itemID2) {
   
   @Override
   public RunningAverage getAverageItemPref(long itemID) {
-    checkLoaded();
     return null; // TODO can't do this without a DataModel
   }
   
   @Override
   public void updateItemPref(long itemID, float prefDelta, boolean remove) {
-    checkLoaded();
     try {
       buildAverageDiffsLock.readLock().lock();
       for (Map.Entry<Long,FastByIDMap<RunningAverage>> entry : averageDiffs.entrySet()) {
@@ -303,7 +293,6 @@ public void updateItemPref(long itemID, float prefDelta, boolean remove) {
   
   @Override
   public FastIDSet getRecommendableItemIDs(long userID) {
-    checkLoaded();
     try {
       buildAverageDiffsLock.readLock().lock();
       return allRecommendableItemIDs.clone();
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterable.java
index e69de29b..7ced8324 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterable.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.cf.taste.impl.similarity.file;
+
+import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Iterator;
+
+/**
+ * {@link Iterable} to be able to read a file linewise into a {@link GenericItemSimilarity}
+ */
+final class FileItemItemSimilarityIterable implements Iterable<GenericItemSimilarity.ItemItemSimilarity> {
+
+  private final File similaritiesFile;
+
+  FileItemItemSimilarityIterable(File similaritiesFile) {
+    this.similaritiesFile = similaritiesFile;
+  }
+
+  @Override
+  public Iterator<GenericItemSimilarity.ItemItemSimilarity> iterator() {
+    try {
+      return new FileItemItemSimilarityIterator(similaritiesFile);
+    } catch (IOException ioe) {
+      throw new IllegalStateException("Can't read " + similaritiesFile);
+    }
+  }
+
+}
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterator.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterator.java
index e69de29b..6e77035d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterator.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemItemSimilarityIterator.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.cf.taste.impl.similarity.file;
+
+import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
+import org.apache.mahout.common.FileLineIterator;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.regex.Pattern;
+
+/**
+ * a simple iterator using a {@link org.apache.mahout.common.FileLineIterator} internally, parsing each
+ * line into an {@link org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity.ItemItemSimilarity}
+ */
+final class FileItemItemSimilarityIterator implements Iterator<GenericItemSimilarity.ItemItemSimilarity> {
+
+  private static final Pattern SEPARATOR = Pattern.compile("[,\t]");
+
+  private final FileLineIterator lineIterator;
+
+  FileItemItemSimilarityIterator(File similaritiesFile) throws IOException {
+    lineIterator = new FileLineIterator(similaritiesFile);
+  }
+
+  @Override
+  public boolean hasNext() {
+    return lineIterator.hasNext();
+  }
+
+  @Override
+  public GenericItemSimilarity.ItemItemSimilarity next() {
+    String line = lineIterator.next();
+    String[] tokens = SEPARATOR.split(line);
+    return new GenericItemSimilarity.ItemItemSimilarity(Long.parseLong(tokens[0]),
+                                                        Long.parseLong(tokens[1]),
+                                                        Double.parseDouble(tokens[2]));
+  }
+
+  @Override
+  public void remove() {
+    throw new UnsupportedOperationException();
+  }
+}
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarity.java
index 92818ed3..f8e382aa 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarity.java
@@ -18,19 +18,13 @@
 package org.apache.mahout.cf.taste.impl.similarity.file;
 
 import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.concurrent.locks.ReentrantLock;
-import java.util.regex.Pattern;
 
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
-import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity.ItemItemSimilarity;
 import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
-import org.apache.mahout.common.FileLineIterator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -65,7 +59,6 @@
   private final ReentrantLock reloadLock;
   private final File dataFile;
   private long lastModified;
-  private boolean loaded;
   private final long minReloadIntervalMS;
 
   private static final Logger log = LoggerFactory.getLogger(FileItemSimilarity.class);
@@ -73,9 +66,8 @@
   /**
    * @param dataFile
    *          file containing the similarity data
-   * @throws IOException
    */
-  public FileItemSimilarity(File dataFile) throws IOException {
+  public FileItemSimilarity(File dataFile) {
     this(dataFile, DEFAULT_MIN_RELOAD_INTERVAL_MS);
   }
 
@@ -85,57 +77,48 @@ public FileItemSimilarity(File dataFile) throws IOException {
    *          when refresh() is called
    * @see #FileItemSimilarity(File)
    */
-  public FileItemSimilarity(File dataFile, long minReloadIntervalMS) throws IOException {
+  public FileItemSimilarity(File dataFile, long minReloadIntervalMS) {
     if (dataFile == null) {
       throw new IllegalArgumentException("dataFile is null");
     }
     if (!dataFile.exists() || dataFile.isDirectory()) {
-      throw new FileNotFoundException(dataFile.toString());
+      throw new IllegalArgumentException("dataFile is missing or a directory: " + dataFile);
     }
 
     log.info("Creating FileItemSimilarity for file {}", dataFile);
 
     this.dataFile = dataFile.getAbsoluteFile();
     this.lastModified = dataFile.lastModified();
-    this.loaded = false;
     this.minReloadIntervalMS = minReloadIntervalMS;
     this.reloadLock = new ReentrantLock();
+
+    reload();
   }
 
   @Override
   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
-    checkLoaded();
     return delegate.itemSimilarities(itemID1, itemID2s);
   }
 
   @Override
   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
-    checkLoaded();
     return delegate.itemSimilarity(itemID1, itemID2);
   }
 
   @Override
   public void refresh(Collection<Refreshable> alreadyRefreshed) {
-    if (delegate == null || dataFile.lastModified() > lastModified + minReloadIntervalMS) {
+    if (dataFile.lastModified() > lastModified + minReloadIntervalMS) {
       log.debug("File has changed; reloading...");
       reload();
     }
   }
 
-  private void checkLoaded() {
-    if (!loaded) {
-      reload();
-    }
-  }
-
   protected void reload() {
-    if (!reloadLock.isLocked()) {
-      reloadLock.lock();
+    if (reloadLock.tryLock()) {
       try {
         long newLastModified = dataFile.lastModified();
         delegate = new GenericItemSimilarity(new FileItemItemSimilarityIterable(dataFile));
         lastModified = newLastModified;
-        loaded = true;
       } finally {
         reloadLock.unlock();
       }
@@ -147,58 +130,4 @@ public String toString() {
     return "FileItemSimilarity[dataFile:" + dataFile + ']';
   }
 
-  /**
-   * {@link Iterable} to be able to read a file linewise into a {@link GenericItemSimilarity}
-   */
-  static class FileItemItemSimilarityIterable implements Iterable<ItemItemSimilarity> {
-
-    private final File similaritiesFile;
-
-    FileItemItemSimilarityIterable(File similaritiesFile) {
-      this.similaritiesFile = similaritiesFile;
-    }
-
-    @Override
-    public Iterator<ItemItemSimilarity> iterator() {
-      return new FileItemItemSimilarityIterator(similaritiesFile);
-    }
-
-    /**
-     * a simple iterator using a {@link FileLineIterator} internally, parsing each
-     * line into an {@link ItemItemSimilarity}
-     */
-    static class FileItemItemSimilarityIterator implements Iterator<ItemItemSimilarity> {
-
-      private static final Pattern SEPARATOR = Pattern.compile("[,\t]");
-
-      private final FileLineIterator lineIterator;
-
-      FileItemItemSimilarityIterator(File similaritiesFile) {
-        try {
-          lineIterator = new FileLineIterator(similaritiesFile);
-        } catch (IOException e) {
-          throw new IllegalArgumentException("Cannot read similarities file", e);
-        }
-      }
-
-      @Override
-      public boolean hasNext() {
-        return lineIterator.hasNext();
-      }
-
-      @Override
-      public ItemItemSimilarity next() {
-        String line = lineIterator.next();
-        String[] tokens = SEPARATOR.split(line);
-        return new ItemItemSimilarity(Long.parseLong(tokens[0]), Long.parseLong(tokens[1]),
-            Double.parseDouble(tokens[2]));
-      }
-
-      @Override
-      public void remove() {
-        throw new UnsupportedOperationException();
-      }
-    }
-
-  }
 }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarityTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarityTest.java
index 580f8263..4a0cc738 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarityTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/similarity/file/FileItemSimilarityTest.java
@@ -18,7 +18,6 @@
 package org.apache.mahout.cf.taste.impl.similarity.file;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 
 import org.apache.mahout.cf.taste.impl.TasteTestCase;
 import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
@@ -110,16 +109,14 @@ public void testRefreshAfterFileUpdate() throws Exception {
     assertEquals(0.112, similarity.itemSimilarity(8L, 7L), EPSILON);
   }
 
-  @Test
+  @Test(expected = IllegalArgumentException.class)
   public void testFileNotFoundExceptionForNonExistingFile() throws Exception {
-    try {
       new FileItemSimilarity(new File("xKsdfksdfsdf"));
-      fail();
-    } catch (FileNotFoundException e) {}
   }
 
+  @Test
   public void testFileItemItemSimilarityIterable() throws Exception {
-    Iterable<ItemItemSimilarity> similarityIterable = new FileItemSimilarity.FileItemItemSimilarityIterable(testFile);
+    Iterable<ItemItemSimilarity> similarityIterable = new FileItemItemSimilarityIterable(testFile);
     GenericItemSimilarity similarity = new GenericItemSimilarity(similarityIterable);
 
     assertEquals(0.125, similarity.itemSimilarity(1L, 5L), EPSILON);
