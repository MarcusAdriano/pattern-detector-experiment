diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
index 991c54dc..d28e7008 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
@@ -21,6 +21,8 @@
 package org.apache.derby.impl.jdbc;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.iapi.types.Resetable;
+import org.apache.derby.iapi.error.StandardException;
 
 import java.io.InputStream;
 import java.io.IOException;
@@ -30,6 +32,11 @@
 	Converts a stream containing the Cloudscape stored binary form
 	to one that just contains the application's data.
 	Simply remove the length information.
+
+	If source stream implements Resetable interface , 
+	the source can be shared among other objects and 
+	not closed when close method of this class was called.
+
 */
 final class BinaryToRawStream
 extends java.io.FilterInputStream
@@ -96,4 +103,26 @@ else if (bl == 0xA0)
 			//	len++;
 		}
 	}
+    
+    
+    public void close() throws IOException{
+	
+	//Escape from closing source InputStream ,
+	//because source InputStream can be shared between other stream.
+	
+	if(in instanceof Resetable){
+	    try{
+		((Resetable) in).resetStream();
+		
+	    }catch(StandardException e){
+		e.printStackTrace();
+		throw new IOException(e.getMessage());
+	    }
+	    
+	}else{
+	    super.close();
+	    
+	}
+    }
+    
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
index 59cc36f7..ee707026 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
@@ -40,6 +40,7 @@
 import java.util.zip.CRC32;
 import java.io.Reader;
 import java.io.StringReader;
+import java.io.ByteArrayInputStream;
 
 /**
  * Test of JDBC result set Stream calls.
@@ -285,6 +286,7 @@ public static void main(String[] args) {
 			stmt.close();
 			
 			TestOfGetAsciiStream.executeTestOfGetAsciiStream(con);
+			TestOfRepeatedStream.executeTestOfRepeatedStream(con);
 
 			con.close();
 
@@ -469,4 +471,129 @@ private static String getCharacterCodeString(char c){
 		
 	}
 
+    static class TestOfRepeatedStream{
+
+	
+	private static void executeTestOfRepeatedStream(Connection conn) 
+	    throws SQLException, IOException {
+	
+	    System.out.println("Test of RepeatedStream");
+
+	    prepareTestRepeatedStream(conn);
+	    readFromRepeatedStream(conn);
+	    cleanTestRepeatedStream(conn);
+	    
+	    
+	}
+    
+    
+	private static void prepareTestRepeatedStream(Connection conn) throws SQLException {
+	
+	    PreparedStatement st = null;
+
+	    try{
+
+		st = conn.prepareStatement("create table testBlobX2 (a integer, b blob(1024K))");
+		st.execute();
+		st.close();
+
+		st = conn.prepareStatement("insert into testBlobX2(a,b) values(1,?)");
+
+		byte[] testData = new byte[1024 * 1024];
+	    
+		for(int i = 0;
+		    i < testData.length;
+		    i ++)
+		    testData[i] = (byte) (i % 256);
+	    
+		st.setBinaryStream(1, 
+				   new ByteArrayInputStream(testData),
+				   testData.length);
+
+		st.executeUpdate();
+
+	    }finally{
+		if(st != null)
+		    st.close();
+	    }
+	
+	}
+
+
+	private static void readFromRepeatedStream(Connection conn) 
+	    throws SQLException ,IOException {
+	
+	    PreparedStatement st = null;
+	    ResultSet rs = null;
+	
+	    InputStream is = null;
+
+	    try{
+		st = conn.prepareStatement("SELECT b FROM testBlobX2 WHERE a = 1");
+		rs = st.executeQuery();
+	    
+		rs.next();
+	    
+		System.out.print("first stream: ");
+		readHeadOfStream(rs);
+	    
+		System.out.print("second stream: ");
+		readHeadOfStream(rs);
+
+	    }finally{
+		if(rs != null)
+		    rs.close();
+	    
+		if(st != null)
+		    st.close();
+	    
+	    }
+
+	}
+
+    
+	private static void readHeadOfStream(ResultSet rs) 
+	    throws SQLException, IOException {
+	
+	    InputStream is = null;
+
+	    try{
+		is = rs.getBinaryStream(1);
+
+		for( int i = 0 ;
+		     i < 8 ;
+		     i ++ ){
+		
+		    System.out.print(is.read());
+		
+		}
+	    
+		System.out.println();
+	    
+	    }finally{
+		if(is != null)
+		    is.close();
+	    }
+	}
+    
+    
+	private static void cleanTestRepeatedStream(Connection conn) 
+	    throws SQLException {
+	
+	    Statement st = null;
+
+	    try{
+		st = conn.createStatement();
+		st.execute("drop table testBlobX2");
+
+	    }finally{
+		if(st != null)
+		    st.close();
+	    }
+	}
+
+
+    }
+    
+
 }
