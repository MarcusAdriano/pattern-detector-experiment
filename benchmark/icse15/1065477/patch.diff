diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/Vector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/Vector.java
index baf9aae7..151bb4da 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/Vector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/Vector.java
@@ -219,7 +219,7 @@
    *
    * @param power The power to use. Must be >= 0. May also be {@link Double#POSITIVE_INFINITY}. See the Wikipedia link
    *              for more on this.
-   * @return a new Vector
+   * @return a new Vector x such that norm(x, power) == 1
    */
   Vector normalize(double power);
   
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
index 1bdee8ba..17950789 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
@@ -500,43 +500,48 @@ public void testLogNormalize() {
     Vector norm2 = vec2.logNormalize();
     assertNotNull("norm1 is null and it shouldn't be", norm2);
     
-    Vector expected = new RandomAccessSparseVector(3);
-    
-    expected.setQuick(0, 0.2672612419124244);
-    expected.setQuick(1, 0.4235990463273581);
-    expected.setQuick(2, 0.5345224838248488);
+    Vector expected = new DenseVector(new double[]{
+      0.2672612419124244, 0.4235990463273581, 0.5345224838248488
+    });
     
-    assertEquals(expected, norm);
+    assertVectorEquals(expected, norm, 1e-16);
+    assertVectorEquals(expected, norm2, 1e-16);
     
     norm = vec1.logNormalize(2);
-    assertEquals(expected, norm);
+    assertVectorEquals(expected, norm, 1e-16);
     
     norm2 = vec2.logNormalize(2);
-    assertEquals(expected, norm2);
+    assertVectorEquals(expected, norm2, 1e-16);
     
     try {
-      norm = vec1.logNormalize(1);
-      fail();
+      vec1.logNormalize(1);
+      fail("Should fail with power == 1");
     } catch (IllegalArgumentException e) {
       // expected
     }
-    norm = vec1.logNormalize(3);
   
     try {
       vec1.logNormalize(-1);
-      fail();
+      fail("Should fail with negative power");
     } catch (IllegalArgumentException e) {
       // expected
     }
     
     try {
-      vec2.logNormalize(Double.POSITIVE_INFINITY);
-      fail();
+      norm = vec2.logNormalize(Double.POSITIVE_INFINITY);
+      fail("Should fail with positive infinity norm");
     } catch (IllegalArgumentException e) {
       // expected
     }  
   }
 
+  private void assertVectorEquals(Vector expected, Vector actual, double epsilon) {
+    assertEquals(expected.size(), actual.size());
+    for (Vector.Element x : expected) {
+      assertEquals(x.get(), actual.get(x.index()), epsilon);
+    }
+  }
+
   @Test
   public void testMax()  {
     Vector vec1 = new RandomAccessSparseVector(3);
