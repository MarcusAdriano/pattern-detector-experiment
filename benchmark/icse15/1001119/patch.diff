diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
index 7a7cbbd4..4462cc99 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
@@ -100,6 +100,8 @@
     public RequestSchedulerId request_scheduler_id;
     public RequestSchedulerOptions request_scheduler_options;
 
+    public Integer index_interval = 128;
+
     public List<RawKeyspace> keyspaces;
     
     public static enum CommitLogSync {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index ffb51347..78c7fb4e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -1102,4 +1102,9 @@ public static CFMetaData getCFMetaData(Descriptor desc)
     {
         return getCFMetaData(desc.ksname, desc.cfname);
     }
+
+    public static Integer getIndexInterval()
+    {
+        return conf.index_interval;
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java b/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
index 44729ba6..b8745de6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -250,7 +250,7 @@ int doCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int
         long totalkeysWritten = 0;
 
         // TODO the int cast here is potentially buggy
-        int expectedBloomFilterSize = Math.max(SSTableReader.indexInterval(), (int)SSTableReader.getApproximateKeyCount(sstables));
+        int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(), (int)SSTableReader.getApproximateKeyCount(sstables));
         if (logger.isDebugEnabled())
           logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);
 
@@ -338,7 +338,7 @@ private static long getMaxDataAge(Collection<SSTableReader> sstables)
         long startTime = System.currentTimeMillis();
         long totalkeysWritten = 0;
 
-        int expectedBloomFilterSize = Math.max(SSTableReader.indexInterval(), (int)(SSTableReader.getApproximateKeyCount(sstables) / 2));
+        int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(), (int)(SSTableReader.getApproximateKeyCount(sstables) / 2));
         if (logger.isDebugEnabled())
           logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexSummary.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexSummary.java
index e248f929..8dca6e3a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexSummary.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexSummary.java
@@ -32,16 +32,13 @@
 
 public class IndexSummary
 {
-    /** Every 128th index entry is loaded into memory so we know where to start looking for the actual key w/o seeking */
-    public static final int INDEX_INTERVAL = 128;/* Required extension for temporary files created during compactions. */
-
     private ArrayList<KeyPosition> indexPositions;
     private int keysWritten = 0;
     private long lastIndexPosition;
 
     public void maybeAddEntry(DecoratedKey decoratedKey, long indexPosition)
     {
-        if (keysWritten++ % INDEX_INTERVAL == 0)
+        if (keysWritten++ % DatabaseDescriptor.getIndexInterval() == 0)
         {
             if (indexPositions == null)
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
index 41092080..48f24eef 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
@@ -57,7 +57,7 @@
     private static final Logger logger = LoggerFactory.getLogger(SSTableReader.class);
 
     // guesstimated size of INDEX_INTERVAL index entries
-    private static final int INDEX_FILE_BUFFER_BYTES = 16 * IndexSummary.INDEX_INTERVAL;
+    private static final int INDEX_FILE_BUFFER_BYTES = 16 * DatabaseDescriptor.getIndexInterval();
 
     // `finalizers` is required to keep the PhantomReferences alive after the enclosing SSTR is itself
     // unreferenced.  otherwise they will never get enqueued.
@@ -121,11 +121,6 @@ public void run()
 
     private volatile SSTableDeletingReference phantomReference;
 
-    public static int indexInterval()
-    {
-        return IndexSummary.INDEX_INTERVAL;
-    }
-
     public static long getApproximateKeyCount(Iterable<SSTableReader> sstables)
     {
         long count = 0;
@@ -133,7 +128,7 @@ public static long getApproximateKeyCount(Iterable<SSTableReader> sstables)
         for (SSTableReader sstable : sstables)
         {
             int indexKeyCount = sstable.getKeySamples().size();
-            count = count + (indexKeyCount + 1) * IndexSummary.INDEX_INTERVAL;
+            count = count + (indexKeyCount + 1) * DatabaseDescriptor.getIndexInterval();
             if (logger.isDebugEnabled())
                 logger.debug("index size for bloom filter calc for file  : " + sstable.getFilename() + "   : " + count);
         }
@@ -331,7 +326,7 @@ public InstrumentedCache getKeyCache()
      */
     public long estimatedKeys()
     {
-        return indexSummary.getIndexPositions().size() * IndexSummary.INDEX_INTERVAL;
+        return indexSummary.getIndexPositions().size() * DatabaseDescriptor.getIndexInterval();
     }
 
     /**
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index c2d40d8e..808f6412 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -1382,7 +1382,7 @@ public void setLog4jLevel(String classQualifier, String rawLevel)
                 keys.add(sample);
         }
         FBUtilities.sortSampledKeys(keys, range);
-        int splits = keys.size() * SSTableReader.indexInterval() / keysPerSplit;
+        int splits = keys.size() * DatabaseDescriptor.getIndexInterval() / keysPerSplit;
 
         if (keys.size() >= splits)
         {
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java
index de7dea60..f5fdeaaa 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java
@@ -31,6 +31,7 @@
 
 import org.junit.Test;
 
+import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.db.filter.QueryPath;
@@ -55,7 +56,7 @@ public void testCompactions() throws IOException, ExecutionException, Interrupte
 
         final int ROWS_PER_SSTABLE = 10;
         Set<DecoratedKey> inserted = new HashSet<DecoratedKey>();
-        for (int j = 0; j < (SSTableReader.indexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
+        for (int j = 0; j < (DatabaseDescriptor.getIndexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
             for (int i = 0; i < ROWS_PER_SSTABLE; i++) {
                 DecoratedKey key = Util.dk(String.valueOf(i % 2));
                 RowMutation rm = new RowMutation(TABLE1, key.key);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
index 6d148603..d44634a7 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
@@ -35,6 +35,7 @@
 
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.Util;
+import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.dht.CollatingOrderPreservingPartitioner;
@@ -200,7 +201,7 @@ public void testManyRows() throws IOException, ExecutionException, InterruptedEx
         ColumnFamilyStore cfs = table.getColumnFamilyStore("Standard1");
 
         final int ROWS_PER_SSTABLE = 10;
-        for (int j = 0; j < (SSTableReader.indexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
+        for (int j = 0; j < (DatabaseDescriptor.getIndexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
             for (int i = 0; i < ROWS_PER_SSTABLE; i++) {
                 byte[] key = String.valueOf(i % 2).getBytes();
                 RowMutation rm = new RowMutation("Keyspace1", key);
