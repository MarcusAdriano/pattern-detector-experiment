diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
index e79f30f3..a1a21dbe 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
@@ -39,7 +39,7 @@
     
     public void doVerb(Message message)
     { 
-        byte[] bytes = (byte[])message.getMessageBody()[0];
+        byte[] bytes = message.getMessageBody();
         /* Obtain a Row Mutation Context from TLS */
         RowMutationContext rowMutationCtx = tls_.get();
         if ( rowMutationCtx == null )
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java
index 4b2f89cc..8b15492c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java
@@ -46,7 +46,7 @@ public static Message getCalloutDeployMessage(CalloutDeployMessage cdMessage) th
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
         serializer_.serialize(cdMessage, dos);
-        Message message = new Message(StorageService.getLocalStorageEndPoint(), "", StorageService.calloutDeployVerbHandler_, new Object[]{bos.toByteArray()});
+        Message message = new Message(StorageService.getLocalStorageEndPoint(), "", StorageService.calloutDeployVerbHandler_, bos.toByteArray());
         return message;
     }
     
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java
index 2fc8452c..3c50b720 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java
@@ -32,8 +32,7 @@
     
     public void doVerb(Message message)
     {
-        Object[] body = message.getMessageBody();
-        byte[] bytes = (byte[])body[0];
+        byte[] bytes = message.getMessageBody();
         DataInputBuffer bufIn = new DataInputBuffer();
         bufIn.reset(bytes, bytes.length);
         try
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/DataFileVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/DataFileVerbHandler.java
index 666f4a16..6621cc87 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/DataFileVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/DataFileVerbHandler.java
@@ -20,8 +20,7 @@
     
     public void doVerb(Message message)
     {        
-        Object[] body = message.getMessageBody();
-        byte[] bytes = (byte[])body[0];
+        byte[] bytes = message.getMessageBody();
         String table = new String(bytes);
         logger_.info("**** Received a request from " + message.getFrom());
         
@@ -35,7 +34,7 @@ public void doVerb(Message message)
             {
                 dos.writeUTF(file);
             }
-            Message response = message.getReply( StorageService.getLocalStorageEndPoint(), new Object[]{bos.toByteArray()});
+            Message response = message.getReply( StorageService.getLocalStorageEndPoint(), bos.toByteArray());
             MessagingService.getMessagingInstance().sendOneWay(response, message.getFrom());
         }
         catch ( IOException ex )
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java
index 3943c395..38cb007b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java
@@ -24,6 +24,7 @@
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.LogUtil;
+import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.log4j.Logger;
 
 /**
@@ -38,16 +39,17 @@ public void doVerb(Message message)
     { 
         try
         {
-	        Object[] body = message.getMessageBody();
-	        RowMutationMessage rmMsg = (RowMutationMessage)body[0];
-	        RowMutation rm = rmMsg.getRowMutation();
+	        byte[] body = message.getMessageBody();
+            DataInputBuffer buffer = new DataInputBuffer();
+            buffer.reset(body, body.length);
+	        RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(buffer);
 	
-			EndPoint[] endpoints = StorageService.instance().getNStorageEndPoint(rm.key());
+            EndPoint[] endpoints = StorageService.instance().getNStorageEndPoint(rmMsg.getRowMutation().key());
 	
 			Message messageInternal = new Message(StorageService.getLocalStorageEndPoint(), 
 	                StorageService.mutationStage_,
 					StorageService.mutationVerbHandler_, 
-	                new Object[]{ rmMsg }
+	                body
 	        );
             
             StringBuilder sb = new StringBuilder();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
index 3609d855..e862a7ce 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
@@ -40,7 +40,7 @@ public Message getMessage() throws IOException
 
     public static RangeCommand read(Message message) throws IOException
     {
-        byte[] bytes = (byte[]) message.getMessageBody()[0];
+        byte[] bytes = message.getMessageBody();
         DataInputBuffer dib = new DataInputBuffer();
         dib.reset(bytes, bytes.length);
         return serializer.deserialize(new DataInputStream(dib));
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
index 6f96a339..a0ba8c4c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
@@ -40,7 +40,7 @@
     
     public void doVerb(Message message)
     {          
-        byte[] body = (byte[])message.getMessageBody()[0];
+        byte[] body = message.getMessageBody();
         DataInputBuffer buffer = new DataInputBuffer();
         buffer.reset(body, body.length);        
         
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
index a3f7d7f5..811c492b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
@@ -54,7 +54,7 @@ public static Message makeReadResponseMessage(ReadResponse readResponse) throws
     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
         ReadResponse.serializer().serialize(readResponse, dos);
-        Message message = new Message(StorageService.getLocalStorageEndPoint(), MessagingService.responseStage_, MessagingService.responseVerbHandler_, new Object[]{bos.toByteArray()});         
+        Message message = new Message(StorageService.getLocalStorageEndPoint(), MessagingService.responseStage_, MessagingService.responseVerbHandler_, bos.toByteArray());         
         return message;
     }
 	
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
index fc4e1f53..00b4d4a4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
@@ -60,7 +60,7 @@ protected static void setCurrentReadContext(ReadVerbHandler.ReadContext readCont
 
     public void doVerb(Message message)
     {
-        byte[] body = (byte[])message.getMessageBody()[0];
+        byte[] body = message.getMessageBody();
         /* Obtain a Read Context from TLS */
         ReadContext readCtx = tls_.get();
         if ( readCtx == null )
@@ -101,7 +101,7 @@ public void doVerb(Message message)
             System.arraycopy(readCtx.bufOut_.getData(), 0, bytes, 0, bytes.length);
             logger_.info("copy  TIME: " + (System.currentTimeMillis() - start) + " ms.");
 
-            Message response = message.getReply( StorageService.getLocalStorageEndPoint(), new Object[]{bytes} );
+            Message response = message.getReply( StorageService.getLocalStorageEndPoint(), bytes );
             MessagingService.getMessagingInstance().sendOneWay(response, message.getFrom());
             logger_.info("ReadVerbHandler  TIME 2: " + (System.currentTimeMillis() - start) + " ms.");
             
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationMessage.java
index 3abb22a1..19472184 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationMessage.java
@@ -41,32 +41,26 @@
 public class RowMutationMessage implements Serializable
 {   
     public static final String hint_ = "HINT";
-    private static ICompactSerializer<RowMutationMessage> serializer_;	
+    private static RowMutationMessageSerializer serializer_ = new RowMutationMessageSerializer();
 	
-    static
-    {
-        serializer_ = new RowMutationMessageSerializer();
-    }
-
-    static ICompactSerializer<RowMutationMessage> serializer()
+    static RowMutationMessageSerializer serializer()
     {
         return serializer_;
     }
 
-    public static Message makeRowMutationMessage(RowMutationMessage rowMutationMessage) throws IOException
+    public Message makeRowMutationMessage() throws IOException
     {         
-        return makeRowMutationMessage(rowMutationMessage, StorageService.mutationVerbHandler_);
+        return makeRowMutationMessage(StorageService.mutationVerbHandler_);
     }
     
-    public static Message makeRowMutationMessage(RowMutationMessage rowMutationMessage, String verbHandlerName) throws IOException
+    public Message makeRowMutationMessage(String verbHandlerName) throws IOException
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
-        RowMutationMessage.serializer().serialize(rowMutationMessage, dos);
+        RowMutationMessage.serializer().serialize(this, dos);
         EndPoint local = StorageService.getLocalStorageEndPoint();
         EndPoint from = ( local != null ) ? local : new EndPoint(FBUtilities.getHostAddress(), 7000);
-        Message message = new Message(from, StorageService.mutationStage_, verbHandlerName, new Object[]{bos.toByteArray()});         
-        return message;
+        return new Message(from, StorageService.mutationStage_, verbHandlerName, bos.toByteArray());         
     }
     
     @XmlElement(name="RowMutation")
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 361afae3..834ff843 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -53,7 +53,7 @@
 
     public void doVerb(Message message)
     {
-        byte[] bytes = (byte[]) message.getMessageBody()[0];
+        byte[] bytes = message.getMessageBody();
         /* Obtain a Row Mutation Context from TLS */
         RowMutationContext rowMutationCtx = tls_.get();
         if ( rowMutationCtx == null )
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 26d94239..97f1b45c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -299,7 +299,7 @@ public void onStreamCompletion(String host, StreamContextManager.StreamContext s
         */
         public void doVerb(Message message)
         {
-            byte[] body = (byte[])message.getMessageBody()[0];
+            byte[] body = message.getMessageBody();
             DataInputBuffer bufIn = new DataInputBuffer();
             bufIn.reset(body, body.length); 
             
@@ -330,7 +330,7 @@ public void doVerb(Message message)
                 StreamContextManager.registerStreamCompletionHandler(message.getFrom().getHost(), new Table.BootstrapCompletionHandler());
                 /* Send a bootstrap initiation done message to execute on default stage. */
                 logger_.debug("Sending a bootstrap initiate done message ...");                
-                Message doneMessage = new Message( StorageService.getLocalStorageEndPoint(), "", StorageService.bootStrapInitiateDoneVerbHandler_, new Object[]{new byte[0]} );
+                Message doneMessage = new Message( StorageService.getLocalStorageEndPoint(), "", StorageService.bootStrapInitiateDoneVerbHandler_, new byte[0] );
                 MessagingService.getMessagingInstance().sendOneWay(doneMessage, message.getFrom());
             }
             catch ( IOException ex )
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchMessage.java
index 52f6d9bd..1b8ba738 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchMessage.java
@@ -32,7 +32,7 @@ public static Message makeTouchMessage(TouchMessage touchMessage) throws IOExcep
     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
         TouchMessage.serializer().serialize(touchMessage, dos);
-        Message message = new Message(StorageService.getLocalStorageEndPoint(), StorageService.readStage_, StorageService.touchVerbHandler_, new Object[]{bos.toByteArray()});         
+        Message message = new Message(StorageService.getLocalStorageEndPoint(), StorageService.readStage_, StorageService.touchVerbHandler_, bos.toByteArray());         
         return message;
     }
     
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchVerbHandler.java
index 5a2fe15e..99adfbc5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TouchVerbHandler.java
@@ -23,7 +23,7 @@
 
     public void doVerb(Message message)
     {
-        byte[] body = (byte[])message.getMessageBody()[0];
+        byte[] body = message.getMessageBody();
         /* Obtain a Read Context from TLS */
         ReadContext readCtx = tls_.get();
         if ( readCtx == null )
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapInitiateMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapInitiateMessage.java
index 47383db4..386d68fd 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapInitiateMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapInitiateMessage.java
@@ -54,7 +54,7 @@ public static Message makeBootstrapInitiateMessage(BootstrapInitiateMessage biMe
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
         BootstrapInitiateMessage.serializer().serialize(biMessage, dos);
-        return new Message( StorageService.getLocalStorageEndPoint(), "", StorageService.bootStrapInitiateVerbHandler_, new Object[]{bos.toByteArray()} );
+        return new Message( StorageService.getLocalStorageEndPoint(), "", StorageService.bootStrapInitiateVerbHandler_, bos.toByteArray() );
     }
     
     protected StreamContextManager.StreamContext[] streamContexts_ = new StreamContextManager.StreamContext[0];
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
index 8530d65b..341d72e1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
@@ -53,7 +53,7 @@ protected static Message makeBootstrapMetadataMessage(BootstrapMetadataMessage b
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
         BootstrapMetadataMessage.serializer().serialize(bsMetadataMessage, dos);
-        return new Message( StorageService.getLocalStorageEndPoint(), "", StorageService.bsMetadataVerbHandler_, new Object[]{bos.toByteArray()} );            
+        return new Message( StorageService.getLocalStorageEndPoint(), "", StorageService.bsMetadataVerbHandler_, bos.toByteArray() );
     }        
     
     protected BootstrapMetadata[] bsMetadata_ = new BootstrapMetadata[0];
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
index fafe4655..46038823 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
@@ -47,7 +47,7 @@
     public void doVerb(Message message)
     {
         logger_.debug("Received a BootstrapMetadataMessage from " + message.getFrom());
-        byte[] body = (byte[])message.getMessageBody()[0];
+        byte[] body = message.getMessageBody();
         DataInputBuffer bufIn = new DataInputBuffer();
         bufIn.reset(body, body.length);
         try
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index c2ccbc5c..c3f60632 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -356,7 +356,7 @@ Message makeGossipDigestSynMessage(List<GossipDigest> gDigests) throws IOExcepti
         ByteArrayOutputStream bos = new ByteArrayOutputStream(Gossiper.MAX_GOSSIP_PACKET_SIZE);
         DataOutputStream dos = new DataOutputStream( bos );
         GossipDigestSynMessage.serializer().serialize(gDigestMessage, dos);
-        Message message = new Message(localEndPoint_, Gossiper.GOSSIP_STAGE, GOSSIP_DIGEST_SYN_VERB, new Object[]{bos.toByteArray()});
+        Message message = new Message(localEndPoint_, Gossiper.GOSSIP_STAGE, GOSSIP_DIGEST_SYN_VERB, bos.toByteArray());
         return message;
     }
 
@@ -366,7 +366,7 @@ Message makeGossipDigestAckMessage(GossipDigestAckMessage gDigestAckMessage) thr
         DataOutputStream dos = new DataOutputStream(bos);
         GossipDigestAckMessage.serializer().serialize(gDigestAckMessage, dos);
         logger_.trace("@@@@ Size of GossipDigestAckMessage is " + bos.toByteArray().length);
-        Message message = new Message(localEndPoint_, Gossiper.GOSSIP_STAGE, GOSSIP_DIGEST_ACK_VERB, new Object[]{bos.toByteArray()});
+        Message message = new Message(localEndPoint_, Gossiper.GOSSIP_STAGE, GOSSIP_DIGEST_ACK_VERB, bos.toByteArray());
         return message;
     }
 
@@ -375,7 +375,7 @@ Message makeGossipDigestAck2Message(GossipDigestAck2Message gDigestAck2Message)
         ByteArrayOutputStream bos = new ByteArrayOutputStream(Gossiper.MAX_GOSSIP_PACKET_SIZE);
         DataOutputStream dos = new DataOutputStream(bos);
         GossipDigestAck2Message.serializer().serialize(gDigestAck2Message, dos);
-        Message message = new Message(localEndPoint_, Gossiper.GOSSIP_STAGE, GOSSIP_DIGEST_ACK2_VERB, new Object[]{bos.toByteArray()});
+        Message message = new Message(localEndPoint_, Gossiper.GOSSIP_STAGE, GOSSIP_DIGEST_ACK2_VERB, bos.toByteArray());
         return message;
     }
 
@@ -949,7 +949,7 @@ public void doVerb(Message message)
         EndPoint from = message.getFrom();
         logger_.debug("Received a JoinMessage from " + from);
 
-        byte[] bytes = (byte[])message.getMessageBody()[0];
+        byte[] bytes = message.getMessageBody();
         DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
 
         try
@@ -976,7 +976,7 @@ public void doVerb(Message message)
         EndPoint from = message.getFrom();
         logger_.trace("Received a GossipDigestSynMessage from " + from);
 
-        byte[] bytes = (byte[])message.getMessageBody()[0];
+        byte[] bytes = message.getMessageBody();
         DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
 
         try
@@ -1060,7 +1060,7 @@ public void doVerb(Message message)
         EndPoint from = message.getFrom();
         logger_.trace("Received a GossipDigestAckMessage from " + from);
 
-        byte[] bytes = (byte[])message.getMessageBody()[0];
+        byte[] bytes = message.getMessageBody();
         DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
 
         try
@@ -1107,7 +1107,7 @@ public void doVerb(Message message)
         EndPoint from = message.getFrom();
         logger_.trace("Received a GossipDigestAck2Message from " + from);
 
-        byte[] bytes = (byte[])message.getMessageBody()[0];
+        byte[] bytes = message.getMessageBody();
         DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
         try
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java
index ded451e3..3c884bc0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java
@@ -19,7 +19,6 @@
 package org.apache.cassandra.net;
 
 import java.util.List;
-import java.util.Hashtable;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -27,8 +26,6 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.service.QuorumResponseHandler;
 import org.apache.cassandra.utils.LogUtil;
 import org.apache.log4j.Logger;
 
@@ -39,7 +36,7 @@
 class AsyncResult implements IAsyncResult
 {
     private static Logger logger_ = Logger.getLogger( AsyncResult.class );
-    private Object[] result_ = new Object[0];    
+    private byte[] result_;
     private AtomicBoolean done_ = new AtomicBoolean(false);
     private Lock lock_ = new ReentrantLock();
     private Condition condition_;
@@ -49,7 +46,7 @@ public AsyncResult()
         condition_ = lock_.newCondition();
     }    
     
-    public Object[] get()
+    public byte[] get()
     {
         lock_.lock();
         try
@@ -75,7 +72,7 @@ public boolean isDone()
         return done_.get();
     }
     
-    public Object[] get(long timeout, TimeUnit tu) throws TimeoutException
+    public byte[] get(long timeout, TimeUnit tu) throws TimeoutException
     {
         lock_.lock();
         try
@@ -105,12 +102,12 @@ public boolean isDone()
         return result_;
     }
     
-    public List<Object[]> multiget()
+    public List<byte[]> multiget()
     {
         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
     }
     
-    public List<Object[]> multiget(long timeout, TimeUnit tu) throws TimeoutException
+    public List<byte[]> multiget(long timeout, TimeUnit tu) throws TimeoutException
     {
         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IAsyncResult.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IAsyncResult.java
index d162f316..2971c5c9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IAsyncResult.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IAsyncResult.java
@@ -39,7 +39,7 @@
      * Returns the result for the task that was submitted.
      * @return the result wrapped in an Object[]
     */
-    public Object[] get();    
+    public byte[] get();
     
     /**
      * Same operation as the above get() but allows the calling
@@ -48,13 +48,13 @@
      * @param tu the time unit of the timeout argument
      * @return the result wrapped in an Object[]
     */
-    public Object[] get(long timeout, TimeUnit tu) throws TimeoutException;
+    public byte[] get(long timeout, TimeUnit tu) throws TimeoutException;
     
     /**
      * Returns the result for all tasks that was submitted.
      * @return the list of results wrapped in an Object[]
     */
-    public List<Object[]> multiget();
+    public List<byte[]> multiget();
     
     /**
      * Same operation as the above get() but allows the calling
@@ -63,7 +63,7 @@
      * @param tu the time unit of the timeout argument
      * @return the result wrapped in an Object[]
     */
-    public List<Object[]> multiget(long timeout, TimeUnit tu) throws TimeoutException;
+    public List<byte[]> multiget(long timeout, TimeUnit tu) throws TimeoutException;
     
     /**
      * Store the result obtained for the submitted task.
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
index 304803c9..7c912cf4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
@@ -51,20 +51,20 @@
     }
     
     Header header_;
-    private Object[] body_ = new Object[0];
+    private byte[] body_;
     
-    protected Message(String id, EndPoint from, String messageType, String verb, Object... body)
+    protected Message(String id, EndPoint from, String messageType, String verb, byte[] body)
     {
         this(new Header(id, from, messageType, verb), body);
     }
     
-    protected Message(Header header, Object... body)
+    protected Message(Header header, byte[] body)
     {
         header_ = header;
         body_ = body;
     }
 
-    public Message(EndPoint from, String messageType, String verb, Object... body)
+    public Message(EndPoint from, String messageType, String verb, byte[] body)
     {
         this(new Header(from, messageType, verb), body);
     }    
@@ -99,12 +99,12 @@ public void addHeader(String key, byte[] value)
         return header_.getDetails();
     }
 
-    public Object[] getMessageBody()
+    public byte[] getMessageBody()
     {
         return body_;
     }
     
-    public void setMessageBody(Object[] body)
+    public void setMessageBody(byte[] body)
     {
         body_ = body;
     }
@@ -129,35 +129,12 @@ public String getMessageId()
         return header_.getMessageId();
     }
     
-    public Class[] getTypes()
-    {
-        List<Class> types = new ArrayList<Class>();
-        
-        for ( int i = 0; i < body_.length; ++i )
-        {
-            if ( body_[i].getClass().isArray() )
-            {
-                int size = Array.getLength(body_[i]);
-                if ( size > 0 )
-                {
-                    types.add( Array.get( body_[i], 0).getClass() );
-                }
-            }
-            else
-            {
-                types.add(body_[i].getClass());
-            }
-        }
-        
-        return types.toArray( new Class[0] );
-    }    
-
     void setMessageId(String id)
     {
         header_.setMessageId(id);
     }    
 
-    public Message getReply(EndPoint from, Object... args)
+    public Message getReply(EndPoint from, byte[] args)
     {        
         Message response = new Message(getMessageId(),
                                        from,
@@ -179,20 +156,6 @@ public String toString()
         sbuf.append(separator);
         sbuf.append("VERB:" + getVerb());
         sbuf.append(separator);
-        sbuf.append("BODY TYPE:" + getBodyTypes());        
-        sbuf.append(separator);
-        return sbuf.toString();
-    }
-    
-    private String getBodyTypes()
-    {
-        StringBuffer sbuf = new StringBuffer("");
-        Class[] types = getTypes();
-        for ( int i = 0; i < types.length; ++i )
-        {
-            sbuf.append(types[i].getName());
-            sbuf.append(" ");         
-        }
         return sbuf.toString();
     }    
 }
@@ -202,7 +165,7 @@ private String getBodyTypes()
     public void serialize(Message t, DataOutputStream dos) throws IOException
     {
         Header.serializer().serialize( t.header_, dos);
-        byte[] bytes = (byte[])t.getMessageBody()[0];
+        byte[] bytes = t.getMessageBody();
         dos.writeInt(bytes.length);
         dos.write(bytes);
     }
@@ -214,6 +177,6 @@ public Message deserialize(DataInputStream dis) throws IOException
         byte[] bytes = new byte[size];
         dis.readFully(bytes);
         // return new Message(header.getMessageId(), header.getFrom(), header.getMessageType(), header.getVerb(), new Object[]{bytes});
-        return new Message(header, new Object[]{bytes});
+        return new Message(header, bytes);
     }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MultiAsyncResult.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MultiAsyncResult.java
index 6918705f..62ab7476 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MultiAsyncResult.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MultiAsyncResult.java
@@ -33,7 +33,7 @@
 {
     private static Logger logger_ = Logger.getLogger( AsyncResult.class );
     private int expectedResults_;
-    private List<Object[]> result_ = new ArrayList<Object[]>();    
+    private List<byte[]> result_ = new ArrayList<byte[]>();
     private AtomicBoolean done_ = new AtomicBoolean(false);
     private Lock lock_ = new ReentrantLock();
     private Condition condition_;
@@ -44,17 +44,17 @@
         condition_ = lock_.newCondition();
     }
     
-    public Object[] get()
+    public byte[] get()
     {
         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
     }
     
-    public Object[] get(long timeout, TimeUnit tu) throws TimeoutException
+    public byte[] get(long timeout, TimeUnit tu) throws TimeoutException
     {
         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
     }
     
-    public List<Object[]> multiget()
+    public List<byte[]> multiget()
     {
         lock_.lock();
         try
@@ -80,7 +80,7 @@ public boolean isDone()
         return done_.get();
     }
     
-    public List<Object[]> multiget(long timeout, TimeUnit tu) throws TimeoutException
+    public List<byte[]> multiget(long timeout, TimeUnit tu) throws TimeoutException
     {
         lock_.lock();
         try
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java
index a3e6f408..a8acd047 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java
@@ -219,7 +219,7 @@ public static Message makeStreamStatusMessage(StreamStatusMessage streamStatusMe
             ByteArrayOutputStream bos = new ByteArrayOutputStream();
             DataOutputStream dos = new DataOutputStream( bos );
             StreamStatusMessage.serializer().serialize(streamStatusMessage, dos);
-            return new Message(StorageService.getLocalStorageEndPoint(), "", StorageService.bootStrapTerminateVerbHandler_, new Object[]{bos.toByteArray()});
+            return new Message(StorageService.getLocalStorageEndPoint(), "", StorageService.bootStrapTerminateVerbHandler_, bos.toByteArray());
         }
         
         protected StreamContextManager.StreamStatus streamStatus_;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 268286a6..96107bad 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -573,7 +573,7 @@ public CqlResult_t executeQuery(String query) throws TException
             // read response
             // TODO send more requests if we need to span multiple nodes
             // double the usual timeout since range requests are expensive
-            byte[] responseBody = (byte[])iar.get(2 * DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS)[0];
+            byte[] responseBody = iar.get(2 * DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
             return RangeReply.read(responseBody).keys;
         }
         catch (Exception e)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
index 6630268f..d22d43c8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
@@ -66,7 +66,7 @@ private void handleDigestResponses()
 			logger_.debug("Handle Digest reponses");
 			for( Message response : responses_ )
 			{
-				byte[] body = (byte[])response.getMessageBody()[0];            
+				byte[] body = response.getMessageBody();            
 	            bufIn.reset(body, body.length);
 	            try
 	            {	               
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java
index 5f7e70ce..a24509d4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java
@@ -113,7 +113,7 @@ public void schedule(EndPoint target, RowMutationMessage rowMutationMessage)
 	{
         try
         {
-            Message message = RowMutationMessage.makeRowMutationMessage(rowMutationMessage, StorageService.readRepairVerbHandler_);
+            Message message = rowMutationMessage.makeRowMutationMessage(StorageService.readRepairVerbHandler_);
     		String key = target + ":" + message.getMessageId();
     		readRepairTable_.put(key, message);
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
index f5ccbb31..f6befd43 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
@@ -75,7 +75,7 @@ public Row resolve(List<Message> responses) throws DigestMismatchException
         DataInputBuffer bufIn = new DataInputBuffer();
 		for (Message response : responses)
 		{					            
-            byte[] body = (byte[])response.getMessageBody()[0];            
+            byte[] body = response.getMessageBody();
             bufIn.reset(body, body.length);
             try
             {
@@ -154,7 +154,7 @@ public boolean isDataPresent(List<Message> responses)
 		boolean isDataPresent = false;
 		for (Message response : responses)
 		{
-            byte[] body = (byte[])response.getMessageBody()[0];
+            byte[] body = response.getMessageBody();
 			DataInputBuffer bufIn = new DataInputBuffer();
             bufIn.reset(body, body.length);
             try
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
index 2b0ce35c..fd692fae 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
@@ -156,11 +156,11 @@ private boolean tryThisNode(int myLoad, int threshold, EndPoint target)
     {
         public void doVerb(Message message)
         {
-            Message reply = message.getReply(StorageService.getLocalStorageEndPoint(), new Object[]{isMoveable_.get()});
+            Message reply = message.getReply(StorageService.getLocalStorageEndPoint(), new byte[] {(byte)(isMoveable_.get() ? 1 : 0)});
             MessagingService.getMessagingInstance().sendOneWay(reply, message.getFrom());
             if ( isMoveable_.get() )
             {
-                MoveMessage moveMessage = (MoveMessage)message.getMessageBody()[0];
+                // MoveMessage moveMessage = (MoveMessage)message.getMessageBody()[0];
                 /* Start the leave operation and join the ring at the position specified */
                 isMoveable_.set(false);
             }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index b9bc2eaa..6f618af1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -189,11 +189,10 @@ private static IAsyncResult dispatchMessages(Map<String, EndPoint> endPoints, Ma
         Map<String, Message> messages = constructMessages(readMessages);
         /* Dispatch the messages to the respective endpoints */
         IAsyncResult iar = dispatchMessages(endPoints, messages);        
-        List<Object[]> results = iar.multiget(2*DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
+        List<byte[]> results = iar.multiget(2*DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
         
-        for ( Object[] result : results )
+        for ( byte[] body : results )
         {
-            byte[] body = (byte[])result[0];
             DataInputBuffer bufIn = new DataInputBuffer();
             bufIn.reset(body, body.length);
             ReadResponse response = ReadResponse.serializer().deserialize(bufIn);
@@ -221,8 +220,7 @@ private static Row weakReadRemote(ReadCommand command) throws IOException
         byte[] body;
         try
         {
-            Object[] result = iar.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
-            body = (byte[])result[0];
+            body = iar.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
         }
         catch (TimeoutException e)
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java
index 0dd4081d..6cdf9765 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java
@@ -48,7 +48,7 @@
 
         public void doVerb(Message message)
         {
-            byte[] body = (byte[])message.getMessageBody()[0];
+            byte[] body = message.getMessageBody();
             DataInputBuffer bufIn = new DataInputBuffer();
             bufIn.reset(body, body.length);
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
index 82e2ca63..5fd69e7d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
@@ -37,7 +37,7 @@
 
     public void doVerb(Message message)
     {
-    	byte[] body = (byte[])message.getMessageBody()[0];
+    	byte[] body = message.getMessageBody();
         Token token = StorageService.getPartitioner().getTokenFactory().fromByteArray(body);
         try
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java
index bfe62d8d..bc089992 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java
@@ -19,6 +19,9 @@
 package org.apache.cassandra.service;
 
 import java.util.List;
+import java.io.DataInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
 
 import org.apache.cassandra.db.WriteResponse;
 import org.apache.cassandra.net.Message;
@@ -46,12 +49,19 @@ public Boolean resolve(List<Message> responses) throws DigestMismatchException
 		// if a write fails for a key log that the key could not be replicated
 		boolean returnValue = false;
 		for (Message response : responses) {
-			Object[] body = response.getMessageBody();
-			WriteResponse writeResponse = (WriteResponse) body[0];
-			boolean result = writeResponse.isSuccess();
+            WriteResponse writeResponseMessage = null;
+            try
+            {
+                writeResponseMessage = WriteResponse.serializer().deserialize(new DataInputStream(new ByteArrayInputStream(response.getMessageBody())));
+            }
+            catch (IOException e)
+            {
+                throw new RuntimeException(e);
+            }
+            boolean result = writeResponseMessage.isSuccess();
 			if (!result) {
 				logger_.debug("Write at " + response.getFrom()
-						+ " may have failed for the key " + writeResponse.key());
+						+ " may have failed for the key " + writeResponseMessage.key());
 			}
 			returnValue |= result;
 		}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java
index c4edb8ca..f9e7aad9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java
@@ -60,7 +60,7 @@
 
 public class StressTest
 {
-	private static Logger logger_ = Logger.getLogger(DataImporter.class);
+	private static Logger logger_ = Logger.getLogger(StressTest.class);
 
 	private static final String tablename_ = new String("Test");
 
@@ -103,9 +103,14 @@ public void run()
         {
         	if( rmsg_ != null )
         	{
-				Message message = new Message(from_ , StorageService.mutationStage_,
-						StorageService.loadVerbHandler_, new Object[] { rmsg_ });
-				MessagingService.getMessagingInstance().sendOneWay(message, to_);
+                try
+                {
+                    MessagingService.getMessagingInstance().sendOneWay(rmsg_.makeRowMutationMessage(), to_);
+                }
+                catch (IOException e)
+                {
+                    throw new RuntimeException(e);
+                }
         	}
         	
        	}
@@ -125,12 +130,7 @@ public void applyLoad(RowMutation rm) throws IOException {
         {
             long t = System.currentTimeMillis();
             RowMutationMessage rmMsg = new RowMutationMessage(rm);           
-            Message message = new Message(from_, 
-                    StorageService.mutationStage_,
-                    StorageService.mutationVerbHandler_, 
-                    new Object[]{ rmMsg }
-            );                                                            
-			MessagingService.getMessagingInstance().sendOneWay(message, to_);
+			MessagingService.getMessagingInstance().sendOneWay(rmMsg.makeRowMutationMessage(), to_);
             Thread.sleep(1, 1000000000/requestsPerSecond_);
             
         }
@@ -143,33 +143,16 @@ public void applyLoad(RowMutation rm) throws IOException {
 	
     public void readLoad(ReadCommand readCommand)
     {
-		IResponseResolver<Row> readResponseResolver = new ReadResponseResolver();
-		QuorumResponseHandler<Row> quorumResponseHandler = new QuorumResponseHandler<Row>(
-				1,
-				readResponseResolver);
-		Message message = new Message(from_, StorageService.readStage_,
-				StorageService.readVerbHandler_,
-				new Object[] {readCommand});
-		MessagingService.getMessagingInstance().sendOneWay(message, to_);
-		/*IAsyncResult iar = MessagingService.getMessagingInstance().sendRR(message, to_);
 		try
 		{
-			long t = System.currentTimeMillis();
-			iar.get(2000, TimeUnit.MILLISECONDS );
-			logger_.debug("Time taken for read..."
-					+ (System.currentTimeMillis() - t));
-			
+            MessagingService.getMessagingInstance().sendOneWay(readCommand.makeReadMessage(), to_);
 		}
-		catch (Exception ex)
+        catch (IOException e)
 		{
-            ex.printStackTrace();
-		}*/
+            throw new RuntimeException(e);
+        }
     }
     
-    
-    
-    
-    
 	public void randomReadColumn  (int keys, int columns, int size, int tps)
 	{
         Random random = new Random();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/AdminTool.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/AdminTool.java
index 26bddd78..79f23829 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/AdminTool.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/AdminTool.java
@@ -159,7 +159,7 @@ public void run(int operation, String columnFamilyName, long skip) throws Throwa
 		RowMutationMessage rmMsg = new RowMutationMessage(rm);
         if( server_ != null)
         {
-            Message message = RowMutationMessage.makeRowMutationMessage(rmMsg, StorageService.binaryVerbHandler_);
+            Message message = rmMsg.makeRowMutationMessage(StorageService.binaryVerbHandler_);
 	        EndPoint to = new EndPoint(server_, 7000);
 			MessagingService.getMessagingInstance().sendOneWay(message, to);
         }
@@ -167,7 +167,7 @@ public void run(int operation, String columnFamilyName, long skip) throws Throwa
         {
         	for( String server : servers_ )
         	{
-                Message message = RowMutationMessage.makeRowMutationMessage(rmMsg, StorageService.binaryVerbHandler_);
+                Message message = rmMsg.makeRowMutationMessage(StorageService.binaryVerbHandler_);
 		        EndPoint to = new EndPoint(server, 7000);
 				MessagingService.getMessagingInstance().sendOneWay(message, to);
         	}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java
index cfe62d45..28775f85 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java
@@ -63,7 +63,7 @@ public static void main(String[] args) throws Throwable
         DataOutputStream dos = new DataOutputStream(bos);
         MembershipCleanerMessage.serializer().serialize(mcMessage, dos);
         /* Construct the token update message to be sent */
-        Message mbrshipCleanerMessage = new Message( new EndPoint(FBUtilities.getHostAddress(), port_), "", StorageService.mbrshipCleanerVerbHandler_, new Object[]{bos.toByteArray()} );
+        Message mbrshipCleanerMessage = new Message( new EndPoint(FBUtilities.getHostAddress(), port_), "", StorageService.mbrshipCleanerVerbHandler_, bos.toByteArray() );
         
         BufferedReader bufReader = new BufferedReader( new InputStreamReader( new FileInputStream(file) ) );
         String line = null;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
index 5b20ddcd..3caa490a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
@@ -43,7 +43,7 @@
 
     public void doVerb(Message message)
     {
-        byte[] body = (byte[])message.getMessageBody()[0];
+        byte[] body = message.getMessageBody();
         
         try
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
index 37e41057..27d1a66d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
@@ -47,7 +47,7 @@
 
     public void doVerb(Message message)
     {
-    	byte[] body = (byte[])message.getMessageBody()[0];
+    	byte[] body = message.getMessageBody();
         
         try
         {
@@ -78,7 +78,7 @@ public void doVerb(Message message)
                 ByteArrayOutputStream bos = new ByteArrayOutputStream();
                 DataOutputStream dos = new DataOutputStream(bos);
                 Token.serializer().serialize(token, dos);
-                message.setMessageBody(new Object[]{bos.toByteArray()});
+                message.setMessageBody(bos.toByteArray());
                 
                 logger_.debug("Sending a token update message to " + target + " to update it to " + token);
                 MessagingService.getMessagingInstance().sendOneWay(message, target);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java
index a6089fc9..1cb95676 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java
@@ -58,7 +58,7 @@ public static void main(String[] args) throws Throwable
         Token.serializer().serialize(token, dos);
 
         /* Construct the token update message to be sent */
-        Message tokenUpdateMessage = new Message( new EndPoint(FBUtilities.getHostAddress(), port_), "", StorageService.tokenVerbHandler_, new Object[]{bos.toByteArray()} );
+        Message tokenUpdateMessage = new Message( new EndPoint(FBUtilities.getHostAddress(), port_), "", StorageService.tokenVerbHandler_, bos.toByteArray() );
         
         BufferedReader bufReader = new BufferedReader( new InputStreamReader( new FileInputStream(file) ) );
         String line = null;
