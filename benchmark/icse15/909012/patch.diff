diff --git a/lucene/solr/branches/cloud/src/java/org/apache/solr/cloud/ZkController.java b/lucene/solr/branches/cloud/src/java/org/apache/solr/cloud/ZkController.java
index 8410ab3e..3547b058 100644
--- a/lucene/solr/branches/cloud/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/solr/branches/cloud/src/java/org/apache/solr/cloud/ZkController.java
@@ -695,8 +695,10 @@ public void addShardZkNodeWatches() throws KeeperException, InterruptedException
     Set<String> knownCollections = cloudState.getCollections();
     
     List<String> collections = zkClient.getChildren(COLLECTIONS_ZKNODE, null);
+
     for(final String collection : collections) {
       if(!knownCollections.contains(collection)) {
+        log.info("Found new collection:" + collection);
         Watcher watcher = new Watcher() {
           public void process(WatchedEvent event) {
             log.info("Detected changed ShardId in collection:" + collection);
@@ -721,25 +723,23 @@ public void process(WatchedEvent event) {
           }
         };
         boolean madeWatch = true;
-
+        String shardZkNode = COLLECTIONS_ZKNODE + "/" + collection
+            + SHARDS_ZKNODE;
         for (int i = 0; i < 5; i++) {
           try {
-            zkClient.getChildren(COLLECTIONS_ZKNODE + "/" + collection
-                + SHARDS_ZKNODE, watcher);
+            zkClient.getChildren(shardZkNode, watcher);
           } catch (KeeperException.NoNodeException e) {
             // most likely, the collections node has been created, but not the
             // shards node yet -- pause and try again
             madeWatch = false;
             if (i == 4) {
-              // nocommit : 
-//              throw new ZooKeeperException(
-//                  SolrException.ErrorCode.SERVER_ERROR,
-//                  "Could not set shards zknode watch, because the zknode does not exist");
+              log.error("Could not set shards zknode watch, because the zknode does not exist:" + shardZkNode);
             break;
             }
-            Thread.sleep(50);
+            Thread.sleep(100);
           }
-          if(madeWatch) {
+          if (madeWatch) {
+            log.info("Made shard watch:" + shardZkNode);
             break;
           }
         }
diff --git a/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/AbstractZkTestCase.java b/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/AbstractZkTestCase.java
index 90dbf493..9093b79d 100644
--- a/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/AbstractZkTestCase.java
+++ b/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/AbstractZkTestCase.java
@@ -109,10 +109,6 @@ static void buildZooKeeper(String config, String schema)
     props1.put("configName", "conf1");
     zkClient.makePath("/collections/collection1", props1.store(), CreateMode.PERSISTENT);
     
-    ZkNodeProps props2 = new ZkNodeProps();
-    props2.put("configName", "conf1");
-    zkClient.makePath("/collections/testcore", props2.store(), CreateMode.PERSISTENT);
-    
     putConfig(zkClient, config);
     putConfig(zkClient, schema);
     putConfig(zkClient, "stopwords.txt");
diff --git a/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java b/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
index 4a5ced56..bd09f6de 100644
--- a/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
+++ b/lucene/solr/branches/cloud/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
@@ -153,14 +153,6 @@ public void doTest() throws Exception {
       query("q","*:*", "sort",f+" asc");
     }
 
-    /**
-    h.getCoreContainer().getCore(h.getCoreContainer().getDefaultCoreName()).close();
-    CoreDescriptor dcore= new CoreDescriptor( h.getCoreContainer(), "testcore", "testcore");
-
-    SolrCore core = h.getCoreContainer().create(dcore);
-    h.getCoreContainer().register(core, false);
-    **/
-  
     // these queries should be exactly ordered and scores should exactly match
     query("q","*:*", "sort",i1+" desc");
     query("q","*:*", "sort",i1+" asc");
