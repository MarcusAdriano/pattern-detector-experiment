diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/CassandraServer.java
index 6dfbf4c0..91b118bb 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -80,11 +80,6 @@ public void start() throws IOException
 
         Map<String, ColumnFamily> columnFamilyKeyMap = new HashMap<String,ColumnFamily>();
 
-        for (ReadCommand command: commands)
-        {
-            ThriftValidation.validateKey(command.key);
-        }
-
         if (consistency_level == ConsistencyLevel.ZERO)
         {
             throw new InvalidRequestException("Consistency level zero may not be applied to read operations");
@@ -238,13 +233,19 @@ public void start() throws IOException
         if (predicate.column_names != null)
         {
             for (String key: keys)
+            {
+                ThriftValidation.validateKey(key);
                 commands.add(new SliceByNamesReadCommand(keyspace, key, column_parent, predicate.column_names));
+            }
             ThriftValidation.validateColumns(keyspace, column_parent, predicate.column_names);
         }
         else
         {
             for (String key: keys)
+            {
+                ThriftValidation.validateKey(key);
                 commands.add(new SliceFromReadCommand(keyspace, key, column_parent, range.start, range.finish, range.reversed, range.count));
+            }
             ThriftValidation.validateRange(keyspace, column_parent, range);
         }
 
@@ -318,6 +319,7 @@ public ColumnOrSuperColumn get(String table, String key, ColumnPath column_path,
         List<ReadCommand> commands = new ArrayList<ReadCommand>();
         for (String key: keys)
         {
+            ThriftValidation.validateKey(key);
             commands.add(new SliceByNamesReadCommand(table, key, path, nameAsList));
         }
 
@@ -380,6 +382,7 @@ public int get_count(String table, String key, ColumnParent column_parent, int c
         List<ReadCommand> commands = new ArrayList<ReadCommand>();
         for (String key: keys)
         {
+            ThriftValidation.validateKey(key);
             commands.add(new SliceFromReadCommand(table, key, column_parent, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, Integer.MAX_VALUE));
         }
 
@@ -409,7 +412,7 @@ public void insert(String table, String key, ColumnPath column_path, byte[] valu
         ThriftValidation.validateKey(key);
         ThriftValidation.validateColumnPath(table, column_path);
 
-        RowMutation rm = new RowMutation(table, key.trim());
+        RowMutation rm = new RowMutation(table, key);
         try
         {
             rm.add(new QueryPath(column_path), value, timestamp);
@@ -426,6 +429,7 @@ public void batch_insert(String keyspace, String key, Map<String, List<ColumnOrS
     {
         if (logger.isDebugEnabled())
             logger.debug("batch_insert");
+        ThriftValidation.validateKey(key);
 
         for (String cfName : cfmap.keySet())
         {
@@ -453,9 +457,10 @@ public void remove(String table, String key, ColumnPath column_path, long timest
     {
         if (logger.isDebugEnabled())
             logger.debug("remove");
+        ThriftValidation.validateKey(key);
         ThriftValidation.validateColumnPathOrParent(table, column_path);
         
-        RowMutation rm = new RowMutation(table, key.trim());
+        RowMutation rm = new RowMutation(table, key);
         rm.delete(new QueryPath(column_path), timestamp);
 
         doInsert(consistency_level, rm);
