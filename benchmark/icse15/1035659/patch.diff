diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java
index c0b304b4..c28cb036 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java
@@ -31,7 +31,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOError;
 import java.io.IOException;
 import java.util.Collection;
@@ -51,7 +50,7 @@ public void doVerb(final Message message)
             Collection<Column> cols = MigrationManager.makeColumns(message);
             for (Column col : cols)
             {
-                final UUID version = UUIDGen.makeType1UUID(col.name());
+                final UUID version = UUIDGen.getUUID(col.name());
                 if (version.timestamp() > DatabaseDescriptor.getDefsVersion().timestamp())
                 {
                     final Migration m = Migration.deserialize(col.value());
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
index 96888f58..475b34d8 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
@@ -21,10 +21,9 @@
  */
 
 
-import java.util.UUID;
 import java.nio.ByteBuffer;
 
-import org.apache.cassandra.utils.ByteBufferUtil;
+import org.apache.cassandra.utils.UUIDGen;
 
 public class LexicalUUIDType extends AbstractType
 {
@@ -32,11 +31,6 @@
 
     LexicalUUIDType() {} // singleton
 
-    static UUID getUUID(ByteBuffer bytes)
-    {
-        return new UUID(bytes.getLong(bytes.position()+bytes.arrayOffset()), bytes.getLong(bytes.position()+bytes.arrayOffset()));
-    }
-
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         if (o1.remaining() == 0)
@@ -48,7 +42,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)
             return 1;
         }
 
-        return getUUID(o1).compareTo(getUUID(o2));
+        return UUIDGen.getUUID(o1).compareTo(UUIDGen.getUUID(o2));
     }
 
     public String getString(ByteBuffer bytes)
@@ -61,6 +55,6 @@ public String getString(ByteBuffer bytes)
         {
             throw new MarshalException("UUIDs must be exactly 16 bytes");
         }
-        return getUUID(bytes).toString();
+        return UUIDGen.getUUID(bytes).toString();
     }
 }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index 31ba515c..5a724235 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -24,7 +24,7 @@
 import java.nio.ByteBuffer;
 import java.util.UUID;
 
-import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.UUIDGen;
 
 public class TimeUUIDType extends AbstractType
 {
@@ -80,7 +80,7 @@ public String getString(ByteBuffer bytes)
         {
             throw new MarshalException("UUIDs must be exactly 16 bytes");
         }
-        UUID uuid = LexicalUUIDType.getUUID(bytes);
+        UUID uuid = UUIDGen.getUUID(bytes);
         if (uuid.version() != 1)
         {
             throw new MarshalException("TimeUUID only makes sense with version 1 UUIDs");
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java
index d9c2491d..3f1fa51e 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -179,7 +179,7 @@ public static UUID getLastMigrationId()
         if (cf == null || cf.getColumnNames().size() == 0)
             return null;
         else
-            return UUIDGen.makeType1UUID(cf.getColumn(LAST_MIGRATION_KEY).value());
+            return UUIDGen.getUUID(cf.getColumn(LAST_MIGRATION_KEY).value());
     }
     
     /** keep in mind that applyLive might happen on another machine */
@@ -277,8 +277,8 @@ public static Migration deserialize(ByteBuffer bytes) throws IOException
         }
         
         // super inflate
-        migration.lastVersion = UUIDGen.makeType1UUID(ByteBuffer.wrap(mi.old_version.bytes()));
-        migration.newVersion = UUIDGen.makeType1UUID(ByteBuffer.wrap(mi.new_version.bytes()));
+        migration.lastVersion = UUIDGen.getUUID(ByteBuffer.wrap(mi.old_version.bytes()));
+        migration.newVersion = UUIDGen.getUUID(ByteBuffer.wrap(mi.new_version.bytes()));
         try
         {
             migration.rm = RowMutation.serializer().deserialize(SerDeUtils.createDataInputStream(mi.row_mutation));
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/UUIDGen.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/UUIDGen.java
index 0089ba8f..1a1e902a 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/UUIDGen.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/UUIDGen.java
@@ -21,8 +21,6 @@
  */
 
 
-import java.io.DataInputStream;
-import java.io.IOException;
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
@@ -47,7 +45,7 @@ public static synchronized UUID makeType1UUIDFromHost(InetAddress addr)
             byte[] md5 = digest.digest();
             byte[] fauxMac = new byte[6];
             System.arraycopy(md5, 0, fauxMac, 0, Math.min(md5.length, fauxMac.length));
-            return makeType1UUID(ByteBuffer.wrap(UUIDGenerator.getInstance().generateTimeBasedUUID(new EthernetAddress(fauxMac)).toByteArray()));
+            return getUUID(ByteBuffer.wrap(UUIDGenerator.getInstance().generateTimeBasedUUID(new EthernetAddress(fauxMac)).toByteArray()));
         }
         catch (NoSuchAlgorithmException ex)
         {
@@ -55,24 +53,10 @@ public static synchronized UUID makeType1UUIDFromHost(InetAddress addr)
         }
     }
     
-    public static UUID makeType1UUID(DataInputStream in) throws IOException
-    {
-        byte[] b = new byte[16];
-        in.readFully(b);
-        return makeType1UUID(ByteBuffer.wrap(b));
-    }
-
     /** creates a type 1 uuid from raw bytes. */
-    public static UUID makeType1UUID(ByteBuffer raw)
+    public static UUID getUUID(ByteBuffer raw)
     {
-        long most = 0;
-        long least = 0;
-        assert raw.remaining() == 16;
-        for (int i = 0; i < 8; i++)
-            most = (most << 8) | (raw.array()[raw.position()+raw.arrayOffset() + i] & 0xff);
-        for (int i =8 ; i < 16; i++)
-            least = (least << 8) | (raw.array()[raw.position()+raw.arrayOffset() + i] & 0xff);
-        return new UUID(most, least);
+        return new UUID(raw.getLong(raw.position() + raw.arrayOffset()), raw.getLong(raw.position() + raw.arrayOffset() + 8));
     }
 
     /** decomposes a uuid into raw bytes. */
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
index f9a6ff74..b6206b0e 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -24,7 +24,6 @@
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
@@ -159,7 +158,7 @@ public void testMigrations() throws IOException, ConfigurationException
         int i = 0;
         for (IColumn col : serializedMigrations)
         {
-            UUID version = UUIDGen.makeType1UUID(col.name());
+            UUID version = UUIDGen.getUUID(col.name());
             reconstituded[i] = Migration.deserialize(col.value());
             assert version.equals(reconstituded[i].getVersion());
             i++;
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
index d15467bb..f6461adb 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
@@ -25,9 +25,7 @@
 import org.junit.Test;
 import static org.junit.Assert.assertEquals;
 
-import org.apache.cassandra.CleanupHelper;
-import org.apache.cassandra.db.marshal.TimeUUIDType;
-
+import org.apache.cassandra.utils.UUIDGen;
 import org.safehaus.uuid.UUID;
 import org.safehaus.uuid.UUIDGenerator;
 
@@ -85,8 +83,8 @@ public void testTimestampComparison()
         Arrays.sort(uuids, timeUUIDType);
         for (int i = 1; i < uuids.length; i++)
         {
-            long i0 = LexicalUUIDType.getUUID(uuids[i - 1]).timestamp();
-            long i1 = LexicalUUIDType.getUUID(uuids[i]).timestamp();
+            long i0 = UUIDGen.getUUID(uuids[i - 1]).timestamp();
+            long i1 = UUIDGen.getUUID(uuids[i]).timestamp();
             assert i0 <= i1;
         }
     }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/UUIDTests.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/UUIDTests.java
index 8afe5f7e..6d299ed3 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/UUIDTests.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/UUIDTests.java
@@ -55,7 +55,7 @@ public void testDecomposeAndRaw() throws UnknownHostException
     {
         UUID a = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"));
         byte[] decomposed = UUIDGen.decompose(a);
-        UUID b = UUIDGen.makeType1UUID(ByteBuffer.wrap(decomposed));
+        UUID b = UUIDGen.getUUID(ByteBuffer.wrap(decomposed));
         assert a.equals(b);
     }
 
@@ -67,7 +67,7 @@ public void testTimeUUIDType() throws UnknownHostException
         ByteBuffer second = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"))));
         assert comp.compare(first, second) < 0;
         assert comp.compare(second, first) > 0;
-        ByteBuffer sameAsFirst = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUID(first)));
+        ByteBuffer sameAsFirst = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.getUUID(first)));
         assert comp.compare(first, sameAsFirst) == 0;
     }
 
