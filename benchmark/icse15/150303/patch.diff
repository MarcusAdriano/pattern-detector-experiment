diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/ConjunctionScorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/ConjunctionScorer.java
index 2ee7d48b..9ffd8f7e 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/ConjunctionScorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/ConjunctionScorer.java
@@ -48,12 +48,14 @@ public boolean next() throws IOException {
     } else if (more) {
       more = last().next();                       // trigger further scanning
     }
+    return doNext();
+  }
 
+  private boolean doNext() throws IOException {
     while (more && first().doc() < last().doc()) { // find doc w/ all clauses
       more = first().skipTo(last().doc());      // skip first upto last
       scorers.addLast(scorers.removeFirst());   // move first to last
     }
-    
     return more;                                // found a doc with all clauses
   }
 
@@ -64,7 +66,7 @@ public boolean skipTo(int target) throws IOException {
     }
     if (more)
       sortScorers();                              // re-sort scorers
-    return more;
+    return doNext();
   }
 
   public float score() throws IOException {
@@ -98,6 +100,7 @@ private void sortScorers() throws IOException {
     Scorer[] array = (Scorer[])scorers.toArray(new Scorer[scorers.size()]);
     scorers.clear();                              // empty the list
 
+    // note that this comparator is not consistent with equals!
     Arrays.sort(array, new Comparator() {         // sort the array
         public int compare(Object o1, Object o2) {
           return ((Scorer)o1).doc() - ((Scorer)o2).doc();
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java
index 11550c3a..a71a0085 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java
@@ -65,7 +65,11 @@ public boolean next() throws IOException {
     } else if (more) {
       more = last.next();                         // trigger further scanning
     }
+    return doNext();
+  }
 
+  // next without initial increment
+  private boolean doNext() throws IOException {
     while (more) {
       while (more && first.doc < last.doc) {      // find doc w/ all the terms
         more = first.skipTo(last.doc);            // skip first upto last
@@ -96,7 +100,7 @@ public boolean skipTo(int target) throws IOException {
     }
     if (more)
       sort();                                     // re-sort
-    return more;
+    return doNext();
   }
 
   protected abstract float phraseFreq() throws IOException;
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java
index f1f91b01..fb982171 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java
@@ -34,24 +34,16 @@
 public class TestPhraseQuery extends TestCase {
   private IndexSearcher searcher;
   private PhraseQuery query;
+  private RAMDirectory directory;
 
   public void setUp() throws Exception {
-    RAMDirectory directory = new RAMDirectory();
+    directory = new RAMDirectory();
     IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);
     
     Document doc = new Document();
     doc.add(Field.Text("field", "one two three four five"));
     writer.addDocument(doc);
     
-    doc = new Document();
-    doc.add(new Field("source", "marketing info", true, true, true));
-    writer.addDocument(doc);
-    
-    doc = new Document();
-    doc.add(new Field("contents", "foobar", true, true, true));
-    doc.add(new Field("source", "marketing info", true, true, true)); 
-    writer.addDocument(doc);
-    
     writer.optimize();
     writer.close();
 
@@ -61,6 +53,7 @@ public void setUp() throws Exception {
 
   public void tearDown() throws Exception {
     searcher.close();
+    directory.close();
   }
 
   public void testNotCloseEnough() throws Exception {
@@ -186,16 +179,79 @@ public void testPhraseQueryWithStopAnalyzer() throws Exception {
   }
   
   public void testPhraseQueryInConjunctionScorer() throws Exception {
-    query.add(new Term("source", "marketing"));
-    query.add(new Term("source", "info"));
-    Hits hits = searcher.search(query);
+    RAMDirectory directory = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);
+    
+    Document doc = new Document();
+    doc.add(new Field("source", "marketing info", true, true, true));
+    writer.addDocument(doc);
+    
+    doc = new Document();
+    doc.add(new Field("contents", "foobar", true, true, true));
+    doc.add(new Field("source", "marketing info", true, true, true)); 
+    writer.addDocument(doc);
+    
+    writer.optimize();
+    writer.close();
+    
+    IndexSearcher searcher = new IndexSearcher(directory);
+    
+    PhraseQuery phraseQuery = new PhraseQuery();
+    phraseQuery.add(new Term("source", "marketing"));
+    phraseQuery.add(new Term("source", "info"));
+    Hits hits = searcher.search(phraseQuery);
     assertEquals(2, hits.length());
     
     TermQuery termQuery = new TermQuery(new Term("contents","foobar"));
     BooleanQuery booleanQuery = new BooleanQuery();
     booleanQuery.add(termQuery, true, false);
-    booleanQuery.add(query, true, false);
+    booleanQuery.add(phraseQuery, true, false);
     hits = searcher.search(booleanQuery);
     assertEquals(1, hits.length());
+    
+    searcher.close();
+    
+    writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);
+    doc = new Document();
+    doc.add(new Field("contents", "map entry woo", true, true, true));
+    writer.addDocument(doc);
+
+    doc = new Document();
+    doc.add(new Field("contents", "woo map entry", true, true, true));
+    writer.addDocument(doc);
+
+    doc = new Document();
+    doc.add(new Field("contents", "map foobarword entry woo", true, true, true));
+    writer.addDocument(doc);
+
+    writer.optimize();
+    writer.close();
+    
+    searcher = new IndexSearcher(directory);
+    
+    termQuery = new TermQuery(new Term("contents","woo"));
+    phraseQuery = new PhraseQuery();
+    phraseQuery.add(new Term("contents","map"));
+    phraseQuery.add(new Term("contents","entry"));
+    
+    hits = searcher.search(termQuery);
+    assertEquals(3, hits.length());
+    hits = searcher.search(phraseQuery);
+    assertEquals(2, hits.length());
+    
+    booleanQuery = new BooleanQuery();
+    booleanQuery.add(termQuery, true, false);
+    booleanQuery.add(phraseQuery, true, false);
+    hits = searcher.search(booleanQuery);
+    assertEquals(2, hits.length());
+    
+    booleanQuery = new BooleanQuery();
+    booleanQuery.add(phraseQuery, true, false);
+    booleanQuery.add(termQuery, true, false);
+    hits = searcher.search(booleanQuery);
+    assertEquals(2, hits.length());
+    
+    searcher.close();
+    directory.close();
   }
 }
