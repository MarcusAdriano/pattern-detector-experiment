diff --git a/db/derby/code/trunk/java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java b/db/derby/code/trunk/java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java
index d44ecc45..2c13301b 100644
--- a/db/derby/code/trunk/java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java
+++ b/db/derby/code/trunk/java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java
@@ -202,9 +202,6 @@ private void initChanges() {
 		changeMap.put("getBestRowIdentifierAllColumns",
 			new Byte(TYPE_VALUE_CHANGE));
 
-		changeMap.put("getPrimaryKeys",
-			new Byte(TYPE_VALUE_CHANGE));
-
 		changeMap.put("getTypeInfo",
 			new Byte((byte)(COL_RENAME_CHANGE
 				| TYPE_VALUE_CHANGE
@@ -911,16 +908,13 @@ private String getCastInfoForCol(String queryName,
 	{
 
 		if (queryName.equals("getTypeInfo")) {
-			if (colName.equals("NULLABLE") ||
+			if (colName.equals("DATA_TYPE") ||
 				colName.equals("CASE_SENSITIVE") ||
-				colName.equals("SEARCHABLE") ||
 				colName.equals("UNSIGNED_ATTRIBUTE") ||
 				colName.equals("FIXED_PREC_SCALE") ||
 				colName.equals("AUTO_UNIQUE_VAL") ||
 				colName.equals("SQL_DATA_TYPE") ||
-				colName.equals("SQL_DATETIME_SUB") ||
-				colName.equals("MINIMUM_SCALE") ||
-				colName.equals("MAXIMUM_SCALE"))
+				colName.equals("SQL_DATETIME_SUB"))
 			{
 				return "SMALLINT";
 			}
@@ -928,6 +922,7 @@ private String getCastInfoForCol(String queryName,
 		else if (queryName.equals("getColumns")) {
 			if (colName.equals("DECIMAL_DIGITS") ||
 				colName.equals("NULLABLE") ||
+				colName.equals("DATA_TYPE") ||
 				colName.equals("NUM_PREC_RADIX") ||
 				colName.equals("SQL_DATA_TYPE") ||
 				colName.equals("SQL_DATETIME_SUB"))
@@ -935,23 +930,24 @@ else if (queryName.equals("getColumns")) {
 				return "SMALLINT";
 			}
 		}
+		else if (queryName.equals("getProcedureColumns")) {
+			if (colName.equals("DATA_TYPE")) {
+				return "SMALLINT";
+			}
+		}
 		else if (queryName.equals("getVersionColumns")) {
-			if (colName.equals("SCOPE") ||
-				colName.equals("DATA_TYPE") ||
-				colName.equals("DECIMAL_DIGITS") ||
-				colName.equals("PSEUDO_COLUMN"))
-			{
+			if (colName.equals("DATA_TYPE")) {
 				return "SMALLINT";
 			}
 		}
-		else if (queryName.equals("getPrimaryKeys")) {
-			if (colName.equals("KEY_SEQ"))
+		else if (queryName.startsWith("getBestRowIdentifier")) {
+			if (colName.equals("DATA_TYPE")) {
 				return "SMALLINT";
 		}
+		}
 		else if (queryName.equals("getIndexInfo")) {
 			if (colName.equals("NON_UNIQUE") ||
-				colName.equals("TYPE") ||
-				colName.equals("ORDINAL_POSITION"))
+				colName.equals("TYPE"))
 			{
 				return "SMALLINT";
 			}
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
index 360e5197..a06eed53 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
@@ -2193,7 +2193,7 @@ private ResultSet getAttributesX() throws SqlException {
                 "CAST(NULL AS VARCHAR(128)) AS TYPE_SCHEM," +
                 "VARCHAR('', 128) AS TYPE_NAME," +
                 "VARCHAR('',128) AS ATTR_NAME," +
-                "SMALLINT(0) AS DATA_TYPE," +
+                "0 AS DATA_TYPE," +
                 "VARCHAR('',129) AS ATTR_TYPE_NAME," +
                 "0 AS ATTR_SIZE," +
                 "0 AS DECIMAL_DIGITS," +
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java
index 32a08fb4..bf90ccfd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java
@@ -61,7 +61,7 @@
       <LI> procedureColumnReturn - procedure return value
       <LI> procedureColumnResult - result column in ResultSet
       </UL>
-  <LI><B>DATA_TYPE</B> short => SQL type from java.sql.Types
+  <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types
         <LI><B>TYPE_NAME</B> String => SQL type name, for a UDT type the
   type name is fully qualified
         <LI><B>PRECISION</B> int => precision
@@ -200,6 +200,12 @@ public int getInt(int column) throws SQLException
     {
         switch (column) 
         {
+        case 3: // DATA_TYPE:
+            if (sqlType != null) {
+                return sqlType.getJDBCTypeId();
+            }
+            return java.sql.Types.JAVA_OBJECT;
+
 		case 5: // PRECISION:
                 if (sqlType != null)
                 {
@@ -241,12 +247,6 @@ public short getShort(int column) throws SQLException
 		case 2: // COLUMN_TYPE:
 			return columnType;
 
-		case 3: // DATA_TYPE:
-                if (sqlType != null)
-                    return (short)sqlType.getJDBCTypeId();
-                else
-                    return (short) java.sql.Types.JAVA_OBJECT;
-
 		case 7: // SCALE:
                 if (sqlType != null)
                     return (short)sqlType.getScale();
@@ -296,7 +296,7 @@ public void close()
 
 		EmbedResultSetMetaData.getResultColumnDescriptor("COLUMN_NAME",				 Types.VARCHAR, false, 128),
 		EmbedResultSetMetaData.getResultColumnDescriptor("COLUMN_TYPE",				 Types.SMALLINT, false),
-		EmbedResultSetMetaData.getResultColumnDescriptor("DATA_TYPE",				 Types.SMALLINT, false),
+		EmbedResultSetMetaData.getResultColumnDescriptor("DATA_TYPE",				 Types.INTEGER, false),
 		EmbedResultSetMetaData.getResultColumnDescriptor("TYPE_NAME",				 Types.VARCHAR, false, 22),
 		EmbedResultSetMetaData.getResultColumnDescriptor("PRECISION",				 Types.INTEGER, false),
 		EmbedResultSetMetaData.getResultColumnDescriptor("LENGTH",					 Types.INTEGER, false),
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
index 9022ee81..1ec3fd21 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
@@ -494,10 +494,7 @@ public static void SQLTABLEPRIVILEGES (String catalogName, String schemaName, St
 	public static void SQLPRIMARYKEYS (String catalogName, String schemaName, String tableName, String options, ResultSet[] rs)
 		throws SQLException
 	{
-		rs[0] = isForODBC(options)
-			? ((EmbedDatabaseMetaData)getDMD()).getPrimaryKeysForODBC(
-				catalogName, schemaName, tableName)
-			: getDMD().getPrimaryKeys(catalogName, schemaName, tableName);
+		rs[0] = getDMD().getPrimaryKeys(catalogName, schemaName, tableName);
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
index 6fea7297..25d06cba 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
@@ -1527,7 +1527,7 @@ private ResultSet doGetProcs(String catalog, String schemaPattern,
      *      <LI> procedureColumnReturn - procedure return value
      *      <LI> procedureColumnResult - result column in ResultSet
      *      </UL>
-     *  <LI><B>DATA_TYPE</B> short => SQL type from java.sql.Types
+     *  <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types
      *	<LI><B>TYPE_NAME</B> String => SQL type name
      *	<LI><B>PRECISION</B> int => precision
      *	<LI><B>LENGTH</B> int => length in bytes of data
@@ -1673,6 +1673,19 @@ private ResultSet doGetProcCols(String catalog, String schemaPattern,
      *			"VIEW",	"SYSTEM TABLE", "GLOBAL TEMPORARY",
      *			"LOCAL TEMPORARY", "ALIAS", "SYNONYM".
      *	<LI><B>REMARKS</B> String => explanatory comment on the table
+     *  <LI><B>TYPE_CAT</B> String => the types catalog (may be
+     *          <code>null</code>)
+     *  <LI><B>TYPE_SCHEM</B> String => the types schema (may be
+     *          <code>null</code>)
+     *  <LI><B>TYPE_NAME</B> String => type name (may be
+     *          <code>null</code>)
+     *  <LI><B>SELF_REFERENCING_COL_NAME</B> String => name of the
+     *          designated "identifier" column of a typed table (may
+     *          be <code>null</code>)
+     *  <LI><B>REF_GENERATION</B> String => specifies how values in
+     *          SELF_REFERENCING_COL_NAME are created. Values are
+     *          "SYSTEM", "USER", "DERIVED". (may be
+     *          <code>null</code>)
      *  </OL>
      *
      * <P><B>Note:</B> Some databases may not return information for
@@ -1808,7 +1821,7 @@ public ResultSet getTableTypes() throws SQLException {
      *	<LI><B>TABLE_SCHEM</B> String => table schema (may be null)
      *	<LI><B>TABLE_NAME</B> String => table name
      *	<LI><B>COLUMN_NAME</B> String => column name
-     *	<LI><B>DATA_TYPE</B> short => SQL type from java.sql.Types
+     *	<LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types
      *	<LI><B>TYPE_NAME</B> String => Data source dependent type name
      *	<LI><B>COLUMN_SIZE</B> int => column size.  For char or date
      *	    types this is the maximum number of characters, for numeric or
@@ -1833,6 +1846,27 @@ public ResultSet getTableTypes() throws SQLException {
      *	<LI><B>IS_NULLABLE</B> String => "NO" means column definitely
      *      does not allow NULL values; "YES" means the column might
      *      allow NULL values.  An empty string means nobody knows.
+     *  <LI><B>SCOPE_CATLOG</B> String => catalog of table that is the
+     *  scope of a reference attribute (<code>null</code> if DATA_TYPE
+     *  isn't REF)
+     *  <LI><B>SCOPE_SCHEMA</B> String => schema of table that is the
+     *  scope of a reference attribute (<code>null</code> if the
+     *  DATA_TYPE isn't REF)
+     *  <LI><B>SCOPE_TABLE</B> String => table name that this the
+     *  scope of a reference attribure (<code>null</code> if the
+     *  DATA_TYPE isn't REF)
+     *  <LI><B>SOURCE_DATA_TYPE</B> short => source type of a distinct
+     *  type or user-generated Ref type, SQL type from java.sql.Types
+     *  (<code>null</code> if DATA_TYPE isn't DISTINCT or
+     *  user-generated REF)
+     *  <LI><B>IS_AUTOINCREMENT</B> String => Indicates whether this
+     *  column is auto incremented
+     *  <UL>
+     *  <LI> YES --- if the column is auto incremented
+     *  <LI> NO --- if the column is not auto incremented
+     *  <LI> empty string --- if it cannot be determined whether the
+     *       column is auto incremented parameter is unknown
+     *  </UL>
      *  </OL>
      *
      * @param catalog a catalog name; "" retrieves those without a
@@ -1979,7 +2013,7 @@ public ResultSet getTablePrivileges(String catalog, String schemaPattern,
      *      <LI> bestRowSession - valid for remainder of current session
      *      </UL>
      *	<LI><B>COLUMN_NAME</B> String => column name
-     *	<LI><B>DATA_TYPE</B> short => SQL data type from java.sql.Types
+     *	<LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types
      *	<LI><B>TYPE_NAME</B> String => Data source dependent type name
      *	<LI><B>COLUMN_SIZE</B> int => precision
      *	<LI><B>BUFFER_LENGTH</B> int => not used
@@ -2174,7 +2208,7 @@ private ResultSet doGetBestRowId(String catalogPattern,
      *  <OL>
      *	<LI><B>SCOPE</B> short => is not used
      *	<LI><B>COLUMN_NAME</B> String => column name
-     *	<LI><B>DATA_TYPE</B> short => SQL data type from java.sql.Types
+     *	<LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types
      *	<LI><B>TYPE_NAME</B> String => Data source dependent type name
      *	<LI><B>COLUMN_SIZE</B> int => precision
      *	<LI><B>BUFFER_LENGTH</B> int => length of column value in bytes
@@ -2283,31 +2317,7 @@ private boolean notInSoftUpgradeMode()
      */
 	public ResultSet getPrimaryKeys(String catalog, String schema,
 			String table) throws SQLException {
-		return doGetPrimaryKeys(catalog, schema, table, "getPrimaryKeys");
-	}
-
-	/**
-	 * Get a description of a table's primary key columns.  They
-	 * are ordered by COLUMN_NAME.  Same as getPrimaryKeys above,
-	 * except that the result set will conform to ODBC specifications.
-	 */
-	public ResultSet getPrimaryKeysForODBC(String catalog, String schema,
-				String table) throws SQLException {
-		return doGetPrimaryKeys(catalog, schema, table, "odbc_getPrimaryKeys");
-	}
-
-	/**
-	 * Does the actual work for the getPrimaryKeys metadata
-	 * calls.  See getPrimaryKeys() method above for parameter
-	 * descriptions.
-	 * @param queryName Name of the query to execute; is used
-	 *	to determine whether the result set should conform to
-	 *	JDBC or ODBC specifications.
-	 */
-	private ResultSet doGetPrimaryKeys(String catalog, String schema,
-		String table, String queryName) throws SQLException {
-
-		PreparedStatement s = getPreparedQuery(queryName);
+		PreparedStatement s = getPreparedQuery("getPrimaryKeys");
 		s.setString(1, swapNull(catalog));
 		s.setString(2, swapNull(schema));
 		s.setString(3, swapNull(table));
@@ -2570,7 +2580,7 @@ public ResultSet getCrossReference(
      * <P>Each type description has the following columns:
      *  <OL>
      *	<LI><B>TYPE_NAME</B> String => Type name
-     *	<LI><B>DATA_TYPE</B> short => SQL data type from java.sql.Types
+     *	<LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types
      *	<LI><B>PRECISION</B> int => maximum precision
      *	<LI><B>LITERAL_PREFIX</B> String => prefix used to quote a literal
      *      (may be null)
@@ -2940,6 +2950,12 @@ public boolean supportsBatchUpdates() {
      *	<LI><B>DATA_TYPE</B> String => type value defined in java.sql.Types.  
      *  One of JAVA_OBJECT, STRUCT, or DISTINCT
      *	<LI><B>REMARKS</B> String => explanatory comment on the type
+     *  <LI><B>BASE_TYPE</B> short => type code of the source type of
+     *  a DISTINCT type or the type that implements the user-generated
+     *  reference type of the SELF_REFERENCING_COLUMN of a structured
+     *  type as defined in java.sql.Types (<code>null</code> if
+     *  DATA_TYPE is not DISTINCT or not STRUCT with
+     *  REFERENCE_GENERATION = USER_DEFINED)
      *  </OL>
      *
      * <P><B>Note:</B> If the driver does not support UDTs then an empty
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java
index 32e2f4fb..b21a9110 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java
@@ -509,7 +509,13 @@ protected void loadODBCTargets() {
 			"TABLE_SCHEM", "VARCHAR", null,
 			"TABLE_NAME", "VARCHAR", null,
 			"TABLE_TYPE", "VARCHAR", null,
-			"REMARKS", "VARCHAR", null
+			"REMARKS", "VARCHAR", null,
+			// the next columns are not defined in ODBC
+			"TYPE_CAT", "VARCHAR", null,
+			"TYPE_SCHEM", "VARCHAR", null,
+			"TYPE_NAME", "VARCHAR", null,
+			"SELF_REFERENCING_COL_NAME", "VARCHAR", null,
+			"REF_GENERATION", "VARCHAR", null,
 
 		};
 
@@ -532,7 +538,13 @@ protected void loadODBCTargets() {
 			"SQL_DATETIME_SUB", "SMALLINT", null,
 			"CHAR_OCTET_LENGTH", "INTEGER", null,
 			"ORDINAL_POSITION", "INTEGER", "NOT NULL",
-			"IS_NULLABLE", "VARCHAR", null
+			"IS_NULLABLE", "VARCHAR", null,
+			// the next columns are not defined in ODBC
+			"SCOPE_CATLOG", "VARCHAR", null,
+			"SCOPE_SCHEMA", "VARCHAR", null,
+			"SCOPE_TABLE", "VARCHAR", null,
+			"SOURCE_DATA_TYPE", "SMALLINT", null,
+			"IS_AUTOINCREMENT", "VARCHAR", "NOT NULL",
 
 		};
 
