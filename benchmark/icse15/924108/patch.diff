diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
index c0073ec3..a9da43e9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
@@ -68,7 +68,7 @@ boolean isThresholdViolated()
      * the memtable. This version will respect the threshold and flush
      * the memtable to disk when the size exceeds the threshold.
     */
-    void put(String key, byte[] buffer) throws IOException
+    void put(String key, byte[] buffer)
     {
         if (isThresholdViolated())
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 83d7c586..5472a9b9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -341,7 +341,7 @@ public String getTempSSTablePath(String directory)
     }
 
     /** flush the given memtable and swap in a new one for its CFS, if it hasn't been frozen already.  threadsafe. */
-    Future<?> maybeSwitchMemtable(Memtable oldMemtable, final boolean writeCommitLog) throws IOException
+    Future<?> maybeSwitchMemtable(Memtable oldMemtable, final boolean writeCommitLog)
     {
         /**
          *  If we can get the writelock, that means no new updates can come in and 
@@ -389,19 +389,19 @@ public void runMayThrow() throws InterruptedException, IOException
         }
     }
 
-    void switchBinaryMemtable(String key, byte[] buffer) throws IOException
+    void switchBinaryMemtable(String key, byte[] buffer)
     {
         binaryMemtable_.set(new BinaryMemtable(this));
         binaryMemtable_.get().put(key, buffer);
     }
 
-    public void forceFlushIfExpired() throws IOException
+    public void forceFlushIfExpired()
     {
         if (memtable_.isExpired())
             forceFlush();
     }
 
-    public Future<?> forceFlush() throws IOException
+    public Future<?> forceFlush()
     {
         if (memtable_.isClean())
             return null;
@@ -409,7 +409,7 @@ public void forceFlushIfExpired() throws IOException
         return maybeSwitchMemtable(memtable_, true);
     }
 
-    public void forceBlockingFlush() throws IOException, ExecutionException, InterruptedException
+    public void forceBlockingFlush() throws ExecutionException, InterruptedException
     {
         Future<?> future = forceFlush();
         if (future != null)
@@ -431,7 +431,7 @@ public void forceFlushBinary()
      * param @ key - key for update/insert
      * param @ columnFamily - columnFamily changes
      */
-    Memtable apply(String key, ColumnFamily columnFamily) throws IOException
+    Memtable apply(String key, ColumnFamily columnFamily)
     {
         long start = System.nanoTime();
 
@@ -447,7 +447,7 @@ Memtable apply(String key, ColumnFamily columnFamily) throws IOException
      * needs to be used. param @ key - key for update/insert param @
      * columnFamily - columnFamily changes
      */
-    void applyBinary(String key, byte[] buffer) throws IOException
+    void applyBinary(String key, byte[] buffer)
     {
         long start = System.nanoTime();
         binaryMemtable_.get().put(key, buffer);
@@ -577,7 +577,7 @@ public Table getTable()
         return Table.open(table_);
     }
 
-    void markCompacted(Collection<SSTableReader> sstables) throws IOException
+    void markCompacted(Collection<SSTableReader> sstables)
     {
         ssTables_.markCompacted(sstables);
     }
@@ -588,7 +588,6 @@ boolean isCompleteSSTables(Collection<SSTableReader> sstables)
     }
 
     void replaceCompactedSSTables(Collection<SSTableReader> sstables, Iterable<SSTableReader> replacements)
-            throws IOException
     {
         ssTables_.replace(sstables, replacements);
     }
@@ -707,22 +706,22 @@ public double getRecentWriteLatencyMicros()
         return writeStats_.getRecentLatencyMicros();
     }
 
-    public ColumnFamily getColumnFamily(String key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int limit) throws IOException
+    public ColumnFamily getColumnFamily(String key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int limit)
     {
         return getColumnFamily(new SliceQueryFilter(key, path, start, finish, bitmasks, reversed, limit));
     }
 
-    public ColumnFamily getColumnFamily(String key, QueryPath path, byte[] start, byte[] finish, boolean reversed, int limit) throws IOException
+    public ColumnFamily getColumnFamily(String key, QueryPath path, byte[] start, byte[] finish, boolean reversed, int limit)
     {
         return getColumnFamily(new SliceQueryFilter(key, path, start, finish, reversed, limit));
     }
 
-    public ColumnFamily getColumnFamily(QueryFilter filter) throws IOException
+    public ColumnFamily getColumnFamily(QueryFilter filter)
     {
         return getColumnFamily(filter, CompactionManager.getDefaultGCBefore());
     }
 
-    private ColumnFamily cacheRow(String key) throws IOException
+    private ColumnFamily cacheRow(String key)
     {
         ColumnFamily cached;
         if ((cached = ssTables_.getRowCache().get(key)) == null)
@@ -740,7 +739,7 @@ private ColumnFamily cacheRow(String key) throws IOException
      * only the latest version of a column is returned.
      * @return null if there is no data and no tombstones; otherwise a ColumnFamily
      */
-    public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOException
+    public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore)
     {
         assert columnFamily_.equals(filter.getColumnFamilyName());
 
@@ -794,7 +793,7 @@ public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOE
         }
     }
 
-    private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore) throws IOException
+    private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
     {
         // we are querying top-level columns, do a merging fetch with indexes.
         List<ColumnIterator> iterators = new ArrayList<ColumnIterator>();
@@ -873,7 +872,7 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore) throws
        would be better.
      */
     private boolean getKeyRange(List<String> keys, final AbstractBounds range, int maxResults)
-    throws IOException, ExecutionException, InterruptedException
+    throws ExecutionException, InterruptedException
     {
         final DecoratedKey startWith = new DecoratedKey(range.left, null);
         final DecoratedKey stopAt = new DecoratedKey(range.right, null);
@@ -973,8 +972,15 @@ protected DecoratedKey getReduced()
             {
                 if (iter instanceof Closeable)
                 {
+                    try
+                    {
                     ((Closeable)iter).close();
                 }
+                    catch (IOException e)
+                    {
+                        throw new IOError(e);
+                    }
+                }
             }
         }
     }
@@ -986,12 +992,11 @@ protected DecoratedKey getReduced()
      * @param keyMax maximum number of keys to process, regardless of startKey/finishKey
      * @param sliceRange may be null if columnNames is specified. specifies contiguous columns to return in what order.
      * @param columnNames may be null if sliceRange is specified. specifies which columns to return in what order.      @return list of key->list<column> tuples.
-     * @throws IOException
      * @throws ExecutionException
      * @throws InterruptedException
      */
     public RangeSliceReply getRangeSlice(byte[] super_column, final AbstractBounds range, int keyMax, SliceRange sliceRange, List<byte[]> columnNames)
-    throws IOException, ExecutionException, InterruptedException
+    throws ExecutionException, InterruptedException
     {
         List<String> keys = new ArrayList<String>();
         boolean completed;
@@ -1035,7 +1040,7 @@ public AbstractType getComparator()
      * 
      * @param snapshotName the name of the associated with the snapshot 
      */
-    public void snapshot(String snapshotName) throws IOException
+    public void snapshot(String snapshotName)
     {
         try
         {
@@ -1052,6 +1057,8 @@ public void snapshot(String snapshotName) throws IOException
 
         for (SSTableReader ssTable : ssTables_)
         {
+            try
+            {
             // mkdir
             File sourceFile = new File(ssTable.getFilename());
             File dataDirectory = sourceFile.getParentFile().getParentFile();
@@ -1069,10 +1076,15 @@ public void snapshot(String snapshotName) throws IOException
             sourceFile = new File(ssTable.filterFilename());
             targetLink = new File(snapshotDirectoryPath, sourceFile.getName());
             FileUtils.createHardLink(sourceFile, targetLink);
-
             if (logger_.isDebugEnabled())
                 logger_.debug("Snapshot for " + table_ + " table data file " + sourceFile.getAbsolutePath() +
                     " created as " + targetLink.getAbsolutePath());
+        }
+            catch (IOException e)
+            {
+                throw new IOError(e);
+            }
+
         }
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
index eb17e055..22ce49a2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
@@ -202,18 +202,11 @@ public static synchronized StorageMetadata initMetadata() throws IOException
     public static boolean isBootstrapped()
     {
         Table table = null;
-        try
-        {
             table = Table.open(Table.SYSTEM_TABLE);
             QueryFilter filter = new NamesQueryFilter(BOOTSTRAP_KEY, new QueryPath(STATUS_CF), BOOTSTRAP);
             ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(filter);
             return cf != null && cf.getColumn(BOOTSTRAP).value()[0] == 1;
         }
-        catch (IOException e)
-        {
-            throw new RuntimeException(e);
-        }
-    }
 
     public static void setBootstrapped(boolean isBootstrapped)
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index da1aff64..bd1de26a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -246,15 +246,8 @@ public void run()
             {
                 for (ColumnFamilyStore cfs : columnFamilyStores.values())
                 {
-                    try
-                    {
                         cfs.forceFlushIfExpired();
                     }
-                    catch (IOException e)
-                    {
-                        throw new RuntimeException(e);
-                    }
-                }
             }
         }, checkMs, checkMs);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
index 188af1a4..6c20cd08 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
@@ -309,7 +309,7 @@ private CommitLogSegment currentSegment()
         return segments.getLast();
     }
     
-    public CommitLogSegment.CommitLogContext getContext() throws IOException
+    public CommitLogSegment.CommitLogContext getContext()
     {
         Callable<CommitLogSegment.CommitLogContext> task = new Callable<CommitLogSegment.CommitLogContext>()
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/NamesQueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/NamesQueryFilter.java
index f5921974..7177a737 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/NamesQueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/NamesQueryFilter.java
@@ -64,7 +64,7 @@ public ColumnIterator getMemColumnIterator(Memtable memtable, ColumnFamily cf, A
         return memtable.getNamesIterator(cf, this);
     }
 
-    public ColumnIterator getSSTableColumnIterator(SSTableReader sstable) throws IOException
+    public ColumnIterator getSSTableColumnIterator(SSTableReader sstable)
     {
         return new SSTableNamesIterator(sstable, key, columns);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
index 71b7150f..f731d9cd 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
@@ -57,7 +57,7 @@ public ColumnIterator getMemColumnIterator(Memtable memtable, AbstractType compa
      * returns an iterator that returns columns from the given SSTable
      * matching the Filter criteria in sorted order.
      */
-    public abstract ColumnIterator getSSTableColumnIterator(SSTableReader sstable) throws IOException;
+    public abstract ColumnIterator getSSTableColumnIterator(SSTableReader sstable);
 
     /**
      * collects columns from reducedColumns into returnCF.  Termination is determined
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
index 0602c388..96f3aa44 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
@@ -21,6 +21,7 @@
  */
 
 
+import java.io.IOError;
 import java.io.IOException;
 import java.util.*;
 
@@ -33,26 +34,32 @@
 import org.apache.cassandra.io.util.BufferedRandomAccessFile;
 import org.apache.cassandra.io.util.FileDataInput;
 import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.BloomFilter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class SSTableNamesIterator extends SimpleAbstractColumnIterator
 {
+    private static Logger logger = LoggerFactory.getLogger(SSTableNamesIterator.class);
+
     private ColumnFamily cf;
     private Iterator<IColumn> iter;
     public final SortedSet<byte[]> columns;
 
-    public SSTableNamesIterator(SSTableReader ssTable, String key, SortedSet<byte[]> columnNames) throws IOException
+    public SSTableNamesIterator(SSTableReader ssTable, String key, SortedSet<byte[]> columnNames)
     {
         assert columnNames != null;
         this.columns = columnNames;
 
         DecoratedKey decoratedKey = ssTable.getPartitioner().decorateKey(key);
 
-        FileDataInput file = ssTable.getFileDataInput(decoratedKey, DatabaseDescriptor.getIndexedReadBufferSizeInKB() * 1024);
-        if (file == null)
-            return;
+        FileDataInput file = null;
         try
         {
+            file = ssTable.getFileDataInput(decoratedKey, DatabaseDescriptor.getIndexedReadBufferSizeInKB() * 1024);
+            if (file == null)
+                return;
             DecoratedKey keyInDisk = ssTable.getPartitioner().convertFromDiskFormat(file.readUTF());
             assert keyInDisk.equals(decoratedKey) : keyInDisk;
             file.readInt(); // data size
@@ -109,11 +116,22 @@ public SSTableNamesIterator(SSTableReader ssTable, String key, SortedSet<byte[]>
                 }
             }
         }
+        catch (IOException e)
+        {
+           throw new IOError(e); 
+        }
         finally
         {
+            try
+            {
+                if (file != null)
             file.close();
         }
-
+            catch (IOException e)
+            {
+                logger.error("error closing file", e);
+            }
+        }
         iter = cf.getSortedColumns().iterator();
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
index 7bd887c4..e905395d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
@@ -22,6 +22,7 @@
 
 
 import java.util.*;
+import java.io.IOError;
 import java.io.IOException;
 
 import org.apache.cassandra.db.DecoratedKey;
@@ -49,7 +50,6 @@
     private ColumnGroupReader reader;
 
     public SSTableSliceIterator(SSTableReader ssTable, String key, byte[] startColumn, byte[] finishColumn, Predicate<IColumn> predicate, boolean reversed)
-    throws IOException
     {
         this.reversed = reversed;
 
@@ -132,10 +132,11 @@ public void close() throws IOException
         private int curRangeIndex;
         private Deque<IColumn> blockColumns = new ArrayDeque<IColumn>();
 
-        public ColumnGroupReader(SSTableReader ssTable, DecoratedKey key, FileDataInput input) throws IOException
+        public ColumnGroupReader(SSTableReader ssTable, DecoratedKey key, FileDataInput input)
         {
             this.file = input;
-
+            try
+            {
             DecoratedKey keyInDisk = ssTable.getPartitioner().convertFromDiskFormat(file.readUTF());
             assert keyInDisk.equals(key);
 
@@ -145,7 +146,11 @@ public ColumnGroupReader(SSTableReader ssTable, DecoratedKey key, FileDataInput
 
             emptyColumnFamily = ColumnFamily.serializer().deserializeFromSSTableNoColumns(ssTable.makeColumnFamily(), file);
             file.readInt(); // column count
-
+            }
+            catch (IOException e)
+            {
+                throw new IOError(e);
+            }
             file.mark();
             curRangeIndex = IndexHelper.indexFor(startColumn, indexes, comparator, reversed);
             if (reversed && curRangeIndex == indexes.size())
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
index a0b91b0a..4075ae86 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
@@ -68,7 +68,7 @@ public ColumnIterator getMemColumnIterator(Memtable memtable, ColumnFamily cf, A
         return memtable.getSliceIterator(cf, this, comparator);
     }
 
-    public ColumnIterator getSSTableColumnIterator(SSTableReader sstable) throws IOException
+    public ColumnIterator getSSTableColumnIterator(SSTableReader sstable)
     {
         Predicate<IColumn> predicate = (bitmasks == null || bitmasks.isEmpty())
                                        ? Predicates.<IColumn>alwaysTrue()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java
index 8e051cc3..7720ea41 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java
@@ -234,7 +234,7 @@ private KeyPosition getIndexScanPosition(DecoratedKey decoratedKey)
     /**
      * returns the position in the data file to find the given key, or -1 if the key is not present
      */
-    public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException
+    public PositionSize getPosition(DecoratedKey decoratedKey)
     {
         // first, check bloom filter
         if (!bf.isPresent(partitioner.convertToDiskFormat(decoratedKey)))
@@ -268,7 +268,9 @@ public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException
 
         // scan the on-disk index, starting at the nearest sampled position
         long p = sampledPosition.position;
-        FileDataInput input;
+        FileDataInput input = null;
+        try
+        {
         if (indexBuffers == null)
         {
             input = new BufferedRandomAccessFile(indexFilename(), "r");
@@ -278,8 +280,6 @@ public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException
         {
             input = new MappedFileDataInput(indexBuffers[bufferIndex(p)], indexFilename(), (int)(p % BUFFER_SIZE));
         }
-        try
-        {
             int i = 0;
             do
             {
@@ -316,9 +316,21 @@ public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException
                     return null;
             } while  (++i < INDEX_INTERVAL);
         }
+        catch (IOException e)
+        {
+            throw new IOError(e);
+        }
         finally
         {
+            try
+            {
+                if (input != null)
             input.close();
+        }
+            catch (IOException e)
+            {
+                logger.error("error closing file", e);
+            }
         }
         return null;
     }
@@ -375,12 +387,12 @@ public void forceFilterFailures()
         bf = BloomFilter.alwaysMatchingBloomFilter();
     }
 
-    public SSTableScanner getScanner(int bufferSize) throws IOException
+    public SSTableScanner getScanner(int bufferSize)
     {
         return new RowIndexedScanner(this, bufferSize);
     }
 
-    public FileDataInput getFileDataInput(DecoratedKey decoratedKey, int bufferSize) throws IOException
+    public FileDataInput getFileDataInput(DecoratedKey decoratedKey, int bufferSize)
     {
         PositionSize info = getPosition(decoratedKey);
         if (info == null)
@@ -388,9 +400,16 @@ public FileDataInput getFileDataInput(DecoratedKey decoratedKey, int bufferSize)
 
         if (buffers == null || (bufferIndex(info.position) != bufferIndex(info.position + info.size)))
         {
+            try
+            {
             BufferedRandomAccessFile file = new BufferedRandomAccessFile(getFilename(), "r", bufferSize);
             file.seek(info.position);
             return file;
+        }
+            catch (IOException e)
+            {
+                throw new IOError(e);
+            }
         }
         return new MappedFileDataInput(buffers[bufferIndex(info.position)], getFilename(), (int) (info.position % BUFFER_SIZE));
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java
index 118a0acd..39c0d519 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java
@@ -47,9 +47,16 @@
     /**
      * @param sstable SSTable to scan.
      */
-    RowIndexedScanner(SSTableReader sstable, int bufferSize) throws IOException
+    RowIndexedScanner(SSTableReader sstable, int bufferSize)
+    {
+        try
     {
         this.file = new BufferedRandomAccessFile(sstable.getFilename(), "r", bufferSize);
+        }
+        catch (IOException e)
+        {
+            throw new IOError(e);
+        }
         this.sstable = sstable;
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
index b01a2db6..2887884b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
@@ -226,14 +226,19 @@ void addFinalizingReference(SSTableTracker tracker)
      */
     public abstract long length();
 
-    public void markCompacted() throws IOException
+    public void markCompacted()
     {
         if (logger.isDebugEnabled())
             logger.debug("Marking " + getFilename() + " compacted");
-        if (!new File(compactedFilename()).createNewFile())
+        try
         {
+            if (!new File(compactedFilename()).createNewFile())
             throw new IOException("Unable to create compaction marker");
         }
+        catch (IOException e)
+        {
+            throw new IOError(e);
+        }
         phantomReference.deleteOnCleanup();
     }
 
@@ -241,13 +246,13 @@ public void markCompacted() throws IOException
      * @param bufferSize Buffer size in bytes for this Scanner.
      * @return A Scanner for seeking over the rows of the SSTable.
      */
-    public abstract SSTableScanner getScanner(int bufferSize) throws IOException;
+    public abstract SSTableScanner getScanner(int bufferSize);
 
     /**
      * FIXME: should not be public: use Scanner.
      */
     @Deprecated
-    public abstract FileDataInput getFileDataInput(DecoratedKey decoratedKey, int bufferSize) throws IOException;
+    public abstract FileDataInput getFileDataInput(DecoratedKey decoratedKey, int bufferSize);
 
     public AbstractType getColumnComparator()
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java
index beeeb112..8011211d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java
@@ -55,7 +55,7 @@ public SSTableTracker(String ksname, String cfname)
         rowCache = new JMXInstrumentedCache<String, ColumnFamily>(ksname, cfname + "RowCache", 0);
     }
 
-    public synchronized void replace(Collection<SSTableReader> oldSSTables, Iterable<SSTableReader> replacements) throws IOException
+    public synchronized void replace(Collection<SSTableReader> oldSSTables, Iterable<SSTableReader> replacements)
     {
         Set<SSTableReader> sstablesNew = new HashSet<SSTableReader>(sstables);
 
@@ -84,17 +84,10 @@ public synchronized void replace(Collection<SSTableReader> oldSSTables, Iterable
     public synchronized void add(Iterable<SSTableReader> sstables)
     {
         assert sstables != null;
-        try
-        {
             replace(Collections.<SSTableReader>emptyList(), sstables);
         }
-        catch (IOException e)
-        {
-            throw new AssertionError(e);
-        }
-    }
 
-    public synchronized void markCompacted(Collection<SSTableReader> compacted) throws IOException
+    public synchronized void markCompacted(Collection<SSTableReader> compacted)
     {
         replace(compacted, Collections.<SSTableReader>emptyList());
     }
