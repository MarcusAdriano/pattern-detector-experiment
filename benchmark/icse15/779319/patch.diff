diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java
index 91d0ef0c..530ad8eb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java
@@ -345,14 +345,19 @@ public ConstantAction	makeConstantAction() throws StandardException
 	private void genColumnInfos(ColumnInfo[] colInfos)
 	{
 		ResultColumnList rcl = 	queryExpression.getResultColumns();
-		int			 	 rclSize = rcl.size();
 
-		for (int index = 0; index < rclSize; index++)
+		for (int index = 0; index < colInfos.length; index++)
 		{
 			ResultColumn rc = (ResultColumn) rcl.elementAt(index);
-			// Don't incorporate generated columns DERBY-4230
+			// The colInfo array has been initialized to be of length 
+			// visibleSize() (DERBY-4230).  This code assumes that all the visible
+			// columns are at the beginning of the rcl. Throw an assertion 
+			// if we hit a generated column in what we think is the visible
+			// range.
+			if (SanityManager.DEBUG) {
 			if (rc.isGenerated)
-				continue;
+					SanityManager.THROWASSERT("Encountered generated column in expected visible range at rcl[" + index +"]");
+			}
 			//RESOLVEAUTOINCREMENT
 			colInfos[index] = new ColumnInfo(rc.getName(),
 											 rc.getType(),
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index 40431e94..161e7dd7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -4151,12 +4151,21 @@ private int numGeneratedColumns()
 	{
 		int numGenerated = 0;
 		int sz = size();
+		boolean inVisibleRange = false;
 		for (int i = sz - 1; i >= 0; i--) 
 		{
 			ResultColumn rc = (ResultColumn) elementAt(i);
 			if (rc.isGenerated()) 
 			{
+				if (SanityManager.DEBUG) {
+					// We expect the generated columns to always be at the end of the list.
+					if (inVisibleRange)
+						SanityManager.THROWASSERT("Encountered generated column in expected visible range at rcl[" + i +"]");
+				}	
 				numGenerated++;
+			} else {
+				// We are counting down, so as soon as we see one visible column, the rest should be th same
+				inVisibleRange = true;
 			}
 		}
 		return numGenerated;
