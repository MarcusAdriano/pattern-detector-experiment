diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index 13b06af8..f7a680bc 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -593,7 +593,7 @@ private void createCollection(ClusterState clusterState, ZkNodeProps message, Na
       Integer numSlices = msgStrToInt(message, NUM_SLICES, null);
       
       if (numSlices == null) {
-        throw new SolrException(ErrorCode.BAD_REQUEST, "collection already exists: " + collectionName);
+        throw new SolrException(ErrorCode.BAD_REQUEST, NUM_SLICES + " is a required param");
       }
       
       int maxShardsPerNode = msgStrToInt(message, MAX_SHARDS_PER_NODE, 1);
@@ -601,7 +601,7 @@ private void createCollection(ClusterState clusterState, ZkNodeProps message, Na
       List<String> createNodeList = ((createNodeSetStr = message.getStr(CREATE_NODE_SET)) == null)?null:StrUtils.splitSmart(createNodeSetStr, ",", true);
       
       if (repFactor <= 0) {
-        throw new SolrException(ErrorCode.BAD_REQUEST, NUM_SLICES + " is a required paramater");
+        throw new SolrException(ErrorCode.BAD_REQUEST, REPLICATION_FACTOR + " must be greater than or equal to 0");
       }
       
       if (numSlices <= 0) {
@@ -782,7 +782,7 @@ private void processResponse(NamedList results, ShardResponse srsp) {
     }
   }
   
-  private int msgStrToInt(ZkNodeProps message, String key, Integer def)
+  private Integer msgStrToInt(ZkNodeProps message, String key, Integer def)
       throws Exception {
     String str = message.getStr(key);
     try {
