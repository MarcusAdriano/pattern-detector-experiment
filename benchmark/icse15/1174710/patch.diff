diff --git a/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java b/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
index 3eb22e58..7a981646 100644
--- a/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
+++ b/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
@@ -32,6 +32,9 @@
 import java.util.Map;
 import java.util.Set;
 
+import java.util.concurrent.Semaphore;
+import java.util.concurrent.TimeUnit;
+
 import org.apache.aries.application.DeploymentContent;
 import org.apache.aries.application.DeploymentMetadata;
 import org.apache.aries.application.management.AriesApplication;
@@ -50,6 +53,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import org.osgi.service.packageadmin.PackageAdmin;
+import org.osgi.framework.ServiceReference;
+import org.osgi.framework.FrameworkListener;
+import org.osgi.framework.FrameworkEvent;
+
 public class BundleFrameworkManagerImpl implements BundleFrameworkManager
 {
   private static final Logger LOGGER = LoggerFactory.getLogger(BundleFrameworkManagerImpl.class);
@@ -213,6 +221,40 @@ public void uninstallBundle(Bundle b) throws BundleException
     synchronized (BundleFrameworkManager.SHARED_FRAMEWORK_LOCK) {
       BundleFramework framework = getBundleFramework(b);
       if (framework != null) {
+        for (Bundle bundle : new ArrayList<Bundle>(framework.getBundles())) {
+          framework.uninstall(bundle);
+        }
+        
+        BundleContext ctx = framework.getIsolatedBundleContext();
+        ServiceReference ref = ctx.getServiceReference(PackageAdmin.class.getName());
+        if (ref != null) {
+          try {
+            PackageAdmin pa = (PackageAdmin) ctx.getService(ref);
+            if (pa != null) {
+              final Semaphore sem = new Semaphore(0);
+              FrameworkListener listener = new FrameworkListener() {
+                public void frameworkEvent(FrameworkEvent event)
+                {
+                  if (event.getType() == FrameworkEvent.PACKAGES_REFRESHED) {
+                    sem.release();
+                  }
+                }
+              };
+        
+              ctx.addFrameworkListener(listener);
+              pa.refreshPackages(null);
+        
+              try {
+                sem.tryAcquire(60, TimeUnit.SECONDS);
+              } catch (InterruptedException ie) {}
+        
+              ctx.removeFrameworkListener(listener);
+            }
+          } finally {
+            ctx.ungetService(ref);
+          }
+        }
+        
         framework.close();
         
         // clean up our maps so we don't leak memory
@@ -251,9 +293,10 @@ public void stopBundle(Bundle b) throws BundleException
       // Stop all bundles inside the framework
       if (framework != null) // App Content
       {
-        for (Bundle bundle : framework.getBundles())
+        for (Bundle bundle : new ArrayList<Bundle>(framework.getBundles())) {
           framework.stop(bundle);
       }
+      }
       
       // Do not stop shared bundles
     }
