diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java
index c288ba54..278f6a55 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java
@@ -143,7 +143,7 @@ public synchronized void setLength(final long newLength) {
         if (blockSize == 0) {
             checkBlockSize((int)Math.min(Integer.MAX_VALUE, newLength));
         }
-        final long currentCapacity = allocatedBlocks * blockSize;
+        final long currentCapacity = (long)allocatedBlocks * blockSize;
         if (newLength > currentCapacity) {
             // Allocate more blocks.
             increaseCapacity(newLength);
@@ -187,9 +187,7 @@ public synchronized int writeBytes(final long pos, final byte[] buf,
             throw new ArrayIndexOutOfBoundsException(len);
         }
         // Increase the capacity if required.
-        if (pos + len >= allocatedBlocks * blockSize) {
             increaseCapacity(pos + len);
-        }
         // Calculate the block number and the index within this block.
         int block = (int)(pos / blockSize);
         int index = (int)(pos % blockSize);
@@ -226,10 +224,7 @@ public synchronized int writeByte(long pos, byte b) {
             checkBlockSize(0);
         }
         // Increase the capacity if required.
-        if (pos >= allocatedBlocks * blockSize) {
             increaseCapacity(pos);
-        }
-
         // Calculate the block number and the index within this block.
         int block = (int)(pos / blockSize);
         int index = (int)(pos % blockSize);
@@ -301,7 +296,7 @@ private void increaseCapacity(long lastIndex) {
             SanityManager.ASSERT(blockSize > 0, "Invalid/unset block size");
         }
         // Safe-guard to avoid overwriting existing data.
-        if (lastIndex < allocatedBlocks * blockSize) {
+        if (lastIndex < (long)allocatedBlocks * blockSize) {
             return;
         }
         // Calculate required number of blocks, and create those lacking.
