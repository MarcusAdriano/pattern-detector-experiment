diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
index 6f7c2b70..dd295fef 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
@@ -101,9 +101,11 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw
 
     // If no doc is given, show all fields and top terms
     Set<String> fields = null;
-    if( params.get( CommonParams.FL ) != null ) {
-      fields = new TreeSet<String>(Arrays.asList(params.getParams( CommonParams.FL ) ) );
+    String fl = params.get(CommonParams.FL);
+    if (fl != null) {
+      fields = new TreeSet<String>(Arrays.asList(fl.split( "[,\\s]+" )));
     }
+
     if ( "schema".equals( params.get( "show" ))) {
       numTerms = 0; // Abort any statistics gathering.
     }
@@ -301,7 +303,7 @@ private static String getFieldFlags( SchemaField f )
     // Walk the term enum and keep a priority queue for each map in our set
     SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();
     for (String fieldName : fieldNames) {
-      if( fields != null && !fields.contains( fieldName ) ) {
+      if (fields != null && ! fields.contains(fieldName) && ! fields.contains("*")) {
         continue; // if a field is specified, only them
       }
       SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();
@@ -536,7 +538,7 @@ private static void populateFieldInfo(IndexSchema schema,
             lastField = field;
 
             // Skip fields not in fl list (if specified)
-            if (fields != null && !fields.contains(field)) {
+            if (fields != null && !fields.contains(field) && ! fields.contains("*")) {
               continue;
             }
             tiq = new TopTermQueue(numTerms + 1);
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
index 93de21ac..5c89c50b 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
@@ -18,7 +18,9 @@
 package org.apache.solr.handler.admin;
 
 import org.apache.solr.common.luke.FieldFlag;
+import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.util.AbstractSolrTestCase;
+import org.junit.Before;
 import org.junit.Test;
 
 import java.util.EnumSet;
@@ -63,8 +65,9 @@ public void testHistogramBucket() {
   private void assertHistoBucket(int slot, int in) {
     assertEquals("histobucket: " + in, slot, 32 - Integer.numberOfLeadingZeros(Math.max(0, in - 1)));
   }
-  @Test
-  public void testLuke() {
+
+  @Before
+  public void before() {
     assertU(adoc("id","SOLR1000", "name","Apache Solr",
       "solr_si", "10",
       "solr_sl", "10",
@@ -94,6 +97,10 @@ public void testLuke() {
     ));
     assertU(commit());
 
+  }
+  @Test
+  public void testLuke() {
+
     // test that Luke can handle all of the field types
     assertQ(req("qt","/admin/luke", "id","SOLR1000"));
 
@@ -141,4 +148,36 @@ private static String getFieldXPathHistogram(String field) {
     return "//lst[@name='fields']/lst[@name='"+field+"']/lst";
   }
   
+  @Test
+  public void testFlParam() {
+    SolrQueryRequest req = req("qt", "/admin/luke", "fl", "solr_t solr_s");
+    try {
+      // First, determine that the two fields ARE there
+      String response = h.query(req);
+      assertNull(h.validateXPath(response,
+          getFieldXPathPrefix("solr_t") + "[@name='index']",
+          getFieldXPathPrefix("solr_s") + "[@name='index']"
+      ));
+
+      // Now test that the other fields are NOT there
+      for (String f : Arrays.asList("solr_ti",
+          "solr_td", "solr_pl", "solr_dt", "solr_b")) {
+
+        assertNotNull(h.validateXPath(response,
+            getFieldXPathPrefix(f) + "[@name='index']"));
+
+      }
+      // Insure * works
+      req = req("qt", "/admin/luke", "fl", "*");
+      response = h.query(req);
+      for (String f : Arrays.asList("solr_t", "solr_s", "solr_ti",
+          "solr_td", "solr_pl", "solr_dt", "solr_b")) {
+
+        assertNull(h.validateXPath(response,
+            getFieldXPathPrefix(f) + "[@name='index']"));
+      }
+    } catch (Exception e) {
+      fail("Caught unexpected exception " + e.getMessage());
+    }
+  }
 }
