diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
index 81639404..9bee3132 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
@@ -131,7 +131,21 @@ public	SQLException	getArgumentFerry(SQLException se)
 	private	SQLException	wrapArgsForTransportAcrossDRDA
 	( String message, String messageId, SQLException next, int severity, Throwable t, Object[] args )
 	{
-		return super.getSQLException( message, messageId, next, severity, t, args );
+        // Generate an EmbedSQLException
+        SQLException e =
+            super.getSQLException(message, messageId, next, severity, t, args);
+
+        // We want to preserve the stack trace of the original
+        // exception. EmbedSQLException overrides printStackTrace() to achieve
+        // this, but that won't help us when the EmbedSQLException is not the
+        // first exception in the chain. Ideally, we would use initCause(), but
+        // a comment in EmbedSQLException indicates that the cause of the
+        // exception is not supposed to be serialized.
+        if (t != null) {
+            e.setStackTrace(t.getStackTrace());
+        }
+
+        return e;
 	}
 	
 }
