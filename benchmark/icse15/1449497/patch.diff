diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index 0e6a20dd..498b514a 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -517,16 +517,6 @@ public void doTestIndexAndConfigReplication() throws Exception {
     assertTrue(slaveXsltDir.isDirectory());
     assertTrue(slaveXsl.exists());
     
-    // revert the schema
-    master.copyConfigFile(CONF_DIR + "schema-replication1.xml", "schema.xml");
-    masterJetty.stop();
-    masterJetty = createJetty(master);
-    masterClient = createNewSolrServer(masterJetty.getLocalPort());
-    
-    slave.copyConfigFile(CONF_DIR + "schema-replication1.xml", "schema.xml");
-    slaveJetty.stop();
-    slaveJetty = createJetty(slave);
-    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
   }
 
   @Test
@@ -800,20 +790,6 @@ public void doTestReplicateAfterStartup() throws Exception {
     String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);
     assertEquals(null, cmp);
 
-    // NOTE: the master only replicates after startup now!
-    // revert that change.
-    master.copyConfigFile(CONF_DIR + "solrconfig-master.xml", "solrconfig.xml");
-    masterJetty.stop();
-    masterJetty = createJetty(master);
-    masterClient = createNewSolrServer(masterJetty.getLocalPort());
-
-    slave.setTestPort(masterJetty.getLocalPort());
-    slave.copyConfigFile(slave.getSolrConfigFile(), "solrconfig.xml");
-
-    //start slave
-    slaveJetty.stop();
-    slaveJetty = createJetty(slave);
-    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
   }
   
   @Test
@@ -821,7 +797,7 @@ public void doTestReplicateAfterStartupWithNoActivity() throws Exception {
     useFactory(null);
     try {
     
-    //stop slave
+      // stop slave
     slaveJetty.stop();
 
     nDocs--;
@@ -829,7 +805,7 @@ public void doTestReplicateAfterStartupWithNoActivity() throws Exception {
 
     masterClient.commit();
 
-    //change solrconfig having 'replicateAfter startup' option on master
+      // change solrconfig having 'replicateAfter startup' option on master
     master.copyConfigFile(CONF_DIR + "solrconfig-master2.xml",
                           "solrconfig.xml");
 
@@ -843,48 +819,37 @@ public void doTestReplicateAfterStartupWithNoActivity() throws Exception {
 
     masterClient.commit();
     
-    // now we restart to test what happens with no activity before the slave tries to
+      // now we restart to test what happens with no activity before the slave
+      // tries to
     // replicate
     masterJetty.stop();
     masterJetty.start(true);
  
-    //masterClient = createNewSolrServer(masterJetty.getLocalPort());
+      // masterClient = createNewSolrServer(masterJetty.getLocalPort());
     
     NamedList masterQueryRsp = rQuery(nDocs, "*:*", masterClient);
-    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
+      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp
+          .get("response");
     assertEquals(nDocs, masterQueryResult.getNumFound());
     
-
     slave.setTestPort(masterJetty.getLocalPort());
     slave.copyConfigFile(slave.getSolrConfigFile(), "solrconfig.xml");
 
-    //start slave
+      // start slave
     slaveJetty = createJetty(slave);
     slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
 
-    //get docs from slave and check if number is equal to master
+      // get docs from slave and check if number is equal to master
     NamedList slaveQueryRsp = rQuery(nDocs, "*:*", slaveClient);
-    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
+      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp
+          .get("response");
     assertEquals(nDocs, slaveQueryResult.getNumFound());
 
-    //compare results
-    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);
+      // compare results
+      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,
+          slaveQueryResult, 0, null);
     assertEquals(null, cmp);
 
-    // NOTE: the master only replicates after startup now!
-    // revert that change.
-    master.copyConfigFile(CONF_DIR + "solrconfig-master.xml", "solrconfig.xml");
-    masterJetty.stop();
-    masterJetty = createJetty(master);
-    masterClient = createNewSolrServer(masterJetty.getLocalPort());
-
-    slave.setTestPort(masterJetty.getLocalPort());
-    slave.copyConfigFile(slave.getSolrConfigFile(), "solrconfig.xml");
-
-    //start slave
-    slaveJetty.stop();
-    slaveJetty = createJetty(slave);
-    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
     } finally {
       resetFactory();
     }
@@ -955,23 +920,10 @@ public void doTestReplicateAfterCoreReload() throws Exception {
     slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
     assertEquals(docs + 2, slaveQueryResult.getNumFound());
     
-    // NOTE: revert config on master.
-    master.copyConfigFile(CONF_DIR + "solrconfig-master.xml", "solrconfig.xml");
-    masterJetty.stop();
-    masterJetty = createJetty(master);
-    masterClient = createNewSolrServer(masterJetty.getLocalPort());
-
-    slave.setTestPort(masterJetty.getLocalPort());
-    slave.copyConfigFile(slave.getSolrConfigFile(), "solrconfig.xml");
-
-    //start slave
-    slaveJetty.stop();
-    slaveJetty = createJetty(slave);
-    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
   }
 
   @Test
-  @Ignore("ignore while i track down the intermittent problem with this test")
+  //@Ignore("ignore while i track down the intermittent problem with this test")
   public void doTestIndexAndConfigAliasReplication() throws Exception {
     clearIndexWithReplication();
 
@@ -1024,6 +976,9 @@ public void doTestIndexAndConfigAliasReplication() throws Exception {
     slaveJetty = createJetty(slave);
     slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
 
+    slaveClient.deleteByQuery("*:*");
+    slaveClient.commit();
+    
     //add a doc with new field and commit on master to trigger snappull from slave.
     index(masterClient, "id", "2000", "name", "name = " + 2000, "newname", "newname = " + 2000);
     masterClient.commit();
@@ -1036,6 +991,9 @@ public void doTestIndexAndConfigAliasReplication() throws Exception {
     SolrDocumentList slaveQueryResult2 = (SolrDocumentList) slaveQueryRsp2.get("response");
     assertEquals(1, slaveQueryResult2.getNumFound());
 
+    // we need to wait until the core is reloaded
+    rQuery(1, "*:*", slaveClient);
+
     index(slaveClient, "id", "2000", "name", "name = " + 2001, "newname", "newname = " + 2001);
     slaveClient.commit();
 
@@ -1043,20 +1001,6 @@ public void doTestIndexAndConfigAliasReplication() throws Exception {
     SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get("response")).get(0);
     assertEquals("newname = 2001", (String) d.getFieldValue("newname"));
     
-    // revert configs
-    master.copyConfigFile(CONF_DIR + "solrconfig-master1.xml", 
-                          "solrconfig.xml");
-    master.copyConfigFile(CONF_DIR + "schema-replication1.xml", 
-                          "schema.xml");
-    masterJetty.stop();
-
-    masterJetty = createJetty(master);
-    masterClient = createNewSolrServer(masterJetty.getLocalPort());
-    
-    slave.copyConfigFile(CONF_DIR + "schema-replication1.xml", "schema.xml");
-    slaveJetty.stop();
-    slaveJetty = createJetty(slave);
-    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
   }
 
 
