diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SignedBinary.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SignedBinary.java
index 61627c84..09308c5f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SignedBinary.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SignedBinary.java
@@ -25,6 +25,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private SignedBinary() {
     }
 
+    /** Maximum value that cen be encoded by 6 bytes (signed). */
+    public static final long MAX_LONG_6_BYTES_SIGNED = 0x7FFFFFFFFFFFL;
+
     /**
      * Unix byte-order for signed binary representations.
      */
@@ -100,6 +103,30 @@ public static final void intToBigEndianBytes(byte[] buffer, int offset, int v) {
         buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
     }
 
+    /**
+     * Writes a Java long to a 6-byte big endian signed binary representation.
+     *
+     * @param buffer the buffer to write into
+     * @param offset the offset at which to start writing
+     * @param v the value to be written
+     *
+     * @throws IllegalArgumentException if the long value is too large to be
+     *      represented by six bytes.
+     */
+    public static void long6BytesToBigEndianBytes(byte[] buffer, int offset,
+                                                  long v) {
+        if (v > MAX_LONG_6_BYTES_SIGNED) {
+            throw new IllegalArgumentException("value too large to be " +
+                    "represented by six bytes (signed): " + v);
+        }
+        buffer[offset++] = (byte) ((v >>> 40) & 0xFF);
+        buffer[offset++] = (byte) ((v >>> 32) & 0xFF);
+        buffer[offset++] = (byte) ((v >>> 24) & 0xFF);
+        buffer[offset++] = (byte) ((v >>> 16) & 0xFF);
+        buffer[offset++] = (byte) ((v >>> 8) & 0xFF);
+        buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
+    }
+
     /**
      * Write a Java long to an 8-byte big endian signed binary representation.
      */
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
index 85668fdd..f0f54485 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
@@ -1757,14 +1757,10 @@ private void setFDODTALobLength(int[][] protocolTypesAndLengths, int i, long dat
             writeShort((short) dataLength);
         } else if (protocolTypesAndLengths[i][1] == 0x8004) {
             writeInt((int) dataLength);  // 4 bytes to encode the length
-        } else if (protocolTypesAndLengths[i][1] == 0x8006)// 6 bytes to encode the length
-        {
-            writeLong(dataLength);
-        }
-        //throw new SqlException (netAgent_.logWriter_, "0x8006 lob place holders not yet supported");
-        else if (protocolTypesAndLengths[i][1] == 0x8008)// 8 bytes to encode the length
-        {
-            writeLong(dataLength);
+        } else if (protocolTypesAndLengths[i][1] == 0x8006) {
+            writeLong6Bytes(dataLength); // 6 bytes to encode the length
+        } else if (protocolTypesAndLengths[i][1] == 0x8008) {
+            writeLong(dataLength); // 8 bytes to encode the length
         }
 
         if (dataLength != 0) {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
index 3d9fdf11..fba6270a 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
@@ -1551,6 +1551,20 @@ void writeInt(int v) {
         offset_ += 4;
     }
 
+    /**
+     * Writes a long into the buffer, using six bytes.
+     *
+     * @param v the value to write
+     * @throws IllegalArgumentException if the long value is too large to be
+     *      represented by six bytes.
+     */
+    final void writeLong6Bytes(long v) {
+        ensureLength(offset_ + 6);
+        org.apache.derby.client.am.SignedBinary.long6BytesToBigEndianBytes(
+                bytes_, offset_, v);
+        offset_ += 6;
+    }
+
     // insert a java long into the buffer.
     final void writeLong(long v) {
         ensureLength(offset_ + 8);
