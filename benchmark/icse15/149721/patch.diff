diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/WildcardTermEnum.java b/lucene/java/trunk/src/java/org/apache/lucene/search/WildcardTermEnum.java
index 778cac45..91f7a103 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/WildcardTermEnum.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/WildcardTermEnum.java
@@ -59,10 +59,13 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermEnum;
 
-/** Subclass of FilteredTermEnum for enumerating all terms that match the specified wildcard filter term.
-
-  <p>Term enumerations are always ordered by Term.compareTo().  Each term in
-  the enumeration is greater than all that precede it.  */
+/**
+ * Subclass of FilteredTermEnum for enumerating all terms that match the
+ * specified wildcard filter term.
+ * <p>
+ * Term enumerations are always ordered by Term.compareTo().  Each term in
+ * the enumeration is greater than all that precede it.
+ */
 public class WildcardTermEnum extends FilteredTermEnum {
   Term searchTerm;
   String field = "";
@@ -117,30 +120,99 @@ final public boolean endEnum() {
   public static final char WILDCARD_STRING = '*';
   public static final char WILDCARD_CHAR = '?';
   
-  public static final boolean wildcardEquals(String pattern, int patternIdx, String string, int stringIdx) {
-    for ( int p = patternIdx; ; ++p ) {
-      for ( int s = stringIdx; ; ++p, ++s ) {
+    /**
+     * Determines if a word matches a wildcard pattern.
+     * <small>Work released by Granta Design Ltd after originally being done on
+     * company time.</small>
+     */
+    public static final boolean wildcardEquals(String pattern, int patternIdx,
+	String string, int stringIdx)
+    {
+        for (int p = patternIdx; ; ++p)
+        {
+            for (int s = stringIdx; ; ++p, ++s)
+            {
+                // End of string yet?
         boolean sEnd = (s >= string.length());
+                // End of pattern yet?
         boolean pEnd = (p >= pattern.length());
         
-        if (sEnd && pEnd) return true;
-        if (sEnd || pEnd) break;
-        if (pattern.charAt(p) == WILDCARD_CHAR) continue;
-        if (pattern.charAt(p) == WILDCARD_STRING) {
-          int i;
+                // If we're looking at the end of the string...
+                if (sEnd)
+                {
+                    // Assume the only thing left on the pattern is/are wildcards
+                    boolean justWildcardsLeft = true;
+
+                    // Current wildcard position
+                    int wildcardSearchPos = p;
+                    // While we haven't found the end of the pattern,
+		    // and haven't encountered any non-wildcard characters
+                    while (wildcardSearchPos < pattern.length() && justWildcardsLeft)
+                    {
+                        // Check the character at the current position
+                        char wildchar = pattern.charAt(wildcardSearchPos);
+                        // If it's not a wildcard character, then there is more
+			// pattern information after this/these wildcards.
+
+                        if (wildchar != WILDCARD_CHAR &&
+			    wildchar != WILDCARD_STRING)
+                        {
+                            justWildcardsLeft = false;
+                        }
+                        else
+                        {
+                            // Look at the next character
+                            wildcardSearchPos++;
+                        }
+                    }
+
+                    // This was a prefix wildcard search, and we've matched, so
+		    // return true.
+                    if (justWildcardsLeft)
+		    {
+                        return true;
+		    }
+                }
+
+                // If we've gone past the end of the string, or the pattern,
+		// return false.
+                if (sEnd || pEnd)
+		{
+		    break;
+		}
+
+                // Match a single character, so continue.
+                if (pattern.charAt(p) == WILDCARD_CHAR)
+		{
+		    continue;
+		}
+
+                //
+                if (pattern.charAt(p) == WILDCARD_STRING)
+                {
+                    // Look at the character beyond the '*'.
           ++p;
-          for (i = string.length(); i >= s; --i)
+                    // Examine the string, starting at the last character.
+                    for (int i = string.length(); i >= s; --i)
+                    {
             if (wildcardEquals(pattern, p, string, i))
+			{
               return true;
+			}
+                    }
+                    break;
+                }
+                if (pattern.charAt(p) != string.charAt(s))
+		{
           break;
         }
-        if (pattern.charAt(p) != string.charAt(s)) break;
       }
       return false;
     }
   }
   
-  public void close() throws IOException {
+    public void close() throws IOException
+    {
       super.close();
       searchTerm = null;
       field = null;
