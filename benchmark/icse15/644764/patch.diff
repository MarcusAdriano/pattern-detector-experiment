diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index db72434d..e21a611a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -75,7 +75,7 @@ multiple threads and sucks data from the stream (returned from
     private InputStream     myStream;
     
     // locator key for lob. used by Network Server.
-    private final int             locator;
+    private int             locator;
     
     /*
      * Length of the BLOB if known. Set to -1 if
@@ -117,7 +117,7 @@ multiple threads and sucks data from the stream (returned from
              materialized = true;
              //add entry in connection so it can be cleared 
              //when transaction is not valid
-             locator = con.addLOBMapping (this);
+             con.addLOBReference (this);
          }
          catch (IOException e) {
              throw Util.setStreamFailure (e);
@@ -193,7 +193,7 @@ implementing the getStream() method for dvd.getStream(), does not
         pos = 0;
         //add entry in connection so it can be cleared 
         //when transaction is not valid
-        this.locator = con.addLOBMapping (this);
+        con.addLOBReference (this);
     }
 
 
@@ -906,6 +906,8 @@ public void free()
         //valid
         isValid = false;
         
+        //remove entry from connection
+        localConn.removeLOBMapping(locator);
         //initialialize length to default value -1
         myLength = -1;
         
@@ -1000,6 +1002,9 @@ boolean isMaterialized () {
      * @return The locator identifying this lob.
      */
     public int getLocator() {
+        if (locator == 0) {
+            locator = localConn.addLOBMapping(this);
+        }
         return locator;
     }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index 9f55e82c..d2b3952a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -79,7 +79,7 @@ multiple threads and sucks data from the stream (returned from
     /** Tells whether the Clob has been freed or not. */
     private boolean isValid = true;
 
-    private final int locator;
+    private int locator;
     
     /**
      * Creates an empty Clob object.
@@ -91,7 +91,7 @@ multiple threads and sucks data from the stream (returned from
     EmbedClob(EmbedConnection con) throws SQLException {
         super(con);
         this.clob = new TemporaryClob (con.getDBName(), this);
-        this.locator = con.addLOBMapping (this);
+        con.addLOBReference (this);
     }
 
     /**
@@ -156,7 +156,7 @@ the class implementing the getStream() method for dvd.getStream(),
                 throw se;
             }
         }
-        this.locator = con.addLOBMapping (this);
+        con.addLOBReference (this);
     }
 
     /**
@@ -663,6 +663,7 @@ public void free()
             } catch (IOException e) {
                 throw Util.setStreamFailure(e);
             } finally {
+                localConn.removeLOBMapping(locator);
                 this.clob = null;
             }
         }
@@ -791,6 +792,9 @@ InternalClob getInternalClob() {
      * @return locator value for this Clob.
      */
     public int getLocator() {
+        if (locator == 0) {
+            locator = localConn.addLOBMapping(this);
+        }
         return locator;
     }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index 8653e610..9800c55a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -65,6 +65,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLWarning;
 import java.sql.Statement;
 
+import java.util.Map;
+import java.util.WeakHashMap;
 import java.util.HashMap;
 import java.util.Properties;
 import java.util.Iterator;
@@ -131,6 +133,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private HashMap lobHashMap = null;
 	private int lobHMKey = 0;
 
+    /**
+     * Map to keep track of all the lobs associated with this
+     * connection. These lobs will be cleared after the transaction
+     * is no longer valid or when connection is closed
+     */
+    private WeakHashMap lobReferences = null;
+
 	//////////////////////////////////////////////////////////
 	// STATE (copied to new nested connections, but nesting
 	// specific)
@@ -2901,14 +2910,17 @@ public void clearLOBMapping() throws SQLException {
 		//free all the lob resources in the HashMap
 		//initialize the locator value to 0 and
 		//the hash table object to null.
-		HashMap map = rootConnection.lobHashMap;
+		Map map = rootConnection.lobReferences;
 		if (map != null) {
-            Iterator it = map.values().iterator();
+            Iterator it = map.keySet ().iterator ();
             while (it.hasNext()) {
                 ((EngineLOB)it.next()).free();
 			}
 			map.clear();
 		}
+        if (rootConnection.lobHashMap != null) {
+            rootConnection.lobHashMap.clear ();
+        }
 	}
 
 	/**
@@ -2939,6 +2951,18 @@ private int getIncLOBKey() {
                 return newKey;
 	}
 
+	/**
+     * Adds an entry of the lob in WeakHashMap. These entries are used
+     * for cleanup during commit/rollback or close.
+     * @param lobReference LOB Object
+     */
+    void addLOBReference (Object lobReference) {
+        if (rootConnection.lobReferences == null) {
+            rootConnection.lobReferences = new WeakHashMap ();
+        }
+        rootConnection.lobReferences.put (lobReference, null);
+    }
+
 	/**
 	* Return the Hash Map in the root connection
 	* @return the HashMap that contains the locator to LOB object mapping
