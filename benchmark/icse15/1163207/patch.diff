diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java
index 2980be80..94f05d47 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java
@@ -19,20 +19,14 @@
 package org.apache.cassandra.io.compress;
 
 import java.io.*;
-import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.nio.channels.WritableByteChannel;
 import java.util.zip.CRC32;
 import java.util.zip.Checksum;
 
 import org.apache.cassandra.io.sstable.Component;
 import org.apache.cassandra.io.sstable.Descriptor;
-import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.io.util.RandomAccessReader;
-import org.apache.cassandra.streaming.FileStreamTask;
-import org.apache.cassandra.streaming.PendingFile;
 import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.utils.Pair;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -42,56 +36,6 @@
 {
     private static final Logger logger = LoggerFactory.getLogger(CompressedRandomAccessReader.class);
 
-    /**
-     * Transfer sections of the file to the given target channel
-     * This method streams decompressed data so receiving party responsible for compression
-     *
-     * @param file The compressed file to transfer
-     * @param target Channel to transfer data into
-     *
-     * @throws IOException on any I/O error.
-     */
-    public static void transfer(PendingFile file, WritableByteChannel target) throws IOException
-    {
-        RandomAccessReader compressedFile = CompressedRandomAccessReader.open(file.getFilename(), true);
-
-        try
-        {
-            for (Pair<Long, Long> section : file.sections)
-            {
-                long length = section.right - section.left;
-
-                compressedFile.seek(section.left);
-
-                while (length > 0)
-                {
-                    int toRead = (length > FileStreamTask.CHUNK_SIZE) ? FileStreamTask.CHUNK_SIZE : (int) length;
-
-                    ByteBuffer buffer = compressedFile.readBytes(toRead);
-
-                    long bytesTransferred = 0;
-
-                    while (bytesTransferred < toRead)
-                    {
-                        // we don't need to re-read a buffer, it will write starting from buffer.position()
-                        long lastWrite = target.write(buffer);
-                        bytesTransferred += lastWrite;
-                        file.progress += lastWrite;
-                    }
-
-                    length -= bytesTransferred;
-
-                    if (logger.isDebugEnabled())
-                        logger.debug("Bytes transferred " + bytesTransferred + "/" + file.size);
-                }
-            }
-        }
-        finally
-        {
-            FileUtils.closeQuietly(compressedFile);
-        }
-    }
-
     /**
      * Get metadata about given compressed file including uncompressed data length, chunk size
      * and list of the chunk offsets of the compressed data.
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index 79aff111..d6926b97 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -48,7 +48,6 @@
 import org.apache.cassandra.net.io.SerializerType;
 import org.apache.cassandra.net.sink.SinkManager;
 import org.apache.cassandra.security.SSLFactory;
-import org.apache.cassandra.security.streaming.SSLFileStreamTask;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.streaming.FileStreamTask;
 import org.apache.cassandra.streaming.StreamHeader;
@@ -417,11 +416,7 @@ public IAsyncResult sendRR(Message message, InetAddress to)
     public void stream(StreamHeader header, InetAddress to)
     {
         /* Streaming asynchronously on streamExector_ threads. */
-        EncryptionOptions encryption = DatabaseDescriptor.getEncryptionOptions();
-        if (encryption != null && encryption.internode_encryption == EncryptionOptions.InternodeEncryption.all)
-            streamExecutor_.execute(new SSLFileStreamTask(header, to));
-        else
-            streamExecutor_.execute(new FileStreamTask(header, to));
+        streamExecutor_.execute(new FileStreamTask(header, to, DatabaseDescriptor.getEncryptionOptions()));
     }
 
     public void register(ILatencySubscriber subcriber)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/security/streaming/SSLFileStreamTask.java b/cassandra/trunk/src/java/org/apache/cassandra/security/streaming/SSLFileStreamTask.java
index 18cbdc83..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/security/streaming/SSLFileStreamTask.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/security/streaming/SSLFileStreamTask.java
@@ -1,90 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.security.streaming;
-
-import java.io.*;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Socket;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-
-import org.apache.cassandra.security.SSLFactory;
-import org.apache.cassandra.streaming.FileStreamTask;
-import org.apache.cassandra.streaming.StreamHeader;
-import org.apache.cassandra.utils.FBUtilities;
-
-import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.utils.Pair;
-
-/**
- * This class uses a DataOutputStream to write data as opposed to a FileChannel.transferTo
- * used by FileStreamTask because the underlying SSLSocket doesn't support
- * encrypting over NIO SocketChannel.
- */
-public class SSLFileStreamTask extends FileStreamTask
-{
-    private DataOutputStream output;
-    private Socket socket;
-    
-    public SSLFileStreamTask(StreamHeader header, InetAddress to)
-    {
-        super(header, to);
-    }
-
-    @Override
-    protected long write(FileChannel fc, Pair<Long, Long> section, long length, long bytesTransferred) throws IOException
-    {
-        int toTransfer = (int)Math.min(CHUNK_SIZE, length - bytesTransferred);
-        fc.position(section.left + bytesTransferred);
-        ByteBuffer buf = ByteBuffer.allocate(toTransfer);
-        fc.read(buf);
-        buf.flip();
-        output.write(buf.array(), 0, buf.limit());
-        output.flush();
-        return buf.limit();
-    }
-
-    @Override
-    protected void writeHeader(ByteBuffer buffer) throws IOException
-    {
-        output.write(buffer.array(), 0, buffer.limit());
-        output.flush();
-    }
-
-    @Override
-    protected void bind() throws IOException
-    {
-        socket = SSLFactory.getSocket(DatabaseDescriptor.getEncryptionOptions());
-        socket.bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
-    }
-
-    @Override
-    protected void connect() throws IOException
-    {
-        socket.connect(new InetSocketAddress(to, DatabaseDescriptor.getStoragePort()));
-        output = new DataOutputStream(socket.getOutputStream());
-    }
-
-    @Override
-    protected void close() throws IOException
-    {
-        socket.close();
-    }
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
index c6e79a76..cd835bdb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
@@ -18,31 +18,33 @@
 
 package org.apache.cassandra.streaming;
 
+import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
-import java.io.RandomAccessFile;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
+import java.net.Socket;
 import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-import java.nio.channels.SocketChannel;
 
+import org.apache.cassandra.config.EncryptionOptions;
+import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.io.compress.CompressedRandomAccessReader;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.io.util.RandomAccessReader;
+import org.apache.cassandra.security.SSLFactory;
 import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.net.MessagingService;
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.Pair;
 import org.apache.cassandra.utils.WrappedRunnable;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class FileStreamTask extends WrappedRunnable
 {
-    private static Logger logger = LoggerFactory.getLogger( FileStreamTask.class );
+    private static Logger logger = LoggerFactory.getLogger(FileStreamTask.class);
     
     // 10MB chunks
     public static final int CHUNK_SIZE = 10*1024*1024;
@@ -51,12 +53,21 @@
 
     protected final StreamHeader header;
     protected final InetAddress to;
-    private SocketChannel channel;
     
-    public FileStreamTask(StreamHeader header, InetAddress to)
+    // communication socket
+    private Socket socket;
+    // socket's output stream
+    private DataOutputStream output;
+    // system encryption options if any
+    private final EncryptionOptions encryptionOptions;
+    // allocate buffer to use for transfers only once
+    private final byte[] transferBuffer = new byte[CHUNK_SIZE];
+
+    public FileStreamTask(StreamHeader header, InetAddress to, EncryptionOptions encryptionOptions)
     {
         this.header = header;
         this.to = to;
+        this.encryptionOptions = encryptionOptions;
     }
     
     public void runMayThrow() throws IOException
@@ -84,55 +95,78 @@ public void runMayThrow() throws IOException
             logger.debug("Done streaming " + header.file);
     }
 
+    /**
+     * Stream file by it's sections specified by this.header
+     * @throws IOException on any I/O error
+     */
     private void stream() throws IOException
     {
-        ByteBuffer buffer = MessagingService.instance().constructStreamHeader(header, false, Gossiper.instance.getVersion(to));
-        writeHeader(buffer);
+        ByteBuffer HeaderBuffer = MessagingService.instance().constructStreamHeader(header, false, Gossiper.instance.getVersion(to));
+        // write header
+        output.write(ByteBufferUtil.getArray(HeaderBuffer));
 
         if (header.file == null)
             return;
 
-        if (header.file.sstable.compression)
-        {
-            CompressedRandomAccessReader.transfer(header.file, channel);
-            return;
-        }
+        RandomAccessReader file = (header.file.sstable.compression) // try to skip kernel page cache if possible
+                                    ? CompressedRandomAccessReader.open(header.file.getFilename(), true)
+                                    : RandomAccessReader.open(new File(header.file.getFilename()), CHUNK_SIZE, true);
 
-        RandomAccessFile raf = new RandomAccessFile(new File(header.file.getFilename()), "r");
         try
         {
-            FileChannel fc = raf.getChannel();
-            // stream sections of the file as returned by PendingFile.currentSection
+            // stream each of the required sections of the file
             for (Pair<Long, Long> section : header.file.sections)
             {
+                // seek to the beginning of the section
+                file.seek(section.left);
+
+                // length of the section to stream
                 long length = section.right - section.left;
+                // tracks write progress
                 long bytesTransferred = 0;
+
                 while (bytesTransferred < length)
                 {
-                    long lastWrite = write(fc, section, length, bytesTransferred);
+                    long lastWrite = write(file, length, bytesTransferred);
                     bytesTransferred += lastWrite;
+                    // store streaming progress
                     header.file.progress += lastWrite;
                 }
+
+                // make sure that current section is send
+                output.flush();
+
                 if (logger.isDebugEnabled())
                     logger.debug("Bytes transferred " + bytesTransferred + "/" + header.file.size);
             }
         }
         finally
         {
-            FileUtils.closeQuietly(raf);
+            // no matter what happens close file
+            FileUtils.closeQuietly(file);
         }
     }
 
-    protected long write(FileChannel fc, Pair<Long, Long> section, long length, long bytesTransferred) throws IOException
+    /**
+     * Sequentially read bytes from the file and write them to the output stream
+     *
+     * @param reader The file reader to read from
+     * @param length The full length that should be transferred
+     * @param bytesTransferred Number of bytes remaining to transfer
+     *
+     * @return Number of bytes transferred
+     *
+     * @throws IOException on any I/O error
+     */
+    protected long write(RandomAccessReader reader, long length, long bytesTransferred) throws IOException
     {
-        long toTransfer = Math.min(CHUNK_SIZE, length - bytesTransferred);
-        return fc.transferTo(section.left + bytesTransferred, toTransfer, channel);
-    }
+        int toTransfer = (int) Math.min(CHUNK_SIZE, length - bytesTransferred);
 
-    protected void writeHeader(ByteBuffer buffer) throws IOException
-    {
-        channel.write(buffer);
-        assert buffer.remaining() == 0;
+        reader.readFully(transferBuffer, 0, toTransfer);
+
+        output.write(transferBuffer, 0, toTransfer);
+
+        return toTransfer;
     }
 
     /**
@@ -172,18 +206,22 @@ private void connectAttempt() throws IOException
 
     protected void bind() throws IOException
     {
-        channel = SocketChannel.open();
+        socket = (encryptionOptions != null && encryptionOptions.internode_encryption == EncryptionOptions.InternodeEncryption.all)
+                    ? SSLFactory.getSocket(encryptionOptions)
+                    : new Socket();
+
         // force local binding on correctly specified interface.
-        channel.socket().bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
+        socket.bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
     }
 
     protected void connect() throws IOException
     {
-        channel.connect(new InetSocketAddress(to, DatabaseDescriptor.getStoragePort()));
+        socket.connect(new InetSocketAddress(to, DatabaseDescriptor.getStoragePort()));
+        output = new DataOutputStream(socket.getOutputStream());
     }
 
     protected void close() throws IOException
     {
-        channel.close();
+        socket.close();
     }
 }
