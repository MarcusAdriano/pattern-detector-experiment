diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedByteCode.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedByteCode.java
index a53b82f0..80265684 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedByteCode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedByteCode.java
@@ -35,7 +35,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		Called by the class manager just after
 		creating the instance of the new class.
 	*/
-	public void initFromContext(Context context);
+	public void initFromContext(Context context)
+		throws StandardException;
 
 	/**
 		Set the Generated Class. Call by the class manager just after
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 98d7218f..461fc6df 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -143,7 +143,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * Add the activation to those known about by this connection.
 	 *
 	 */
-	void addActivation(Activation a);
+	void addActivation(Activation a)
+		throws StandardException;
+
+	/**
+	 * Make a note that some activations are marked unused
+	 */
+	void notifyUnusedActivation();
 
 	/**
 	 * Remove the activation from those known about by this connection.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 7843f95e..4c5ad6e6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -116,6 +116,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 
 	private final Vector acts;
+	private volatile boolean unusedActs=false;
 	protected int bindCount;
 	private boolean ddWriteMode;
 	private boolean runTimeStatisticsSetting ;
@@ -429,9 +430,32 @@ public int getCacheSize() {
 	/**
 	 * Add the activation to those known about by this connection.
 	 */
-	public void addActivation(Activation a) {
+	public void addActivation(Activation a) 
+		throws StandardException {
 		acts.addElement(a);
 
+		// DERBY-418. Activations which are marked unused,
+		// are closed here. Activations Vector is iterated 
+		// to identify and close unused activations, only if 
+		// unusedActs flag is set to true and if the total 
+		// size exceeds 20.
+		if( (unusedActs) && (acts.size() > 20) ) {
+			unusedActs = false;
+			for (int i = acts.size() - 1; i >= 0; i--) {
+
+				// it maybe the case that a Activation's reset() ends up
+				// closing one or more activation leaving our index beyond
+				// the end of the array
+				if (i >= acts.size())
+					continue;
+
+				Activation a1 = (Activation) acts.elementAt(i);
+				if (!a1.isInUse()) {
+					a1.close();
+				}
+			}
+		}
+
 		if (SanityManager.DEBUG) {
 
 			if (SanityManager.DEBUG_ON("memoryLeakTrace")) {
@@ -442,6 +466,13 @@ public void addActivation(Activation a) {
 		}
 	}
 
+	/**
+	 * Make a note that some activations are marked unused
+	 */
+	public void notifyUnusedActivation() {
+	    unusedActs = true;
+	}
+
 	/**
 	 * @see LanguageConnectionContext#checkIfAnyDeclaredGlobalTempTablesForThisConnection
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
index 0d67e081..ef3d35cb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
@@ -125,7 +125,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	protected int numSubqueries;
 
 	private boolean singleExecution;
-	private boolean inUse;
+
+	// This flag is declared volatile to ensure it is 
+	// visible when it has been modified by the finalizer thread.
+	private volatile boolean inUse;
 
 	private java.sql.ResultSet targetVTI;
 	private SQLWarning warnings;
@@ -192,7 +195,8 @@ protected BaseActivation()
 		super();
 	}
 
-	public final void initFromContext(Context context) {
+	public final void initFromContext(Context context) 
+		throws StandardException {
 
 		if (SanityManager.DEBUG)
 		{
@@ -786,7 +790,10 @@ public static void reinitializeQualifiers(Qualifier[][] qualifiers)
 	 */
 	public final void markUnused()
 	{
+		if(isInUse()) {
 		inUse = false;
+			lcc.notifyUnusedActivation();
+		}
 	}
 
 	/**
