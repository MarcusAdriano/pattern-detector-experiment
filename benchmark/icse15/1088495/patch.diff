diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
index 87f1960a..d8eb83f9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
@@ -1396,6 +1396,9 @@ public boolean statisticsExist(ConglomerateDescriptor cd)
 	 * numKeys. This basically returns the reciprocal of the number of unique
 	 * values in the leading numKey columns of the index. It is assumed that
 	 * statistics exist for the conglomerate if this function is called.
+     * However, no locks are held to prevent the statistics from being dropped,
+     * so the method also handles the case of missing statistics by using a
+     * heuristic to estimate the selectivity.
 	 *
 	 * @param cd		ConglomerateDescriptor (Index) whose
 	 * cardinality we are interested in.
@@ -1407,22 +1410,6 @@ public double selectivityForConglomerate(ConglomerateDescriptor cd,
 											 int numKeys) 
 		throws StandardException
 	{
-		if (!statisticsExist(cd))
-		{
-			if (SanityManager.DEBUG)
-			{
-				SanityManager.THROWASSERT("no statistics exist for conglomerate"
-										  + cd);
-			}
-			else 
-			{
-				double selectivity = 0.1;
-				for (int i = 0; i < numKeys; i++)
-					selectivity *= 0.1;
-				return selectivity;
-			}
-		}
-		
 		UUID referenceUUID = cd.getUUID();
 
 		List sdl = getStatistics();
@@ -1439,9 +1426,9 @@ public double selectivityForConglomerate(ConglomerateDescriptor cd,
 			return statDesc.getStatistic().selectivity((Object[])null);
 		}
 		
-		if (SanityManager.DEBUG)
-			SanityManager.THROWASSERT("Internal Error-- statistics not found in selectivityForConglomerate.\n cd = " + cd + "\nnumKeys = " + numKeys);
-		return 0.1;				// shouldn't come here.
+        // Didn't find statistics for these columns. Assume uniform 10%
+        // selectivity for each column in the key.
+        return Math.pow(0.1, numKeys);
 	}
 
 	/** @see TupleDescriptor#getDescriptorName */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java
index 43ab40f7..cb119a80 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java
@@ -214,10 +214,8 @@ public void testNoExclusiveLockOnTable() throws SQLException {
     /**
      * Regression test case for DERBY-5153. Compilation in parallel with
      * update of statistics sometimes failed on debug builds.
-     *
-     * The test case should be disabled until the bug is fixed.
      */
-    public void disabled_testParallelCompilationAndUpdate() throws Exception {
+    public void testParallelCompilationAndUpdate() throws Exception {
         setAutoCommit(false);
 
         // Create and populate a test table with a multi-column index.
