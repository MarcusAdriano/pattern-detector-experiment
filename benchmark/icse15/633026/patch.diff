diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageReceive.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageReceive.java
index e81a7f6b..7c0fe85e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageReceive.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageReceive.java
@@ -236,7 +236,7 @@ private void parseAndAckVersion(ReplicationMessage initiatorMessage,
         if (masterVersion == ReplicationMessage.serialVersionUID) {
             ack = new ReplicationMessage
                 (ReplicationMessage.TYPE_ACK, "UID OK");
-            socketConn.writeMessage(ack);
+            sendMessage(ack);
         } else {
             //If the UID's are not equal send an error message. The
             //object of a TYPE_ERROR message must be a String[]
@@ -244,7 +244,7 @@ private void parseAndAckVersion(ReplicationMessage initiatorMessage,
                 (ReplicationMessage.TYPE_ERROR,
                  new String[]{SQLState.
                               REPLICATION_MASTER_SLAVE_VERSION_MISMATCH});
-            socketConn.writeMessage(ack);
+            sendMessage(ack);
 
             //The UID's do not match.
             throw StandardException.newException
@@ -294,7 +294,7 @@ private void parseAndAckInstant(ReplicationMessage initiatorMessage,
             // Notify the master that the logs are in synch
             ack = new ReplicationMessage
                 (ReplicationMessage.TYPE_ACK, "Instant OK");
-            socketConn.writeMessage(ack);
+            sendMessage(ack);
         } else {
             // Notify master that the logs are out of synch
             // See ReplicationMessage#TYPE_ERROR
@@ -311,7 +311,7 @@ private void parseAndAckInstant(ReplicationMessage initiatorMessage,
             exception[5] = SQLState.REPLICATION_LOG_OUT_OF_SYNCH;
             ack = new ReplicationMessage(ReplicationMessage.TYPE_ERROR, 
                                          exception);
-            socketConn.writeMessage(ack);
+            sendMessage(ack);
 
             throw StandardException.
                 newException(SQLState.REPLICATION_LOG_OUT_OF_SYNCH, exception);
@@ -344,7 +344,7 @@ private void handleUnexpectedMessage(String dbname,
         ReplicationMessage ack = 
             new ReplicationMessage(ReplicationMessage.TYPE_ERROR, exception);
 
-        socketConn.writeMessage(ack);
+        sendMessage(ack);
 
         throw StandardException.
             newException(SQLState.REPLICATION_UNEXPECTED_MESSAGEID, exception);
@@ -357,10 +357,12 @@ private void handleUnexpectedMessage(String dbname,
      * @param message a <code>ReplicationMessage</code> object that contains
      *                the message to be transmitted.
      *
-     * @throws IOException if an exception occurs while transmitting
-     *                     the message.
+     * @throws IOException 1) if an exception occurs while transmitting
+     *                        the message,
+     *                     2) if the connection handle is invalid.
      */
     public void sendMessage(ReplicationMessage message) throws IOException {
+        checkSocketConnection();
         socketConn.writeMessage(message);
     }
     
@@ -375,11 +377,13 @@ public void sendMessage(ReplicationMessage message) throws IOException {
      * @throws ClassNotFoundException Class of a serialized object cannot
      *                                be found.
      *
-     * @throws IOException if an exception occurs while reading from the
-     *                     stream.
+     * @throws IOException 1) if an exception occurs while reading from the
+     *                        stream,
+     *                     2) if the connection handle is invalid.
      */
     public ReplicationMessage readMessage() throws
         ClassNotFoundException, IOException {
+        checkSocketConnection();
         return (ReplicationMessage)socketConn.readMessage();
     }
 
@@ -402,4 +406,17 @@ public String getHostName() {
     public int getPort() {
         return slaveAddress.getPortNumber();
      }
+        
+    /**
+     * Verifies if the <code>SocketConnection</code> is valid.
+     *
+     * @throws IOException If the socket connection object is not
+     *                     valid (is null).
+     */
+    private void checkSocketConnection() throws IOException {
+        if (socketConn == null) {
+            throw new IOException
+                    (MessageId.REPLICATION_INVALID_CONNECTION_HANDLE);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java
index 13915bfe..21264612 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import javax.net.SocketFactory;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.shared.common.reference.MessageId;
 
 /**
  * Used to send replication messages to the slave. Called by the
@@ -140,8 +141,10 @@ public Object run() throws IOException {
      *                     down the network connection
      */
     public void tearDown() throws IOException {
+        if(socketConn != null) {
         socketConn.tearDown();
     }
+    }
 
     /**
      * Used to send a replication message to the slave.
@@ -149,10 +152,12 @@ public void tearDown() throws IOException {
      * @param message a <code>ReplicationMessage</code> object that contains
      *                the message to be transmitted.
      *
-     * @throws IOException if an exception occurs while transmitting
+     * @throws IOException 1) if an exception occurs while transmitting
      *                     the message.
+     *                     2) if the connection handle is invalid.
      */
     public void sendMessage(ReplicationMessage message) throws IOException {
+        checkSocketConnection();
         socketConn.writeMessage(message);
     }
     
@@ -166,11 +171,13 @@ public void sendMessage(ReplicationMessage message) throws IOException {
      * @throws ClassNotFoundException Class of a serialized object cannot
      *                                be found.
      *
-     * @throws IOException if an exception occurs while reading from the
+     * @throws IOException 1) if an exception occurs while reading from the
      *                     stream.
+     *                     2) if the connection handle is invalid.
      */
     public ReplicationMessage readMessage() throws
         ClassNotFoundException, IOException {
+        checkSocketConnection();
         return (ReplicationMessage)socketConn.readMessage();
     }
     
@@ -247,4 +254,17 @@ private void verifyMessageAck(ReplicationMessage ack)
                 (SQLState.REPLICATION_UNEXPECTED_EXCEPTION);
         }
     }
+    
+    /**
+     * Verifies if the <code>SocketConnection</code> is valid.
+     *
+     * @throws IOException If the socket connection object is not
+     *                     valid (is null).
+     */
+    private void checkSocketConnection() throws IOException {
+        if (socketConn == null) {
+            throw new IOException
+                    (MessageId.REPLICATION_INVALID_CONNECTION_HANDLE);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
index baed88bf..0532bf00 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
@@ -189,6 +189,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     String REPLICATION_LOGSHIPPER_EXCEPTION              = "R009";
     String REPLICATION_MASTER_RECONN                     = "R010";
     String REPLICATION_SLAVE_NETWORK_LISTEN              = "R011";    
+    String REPLICATION_INVALID_CONNECTION_HANDLE         = "R012";
     String REPLICATION_FAILOVER_SUCCESSFUL               = "R020";
 
 }
