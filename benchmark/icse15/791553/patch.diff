diff --git a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
index d19dcfa0..91e7663f 100644
--- a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
+++ b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
@@ -26,7 +26,7 @@
 
     public List<column_t> get_slice_by_names(String tablename, String key, String columnParent, List<String> columnNames) throws InvalidRequestException, NotFoundException, TException;
 
-    public List<column_t> get_slice(String tablename, String key, String columnParent, boolean isAscending, int count) throws InvalidRequestException, NotFoundException, TException;
+    public List<column_t> get_slice(String tablename, String key, String columnParent, boolean isAscending, int offset, int count) throws InvalidRequestException, NotFoundException, TException;
 
     public column_t get_column(String tablename, String key, String columnPath) throws InvalidRequestException, NotFoundException, TException;
 
@@ -40,7 +40,7 @@
 
     public List<column_t> get_columns_since(String tablename, String key, String columnParent, long timeStamp) throws InvalidRequestException, NotFoundException, TException;
 
-    public List<superColumn_t> get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int count) throws InvalidRequestException, TException;
+    public List<superColumn_t> get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int offset, int count) throws InvalidRequestException, TException;
 
     public List<superColumn_t> get_slice_super_by_names(String tablename, String key, String columnFamily, List<String> superColumnNames) throws InvalidRequestException, TException;
 
@@ -173,13 +173,13 @@ public void send_get_slice_by_names(String tablename, String key, String columnP
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_slice_by_names failed: unknown result");
     }
 
-    public List<column_t> get_slice(String tablename, String key, String columnParent, boolean isAscending, int count) throws InvalidRequestException, NotFoundException, TException
+    public List<column_t> get_slice(String tablename, String key, String columnParent, boolean isAscending, int offset, int count) throws InvalidRequestException, NotFoundException, TException
     {
-      send_get_slice(tablename, key, columnParent, isAscending, count);
+      send_get_slice(tablename, key, columnParent, isAscending, offset, count);
       return recv_get_slice();
     }
 
-    public void send_get_slice(String tablename, String key, String columnParent, boolean isAscending, int count) throws TException
+    public void send_get_slice(String tablename, String key, String columnParent, boolean isAscending, int offset, int count) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("get_slice", TMessageType.CALL, seqid_));
       get_slice_args args = new get_slice_args();
@@ -187,6 +187,7 @@ public void send_get_slice(String tablename, String key, String columnParent, bo
       args.key = key;
       args.columnParent = columnParent;
       args.isAscending = isAscending;
+      args.offset = offset;
       args.count = count;
       args.write(oprot_);
       oprot_.writeMessageEnd();
@@ -455,13 +456,13 @@ public void send_get_columns_since(String tablename, String key, String columnPa
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_columns_since failed: unknown result");
     }
 
-    public List<superColumn_t> get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int count) throws InvalidRequestException, TException
+    public List<superColumn_t> get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int offset, int count) throws InvalidRequestException, TException
     {
-      send_get_slice_super(tablename, key, columnFamily, isAscending, count);
+      send_get_slice_super(tablename, key, columnFamily, isAscending, offset, count);
       return recv_get_slice_super();
     }
 
-    public void send_get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int count) throws TException
+    public void send_get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int offset, int count) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("get_slice_super", TMessageType.CALL, seqid_));
       get_slice_super_args args = new get_slice_super_args();
@@ -469,6 +470,7 @@ public void send_get_slice_super(String tablename, String key, String columnFami
       args.key = key;
       args.columnFamily = columnFamily;
       args.isAscending = isAscending;
+      args.offset = offset;
       args.count = count;
       args.write(oprot_);
       oprot_.writeMessageEnd();
@@ -906,7 +908,7 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         get_slice_result result = new get_slice_result();
         try {
-          result.success = iface_.get_slice(args.tablename, args.key, args.columnParent, args.isAscending, args.count);
+          result.success = iface_.get_slice(args.tablename, args.key, args.columnParent, args.isAscending, args.offset, args.count);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
         } catch (NotFoundException nfe) {
@@ -1115,7 +1117,7 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         get_slice_super_result result = new get_slice_super_result();
         try {
-          result.success = iface_.get_slice_super(args.tablename, args.key, args.columnFamily, args.isAscending, args.count);
+          result.success = iface_.get_slice_super(args.tablename, args.key, args.columnFamily, args.isAscending, args.offset, args.count);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
         } catch (Throwable th) {
@@ -3136,7 +3138,8 @@ public void validate() throws TException {
     private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)2);
     private static final TField COLUMN_PARENT_FIELD_DESC = new TField("columnParent", TType.STRING, (short)3);
     private static final TField IS_ASCENDING_FIELD_DESC = new TField("isAscending", TType.BOOL, (short)4);
-    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)5);
+    private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I32, (short)5);
+    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)6);
 
     public String tablename;
     public static final int TABLENAME = 1;
@@ -3146,12 +3149,15 @@ public void validate() throws TException {
     public static final int COLUMNPARENT = 3;
     public boolean isAscending;
     public static final int ISASCENDING = 4;
+    public int offset;
+    public static final int OFFSET = 5;
     public int count;
-    public static final int COUNT = 5;
+    public static final int COUNT = 6;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
       public boolean isAscending = false;
+      public boolean offset = false;
       public boolean count = false;
     }
 
@@ -3164,6 +3170,8 @@ public void validate() throws TException {
           new FieldValueMetaData(TType.STRING)));
       put(ISASCENDING, new FieldMetaData("isAscending", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.BOOL)));
+      put(OFFSET, new FieldMetaData("offset", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.I32)));
       put(COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I32)));
     }});
@@ -3182,6 +3190,7 @@ public get_slice_args(
       String key,
       String columnParent,
       boolean isAscending,
+      int offset,
       int count)
     {
       this();
@@ -3190,6 +3199,8 @@ public get_slice_args(
       this.columnParent = columnParent;
       this.isAscending = isAscending;
       this.__isset.isAscending = true;
+      this.offset = offset;
+      this.__isset.offset = true;
       this.count = count;
       this.__isset.count = true;
     }
@@ -3209,6 +3220,8 @@ public get_slice_args(get_slice_args other) {
       }
       __isset.isAscending = other.__isset.isAscending;
       this.isAscending = other.isAscending;
+      __isset.offset = other.__isset.offset;
+      this.offset = other.offset;
       __isset.count = other.__isset.count;
       this.count = other.count;
     }
@@ -3309,6 +3322,28 @@ public void setIsAscendingIsSet(boolean value) {
       this.__isset.isAscending = value;
     }
 
+    public int getOffset() {
+      return this.offset;
+    }
+
+    public void setOffset(int offset) {
+      this.offset = offset;
+      this.__isset.offset = true;
+    }
+
+    public void unsetOffset() {
+      this.__isset.offset = false;
+    }
+
+    // Returns true if field offset is set (has been asigned a value) and false otherwise
+    public boolean isSetOffset() {
+      return this.__isset.offset;
+    }
+
+    public void setOffsetIsSet(boolean value) {
+      this.__isset.offset = value;
+    }
+
     public int getCount() {
       return this.count;
     }
@@ -3365,6 +3400,14 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
+      case OFFSET:
+        if (value == null) {
+          unsetOffset();
+        } else {
+          setOffset((Integer)value);
+        }
+        break;
+
       case COUNT:
         if (value == null) {
           unsetCount();
@@ -3392,6 +3435,9 @@ public Object getFieldValue(int fieldID) {
       case ISASCENDING:
         return new Boolean(isIsAscending());
 
+      case OFFSET:
+        return new Integer(getOffset());
+
       case COUNT:
         return new Integer(getCount());
 
@@ -3411,6 +3457,8 @@ public boolean isSet(int fieldID) {
         return isSetColumnParent();
       case ISASCENDING:
         return isSetIsAscending();
+      case OFFSET:
+        return isSetOffset();
       case COUNT:
         return isSetCount();
       default:
@@ -3467,6 +3515,15 @@ public boolean equals(get_slice_args that) {
           return false;
       }
 
+      boolean this_present_offset = true;
+      boolean that_present_offset = true;
+      if (this_present_offset || that_present_offset) {
+        if (!(this_present_offset && that_present_offset))
+          return false;
+        if (this.offset != that.offset)
+          return false;
+      }
+
       boolean this_present_count = true;
       boolean that_present_count = true;
       if (this_present_count || that_present_count) {
@@ -3524,6 +3581,14 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case OFFSET:
+            if (field.type == TType.I32) {
+              this.offset = iprot.readI32();
+              this.__isset.offset = true;
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           case COUNT:
             if (field.type == TType.I32) {
               this.count = iprot.readI32();
@@ -3567,6 +3632,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(IS_ASCENDING_FIELD_DESC);
       oprot.writeBool(this.isAscending);
       oprot.writeFieldEnd();
+      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
+      oprot.writeI32(this.offset);
+      oprot.writeFieldEnd();
       oprot.writeFieldBegin(COUNT_FIELD_DESC);
       oprot.writeI32(this.count);
       oprot.writeFieldEnd();
@@ -3607,6 +3675,10 @@ public String toString() {
       sb.append(this.isAscending);
       first = false;
       if (!first) sb.append(", ");
+      sb.append("offset:");
+      sb.append(this.offset);
+      first = false;
+      if (!first) sb.append(", ");
       sb.append("count:");
       sb.append(this.count);
       first = false;
@@ -8290,7 +8362,8 @@ public void validate() throws TException {
     private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)2);
     private static final TField COLUMN_FAMILY_FIELD_DESC = new TField("columnFamily", TType.STRING, (short)3);
     private static final TField IS_ASCENDING_FIELD_DESC = new TField("isAscending", TType.BOOL, (short)4);
-    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)5);
+    private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I32, (short)5);
+    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)6);
 
     public String tablename;
     public static final int TABLENAME = 1;
@@ -8300,12 +8373,15 @@ public void validate() throws TException {
     public static final int COLUMNFAMILY = 3;
     public boolean isAscending;
     public static final int ISASCENDING = 4;
+    public int offset;
+    public static final int OFFSET = 5;
     public int count;
-    public static final int COUNT = 5;
+    public static final int COUNT = 6;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
       public boolean isAscending = false;
+      public boolean offset = false;
       public boolean count = false;
     }
 
@@ -8318,6 +8394,8 @@ public void validate() throws TException {
           new FieldValueMetaData(TType.STRING)));
       put(ISASCENDING, new FieldMetaData("isAscending", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.BOOL)));
+      put(OFFSET, new FieldMetaData("offset", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.I32)));
       put(COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I32)));
     }});
@@ -8336,6 +8414,7 @@ public get_slice_super_args(
       String key,
       String columnFamily,
       boolean isAscending,
+      int offset,
       int count)
     {
       this();
@@ -8344,6 +8423,8 @@ public get_slice_super_args(
       this.columnFamily = columnFamily;
       this.isAscending = isAscending;
       this.__isset.isAscending = true;
+      this.offset = offset;
+      this.__isset.offset = true;
       this.count = count;
       this.__isset.count = true;
     }
@@ -8363,6 +8444,8 @@ public get_slice_super_args(get_slice_super_args other) {
       }
       __isset.isAscending = other.__isset.isAscending;
       this.isAscending = other.isAscending;
+      __isset.offset = other.__isset.offset;
+      this.offset = other.offset;
       __isset.count = other.__isset.count;
       this.count = other.count;
     }
@@ -8463,6 +8546,28 @@ public void setIsAscendingIsSet(boolean value) {
       this.__isset.isAscending = value;
     }
 
+    public int getOffset() {
+      return this.offset;
+    }
+
+    public void setOffset(int offset) {
+      this.offset = offset;
+      this.__isset.offset = true;
+    }
+
+    public void unsetOffset() {
+      this.__isset.offset = false;
+    }
+
+    // Returns true if field offset is set (has been asigned a value) and false otherwise
+    public boolean isSetOffset() {
+      return this.__isset.offset;
+    }
+
+    public void setOffsetIsSet(boolean value) {
+      this.__isset.offset = value;
+    }
+
     public int getCount() {
       return this.count;
     }
@@ -8519,6 +8624,14 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
+      case OFFSET:
+        if (value == null) {
+          unsetOffset();
+        } else {
+          setOffset((Integer)value);
+        }
+        break;
+
       case COUNT:
         if (value == null) {
           unsetCount();
@@ -8546,6 +8659,9 @@ public Object getFieldValue(int fieldID) {
       case ISASCENDING:
         return new Boolean(isIsAscending());
 
+      case OFFSET:
+        return new Integer(getOffset());
+
       case COUNT:
         return new Integer(getCount());
 
@@ -8565,6 +8681,8 @@ public boolean isSet(int fieldID) {
         return isSetColumnFamily();
       case ISASCENDING:
         return isSetIsAscending();
+      case OFFSET:
+        return isSetOffset();
       case COUNT:
         return isSetCount();
       default:
@@ -8621,6 +8739,15 @@ public boolean equals(get_slice_super_args that) {
           return false;
       }
 
+      boolean this_present_offset = true;
+      boolean that_present_offset = true;
+      if (this_present_offset || that_present_offset) {
+        if (!(this_present_offset && that_present_offset))
+          return false;
+        if (this.offset != that.offset)
+          return false;
+      }
+
       boolean this_present_count = true;
       boolean that_present_count = true;
       if (this_present_count || that_present_count) {
@@ -8678,6 +8805,14 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case OFFSET:
+            if (field.type == TType.I32) {
+              this.offset = iprot.readI32();
+              this.__isset.offset = true;
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           case COUNT:
             if (field.type == TType.I32) {
               this.count = iprot.readI32();
@@ -8721,6 +8856,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(IS_ASCENDING_FIELD_DESC);
       oprot.writeBool(this.isAscending);
       oprot.writeFieldEnd();
+      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
+      oprot.writeI32(this.offset);
+      oprot.writeFieldEnd();
       oprot.writeFieldBegin(COUNT_FIELD_DESC);
       oprot.writeI32(this.count);
       oprot.writeFieldEnd();
@@ -8761,6 +8899,10 @@ public String toString() {
       sb.append(this.isAscending);
       first = false;
       if (!first) sb.append(", ");
+      sb.append("offset:");
+      sb.append(this.offset);
+      first = false;
+      if (!first) sb.append(", ");
       sb.append("count:");
       sb.append(this.count);
       first = false;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index fffc055d..6a35df00 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -135,7 +135,7 @@ private void executeGet(CommonTree ast) throws TException, NotFoundException, In
         {
             // table.cf['key']
         	List<column_t> columns = new ArrayList<column_t>();
-      		columns = thriftClient_.get_slice(tableName, key, columnFamily, true, 1000000);
+      		columns = thriftClient_.get_slice(tableName, key, columnFamily, true, 0, 1000000);
             int size = columns.size();
             for (Iterator<column_t> colIter = columns.iterator(); colIter.hasNext(); )
             {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/ColumnRangeQueryRSD.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/ColumnRangeQueryRSD.java
index 7f3eb534..9563d332 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/ColumnRangeQueryRSD.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/ColumnRangeQueryRSD.java
@@ -97,7 +97,7 @@ public ColumnRangeQueryRSD(CFMetaData cfMetaData, ConstantOperand rowKey, Consta
         try
         {
             String key = (String)(rowKey_.get());
-            ReadCommand readCommand = new SliceFromReadCommand(cfMetaData_.tableName, key, columnFamily_column, true, limit_);
+            ReadCommand readCommand = new SliceFromReadCommand(cfMetaData_.tableName, key, columnFamily_column, true, offset_, limit_);
             row = StorageProxy.readProtocol(readCommand, StorageService.ConsistencyLevel.WEAK);
         }
         catch (Exception e)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/SuperColumnRangeQueryRSD.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/SuperColumnRangeQueryRSD.java
index 056b2190..d3dc8f3b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/SuperColumnRangeQueryRSD.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/common/SuperColumnRangeQueryRSD.java
@@ -66,7 +66,7 @@ public SuperColumnRangeQueryRSD(CFMetaData cfMetaData, OperandDef rowKey, int of
         try
         {
             String key = (String)(rowKey_.get());
-            ReadCommand readCommand = new SliceFromReadCommand(cfMetaData_.tableName, key, cfMetaData_.cfName, true, limit_);
+            ReadCommand readCommand = new SliceFromReadCommand(cfMetaData_.tableName, key, cfMetaData_.cfName, true, offset_, limit_);
             row = StorageProxy.readProtocol(readCommand, StorageService.ConsistencyLevel.WEAK);
         }
         catch (Exception e)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 913fbfec..3e4a69fb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1535,7 +1535,7 @@ public double getReadLatency()
      * get a list of columns starting from a given column, in a specified order
      * only the latest version of a column is returned
      */
-    public ColumnFamily getSliceFrom(String key, String cfName, String startColumn, boolean isAscending, int count)
+    public ColumnFamily getSliceFrom(String key, String cfName, String startColumn, boolean isAscending, int offset, int count)
     throws IOException, ExecutionException, InterruptedException
     {
         lock_.readLock().lock();
@@ -1620,15 +1620,17 @@ protected IColumn getReduced()
 
             // add unique columns to the CF container
             int liveColumns = 0;
+            int limit = offset + count;
             for (IColumn column : reduced)
             {
-                if (liveColumns >= count)
+                if (liveColumns >= limit)
                 {
                     break;
                 }
                 if (!column.isMarkedForDelete())
                     liveColumns++;
 
+                if (liveColumns > offset)
                 returnCF.addColumn(column);
             }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
index 9b10ec0e..4f2160a4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
@@ -25,13 +25,15 @@
 {
     public final String columnFamilyColumn;
     public final boolean isAscending;
+    public final int limit;
     public final int count;
 
-    public SliceFromReadCommand(String table, String key, String columnFamilyColumn, boolean isAscending, int count)
+    public SliceFromReadCommand(String table, String key, String columnFamilyColumn, boolean isAscending, int limit, int count)
     {
         super(table, key, CMD_TYPE_GET_SLICE_FROM);
         this.columnFamilyColumn = columnFamilyColumn;
         this.isAscending = isAscending;
+        this.limit = limit;
         this.count = count;
     }
 
@@ -44,7 +46,7 @@ public String getColumnFamilyName()
     @Override
     public ReadCommand copy()
     {
-        ReadCommand readCommand = new SliceFromReadCommand(table, key, columnFamilyColumn, isAscending, count);
+        ReadCommand readCommand = new SliceFromReadCommand(table, key, columnFamilyColumn, isAscending, limit, count);
         readCommand.setDigestQuery(isDigestQuery());
         return readCommand;
     }
@@ -52,7 +54,7 @@ public ReadCommand copy()
     @Override
     public Row getRow(Table table) throws IOException
     {
-        return table.getSliceFrom(key, columnFamilyColumn, isAscending, count);
+        return table.getSliceFrom(key, columnFamilyColumn, isAscending, limit, count);
     }
 
     @Override
@@ -63,6 +65,7 @@ public String toString()
                ", key='" + key + '\'' +
                ", columnFamily='" + columnFamilyColumn + '\'' +
                ", isAscending='" + isAscending + '\'' +
+               ", limit='" + limit + '\'' +
                ", count='" + count + '\'' +
                ')';
     }
@@ -79,6 +82,7 @@ public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
         dos.writeUTF(realRM.key);
         dos.writeUTF(realRM.columnFamilyColumn);
         dos.writeBoolean(realRM.isAscending);
+        dos.writeInt(realRM.limit);
         dos.writeInt(realRM.count);
     }
 
@@ -90,9 +94,10 @@ public ReadCommand deserialize(DataInputStream dis) throws IOException
         String key = dis.readUTF();
         String columnFamily = dis.readUTF();
         boolean isAscending = dis.readBoolean();
+        int limit = dis.readInt();
         int count = dis.readInt();
 
-        SliceFromReadCommand rm = new SliceFromReadCommand(table, key, columnFamily, isAscending, count);
+        SliceFromReadCommand rm = new SliceFromReadCommand(table, key, columnFamily, isAscending, limit, count);
         rm.setDigestQuery(isDigest);
         return rm;
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index e7e4e1ba..4c54c766 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -605,7 +605,7 @@ public Row getRow(String key, String cf, List<String> columns) throws IOExceptio
     /**
      * Selects a list of columns in a column family from a given column for the specified key.
     */
-    public Row getSliceFrom(String key, String cf, boolean isAscending, int count) throws IOException
+    public Row getSliceFrom(String key, String cf, boolean isAscending, int limit, int count) throws IOException
     {
         Row row = new Row(table_, key);
         String[] values = cf.split(":", -1);
@@ -615,7 +615,7 @@ public Row getSliceFrom(String key, String cf, boolean isAscending, int count) t
         long start1 = System.currentTimeMillis();
         try
         {
-            ColumnFamily columnFamily = cfStore.getSliceFrom(key, cfName, startWith, isAscending, count);
+            ColumnFamily columnFamily = cfStore.getSliceFrom(key, cfName, startWith, isAscending, limit, count);
             if (columnFamily != null)
                 row.addColumnFamily(columnFamily);
             long timeTaken = System.currentTimeMillis() - start1;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 4b7c6479..cf3c3ad7 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -167,7 +167,7 @@ protected ColumnFamily readColumnFamily(ReadCommand command) throws InvalidReque
         }
     }
 
-    public List<column_t> get_slice(String tablename, String key, String columnParent, boolean isAscending, int count) throws InvalidRequestException
+    public List<column_t> get_slice(String tablename, String key, String columnParent, boolean isAscending, int offset, int count) throws InvalidRequestException
     {
         logger.debug("get_slice_from");
         String[] values = columnParent.split(":", -1); // allow empty column specifier
@@ -178,7 +178,7 @@ protected ColumnFamily readColumnFamily(ReadCommand command) throws InvalidReque
         if ("Name".compareTo(DatabaseDescriptor.getCFMetaData(tablename, values[0]).indexProperty_) != 0)
             throw new InvalidRequestException("get_slice_from requires CF indexed by name");
 
-        ColumnFamily cfamily = readColumnFamily(new SliceFromReadCommand(tablename, key, columnParent, isAscending, count));
+        ColumnFamily cfamily = readColumnFamily(new SliceFromReadCommand(tablename, key, columnParent, isAscending, offset, count));
         if (cfamily == null)
         {
             return EMPTY_COLUMNS;
@@ -232,7 +232,7 @@ public int get_column_count(String tablename, String key, String columnParent) t
         ColumnFamily cfamily;
         if (DatabaseDescriptor.isNameSortingEnabled(tablename, values[0]))
         {
-            cfamily = readColumnFamily(new SliceFromReadCommand(tablename, key, columnParent + ":", true, Integer.MAX_VALUE));
+            cfamily = readColumnFamily(new SliceFromReadCommand(tablename, key, columnParent + ":", true, 0, Integer.MAX_VALUE));
         }
         else
         {
@@ -341,7 +341,7 @@ private void doInsert(int block, RowMutation rm) throws UnavailableException
         return thriftSuperColumns;
     }
 
-    public List<superColumn_t> get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int count) throws InvalidRequestException
+    public List<superColumn_t> get_slice_super(String tablename, String key, String columnFamily, boolean isAscending, int offset, int count) throws InvalidRequestException
     {
         logger.debug("get_slice_super");
         String[] values = columnFamily.split(":", -1);
@@ -350,7 +350,7 @@ private void doInsert(int block, RowMutation rm) throws UnavailableException
         if (count <= 0)
             throw new InvalidRequestException("get_slice_super requires positive count");
 
-        ColumnFamily cfamily = readColumnFamily(new SliceFromReadCommand(tablename, key, columnFamily, isAscending, count));
+        ColumnFamily cfamily = readColumnFamily(new SliceFromReadCommand(tablename, key, columnFamily, isAscending, offset, count));
         if (cfamily == null)
         {
             return EMPTY_SUPERCOLUMNS;
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
index 2801faf6..0ce0cbe2 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
@@ -57,7 +57,7 @@ public void testMakeReadMessage()
         rm2 = serializeAndDeserializeReadMessage(rm);
         assert rm2.toString().equals(rm.toString());
 
-        rm = new SliceFromReadCommand("Table1", "row1", "foo", true, 2);
+        rm = new SliceFromReadCommand("Table1", "row1", "foo", true, 0, 2);
         rm2 = serializeAndDeserializeReadMessage(rm);
         assert rm2.toString().equals(rm.toString());
         
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
index 2a6b1cf7..66562df7 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
@@ -146,12 +146,12 @@ private void validateGetSliceNoMatch(Table table) throws IOException
         ColumnFamily cf;
 
         // key before the rows that exists
-        result = table.getSliceFrom("a", "Standard2:", true, 0);
+        result = table.getSliceFrom("a", "Standard2:", true, 0, 1);
         cf = result.getColumnFamily("Standard2");
         assertColumns(cf);
 
         // key after the rows that exist
-        result = table.getSliceFrom("z", "Standard2:", true, 0);
+        result = table.getSliceFrom("z", "Standard2:", true, 0, 1);
         cf = result.getColumnFamily("Standard2");
         assertColumns(cf);
     }
@@ -190,27 +190,27 @@ public void run() throws Exception
                 Row result;
                 ColumnFamily cf;
 
-                result = table.getSliceFrom(ROW, "Standard1:col5", true, 2);
+                result = table.getSliceFrom(ROW, "Standard1:col5", true, 0, 2);
                 cf = result.getColumnFamily("Standard1");
                 assertColumns(cf, "col5", "col7");
 
-                result = table.getSliceFrom(ROW, "Standard1:col4", true, 2);
+                result = table.getSliceFrom(ROW, "Standard1:col4", true, 0, 2);
                 cf = result.getColumnFamily("Standard1");
-                assertColumns(cf, "col4", "col5", "col7");
+                assertColumns(cf, "col5", "col7");
 
-                result = table.getSliceFrom(ROW, "Standard1:col5", false, 2);
+                result = table.getSliceFrom(ROW, "Standard1:col5", false, 0, 2);
                 cf = result.getColumnFamily("Standard1");
                 assertColumns(cf, "col3", "col4", "col5");
 
-                result = table.getSliceFrom(ROW, "Standard1:col6", false, 2);
+                result = table.getSliceFrom(ROW, "Standard1:col6", false, 0, 2);
                 cf = result.getColumnFamily("Standard1");
                 assertColumns(cf, "col3", "col4", "col5");
 
-                result = table.getSliceFrom(ROW, "Standard1:col95", true, 2);
+                result = table.getSliceFrom(ROW, "Standard1:col95", true, 0, 2);
                 cf = result.getColumnFamily("Standard1");
                 assertColumns(cf);
 
-                result = table.getSliceFrom(ROW, "Standard1:col0", false, 2);
+                result = table.getSliceFrom(ROW, "Standard1:col0", false, 0, 2);
                 cf = result.getColumnFamily("Standard1");
                 assertColumns(cf);
             }
@@ -258,7 +258,7 @@ public void run() throws Exception
                 Row result;
                 ColumnFamily cfres;
 
-                result = table.getSliceFrom(ROW, "Standard1:col2", true, 3);
+                result = table.getSliceFrom(ROW, "Standard1:col2", true, 0, 3);
                 cfres = result.getColumnFamily("Standard1");
                 assertColumns(cfres, "col2", "col3", "col4");
                 assertEquals(new String(cfres.getColumn("col2").value()), "valx");
@@ -286,28 +286,42 @@ public void testGetSliceFromLarge() throws Throwable
 
         Row result;
         ColumnFamily cfres;
-        result = table.getSliceFrom(ROW, "Standard1:col1000", true, 3);
+        result = table.getSliceFrom(ROW, "Standard1:col1000", true, 0, 3);
         cfres = result.getColumnFamily("Standard1");
         assertColumns(cfres, "col1000", "col1001", "col1002");
         assertEquals(new String(cfres.getColumn("col1000").value()), "vvvvvvvvvvvvvvvv1000");
         assertEquals(new String(cfres.getColumn("col1001").value()), "vvvvvvvvvvvvvvvv1001");
         assertEquals(new String(cfres.getColumn("col1002").value()), "vvvvvvvvvvvvvvvv1002");
 
-        result = table.getSliceFrom(ROW, "Standard1:col1195", true, 3);
+        result = table.getSliceFrom(ROW, "Standard1:col1195", true, 0, 3);
         cfres = result.getColumnFamily("Standard1");
         assertColumns(cfres, "col1195", "col1196", "col1197");
         assertEquals(new String(cfres.getColumn("col1195").value()), "vvvvvvvvvvvvvvvv1195");
         assertEquals(new String(cfres.getColumn("col1196").value()), "vvvvvvvvvvvvvvvv1196");
         assertEquals(new String(cfres.getColumn("col1197").value()), "vvvvvvvvvvvvvvvv1197");
 
-        result = table.getSliceFrom(ROW, "Standard1:col1196", false, 3);
+        result = table.getSliceFrom(ROW, "Standard1:col1195", true, 10, 3);
+        cfres = result.getColumnFamily("Standard1");
+        assertColumns(cfres, "col1205", "col1206", "col1207");
+        assertEquals(new String(cfres.getColumn("col1205").value()), "vvvvvvvvvvvvvvvv1205");
+        assertEquals(new String(cfres.getColumn("col1206").value()), "vvvvvvvvvvvvvvvv1206");
+        assertEquals(new String(cfres.getColumn("col1207").value()), "vvvvvvvvvvvvvvvv1207");
+
+        result = table.getSliceFrom(ROW, "Standard1:col1196", false, 0, 3);
         cfres = result.getColumnFamily("Standard1");
         assertColumns(cfres, "col1194", "col1195", "col1196");
         assertEquals(new String(cfres.getColumn("col1194").value()), "vvvvvvvvvvvvvvvv1194");
         assertEquals(new String(cfres.getColumn("col1195").value()), "vvvvvvvvvvvvvvvv1195");
         assertEquals(new String(cfres.getColumn("col1196").value()), "vvvvvvvvvvvvvvvv1196");
 
-        result = table.getSliceFrom(ROW, "Standard1:col1990", true, 3);
+        result = table.getSliceFrom(ROW, "Standard1:col1196", false, 10, 3);
+        cfres = result.getColumnFamily("Standard1");
+        assertColumns(cfres, "col1184", "col1185", "col1186");
+        assertEquals(new String(cfres.getColumn("col1184").value()), "vvvvvvvvvvvvvvvv1184");
+        assertEquals(new String(cfres.getColumn("col1185").value()), "vvvvvvvvvvvvvvvv1185");
+        assertEquals(new String(cfres.getColumn("col1186").value()), "vvvvvvvvvvvvvvvv1186");
+
+        result = table.getSliceFrom(ROW, "Standard1:col1990", true, 0, 3);
         cfres = result.getColumnFamily("Standard1");
         assertColumns(cfres, "col1990", "col1991", "col1992");
         assertEquals(new String(cfres.getColumn("col1990").value()), "vvvvvvvvvvvvvvvv1990");
@@ -342,7 +356,7 @@ public void run() throws Exception
                 Row result;
                 ColumnFamily cfres;
 
-                result = table.getSliceFrom(ROW, "Super1:", true, 10);
+                result = table.getSliceFrom(ROW, "Super1:", true, 0, 10);
                 cfres = result.getColumnFamily("Super1");
                 assertColumns(cfres, "sc1");
                 assertEquals(new String(cfres.getColumn("sc1").getSubColumn("col1").value()), "val1");
