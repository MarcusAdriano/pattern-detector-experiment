diff --git a/lucene/dev/branches/LUCENE-2878/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java b/lucene/dev/branches/LUCENE-2878/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
index 658e58ac..edf346a0 100644
--- a/lucene/dev/branches/LUCENE-2878/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
+++ b/lucene/dev/branches/LUCENE-2878/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
@@ -17,13 +17,13 @@
  * limitations under the License.
  */
 
+import org.apache.lucene.search.intervals.ConjunctionIntervalIterator;
+import org.apache.lucene.search.intervals.IntervalIterator;
+
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Collections;
 
-import org.apache.lucene.search.intervals.ConjunctionIntervalIterator;
-import org.apache.lucene.search.intervals.IntervalIterator;
-
 /** A Scorer for queries with a required subscorer
  * and an excluding (prohibited) sub DocIdSetIterator.
  * <br>
@@ -134,6 +134,8 @@ public int advance(int target) throws IOException {
 
   @Override
   public IntervalIterator intervals(boolean collectIntervals) throws IOException {
+    if (reqScorer == null)
+      return IntervalIterator.NO_MORE_INTERVALS;
     return new ConjunctionIntervalIterator(this, collectIntervals, reqScorer.intervals(collectIntervals));
   }
 }
diff --git a/lucene/dev/branches/LUCENE-2878/lucene/core/src/test/org/apache/lucene/search/intervals/TestConjunctionIntervalIterator.java b/lucene/dev/branches/LUCENE-2878/lucene/core/src/test/org/apache/lucene/search/intervals/TestConjunctionIntervalIterator.java
index 76624f14..da401397 100644
--- a/lucene/dev/branches/LUCENE-2878/lucene/core/src/test/org/apache/lucene/search/intervals/TestConjunctionIntervalIterator.java
+++ b/lucene/dev/branches/LUCENE-2878/lucene/core/src/test/org/apache/lucene/search/intervals/TestConjunctionIntervalIterator.java
@@ -78,4 +78,21 @@ public void testConjunctionUnorderedQuery() throws IOException {
     });
   }
 
+  // andnot(andnot(pease, or(porridge, flurble)), or(foo, bar))
+  public void testConjunctionExclusionQuery() throws IOException {
+    BooleanQuery andnotinner = new BooleanQuery();
+    andnotinner.add(makeTermQuery("pease"), Occur.MUST);
+    BooleanQuery andnotinneror = new BooleanQuery();
+    andnotinneror.add(makeTermQuery("porridge"), Occur.SHOULD);
+    andnotinneror.add(makeTermQuery("flurble"), Occur.SHOULD);
+    andnotinner.add(andnotinneror, Occur.MUST_NOT);
+    BooleanQuery outer = new BooleanQuery();
+    outer.add(andnotinner, Occur.MUST);
+    BooleanQuery andnotouteror = new BooleanQuery();
+    andnotouteror.add(makeTermQuery("foo"), Occur.SHOULD);
+    andnotouteror.add(makeTermQuery("bar"), Occur.SHOULD);
+    outer.add(andnotouteror, Occur.MUST_NOT);
+    checkIntervals(outer, searcher, new int[][]{});
+  }
+
 }
