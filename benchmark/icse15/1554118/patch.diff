diff --git a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 33110511..c8ed6a0f 100644
--- a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -59,6 +59,7 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -411,6 +412,9 @@ boolean fetchLatestIndex(final SolrCore core, boolean forceReplication) throws I
           solrCore.getUpdateHandler().getSolrCoreState()
           .closeIndexWriter(core, true);
         }
+        
+        boolean reloadCore = false;
+        
         try {
           LOG.info("Starting download to " + tmpIndexDir + " fullCopy="
               + isFullCopyNeeded);
@@ -445,7 +449,7 @@ boolean fetchLatestIndex(final SolrCore core, boolean forceReplication) throws I
               logReplicationTimeAndConfFiles(modifiedConfFiles,
                   successfulInstall);// write to a file time of replication and
                                      // conf files.
-              reloadCore();
+              reloadCore = true;
             }
           } else {
             terminateAndWaitFsyncService();
@@ -466,6 +470,11 @@ boolean fetchLatestIndex(final SolrCore core, boolean forceReplication) throws I
           }
         }
 
+        // we must reload the core after we open the IW back up
+        if (reloadCore) {
+          reloadCore();
+        }
+
         if (successfulInstall) {
           if (isFullCopyNeeded) {
             // let the system know we are changing dir's and the old one
@@ -694,6 +703,7 @@ private String createTempindexDir(SolrCore core, String tmpIdxDirName) {
   }
 
   private void reloadCore() {
+    final CountDownLatch latch = new CountDownLatch(1);
     new Thread() {
       @Override
       public void run() {
@@ -701,9 +711,17 @@ public void run() {
           solrCore.getCoreDescriptor().getCoreContainer().reload(solrCore.getName());
         } catch (Exception e) {
           LOG.error("Could not reload core ", e);
+        } finally {
+          latch.countDown();
         }
       }
     }.start();
+    try {
+      latch.await();
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      throw new RuntimeException("Interrupted while waiting for core reload to finish", e);
+    }
   }
 
   private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {
diff --git a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index ee7e218f..a561b655 100644
--- a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -751,7 +751,7 @@ public void doTestSnapPullWithMasterUrl() throws Exception {
   }
   
   
-  @Test @Ignore("https://issues.apache.org/jira/browse/SOLR-5343")
+  @Test 
   public void doTestStressReplication() throws Exception {
     // change solrconfig on slave
     // this has no entry for pollinginterval
