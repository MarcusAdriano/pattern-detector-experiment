diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
index 71dcb212..545f8fb6 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
@@ -22,9 +22,11 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Set;
 
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext.Context;
@@ -43,14 +45,42 @@
  * per path. Most DirectoryFactory implementations will want to extend this
  * class and simply implement {@link DirectoryFactory#create(String, DirContext)}.
  * 
+ * This is an expert class and these API's are subject to change.
+ * 
  */
 public abstract class CachingDirectoryFactory extends DirectoryFactory {
   protected class CacheValue {
-    public Directory directory;
+    final public String path;
+    final public Directory directory;
+    
+    // use the setter!
+    private boolean deleteOnClose = false;
+    
+    public CacheValue(String path, Directory directory) {
+      this.path = path;
+      this.directory = directory;
+      this.closeEntries.add(this);
+    }
     public int refCnt = 1;
-    public boolean closed;
-    public String path;
+    // if we are latestForPath, I'm currently using my path
+    // otherwise a new Directory instance is using my path
+    // and I must be manipulated by Directory
+    public boolean latestForPath = false;
+    // has close(Directory) been called on this?
+    public boolean closeDirectoryCalled = false;
     public boolean doneWithDir = false;
+    private boolean deleteAfterCoreClose = false;
+    public Set<CacheValue> removeEntries = new HashSet<CacheValue>();
+    public Set<CacheValue> closeEntries = new HashSet<CacheValue>();
+
+    public void setDeleteOnClose(boolean deleteOnClose, boolean deleteAfterCoreClose) {
+      if (deleteOnClose) {
+        removeEntries.add(this);
+      }
+      this.deleteOnClose = deleteOnClose;
+      this.deleteAfterCoreClose = deleteAfterCoreClose;
+    }
+    
     @Override
     public String toString() {
       return "CachedDir<<" + directory.toString() + ";refCount=" + refCnt + ";path=" + path + ";done=" + doneWithDir + ">>";
@@ -66,6 +96,8 @@ public String toString() {
   
   protected Map<Directory,List<CloseListener>> closeListeners = new HashMap<Directory,List<CloseListener>>();
 
+  protected Set<CacheValue> removeEntries = new HashSet<CacheValue>();
+
   private Double maxWriteMBPerSecFlush;
 
   private Double maxWriteMBPerSecMerge;
@@ -158,6 +190,11 @@ public void close() throws IOException {
       
       byDirectoryCache.clear();
       byPathCache.clear();
+      
+      for (CacheValue val : removeEntries) {
+        log.info("Removing directory: " + val.path);
+        removeDirectory(val);
+      }
     }
   }
   
@@ -182,8 +219,9 @@ private void close(Directory directory) throws IOException {
         
         // if it's been closed, it's path is now
         // owned by another Directory instance
-        if (!cacheValue.closed) {
+        if (!cacheValue.latestForPath) {
           byPathCache.remove(cacheValue.path);
+          cacheValue.latestForPath = true;
         }
       }
     }
@@ -200,13 +238,56 @@ private void closeDirectory(CacheValue cacheValue) {
         }
       }
     }
+    
+    cacheValue.closeDirectoryCalled = true;
+    
+    if (cacheValue.deleteOnClose) {
+      
+      // see if we are a subpath
+      Collection<CacheValue> values = byPathCache.values();
+      
+      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>();
+      cacheValues.addAll(values);
+      cacheValues.remove(cacheValue);
+      for (CacheValue otherCacheValue : cacheValues) {
+        // if we are a parent path and all our sub children are not already closed,
+        // get a sub path to close us later
+        if (otherCacheValue.path.startsWith(cacheValue.path) && !otherCacheValue.closeDirectoryCalled) {
+          // we let the sub dir remove and close us
+          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {
+            otherCacheValue.deleteAfterCoreClose = true;
+          }
+          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);
+          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);
+          cacheValue.closeEntries.clear();
+          break;
+        }
+      }
+    }
+    
+    for (CacheValue val : cacheValue.removeEntries) {
+      if (!val.deleteAfterCoreClose) {
+        try {
+          log.info("Removing directory: " + val.path);
+          removeDirectory(val);
+        } catch (Throwable t) {
+          SolrException.log(log, "Error removing directory", t);
+        }
+      } else {
+        removeEntries.add(val);
+      }
+    }
+    
+    for (CacheValue val : cacheValue.closeEntries) {
     try {
-      log.info("Closing directory: " + cacheValue.path);
-      cacheValue.directory.close();
+        log.info("Closing directory: " + val.path);
+        val.directory.close();
     } catch (Throwable t) {
       SolrException.log(log, "Error closing directory", t);
     }
     
+    }
+
     if (listeners != null) {
       for (CloseListener listener : listeners) {
         try {
@@ -265,21 +346,13 @@ public final Directory get(String path,  DirContext dirContext, String rawLockTy
           // we make a quick close attempt,
           // otherwise this should be closed
           // when whatever is using it, releases it
-          
           if (cacheValue.refCnt == 0) {
-            try {
-              // the following will decref, so
-              // first incref
-              cacheValue.refCnt++;
-              close(cacheValue.directory);
-            } catch (IOException e) {
-              SolrException.log(log, "Error closing directory", e);
-            }
+            closeDirectory(cacheValue);
           }
           
           // close the entry, it will be owned by the new dir
           // we count on it being released by directory
-          cacheValue.closed = true;
+          cacheValue.latestForPath = true;
           
         }
       }
@@ -289,9 +362,7 @@ public final Directory get(String path,  DirContext dirContext, String rawLockTy
         
         directory = rateLimit(directory);
         
-        CacheValue newCacheValue = new CacheValue();
-        newCacheValue.directory = directory;
-        newCacheValue.path = fullPath;
+        CacheValue newCacheValue = new CacheValue(fullPath, directory);
         
         injectLockFactory(directory, fullPath, rawLockType);
         
@@ -367,6 +438,38 @@ public void release(Directory directory) throws IOException {
     close(directory);
   }
   
+  @Override
+  public void remove(String path) throws IOException {
+    remove(path, false);
+  }
+  
+  @Override
+  public void remove(Directory dir) throws IOException {
+    remove(dir, false);
+  }
+  
+  @Override
+  public void remove(String path, boolean deleteAfterCoreClose) throws IOException {
+    synchronized (this) {
+      CacheValue val = byPathCache.get(normalize(path));
+      if (val == null) {
+        throw new IllegalArgumentException("Unknown directory " + path);
+      }
+      val.setDeleteOnClose(true, deleteAfterCoreClose);
+    }
+  }
+  
+  @Override
+  public void remove(Directory dir, boolean deleteAfterCoreClose) throws IOException {
+    synchronized (this) {
+      CacheValue val = byDirectoryCache.get(dir);
+      if (val == null) {
+        throw new IllegalArgumentException("Unknown directory " + dir);
+      }
+      val.setDeleteOnClose(true, deleteAfterCoreClose);
+    }
+  }
+  
   private static Directory injectLockFactory(Directory dir, String lockPath,
       String rawLockType) throws IOException {
     if (null == rawLockType) {
@@ -395,7 +498,17 @@ private static Directory injectLockFactory(Directory dir, String lockPath,
     return dir;
   }
   
-  protected String stripTrailingSlash(String path) {
+  protected void removeDirectory(CacheValue cacheValue) throws IOException {
+    empty(cacheValue.directory);
+  }
+  
+  @Override
+  public String normalize(String path) throws IOException {
+    path = stripTrailingSlash(path);
+    return path;
+  }
+  
+  private String stripTrailingSlash(String path) {
     if (path.endsWith("/")) {
       path = path.substring(0, path.length() - 1);
     }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
index dd899e42..65484093 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
@@ -92,6 +92,26 @@
    */
   public abstract void remove(Directory dir) throws IOException;
   
+  /**
+   * Removes the Directory's persistent storage.
+   * For example: A file system impl may remove the
+   * on disk directory.
+   * @throws IOException If there is a low-level I/O error.
+   * 
+   */
+  public abstract void remove(Directory dir, boolean afterCoreClose) throws IOException;
+  
+  /**
+   * This remove is special in that it may be called even after
+   * the factory has been closed. Remove only makes sense for
+   * persistent directory factories.
+   * 
+   * @param path to remove
+   * @param afterCoreClose whether to wait until after the core is closed.
+   * @throws IOException If there is a low-level I/O error.
+   */
+  public abstract void remove(String path, boolean afterCoreClose) throws IOException;
+  
   /**
    * This remove is special in that it may be called even after
    * the factory has been closed. Remove only makes sense for
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
index 1f317260..bff04e05 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
@@ -16,9 +16,12 @@
  * limitations under the License.
  */
 
+import java.io.File;
 import java.io.IOException;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.lucene.store.Directory;
+import org.apache.solr.core.CachingDirectoryFactory.CacheValue;
 
 /**
  * Directory provider for implementations that do not persist over reboots.
@@ -51,21 +54,4 @@ public boolean isPersistent() {
   public boolean isAbsolute(String path) {
     return true;
   }
-  
-  
-  @Override
-  public void remove(Directory dir) throws IOException {
-    // ram dir does not persist its dir anywhere
-  }
-  
-  @Override
-  public void remove(String path) throws IOException {
-    // ram dir does not persist its dir anywhere
-  }
-  
-  @Override
-  public String normalize(String path) throws IOException {
-    path = stripTrailingSlash(path);
-    return path;
-  }
 }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
index c4069187..8cfed390 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
@@ -25,6 +25,7 @@
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.NRTCachingDirectory;
 import org.apache.lucene.store.RateLimitedDirectoryWrapper;
+import org.apache.solr.core.CachingDirectoryFactory.CacheValue;
 
 /**
  * Directory provider which mimics original Solr 
@@ -45,7 +46,7 @@ protected Directory create(String path, DirContext dirContext) throws IOExceptio
   public String normalize(String path) throws IOException {
     String cpath = new File(path).getCanonicalPath();
     
-    return stripTrailingSlash(cpath);
+    return super.normalize(cpath);
   }
   
   public boolean isPersistent() {
@@ -59,21 +60,8 @@ public boolean isAbsolute(String path) {
   }
   
   @Override
-  public void remove(Directory dir) throws IOException {
-    synchronized (this) {
-      CacheValue val = byDirectoryCache.get(dir);
-      if (val == null) {
-        throw new IllegalArgumentException("Unknown directory " + dir);
-      }
-      File dirFile = new File(val.path);
-      FileUtils.deleteDirectory(dirFile);
-    }
-  }
-
-  @Override
-  public void remove(String path) throws IOException {
-    String fullPath = normalize(path);
-    File dirFile = new File(fullPath);
+  protected void removeDirectory(CacheValue cacheValue) throws IOException {
+    File dirFile = new File(cacheValue.path);
     FileUtils.deleteDirectory(dirFile);
   }
   
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index c82ae6a0..1d024697 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -483,13 +483,6 @@ public void postClose() {
         throw new InterruptedException("Index fetch interrupted");
       } catch (Exception e) {
         throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Index fetch failed : ", e);
-      } finally {
-        if (deleteTmpIdxDir) {
-          LOG.info("removing temporary index download directory files " + tmpIndexDir);
-          if (tmpIndex != null && core.getDirectoryFactory().exists(tmpIndex)) {
-            DirectoryFactory.empty(tmpIndexDir);
-          }
-        } 
       }
     } finally {
       try {
@@ -506,9 +499,6 @@ public void postClose() {
         stop = false;
         fsyncException = null;
       } finally {
-        if (tmpIndexDir != null) {
-          core.getDirectoryFactory().release(tmpIndexDir);
-        }
         if (deleteTmpIdxDir && tmpIndexDir != null) {
           try {
             core.getDirectoryFactory().remove(tmpIndexDir);
@@ -516,6 +506,11 @@ public void postClose() {
             SolrException.log(LOG, "Error removing directory " + tmpIndexDir, e);
           }
         }
+        
+        if (tmpIndexDir != null) {
+          core.getDirectoryFactory().release(tmpIndexDir);
+        }
+        
         if (indexDir != null) {
           core.getDirectoryFactory().release(indexDir);
         }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 537d1bfc..4ba9982c 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -29,8 +29,6 @@
 import java.util.Map;
 import java.util.Properties;
 
-import javax.xml.parsers.ParserConfigurationException;
-
 import org.apache.commons.io.FileUtils;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.store.Directory;
@@ -72,7 +70,6 @@
 import org.apache.zookeeper.KeeperException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.xml.sax.SAXException;
 
 /**
  *
@@ -567,43 +564,24 @@ protected boolean handleUnloadAction(SolrQueryRequest req,
                     + e.getMessage(), e);
           }
         }
-      }
-      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {
-        core.addCloseHook(new CloseHook() {
-          private String indexDir;
           
-          @Override
-          public void preClose(SolrCore core) {
-            indexDir = core.getIndexDir();
-          }
-          
-          @Override
-          public void postClose(SolrCore core) {
+        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {
             try {
-              core.getDirectoryFactory().remove(indexDir);
-            } catch (IOException e) {
-              throw new RuntimeException(e);
+            core.getDirectoryFactory().remove(core.getIndexDir());
+          } catch (Exception e) {
+            SolrException.log(log, "Failed to flag index dir for removal for core:"
+                    + core.getName() + " dir:" + core.getIndexDir());
             }
           }
-        });
       }
       
       if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {
-        core.addCloseHook(new CloseHook() {
-          @Override
-          public void preClose(SolrCore core) {}
-          
-          @Override
-          public void postClose(SolrCore core) {
-            File dataDir = new File(core.getDataDir());
             try {
-              FileUtils.deleteDirectory(dataDir);
-            } catch (IOException e) {
-              SolrException.log(log, "Failed to delete data dir for core:"
-                  + core.getName() + " dir:" + dataDir.getAbsolutePath());
-            }
+          core.getDirectoryFactory().remove(core.getDataDir(), true);
+        } catch (Exception e) {
+          SolrException.log(log, "Failed to flag data dir for removal for core:"
+                  + core.getName() + " dir:" + core.getDataDir());
           }
-        });
       }
       
       if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.java
index 6d426b3c..29931669 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.java
@@ -146,6 +146,12 @@ public void run() {
                 if (random.nextBoolean()) {
                   df.doneWithDirectory(tracker.dir);
                 }
+                if (random.nextBoolean()) {
+                  df.remove(tracker.dir);
+                }
+                if (random.nextBoolean()) {
+                  df.remove(tracker.path);
+                }
                 tracker.refCnt.decrementAndGet();
                 df.release(tracker.dir);
               }
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java b/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java
index f0f690a5..2c6d5cee 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java
@@ -349,6 +349,7 @@ public SolrParams getParams() {
 
   public static class Unload extends CoreAdminRequest {
     protected boolean deleteIndex;
+    private boolean deleteDataDir;
 
     public Unload(boolean deleteIndex) {
       action = CoreAdminAction.UNLOAD;
@@ -363,12 +364,18 @@ public void setDeleteIndex(boolean deleteIndex) {
       this.deleteIndex = deleteIndex;
     }
 
+    public void setDeleteDataDir(boolean deleteDataDir) {
+     this.deleteDataDir = deleteDataDir; 
+    }
+
     @Override
     public SolrParams getParams() {
       ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();
       params.set(CoreAdminParams.DELETE_INDEX, deleteIndex);
+      params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);
       return params;
     }
+
   }
 
   public CoreAdminRequest()
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java b/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java
index f1dd74d9..bedbae14 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java
@@ -21,9 +21,9 @@
 
 import java.io.File;
 
-import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.client.solrj.request.AbstractUpdateRequest.ACTION;
 import org.apache.solr.client.solrj.request.CoreAdminRequest;
+import org.apache.solr.client.solrj.request.CoreAdminRequest.Unload;
 import org.apache.solr.client.solrj.request.QueryRequest;
 import org.apache.solr.client.solrj.request.UpdateRequest;
 import org.apache.solr.client.solrj.response.CoreAdminResponse;
@@ -46,6 +46,7 @@
   protected static CoreContainer cores;
 
   private File dataDir2;
+  private File dataDir1;
 
   @Override public String getSolrHome() { return ExternalPaths.EXAMPLE_MULTICORE_HOME; }
 
@@ -66,11 +67,15 @@ public static void afterClass() {
     SolrCore.log.info("CORES=" + cores + " : " + cores.getCoreNames());
     cores.setPersistent(false);
     
+    dataDir1 = new File(TEMP_DIR, getClass().getName() + "-core0-"
+        + System.currentTimeMillis());
+    dataDir1.mkdirs();
+    
     dataDir2 = new File(TEMP_DIR, getClass().getName() + "-core1-"
         + System.currentTimeMillis());
     dataDir2.mkdirs();
     
-    System.setProperty( "solr.core0.data.dir", SolrTestCaseJ4.dataDir.getCanonicalPath() ); 
+    System.setProperty( "solr.core0.data.dir", this.dataDir1.getCanonicalPath() ); 
     System.setProperty( "solr.core1.data.dir", this.dataDir2.getCanonicalPath() ); 
   }
   
@@ -221,13 +226,24 @@ public void testMultiCore() throws Exception
     String indexDir = (String) ((NamedList<Object>) coreInfo.get("directory")).get("index");
     
     
+    response = getSolrCore("core0").query(new SolrQuery().setRequestHandler("/admin/system")).getResponse();
+    coreInfo = (NamedList<Object>) response.get("core");
+    String dataDir = (String) ((NamedList<Object>) coreInfo.get("directory")).get("data");
 
-    System.out.println( (String) ((NamedList<Object>) coreInfo.get("directory")).get("dirimpl"));
 
+    System.out.println( (String) ((NamedList<Object>) coreInfo.get("directory")).get("dirimpl"));
     
     // test delete index on core
     CoreAdminRequest.unloadCore("corefoo", true, coreadmin);
     File dir = new File(indexDir);
     assertFalse("Index directory exists after core unload with deleteIndex=true", dir.exists());
+    
+    Unload req = new Unload(false);
+    req.setDeleteDataDir(true);
+    req.setCoreName("core0");
+    req.process(coreadmin);
+    
+    dir = new File(dataDir);
+    assertFalse("Data directory exists after core unload with deleteDataDir=true : " + dir, dir.exists());
   }
 }
