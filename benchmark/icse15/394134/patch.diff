diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
index b1b3df98..0d2d84ac 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
@@ -554,6 +554,17 @@ public synchronized void start(Xid xid, int flags) throws XAException {
             connectionClosedFailure();
         }
 
+        // DERBY-1025 - Flow an auto-commit if in auto-commit mode before 
+        // entering a global transaction
+        try {
+        	if(conn_.autoCommit_)
+        		conn_.flowAutoCommit();
+        } catch (SqlException sqle) {
+        	rc = XAException.XAER_RMERR;
+            exceptionsOnXA = org.apache.derby.client.am.Utils.accumulateSQLException
+                    (sqle, exceptionsOnXA);
+        } 
+
         // update the XACallInfo
         NetXACallInfo callInfo = callInfoArray_[conn_.currXACallInfoOffset_];
         callInfo.xaFlags_ = flags;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
index ce4482a8..ef57e52e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
@@ -904,16 +904,15 @@ private static void derby966(XADataSource xads)
             rs.next(); System.out.println("BGBC " + rs.getInt(1));
             conn.commit();
             rs.next(); System.out.println("BGAC " + rs.getInt(1));
+            rs.close();
+           
+            // ensure a transaction is active to test DERBY-1025
+            rs = sdh.executeQuery("SELECT * FROM APP.FOO");
             
             // This switch to global is ok because conn
             // is in auto-commit mode, thus the start performs
             // an implicit commit to complete the local transaction.
             
-            // DERBY-1025 Client only bug
-            if (TestUtil.isDerbyNetClientFramework()) {
-                System.out.println("DERBY-1025 Call conn.commit to avoid exception with client");
-                conn.commit();
-            }
             System.out.println("START GLOBAL TRANSACTION");
             // start a global xact and test those statements.
             xar.start(xid, XAResource.TMNOFLAGS);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index 9a0f147c..f03a89e5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -88,14 +88,6 @@
 	// Tests for setting isolation level this way only run in embedded for now.
 	private boolean canSetIsolationWithStatement = TestUtil.isEmbeddedFramework();
 	  
-	 	
-	// DERBY-1025 client  XAResource.start() does not commit an active local transaction 
-	// when auto commit is true. Embedded XAResource.start() implementation commits 
-	// the active local transaction on the Connection associated with the XAResource.
-	// Client incorrectly throws an error.
-	// run only for embedded for now.
-	private static boolean autocommitCommitsOnXa_Start =TestUtil.isEmbeddedFramework();
-	
 	//	 DERBY-1148 - Client Connection state does not
 	// get set properly when joining a global transaction.
 	private static boolean isolationSetProperlyOnJoin = TestUtil.isEmbeddedFramework();
@@ -625,8 +617,6 @@ protected void runTest(String[] args) throws Exception {
 		conn3.close();
 		xac3.close();
 
-		if (autocommitCommitsOnXa_Start)
-		{
 			// test that an xastart in auto commit mode commits the existing work.(beetle 5178)
 			XAConnection xac4 = dsx.getXAConnection();
 			Xid xid4a = new cdsXid(4, (byte) 23, (byte) 76);
@@ -668,7 +658,6 @@ protected void runTest(String[] args) throws Exception {
 			conn4.close();
 			xac4.close();
 		
-		}
 
 		// test jira-derby 95 - a NullPointerException was returned when passing
 		// an incorrect database name (a url in this case) - should now give error XCY00
