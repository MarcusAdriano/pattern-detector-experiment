diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
index bc8655df..26f8050c 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
@@ -63,6 +63,7 @@
   private static final TField READ_REPAIR_CHANCE_FIELD_DESC = new TField("read_repair_chance", TType.DOUBLE, (short)12);
   private static final TField COLUMN_METADATA_FIELD_DESC = new TField("column_metadata", TType.LIST, (short)13);
   private static final TField GC_GRACE_SECONDS_FIELD_DESC = new TField("gc_grace_seconds", TType.I32, (short)14);
+  private static final TField DEFAULT_VALIDATION_CLASS_FIELD_DESC = new TField("default_validation_class", TType.STRING, (short)15);
 
   public String keyspace;
   public String name;
@@ -78,6 +79,7 @@
   public double read_repair_chance;
   public List<ColumnDef> column_metadata;
   public int gc_grace_seconds;
+  public String default_validation_class;
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements TFieldIdEnum {
@@ -94,7 +96,8 @@
     KEY_CACHE_SIZE((short)11, "key_cache_size"),
     READ_REPAIR_CHANCE((short)12, "read_repair_chance"),
     COLUMN_METADATA((short)13, "column_metadata"),
-    GC_GRACE_SECONDS((short)14, "gc_grace_seconds");
+    GC_GRACE_SECONDS((short)14, "gc_grace_seconds"),
+    DEFAULT_VALIDATION_CLASS((short)15, "default_validation_class");
 
     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -137,6 +140,8 @@ public static _Fields findByThriftId(int fieldId) {
           return COLUMN_METADATA;
         case 14: // GC_GRACE_SECONDS
           return GC_GRACE_SECONDS;
+        case 15: // DEFAULT_VALIDATION_CLASS
+          return DEFAULT_VALIDATION_CLASS;
         default:
           return null;
       }
@@ -216,6 +221,8 @@ public String getFieldName() {
             new StructMetaData(TType.STRUCT, ColumnDef.class))));
     tmpMap.put(_Fields.GC_GRACE_SECONDS, new FieldMetaData("gc_grace_seconds", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.I32)));
+    tmpMap.put(_Fields.DEFAULT_VALIDATION_CLASS, new FieldMetaData("default_validation_class", TFieldRequirementType.OPTIONAL, 
+        new FieldValueMetaData(TType.STRING)));
     metaDataMap = Collections.unmodifiableMap(tmpMap);
     FieldMetaData.addStructMetaDataMap(CfDef.class, metaDataMap);
   }
@@ -294,6 +301,9 @@ public CfDef(CfDef other) {
       this.column_metadata = __this__column_metadata;
     }
     this.gc_grace_seconds = other.gc_grace_seconds;
+    if (other.isSetDefault_validation_class()) {
+      this.default_validation_class = other.default_validation_class;
+    }
   }
 
   public CfDef deepCopy() {
@@ -651,6 +661,30 @@ public void setGc_grace_secondsIsSet(boolean value) {
     __isset_bit_vector.set(__GC_GRACE_SECONDS_ISSET_ID, value);
   }
 
+  public String getDefault_validation_class() {
+    return this.default_validation_class;
+  }
+
+  public CfDef setDefault_validation_class(String default_validation_class) {
+    this.default_validation_class = default_validation_class;
+    return this;
+  }
+
+  public void unsetDefault_validation_class() {
+    this.default_validation_class = null;
+  }
+
+  /** Returns true if field default_validation_class is set (has been asigned a value) and false otherwise */
+  public boolean isSetDefault_validation_class() {
+    return this.default_validation_class != null;
+  }
+
+  public void setDefault_validation_classIsSet(boolean value) {
+    if (!value) {
+      this.default_validation_class = null;
+    }
+  }
+
   public void setFieldValue(_Fields field, Object value) {
     switch (field) {
     case KEYSPACE:
@@ -765,6 +799,14 @@ public void setFieldValue(_Fields field, Object value) {
       }
       break;
 
+    case DEFAULT_VALIDATION_CLASS:
+      if (value == null) {
+        unsetDefault_validation_class();
+      } else {
+        setDefault_validation_class((String)value);
+      }
+      break;
+
     }
   }
 
@@ -816,6 +858,9 @@ public Object getFieldValue(_Fields field) {
     case GC_GRACE_SECONDS:
       return new Integer(getGc_grace_seconds());
 
+    case DEFAULT_VALIDATION_CLASS:
+      return getDefault_validation_class();
+
     }
     throw new IllegalStateException();
   }
@@ -855,6 +900,8 @@ public boolean isSet(_Fields field) {
       return isSetColumn_metadata();
     case GC_GRACE_SECONDS:
       return isSetGc_grace_seconds();
+    case DEFAULT_VALIDATION_CLASS:
+      return isSetDefault_validation_class();
     }
     throw new IllegalStateException();
   }
@@ -1002,6 +1049,15 @@ public boolean equals(CfDef that) {
         return false;
     }
 
+    boolean this_present_default_validation_class = true && this.isSetDefault_validation_class();
+    boolean that_present_default_validation_class = true && that.isSetDefault_validation_class();
+    if (this_present_default_validation_class || that_present_default_validation_class) {
+      if (!(this_present_default_validation_class && that_present_default_validation_class))
+        return false;
+      if (!this.default_validation_class.equals(that.default_validation_class))
+        return false;
+    }
+
     return true;
   }
 
@@ -1144,6 +1200,15 @@ public int compareTo(CfDef other) {
         return lastComparison;
       }
     }
+    lastComparison = Boolean.valueOf(isSetDefault_validation_class()).compareTo(typedOther.isSetDefault_validation_class());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetDefault_validation_class()) {      lastComparison = TBaseHelper.compareTo(this.default_validation_class, typedOther.default_validation_class);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
     return 0;
   }
 
@@ -1271,6 +1336,13 @@ public void read(TProtocol iprot) throws TException {
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
+        case 15: // DEFAULT_VALIDATION_CLASS
+          if (field.type == TType.STRING) {
+            this.default_validation_class = iprot.readString();
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
         default:
           TProtocolUtil.skip(iprot, field.type);
       }
@@ -1377,6 +1449,13 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeI32(this.gc_grace_seconds);
       oprot.writeFieldEnd();
     }
+    if (this.default_validation_class != null) {
+      if (isSetDefault_validation_class()) {
+        oprot.writeFieldBegin(DEFAULT_VALIDATION_CLASS_FIELD_DESC);
+        oprot.writeString(this.default_validation_class);
+        oprot.writeFieldEnd();
+      }
+    }
     oprot.writeFieldStop();
     oprot.writeStructEnd();
   }
@@ -1501,6 +1580,16 @@ public String toString() {
       sb.append(this.gc_grace_seconds);
       first = false;
     }
+    if (isSetDefault_validation_class()) {
+      if (!first) sb.append(", ");
+      sb.append("default_validation_class:");
+      if (this.default_validation_class == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.default_validation_class);
+      }
+      first = false;
+    }
     sb.append(")");
     return sb.toString();
   }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
index aa06f087..e4e32d60 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
@@ -42,6 +42,6 @@
 
 public class Constants {
 
-  public static final String VERSION = "12.0.0";
+  public static final String VERSION = "12.1.0";
 
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
index 478caebb..cd5ab732 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
@@ -648,10 +648,11 @@ public Void system_add_keyspace(KsDef ksDef) throws AvroRemoteException, Invalid
             Collection<CFMetaData> cfDefs = new ArrayList<CFMetaData>((int)ksDef.cf_defs.size());
             for (CfDef cfDef : ksDef.cf_defs)
             {
-                String cfType, compare, subCompare, reconcilerName;
+                String cfType, compare, subCompare, reconcilerName, validate;
                 cfType = cfDef.column_type == null ? D_CF_CFTYPE : cfDef.column_type.toString();
                 ClockType clockType = ClockType.create(cfDef.clock_type == null ? D_CF_CFCLOCKTYPE : cfDef.clock_type.toString());
                 compare = cfDef.comparator_type == null ? D_CF_COMPTYPE : cfDef.comparator_type.toString();
+                validate = cfDef.default_validation_class == null ? D_CF_COMPTYPE : cfDef.default_validation_class.toString();
                 subCompare = cfDef.subcomparator_type == null ? D_CF_SUBCOMPTYPE : cfDef.subcomparator_type.toString();
                 reconcilerName = cfDef.reconciler == null  ? D_CF_RECONCILER : cfDef.reconciler.toString();
                 
@@ -681,6 +682,7 @@ public Void system_add_keyspace(KsDef ksDef) throws AvroRemoteException, Invalid
                                                    cfDef.key_cache_size == null ? CFMetaData.DEFAULT_KEY_CACHE_SIZE : cfDef.key_cache_size,
                                                    cfDef.read_repair_chance == null ? CFMetaData.DEFAULT_READ_REPAIR_CHANCE : cfDef.read_repair_chance,
                                                    cfDef.gc_grace_seconds == null ? CFMetaData.DEFAULT_GC_GRACE_SECONDS : cfDef.gc_grace_seconds,
+                                                   DatabaseDescriptor.getComparator(validate),
                                                    Collections.<byte[], ColumnDefinition>emptyMap());
                 cfDefs.add(cfmeta);
             }
@@ -820,6 +822,7 @@ private CFMetaData convertToCFMetaData(CfDef cf_def) throws InvalidRequestExcept
         String cfType = cf_def.column_type == null ? D_CF_CFTYPE : cf_def.column_type.toString();
         ClockType clockType = ClockType.create(cf_def.clock_type == null ? D_CF_CFCLOCKTYPE : cf_def.clock_type.toString());
         String compare = cf_def.comparator_type == null ? D_CF_COMPTYPE : cf_def.comparator_type.toString();
+        String validate = cf_def.default_validation_class == null ? D_CF_COMPTYPE : cf_def.default_validation_class.toString();
         String subCompare = cf_def.subcomparator_type == null ? D_CF_SUBCOMPTYPE : cf_def.subcomparator_type.toString();
         String reconcilerName = cf_def.reconciler == null  ? D_CF_RECONCILER : cf_def.reconciler.toString();
         
@@ -845,6 +848,7 @@ private CFMetaData convertToCFMetaData(CfDef cf_def) throws InvalidRequestExcept
                               cf_def.key_cache_size == null ? CFMetaData.DEFAULT_KEY_CACHE_SIZE : cf_def.key_cache_size,
                               cf_def.read_repair_chance == null ? CFMetaData.DEFAULT_READ_REPAIR_CHANCE : cf_def.read_repair_chance,
                               cf_def.gc_grace_seconds != null ? cf_def.gc_grace_seconds : CFMetaData.DEFAULT_GC_GRACE_SECONDS,
+                              DatabaseDescriptor.getComparator(validate),
                               ColumnDefinition.fromColumnDefs((Iterable<ColumnDef>) cf_def.column_metadata));
     }
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index 3623a5a9..e586698e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -79,6 +79,7 @@ private static CFMetaData newSystemTable(String cfName, int cfId, String comment
                               0.01,
                               0,
                               0,
+                              BytesType.instance,
                               cfId,
                               Collections.<byte[], ColumnDefinition>emptyMap());
     }
@@ -136,6 +137,7 @@ public static final void fixMaxId()
     public final Integer cfId;
     public boolean preloadRowCache;
     public final int gcGraceSeconds; // default 864000 (ten days)
+    public final AbstractType defaultValidator; // values are longs, strings, bytes (no-op)...
 
     public final Map<byte[], ColumnDefinition> column_metadata;
 
@@ -152,6 +154,7 @@ private CFMetaData(String tableName,
                        double keyCacheSize,
                        double readRepairChance,
                        int gcGraceSeconds,
+                       AbstractType defaultValidator,
                        Integer cfId,
                        Map<byte[], ColumnDefinition> column_metadata)
     {
@@ -171,6 +174,7 @@ private CFMetaData(String tableName,
         this.keyCacheSize = keyCacheSize;
         this.readRepairChance = readRepairChance;
         this.gcGraceSeconds = gcGraceSeconds;
+        this.defaultValidator = defaultValidator;
         this.cfId = cfId;
         this.column_metadata = Collections.unmodifiableMap(column_metadata);
     }
@@ -187,22 +191,22 @@ public static void map(CFMetaData cfm) throws ConfigurationException
         }
     }
 
-    public CFMetaData(String tableName, String cfName, ColumnFamilyType cfType, ClockType clockType, AbstractType comparator, AbstractType subcolumnComparator, AbstractReconciler reconciler, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance, int gcGraceSeconds, Map<byte[], ColumnDefinition> column_metadata)
+    public CFMetaData(String tableName, String cfName, ColumnFamilyType cfType, ClockType clockType, AbstractType comparator, AbstractType subcolumnComparator, AbstractReconciler reconciler, String comment, double rowCacheSize, boolean preloadRowCache, double keyCacheSize, double readRepairChance, int gcGraceSeconds, AbstractType defaultvalidator, Map<byte[], ColumnDefinition> column_metadata)
     {
-        this(tableName, cfName, cfType, clockType, comparator, subcolumnComparator, reconciler, comment, rowCacheSize, preloadRowCache, keyCacheSize, readRepairChance, gcGraceSeconds, nextId(), column_metadata);
+        this(tableName, cfName, cfType, clockType, comparator, subcolumnComparator, reconciler, comment, rowCacheSize, preloadRowCache, keyCacheSize, readRepairChance, gcGraceSeconds, defaultvalidator, nextId(), column_metadata);
     }
 
     /** clones an existing CFMetaData using the same id. */
     public static CFMetaData rename(CFMetaData cfm, String newName)
     {
-        CFMetaData newCfm = new CFMetaData(cfm.tableName, newName, cfm.cfType, cfm.clockType, cfm.comparator, cfm.subcolumnComparator, cfm.reconciler, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.gcGraceSeconds, cfm.cfId, cfm.column_metadata);
+        CFMetaData newCfm = new CFMetaData(cfm.tableName, newName, cfm.cfType, cfm.clockType, cfm.comparator, cfm.subcolumnComparator, cfm.reconciler, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.gcGraceSeconds, cfm.defaultValidator, cfm.cfId, cfm.column_metadata);
         return newCfm;
     }
     
     /** clones existing CFMetaData. keeps the id but changes the table name.*/
     public static CFMetaData renameTable(CFMetaData cfm, String tableName)
     {
-        return new CFMetaData(tableName, cfm.cfName, cfm.cfType, cfm.clockType, cfm.comparator, cfm.subcolumnComparator, cfm.reconciler, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.gcGraceSeconds, cfm.cfId, cfm.column_metadata);
+        return new CFMetaData(tableName, cfm.cfName, cfm.cfType, cfm.clockType, cfm.comparator, cfm.subcolumnComparator, cfm.reconciler, cfm.comment, cfm.rowCacheSize, cfm.preloadRowCache, cfm.keyCacheSize, cfm.readRepairChance, cfm.gcGraceSeconds, cfm.defaultValidator, cfm.cfId, cfm.column_metadata);
     }
     
     /** used for evicting cf data out of static tracking collections. */
@@ -238,6 +242,7 @@ public String pretty()
         cf.preload_row_cache = preloadRowCache;
         cf.read_repair_chance = readRepairChance;
         cf.gc_grace_seconds = gcGraceSeconds;
+        cf.default_validation_class = new Utf8(defaultValidator.getClass().getName());
         cf.column_metadata = SerDeUtils.createArray(column_metadata.size(),
                                                     org.apache.cassandra.config.avro.ColumnDef.SCHEMA$);
         for (ColumnDefinition cd : column_metadata.values())
@@ -250,12 +255,14 @@ public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf)
         AbstractType comparator;
         AbstractType subcolumnComparator = null;
         AbstractReconciler reconciler;
+        AbstractType validator;
         try
         {
             comparator = DatabaseDescriptor.getComparator(cf.comparator_type.toString());
             if (cf.subcomparator_type != null)
                 subcolumnComparator = DatabaseDescriptor.getComparator(cf.subcomparator_type.toString());
             reconciler = DatabaseDescriptor.getReconciler(cf.reconciler.toString());
+            validator = DatabaseDescriptor.getComparator(cf.default_validation_class.toString());
         }
         catch (Exception ex)
         {
@@ -268,7 +275,7 @@ public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf)
             ColumnDefinition cd = ColumnDefinition.inflate(cditer.next());
             column_metadata.put(cd.name, cd);
         }
-        return new CFMetaData(cf.keyspace.toString(), cf.name.toString(), ColumnFamilyType.create(cf.column_type.toString()), ClockType.create(cf.clock_type.toString()), comparator, subcolumnComparator, reconciler, cf.comment.toString(), cf.row_cache_size, cf.preload_row_cache, cf.key_cache_size, cf.read_repair_chance, cf.gc_grace_seconds, cf.id, column_metadata);
+        return new CFMetaData(cf.keyspace.toString(), cf.name.toString(), ColumnFamilyType.create(cf.column_type.toString()), ClockType.create(cf.clock_type.toString()), comparator, subcolumnComparator, reconciler, cf.comment.toString(), cf.row_cache_size, cf.preload_row_cache, cf.key_cache_size, cf.read_repair_chance, cf.gc_grace_seconds, validator, cf.id, column_metadata);
     }
 
     public boolean equals(Object obj) 
@@ -328,9 +335,10 @@ private static int nextId()
 
     public AbstractType getValueValidator(byte[] column)
     {
+        AbstractType validator = defaultValidator;
         ColumnDefinition columnDefinition = column_metadata.get(column);
-        if (columnDefinition == null)
-            return null;
-        return columnDefinition.validator;
+        if (columnDefinition != null)
+            validator = columnDefinition.validator;
+        return validator;
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 25383873..00bd0d10 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -583,9 +583,11 @@ public boolean accept(File pathname)
                     throw new ConfigurationException("ColumnFamily name contains invalid characters.");
                 }
                 
-                // Parse out the column comparator
+                // Parse out the column comparators and validators
                 AbstractType comparator = getComparator(cf.compare_with);
                 AbstractType subcolumnComparator = null;
+                AbstractType default_validator = getComparator(cf.default_validation_class);
+
                 ColumnFamilyType cfType = cf.column_type == null ? ColumnFamilyType.Standard : cf.column_type;
                 if (cfType == ColumnFamilyType.Super)
                 {
@@ -639,6 +641,7 @@ else if (cf.compare_subcolumns_with != null)
                                              cf.keys_cached, 
                                              cf.read_repair_chance,
                                              cf.gc_grace_seconds,
+                                             default_validator,
                                              metadata);
             }
             defs.add(new KSMetaData(keyspace.name,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
index 77c8c559..b57bdd37 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
@@ -44,5 +44,6 @@
     public double read_repair_chance = CFMetaData.DEFAULT_READ_REPAIR_CHANCE;
     public boolean preload_row_cache = CFMetaData.DEFAULT_PRELOAD_ROW_CACHE;
     public int gc_grace_seconds = CFMetaData.DEFAULT_GC_GRACE_SECONDS;
+    public String default_validation_class;
     public RawColumnDefinition[] column_metadata = new RawColumnDefinition[0];
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 5c73a3ab..ebccf584 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -215,6 +215,7 @@ private ColumnFamilyStore(String table, String columnFamilyName, IPartitioner pa
                                                           0,
                                                           0,
                                                           CFMetaData.DEFAULT_GC_GRACE_SECONDS,
+                                                          BytesType.instance,
                                                           Collections.<byte[], ColumnDefinition>emptyMap());
             ColumnFamilyStore indexedCfs = ColumnFamilyStore.createColumnFamilyStore(table, 
                                                                                      indexedCfName,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 0d8bb7de..c284d836 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -968,6 +968,7 @@ private CFMetaData convertToCFMetaData(CfDef cf_def) throws InvalidRequestExcept
                               cf_def.key_cache_size,
                               cf_def.read_repair_chance,
                               cf_def.isSetGc_grace_seconds() ? cf_def.gc_grace_seconds : CFMetaData.DEFAULT_GC_GRACE_SECONDS,
+                              DatabaseDescriptor.getComparator(cf_def.default_validation_class),
                               ColumnDefinition.fromColumnDef(cf_def.column_metadata));
     }
 
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index c5dc31d5..f3d3c646 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -81,7 +81,7 @@ public void saveAndRestore() throws IOException
     @Test
     public void addNewCfToBogusTable() throws InterruptedException
     {
-        CFMetaData newCf = new CFMetaData("MadeUpKeyspace", "NewCF", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "new cf", 0, false, 1.0, 0, 864000, Collections.<byte[], ColumnDefinition>emptyMap());
+        CFMetaData newCf = new CFMetaData("MadeUpKeyspace", "NewCF", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "new cf", 0, false, 1.0, 0, 864000, BytesType.instance, Collections.<byte[], ColumnDefinition>emptyMap());
         try
         {
             new AddColumnFamily(newCf).apply();
@@ -106,7 +106,7 @@ public void testMigrations() throws IOException, ConfigurationException
         assert DatabaseDescriptor.getDefsVersion().equals(prior);
 
         // add a cf.
-        CFMetaData newCf1 = new CFMetaData("Keyspace1", "MigrationCf_1", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "Migration CF ", 0, false, 1.0, 0, 864000, Collections.<byte[], ColumnDefinition>emptyMap());
+        CFMetaData newCf1 = new CFMetaData("Keyspace1", "MigrationCf_1", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "Migration CF ", 0, false, 1.0, 0, 864000, BytesType.instance, Collections.<byte[], ColumnDefinition>emptyMap());
         Migration m1 = new AddColumnFamily(newCf1);
         m1.apply();
         UUID ver1 = m1.getVersion();
@@ -156,7 +156,7 @@ public void addNewCF() throws ConfigurationException, IOException, ExecutionExce
         final String cf = "BrandNewCf";
         KSMetaData original = DatabaseDescriptor.getTableDefinition(ks);
 
-        CFMetaData newCf = new CFMetaData(original.name, cf, ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "A New Column Family", 0, false, 1.0, 0, 864000, Collections.<byte[], ColumnDefinition>emptyMap());
+        CFMetaData newCf = new CFMetaData(original.name, cf, ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "A New Column Family", 0, false, 1.0, 0, 864000, BytesType.instance, Collections.<byte[], ColumnDefinition>emptyMap());
         assert !DatabaseDescriptor.getTableDefinition(ks).cfMetaData().containsKey(newCf.cfName);
         new AddColumnFamily(newCf).apply();
 
@@ -271,7 +271,7 @@ public void renameCf() throws ConfigurationException, IOException, ExecutionExce
     public void addNewKS() throws ConfigurationException, IOException, ExecutionException, InterruptedException
     {
         DecoratedKey dk = Util.dk("key0");
-        CFMetaData newCf = new CFMetaData("NewKeyspace1", "AddedStandard1", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "A new cf for a new ks", 0, false, 1.0, 0, 864000, Collections.<byte[], ColumnDefinition>emptyMap());
+        CFMetaData newCf = new CFMetaData("NewKeyspace1", "AddedStandard1", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "A new cf for a new ks", 0, false, 1.0, 0, 864000, BytesType.instance, Collections.<byte[], ColumnDefinition>emptyMap());
         KSMetaData newKs = new KSMetaData(newCf.tableName, SimpleStrategy.class, null, 5, newCf);
         
         new AddKeyspace(newKs).apply();
@@ -429,7 +429,7 @@ public void createEmptyKsAddNewCf() throws ConfigurationException, IOException,
         new AddKeyspace(newKs).apply();
         assert DatabaseDescriptor.getTableDefinition("EmptyKeyspace") != null;
 
-        CFMetaData newCf = new CFMetaData("EmptyKeyspace", "AddedLater", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "A new CF to add to an empty KS", 0, false, 1.0, 0, 864000, Collections.<byte[], ColumnDefinition>emptyMap());
+        CFMetaData newCf = new CFMetaData("EmptyKeyspace", "AddedLater", ColumnFamilyType.Standard, ClockType.Timestamp, UTF8Type.instance, null, TimestampReconciler.instance, "A new CF to add to an empty KS", 0, false, 1.0, 0, 864000, BytesType.instance, Collections.<byte[], ColumnDefinition>emptyMap());
 
         //should not exist until apply
         assert !DatabaseDescriptor.getTableDefinition(newKs.name).cfMetaData().containsKey(newCf.cfName);
