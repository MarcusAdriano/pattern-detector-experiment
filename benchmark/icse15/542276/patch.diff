diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
index 98251f68..e0c1b0e9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
@@ -55,16 +55,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 
 /**
- * This node represents a like comparison operator (no escape)
-
+    This node represents a like comparison operator (no escape)
 
 	If the like pattern is a constant or a parameter then if possible
 	the like is modified to include a >= and < operator. In some cases
-	the like can be eliminated.
+    the like can be eliminated.  By adding =, >= or < operators it may
+    allow indexes to be used to greatly narrow the search range of the
+    query, and allow optimizer to estimate number of rows to affected.
 
 
-	constant or parameter LIKE pattern with prefix followed by optional wild card
-	e.g. Derby%
+    constant or parameter LIKE pattern with prefix followed by optional wild 
+    card e.g. Derby%
 
 	CHAR(n), VARCHAR(n) where n < 255
 
@@ -82,7 +83,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		no elimination of like
 
 
-	parameter like pattern starts with wild card
+    parameter like pattern starts with wild card e.g. %Derby
 
 		CHAR(n), VARCHAR(n) where n <= 256
 
@@ -93,32 +94,25 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	CHAR(n), VARCHAR(n), LONG VARCHAR where n > 256
 
-
 		>= NULL
 
 		<= '\uffff'
 	
 	    
-	Note that the Unicode value is '\uffff' is defined as not a character value
+    Note that the Unicode value '\uffff' is defined as not a character value
 	and can be used by a program for any purpose. We use it to set an upper
 	bound on a character range with a less than predicate. We only need a single
 	'\uffff' appended because the string 'Derby\uffff\uffff' is not a valid
 	String because '\uffff' is not a valid character.
 		
-
-
-
-	
-
-		
-
-
- *
- * 		converted to TernaryOperatorNode by been
- */
+**/
 
 public final class LikeEscapeOperatorNode extends TernaryOperatorNode
 {
+    /**************************************************************************
+    * Fields of the class
+    **************************************************************************
+    */
 	boolean addedEquals;
 	String escape;
 
@@ -127,22 +121,25 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 *	receiver like pattern [ escape escapeValue ]
 	 *
-	 * @param receiver   		The left operand of the like, column, CharConstant or Parameter
-	 * @param leftOperand		The right operand of the like, the pattern
+     * @param receiver   		The left operand of the like: 
+     *                              column, CharConstant or Parameter
+     * @param leftOperand		The right operand of the like: the pattern
 	 * @param rightOperand		The optional escape clause, null if not present
 	 */
-
 	public void init(
 			Object receiver,
 			Object leftOperand,
 			Object rightOperand)
 	{
 		/* By convention, the method name for the like operator is "like" */
-		// super.init(leftOperand, rightOperand, new Integer(LIKE), null, null);
-		super.init(receiver, leftOperand, rightOperand, ReuseFactory.getInteger(TernaryOperatorNode.LIKE), null); 
+        super.init(
+            receiver, leftOperand, rightOperand, 
+            ReuseFactory.getInteger(TernaryOperatorNode.LIKE), null); 
 	}
 
 	/**
+     * implement binding for like expressions.
+     * <p>
 	 * overrides BindOperatorNode.bindExpression because like has special
 	 * requirements for parameter binding.
 	 *
@@ -150,7 +147,9 @@ public void init(
 	 *
 	 * @exception StandardException thrown on failure
 	 */
-	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
+    public ValueNode bindExpression(
+    FromList        fromList, 
+    SubqueryList    subqueryList,
 		Vector	aggregateVector) 
 			throws StandardException
 	{
@@ -160,41 +159,45 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 
 		// pattern must be a string or a parameter
 
-		if (!(leftOperand.requiresTypeFromContext()) && !(leftOperand.getTypeId().isStringTypeId()))
-			throw StandardException.newException(SQLState.LANG_DB2_FUNCTION_INCOMPATIBLE,
-													 "LIKE", "FUNCTION");
+        if (!(leftOperand.requiresTypeFromContext()) && 
+             !(leftOperand.getTypeId().isStringTypeId()))
+        {
+            throw StandardException.newException(
+                SQLState.LANG_DB2_FUNCTION_INCOMPATIBLE, "LIKE", "FUNCTION");
+        }
 
 		// escape must be a string or a parameter
 		if ((rightOperand != null) && 
 			!(rightOperand.requiresTypeFromContext()) && 
 			!(rightOperand.getTypeId().isStringTypeId()))
 		{
-			throw StandardException.newException(SQLState.LANG_DB2_FUNCTION_INCOMPATIBLE,
-										 "LIKE", "FUNCTION");
+            throw StandardException.newException(
+                SQLState.LANG_DB2_FUNCTION_INCOMPATIBLE, "LIKE", "FUNCTION");
 		}
 
 		// deal with operand parameters
 
 		/* 
-		 *  Is there a ? parameter on the left?
+        *  Is there a ? parameter on the left? ie. "? like 'Derby'"
+        *
 		 *  Do left first because its length is always maximum;
 		 *  a parameter on the right copies its length from
 		 *  the left, since it won't match if it is any longer than it.
 		 */
-
 		if (receiver.requiresTypeFromContext())
 		{
 			receiver.setType(
-							new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), true));
+                new DataTypeDescriptor(
+                    TypeId.getBuiltInTypeId(Types.VARCHAR), true));
 		}
 
 		/* 
-		 *  Is there a ? parameter for the PATTERN of LIKE?
+         *  Is there a ? parameter for the PATTERN of LIKE? ie. "column like ?"
+         *  
 		 *  Copy from the receiver -- legal if both are parameters,
 		 *  both will be max length.
 		 *  REMIND: should nullability be copied, or set to true?
 		 */
-
 		if (leftOperand.requiresTypeFromContext())
 		{
 			/*
@@ -208,7 +211,8 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 			else
 			{
 				leftOperand.setType(
-							new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), true));
+                    new DataTypeDescriptor(
+                        TypeId.getBuiltInTypeId(Types.VARCHAR), true));
 			}
 		}
 
@@ -231,7 +235,8 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 			else
 			{
 				rightOperand.setType(
-							new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), true));
+                    new DataTypeDescriptor(
+                        TypeId.getBuiltInTypeId(Types.VARCHAR), true));
 			}
 		}
 
@@ -244,14 +249,14 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 		 */
 		if (! receiver.getTypeId().isStringTypeId())
 		{
-			throw StandardException.newException(SQLState.LANG_DB2_FUNCTION_INCOMPATIBLE, "LIKE", "FUNCTION");
-
+            throw StandardException.newException(
+                SQLState.LANG_DB2_FUNCTION_INCOMPATIBLE, "LIKE", "FUNCTION");
 		}
 
 		/* If either the left or right operands are non-string types,
 		 * then we generate an implicit cast to VARCHAR.
 		 */
-		if (! leftOperand.getTypeId().isStringTypeId())
+        if (!leftOperand.getTypeId().isStringTypeId())
 		{
 			leftOperand = castArgToString(leftOperand);
 			leftTC = leftOperand.getTypeCompiler();
@@ -262,10 +267,10 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 			rightOperand = castArgToString(rightOperand);
 		}
 
-		/* Remember whether or not right side is a string constant.
-		 * We need to remember here so that we can transform 
-		 * LIKE 'constant' into = 'constant' for national char
-		 * columns.
+        /* 
+         * Remember whether or not the right side (the like pattern) is a string 
+         * constant.  We need to remember here so that we can transform LIKE 
+         * 'constant' into = 'constant' for non unicode based collation columns.
 		 */
 		boolean leftConstant = (leftOperand instanceof CharConstantNode);
 		if (leftConstant)
@@ -280,8 +285,8 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 			escape = ((CharConstantNode) rightOperand).getString();
 			if (escape.length() != 1)
 			{
-				throw StandardException.newException(SQLState.LANG_INVALID_ESCAPE_CHARACTER,
-						escape);
+                throw StandardException.newException(
+                    SQLState.LANG_INVALID_ESCAPE_CHARACTER, escape);
 			}
 		}
 		else if (rightOperand == null)
@@ -290,24 +295,27 @@ else if (rightOperand == null)
 			rightConstant = true;
 		}
 
-		/* If the left side of LIKE is a ColumnReference and
-		 * the right side is a string constant without 
-		 * a wildcard then we transform the LIKE into the 
-		 * equivalent LIKE AND =.  
-		 * If we have an escape clause it also must be a constant.
-		 * These types of transformations are normally done 
-		 * at preprocess time, but we make an exception 
-		 * and do this one at bind time because we transform
-		 * a NOT LIKE 'a' into (a LIKE 'a') = false prior to 
+        /* If the left side of LIKE is a ColumnReference and right side is a 
+         * string constant without a wildcard (eg. column LIKE 'Derby') then we 
+         * transform the LIKE into the equivalent LIKE AND =.  
+         * If we have an escape clause it also must be a constant 
+         * (eg. column LIKE 'Derby' ESCAPE '%').
+         *
+         * These types of transformations are normally done at preprocess time, 
+         * but we make an exception and do this one at bind time because we 
+         * transform a NOT LIKE 'a' into (a LIKE 'a') = false prior to 
 		 * preprocessing.
+         *
 		 * The transformed tree will become:
+         *
 		 *			AND
 		 *		   /   \
 		 *	     LIKE   =
 		 */
 
-		if (receiver instanceof ColumnReference &&
-			leftConstant && rightConstant)
+        if ((receiver instanceof ColumnReference) && 
+            leftConstant                          && 
+            rightConstant)
 		{
 			if (Like.isOptimizable(pattern))
 			{
@@ -322,23 +330,30 @@ else if (rightOperand == null)
                 {
                     /* we return a new pattern stripped of ESCAPE chars */
                     newPattern =
-                            Like.stripEscapesNoPatternChars(pattern, escape.charAt(0));
+                        Like.stripEscapesNoPatternChars(
+                            pattern, escape.charAt(0));
                 }
-                else if (pattern.indexOf('_') == -1 && pattern.indexOf('%') == -1)
+                else if (pattern.indexOf('_') == -1 && 
+                         pattern.indexOf('%') == -1)
                 {
+                    // no pattern characters.
                     newPattern = pattern;
                 }
 
                 if (newPattern != null)
 				{
-					AndNode	  newAnd = null;
-					BinaryComparisonOperatorNode equals = null;
+                    // met all conditions, transform LIKE into a "LIKE and ="
+
 					ValueNode leftClone = receiver.getClone();
 
 					// Remember that we did xform, see preprocess()
 					addedEquals = true;
 
-					equals = 
+                    // create equals node of the form (eg. column like 'Derby' :
+                    //       =
+                    //     /   \
+                    //  column  'Derby'
+                    BinaryComparisonOperatorNode equals = 
 						(BinaryComparisonOperatorNode) getNodeFactory().getNode(
 							C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
 							leftClone, 
@@ -350,43 +365,70 @@ else if (pattern.indexOf('_') == -1 && pattern.indexOf('%') == -1)
 
 					// Set forQueryRewrite to bypass comparability checks
 					equals.setForQueryRewrite(true);
-					equals = (BinaryComparisonOperatorNode) equals.bindExpression(fromList, subqueryList, aggregateVector);
 					
-					newAnd = (AndNode) getNodeFactory().getNode(
+                    equals = (BinaryComparisonOperatorNode) 
+                        equals.bindExpression(
+                            fromList, subqueryList, aggregateVector);
+
+                    // create new and node and hook in "equals" the new "=' node
+                    //
+                    //			AND
+                    //		   /   \
+                    //	     LIKE  = 
+                    //	          / \
+                    //	    column  'Derby'
+
+                    AndNode newAnd = 
+                        (AndNode) getNodeFactory().getNode(
 														C_NodeTypes.AND_NODE,
 														this,
 														equals,
 														getContextManager());
+
 					finishBindExpr();
 					newAnd.postBindFixup();
+
 					return newAnd;
 				}
 			}
 		}
 
 		/* If we are comparing a char with a national char then
-		 * we generate a cast above the reciever to force preprocess to
+         * we generate a cast above the receiver to force preprocess to
 		 * not attempt any of the > <= optimizations since there is no
 		 * way to determine the 'next' character for the <= operand.
+         *
+         * TODO-COLLATE - probably need to do something about different 
+         *                collation types here.
 		 */
 
 		TypeId leftTypeId = leftOperand.getTypeId();
 		TypeId receiverTypeId = receiver.getTypeId();
 
-		if (receiverTypeId.isNationalStringTypeId() && ! leftTypeId.isNationalStringTypeId())
+        if (receiverTypeId.isNationalStringTypeId() && 
+            !leftTypeId.isNationalStringTypeId())
 		{
-			receiver = castArgToNationalString(receiver, receiverTC, receiverTypeId);
-		}
-		else if (leftTypeId.isNationalStringTypeId() && ! receiverTypeId.isNationalStringTypeId())
-		{
-			leftOperand = castArgToNationalString(leftOperand, leftTC, leftTypeId);
+            // if column is national column and pattern is not national column
+            receiver = 
+                castArgToNationalString(receiver, receiverTC, receiverTypeId);
+        }
+        else if (leftTypeId.isNationalStringTypeId() && 
+                 !receiverTypeId.isNationalStringTypeId())
+        {
+            // if patern is national column and column is not national column
+            leftOperand = 
+                castArgToNationalString(leftOperand, leftTC, leftTypeId);
 		}
 
 		finishBindExpr();
 
 		return this;
 	}
-	private ValueNode castArgToNationalString(ValueNode vn, TypeCompiler vnTC, TypeId vnTypeId)
+
+    private ValueNode castArgToNationalString(
+    ValueNode       vn, 
+    TypeCompiler    vnTC, 
+    TypeId          vnTypeId)
 		throws StandardException
 	{
 		ValueNode newNode =  (ValueNode)
@@ -395,10 +437,14 @@ private ValueNode castArgToNationalString(ValueNode vn, TypeCompiler vnTC, TypeI
 			vn, 
 			new DataTypeDescriptor(vnTypeId, 
 			true,
-			vnTC.getCastToCharWidth(vn.getTypeServices())), getContextManager());
+                vnTC.getCastToCharWidth(vn.getTypeServices())), 
+                getContextManager());
+
 		((CastNode) newNode).bindCastNodeOnly();
+
 		return newNode;
 	}
+
 	private void finishBindExpr()
 		throws StandardException
 	{
@@ -410,18 +456,15 @@ private void finishBindExpr()
 		*/
 
 		boolean nullableResult =
-			receiver.getTypeServices().isNullable() || leftOperand.getTypeServices().isNullable();
+            receiver.getTypeServices().isNullable() || 
+            leftOperand.getTypeServices().isNullable();
 
 		if (rightOperand != null)
 		{
 			nullableResult |= rightOperand.getTypeServices().isNullable();
 		}
 
-		setType(new DataTypeDescriptor(
-						TypeId.BOOLEAN_ID,
-						nullableResult
-					)
-				);
+        setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, nullableResult));
 	}
 
 	/**
@@ -441,24 +484,24 @@ public void bindComparisonOperator()
 		** string types.
 		*/
 
-		if ( ! receiverType.isStringTypeId())
+        if (!receiverType.isStringTypeId())
 		{
-			throw StandardException.newException(SQLState.LANG_LIKE_BAD_TYPE, 
-												receiverType.getSQLTypeName());
+            throw StandardException.newException(
+                SQLState.LANG_LIKE_BAD_TYPE, receiverType.getSQLTypeName());
 		}
 
-		if (! leftType.isStringTypeId())
+        if (!leftType.isStringTypeId())
 		{
-			throw StandardException.newException(SQLState.LANG_LIKE_BAD_TYPE, 
-												leftType.getSQLTypeName());
+            throw StandardException.newException(
+                SQLState.LANG_LIKE_BAD_TYPE, leftType.getSQLTypeName());
 		}
 
 		if (rightOperand != null && ! rightOperand.getTypeId().isStringTypeId())
 		{
-			throw StandardException.newException(SQLState.LANG_LIKE_BAD_TYPE, 
+            throw StandardException.newException(
+                SQLState.LANG_LIKE_BAD_TYPE, 
 												rightOperand.getTypeId().getSQLTypeName());
 		}
-
 	}
 
 	/**
@@ -476,7 +519,8 @@ public void bindComparisonOperator()
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ValueNode preprocess(int numTables,
+    public ValueNode preprocess(
+    int             numTables,
 								FromList outerFromList,
 								SubqueryList outerSubqueryList,
 								PredicateList outerPredicateList) 
@@ -485,32 +529,31 @@ public ValueNode preprocess(int numTables,
 		boolean eliminateLikeComparison = false;
 		String	greaterEqualString = null;
 		String  lessThanString = null;
-		String  pattern;
 
 		/* We must 1st preprocess the component parts */
-		super.preprocess(numTables,
-						 outerFromList, outerSubqueryList,
-						 outerPredicateList);
+        super.preprocess(
+            numTables, outerFromList, outerSubqueryList, outerPredicateList);
 
-        /* Don't try to optimize for (C)LOB type since it
-         * doesn't allow comparison.
+        /* Don't try to optimize for (C)LOB type since it doesn't allow 
+         * comparison.
+         * RESOLVE: should this check be for LONG VARCHAR also?
          */
-        if (receiver.getTypeId().getSQLTypeName().equals("CLOB")) {
+        if (receiver.getTypeId().getSQLTypeName().equals("CLOB")) 
+        {
             return this;
         }
-		/* No need to consider transformation if we
-		 * already did transformation that added =
-		 * at bind time.
+
+        /* No need to consider transformation if we already did transformation 
+         * that added = * at bind time.
 		 */
 		if (addedEquals)
 		{
 			return this;
 		}
 
-		/* This is where we do the transformation for LIKE to make it optimizable.
-		 * c1 LIKE 'asdf%' -> c1 LIKE 'asdf%' AND c1 >= 'asdf' AND c1 < 'asdg'
-		 * c1 LIKE ? -> c1 LIKE ? and c1 >= ?', where ?' gets calculated at the
-		 * beginning of execution.
+
+        /* if like pattern is not a constant and not a parameter, 
+         * then can't optimize, eg. column LIKE column
 		 */
 		if (!(leftOperand instanceof CharConstantNode) &&
 			!(leftOperand.requiresTypeFromContext()))
@@ -523,43 +566,46 @@ public ValueNode preprocess(int numTables,
 		 */
 		if (!(receiver instanceof ColumnReference))
 		{
-			//
-			// We also do an early return here if in bindExpression we found we had
-			// a National Char and put a CAST above the receiver.
+            // We also do an early return here if in bindExpression we found 
+            // we had a National Char and put a CAST above the receiver.
 			//
 			return this;
 		}
 
+        /* This is where we do the transformation for LIKE to make it 
+         * optimizable.
+         * c1 LIKE 'asdf%' -> c1 LIKE 'asdf%' AND c1 >= 'asdf' AND c1 < 'asdg'
+         * c1 LIKE ?       -> c1 LIKE ? and c1 >= ?
+         *     where ? gets calculated at the beginning of execution.
+         */
 
-		// Build String constants if right side is a constant
+        // Build String constants if right side (pattern) is a constant
 		if (leftOperand instanceof CharConstantNode)
 		{
-			pattern = ((CharConstantNode) leftOperand).getString();
+            String pattern = ((CharConstantNode) leftOperand).getString();
 
-			if (! Like.isOptimizable(pattern))
+            if (!Like.isOptimizable(pattern))
 			{
 				return this;
 			}
 
 			int maxWidth = receiver.getTypeServices().getMaximumWidth();
-			greaterEqualString = Like.greaterEqualString(pattern, escape, 
-														 maxWidth);
-
 
+            greaterEqualString = 
+                Like.greaterEqualString(pattern, escape, maxWidth);
 
 			/* We do not generate the < and we cannot drop the LIKE
 			 * when doing LIKE on a national char column.
 			 */
-            if ( ! receiver.getTypeId().isNationalStringTypeId() )
+            if (!receiver.getTypeId().isNationalStringTypeId())
 			{
-				lessThanString = Like.lessThanString(pattern, escape, maxWidth);
-				eliminateLikeComparison = ! Like.isLikeComparisonNeeded(pattern);
+                lessThanString          = 
+                    Like.lessThanString(pattern, escape, maxWidth);
+                eliminateLikeComparison = 
+                    !Like.isLikeComparisonNeeded(pattern);
 			}
 		}
 
-		//System.out.println(receiver.getTypeServices());
-		//System.out.println("MAX WIDTH " + receiver.getTypeServices().getMaximumWidth());
-
 		/* For some unknown reason we need to clone the receiver if it is
 		 * a ColumnReference because reusing them in Qualifiers for a scan
 		 * does not work.  
@@ -583,29 +629,39 @@ public ValueNode preprocess(int numTables,
 		 */
 
 		AndNode	  newAnd = null;
-        ValueNode trueNode = (ValueNode) getNodeFactory().getNode(
+        ValueNode trueNode = 
+            (ValueNode) getNodeFactory().getNode(
 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
 											Boolean.TRUE,
 											getContextManager());
 
 		/* Create the AND <, if lessThanString is non-null  or 
-		 * leftOperand is a parameter.
-		   Currently for a national string we do not add a < than operator
-		   since we don't know (?) how to calculate such a string.
+         * (leftOperand is a parameter and not a national string).
+         *
+         * Currently for a national string we do not add a < than operator 
+         * since we don't know (?) how to calculate such a string.
 		 */
-		if ( lessThanString != null || ( leftOperand.requiresTypeFromContext() &&
-                                         ! receiver.getTypeId().isNationalStringTypeId() ))
+        if (lessThanString != null || 
+            (leftOperand.requiresTypeFromContext() && 
+             !receiver.getTypeId().isNationalStringTypeId()))
 		{
 			QueryTreeNode likeLTopt;
 			if (leftOperand.requiresTypeFromContext())
 			{
-				int maxWidth = receiver.getTypeServices().getMaximumWidth();
-				likeLTopt = setupOptimizeStringFromParameter(leftOperand, rightOperand,
-								"lessThanStringFromParameter", maxWidth);
+                // pattern string is a parameter 
+
+                likeLTopt = 
+                    setupOptimizeStringFromParameter(
+                        leftOperand, 
+                        rightOperand, 
+                        "lessThanStringFromParameter", 
+                        receiver.getTypeServices().getMaximumWidth());
 			}
 			else
 			{
-				likeLTopt = getNodeFactory().getNode(
+                // pattern string is a constant
+                likeLTopt = 
+                    getNodeFactory().getNode(
 												C_NodeTypes.CHAR_CONSTANT_NODE,
 												lessThanString,
 												getContextManager());
@@ -632,32 +688,44 @@ public ValueNode preprocess(int numTables,
 													lessThan,
 													trueNode,
 													getContextManager());
+
 			newAnd.postBindFixup();
 		}
 
-		/* Create the AND >=.  Right side could
-		 * be a CharConstantNode or a ParameterNode.
+        /* Create the AND >=.  Right side could be a CharConstantNode or a 
+         * ParameterNode.
 		 */
 
 		ValueNode likeGEopt;
-		if (leftOperand.requiresTypeFromContext()) {
+        if (leftOperand.requiresTypeFromContext()) 
+        {
+            // the pattern is a ?, eg. c1 LIKE ?
 
 			// Create an expression off the parameter
 			// new SQLChar(Like.greaterEqualString(?));
 
-			int maxWidth = receiver.getTypeServices().getMaximumWidth();
-			likeGEopt = setupOptimizeStringFromParameter(leftOperand, rightOperand,
-								"greaterEqualStringFromParameter", maxWidth);
-
-		} else {
-
-
-
-			likeGEopt = (ValueNode) getNodeFactory().getNode(C_NodeTypes.CHAR_CONSTANT_NODE,
+            likeGEopt    = 
+                setupOptimizeStringFromParameter(
+                    leftOperand, 
+                    rightOperand, 
+                    "greaterEqualStringFromParameter", 
+                    receiver.getTypeServices().getMaximumWidth());
+        } 
+        else 
+        {
+            // the pattern is a constant, eg. c1 LIKE 'Derby'
+
+            likeGEopt = 
+                (ValueNode) getNodeFactory().getNode(
+                    C_NodeTypes.CHAR_CONSTANT_NODE,
 												greaterEqualString,
 												getContextManager());
 		}
 
+        // greaterEqual from (reciever LIKE pattern):
+        //       >=
+        //      /   \
+        //  reciever pattern
 		BinaryComparisonOperatorNode greaterEqual = 
 				(BinaryComparisonOperatorNode) getNodeFactory().getNode(
 						C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
@@ -693,21 +761,23 @@ public ValueNode preprocess(int numTables,
 		}
 		newAnd.postBindFixup();
 
-		/* Finally, we put a AND LIKE on top of the left deep tree, but
+        /* Finally, we put an AND LIKE on top of the left deep tree, but
 		 * only if it is still necessary.
 	     */
-		if (! eliminateLikeComparison)
+        if (!eliminateLikeComparison)
 		{
-			newAnd = (AndNode) getNodeFactory().getNode(
+            newAnd = (AndNode) 
+                getNodeFactory().getNode(
 													C_NodeTypes.AND_NODE,
 													this,
 													newAnd,
 													getContextManager());
+
 			newAnd.postBindFixup();
 		}
 
 		/* Mark this node as transformed so that we don't get
-		 * calculated into the selectivity mulitple times.
+        * calculated into the selectivity multiple times.
 		 */
 		setTransformed();
 
@@ -726,17 +796,18 @@ public ValueNode preprocess(int numTables,
 	 * @exception StandardException		Thrown on error
 	 */
 
-	public void generateExpression(ExpressionClassBuilder acb,
+    public void generateExpression(
+    ExpressionClassBuilder  acb,
 											MethodBuilder mb)
 		throws StandardException
 	{
 
-/*
-** if i have a operator.getOrderableType() == constant, then just cache 
-** it in a field.  if i have QUERY_INVARIANT, then it would be good to
-** cache it in something that is initialized each execution,
-** but how?
-*/
+        /*
+        ** if i have a operator.getOrderableType() == constant, then just cache 
+        ** it in a field.  if i have QUERY_INVARIANT, then it would be good to
+        ** cache it in something that is initialized each execution,
+        ** but how?
+        */
 
 		/*
 		** let the receiver type be determined by an
@@ -774,14 +845,21 @@ public void generateExpression(ExpressionClassBuilder acb,
 		/* Figure out the result type name */
 		// resultTypeName = getTypeCompiler().interfaceName();
 
-		mb.callMethod(VMOpcode.INVOKEINTERFACE, null,
-			methodName, resultInterfaceType,
+        mb.callMethod(
+            VMOpcode.INVOKEINTERFACE, 
+            null, 
+            methodName, 
+            resultInterfaceType, 
 			rightOperand == null ? 1 : 2);
 	}
 
-	private ValueNode setupOptimizeStringFromParameter(ValueNode parameterNode,
-						ValueNode escapeNode,String methodName, int maxWidth)
-		throws StandardException {
+    private ValueNode setupOptimizeStringFromParameter(
+    ValueNode   parameterNode, 
+    ValueNode   escapeNode,
+    String      methodName, 
+    int         maxWidth)
+        throws StandardException 
+    {
 
 		Vector param;
 
@@ -790,10 +868,14 @@ private ValueNode setupOptimizeStringFromParameter(ValueNode parameterNode,
 			param = new Vector(2);
 			methodName += "WithEsc";
 		}
-		else param = new Vector(1);
+        else
+        {
+            param = new Vector(1);
+        }
 
 		StaticMethodCallNode methodCall = (StaticMethodCallNode)
-						getNodeFactory().getNode(C_NodeTypes.STATIC_METHOD_CALL_NODE,
+            getNodeFactory().getNode(
+                C_NodeTypes.STATIC_METHOD_CALL_NODE,
 											methodName,
 											"org.apache.derby.iapi.types.Like",
 											getContextManager());
@@ -814,7 +896,8 @@ private ValueNode setupOptimizeStringFromParameter(ValueNode parameterNode,
 		methodCall.addParms(param);
 
 
-		ValueNode java2SQL = (ValueNode) getNodeFactory().getNode(
+        ValueNode java2SQL = 
+            (ValueNode) getNodeFactory().getNode(
 									C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
 									methodCall,
 									getContextManager());
