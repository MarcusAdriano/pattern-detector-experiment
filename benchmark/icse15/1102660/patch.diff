diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
index 297ae52c..e6086dae 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
@@ -18,7 +18,8 @@
  */
 package org.apache.aries.jndi;
 
-import java.security.PrivilegedExceptionAction;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.Hashtable;
 
 import javax.naming.Context;
@@ -45,27 +46,19 @@ private ContextHelper() {
         throw new RuntimeException();
     }
 
-    public static ContextProvider createURLContext(final BundleContext context,
-                                           final String urlScheme, 
-                                           final Hashtable<?, ?> env)
-        throws NamingException {
-        return Utils.doPrivilegedNaming(new PrivilegedExceptionAction<ContextProvider>() {
-            public ContextProvider run() throws Exception {
-                return doCreateURLContext(context, urlScheme, env);
-            }
-        });
-    }
-    
     /**
      * This method is used to create a URL Context. It does this by looking for
      * the URL context's ObjectFactory in the service registry.
      * 
+     * @param context
      * @param urlScheme
      * @param env
      * @return a Context
      * @throws NamingException
      */
-    private static ContextProvider doCreateURLContext(BundleContext context, String urlScheme, Hashtable<?, ?> env)
+    public static ContextProvider createURLContext(final BundleContext context,
+                                           final String urlScheme, 
+                                           final Hashtable<?, ?> env)
         throws NamingException {
       
         ServicePair<ObjectFactory> urlObjectFactory = getURLObjectFactory(context, urlScheme, env);
@@ -82,7 +75,7 @@ private static ContextProvider doCreateURLContext(BundleContext context, String
         return null;
     }
     
-    public static final ServicePair<ObjectFactory> getURLObjectFactory(BundleContext ctx, String urlScheme, Hashtable<?, ?> environment)
+    public static final ServicePair<ObjectFactory> getURLObjectFactory(final BundleContext ctx, String urlScheme, Hashtable<?, ?> environment)
       throws NamingException
     {
       ServicePair<ObjectFactory> result = null;
@@ -90,11 +83,16 @@ private static ContextProvider doCreateURLContext(BundleContext context, String
       ServiceReference ref = ServiceTrackerCustomizers.URL_FACTORY_CACHE.find(urlScheme);
       
       if (ref == null) {
-        ServiceReference[] refs = Activator.getURLObectFactoryFinderServices();
+        ServiceReference[] refs = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
+        	public ServiceReference[] run() {
+        		return Activator.getURLObectFactoryFinderServices();
+        	}
+		});        
         
         if (refs != null) {
-          for (ServiceReference finderRef : refs) {
-            URLObjectFactoryFinder finder = (URLObjectFactoryFinder) ctx.getService(finderRef);
+          for (final ServiceReference finderRef : refs) {
+            URLObjectFactoryFinder finder = (URLObjectFactoryFinder) Utils.getServicePrivileged(ctx, finderRef);
+            	
             if (finder != null) {
               ObjectFactory f = finder.findFactory(urlScheme, environment);
               
@@ -130,19 +128,10 @@ public static Context getInitialContext(BundleContext context, Hashtable<?, ?> e
         }
     }
 
-    public static ContextProvider getContextProvider(final BundleContext context,
-                                                     final Hashtable<?, ?> environment)
-        throws NamingException {
-        return Utils.doPrivilegedNaming(new PrivilegedExceptionAction<ContextProvider>() {
-            public ContextProvider run() throws Exception {
-                return doGetContextProvider(context, environment);
-            }
-        });
-    }
-    
-    private static ContextProvider doGetContextProvider(BundleContext context,
+    public static ContextProvider getContextProvider(BundleContext context,
                                                         Hashtable<?, ?> environment)
         throws NamingException {
+    	
         ContextProvider provider = null;
         String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
         if (contextFactoryClass == null) {
@@ -151,11 +140,17 @@ private static ContextProvider doGetContextProvider(BundleContext context,
 
             // 2. lookup all ContextFactory services
             if (provider == null) {
-                ServiceReference[] references = Activator.getInitialContextFactoryServices();
+            	
+            	ServiceReference[] references = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
+					public ServiceReference[] run() {
+						return Activator.getInitialContextFactoryServices();
+					}
+				});
+                
                 if (references != null) {
                     Context initialContext = null;
                     for (ServiceReference reference : references) {
-                        InitialContextFactory factory = (InitialContextFactory) context.getService(reference);
+                        InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, reference);
                         try {
                             initialContext = factory.getInitialContext(environment);
                             if (initialContext != null) {
@@ -173,7 +168,7 @@ private static ContextProvider doGetContextProvider(BundleContext context,
             
             if (ref != null) {
               Context initialContext = null;
-              InitialContextFactory factory = (InitialContextFactory) context.getService(ref);
+              InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, ref);
               if (factory != null) {
                 try {
                     initialContext = factory.getInitialContext(environment);
@@ -196,12 +191,18 @@ private static ContextProvider doGetContextProvider(BundleContext context,
     private static ContextProvider getInitialContextUsingBuilder(BundleContext context,
                                                                  Hashtable<?, ?> environment)
             throws NamingException {
+    	
         ContextProvider provider = null;
-        ServiceReference[] refs = Activator.getInitialContextFactoryBuilderServices();
+        ServiceReference[] refs = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
+			public ServiceReference[] run() {
+				return Activator.getInitialContextFactoryBuilderServices();
+			}        	
+		});
+        	
         if (refs != null) {
             InitialContextFactory factory = null;
             for (ServiceReference ref : refs) {                    
-                InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
+                InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) Utils.getServicePrivileged(context, ref);
                 try {
                   factory = builder.createInitialContextFactory(environment);
                 } catch (NamingException ne) {
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
index 5b322885..d512b086 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
@@ -18,7 +18,6 @@
  */
 package org.apache.aries.jndi;
 
-import java.security.PrivilegedExceptionAction;
 import java.util.Arrays;
 import java.util.Hashtable;
 
@@ -33,7 +32,6 @@
 import javax.naming.spi.ObjectFactoryBuilder;
 
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceReference;
 
 public class DirObjectFactoryHelper extends ObjectFactoryHelper implements DirObjectFactory {
@@ -42,19 +40,7 @@ public DirObjectFactoryHelper(BundleContext defaultContext, BundleContext caller
         super(defaultContext, callerContext);
     }
     
-    public Object getObjectInstance(final Object obj,
-                                    final Name name,
-                                    final Context nameCtx,
-                                    final Hashtable<?, ?> environment,
-                                    final Attributes attrs) throws Exception {
-        return Utils.doPrivileged(new PrivilegedExceptionAction<Object>() {
-            public Object run() throws Exception {
-                return doGetObjectInstance(obj, name, nameCtx, environment, attrs);
-            }            
-        });
-    }
-    
-    private Object doGetObjectInstance(Object obj,
+    public Object getObjectInstance(Object obj,
                                        Name name,
                                        Context nameCtx,
                                        Hashtable<?, ?> environment,
@@ -100,13 +86,13 @@ private Object getObjectInstanceUsingObjectFactories(Object obj,
                                                          Hashtable<?, ?> environment,
                                                          Attributes attrs) 
         throws Exception {
+    	
         Object result = null;
-        try {
-            ServiceReference[] refs = callerContext.getServiceReferences(DirObjectFactory.class.getName(), null);
+        ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, DirObjectFactory.class);
             if (refs != null) {
                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
                 for (ServiceReference ref : refs) {
-                    DirObjectFactory factory = (DirObjectFactory) callerContext.getService(ref);
+        		DirObjectFactory factory = (DirObjectFactory) Utils.getServicePrivileged(callerContext, ref);
 
                     try {
                         result = factory.getObjectInstance(obj, name, nameCtx, environment, attrs);
@@ -122,10 +108,6 @@ private Object getObjectInstanceUsingObjectFactories(Object obj,
                     }
                 }
             }
-        } catch (InvalidSyntaxException e) {
-            // should not happen
-            throw new RuntimeException("Invalid filter", e);
-        }
 
         if (result == null) {
             result = getObjectInstanceUsingObjectFactories(obj, name, nameCtx, environment);
@@ -142,26 +124,15 @@ private Object getObjectInstanceUsingClassName(Object reference,
                                                    Hashtable<?, ?> environment,
                                                    Attributes attrs)
         throws Exception {
-        ServiceReference serviceReference = null;
-
-        try {
-            ServiceReference[] refs = defaultContext.getServiceReferences(className, null);
-            if (refs != null && refs.length > 0) {
-                serviceReference = refs[0];
-            }
-        } catch (InvalidSyntaxException e) {
-            // should not happen
-            throw new RuntimeException("Invalid filter", e);
-        }
 
+        Tuple<ServiceReference, ObjectFactory> tuple = ObjectFactoryHelper.findObjectFactoryByClassName(defaultContext, className);
         Object result = null;
         
-        if (serviceReference != null) {
-            DirObjectFactory factory = (DirObjectFactory) defaultContext.getService(serviceReference);
+        if (tuple.second != null) {
             try {
-                result = factory.getObjectInstance(reference, name, nameCtx, environment, attrs);
+        		result = ((DirObjectFactory) tuple.second).getObjectInstance(reference, name, nameCtx, environment, attrs);
             } finally {
-                defaultContext.ungetService(serviceReference);
+                defaultContext.ungetService(tuple.first);
             }
         }
 
@@ -175,12 +146,11 @@ private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
                                                                Attributes attrs) 
         throws Exception {
         ObjectFactory factory = null;
-        try {
-            ServiceReference[] refs = callerContext.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
+        ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
             if (refs != null) {
                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
                 for (ServiceReference ref : refs) {
-                    ObjectFactoryBuilder builder = (ObjectFactoryBuilder) callerContext.getService(ref);
+        		ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
                     try {
                         factory = builder.createObjectFactory(obj, environment);
                     } catch (NamingException e) {
@@ -193,10 +163,6 @@ private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
                     }
                 }
             }
-        } catch (InvalidSyntaxException e) {
-            // should not happen
-            throw new RuntimeException("Invalid filter", e);
-        }
 
         Object result = null;
         
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
index 18affffc..94f8cf62 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
@@ -18,7 +18,8 @@
  */
 package org.apache.aries.jndi;
 
-import java.security.PrivilegedExceptionAction;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.Arrays;
 import java.util.Enumeration;
 import java.util.Hashtable;
@@ -47,18 +48,7 @@ public ObjectFactoryHelper(BundleContext defaultContext, BundleContext callerCon
         this.callerContext = callerContext;
     }
 
-    public Object getObjectInstance(final Object obj,
-                                    final Name name,
-                                    final Context nameCtx,
-                                    final Hashtable<?, ?> environment) throws Exception {
-        return Utils.doPrivileged(new PrivilegedExceptionAction<Object>() {
-            public Object run() throws Exception {
-                return doGetObjectInstance(obj, name, nameCtx, environment);
-            }            
-        });
-    }
-    
-    private Object doGetObjectInstance(Object obj,
+    public Object getObjectInstance(Object obj,
                                        Name name,
                                        Context nameCtx,
                                        Hashtable<?, ?> environment) throws Exception {
@@ -106,12 +96,13 @@ protected Object getObjectInstanceUsingObjectFactories(Object obj,
                                                            Hashtable<?, ?> environment) 
         throws Exception {
         Object result = null;
-        try {
-            ServiceReference[] refs = callerContext.getServiceReferences(ObjectFactory.class.getName(), null);
+        ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactory.class);
+            
             if (refs != null) {
                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
+        	
                 for (ServiceReference ref : refs) {
-                    ObjectFactory factory = (ObjectFactory) callerContext.getService(ref);
+        		ObjectFactory factory = (ObjectFactory) Utils.getServicePrivileged(callerContext, ref);
 
                     try {
                         result = factory.getObjectInstance(obj, name, nameCtx, environment);
@@ -127,10 +118,6 @@ protected Object getObjectInstanceUsingObjectFactories(Object obj,
                     }
                 }
             }
-        } catch (InvalidSyntaxException e) {
-            // should not happen
-            throw new RuntimeException("Invalid filter", e);
-        }
 
         return (result == null) ? obj : result;
     }
@@ -181,17 +168,13 @@ private Object getObjectInstanceUsingRefAddress(Enumeration<RefAddr> addresses,
         return (result == null) ? obj : result;
     }
 
-    private Object getObjectInstanceUsingClassName(Object reference,
-                                                   String className,
-                                                   Object obj,
-                                                   Name name,
-                                                   Context nameCtx,
-                                                   Hashtable<?, ?> environment) 
-        throws Exception {
+    static Tuple<ServiceReference,ObjectFactory> findObjectFactoryByClassName(final BundleContext ctx, final String className) {
+    	return AccessController.doPrivileged(new PrivilegedAction<Tuple<ServiceReference,ObjectFactory>>() {
+			public Tuple<ServiceReference,ObjectFactory> run() {
         ServiceReference serviceReference = null;
 
         try {
-            ServiceReference[] refs = defaultContext.getServiceReferences(className, null);
+		            ServiceReference[] refs = ctx.getServiceReferences(className, null);
             if (refs != null && refs.length > 0) {
                 serviceReference = refs[0];
             }
@@ -200,14 +183,33 @@ private Object getObjectInstanceUsingClassName(Object reference,
             throw new RuntimeException("Invalid filter", e);
         }
 
-        Object result = null;
+		        ObjectFactory factory = null;
         
         if (serviceReference != null) {
-            ObjectFactory factory = (ObjectFactory) defaultContext.getService(serviceReference);
+		            factory = (ObjectFactory) ctx.getService(serviceReference);			
+		        }
+		        
+		        return new Tuple<ServiceReference, ObjectFactory>(serviceReference, factory);
+			}
+		});    	
+    }
+    
+    private Object getObjectInstanceUsingClassName(Object reference,
+                                                   String className,
+                                                   Object obj,
+                                                   Name name,
+                                                   Context nameCtx,
+                                                   Hashtable<?, ?> environment) 
+        throws Exception {
+    	
+    	Tuple<ServiceReference,ObjectFactory> tuple = findObjectFactoryByClassName(defaultContext, className);
+    	Object result = null;
+    	
+    	if (tuple.second != null) {
             try {
-                result = factory.getObjectInstance(reference, name, nameCtx, environment);
+                result = tuple.second.getObjectInstance(reference, name, nameCtx, environment);
             } finally {
-                defaultContext.ungetService(serviceReference);
+                defaultContext.ungetService(tuple.first);
             }
         }
 
@@ -219,13 +221,14 @@ private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
                                                                Context nameCtx,
                                                                Hashtable<?, ?> environment) 
         throws Exception {
+    	
         ObjectFactory factory = null;
-        try {
-            ServiceReference[] refs = callerContext.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
+        
+        ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
             if (refs != null) {
                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
                 for (ServiceReference ref : refs) {
-                    ObjectFactoryBuilder builder = (ObjectFactoryBuilder) callerContext.getService(ref);
+        		ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
                     try {
                         factory = builder.createObjectFactory(obj, environment);
                     } catch (NamingException e) {
@@ -238,10 +241,6 @@ private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
                     }
                 }
             }
-        } catch (InvalidSyntaxException e) {
-            // should not happen
-            throw new RuntimeException("Invalid filter", e);
-        }
 
         Object result = null;
         
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
index ef98ceef..4cce9238 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
@@ -45,7 +45,7 @@ public ServicePair(BundleContext context, ServiceReference serviceRef, T service
   public T get()
   {
     if (serviceObject == null && ref.getBundle() != null) {
-      serviceObject = (T) ctx.getService(ref);
+      serviceObject = (T) Utils.getServicePrivileged(ctx, ref);
     }
     
     return serviceObject;
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Tuple.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Tuple.java
index e69de29b..63991f51 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Tuple.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Tuple.java
@@ -0,0 +1,11 @@
+package org.apache.aries.jndi;
+
+public class Tuple<U,V> {
+	public final U first;
+	public final V second;
+	
+	public Tuple(U first, V second) {
+		this.first = first;
+		this.second = second;
+	}
+}
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
index 78d1a998..ae83a49b 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
@@ -32,6 +32,7 @@
 import org.apache.aries.jndi.startup.Activator;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.BundleReference;
+import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceReference;
 import org.osgi.service.jndi.JNDIConstants;
 
@@ -164,6 +165,27 @@ public String run() {
         }
     }
 
+    public static ServiceReference[] getReferencesPrivileged(final BundleContext ctx, final Class<?> clazz) {
+    	return AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
+    		public ServiceReference[] run() {
+    			try {
+    				return ctx.getServiceReferences(clazz.getName(), null);
+    			} catch (InvalidSyntaxException ise) {
+    				// should not happen
+    				throw new RuntimeException("Invalid filter", ise);
+    			}
+    		}    		
+		});
+    }
+    
+    public static Object getServicePrivileged(final BundleContext ctx, final ServiceReference ref) {
+    	return AccessController.doPrivileged(new PrivilegedAction<Object>() {
+    		public Object run() {
+    			return ctx.getService(ref);
+    		}
+		});
+    }
+
     public static void augmentEnvironment(Hashtable<?, ?> environment) 
     {
       Object[] objects = Activator.getEnvironmentAugmentors();
