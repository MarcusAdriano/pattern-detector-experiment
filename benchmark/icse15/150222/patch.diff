diff --git a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
index 86ba7034..c9a37f58 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
@@ -123,13 +123,13 @@ private final int jjMoveNfa_3(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((0x7bffd0f8fffffdffL & l) != 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) != 0L)
                   {
                      if (kind > 17)
                         kind = 17;
                      jjCheckNAddStates(0, 6);
                   }
-                  else if ((0x100000200L & l) != 0L)
+                  else if ((0x100002600L & l) != 0L)
                   {
                      if (kind > 6)
                         kind = 6;
@@ -176,14 +176,14 @@ else if (curChar == 33)
                   jjstateSet[jjnewStateCnt++] = 18;
                   break;
                case 19:
-                  if ((0x7bffd0f8fffffdffL & l) == 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) == 0L)
                      break;
                   if (kind > 17)
                      kind = 17;
                   jjCheckNAddStates(0, 6);
                   break;
                case 20:
-                  if ((0x7bffd0f8fffffdffL & l) == 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) == 0L)
                      break;
                   if (kind > 17)
                      kind = 17;
@@ -197,7 +197,7 @@ else if (curChar == 33)
                   jjCheckNAddTwoStates(20, 21);
                   break;
                case 23:
-                  if ((0x7bffd0f8fffffdffL & l) != 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) != 0L)
                      jjCheckNAddStates(7, 9);
                   break;
                case 24:
@@ -209,7 +209,7 @@ else if (curChar == 33)
                      jjCheckNAddStates(7, 9);
                   break;
                case 27:
-                  if ((0xfbffd4f8fffffdffL & l) == 0L)
+                  if ((0xfbffd4f8ffffd9ffL & l) == 0L)
                      break;
                   if (kind > 21)
                      kind = 21;
@@ -503,7 +503,7 @@ private final int jjMoveNfa_1(int startState, int curPos)
                         kind = 32;
                      jjCheckNAdd(4);
                   }
-                  if ((0x100000200L & l) != 0L)
+                  if ((0x100002600L & l) != 0L)
                   {
                      if (kind > 6)
                         kind = 6;
@@ -763,7 +763,7 @@ private final int jjMoveNfa_2(int startState, int curPos)
                         kind = 28;
                      jjCheckNAdd(4);
                   }
-                  if ((0x100000200L & l) != 0L)
+                  if ((0x100002600L & l) != 0L)
                   {
                      if (kind > 6)
                         kind = 6;
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index f50dc640..32d83d66 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -371,6 +371,42 @@ public void testEscaped() throws Exception {
 	assertQueryEquals("[ a\\\\ TO a\\* ]", null, "[a\\ TO a*]");
   }
 
+  public void testTabNewlineCarriageReturn()
+    throws Exception {
+    assertQueryEqualsDOA("+weltbank +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \n +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\r+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\r\n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r\n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r\n +worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r \n +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\t+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \t+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \t +worlbank", null,
+      "+weltbank +worlbank");
+  }
+
   public void testSimpleDAO()
     throws Exception {
     assertQueryEqualsDOA("term term term", null, "+term +term +term");
