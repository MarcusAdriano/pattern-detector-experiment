diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
index 92453e0b..b6c8f3fc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
@@ -567,4 +567,15 @@ public void register(AbstractReplicationStrategy subscriber)
 
         return endpoints;
     }
+
+    /**
+     * Return the Token to Endpoint map for all the node in the cluster, including bootstrapping ones.
+     */
+    public Map<Token, InetAddress> getTokenToEndpointMap()
+    {
+        Map<Token, InetAddress> map = new HashMap<Token, InetAddress>(tokenToEndpointMap.size() + bootstrapTokens.size());
+        map.putAll(tokenToEndpointMap);
+        map.putAll(bootstrapTokens);
+        return map;
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 2f7c9324..48456bb3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -532,6 +532,17 @@ public void doConsistencyCheck(Row row, List<InetAddress> endpoints, ReadCommand
         return constructRangeToEndpointMap(keyspace, ranges);
     }
 
+    public Map<Token, String> getTokenToEndpointMap()
+    {
+        Map<Token, InetAddress> mapInetAddress = tokenMetadata_.getTokenToEndpointMap();
+        Map<Token, String> mapString = new HashMap<Token, String>(mapInetAddress.size());
+        for (Map.Entry<Token, InetAddress> entry : mapInetAddress.entrySet())
+        {
+            mapString.put(entry.getKey(), entry.getValue().getHostAddress());
+        }
+        return mapString;
+    }
+
     /**
      * Construct the range to endpoint mapping based on the true view
      * of the world.
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
index 09629779..3b584c7c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
@@ -28,6 +28,7 @@
 
 import org.apache.cassandra.config.ConfigurationException;
 import org.apache.cassandra.dht.Range;
+import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.thrift.UnavailableException;
 
 import java.net.InetAddress;
@@ -93,6 +94,14 @@
      */
     public Map<Range, List<String>> getPendingRangeToEndpointMap(String keyspace);
 
+    /**
+     * Retrieve a map of tokens to endpoints, including the bootstrapping
+     * ones.
+     *
+     * @return a map of tokens to endpoints
+     */
+    public Map<Token, String> getTokenToEndpointMap();
+
     /**
      * Numeric load value.
      */
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 36c55428..fb0260eb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -666,7 +666,7 @@ public String describe_version() throws TException
 
     public List<TokenRange> describe_ring(String keyspace)throws InvalidRequestException
     {
-        if (!DatabaseDescriptor.getNonSystemTables().contains(keyspace))
+        if (keyspace == null || !DatabaseDescriptor.getNonSystemTables().contains(keyspace))
             throw new InvalidRequestException("There is no ring for the keyspace: " + keyspace);
         List<TokenRange> ranges = new ArrayList<TokenRange>();
         Token.TokenFactory tf = StorageService.getPartitioner().getTokenFactory();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
index 9c8e2c38..4d4c4291 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
@@ -40,7 +40,7 @@
 import org.apache.cassandra.concurrent.IExecutorMBean;
 import org.apache.cassandra.db.ColumnFamilyStoreMBean;
 import org.apache.cassandra.db.CompactionManager;
-import org.apache.cassandra.dht.Range;
+import org.apache.cassandra.dht.Token;
 
 import org.apache.commons.cli.*;
 
@@ -91,22 +91,10 @@ private static void printUsage()
      */
     public void printRing(PrintStream outs)
     {
+        Map<Token, String> tokenToEndpoint = probe.getTokenToEndpointMap();
+        List<Token> sortedTokens = new ArrayList<Token>(tokenToEndpoint.keySet());
+        Collections.sort(sortedTokens);
         
-        Map<Range, List<String>> rangesToIterate = new HashMap<Range, List<String>>();
-        try
-        {
-            rangesToIterate.putAll(probe.getPendingRangeToEndpoingMap(null));
-            rangesToIterate.putAll(probe.getRangeToEndpointMap(null));
-        } 
-        catch (IllegalStateException ise) 
-        {
-            outs.println(String.format("Ring information unavailable: %s",ise.getMessage()));
-            return;
-        }
-        
-        
-        List<Range> ranges = new ArrayList<Range>(rangesToIterate.keySet());
-        Collections.sort(ranges);
         Set<String> liveNodes = probe.getLiveNodes();
         Set<String> deadNodes = probe.getUnreachableNodes();
         Set<String> joiningNodes = probe.getJoiningNodes();
@@ -122,13 +110,11 @@ public void printRing(PrintStream outs)
         
         // show pre-wrap token twice so you can always read a node's range as
         // (previous line token, current line token]
-        if (ranges.size() > 1)
-            outs.println(String.format("%-14s%-11s%-14s%-43s", "", "", "", ranges.get(0).left));
-
-        for (Range range : ranges) {
-            List<String> endpoints = rangesToIterate.get(range);
+        if (sortedTokens.size() > 1)
+            outs.println(String.format("%-14s%-11s%-14s%-43s", "", "", "", sortedTokens.get(sortedTokens.size() - 1)));
             
-            String primaryEndpoint = endpoints.get(0);
+        for (Token token : sortedTokens) {
+            String primaryEndpoint = tokenToEndpoint.get(token);
             outs.print(String.format("%-16s", primaryEndpoint));
 
             String status =
@@ -145,7 +131,7 @@ public void printRing(PrintStream outs)
 
             outs.print(String.format("%-16s", loadMap.containsKey(primaryEndpoint) ? loadMap.get(primaryEndpoint) : "?"));
 
-            outs.print(String.format("%-44s", range.right));
+            outs.print(String.format("%-44s", token));
 
             outs.println();
         }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
index 3ae92557..3550a6b2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -44,6 +44,7 @@
 import org.apache.cassandra.db.CompactionManager;
 import org.apache.cassandra.db.CompactionManagerMBean;
 import org.apache.cassandra.dht.Range;
+import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.service.StorageServiceMBean;
 import org.apache.cassandra.streaming.StreamingService;
 import org.apache.cassandra.streaming.StreamingServiceMBean;
@@ -152,14 +153,9 @@ public void drain() throws IOException, InterruptedException, ExecutionException
         ssProxy.drain();	
     }
     
-    public Map<Range, List<String>> getRangeToEndpointMap(String tableName)
+    public Map<Token, String> getTokenToEndpointMap()
     {
-        return ssProxy.getRangeToEndpointMap(tableName);
-    }
-
-    public Map<Range, List<String>> getPendingRangeToEndpoingMap(String tableName)
-    {
-        return ssProxy.getPendingRangeToEndpointMap(tableName);
+        return ssProxy.getTokenToEndpointMap();
     }
 
     public Set<String> getLiveNodes()
