diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
index 0ee03d8d..af4f99be 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
@@ -20,12 +20,6 @@
 
 import java.io.IOException;
 import java.util.Collection;
-import java.util.HashSet;
-import java.util.Queue;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.LinkedBlockingQueue;
-
 import org.apache.aries.proxy.UnableToProxyException;
 import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
 import org.apache.aries.proxy.impl.common.OSGiFriendlyClassWriter;
@@ -80,7 +74,7 @@
   public final MethodVisitor visitMethod(int access, String name, String desc,
       String sig, String[] arg4) {
     //We're going to implement this method, so make it non abstract!
-    access ^= ACC_ABSTRACT;
+    access &= ~ACC_ABSTRACT;
     //If we already implement this method (from another interface) then we don't
     //want a duplicate. We also don't want to copy any static init blocks (these
     //initialize static fields on the interface that we don't copy
@@ -106,9 +100,27 @@ public final MethodVisitor visitMethod(int access, String name, String desc,
           throw new UnableToProxyException(c, e);
         }
       }
+      
+      visitObjectMethods();
+      
       adapter.visitEnd();
       done  = true;
     }
     return writer.toByteArray();
   }
+  
+  /**
+   * Make sure that the three common Object methods toString, equals and hashCode are redirected to the delegate
+   * even if they are not on any of the interfaces
+   */
+  private void visitObjectMethods() {
+      MethodVisitor visitor = visitMethod(ACC_PUBLIC, "toString", "()Ljava/lang/String;", null, null);
+      if (visitor != null) visitor.visitEnd();
+      
+      visitor = visitMethod(ACC_PUBLIC, "equals", "(Ljava/lang/Object;)Z", null, null);
+      if (visitor != null) visitor.visitEnd();
+
+      visitor = visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
+      if (visitor != null) visitor.visitEnd();      
+  }
 }
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
index c767b17d..ec22439b 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
@@ -30,6 +30,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Hashtable;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Callable;
 
@@ -75,14 +76,7 @@ public void testGetProxyInstance1() throws Exception{
     
     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class));
     
-    Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
-        new Callable<Object>() {
-
-          @Override
-          public Object call() throws Exception {
-            return null;
-          }
-    }, null);
+    Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
     
     assertTrue(o instanceof Closeable);
   }
@@ -93,14 +87,7 @@ public void testGetProxyInstance2() throws Exception{
     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class,
         Iterable.class, Map.class));
     
-    Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
-        new Callable<Object>() {
-
-          @Override
-          public Object call() throws Exception {
-            return null;
-          }
-    }, null);
+    Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
     
     assertTrue(o instanceof Closeable);
     assertTrue(o instanceof Iterable);
@@ -175,23 +162,8 @@ public Object call() throws Exception {
   public void testCaching() throws Exception {
     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class));
     
-    Object o1 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
-        new Callable<Object>() {
-
-          @Override
-          public Object call() throws Exception {
-            return null;
-          }
-    }, null);
-    
-    Object o2 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
-        new Callable<Object>() {
-
-          @Override
-          public Object call() throws Exception {
-            return null;
-          }
-    }, null);
+    Object o1 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
+    Object o2 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
     
     assertSame(o1.getClass(), o2.getClass());
   }
@@ -203,14 +175,7 @@ public void testComplexInterface() throws Exception {
     final TestCallable tc = new TestCallable();
     tc.setReturn(5);
     
-    Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
-        new Callable<Object>() {
-
-          @Override
-          public Object call() throws Exception {
-            return tc;
-          }
-    }, null);
+    Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(tc), null);
     
     assertTrue(o instanceof ProxyTestInterface);
     
@@ -219,9 +184,39 @@ public Object call() throws Exception {
     assertEquals(5, ((Callable)o).call());
   }
   
+  @Test
+  public void testHandlesObjectMethods() throws Exception {
+      List<String> list = Arrays.asList("one", "two", "three");
+      Object proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(List.class), constantly(list), null);
+      
+      // obeys hashCode and equals, they *are* on the interface
+      assertTrue(proxied.equals(Arrays.asList("one", "two", "three")));
+      assertEquals(Arrays.asList("one", "two", "three").hashCode(), proxied.hashCode());
+      
+      // and toString
+      assertEquals(list.toString(), proxied.toString());
+      
+      Runnable runnable = new Runnable() {
+        public void run() {}
+      };
+      proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(Runnable.class), constantly(runnable), null);
+      
+      // obeys hashCode and equals, they *are not* on the interface
+      assertTrue(proxied.equals(runnable));
+      assertEquals(runnable.hashCode(), proxied.hashCode());
+  }
+  
   protected void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
     assertEquals(pre, listener.preInvoke);
     assertEquals(post, listener.postInvoke);
     assertEquals(ex, listener.postInvokeExceptionalReturn);
   }
+  
+  private Callable<Object> constantly(final Object result) {
+      return new Callable<Object>() {
+          public Object call() throws Exception {
+              return result;
+          }             
+        };
+  }
 }
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
index 9b9dfe34..86734e67 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
@@ -33,4 +33,9 @@ public static ClassLoader getClassLoader(Bundle b)
   {
     return AriesFrameworkUtil.class.getClassLoader();
   }
+  
+  // Dummy implementation
+  public static ClassLoader getClassLoaderForced(Bundle b) {
+    return null;
+  }
 }
