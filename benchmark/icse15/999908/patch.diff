diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
index 284a88ad..b1deccbb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
@@ -69,6 +69,14 @@ public ValueNode bindExpression(
             Vector aggregateVector, boolean forQueryRewrite)
             throws StandardException
     {
+        //
+        // Higher level bind() logic may try to redundantly re-bind this node. Unfortunately,
+        // that causes us to think that the sequence is being referenced more than once
+        // in the same statement. If the sequence generator is already filled in, then
+        // this node has already been bound and we can exit quickly. See DERBY-4803.
+        //
+        if ( sequenceDescriptor != null ) { return this; }
+        
         CompilerContext cc = getCompilerContext();
         
         if ( (cc.getReliability() & CompilerContext.NEXT_VALUE_FOR_ILLEGAL) != 0 )
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
index c33f84e3..7710f3fc 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
@@ -518,5 +518,31 @@ public void test_13_restrictedDrop() throws Exception
 
     }
 
+    /**
+     * Verify that you can use sequences in insert statements driven
+     * by selects. See DERBY-4803.
+     */
+    public void test_14_insertSelect() throws Exception
+    {
+        Connection conn = openUserConnection(ALPHA);
+
+        goodStatement( conn, "create sequence sequence_is" );
+        goodStatement( conn, "create table tis_1( a int )" );
+        goodStatement( conn, "create table tis_2( a int, b int )" );
+        goodStatement( conn, "insert into tis_1( a ) values ( 1 ), ( 2 )" );
+        goodStatement( conn, "insert into tis_2 select next value for sequence_is, a from tis_1" );
+
+        assertResults
+            (
+             conn,
+             "select * from tis_2 order by b",
+             new String[][]
+             {
+                 { "-2147483648", "1" },
+                 { "-2147483647", "2" },
+             },
+             true
+             );
+    }
 
 }
