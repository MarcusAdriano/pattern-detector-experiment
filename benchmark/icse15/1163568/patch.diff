diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
index da1dc47a..75c43053 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
@@ -374,6 +374,10 @@ public void refresh(String segmentName) throws IOException {
   }
 
   public void refresh() throws IOException {
+    // Set to null so that we regenerate the list of pending
+    // files; else we can accumulate same file more than
+    // once
+    deletable = null;
     refresh(null);
   }
 
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index c99d0c4f..a19c7c44 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -600,6 +600,23 @@ public synchronized void drop(SegmentInfo info) throws IOException {
       drop(info, IOContext.Context.MERGE);
     }
 
+    public synchronized void dropAll() throws IOException {
+      Iterator<Map.Entry<SegmentCacheKey,SegmentReader>> iter = readerMap.entrySet().iterator();
+      while (iter.hasNext()) {
+
+        final Map.Entry<SegmentCacheKey,SegmentReader> ent = iter.next();
+
+        SegmentReader sr = ent.getValue();
+        sr.hasChanges = false;
+        iter.remove();
+
+        // NOTE: it is allowed that this decRef does not
+        // actually close the SR; this can happen when a
+        // near real-time reader using this SR is still open
+        sr.decRef();
+      }
+    }
+
     public synchronized void drop(SegmentInfo info, IOContext.Context context) throws IOException {
       final SegmentReader sr;
       if ((sr = readerMap.remove(new SegmentCacheKey(info, context))) != null) {
@@ -2141,7 +2158,7 @@ public synchronized void deleteAll() throws IOException {
       deleter.refresh();
 
       // Don't bother saving any changes in our segmentInfos
-      readerPool.clear(null);
+      readerPool.dropAll();
 
       // Mark that the index has changed
       ++changeCount;
@@ -3698,7 +3715,6 @@ private int mergeMiddle(MergePolicy.OneMerge merge)
 
             synchronized(this) {
               deleter.deleteFile(compoundFileName);
-              
               deleter.deleteFile(IndexFileNames.segmentFileName(mergedName, "", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
               deleter.deleteNewFiles(merge.info.files());
             }
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
index 8006985e..5a9cec7d 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -1849,4 +1849,28 @@ public void testEmptyFieldNameTIIOne() throws IOException {
     writer.close();
     dir.close();
   }
+
+  public void testDeleteAllNRTLeftoverFiles() throws Exception {
+
+    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());
+    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));
+    Document doc = new Document();
+    for(int i = 0; i < 20; i++) {
+      for(int j = 0; j < 100; ++j) {
+        w.addDocument(doc);
+      }
+      w.commit();
+      IndexReader.open(w, true).close();
+
+      w.deleteAll();
+      w.commit();
+
+      // Make sure we accumulate no files except for empty
+      // segments_N and segments.gen:
+      assertTrue(d.listAll().length <= 2);
+    }
+
+    w.close();
+    d.close();
+  }
 }
