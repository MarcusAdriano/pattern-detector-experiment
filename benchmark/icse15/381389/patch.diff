diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/MessageId.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/MessageId.java
index 75ab1261..392b8214 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/MessageId.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/MessageId.java
@@ -71,7 +71,7 @@
     String STORE_SHUTDOWN_MSG               = "D002";
     String STORE_BACKUP_STARTED             = "D004";
     String STORE_MOVED_BACKUP               = "D005";
-    String STORE_COPIED_DB_DIR              = "D006";
+    String STORE_DATA_SEG_BACKUP_COMPLETED  = "D006";
     String STORE_EDITED_SERVICEPROPS        = "D007";
     String STORE_ERROR_EDIT_SERVICEPROPS    = "D008";
     String STORE_COPIED_LOG                 = "D009";
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
index c25931cb..4897d28b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
@@ -401,18 +401,29 @@ public Object run() throws StandardException
 		@exception StandardException Properties cannot be saved.
 	*/
 
-	public void saveServiceProperties(String serviceName, Properties properties, boolean replace)
+	public void saveServiceProperties(final String serviceName, 
+                                      final Properties properties, 
+                                      final boolean replace)
 		throws StandardException {
-		File backupFile = null;
 
-		File servicePropertiesFile = new File(serviceName, PersistentService.PROPERTIES_NAME);
+        try
+        {
+            AccessController.doPrivileged(
+                new PrivilegedExceptionAction()
+                {
+                    File backupFile = null;
+                    public Object run() throws StandardException
+                    {
 		
+                        File servicePropertiesFile = 
+                            new File(serviceName, PersistentService.PROPERTIES_NAME);
 		if (replace) {
-			backupFile = new File(serviceName, PersistentService.PROPERTIES_NAME.concat("old"));
-
+                            backupFile = 
+                                new File(serviceName, PersistentService.PROPERTIES_NAME.concat("old"));
 			try {
 				if(!servicePropertiesFile.renameTo(backupFile)) {
-					throw StandardException.newException(SQLState.UNABLE_TO_RENAME_FILE, servicePropertiesFile, backupFile);
+                                    throw StandardException.newException(
+                                     SQLState.UNABLE_TO_RENAME_FILE, servicePropertiesFile, backupFile);
 				}
 			} catch (SecurityException se) {
 				throw Monitor.exceptionStartingModule(se);
@@ -423,14 +434,13 @@ public void saveServiceProperties(String serviceName, Properties properties, boo
 		try {
 
 			fos = new FileOutputStream(servicePropertiesFile);
-			properties.store(fos, serviceName + MessageService.getTextMessage(MessageId.SERVICE_PROPERTIES_DONT_EDIT));
+                            properties.store(fos, 
+                                             serviceName + 
+                                             MessageService.getTextMessage(
+                                                  MessageId.SERVICE_PROPERTIES_DONT_EDIT));
 			fos.getFD().sync();
 			fos.close();
 			fos = null;
-
-			replace = false;
-
-
 		} catch (IOException ioe) {
 
 			if (fos != null) {
@@ -461,7 +471,11 @@ public void saveServiceProperties(String serviceName, Properties properties, boo
 				// do nothing
 			}
 		}
-
+                        return null;
+                    }
+                }
+                );
+        }catch( PrivilegedActionException pae) { throw (StandardException) pae.getException();}
 	}
 
     /*
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
index 7c42f58a..9eebc2f4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
@@ -140,6 +140,8 @@
     private static final int REGULAR_FILE_LIST_DIRECTORY_ACTION = 12;
     private static final int STORAGE_FILE_LIST_DIRECTORY_ACTION = 13;
     private static final int COPY_STORAGE_FILE_TO_REGULAR_ACTION = 14;
+    private static final int REGULAR_FILE_GET_CANONICALPATH_ACTION = 15;
+    private static final int STORAGE_FILE_GET_CANONICALPATH_ACTION = 16;
 
 	public RawStore() {
 	}
@@ -592,6 +594,8 @@ public synchronized void backup(Transaction t,
 		File oldbackup = null;
 		File backupcopy = null;
 		OutputStreamWriter historyFile = null;
+        StorageFile dbHistoryFile = null;
+        File backupHistoryFile = null;
 		LogInstant backupInstant = logFactory.getFirstUnflushedInstant();
 
 		try
@@ -605,13 +609,16 @@ public synchronized void backup(Transaction t,
 			// append to end of history file
 			historyFile = privFileWriter( storageFactory.newStorageFile( BACKUP_HISTORY), true);
 
+			backupcopy = new File(backupDir, dbname);
+
 			logHistory(historyFile,
                         MessageService.getTextMessage(
-                            MessageId.STORE_BACKUP_STARTED, canonicalDbName));
+                            MessageId.STORE_BACKUP_STARTED, 
+                            canonicalDbName, 
+                            getFilePath(backupcopy)));
 
-			// if a backup copy of this database already exists,
-			backupcopy = new File(backupDir, dbname);
 
+            // check if a backup copy of this database already exists,
             if (privExists(backupcopy))
 			{
 				// first make a backup of the backup
@@ -637,8 +644,8 @@ public synchronized void backup(Transaction t,
                         historyFile,
                         MessageService.getTextMessage(
                             MessageId.STORE_MOVED_BACKUP,
-                            backupcopy.getCanonicalPath(),
-                            oldbackup.getCanonicalPath()));
+                            getFilePath(backupcopy),
+                            getFilePath(oldbackup)));
 					renamed = true;
 				}
 			}
@@ -651,6 +658,15 @@ public synchronized void backup(Transaction t,
                     (File) backupcopy);
             }
 
+            dbHistoryFile = storageFactory.newStorageFile(BACKUP_HISTORY);
+            backupHistoryFile = new File(backupcopy, BACKUP_HISTORY); 
+            // copy the history file into the backup. 
+            if(!privCopyFile(dbHistoryFile, backupHistoryFile))
+                throw StandardException. 
+                    newException(SQLState.RAWSTORE_ERROR_COPYING_FILE,
+                                 dbHistoryFile, backupHistoryFile);  
+
+
             // if they are any jar file stored in the database, copy them into
             // the backup. 
             StorageFile jarDir = 
@@ -782,9 +798,8 @@ public synchronized void backup(Transaction t,
 
 			logHistory(historyFile,
                 MessageService.getTextMessage(
-                    MessageId.STORE_COPIED_DB_DIR,
-                    canonicalDbName,
-                    backupcopy.getCanonicalPath()));
+                   MessageId.STORE_DATA_SEG_BACKUP_COMPLETED,
+                   getFilePath(segBackup)));
 
 		
             // copy the log that got generated after the backup started to
@@ -794,8 +809,8 @@ public synchronized void backup(Transaction t,
 			logHistory(historyFile,
                 MessageService.getTextMessage(
                     MessageId.STORE_COPIED_LOG,
-                    logdir.getCanonicalPath(),
-                    logBackup.getCanonicalPath()));
+                    getFilePath(logdir),
+                    getFilePath(logBackup)));
 
 			error = false;
 		}
@@ -841,13 +856,19 @@ public synchronized void backup(Transaction t,
 						logHistory(historyFile,
                             MessageService.getTextMessage(
                                 MessageId.STORE_REMOVED_BACKUP,
-                                oldbackup.getCanonicalPath()));
+                                getFilePath(oldbackup)));
  					}
 					logHistory(historyFile,
                         MessageService.getTextMessage(
                             MessageId.STORE_BACKUP_COMPLETED,
                             backupInstant));
 
+                    // copy the updated version of history file with current
+                    // backup information into the backup.
+                    if(!privCopyFile(dbHistoryFile, backupHistoryFile))
+                        throw StandardException. 
+                            newException(SQLState.RAWSTORE_ERROR_COPYING_FILE,
+                                         dbHistoryFile, backupHistoryFile);  
 				}
 
 				historyFile.close();
@@ -1172,6 +1193,48 @@ private void logHistory(OutputStreamWriter historyFile, String msg) throws IOExc
 		historyFile.flush();
 	}
 
+    /*
+     * Get the file path. If the canonical path can be obtained then return the 
+     * canonical path, otherwise just return the abstract path. Typically if
+     * there are no permission to read user.dir when  running under security
+     * manager canonical path can not be obtained.
+     *
+     * This method is used to a write path name to error/status log file, where it
+     * would be nice to print full paths but not esstential that the user 
+     * grant permissions to read user.dir property.
+     */
+    private String getFilePath(StorageFile file) {
+        String path = privGetCanonicalPath(file);
+        if(path != null ) {
+            return path;
+        }else {
+            //can not get the canoncal path, 
+            // return the abstract path
+            return file.getPath();
+        }
+    }
+
+    /*
+     * Get the file path.  If the canonical path can be obtained then return the 
+     * canonical path, otherwise just return the abstract path. Typically if
+     * there are no permission to read user.dir when  running under security
+     * manager canonical path can not be obtained.
+     *
+     * This method is used to a write a file path name to error/status log file, 
+     * where it would be nice to print full paths but not esstential that the user
+     * grant permissions to read user.dir property.
+     *
+     */
+    private String getFilePath(File file) {
+        String path = privGetCanonicalPath(file);
+        if(path != null ) {
+            return path;
+        }else {
+            // can not get the canoncal path, 
+            // return the abstract path
+            return file.getPath();
+        }
+    }
 
 	protected boolean privCopyDirectory(StorageFile from, File to)
 	{
@@ -1474,6 +1537,40 @@ private synchronized boolean privCopyFile( StorageFile from, File to)
     }
     
 
+    private synchronized String privGetCanonicalPath(final StorageFile file)
+    {
+        actionCode = STORAGE_FILE_GET_CANONICALPATH_ACTION;
+        actionStorageFile = file;
+
+        try
+        {
+            return (String) AccessController.doPrivileged( this);
+        }
+        catch( PrivilegedActionException pae) { return null;} // does not throw an exception
+        finally
+        {
+            actionStorageFile = null;
+        }
+    }
+
+
+    private synchronized String privGetCanonicalPath(final File file)
+    {
+        actionCode = REGULAR_FILE_GET_CANONICALPATH_ACTION;
+        actionRegularFile = file;
+
+        try
+        {
+            return (String) AccessController.doPrivileged( this);
+        }
+        catch( PrivilegedActionException pae) { return null;} // does not throw an exception
+        finally
+        {
+            actionRegularFile = null;
+        }
+    }
+
+
     // PrivilegedExceptionAction method
     public final Object run() throws IOException
     {
@@ -1546,7 +1643,13 @@ public final Object run() throws IOException
                                            actionStorageFile,
                                            actionRegularFile));
 
+        case REGULAR_FILE_GET_CANONICALPATH_ACTION:
+            // SECURITY PERMISSION - MP1
+            return (String)(actionRegularFile.getCanonicalPath());
 
+        case STORAGE_FILE_GET_CANONICALPATH_ACTION:
+            // SECURITY PERMISSION - MP1
+            return (String)(actionStorageFile.getCanonicalPath());
         }
         return null;
     } // end of run
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/FTFileUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/FTFileUtil.java
index 78bb74f5..82d403c6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/FTFileUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/FTFileUtil.java
@@ -22,6 +22,11 @@
 
 import java.io.FileWriter;
 import java.io.File;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+
 /**
   Convience functions for performing file manipulations
   in ij scripts.
@@ -50,41 +55,72 @@ public static void mkFile(String fileName, int length) throws Exception
 	}
 
 	/**
-	   rename a file
-	   @param location location of the file
-	   @param name the file's name
-	   @param newName the file's new name
+     * rename a file. 
+     * This method is  called by some tests through a SQL procedure:
+     * RENAME_FILE(LOCATION VARCHAR(32000), NAME VARCHAR(32000), 
+     *                                 NEW_NAME  VARCHAR(32000))
+     * @param location location of the file
+     * @param name the file's name
+	 * @param newName the file's new name
 	*/
-	public static void renameFile(String location, String name , String newName) throws Exception
+	public static void renameFile(String location, String name , 
+                                  String newName) throws Exception
 	{
-		File src = new File(location, name);
-		File dst = new File(location, newName);
+		final File src = new File(location, name);
+		final File dst = new File(location, newName);
+        
+        // needs to run in a privileged block as it will be
+		// called through a SQL statement and thus a generated
+		// class. The generated class on the stack has no permissions
+		// granted to it.
+        AccessController.doPrivileged(new PrivilegedExceptionAction() {
+                public Object run() throws Exception {
 		if(!src.renameTo(dst))
 		{
 			throw new Exception("unable to rename File: " +
 								src.getAbsolutePath() +
 							    " To: " + dst.getAbsolutePath());
 		}
+                    
+                    return null; // nothing to return
+                }
+            });
 	}
 
 
     /**
      * Check if a file exists ?
      *
+     * This method is  called by some tests through a SQL function:
+     * fileExists(fileName varchar(128))returns VARCHAR(100)
+     *
      * @param name the file's name.
      * @return     <tt>"true"</tt> if the given file exists 
      *             <tt>"false"</tt> otherwise.
      * @exception Exception if any exception occurs 
      */
-    public static String fileExists(String fileName) throws Exception
+    public static String fileExists(String fileName) 
+        throws PrivilegedActionException
+    {
+        final File fl = new File(fileName);
+                
+        // needs to run in a privileged block as it will be
+		// called through a SQL statement and thus a generated
+		// class. The generated class on the stack has no permissions
+		// granted to it.
+
+        return (String) 
+            AccessController.doPrivileged(new PrivilegedExceptionAction() {
+                public Object run()
     {
-        File fl = new File(fileName);
         if(fl.exists()) {
             return "true";
         }else {
             return "false";
         }
     }
+            });
+    }
 
 
     /**
@@ -129,6 +165,8 @@ private static boolean removeDirectory(File directory) {
 
     /**
      *	Remove a directory and all of its contents.
+     * This method is  called by some tests through a SQL function:
+     * removeDirectory(fileName varchar(128)) returns VARCHAR(100)
      *   
      *  @param name the file's name.
      * @return     <tt>"true"</tt> if the omplete directory was removed
@@ -136,9 +174,22 @@ private static boolean removeDirectory(File directory) {
      *              the files in the directory may have been removed.
      */
 
-	public static String removeDirectory(String directory)
+	public static String removeDirectory(final String directory)
+        throws PrivilegedActionException
 	{
-	    return (removeDirectory(new File(directory)) ? "true" : "false");
+        // needs to run in a privileged block as it will be
+		// called through a SQL statement and thus a generated
+		// class. The generated class on the stack has no permissions
+		// granted to it.
+
+        return (String) 
+            AccessController.doPrivileged(new PrivilegedExceptionAction() {
+                    public Object run()
+                    {
+                        return (removeDirectory(
+                               new File(directory)) ? "true" : "false");
+                    }
+                });
 	}
     
 }
