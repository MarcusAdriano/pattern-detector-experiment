diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java
index 7bf9a43b..962f5d2f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java
@@ -23,6 +23,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.BufferedInputStream;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
@@ -31,8 +36,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.impl.tools.ij.utilMain;
 import org.apache.derby.tools.ij;
 
+
 public class wisconsin {
 
+
 	public static void main(String[] args) throws Throwable{
 		ij.getPropertyArg(args); 
         Connection conn = ij.startJBMS();
@@ -43,22 +50,21 @@ public static void main(String[] args) throws Throwable{
         createTables(conn, true);
         
         BufferedInputStream inStream;
-        
+        String resource = "org/apache/derbyTesting/functionTests/tests/" +
+                "lang/wisc_setup.sql";  
 		// set input stream
-		String filePath = "wisc_setup.sql";
+        URL sql = getTestResource(resource);
+        InputStream sqlIn = openTestResource(sql);
+        if (sqlIn == null ) {
+            throw new Exception("SQL Resource missing:" +
+                    resource);
+        }
 
-		try 
-		{
-			inStream = new BufferedInputStream(new FileInputStream(filePath), 
+        inStream = new BufferedInputStream(sqlIn, 
 							utilMain.BUFFEREDFILESIZE);		
-		} catch (FileNotFoundException e)
-		{
-			System.out.println("unable to find input file "+filePath);
-			throw e;
-		}
 
 		ij.runScript(conn, inStream, "US-ASCII",
-				System.out, (String) null);
+			     System.out, (String) null );
 		conn.commit();
 	}
 	
@@ -204,4 +210,47 @@ public static void createTables(Connection conn, boolean compress, int numRows)
 		conn.commit();
 	}
 	
+	
+    /**
+     * Open the URL for a a test resource, e.g. a policy
+     * file or a SQL script.
+     * @param url URL obtained from getTestResource
+     * @return An open stream
+    */
+    protected static InputStream openTestResource(final URL url)
+        throws PrivilegedActionException
+    {
+        return (InputStream)AccessController.doPrivileged
+        (new java.security.PrivilegedExceptionAction(){
+
+            public Object run() throws IOException{
+            return url.openStream();
+
+            }
+
+        }
+         );     
+    }
+    
+    /**
+     * Obtain the URL for a test resource, e.g. a policy
+     * file or a SQL script.
+     * @param name Resource name, typically - org.apache.derbyTesing.something
+     * @return URL to the resource, null if it does not exist.
+     */
+    protected static URL getTestResource(final String name)
+    {
+
+    return (URL)AccessController.doPrivileged
+        (new java.security.PrivilegedAction(){
+
+            public Object run(){
+            return this.getClass().getClassLoader().
+                getResource(name);
+
+            }
+
+        }
+         );
+    }  
 }
