diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DateTime.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DateTime.java
index 01ee7211..f67fe20c 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DateTime.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DateTime.java
@@ -477,19 +477,22 @@ public static final int timestampToTimestampBytes(byte[] buffer,
                 10 * (((int) time.charAt(6)) - zeroBase) +
                 (((int) time.charAt(7)) - zeroBase);
 
+        // The SQL standard specifies that the date portion of the returned
+        // timestamp should be set to the current date. See DERBY-889 for
+        // more details.
+        java.util.Date today = new java.util.Date();
         if (recyclableTimestamp == null) {
-            return new java.sql.Timestamp(0, 0, 1, hour, minute, second, 0);
-        } else {
-            recyclableTimestamp.setYear(0);
-            recyclableTimestamp.setMonth(0);
-            recyclableTimestamp.setDate(1);
+            recyclableTimestamp = new java.sql.Timestamp(today.getTime());
+        }
+        else {
+            recyclableTimestamp.setTime(today.getTime());
+        }
             recyclableTimestamp.setHours(hour);
             recyclableTimestamp.setMinutes(minute);
             recyclableTimestamp.setSeconds(second);
             recyclableTimestamp.setNanos(0);
             return recyclableTimestamp;
         }
-    }
     
     
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java
index 27194930..43836b24 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java
@@ -75,11 +75,6 @@ public static Test suite()
     {
         TestSuite suite = new TestSuite(TimeHandlingTest.class);
         
-        // Once DERBY-889 is fixed the methods should be renamed
-        // and these lines removed so they are added under the default mechanism.
-        suite.addTest(new TimeHandlingTest("derby889testInertTime"));
-        suite.addTest(new TimeHandlingTest("derby889testCurrentTime"));
-        
         suite.addTest(TestConfiguration.clientServerSuite(TimeHandlingTest.class));
         
         return new CleanDatabaseTestSetup(suite) {
@@ -149,13 +144,11 @@ protected void setUp() throws UnsupportedEncodingException, SQLException
      * The returned values are fetched using checkTimeValue thus inheriting
      * all the checks within that method.
      * <BR>
-     * Once DERBY-889 is fixed this test should be renamed so that it
-     * loses the prefix derby889 (and the specific adding of this test
-     * in the suite() method removed.
+     * 
      * @throws SQLException
      * @throws UnsupportedEncodingException 
      */
-    public void derby889testInertTime() throws SQLException, UnsupportedEncodingException
+    public void testInertTime() throws SQLException, UnsupportedEncodingException
     {
         getConnection().setAutoCommit(false);
         // Insert a set of time values, 
@@ -252,13 +245,11 @@ private Time getCodedTime(int id)
      * is correctly between the start time of the statement
      * execution and the first fetch or completion.
      * <BR>
-     * Once DERBY-889 is fixed this test should be renamed so that it
-     * loses the prefix derby889 (and the specific adding of this test
-     * in the suite() method removed.
+     * 
      * @throws SQLException
      * @throws InterruptedException 
      */
-    public void derby889testCurrentTime() throws SQLException, InterruptedException
+    public void testCurrentTime() throws SQLException, InterruptedException
     {      
         currentFunctionTests(Types.TIME, CURRENT_TIME_FUNCTIONS);      
     }
