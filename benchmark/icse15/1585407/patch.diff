diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java
index eb28d1a3..dd83439e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java
@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.io.File;
 import java.io.IOException;
-import java.nio.file.FileStore;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.attribute.AclEntry;
@@ -40,20 +39,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 final class FilePermissionServiceImpl implements FilePermissionService {
     public boolean limitAccessToOwner(File file) throws IOException {
         Path fileP = file.toPath();
-        FileStore fileStore = Files.getFileStore(fileP);
 
         // If we have a posix view, just return and fall back on
         // the JDK 6 approach.
-        if (fileStore.supportsFileAttributeView(PosixFileAttributeView.class)) {
+        PosixFileAttributeView posixView = Files.getFileAttributeView(
+                fileP, PosixFileAttributeView.class);
+        if (posixView != null) {
             return false;
         }
 
-        if (!fileStore.supportsFileAttributeView(AclFileAttributeView.class)) {
-            return false;
-        }
-
-        AclFileAttributeView aclView =
-                Files.getFileAttributeView(fileP, AclFileAttributeView.class);
+        AclFileAttributeView aclView = Files.getFileAttributeView(
+                fileP, AclFileAttributeView.class);
         if (aclView == null) {
             return false;
         }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java
index 5edd6416..d44cea0b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java
@@ -515,12 +515,9 @@ public void dotestEmbeddedIsLax() throws Exception {
     private static Class<?> linkOptionArrayClz;
     private static Class<?> linkOptionClz;
     private static Class<?> stringArrayClz;
-    private static Class<?> fileStoreClz;
 
     private static Method get;
     private static Method getFileAttributeView;
-    private static Method supportsFileAttributeView;
-    private static Method getFileStore;
     private static Method getOwner;
     private static Method getAcl;
     private static Method principal;
@@ -632,8 +629,6 @@ public Boolean run() throws Exception {
                             "java.nio.file.LinkOption");
                         stringArrayClz = Class.forName(
                             "[Ljava.lang.String;");
-                        fileStoreClz = Class.forName(
-                            "java.nio.file.FileStore");
 
                         get = pathsClz.
                             getMethod("get",
@@ -645,11 +640,6 @@ public Boolean run() throws Exception {
                                       new Class[]{pathClz,
                                                   Class.class,
                                                   linkOptionArrayClz});
-                        supportsFileAttributeView = fileStoreClz.getMethod(
-                            "supportsFileAttributeView",
-                            new Class[]{Class.class});
-                        getFileStore = filesClz.getMethod("getFileStore",
-                                                          new Class[]{pathClz});
                         getOwner = filesClz.
                             getMethod(
                                 "getOwner",
@@ -702,16 +692,6 @@ public Boolean run() throws Exception {
 
                         // ACLs supported on this platform? Check the current
                         // file system:
-                        Object fileStore = getFileStore.invoke(
-                            null,
-                            new Object[]{fileP});
-
-                        boolean aclsSupported =
-                            ((Boolean)supportsFileAttributeView.invoke(
-                                fileStore,
-                                new Object[]{aclFileAttributeViewClz})).
-                            booleanValue();
-
                         Object aclView = getFileAttributeView.invoke(
                             null,
                             new Object[]{
@@ -726,8 +706,7 @@ public Boolean run() throws Exception {
                                 posixFileAttributeViewClz,
                                 Array.newInstance(linkOptionClz, 0)});
 
-                        if (aclsSupported && aclView != null &&
-                                posixView == null) {
+                        if (aclView != null && posixView == null) {
                             // Windows
                             Object owner = getOwner.invoke(
                                 null,
