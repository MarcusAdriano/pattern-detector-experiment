diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
index ac8e0b45..6940a4e9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
@@ -106,6 +106,7 @@ void rePrepare(LanguageConnectionContext lcc)
  	 * @param rollbackParentContext True if 1) the statement context is
 	 *  NOT a top-level context, AND 2) in the event of a statement-level
 	 *	 exception, the parent context needs to be rolled back, too.
+     * @param timeoutMillis timeout value in milliseconds.
 	 *
 	 * @return	A ResultSet for a statement. A ResultSet represents
 	 *		the results returned from the statement, if any.
@@ -114,27 +115,23 @@ void rePrepare(LanguageConnectionContext lcc)
 	 *
 	 * @exception StandardException		Thrown on failure
 	 */
-	ResultSet	execute(Activation activation, boolean executeQuery, boolean executeUpdate,
-		boolean rollbackParentContext) throws StandardException;
+    ResultSet execute(Activation activation,
+                      boolean executeQuery,
+                      boolean executeUpdate,
+                      boolean rollbackParentContext,
+                      long timeoutMillis)
+        throws StandardException;
 
 	/**
 		Simple form of execute(). Creates a new single use activation and executes it,
 		but also passes rollbackParentContext parameter (see above).
 	*/
-	ResultSet	execute(LanguageConnectionContext lcc, boolean rollbackParentContext)
+    ResultSet execute(LanguageConnectionContext lcc,
+                      boolean rollbackParentContext,
+                      long timeoutMillis)
 		throws StandardException;
 
     /**
-     * Sets the timeout for execution of this statement.
-     * The timeout value will be set in the assigned StatementContext object.
-     *
-     * @param timeoutMillis timeout value in milliseconds.
-     *
-     * @see org.apache.derby.iapi.sql.conn.StatementContext
-     */
-    void setQueryTimeout(long timeoutMillis);
-
-	/**
 	 * Get the ResultDescription for the statement.  The ResultDescription
 	 * describes what the results look like: what are the rows and columns?
 	 * <p>
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 6f14c4c8..fd606163 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -3200,8 +3200,7 @@ public void updateRow() throws SQLException {
                     act.getParameterValueSet().getParameterForSet(paramPosition++).setValue(currentRow.getColumn(i));
             }
             // Don't set any timeout when updating rows (use 0)
-            ps.setQueryTimeout(0L);
-            org.apache.derby.iapi.sql.ResultSet rs = ps.execute(act, false, true, true); //execute the update where current of sql
+            org.apache.derby.iapi.sql.ResultSet rs = ps.execute(act, false, true, true, 0L); //execute the update where current of sql
             rs.close();
             rs.finish();
             //For forward only resultsets, after a update, the ResultSet will be positioned right before the next row.
@@ -3246,8 +3245,7 @@ public void deleteRow() throws SQLException {
                 StatementContext statementContext = lcc.pushStatementContext(isAtomic, deleteWhereCurrentOfSQL.toString(), null, false, 0L);
                 org.apache.derby.iapi.sql.PreparedStatement ps = lcc.prepareInternalStatement(deleteWhereCurrentOfSQL.toString());
                 // Don't set any timeout when deleting rows (use 0)
-                ps.setQueryTimeout(0L);
-                org.apache.derby.iapi.sql.ResultSet rs = ps.execute(lcc, true); //execute delete where current of sql
+                org.apache.derby.iapi.sql.ResultSet rs = ps.execute(lcc, true, 0L); //execute delete where current of sql
                 rs.close();
                 rs.finish();
                 //For forward only resultsets, after a delete, the ResultSet will be positioned right before the next row.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index 19a3e189..45a089e9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -1138,8 +1138,11 @@ protected boolean executeStatement(Activation a,
 				a.reset();
 				a.setMaxRows(maxRows);
                 long timeoutMillis = (long)timeoutSeconds * 1000L;
-                ps.setQueryTimeout(timeoutMillis);
-				ResultSet resultsToWrap = ps.execute(a, executeQuery, executeUpdate, false);
+                ResultSet resultsToWrap = ps.execute(a,
+                                                     executeQuery,
+                                                     executeUpdate,
+                                                     false,
+                                                     timeoutMillis);
 				getWarnings(a.getWarnings());
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index f1a242af..539944a5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -138,7 +138,6 @@
 	private String execSchemaName;
 	protected boolean isAtomic;
 	protected String sourceTxt;
-    private long timeoutMillis; // Timeout value, in milliseconds.
 
 	private int inUseCount;
 
@@ -181,7 +180,6 @@
 		UUIDValue = uuidFactory.createUUID();
 		UUIDString = UUIDValue.toString();
 		spsAction = false;
-        timeoutMillis = 0L; // 0 means no timeout; default.
 	}
 
 	/**
@@ -238,24 +236,14 @@ public synchronized Activation	getActivation(LanguageConnectionContext lcc, bool
 		return ac;
 	}
 
-    /**
-     * Sets a timeout value for execution of this statement.
-     * Will also apply to each row fetch from the ResultSet
-     * produced by this statement.
-     *
-     * @param timeoutMillis Timeout value in milliseconds. 0 means no timeout.
-     */
-    public void setQueryTimeout(long timeoutMillis)
-    {
-        this.timeoutMillis = timeoutMillis;
-    }
-
-	public ResultSet execute(LanguageConnectionContext lcc, boolean rollbackParentContext)
+    public ResultSet execute(LanguageConnectionContext lcc,
+                             boolean rollbackParentContext,
+                             long timeoutMillis)
 		throws StandardException
 	{
 		Activation a = getActivation(lcc, false);
 		a.setSingleExecution();
-		return execute(a, false, false, rollbackParentContext);
+		return execute(a, false, false, rollbackParentContext, timeoutMillis);
 	}
 
 	/**
@@ -267,14 +255,19 @@ public ResultSet execute(LanguageConnectionContext lcc, boolean rollbackParentCo
 	  * @param rollbackParentContext True if 1) the statement context is
 	  *  NOT a top-level context, AND 2) in the event of a statement-level
 	  *	 exception, the parent context needs to be rolled back, too.
+      * @param timeoutMillis timeout value in milliseconds.
 	  *	@return	the result set to be pawed through
 	  *
 	  *	@exception	StandardException thrown on error
 	  */
 
-	public ResultSet execute
-	(Activation activation, boolean executeQuery, boolean executeUpdate,
-		boolean rollbackParentContext) throws StandardException 
+    public ResultSet execute(Activation activation,
+                             boolean executeQuery,
+                             boolean executeUpdate,
+                             boolean rollbackParentContext,
+                             long timeoutMillis)
+        throws
+            StandardException 
 	{
 		boolean				needToClearSavePoint = false;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index 896b3dee..87ce81e2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -2056,9 +2056,7 @@ private static void executeUpdate(LanguageConnectionContext lcc, String updateSt
         // This is a substatement; for now, we do not set any timeout
         // for it. We might change this behaviour later, by linking
         // timeout to its parent statement's timeout settings.
-        ps.setQueryTimeout(0L);
-
-		ResultSet rs = ps.execute(lcc, true);
+		ResultSet rs = ps.execute(lcc, true, 0L);
 		rs.close();
 		rs.finish();
 	}
@@ -2080,9 +2078,7 @@ private long getColumnMax(Activation activation, TableDescriptor td, String colu
 
         // This is a substatement, for now we do not set any timeout for it
         // We might change this later by linking timeout to parent statement
-        ps.setQueryTimeout(0L);
-
-		ResultSet rs = ps.execute(lcc, false);
+		ResultSet rs = ps.execute(lcc, false, 0L);
 		DataValueDescriptor[] rowArray = rs.getNextRow().getRowArray();
 		rs.close();
 		rs.finish();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java
index e5cc731c..7df3aca5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java
@@ -313,9 +313,7 @@ public	int getConstraintType()
             // This is a substatement; for now, we do not set any timeout
             // for it. We might change this behaviour later, by linking
             // timeout to its parent statement's timeout settings.
-            ps.setQueryTimeout(0L);
-
-			rs = ps.execute(lcc, false);
+			rs = ps.execute(lcc, false, 0L);
 			ExecRow row = rs.getNextRow();
 			if (SanityManager.DEBUG)
 			{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
index f1d64579..c02b75b9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
@@ -166,9 +166,7 @@ protected void executeSPS(SPSDescriptor sps) throws StandardException
                 // This is a substatement; for now, we do not set any timeout
                 // for it. We might change this behaviour later, by linking
                 // timeout to its parent statement's timeout settings.
-                ps.setQueryTimeout(0L);
-
-				ResultSet rs = ps.execute(spsActivation, false, false, false);
+				ResultSet rs = ps.execute(spsActivation, false, false, false, 0L);
                 if( rs.returnsRows())
                 {
                     // Fetch all the data to ensure that functions in the select list or values statement will
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java
index 96a46ca6..8a3d1e57 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java
@@ -39,12 +39,11 @@
  * This test consists of three parts:
  *
  * 1. Executes a SELECT query in 4 different threads concurrently.
- *    The query is designed to make the execution time for each
- *    ResultSet.next() operation unpredictable, and in the order
- *    of seconds for many of them. The executeQuery() call finishes
- *    quickly, but the fetch operations may take longer time than
- *    the timeout value set. Hence, this part tests getting timeouts
- *    from calls to ResultSet.next().
+ *    The query calls a user-defined, server-side function which
+ *    delays the execution, so that it takes several seconds even
+ *    though the data volume is really low. The fetch operations
+ *    take longer time than the timeout value set. Hence, this part
+ *    tests getting timeouts from calls to ResultSet.next().
  * 
  *    Two connections are used, two threads execute their statement
  *    in the context of one connection, the other two threads in the
@@ -54,7 +53,7 @@
  *    regardless of what connection/transaction it and other statements
  *    are executed in the context of.
  *    
- * 2. Executes a long-running INSERT query in two threads.
+ * 2. Executes an INSERT query in multiple threads.
  *    This part tests getting timeouts from calls to Statement.execute().
  *    Each thread executes the query in the context of a separate
  *    connection. There is no point in executing multiple statements
@@ -64,9 +63,9 @@
  *    calls to ResultSet.next() may be interleaved between the different
  *    threads).
  *
- *    Only one thread executes its statement with a timeout value set,
- *    this is to verify that the correct statement is affected by the
- *    timeout, while the other statement executes to completion.
+ *    Half of the threads execute their statement with a timeout value set,
+ *    this is to verify that the correct statements are affected by the
+ *    timeout, while the other statements execute to completion.
  *
  * 3. Sets an invalid (negative) timeout. Verifies that the correct
  *    exception is thrown.
@@ -75,7 +74,8 @@
  */
 public class SetQueryTimeoutTest
 {
-    private static final int TIMEOUT = 3; // In seconds
+    private static final int TIMEOUT = 1; // In seconds
+    private static final int CONNECTIONS = 100;
 
     private static void printSQLException(SQLException e)
     {
@@ -151,10 +151,10 @@ private static void exec(Connection connection,
         throws
             TestFailedException
     {
-        PreparedStatement statement = null;
+        Statement statement = null;
         try {
-            statement = connection.prepareStatement(queryString);
-            statement.execute();
+            statement = connection.createStatement();
+            statement.execute(queryString);
         } catch (SQLException e) {
             String sqlState = e.getSQLState();
             if (!ignoreExceptions.contains(sqlState)) {
@@ -192,12 +192,8 @@ private static void dropTables(Connection conn, String tablePrefix)
         Collection ignore = new HashSet();
         ignore.add(SQLState.LANG_OBJECT_DOES_NOT_EXIST.substring(0,5));
         
-        exec(conn, "drop table " + tablePrefix + "0", ignore);
-        exec(conn, "drop table " + tablePrefix + "1", ignore);
-        exec(conn, "drop table " + tablePrefix + "2", ignore);
-        exec(conn, "drop table " + tablePrefix + "3", ignore);
-        exec(conn, "drop table " + tablePrefix + "4", ignore);
-        exec(conn, "drop table " + tablePrefix + "5", ignore);
+        exec(conn, "drop table " + tablePrefix + "_orig", ignore);
+        exec(conn, "drop table " + tablePrefix + "_copy", ignore);
     }
     
     private static void prepareTables(Connection conn, String tablePrefix)
@@ -209,62 +205,30 @@ private static void prepareTables(Connection conn, String tablePrefix)
         dropTables(conn, tablePrefix);
         
         exec(conn,
-             "create table " + tablePrefix + "1 (a int, b char(1))");
+             "create table " + tablePrefix + "_orig (a int)");
 
         exec(conn,
-             "create table " + tablePrefix + "2 (a int, b char(2))");
-        
-        exec(conn,
-             "create table " + tablePrefix + "3 (a int, b char(4))");
-
-        exec(conn,
-             "create table " + tablePrefix + "4 (a int, b char(6))");
-
-        exec(conn,
-             "create table " + tablePrefix + "5 (a int, b char(8))");
-
-        exec(conn,
-             "insert into "
-             + tablePrefix + "1"
-             + " values(3,'a')"
-             + ",(7,'b')"
-             + ",(13,'c')"
-             + ",(37,'d')"
-             + ",(141,'e')"
-             + ",(1,'f')");
-        
-
-        exec(conn,
-             "insert into "
-             + tablePrefix + "2 select "
-             + tablePrefix + "1.a+"
-             + tablePrefix + "x.a,"
-             + tablePrefix + "1.b||"
-             + tablePrefix + "x.b from "
-             + tablePrefix + "1 join "
-             + tablePrefix + "1 as "
-             + tablePrefix + "x on 1=1");
+             "create table " + tablePrefix + "_copy (a int)");
         
         exec(conn,
              "insert into "
-             + tablePrefix + "3 select "
-             + tablePrefix + "2.a+"
-             + tablePrefix + "x.a,"
-             + tablePrefix + "2.b||"
-             + tablePrefix + "x.b from "
-             + tablePrefix + "2 join "
-             + tablePrefix + "2 as "
-             + tablePrefix + "x on 1=1");
+             + tablePrefix + "_orig"
+             + " values(0),(1),(2),(3),(4),(5),(6)");
+    }
         
-        exec(conn,
-             "insert into "
-             + tablePrefix + "4 select "
-             + tablePrefix + "3.a+"
-             + tablePrefix + "2.a,"
-             + tablePrefix + "3.b||"
-             + tablePrefix + "2.b from "
-             + tablePrefix + "3 join "
-             + tablePrefix + "2 on 1=1");
+    /**
+     * This is the user-defined function which is called from our queries
+     */
+    public static int delay(int seconds, int value)
+        throws
+            SQLException
+    {
+        try {
+            Thread.sleep(seconds * 1000);
+        } catch (InterruptedException e) {
+            // Ignore
+        }
+        return value;
     }
     
     private static void prepareForTimedQueries(Connection conn)
@@ -279,35 +243,29 @@ private static void prepareForTimedQueries(Connection conn)
             throw new TestFailedException("Should not happen", e);
         }
 
+        exec(conn, "CREATE FUNCTION DELAY(SECONDS INTEGER, VALUE INTEGER) RETURNS INTEGER PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.delay'");
+
         prepareTables(conn, "t");
-        prepareTables(conn, "u");
-        prepareTables(conn, "v");
-        prepareTables(conn, "x");
     }
     
     private static String getFetchQuery(String tablePrefix)
     {
-        return "select "
-            + tablePrefix + "4.a+"
-            + tablePrefix + "3.a,"
-            + tablePrefix + "4.b||"
-            + tablePrefix + "3.b from "
-            + tablePrefix + "4 left join "
-            + tablePrefix + "3 on 1=1 where mod("
-            + tablePrefix + "4.a+"
-            + tablePrefix + "3.a,1000)=0";
+        /**
+         * The reason for using the mod function here is to force
+         * at least one invocation of ResultSet.next() to read
+         * more than one row from the table before returning.
+         * This is necessary since timeout is checked only when
+         * reading rows from base tables, and when the first row
+         * is read, the query still has not exceeded the timeout.
+         */
+        return "select a from " + tablePrefix + "_orig where mod(DELAY(1,a),3)=0";
     }
     
     private static String getExecQuery(String tablePrefix)
     {
         return "insert into "
-            + tablePrefix + "5 select "
-            + tablePrefix + "3.a+"
-            + tablePrefix + "x.a,"
-            + tablePrefix + "3.b from "
-            + tablePrefix + "3 left join "
-            + tablePrefix + "3 as "
-            + tablePrefix + "x on 1=1";
+            + tablePrefix + "_copy select a from "
+            + tablePrefix + "_orig where DELAY(1,1)=1";
     }
     
     private static class StatementExecutor
@@ -330,12 +288,14 @@ public StatementExecutor(PreparedStatement statement,
             this.timeout = timeout;
             highestRunTime = 0;
             sqlException = null;
+            if (timeout > 0) {
             try {
                 statement.setQueryTimeout(timeout);
             } catch (SQLException e) {
                 sqlException = e;
             }
         }
+        }
         
         private void setHighestRunTime(long runTime)
         {
@@ -469,9 +429,9 @@ private static void testTimeoutWithFetch(Connection conn1,
         // D - here just to create equal contention on conn1 and conn2
         
         PreparedStatement statementA = prepare(conn1, getFetchQuery("t"));
-        PreparedStatement statementB = prepare(conn1, getFetchQuery("u"));
-        PreparedStatement statementC = prepare(conn2, getFetchQuery("v"));
-        PreparedStatement statementD = prepare(conn2, getFetchQuery("x"));
+        PreparedStatement statementB = prepare(conn1, getFetchQuery("t"));
+        PreparedStatement statementC = prepare(conn2, getFetchQuery("t"));
+        PreparedStatement statementD = prepare(conn2, getFetchQuery("t"));
 
         StatementExecutor[] statementExecutor = new StatementExecutor[4];
         statementExecutor[0] = new StatementExecutor(statementA, true, TIMEOUT);
@@ -538,35 +498,45 @@ private static void testTimeoutWithFetch(Connection conn1,
     /**
      * Part two of this test.
      */
-    private static void testTimeoutWithExec(Connection conn1,
-                                            Connection conn2)
+    private static void testTimeoutWithExec(Connection[] connections)
         throws
             TestFailedException
     {
         System.out.println("Testing timeout with an execute operation");
 
+        for (int i = 0; i < connections.length; ++i) {
         try {
-            conn1.setAutoCommit(true);
-            conn2.setAutoCommit(true);
+                connections[i].setAutoCommit(true);
         } catch (SQLException e) {
             throw new TestFailedException("Should not happen", e);
         }
+        }
 
-        PreparedStatement statementA = prepare(conn1, getExecQuery("t"));
-        PreparedStatement statementB = prepare(conn2, getExecQuery("u"));
+        PreparedStatement statements[] = new PreparedStatement[connections.length];
+        for (int i = 0; i < statements.length; ++i) {
+            statements[i] = prepare(connections[i], getExecQuery("t"));
+        }
         
-        StatementExecutor exec0 = new StatementExecutor(statementA, false, TIMEOUT);
-        StatementExecutor exec1 = new StatementExecutor(statementB, false, 0);
+        StatementExecutor[] executors = new StatementExecutor[statements.length];
+        for (int i = 0; i < executors.length; ++i) {
+            int timeout =
+                (i % 2 == 0)
+                ? TIMEOUT
+                : 0;
+            executors[i] = new StatementExecutor(statements[i], false, timeout);
+        }
         
-        exec1.start();
-        exec0.start();
+        for (int i = 0; i < executors.length; ++i) {
+            executors[i].start();
+        }
 
+        for (int i = 0; i < executors.length; ++i) {
         try {
-            exec0.join();
-            exec1.join();
+                executors[i].join();
         } catch (InterruptedException e) {
             throw new TestFailedException("Should never happen", e);
         }
+        }
         
         /**
          * Actually, there is no guarantee that setting a query timeout
@@ -584,26 +554,34 @@ private static void testTimeoutWithExec(Connection conn1,
          * in this class (note that the TIMEOUT constant is in seconds,
          * while the execution time is in milliseconds). 
          */
+        for (int i = 0; i < executors.length; ++i) {
+            int timeout =
+                (i % 2 == 0)
+                ? TIMEOUT
+                : 0;
+            if (timeout > 0) {
         expectException(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT,
-                        exec0.getSQLException(),
+                                executors[i].getSQLException(),
                         "exec did not time out. Execution time: "
-                        + exec0.getHighestRunTime() + " ms");
-
-        System.out.println("Statement 0 timed out");
-
-        SQLException sqlException = exec1.getSQLException();
+                                + executors[i].getHighestRunTime() + " ms");
+            } else {
+                SQLException sqlException = executors[i].getSQLException();
         if (sqlException != null) {
             throw new TestFailedException(sqlException);
         }
+            }
+        }
+
+        System.out.println("Statements that should time out timed out, and statements that should complete completed");
 
-        System.out.println("Statement 1 completed");
+        for (int i = 0; i < statements.length; ++i) {
         try {
-            statementA.close();
-            statementB.close();
+                statements[i].close();
         } catch (SQLException e) {
             throw new TestFailedException(e);
         }
     }
+    }
     
     private static void testInvalidTimeoutValue(Connection conn)
         throws
@@ -674,45 +652,44 @@ public void go(String[] args)
     {
         System.out.println("Test SetQueryTimeoutTest starting");
         
-        Connection conn1 = null;
-        Connection conn2 = null;
+        Connection[] connections = new Connection[CONNECTIONS];
+        for (int i = 0; i < connections.length; ++i) {
+            connections[i] = null;
+        }
 
         try {
             // Load the JDBC Driver class
             // use the ij utility to read the property file and
             // create connections
             ij.getPropertyArg(args);
-            conn1 = ij.startJBMS();
-            conn2 = ij.startJBMS();
+            for (int i = 0; i < connections.length; ++i) {
+                connections[i] = ij.startJBMS();
+            }
 
             System.out.println("Got connections");
             
-            conn1.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
-            conn2.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
+            for (int i = 0; i < connections.length; ++i) {
+                connections[i].setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
+            }
 
-            prepareForTimedQueries(conn1);
-            testTimeoutWithFetch(conn1, conn2);
-            testTimeoutWithExec(conn1, conn2);
-            testInvalidTimeoutValue(conn1);
+            prepareForTimedQueries(connections[0]);
+            testTimeoutWithFetch(connections[0], connections[1]);
+            testTimeoutWithExec(connections);
+            testInvalidTimeoutValue(connections[0]);
   
             System.out.println("Test SetQueryTimeoutTest PASSED");
         } catch (Throwable e) {
             System.out.println("Test SetQueryTimeoutTest FAILED");
             e.printStackTrace();
         } finally {
-            if (conn2 != null) {
+            for (int i = connections.length - 1; i >= 0; --i) {
+                if (connections[i] != null) {
                 try {
-                    conn2.close();
+                        connections[i].close();
                 } catch (SQLException ex) {
                     printSQLException(ex);
                 }
             }
-            if (conn1 != null) {
-                try {
-                    conn1.close();
-                } catch (SQLException ex) {
-                    printSQLException(ex);
-                }
             }
             System.out.println("Closed connections");
         }
