diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java
index c334e101..36301a43 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java
@@ -82,6 +82,12 @@ public NClob createNClob()
 		return physicalConnection_.createQueryObject( ifc );
     }
     
+    public <T extends BaseQuery>T createQueryObject(Class<T> ifc, java.sql.Connection conn)
+        throws SQLException {
+		checkForNullPhysicalConnection();
+		return physicalConnection_.createQueryObject( ifc, conn );
+    }
+    
     public SQLXML createSQLXML()
         throws SQLException {
 		checkForNullPhysicalConnection();
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java
index 9d19e31b..544d9c24 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java
@@ -28,6 +28,7 @@
 import java.sql.Blob;
 import java.sql.SQLClientInfoException;
 import java.sql.Clob;
+import java.sql.Connection;
 import java.sql.NClob;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -400,6 +401,23 @@ public Properties getClientInfo()
         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
     } 
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param conn Connection to use when invoking methods that access the Data Source
+     * @return concreat class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, Connection conn ) 
+                                                    throws SQLException {
+        try {
+            checkForClosedConnection();
+        } catch (SqlException se) {
+            throw se.getSQLException();
+        }
+        return QueryObjectFactory.createDefaultQueryObject (ifc, conn);
+    } 
+    
     /**
      * Returns false unless <code>interfaces</code> is implemented 
      * 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java
index 27ef2975..9c856c9c 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java
@@ -24,6 +24,7 @@
 import java.sql.QueryObjectFactory;
 import java.sql.QueryObjectGenerator;
 import java.sql.SQLException;
+import javax.sql.DataSource;
 import org.apache.derby.client.am.ClientMessageId;
 import org.apache.derby.client.am.SqlException;
 import org.apache.derby.shared.common.reference.SQLState;
@@ -69,6 +70,18 @@ public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
     }   
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param dataSource DataSource to use when invoking methods that access the Data Source
+     * @return concreat class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
+    }   
+    
     /**
      * Returns false unless <code>interfaces</code> is implemented 
      * 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource40.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource40.java
index c55e2ed7..d93888b0 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource40.java
@@ -24,6 +24,7 @@
 import java.sql.QueryObjectFactory;
 import java.sql.QueryObjectGenerator;
 import java.sql.SQLException;
+import javax.sql.DataSource;
 import org.apache.derby.client.am.ClientMessageId;
 import org.apache.derby.client.am.SqlException;
 import org.apache.derby.shared.common.reference.SQLState;
@@ -127,6 +128,18 @@ public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
     }   
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param dataSource DataSource to use when invoking methods that access the Data Source
+     * @return concreat class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
+    }   
+    
     /**
      * Returns false unless <code>interfaces</code> is implemented 
      * 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
index 420e4873..26c239ec 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
@@ -24,6 +24,7 @@
 import java.sql.QueryObjectFactory;
 import java.sql.QueryObjectGenerator;
 import java.sql.SQLException;
+import javax.sql.DataSource;
 import javax.sql.XAConnection;
 import org.apache.derby.client.ClientXAConnection40;
 import org.apache.derby.client.am.ClientMessageId;
@@ -93,6 +94,18 @@ public XAConnection getXAConnection(String user, String password) throws SQLExce
     }   
     
     /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param dataSource DataSource to use when invoking methods that access the Data Source
+     * @return concrete class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
+    }   
+    
+	/**
      * Returns false unless <code>interfaces</code> is implemented 
      * 
      * @param  interfaces             a Class defining an interface.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
index af0243c7..6b99e5b2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
@@ -24,6 +24,7 @@
 import java.sql.BaseQuery;
 import java.sql.Blob;
 import java.sql.Clob;
+import java.sql.Connection;
 import java.sql.SQLClientInfoException;
 import java.sql.NClob;
 import java.sql.SQLException;
@@ -270,6 +271,26 @@ public Properties getClientInfo()
         }
     }
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param conn Connection to use when invoking methods that access the Data Source
+     * @return concrete class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, Connection conn ) 
+		throws SQLException {
+        if (isClosed()) {
+            throw Util.noCurrentConnection();
+        }
+        try {
+            return getRealConnection().createQueryObject(ifc, conn);
+        } catch (SQLException sqle) {
+            notifyException(sqle);
+            throw sqle;
+        }
+    }
+
     /**
      * returns an instance of JDBC4.0 speccific class BrokeredStatement40
      * @param  statementControl BrokeredStatementControl
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
index c7dd8da1..eaa0cfe2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
@@ -25,6 +25,7 @@
 import java.sql.Blob;
 import java.sql.SQLClientInfoException;
 import java.sql.Clob;
+import java.sql.Connection;
 import java.sql.NClob;
 import java.sql.QueryObjectFactory;
 import java.sql.SQLException;
@@ -270,6 +271,19 @@ public Properties getClientInfo()
         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
     } 
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param conn Connection to use when invoking methods that access the Data Source
+     * @return concrete class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, Connection conn ) 
+                                                    throws SQLException {
+        checkIfClosed();
+        return QueryObjectFactory.createDefaultQueryObject (ifc, conn);
+    } 
+    
     /**
      * Returns false unless <code>interfaces</code> is implemented 
      * 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java
index 0bda33a1..1eed7ec6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java
@@ -24,6 +24,7 @@
 import java.sql.QueryObjectGenerator;
 import java.sql.SQLException;
 import javax.sql.ConnectionPoolDataSource;
+import javax.sql.DataSource;
 import javax.sql.PooledConnection;
 
 import org.apache.derby.impl.jdbc.Util;
@@ -106,13 +107,25 @@ public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
      * This method forwards all the calls to default query object provided by 
      * the jdk.
      * @param ifc interface to generated concreate class
-     * @return concreat class generated by default qury object generator
+     * @return concrete class generated by default qury object generator
      */
     public <T extends BaseQuery> T createQueryObject(Class<T> ifc) 
                                                     throws SQLException {
         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
     }
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param dataSource DataSource to use when invoking methods that access the Data Source
+     * @return concrete class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
+    }   
+
     /**
      * create and returns EmbedPooledConnection.
      */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java
index d848d784..575bb311 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java
@@ -23,9 +23,10 @@
 import java.sql.BaseQuery;
 import java.sql.QueryObjectFactory;
 import java.sql.QueryObjectGenerator;
-import org.apache.derby.impl.jdbc.Util;
 import java.sql.SQLException;
+import javax.sql.DataSource;
 
+import org.apache.derby.impl.jdbc.Util;
 import org.apache.derby.iapi.reference.SQLState;
 
 /** 
@@ -205,6 +206,18 @@ public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
     }        
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param dataSource DataSource to use when invoking methods that access the Data Source
+     * @return concrete class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
+    }   
+
     /**
      * Returns false unless <code>interfaces</code> is implemented 
      * 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java
index 5c291b8f..5978b411 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java
@@ -26,6 +26,7 @@
 import org.apache.derby.iapi.jdbc.ResourceAdapter;
 
 import java.sql.SQLException;
+import javax.sql.DataSource;
 import javax.sql.XAConnection;
 import javax.sql.XADataSource;
 
@@ -121,6 +122,18 @@ public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
     } 
     
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @param dataSource DataSource to use when invoking methods that access the Data Source
+     * @return concrete class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
+    }   
+
     /**
      * Intantiate and returns EmbedXAConnection.
      * @param user 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java
index 0187e91a..61f9ab21 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java
@@ -151,6 +151,7 @@ public void testCreateNClobNotImplemented()
     public void testCreateQueryObjectIsImplemented()
         throws SQLException {
         con.createQueryObject(TestQuery.class);
+        con.createQueryObject(TestQuery.class, con);
     }
 
     public void testCreateSQLXMLNotImplemented()
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestQueryObject.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestQueryObject.java
index 46f8a4ed..220ac053 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestQueryObject.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestQueryObject.java
@@ -57,7 +57,17 @@ public static void initDB (Connection con) throws Exception {
      * @param con 
      */
     public static void testConnectionQuery (Connection con) throws Exception {
-        TestQuery query = con.createQueryObject (TestQuery.class);
+
+		vetQueryObject( con.createQueryObject (TestQuery.class) );
+		vetQueryObject( con.createQueryObject (TestQuery.class, con) );
+    }
+    
+    /**
+     * Verify the contents of query object
+     */
+	private	static	void	vetQueryObject( TestQuery query )
+		throws Exception
+	{
         if (query.getAllData().size() != RECORD_COUNT)
             System.out.println ("expected result size 10 actual " 
                     + query.getAllData().size());
