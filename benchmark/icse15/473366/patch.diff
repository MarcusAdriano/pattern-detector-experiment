diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java
index a18e968c..e69de29b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestDataSourceFactory.java
@@ -1,107 +0,0 @@
-/*
-
-   Derby - Class org.apache.derbyTesting.functionTests.util.TestUtil
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-
-package org.apache.derbyTesting.functionTests.util;
-
-import java.util.Properties;
-import javax.sql.DataSource;
-import javax.sql.ConnectionPoolDataSource;
-import javax.sql.XADataSource;
-
-import org.apache.derbyTesting.junit.TestConfiguration;
-
-/**
- * Utility class for JDBC JUnit tests.
- * Contains methods to obtain the various datasources.
- */
-
-public class TestDataSourceFactory {
-
-    /**
-     * Return a <code>DataSource</code> for the appropriate framework.
-     *
-     * @param attrs properties for the data source
-     * @return a <code>DataSource</code> object
-     * @see TestUtil#getDataSource(Properties)
-     */
-    public static DataSource getDataSource(Properties attrs) {
-        return TestUtil.getDataSource(attrs);
-    }
-
-    /**
-     * Return a <code>DataSource</code> which can establish a
-     * connection to the default database.
-     *
-     * @return a <code>DataSource</code> object
-     */
-    public static DataSource getDataSource() {
-        return getDataSource(TestConfiguration.getDefaultDataSourceProperties());
-    }
-
-    /**
-     * Return a <code>ConnectionPoolDataSource</code> for the
-     * appropriate framework.
-     *
-     * @param attrs properties for the data source
-     * @return a <code>ConnectionPoolDataSource</code> object
-     * @see TestUtil#getConnectionPoolDataSource(Properties)
-     */
-    public static ConnectionPoolDataSource
-        getConnectionPoolDataSource(Properties attrs)
-    {
-        return TestUtil.getConnectionPoolDataSource(attrs);
-    }
-
-    /**
-     * Return a <code>ConnectionPoolDataSource</code> which can
-     * establish a connection to the default database.
-     *
-     * @return a <code>ConnectionPoolDataSource</code> object
-     */
-    public static ConnectionPoolDataSource getConnectionPoolDataSource() {
-        return getConnectionPoolDataSource(TestConfiguration.getDefaultDataSourceProperties());
-    }
-
-    /**
-     * Return an <code>XADataSource</code> for the appropriate
-     * framework.
-     *
-     * @param attrs properties for the data source
-     * @return an <code>XADataSource</code> object
-     * @see TestUtil#getXADataSource(Properties)
-     */
-    public static XADataSource getXADataSource(Properties attrs) {
-        return TestUtil.getXADataSource(attrs);
-    }
-
-    /**
-     * Return an <code>XADataSource</code> which can establish a
-     * connection to the default database.
-     *
-     * @return an <code>XADataSource</code> object
-     */
-    public static XADataSource getXADataSource() {
-        return getXADataSource(TestConfiguration.getDefaultDataSourceProperties());
-    }	
-
-}
-
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
index a87dac69..524d8877 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
@@ -194,13 +194,6 @@ public Connection openDefaultConnection()
         return conn;
     }
     
-    public Connection openConnection(String databaseName) throws SQLException
-    {
-        Connection conn = getTestConfiguration().openConnection(databaseName);
-        initializeConnection(conn);
-        return conn;        
-    }
-    
     /**
      * Run a SQL script through ij discarding the output
      * using this object's default connection. Intended for
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 72c29df6..79bba739 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -32,8 +32,6 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
-
 /**
  * Class which holds information about the configuration of a Test.
  */
@@ -623,48 +621,6 @@ Connection openDefaultConnection()
         return connector.openConnection();
     }
     
-    /**
-     * Open a connection to a database.
-     * If the database does not exist, it will be created.
-     * A default username and password will be used for the connection.
-     *
-     * @param databaseName database to connect to
-     *
-     * @return connection to database.
-     */
-    Connection openConnection (String databaseName) throws SQLException {
-        return getConnection(databaseName, "create=true");
-    }
-    
-    /**
-     * Get a connection to a database using the specified connection 
-     * attributes.
-     * 
-     * @param databaseName database to connect to
-     * @param connAttrs connection attributes
-     * @return connection to database.
-     * @throws SQLException
-     */
-    private Connection getConnection (String databaseName, String connAttrs) 
-    	throws SQLException {
-        Connection con = null;
-        JDBCClient client =getJDBCClient();
-        if (JDBC.vmSupportsJDBC2()) {            
-            loadJDBCDriver(client.getJDBCDriverName());
-            {
-                con = DriverManager.getConnection(
-                        getJDBCUrl(databaseName) + ";" + connAttrs,
-                        getUserName(),
-                        getUserPassword());
-            }
-        } else {
-            //Use DataSource for JSR169
-            Properties attrs = getDataSourcePropertiesForDatabase(databaseName, connAttrs);
-            con = TestDataSourceFactory.getDataSource(attrs).getConnection();
-        }
-        return con;
-    }
-    
     /**
      * Shutdown the database for this configuration
      * assuming it is booted.
@@ -807,65 +763,6 @@ public Object run(){
      */
     private Connector connector;
     
-
-    /**
-     * Generate properties which can be set on a
-     * <code>DataSource</code> in order to connect to the default
-     * database. If the database does not exist, it will be created.
-     *
-     * @return a <code>Properties</code> object containing server
-     * name, port number, database name and other attributes needed to
-     * connect to the default database
-     */
-    public static Properties getDefaultDataSourceProperties() {
-        return getDataSourcePropertiesForDatabase(
-                getCurrent().getDatabaseName(), "create=true");
-    }
-    
-    /**
-     * Generate properties which can be set on a <code>DataSource</code> 
-     * in order to connect to a database using the specified connection 
-     * attributes.
-     * 
-     * @param databaseName database to connect to
-     * @param connAttrs connection attributes
-     * @return
-     */
-    private static Properties getDataSourcePropertiesForDatabase
-    	(String databaseName, String connAttrs) 
-    {
-        Properties attrs = new Properties();
-        if (!getCurrent().getJDBCClient().isEmbedded()) {
-            attrs.setProperty("serverName", getCurrent().getHostName());
-            attrs.setProperty("portNumber", Integer.toString(getCurrent().getPort()));
-        }
-        attrs.setProperty("databaseName", databaseName);
-        attrs.setProperty("connectionAttributes", connAttrs);
-        return attrs;
-    }
-
-    /**
-     * Load the specified JDBC driver
-     *
-     * @param driverClass name of the JDBC driver class.
-     * @throws SQLException if loading the driver fails.
-     */
-    private static void loadJDBCDriver(String driverClass) 
-        throws SQLException {
-        try {
-            Class.forName(driverClass).newInstance();
-        } catch (ClassNotFoundException cnfe) {
-            throw new SQLException("Failed to load JDBC driver '" + 
-                                    driverClass + "': " + cnfe.getMessage());
-        } catch (IllegalAccessException iae) {
-            throw new SQLException("Failed to load JDBC driver '" +
-                                    driverClass + "': " + iae.getMessage());
-        } catch (InstantiationException ie) {
-            throw new SQLException("Failed to load JDBC driver '" +
-                                    driverClass + "': " + ie.getMessage());
-        }
-    }
-    
     /*
      * SecurityManager related configuration.
      */
