diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
index ac8b76a2..75161d67 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
@@ -1349,15 +1349,17 @@ private void countScanFlags()
      * every ColumnReference in the predicate is itself a ColumnReference.
 	 *
 	 * This is useful when attempting to push predicates into non-flattenable
-	 * views or derived tables.
+	 * views or derived tables or into unions.
 	 *
 	 * @param select	The underlying SelectNode.
+	 * @param copyPredicate		Whether to make a copy of the predicate
+	 *							before pushing
 	 *
 	 * @return Nothing.
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	void pushExpressionsIntoSelect(SelectNode select)
+	void pushExpressionsIntoSelect(SelectNode select, boolean copyPredicate)
 		throws StandardException
 	{
 		/* Walk list backwards since we can delete while
@@ -1392,7 +1394,7 @@ void pushExpressionsIntoSelect(SelectNode select)
 				}
 			}
 
-			if (state)
+			if (state && !copyPredicate)
 			{
 				// keep the counters up to date when removing a predicate
 				if (predicate.isStartKey())
@@ -1408,11 +1410,66 @@ void pushExpressionsIntoSelect(SelectNode select)
 				predicate.clearScanFlags();
 				// Remove this predicate from the list
 				removeElementAt(index);
+			}
+
+			if (copyPredicate)
+			{
+				// Copy this predicate and push this instead
+				AndNode andNode = predicate.getAndNode();
+
+				// Make sure we are only pushing simple binary relations for now
+				// It should be benificial to push expressions that can be pushed, so they can be applied
+				// closer to the data.
+				if (! (andNode.getLeftOperand() instanceof BinaryRelationalOperatorNode))
+					continue;
+
+				BinaryRelationalOperatorNode opNode = (BinaryRelationalOperatorNode) andNode.getLeftOperand();
+				if (! (opNode.getLeftOperand() instanceof ColumnReference) ||
+				    ! (opNode.getRightOperand() instanceof ConstantNode ||
+					 opNode.getRightOperand() instanceof ParameterNode))
+					continue;
+
+				ColumnReference crNode = (ColumnReference) opNode.getLeftOperand();
+				// Remap this crNode to underlying column reference in the select, if possible.
+				ColumnReference newCRNode = select.findColumnReferenceInResult(crNode.columnName);
+				if (newCRNode == null)
+					continue;
+
+				// Create a copy of the predicate to push down
+				// <column> <relop> <value> AND TRUE
+				BinaryRelationalOperatorNode newRelop = (BinaryRelationalOperatorNode)
+							getNodeFactory().getNode(
+										opNode.getNodeType(),
+										newCRNode,
+										opNode.getRightOperand(),
+										getContextManager());
+
+				newRelop.bindComparisonOperator();
+
+				ValueNode trueNode = (ValueNode) getNodeFactory().getNode(
+										C_NodeTypes.BOOLEAN_CONSTANT_NODE,
+										Boolean.TRUE,
+										getContextManager());
+				AndNode newAnd = (AndNode) getNodeFactory().getNode(
+													C_NodeTypes.AND_NODE,
+													newRelop,
+													trueNode,
+													getContextManager());
+				newAnd.postBindFixup();
+				JBitSet tableMap = new JBitSet(select.referencedTableMap.size());
+				Predicate newPred = (Predicate) getNodeFactory().getNode(
+												C_NodeTypes.PREDICATE,
+												newAnd,
+												tableMap,
+												getContextManager());
+				predicate = newPred;
+			}
+
 				// Push it into the select
+			if (state)
 				select.pushExpressionsIntoSelect(predicate);
 			}
 		}		
-	}
 
 	/**
 	 * Mark all of the RCs and the RCs in their RC/VCN chain
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
index 60c1d6ad..f256fb40 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
@@ -953,9 +953,20 @@ public void pushExpressions(PredicateList predicateList)
 		 */
 		if (pushPList != null && (childResult instanceof SelectNode))
 		{
-			pushPList.pushExpressionsIntoSelect((SelectNode) childResult);
+			pushPList.pushExpressionsIntoSelect((SelectNode) childResult, false);
 		}
 
+		/* DERBY-649: Push simple predicates into Unions. It would be up to UnionNode
+		 * to decide if these predicates can be pushed further into underlying SelectNodes
+		 * or UnionNodes.  Note, we also keep the predicateList at this
+		 * ProjectRestrictNode in case the predicates are not pushable or only
+		 * partially pushable.
+		 *
+		 * It is possible to expand this optimization in UnionNode later.
+		 */
+		if (pushPList != null && (childResult instanceof UnionNode))
+			((UnionNode)childResult).pushExpressions(pushPList);
+
 		if (restrictionList == null)
 		{
 			restrictionList = pushPList;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index 70e27c74..f103d703 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -293,6 +293,47 @@ public GroupByList getGroupByList()
 		return groupByList;
 	}
 
+	/*
+	 * DERBY-649: Find colName in the result columns and return underlying
+	 * columnReference.  This is useful for pushing union predicates into underlying
+	 * select statements.
+	 *
+	 * Handle the case of single table selects for now. Also if there is an
+	 * expression under the result column, it is not possible yet to push the
+	 * predicates for now.
+	 *
+	 * @return ColumnReference	If colName could be remapped to a table reference
+	 */
+	public ColumnReference findColumnReferenceInResult(String colName)
+					throws StandardException
+	{
+		if (fromList.size() != 1)
+			return null;
+
+		// This logic is similar to SubQueryNode.singleFromBaseTable(). Refactor
+		FromTable ft = (FromTable) fromList.elementAt(0);
+		if (! ((ft instanceof ProjectRestrictNode) &&
+		 		((ProjectRestrictNode) ft).getChildResult() instanceof FromBaseTable) &&
+				!(ft instanceof FromBaseTable))
+			return null;
+
+		// Loop through the result columns looking for a match
+		int rclSize = resultColumns.size();
+		for (int index = 0; index < rclSize; index++)
+		{
+			ResultColumn rc = (ResultColumn) resultColumns.elementAt(index);
+			if (! (rc.getExpression() instanceof ColumnReference))
+				return null;
+
+			ColumnReference crNode = (ColumnReference) rc.getExpression();
+
+			if (crNode.columnName.equals(colName))
+				return (ColumnReference) crNode.getClone();
+		}
+
+		return null;
+	}
+
 	/**
 	 * Return the whereClause for this SelectNode.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
index 8fa4ec52..48df12df 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
@@ -257,6 +257,34 @@ public CostEstimate optimizeIt(Optimizer optimizer,
 		return costEstimate;
 	}
 
+	/*
+	 * DERBY-649: Handle pushing predicates into UnionNodes. For now, we only push simple
+	 * single column predicates that are binaryOperations. It should be possible to expand
+	 * this logic to cover more cases. Even pushing expressions (like a+b = 10) into SELECTs
+	 * would improve performance, even if they don't make Qualifiers. It would mean
+	 * evaluating expressions closer to data and hence could avoid sorting or other
+	 * overheads that UNION may require.
+	 *
+	 * Note that the predicates are not removed after pushing. This is to ensure if
+	 * pushing is not possible or only partially feasible.
+	 */
+	public void pushExpressions(PredicateList predicateList)
+					throws StandardException
+	{
+		// If left or right side is a UnionNode, further push the predicate list
+		// Note, it is OK not to push these predicates since they are also evaluated
+		// in the ProjectRestrictNode.
+		if (leftResultSet instanceof UnionNode)
+			((UnionNode)leftResultSet).pushExpressions(predicateList);
+		else if (leftResultSet instanceof SelectNode)
+			predicateList.pushExpressionsIntoSelect((SelectNode)leftResultSet, true);
+
+		if (rightResultSet instanceof UnionNode)
+			((UnionNode)rightResultSet).pushExpressions(predicateList);
+		else if (rightResultSet instanceof SelectNode)
+			predicateList.pushExpressionsIntoSelect((SelectNode)rightResultSet, true);
+	}
+
 	/**
 	 * @see Optimizable#modifyAccessPath
 	 *
