diff --git a/lucene/dev/branches/lucene_solr_3_3/lucene/backwards/src/test/org/apache/lucene/search/TestWildcard.java b/lucene/dev/branches/lucene_solr_3_3/lucene/backwards/src/test/org/apache/lucene/search/TestWildcard.java
index ac1f95d9..e38d658d 100644
--- a/lucene/dev/branches/lucene_solr_3_3/lucene/backwards/src/test/org/apache/lucene/search/TestWildcard.java
+++ b/lucene/dev/branches/lucene_solr_3_3/lucene/backwards/src/test/org/apache/lucene/search/TestWildcard.java
@@ -119,46 +119,6 @@ public void testEmptyTerm() throws IOException {
     indexStore.close();
   }
   
-  /**
-   * Tests if a WildcardQuery that has only a trailing * in the term is
-   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be
-   * preserved.
-   */
-  public void testPrefixTerm() throws IOException {
-    Directory indexStore = getIndexStore("field", new String[]{"prefix", "prefixx"});
-    IndexSearcher searcher = new IndexSearcher(indexStore, true);
-
-    MultiTermQuery wq = new WildcardQuery(new Term("field", "prefix*"));
-    assertMatches(searcher, wq, 2);
-    
-    MultiTermQuery expected = new PrefixQuery(new Term("field", "prefix"));
-    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.1F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
-    wq.setBoost(0.2F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
-    wq.setBoost(0.3F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.4F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    searcher.close();
-    indexStore.close();
-  }
-
   /**
    * Tests Wildcard queries with an asterisk.
    */
diff --git a/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java b/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
index c38a7d24..5d428012 100644
--- a/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -286,8 +286,13 @@ protected void incTotalNumberOfTerms(int inc) {
     numberOfTerms += inc;
   }
 
+  /**
+   * To rewrite to a simpler form, instead return a simpler
+   * enum from {@link #getEnum(IndexReader)}.  For example,
+   * to rewrite to a single term, return a {@link SingleTermEnum}
+   */
   @Override
-  public Query rewrite(IndexReader reader) throws IOException {
+  public final Query rewrite(IndexReader reader) throws IOException {
     return rewriteMethod.rewrite(reader, this);
   }
 
diff --git a/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/WildcardQuery.java b/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/WildcardQuery.java
index f6c42c39..e090f0d9 100644
--- a/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/WildcardQuery.java
+++ b/lucene/dev/branches/lucene_solr_3_3/lucene/src/java/org/apache/lucene/search/WildcardQuery.java
@@ -52,11 +52,15 @@ public WildcardQuery(Term term) {
 
   @Override
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
-    if (termContainsWildcard)
+    if (termIsPrefix) {
+      return new PrefixTermEnum(reader, term.createTerm(term.text()
+          .substring(0, term.text().indexOf('*')))); 
+    } else if (termContainsWildcard) {
       return new WildcardTermEnum(reader, getTerm());
-    else
+    } else {
       return new SingleTermEnum(reader, getTerm());
   }
+  }
   
   /**
    * Returns the pattern term.
@@ -65,19 +69,6 @@ public Term getTerm() {
     return term;
   }
 
-  @Override
-  public Query rewrite(IndexReader reader) throws IOException {
-    if (termIsPrefix) {
-      MultiTermQuery rewritten = new PrefixQuery(term.createTerm(term.text()
-          .substring(0, term.text().indexOf('*'))));
-      rewritten.setBoost(getBoost());
-      rewritten.setRewriteMethod(getRewriteMethod());
-      return rewritten;
-    } else {
-      return super.rewrite(reader);
-    }
-  }
-  
   /** Prints a user-readable version of this query. */
   @Override
   public String toString(String field) {
diff --git a/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/TestWildcard.java b/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/TestWildcard.java
index f5a7c499..c06d220c 100644
--- a/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/TestWildcard.java
+++ b/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/TestWildcard.java
@@ -128,31 +128,8 @@ public void testPrefixTerm() throws IOException {
 
     MultiTermQuery wq = new WildcardQuery(new Term("field", "prefix*"));
     assertMatches(searcher, wq, 2);
+    assertTrue(wq.getEnum(searcher.getIndexReader()) instanceof PrefixTermEnum);
     
-    MultiTermQuery expected = new PrefixQuery(new Term("field", "prefix"));
-    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.1F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
-    wq.setBoost(0.2F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
-    wq.setBoost(0.3F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.4F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
     searcher.close();
     indexStore.close();
   }
diff --git a/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java b/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
index f866971c..9470788e 100644
--- a/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
+++ b/lucene/dev/branches/lucene_solr_3_3/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
@@ -73,6 +73,14 @@ public void testWildcard() throws Exception {
     assertEquals(1, searcher.search(sfq, 10).totalHits);
   }
   
+  public void testPrefix() throws Exception {
+    WildcardQuery wq = new WildcardQuery(new Term("field", "extrem*"));
+    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);
+    // will only match "jumps over extremely very lazy broxn dog"
+    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);
+    assertEquals(1, searcher.search(sfq, 10).totalHits);
+  }
+  
   public void testFuzzy() throws Exception {
     FuzzyQuery fq = new FuzzyQuery(new Term("field", "broan"));
     SpanQuery sfq = new SpanMultiTermQueryWrapper<FuzzyQuery>(fq);
