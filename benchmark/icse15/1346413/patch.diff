diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
index f92fa473..50532a11 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
@@ -23,7 +23,6 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.noggit.JSONParser;
-import org.apache.noggit.JSONUtil;
 import org.apache.noggit.ObjectBuilder;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrInputDocument;
@@ -138,7 +137,7 @@ else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {
               processor.processCommit( cmd );
             }
             else if( v.equals( UpdateRequestHandler.DELETE ) ) {
-              processor.processDelete( parseDelete() );
+              handleDeleteCommand();
             }
             else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {
               processor.processRollback( parseRollback() );
@@ -172,14 +171,71 @@ else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {
       }
     }
   
-    DeleteUpdateCommand parseDelete() throws IOException {
-      assertNextEvent( JSONParser.OBJECT_START );
+    //
+    // "delete":"id"
+    // "delete":["id1","id2"]
+    // "delete":{"id":"foo"}
+    // "delete":{"query":"myquery"}
+    //
+    void handleDeleteCommand() throws IOException {
+      int ev = parser.nextEvent();
+      switch (ev) {
+        case JSONParser.ARRAY_START:
+          handleDeleteArray(ev);
+          break;
+        case JSONParser.OBJECT_START:
+          handleDeleteMap(ev);
+          break;
+        default:
+          handleSingleDelete(ev);
+      }
+    }
+
+    void handleSingleDelete(int ev) throws IOException {
+      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);
+      cmd.commitWithin = commitWithin;
+
+      String id = null;
+      switch (ev) {
+        case JSONParser.STRING:
+          id = parser.getString();
+          break;
+        case JSONParser.BIGNUMBER:
+        case JSONParser.NUMBER:
+        case JSONParser.LONG:
+          id = parser.getNumberChars().toString();
+          break;
+        case JSONParser.OBJECT_START:
+          handleDeleteMap(ev);
+          return;
+        default:
+          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
+              "Got: "+JSONParser.getEventString( ev  )
+                  +" at ["+parser.getPosition()+"]" );
+      }
+
+      cmd.setId(id);
+      processor.processDelete(cmd);
+    }
+
+    void handleDeleteArray(int ev) throws IOException {
+      assert ev == JSONParser.ARRAY_START;
+
+      for (;;) {
+        ev = parser.nextEvent();
+        if (ev == JSONParser.ARRAY_END) return;
+        handleSingleDelete(ev);
+      }
+    }
+
+    void handleDeleteMap(int ev) throws IOException {
+      assert ev == JSONParser.OBJECT_START;
   
       DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);
       cmd.commitWithin = commitWithin;
   
       while( true ) {
-        int ev = parser.nextEvent();
+        ev = parser.nextEvent();
         if( ev == JSONParser.STRING ) {
           String key = parser.getString();
           if( parser.wasKey() ) {
@@ -205,7 +261,9 @@ else if( ev == JSONParser.OBJECT_END ) {
           if( cmd.getId() == null && cmd.getQuery() == null ) {
             throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Missing id or query for delete ["+parser.getPosition()+"]" );
           }
-          return cmd;
+
+          processor.processDelete(cmd);
+          return;
         }
         else {
           throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
@@ -215,6 +273,9 @@ else if( ev == JSONParser.OBJECT_END ) {
       }
     }
     
+
+
+    
     RollbackUpdateCommand parseRollback() throws IOException {
       assertNextEvent( JSONParser.OBJECT_START );
       assertNextEvent( JSONParser.OBJECT_END );
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
index 9e9fc32f..02519904 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
@@ -239,4 +239,44 @@ public void testNullValues() throws Exception {
     );
   }
 
+  // The delete syntax was both extended for simplification in 4.0
+  @Test
+  public void testDeleteSyntax() throws Exception {
+    String str = "{'delete':10"
+        +"\n ,'delete':'20'"
+        +"\n ,'delete':['30','40']"
+        + "\n}\n";
+    str = str.replace('\'', '"');
+    SolrQueryRequest req = req();
+    SolrQueryResponse rsp = new SolrQueryResponse();
+    BufferingRequestProcessor p = new BufferingRequestProcessor(null);
+    JsonLoader loader = new JsonLoader();
+    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);
+
+    // DELETE COMMANDS
+    assertEquals( 4, p.deleteCommands.size() );
+    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );
+    assertEquals( delete.id, "10" );
+    assertEquals( delete.query, null );
+    assertEquals( delete.commitWithin, -1);
+
+    delete = p.deleteCommands.get( 1 );
+    assertEquals( delete.id, "20" );
+    assertEquals( delete.query, null );
+    assertEquals( delete.commitWithin, -1);
+
+    delete = p.deleteCommands.get( 2 );
+    assertEquals( delete.id, "30" );
+    assertEquals( delete.query, null );
+    assertEquals( delete.commitWithin, -1);
+
+    delete = p.deleteCommands.get( 3 );
+    assertEquals( delete.id, "40" );
+    assertEquals( delete.query, null );
+    assertEquals( delete.commitWithin, -1);
+
+    req.close();
+  }
+
+
 }
