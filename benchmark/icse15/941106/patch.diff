diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/analysis/Tokenizer.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/analysis/Tokenizer.java
index 117f3384..172713c7 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/analysis/Tokenizer.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/analysis/Tokenizer.java
@@ -73,7 +73,12 @@ protected Tokenizer(AttributeSource source, Reader input) {
   /** By default, closes the input Reader. */
   @Override
   public void close() throws IOException {
+    if (input != null) {
     input.close();
+      // LUCENE-2387: don't hold onto Reader after close, so
+      // GC can reclaim
+      input = null;
+    }
   }
   
   /** Return the corrected offset. If {@link #input} is a {@link CharStream} subclass
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocInverterPerField.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocInverterPerField.java
index e91865eb..25510419 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocInverterPerField.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocInverterPerField.java
@@ -200,6 +200,10 @@ public void processFields(final Fieldable[] fields,
           fieldState.offset += docState.analyzer.getOffsetGap(field);
         fieldState.boost *= field.getBoost();
       }
+
+      // LUCENE-2387: don't hang onto the field, so GC can
+      // reclaim
+      fields[i] = null;
     }
 
     consumer.finish();
