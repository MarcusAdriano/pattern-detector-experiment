diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/CleanDatabaseTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/CleanDatabaseTestSetup.java
index 8d6e8edc..20739e3b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/CleanDatabaseTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/CleanDatabaseTestSetup.java
@@ -150,7 +150,17 @@ protected void decorateSQL(Statement s) throws SQLException
      */
     protected void tearDown() throws Exception {
         Connection conn = getConnection();
+        // See DERBY-5686 - perhaps there's a test that leaves a 
+        // connection in read-only state - let's check here and 
+        // if there's a conn that's read-only, unset it, and make
+        // the test fail so we find it.
         conn.setAutoCommit(false);
+        boolean ok=true;
+        if (conn.isReadOnly())
+        {
+            conn.setReadOnly(false);
+            ok=false;
+        }
         
         // Clean the database, ensures that any failure dropping
         // objects can easily be linked to test fixtures that
@@ -162,6 +172,8 @@ protected void tearDown() throws Exception {
         // Compress is a somewhat expensive operation so avoid it if possible.
         CleanDatabaseTestSetup.cleanDatabase(conn, false);       
         super.tearDown();
+        if (!ok)
+            fail("the test that was just run left the conn read-only");
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
index 1c954958..24f011c3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
@@ -300,7 +300,19 @@ protected void tearDown()
                 System.out.println("conn.getAutoCommit: " + conn.getAutoCommit());
                 // now try to close the connection, then try open a new one, 
                 // and try to executeUpdate again.
+                try {
+                    conn.close();
+                } catch (SQLException isqle) {
+                    if (sqle.getSQLState()=="25001")
+                    {
+                        // the transaction is still active. let's commit what we have.
+                        conn.commit();
                 conn.close();
+                    } else {
+                        System.out.println("close failed - see SQLState.");
+                        throw sqle;
+                    }
+                }
                 Connection conn2 = getConnection();
                 // check if this second connection is read-only
                 if (conn2.isReadOnly())
@@ -369,8 +381,21 @@ private void setProperties(Properties values) throws SQLException
                 System.out.println("conn.getAutoCommit: " + conn.getAutoCommit());
                 // now try to close the connection, then try open a new one, 
                 // and try to executeUpdate again.
+                try {
                 conn.close();
+                } catch (SQLException isqle) {
+                    if (sqle.getSQLState()=="25001")
+                    {
+                        // the transaction is still active. let's commit what we have.
+                        conn.commit();
+                        conn.close();
+                    } else {
+                        System.out.println("close failed - see SQLState.");
+                        throw sqle;
+                    }
+                }
                 Connection conn2 = getConnection();
+
                 // check if this second connection is read-only
                 if (conn2.isReadOnly())
                 {
