diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java b/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
index 02c22cb0..d50fc8bd 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.net.URL;
 import java.util.Properties;
 import org.apache.derby.iapi.reference.Property;
+import org.apache.derby.iapi.services.property.PropertyUtil;
 
 import org.apache.derby.impl.drda.NetworkServerControlImpl;
 
@@ -561,7 +562,11 @@ private static  void verifySecurityState( NetworkServerControlImpl server )
         // be tricked into a false sense of security. Important security checks
         // will be identity based.
         //
-        if ( !Boolean.getBoolean( Property.REQUIRE_AUTHENTICATION_PARAMETER ) )
+        String      authenticationProperty =
+            PropertyUtil.getSystemProperty( Property.REQUIRE_AUTHENTICATION_PARAMETER );
+        boolean     authenticationRequired = Boolean.valueOf( authenticationProperty ).booleanValue();
+        
+        if ( !authenticationRequired )
         {
             String  errorMessage = server.localizeMessage
                 (
@@ -587,10 +592,10 @@ private static  void installSecurityManager( NetworkServerControlImpl server )
         //
         // The Basic policy refers to some properties. Make sure they are set.
         //
-        if ( System.getProperty( Property.SYSTEM_HOME_PROPERTY ) == null )
-        { System.setProperty( Property.SYSTEM_HOME_PROPERTY, System.getProperty( "user.dir" ) ); }
+        if ( PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) == null )
+        { System.setProperty( Property.SYSTEM_HOME_PROPERTY, PropertyUtil.getSystemProperty( "user.dir" ) ); }
 
-        if ( System.getProperty( Property.DRDA_PROP_HOSTNAME ) == null )
+        if ( PropertyUtil.getSystemProperty( Property.DRDA_PROP_HOSTNAME ) == null )
         { System.setProperty( Property.DRDA_PROP_HOSTNAME, server.getHost() ); }
 
         //
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index 2337eade..20794ca9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -37,6 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.NetworkServerTestSetup;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.ServerSetup;
+import org.apache.derbyTesting.junit.SupportFilesSetup;
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
@@ -99,6 +100,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // startup state
     private boolean _unsecureSet;
     private boolean _authenticationRequired;
+    private boolean _useCustomDerbyProperties;
 
     // expected outcomes
     private Outcome _outcome;
@@ -117,6 +119,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         (
          boolean unsecureSet,
          boolean authenticationRequired,
+         boolean useCustomDerbyProperties,
 
          Outcome    outcome
         )
@@ -125,6 +128,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
          _unsecureSet =  unsecureSet;
          _authenticationRequired =  authenticationRequired;
+         _useCustomDerbyProperties = useCustomDerbyProperties;
 
          _outcome = outcome;
 
@@ -155,14 +159,16 @@ public static Test suite()
 
         // O = Overriden
         // A = Authenticated
+        // C = using Custom properties
         //
-        //      .addTest( decorateTest( S,      O,       A,     Outcome ) );
+        //      .addTest( decorateTest( O,        A,       C,    Outcome ) );
         //
 
-        suite.addTest( decorateTest( false,  false, FAILED_NO_AUTHENTICATION ) );
-        suite.addTest( decorateTest( false,  true, RUNNING_SECURITY_BOOTED ) );
-        suite.addTest( decorateTest( true,  false, RUNNING_SECURITY_NOT_BOOTED ) );
-        suite.addTest( decorateTest( true,  true, RUNNING_SECURITY_NOT_BOOTED ) );
+        suite.addTest( decorateTest( false,  false, false, FAILED_NO_AUTHENTICATION ) );
+        suite.addTest( decorateTest( false,  false, true, RUNNING_SECURITY_BOOTED ) );
+        suite.addTest( decorateTest( false,  true, false, RUNNING_SECURITY_BOOTED ) );
+        suite.addTest( decorateTest( true,  false, false, RUNNING_SECURITY_NOT_BOOTED ) );
+        suite.addTest( decorateTest( true,  true, false, RUNNING_SECURITY_NOT_BOOTED ) );
         
         return suite;
     }
@@ -192,6 +198,7 @@ protected void tearDown() throws Exception
         (
          boolean unsecureSet,
          boolean authenticationRequired,
+         boolean useCustomDerbyProperties,
 
          Outcome outcome
         )
@@ -200,11 +207,12 @@ protected void tearDown() throws Exception
             (
              unsecureSet,
              authenticationRequired,
+             useCustomDerbyProperties,
 
              outcome
             );
 
-        String[]        startupProperties = getStartupProperties( authenticationRequired );
+        String[]        startupProperties = getStartupProperties( authenticationRequired, useCustomDerbyProperties );
         String[]        startupArgs = getStartupArgs( unsecureSet );
 
         TestSetup   testSetup = new NetworkServerTestSetup
@@ -217,6 +225,19 @@ protected void tearDown() throws Exception
              secureServerTest._inputStreamHolder
              );
 
+        // if using the custom derby.properties, copy the custom properties to a visible place
+        if ( useCustomDerbyProperties )
+        {
+            testSetup = new SupportFilesSetup
+                (
+                 testSetup,
+                 null,
+                 new String[] { "functionTests/tests/derbynet/SecureServerTest.derby.properties" },
+                 null,
+                 new String[] { "derby.properties" }
+                 );
+        }
+
         testSetup = new ServerSetup( testSetup, TestConfiguration.DEFAULT_HOSTNAME, TestConfiguration.DEFAULT_PORT );
 
         Test        test = SecurityManagerSetup.noSecurityManager( testSetup );
@@ -250,7 +271,7 @@ protected void tearDown() throws Exception
      * Return a set of startup properties suitable for SystemPropertyTestSetup.
      * </p>
      */
-    private static  String[]  getStartupProperties( boolean authenticationRequired )
+    private static  String[]  getStartupProperties( boolean authenticationRequired, boolean useCustomDerbyProperties )
     {
         ArrayList       list = new ArrayList();
 
@@ -259,6 +280,11 @@ protected void tearDown() throws Exception
             list.add( "derby.connection.requireAuthentication=true" );
         }
 
+        if ( useCustomDerbyProperties )
+        {
+            list.add( "derby.system.home=extinout" );
+        }
+
         String[]    result = new String[ list.size() ];
 
         list.toArray( result );
@@ -299,8 +325,9 @@ public String toString()
         StringBuffer    buffer = new StringBuffer();
 
         buffer.append( "SecureServerTest( " );
-        buffer.append( "Opened = " ); buffer.append( _unsecureSet); buffer.append( ", " );
-        buffer.append( "Authenticated= " ); buffer.append( _authenticationRequired );
+        buffer.append( "Opened = " ); buffer.append( _unsecureSet);
+        buffer.append( ", Authenticated= " ); buffer.append( _authenticationRequired );
+        buffer.append( ", CustomDerbyProperties= " ); buffer.append( _useCustomDerbyProperties );
         buffer.append( " )" );
 
         return buffer.toString();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java
index 7229fbb7..b60067ab 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java
@@ -64,6 +64,8 @@
     
     private String[] readOnly;
     private String[] readWrite;
+    private String[] readOnlyTargetFileNames;
+    private String[] readWriteTargetFileNames;
 
     /**
      * Create all the folders but don't copy any resources.
@@ -79,7 +81,7 @@ public SupportFilesSetup(Test test)
      */
     public SupportFilesSetup(Test test, String[] readOnly)
     {
-        this(test, readOnly, (String[]) null);
+        this(test, readOnly, (String[]) null, (String[]) null, (String[]) null);
     }
     
     /**
@@ -88,17 +90,31 @@ public SupportFilesSetup(Test test, String[] readOnly)
      * the read write folder.
    */
     public SupportFilesSetup(Test test, String[] readOnly, String[] readWrite)
+    {
+        this(test, readOnly, readWrite, (String[]) null, (String[]) null);
+    }
+    
+    /**
+     * Create all the folders, copy a set of resources into
+     * the read only folder and copy a set of resources into
+     * the read write folder. If specified, use the specific target file
+     * supplied by the caller.
+     */
+    public SupportFilesSetup
+        (Test test, String[] readOnly, String[] readWrite, String[] readOnlyTargetFileNames, String[] readWriteTargetFileNames)
     {
         super(test);
         this.readOnly = readOnly;
         this.readWrite = readWrite;
+        this.readOnlyTargetFileNames = readOnlyTargetFileNames;
+        this.readWriteTargetFileNames = readWriteTargetFileNames;
     }
     
     protected void setUp() throws PrivilegedActionException, IOException
     {
-        privCopyFiles("extin", readOnly);
-        privCopyFiles("extinout", readWrite);
-        privCopyFiles("extout", (String[]) null);
+        privCopyFiles("extin", readOnly, readOnlyTargetFileNames);
+        privCopyFiles("extinout", readWrite, readWriteTargetFileNames);
+        privCopyFiles("extout", (String[]) null, (String[]) null);
     }
     
     protected void tearDown()
@@ -108,21 +124,21 @@ protected void tearDown()
         DropDatabaseSetup.removeDirectory("extout");
     }
     
-    private void privCopyFiles(final String dirName, final String[] resources)
+    private void privCopyFiles(final String dirName, final String[] resources, final String[] targetNames)
     throws PrivilegedActionException
     {
         AccessController.doPrivileged
         (new java.security.PrivilegedExceptionAction(){
             
             public Object run() throws IOException, PrivilegedActionException { 
-              copyFiles(dirName, resources);
+              copyFiles(dirName, resources, targetNames);
               return null;
             }
         });
 
     }
     
-    private void copyFiles(String dirName, String[] resources)
+    private void copyFiles(String dirName, String[] resources, String[] targetNames)
         throws PrivilegedActionException, IOException
     {
         File dir = new File(dirName);
@@ -136,8 +152,18 @@ private void copyFiles(String dirName, String[] resources)
             String name =
                 "org/apache/derbyTesting/".concat(resources[i]);
             
-            String baseName = name.substring(name.lastIndexOf('/') + 1);
+            String baseName;
             
+            if ( targetNames == null )
+            {
+                // by default, just the same file name as the source file
+                baseName = name.substring(name.lastIndexOf('/') + 1);
+            }
+            else
+            {
+                // we let the caller override the target file name
+                baseName = targetNames[ i ];
+            }
             
             URL url = BaseTestCase.getTestResource(name);
             assertNotNull(name, url);
