diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index 21f97d21..d38b055c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -514,6 +514,8 @@ public static void shutdown()
             messageDeserializerExecutor_.shutdownNow();
             streamExecutor_.shutdownNow();
 
+            StageManager.shutdown();
+            
             /* shut down the cachetables */
             taskCompletionMap_.shutdown();
             callbackMap_.shutdown();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
index be5410cf..8d898776 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
@@ -23,9 +23,9 @@
 import org.apache.log4j.Logger;
 
 import org.apache.cassandra.dht.Token;
+import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
-import org.apache.cassandra.utils.LogUtil;
 
 public class TokenUpdateVerbHandler implements IVerbHandler
 {
@@ -34,16 +34,18 @@
     public void doVerb(Message message)
     {
     	byte[] body = message.getMessageBody();
-        Token token = StorageService.getPartitioner().getTokenFactory().fromByteArray(body);
+        DataInputBuffer bufIn = new DataInputBuffer();
+        bufIn.reset(body, body.length);
         try
         {
+            /* Deserialize to get the token for this endpoint. */
+            Token token = Token.serializer().deserialize(bufIn);
         	logger_.info("Updating the token to [" + token + "]");
         	StorageService.instance().updateToken(token);
         }
-    	catch( IOException ex )
+        catch (IOException ex)
     	{
-    		if (logger_.isDebugEnabled())
-    		  logger_.debug(LogUtil.throwableToString(ex));
+            throw new RuntimeException(ex);
     	}
     }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
index 236fc83b..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
@@ -1,94 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.tools;
-
-import java.io.ByteArrayOutputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.log4j.Logger;
-
-import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.dht.IPartitioner;
-import org.apache.cassandra.dht.Token;
-import org.apache.cassandra.io.DataInputBuffer;
-import org.apache.cassandra.net.EndPoint;
-import org.apache.cassandra.net.IVerbHandler;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.net.MessagingService;
-import org.apache.cassandra.service.StorageService;
-import org.apache.cassandra.utils.LogUtil;
-
-public class TokenUpdateVerbHandler implements IVerbHandler
-{
-    private static Logger logger_ = Logger.getLogger(TokenUpdateVerbHandler.class);
-
-    public void doVerb(Message message)
-    {
-    	byte[] body = message.getMessageBody();
-        
-        try
-        {
-            DataInputBuffer bufIn = new DataInputBuffer();
-            bufIn.reset(body, body.length);
-            /* Deserialize to get the token for this endpoint. */
-            Token token = Token.serializer().deserialize(bufIn);
-
-            logger_.info("Updating the token to [" + token + "]");
-            StorageService.instance().updateToken(token);
-            
-            /* Get the headers for this message */
-            Map<String, byte[]> headers = message.getHeaders();
-            headers.remove( StorageService.getLocalStorageEndPoint().getHost() );
-            if (logger_.isDebugEnabled())
-              logger_.debug("Number of nodes in the header " + headers.size());
-            Set<String> nodes = headers.keySet();
-            
-            IPartitioner p = StorageService.getPartitioner();
-            for ( String node : nodes )
-            {            
-                if (logger_.isDebugEnabled())
-                  logger_.debug("Processing node " + node);
-                byte[] bytes = headers.remove(node);
-                /* Send a message to this node to update its token to the one retrieved. */
-                EndPoint target = new EndPoint(node, DatabaseDescriptor.getStoragePort());
-                token = p.getTokenFactory().fromByteArray(bytes);
-                
-                /* Reset the new Message */
-                ByteArrayOutputStream bos = new ByteArrayOutputStream();
-                DataOutputStream dos = new DataOutputStream(bos);
-                Token.serializer().serialize(token, dos);
-                message.setMessageBody(bos.toByteArray());
-                
-                if (logger_.isDebugEnabled())
-                  logger_.debug("Sending a token update message to " + target + " to update it to " + token);
-                MessagingService.getMessagingInstance().sendOneWay(message, target);
-                break;
-            }                        
-        }
-    	catch( IOException ex )
-    	{
-    		if (logger_.isDebugEnabled())
-    		  logger_.debug(LogUtil.throwableToString(ex));
-    	}
-    }
-
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java
index 378e2645..5849052b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdater.java
@@ -23,14 +23,18 @@
 import java.io.DataOutputStream;
 import java.io.FileInputStream;
 import java.io.InputStreamReader;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.net.EndPoint;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
+import org.apache.cassandra.net.SelectorManager;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.FileUtils;
 
 public class TokenUpdater
 {
@@ -39,42 +43,47 @@
     
     public static void main(String[] args) throws Throwable
     {
-        if ( args.length != 3 )
+        if (args.length < 2)
         {
-            System.out.println("Usage : java org.apache.cassandra.tools.TokenUpdater <ip:port> <token> <file containing node token info>");
+            System.out.println("Usage : java org.apache.cassandra.tools.TokenUpdater <ip:port> <token>");
             System.exit(1);
         }
         
+        Thread selectorThread = SelectorManager.getSelectorManager();
+        selectorThread.setDaemon(true);
+        selectorThread.start();
+
         String ipPort = args[0];
         IPartitioner p = StorageService.getPartitioner();
         Token token = p.getTokenFactory().fromString(args[1]);
-        String file = args[2];
+        System.out.println("Partitioner is " + p.getClass() + ", token is: " + token);
+        System.out.println(p.getTokenFactory().getClass());
         
         String[] ipPortPair = ipPort.split(":");
-        EndPoint target = new EndPoint(ipPortPair[0], Integer.valueOf(ipPortPair[1]));
+        int port = 7000;
+        if (ipPortPair.length > 1)
+        {
+            port = Integer.valueOf(ipPortPair[1]);
+        }
+
+        EndPoint target = new EndPoint(ipPortPair[0], port);
 
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
         Token.serializer().serialize(token, dos);
 
         /* Construct the token update message to be sent */
-        Message tokenUpdateMessage = new Message( new EndPoint(FBUtilities.getHostAddress(), port_), "", StorageService.tokenVerbHandler_, bos.toByteArray() );
-        
-        BufferedReader bufReader = new BufferedReader( new InputStreamReader( new FileInputStream(file) ) );
-        String line = null;
-       
-        while ( ( line = bufReader.readLine() ) != null )
-        {
-            String[] nodeTokenPair = line.split(" ");
-            /* Add the node and the token pair into the header of this message. */
-            Token nodeToken = p.getTokenFactory().fromString(nodeTokenPair[1]);
-            tokenUpdateMessage.addHeader(nodeTokenPair[0], p.getTokenFactory().toByteArray(nodeToken));
-        }
+        Message tokenUpdateMessage = new Message(new EndPoint(FBUtilities.getHostAddress(), port_),
+                                                 "",
+                                                 StorageService.tokenVerbHandler_,
+                                                 bos.toByteArray());
         
         System.out.println("Sending a token update message to " + target);
         MessagingService.getMessagingInstance().sendOneWay(tokenUpdateMessage, target);
         Thread.sleep(TokenUpdater.waitTime_);
         System.out.println("Done sending the update message");
-    }
 
+        MessagingService.shutdown();
+        FileUtils.shutdown();
+    }
 }
