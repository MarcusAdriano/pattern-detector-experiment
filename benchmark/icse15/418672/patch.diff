diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index a410210f..0a6585e5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -3086,6 +3086,31 @@ public CostEstimate getFinalCostEstimate()
 		return getTrulyTheBestAccessPath().getCostEstimate();
 	}
 
+        /* helper method used by generateMaxSpecialResultSet and
+         * generateDistinctScan to return the name of the index if the 
+         * conglomerate is an index. 
+         * @param cd   Conglomerate for which we need to push the index name
+         * @param mb   Associated MethodBuilder
+         * @throws StandardException
+         */
+        private void pushIndexName(ConglomerateDescriptor cd, MethodBuilder mb) 
+          throws StandardException
+        {
+            if (cd.isConstraint()) {
+                DataDictionary dd = getDataDictionary();
+                ConstraintDescriptor constraintDesc = 
+                    dd.getConstraintDescriptor(tableDescriptor, cd.getUUID());
+                mb.push(constraintDesc.getConstraintName());
+            } else if (cd.isIndex())  {
+                mb.push(cd.getConglomerateName());
+            } else {
+             // If the conglomerate is the base table itself, make sure we push null.
+             //  Before the fix for DERBY-578, we would push the base table name 
+             //  and  this was just plain wrong and would cause statistics information to be incorrect.
+              mb.pushNull("java.lang.String");
+            }
+        }
+	
 	private void generateMaxSpecialResultSet
 	(
 		ExpressionClassBuilder	acb,
@@ -3107,6 +3132,7 @@ public CostEstimate getFinalCostEstimate()
 		**		resultRowAllocator,			
 		**		conglomereNumber,			
 		**		tableName,			
+		**		optimizeroverride			
 		**		indexName,			
 		**		colRefItem,			
 		**		lockMode,			
@@ -3132,7 +3158,7 @@ public CostEstimate getFinalCostEstimate()
 			mb.push(org.apache.derby.iapi.util.PropertyUtil.sortProperties(tableProperties));
 		else
 			mb.pushNull("java.lang.String");
-		mb.push(cd.getConglomerateName());
+                pushIndexName(cd, mb);
 		mb.push(colRefItem);
 		mb.push(getTrulyTheBestAccessPath().getLockMode());
 		mb.push(tableLockGranularity);
@@ -3168,6 +3194,7 @@ public CostEstimate getFinalCostEstimate()
 		**		resultRowAllocator,			
 		**		conglomereNumber,			
 		**		tableName,			
+		**		optimizeroverride			
 		**		indexName,			
 		**		colRefItem,			
 		**		lockMode,			
@@ -3226,7 +3253,7 @@ public CostEstimate getFinalCostEstimate()
 			mb.push(org.apache.derby.iapi.util.PropertyUtil.sortProperties(tableProperties));
 		else
 			mb.pushNull("java.lang.String");
-		mb.push(cd.getConglomerateName());
+		pushIndexName(cd, mb);
 		mb.push(cd.isConstraint());
 		mb.push(colRefItem);
 		mb.push(getTrulyTheBestAccessPath().getLockMode());
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
index 65be98bb..8c0fc6ee 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
@@ -64,6 +64,9 @@
 	  
 	public void setFramework(String fm)
 	{
+                if (fm == null) {
+                    return;
+                }
 		framework = fm.toUpperCase(Locale.ENGLISH);
 		if (framework.endsWith("NET") ||
 			framework.equals("DB2JCC"))
