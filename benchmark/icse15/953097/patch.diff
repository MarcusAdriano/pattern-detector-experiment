diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
index 8d7f6459..5991144d 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
@@ -101,7 +101,7 @@ public void deleteConfigurations(String filter) throws IOException {
         try {
             configuations = configurationAdmin.listConfigurations(filter);
         } catch (InvalidSyntaxException e) {
-            throw new IllegalArgumentException("Invalid filter [" + filter + "] : " + e);
+            throw new IOException("Invalid filter [" + filter + "] : " + e);
         }
         if (configuations != null) {
             for (Configuration config : configuations) {
@@ -134,7 +134,7 @@ public String getBundleLocation(String pid) throws IOException {
         try {
             configurations = configurationAdmin.listConfigurations(filter);
         } catch (InvalidSyntaxException e) {
-            throw new IllegalArgumentException("Invalid filter [" + filter + "] : " + e);
+            throw new IOException("Invalid filter [" + filter + "] : " + e);
         }
         if (configurations != null) {
             for (Configuration config : configurations) {
@@ -222,7 +222,7 @@ public void updateForLocation(String pid, String location, TabularData configura
         }
                 
         if (!PROPERTIES_TYPE.equals(configurationTable.getTabularType())) {
-            throw new IllegalArgumentException("Invalid TabularType ["  + configurationTable.getTabularType() + "]");
+            throw new IOException("Invalid TabularType ["  + configurationTable.getTabularType() + "]");
         }
         Dictionary<String, Object> configurationProperties = new Hashtable<String, Object>();
         Collection<CompositeData> compositeData = (Collection<CompositeData>) configurationTable.values();
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java
index 19ce3c31..a1c5b5da 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java
@@ -57,8 +57,8 @@
      */
     public GroupData(Group group) {
         super(group.getName(), Role.GROUP);
-        setRequiredMembers(group);
-        setMembers(group);
+        this.members = toArray(group.getMembers());
+        this.requiredMembers = toArray(group.getRequiredMembers());
     }
 
     /**
@@ -70,8 +70,8 @@ public GroupData(Group group) {
      */
     public GroupData(String name, String[] members, String[] requiredMembers) {
         super(name, Role.GROUP);
-        this.members = members;
-        this.requiredMembers = requiredMembers;
+        this.members = (members == null) ? new String[0] : members;
+        this.requiredMembers = (requiredMembers == null) ? new String[0] : requiredMembers;
     }
 
     /**
@@ -123,34 +123,13 @@ public static GroupData from(CompositeData data) {
         return requiredMembers;
     }
 
-    /**
-     * Sets group basic members by getting them from Group object.
-     * @param group {@link Group} instance.
-     */
-    private void setMembers(org.osgi.service.useradmin.Group group) {
-        Role[] roles = group.getMembers();
-        if (roles != null) {
+    private static String[] toArray(Role[] roles) {
             List<String> members = new ArrayList<String>();
+        if (roles != null) {
             for (Role role : roles) {
                 members.add(role.getName());
             }
-            this.members = members.toArray(new String[roles.length]);
         }
+        return members.toArray(new String[members.size()]);
     }
-
-    /**
-     * Sets group required members by getting them from Group object.
-     * @param group {@link Group} instance.
-     */
-    private void setRequiredMembers(org.osgi.service.useradmin.Group group) {
-        Role[] requiredRoles = group.getRequiredMembers();
-        if (requiredRoles != null) {
-            List<String> reqMembers = new ArrayList<String>();
-            for (Role role : requiredRoles) {
-                reqMembers.add(role.getName());
-            }
-            this.requiredMembers = reqMembers.toArray(new String[requiredRoles.length]);
-        }
-    }
-
 }
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
index e5ad8809..060be9fd 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
@@ -239,7 +239,11 @@ public void restartFramework() throws IOException {
      */
     public void setBundleStartLevel(long bundleIdentifier, int newlevel) throws IOException {
         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
+        try {
         startLevel.setBundleStartLevel(bundle, newlevel);
+        } catch (IllegalArgumentException e) {
+            throw new IOException("Unable to set bundle start level", e);
+        }
     }
 
     /**
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
index 2f857b53..48aa54e7 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
@@ -79,7 +79,7 @@ public UserAdmin(org.osgi.service.useradmin.UserAdmin userAdmin) {
      */
     private void validateRoleType(Role role, int roleType) throws IOException {
         if (role.getType() != roleType) {
-            throw new IllegalArgumentException("Unexpected role type. Expected " + roleType + " but got " + role.getType());
+            throw new IOException("Unexpected role type. Expected " + roleType + " but got " + role.getType());
         }
     }
 
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
index 874a33f9..8c0a359d 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
@@ -24,9 +24,12 @@
 import static org.osgi.jmx.framework.BundleStateMBean.UNINSTALLED;
 import static org.osgi.jmx.framework.BundleStateMBean.UNKNOWN;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Dictionary;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
@@ -58,13 +61,13 @@ private FrameworkUtils() {
      * @throws IllegalArgumentException
      *             if no Bundle is found with matching bundleId
      */
-    public static Bundle resolveBundle(BundleContext bundleContext, long bundleId) throws IllegalArgumentException {
+    public static Bundle resolveBundle(BundleContext bundleContext, long bundleId) throws IOException {
         if (bundleContext == null) {
             throw new IllegalArgumentException("Argument bundleContext cannot be null");
         }
         Bundle bundle = bundleContext.getBundle(bundleId);
         if (bundle == null) {
-            throw new IllegalArgumentException("Bundle with id [" + bundleId + "] not found");
+            throw new IOException("Bundle with id [" + bundleId + "] not found");
         }
         return bundle;
     }
@@ -109,10 +112,10 @@ public static Bundle resolveBundle(BundleContext bundleContext, long bundleId) t
      * @param bundleContext
      * @param serviceId
      * @return ServiceReference with matching service.id property
-     * @throws IllegalArgumentException
-     *             if bundleContext is null or no service is found with the given id
+     * @throws IllegalArgumentException if bundleContext is null
+     * @throws IOException if no service is found with the given id
      */
-    public static ServiceReference resolveService(BundleContext bundleContext, long serviceId) {
+    public static ServiceReference resolveService(BundleContext bundleContext, long serviceId) throws IOException {
         if (bundleContext == null) {
             throw new IllegalArgumentException("Argument bundleContext cannot be null");
         }
@@ -121,12 +124,12 @@ public static ServiceReference resolveService(BundleContext bundleContext, long
             ServiceReference[] references = bundleContext.getAllServiceReferences(null, "(" + Constants.SERVICE_ID
                     + "=" + serviceId + ")");
             if (references == null || references.length < 1) {
-                throw new IllegalArgumentException("Service with id [" + serviceId + "] not found");
+                throw new IOException("Service with id [" + serviceId + "] not found");
             } else {
                 result = references[0];
             }
         } catch (InvalidSyntaxException e) {
-            throw new IllegalStateException("Failure when resolving service ", e);
+            throw new IOException("Failure when resolving service ", e);
         }
         return result;
     }
@@ -365,15 +368,26 @@ public static boolean isBundlePendingRemoval(Bundle bundle, PackageAdmin package
             throw new IllegalArgumentException("Argument packageAdmin cannot be null");
         }
         boolean result = false;
+        ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(bundle);
+        if (exportedPackages != null) {
+            for (ExportedPackage exportedPackage : exportedPackages) {
+                if (exportedPackage.isRemovalPending()) {
+                    result = true;
+                    break;
+                }
+            }
+        }
+        if (!result) {
         RequiredBundle[] requiredBundles = packageAdmin.getRequiredBundles(bundle.getSymbolicName());
         if (requiredBundles != null) {
             for (RequiredBundle requiredBundle : requiredBundles) {
                 Bundle required = requiredBundle.getBundle();
-                if (required != null && required.equals(bundle)) {
+                    if (required == bundle) {
                     result = requiredBundle.isRemovalPending();
                     break;
                 }
-            }// end for requiredBundles
+                }
+            }
         }
         return result;
     }
@@ -396,18 +410,39 @@ public static boolean isBundleRequiredByOthers(Bundle bundle, PackageAdmin packa
             throw new IllegalArgumentException("Argument packageAdmin cannot be null");
         }
         boolean result = false;
+        // Check imported packages (statically or dynamically)
+        ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(bundle);
+        if (exportedPackages != null) {
+            for (ExportedPackage exportedPackage : exportedPackages) {
+                Bundle[] importingBundles = exportedPackage.getImportingBundles();
+                if (importingBundles != null && importingBundles.length > 0) {
+                    result = true;
+                    break;
+                }
+            }
+        }
+        if (!result) {
+            // Check required bundles
         RequiredBundle[] requiredBundles = packageAdmin.getRequiredBundles(bundle.getSymbolicName());
         if (requiredBundles != null) {
             for (RequiredBundle requiredBundle : requiredBundles) {
                 Bundle required = requiredBundle.getBundle();
-                if (required != null && required.equals(bundle)) {
+                    if (required == bundle) {
                     Bundle[] requiring = requiredBundle.getRequiringBundles();
                     if (requiring != null && requiring.length > 0) {
                         result = true;
                         break;
                     }
                 }
-            }// end for requiredBundles
+                }
+            }
+        }
+        if (!result) {
+            // Check fragment bundles
+            Bundle[] fragments = packageAdmin.getFragments(bundle);
+            if (fragments != null && fragments.length > 0) {
+                result = true;
+            }
         }
         return result;
     }
@@ -426,7 +461,8 @@ public static boolean isBundleRequiredByOthers(Bundle bundle, PackageAdmin packa
      *             if bundle or packageAdmin are null
      */
     @SuppressWarnings("unchecked")
-    public static long[] getBundleDependencies(BundleContext localBundleContext, Bundle bundle,
+    public static long[] getBundleDependencies(BundleContext localBundleContext, 
+                                               Bundle bundle,
             PackageAdmin packageAdmin) throws IllegalArgumentException {
         if (bundle == null) {
             throw new IllegalArgumentException("Argument bundle cannot be null");
@@ -434,16 +470,31 @@ public static boolean isBundleRequiredByOthers(Bundle bundle, PackageAdmin packa
         if (packageAdmin == null) {
             throw new IllegalArgumentException("Argument packageAdmin cannot be null");
         }
-        List<Bundle> dependencies = new ArrayList<Bundle>();
+        Set<Bundle> dependencies = new HashSet<Bundle>();
+        // Handle imported packages (statically or dynamically)
+        for (Bundle exportBundle : localBundleContext.getBundles()) {
+            if (exportBundle == bundle) {
+                continue;
+            }
+            ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(exportBundle);
+            if (exportedPackages != null) {
+                for (ExportedPackage exportedPackage : exportedPackages) {
+                    Bundle[] importingBundles = exportedPackage.getImportingBundles();
+                    if (importingBundles != null && arrayContains(importingBundles, bundle)) {
+                        dependencies.add(exportBundle);
+                        break;
+                    }
+                }
+            }
+        }
+        // Handle required bundles
         Dictionary<String, String> bundleHeaders = bundle.getHeaders();
         String requireBundleHeader = bundleHeaders.get(Constants.REQUIRE_BUNDLE);
         if (requireBundleHeader != null) { // only check if Require-Bundle is used
             List<String> bundleSymbolicNames = extractHeaderDeclaration(requireBundleHeader);
             for (String bundleSymbolicName: bundleSymbolicNames) {
                 RequiredBundle[] candidateRequiredBundles = packageAdmin.getRequiredBundles(bundleSymbolicName);
-                if (candidateRequiredBundles == null) {
-                    continue;
-                } else {
+                if (candidateRequiredBundles != null) {
                     for (RequiredBundle candidateRequiredBundle : candidateRequiredBundles) {
                         Bundle[] bundlesRequiring = candidateRequiredBundle.getRequiringBundles();
                         if (bundlesRequiring != null && arrayContains(bundlesRequiring, bundle)) {
@@ -453,6 +504,13 @@ public static boolean isBundleRequiredByOthers(Bundle bundle, PackageAdmin packa
                 }
             }
         }
+        // Handle fragment bundles
+        Bundle[] hosts = packageAdmin.getHosts(bundle);
+        if (hosts != null) {
+            for (Bundle host : hosts) {
+                dependencies.add(host);
+            }
+        }
         return getBundleIds(dependencies.toArray(new Bundle[dependencies.size()]));
     }
 
@@ -472,17 +530,42 @@ public static boolean isBundleRequiredByOthers(Bundle bundle, PackageAdmin packa
         if (packageAdmin == null) {
             throw new IllegalArgumentException("Argument packageAdmin cannot be null");
         }
-        long[] bundleIds = new long[0];
+        Set<Bundle> dependencies = new HashSet<Bundle>();
+        // Handle imported packages (statically or dynamically)
+        ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(bundle);
+        if (exportedPackages != null) {
+            for (ExportedPackage exportedPackage : exportedPackages) {
+                Bundle[] importingBundles = exportedPackage.getImportingBundles();
+                if (importingBundles != null) {
+                    for (Bundle importingBundle : importingBundles) {
+                        dependencies.add(importingBundle);
+                    }
+                }
+            }
+        }
+        // Handle required bundles
         RequiredBundle[] requiredBundles = packageAdmin.getRequiredBundles(bundle.getSymbolicName());
         if (requiredBundles != null) {
             for (RequiredBundle requiredBundle : requiredBundles) {
                 Bundle required = requiredBundle.getBundle();
-                if (required != null && required.equals(bundle)) {
-                    bundleIds = getBundleIds(requiredBundle.getRequiringBundles());
+                if (required == bundle) {
+                    Bundle[] requiringBundles = requiredBundle.getRequiringBundles();
+                    if (requiringBundles != null) {
+                        for (Bundle requiringBundle : requiringBundles) {
+                            dependencies.add(requiringBundle);
+                        }
+                    }
                 }
             }
         }
-        return bundleIds;
+        // Handle fragment bundles
+        Bundle[] fragments = packageAdmin.getFragments(bundle);
+        if (fragments != null) {
+            for (Bundle fragment : fragments) {
+                dependencies.add(fragment);
+            }
+        }
+        return getBundleIds(dependencies.toArray(new Bundle[dependencies.size()]));
     }
 
     /**
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java
index 414721b3..6295eceb 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/BundleDataTest.java
@@ -50,8 +50,10 @@
 
 import java.util.Dictionary;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.Map;
+import java.util.Set;
 
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.CompositeDataSupport;
@@ -180,7 +182,7 @@ public void testToCompositeData() throws Exception {
         
         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , (String[]) compositeData.get(EXPORTED_PACKAGES));
         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"}, (String[]) compositeData.get(IMPORTED_PACKAGES));
-        assertArrayEquals(new Long[] { new Long(44), new Long(66) }, (Long[]) compositeData.get(REQUIRED_BUNDLES));
+        assertEquals(toSet(new long[] { 44, 55, 66 }), toSet((Long[]) compositeData.get(REQUIRED_BUNDLES)));
         assertArrayEquals(new Long[] { new Long(15), new Long(16), new Long(17) },(Long[]) compositeData.get(SERVICES_IN_USE));
         assertEquals("UNKNOWN", compositeData.get(STATE)); //default no return stub
         assertEquals(0,((Long[]) compositeData.get(HOSTS)).length);
@@ -252,4 +254,20 @@ public void testHeaderFromCompositeData() throws Exception {
         assertEquals("d", header.getValue());
         
     }
+        
+    private static Set<Long> toSet(long[] array) {
+        Set<Long> set = new HashSet<Long>();
+        for (long value : array) {
+            set.add(value);
+        }
+        return set;
+    }
+    
+    private static Set<Long> toSet(Long[] array) {
+        Set<Long> set = new HashSet<Long>();
+        for (Long value : array) {
+            set.add(value);
+        }
+        return set;
+    }
 }
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java
index 6f718895..538f4d93 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java
@@ -184,8 +184,8 @@ public void testRefreshBundle() throws Exception {
 
         try {
             mbean.refreshBundle(2);
-            Assert.fail("Shouldn't happen illegal argument");
-        } catch (IllegalArgumentException iae) {
+            Assert.fail("IOException should be thrown");
+        } catch (IOException e) {
             // expected
         }
     }
@@ -304,8 +304,8 @@ public void testStartBundle() throws Exception {
         Mockito.when(context.getBundle(6)).thenReturn(null);
         try {
             mbean.startBundle(6);
-            Assert.fail("IllegalArgumentException should be thrown");
-        } catch (IllegalArgumentException iae) {
+            Assert.fail("IOException should be thrown");
+        } catch (IOException e) {
             //expected
         }
     }
@@ -342,8 +342,8 @@ public void testStopBundle() throws Exception {
         Mockito.when(context.getBundle(5)).thenReturn(null);
         try {
             mbean.stopBundle(5);
-            Assert.fail("IllegalArgumentException should be thrown");
-        } catch (IllegalArgumentException iae) {
+            Assert.fail("IOException should be thrown");
+        } catch (IOException e) {
             //expected
         }
        
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/util/FrameworkUtilsTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/util/FrameworkUtilsTest.java
index 504dea60..03cf1269 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/util/FrameworkUtilsTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/util/FrameworkUtilsTest.java
@@ -36,7 +36,9 @@
 import static org.mockito.Mockito.when;
 
 import java.util.Dictionary;
+import java.util.HashSet;
 import java.util.Hashtable;
+import java.util.Set;
 
 import org.junit.Test;
 import org.osgi.framework.Bundle;
@@ -279,10 +281,15 @@ public void testGetBundleDependencies() throws Exception {
         when(admin.getRequiredBundles("b2")).thenReturn(new RequiredBundle[] { rb2 });
         when(admin.getRequiredBundles("b3")).thenReturn(new RequiredBundle[] { rb3 });
         
-        assertArrayEquals(new long[] { 44, 66 }, getBundleDependencies(context, bundle, admin));
-        
-        
+        assertEquals(toSet(new long[] { 44, 66 }), toSet(getBundleDependencies(context, bundle, admin)));
     }
     
+    private static Set<Long> toSet(long[] array) {
+        Set<Long> set = new HashSet<Long>();
+        for (long value : array) {
+            set.add(value);
+        }
+        return set;
+    }
     
 }
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java
index bda017b4..d1efffbc 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java
@@ -203,8 +203,10 @@ public void testMBeanInterface() throws Exception {
         //requiring bundles
         
         long[] requiring = mbean.getRequiringBundles(a.getBundleId());
-        assertEquals(1, requiring.length);
-        assertEquals(d.getBundleId(), requiring[0]);
+        assertEquals(3, requiring.length);
+        assertTrue(b.getSymbolicName(), arrayContains(frag.getBundleId(), requiring));
+        assertTrue(frag.getSymbolicName(), arrayContains(frag.getBundleId(), requiring));
+        assertTrue(d.getSymbolicName(), arrayContains(d.getBundleId(), requiring));
         
         //services in use
         
@@ -231,7 +233,7 @@ public void testMBeanInterface() throws Exception {
         // isRequired
        
         assertTrue(mbean.isRequired(a.getBundleId()));
-        assertFalse(mbean.isRequired(b.getBundleId()));
+        assertTrue(mbean.isRequired(b.getBundleId())); 
         
         // listBundles
         
@@ -267,5 +269,12 @@ public void handleNotification(Notification notification, Object handback) {
         
     }
     
-
+    private static boolean arrayContains(long value, long[] values) {
+        for (long i : values) {
+            if (i == value) {
+                return true;
+            }
+        }
+        return false;
+    }
 }
