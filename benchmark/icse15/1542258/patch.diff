diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
index 285e0d0a..dc0a2c31 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
@@ -765,19 +765,19 @@ public void addRequiredColumnPriv( ColumnDescriptor column)
 
 		//DERBY-4191
 		if( currPrivType == Authorizer.MIN_SELECT_PRIV){
-			//If we are here for MIN_SELECT_PRIV requirement, then first
-			//check if there is already a SELECT privilege requirement on any 
-			//of the columns in the table. If yes, then we do not need to add 
-			//MIN_SELECT_PRIV requirement for the table because that 
-			//requirement is already getting satisfied with the already
-			//existing SELECT privilege requirement
+            // If we are here for MIN_SELECT_PRIV requirement, then first
+            // check if there is already a SELECT privilege requirement on any
+            // of the columns in the table, or on the table itself. If yes,
+            // then we do not need to add MIN_SELECT_PRIV requirement for the
+            // table because that requirement is already getting satisfied with
+            // the already existing SELECT privilege requirement.
 			StatementTablePermission key = new StatementTablePermission( 
 					tableUUID, Authorizer.SELECT_PRIV);
-			StatementColumnPermission tableColumnPrivileges
-			  = (StatementColumnPermission) requiredColumnPrivileges.get( key);
-			if( tableColumnPrivileges != null)
+            if (requiredColumnPrivileges.containsKey(key) ||
+                    requiredTablePrivileges.containsKey(key)) {
 				return;
 		}
+		}
 		if( currPrivType == Authorizer.SELECT_PRIV){
 			//If we are here for SELECT_PRIV requirement, then first check
 			//if there is already any MIN_SELECT_PRIV privilege required
@@ -786,9 +786,6 @@ public void addRequiredColumnPriv( ColumnDescriptor column)
 			//that, remove the MIN_SELECT_PRIV privilege requirement
 			StatementTablePermission key = new StatementTablePermission( 
 					tableUUID, Authorizer.MIN_SELECT_PRIV);
-			StatementColumnPermission tableColumnPrivileges
-			  = (StatementColumnPermission) requiredColumnPrivileges.get( key);
-			if( tableColumnPrivileges != null)
 				requiredColumnPrivileges.remove(key);
 		}
 		
@@ -828,9 +825,6 @@ public void addRequiredTablePriv( TableDescriptor table)
 			//that, remove the MIN_SELECT_PRIV privilege requirement
 			StatementTablePermission key = new StatementTablePermission( 
 					table.getUUID(), Authorizer.MIN_SELECT_PRIV);
-			StatementColumnPermission tableColumnPrivileges
-			  = (StatementColumnPermission) requiredColumnPrivileges.get( key);
-			if( tableColumnPrivileges != null)
 				requiredColumnPrivileges.remove(key);
 		}
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CursorNode.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CursorNode.java
index 3f704c16..16eeee1c 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CursorNode.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/CursorNode.java
@@ -286,24 +286,15 @@ public void bindStatement() throws StandardException
 							+ fromList.size()
 							+ " on return from RS.bindExpressions()");
 			}
-			
-			//DERBY-4191 Make sure that we have minimum select privilege on 
-			//each of the tables in the query.
-			getCompilerContext().pushCurrentPrivType(Authorizer.MIN_SELECT_PRIV);
-			FromList resultSetFromList = resultSet.getFromList();
-			for (int index = 0; index < resultSetFromList.size(); index++) {
-                Object fromTable = resultSetFromList.elementAt(index);
-                if (fromTable instanceof FromBaseTable) {
-                    collectTablePrivsAndStats((FromBaseTable)fromTable);
-                }
-            }
-			getCompilerContext().popCurrentPrivType();
 		}
 		finally
 		{
 			getCompilerContext().popCurrentPrivType();
 		}
 
+        // Collect tables whose indexes we'll want to check for staleness.
+        collectTablesWithPossiblyStaleStats();
+
 		// bind the order by
 		if (orderByList != null)
 		{
@@ -395,41 +386,32 @@ public void bindStatement() throws StandardException
 	}
 
     /**
-     * Collects required privileges for all types of tables, and table
-     * descriptors for base tables whose index statistics we want to check for
-     * staleness (or to create).
-     *
-     * @param fromTable the table
+     * Collects table descriptors for base tables whose index statistics we
+     * want to check for staleness (or to create).
      */
-    private void collectTablePrivsAndStats(FromBaseTable fromTable) {
-        TableDescriptor td = fromTable.getTableDescriptor();
-        if (fromTable.isPrivilegeCollectionRequired()) {
-            // We ask for MIN_SELECT_PRIV requirement of the first column in
-            // the table. The first column is just a place holder. What we
-            // really do at execution time when we see we are looking for
-            // MIN_SELECT_PRIV privilege is as follows:
-            //
-            // 1) We will look for SELECT privilege at table level.
-            // 2) If not found, we will look for SELECT privilege on
-            //    ANY column, not necessarily the first column. But since
-            //    the constructor for column privilege requires us to pass
-            //    a column descriptor, we just choose the first column for
-            //    MIN_SELECT_PRIV requirement.
-            getCompilerContext().addRequiredColumnPriv(
-                    td.getColumnDescriptor(1));
+    private void collectTablesWithPossiblyStaleStats() throws StandardException {
+        if (!checkIndexStats) {
+            return;
         }
+
         // Save a list of base tables to check the index statistics for at a
         // later time. We want to compute statistics for base user tables only,
         // not for instance system tables or VTIs (see TableDescriptor for a
         // list of all available "table types").
-        if (checkIndexStats &&
-                td.getTableType() == TableDescriptor.BASE_TABLE_TYPE) {
+        FromList fromList = resultSet.getFromList();
+        for (int i = 0; i < fromList.size(); i++) {
+            FromTable fromTable = (FromTable) fromList.elementAt(i);
+            if (fromTable.isBaseTable()) {
+                TableDescriptor td = fromTable.getTableDescriptor();
+                if (td.getTableType() == TableDescriptor.BASE_TABLE_TYPE) {
             if (statsToUpdate == null) {
                 statsToUpdate = new ArrayList();
             }
             statsToUpdate.add(td);
         }
     }
+        }
+    }
 
 	/**
 	 * Return true if the node references SESSION schema tables (temporary or permanent)
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/FromList.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/FromList.java
index 9c7d0428..fdf9ce3b 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/FromList.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/FromList.java
@@ -23,11 +23,18 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.Properties;
+import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.Optimizable;
 import org.apache.derby.iapi.sql.compile.OptimizableList;
 import org.apache.derby.iapi.sql.compile.Optimizer;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
-
+import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 
 import org.apache.derby.iapi.error.StandardException;
@@ -335,6 +342,34 @@ public void bindTables(DataDictionary dataDictionary,
 				referencesSessionSchema = true;
 			setElementAt(newNode, index);
 		}
+
+        // DERBY-4191: We must have some SELECT privilege on every table
+        // that we read from, even if we don't actually read any column
+        // values from it (for example if we do SELECT COUNT(*) FROM T).
+        // We ask for MIN_SELECT_PRIV requirement of the first column in
+        // the table. The first column is just a place holder. What we
+        // really do at execution time when we see we are looking for
+        // MIN_SELECT_PRIV privilege is as follows:
+        //
+        // 1) We will look for SELECT privilege at table level.
+        // 2) If not found, we will look for SELECT privilege on
+        //    ANY column, not necessarily the first column. But since
+        //    the constructor for column privilege requires us to pass
+        //    a column descriptor, we just choose the first column for
+        //    MIN_SELECT_PRIV requirement.
+        final CompilerContext cc = getCompilerContext();
+        cc.pushCurrentPrivType(Authorizer.MIN_SELECT_PRIV);
+        for (int index = 0; index < size; index++) {
+            fromTable = (FromTable) elementAt(index);
+            if (fromTable.isPrivilegeCollectionRequired() &&
+                    fromTable.isBaseTable() && !fromTable.forUpdate()) {
+                // This is a base table in the FROM list of a SELECT statement.
+                // Make sure we check for minimum SELECT privilege on it.
+                cc.addRequiredColumnPriv(
+                    fromTable.getTableDescriptor().getColumnDescriptor(1));
+            }
+        }
+        cc.popCurrentPrivType();
 	}
 
 	/**
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index 2cdd6a4a..9944fc78 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -110,7 +110,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * and then it is turned off while we process the query underlying the view
 	 * v1.             
 	 */
-	boolean isPrivilegeCollectionRequired = true;
+    private boolean isPrivilegeCollectionRequired = true;
 
 	/**
 	 * Set the ContextManager for this node.
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
index ba3227eb..9df0b8e4 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
@@ -10172,12 +10172,36 @@ public void testMinimumSelectPrivilegeRequirement() throws SQLException {
         user2St.execute("update user1.t4191_table3 "+
         		"set c31 = ( select 1 from user1.view_t4191_table3 )");
 
-        //none of following selects will work because there is no select
-        //privilege available to user2 yet.
-        assertStatementError("42500", user2St, "select count(*) from user1.t4191");
-        assertStatementError("42500", user2St, "select count(1) from user1.t4191");
+        // None of following selects will work because there is no select
+        // privilege available to user2 yet. Each row in the array contains
+        // a statement and the expected results or update count if the
+        // minimum select privilege had been granted.
+        Object[][] requireMinimumSelectPrivilege = {
+            { "select count(*) from user1.t4191",          new String[][] {{"0"}} },
+            { "select count(1) from user1.t4191",          new String[][] {{"0"}} },
+            { "select 1 from user1.t4191",                 new String[0][] },
+            { "select 1 from user1.t4191 for update",      new String[0][] },
+            { "select 1 from user1.t4191 union values 2",  new String[][] {{"2"}} },
+            { "values 1 union select 1 from user1.t4191",  new String[][] {{"1"}} },
+            { "values (select count(*) from user1.t4191)", new String[][] {{"0"}} },
+            { "values (select count(1) from user1.t4191)", new String[][] {{"0"}} },
+            { "values ((select 1 from user1.t4191))",      new String[][] {{null}} },
+            // DERBY-6408: Next two queries should have returned FALSE.
+            { "values exists(select 1 from user1.t4191)",  new String[][] {{null}} },
+            { "values exists(select * from user1.t4191)",  new String[][] {{null}} },
+            { "select count(*) from (select 1 from user1.t4191) s", new String[][] {{"0"}} },
+            { "insert into user1.t4191_table3 select 1, 2 from user1.t4191", new Integer(0) },
+            { "update user1.t4191_table3 set c31 = 1 where exists (select * from user1.t4191)", new Integer(0) },
+            { "delete from user1.t4191_table3 where exists (select * from user1.t4191)", new Integer(0) },
+        };
+
+        for (int i = 0; i < requireMinimumSelectPrivilege.length; i++) {
+            String sql = (String) requireMinimumSelectPrivilege[i][0];
+            assertStatementError("42500", user2St, sql);
+        }
+
+        // Should fail because there is no select privilege on column Y.
         assertStatementError("42502", user2St, "select count(y) from user1.t4191");
-        assertStatementError("42500", user2St, "select 1 from user1.t4191");
         //update below should fail because user2 does not have update 
         //privileges on user1.t4191
         assertStatementError("42502", user2St, "update user1.t4191 set x=0");
@@ -10187,19 +10211,22 @@ public void testMinimumSelectPrivilegeRequirement() throws SQLException {
         assertStatementError("42502", user2St, "update user1.t4191 set x=" +
 		" ( select z from user1.t4191_table2 )");
 
-        //grant select on user1.t4191(x) to user2 and now the above select 
-        //statements will work
+        // Grant select on user1.t4191(x) to user2 and now the above
+        // statements, which previously failed because they didn't have
+        // the minimum select privilege on the table, will work.
         user1St.execute("grant select(x) on t4191 to user2");
-        String[][] expRS = new String [][]
-                              {
-                                  {"0"}
-                              };
-        rs = user2St.executeQuery("select count(*) from user1.t4191");
-        JDBC.assertFullResultSet(rs, expRS, true);
-        rs = user2St.executeQuery("select count(1) from user1.t4191");
-        JDBC.assertFullResultSet(rs, expRS, true);
-        rs = user2St.executeQuery("select 1 from user1.t4191");
-        JDBC.assertEmpty(rs);
+
+        for (int i = 0; i < requireMinimumSelectPrivilege.length; i++) {
+            String sql = (String) requireMinimumSelectPrivilege[i][0];
+            Object expectedResult = requireMinimumSelectPrivilege[i][1];
+            if (expectedResult instanceof Integer) {
+                assertUpdateCount(
+                    user2St, ((Integer) expectedResult).intValue(), sql);
+            } else {
+                JDBC.assertFullResultSet(user2St.executeQuery(sql),
+                                         (String[][]) expectedResult);
+            }
+        }
 
         //user2 does not have select privilege on 2nd column from user1.t4191
         assertStatementError("42502", user2St, "select count(y) from user1.t4191");
@@ -10272,13 +10299,13 @@ public void testMinimumSelectPrivilegeRequirement() throws SQLException {
         //following queries will still work because there is still a 
         //select privilege on user1.t4191 available to user2
         rs = user2St.executeQuery("select count(*) from user1.t4191");
-        JDBC.assertFullResultSet(rs, expRS, true);
+        JDBC.assertSingleValueResultSet(rs, "0");
         rs = user2St.executeQuery("select count(1) from user1.t4191");
-        JDBC.assertFullResultSet(rs, expRS, true);
+        JDBC.assertSingleValueResultSet(rs, "0");
         rs = user2St.executeQuery("select 1 from user1.t4191");
         JDBC.assertEmpty(rs);
         rs = user2St.executeQuery("select count(y) from user1.t4191");
-        JDBC.assertFullResultSet(rs, expRS, true);
+        JDBC.assertSingleValueResultSet(rs, "0");
         //grant select privilege on user1.t4191(x) back to user2 so following
         //update can succeed
         user1St.execute("grant select(x) on t4191 to user2");
