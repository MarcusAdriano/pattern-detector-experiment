diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index bf86e95e..ff9a71d1 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -304,12 +304,8 @@ public void bindTargetExpressions(FromList fromListParam)
 	}
 
 	/**
-	 * Set the type of each parameter in the result column list if this node
-	 * represents a table constructor (aka VALUES clause). Table constructors
-	 * are represented either by a {@code RowResultSetNode} or by a
-	 * {@code UnionNode} with multiple {@code RowResultSetNode} children and
-	 * whose {@code tableConstructor()} method returns {@code true}. For all
-	 * other nodes, this method should be a no-op.
+	 * Set the type of each parameter in the result column list for this
+	 * table constructor.
 	 *
 	 * @param typeColumns	The ResultColumnList containing the desired result
 	 *						types.
@@ -319,9 +315,17 @@ public void bindTargetExpressions(FromList fromListParam)
 	void setTableConstructorTypes(ResultColumnList typeColumns)
 			throws StandardException
 	{
-		// Nothing to be done unless this node represents a VALUES clause, in
-		// which case the overrides in RowResultSetNode or UnionNode will do
-		// the necessary work.
+        // VALUES clause needs special handling that's taken care of in a
+        // sub-class. For all other nodes, just go through the result columns
+        // and set the type for dynamic parameters.
+        for (int i = 0; i < resultColumns.size(); i++) {
+            ResultColumn rc = (ResultColumn) resultColumns.elementAt(i);
+            ValueNode re = rc.getExpression();
+            if (re != null && re.requiresTypeFromContext()) {
+                ResultColumn typeCol = (ResultColumn) typeColumns.elementAt(i);
+                re.setType(typeCol.getTypeServices());
+            }
+        }
 	}
 
 	/**
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java
index b98de28d..fe250b53 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InsertTest.java
@@ -34,6 +34,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public class InsertTest extends BaseJDBCTestCase {
 
+    private static final String PARAMETER_IN_SELECT_LIST = "42X34";
+
     public InsertTest(String name) {
         super(name);
     }
@@ -134,4 +136,55 @@ public void testInsertFromExceptOrIntersect() throws SQLException {
                 "1");
         s.execute("delete from t3");
     }
+
+    /**
+     * Regression test for DERBY-4671. Verify that dynamic parameters can be
+     * used in the select list in an INSERT INTO ... SELECT FROM statement.
+     * This used to work, but the fix for DERBY-4420 made it throw a
+     * NullPointerException.
+     */
+    public void testInsertFromSelectWithParameters() throws SQLException {
+        Statement s = createStatement();
+        s.execute("create table derby4671(x int)");
+        s.execute("insert into derby4671 values (1), (2)");
+
+        // This call failed with a NullPointerException
+        PreparedStatement ins1 = prepareStatement(
+                "insert into derby4671 select ? from derby4671");
+
+        ins1.setInt(1, 7);
+        assertUpdateCount(ins1, 2);
+
+        JDBC.assertFullResultSet(
+                s.executeQuery("select * from derby4671 order by x"),
+                new String[][] {{"1"}, {"2"}, {"7"}, {"7"}});
+
+        // Also verify that it works when the ? is in an expression
+        PreparedStatement ins2 = prepareStatement(
+                "insert into derby4671 select (x+?)*10 from derby4671");
+
+        ins2.setInt(1, 77);
+        assertUpdateCount(ins2, 4);
+
+        JDBC.assertFullResultSet(
+                s.executeQuery("select * from derby4671 order by x"),
+                new String[][] {
+                    {"1"}, {"2"}, {"7"}, {"7"},
+                    {"780"}, {"790"}, {"840"}, {"840"}});
+
+        // We only accept ? in the top level select list, so these should
+        // still fail
+        assertCompileError(
+                PARAMETER_IN_SELECT_LIST,
+                "insert into derby4671 select ? from derby4671 "
+                + "union select ? from derby4671");
+        assertCompileError(
+                PARAMETER_IN_SELECT_LIST,
+                "insert into derby4671 select ? from derby4671 "
+                + "except select ? from derby4671");
+        assertCompileError(
+                PARAMETER_IN_SELECT_LIST,
+                "insert into derby4671 select ? from derby4671 "
+                + "intersect select ? from derby4671");
+    }
 }
