diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
index 9be6dc91..1a24696c 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
@@ -425,8 +425,8 @@ public final synchronized  void setNorm(int doc, String field, byte value)
           throws IOException{
     if(directoryOwner)
       aquireWriteLock();
-    doSetNorm(doc, field, value);
     hasChanges = true;
+    doSetNorm(doc, field, value);
   }
 
   /** Implements setNorm in subclass.*/
@@ -580,8 +580,8 @@ public final int deleteDocuments(Term term) throws IOException {
   public final synchronized void undeleteAll() throws IOException{
     if(directoryOwner)
       aquireWriteLock();
-    doUndeleteAll();
     hasChanges = true;
+    doUndeleteAll();
   }
 
   /** Implements actual undeleteAll() in subclass. */
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
index f345cd98..1b1c5133 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
@@ -789,6 +789,38 @@ public void testDocsOutOfOrderJIRA140() throws IOException {
       }
     }
     
+    public void testExceptionReleaseWriteLockJIRA768() throws IOException {
+
+      Directory dir = new RAMDirectory();      
+      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
+      addDoc(writer, "aaa");
+      writer.close();
+
+      IndexReader reader = IndexReader.open(dir);
+      try {
+        reader.deleteDocument(1);
+        fail("did not hit exception when deleting an invalid doc number");
+      } catch (ArrayIndexOutOfBoundsException e) {
+        // expected
+      }
+      reader.close();
+      if (IndexReader.isLocked(dir)) {
+        fail("write lock is still held after close");
+      }
+
+      reader = IndexReader.open(dir);
+      try {
+        reader.setNorm(1, "content", (float) 2.0);
+        fail("did not hit exception when calling setNorm on an invalid doc number");
+      } catch (ArrayIndexOutOfBoundsException e) {
+        // expected
+      }
+      reader.close();
+      if (IndexReader.isLocked(dir)) {
+        fail("write lock is still held after close");
+      }
+    }
+
     private String arrayToString(String[] l) {
       String s = "";
       for(int i=0;i<l.length;i++) {
