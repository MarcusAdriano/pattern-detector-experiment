diff --git a/incubator/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java b/incubator/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
index 9eb4418d..6002556b 100644
--- a/incubator/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
+++ b/incubator/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
@@ -29,6 +29,8 @@
 
 public interface BundleFramework
 {
+  public static final String SHARED_BUNDLE_FRAMEWORK = "shared.bundle.framework";
+  
   /**
    * Initialises the framework
    * @throws BundleException
diff --git a/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java b/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
index 22b4a957..b4d68041 100644
--- a/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
+++ b/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
@@ -35,6 +35,7 @@
 import org.apache.aries.application.Content;
 import org.apache.aries.application.DeploymentContent;
 import org.apache.aries.application.DeploymentMetadata;
+import org.apache.aries.application.InvalidAttributeException;
 import org.apache.aries.application.management.AriesApplication;
 import org.apache.aries.application.management.UpdateException;
 import org.apache.aries.application.management.spi.framework.BundleFramework;
@@ -48,6 +49,7 @@
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.BundleException;
 import org.osgi.framework.Constants;
+import org.osgi.framework.Filter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -133,8 +135,6 @@ private BundleFramework isolatedInstall(
      * Set up framework config properties
      */
     Properties frameworkConfig = new Properties();
-    frameworkConfig.put("osgi.console", "0");
-
     String osgiFrameworkLocation = parentCtx.getProperty(FrameworkConstants.OSGI_FRAMEWORK);
     if (osgiFrameworkLocation != null) {
       frameworkConfig.put(FrameworkConstants.OSGI_FRAMEWORK, osgiFrameworkLocation);
@@ -151,6 +151,9 @@ private BundleFramework isolatedInstall(
     frameworkBundleManifest.put(Constants.BUNDLE_SYMBOLICNAME, deploymentMF.getApplicationSymbolicName());
     frameworkBundleManifest.put(Constants.BUNDLE_VERSION, deploymentMF.getApplicationVersion().toString());
 
+    /**
+     * Set up Import-Package header for framework manifest
+     */
     // Extract the import packages and remove anything we already have available in the current framework
     Collection<Content> imports = 
       InstallUtils.calculateImports(
@@ -165,6 +168,31 @@ private BundleFramework isolatedInstall(
       frameworkBundleManifest.put(Constants.IMPORT_PACKAGE, buffer.substring(0, buffer.length()-1));
     }
     
+    /**
+     * Set up CompositeServiceFilter-Import header for framework manifest
+     */
+    StringBuffer serviceImportFilter = 
+      new StringBuffer("(" + Constants.OBJECTCLASS + "=javax.transaction.TransactionSynchronizationRegistry)");
+    
+    try
+    {
+      for (Filter importFilter : app.getDeploymentMetadata().getDeployedServiceImport()) {
+        if (serviceImportFilter.length() > 0) {
+          serviceImportFilter.append(",");
+        }
+        serviceImportFilter.append(importFilter.toString());
+      }
+      
+      frameworkBundleManifest.put("CompositeServiceFilter-Import",
+          serviceImportFilter.toString());
+    }
+    catch (InvalidAttributeException e)
+    {
+      LOGGER.debug(LOG_EXCEPTION, e);
+      LOGGER.debug(LOG_EXIT,"isolatedInstall", e);
+      throw new BundleException("Failed to process Service Imports" , e);
+    }
+    
     /**
      * Install and start the new isolated bundle framework
      */
diff --git a/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java b/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
index 91f1b8b5..86a6f3f5 100644
--- a/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
+++ b/incubator/aries/trunk/application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
@@ -33,14 +33,12 @@
 
 import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
 import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
-import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
 
 public class SharedBundleFramework
 {  
   private static final Logger LOGGER = LoggerFactory.getLogger(SharedBundleFramework.class);
   
   private static BundleFramework sharedFramework;
-  private static final String SHARED_BUNDLE_FRAMEWORK = "shared.bundle.framework";
 
   /**
    * This is not the right way to make blueprint usable by applications, but it is all
@@ -79,12 +77,12 @@ private static void createSharedBundleFramework(BundleContext bc,
       }
       
       Properties compositeManifest = new Properties();
-      compositeManifest.put(Constants.BUNDLE_SYMBOLICNAME, SHARED_BUNDLE_FRAMEWORK);
+      compositeManifest.put(Constants.BUNDLE_SYMBOLICNAME, BundleFramework.SHARED_BUNDLE_FRAMEWORK);
 
       //Add blueprint so that it is available to applications.
       compositeManifest.put(Constants.IMPORT_PACKAGE, RUNTIME_PACKAGES);
 
-      sharedFramework = bundleFrameworkFactory.createBundleFramework(bc, SHARED_BUNDLE_FRAMEWORK,
+      sharedFramework = bundleFrameworkFactory.createBundleFramework(bc, BundleFramework.SHARED_BUNDLE_FRAMEWORK,
           frameworkConfig, compositeManifest);
 
       sharedFramework.init();
