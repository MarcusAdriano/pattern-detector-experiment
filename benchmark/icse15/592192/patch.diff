diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DssTrace.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DssTrace.java
index 8a260c3d..c6757220 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DssTrace.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DssTrace.java
@@ -20,6 +20,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 package org.apache.derby.impl.drda;
 
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+
+
 // Generic process and error tracing encapsulation.
 // This class also traces a DRDA communications buffer.
 // The value of the hex bytes are traced along with
@@ -160,14 +167,28 @@ protected boolean isComBufferTraceOn()
   // Start the communications buffer trace.
   // The name of the file to place the trace is passed to this method.
   // After calling this method, calls to isComBufferTraceOn() will return true.
-  protected void startComBufferTrace (String fileName)
+  protected void startComBufferTrace (final String fileName) throws IOException 
   {
     synchronized (comBufferSync) {
-      try {
         // Only start the trace if it is off.
         if (comBufferTraceOn == false) {
           // The writer will be buffered for effeciency.
-          comBufferWriter = new java.io.PrintWriter (new java.io.BufferedWriter (new java.io.FileWriter (fileName), 4096));
+            try {
+                
+                comBufferWriter =  ((PrintWriter)AccessController.doPrivileged(
+                            new PrivilegedExceptionAction() {
+                                public Object run() throws SecurityException, IOException {
+                                    return new  PrintWriter (new java.io.BufferedWriter (new java.io.FileWriter (fileName), 4096));
+                                }
+                            }));
+            } catch (PrivilegedActionException pae) {
+               Exception e = pae.getException();
+               if (e instanceof SecurityException)
+                   throw (SecurityException)pae.getException();
+               else
+                   throw (IOException) pae.getException();
+            }
+          
           // Turn on the trace flag.
           comBufferTraceOn = true;
           // initialize the codepoint name table if it is null.
@@ -181,12 +202,9 @@ protected void startComBufferTrace (String fileName)
           }
         }
       }
-      catch (java.io.IOException e) {
-        // The IOException is currently ignored.  Handling should be added.
-      }
-    }
   }
 
+
   // Stop the communications buffer trace.
   // The trace file is flushed and closed.  After calling this method,
   // calls to isComBufferTraceOn () will return false.
@@ -198,11 +216,14 @@ protected void stopComBufferTrace ()
         // Turn of the trace flag.
         comBufferTraceOn = false;
         // Flush and close the writer used for tracing.
+        if (comBufferWriter != null)
+        {
         comBufferWriter.flush();
         comBufferWriter.close();
       }
     }
   }
+  }
 
   // Write the communication buffer data to the trace.
   // The data is passed in via a byte array.  The start and length of the data is given.
diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 81d3501d..65d084bc 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -1396,10 +1396,14 @@ protected synchronized void processCommands(DDMReader reader, DDMWriter writer,
 					}
 					else
 					{
+					    if (sessionArg != 0)
 						sendMessage(writer, ERROR,  
 							localizeMessage("DRDA_SessionNotFound.U", 
 							(session.langUtil == null) ? langUtil : session.langUtil,
 							new String [] {new Integer(sessionArg).toString()}));
+					    else
+							sendMessage(writer, ERROR,  
+										localizeMessage("DRDA_ErrorStartingTracing.S",null));          
 					}
 					break;
 				case COMMAND_TRACEDIRECTORY:
@@ -3273,18 +3277,27 @@ protected int getSecurityMechanism()
 	 */
 	private boolean setTrace(boolean on)
 	{
+        boolean setTraceSuccessful = true;
 		if (sessionArg == 0)
 		{
-			setTraceAll(on);
 			synchronized(sessionTable) {
 				for (Enumeration e = sessionTable.elements(); e.hasMoreElements(); )
 				{	
+                   
 					Session session = (Session) e.nextElement();
 					if (on)
+						try {
 						session.setTraceOn(traceDirectory);
+						} catch (Exception te ) {
+							consoleExceptionPrintTrace(te);
+							setTraceSuccessful = false;
+							session.setTraceOff();
+						}
 					else
 						session.setTraceOff();
 				}
+				if (setTraceSuccessful)
+					setTraceAll(on);
 			}
 		}
 		else
@@ -3293,14 +3306,20 @@ private boolean setTrace(boolean on)
 			if (session != null)
 			{	
 				if (on)
+					try {                         
 					session.setTraceOn(traceDirectory);
+					}catch (Exception te) {
+						consoleExceptionPrintTrace(te);
+						setTraceSuccessful = false;
+						session.setTraceOff();
+					}
 				else
 					session.setTraceOff();
 			}
 			else
 				return false;
 		}
-		return true;
+		return setTraceSuccessful;
 	}
 
 
diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/Session.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/Session.java
index 2b9c4cd3..6fade941 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/Session.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/Session.java
@@ -123,31 +123,35 @@ protected void close() throws SQLException
 	 * initialize a server trace for the DRDA protocol
 	 * 
 	 * @param traceDirectory - directory for trace file
+	 * @throws IOException 
 	 */
-	protected void initTrace(String traceDirectory)
+	protected void initTrace(String traceDirectory) throws IOException 
 	{
 		if (traceDirectory != null)
 			traceFileName = traceDirectory + "/" + TRACENAME_PREFIX+
 				connNum+ TRACENAME_SUFFIX;
 		else
 			traceFileName = TRACENAME_PREFIX +connNum+ TRACENAME_SUFFIX;
-		traceOn = true;
+		
 		if (dssTrace == null)
 			dssTrace = new DssTrace();
 		dssTrace.startComBufferTrace (traceFileName);
+		traceOn = true;
 	}
 
 	/**
 	 * Set tracing on
 	 * 
 	 * @param traceDirectory 	directory for trace files
+	 * @throws IOException 
 	 */
-	protected void setTraceOn(String traceDirectory)
+	protected void setTraceOn(String traceDirectory) throws IOException
 	{
 		if (traceOn)
 			return;
 		initTrace(traceDirectory);
 	}
+
 	/**
 	 * Get whether tracing is on 
 	 *
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
index e69de29b..74e2d86c 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
@@ -0,0 +1,179 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.derbynet;
+
+import org.apache.derby.drda.NetworkServerControl;
+import org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest;
+import org.apache.derbyTesting.functionTests.tests.lang.SimpleTest;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.Derby;
+import org.apache.derbyTesting.junit.SecurityManagerSetup;
+import org.apache.derbyTesting.junit.SupportFilesSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import java.io.File;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class NetworkServerControlApiTest extends BaseJDBCTestCase {
+
+    private static String POLICY_FILE_NAME="functionTests/tests/derbynet/NetworkServerControlApiTest.policy";
+    private static String TARGET_POLICY_FILE_NAME="server.policy";
+    
+    public NetworkServerControlApiTest(String name) {
+        super(name);
+       
+    }
+
+    /** Test NetworkServerControl API.
+     *  Right now it tests only the trace command for DERBY-3110.
+     *  TODO: Add tests for other API calls.
+     */
+    
+    
+     /** 
+     * @throws Exception
+     */
+    public void testTraceCommands() throws Exception
+    {
+        NetworkServerControl nsctrl = new NetworkServerControl();
+        String derbySystemHome = getSystemProperty("derby.system.home");
+        nsctrl.setTraceDirectory(derbySystemHome);
+        nsctrl.trace(true);
+        nsctrl.ping();
+        assertTrue(fileExists(derbySystemHome+"/Server3.trace"));
+        nsctrl.trace(false);
+        
+        // now try on a directory where we don't have permission
+        // this won't actually cause a failure until we turn on tracing.
+        // assume we don't have permission to write to root.
+        nsctrl.setTraceDirectory("/");
+        
+        // attempt to turn on tracing to location where we don't have permisson
+        try {
+            nsctrl.trace(true);
+            fail("Should have gotten an exception turning on tracing");
+        } catch (Exception e) {
+            // expected exception
+        }
+        // make sure we can still ping
+        nsctrl.ping();
+    
+                        
+    }
+
+    private boolean fileExists(String filename) {
+        final File file = new File(filename);
+        try {
+            return ((Boolean)AccessController.doPrivileged(
+                new PrivilegedExceptionAction() {
+                    public Object run() throws SecurityException {
+                        return new Boolean(file.exists());
+                    }
+                })).booleanValue();
+        } catch (PrivilegedActionException pae) {
+            throw (SecurityException)pae.getException();
+        }
+        
+    }
+    
+    /**
+     * Construct the name of the server policy file.
+     */
+    private String makeServerPolicyName()
+    {
+        try {
+            String  userDir = getSystemProperty( "user.dir" );
+            String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
+            File      file = new File( fileName );
+            String  urlString = file.toURL().toExternalForm();
+
+            return urlString;
+        }
+        catch (Exception e)
+        {
+            System.out.println( "Unexpected exception caught by makeServerPolicyName(): " + e );
+
+            return null;
+        }
+    }
+    
+    
+    /**
+     * Add decorators to a test run. Context is established in the reverse order
+     * that decorators are declared here. That is, decorators compose in reverse
+     * order. The order of the setup methods is:
+     *
+     * <ul>
+     * <li>Copy security policy to visible location.</li>
+     * <li>Install a security manager.</li>
+     * <li>Run the tests.</li>
+     * </ul>
+     */
+    private static Test decorateTest()
+    {
+        
+        NetworkServerControlApiTest nsapitest = new NetworkServerControlApiTest("test");
+        
+        String serverPolicyName = nsapitest.makeServerPolicyName();
+    
+        
+        Test test = TestConfiguration.clientServerSuite(NetworkServerControlApiTest.class);
+        //
+        // Install a security manager using the initial policy file.
+        //
+        
+        test = new SecurityManagerSetup( test,serverPolicyName );
+        
+        
+        
+        //
+        // Copy over the policy file we want to use.
+        //
+        test = new SupportFilesSetup
+            (
+             test,
+             null,
+             new String[] { POLICY_FILE_NAME },
+             null,
+             new String[] { TARGET_POLICY_FILE_NAME}
+             );
+
+        return test;
+    }
+    
+    public static Test suite()
+    {
+        
+        TestSuite suite = new TestSuite("NetworkServerControlApiTest");
+        
+        // Need derbynet.jar in the classpath!
+        if (!Derby.hasServer())
+            return suite;
+        
+        return decorateTest();
+    }
+}
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
index 9d9a6b8e..7a34fa6a 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
@@ -46,6 +46,7 @@ public static Test suite() {
 
         TestSuite suite = new TestSuite("derbynet");
              
+        suite.addTest(NetworkServerControlApiTest.suite());     
         suite.addTest(PrepareStatementTest.suite());
         suite.addTest(ShutDownDBWhenNSShutsDownTest.suite());
         suite.addTest(DRDAProtocolTest.suite());
@@ -56,6 +57,7 @@ public static Test suite() {
         suite.addTest(SSLTest.suite());
         suite.addTest(NetIjTest.suite());
         
+        
         // Disabled due to "java.sql.SQLSyntaxErrorException: The class
         // 'org.apache.derbyTesting.functionTests.tests.derbynet.checkSecMgr'
         //  does not exist or is inaccessible. This can happen if the class is not public."
