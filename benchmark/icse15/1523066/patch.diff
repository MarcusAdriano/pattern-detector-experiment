diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java
index adc627cf..b4fe9ca8 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/common/Refreshable.java
@@ -38,13 +38,13 @@
   /**
    * <p>
    * Triggers "refresh" -- whatever that means -- of the implementation. The general contract is that any
-   *  should always leave itself in a consistent, operational state, and that the refresh
+   * {@link Refreshable} should always leave itself in a consistent, operational state, and that the refresh
    * atomically updates internal state from old to new.
    * </p>
    * 
    * @param alreadyRefreshed
-   *          s that are known to have already been
-   *          refreshed as a result of an initial call to a  method on some
+   *          {@link org.apache.mahout.cf.taste.common.Refreshable}s that are known to have already been
+   *          refreshed as a result of an initial call to a {@link #refresh(Collection)} method on some
    *          object. This ensure that objects in a refresh dependency graph aren't refreshed twice
    *          needlessly.
    */
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/Cache.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/Cache.java
index aa4a69ec..a64aaba1 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/Cache.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/Cache.java
@@ -24,7 +24,7 @@
 
 /**
  * <p>
- * An efficient Map-like class which caches values for keys. Values are not "put" into a ;
+ * An efficient Map-like class which caches values for keys. Values are not "put" into a {@link Cache};
  * instead the caller supplies the instance with an implementation of {@link Retriever} which can load the
  * value for a given key.
  * </p>
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java
index 18cd47a0..fde89583 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java
@@ -53,7 +53,7 @@
   private BitSet recentlyAccessed;
   private final boolean countingAccesses;
   
-  /** Creates a new  with default capacity. */
+  /** Creates a new {@link FastByIDMap} with default capacity. */
   public FastByIDMap() {
     this(2, NO_MAX_SIZE);
   }
@@ -71,7 +71,7 @@ public FastByIDMap(int size, int maxSize) {
   }
 
   /**
-   * Creates a new  whose capacity can accommodate the given number of entries without rehash.
+   * Creates a new {@link FastByIDMap} whose capacity can accommodate the given number of entries without rehash.
    * 
    * @param size desired capacity
    * @param maxSize max capacity
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java
index d41b4a3f..5908270b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java
@@ -42,7 +42,7 @@
   private int numEntries;
   private int numSlotsUsed;
   
-  /** Creates a new  with default capacity. */
+  /** Creates a new {@link FastIDSet} with default capacity. */
   public FastIDSet() {
     this(2);
   }
@@ -263,10 +263,10 @@ private void rehash(int newHashSize) {
   }
   
   /**
-   * Convenience method to quickly compute just the size of the intersection with another .
+   * Convenience method to quickly compute just the size of the intersection with another {@link FastIDSet}.
    * 
    * @param other
-   *           to intersect with
+   *          {@link FastIDSet} to intersect with
    * @return number of elements in intersection
    */
   public int intersectionSize(FastIDSet other) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
index 31b27229..7c64b440 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
@@ -68,7 +68,7 @@
   private BitSet recentlyAccessed;
   private final boolean countingAccesses;
   
-  /** Creates a new  with default capacity. */
+  /** Creates a new {@link FastMap} with default capacity. */
   public FastMap() {
     this(2, NO_MAX_SIZE);
   }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/LongPrimitiveArrayIterator.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/LongPrimitiveArrayIterator.java
index 96e317c4..5127df0a 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/LongPrimitiveArrayIterator.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/LongPrimitiveArrayIterator.java
@@ -32,7 +32,7 @@
   
   /**
    * <p>
-   * Creates an  over an entire array.
+   * Creates an {@link LongPrimitiveArrayIterator} over an entire array.
    * </p>
    * 
    * @param array
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
index 8603c2fa..cc91560e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
@@ -66,7 +66,7 @@ public void removeDependency(Refreshable refreshable) {
   }
   
   /**
-   * Typically this is called in  and is the entire body of
+   * Typically this is called in {@link Refreshable#refresh(java.util.Collection)} and is the entire body of
    * that method.
    */
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java
index 47fc2e2c..a898d85b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericDataModel.java
@@ -57,7 +57,7 @@
   
   /**
    * <p>
-   * Creates a new  from the given users (and their preferences). This
+   * Creates a new {@link GenericDataModel} from the given users (and their preferences). This
    * {@link DataModel} retains all this information in memory and is effectively immutable.
    * </p>
    * 
@@ -69,7 +69,7 @@ public GenericDataModel(FastByIDMap<PreferenceArray> userData) {
 
   /**
    * <p>
-   * Creates a new  from the given users (and their preferences). This
+   * Creates a new {@link GenericDataModel} from the given users (and their preferences). This
    * {@link DataModel} retains all this information in memory and is effectively immutable.
    * </p>
    *
@@ -138,7 +138,7 @@ public GenericDataModel(FastByIDMap<PreferenceArray> userData, FastByIDMap<FastB
 
   /**
    * <p>
-   * Creates a new containing an immutable copy of the data from another given
+   * Creates a new {@link GenericDataModel} containing an immutable copy of the data from another given
    * {@link DataModel}.
    * </p>
    *
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java
index 04446830..c96d6e0b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java
@@ -93,7 +93,7 @@
  * This class will also look for update "delta" files in the same directory, with file names that start the
  * same way (up to the first period). These files have the same format, and provide updated data that
  * supersedes what is in the main data file. This is a mechanism that allows an application to push updates to
- *  without re-copying the entire data file.
+ * {@link FileDataModel} without re-copying the entire data file.
  * </p>
  *
  * <p>
@@ -688,7 +688,7 @@ public int getNumUsersWithPreferenceFor(long itemID1, long itemID2) throws Taste
   }
 
   /**
-   * Note that this method only updates the in-memory preference data that this
+   * Note that this method only updates the in-memory preference data that this {@link FileDataModel}
    * maintains; it does not modify any data on disk. Therefore any updates from this method are only
    * temporary, and lost when data is reloaded from a file. This method should also be considered relatively
    * slow.
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java
index d121275f..59c30d97 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java
@@ -43,7 +43,7 @@
 
   /**
    * <p>
-   * Creates a possibly weighted AbstractSimilarity.
+   * Creates a possibly weighted {@link AbstractSimilarity}.
    * </p>
    */
   AbstractSimilarity(final DataModel dataModel, Weighting weighting, boolean centerData) throws TasteException {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java
index 70e96a75..3f2b378c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java
@@ -55,7 +55,7 @@
 
   /**
    * <p>
-   * Creates a  from a precomputed list of {@link ItemItemSimilarity}s. Each
+   * Creates a {@link GenericItemSimilarity} from a precomputed list of {@link ItemItemSimilarity}s. Each
    * represents the similarity between two distinct items. Since similarity is assumed to be symmetric, it is
    * not necessary to specify similarity between item1 and item2, and item2 and item1. Both are the same. It
    * is also not necessary to specify a similarity between any item and itself; these are assumed to be 1.0.
@@ -101,7 +101,7 @@ public GenericItemSimilarity(Iterable<ItemItemSimilarity> similarities, int maxT
    * </p>
    * 
    * <p>
-   * It's valid to build a  this way, but perhaps missing some of the point of an
+   * It's valid to build a {@link GenericItemSimilarity} this way, but perhaps missing some of the point of an
    * item-based recommender. Item-based recommenders use the assumption that item-item similarities are
    * relatively fixed, and might be known already independent of user preferences. Hence it is useful to
    * inject that information, using {@link #GenericItemSimilarity(Iterable)}.
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/Preference.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/Preference.java
index 1e164ec0..fe0150a3 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/Preference.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/Preference.java
@@ -19,8 +19,8 @@
 
 /**
  * <p>
- * A  encapsulates an item and a preference value, which indicates the strength of the
- * preference for it. s are associated to users.
+ * A {@link Preference} encapsulates an item and a preference value, which indicates the strength of the
+ * preference for it. {@link Preference}s are associated to users.
  * </p>
  */
 public interface Preference {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java
index cdd7adcf..9b99c218 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Recommender.java
@@ -93,7 +93,7 @@
   void removePreference(long userID, long itemID) throws TasteException;
 
   /**
-   * @return underlying {@link DataModel} used by this implementation
+   * @return underlying {@link DataModel} used by this {@link Recommender} implementation
    */
   DataModel getDataModel();
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Rescorer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Rescorer.java
index 36772349..1490761a 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Rescorer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/recommender/Rescorer.java
@@ -19,14 +19,14 @@
 
 /**
  * <p>
- * A  simply assigns a new "score" to a thing like an ID of an item or user which a
+ * A {@link Rescorer} simply assigns a new "score" to a thing like an ID of an item or user which a
  * {@link Recommender} is considering returning as a top recommendation. It may be used to arbitrarily re-rank
  * the results according to application-specific logic before returning recommendations. For example, an
  * application may want to boost the score of items in a certain category just for one request.
  * </p>
  *
  * <p>
- * A  can also exclude a thing from consideration entirely by returning {@code true} from
+ * A {@link Rescorer} can also exclude a thing from consideration entirely by returning {@code true} from
  * {@link #isFiltered(Object)}.
  * </p>
  */
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/similarity/UserSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/similarity/UserSimilarity.java
index 929ff3d0..bd53c518 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/similarity/UserSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/similarity/UserSimilarity.java
@@ -48,7 +48,7 @@
   
   /**
    * <p>
-   * Attaches a {@link PreferenceInferrer} to the  implementation.
+   * Attaches a {@link PreferenceInferrer} to the {@link UserSimilarity} implementation.
    * </p>
    * 
    * @param inferrer {@link PreferenceInferrer}
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterable.java
index eb697bac..cfc18d63 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterable.java
@@ -38,17 +38,17 @@
   private final boolean skipFirstLine;
   private final String origFilename;
   
-  /** Creates a  over a given file, assuming a UTF-8 encoding. */
+  /** Creates a {@link FileLineIterable} over a given file, assuming a UTF-8 encoding. */
   public FileLineIterable(File file) throws IOException {
     this(file, Charsets.UTF_8, false);
   }
 
-  /** Creates a  over a given file, assuming a UTF-8 encoding. */
+  /** Creates a {@link FileLineIterable} over a given file, assuming a UTF-8 encoding. */
   public FileLineIterable(File file, boolean skipFirstLine) throws IOException {
     this(file, Charsets.UTF_8, skipFirstLine);
   }
   
-  /** Creates a  over a given file, using the given encoding. */
+  /** Creates a {@link FileLineIterable} over a given file, using the given encoding. */
   public FileLineIterable(File file, Charset encoding, boolean skipFirstLine) throws IOException {
     this(FileLineIterator.getFileInputStream(file), encoding, skipFirstLine);
   }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterator.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterator.java
index 1dc48ccc..f505b963 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterator.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FileLineIterator.java
@@ -49,19 +49,18 @@
   private static final Logger log = LoggerFactory.getLogger(FileLineIterator.class);
 
   /**
-   * Creates a  over a given file, assuming a UTF-8 encoding.
+   * Creates a {@link FileLineIterator} over a given file, assuming a UTF-8 encoding.
    *
    * @throws java.io.FileNotFoundException if the file does not exist
        * @throws IOException
        *           if the file cannot be read
        */
-
   public FileLineIterator(File file) throws IOException {
     this(file, Charsets.UTF_8, false);
   }
 
   /**
-   * Creates a  over a given file, assuming a UTF-8 encoding.
+   * Creates a {@link FileLineIterator} over a given file, assuming a UTF-8 encoding.
    *
    * @throws java.io.FileNotFoundException if the file does not exist
    * @throws IOException                   if the file cannot be read
@@ -71,7 +70,7 @@ public FileLineIterator(File file, boolean skipFirstLine) throws IOException {
   }
 
   /**
-   * Creates a  over a given file, using the given encoding.
+   * Creates a {@link FileLineIterator} over a given file, using the given encoding.
    *
    * @throws java.io.FileNotFoundException if the file does not exist
    * @throws IOException                   if the file cannot be read
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java
index b84b2f87..3e9de2cf 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java
@@ -45,7 +45,7 @@
 
   /**
    * <p>
-   * Creates a  using the default {@link javax.sql.DataSource} (named
+   * Creates a {@link MySQLBooleanPrefJDBCDataModel} using the default {@link javax.sql.DataSource} (named
    * {@link #DEFAULT_DATASOURCE_NAME} and default table/column names.
    * </p>
    * 
@@ -58,7 +58,7 @@ public MySQLBooleanPrefJDBCDataModel() throws TasteException {
   
   /**
    * <p>
-   * Creates a  using the default {@link javax.sql.DataSource} found
+   * Creates a {@link MySQLBooleanPrefJDBCDataModel} using the default {@link javax.sql.DataSource} found
    * under the given name, and using default table/column names.
    * </p>
    * 
@@ -77,7 +77,7 @@ public MySQLBooleanPrefJDBCDataModel(String dataSourceName) throws TasteExceptio
   
   /**
    * <p>
-   * Creates a  using the given {@link javax.sql.DataSource} and default
+   * Creates a {@link MySQLBooleanPrefJDBCDataModel} using the given {@link javax.sql.DataSource} and default
    * table/column names.
    * </p>
    * 
@@ -94,7 +94,7 @@ public MySQLBooleanPrefJDBCDataModel(DataSource dataSource) {
   
   /**
    * <p>
-   * Creates a  using the given {@link javax.sql.DataSource} and default
+   * Creates a {@link MySQLBooleanPrefJDBCDataModel} using the given {@link javax.sql.DataSource} and default
    * table/column names.
    * </p>
    * 
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java
index 2a7e8e82..9904c7e0 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java
@@ -129,7 +129,7 @@
   
   /**
    * <p>
-   * Creates a  using the default {@link DataSource} (named
+   * Creates a {@link MySQLJDBCDataModel} using the default {@link DataSource} (named
    * {@link #DEFAULT_DATASOURCE_NAME} and default table/column names.
    * </p>
    * 
@@ -142,7 +142,7 @@ public MySQLJDBCDataModel() throws TasteException {
   
   /**
    * <p>
-   * Creates a  using the default {@link DataSource} found under the given name, and
+   * Creates a {@link MySQLJDBCDataModel} using the default {@link DataSource} found under the given name, and
    * using default table/column names.
    * </p>
    * 
@@ -162,7 +162,7 @@ public MySQLJDBCDataModel(String dataSourceName) throws TasteException {
   
   /**
    * <p>
-   * Creates a  using the given {@link DataSource} and default table/column names.
+   * Creates a {@link MySQLJDBCDataModel} using the given {@link DataSource} and default table/column names.
    * </p>
    * 
    * @param dataSource
@@ -179,7 +179,7 @@ public MySQLJDBCDataModel(DataSource dataSource) {
   
   /**
    * <p>
-   * Creates a  using the given {@link DataSource} and default table/column names.
+   * Creates a {@link MySQLJDBCDataModel} using the given {@link DataSource} and default table/column names.
    * </p>
    * 
    * @param dataSource
