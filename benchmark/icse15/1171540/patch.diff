diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
index af4f99be..ed1b6dc8 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
@@ -101,6 +101,7 @@ public final MethodVisitor visitMethod(int access, String name, String desc,
         }
       }
       
+      adapter.setCurrentInterface(Type.getType(Object.class));
       visitObjectMethods();
       
       adapter.visitEnd();
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyMethodAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyMethodAdapter.java
index aa68eca8..e5c293a9 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyMethodAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyMethodAdapter.java
@@ -31,12 +31,16 @@
 final class InterfaceUsingWovenProxyMethodAdapter extends AbstractWovenProxyMethodAdapter {
 
   private final Type interfaceType;
+  
+  private final boolean isInterfaceType;
+  
   public InterfaceUsingWovenProxyMethodAdapter(MethodVisitor mv, int access, String name,
       String desc, String methodStaticFieldName, Method currentTransformMethod,
       Type typeBeingWoven, Type interfaceType) {
     super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod,
         typeBeingWoven);
     this.interfaceType = interfaceType;
+    this.isInterfaceType = !!!interfaceType.equals(OBJECT_TYPE);
   }
 
   /**
@@ -81,6 +85,6 @@ protected final Type getTypeToCastTo() {
   
   @Override
   protected final boolean isTypeToCastToInterface() {
-    return true;
+    return isInterfaceType;
   }
 }
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
index 5430d2d1..d6081f43 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
@@ -191,24 +191,34 @@ public void testComplexInterface() throws Exception {
   
   @Test
   public void testHandlesObjectMethods() throws Exception {
+      TestListener listener = new TestListener();
       List<String> list = Arrays.asList("one", "two", "three");
-      Object proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(List.class), constantly(list), null);
+      Object proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(List.class), constantly(list), listener);
       
       // obeys hashCode and equals, they *are* on the interface
       assertTrue(proxied.equals(Arrays.asList("one", "two", "three")));
+      assertEquals(Collection.class.getMethod("equals", Object.class), listener.getLastMethod());
+      listener.clear();
       assertEquals(Arrays.asList("one", "two", "three").hashCode(), proxied.hashCode());
-      
+      assertEquals(Collection.class.getMethod("hashCode"), listener.getLastMethod());
+      listener.clear();
       // and toString
       assertEquals(list.toString(), proxied.toString());
+      assertEquals(Object.class.getMethod("toString"), listener.getLastMethod());
+      listener.clear();
       
       Runnable runnable = new Runnable() {
         public void run() {}
       };
-      proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(Runnable.class), constantly(runnable), null);
+      proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(Runnable.class), constantly(runnable), listener);
       
       // obeys hashCode and equals, they *are not* on the interface
       assertTrue(proxied.equals(runnable));
+      assertEquals(Object.class.getMethod("equals", Object.class), listener.getLastMethod());
+      listener.clear();
       assertEquals(runnable.hashCode(), proxied.hashCode());
+      assertEquals(Object.class.getMethod("hashCode"), listener.getLastMethod());
+      listener.clear();
   }
   
   private static class TestClassLoader extends ClassLoader {
