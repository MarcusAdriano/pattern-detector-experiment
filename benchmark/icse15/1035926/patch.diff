diff --git a/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionKey.java b/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionKey.java
index e69de29b..55271783 100644
--- a/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionKey.java
+++ b/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionKey.java
@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.transaction.jdbc;
+
+import javax.transaction.Transaction;
+
+public class ConnectionKey {
+
+    private final String username;
+
+    private final String password;
+
+    private final Transaction transaction;
+
+    public ConnectionKey(String username, String password, Transaction transaction) {
+        this.username = username;
+        this.password = password;
+        this.transaction = transaction;
+    }
+
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((username == null) ? 0 : username.hashCode());
+        result = prime * result + ((password == null) ? 0 : password.hashCode());                
+        result = prime * result + ((transaction == null) ? 0 : transaction.hashCode());
+        return result;
+    }
+
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        ConnectionKey other = (ConnectionKey) obj;
+        if (username == null) {
+            if (other.username != null) {
+                return false;
+            }
+        } else if (!username.equals(other.username)) {
+            return false;
+        }
+        if (password == null) {
+            if (other.password != null) {
+                return false;
+            }
+        } else if (!password.equals(other.password)) {
+            return false;
+        }
+        if (transaction == null) {
+            if (other.transaction != null) {
+                return false;
+            }
+        } else if (!transaction.equals(other.transaction)) {
+            return false;
+        }
+        return true;
+    }
+
+}
diff --git a/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionWrapper.java b/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionWrapper.java
index f586a8ad..0f85e96f 100644
--- a/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionWrapper.java
+++ b/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/ConnectionWrapper.java
@@ -39,11 +39,6 @@
 import java.util.Map;
 import java.util.Properties;
 
-import javax.sql.XAConnection;
-import javax.transaction.Status;
-import javax.transaction.SystemException;
-import javax.transaction.Transaction;
-import javax.transaction.TransactionManager;
 import javax.transaction.xa.XAResource;
 
 /**
@@ -53,60 +48,73 @@
  * @see XADatasourceEnlistingWrapper
  */
 public class ConnectionWrapper implements Connection {
+    
     private Connection connection;
     
-    private XAConnection xaConnection;
+    private boolean closed;
     
-    private TransactionManager tm;
+    private boolean enlisted;
     
-    public ConnectionWrapper(XAConnection xaConnection, TransactionManager tm) {
-        try {
-            this.xaConnection = xaConnection;
-            this.tm = tm;
-            this.connection = xaConnection.getConnection();
-            
-            if (tm.getStatus() == Status.STATUS_ACTIVE) {
-                Transaction tx = tm.getTransaction();
-                tx.enlistResource(xaConnection.getXAResource());
+    public ConnectionWrapper(Connection connection, boolean enlisted) {
+        this.enlisted = enlisted;
+        this.connection = connection;
             }
-        } catch (Exception e) {
+            
+    public void close() throws SQLException {
+        if (!closed) {
             try {
-                if (tm != null)
-                    tm.setRollbackOnly();
-            } catch (IllegalStateException e1) {
-                e1.printStackTrace();
-            } catch (SystemException e1) {
-                e1.printStackTrace();
+                // don't close connection if enlisted in a transaction
+                // the connection will be closed in once the transaction completes
+                if (!enlisted) {
+                    connection.close();
+                }
+            } finally {
+                closed = true;
             }
         }
     }
 
-    public void clearWarnings() throws SQLException {
-        connection.clearWarnings();
+    // cannot be used while enrolled in a transaction 
+    
+    public void commit() throws SQLException {
+        if (enlisted) {
+            throw new SQLException("Cannot commit while enrolled in a transaction");
+        }
+        connection.commit();
     }
 
-    public void close() throws SQLException {
-        try {
-            if (tm.getStatus() == Status.STATUS_ACTIVE) {
-                Transaction tx = tm.getTransaction();
-                tx.delistResource(xaConnection.getXAResource(), XAResource.TMSUCCESS);
+    public void rollback() throws SQLException {
+        if (enlisted) {
+            throw new SQLException("Cannot rollback while enrolled in a transaction");
             }
-        } catch (Exception e) {
-            try {
-                if (tm != null)
-                    tm.setRollbackOnly();
-            } catch (IllegalStateException e1) {
-                e1.printStackTrace();
-            } catch (SystemException e1) {
-                e1.printStackTrace();
+        connection.rollback();
             }
+
+    public void rollback(Savepoint savepoint) throws SQLException {
+        if (enlisted) {
+            throw new SQLException("Cannot rollback while enrolled in a transaction");
+        }
+        connection.rollback(savepoint);
         }
         
-        connection.close();
+    public Savepoint setSavepoint() throws SQLException {
+        if (enlisted) {
+            throw new SQLException("Cannot set savepoint while enrolled in a transaction");
+        }
+        return connection.setSavepoint();
     }
 
-    public void commit() throws SQLException {
-        connection.commit();
+    public Savepoint setSavepoint(String name) throws SQLException {
+        if (enlisted) {
+            throw new SQLException("Cannot set savepoint while enrolled in a transaction");
+        }
+        return connection.setSavepoint(name);
+    }
+    
+    // rest of the methods
+    
+    public void clearWarnings() throws SQLException {
+        connection.clearWarnings();
     }
 
     public Array createArrayOf(String typeName, Object[] elements)
@@ -259,14 +267,6 @@ public void releaseSavepoint(Savepoint savepoint) throws SQLException {
         connection.releaseSavepoint(savepoint);
     }
 
-    public void rollback() throws SQLException {
-        connection.rollback();
-    }
-
-    public void rollback(Savepoint savepoint) throws SQLException {
-        connection.rollback(savepoint);
-    }
-
     public void setAutoCommit(boolean autoCommit) throws SQLException {
         connection.setAutoCommit(autoCommit);
     }
@@ -293,14 +293,6 @@ public void setReadOnly(boolean readOnly) throws SQLException {
         connection.setReadOnly(readOnly);
     }
 
-    public Savepoint setSavepoint() throws SQLException {
-        return connection.setSavepoint();
-    }
-
-    public Savepoint setSavepoint(String name) throws SQLException {
-        return connection.setSavepoint(name);
-    }
-
     public void setTransactionIsolation(int level) throws SQLException {
         connection.setTransactionIsolation(level);
     }
diff --git a/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/XADatasourceEnlistingWrapper.java b/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/XADatasourceEnlistingWrapper.java
index a04f33b9..99e0ba96 100644
--- a/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/XADatasourceEnlistingWrapper.java
+++ b/incubator/aries/trunk/transaction/transaction-wrappers/src/main/java/org/apache/aries/transaction/jdbc/XADatasourceEnlistingWrapper.java
@@ -22,10 +22,16 @@
 import java.io.Serializable;
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.sql.DataSource;
 import javax.sql.XAConnection;
 import javax.sql.XADataSource;
+import javax.transaction.Status;
+import javax.transaction.Synchronization;
+import javax.transaction.SystemException;
+import javax.transaction.Transaction;
 import javax.transaction.TransactionManager;
 
 /**
@@ -44,20 +50,84 @@
     
     private transient TransactionManager tm;
     
-    public Connection getConnection() throws SQLException
-    {
-      XAConnection xaConn = wrappedDS.getXAConnection();
-      Connection conn = getEnlistedConnection(xaConn);
+    private transient Map<Object, Connection> connectionMap = 
+        new ConcurrentHashMap<Object, Connection>();
       
-      return conn;
+    public Connection getConnection() throws SQLException {
+        Transaction transaction = getTransaction();
+        if (transaction != null) {
+            Connection connection = connectionMap.get(transaction);
+            if (connection == null) {
+                XAConnection xaConnection = wrappedDS.getXAConnection();                
+                enlist(transaction, xaConnection);
+                connection = xaConnection.getConnection();
+                connectionMap.put(transaction, connection);                
+            }
+            return getEnlistedConnection(connection, true);
+        } else {
+            return getEnlistedConnection(wrappedDS.getXAConnection().getConnection(), false);
+        }
     }
 
-    public Connection getConnection(String username, String password) throws SQLException
-    {
-      XAConnection xaConn = wrappedDS.getXAConnection(username, password);
-      Connection conn = getEnlistedConnection(xaConn);
+    public Connection getConnection(String username, String password) throws SQLException {
+        Transaction transaction = getTransaction();
+        if (transaction != null) {
+            ConnectionKey key = new ConnectionKey(username, password, transaction);
+            Connection connection = connectionMap.get(key);
+            if (connection == null) {
+                XAConnection xaConnection = wrappedDS.getXAConnection(username, password);
+                enlist(transaction, xaConnection);
+                connection = xaConnection.getConnection();
+                connectionMap.put(key, connection);
+            }
+            return getEnlistedConnection(connection, true);
+        } else {
+            return getEnlistedConnection(wrappedDS.getXAConnection(username, password).getConnection(), false);
+        }
+    }
+
+    private Transaction getTransaction() throws SQLException {
+        try {
+            return (tm.getStatus() == Status.STATUS_ACTIVE) ? tm.getTransaction() : null;
+        } catch (SystemException e) {
+            throw new SQLException("Error getting transaction");
+        }
+    }
+    
+    private void enlist(Transaction transaction, XAConnection xaConnection) throws SQLException {
+        try {
+            transaction.enlistResource(xaConnection.getXAResource());            
+            transaction.registerSynchronization(new TransactionListener(xaConnection));
+        } catch (Exception e) {
+            try {
+                tm.setRollbackOnly();
+            } catch (IllegalStateException e1) {
+                e1.printStackTrace();
+            } catch (SystemException e1) {
+                e1.printStackTrace();
+            }
+        } 
+    }
+    
+    private static class TransactionListener implements Synchronization {
+
+        private final XAConnection xaConnection;
+        
+        public TransactionListener(XAConnection xaConnection) {
+            this.xaConnection = xaConnection;
+        }
+        
+        public void afterCompletion(int status) {
+            try {
+                xaConnection.getConnection().close();
+            } catch (SQLException e) {
+                // ignore
+            }            
+        }
+
+        public void beforeCompletion() {
+        }
       
-      return conn;
     }
 
     public PrintWriter getLogWriter() throws SQLException
@@ -80,9 +150,9 @@ public void setLoginTimeout(int seconds) throws SQLException
       wrappedDS.setLoginTimeout(seconds);
     }
 
-    private Connection getEnlistedConnection(XAConnection xaConn) throws SQLException
+    private Connection getEnlistedConnection(Connection connection, boolean enlisted) throws SQLException
     {
-        return new ConnectionWrapper(xaConn, tm);
+        return new ConnectionWrapper(connection, enlisted);
     }
 
     public void setDataSource(XADataSource dsToWrap)
