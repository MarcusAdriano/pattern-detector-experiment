diff --git a/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java b/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
index e69de29b..0c8cff44 100644
--- a/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
+++ b/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
@@ -0,0 +1,109 @@
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.apache.cassandra.db;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.*;
+
+import org.apache.cassandra.Util;
+
+import org.junit.Test;
+
+import org.apache.cassandra.io.sstable.SSTableReader;
+import org.apache.cassandra.io.sstable.SSTableUtils;
+import org.apache.cassandra.CleanupHelper;
+import org.apache.cassandra.db.filter.QueryPath;
+import org.apache.cassandra.utils.FBUtilities;
+import static junit.framework.Assert.assertEquals;
+
+public class LongCompactionSpeedTest extends CleanupHelper
+{
+    public static final String TABLE1 = "Keyspace1";
+    public static final InetAddress LOCAL = FBUtilities.getLocalAddress();
+
+    /**
+     * Test compaction with a very wide row.
+     */
+    @Test
+    public void testCompactionWide() throws Exception
+    {
+        testCompaction(2, 1, 200000);
+    }
+
+    /**
+     * Test compaction with lots of skinny rows.
+     */
+    @Test
+    public void testCompactionSlim() throws Exception
+    {
+        testCompaction(2, 200000, 1);
+    }
+
+    /**
+     * Test compaction with lots of small sstables.
+     */
+    @Test
+    public void testCompactionMany() throws Exception
+    {
+        testCompaction(100, 800, 5);
+    }
+
+    protected void testCompaction(int sstableCount, int rowsPerSSTable, int colsPerRow) throws Exception
+    {
+        CompactionManager.instance.disableAutoCompaction();
+
+        Table table = Table.open(TABLE1);
+        ColumnFamilyStore store = table.getColumnFamilyStore("Standard1");
+
+        ArrayList<SSTableReader> sstables = new ArrayList<SSTableReader>();
+        for (int k = 0; k < sstableCount; k++)
+        {
+            SortedMap<String,ColumnFamily> rows = new TreeMap<String,ColumnFamily>();
+            for (int j = 0; j < rowsPerSSTable; j++)
+            {
+                String key = String.valueOf(j);
+                IColumn[] cols = new IColumn[colsPerRow];
+                for (int i = 0; i < colsPerRow; i++)
+                {
+                    // last sstable has highest timestamps
+                    cols[i] = Util.column(String.valueOf(i), String.valueOf(i), k);
+                }
+                rows.put(key, SSTableUtils.createCF(Long.MIN_VALUE, Integer.MIN_VALUE, cols));
+            }
+            SSTableReader sstable = SSTableUtils.writeSSTable(rows);
+            sstables.add(sstable);
+            store.addSSTable(sstable);
+        }
+
+        // give garbage collection a bit of time to catch up
+        Thread.sleep(1000);
+
+        long start = System.currentTimeMillis();
+        CompactionManager.instance.doCompaction(store, sstables, CompactionManager.getDefaultGCBefore());
+        System.out.println(String.format("%s: sstables=%d rowsper=%d colsper=%d: %d ms",
+                                         this.getClass().getName(),
+                                         sstableCount,
+                                         rowsPerSSTable,
+                                         colsPerRow,
+                                         System.currentTimeMillis() - start));
+    }
+}
diff --git a/cassandra/trunk/test/long/org/apache/cassandra/utils/LongBloomFilterTest.java b/cassandra/trunk/test/long/org/apache/cassandra/utils/LongBloomFilterTest.java
index e69de29b..53201877 100644
--- a/cassandra/trunk/test/long/org/apache/cassandra/utils/LongBloomFilterTest.java
+++ b/cassandra/trunk/test/long/org/apache/cassandra/utils/LongBloomFilterTest.java
@@ -0,0 +1,62 @@
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.apache.cassandra.utils;
+
+import java.io.IOException;
+import java.util.Random;
+
+import org.junit.Test;
+
+public class LongBloomFilterTest
+{
+    public BloomFilter bf;
+
+    /**
+     * NB: needs to run with -mx1G
+     */
+    @Test
+    public void testBigInt() {
+        int size = 10 * 1000 * 1000;
+        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);
+        FilterTest.testFalsePositives(bf,
+                                      new KeyGenerator.IntGenerator(size),
+                                      new KeyGenerator.IntGenerator(size, size * 2));
+    }
+
+    @Test
+    public void testBigRandom() {
+        int size = 10 * 1000 * 1000;
+        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);
+        FilterTest.testFalsePositives(bf,
+                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
+                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
+    }
+
+    @Test
+    public void timeit() {
+        int size = 300 * FilterTest.ELEMENTS;
+        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);
+        for (int i = 0; i < 10; i++) {
+            FilterTest.testFalsePositives(bf,
+                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
+                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
+            bf.clear();
+        }
+    }
+}
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionSpeedTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionSpeedTest.java
index c8b4e05e..e69de29b 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionSpeedTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionSpeedTest.java
@@ -1,109 +0,0 @@
-/*
-* Licensed to the Apache Software Foundation (ASF) under one
-* or more contributor license agreements.  See the NOTICE file
-* distributed with this work for additional information
-* regarding copyright ownership.  The ASF licenses this file
-* to you under the Apache License, Version 2.0 (the
-* "License"); you may not use this file except in compliance
-* with the License.  You may obtain a copy of the License at
-*
-*    http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing,
-* software distributed under the License is distributed on an
-* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-* KIND, either express or implied.  See the License for the
-* specific language governing permissions and limitations
-* under the License.
-*/
-package org.apache.cassandra.db;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
-import java.util.*;
-
-import org.apache.cassandra.Util;
-
-import org.junit.Test;
-
-import org.apache.cassandra.io.sstable.SSTableReader;
-import org.apache.cassandra.io.sstable.SSTableUtils;
-import org.apache.cassandra.CleanupHelper;
-import org.apache.cassandra.db.filter.QueryPath;
-import org.apache.cassandra.utils.FBUtilities;
-import static junit.framework.Assert.assertEquals;
-
-public class CompactionSpeedTest extends CleanupHelper
-{
-    public static final String TABLE1 = "Keyspace1";
-    public static final InetAddress LOCAL = FBUtilities.getLocalAddress();
-
-    /**
-     * Test compaction with a very wide row.
-     */
-    @Test
-    public void testCompactionWide() throws Exception
-    {
-        testCompaction(2, 1, 200000);
-    }
-
-    /**
-     * Test compaction with lots of skinny rows.
-     */
-    @Test
-    public void testCompactionSlim() throws Exception
-    {
-        testCompaction(2, 200000, 1);
-    }
-
-    /**
-     * Test compaction with lots of small sstables.
-     */
-    @Test
-    public void testCompactionMany() throws Exception
-    {
-        testCompaction(100, 800, 5);
-    }
-
-    protected void testCompaction(int sstableCount, int rowsPerSSTable, int colsPerRow) throws Exception
-    {
-        CompactionManager.instance.disableAutoCompaction();
-
-        Table table = Table.open(TABLE1);
-        ColumnFamilyStore store = table.getColumnFamilyStore("Standard1");
-
-        ArrayList<SSTableReader> sstables = new ArrayList<SSTableReader>();
-        for (int k = 0; k < sstableCount; k++)
-        {
-            SortedMap<String,ColumnFamily> rows = new TreeMap<String,ColumnFamily>();
-            for (int j = 0; j < rowsPerSSTable; j++)
-            {
-                String key = String.valueOf(j);
-                IColumn[] cols = new IColumn[colsPerRow];
-                for (int i = 0; i < colsPerRow; i++)
-                {
-                    // last sstable has highest timestamps
-                    cols[i] = Util.column(String.valueOf(i), String.valueOf(i), k);
-                }
-                rows.put(key, SSTableUtils.createCF(Long.MIN_VALUE, Integer.MIN_VALUE, cols));
-            }
-            SSTableReader sstable = SSTableUtils.writeSSTable(rows);
-            sstables.add(sstable);
-            store.addSSTable(sstable);
-        }
-
-        // give garbage collection a bit of time to catch up
-        Thread.sleep(1000);
-
-        long start = System.currentTimeMillis();
-        CompactionManager.instance.doCompaction(store, sstables, CompactionManager.getDefaultGCBefore());
-        System.out.println(String.format("%s: sstables=%d rowsper=%d colsper=%d: %d ms",
-                                         this.getClass().getName(),
-                                         sstableCount,
-                                         rowsPerSSTable,
-                                         colsPerRow,
-                                         System.currentTimeMillis() - start));
-    }
-}
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/utils/BloomFilterTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/utils/BloomFilterTest.java
index e10e6d14..d044832d 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/utils/BloomFilterTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/utils/BloomFilterTest.java
@@ -90,37 +90,4 @@ public void testSerialize() throws IOException
     {
         FilterTest.testSerialize(bf);
     }
-
-    /* TODO move these into a nightly suite (they take 5-10 minutes each)
-    @Test
-    // run with -mx1G
-    public void testBigInt() {
-        int size = 100 * 1000 * 1000;
-        bf = new BloomFilter(size, FilterTest.spec.bucketsPerElement);
-        FilterTest.testFalsePositives(bf,
-                                      new KeyGenerator.IntGenerator(size),
-                                      new KeyGenerator.IntGenerator(size, size * 2));
-    }
-
-    @Test
-    public void testBigRandom() {
-        int size = 100 * 1000 * 1000;
-        bf = new BloomFilter(size, FilterTest.spec.bucketsPerElement);
-        FilterTest.testFalsePositives(bf,
-                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
-                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
-    }
-
-    @Test
-    public void timeit() {
-        int size = 300 * FilterTest.ELEMENTS;
-        bf = new BloomFilter(size, FilterTest.spec.bucketsPerElement);
-        for (int i = 0; i < 10; i++) {
-            FilterTest.testFalsePositives(bf,
-                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
-                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
-            bf.clear();
-        }
-    }
-    */
 }
