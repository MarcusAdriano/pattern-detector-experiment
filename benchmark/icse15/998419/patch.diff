diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 0e7f4cf4..6fbdd7cb 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -138,6 +138,8 @@
 
     private static IAuthenticator authenticator = new AllowAllAuthenticator();
 
+    private static int indexinterval = 128;
+
     private final static String STORAGE_CONF_FILE = "storage-conf.xml";
 
     /**
@@ -494,6 +496,14 @@ else if (hintedHandOffStr.equalsIgnoreCase("false"))
             if (logger.isDebugEnabled())
                 logger.debug("setting hintedHandoffEnabled to " + hintedHandoffEnabled);
 
+            String indexIntervalStr = xmlUtils.getNodeValue("/Storage/IndexInterval");
+            if (indexIntervalStr != null)
+            {
+                indexinterval = Integer.parseInt(indexIntervalStr);
+                if (indexinterval <= 0)
+                    throw new ConfigurationException("Index Interval must be a positive, non-zero integer.");
+            }
+
             readTablesFromXml();
             if (tables.isEmpty())
                 throw new ConfigurationException("No keyspaces configured");
@@ -1206,4 +1216,9 @@ public static boolean hintedHandoffEnabled()
     {
         return hintedHandoffEnabled;
     }
+
+    public static int getIndexInterval()
+    {
+        return indexinterval;
+    }
 }
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
index bfdae1fd..d99c7d43 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -270,7 +270,7 @@ int doCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int
         long totalkeysWritten = 0;
 
         // TODO the int cast here is potentially buggy
-        int expectedBloomFilterSize = Math.max(SSTableReader.indexInterval(), (int)SSTableReader.getApproximateKeyCount(sstables));
+        int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(), (int)SSTableReader.getApproximateKeyCount(sstables));
         if (logger.isDebugEnabled())
           logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);
 
@@ -354,7 +354,7 @@ int doCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int
         long startTime = System.currentTimeMillis();
         long totalkeysWritten = 0;
 
-        int expectedBloomFilterSize = Math.max(SSTableReader.indexInterval(), (int)(SSTableReader.getApproximateKeyCount(sstables) / 2));
+        int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(), (int)(SSTableReader.getApproximateKeyCount(sstables) / 2));
         if (logger.isDebugEnabled())
           logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);
 
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexSummary.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexSummary.java
index 8700588c..d36353d6 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexSummary.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/IndexSummary.java
@@ -31,9 +31,6 @@
 
 public class IndexSummary
 {
-    /** Every 128th index entry is loaded into memory so we know where to start looking for the actual key w/o seeking */
-    public static final int INDEX_INTERVAL = 128;/* Required extension for temporary files created during compactions. */
-
     private ArrayList<KeyPosition> indexPositions;
     private Map<KeyPosition, SSTable.PositionSize> spannedIndexDataPositions;
     private Map<Long, KeyPosition> spannedIndexPositions;
@@ -44,7 +41,7 @@ public void maybeAddEntry(DecoratedKey decoratedKey, long dataPosition, long row
     {
         boolean spannedIndexEntry = DatabaseDescriptor.getIndexAccessMode() == DatabaseDescriptor.DiskAccessMode.mmap
                                     && SSTableReader.bufferIndex(indexPosition) != SSTableReader.bufferIndex(nextIndexPosition);
-        if ((keysWritten++ % INDEX_INTERVAL == 0) || spannedIndexEntry)
+        if ((keysWritten++ % DatabaseDescriptor.getIndexInterval() == 0) || spannedIndexEntry)
         {
             if (indexPositions == null)
             {
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableReader.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableReader.java
index 34db5473..aaf9f8b7 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableReader.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableReader.java
@@ -85,11 +85,6 @@ public void run()
     // in a perfect world, BUFFER_SIZE would be final, but we need to test with a smaller size to stay sane.
     static long BUFFER_SIZE = Integer.MAX_VALUE;
 
-    public static int indexInterval()
-    {
-        return IndexSummary.INDEX_INTERVAL;
-    }
-
     public static long getApproximateKeyCount(Iterable<SSTableReader> sstables)
     {
         long count = 0;
@@ -97,7 +92,7 @@ public static long getApproximateKeyCount(Iterable<SSTableReader> sstables)
         for (SSTableReader sstable : sstables)
         {
             int indexKeyCount = sstable.getIndexPositions().size();
-            count = count + (indexKeyCount + 1) * IndexSummary.INDEX_INTERVAL;
+            count = count + (indexKeyCount + 1) * DatabaseDescriptor.getIndexInterval();
             if (logger.isDebugEnabled())
                 logger.debug("index size for bloom filter calc for file  : " + sstable.getFilename() + "   : " + count);
         }
@@ -223,7 +218,7 @@ private SSTableReader(String filename, IPartitioner partitioner) throws IOExcept
 
     public long estimatedKeys()
     {
-        return indexSummary.getIndexPositions().size() * IndexSummary.INDEX_INTERVAL;
+        return indexSummary.getIndexPositions().size() * DatabaseDescriptor.getIndexInterval();
     }
 
     void loadBloomFilter() throws IOException
@@ -345,6 +340,7 @@ public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException
         // scan the on-disk index, starting at the nearest sampled position
         try
         {
+            int interval = DatabaseDescriptor.getIndexInterval();
             int i = 0;
             do
             {
@@ -398,7 +394,7 @@ public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException
                     bloomFilterTracker.addFalsePositive();
                     return null;
                 }
-            } while  (++i < IndexSummary.INDEX_INTERVAL);
+            } while  (++i < interval);
         }
         finally
         {
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java
index 6ef85c76..d31b6e01 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java
@@ -42,7 +42,6 @@
 import org.apache.cassandra.gms.*;
 import org.apache.cassandra.io.DeletionService;
 import org.apache.cassandra.io.IndexSummary;
-import org.apache.cassandra.io.SSTableReader;
 import org.apache.cassandra.locator.*;
 import org.apache.cassandra.net.*;
 import org.apache.cassandra.service.AntiEntropyService.TreeRequestVerbHandler;
@@ -1301,7 +1300,7 @@ public void setLog4jLevel(String classQualifier, String rawLevel)
             }
         }
         FBUtilities.sortSampledKeys(keys, range);
-        int splits = keys.size() * SSTableReader.indexInterval() / keysPerSplit;
+        int splits = keys.size() * DatabaseDescriptor.getIndexInterval() / keysPerSplit;
 
         if (keys.size() >= splits)
         {
diff --git a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsTest.java b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsTest.java
index f577944c..165d29b0 100644
--- a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsTest.java
+++ b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsTest.java
@@ -22,7 +22,6 @@
 import java.net.InetAddress;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
-import java.util.ArrayList;
 import java.util.Set;
 import java.util.HashSet;
 
@@ -30,7 +29,7 @@
 
 import org.junit.Test;
 
-import org.apache.cassandra.io.SSTableReader;
+import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.utils.FBUtilities;
@@ -53,7 +52,7 @@ public void testCompactions() throws IOException, ExecutionException, Interrupte
 
         final int ROWS_PER_SSTABLE = 10;
         Set<String> inserted = new HashSet<String>();
-        for (int j = 0; j < (SSTableReader.indexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
+        for (int j = 0; j < (DatabaseDescriptor.getIndexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
             for (int i = 0; i < ROWS_PER_SSTABLE; i++) {
                 String key = String.valueOf(i % 2);
                 RowMutation rm = new RowMutation(TABLE1, key);
