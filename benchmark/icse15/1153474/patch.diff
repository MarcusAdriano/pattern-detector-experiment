diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
index 84468795..74f88fb1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/JarLoader.java
@@ -175,7 +175,8 @@ protected Class loadClass(String className, boolean resolve)
         // not make assumptions about this check reducing the
         // number of classes it has to check for.
         if (className.startsWith("org.apache.derby.")
-                && !className.startsWith("org.apache.derby.jdbc."))
+                && !className.startsWith("org.apache.derby.jdbc.")
+                && !className.startsWith("org.apache.derby.vti."))
         {
             ClassNotFoundException cnfe = new ClassNotFoundException(className);
             //cnfe.printStackTrace(System.out);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index ed131088..b15bf363 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -108,6 +108,7 @@ public static Test suite()
                 "testLoadDerbyClassIndirectly",
                 "testIndirectLoading",
                 "testTableFunctionInJar",
+                "test_5352",
             };
             
             for (int i = 0; i < orderedTests.length; i++)
@@ -1044,7 +1045,7 @@ public void testTableFunctionInJar() throws SQLException, MalformedURLException
              "language java\n" +
              "parameter style DERBY_JDBC_RESULT_SET\n" +
              "reads sql data\n" +
-             "external name 'DummyVTI2.dummyVTI'\n"
+             "external name 'MissingClass.dummyVTI'\n"
              );
 
         // invoke the scalar function
@@ -1079,6 +1080,62 @@ public void testTableFunctionInJar() throws SQLException, MalformedURLException
             assertSQLState("XJ001", e);
         }
         
+        // drop the useless function
+        s.executeUpdate( "drop function dummyVTI2\n" );
+
+        setDBClasspath(null);
+        
+        s.close();
+    }
+    
+    /**
+     * Test that restricted table functions can be invoked from inside jar files stored in
+     * the database.
+     */
+    public void test_5352() throws SQLException, MalformedURLException
+    {
+        // skip this test if vm is pre Java 5. This is because the jar file was
+        // compiled by a modern compiler and the jar file won't load on
+        // old vms.
+        if ( JVMInfo.J2ME || (JVMInfo.JDK_ID < JVMInfo.J2SE_15 ) ) { return; }
+        
+        String jarName = "EMC.DUMMY_VTI2";
+
+        installJar("dummy_vti.jar", jarName );
+
+        setDBClasspath( jarName );
+
+        Statement s = createStatement();
+
+        // register the table function
+        s.executeUpdate
+            (
+             "create function dummyVTI2( allowsRestriction boolean )\n" +
+             "returns table( a int )\n" +
+             "language java\n" +
+             "parameter style DERBY_JDBC_RESULT_SET\n" +
+             "no sql\n" +
+             "external name 'DummyVTI2.dummyVTI2'\n"
+             );
+        
+        // invoke the table function
+        JDBC.assertFullResultSet
+            (
+                s.executeQuery
+                (
+                 "select * from table( dummyVTI2( true ) ) s where a = 1"
+                 ),
+                new String[][]
+                {
+                    { "1" }
+                }
+             );
+
+        // verify that the RestrictedVTI machinery is really invoked
+        assertStatementError( "XYZZY", s, "select * from table( dummyVTI2( false ) ) s where a = 1" );
+        
+        s.executeUpdate( "drop function dummyVTI2\n" );
+
         setDBClasspath(null);
         
         s.close();
