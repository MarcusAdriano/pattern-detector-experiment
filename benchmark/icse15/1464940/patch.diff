diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
index 45e8771f..b90a6464 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
@@ -60,6 +60,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.SQLWarning;
 import java.sql.ResultSetMetaData;
 
 
@@ -426,7 +427,10 @@ else if (action == IFastPath.NEED_RS) {
                         result = getAllocatedRow();
                         populateFromResultSet(result);
                         if (fastPath != null)
-                            fastPath.currentRow(userVTI, result.getRowArray());
+                        { fastPath.currentRow(userVTI, result.getRowArray()); }
+
+                        SQLWarning  warnings = userVTI.getWarnings();
+                        if ( warnings != null ) { addWarning( warnings ); }
                     }
 				}
 			}
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/vti/VTITemplateBase.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/vti/VTITemplateBase.java
index cd03b68a..0337e4fe 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/vti/VTITemplateBase.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/vti/VTITemplateBase.java
@@ -86,7 +86,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public java.io.InputStream getAsciiStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getAsciiStream" ); }
     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getUnicodeStream" ); }
     public java.io.InputStream getBinaryStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getBinaryStream" ); }
-    public SQLWarning getWarnings() throws SQLException { throw notImplemented( "getWarnings" ); }
+    public SQLWarning getWarnings() throws SQLException { return null; }
     public void clearWarnings() throws SQLException { throw notImplemented( "clearWarnings" ); }
     public String getCursorName() throws SQLException { throw notImplemented( "getCursorName" ); }
     public Object getObject(int columnIndex) throws SQLException { throw notImplemented( "getObject" ); }
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index d26c3bdb..0bebe100 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -132,6 +132,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         { "2", "blue" },
     };
     
+    private static  final   String[][]  WARNING_VTI_ROWS =
+    {
+        { "1", "red" },
+        { "2", "blue" },
+    };
+    
     private static  final   String[][]  ALL_TYPES_ROWS =
     {
         {
@@ -1934,6 +1940,7 @@ private void  miscBugs()
         derby_4092();
         derby_5779();
         derby_6040();
+        derby_6151();
     }
     
     /**
@@ -2404,6 +2411,34 @@ private void  derby_6040()
              );
     }
     
+    /**
+     * <p>
+     * Verify that warnings percolate back from table functions.
+     * </p>
+     */
+    private void  derby_6151()
+        throws Exception
+    {
+        goodStatement
+            (
+             "create function warningVTI() returns table( a int, b varchar( 5 ) )\n" +
+             "language java parameter style derby_jdbc_result_set no sql\n" +
+             "external name '" + getClass().getName() + ".warningVTI'\n"
+             );
+
+        ResultSet   rs = getConnection().prepareStatement( "select * from table( warningVTI() ) t" ).executeQuery();
+
+        rs.next();
+        assertEquals( "Warning for row 1", rs.getWarnings().getMessage() );
+        rs.clearWarnings();
+        rs.next();
+        assertEquals( "Warning for row 2", rs.getWarnings().getMessage() );
+
+        rs.close();
+        
+        goodStatement( "drop function warningVTI" );
+    }
+    
     /**
      * <p>
      * Make the input rows for the coercion function.
@@ -3076,4 +3111,35 @@ private long getScalarLong( PreparedStatement ps ) throws Exception
         return retval;
     }
 
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // NESTED CLASSES
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    public  static  WarningVTI  warningVTI()    { return new WarningVTI(); }
+    
+    public  static  final   class   WarningVTI  extends StringArrayVTI
+    {
+        private int _count;
+        
+        public  WarningVTI()
+        {
+            super( makeColumnNames( 2, "mycol" ), WARNING_VTI_ROWS );
+        }
+
+        // override
+        public  boolean next()  throws SQLException
+        {
+            boolean retval = super.next();
+            if ( retval ) { _count++; }
+
+            return retval;
+        }
+        public  SQLWarning  getWarnings()
+        {
+            return new SQLWarning( "Warning for row " + _count );
+        }
+    }
+    
 }
