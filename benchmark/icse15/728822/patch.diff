diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java
index fd851776..94b2ca49 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java
@@ -164,6 +164,16 @@ protected int stringCompare(SQLChar char1, SQLChar char2)
 	 }
 
 	/**
+      * Return a hash code that is consistent with
+      * {@link #stringCompare(SQLChar, SQLChar)}.
+      *
+      * @return hash code
+      */
+     public int hashCode() {
+         return hashCodeForCollation();
+     }
+
+	/**
 	 * This method implements the like function for char (with no escape value).
 	 * The difference in this method and the same method in superclass is that
 	 * here we use special Collator object to do the comparison rather than
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java
index d2801e08..39408277 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java
@@ -165,6 +165,16 @@ protected int stringCompare(SQLChar char1, SQLChar char2)
 	 }
 
 	/**
+      * Return a hash code that is consistent with
+      * {@link #stringCompare(SQLChar, SQLChar)}.
+      *
+      * @return hash code
+      */
+     public int hashCode() {
+         return hashCodeForCollation();
+     }
+
+	/**
 	 * This method implements the like function for char (with no escape value).
 	 * The difference in this method and the same method in superclass is that
 	 * here we use special Collator object to do the comparison rather than
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java
index 2038deb8..bf70b740 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java
@@ -166,6 +166,16 @@ protected int stringCompare(SQLChar char1, SQLChar char2)
 	 }
 
 	/**
+      * Return a hash code that is consistent with
+      * {@link #stringCompare(SQLChar, SQLChar)}.
+      *
+      * @return hash code
+      */
+     public int hashCode() {
+         return hashCodeForCollation();
+     }
+
+	/**
 	 * This method implements the like function for char (with no escape value).
 	 * The difference in this method and the same method in superclass is that
 	 * here we use special Collator object to do the comparison rather than
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java
index 7a65c922..926b9906 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java
@@ -172,6 +172,16 @@ protected int stringCompare(SQLChar char1, SQLChar char2)
 	 }
 
 	/**
+      * Return a hash code that is consistent with
+      * {@link #stringCompare(SQLChar, SQLChar)}.
+      *
+      * @return hash code
+      */
+     public int hashCode() {
+         return hashCodeForCollation();
+     }
+
+	/**
 	 * This method implements the like function for char (with no escape value).
 	 * The difference in this method and the same method in superclass is that
 	 * here we use special Collator object to do the comparison rather than
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index 17207436..eb50671a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -2655,6 +2655,11 @@ public String toString()
      */
     public int hashCode()
     {
+        if (SanityManager.DEBUG) {
+            SanityManager.ASSERT(!(this instanceof CollationElementsInterface),
+                    "SQLChar.hashCode() does not work with collation");
+        }
+
         try {
             if (getString() == null)
             {
@@ -2702,6 +2707,24 @@ public int hashCode()
         return hashcode;
     }
 
+    /**
+     * Hash code implementation for collator sensitive subclasses.
+     */
+    int hashCodeForCollation() {
+        CollationKey key = null;
+
+        try {
+            key = getCollationKey();
+        } catch (StandardException se) {
+            // ignore exceptions, like we do in hashCode()
+            if (SanityManager.DEBUG) {
+                SanityManager.THROWASSERT("Unexpected exception", se);
+            }
+        }
+
+        return key == null ? 0 : key.hashCode();
+    }
+
     /**
      * Get a SQLVarchar for a built-in string function.  
      *
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index f7807273..f57e9bda 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -257,39 +257,58 @@ public void testDefaultCollation() throws SQLException {
       //End of parameter testing
       
       s.close();
-      compareAgrave(1,1);
+      compareAgrave(1, 1, 2);
       }
       
 
 public void testFrenchCollation() throws SQLException {
-    compareAgrave(2,1);    
+    compareAgrave(2, 1, 1);
 }
 
 
 
- /**
- * For a TERRITORY_BASED collation french database, differences between pre-composed accents such 
- * as "\u00C0" (A-grave) and combining accents such as "A\u0300" (A, combining-grave) should match
- * for = and like. But they do not match for UCS_BASIC. We insert both into a table and search
- * based on equal and like. 
+/**
+ * For a TERRITORY_BASED collation french database, differences between
+ * pre-composed accents such as "\u00C0" (A-grave) and combining accents
+ * such as "A\u0300" (A, combining-grave) should match for {@code =}, but
+ * not for {@code LIKE}. They should never match for UCS_BASIC. We insert
+ * both into a table and search based on {@code =} and {@code LIKE}.
  *  
  * @param expectedMatchCountForEqual  number of rows we expect back for =. 
  * 	2 for French, 1 for English 
  * @param expectedMatchCountForLike  number of rows we expect back for LIKE. 
  * 	1 for French and English 
+ * @param expectedDistinctRows number of rows expected from SELECT DISTINCT
  * @throws SQLException
  */
 private void compareAgrave(int expectedMatchCountForEqual,
-		int expectedMatchCountForLike) throws SQLException {
+        int expectedMatchCountForLike, int expectedDistinctRows)
+            throws SQLException {
+    String[] dataTypes = {"VARCHAR(5)", "CHAR(5)"};
+    for (int i = 0; i < dataTypes.length; i++) {
+        compareAgrave(dataTypes[i], expectedMatchCountForEqual,
+                expectedMatchCountForLike, expectedDistinctRows);
+    }
+}
       
+/**
+ * Helper for {@link #compareAgrave(int, int, int)} which performs the test
+ * for one data type.
+ */
+private void compareAgrave(String dataType, int expectedMatchCountForEqual,
+		int expectedMatchCountForLike, int expectedDistinctRows)
+            throws SQLException {
+
+      // Create the two strings that are supposed to be equal in French locale.
       String agrave = "\u00C0";
       String agraveCombined ="A\u0300";
+
       Statement s = createStatement();
       
       try {
           s.executeUpdate("DROP TABLE T");
       }catch (SQLException se) {}
-      s.executeUpdate("CREATE TABLE T (vc varchar(30))");
+      s.executeUpdate("CREATE TABLE T (vc " + dataType + ")");
       PreparedStatement ps = prepareStatement("INSERT INTO T VALUES (?)");
       ps.setString(1,agrave);
       ps.executeUpdate();
@@ -300,12 +319,18 @@ private void compareAgrave(int expectedMatchCountForEqual,
       ps.setString(1, agrave);
       ResultSet rs = ps.executeQuery();
       JDBC.assertSingleValueResultSet(rs, Integer.toString(expectedMatchCountForEqual));
-      ps = prepareStatement("SELECT COUNT(*) FROM T WHERE VC LIKE ?");
+      // Use '%' at the end of the pattern so that we also match the trailing
+      // blanks if the data type is CHAR instead of VARCHAR.
+      ps = prepareStatement("SELECT COUNT(*) FROM T WHERE VC LIKE ? || '%'");
       ps.setString(1, agrave);
       rs = ps.executeQuery();
       JDBC.assertSingleValueResultSet(rs, Integer.toString(expectedMatchCountForLike));
 
-
+      // DERBY-3975: They should match for distinct, the same way as for =
+      int distinctRows = JDBC.assertDrainResults(
+              s.executeQuery("SELECT DISTINCT VC FROM T"));
+      assertEquals("Unexpected number of distinct rows",
+              expectedDistinctRows, distinctRows);
   }
 
 
