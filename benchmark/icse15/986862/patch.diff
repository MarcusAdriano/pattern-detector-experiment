diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 73592f36..a8db1971 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -22,6 +22,7 @@
 import java.io.FilenameFilter;
 import java.io.IOError;
 import java.io.IOException;
+import java.lang.management.ManagementFactory;
 import java.util.*;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -65,6 +66,9 @@
 import org.apache.cassandra.utils.LatencyTracker;
 import org.apache.cassandra.utils.WrappedRunnable;
 
+import javax.management.MBeanServer;
+import javax.management.ObjectName;
+
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean
 {
     private static Logger logger_ = LoggerFactory.getLogger(ColumnFamilyStore.class);
@@ -113,6 +117,7 @@ public boolean accept(File dir, String name)
     public final String table_;
     public final String columnFamily_;
     public final IPartitioner partitioner_;
+    private final String mbeanName;
 
     private volatile int memtableSwitchCount = 0;
 
@@ -217,11 +222,39 @@ private ColumnFamilyStore(String table, String columnFamilyName, IPartitioner pa
                                                                                      indexedCfMetadata);
             indexedColumns_.put(column, indexedCfs);
         }
+        
+        String type = this.partitioner_ instanceof LocalPartitioner ? "IndexColumnFamilies" : "ColumnFamilies";
+        mbeanName = "org.apache.cassandra.db:type=" + type + ",keyspace=" + table_ + ",columnfamily=" + columnFamily_;
+        try
+        {
+            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+            ObjectName nameObj = new ObjectName(mbeanName);
+            mbs.registerMBean(this, nameObj);
+        }
+        catch (Exception e)
+        {
+            throw new RuntimeException(e);
+        }
     }
     
-    String getMBeanName()
+    // called when dropping or renaming a CF. Performs mbean housekeeping.
+    void unregisterMBean()
+    {
+        try
+        {
+            
+            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+            ObjectName nameObj = new ObjectName(mbeanName);
+            if (mbs.isRegistered(nameObj))
+                mbs.unregisterMBean(nameObj);
+            for (ColumnFamilyStore index : indexedColumns_.values())
+                index.unregisterMBean();
+        }
+        catch (Exception e)
     {
-        return "org.apache.cassandra.db:type=ColumnFamilyStores,keyspace=" + table_ + ",columnfamily=" + columnFamily_;
+            // this shouldn't block anything.
+            logger_.warn(e.getMessage(), e);
+        }
     }
 
     public long getMinRowSize()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 0cabc0ea..1aefb05f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -250,22 +250,10 @@ private Table(String table)
             }
         }
 
-        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
         for (CFMetaData cfm : new ArrayList<CFMetaData>(DatabaseDescriptor.getTableDefinition(table).cfMetaData().values()))
         {
             ColumnFamilyStore cfs = ColumnFamilyStore.createColumnFamilyStore(table, cfm.cfName);
             columnFamilyStores.put(cfm.cfId, cfs);
-            try
-            {
-                ObjectName mbeanName = new ObjectName(cfs.getMBeanName());
-                if (mbs.isRegistered(mbeanName))
-                    mbs.unregisterMBean(mbeanName);
-                mbs.registerMBean(cfs, mbeanName);
-            }
-            catch (Exception e)
-            {
-                throw new RuntimeException(e);
-            }
         }
 
         // check 10x as often as the lifetime, so we can exceed lifetime by 10% at most
@@ -303,19 +291,7 @@ public void dropCf(Integer cfId) throws IOException
                 throw new IOException(e);
             }
             
-            // unregister mbean.
-            try
-            {
-                MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
-                ObjectName mbeanName = new ObjectName(cfs.getMBeanName());
-                if (mbs.isRegistered(mbeanName))
-                    mbs.unregisterMBean(mbeanName);
-            }
-            catch (Exception e)
-            {
-                // I'm not going to let this block the drop.
-                logger.warn(e.getMessage(), e);
-            }
+            cfs.unregisterMBean();
         }
     }
     
