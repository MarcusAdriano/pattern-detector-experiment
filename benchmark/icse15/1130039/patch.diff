diff --git a/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java b/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java
index a3ad664e..dfc995a2 100644
--- a/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java
+++ b/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java
@@ -86,7 +86,11 @@ public void tearDown() throws Exception {
   
   public void testMissingField() throws Exception {
     FieldNormModifier fnm = new FieldNormModifier(store, s);
+    try {
     fnm.reSetNorms("nobodyherebutuschickens");
+    } catch (IllegalStateException e) {
+      // expected
+    }
   }
   
   public void testFieldWithNoNorm() throws Exception {
@@ -101,7 +105,11 @@ public void testFieldWithNoNorm() throws Exception {
     r.close();
     
     FieldNormModifier fnm = new FieldNormModifier(store, s);
+    try {
     fnm.reSetNorms("nonorm");
+    } catch (IllegalStateException e) {
+      // expected
+    }
     
     // nothing should have changed
     r = IndexReader.open(store, false);
diff --git a/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java b/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java
index ad290c7e..0313e83f 100644
--- a/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java
+++ b/lucene/dev/trunk/lucene/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java
@@ -92,12 +92,12 @@ public void tearDown() throws Exception {
       super.tearDown();
     }
     
-    public void testMissingField() {
+    public void testMissingField() throws Exception {
 	FieldNormModifier fnm = new FieldNormModifier(store, s);
 	try {
 	    fnm.reSetNorms("nobodyherebutuschickens");
-	} catch (Exception e) {
-	    assertNull("caught something", e);
+	} catch (IllegalStateException e) {
+	    // expected
 	}
     }
 	
@@ -115,8 +115,8 @@ public void testFieldWithNoNorm() throws Exception {
 	FieldNormModifier fnm = new FieldNormModifier(store, s);
 	try {
 	    fnm.reSetNorms("nonorm");
-	} catch (Exception e) {
-	    assertNull("caught something", e);
+	} catch (IllegalStateException e) {
+	  // expected
 	}
 
 	// nothing should have changed
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/document/Field.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/document/Field.java
index 6c6bccb7..d83b81cf 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/document/Field.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/document/Field.java
@@ -96,7 +96,7 @@
     },
 
     /** Expert: Index the field's value without an Analyzer,
-     * and also disable the storing of norms.  Note that you
+     * and also disable the indexing of norms.  Note that you
      * can also separately enable/disable norms by calling
      * {@link Field#setOmitNorms}.  No norms means that
      * index-time field and document boosting and field
@@ -104,11 +104,11 @@
      * less memory usage as norms take up one byte of RAM
      * per indexed field for every document in the index,
      * during searching.  Note that once you index a given
-     * field <i>with</i> norms enabled, disabling norms will
+     * field <i>with</i> norms disabled, enabling norms will
      * have no effect.  In other words, for this to have the
-     * above described effect on a field, all instances of
+     * above described effect on a field, one instance of
      * that field must be indexed with NOT_ANALYZED_NO_NORMS
-     * from the beginning. */
+     * at some point. */
     NOT_ANALYZED_NO_NORMS {
       @Override
       public boolean isIndexed()  { return true;  }
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexReader.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexReader.java
index b0f87f19..750cd755 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexReader.java
@@ -1025,8 +1025,8 @@ public boolean hasNorms(String field) throws IOException {
    * length normalization}.  Thus, to preserve the length normalization
    * values when resetting this, one should base the new value upon the old.
    *
-   * <b>NOTE:</b> If this field does not store norms, then
-   * this method call will silently do nothing.
+   * <b>NOTE:</b> If this field does not index norms, then
+   * this method throws {@link IllegalStateException}.
    *
    * @see #norms(String)
    * @see Similarity#decodeNormValue(byte)
@@ -1037,6 +1037,7 @@ public boolean hasNorms(String field) throws IOException {
    *  has this index open (<code>write.lock</code> could not
    *  be obtained)
    * @throws IOException if there is a low-level IO error
+   * @throws IllegalStateException if the field does not index norms
    */
   public synchronized  void setNorm(int doc, String field, byte value)
           throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentReader.java
index 0e674311..21bbcc1d 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentReader.java
@@ -566,8 +566,10 @@ public boolean hasNorms(String field) {
   protected void doSetNorm(int doc, String field, byte value)
           throws IOException {
     SegmentNorms norm = norms.get(field);
-    if (norm == null)                             // not an indexed field
-      return;
+    if (norm == null) {
+      // field does not store norms
+      throw new IllegalStateException("Cannot setNorm for field " + field + ": norms were omitted");
+    }
 
     normsDirty = true;
     norm.copyOnWrite()[doc] = value;                    // set the value
