diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java
index 14c2c59e..7b2a3cd6 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java
@@ -364,13 +364,13 @@ public void drop(LanguageConnectionContext lcc,
         // depended on the index (including this one)
         dm.invalidateFor(this, DependencyManager.DROP_INDEX, lcc);
 	    
+        /* DERBY-5681 Drop statistics */
+        dd.dropStatisticsDescriptors(td.getUUID(), getUUID(), tc);
+
         // only drop the conglomerate if no similar index but with different
 	    // name. Get from dd in case we drop other dup indexes with a cascade operation	    
 	    if (dd.getConglomerateDescriptors(getConglomerateNumber()).length == 1)
 	    {
-	        /* Drop statistics */
-	        dd.dropStatisticsDescriptors(td.getUUID(), getUUID(), tc);
-	        
 	        /* Drop the conglomerate */
 	        tc.dropConglomerate(getConglomerateNumber());
         }	    
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Derby5681Test.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Derby5681Test.java
index e69de29b..17dfa327 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Derby5681Test.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/Derby5681Test.java
@@ -0,0 +1,184 @@
+/**
+ *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Derby5681Test
+ *  
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.sql.Connection;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import junit.framework.Test;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+import org.apache.derbyTesting.junit.IndexStatsUtil;
+
+/**
+ * DERBY-5681(When a foreign key constraint on a table is dropped,
+ *  the associated statistics row for the conglomerate is not removed.)
+ * @throws Exception
+ */
+public class Derby5681Test extends BaseJDBCTestCase {
+
+    /**
+     * Basic constructor.
+     */
+    public Derby5681Test(String name) {
+        super(name);
+    }
+
+    /**
+     * Returns the implemented tests.
+     * 
+     * @return An instance of <code>Test</code> with the implemented tests to
+     *         run.
+     */
+    public static Test suite() {
+        return TestConfiguration.defaultSuite(Derby5681Test.class);
+    }
+
+    /**
+     * The test can't really demonstrate the fix for DERBY-5681 until 
+     *  DERBY-5702(Creating a foreign key constraint does not automatically
+     *  create a statistics row if foreign key constraint will share a backing
+     *  index created for a primary key) is fixed. The fix for DERBY-5681
+     *  is going to take care of the hanging statistics row left for a
+     *  constraint(which shares a backing index with another constraint) that 
+     *  is getting dropped. But because of DERBY-5702, the statistics row
+     *  never gets created for a constraint that shares a backing index. In
+     *  10.5 and higher, it is possible to create the missing statistics row
+     *  using update statistics procedure but that procedure is not available
+     *  in 10.4 and earlier releases.
+     * @throws SQLException
+     */
+    public void testBug4356() throws SQLException {
+        // Helper object to obtain information about index statistics.
+        IndexStatsUtil stats = new IndexStatsUtil(openDefaultConnection());
+        Statement s = createStatement();
+    	
+        //Test - primary key constraint
+        s.executeUpdate("CREATE TABLE TEST_TAB_1 (c11 int not null,"+
+                "c12 int not null, c13 int)");
+        stats.assertNoStatsTable("TEST_TAB_1");
+        //Insert data into table with no constraint and there will be no stat
+        // for that table at this point
+        s.executeUpdate("INSERT INTO TEST_TAB_1 VALUES(1,1,1),(2,2,2)");
+        stats.assertNoStatsTable("TEST_TAB_1");
+        //Add primary key constraint to the table and now we should find a 
+        // statistics row for it
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "ADD CONSTRAINT TEST_TAB_1_PK_1 "+
+        		"PRIMARY KEY (c11)");
+        stats.assertTableStats("TEST_TAB_1",1);
+        //Dropping primary key constraint will drop the corresponding
+        // statistics
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "DROP CONSTRAINT TEST_TAB_1_PK_1");
+        stats.assertNoStatsTable("TEST_TAB_1");
+        //Add the primary key constraint back since it will be used by the next
+        // test to create foreign key constraint
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "ADD CONSTRAINT TEST_TAB_1_PK_1 "+
+        		"PRIMARY KEY (c11)");
+        //The statistics for primary key constraint has been added
+        stats.assertTableStats("TEST_TAB_1",1);
+
+        //Test - unique key constraint
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "ADD CONSTRAINT TEST_TAB_1_UNQ_1 "+
+        		"UNIQUE (c12)");
+        stats.assertTableStats("TEST_TAB_1",2);
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "DROP CONSTRAINT TEST_TAB_1_UNQ_1");
+        stats.assertTableStats("TEST_TAB_1",1);
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "DROP CONSTRAINT TEST_TAB_1_PK_1");
+        stats.assertNoStatsTable("TEST_TAB_1");
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "ADD CONSTRAINT TEST_TAB_1_PK_1 "+
+        		"PRIMARY KEY (c11)");
+        stats.assertTableStats("TEST_TAB_1",1);
+
+        //Test - unique key constraint on nullable column & non-nullable column
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "ADD CONSTRAINT TEST_TAB_1_UNQ_2 "+
+        		"UNIQUE (c12, c13)");
+        stats.assertTableStats("TEST_TAB_1",3);
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "DROP CONSTRAINT TEST_TAB_1_UNQ_2");
+        stats.assertTableStats("TEST_TAB_1",1);
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "DROP CONSTRAINT TEST_TAB_1_PK_1");
+        stats.assertNoStatsTable("TEST_TAB_1");
+        s.executeUpdate("ALTER TABLE TEST_TAB_1 "+
+                "ADD CONSTRAINT TEST_TAB_1_PK_1 "+
+        		"PRIMARY KEY (c11)");
+        stats.assertTableStats("TEST_TAB_1",1);
+        
+        //Test - foreign key but no primary key constraint
+        s.executeUpdate("CREATE TABLE TEST_TAB_3 (c31 int not null)");
+        s.executeUpdate("INSERT INTO TEST_TAB_3 VALUES(1),(2)");
+        s.executeUpdate("ALTER TABLE TEST_TAB_3 "+
+                "ADD CONSTRAINT TEST_TAB_3_FK_1 "+
+        		"FOREIGN KEY(c31) REFERENCES TEST_TAB_1(c11)");
+        stats.assertTableStats("TEST_TAB_3",1);
+        s.executeUpdate("ALTER TABLE TEST_TAB_3 "+
+                "DROP CONSTRAINT TEST_TAB_3_FK_1");
+        stats.assertNoStatsTable("TEST_TAB_3");
+
+        //Test - foreign key and primary key constraint
+        s.executeUpdate("CREATE TABLE TEST_TAB_2 (c21 int not null)");
+        s.executeUpdate("INSERT INTO TEST_TAB_2 VALUES(1),(2)");
+        s.executeUpdate("ALTER TABLE TEST_TAB_2 "+
+                "ADD CONSTRAINT TEST_TAB_2_PK_1 "+
+        		"PRIMARY KEY (c21)");
+        stats.assertTableStats("TEST_TAB_2",1);
+        //DERBY-5702 Add a foreign key constraint and now we should find 2 rows
+        // of statistics for TEST_TAB_2 - 1 for primary key and other for
+        // foreign key constraint
+        s.executeUpdate("ALTER TABLE TEST_TAB_2 "+
+                "ADD CONSTRAINT TEST_TAB_2_FK_1 "+
+        		"FOREIGN KEY(c21) REFERENCES TEST_TAB_1(c11)");
+        //DERBY-5702 Like primary key earlier, adding foreign key constraint
+        // didn't automatically add a statistics row for it. And there is
+        // no update statistics procedure available in 10.4 and earlier
+        // releases and there is no way to create the statistics row for
+        // constraints which share the backing index with anothe constraint.
+        //After DERBY-5702 is fixed, we should see 2 rows below and not just
+        // one statistics row
+        stats.assertTableStats("TEST_TAB_2",1);
+        //Number of statistics row for TEST_TAB_1 will remain unchanged since
+        // it has only primary key defined on it
+        stats.assertTableStats("TEST_TAB_1",1);
+        s.executeUpdate("ALTER TABLE TEST_TAB_2 "+
+                "DROP CONSTRAINT TEST_TAB_2_FK_1");
+        //Dropping the foreign key constraint should remove one of the 
+        // statistics row for TEST_TAB_2. 
+        stats.assertTableStats("TEST_TAB_2",1);
+        s.execute("drop table TEST_TAB_2");
+        s.execute("drop table TEST_TAB_1");
+        stats.release();
+    }
+}
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java
index e69de29b..9aadfe36 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java
@@ -0,0 +1,539 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.junit.IndexStatsUtil
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.junit;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import junit.framework.Assert;
+
+/**
+ * Helper class for obtaining index statistics and doing asserts on them.
+ * <p>
+ * This implementation assumes all tables/indexes belong to the current schema.
+ * <p>
+ * The <em>timeout</em> value is used to make the utility more resilient to
+ * differences in timing due to varying scheduling decisions, processor speeds,
+ * etc. If the system table contains the wrong number of statistics objects for
+ * the query, it will be queried repeatedly until the right number of statistics
+ * objects is obtained or the query times out.
+ */
+public class IndexStatsUtil {
+
+    private static final boolean INDEX = false;
+    private static final boolean TABLE = true;
+    private static final int NO_EXPECTATION = -1;
+    private static final String SEP =
+                BaseJDBCTestCase.getSystemProperty("line.separator");
+
+    private final Connection con;
+    /** Timeout in milliseconds. */
+    private final long timeout;
+    private PreparedStatement psGetTableId;
+    private PreparedStatement psGetStatsForTable;
+    private PreparedStatement psGetIndexId;
+    private PreparedStatement psGetStatsForIndex;
+    private PreparedStatement psGetStats;
+    private PreparedStatement psGetIdToNameMapConglom;
+    private PreparedStatement psGetIdToNameMapTable;
+
+    /**
+     * Creates an instance querying the given database with no timeout set.
+     * <p>
+     * Querying with no timeout means that if there are too few or too many
+     * statistics objects matching the query, a failure will be raised
+     * immediately.
+     *
+     * @param con connection to the database to query
+     */
+    public IndexStatsUtil(Connection con) {
+        this(con, 0L);
+    }
+
+    /**
+     * Creates an instance querying the given database with the specified
+     * timeout value.
+     *
+     * @param con connection to the database to query
+     * @param timeout the longest time to wait to see if the expectations for a
+     *      query are met (milliseconds)
+     */
+    public IndexStatsUtil(Connection con, long timeout) {
+        // Rely on auto-commit to release locks.
+        try {
+            Assert.assertTrue(con.getAutoCommit());
+        } catch (SQLException sqle) {
+            Assert.fail("Failed to get auto commit: " + sqle.getMessage());
+        }
+        if (timeout < 0) {
+            throw new IllegalArgumentException("timeout cannot be negative");
+        }
+        this.con = con;
+        this.timeout = timeout;
+    }
+
+    /**
+     * Asserts that there are no existing statistics in the database.
+     *
+     * @throws SQLException if obtaining the statistics fails
+     */
+    public void assertNoStats()
+            throws SQLException {
+        assertStats(0);
+    }
+
+    /**
+     * Asserts that there are no existing statistics for the specified table.
+     *
+     * @throws SQLException if obtaining the statistics fails
+     */
+    public void assertNoStatsTable(String table)
+            throws SQLException {
+        assertTableStats(table, 0);
+    }
+
+    /**
+     * Asserts that the expected number of statistics exists.
+     *
+     * @param expectedCount expected number of statistics
+     * @throws SQLException if obtaining the statistics fails
+     */
+    public void assertStats(int expectedCount)
+            throws SQLException {
+        IdxStats[] ret = getStats();
+        if (ret.length != expectedCount) {
+            Assert.assertEquals(buildStatString(ret, "<ALL TABLES>"),
+                    expectedCount, ret.length);
+        }
+    }
+
+    /**
+     * Asserts that the expected number of statistics exists for the specified
+     * table.
+     *
+     * @param table the target table
+     * @param expectedCount expected number of statistics
+     * @throws SQLException if obtaining the statistics fails
+     */
+    public void assertTableStats(String table, int expectedCount)
+            throws SQLException {
+        getStatsTable(table, expectedCount);
+    }
+
+    /**
+     * Asserts that the expected number of statistics exists for the specified
+     * index.
+     *
+     * @param index the target index
+     * @param expectedCount expected number of statistics
+     * @throws SQLException if obtaining the statistics fails
+     */
+    public void assertIndexStats(String index, int expectedCount)
+            throws SQLException {
+        getStatsIndex(index, expectedCount);
+    }
+
+    /**
+     * Builds a human readable representation of a list of statistics objects.
+     *
+     * @param stats a list of statistics (possibly empty)
+     * @param name the name of the table(s)/index(es) associated with the stats
+     * @return A string representation of the statistics.
+     */
+    private String buildStatString(IdxStats[] stats, String name) {
+        StringBuffer sb = new StringBuffer(
+                "Index statistics for " + name + SEP);
+        for (int i=0; i < stats.length; i++) {
+            sb.append(i+1).append(": ").append(stats[i].toString()).
+                    append(SEP);
+        }
+        if (stats.length == 0) {
+            sb.append(" : <no stats>").append(SEP);
+        }
+        return sb.toString();
+    }
+
+    /**
+     * Obtains all existing statistics entries.
+     *
+     * @return A list of statistics entries (possibly empty).
+     * @throws SQLException if obtaining the statistics fail
+     */
+    public IdxStats[] getStats()
+            throws SQLException {
+        if (psGetStats == null) {
+            psGetStats = con.prepareStatement(
+                    "select * from SYS.SYSSTATISTICS " +
+                    "order by TABLEID, REFERENCEID, COLCOUNT");
+        }
+        return buildStatisticsList(psGetStats.executeQuery(), getIdToNameMap());
+    }
+
+    /**
+     * Obtains statistics for the specified table.
+     *
+     * @param table table name
+     * @return A list of statistics entries (possibly empty).
+     * @throws SQLException if obtaining the statistics fail
+     */
+    public IdxStats[] getStatsTable(String table)
+            throws SQLException {
+        return getStatsTable(table, NO_EXPECTATION);
+    }
+
+    /**
+     * Obtains statistics for the specified table, fails if the number of
+     * statistics objects isn't as expected within the timeout.
+     *
+     * @param table table name
+     * @param expectedCount number of expected statistics objects
+     * @return A list of statistics entries (possibly empty).
+     * @throws SQLException if obtaining the statistics fail
+     */
+    public IdxStats[] getStatsTable(String table, int expectedCount)
+            throws SQLException {
+        if (psGetTableId == null) {
+            psGetTableId = con.prepareStatement(
+                "select TABLEID from SYS.SYSTABLES where TABLENAME = ?");
+        }
+        psGetTableId.setString(1, table);
+        ResultSet rs = psGetTableId.executeQuery();
+        Assert.assertTrue("No such table: " + table, rs.next());
+        String tableId = rs.getString(1);
+        Assert.assertFalse("More than one table named " + table, rs.next());
+        rs.close();
+
+        IdxStats[] ret = querySystemTable(tableId, TABLE, expectedCount);
+        // Avoid building the stat string if not necessary.
+        if (expectedCount != NO_EXPECTATION && ret.length != expectedCount) {
+            Assert.assertEquals("failed to get statistics for table " + table +
+                    " (#expected=" + expectedCount + ", timeout=" + timeout +
+                    ")" + SEP + buildStatString(ret, table),
+                    expectedCount, ret.length);
+        }
+        return ret;
+    }
+
+    /**
+     * Obtains statistics for the specified index.
+     *
+     * @param index index name
+     * @return A list of statistics entries (possibly empty).
+     * @throws SQLException if obtaining the statistics fail
+     */
+    public IdxStats[] getStatsIndex(String index)
+             throws SQLException {
+        return getStatsIndex(index, NO_EXPECTATION);
+    }
+
+    /**
+     * Obtains statistics for the specified index, fails if the number of
+     * statistics objects isn't as expected within the timeout.
+     *
+     * @param index index name
+     * @param expectedCount number of expected statistics objects
+     * @return A list of statistics entries (possibly empty).
+     * @throws SQLException if obtaining the statistics fail
+     */
+    public IdxStats[] getStatsIndex(String index, int expectedCount)
+             throws SQLException {
+        if (psGetIndexId == null) {
+            psGetIndexId = con.prepareStatement(
+                    "select CONGLOMERATEID from SYS.SYSCONGLOMERATES where " +
+                    "CONGLOMERATENAME = ? and " +
+                    "CAST(ISINDEX as VARCHAR(5)) = 'true'");
+        }
+        psGetIndexId.setString(1, index);
+        ResultSet rs = psGetIndexId.executeQuery();
+        Assert.assertTrue("No such index: " + index, rs.next());
+        String indexId = rs.getString(1);
+        Assert.assertFalse("More than one index named " + index, rs.next());
+        rs.close();
+
+        IdxStats[] ret = querySystemTable(indexId, INDEX, expectedCount);
+        // Avoid building the stat string if not necessary.
+        if (expectedCount != NO_EXPECTATION && ret.length != expectedCount) {
+            Assert.assertEquals("failed to get statistics for index " + index +
+                    " (#expected=" + expectedCount + ", timeout=" + timeout +
+                    ")" + SEP + buildStatString(ret, index),
+                    expectedCount, ret.length);
+        }
+        return ret;
+    }
+
+    /**
+     * Queries the system table {@code SYS.SYSSTATISTICS} for statistics
+     * associated with a specific table or index.
+     *
+     * @param conglomId conglomerate id (UUID)
+     * @param isTable tells if the conglomerate is a table or an index
+     * @param expectedCount the number of statistics objects expected, use
+     *      {@code NO_EXPECTATION} to return whatever matches the query
+     *      immediately
+     */
+    private IdxStats[] querySystemTable(String conglomId, boolean isTable,
+                                        int expectedCount)
+            throws SQLException {
+        // Assign the correct prepared statement.
+        PreparedStatement ps;
+        if (isTable) {
+            if (psGetStatsForTable == null) {
+                psGetStatsForTable = con.prepareStatement(
+                        "select * from SYS.SYSSTATISTICS " +
+                            "where TABLEID = ? " +
+                            "order by REFERENCEID, COLCOUNT");
+            }
+            ps = psGetStatsForTable;
+        } else {
+            if (psGetStatsForIndex == null) {
+                psGetStatsForIndex = con.prepareStatement(
+                        "select * from SYS.SYSSTATISTICS " +
+                            "where REFERENCEID = ? " +
+                            "order by COLCOUNT");
+            }
+            ps = psGetStatsForIndex;
+        }
+        ps.setString(1, conglomId);
+
+        long started = System.currentTimeMillis();
+        long waited = -1;
+        IdxStats[] ret = null;
+        while (waited < timeout) {
+            // Don't wait the first time.
+            if (ret != null) {
+                Utilities.sleep(Math.min(250L, timeout - waited));
+            }
+            ret = buildStatisticsList(ps.executeQuery(), getIdToNameMap());
+            if (expectedCount == NO_EXPECTATION || ret.length == expectedCount){
+                break;
+            }
+            waited = System.currentTimeMillis() - started;
+        }
+        return ret;
+    }
+
+    /**
+     * Prints all entries in the {@code SYS.SYSSTATISTICS} system table.
+     *
+     * @throws SQLException if obtaining the statistics fails
+     */
+    public void printStats()
+            throws SQLException {
+        System.out.println(buildStatString(getStats(), "all tables"));
+    }
+
+    /**
+     * Generates a map from ids to names for conglomerates in the database.
+     * <p>
+     * Convenience method, used for better reporting.
+     *
+     * @return Mappings from conglomerate id to conglomerate name.
+     * @throws SQLException if accessing the system tables fail
+     */
+    private Map getIdToNameMap()
+            throws SQLException {
+        if (psGetIdToNameMapConglom == null) {
+            psGetIdToNameMapConglom = con.prepareStatement(
+                    "select CONGLOMERATEID, CONGLOMERATENAME " +
+                    "from SYS.SYSCONGLOMERATES");
+        }
+        if (psGetIdToNameMapTable == null) {
+            psGetIdToNameMapTable = con.prepareStatement(
+                    "select TABLEID, TABLENAME from SYS.SYSTABLES");
+        }
+        Map map = new HashMap();
+        ResultSet rs = psGetIdToNameMapConglom.executeQuery();
+        while (rs.next()) {
+            map.put(rs.getString(1), rs.getString(2));
+        }
+        rs.close();
+        rs = psGetIdToNameMapTable.executeQuery();
+        while (rs.next()) {
+            map.put(rs.getString(1), rs.getString(2));
+        }
+        rs.close();
+        return map;
+    }
+
+    /**
+     * Builds an array of statistics objects from data from the
+     * {@code SYS.SYSSTATISTICS} system table.
+     *
+     * @param rs a result set containing rows from {@code SYS.SYSSTATISTICS}
+     * @return A list of statistics objects
+     * @throws SQLException if accessing the result set fails
+     */
+    private IdxStats[] buildStatisticsList(ResultSet rs, Map idToName)
+            throws SQLException {
+        List stats = new ArrayList();
+        while (rs.next()) {
+            // NOTE: Bad practice to call rs.getString(X) twice, but it works
+            //       for Derby with the string type...
+            stats.add(new IdxStats(rs.getString(1), rs.getString(2),
+                    (String)idToName.get(rs.getString(2)),
+                    rs.getString(3),
+                    (String)idToName.get(rs.getString(3)),
+                    rs.getTimestamp(4), rs.getInt(7),
+                    rs.getString(8)));
+        }
+        rs.close();
+        IdxStats[] s = new IdxStats[stats.size()];
+        stats.toArray(s);
+        return s;
+    }
+
+    /**
+     * Releases resources.
+     */
+    public void release() {
+        PreparedStatement[] psToClose = new PreparedStatement[] {
+            psGetStats, psGetIndexId, psGetStatsForIndex,
+            psGetStatsForTable, psGetTableId,
+            psGetIdToNameMapConglom, psGetIdToNameMapTable
+        };
+        for (int i=0; i < psToClose.length; i++) {
+            try {
+                if (psToClose[i] != null) {
+                    psToClose[i].close();
+                }
+            } catch (SQLException sqle) {
+                // Ignore
+            }
+        }
+        try {
+            if (!con.isClosed()) {
+                con.rollback();
+            }
+            con.close();
+        } catch (SQLException sqle) {
+            // Ignore
+        }
+    }
+
+    /**
+     * Immutable class representing index statistics.
+     */
+    public static final class IdxStats {
+        private static final String NA = "<n/a>";
+        /** Number of rows in the table / index. */
+        public final long rows;
+        /** Cardinality of the index. */
+        public final long card;
+        /** Number of leading columns (in the index) for this stats object. */
+        public final int lcols;
+        public final String id;
+        public final String tableId;
+        public final String tableName;
+        public final String indexId;
+        public final String indexName;
+        public final Timestamp created;
+
+        /**
+         * Creates a new statistics object with names for the table and the
+         * index specified for convenience.
+         *
+         * @param id statistics identifier
+         * @param indexId index identifier
+         * @param indexName index name (may be {@code null})
+         * @param tableId table identifier
+         * @param tableName table name (may be {@code null})
+         * @param created creation timestamp
+         * @param lcols number of leading columns
+         * @param stats the statistics, as reported when doing {@code getString}
+         *      on the column {@code STATISTICS} in {@code SYS.SYSSTATISTICS}
+         *      (number of unique rows and total rows, for instance
+         *      "numunique= 3 numrows= 3")
+         */
+        public IdxStats(String id, String indexId, String indexName,
+                        String tableId, String tableName,
+                        Timestamp created, int lcols, String stats) {
+            this.id = id;
+            this.indexId = indexId;
+            this.indexName = indexName != null ? indexName : NA;
+            this.tableId = tableId;
+            this.tableName = tableName != null ? tableName : NA;
+            this.created = created;
+            this.lcols = lcols;
+            // "numunique= 3 numrows= 3"
+            int uniqPos = stats.indexOf('=');
+            int space = stats.indexOf(' ', uniqPos+2);
+            int rowsPos = stats.indexOf('=', space);
+            this.card =
+                    Integer.parseInt(stats.substring(uniqPos+1, space).trim());
+            this.rows =
+                    Integer.parseInt(stats.substring(rowsPos+1).trim());
+        }
+
+        public boolean after(IdxStats other) {
+            return created.after(other.created);
+        }
+
+        public boolean before(IdxStats other) {
+            return created.before(other.created);
+        }
+
+        public String toString() {
+            // Note that not all available information is printed.
+            // Add more if required for debugging.
+            StringBuffer sb = new StringBuffer(200);
+            sb.append("{tableId=").append(tableId).
+                    append(", tableName=").append(tableName).
+                    append(", indexName=").append(indexName).
+                    append(", lcols=").append(lcols).
+                    append(", rows=").append(rows).
+                    append(", unique/card=").append(card).
+                    append(", created=").append(created).append('}');
+            return sb.toString();
+        }
+
+        /**
+         * Equality is based on the statistics entry UUID.
+         *
+         * @param obj other object
+         * @return {@code true} if the other object is considered equal to this
+         */
+        public boolean equals(Object obj) {
+            if (obj == null) {
+                return false;
+            }
+            if (getClass() != obj.getClass()) {
+                return false;
+            }
+            final IdxStats other = (IdxStats) obj;
+            return this.id.equals(other.id);
+        }
+
+        public int hashCode() {
+            int hash = 7;
+            hash = 17 * hash + this.id.hashCode();
+            return hash;
+        }
+    }
+}
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/Utilities.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/Utilities.java
index 170d52d5..022b89dd 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/Utilities.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/junit/Utilities.java
@@ -1,7 +1,7 @@
   + native
 /*
  *
- * Derby - Class Utilities
+ * Derby - Class org.apache.derbyTesting.junit.Utilities
  *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -23,96 +23,84 @@
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.PrintWriter;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
-import java.security.AccessController;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
+import java.util.Arrays;
+import java.util.StringTokenizer;
+
+import junit.framework.Assert;
 
 
 /**
- * General non-JDBC related utilities relocated from TestUtil
- *
- *
+ * General non-JDBC related utilities.
+ * Some of these were relocated from TestUtil.
  */
 public class Utilities {
 
-    public Utilities() {
-        // TODO Auto-generated constructor stub
-    }
+    private Utilities() { }
+
         /**
-         * Just converts a string to a hex literal to assist in converting test
-         * cases that used to insert strings into bit data tables
+     * Converts a string to a hex literal to assist in converting test
+     * cases that used to insert strings into bit data tables.
+     * <p>
          * Converts using UTF-16BE just like the old casts used to.
          *
-         * @param s  String to convert  (e.g
+     * @param s string to convert
          * @return hex literal that can be inserted into a bit column.
          */
-        public static String stringToHexLiteral(String s)
-        {
+    public static String stringToHexLiteral(String s) {
                 byte[] bytes;
                 String hexLiteral = null;
                 try {
                         bytes = s.getBytes("UTF-16BE");
                         hexLiteral = convertToHexString(bytes);
-                }
-                catch (UnsupportedEncodingException ue)
-                {
-                        System.out.println("This shouldn't happen as UTF-16BE should be supported");
-                        ue.printStackTrace();
+        } catch (UnsupportedEncodingException ue) {
+            Assert.fail("Encoding UTF-16BE unavailable: " + ue.getMessage());
                 }
 
                 return hexLiteral;
         }
 
         /**
-         * Convert a byte array to a hex string suitable for insert 
+     * Convert a byte array to a hex string suitable for insert.
+     *
          * @param buf  byte array to convert
          * @return     formated string representing byte array
          */
-        private static String convertToHexString(byte [] buf)
-        {
+    private static String convertToHexString(byte[] buf) {
                 StringBuffer str = new StringBuffer();
                 str.append("X'");
                 String val;
                 int byteVal;
-                for (int i = 0; i < buf.length; i++)
-                {
+        for (int i = 0; i < buf.length; i++) {
                         byteVal = buf[i] & 0xff;
                         val = Integer.toHexString(byteVal);
-                        if (val.length() < 2)
+            if (val.length() < 2) {
                                 str.append("0");
+            }
                         str.append(val);
                 }
-                return str.toString() +"'";
+        return str.toString() + "'";
         }
 
     	/**
-    	 * repeatChar is used to create strings of varying lengths.
-    	 * called from various tests to test edge cases and such.
+     * Creates a string with the specified length.
+     * <p>
+     * Called from various tests to test edge cases and such.
     	 *
     	 * @param c             character to repeat
     	 * @param repeatCount   Number of times to repeat character
     	 * @return              String of repeatCount characters c
     	 */
-       public static String repeatChar(String c, int repeatCount)
-       {
-    	   char ch = c.charAt(0);
-
+    public static String repeatChar(String c, int repeatCount) {
     	   char[] chArray = new char[repeatCount];
-    	   for (int i = 0; i < repeatCount; i++)
-    	   {
-    		   chArray[i] = ch;
-    	   }
-
-    	   return new String(chArray);
-
+        Arrays.fill(chArray, c.charAt(0));
+        return String.valueOf(chArray);
        }
 
         /**
@@ -120,8 +108,8 @@ public static String repeatChar(String c, int repeatCount)
          * JDBC.assertFullResultSet(rs,expectedRows) expectedRows argument.
          * Useful while converting tests to get output in correct format.
          * 
-         * @param rs
-         * @throws SQLException
+     * @param rs result set to print
+     * @throws SQLException if accessing the result set fails
          */
         public static void showResultSet(ResultSet rs) throws SQLException {
             System.out.print("{");
@@ -133,31 +121,33 @@ public static void showResultSet(ResultSet rs) throws SQLException {
                 int nocols = rsmd.getColumnCount();
                 System.out.print("{");
                 
-                for (int i = 0; i < nocols; i++)
-                {
-                	String val = rs.getString(i+1);
-                	if (val == null)
+            for (int i = 0; i < nocols; i++) {
+                String val = rs.getString(i + 1);
+                if (val == null) {
                 		System.out.print("null");
-                	else
-                		System.out.print("\"" + rs.getString(i+1) + "\"");
-                    if (i == (nocols -1))
+                } else {
+                    System.out.print("\"" + rs.getString(i + 1) + "\"");
+                }
+                if (i == (nocols - 1)) {
                         System.out.print("}");
-                    else
+                } else {
                         System.out.print(",");
+                }
                            
                 }
                 next = rs.next();
                    
-                if (next)
+            if (next) {
                     System.out.println(",");
-                else
+            } else {
                     System.out.println("};\n");
             }
         }
+    }
         
     /**
-     * Calls the public method <code>getInfo</code> of the sysinfo tool within
-     * this JVM and returns a <code>BufferedReader</code> for reading its 
+     * Calls the public method {@code getInfo} of the sysinfo tool within
+     * this JVM and returns a {@code BufferedReader} for reading its
      * output. This is useful for obtaining system information that could be 
      * used to verify, for example, values returned by Derby MBeans.
      * 
@@ -179,7 +169,7 @@ public static BufferedReader getSysinfoLocally() {
     }
     
     /**
-     * <p>Calls the public method <code>getSysInfo()</code> of the Network 
+     * <p>Calls the public method {@code getSysInfo} of the Network
      * Server instance associated with the current test configuration and 
      * returns the result as a BufferedReader, making it easy to analyse the 
      * output line by line.</p>
@@ -197,4 +187,51 @@ public static BufferedReader getSysinfoFromServer() throws Exception {
                 NetworkServerTestSetup.getNetworkServerControl().getSysinfo()));
     }
 
+    /**
+     * Splits a string around matches of the given delimiter character.
+     * Copied from org.apache.derby.iapi.util.StringUtil
+     *
+     * Where applicable, this method can be used as a substitute for
+     * {@code String.split(String regex)}, which is not available
+     * on a JSR169/Java ME platform.
+     *
+     * @param str the string to be split
+     * @param delim the delimiter
+     * @throws NullPointerException if str is null
+     */
+    public static String[] split(String str, char delim) {
+        // Note the javadoc on StringTokenizer:
+        //     StringTokenizer is a legacy class that is retained for
+        //     compatibility reasons although its use is discouraged in
+        //     new code.
+        // In other words, if StringTokenizer is ever removed from the JDK,
+        // we need to have a look at String.split() (or java.util.regex)
+        // if it is supported on a JSR169/Java ME platform by then.
+        StringTokenizer st = new StringTokenizer(str, String.valueOf(delim));
+        int n = st.countTokens();
+        String[] s = new String[n];
+        for (int i = 0; i < n; i++) {
+            s[i] = st.nextToken();
+        }
+        return s;
+    }
+
+    /**
+     * Sleeps the specified number of milliseconds.
+     *
+     * @param millis sleep duration
+     */
+    public static void sleep(long millis) {
+        long started = System.currentTimeMillis();
+        long waited = 0;
+        while (waited < millis) {
+            try {
+                Thread.sleep(millis - waited);
+            } catch (InterruptedException ie) {
+                Thread.currentThread().interrupt();
+            }
+            waited = System.currentTimeMillis() - started;
+        }
+    }
+
 }
