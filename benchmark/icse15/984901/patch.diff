diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
index c3d7c7da..5b23ce2c 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
@@ -182,7 +182,7 @@
     /**
      * list the defined keyspaces in this cluster
      */
-    public Set<String> describe_keyspaces() throws TException;
+    public List<KsDef> describe_keyspaces() throws TException;
 
     /**
      * get the cluster name
@@ -218,7 +218,7 @@
      * 
      * @param keyspace
      */
-    public Map<String,Map<String,String>> describe_keyspace(String keyspace) throws NotFoundException, TException;
+    public KsDef describe_keyspace(String keyspace) throws NotFoundException, TException;
 
     /**
      * experimental API for hadoop/parallel query support.
@@ -1003,7 +1003,7 @@ public void send_check_schema_agreement() throws TException
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "check_schema_agreement failed: unknown result");
     }
 
-    public Set<String> describe_keyspaces() throws TException
+    public List<KsDef> describe_keyspaces() throws TException
     {
       send_describe_keyspaces();
       return recv_describe_keyspaces();
@@ -1018,7 +1018,7 @@ public void send_describe_keyspaces() throws TException
       oprot_.getTransport().flush();
     }
 
-    public Set<String> recv_describe_keyspaces() throws TException
+    public List<KsDef> recv_describe_keyspaces() throws TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -1182,7 +1182,7 @@ public String recv_describe_partitioner() throws TException
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "describe_partitioner failed: unknown result");
     }
 
-    public Map<String,Map<String,String>> describe_keyspace(String keyspace) throws NotFoundException, TException
+    public KsDef describe_keyspace(String keyspace) throws NotFoundException, TException
     {
       send_describe_keyspace(keyspace);
       return recv_describe_keyspace();
@@ -1198,7 +1198,7 @@ public void send_describe_keyspace(String keyspace) throws TException
       oprot_.getTransport().flush();
     }
 
-    public Map<String,Map<String,String>> recv_describe_keyspace() throws NotFoundException, TException
+    public KsDef recv_describe_keyspace() throws NotFoundException, TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -2048,7 +2048,7 @@ public void write_args(TProtocol prot) throws TException {
         prot.writeMessageEnd();
       }
 
-      public Set<String> getResult() throws TException {
+      public List<KsDef> getResult() throws TException {
         if (getState() != State.RESPONSE_READ) {
           throw new IllegalStateException("Method call not finished!");
         }
@@ -2194,7 +2194,7 @@ public void write_args(TProtocol prot) throws TException {
         prot.writeMessageEnd();
       }
 
-      public Map<String,Map<String,String>> getResult() throws NotFoundException, TException {
+      public KsDef getResult() throws NotFoundException, TException {
         if (getState() != State.RESPONSE_READ) {
           throw new IllegalStateException("Method call not finished!");
         }
@@ -17618,9 +17618,9 @@ public void validate() throws TException {
   public static class describe_keyspaces_result implements TBase<describe_keyspaces_result, describe_keyspaces_result._Fields>, java.io.Serializable, Cloneable   {
     private static final TStruct STRUCT_DESC = new TStruct("describe_keyspaces_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.SET, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
 
-    public Set<String> success;
+    public List<KsDef> success;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
@@ -17686,8 +17686,8 @@ public String getFieldName() {
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new SetMetaData(TType.SET, 
-              new FieldValueMetaData(TType.STRING))));
+          new ListMetaData(TType.LIST, 
+              new StructMetaData(TType.STRUCT, KsDef.class))));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
       FieldMetaData.addStructMetaDataMap(describe_keyspaces_result.class, metaDataMap);
     }
@@ -17696,7 +17696,7 @@ public describe_keyspaces_result() {
     }
 
     public describe_keyspaces_result(
-      Set<String> success)
+      List<KsDef> success)
     {
       this();
       this.success = success;
@@ -17707,9 +17707,9 @@ public describe_keyspaces_result(
      */
     public describe_keyspaces_result(describe_keyspaces_result other) {
       if (other.isSetSuccess()) {
-        Set<String> __this__success = new HashSet<String>();
-        for (String other_element : other.success) {
-          __this__success.add(other_element);
+        List<KsDef> __this__success = new ArrayList<KsDef>();
+        for (KsDef other_element : other.success) {
+          __this__success.add(new KsDef(other_element));
         }
         this.success = __this__success;
       }
@@ -17728,22 +17728,22 @@ public int getSuccessSize() {
       return (this.success == null) ? 0 : this.success.size();
     }
 
-    public java.util.Iterator<String> getSuccessIterator() {
+    public java.util.Iterator<KsDef> getSuccessIterator() {
       return (this.success == null) ? null : this.success.iterator();
     }
 
-    public void addToSuccess(String elem) {
+    public void addToSuccess(KsDef elem) {
       if (this.success == null) {
-        this.success = new HashSet<String>();
+        this.success = new ArrayList<KsDef>();
       }
       this.success.add(elem);
     }
 
-    public Set<String> getSuccess() {
+    public List<KsDef> getSuccess() {
       return this.success;
     }
 
-    public describe_keyspaces_result setSuccess(Set<String> success) {
+    public describe_keyspaces_result setSuccess(List<KsDef> success) {
       this.success = success;
       return this;
     }
@@ -17769,7 +17769,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Set<String>)value);
+          setSuccess((List<KsDef>)value);
         }
         break;
 
@@ -17867,17 +17867,18 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.SET) {
-              {
-                TSet _set95 = iprot.readSetBegin();
-                this.success = new HashSet<String>(2*_set95.size);
-                for (int _i96 = 0; _i96 < _set95.size; ++_i96)
+            if (field.type == TType.LIST) {
                 {
-                  String _elem97;
-                  _elem97 = iprot.readString();
+                TList _list95 = iprot.readListBegin();
+                this.success = new ArrayList<KsDef>(_list95.size);
+                for (int _i96 = 0; _i96 < _list95.size; ++_i96)
+                {
+                  KsDef _elem97;
+                  _elem97 = new KsDef();
+                  _elem97.read(iprot);
                   this.success.add(_elem97);
                 }
-                iprot.readSetEnd();
+                iprot.readListEnd();
               }
             } else { 
               TProtocolUtil.skip(iprot, field.type);
@@ -17900,12 +17901,12 @@ public void write(TProtocol oprot) throws TException {
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
-          oprot.writeSetBegin(new TSet(TType.STRING, this.success.size()));
-          for (String _iter98 : this.success)
+          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
+          for (KsDef _iter98 : this.success)
           {
-            oprot.writeString(_iter98);
+            _iter98.write(oprot);
           }
-          oprot.writeSetEnd();
+          oprot.writeListEnd();
         }
         oprot.writeFieldEnd();
       }
@@ -20342,10 +20343,10 @@ public void validate() throws TException {
   public static class describe_keyspace_result implements TBase<describe_keyspace_result, describe_keyspace_result._Fields>, java.io.Serializable, Cloneable   {
     private static final TStruct STRUCT_DESC = new TStruct("describe_keyspace_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
     private static final TField NFE_FIELD_DESC = new TField("nfe", TType.STRUCT, (short)1);
 
-    public Map<String,Map<String,String>> success;
+    public KsDef success;
     public NotFoundException nfe;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
@@ -20415,11 +20416,7 @@ public String getFieldName() {
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new MapMetaData(TType.MAP, 
-              new FieldValueMetaData(TType.STRING), 
-              new MapMetaData(TType.MAP, 
-                  new FieldValueMetaData(TType.STRING), 
-                  new FieldValueMetaData(TType.STRING)))));
+          new StructMetaData(TType.STRUCT, KsDef.class)));
       tmpMap.put(_Fields.NFE, new FieldMetaData("nfe", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
@@ -20430,7 +20427,7 @@ public describe_keyspace_result() {
     }
 
     public describe_keyspace_result(
-      Map<String,Map<String,String>> success,
+      KsDef success,
       NotFoundException nfe)
     {
       this();
@@ -20443,30 +20440,7 @@ public describe_keyspace_result(
      */
     public describe_keyspace_result(describe_keyspace_result other) {
       if (other.isSetSuccess()) {
-        Map<String,Map<String,String>> __this__success = new HashMap<String,Map<String,String>>();
-        for (Map.Entry<String, Map<String,String>> other_element : other.success.entrySet()) {
-
-          String other_element_key = other_element.getKey();
-          Map<String,String> other_element_value = other_element.getValue();
-
-          String __this__success_copy_key = other_element_key;
-
-          Map<String,String> __this__success_copy_value = new HashMap<String,String>();
-          for (Map.Entry<String, String> other_element_value_element : other_element_value.entrySet()) {
-
-            String other_element_value_element_key = other_element_value_element.getKey();
-            String other_element_value_element_value = other_element_value_element.getValue();
-
-            String __this__success_copy_value_copy_key = other_element_value_element_key;
-
-            String __this__success_copy_value_copy_value = other_element_value_element_value;
-
-            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
-          }
-
-          __this__success.put(__this__success_copy_key, __this__success_copy_value);
-        }
-        this.success = __this__success;
+        this.success = new KsDef(other.success);
       }
       if (other.isSetNfe()) {
         this.nfe = new NotFoundException(other.nfe);
@@ -20482,22 +20456,11 @@ public describe_keyspace_result clone() {
       return new describe_keyspace_result(this);
     }
 
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
-    }
-
-    public void putToSuccess(String key, Map<String,String> val) {
-      if (this.success == null) {
-        this.success = new HashMap<String,Map<String,String>>();
-      }
-      this.success.put(key, val);
-    }
-
-    public Map<String,Map<String,String>> getSuccess() {
+    public KsDef getSuccess() {
       return this.success;
     }
 
-    public describe_keyspace_result setSuccess(Map<String,Map<String,String>> success) {
+    public describe_keyspace_result setSuccess(KsDef success) {
       this.success = success;
       return this;
     }
@@ -20547,7 +20510,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Map<String,Map<String,String>>)value);
+          setSuccess((KsDef)value);
         }
         break;
 
@@ -20676,32 +20639,9 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.MAP) {
-              {
-                TMap _map103 = iprot.readMapBegin();
-                this.success = new HashMap<String,Map<String,String>>(2*_map103.size);
-                for (int _i104 = 0; _i104 < _map103.size; ++_i104)
-                {
-                  String _key105;
-                  Map<String,String> _val106;
-                  _key105 = iprot.readString();
-                  {
-                    TMap _map107 = iprot.readMapBegin();
-                    _val106 = new HashMap<String,String>(2*_map107.size);
-                    for (int _i108 = 0; _i108 < _map107.size; ++_i108)
-                    {
-                      String _key109;
-                      String _val110;
-                      _key109 = iprot.readString();
-                      _val110 = iprot.readString();
-                      _val106.put(_key109, _val110);
-                    }
-                    iprot.readMapEnd();
-                  }
-                  this.success.put(_key105, _val106);
-                }
-                iprot.readMapEnd();
-              }
+            if (field.type == TType.STRUCT) {
+              this.success = new KsDef();
+              this.success.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -20730,23 +20670,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        {
-          oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.success.size()));
-          for (Map.Entry<String, Map<String,String>> _iter111 : this.success.entrySet())
-          {
-            oprot.writeString(_iter111.getKey());
-            {
-              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter111.getValue().size()));
-              for (Map.Entry<String, String> _iter112 : _iter111.getValue().entrySet())
-              {
-                oprot.writeString(_iter112.getKey());
-                oprot.writeString(_iter112.getValue());
-              }
-              oprot.writeMapEnd();
-            }
-          }
-          oprot.writeMapEnd();
-        }
+        this.success.write(oprot);
         oprot.writeFieldEnd();
       } else if (this.isSetNfe()) {
         oprot.writeFieldBegin(NFE_FIELD_DESC);
@@ -21686,13 +21610,13 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list113 = iprot.readListBegin();
-                this.success = new ArrayList<String>(_list113.size);
-                for (int _i114 = 0; _i114 < _list113.size; ++_i114)
+                TList _list103 = iprot.readListBegin();
+                this.success = new ArrayList<String>(_list103.size);
+                for (int _i104 = 0; _i104 < _list103.size; ++_i104)
                 {
-                  String _elem115;
-                  _elem115 = iprot.readString();
-                  this.success.add(_elem115);
+                  String _elem105;
+                  _elem105 = iprot.readString();
+                  this.success.add(_elem105);
                 }
                 iprot.readListEnd();
               }
@@ -21718,9 +21642,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
-          for (String _iter116 : this.success)
+          for (String _iter106 : this.success)
           {
-            oprot.writeString(_iter116);
+            oprot.writeString(_iter106);
           }
           oprot.writeListEnd();
         }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
index f6eda475..5e5cec60 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
@@ -42,6 +42,6 @@
 
 public class Constants {
 
-  public static final String VERSION = "10.0.0";
+  public static final String VERSION = "11.0.0";
 
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 97b2c993..7a74e09a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -66,7 +66,7 @@
     private CliSessionState css_ = null;
     private String keySpace = null;
     private String username = null;
-    private Map<String, Map<String, Map<String, String>>> keyspacesMap = new HashMap<String, Map<String,Map<String,String>>>();
+    private Map<String, KsDef> keyspacesMap = new HashMap<String, KsDef>();
 
     public CliClient(CliSessionState css, Cassandra.Client thriftClient)
     {
@@ -402,9 +402,9 @@ private void cleanupAndExit()
         System.exit(0);
     }
     
-    Map<String, Map<String, String>> getCFMetaData(String keyspace) throws NotFoundException, TException
+    KsDef getKSMetaData(String keyspace) throws NotFoundException, TException
     {
-        // Lazily lookup column family meta-data.
+        // Lazily lookup keyspace meta-data.
         if (!(keyspacesMap.containsKey(keyspace)))
             keyspacesMap.put(keyspace, thriftClient_.describe_keyspace(keyspace));
         return keyspacesMap.get(keyspace);
@@ -463,13 +463,19 @@ private void executeDelete(CommonTree ast) throws TException, InvalidRequestExce
         byte[] columnName = null;
         boolean isSuper;
         
-        if (!(keyspacesMap.get(keySpace).containsKey(columnFamily)))
+        List<String> cfnames = new ArrayList<String>();
+        for (CfDef cfd : keyspacesMap.get(keySpace).cf_defs) {
+            cfnames.add(cfd.name);
+        }
+
+        int idx = cfnames.indexOf(columnFamily);
+        if (idx == -1)
         {
             css_.out.println("No such column family: " + columnFamily);
             return;
         }
             
-        isSuper = keyspacesMap.get(keySpace).get(columnFamily).get("Type").equals("Super");
+        isSuper = keyspacesMap.get(keySpace).cf_defs.get(idx).column_type.equals("Super");
      
         if ((columnSpecCnt < 0) || (columnSpecCnt > 2))
         {
@@ -534,17 +540,17 @@ private void doSlice(String keyspace, String key, String columnFamily, byte[] su
  
     private String formatSuperColumnName(String keyspace, String columnFamily, SuperColumn column) throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
     {
-        return getFormatTypeForColumn(keyspacesMap.get(keyspace).get(columnFamily).get("CompareWith")).getString(column.name);
+        return getFormatTypeForColumn(getCfDef(keyspace,columnFamily).comparator_type).getString(column.name);
     }
 
     private String formatSubcolumnName(String keyspace, String columnFamily, Column subcolumn) throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
     {
-        return getFormatTypeForColumn(keyspacesMap.get(keyspace).get(columnFamily).get("CompareSubcolumnsWith")).getString(subcolumn.name);
+        return getFormatTypeForColumn(getCfDef(keyspace,columnFamily).subcomparator_type).getString(subcolumn.name);
     }
 
     private String formatColumnName(String keyspace, String columnFamily, Column column) throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
     {
-        return getFormatTypeForColumn(keyspacesMap.get(keyspace).get(columnFamily).get("CompareWith")).getString(column.name);
+        return getFormatTypeForColumn(getCfDef(keyspace,columnFamily).comparator_type).getString(column.name);
     }
 
     private AbstractType getFormatTypeForColumn(String compareWith) throws IllegalAccessException, InstantiationException, NoSuchFieldException
@@ -576,13 +582,19 @@ private void executeGet(CommonTree ast) throws TException, NotFoundException, In
         String columnFamily = CliCompiler.getColumnFamily(columnFamilySpec);
         int columnSpecCnt = CliCompiler.numColumnSpecifiers(columnFamilySpec); 
         
-        if (!(keyspacesMap.get(keySpace).containsKey(columnFamily)))
+        List<String> cfnames = new ArrayList<String>();
+        for (CfDef cfd : keyspacesMap.get(keySpace).cf_defs) {
+            cfnames.add(cfd.name);
+        }
+
+        int idx = cfnames.indexOf(columnFamily);
+        if (idx == -1)
         {
             css_.out.println("No such column family: " + columnFamily);
             return;
         }
         
-        boolean isSuper = keyspacesMap.get(keySpace).get(columnFamily).get("Type").equals("Super");
+        boolean isSuper = keyspacesMap.get(keySpace).cf_defs.get(idx).column_type.equals("Super");
         
         byte[] superColumnName = null;
         byte[] columnName = null;
@@ -905,10 +917,9 @@ private void executeShowTables(CommonTree ast) throws TException
         if (!CliMain.isConnected())
             return;
         
-        Set<String> tables = thriftClient_.describe_keyspaces();
-        for (String table : tables)
-        {
-            css_.out.println(table);
+        List<KsDef> tables = thriftClient_.describe_keyspaces();
+        for (KsDef t : tables) {
+            describeTableInternal(t.name, t);
         }
     }
     
@@ -930,7 +941,9 @@ public String getKeySpace()
     public void setKeyspace(String keySpace) throws NotFoundException, TException 
     {
         this.keySpace = keySpace;
-        getCFMetaData(keySpace);
+        //We do nothing with the return value, but it hits a cache and
+        // the tab-completer.
+        getKSMetaData(keySpace);
     }
     
     public String getUsername() 
@@ -991,7 +1004,12 @@ private void executeUseTable(CommonTree ast) throws TException
             {
                 keyspacesMap.put(keySpace, thriftClient_.describe_keyspace(keySpace));
             }
-            CliMain.updateCompletor(keyspacesMap.get(keySpace).keySet());
+            Set<String> cfnames = new HashSet<String>();
+            KsDef ksd = keyspacesMap.get(keySpace);
+            for (CfDef cfd : ksd.cf_defs) {
+                cfnames.add(cfd.name);
+            }
+            CliMain.updateCompletor(cfnames);
             css_.out.println("Authenticated to keyspace: " + keySpace);
         } 
         catch (AuthenticationException e) 
@@ -1025,6 +1043,43 @@ private void executeUseTable(CommonTree ast) throws TException
         }
     }
 
+    private void describeTableInternal(String tableName, KsDef metadata) throws TException {
+        // Describe and display
+        css_.out.println("Keyspace: " + tableName);
+        try
+        {
+            KsDef ks_def;
+            if (metadata != null) {
+                ks_def = metadata;
+            }
+            else {
+                ks_def = thriftClient_.describe_keyspace(tableName);
+            }
+            css_.out.println("  Replication Factor: " + ks_def.replication_factor);
+            css_.out.println("  Column Families:");
+
+            for (CfDef cf_def : ks_def.cf_defs)
+            {
+                /**
+                String desc = columnMap.get("Desc");
+                String columnFamilyType = columnMap.get("Type");
+                String sort = columnMap.get("CompareWith");
+                String flushperiod = columnMap.get("FlushPeriodInMinutes");
+                css_.out.println(desc);
+                 */
+                //css_.out.println("description");
+                css_.out.println("    Column Family Name: " + cf_def.name + " {");
+                css_.out.println("      Column Family Type: " + cf_def.column_type);
+                css_.out.println("      Column Sorted By: " + cf_def.comparator_type);
+                //css_.out.println("      flush period: " + flushperiod + " minutes");
+                css_.out.println("    }");
+            }
+        }
+        catch (NotFoundException e)
+        {
+            css_.out.println("Keyspace " + tableName + " could not be found.");
+        }
+    }
     // process a statement of the form: describe table <tablename> 
     private void executeDescribeTable(CommonTree ast) throws TException
     {
@@ -1042,32 +1097,7 @@ private void executeDescribeTable(CommonTree ast) throws TException
             return;
         }
 
-        // Describe and display
-        css_.out.println("Keyspace: " + tableName);
-
-        Map<String, Map<String, String>> columnFamiliesMap;
-        try
-        {
-            columnFamiliesMap = thriftClient_.describe_keyspace(tableName);
-            for (String columnFamilyName: columnFamiliesMap.keySet())
-            {
-                Map<String, String> columnMap = columnFamiliesMap.get(columnFamilyName);
-                String desc = columnMap.get("Desc");
-                String columnFamilyType = columnMap.get("Type");
-                String sort = columnMap.get("CompareWith");
-                String flushperiod = columnMap.get("FlushPeriodInMinutes");
-                css_.out.println(desc);
-                css_.out.println("Column Family Name: " + columnFamilyName);
-                css_.out.println("Column Family Type: " + columnFamilyType);
-                css_.out.println("Column Sorted By: " + sort);
-                css_.out.println("flush period: " + flushperiod + " minutes");
-                css_.out.println("------");
-            }
-        }
-        catch (NotFoundException e)
-        {
-            css_.out.println("Keyspace " + tableName + " could not be found.");
-        }
+        describeTableInternal(tableName, null);
     }
 
     // process a statement of the form: connect hostname/port
@@ -1092,4 +1122,14 @@ private void executeConnect(CommonTree ast)
         css_.thriftPort = portNumber;
         CliMain.connect(css_.hostName, css_.thriftPort);
     }
+
+    private CfDef getCfDef(String ksname, String cfname) {
+        List<String> cfnames = new ArrayList<String>();
+        KsDef ksd = keyspacesMap.get(ksname);
+        for (CfDef cfd : ksd.cf_defs) {
+            cfnames.add(cfd.name);
+        }
+        int idx = cfnames.indexOf(cfname);
+        return ksd.cf_defs.get(idx);
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java
index 6253bd39..74aaac11 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java
@@ -21,12 +21,7 @@
 import jline.ConsoleReader;
 import jline.History;
 import org.apache.cassandra.auth.SimpleAuthenticator;
-import org.apache.cassandra.thrift.AuthenticationException;
-import org.apache.cassandra.thrift.AuthenticationRequest;
-import org.apache.cassandra.thrift.AuthorizationException;
-import org.apache.cassandra.thrift.Cassandra;
-import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.thrift.NotFoundException;
+import org.apache.cassandra.thrift.*;
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.transport.TFramedTransport;
@@ -106,7 +101,13 @@ public static void connect(String server, int port)
             try {
                 thriftClient_.set_keyspace(css_.keyspace);
                 cliClient_.setKeyspace(css_.keyspace);
-                updateCompletor(cliClient_.getCFMetaData(css_.keyspace).keySet());
+
+                Set<String> cfnames = new HashSet<String>();
+                KsDef ksd = cliClient_.getKSMetaData(css_.keyspace);
+                for (CfDef cfd : ksd.cf_defs) {
+                    cfnames.add(cfd.name);
+                }
+                updateCompletor(cfnames);
                 
             }
             catch (InvalidRequestException e)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
index 5bf835d9..0d80da79 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
@@ -191,9 +191,18 @@ private RowIterator()
             try
             {
                 partitioner = FBUtilities.newPartitioner(client.describe_partitioner());
-                Map<String, String> info = client.describe_keyspace(keyspace).get(cfName);
-                comparator = FBUtilities.getComparator(info.get("CompareWith"));
-                subComparator = info.get("CompareSubcolumnsWith") == null ? null : FBUtilities.getComparator(info.get("CompareSubcolumnsWith"));
+
+                // Get the Keyspace metadata, then get the specific CF metadata
+                // in order to populate the sub/comparator.
+                KsDef ks_def = client.describe_keyspace(keyspace);
+                List<String> cfnames = new ArrayList<String>();
+                for (CfDef cfd : ks_def.cf_defs)
+                    cfnames.add(cfd.name);
+                int idx = cfnames.indexOf(cfName);
+                CfDef cf_def = ks_def.cf_defs.get(idx);
+
+                comparator = FBUtilities.getComparator(cf_def.comparator_type);
+                subComparator = cf_def.subcomparator_type == null ? null : FBUtilities.getComparator(cf_def.subcomparator_type);
             }
             catch (ConfigurationException e)
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index cb69bd96..58214740 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -485,32 +485,36 @@ private void doInsert(ConsistencyLevel consistency_level, List<RowMutation> muta
         }
     }
 
-    public Map<String, Map<String, String>> describe_keyspace(String table) throws NotFoundException
+    public KsDef describe_keyspace(String table) throws NotFoundException
     {
-        Map<String, Map<String, String>> columnFamiliesMap = new HashMap<String, Map<String, String>>();
-
         KSMetaData ksm = DatabaseDescriptor.getTableDefinition(table); 
         if (ksm == null)
             throw new NotFoundException();
         
-
-        for (Map.Entry<String, CFMetaData> stringCFMetaDataEntry : ksm.cfMetaData().entrySet())
+        List<CfDef> cfDefs = new ArrayList<CfDef>();
+        for (CFMetaData cfm : ksm.cfMetaData().values())
+        {
+            CfDef def = new CfDef(cfm.tableName, cfm.cfName);
+            if (cfm.subcolumnComparator != null)
         {
-            CFMetaData columnFamilyMetaData = stringCFMetaDataEntry.getValue();
+                def.setSubcomparator_type(cfm.subcolumnComparator.getClass().getName());
+                def.setColumn_type("Super");
+            }
+            def.setComparator_type(cfm.comparator.getClass().getName());
 
-            Map<String, String> columnMap = new HashMap<String, String>();
-            columnMap.put("Type", columnFamilyMetaData.cfType.name());
-            columnMap.put("ClockType", columnFamilyMetaData.clockType.name());
-            columnMap.put("Desc", columnFamilyMetaData.comment == null ? columnFamilyMetaData.pretty() : columnFamilyMetaData.comment);
-            columnMap.put("CompareWith", columnFamilyMetaData.comparator.getClass().getName());
-            if (columnFamilyMetaData.cfType == ColumnFamilyType.Super)
+            List<ColumnDef> cdef_list = new ArrayList<ColumnDef>();
+            for (ColumnDefinition col_definition : cfm.column_metadata.values())
             {
-                columnMap.put("CompareSubcolumnsWith", columnFamilyMetaData.subcolumnComparator.getClass().getName());
-                columnMap.put("Reconciler", columnFamilyMetaData.reconciler.getClass().getName());
+                ColumnDef cdef = new ColumnDef(col_definition.name, col_definition.validator.getClass().getName());
+                cdef.setIndex_name(col_definition.index_name);
+                cdef.setIndex_type(col_definition.index_type);
+                cdef_list.add(cdef);
             }
-            columnFamiliesMap.put(columnFamilyMetaData.cfName, columnMap);
+
+            def.setColumn_metadata(cdef_list);
+            cfDefs.add(def);
         }
-        return columnFamiliesMap;
+        return new KsDef(ksm.name, ksm.strategyClass.toString(), ksm.replicationFactor, cfDefs);
     }
 
     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level)
@@ -605,9 +609,19 @@ private void doInsert(ConsistencyLevel consistency_level, List<RowMutation> muta
         return thriftifyKeySlices(rows, column_parent, column_predicate);
     }
 
-    public Set<String> describe_keyspaces() throws TException
+    public List<KsDef> describe_keyspaces() throws TException
     {
-        return DatabaseDescriptor.getTables();
+        Set<String> keyspaces = DatabaseDescriptor.getTables();
+        List<KsDef> ksset = new ArrayList<KsDef>();
+        for (String ks : keyspaces) {
+            try {
+                ksset.add(describe_keyspace(ks));
+            }
+            catch (NotFoundException nfe) {
+                logger.info("Failed to find metadata for keyspace '" + ks + "'. Continuing... ");
+            }
+        }
+        return ksset;
     }
 
     public String describe_cluster_name() throws TException
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyOutputFormatTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyOutputFormatTest.java
index 2a747ff8..32242a87 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyOutputFormatTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/hadoop/ColumnFamilyOutputFormatTest.java
@@ -21,6 +21,7 @@
 import java.io.IOError;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -131,7 +132,9 @@ private void setupCassandra() throws TException, InvalidRequestException
         Cassandra.Client cassandraClient = new Cassandra.Client(binaryProtocol);
         transport.open();
         thriftClient = cassandraClient;
-        Set<String> keyspaces = thriftClient.describe_keyspaces();
+        Set<String> keyspaces = new HashSet<String>();
+        for (KsDef def : thriftClient.describe_keyspaces())
+            keyspaces.add(def.name);
         if (!keyspaces.contains(KEYSPACE))
         {
             List<CfDef> cfDefs = new ArrayList<CfDef>();
