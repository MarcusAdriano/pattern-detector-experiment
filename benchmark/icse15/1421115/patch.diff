diff --git a/aries/trunk/util/util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java b/aries/trunk/util/util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java
index 737fef6d..7ec5ece7 100644
--- a/aries/trunk/util/util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java
+++ b/aries/trunk/util/util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java
@@ -47,12 +47,65 @@
         Class c = EventHook.class;
     }
 
-  private final BundleContext context;
+    /* set this to true to compile in debug messages */
+    static final boolean				DEBUG	= false;
+
+    /**
+     * The Bundle Context used by this {@code BundleTracker}.
+     */
+    protected final BundleContext context;
+
+    /**
+     * The {@code BundleTrackerCustomizer} object for this tracker.
+     */
+    final BundleTrackerCustomizer customizer;
+    /**
+     * Tracked bundles: {@code Bundle} object -> customized Object and
+     * {@code BundleListener} object
+     */
+    private volatile Tracked tracked;
+
+    /**
+     * Accessor method for the current Tracked object. This method is only
+     * intended to be used by the unsynchronized methods which do not modify the
+     * tracked field.
+     *
+     * @return The current Tracked object.
+     */
+    private Tracked tracked() {
+        return tracked;
+    }
+
+    /**
+     * State mask for bundles being tracked. This field contains the ORed values
+     * of the bundle states being tracked.
+     */
   private final int mask;
-  private final BundleTrackerCustomizer customizer;
-  private Tracked tracked;
+
+    /**
+     * BundleHook service registration
+     */
   private ServiceRegistration sr;
 
+    /**
+     * Create a {@code BundleTracker} for bundles whose state is present in the
+     * specified state mask.
+     *
+     * <p>
+     * Bundles whose state is present on the specified state mask will be
+     * tracked by this {@code BundleTracker}.
+     *
+     * @param context The {@code BundleContext} against which the tracking is
+     *        done.
+     * @param stateMask The bit mask of the {@code OR}ing of the bundle states
+     *        to be tracked.
+     * @param customizer The customizer object to call when bundles are added,
+     *        modified, or removed in this {@code BundleTracker}. If customizer
+     *        is {@code null}, then this {@code BundleTracker} will be used as
+     *        the {@code BundleTrackerCustomizer} and this {@code BundleTracker}
+     *        will call the {@code BundleTrackerCustomizer} methods on itself.
+     * @see Bundle#getState()
+     */
   public BundleHookBundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer customizer) {
     super(context, stateMask, customizer);
     this.context = context;
@@ -60,10 +113,32 @@ public BundleHookBundleTracker(BundleContext context, int stateMask, BundleTrack
     this.customizer = customizer == null ? this : customizer;
   }
 
+    /**
+     * Open this {@code BundleTracker} and begin tracking bundles.
+     *
+     * <p>
+     * Bundle which match the state criteria specified when this
+     * {@code BundleTracker} was created are now tracked by this
+     * {@code BundleTracker}.
+     *
+     * @throws java.lang.IllegalStateException If the {@code BundleContext} with
+     *         which this {@code BundleTracker} was created is no longer valid.
+     * @throws java.lang.SecurityException If the caller and this class do not
+     *         have the appropriate
+     *         {@code AdminPermission[context bundle,LISTENER]}, and the Java
+     *         Runtime Environment supports permissions.
+     */
   @Override
   public void open() {
+        final Tracked t;
     synchronized (this) {
-      tracked = new Tracked();
+            if (tracked != null) {
+                return;
+            }
+            t = new Tracked();
+            synchronized (t) {
+                EventHook hook = new BundleEventHook(t);
+                sr = context.registerService(EventHook.class.getName(), hook, null);
       Bundle[] bundles = context.getBundles();
       if (bundles != null) {
         int length = bundles.length;
@@ -75,45 +150,275 @@ public void open() {
           }
         }
         /* set tracked with the initial bundles */
-        tracked.setInitial(bundles);
+                    t.setInitial(bundles);
       }
     }
-    tracked.trackInitial();
-    EventHook hook = new BundleEventHook(tracked);
-    sr = context.registerService(EventHook.class.getName(), hook, null);
+            tracked = t;
+        }
+        /* Call tracked outside of synchronized region */
+        tracked.trackInitial(); /* process the initial references */
   }
 
+    /**
+     * Close this {@code BundleTracker}.
+     *
+     * <p>
+     * This method should be called when this {@code BundleTracker} should end
+     * the tracking of bundles.
+     *
+     * <p>
+     * This implementation calls {@link #getBundles()} to get the list of
+     * tracked bundles to remove.
+     */
   @Override
   public void close() {
-    sr.unregister();
+        final Bundle[] bundles;
+        final Tracked outgoing;
+        synchronized (this) {
+            outgoing = tracked;
+            if (outgoing == null) {
+                return;
+            }
+            if (DEBUG) {
+                System.out.println("BundleTracker.close"); //$NON-NLS-1$
+            }
     tracked.close();
+            bundles = getBundles();
     tracked = null;
+            try {
+                sr.unregister();
+            } catch (IllegalStateException e) {
+				/* In case the context was stopped. */
+            }
+        }
+        if (bundles != null) {
+            for (int i = 0; i < bundles.length; i++) {
+                outgoing.untrack(bundles[i], null);
+            }
+        }
   }
 
+    /**
+     * Default implementation of the
+     * {@code BundleTrackerCustomizer.addingBundle} method.
+     *
+     * <p>
+     * This method is only called when this {@code BundleTracker} has been
+     * constructed with a {@code null BundleTrackerCustomizer} argument.
+     *
+     * <p>
+     * This implementation simply returns the specified {@code Bundle}.
+     *
+     * <p>
+     * This method can be overridden in a subclass to customize the object to be
+     * tracked for the bundle being added.
+     *
+     * @param bundle The {@code Bundle} being added to this
+     *        {@code BundleTracker} object.
+     * @param event The bundle event which caused this customizer method to be
+     *        called or {@code null} if there is no bundle event associated with
+     *        the call to this method.
+     * @return The specified bundle.
+     * @see BundleTrackerCustomizer#addingBundle(Bundle, BundleEvent)
+     */
     @Override
-    public Object addingBundle(Bundle bundle, BundleEvent bundleEvent) {
-        if (bundleEvent == null) {
-            tracked.trackInitial(bundle);
-        }
-        return null;
+    public Object addingBundle(Bundle bundle, BundleEvent event) {
+        T result = (T) bundle;
+        return result;
     }
 
+    /**
+     * Default implementation of the
+     * {@code BundleTrackerCustomizer.modifiedBundle} method.
+     *
+     * <p>
+     * This method is only called when this {@code BundleTracker} has been
+     * constructed with a {@code null BundleTrackerCustomizer} argument.
+     *
+     * <p>
+     * This implementation does nothing.
+     *
+     * @param bundle The {@code Bundle} whose state has been modified.
+     * @param event The bundle event which caused this customizer method to be
+     *        called or {@code null} if there is no bundle event associated with
+     *        the call to this method.
+     * @param object The customized object for the specified Bundle.
+     * @see BundleTrackerCustomizer#modifiedBundle(Bundle, BundleEvent, Object)
+     */
     @Override
-    public void modifiedBundle(Bundle bundle, BundleEvent bundleEvent, Object o) {
+    public void modifiedBundle(Bundle bundle, BundleEvent event, Object object) {
+		/* do nothing */
     }
 
+    /**
+     * Default implementation of the
+     * {@code BundleTrackerCustomizer.removedBundle} method.
+     *
+     * <p>
+     * This method is only called when this {@code BundleTracker} has been
+     * constructed with a {@code null BundleTrackerCustomizer} argument.
+     *
+     * <p>
+     * This implementation does nothing.
+     *
+     * @param bundle The {@code Bundle} being removed.
+     * @param event The bundle event which caused this customizer method to be
+     *        called or {@code null} if there is no bundle event associated with
+     *        the call to this method.
+     * @param object The customized object for the specified bundle.
+     * @see BundleTrackerCustomizer#removedBundle(Bundle, BundleEvent, Object)
+     */
     @Override
-    public void removedBundle(Bundle bundle, BundleEvent bundleEvent, Object o) {
+    public void removedBundle(Bundle bundle, BundleEvent event, Object object) {
+        /* do nothing */
+    }
+
+    /**
+     * Return an array of {@code Bundle}s for all bundles being tracked by this
+     * {@code BundleTracker}.
+     *
+     * @return An array of {@code Bundle}s or {@code null} if no bundles are
+     *         being tracked.
+     */
+    public Bundle[] getBundles() {
+        final Tracked t = tracked();
+        if (t == null) { /* if BundleTracker is not open */
+            return null;
+        }
+        synchronized (t) {
+            int length = t.size();
+            if (length == 0) {
+                return null;
+            }
+            return t.copyKeys(new Bundle[length]);
+        }
+    }
+
+    /**
+     * Returns the customized object for the specified {@code Bundle} if the
+     * specified bundle is being tracked by this {@code BundleTracker}.
+     *
+     * @param bundle The {@code Bundle} being tracked.
+     * @return The customized object for the specified {@code Bundle} or
+     *         {@code null} if the specified {@code Bundle} is not being
+     *         tracked.
+     */
+    public T getObject(Bundle bundle) {
+        final Tracked t = tracked();
+        if (t == null) { /* if BundleTracker is not open */
+            return null;
+        }
+        synchronized (t) {
+            return t.getCustomizedObject(bundle);
+        }
+    }
+
+    /**
+     * Remove a bundle from this {@code BundleTracker}.
+     *
+     * The specified bundle will be removed from this {@code BundleTracker} . If
+     * the specified bundle was being tracked then the
+     * {@code BundleTrackerCustomizer.removedBundle} method will be called for
+     * that bundle.
+     *
+     * @param bundle The {@code Bundle} to be removed.
+     */
+    public void remove(Bundle bundle) {
+        final Tracked t = tracked();
+        if (t == null) { /* if BundleTracker is not open */
+            return;
+        }
+        t.untrack(bundle, null);
+    }
+
+    /**
+     * Return the number of bundles being tracked by this {@code BundleTracker}.
+     *
+     * @return The number of bundles being tracked.
+     */
+    public int size() {
+        final Tracked t = tracked();
+        if (t == null) { /* if BundleTracker is not open */
+            return 0;
+        }
+        synchronized (t) {
+            return t.size();
+        }
+    }
+
+    /**
+     * Returns the tracking count for this {@code BundleTracker}.
+     *
+     * The tracking count is initialized to 0 when this {@code BundleTracker} is
+     * opened. Every time a bundle is added, modified or removed from this
+     * {@code BundleTracker} the tracking count is incremented.
+     *
+     * <p>
+     * The tracking count can be used to determine if this {@code BundleTracker}
+     * has added, modified or removed a bundle by comparing a tracking count
+     * value previously collected with the current tracking count value. If the
+     * value has not changed, then no bundle has been added, modified or removed
+     * from this {@code BundleTracker} since the previous tracking count was
+     * collected.
+     *
+     * @return The tracking count for this {@code BundleTracker} or -1 if this
+     *         {@code BundleTracker} is not open.
+     */
+    public int getTrackingCount() {
+        final Tracked t = tracked();
+        if (t == null) { /* if BundleTracker is not open */
+            return -1;
+        }
+        synchronized (t) {
+            return t.getTrackingCount();
+        }
+    }
+
+    /**
+     * Return a {@code Map} with the {@code Bundle}s and customized objects for
+     * all bundles being tracked by this {@code BundleTracker}.
+     *
+     * @return A {@code Map} with the {@code Bundle}s and customized objects for
+     *         all services being tracked by this {@code BundleTracker}. If no
+     *         bundles are being tracked, then the returned map is empty.
+     * @since 1.5
+     */
+    public Map<Bundle, T> getTracked() {
+        Map<Bundle, T> map = new HashMap<Bundle, T>();
+        final Tracked t = tracked();
+        if (t == null) { /* if BundleTracker is not open */
+            return map;
+        }
+        synchronized (t) {
+            return t.copyEntries(map);
+        }
+    }
+
+    /**
+     * Return if this {@code BundleTracker} is empty.
+     *
+     * @return {@code true} if this {@code BundleTracker} is not tracking any
+     *         bundles.
+     * @since 1.5
+     */
+    public boolean isEmpty() {
+        final Tracked t = tracked();
+        if (t == null) { /* if BundleTracker is not open */
+            return true;
+        }
+        synchronized (t) {
+            return t.isEmpty();
+        }
     }
 
     private class BundleEventHook implements EventHook {
-    private Tracked tracked;
+        private final Tracked tracked;
 
     private BundleEventHook(Tracked tracked) {
       this.tracked = tracked;
     }
 
-    public void event(BundleEvent bundleEvent, Collection<BundleContext> bundleContexts) {
+        public void event(BundleEvent bundleEvent, Collection bundleContexts) {
       tracked.bundleChanged(bundleEvent);
     }
   }
@@ -125,9 +430,7 @@ public void event(BundleEvent bundleEvent, Collection<BundleContext> bundleConte
    * @ThreadSafe
    * @since 1.4
    */
-  private final class Tracked extends AbstractTracked<Bundle, T, BundleEvent>
-      implements
-      SynchronousBundleListener {
+    private final class Tracked extends AbstractTracked<Bundle, T, BundleEvent> implements SynchronousBundleListener {
     /**
      * Tracked constructor.
      */
@@ -153,8 +456,7 @@ public void bundleChanged(final BundleEvent event) {
       final Bundle bundle = event.getBundle();
       final int state = bundle.getState();
       if (DEBUG) {
-        System.out
-            .println("BundleTracker.Tracked.bundleChanged[" + state + "]: " + bundle); //$NON-NLS-1$ //$NON-NLS-2$
+                System.out.println("BundleTracker.Tracked.bundleChanged[" + state + "]: " + bundle); //$NON-NLS-1$ //$NON-NLS-2$
       }
 
       if ((state & mask) != 0) {
@@ -182,7 +484,7 @@ public void bundleChanged(final BundleEvent event) {
      *         if the item is not to be tracked.
      */
     T customizerAdding(final Bundle item, final BundleEvent related) {
-      return (T)customizer.addingBundle(item, related);
+            return (T) customizer.addingBundle(item, related);
     }
 
     /**
@@ -351,8 +653,7 @@ void trackInitial() {
           if (tracked.get(item) != null) {
             /* if we are already tracking this item */
             if (DEBUG) {
-              System.out
-                  .println("AbstractTracked.trackInitial[already tracked]: " + item); //$NON-NLS-1$
+                            System.out.println("AbstractTracked.trackInitial[already tracked]: " + item); //$NON-NLS-1$
             }
             continue; /* skip this item */
           }
@@ -361,8 +662,7 @@ void trackInitial() {
                         * if this item is already in the process of being added.
                         */
             if (DEBUG) {
-              System.out
-                  .println("AbstractTracked.trackInitial[already adding]: " + item); //$NON-NLS-1$
+                            System.out.println("AbstractTracked.trackInitial[already adding]: " + item); //$NON-NLS-1$
             }
             continue; /* skip this item */
           }
@@ -379,49 +679,6 @@ void trackInitial() {
       }
     }
 
-      void trackInitial(S item) {
-        synchronized (this) {
-          if (closed) {
-            /*
-                        * if there are no more initial items
-                        */
-            return; /* we are done */
-          }
-          /*
-                   * move the first item from the initial list to the adding list
-                   * within this synchronized block.
-                   */
-          item = initial.removeFirst();
-          if (tracked.get(item) != null) {
-            /* if we are already tracking this item */
-            if (DEBUG) {
-              System.out
-                  .println("AbstractTracked.trackInitial[already tracked]: " + item); //$NON-NLS-1$
-            }
-            return; /* skip this item */
-          }
-          if (adding.contains(item)) {
-            /*
-                        * if this item is already in the process of being added.
-                        */
-            if (DEBUG) {
-              System.out
-                  .println("AbstractTracked.trackInitial[already adding]: " + item); //$NON-NLS-1$
-            }
-            return; /* skip this item */
-          }
-          adding.add(item);
-        }
-        if (DEBUG) {
-          System.out.println("AbstractTracked.trackInitial: " + item); //$NON-NLS-1$
-        }
-        trackAdding(item, null); /*
-									 * Begin tracking it. We call trackAdding
-									 * since we have already put the item in the
-									 * adding list.
-									 */
-    }
-
     /**
      * Called by the owning Tracker object when it is closed.
      */
@@ -516,8 +773,7 @@ private void trackAdding(final S item, final R related) {
           */
       if (becameUntracked && (object != null)) {
         if (DEBUG) {
-          System.out
-              .println("AbstractTracked.trackAdding[removed]: " + item); //$NON-NLS-1$
+                    System.out.println("AbstractTracked.trackAdding[removed]: " + item); //$NON-NLS-1$
         }
         /* Call customizer outside of synchronized region */
         customizerRemoved(item, related, object);
@@ -542,8 +798,7 @@ void untrack(final S item, final R related) {
 										 * of initial references to process
 										 */
           if (DEBUG) {
-            System.out
-                .println("AbstractTracked.untrack[removed from initial]: " + item); //$NON-NLS-1$
+                        System.out.println("AbstractTracked.untrack[removed from initial]: " + item); //$NON-NLS-1$
           }
           return; /*
 						 * we have removed it from the list and it will not be
@@ -556,8 +811,7 @@ void untrack(final S item, final R related) {
 										 * being added
 										 */
           if (DEBUG) {
-            System.out
-                .println("AbstractTracked.untrack[being added]: " + item); //$NON-NLS-1$
+                        System.out.println("AbstractTracked.untrack[being added]: " + item); //$NON-NLS-1$
           }
           return; /*
 						 * in case the item is untracked while in the process of
