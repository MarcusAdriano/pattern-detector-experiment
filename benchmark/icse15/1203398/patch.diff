diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
index a45d52c2..60d5b2c9 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
@@ -112,12 +112,8 @@ public void abort() {
         field = next;
       }
     }
-    try {
       IOUtils.closeWhileHandlingException(perDocConsumers.values());
       // TODO add abort to PerDocConsumer!
-    } catch (IOException e) {
-      // ignore on abort!
-    }
     
     try {
       fieldsWriter.abort();
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter.java
index 7a4df561..5e1a1f79 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter.java
@@ -26,8 +26,8 @@
 
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.index.DocsEnum;
-import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
+import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.codecs.PostingsWriterBase;
@@ -36,6 +36,7 @@
 import org.apache.lucene.store.RAMOutputStream;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CodecUtil;
+import org.apache.lucene.util.IOUtils;
 
 /** @lucene.experimental */
 public final class Lucene40PostingsWriter extends PostingsWriterBase {
@@ -92,6 +93,8 @@ public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws
     // this.segment = state.segmentName;
     String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);
     freqOut = state.directory.createOutput(fileName, state.context);
+    boolean success = false;
+    try {
     if (state.fieldInfos.hasProx()) {
       // At least one field does not omit TF, so create the
       // prox file
@@ -101,6 +104,12 @@ public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws
       // Every field omits TF so we will write no prox file
       proxOut = null;
     }
+      success = true;
+    } finally {
+      if (!success) {
+        IOUtils.closeWhileHandlingException(freqOut);
+      }
+    }
 
     totalNumDocs = state.numDocs;
 
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter.java
index 4ae97ed8..e48e2d98 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter.java
@@ -151,7 +151,6 @@ public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int
       if (!success) {
         IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);
       }
-
     }
   }
 
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/IOUtils.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/IOUtils.java
index 8508c180..3c1fbc71 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/IOUtils.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/IOUtils.java
@@ -190,7 +190,7 @@ public static void close(Iterable<? extends Closeable> objects) throws IOExcepti
    * @param objects
    *          objects to call <tt>close()</tt> on
    */
-  public static void closeWhileHandlingException(Closeable... objects) throws IOException {
+  public static void closeWhileHandlingException(Closeable... objects) {
     for (Closeable object : objects) {
       try {
         if (object != null) {
@@ -204,7 +204,7 @@ public static void closeWhileHandlingException(Closeable... objects) throws IOEx
   /**
    * @see #closeWhileHandlingException(Closeable...)
    */
-  public static void closeWhileHandlingException(Iterable<? extends Closeable> objects) throws IOException {
+  public static void closeWhileHandlingException(Iterable<? extends Closeable> objects) {
     for (Closeable object : objects) {
       try {
         if (object != null) {
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestTransactions.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestTransactions.java
index 5f848200..ca361044 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestTransactions.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestTransactions.java
@@ -37,10 +37,11 @@
   private class RandomFailure extends MockDirectoryWrapper.Failure {
     @Override
     public void eval(MockDirectoryWrapper dir) throws IOException {
-      if (TestTransactions.doFail && random.nextInt() % 10 <= 3)
+      if (TestTransactions.doFail && random.nextInt() % 10 <= 3) {
         throw new IOException("now failing randomly but on purpose");
     }
   }
+  }
 
   private static abstract class TimedThread extends Thread {
     volatile boolean failed;
diff --git a/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.java b/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.java
index a8d33a20..02cb12a9 100644
--- a/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.java
+++ b/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.java
@@ -50,16 +50,32 @@ public PreFlexFieldsWriter(SegmentWriteState state) throws IOException {
                                    state.fieldInfos,
                                    state.termIndexInterval);
 
+    boolean success = false;
+    try {
     final String freqFile = IndexFileNames.segmentFileName(state.segmentName, "", Lucene3xPostingsFormat.FREQ_EXTENSION);
     freqOut = state.directory.createOutput(freqFile, state.context);
     totalNumDocs = state.numDocs;
+      success = true;
+    } finally {
+      if (!success) {
+        IOUtils.closeWhileHandlingException(termsOut);
+      }
+    }
 
+    success = false;
+    try {
     if (state.fieldInfos.hasProx()) {
       final String proxFile = IndexFileNames.segmentFileName(state.segmentName, "", Lucene3xPostingsFormat.PROX_EXTENSION);
       proxOut = state.directory.createOutput(proxFile, state.context);
     } else {
       proxOut = null;
     }
+      success = true;
+    } finally {
+      if (!success) {
+        IOUtils.closeWhileHandlingException(termsOut, freqOut);
+      }
+    }
 
     skipListWriter = new DefaultSkipListWriter(termsOut.skipInterval,
                                                termsOut.maxSkipLevels,
diff --git a/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter.java b/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter.java
index 8ca9be54..41412729 100644
--- a/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter.java
+++ b/lucene/dev/trunk/lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter.java
@@ -97,12 +97,7 @@
       success = true;
     } finally {
       if (!success) {
-        try {
           IOUtils.closeWhileHandlingException(output);
-        } catch (IOException e) {
-          // cannot happen since we suppress exceptions
-          throw new RuntimeException(e);
-        }
 
         try {
           directory.deleteFile(IndexFileNames.segmentFileName(segment, "",
@@ -138,12 +133,7 @@ private void initialize(Directory directory, String segment, FieldInfos fis,
       success = true;
     } finally {
       if (!success) {
-        try {
           IOUtils.closeWhileHandlingException(output);
-        } catch (IOException e) {
-          // cannot happen since we suppress exceptions
-          throw new RuntimeException(e);
-        }
 
         try {
           directory.deleteFile(IndexFileNames.segmentFileName(segment, "",
