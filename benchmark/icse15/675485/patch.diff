diff --git a/lucene/java/trunk/src/java/org/apache/lucene/store/Directory.java b/lucene/java/trunk/src/java/org/apache/lucene/store/Directory.java
index d28151bb..cd392ee3 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/store/Directory.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/store/Directory.java
@@ -38,6 +38,8 @@
  */
 public abstract class Directory {
 
+  volatile boolean isOpen = true;
+
   /** Holds the LockFactory instance (implements locking for
    * this Directory instance). */
   protected LockFactory lockFactory;
@@ -210,4 +212,12 @@ public static void copy(Directory src, Directory dest, boolean closeDirSrc) thro
       if(closeDirSrc)
         src.close();
   }
+
+  /**
+   * @throws AlreadyClosedException if this Directory is closed
+   */
+  protected final void ensureOpen() throws AlreadyClosedException {
+    if (!isOpen)
+      throw new AlreadyClosedException("this Directory is closed");
+  }
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java b/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
index 69a5ec6c..9daeaae6 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
@@ -318,17 +318,20 @@ private void init(File path, LockFactory lockFactory) throws IOException {
 
   /** Returns an array of strings, one for each Lucene index file in the directory. */
   public String[] list() {
+    ensureOpen();
     return directory.list(IndexFileNameFilter.getFilter());
   }
 
   /** Returns true iff a file with the given name exists. */
   public boolean fileExists(String name) {
+    ensureOpen();
     File file = new File(directory, name);
     return file.exists();
   }
 
   /** Returns the time the named file was last modified. */
   public long fileModified(String name) {
+    ensureOpen();
     File file = new File(directory, name);
     return file.lastModified();
   }
@@ -341,18 +344,21 @@ public static long fileModified(File directory, String name) {
 
   /** Set the modified time of an existing file to now. */
   public void touchFile(String name) {
+    ensureOpen();
     File file = new File(directory, name);
     file.setLastModified(System.currentTimeMillis());
   }
 
   /** Returns the length in bytes of a file in the directory. */
   public long fileLength(String name) {
+    ensureOpen();
     File file = new File(directory, name);
     return file.length();
   }
 
   /** Removes an existing file in the directory. */
   public void deleteFile(String name) throws IOException {
+    ensureOpen();
     File file = new File(directory, name);
     if (!file.delete())
       throw new IOException("Cannot delete " + file);
@@ -364,6 +370,7 @@ public void deleteFile(String name) throws IOException {
    */
   public synchronized void renameFile(String from, String to)
       throws IOException {
+    ensureOpen();
     File old = new File(directory, from);
     File nu = new File(directory, to);
 
@@ -428,7 +435,7 @@ public synchronized void renameFile(String from, String to)
   /** Creates a new, empty file in the directory with the given name.
       Returns a stream writing this file. */
   public IndexOutput createOutput(String name) throws IOException {
-
+    ensureOpen();
     File file = new File(directory, name);
     if (file.exists() && !file.delete())          // delete existing, if any
       throw new IOException("Cannot overwrite: " + file);
@@ -437,6 +444,7 @@ public IndexOutput createOutput(String name) throws IOException {
   }
 
   public void sync(String name) throws IOException {
+    ensureOpen();
     File fullFile = new File(directory, name);
     boolean success = false;
     int retryCount = 0;
@@ -471,11 +479,13 @@ public void sync(String name) throws IOException {
 
   // Inherit javadoc
   public IndexInput openInput(String name) throws IOException {
+    ensureOpen();
     return openInput(name, BufferedIndexInput.BUFFER_SIZE);
   }
 
   // Inherit javadoc
   public IndexInput openInput(String name, int bufferSize) throws IOException {
+    ensureOpen();
     return new FSIndexInput(new File(directory, name), bufferSize);
   }
 
@@ -487,6 +497,7 @@ public IndexInput openInput(String name, int bufferSize) throws IOException {
 
   
   public String getLockID() {
+    ensureOpen();
     String dirName;                               // name to be hashed
     try {
       dirName = directory.getCanonicalPath();
@@ -511,7 +522,8 @@ public String getLockID() {
 
   /** Closes the store to future operations. */
   public synchronized void close() {
-    if (--refCount <= 0) {
+    if (isOpen && --refCount <= 0) {
+      isOpen = false;
       synchronized (DIRECTORIES) {
         DIRECTORIES.remove(directory);
       }
@@ -519,6 +531,7 @@ public synchronized void close() {
   }
 
   public File getFile() {
+    ensureOpen();
     return directory;
   }
 
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/store/RAMDirectory.java b/lucene/java/trunk/src/java/org/apache/lucene/store/RAMDirectory.java
index a977e107..95723e1d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/store/RAMDirectory.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/store/RAMDirectory.java
@@ -237,15 +237,7 @@ public IndexInput openInput(String name) throws IOException {
 
   /** Closes the store to future operations, releasing associated memory. */
   public void close() {
+    isOpen = false;
     fileMap = null;
   }
-
-  /**
-   * @throws AlreadyClosedException if this IndexReader is closed
-   */
-  protected final void ensureOpen() throws AlreadyClosedException {
-    if (fileMap == null) {
-      throw new AlreadyClosedException("this RAMDirectory is closed");
-    }
-  }
 }
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestDoc.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestDoc.java
index e001de9f..7bdea594 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestDoc.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestDoc.java
@@ -22,11 +22,9 @@
 
 
 import org.apache.lucene.analysis.SimpleAnalyzer;
-import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.search.Similarity;
 import org.apache.lucene.demo.FileDocument;
 
 import java.io.*;
@@ -115,7 +113,6 @@ public void testIndexAndMerge() throws Exception {
       SegmentInfo si2 = indexDoc(writer, "test2.txt");
       printSegment(out, si2);
       writer.close();
-      directory.close();
 
       SegmentInfo siMerge = merge(si1, si2, "merge", false);
       printSegment(out, siMerge);
@@ -126,6 +123,7 @@ public void testIndexAndMerge() throws Exception {
       SegmentInfo siMerge3 = merge(siMerge, siMerge2, "merge3", false);
       printSegment(out, siMerge3);
       
+      directory.close();
       out.close();
       sw.close();
       String multiFileOutput = sw.getBuffer().toString();
@@ -143,7 +141,6 @@ public void testIndexAndMerge() throws Exception {
       si2 = indexDoc(writer, "test2.txt");
       printSegment(out, si2);
       writer.close();
-      directory.close();
 
       siMerge = merge(si1, si2, "merge", true);
       printSegment(out, siMerge);
@@ -154,6 +151,7 @@ public void testIndexAndMerge() throws Exception {
       siMerge3 = merge(siMerge, siMerge2, "merge3", true);
       printSegment(out, siMerge3);
       
+      directory.close();
       out.close();
       sw.close();
       String singleFileOutput = sw.getBuffer().toString();
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/store/TestDirectory.java b/lucene/java/trunk/src/test/org/apache/lucene/store/TestDirectory.java
index e69de29b..6472c52b 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/store/TestDirectory.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/store/TestDirectory.java
@@ -0,0 +1,42 @@
+package org.apache.lucene.store;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestDirectory extends LuceneTestCase {
+
+  public void testDetectClose() throws Throwable {
+    Directory dir = new RAMDirectory();
+    dir.close();
+    try {
+      dir.createOutput("test");
+      fail("did not hit expected exception");
+    } catch (AlreadyClosedException ace) {
+    }
+
+    dir = FSDirectory.getDirectory(System.getProperty("tempDir"));
+    dir.close();
+    try {
+      dir.createOutput("test");
+      fail("did not hit expected exception");
+    } catch (AlreadyClosedException ace) {
+    }
+  }
+}
+
