diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java
index 0a812ce8..00342bad 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java
@@ -275,6 +275,9 @@ else if (msgid.equals(DRDA_Proto_RDBNFNRM))
 				+ messageid +
 				"; CODPNT arg  = " + java.lang.Integer.toHexString(cpArg)  +
 				"; Error Code Value = " + java.lang.Integer.toHexString(errCdArg);
+			if (msgid.equals(DRDA_Proto_SYNTAXRM)) {
+				msg += ". Plaintext connection attempt from an SSL enabled client?";
+			}
 		}
 		
 		
diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index e0f0a8d0..ea8ec5fb 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import javax.net.SocketFactory;
 import javax.net.ServerSocketFactory;
 import javax.net.ssl.SSLServerSocket;
+import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 import javax.net.ssl.SSLServerSocketFactory;
 import java.net.UnknownHostException;
@@ -2244,20 +2245,26 @@ public Object run()
 										else
 											connectAddress = hostAddress;
 
-										SocketFactory sf;
 										switch(getSSLMode()) {
 										case SSL_BASIC:
-											sf = NaiveTrustManager.getSocketFactory();
-											break;
+											SSLSocket s1 = (SSLSocket)NaiveTrustManager.getSocketFactory().
+												createSocket(connectAddress, portNumber);
+											// Need to handshake now to get proper error reporting.
+											s1.startHandshake();
+											return s1;
+
 										case SSL_PEER_AUTHENTICATION:
-											sf = SSLSocketFactory.getDefault();
-											break;
+											SSLSocket s2 = (SSLSocket)SSLSocketFactory.getDefault().
+												createSocket(connectAddress, portNumber);
+											// Need to handshake now to get proper error reporting.
+											s2.startHandshake();
+											return s2;
+
 										case SSL_OFF:
 										default:
-											sf = SocketFactory.getDefault();
-											break;
+											return SocketFactory.getDefault().
+												createSocket(connectAddress, portNumber);
 										}
-										return sf.createSocket(connectAddress, portNumber);
 									}
 								}
 							);
@@ -2268,7 +2275,9 @@ public Object run()
 			}
 			else if (e1 instanceof IOException) {
 					consolePropertyMessage("DRDA_NoIO.S",
-						new String [] {hostArg, (new Integer(portNumber)).toString()});
+										   new String [] {hostArg, 
+														  (new Integer(portNumber)).toString(), 
+														  e1.getMessage()});
 			}
 		} catch (Exception e) {
 		// If we find other (unexpected) errors, we ultimately exit--so make
