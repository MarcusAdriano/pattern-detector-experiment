diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java
index 3c29f400..83247dc9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java
@@ -120,11 +120,15 @@ public void testBracketedComments() throws Exception
             stmt.executeQuery("VALUES '/* a comment \n-- */'"),
             new String [][] {{"/* a comment \n-- */"}});
 
-        // unterminated comments
+        // unterminated comments generate lexical errors
         assertCallError("42X03", getConnection(), "VALUES 1 /*");
         assertCallError("42X03", getConnection(), "VALUES 1 /* comment");
         assertCallError("42X03", getConnection(), "VALUES 1 /* comment /*");
         assertCallError("42X03", getConnection(), "VALUES 1 /* comment /* nested */");
+
+        // just comments generates syntax error
+        assertCompileError("42X01", "/* this is a comment */");
+        assertCompileError("42X01", "-- this is a comment \n");
     }
     
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IJRunScriptTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IJRunScriptTest.java
index 0cbeb2c4..5892230f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IJRunScriptTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IJRunScriptTest.java
@@ -81,6 +81,19 @@ public void testScriptExecution()
         s.close();
     }
 
+    /**
+     * Test support for nested bracketed comments.
+     * @throws SQLException
+     * @throws UnsupportedEncodingException
+     */
+    public void testBracketedComment()
+        throws SQLException, UnsupportedEncodingException
+    {
+        runTestingScript("VALUES /* comment /* nested comment */ 5; */ 1;", 0);
+        runTestingScript("/* just a comment */", 0);
+        runTestingScript("/* a /* nested */ comment */", 0);
+    }
+
     /**
      * Test execution an empty script.
      * @throws SQLException
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/StatementFinder.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/StatementFinder.java
index 83791ee8..0b913eef 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/StatementFinder.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/StatementFinder.java
@@ -36,8 +36,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	are not considered to be statement terminators but to be
 	part of those tokens.
 	<p>
-	The only comment form currently recognized is the SQL comment,
-	which begins with "--" and ends at the next EOL.
+    Comments currently recognized include the SQL comment,
+    which begins with "--" and ends at the next EOL, and nested
+    bracketed comments.
 	<p>
 	Strings and delimited identifiers are permitted to contain
 	newlines; the actual IJ or JSQL parsers will report errors when
@@ -78,6 +79,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private static final char SPACE = ' ';
 	private static final char TAB = '\t';
 	private static final char FORMFEED = '\f';
+	private static final char SLASH = '/';
+	private static final char ASTERISK = '*';
 
 	/**
 		The constructor does not assume the stream is data input
@@ -181,6 +184,9 @@ public String nextStatement() {
 				case MINUS:
 					readSingleLineComment(nextChar);
 					break;
+				case SLASH:
+				    readBracketedComment();
+				    break;
 				case SINGLEQUOTE:
 				case DOUBLEQUOTE:
 					readString(nextChar);
@@ -226,6 +232,64 @@ private boolean whiteSpace(char c) {
 		    	c == FORMFEED);
 	}
 
+	/**
+	 	* Advance the source stream to the end of a comment
+		* if it is on one, assuming the first character of
+		* a potential bracketed comment has been found.
+		* If it is not a comment, do not advance the stream.
+	 */
+	private void readBracketedComment() {
+		char nextChar = peekChar();
+
+		// if next char is EOF, we are done.
+		if (peekEOF()) return;
+
+		// if nextChar is not an asterisk, then not a comment.
+		if (nextChar != ASTERISK)
+		{
+			continuedStatement = true;
+			return;
+		}
+
+		// we are really in a comment
+		readChar(); // grab the asterisk for real.
+
+		int nestingLevel = 1;
+
+		while (true) {
+			nextChar = readChar();
+
+			if (atEOF()) {
+				// let the caller process the EOF, don't read it
+				state = IN_STATEMENT;
+				return;
+			}
+
+			char peek = peekChar();
+
+			if (nextChar == SLASH && peek == ASTERISK) {
+				readChar();
+				nestingLevel++;
+			} else if (nextChar == ASTERISK && peek == SLASH) {
+				readChar();
+				nestingLevel--;
+				if (nestingLevel == 0) {
+					state = IN_STATEMENT;
+					return;
+				}
+			} else if (nextChar == NEWLINE || nextChar == RETURN) {
+				if (doPrompt) {
+					utilMain.doPrompt(false, promptwriter, "");
+					// If the next character is a NEWLINE, we process
+					// it as well to account for Windows CRLFs.
+					if (nextChar == RETURN && peek == NEWLINE) {
+						readChar();
+					}
+				}
+			}
+		}
+	}
+
 	/**
 		Advance the source stream to the end of a comment if it
 		is on one, assuming the first character of
