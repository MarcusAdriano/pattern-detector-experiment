diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/MaybePruneRowsMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/MaybePruneRowsMapper.java
index 93d39a81..e47042e2 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/MaybePruneRowsMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/MaybePruneRowsMapper.java
@@ -42,8 +42,8 @@
   private int maxCooccurrences;
   private final OpenIntIntHashMap indexCounts = new OpenIntIntHashMap();
 
-  static enum Elements {
-    USED, NEGLECTED;
+  enum Elements {
+    USED, NEGLECTED
   }
 
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
index 6e3fa58d..1c9d78fc 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
@@ -96,7 +96,7 @@
   private final String getUsersSQL;
   private final String getItemsSQL;
   private final String getPrefsForItemSQL;
-  private final String getNumPreferenceForItemSQL;
+  //private final String getNumPreferenceForItemSQL;
   private final String getNumPreferenceForItemsSQL;
   private final String getMaxPreferenceSQL;
   private final String getMinPreferenceSQL;
@@ -212,7 +212,7 @@ protected AbstractJDBCDataModel(DataSource dataSource,
     this.getUsersSQL = getUsersSQL;
     this.getItemsSQL = getItemsSQL;
     this.getPrefsForItemSQL = getPrefsForItemSQL;
-    this.getNumPreferenceForItemSQL = getNumPreferenceForItemSQL;
+    //this.getNumPreferenceForItemSQL = getNumPreferenceForItemSQL;
     this.getNumPreferenceForItemsSQL = getNumPreferenceForItemsSQL;
     this.getMaxPreferenceSQL = getMaxPreferenceSQL;
     this.getMinPreferenceSQL = getMinPreferenceSQL;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java
index e332bec6..c9ca163b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java
@@ -19,7 +19,6 @@
 
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java
index 85bdec1c..c3ea5e0f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java
@@ -40,8 +40,8 @@
   
   private static final Logger log = LoggerFactory.getLogger(BayesFeatureReducer.class);
   
-  private double minSupport = -1;  
-  private double minDf      = -1;
+  private double minSupport = -1.0;
+  private double minDf      = -1.0;
   
   private String currentDfFeature;
   private double currentCorpusDf;
@@ -65,7 +65,8 @@ public void reduce(StringTuple key,
     }
     reporter.setStatus("Bayes Feature Reducer: " + key + " => " + sum);
 
-    Preconditions.checkArgument(key.length() >= 2 && key.length() <= 3, "StringTuple length out of bounds, not (2 < length < 3)");
+    Preconditions.checkArgument(key.length() >= 2 && key.length() <= 3,
+                                "StringTuple length out of bounds, not (2 < length < 3)");
     
     int featureIndex = key.length() == 2 ? 1 : 2;
     
@@ -75,36 +76,46 @@ public void reduce(StringTuple key,
     // the FeaturePartitioner guarantees that all tuples containing a given term
     // will be handled by the same reducer.
     if (key.stringAt(0).equals(BayesConstants.LABEL_COUNT)) {
-      /* no-op, just collect */
+      // no-op, just collect
+      output.collect(key, new DoubleWritable(sum));
+
     } else if (key.stringAt(0).equals(BayesConstants.FEATURE_TF)) {
       currentDfFeature = key.stringAt(1);
       currentCorpusTf = sum;
       currentCorpusDf = -1;
       
-      if (minSupport > 0 && currentCorpusTf < minSupport) {
+      if (minSupport > 0.0 && currentCorpusTf < minSupport) {
         reporter.incrCounter("skipped", "less_than_minSupport", 1);
       }
-      return; // never emit FEATURE_TF tuples.
+      // never emit FEATURE_TF tuples.
+
     } else if (!key.stringAt(featureIndex).equals(currentDfFeature)) {
       throw new IllegalStateException("Found feature data " + key + " prior to feature tf");
-    } else if (minSupport > 0 && currentCorpusTf < minSupport) {
+
+    } else if (minSupport > 0.0 && currentCorpusTf < minSupport) {
       reporter.incrCounter("skipped", "less_than_minSupport_label-term", 1);
-      return; // skip items that have less than a specified frequency.
+      // skip items that have less than a specified frequency.
+
     } else if (key.stringAt(0).equals(BayesConstants.FEATURE_COUNT)) {
       currentCorpusDf = sum;
-      
-      if (minDf > 0 && currentCorpusDf < minDf) {
+      if (minDf > 0.0 && currentCorpusDf < minDf) {
         reporter.incrCounter("skipped", "less_than_minDf", 1);
-        return; // skip items that have less than the specified minSupport.
+        // skip items that have less than the specified minSupport.
+      } else {
+        output.collect(key, new DoubleWritable(sum));
       }
-    } else if (currentCorpusDf == -1) {
+
+    } else if (currentCorpusDf == -1.0) {
       throw new IllegalStateException("Found feature data " + key + " prior to feature count");
-    } else if (minDf > 0 && currentCorpusDf < minDf) {
+
+    } else if (minDf > 0.0 && currentCorpusDf < minDf) {
       reporter.incrCounter("skipped", "less_than_minDf_label-term", 1);
-      return; // skip items that have less than a specified frequency.
-    } 
+      // skip items that have less than a specified frequency.
+
+    } else {
     output.collect(key, new DoubleWritable(sum));
   }
+  }
 
   @Override
   public void configure(JobConf job) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/LinearModel.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/LinearModel.java
index 9c0c242d..1329d2c8 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/LinearModel.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/LinearModel.java
@@ -86,7 +86,7 @@ public String toString() {
    * Shift the bias of the model.
    * @param factor factor to multiply the bias by.
    */
-  public synchronized void shiftBias(double factor) {
+  public void shiftBias(double factor) {
     this.bias += factor;
   }
   
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelDissector.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelDissector.java
index 8cf4bdc6..5b768e6f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelDissector.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelDissector.java
@@ -21,6 +21,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Ordering;
 import org.apache.mahout.classifier.AbstractVectorClassifier;
+import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.Vector;
 
 import java.util.Collections;
@@ -64,7 +65,8 @@ public ModelDissector() {
    * 1 and then look at the resulting score.  This tells us the weight the model places
    * on that variable.
    * @param features               A feature vector to use (destructively)
-   * @param traceDictionary        A trace dictionary containing variables and what locations in the feature vector are affected by them
+   * @param traceDictionary        A trace dictionary containing variables and what locations
+   *                               in the feature vector are affected by them
    * @param learner                The model that we are probing to find weights on features
    */
 
@@ -127,12 +129,31 @@ private Category(int index, double weight) {
     @Override
     public int compareTo(Category o) {
       int r = Double.compare(Math.abs(weight), Math.abs(o.weight));
-      if (r != 0) {
+      if (r == 0) {
+        if (o.index < index) {
+          return -1;
+        } else if (o.index > index) {
+          return 1;
+        }
+        return 0;
+      }
         return r;
-      } else {
-        return o.index - index;
       }
+
+    @Override
+    public boolean equals(Object o) {
+      if (!(o instanceof Category)) {
+        return false;
+      }
+      Category other = (Category) o;
+      return index == other.index && weight == other.weight;
+    }
+
+    @Override
+    public int hashCode() {
+      return RandomUtils.hashDouble(weight) ^ index;
     }
+
   }
 
   public static class Weight implements Comparable<Weight> {
@@ -166,9 +187,25 @@ public int compareTo(Weight other) {
       int r = Double.compare(Math.abs(this.value), Math.abs(other.value));
       if (r == 0) {
         return feature.compareTo(other.feature);
-      } else {
+      }
         return r;
       }
+
+    @Override
+    public boolean equals(Object o) {
+      if (!(o instanceof Weight)) {
+        return false;
+      }
+      Weight other = (Weight) o;
+      return feature.equals(other.feature)
+          && value == other.value
+          && maxIndex == other.maxIndex
+          && categories.equals(other.categories);
+    }
+
+    @Override
+    public int hashCode() {
+      return feature.hashCode() ^ RandomUtils.hashDouble(value) ^ maxIndex ^ categories.hashCode();
     }
 
     public String getFeature() {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java
index 343f01ea..6f49010e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java
@@ -43,12 +43,12 @@
   
   private static final Logger log = LoggerFactory.getLogger(DefaultTreeBuilder.class);
   
+  private static final int[] NO_ATTRIBUTES = new int[0];
+
   /** indicates which CATEGORICAL attributes have already been selected in the parent nodes */
   private boolean[] selected;
-  
   /** number of attributes to select randomly at each node */
   private int m = 1;
-  
   /** IgSplit implementation */
   private IgSplit igSplit;
   
@@ -82,7 +82,8 @@ public Node build(Random rng, Data data) {
     }
     
     int[] attributes = randomAttributes(rng, selected, m);
-    if (attributes == null) { // we tried all the attributes and could not split the data anymore
+    if (attributes == null || attributes.length == 0) {
+      // we tried all the attributes and could not split the data anymore
       return new Leaf(data.majorityLabel(rng));
     }
 
@@ -212,7 +213,7 @@ private boolean isIdentical(Data data) {
     
     if (nbNonSelected == 0) {
       log.warn("All attributes are selected !");
-      return null;
+      return NO_ATTRIBUTES;
     }
     
     int[] result;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/inmem/InMemInputFormat.java b/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/inmem/InMemInputFormat.java
index 8cdb078a..854da58d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/inmem/InMemInputFormat.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/inmem/InMemInputFormat.java
@@ -232,9 +232,14 @@ public boolean equals(Object obj) {
       
       InMemInputSplit split = (InMemInputSplit) obj;
 
-      return firstId == split.firstId
-          && nbTrees == split.nbTrees
-          && ((seed == null && split.seed == null) || seed.equals(split.seed));
+      if (firstId != split.firstId || nbTrees != split.nbTrees) {
+        return false;
+      }
+      if (seed == null) {
+        return split.seed == null;
+      } else {
+        return seed.equals(split.seed);
+      }
 
     }
     
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java
index 454520fe..995863b5 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPTree.java
@@ -29,60 +29,35 @@
 public class FPTree {
   
   public static final int ROOTNODEID = 0;
-  
   private static final int DEFAULT_CHILDREN_INITIAL_SIZE = 2;
-  
   private static final int DEFAULT_HEADER_TABLE_INITIAL_SIZE = 4;
-  
   private static final int DEFAULT_INITIAL_SIZE = 8;
-  
   private static final float GROWTH_RATE = 1.5f;
-  
   private static final int HEADERTABLEBLOCKSIZE = 2;
-  
   private static final int HT_LAST = 1;
-  
   private static final int HT_NEXT = 0;
   
   private int[] attribute;
-  
   private int[] childCount;
-  
   private int[] conditional;
-  
   private long[] headerTableAttributeCount;
-  
   private int[] headerTableAttributes;
-  
   private int headerTableCount;
-  
   private int[] headerTableLookup;
-  
   private int[][] headerTableProperties;
-  
   private int[] next;
-  
   private int[][] nodeChildren;
-  
   private long[] nodeCount;
-  
   private int nodes;
-  
   private int[] parent;
-  
   private boolean singlePath;
-  
   private final Collection<Integer> sortedSet = new TreeSet<Integer>();
   
   public FPTree() {
-    this(DEFAULT_INITIAL_SIZE, DEFAULT_HEADER_TABLE_INITIAL_SIZE);
+    this(DEFAULT_INITIAL_SIZE);
   }
   
   public FPTree(int size) {
-    this(size, DEFAULT_HEADER_TABLE_INITIAL_SIZE);
-  }
-  
-  private FPTree(int size, int headersize) {
     if (size < DEFAULT_INITIAL_SIZE) {
       size = DEFAULT_INITIAL_SIZE;
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java
index 172d2b93..bfc9c5cb 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java
@@ -27,15 +27,10 @@
 public final class FrequentPatternMaxHeap {
   
   private int count;
-  
   private Pattern least;
-  
   private final int maxSize;
-  
   private final boolean subPatternCheck;
-  
   private final OpenLongObjectHashMap<Set<Pattern>> patternIndex;
-  
   private final PriorityQueue<Pattern> queue;
   
   public FrequentPatternMaxHeap(int numResults, boolean subPatternCheck) {
@@ -64,15 +59,13 @@ public boolean addable(long support) {
     if (subPatternCheck) {
       PriorityQueue<Pattern> ret = new PriorityQueue<Pattern>(maxSize);
       for (Pattern p : queue) {
-        
         if (patternIndex.get(p.support()).contains(p)) {
           ret.add(p);
         }
       }
       return ret;
-    } else {
-      return queue;
     }
+    return queue;
   }
   
   public void addAll(FrequentPatternMaxHeap patterns,
@@ -93,29 +86,26 @@ public void insert(Pattern frequentPattern) {
     }
     
     if (count == maxSize) {
-      if (frequentPattern.compareTo(least) > 0) {
-        if (addPattern(frequentPattern)) {
+      if (frequentPattern.compareTo(least) > 0 && addPattern(frequentPattern)) {
           Pattern evictedItem = queue.poll();
           least = queue.peek();
           if (subPatternCheck) {
             patternIndex.get(evictedItem.support()).remove(evictedItem);
           }
-          
-        }
       }
     } else {
       if (addPattern(frequentPattern)) {
         count++;
-        if (least != null) {
-          if (least.compareTo(frequentPattern) < 0) {
+        if (least == null) {
             least = frequentPattern;
-          }
         } else {
+          if (least.compareTo(frequentPattern) < 0) {
           least = frequentPattern;
         }
       }
     }
   }
+  }
   
   public int count() {
     return count;
@@ -157,7 +147,6 @@ private boolean addPattern(Pattern frequentPattern) {
         }
         queue.add(frequentPattern);
         indexSet.add(frequentPattern);
-        return true;
       } else {
         queue.add(frequentPattern);
         Set<Pattern> patternList;
@@ -167,12 +156,10 @@ private boolean addPattern(Pattern frequentPattern) {
         }
         patternList = patternIndex.get(index);
         patternList.add(frequentPattern);
-
-        return true;
       }
     } else {
       queue.add(frequentPattern);
-      return true;
     }
+    return true;
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/VarLongWritable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/VarLongWritable.java
index 2a489f8b..ca3c9009 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/VarLongWritable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/VarLongWritable.java
@@ -44,7 +44,7 @@ public void set(long value) {
 
   @Override
   public boolean equals(Object other) {
-    return other != null && VarLongWritable.class.equals(other.getClass()) && ((VarLongWritable) other).value == value;
+    return other != null && getClass().equals(other.getClass()) && ((VarLongWritable) other).value == value;
   }
 
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java
index 121bc71e..7309dd9f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java
@@ -219,6 +219,7 @@ public DistributedMatrixIterator(FileSystem fs, Path rowPath, Configuration conf
       this.fs = fs;
       this.conf = conf;
       statuses = fs.globStatus(new Path(rowPath, "*"));
+      statusIndex = 0;
       reader = new SequenceFile.Reader(fs, statuses[statusIndex].getPath(), conf);
     }
 
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/FastMapTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/FastMapTest.java
index 3892b9f6..4464e248 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/FastMapTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/FastMapTest.java
@@ -135,7 +135,7 @@ public void testKeySet() {
     Iterator<String> it = actual.iterator();
     while (it.hasNext()) {
       String value = it.next();
-      if (!value.equals("baz")) {
+      if (!"baz".equals(value)) {
         it.remove();
       }
     }
@@ -157,7 +157,7 @@ public void testValues() {
     Iterator<String> it = actual.iterator();
     while (it.hasNext()) {
       String value = it.next();
-      if (!value.equals("bang")) {
+      if (!"bang".equals(value)) {
         it.remove();
       }
     }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java
index 346b69f3..2bd405d0 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java
@@ -61,14 +61,12 @@ public void testTrain() {
     for (int i = 0; i < 20000; i++) {
       AdaptiveLogisticRegression.TrainingExample r = getExample(i, gen, beta);
       x.train(r.getKey(), r.getActual(), r.getInstance());
-      if (i % 1000 == 0) {
-        if (x.getBest() != null) {
+      if (i % 1000 == 0 && x.getBest() != null) {
           System.out.printf("%10d %10.4f %10.8f %.3f\n",
                             i, x.auc(),
                             Math.log10(x.getBest().getMappedParams()[0]), x.getBest().getMappedParams()[1]);
         }
       }
-    }
     assertEquals(1, x.auc(), 0.1);
   }
 
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/kmeans/TestKmeansClustering.java b/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/kmeans/TestKmeansClustering.java
index 5a905a7c..db9c23ae 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/kmeans/TestKmeansClustering.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/kmeans/TestKmeansClustering.java
@@ -97,7 +97,7 @@ public void setUp() throws Exception {
    * Tests {@link KMeansClusterer#runKMeansIteration) single run convergence with a given distance threshold.
    */
   @Test
-  public void testRunKMeansIteration_convergesInOneRunWithGivenDistanceThreshold() {
+  public void testRunKMeansIterationConvergesInOneRunWithGivenDistanceThreshold() {
     double[][] rawPoints = { {0,0}, {0,0.25}, {0,0.75}, {0, 1}};
     List<Vector> points = getPoints(rawPoints);
 
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/df/builder/DefaultTreeBuilderTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/df/builder/DefaultTreeBuilderTest.java
index a0a6f150..54c0a7c5 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/df/builder/DefaultTreeBuilderTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/df/builder/DefaultTreeBuilderTest.java
@@ -55,6 +55,7 @@ public void testRandomAttributes() throws Exception {
 
       int[] attrs = DefaultTreeBuilder.randomAttributes(rng, selected, m);
 
+      assertNotNull(attrs);
       assertEquals(Math.min(m, nbAttributes - nbSelected), attrs.length);
 
       for (int attr : attrs) {
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java
index 715bae72..5974d945 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java
@@ -22,9 +22,7 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.DataInput;
 import java.io.DataInputStream;
-import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.IOException;
 
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/SplitBayesInput.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/SplitBayesInput.java
index 5aa87c1d..554642a8 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/SplitBayesInput.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/SplitBayesInput.java
@@ -348,11 +348,13 @@ else if (fs.getFileStatus(inputFile).isDir()) {
     Writer trainingWriter = new OutputStreamWriter(fs.create(trainingOutputFile), charset);
     Writer testWriter     = new OutputStreamWriter(fs.create(testOutputFile), charset);
 
-    int pos = 0;
     int trainCount = 0;
     int testCount = 0;
 
+    try {
+
     String line;
+      int pos = 0;
     while ((line = reader.readLine()) != null) {
       pos++;
 
@@ -379,8 +381,11 @@ else if (fs.getFileStatus(inputFile).isDir()) {
       writer.write('\n');
     }
     
+    } finally {
+      IOUtils.quietClose(reader);
     IOUtils.quietClose(trainingWriter);
     IOUtils.quietClose(testWriter);
+    }
     
     log.info("file: {}, input: {} train: {}, test: {} starting at {}",
              new Object[] {inputFile.getName(), lineCount, trainCount, testCount, testSplitStart});
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java
index b1d3cf49..8d5fc2aa 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java
@@ -190,11 +190,13 @@ public static void main(String[] args) throws IOException {
           content.append("</mediawiki>");
           filenumber++;
           String filename = outputDirPath + "/chunk-" + decimalFormatter.format(filenumber) + ".xml";
-          BufferedWriter chunkWriter = new BufferedWriter(new OutputStreamWriter(fs
-              .create(new Path(filename)), "UTF-8"));
-          
+          BufferedWriter chunkWriter =
+              new BufferedWriter(new OutputStreamWriter(fs.create(new Path(filename)), "UTF-8"));
+          try {
           chunkWriter.write(content.toString(), 0, content.length());
+          } finally {
           chunkWriter.close();
+          }
           if (filenumber >= numChunks) {
             break;
           }
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/PosTagger.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/PosTagger.java
index 7ccdcd09..6b3a6f7d 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/PosTagger.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/PosTagger.java
@@ -22,12 +22,15 @@
 import java.io.InputStreamReader;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.regex.Pattern;
 
+import org.apache.mahout.common.IOUtils;
 import org.apache.mahout.math.Matrix;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -47,6 +50,9 @@
 
   private static final Logger log = LoggerFactory.getLogger(PosTagger.class);
 
+  private static final Pattern SPACE = Pattern.compile(" ");
+  private static final Pattern SPACES = Pattern.compile("[ ]+");
+
   /**
    * No public constructors for utility classes.
    */
@@ -110,16 +116,19 @@ private PosTagger() {
    */
   private static void readFromURL(String url, boolean assignIDs) throws IOException {
     URLConnection connection = (new URL(url)).openConnection();
-    BufferedReader input = new BufferedReader(new InputStreamReader(connection.getInputStream()));
     // initialize the data structure
     hiddenSequences = new LinkedList<int[]>();
     observedSequences = new LinkedList<int[]>();
     readLines = 0;
 
     // now read line by line of the input file
-    String line;
     List<Integer> observedSequence = new LinkedList<Integer>();
     List<Integer> hiddenSequence = new LinkedList<Integer>();
+
+    BufferedReader input =
+        new BufferedReader(new InputStreamReader(connection.getInputStream(), Charset.forName("UTF-8")));
+    try {
+      String line;
     while ((line = input.readLine()) != null) {
       if (line.isEmpty()) {
         // new sentence starts
@@ -139,7 +148,7 @@ private static void readFromURL(String url, boolean assignIDs) throws IOExceptio
       }
       readLines++;
       // we expect the format [word] [POS tag] [NP tag]
-      String[] tags = line.split(" ");
+        String[] tags = SPACE.split(line);
       // when analyzing the training set, assign IDs
       if (assignIDs) {
         if (!wordIDs.containsKey(tags[0])) {
@@ -159,6 +168,9 @@ private static void readFromURL(String url, boolean assignIDs) throws IOExceptio
       observedSequence.add(wordID);
       hiddenSequence.add(tagID);
     }
+    } finally {
+      IOUtils.quietClose(input);
+    }
     // if there is still something in the pipe, register it
     if (!observedSequence.isEmpty()) {
       int[] observedSequenceArray = new int[observedSequence.size()];
@@ -244,7 +256,7 @@ private static void testModel(String testingURL) throws IOException {
     sentence = sentence.replaceAll("[,.!?:;\"]", " $0 ");
     sentence = sentence.replaceAll("''", " '' ");
     // now we tokenize the sentence
-    String[] tokens = sentence.split("[ ]+");
+    String[] tokens = SPACES.split(sentence);
     // now generate the observed sequence
     int[] observedSequence = HmmUtils.encodeStateSequence(taggingModel, Arrays.asList(tokens), true, 0);
     // POS tag this observedSequence
@@ -259,7 +271,7 @@ public static void main(String[] args) throws IOException {
     testModel("http://www.jaist.ac.jp/~hieuxuan/flexcrfs/CoNLL2000-NP/test.txt");
     // tag an exemplary sentence
     String test = "McDonalds is a huge company with many employees .";
-    String[] testWords = test.split(" ");
+    String[] testWords = SPACE.split(test);
     List<String> posTags = tagSentence(test);
     for (int i = 0; i < posTags.size(); ++i) {
       log.info("{}[{}]", testWords[i], posTags.get(i));
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/SimpleCsvExamples.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/SimpleCsvExamples.java
index 852e6902..7e295f13 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/SimpleCsvExamples.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/SimpleCsvExamples.java
@@ -20,6 +20,7 @@
 import com.google.common.base.Joiner;
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
+import org.apache.mahout.common.IOUtils;
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.DenseVector;
 import org.apache.mahout.math.Vector;
@@ -29,6 +30,7 @@
 import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
 
 import java.io.BufferedReader;
+import java.io.Closeable;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -78,15 +80,19 @@ public static void main(String[] args) throws IOException {
     Vector v = new DenseVector(1000);
     if (args[0].equals("--generate")) {
       PrintWriter out = new PrintWriter(new File(args[2]));
+      try {
       int n = Integer.parseInt(args[1]);
       for (int i = 0; i < n; i++) {
         Line x = Line.generate();
         out.println(x);
       }
-      out.close();
+      } finally {
+        IOUtils.quietClose(out);
+      }
     } else if ("--parse".equals(args[0])) {
       BufferedReader in = new BufferedReader(
           new InputStreamReader(new FileInputStream(new File(args[1])), Charset.forName("UTF-8")));
+      try {
       String line = in.readLine();
       while (line != null) {
         v.assign(0);
@@ -97,6 +103,9 @@ public static void main(String[] args) throws IOException {
         }
         line = in.readLine();
       }
+      } finally {
+        IOUtils.quietClose(in);
+      }
       String separator = "";
       for (int i = 0; i < FIELDS; i++) {
         System.out.printf("%s%.3f", separator, s[i].getMean());
@@ -104,6 +113,7 @@ public static void main(String[] args) throws IOException {
       }
     } else if ("--fast".equals(args[0])) {
       FastLineReader in = new FastLineReader(new FileInputStream(args[1]));
+      try {
       FastLine line = in.read();
       while (line != null) {
         v.assign(0);
@@ -114,6 +124,9 @@ public static void main(String[] args) throws IOException {
         }
         line = in.read();
       }
+      } finally {
+        IOUtils.quietClose(in);
+      }
       String separator = "";
       for (int i = 0; i < FIELDS; i++) {
         System.out.printf("%s%.3f", separator, s[i].getMean());
@@ -228,7 +241,7 @@ public double getDouble(int field) {
     }
   }
 
-  private static class FastLineReader {
+  private static class FastLineReader implements Closeable {
     private final InputStream in;
     private final ByteBuffer buf = ByteBuffer.allocate(100000);
 
@@ -259,5 +272,10 @@ private void fillBuffer() throws IOException {
         }
       }
     }
+
+    @Override
+    public void close() throws IOException {
+      in.close();
+    }
   }
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/function/Functions.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/function/Functions.java
index 165e403e..53b6d102 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/function/Functions.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/function/Functions.java
@@ -571,7 +571,7 @@ public double apply(double a) {
    * Constructs a function that returns <tt>Math.IEEEremainder(a,b)</tt>. <tt>a</tt> is a variable, <tt>b</tt> is
    * fixed.
    */
-  public static DoubleFunction IEEEremainder(final double b) {
+  public static DoubleFunction mathIEEEremainder(final double b) {
     return new DoubleFunction() {
 
       public double apply(double a) {
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java
index 42f459c9..12e09976 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java
@@ -14,11 +14,6 @@
 import org.apache.mahout.math.matrix.impl.AbstractMatrix2D;
 import org.apache.mahout.math.matrix.impl.DenseDoubleMatrix2D;
 
-import java.util.Formatter;
-import java.util.Locale;
-import java.util.Map;
-import java.util.TreeMap;
-
 /** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
 @Deprecated
 public final class Property {
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java
index 66d00290..42c2b50b 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java
@@ -17,7 +17,6 @@
 
 package org.apache.mahout.math.jet.random;
 
-import com.google.common.base.Charsets;
 import com.google.common.base.Splitter;
 import com.google.common.collect.Iterables;
 import com.google.common.io.CharStreams;
@@ -28,6 +27,7 @@
 import org.junit.Test;
 
 import java.io.InputStreamReader;
+import java.nio.charset.Charset;
 
 public final class NegativeBinomialTest extends MahoutTestCase {
 
@@ -37,7 +37,7 @@
   @Test
   public void testDistributionFunctions() throws Exception {
     InputSupplier<InputStreamReader> input =
-        Resources.newReaderSupplier(Resources.getResource("negative-binomial-test-data.csv"), Charsets.UTF_8);
+        Resources.newReaderSupplier(Resources.getResource("negative-binomial-test-data.csv"), Charset.forName("UTF-8"));
     boolean header = true;
     for (String line : CharStreams.readLines(input)) {
       if (header) {
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java
index dbe410b4..5c3a415c 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java
@@ -17,7 +17,6 @@
 
 package org.apache.mahout.math.jet.stat;
 
-import com.google.common.base.Charsets;
 import com.google.common.base.Splitter;
 import com.google.common.collect.Iterables;
 import com.google.common.io.CharStreams;
@@ -29,6 +28,7 @@
 
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.Charset;
 import java.util.Random;
 
 public final class GammaTest extends MahoutTestCase {
@@ -36,7 +36,9 @@
   @Test
   public void testGamma() {
     double[] x = {1, 2, 5, 10, 20, 50, 100};
-    double[] expected = {1.000000e+00, 1.000000e+00, 2.400000e+01, 3.628800e+05, 1.216451e+17, 6.082819e+62, 9.332622e+155};
+    double[] expected = {
+        1.000000e+00, 1.000000e+00, 2.400000e+01, 3.628800e+05, 1.216451e+17, 6.082819e+62, 9.332622e+155
+    };
 
     for (int i = 0; i < x.length; i++) {
       assertEquals(expected[i], Gamma.gamma(x[i]), expected[i] * 1.0e-5);
@@ -48,7 +50,9 @@ public void testGamma() {
   @Test
   public void testNegativeArgForGamma() {
     double[] x = {-30.3, -20.7, -10.5, -1.1, 0.5, 0.99, -0.999};
-    double[] expected = {-5.243216e-33, -1.904051e-19, -2.640122e-07, 9.714806e+00, 1.772454e+00, 1.005872e+00, -1.000424e+03};
+    double[] expected = {
+        -5.243216e-33, -1.904051e-19, -2.640122e-07, 9.714806e+00, 1.772454e+00, 1.005872e+00, -1.000424e+03
+    };
 
     for (int i = 0; i < x.length; i++) {
       assertEquals(expected[i], Gamma.gamma(x[i]), Math.abs(expected[i] * 1.0e-5));
@@ -112,7 +116,7 @@ public void incompleteBeta() throws IOException {
     Splitter onComma = Splitter.on(",").trimResults();
 
     InputSupplier<InputStreamReader> input =
-        Resources.newReaderSupplier(Resources.getResource("beta-test-data.csv"), Charsets.UTF_8);
+        Resources.newReaderSupplier(Resources.getResource("beta-test-data.csv"), Charset.forName("UTF-8"));
     boolean header = true;
     for (String line : CharStreams.readLines(input)) {
       if (header) {
diff --git a/mahout/trunk/utils/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java b/mahout/trunk/utils/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java
index b5bf3526..5af2843c 100644
--- a/mahout/trunk/utils/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java
+++ b/mahout/trunk/utils/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java
@@ -167,7 +167,7 @@ public boolean accept(Path current) {
             writer.write(prefix + Path.SEPARATOR + name, file.toString());
           }
         }
-      } catch (Exception e) {
+      } catch (IOException e) {
         throw new IllegalStateException(e);
       }
       return false;
