diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/error/StandardException.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/error/StandardException.java
index 04e2efcb..319d5e62 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/error/StandardException.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/error/StandardException.java
@@ -731,4 +731,29 @@ private	static	SQLWarning	newWarningCommon( String messageId, Object[] oa )
 
 		return sqlw;
 	}
+
+    /**
+     * Is this a lock timeout exception.
+     * <p>
+     *
+     * @return true if this exception is a lock timeout.
+     *
+     **/
+    public final boolean isLockTimeout() {
+
+        return(SQLState.LOCK_TIMEOUT.equals(getSQLState()));
+    }
+
+    /**
+     * Is this a lock timeout or lock deadlock exception.
+     * <p>
+     *
+     * @return true if this exception is a lock timeout or lock deadlock.
+     *
+     **/
+    public final boolean isLockTimeoutOrDeadlock() {
+
+        return(SQLState.LOCK_TIMEOUT.equals(getSQLState()) ||
+               SQLState.DEADLOCK.equals(getSQLState()));
+    }
 }
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
index ba3c5f93..db7d137f 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
@@ -702,11 +702,14 @@ public final synchronized ExecPreparedStatement getPreparedStatement(boolean rec
 
 			if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) (lcc.getDataDictionary())).readOnlyUpgrade) {
 
-				//bug 4821 - First try compiling on a nested transaction so we can release
-				//the locks after the compilation. But if we get lock time out on the
-				//nested transaction, then go ahead and do the compilation on the user
-				//transaction. When doing the compilation on user transaction, the locks
-				//acquired for recompilation will be released at the end of the user transaction.
+				// First try compiling in a nested transaction so we can 
+                // release the locks after the compilation, and not have them
+                // sit around in the parent transaction. But if we get lock 
+                // time out in the nested transaction, then go ahead and do 
+                // the compilation in the user transaction. When doing the 
+                // compilation in the user transaction, the locks acquired for 
+                // recompilation will be released at the end of the user 
+                // transaction (commit or abort).
 				TransactionController nestedTC;
 				try
 				{
@@ -722,8 +725,8 @@ public final synchronized ExecPreparedStatement getPreparedStatement(boolean rec
 				}
 				catch (StandardException se)
 				{
-					// If I cannot start a Nested User Transaction use the parent
-					// transaction to do all the work.
+					// If I cannot start a Nested User Transaction use the 
+                    // parent transaction to do all the work.
 					nestedTC = null;
 				}
 
@@ -740,27 +743,39 @@ public final synchronized ExecPreparedStatement getPreparedStatement(boolean rec
 				}
 				catch (StandardException se)
 				{
-					if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT))
+					if (se.isLockTimeout())
 					{
+                        // Locks were set nowait, so a lock timeout here
+                        // means that some lock request in the nested 
+                        // transaction immediately conflicted.  A conflict
+                        // with a parent lock would lead to a undetected 
+                        // deadlock so must give up trying in the nested
+                        // transaction and retry with parent transaction.
 						if (nestedTC != null)
 						{
 						nestedTC.commit();
 						nestedTC.destroy();
 						nestedTC = null;
 						}
-						// if we couldn't do this with a nested xaction, retry with
-						// parent-- we need to wait this time!
+
+						// if we couldn't do this with a nested transaction, 
+                        // retry with parent-- we need to wait this time!
+                        // Lock conflicts at this point are with other 
+                        // transactions, so must wait.
 						initiallyCompilable = compilable;
 						prepareAndRelease(lcc, null, null);
 						updateSYSSTATEMENTS(lcc, RECOMPILE, null);
 					}
-					else throw se;
+					else 
+                    {
+                        throw se;
+                    }
 				}
 				finally
 				{
-					// no matter what, commit the nested transaction; if something
-					// bad happened in the child xaction lets not abort the parent
-					// here.
+					// no matter what, commit the nested transaction; 
+                    // if something bad happened in the child transaction lets
+                    // not abort the parent here.
 					if (nestedTC != null)
 					{
 						nestedTC.commit();
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java
index ac945aa2..ccb3d044 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java
@@ -405,7 +405,7 @@ public boolean updateCurrentValueOnDisk( Long oldValue, Long newValue ) throws S
             }
             catch (StandardException se)
             {
-                if ( !se.getMessageId().equals( SQLState.LOCK_TIMEOUT ) ) { throw se; }
+                if ( !se.isLockTimeout() ) { throw se; }
             }
             finally
             {
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
index c8ad6598..55875197 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
@@ -190,14 +190,18 @@ static SchemaDescriptor getSchemaDescriptorForCreate(
 			try {
 				csca.executeConstantAction(activation, useTc);
 			} catch (StandardException se) {
-				if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT)) {
-					// We don't test for SQLState.DEADLOCK or
-					// .LOCK_TIMEOUT_LOG here because a) if it is a
-					// deadlock, it may be better to expose it, and b)
+
+				if (se.isLockTimeout()) {
+                    // We don't test for SQLState.DEADLOCK because if it is a
+                    // deadlock, it may be better to expose it.  Just go ahead
+                    // and throw it.
+
+                    if (!se.getMessageId().equals(SQLState.LOCK_TIMEOUT_LOG)) {
+                        // In case of a LOCK_TIMEOUT_LOG also just throw it.
 					// LOCK_TIMEOUT_LOG happens when the app has set
 					// derby.locks.deadlockTrace=true, in which case we
-					// don't want to mask the timeout.  So in both the
-					// latter cases we just throw.
+                        // don't want to mask the timeout. 
+
 					if (useTc == nestedTc) {
 
 						// clean up after use of nested transaction,
@@ -206,6 +210,8 @@ static SchemaDescriptor getSchemaDescriptorForCreate(
 						nestedTc.destroy();
 						continue;
 					}
+                    }
+
 				} else if (se.getMessageId()
 							   .equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
 					// Ignore "Schema already exists". Another thread has
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/LockTableConstantAction.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/LockTableConstantAction.java
index cb37104a..8072ad9d 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/LockTableConstantAction.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/LockTableConstantAction.java
@@ -111,9 +111,11 @@ public void	executeConstantAction( Activation activation )
 		catch (StandardException se)
 		{
 			String msgId = se.getMessageId();
-			if (msgId.equals(SQLState.DEADLOCK) || msgId.equals(SQLState.LOCK_TIMEOUT) || msgId.equals(SQLState.LOCK_TIMEOUT_LOG)) {
+            if (se.isLockTimeoutOrDeadlock())
+            {
 				String mode = (exclusiveMode) ? "EXCLUSIVE" : "SHARE";
-				se = StandardException.newException(SQLState.LANG_CANT_LOCK_TABLE, se, fullTableName, mode);
+				se = StandardException.newException(
+                        SQLState.LANG_CANT_LOCK_TABLE, se, fullTableName, mode);
 			}
 
 			throw se;
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java
index 9507692e..12da8e06 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java
@@ -257,8 +257,7 @@ public int performWork(ContextManager contextMgr)
             // call will return null - in this case just return assuming no 
             // work to be done.
 
-			if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT) ||
-				se.getMessageId().equals(SQLState.DEADLOCK))
+            if (se.isLockTimeoutOrDeadlock())
 			{
                 // Could not get exclusive table lock, so try row level
                 // reclaim of just the rows on this page.  No merge is 
@@ -277,8 +276,7 @@ public int performWork(ContextManager contextMgr)
                 }
                 catch (StandardException se2)
                 {
-                    if (se2.getMessageId().equals(SQLState.LOCK_TIMEOUT) ||
-                        se2.getMessageId().equals(SQLState.DEADLOCK))
+                    if (se2.isLockTimeoutOrDeadlock())
                     {
                         // Could not get intended exclusive table lock, so 
                         // requeue and hope other user gives up table level
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java
index 3c34d4ba..12cd08cb 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java
@@ -351,15 +351,16 @@ public int performWork(ContextManager contextMgr)
         }
         catch (StandardException se)
         {
-            // exception might have occured either container got dropper or lock not granted.
+            // exception might have occured either because the container got 
+            // dropper or the lock was not granted.
             // It is possible by the time this post commit work gets scheduled 
             // that the container has been dropped and that the open container 
             // call will return null - in this case just return assuming no 
             // work to be done.
 
-			//If this expcetion is because lock could not be obtained , work is requeued.
-			if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT) || 
-				se.getMessageId().equals(SQLState.DEADLOCK))
+			// If this expcetion is because lock could not be obtained, 
+            // work is requeued.
+			if (se.isLockTimeoutOrDeadlock())
 			{
 				requeue_work = true;
 			}
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
index cb673aa2..a3dae95b 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
@@ -537,7 +537,7 @@ private static ContainerHandle openContainerNW(Transaction tran,
 			// DERBY-4059
 			// if this is a lock timeout just return null.
 			// otherwise throw the exception
-			if (!se.getSQLState().equals(SQLState.LOCK_TIMEOUT)) {
+			if (!se.isLockTimeout()) {
 				throw se;
 			}
 		}
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
index a2387272..e7061458 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
@@ -2468,7 +2468,7 @@ public void reached(CompatibilitySpace compatibilitySpace, Object group,
             }
             catch (StandardException se)
             {
-                if (!se.getMessageId().equals(SQLState.LOCK_TIMEOUT))
+                if (!se.isLockTimeout())
                 {
                     // if it is a timeout then escalate did not happen and
                     // just fall through.
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/jdbc/XATransactionState.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/jdbc/XATransactionState.java
index f765e1c9..d526747e 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/jdbc/XATransactionState.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/jdbc/XATransactionState.java
@@ -153,7 +153,7 @@ public void cleanupOnError(Throwable t) {
 					associationState = TRO_FAIL;
 					if (SQLState.DEADLOCK.equals(se.getMessageId()))
 						rollbackOnlyCode = XAException.XA_RBDEADLOCK;
-					else if (SQLState.LOCK_TIMEOUT.equals(se.getMessageId()))
+					else if (se.isLockTimeout())
 						rollbackOnlyCode = XAException.XA_RBTIMEOUT;					
 					else
 						rollbackOnlyCode = XAException.XA_RBOTHER;
diff --git a/db/derby/code/branches/10.6/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/branches/10.6/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 852dafc0..549846e1 100644
--- a/db/derby/code/branches/10.6/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/branches/10.6/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -264,7 +264,7 @@ The message identifier (ie. the value that matches a field in this class)
 	*/
 	String DEADLOCK = "40001";
 	String LOCK_TIMEOUT = "40XL1";
-    String LOCK_TIMEOUT_LOG = "40XL2";
+    String LOCK_TIMEOUT_LOG = "40XL1.T.1";
 
 	/*
 	** Store - access.protocol.Interface statement exceptions
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorMessageTest.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorMessageTest.java
index 4d299f89..cc68ba85 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorMessageTest.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorMessageTest.java
@@ -74,6 +74,9 @@ protected void decorateSQL(Statement s) throws SQLException {
     /**
      * Test that a wait timeout prints the lock table correctly when the
      * <code>derby.locks.deadlockTrace</code> property is set. DERBY-2817
+     *
+     * After fix for DERBY-5564, the sql state for a lock timeout will be
+     * the same whether diagnostics are on or not (ie. 40XL1).  
      */
     public void testWaitTimeout() throws SQLException {
         getConnection().setAutoCommit(false);
@@ -88,7 +91,7 @@ public void testWaitTimeout() throws SQLException {
                     s2.executeQuery("select * from t where id=1"));
             fail("Expected lock timeout");
         } catch (SQLException e) {
-            assertSQLState("Not a timeout", "40XL2", e);
+            assertSQLState("Not a timeout", "40XL1", e);
 
             // check that information about the victim is printed
             String[] msg = e.getMessage().split("\n");
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java
index a187ffbb..ea3a9424 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java
@@ -42,7 +42,6 @@
 public class LazyDefaultSchemaCreationTest extends BaseJDBCTestCase {
 
     final private static String LOCK_TIMEOUT = "40XL1";
-    final private static String LOCK_TIMEOUT_LOG = "40XL2";
 
     /**
      * Creates a new {@code LazyDefaultSchemaCreationTest} instance.
@@ -149,6 +148,9 @@ public void testDerby48SelfLockingRecovery () throws SQLException
      * nested transaction (cf solution for DERBY-48) when deadlock
      * detection is on, i.e. 40XL2 (LOCK_TIMEOUT_LOG) rather than
      * 40XL1 (LOCK_TIMEOUT) happens.
+     *
+     * After fix for DERBY-5564 LOCK_TIMEOUT will be returned whether
+     * diagnostics are on or not.
      */
     public void testDerby48SelfLockingRecoveryDeadlockDetectionOn ()
             throws SQLException
@@ -166,9 +168,9 @@ public void testDerby48SelfLockingRecoveryDeadlockDetectionOn ()
         // in outer transaction:
         try {
             s1.executeUpdate("create table t1(i int)");
-            fail("Expected exception " + LOCK_TIMEOUT_LOG);
+            fail("Expected exception " + LOCK_TIMEOUT);
         } catch (SQLException e) {
-            assertSQLState("Expected state: ", LOCK_TIMEOUT_LOG, e);
+            assertSQLState("Expected state: ", LOCK_TIMEOUT, e);
         }
 
         JDBC.assertEmpty(
@@ -184,6 +186,9 @@ public void testDerby48SelfLockingRecoveryDeadlockDetectionOn ()
      * use case will not cause an infinite recursion after the fix to
      * DERBY-48). The scenario in this test case does create the
      * infinite recursion prior to the fix of DERBY-3678, however.
+     *
+     * After fix for DERBY-5564 LOCK_TIMEOUT SQL state should be returned
+     * for a lock timeout whether diagnostics are on or not.
      */
     public void testDerby3678 ()
             throws SQLException
@@ -201,9 +206,9 @@ public void testDerby3678 ()
         // ..which conflicts with the next connect
         try {
             c2 = openUserConnection("newuser");
-            fail("Expected exception " + LOCK_TIMEOUT_LOG);
+            fail("Expected exception " + LOCK_TIMEOUT);
         } catch (SQLException e) {
-            assertSQLState("Expected state: ", LOCK_TIMEOUT_LOG, e);
+            assertSQLState("Expected state: ", LOCK_TIMEOUT, e);
         } finally {
             c1.rollback();
         }
