diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
index a514c380..aac487ed 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
@@ -22,8 +22,7 @@
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.util.OpenBitSet;
-import org.apache.lucene.util.OpenBitSetDISI;
+import org.apache.lucene.util.FixedBitSet;
 
 /**
  * A container Filter that allows Boolean composition of Filters.
@@ -34,7 +33,6 @@
  * The resulting Filter is NOT'd with the NOT Filters
  * The resulting Filter is AND'd with the MUST Filters
  */
-
 public class BooleanFilter extends Filter
 {
   ArrayList<Filter> shouldFilters = null;
@@ -42,9 +40,9 @@
   ArrayList<Filter> mustFilters = null;
   
   private DocIdSetIterator getDISI(ArrayList<Filter> filters, int index, IndexReader reader)
-  throws IOException
-  {
-    return filters.get(index).getDocIdSet(reader).iterator();
+      throws IOException {
+    final DocIdSet set = filters.get(index).getDocIdSet(reader);
+    return (set == null) ? null : set.iterator();
   }
 
   /**
@@ -52,81 +50,54 @@ private DocIdSetIterator getDISI(ArrayList<Filter> filters, int index, IndexRead
    * of the filters that have been added.
    */
   @Override
-  public DocIdSet getDocIdSet(IndexReader reader) throws IOException
-  {
-    OpenBitSetDISI res = null;
-  
+  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
+    FixedBitSet res = null;
     if (shouldFilters != null) {
       for (int i = 0; i < shouldFilters.size(); i++) {
+        final DocIdSetIterator disi = getDISI(shouldFilters, i, reader);
+        if (disi == null) continue;
         if (res == null) {
-          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());
-        } else { 
-          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);
-          if(dis instanceof OpenBitSet) {
-            // optimized case for OpenBitSets
-            res.or((OpenBitSet) dis);
-          } else {
-            res.inPlaceOr(getDISI(shouldFilters, i, reader));
-          }
+          res = new FixedBitSet(reader.maxDoc());
         }
+        res.or(disi);
       }
     }
     
-    if (notFilters!=null) {
+    if (notFilters != null) {
       for (int i = 0; i < notFilters.size(); i++) {
         if (res == null) {
-          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());
-          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs
-        } else {
-          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);
-          if(dis instanceof OpenBitSet) {
-            // optimized case for OpenBitSets
-            res.andNot((OpenBitSet) dis);
-          } else {
-            res.inPlaceNot(getDISI(notFilters, i, reader));
+          res = new FixedBitSet(reader.maxDoc());
+          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs
           }
+        final DocIdSetIterator disi = getDISI(notFilters, i, reader);
+        if (disi != null) {
+          res.andNot(disi);
         }
       }
     }
     
-    if (mustFilters!=null) {
+    if (mustFilters != null) {
       for (int i = 0; i < mustFilters.size(); i++) {
+        final DocIdSetIterator disi = getDISI(mustFilters, i, reader);
+        if (disi == null) {
+          return DocIdSet.EMPTY_DOCIDSET; // no documents can match
+        }
         if (res == null) {
-          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());
-        } else {
-          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);
-          if(dis instanceof OpenBitSet) {
-            // optimized case for OpenBitSets
-            res.and((OpenBitSet) dis);
+          res = new FixedBitSet(reader.maxDoc());
+          res.or(disi);
           } else {
-            res.inPlaceAnd(getDISI(mustFilters, i, reader));
-          }
-        }
+          res.and(disi);
       }
     }
-    
-    if (res !=null)
-      return finalResult(res, reader.maxDoc());
-
-    return DocIdSet.EMPTY_DOCIDSET;
   }
 
-  /** Provide a SortedVIntList when it is definitely smaller
-   * than an OpenBitSet.
-   * @deprecated Either use CachingWrapperFilter, or
-   * switch to a different DocIdSet implementation yourself.
-   * This method will be removed in Lucene 4.0 
-   */
-  @Deprecated
-  protected final DocIdSet finalResult(OpenBitSetDISI result, int maxDocs) {
-    return result;
+    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;
   }
 
   /**
   * Adds a new FilterClause to the Boolean Filter container
   * @param filterClause A FilterClause object containing a Filter and an Occur parameter
   */
-  
   public void add(FilterClause filterClause)
   {
     if (filterClause.getOccur().equals(Occur.MUST)) {
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
index ddb5a40c..4a50df2b 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
@@ -71,17 +71,49 @@ private Filter getRangeFilter(String field,String lowerPrice, String upperPrice)
     Filter f = new TermRangeFilter(field,lowerPrice,upperPrice,true,true);
     return f;
 	}
-  private Filter getTermsFilter(String field,String text)
-	{
-		TermsFilter tf=new TermsFilter();
-		tf.addTerm(new Term(field,text));
+
+  private Filter getTermsFilter(String field, String text) {
+    TermsFilter tf = new TermsFilter();
+    tf.addTerm(new Term(field, text));
     
 		return tf;
 	}
         
+  private Filter getWrappedTermQuery(String field, String text) {
+    return new QueryWrapperFilter(new TermQuery(new Term(field, text)));
+  }
+
+  private Filter getNullDISFilter() {
+    return new Filter() {
+      @Override
+      public DocIdSet getDocIdSet(IndexReader context) {
+        return null;
+      }
+    };
+  }
+
+  private Filter getNullDISIFilter() {
+    return new Filter() {
+      @Override
+      public DocIdSet getDocIdSet(IndexReader context) {
+        return new DocIdSet() {
+          @Override
+          public DocIdSetIterator iterator() {
+            return null;
+          }
+          
+          @Override
+          public boolean isCacheable() {
+            return true;
+          }
+        };
+      }
+    };
+  }
+
         private void tstFilterCard(String mes, int expected, Filter filt)
-        throws Throwable
-        {
+      throws Throwable {
+    // BooleanFilter never returns null DIS or null DISI!
           DocIdSetIterator disi = filt.getDocIdSet(reader).iterator();
           int actual = 0;
           while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
@@ -91,75 +123,176 @@ private void tstFilterCard(String mes, int expected, Filter filt)
         }
           
 		
-	public void testShould() throws Throwable
-	{
+  public void testShould() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getTermsFilter("price","030"),BooleanClause.Occur.SHOULD));
-    tstFilterCard("Should retrieves only 1 doc",1,booleanFilter);
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.SHOULD));
+    tstFilterCard("Should retrieves only 1 doc", 1, booleanFilter);
+    
+    // same with a real DISI (no OpenBitSetIterator)
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("price", "030"), BooleanClause.Occur.SHOULD));
+    tstFilterCard("Should retrieves only 1 doc", 1, booleanFilter);
 	}
 	
-	public void testShoulds() throws Throwable
-	{
+  public void testShoulds() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getRangeFilter("price","010", "020"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getRangeFilter("price","020", "030"),BooleanClause.Occur.SHOULD));
-    tstFilterCard("Shoulds are Ored together",5,booleanFilter);
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "010", "020"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "020", "030"), BooleanClause.Occur.SHOULD));
+    tstFilterCard("Shoulds are Ored together", 5, booleanFilter);
 	}
-	public void testShouldsAndMustNot() throws Throwable
-	{
+
+  public void testShouldsAndMustNot() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getRangeFilter("price","010", "020"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getRangeFilter("price","020", "030"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getTermsFilter("inStock", "N"),BooleanClause.Occur.MUST_NOT));
-    tstFilterCard("Shoulds Ored but AndNot",4,booleanFilter);
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "010", "020"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "020", "030"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getTermsFilter("inStock", "N"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("Shoulds Ored but AndNot", 4, booleanFilter);
+
+    booleanFilter.add(new FilterClause(getTermsFilter("inStock", "Maybe"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("Shoulds Ored but AndNots", 3, booleanFilter);
+    
+    // same with a real DISI (no OpenBitSetIterator)
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "010", "020"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "020", "030"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("inStock", "N"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("Shoulds Ored but AndNot", 4, booleanFilter);
 
-    booleanFilter.add(new FilterClause(getTermsFilter("inStock", "Maybe"),BooleanClause.Occur.MUST_NOT));
-    tstFilterCard("Shoulds Ored but AndNots",3,booleanFilter);
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("inStock", "Maybe"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("Shoulds Ored but AndNots", 3, booleanFilter);
 	}
-	public void testShouldsAndMust() throws Throwable
-	{
+
+  public void testShouldsAndMust() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getRangeFilter("price","010", "020"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getRangeFilter("price","020", "030"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"),BooleanClause.Occur.MUST));
-    tstFilterCard("Shoulds Ored but MUST",3,booleanFilter);
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "010", "020"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "020", "030"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"), BooleanClause.Occur.MUST));
+    tstFilterCard("Shoulds Ored but MUST", 3, booleanFilter);
+    
+    // same with a real DISI (no OpenBitSetIterator)
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "010", "020"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "020", "030"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("accessRights", "admin"), BooleanClause.Occur.MUST));
+    tstFilterCard("Shoulds Ored but MUST", 3, booleanFilter);
 	}
-	public void testShouldsAndMusts() throws Throwable
-	{
+
+  public void testShouldsAndMusts() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getRangeFilter("price","010", "020"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getRangeFilter("price","020", "030"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"),BooleanClause.Occur.MUST));
-    booleanFilter.add(new FilterClause(getRangeFilter("date","20040101", "20041231"),BooleanClause.Occur.MUST));
-    tstFilterCard("Shoulds Ored but MUSTs ANDED",1,booleanFilter);
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "010", "020"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "020", "030"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getRangeFilter("date", "20040101", "20041231"), BooleanClause.Occur.MUST));
+    tstFilterCard("Shoulds Ored but MUSTs ANDED", 1, booleanFilter);
 	}
-	public void testShouldsAndMustsAndMustNot() throws Throwable
-	{
+
+  public void testShouldsAndMustsAndMustNot() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getRangeFilter("price","030", "040"),BooleanClause.Occur.SHOULD));
-    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"),BooleanClause.Occur.MUST));
-    booleanFilter.add(new FilterClause(getRangeFilter("date","20050101", "20051231"),BooleanClause.Occur.MUST));
-    booleanFilter.add(new FilterClause(getTermsFilter("inStock","N"),BooleanClause.Occur.MUST_NOT));
-    tstFilterCard("Shoulds Ored but MUSTs ANDED and MustNot",0,booleanFilter);
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "030", "040"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getRangeFilter("date", "20050101", "20051231"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getTermsFilter("inStock", "N"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("Shoulds Ored but MUSTs ANDED and MustNot", 0, booleanFilter);
+    
+    // same with a real DISI (no OpenBitSetIterator)
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getRangeFilter("price", "030", "040"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("accessRights", "admin"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getRangeFilter("date", "20050101", "20051231"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("inStock", "N"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("Shoulds Ored but MUSTs ANDED and MustNot", 0, booleanFilter);
 	}
 	
-	public void testJustMust() throws Throwable
-	{
+  public void testJustMust() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"),BooleanClause.Occur.MUST));
-    tstFilterCard("MUST",3,booleanFilter);
+    booleanFilter.add(new FilterClause(getTermsFilter("accessRights", "admin"), BooleanClause.Occur.MUST));
+    tstFilterCard("MUST", 3, booleanFilter);
+    
+    // same with a real DISI (no OpenBitSetIterator)
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("accessRights", "admin"), BooleanClause.Occur.MUST));
+    tstFilterCard("MUST", 3, booleanFilter);
 	}
-	public void testJustMustNot() throws Throwable
-	{
+
+  public void testJustMustNot() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getTermsFilter("inStock","N"),BooleanClause.Occur.MUST_NOT));
-    tstFilterCard("MUST_NOT",4,booleanFilter);
+    booleanFilter.add(new FilterClause(getTermsFilter("inStock", "N"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("MUST_NOT", 4, booleanFilter);
+    
+    // same with a real DISI (no OpenBitSetIterator)
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("inStock", "N"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("MUST_NOT", 4, booleanFilter);
 	}
-	public void testMustAndMustNot() throws Throwable
-	{
+
+  public void testMustAndMustNot() throws Throwable {
+    BooleanFilter booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getTermsFilter("inStock", "N"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("MUST_NOT wins over MUST for same docs", 0, booleanFilter);
+    
+    // same with a real DISI (no OpenBitSetIterator)
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("inStock", "N"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getWrappedTermQuery("price", "030"), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("MUST_NOT wins over MUST for same docs", 0, booleanFilter);
+  }
+
+  public void testCombinedNullDocIdSets() throws Throwable {
+    BooleanFilter booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getNullDISFilter(), BooleanClause.Occur.MUST));
+    tstFilterCard("A MUST filter that returns a null DIS should never return documents", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getNullDISIFilter(), BooleanClause.Occur.MUST));
+    tstFilterCard("A MUST filter that returns a null DISI should never return documents", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getNullDISFilter(), BooleanClause.Occur.SHOULD));
+    tstFilterCard("A SHOULD filter that returns a null DIS should be invisible", 1, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.SHOULD));
+    booleanFilter.add(new FilterClause(getNullDISIFilter(), BooleanClause.Occur.SHOULD));
+    tstFilterCard("A SHOULD filter that returns a null DISI should be invisible", 1, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getNullDISFilter(), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("A MUST_NOT filter that returns a null DIS should be invisible", 1, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getTermsFilter("price", "030"), BooleanClause.Occur.MUST));
+    booleanFilter.add(new FilterClause(getNullDISIFilter(), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("A MUST_NOT filter that returns a null DISI should be invisible", 1, booleanFilter);
+  }
+
+  public void testJustNullDocIdSets() throws Throwable {
     BooleanFilter booleanFilter = new BooleanFilter();
-    booleanFilter.add(new FilterClause(getTermsFilter("inStock","N"),BooleanClause.Occur.MUST));
-    booleanFilter.add(new FilterClause(getTermsFilter("price","030"),BooleanClause.Occur.MUST_NOT));
-    tstFilterCard("MUST_NOT wins over MUST for same docs",0,booleanFilter);
+    booleanFilter.add(new FilterClause(getNullDISFilter(), BooleanClause.Occur.MUST));
+    tstFilterCard("A MUST filter that returns a null DIS should never return documents", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getNullDISIFilter(), BooleanClause.Occur.MUST));
+    tstFilterCard("A MUST filter that returns a null DISI should never return documents", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getNullDISFilter(), BooleanClause.Occur.SHOULD));
+    tstFilterCard("A single SHOULD filter that returns a null DIS should never return documents", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getNullDISIFilter(), BooleanClause.Occur.SHOULD));
+    tstFilterCard("A single SHOULD filter that returns a null DISI should never return documents", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getNullDISFilter(), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("A single MUST_NOT filter that returns a null DIS should be invisible", 5, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(new FilterClause(getNullDISIFilter(), BooleanClause.Occur.MUST_NOT));
+    tstFilterCard("A single MUST_NOT filter that returns a null DIS should be invisible", 5, booleanFilter);
 	}
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FixedBitSet.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FixedBitSet.java
index 8d1521b9..bcd086fc 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FixedBitSet.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FixedBitSet.java
@@ -160,10 +160,8 @@ public int nextSetBit(int index) {
   public int prevSetBit(int index) {
     assert index >= 0 && index < numBits: "index=" + index + " numBits=" + numBits;
     int i = index >> 6;
-    final int subIndex;
-    long word;
-    subIndex = index & 0x3f;  // index within the word
-    word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index
+    final int subIndex = index & 0x3f;  // index within the word
+    long word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index
 
     if (word != 0) {
       return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197
@@ -182,21 +180,93 @@ public int prevSetBit(int index) {
   /** Does in-place OR of the bits provided by the
    *  iterator. */
   public void or(DocIdSetIterator iter) throws IOException {
+    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {
+      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;
+      or(obs.arr, obs.words);
+    } else {
     int doc;
-    while ((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
+      while ((doc = iter.nextDoc()) < numBits) {
       set(doc);
     }
   }
+  }
 
+  /** this = this OR other */
   public void or(FixedBitSet other) {
-    long[] thisArr = this.bits;
-    long[] otherArr = other.bits;
-    int pos = Math.min(thisArr.length, otherArr.length);
+    or(other.bits, other.bits.length);
+  }
+  
+  private void or(final long[] otherArr, final int otherLen) {
+    final long[] thisArr = this.bits;
+    int pos = Math.min(thisArr.length, otherLen);
     while (--pos >= 0) {
       thisArr[pos] |= otherArr[pos];
     }
   }
 
+  /** Does in-place AND of the bits provided by the
+   *  iterator. */
+  public void and(DocIdSetIterator iter) throws IOException {
+    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {
+      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;
+      and(obs.arr, obs.words);
+    } else {
+      if (numBits == 0) return;
+      int disiDoc, bitSetDoc = nextSetBit(0);
+      while (bitSetDoc != -1 && (disiDoc = iter.advance(bitSetDoc)) < numBits) {
+        clear(bitSetDoc, disiDoc);
+        disiDoc++;
+        bitSetDoc = (disiDoc < numBits) ? nextSetBit(disiDoc) : -1;
+      }
+      if (bitSetDoc != -1) {
+        clear(bitSetDoc, numBits);
+      }
+    }
+  }
+
+  /** this = this AND other */
+  public void and(FixedBitSet other) {
+    and(other.bits, other.bits.length);
+  }
+  
+  private void and(final long[] otherArr, final int otherLen) {
+    final long[] thisArr = this.bits;
+    int pos = Math.min(thisArr.length, otherLen);
+    while(--pos >= 0) {
+      thisArr[pos] &= otherArr[pos];
+    }
+    if (thisArr.length > otherLen) {
+      Arrays.fill(thisArr, otherLen, thisArr.length, 0L);
+    }
+  }
+
+  /** Does in-place AND NOT of the bits provided by the
+   *  iterator. */
+  public void andNot(DocIdSetIterator iter) throws IOException {
+    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {
+      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;
+      andNot(obs.arr, obs.words);
+    } else {
+      int doc;
+      while ((doc = iter.nextDoc()) < numBits) {
+        clear(doc);
+      }
+    }
+  }
+
+  /** this = this AND NOT other */
+  public void andNot(FixedBitSet other) {
+    andNot(other.bits, other.bits.length);
+  }
+  
+  private void andNot(final long[] otherArr, final int otherLen) {
+    final long[] thisArr = this.bits;
+    int pos = Math.min(thisArr.length, otherLen);
+    while(--pos >= 0) {
+      thisArr[pos] &= ~otherArr[pos];
+    }
+  }
+
   // NOTE: no .isEmpty() here because that's trappy (ie,
   // typically isEmpty is low cost, but this one wouldn't
   // be)
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/OpenBitSetIterator.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/OpenBitSetIterator.java
index bfa3f52b..fc304654 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/OpenBitSetIterator.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/OpenBitSetIterator.java
@@ -79,8 +79,8 @@ def int_table():
   // for efficiency, or have a common root interface?  (or
   // maybe both?  could ask for a SetBitsIterator, etc...
 
-  private final long[] arr;
-  private final int words;
+  final long[] arr;
+  final int words;
   private int i=-1;
   private long word;
   private int wordShift;
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestFixedBitSet.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestFixedBitSet.java
index b4e575ed..33626946 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestFixedBitSet.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestFixedBitSet.java
@@ -164,16 +164,24 @@ void doRandomSets(int maxSize, int iter, int mode) throws IOException {
       if (b0 != null && b0.length() <= b.length()) {
         assertEquals(a.cardinality(), b.cardinality());
 
-        BitSet a_or = (BitSet) a.clone();
-        a_or.or(a0);
+        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);
+        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);
+        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);
 
-        FixedBitSet b_or = (FixedBitSet) b.clone();
-        b_or.or(b0);
+        FixedBitSet b_and = (FixedBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);
+        FixedBitSet b_or = (FixedBitSet)b.clone(); b_or.or(b0);
+        FixedBitSet b_andn = (FixedBitSet)b.clone(); b_andn.andNot(b0);
 
         assertEquals(a0.cardinality(), b0.cardinality());
         assertEquals(a_or.cardinality(), b_or.cardinality());
 
-        doIterate(a_or, b_or, mode);
+        doIterate(a_and,b_and, mode);
+        doIterate(a_or,b_or, mode);
+        doIterate(a_andn,b_andn, mode);
+
+        assertEquals(a_and.cardinality(), b_and.cardinality());
+        assertEquals(a_or.cardinality(), b_or.cardinality());
+        assertEquals(a_andn.cardinality(), b_andn.cardinality());
       }
 
       a0=a;
