diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
index bb62ffd2..1569d2aa 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
@@ -84,6 +84,27 @@ public boolean contains(Resource resource) {
 							ResourceHelper.getTypeAttribute(resource));
 		}
 		
+		@Override
+		public boolean equals(Object o) {
+			if (o == this)
+				return true;
+			if (!(o instanceof Clause))
+				return false;
+			Clause that = (Clause)o;
+			return getSymbolicName().equals(that.getSymbolicName())
+					&& getDeployedVersion().equals(that.getDeployedVersion())
+					&& getType().equals(that.getType());
+		}
+		
+		@Override
+		public int hashCode() {
+			int result = 17;
+			result = 31 * result + getSymbolicName().hashCode();
+			result = 31 * result + getDeployedVersion().hashCode();
+			result = 31 * result + getType().hashCode();
+			return result;
+		}
+		
 		@Override
 		public Attribute getAttribute(String name) {
 			Parameter result = parameters.get(name);
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java
index e08f7124..b2876fd7 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java
@@ -358,6 +358,20 @@ synchronized SubsystemResource getResource() {
 			catch (Exception e) {
 				throw new SubsystemException(e);
 			}
+			Collection<DeployedContentHeader.Clause> missingResources = resource.getMissingResources();
+			if (!missingResources.isEmpty()) {
+				if (isRoot())
+					// We don't care if the root subsystem has missing resources
+					// because they are either (1) extraneous bundles outside of
+					// the subsystems API or (2) provisioned dependencies of
+					// other subsystems. Those that fall in the latter category
+					// will be detected by the dependent subsystems.
+					removedContent(missingResources);
+				else
+					// If a non-root subsystem has missing dependencies, let's
+					// fail fast for now.
+					throw new SubsystemException("Missing resources: " + missingResources);
+			}
 		}
 		return resource;
 	}
@@ -427,9 +441,17 @@ void removedContent(Resource resource) {
 		DeployedContentHeader.Clause clause = header.getClause(resource);
 		if (clause == null)
 			return;
+		removedContent(Collections.singleton(clause));
+	}
+	
+	void removedContent(Collection<DeployedContentHeader.Clause> content) {
+		DeploymentManifest manifest = getDeploymentManifest();
+		DeployedContentHeader header = manifest.getDeployedContentHeader();
+		if (header == null)
+			return;
 		Collection<DeployedContentHeader.Clause> clauses = new ArrayList<DeployedContentHeader.Clause>(header.getClauses());
 		for (Iterator<DeployedContentHeader.Clause> i = clauses.iterator(); i.hasNext();)
-			if (clause.equals(i.next())) {
+			if (content.contains(i.next())) {
 				i.remove();
 				break;
 			}
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
index f78cec26..9f9f39ca 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
@@ -46,6 +46,7 @@
 import org.eclipse.equinox.region.RegionDigraph;
 import org.eclipse.equinox.region.RegionFilter;
 import org.eclipse.equinox.region.RegionFilterBuilder;
+import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.BundleException;
 import org.osgi.framework.InvalidSyntaxException;
@@ -76,6 +77,7 @@
 	private final Collection<Resource> installableContent = new HashSet<Resource>();
 	private final Collection<Resource> installableDependencies = new HashSet<Resource>();
 	private final Collection<Resource> mandatoryResources = new HashSet<Resource>();
+	private final Collection<DeployedContentHeader.Clause> missingResources = new HashSet<DeployedContentHeader.Clause>();
 	private final Collection<Resource> optionalResources = new HashSet<Resource>();
 	private final AriesSubsystem parent;
 	private final Repository preferredProviderRepository;
@@ -159,6 +161,10 @@ public String getLocation() {
 		return resource.getLocation().getValue();
 	}
 	
+	public Collection<DeployedContentHeader.Clause> getMissingResources() {
+		return missingResources;
+	}
+	
 	public Collection<AriesSubsystem> getParents() {
 		if (parent == null) {
 			Header<?> header = getDeploymentManifest().getHeaders().get(DeploymentManifest.ARIESSUBSYSTEM_PARENTS);
@@ -290,6 +296,10 @@ private void addDependency(Resource resource) {
 			sharedDependencies.add(resource);
 	}
 	
+	private void addMissingResource(DeployedContentHeader.Clause resource) {
+		missingResources.add(resource);
+	}
+	
 	private void addValidCapabilities(Collection<Capability> from, Collection<Capability> to) throws BundleException, IOException, InvalidSyntaxException, URISyntaxException {
 		for (Capability c : from)
 			if (isValid(c))
@@ -332,7 +342,8 @@ private void computeContentResources(DeploymentManifest manifest) throws BundleE
 			for (DeployedContentHeader.Clause clause : header.getClauses()) {
 				Resource resource = findContent(clause);
 				if (resource == null)
-					throw new SubsystemException("Resource does not exist: " + clause);
+					addMissingResource(clause);
+				else
 				addContentResource(resource);
 			}
 		}
@@ -531,7 +542,10 @@ private Resource findContent(DeployedContentHeader.Clause clause) throws BundleE
 		if (resourceId != -1) {
 			String type = clause.getType();
 			if (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type)) {
-				return Activator.getInstance().getBundleContext().getBundle(0).getBundleContext().getBundle(resourceId).adapt(BundleRevision.class);
+				Bundle resource = Activator.getInstance().getBundleContext().getBundle(0).getBundleContext().getBundle(resourceId);
+				if (resource == null)
+					return null;
+				return resource.adapt(BundleRevision.class);
 			}
 			else
 				return Activator.getInstance().getSubsystems().getSubsystemById(resourceId);
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
index 561c515c..3ec4ca0c 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
@@ -14,6 +14,7 @@
 package org.apache.aries.subsystem.itests;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 import java.io.File;
 import java.io.IOException;
@@ -102,6 +103,34 @@ public void testSymbolicName() {
 		assertEquals("Wrong root symbolic name", getRootSubsystem().getSymbolicName(), "org.osgi.service.subsystem.root");
 	}
 	
+	@Test
+	public void testUninstallRootRegionBundleWithNoBundleEventHook() throws Exception {
+		// Install an extraneous bundle into the root region. The bundle will
+		// be recorded in the root subsystem's persistent memory.
+		Bundle bundleA = bundleContext.installBundle(new File(BUNDLE_A).toURI().toURL().toString());
+		try {
+			Bundle core = getSubsystemCoreBundle();
+			// Stop the subsystems bundle in order to unregister the bundle
+			// event hook.
+			core.stop();
+			// Uninstall the bundle so it won't be there on restart.
+			bundleA.uninstall();
+			try {
+				// Start the subsystems bundle and ensure the root subsystem
+				// recovers from the uninstalled bundle being in persistent
+				// memory.
+				core.start();
+			}
+			catch (BundleException e) {
+				fail("Could not start subsystems bundle after uninstalling a root region bundle with no bundle event hook registered");
+			}
+		}
+		finally {
+			if (Bundle.UNINSTALLED != bundleA.getState())
+				bundleA.uninstall();
+		}
+	}
+	
 	@Test
 	public void testVersion() {
 		assertEquals("Wrong root version", getRootSubsystem().getVersion(), Version.parseVersion("1.0.0"));
