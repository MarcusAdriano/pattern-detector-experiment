diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
index f99d0d25..df8b761c 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
@@ -35,6 +35,9 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Fieldable;
+import org.apache.lucene.index.FieldInfo.IndexOptions;
+import static org.apache.lucene.index.FieldInfo.IndexOptions.DOCS_ONLY;
+import static org.apache.lucene.index.FieldInfo.IndexOptions.DOCS_AND_FREQS;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermEnum;
@@ -161,15 +164,26 @@ else if ( "schema".equals( params.get( "show" ) ) ) {
    */
   private static String getFieldFlags( Fieldable f )
   {
+    IndexOptions opts = (f == null) ? null : f.getIndexOptions();
+
     StringBuilder flags = new StringBuilder();
+
     flags.append( (f != null && f.isIndexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );
     flags.append( (f != null && f.isTokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );
     flags.append( (f != null && f.isStored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );
     flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific
+
     flags.append( (f != null && f.isTermVectorStored())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );
     flags.append( (f != null && f.isStoreOffsetWithTermVector())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );
     flags.append( (f != null && f.isStorePositionWithTermVector()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );
     flags.append( (f != null && f.getOmitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );
+
+    flags.append( (f != null && DOCS_ONLY == opts ) ? 
+                  FieldFlag.OMIT_TF.getAbbreviation() : '-' );
+    
+    flags.append( (f != null && DOCS_AND_FREQS == opts ) ?
+                  FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-' );
+
     flags.append( (f != null && f.isLazy())                        ? FieldFlag.LAZY.getAbbreviation() : '-' );
     flags.append( (f != null && f.isBinary())                      ? FieldFlag.BINARY.getAbbreviation() : '-' );
     flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific
@@ -210,21 +224,11 @@ private static String getFieldFlags( SchemaField f )
   /**
    * @return a key to what each character means
    */
-  public static SimpleOrderedMap<String> getFieldFlagsKey()
-  {
+  public static SimpleOrderedMap<String> getFieldFlagsKey() {
     SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();
-    key.add(String.valueOf(FieldFlag.INDEXED.getAbbreviation()), FieldFlag.INDEXED.getDisplay() );
-    key.add(String.valueOf(FieldFlag.TOKENIZED.getAbbreviation()), FieldFlag.TOKENIZED.getDisplay() );
-    key.add( String.valueOf(FieldFlag.STORED.getAbbreviation()), FieldFlag.STORED.getDisplay() );
-    key.add( String.valueOf(FieldFlag.MULTI_VALUED.getAbbreviation()), FieldFlag.MULTI_VALUED.getDisplay() );
-    key.add( String.valueOf(FieldFlag.TERM_VECTOR_STORED.getAbbreviation()), FieldFlag.TERM_VECTOR_STORED.getDisplay() );
-    key.add( String.valueOf(FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation()), FieldFlag.TERM_VECTOR_OFFSET.getDisplay() );
-    key.add( String.valueOf(FieldFlag.TERM_VECTOR_POSITION.getAbbreviation()), FieldFlag.TERM_VECTOR_POSITION.getDisplay() );
-    key.add( String.valueOf(FieldFlag.OMIT_NORMS.getAbbreviation()), FieldFlag.OMIT_NORMS.getDisplay() );
-    key.add( String.valueOf(FieldFlag.LAZY.getAbbreviation()), FieldFlag.LAZY.getDisplay() );
-    key.add( String.valueOf(FieldFlag.BINARY.getAbbreviation()), FieldFlag.BINARY.getDisplay() );
-    key.add( String.valueOf(FieldFlag.SORT_MISSING_FIRST.getAbbreviation()), FieldFlag.SORT_MISSING_FIRST.getDisplay() );
-    key.add( String.valueOf(FieldFlag.SORT_MISSING_LAST.getAbbreviation()), FieldFlag.SORT_MISSING_LAST.getDisplay() );
+    for (FieldFlag f : FieldFlag.values()) {
+      key.add(String.valueOf(f.getAbbreviation()), f.getDisplay() );
+    }
     return key;
   }
   
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
index 39668cec..23487717 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
@@ -17,8 +17,12 @@
 
 package org.apache.solr.handler.admin;
 
+import org.apache.solr.common.luke.FieldFlag;
 import org.apache.solr.util.AbstractSolrTestCase;
 
+import java.util.EnumSet;
+import java.util.Arrays;
+
 /**
  * :TODO: currently only tests some of the utilities in the LukeRequestHandler
  */
@@ -93,7 +97,40 @@ public void testLuke() {
 
     // test that Luke can handle all of the field types
     assertQ(req("qt","/admin/luke", "id","SOLR1000"));
+
+    final int numFlags = EnumSet.allOf(FieldFlag.class).size();
+    
+    assertQ("Not all flags ("+numFlags+") mentioned in info->key",
+            req("qt","/admin/luke"),
+            numFlags+"=count(//lst[@name='info']/lst[@name='key']/str)");
+
+    // code should be the same for all fields, but just in case do several
+    for (String f : Arrays.asList("solr_t","solr_s","solr_ti",
+                                  "solr_td","solr_pl","solr_dt","solr_b",
+                                  "solr_sS","solr_sI")) {
+
+      final String xp = getFieldXPathPrefix(f);
+      assertQ("Not as many schema flags as expected ("+numFlags+") for " + f,
+              req("qt","/admin/luke", "fl", f),
+              numFlags+"=string-length("+xp+"[@name='schema'])");
+
   }
 
+    // diff loop for checking 'index' flags, 
+    // only valid for fields that are indexed & stored
+    for (String f : Arrays.asList("solr_t","solr_s","solr_ti",
+                                  "solr_td","solr_pl","solr_dt","solr_b")) {
+
+      final String xp = getFieldXPathPrefix(f);
+      assertQ("Not as many index flags as expected ("+numFlags+") for " + f,
+              req("qt","/admin/luke", "fl", f),
+              numFlags+"=string-length("+xp+"[@name='index'])");
+    }
+
+  }
+
+  private static String getFieldXPathPrefix(String field) {
+    return "//lst[@name='fields']/lst[@name='"+field+"']/str";
+  }
 
 }
diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/common/luke/FieldFlag.java b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/common/luke/FieldFlag.java
index 5a644825..1ac485df 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/common/luke/FieldFlag.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/common/luke/FieldFlag.java
@@ -30,7 +30,7 @@
   TERM_VECTOR_OFFSET('o', "Store Offset With TermVector"),
   TERM_VECTOR_POSITION('p', "Store Position With TermVector"),
   OMIT_NORMS('O', "Omit Norms"), 
-  OMIT_TF('F', "Omit Tf"), 
+  OMIT_TF('F', "Omit Term Frequencies & Positions"), 
   OMIT_POSITIONS('P', "Omit Positions"),
   LAZY('L', "Lazy"), 
   BINARY('B', "Binary"), 
