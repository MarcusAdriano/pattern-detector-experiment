diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java
index ecdef925..65a336ea 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java
@@ -61,8 +61,7 @@
 
   private static final Logger log = LoggerFactory.getLogger(RepresentativePointsDriver.class);
 
-  private RepresentativePointsDriver() {
-  }
+  private RepresentativePointsDriver() {}
 
   public static void main(String[] args) throws Exception {
     ToolRunner.run(new Configuration(), new RepresentativePointsDriver(), args);
@@ -92,14 +91,32 @@ public int run(String[] args) throws ClassNotFoundException, IOException, Interr
     return 0;
   }
 
-  public static void run(Configuration conf,
-                         Path clustersIn,
-                         Path clusteredPointsIn,
-                         Path output,
-                         DistanceMeasure measure,
-                         int numIterations,
-                         boolean runSequential)
-    throws IOException, InterruptedException, ClassNotFoundException {
+  /**
+   * Utility to print out representative points
+   * 
+   * @param output
+   *          the Path to the directory containing representativePoints-i folders
+   * @param numIterations
+   *          the int number of iterations to print
+   * @throws IOException
+   *           if errors occur
+   */
+  public static void printRepresentativePoints(Path output, int numIterations) throws IOException {
+    for (int i = 0; i <= numIterations; i++) {
+      Path out = new Path(output, "representativePoints-" + i);
+      System.out.println("Representative Points for iteration " + i);
+      Configuration conf = new Configuration();
+      for (Pair<IntWritable,VectorWritable> record : new SequenceFileDirIterable<IntWritable,VectorWritable>(out,
+          PathType.LIST, PathFilters.logsCRCFilter(), null, true, conf)) {
+        System.out.println("\tC-" + record.getFirst().get() + ": "
+            + AbstractCluster.formatVector(record.getSecond().get(), null));
+      }
+    }
+  }
+  
+  public static void run(Configuration conf, Path clustersIn, Path clusteredPointsIn, Path output,
+      DistanceMeasure measure, int numIterations, boolean runSequential) throws IOException, InterruptedException,
+      ClassNotFoundException {
     Path stateIn = new Path(output, "representativePoints-0");
     writeInitialState(stateIn, clustersIn);
 
@@ -137,13 +154,8 @@ private static void writeInitialState(Path output, Path clustersIn) throws IOExc
     }
   }
 
-  private static void runIteration(Configuration conf,
-                                   Path clusteredPointsIn,
-                                   Path stateIn,
-                                   Path stateOut,
-                                   DistanceMeasure measure,
-                                   boolean runSequential)
-    throws IOException, InterruptedException, ClassNotFoundException {
+  private static void runIteration(Configuration conf, Path clusteredPointsIn, Path stateIn, Path stateOut,
+      DistanceMeasure measure, boolean runSequential) throws IOException, InterruptedException, ClassNotFoundException {
     if (runSequential) {
       runIterationSeq(conf, clusteredPointsIn, stateIn, stateOut, measure);
     } else {
@@ -153,6 +165,7 @@ private static void runIteration(Configuration conf,
 
   /**
    * Run the job using supplied arguments as a sequential process
+   * 
    * @param conf 
    *          the Configuration to use
    * @param clusteredPointsIn
@@ -164,29 +177,21 @@ private static void runIteration(Configuration conf,
    * @param measure
    *          the DistanceMeasure to use
    */
-  private static void runIterationSeq(Configuration conf,
-                                      Path clusteredPointsIn,
-                                      Path stateIn,
-                                      Path stateOut,
+  private static void runIterationSeq(Configuration conf, Path clusteredPointsIn, Path stateIn, Path stateOut,
                                       DistanceMeasure measure) throws IOException {
 
-    Map<Integer, List<VectorWritable>> repPoints = RepresentativePointsMapper.getRepresentativePoints(conf, stateIn);
-    Map<Integer, WeightedVectorWritable> mostDistantPoints = Maps.newHashMap();
+    Map<Integer,List<VectorWritable>> repPoints = RepresentativePointsMapper.getRepresentativePoints(conf, stateIn);
+    Map<Integer,WeightedVectorWritable> mostDistantPoints = Maps.newHashMap();
     FileSystem fs = FileSystem.get(clusteredPointsIn.toUri(), conf);
-    for (Pair<IntWritable,WeightedVectorWritable> record :
-         new SequenceFileDirIterable<IntWritable,WeightedVectorWritable>(
+    for (Pair<IntWritable,WeightedVectorWritable> record : new SequenceFileDirIterable<IntWritable,WeightedVectorWritable>(
              clusteredPointsIn, PathType.LIST, PathFilters.logsCRCFilter(), null, true, conf)) {
-      RepresentativePointsMapper.mapPoint(
-          record.getFirst(), record.getSecond(), measure, repPoints, mostDistantPoints);
+      RepresentativePointsMapper.mapPoint(record.getFirst(), record.getSecond(), measure, repPoints, mostDistantPoints);
     }
     int part = 0;
-    SequenceFile.Writer writer = new SequenceFile.Writer(fs,
-                                                         conf,
-                                                         new Path(stateOut, "part-m-" + part++),
-                                                         IntWritable.class,
-                                                         VectorWritable.class);
+    SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, new Path(stateOut, "part-m-" + part++),
+        IntWritable.class, VectorWritable.class);
     try {
-      for (Entry<Integer, List<VectorWritable>> entry : repPoints.entrySet()) {
+      for (Entry<Integer,List<VectorWritable>> entry : repPoints.entrySet()) {
         for (VectorWritable vw : entry.getValue()) {
           writer.append(new IntWritable(entry.getKey()), vw);
         }
@@ -194,10 +199,10 @@ private static void runIterationSeq(Configuration conf,
     } finally {
       Closeables.closeQuietly(writer);
     }
-    writer = new SequenceFile.Writer(fs, conf,
-        new Path(stateOut, "part-m-" + part++), IntWritable.class, VectorWritable.class);
+    writer = new SequenceFile.Writer(fs, conf, new Path(stateOut, "part-m-" + part++), IntWritable.class,
+        VectorWritable.class);
     try {
-      for (Map.Entry<Integer, WeightedVectorWritable> entry : mostDistantPoints.entrySet()) {
+      for (Map.Entry<Integer,WeightedVectorWritable> entry : mostDistantPoints.entrySet()) {
         writer.append(new IntWritable(entry.getKey()), new VectorWritable(entry.getValue().getVector()));
       }
     } finally {
@@ -207,6 +212,7 @@ private static void runIterationSeq(Configuration conf,
 
   /**
    * Run the job using supplied arguments as a Map/Reduce process
+   * 
    * @param conf 
    *          the Configuration to use
    * @param input
@@ -218,12 +224,8 @@ private static void runIterationSeq(Configuration conf,
    * @param measure
    *          the DistanceMeasure to use
    */
-  private static void runIterationMR(Configuration conf,
-                                     Path input,
-                                     Path stateIn,
-                                     Path stateOut,
-                                     DistanceMeasure measure)
-    throws IOException, InterruptedException, ClassNotFoundException {
+  private static void runIterationMR(Configuration conf, Path input, Path stateIn, Path stateOut,
+      DistanceMeasure measure) throws IOException, InterruptedException, ClassNotFoundException {
     conf.set(STATE_IN_KEY, stateIn.toString());
     conf.set(DISTANCE_MEASURE_KEY, measure.getClass().getName());
     Job job = new Job(conf, "Representative Points Driver running over input: " + input);
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterEvaluator.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterEvaluator.java
index a915ee18..b33ab949 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterEvaluator.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterEvaluator.java
@@ -21,12 +21,9 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.io.IntWritable;
 import org.apache.mahout.clustering.canopy.Canopy;
 import org.apache.mahout.clustering.canopy.CanopyDriver;
 import org.apache.mahout.clustering.dirichlet.DirichletDriver;
@@ -41,12 +38,8 @@
 import org.apache.mahout.clustering.meanshift.MeanShiftCanopyDriver;
 import org.apache.mahout.common.HadoopUtil;
 import org.apache.mahout.common.MahoutTestCase;
-import org.apache.mahout.common.Pair;
 import org.apache.mahout.common.distance.DistanceMeasure;
 import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
-import org.apache.mahout.common.iterator.sequencefile.PathFilters;
-import org.apache.mahout.common.iterator.sequencefile.PathType;
-import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
 import org.apache.mahout.common.kernel.IKernelProfile;
 import org.apache.mahout.common.kernel.TriangularKernelProfile;
 import org.apache.mahout.math.DenseVector;
@@ -56,6 +49,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
 public final class TestClusterEvaluator extends MahoutTestCase {
   
   private static final double[][] REFERENCE = { {1, 1}, {2, 1}, {1, 2}, {2, 2}, {3, 3}, {4, 4}, {5, 4}, {4, 5}, {5, 5}};
@@ -119,20 +115,7 @@ private void generateSamples() {
   }
   
   private void printRepPoints(int numIterations) throws IOException {
-    printRepPoints(output, numIterations);
-  }
-  
-  private void printRepPoints(Path output, int numIterations) throws IOException {
-    for (int i = 0; i <= numIterations; i++) {
-      Path out = new Path(output, "representativePoints-" + i);
-      System.out.println("Representative Points for iteration " + i);
-      Configuration conf = new Configuration();
-      for (Pair<IntWritable,VectorWritable> record : new SequenceFileDirIterable<IntWritable,VectorWritable>(out,
-          PathType.LIST, PathFilters.logsCRCFilter(), null, true, conf)) {
-        System.out.println("\tC-" + record.getFirst().get() + ": "
-            + AbstractCluster.formatVector(record.getSecond().get(), null));
-      }
-    }
+    RepresentativePointsDriver.printRepresentativePoints(output, numIterations);
   }
   
   /**
@@ -301,7 +284,7 @@ public void testKmeans() throws Exception {
     Path clustersIn = new Path(kmeansOutput, "clusters-2");
     RepresentativePointsDriver.run(conf, clustersIn, new Path(kmeansOutput, "clusteredPoints"), kmeansOutput, measure,
         numIterations, true);
-    printRepPoints(kmeansOutput, numIterations);
+    RepresentativePointsDriver.printRepresentativePoints(kmeansOutput, numIterations);
     ClusterEvaluator evaluator = new ClusterEvaluator(conf, clustersIn);
     // now print out the Results
     System.out.println("Intra-cluster density = " + evaluator.intraClusterDensity());
@@ -323,7 +306,7 @@ public void testFuzzyKmeans() throws Exception {
     Path clustersIn = new Path(fuzzyKMeansOutput, "clusters-4");
     RepresentativePointsDriver.run(conf, clustersIn, new Path(fuzzyKMeansOutput, "clusteredPoints"), fuzzyKMeansOutput,
         measure, numIterations, true);
-    printRepPoints(fuzzyKMeansOutput, numIterations);
+    RepresentativePointsDriver.printRepresentativePoints(fuzzyKMeansOutput, numIterations);
     ClusterEvaluator evaluator = new ClusterEvaluator(conf, clustersIn);
     // now print out the Results
     System.out.println("Intra-cluster density = " + evaluator.intraClusterDensity());
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
index 8b04d721..a1998b27 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
@@ -22,13 +22,9 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.io.IntWritable;
-import org.apache.mahout.clustering.AbstractCluster;
 import org.apache.mahout.clustering.Cluster;
 import org.apache.mahout.clustering.ClusteringTestUtils;
 import org.apache.mahout.clustering.TestClusterEvaluator;
@@ -44,12 +40,8 @@
 import org.apache.mahout.clustering.kmeans.TestKmeansClustering;
 import org.apache.mahout.clustering.meanshift.MeanShiftCanopyDriver;
 import org.apache.mahout.common.MahoutTestCase;
-import org.apache.mahout.common.Pair;
 import org.apache.mahout.common.distance.DistanceMeasure;
 import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
-import org.apache.mahout.common.iterator.sequencefile.PathFilters;
-import org.apache.mahout.common.iterator.sequencefile.PathType;
-import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
 import org.apache.mahout.common.kernel.IKernelProfile;
 import org.apache.mahout.common.kernel.TriangularKernelProfile;
 import org.apache.mahout.math.DenseVector;
@@ -60,6 +52,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
 public final class TestCDbwEvaluator extends MahoutTestCase {
   
   private static final double[][] REFERENCE = { {1, 1}, {2, 1}, {1, 2}, {2, 2}, {3, 3}, {4, 4}, {5, 4}, {4, 5}, {5, 5}};
@@ -151,19 +146,6 @@ private void generateSamples() {
     generateSamples(300, 0, 2, 0.1);
   }
   
-  private void printRepPoints(Path output, int numIterations) throws IOException {
-    for (int i = 0; i <= numIterations; i++) {
-      Path out = new Path(output, "representativePoints-" + i);
-      System.out.println("Representative Points for iteration " + i);
-      Configuration conf = new Configuration();
-      for (Pair<IntWritable,VectorWritable> record : new SequenceFileDirIterable<IntWritable,VectorWritable>(out,
-          PathType.LIST, PathFilters.logsCRCFilter(), null, true, conf)) {
-        System.out.println("\tC-" + record.getFirst().get() + ": "
-            + AbstractCluster.formatVector(record.getSecond().get(), null));
-      }
-    }
-  }
-  
   @Test
   public void testCDbw0() throws IOException {
     ClusteringTestUtils.writePointsToFile(referenceData, getTestTempFilePath("testdata/file1"), fs, conf);
@@ -318,7 +300,7 @@ public void testKmeans() throws Exception {
     RepresentativePointsDriver.run(conf, clustersIn, new Path(kmeansOutput, "clusteredPoints"), kmeansOutput, measure,
         numIterations, true);
     CDbwEvaluator evaluator = new CDbwEvaluator(conf, clustersIn);
-    printRepPoints(kmeansOutput, numIterations);
+    RepresentativePointsDriver.printRepresentativePoints(kmeansOutput, numIterations);
     // now print out the Results
     System.out.println("K-Means CDbw = " + evaluator.getCDbw());
     System.out.println("Intra-cluster density = " + evaluator.intraClusterDensity());
@@ -338,10 +320,10 @@ public void testFuzzyKmeans() throws Exception {
         true, true, 0, true);
     int numIterations = 10;
     Path clustersIn = new Path(fuzzyKMeansOutput, "clusters-4");
-    RepresentativePointsDriver.run(conf, clustersIn, new Path(fuzzyKMeansOutput, "clusteredPoints"), fuzzyKMeansOutput, measure,
-        numIterations, true);
+    RepresentativePointsDriver.run(conf, clustersIn, new Path(fuzzyKMeansOutput, "clusteredPoints"), fuzzyKMeansOutput,
+        measure, numIterations, true);
     CDbwEvaluator evaluator = new CDbwEvaluator(conf, clustersIn);
-    printRepPoints(fuzzyKMeansOutput, numIterations);
+    RepresentativePointsDriver.printRepresentativePoints(fuzzyKMeansOutput, numIterations);
     // now print out the Results
     System.out.println("Fuzzy K-Means CDbw = " + evaluator.getCDbw());
     System.out.println("Intra-cluster density = " + evaluator.intraClusterDensity());
@@ -379,7 +361,7 @@ public void testDirichlet() throws Exception {
     RepresentativePointsDriver.run(conf, clustersIn, new Path(output, "clusteredPoints"), output,
         new EuclideanDistanceMeasure(), numIterations, true);
     CDbwEvaluator evaluator = new CDbwEvaluator(conf, clustersIn);
-    printRepPoints(output, numIterations);
+    RepresentativePointsDriver.printRepresentativePoints(output, numIterations);
     // now print out the Results
     System.out.println("Dirichlet CDbw = " + evaluator.getCDbw());
     System.out.println("Intra-cluster density = " + evaluator.intraClusterDensity());
