diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/TermVectorComponent.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/TermVectorComponent.java
index d30d28da..5f164a54 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/TermVectorComponent.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/TermVectorComponent.java
@@ -89,7 +89,7 @@ public void process(ResponseBuilder rb) throws IOException {
       return;
     }
 
-    NamedList termVectors = new NamedList();
+    NamedList<Object> termVectors = new NamedList<Object>();
     rb.rsp.add(TERM_VECTORS, termVectors);
     FieldOptions allFields = new FieldOptions();
     //figure out what options we have, and try to get the appropriate vector
@@ -118,7 +118,7 @@ public void process(ResponseBuilder rb) throws IOException {
     IndexSchema schema = rb.req.getSchema();
     //Build up our per field mapping
     Map<String, FieldOptions> fieldOptions = new HashMap<String, FieldOptions>();
-    NamedList warnings = new NamedList();
+    NamedList<List<String>>  warnings = new NamedList<List<String>> ();
     List<String>  noTV = new ArrayList<String>();
     List<String>  noPos = new ArrayList<String>();
     List<String>  noOff = new ArrayList<String>();
@@ -142,11 +142,11 @@ public void process(ResponseBuilder rb) throws IOException {
             option.tfIdf = params.getFieldBool(field, TermVectorParams.TF_IDF, allFields.tfIdf);
             //Validate these are even an option
             option.positions = params.getFieldBool(field, TermVectorParams.POSITIONS, allFields.positions);
-            if (option.positions == true && sf.storeTermPositions() == false){
+            if (option.positions && !sf.storeTermPositions()){
               noPos.add(field);
             }
             option.offsets = params.getFieldBool(field, TermVectorParams.OFFSETS, allFields.offsets);
-            if (option.offsets == true && sf.storeTermOffsets() == false){
+            if (option.offsets && !sf.storeTermOffsets()){
               noOff.add(field);
             }
           } else {//field doesn't have term vectors
@@ -159,26 +159,26 @@ public void process(ResponseBuilder rb) throws IOException {
       }
     } //else, deal with all fields
     boolean hasWarnings = false;
-    if (noTV.isEmpty() == false) {
+    if (!noTV.isEmpty()) {
       warnings.add("noTermVectors", noTV);
       hasWarnings = true;
     }
-    if (noPos.isEmpty() == false) {
+    if (!noPos.isEmpty()) {
       warnings.add("noPositions", noPos);
       hasWarnings = true;
     }
-    if (noOff.isEmpty() == false) {
+    if (!noOff.isEmpty()) {
       warnings.add("noOffsets", noOff);
       hasWarnings = true;
     }
-    if (hasWarnings == true) {
+    if (hasWarnings) {
       termVectors.add("warnings", warnings);
     }
 
     DocListAndSet listAndSet = rb.getResults();
     List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));
     Iterator<Integer> iter;
-    if (docIds != null && docIds.isEmpty() == false) {
+    if (docIds != null && !docIds.isEmpty()) {
       iter = docIds.iterator();
     } else {
       DocList list = listAndSet.docList;
@@ -199,7 +199,7 @@ public void process(ResponseBuilder rb) throws IOException {
     mapper.fieldOptions = allFields; //this will only stay set if fieldOptions.isEmpty() (in other words, only if the user didn't set any fields)
     while (iter.hasNext()) {
       Integer docId = iter.next();
-      NamedList docNL = new NamedList();
+      NamedList<Object> docNL = new NamedList<Object>();
       mapper.docNL = docNL;
       termVectors.add("doc-" + docId, docNL);
 
@@ -215,7 +215,7 @@ public void process(ResponseBuilder rb) throws IOException {
           termVectors.add("uniqueKeyFieldName", uniqFieldName);
         }
       }
-      if (fieldOptions.isEmpty() == false) {
+      if (!fieldOptions.isEmpty()) {
         for (Map.Entry<String, FieldOptions> entry : fieldOptions.entrySet()) {
           mapper.fieldOptions = entry.getValue();
           reader.getTermFreqVector(docId, entry.getKey(), mapper);
@@ -284,7 +284,7 @@ public int distributedProcess(ResponseBuilder rb) throws IOException {
 
   private static class TVMapper extends TermVectorMapper {
     private IndexReader reader;
-    private NamedList docNL;
+    private NamedList<Object> docNL;
 
     //needs to be set for each new field
     FieldOptions fieldOptions;
@@ -292,7 +292,7 @@ public int distributedProcess(ResponseBuilder rb) throws IOException {
     //internal vars not passed in by construction
     private boolean useOffsets, usePositions;
     //private Map<String, Integer> idfCache;
-    private NamedList fieldNL;
+    private NamedList<Object> fieldNL;
     private Term currentTerm;
 
 
@@ -302,13 +302,13 @@ public TVMapper(IndexReader reader) {
 
     @Override
     public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
-      NamedList termInfo = new NamedList();
+      NamedList<Object> termInfo = new NamedList<Object>();
         fieldNL.add(term, termInfo);
-        if (fieldOptions.termFreq == true) {
+        if (fieldOptions.termFreq) {
           termInfo.add("tf", frequency);
         }
-        if (useOffsets == true) {
-          NamedList theOffsets = new NamedList();
+        if (useOffsets) {
+          NamedList<Integer> theOffsets = new NamedList<Integer>();
           termInfo.add("offsets", theOffsets);
           for (int i = 0; i < offsets.length; i++) {
             TermVectorOffsetInfo offset = offsets[i];
@@ -316,17 +316,17 @@ public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[
             theOffsets.add("end", offset.getEndOffset());
           }
         }
-        if (usePositions == true) {
-          NamedList positionsNL = new NamedList();
+        if (usePositions) {
+          NamedList<Integer> positionsNL = new NamedList<Integer>();
           for (int i = 0; i < positions.length; i++) {
             positionsNL.add("position", positions[i]);
           }
           termInfo.add("positions", positionsNL);
         }
-        if (fieldOptions.docFreq == true) {
+        if (fieldOptions.docFreq) {
           termInfo.add("df", getDocFreq(term));
         }
-        if (fieldOptions.tfIdf == true) {
+        if (fieldOptions.tfIdf) {
           double tfIdfVal = ((double) frequency) / getDocFreq(term);
           termInfo.add("tf-idf", tfIdfVal);
         }
@@ -336,7 +336,7 @@ private int getDocFreq(String term) {
       int result = 1;
       currentTerm = currentTerm.createTerm(term);
       try {
-        TermEnum termEnum = reader.terms(currentTerm);
+        final TermEnum termEnum = reader.terms(currentTerm);
         if (termEnum != null && termEnum.term().equals(currentTerm)) {
           result = termEnum.docFreq();
         }
@@ -348,13 +348,10 @@ private int getDocFreq(String term) {
 
     @Override
     public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
-
-      if (fieldOptions.docFreq == true && reader != null) {
-        this.currentTerm = new Term(field);
-      }
+      currentTerm = new Term(field);
       useOffsets = storeOffsets && fieldOptions.offsets;
       usePositions = storePositions && fieldOptions.positions;
-      fieldNL = new NamedList();
+      fieldNL = new NamedList<Object>();
       docNL.add(field, fieldNL);
     }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java
index bcf8bee0..ad1a6570 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java
@@ -1,24 +1,4 @@
 package org.apache.solr.handler.component;
-
-import org.apache.solr.SolrTestCaseJ4;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.common.params.ModifiableSolrParams;
-import org.apache.solr.common.params.CommonParams;
-import org.apache.solr.common.params.TermVectorParams;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.SimpleOrderedMap;
-import org.apache.solr.request.SolrRequestHandler;
-import org.apache.solr.request.LocalSolrQueryRequest;
-import org.apache.solr.response.SolrQueryResponse;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-import java.util.HashMap;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -36,6 +16,19 @@
  * limitations under the License.
  */
 
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.params.CommonParams;
+import org.apache.solr.common.params.TermVectorParams;
+import org.apache.solr.request.LocalSolrQueryRequest;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import java.util.HashMap;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 /**
  *
@@ -141,6 +134,39 @@ public void testOptions() throws Exception {
        , TermVectorParams.TF, "true", TermVectorParams.DF, "true", TermVectorParams.OFFSETS, "true", TermVectorParams.POSITIONS, "true", TermVectorParams.TF_IDF, "true")
        ,"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}"
     );    
+    
+    assertJQ(req("json.nl","map", "qt",tv, "q", "id:0", TermVectorComponent.COMPONENT_NAME, "true"
+        , TermVectorParams.ALL, "true")
+        ,"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}"
+     );
+    
+    // test each combination at random
+    final List<String> list = new ArrayList<String>();
+    list.addAll(Arrays.asList("json.nl","map", "qt",tv, "q", "id:0", TermVectorComponent.COMPONENT_NAME, "true"));
+    String[][] options = new String[][] { 
+        { TermVectorParams.TF, "'tf':1" },
+        { TermVectorParams.OFFSETS, "'offsets':{'start':20, 'end':27}" },
+        { TermVectorParams.POSITIONS, "'positions':{'position':1}" },
+        { TermVectorParams.DF, "'df':2" },
+        { TermVectorParams.TF_IDF, "'tf-idf':0.5" } };
+    StringBuilder expected = new StringBuilder("/termVectors/doc-0/test_posofftv/anoth=={");
+    boolean first = true;
+    for (int i = 0; i < options.length; i++) {
+      final boolean use = random.nextBoolean();
+      if (use) {
+        if (!first) {
+          expected.append(", ");
+        }
+        first = false;
+        expected.append(options[i][1]);
+        
+      }
+      list.add(options[i][0]);
+      list.add(use ? "true" : "false");
+    }
+    
+    expected.append("}");
+    assertJQ(req(list.toArray(new String[0])), expected.toString());
   }
 
   @Test
