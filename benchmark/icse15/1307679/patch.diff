diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java
index c9ab0dd0..36f61080 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java
@@ -98,14 +98,6 @@ public void update(Observable obj, Object arg) {
 			}
 
 			obj.deleteObserver(this);
-
-            // DERBY-3993
-            // make sure any observer that may have been added by either
-            // dropContainer() or dropStreamContainer() is also handled.
-            // The calling notifyObservers() call from Xact.doComplete()
-            // may not "see" new observers added during processing of the
-            // initial observer list.
-            xact.notifyObservers(arg);
 		}
 	}
 }
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
index e7061458..011f24c9 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
@@ -1960,20 +1960,25 @@ protected void doComplete(Integer commitOrAbort) throws StandardException {
 		if (savePoints != null)
 			savePoints.removeAllElements();
 
+        do
+        {
 		// notify any of our observers that we are completing.
 		notifyObservers(commitOrAbort);
 
 		checkObserverException();
 
-		if (SanityManager.DEBUG) 
-        {
-			if (countObservers() != 0)
-            {
-                SanityManager.THROWASSERT(
-                    "There should be 0 observers, but we still have "
-					+ countObservers() + " observers.");
-            }
-		}
+            // DERBY-3993
+            // make sure any observer that may have been added by either
+            // dropContainer() or dropStreamContainer() is also handled.
+            // The calling notifyObservers() call from Xact.doComplete()
+            // may not "see" new observers added during processing of the
+            // initial observer list.  So loop until notifyObservers()
+            // call causes countObservers() to go to 0.  This should only
+            // loop if one of the observers adds to the list as part of
+            // the notify.  Even then depending on ordering the added
+            // observer may be picked up in the first try.
+
+        } while (countObservers() > 0);
 	}
 
 	private void checkObserverException() throws StandardException {
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java
index e69de29b..5aa00330 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java
@@ -0,0 +1,181 @@
+package org.apache.derbyTesting.functionTests.tests.largedata;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import org.apache.derby.shared.common.sanity.SanityManager;
+
+import junit.framework.Assert;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.sql.SQLException;
+
+
+/*
+Class org.apache.derbyTesting.functionTests.tests.store.Derby5624Test
+
+Licensed to the Apache Software Foundation (ASF) under one or more
+contributor license agreements.  See the NOTICE file distributed with
+this work for additional information regarding copyright ownership.
+The ASF licenses this file to you under the Apache License, Version 2.0
+(the "License"); you may not use this file except in compliance with
+the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+
+/**
+
+Test to reproduce DERBY-5624, a recursion during DropOnCommit causes out
+of stack space for operations that generate a lot of objects to be dropped
+at commit time. 
+
+This test reproduces the problem by creating a table with 1000 columns, then
+an index on each of those columns, loads some data and then call compress
+will drop and recreate each of those indexes.  At commit time each index
+drop will have registered itself onto the Observer list for processing at
+commit time.  Before fix this would fail with out of disk space in at least
+XP, ibm16 default jvm configuration.
+
+**/
+
+public class Derby5624Test extends BaseJDBCTestCase
+{
+    /**************************************************************************
+     * Fields of the class
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Constructors for This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Private/Protected methods of This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Public Methods of This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Public Methods of XXXX class:
+     **************************************************************************
+     */
+
+    public Derby5624Test(String name) 
+    {
+        super(name);
+    }
+
+    
+    /**
+     * DERBY-5624 test case
+     * <p>
+     *
+     **/
+    public void testDERBY_5624()
+        throws SQLException
+    {
+        Statement stmt = createStatement();
+
+        PreparedStatement insert_stmt = 
+            prepareStatement(
+                "INSERT INTO TESTBIGTABLE (col1, col2, col3) VALUES(?, ?, ?)");
+
+        for (int i = 0; i < 3000; i++)
+        {
+            insert_stmt.setInt(1, i);
+            insert_stmt.setInt(2, -(i));
+            insert_stmt.setInt(3, i);
+            insert_stmt.executeUpdate();
+        }
+
+        commit();
+
+        // create index on each column
+        for (int i = 0; i < 1000; i++)
+        {
+            stmt.executeUpdate(
+                "CREATE INDEX INDEXBIG" + i + 
+                " on TESTBIGTABLE (col" + i + ")");
+        }
+        commit();
+
+        // see if compress succeeeds 
+        stmt.executeUpdate(
+            "call SYSCS_UTIL.SYSCS_COMPRESS_TABLE('APP', 'TESTBIGTABLE', 0)");
+
+        commit();
+
+        // verify access to table after the commit, previous to fix the
+        // commit would fail with an out of memory or out of stack space error.
+        JDBC.assertUnorderedResultSet(
+            prepareStatement(
+                "select col1, col2 from TESTBIGTABLE where col1 = 10").executeQuery(),
+            new String[][] {{"10", "-10"}});
+
+    }
+
+    protected static Test baseSuite(String name) 
+    {
+        TestSuite suite = new TestSuite(name);
+        suite.addTestSuite(Derby5624Test.class);
+        return new CleanDatabaseTestSetup(
+                DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
+        {
+            /**
+             * Creates the tables used in the test cases.
+             * @exception SQLException if a database error occurs
+             */
+            protected void decorateSQL(Statement stmt) throws SQLException
+            {
+                Connection conn = stmt.getConnection();
+
+                // create table with 1000 columns
+                StringBuffer create_table_qry = new StringBuffer(10000);
+
+                create_table_qry.append("CREATE TABLE TESTBIGTABLE (col0 int");
+
+                for (int colnum = 1; colnum < 1000; colnum++)
+                {
+                    create_table_qry.append(", col" + colnum + " int");
+                }
+                create_table_qry.append(")");
+
+                // CREATE TABLE TESTBIGTABLE (
+                //     col0 int, col1 int, ... , col999 int)
+                stmt.executeUpdate(create_table_qry.toString());
+
+                conn.setAutoCommit(false);
+            }
+        };
+    }
+
+    public static Test suite() 
+    {
+        TestSuite suite = new TestSuite("Derby5624Test");
+        suite.addTest(baseSuite("Derby5624Test:embedded"));
+        return suite;
+    }
+}
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java
index 27bf2b73..817ebc33 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java
@@ -32,19 +32,24 @@ public _Suite(String name) {
     }
 
     /**
-     * Suite runs first the lite suite for both embedded and client with LobLimitsLiteTest
+     * Suite runs first the lite suite for both embedded and client with 
+     * LobLimitsLiteTest.
      * Then runs the full embeddded suite with LobLimitsTest 
      * Then runs the full client suite with LobLimitsClientTest.
      * The full suite may take a very long time.
      */
     public static Test suite() {
         TestSuite suite = new TestSuite("largedata suite");
+
+        // DERBY-5624, currently this runs out of file descriptors on unix
+        // systems with 1024 limit per user.  Setting to run only on windows
+        // until solution for unix is found.
+        if (isWindowsPlatform())
+            suite.addTest(Derby5624Test.suite());
+
         suite.addTest(LobLimitsLiteTest.suite());
         suite.addTest(LobLimitsTest.suite());
         suite.addTest(LobLimitsClientTest.suite());
         return suite;
-        
     }
-    
-    
 }
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 653bb628..7e834c57 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -628,6 +628,39 @@ public static final boolean isPlatform(String osName)  {
         return getSystemProperty("os.name").equals(osName);
     }
     
+    /**
+     * Determine if platform is a Windows variant.
+     * <p>
+     * Return true if platform is a windows platform.  Just looks for
+     * os.name starting with "Windows".  The os.name property
+     * can have at least the following values (there are probably more):
+     *
+     * AIX
+     * Digital Unix
+     * FreeBSD
+     * HP UX
+     * Irix
+     * Linux
+     * Mac OS
+     * Mac OS X
+     * MPE/iX
+     * Netware 4.11
+     * OS/2
+     * Solaris
+     * Windows 2000
+     * Windows 95
+     * Windows 98
+     * Windows NT
+     * Windows Vista
+     * Windows XP
+     * <p>
+     *
+     * @return true if running on a Windows platform.
+     **/
+    public static final boolean isWindowsPlatform() {
+        return getSystemProperty("os.name").startsWith("Windows");
+    }
+    
     /**
      * Check if this is java 5
      * @return true if java.version system property starts with 1.5
