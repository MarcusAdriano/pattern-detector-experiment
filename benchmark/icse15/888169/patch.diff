diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index f3251390..bdf0eaeb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -593,7 +593,6 @@ void onMemtableFlush(CommitLog.CommitLogContext cLogCtx) throws IOException
      * onMemtableFlush() need not be invoked.
      *
      * param @ filename - filename just flushed to disk
-     * param @ bf - bloom filter which indicates the keys that are in this file.
     */
     public void addSSTable(SSTableReader sstable)
     {
@@ -802,6 +801,11 @@ void doCleanup(SSTableReader sstable) throws IOException
         {
             throw new UnsupportedOperationException("disk full");
         }
+        if (target != null)
+        {
+            // compacting for streaming: send to subdirectory
+            compactionFileLocation = compactionFileLocation + File.separator + DatabaseDescriptor.STREAMING_SUBDIR;
+        }
         List<SSTableReader> results = new ArrayList<SSTableReader>();
 
         long startTime = System.currentTimeMillis();
@@ -829,10 +833,6 @@ void doCleanup(SSTableReader sstable) throws IOException
                 {
                     if (writer == null)
                     {
-                        if (target != null)
-                        {
-                            compactionFileLocation = compactionFileLocation + File.separator + DatabaseDescriptor.STREAMING_SUBDIR;
-                        }
                         FileUtils.createDirectory(compactionFileLocation);
                         String newFilename = new File(compactionFileLocation, getTempSSTableFileName()).getAbsolutePath();
                         writer = new SSTableWriter(newFilename, expectedBloomFilterSize, StorageService.getPartitioner());
