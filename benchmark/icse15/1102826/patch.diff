diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 7af2ee1a..a4260de5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -377,6 +377,7 @@ be more appropriate to have it in a separate context (LanguageTransactionContext
 
     public void initialize() throws StandardException
     {
+        interruptedException = null;
         sessionUser = IdUtil.getUserAuthorizationId(userName);
         //
         //Creating the authorizer authorizes the connection.
@@ -397,9 +398,7 @@ public void initialize() throws StandardException
             }
         }
 
-
         setDefaultSchema(initDefaultSchemaDescriptor());
-        interruptedException = null;
         referencedColumnMap = new WeakHashMap();
     }
 
@@ -808,6 +807,8 @@ Reset the connection before it is returned (indirectly) by
     public void resetFromPool()
          throws StandardException
     {
+        interruptedException = null;
+
         // Reset IDENTITY_VAL_LOCAL
         identityNotNull = false;
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
index 03234ac8..446f51a1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
@@ -369,7 +369,7 @@ public void run() {
     static class WorkerThread extends Thread {
         private final boolean readertest;
         private final long noOps;
-        public Exception e; // if any seen
+        public Throwable e; // if any seen
         private Connection c;
 
         public WorkerThread(Connection c, boolean readertest, long noOps) {
@@ -432,7 +432,7 @@ public void run() {
                                 retries++;
                                 continue;
                             } else {
-                                throw new Exception("expected 08000, saw" + e);
+                                fail("expected 08000", e);
                             }
                         }
 
@@ -459,7 +459,7 @@ public void run() {
                                 retries++;
                                 continue;
                             } else {
-                                throw new Exception("expected 08000, saw" + e);
+                                fail("expected 08000", e);
                             }
                         }
 
@@ -476,7 +476,7 @@ public void run() {
                     }
                 }
                 s.close();
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 this.e = e;
             } finally {
                 try { c.close(); } catch (Exception e) {}
