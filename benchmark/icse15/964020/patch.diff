diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index 2a126cd0..63327bd4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -138,6 +138,9 @@ public int compare(InetAddress ia1, InetAddress ia2)
 
         InetAddress maxEndpoint = endpoints.get(endpoints.size() - 1);
         assert !maxEndpoint.equals(FBUtilities.getLocalAddress());
+        if (metadata.pendingRangeChanges(maxEndpoint) > 0)
+            throw new RuntimeException("Every node is a bootstrap source! Please specify an initial token manually or wait for an existing bootstrap operation to finish.");
+        
         return maxEndpoint;
     }
 
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/dht/BootStrapperTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/dht/BootStrapperTest.java
index c8adebce..13dc58be 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/dht/BootStrapperTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/dht/BootStrapperTest.java
@@ -49,6 +49,63 @@ public void testTokenRoundtrip() throws Exception
         assert BootStrapper.getBootstrapTokenFrom(FBUtilities.getLocalAddress()) != null;
     }
 
+    @Test
+    public void testMulitipleAutomaticBootstraps() throws IOException
+    {
+        StorageService ss = StorageService.instance;
+        generateFakeEndpoints(5);
+        InetAddress[] addrs = new InetAddress[] 
+        {
+            InetAddress.getByName("127.0.0.2"),  
+            InetAddress.getByName("127.0.0.3"),  
+            InetAddress.getByName("127.0.0.4"),  
+            InetAddress.getByName("127.0.0.5"),  
+        };
+        InetAddress[] bootstrapAddrs = new InetAddress[]
+        {
+            InetAddress.getByName("127.0.0.12"),  
+            InetAddress.getByName("127.0.0.13"),  
+            InetAddress.getByName("127.0.0.14"),  
+            InetAddress.getByName("127.0.0.15"),  
+        };
+        Map<InetAddress, Double> load = new HashMap<InetAddress, Double>();
+        for (int i = 0; i < addrs.length; i++)
+            load.put(addrs[i], (double)i+2);
+        
+        // give every node a bootstrap source.
+        for (int i = 3; i >=0; i--)
+        {
+            InetAddress bootstrapSource = BootStrapper.getBootstrapSource(ss.getTokenMetadata(), load);
+            assert bootstrapSource != null;
+            assert bootstrapSource.equals(addrs[i]) : String.format("expected %s but got %s for %d", addrs[i], bootstrapSource, i);
+            assert !ss.getTokenMetadata().getBootstrapTokens().containsValue(bootstrapSource);
+            
+            Range range = ss.getPrimaryRangeForEndpoint(bootstrapSource);
+            Token token = StorageService.getPartitioner().midpoint(range.left, range.right);
+            assert range.contains(token);
+            ss.onChange(bootstrapAddrs[i], StorageService.MOVE_STATE, new ApplicationState(StorageService.STATE_BOOTSTRAPPING + StorageService.Delimiter + StorageService.getPartitioner().getTokenFactory().toString(token)));
+        }
+        
+        // any further attempt to bootsrtap should fail since every node in the cluster is splitting.
+        try
+        {
+            BootStrapper.getBootstrapSource(ss.getTokenMetadata(), load);
+            throw new AssertionError("This bootstrap should have failed.");
+        }
+        catch (RuntimeException ex) 
+        {
+            // success!
+        }
+        
+        // indicate that one of the nodes is done. see if the node it was bootstrapping from is still available.
+        Range range = ss.getPrimaryRangeForEndpoint(addrs[2]);
+        Token token = StorageService.getPartitioner().midpoint(range.left, range.right);
+        ss.onChange(bootstrapAddrs[2], StorageService.MOVE_STATE, new ApplicationState(StorageService.STATE_NORMAL + StorageService.Delimiter + StorageService.getPartitioner().getTokenFactory().toString(token)));
+        load.put(bootstrapAddrs[2], 0d);
+        InetAddress addr = BootStrapper.getBootstrapSource(ss.getTokenMetadata(), load);
+        assert addr != null && addr.equals(addrs[2]);
+    }
+
     @Test
     public void testGuessToken() throws IOException
     {
