diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/Like.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/Like.java
index e9eb358c..c6cca37a 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/Like.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/Like.java
@@ -688,22 +688,22 @@ public static boolean isOptimizable(String pattern)
 		return (firstChar != anyChar && firstChar != anyString);
 	}
 
-	public static String greaterEqualStringFromParameter(String pattern)
+	public static String greaterEqualStringFromParameter(String pattern, int maxWidth)
 		throws StandardException {
 
 		if (pattern == null)
 			return null;
 
-		return greaterEqualString(pattern, (String) null);
+		return greaterEqualString(pattern, (String) null, maxWidth);
 	}
 
-	public static String greaterEqualStringFromParameterWithEsc(String pattern, String escape)
+	public static String greaterEqualStringFromParameterWithEsc(String pattern, String escape, int maxWidth)
 		throws StandardException {
 
 		if (pattern == null)
 			return null;
 
-		return greaterEqualString(pattern, escape);
+		return greaterEqualString(pattern, escape, maxWidth);
 	}
 
 	/**
@@ -711,10 +711,11 @@ public static String greaterEqualStringFromParameterWithEsc(String pattern, Stri
 	 *
 	 * @param pattern	The right side of the LIKE
 	 * @param escape	The escape clause
+	 * @param maxWidth	Maximum length of column, for null padding
 	 *
 	 * @return	The String for the >= clause
 	 */
-	public static String greaterEqualString(String pattern, String escape)
+	public static String greaterEqualString(String pattern, String escape, int maxWidth)
 	    throws StandardException
 	{
 
@@ -735,32 +736,29 @@ public static String greaterEqualString(String pattern, String escape)
 				// we return a string stripping out the escape char
 				// leaving the _? in place as normal chars.
                 
-				return greaterEqualString(pattern, escChar);
+				return padWithNulls(greaterEqualString(pattern, escChar), maxWidth);
 			}
 			// drop through if no escape found
 		}
 
 		if (firstAnyChar == -1)
 		{
-			if (firstAnyString == -1)
-			{
-				return pattern;
-			}
-			else	// no _, found %
+			if (firstAnyString != -1) // no _, found %
 			{
-				return pattern.substring(0, firstAnyString);
+				pattern = pattern.substring(0, firstAnyString);
 			}
 		}
 		else if (firstAnyString == -1)
 		{
-			return pattern.substring(0, firstAnyChar);
+			pattern = pattern.substring(0, firstAnyChar);
 		}
 		else
 		{
-			return pattern.substring(0, (firstAnyChar > firstAnyString) ? 
+			pattern = pattern.substring(0, (firstAnyChar > firstAnyString) ? 
 										firstAnyString :
 										firstAnyChar);
 		}
+		return padWithNulls(pattern, maxWidth);
 	}
 
     /** 
@@ -867,11 +865,12 @@ private static String greaterEqualString(String pattern, char escChar)
 	 * at the end of the pattern literal.    See LikeEscapeOp*Node.preprocess.
 	 *
 	 * @param pattern	The right side of the LIKE
+	 * @param maxWidth	Maximum length of column, for null padding
 	 *
 	 * @return	The String for the < clause
 	 * @exception StandardException thrown if data invalid
 	 */
-	public static String lessThanString(String pattern)
+	public static String lessThanString(String pattern, int maxWidth)
 		throws StandardException
 	{
 		//int		firstAnyChar = pattern.indexOf(anyChar);
@@ -902,21 +901,23 @@ public static String lessThanString(String pattern)
 		charArray = pattern.substring(0, lastUsableChar + 1).toCharArray();
 		charArray[lastUsableChar] = newLastChar;
 
-		return new String(charArray);
+		return padWithNulls(new String(charArray), maxWidth);
 	}
 
-	public static String lessThanStringFromParameter(String pattern) throws StandardException {
+	public static String lessThanStringFromParameter(String pattern, int maxWidth)
+		throws StandardException 
+	{
 		if (pattern == null)
 			return null;
-		return lessThanString(pattern, null);
+		return lessThanString(pattern, null, maxWidth);
 	}
 
-	public static String lessThanStringFromParameterWithEsc(String pattern, String escape)
+	public static String lessThanStringFromParameterWithEsc(String pattern, String escape, int maxWidth)
 		 throws StandardException
 	{
 		if (pattern == null)
 			return null;
-		return lessThanString(pattern, escape);
+		return lessThanString(pattern, escape, maxWidth);
 	}
 
 	/**
@@ -929,11 +930,12 @@ public static String lessThanStringFromParameterWithEsc(String pattern, String e
 	 *
 	 * @param pattern	The right side of the LIKE
 	 * @param escape	The escape clause
+	 * @param maxWidth	Maximum length of column, for null padding
 	 *
 	 * @return	The String for the < clause
 	 * @exception StandardException thrown if data invalid
 	 */
-	public static String lessThanString(String pattern, String escape)
+	public static String lessThanString(String pattern, String escape, int maxWidth)
 		throws StandardException
 	{
 		int		lastUsableChar;
@@ -1033,7 +1035,7 @@ else if (firstAnyString == -1)
 			charArray = pattern.substring(0, lastUsableChar + 1).toCharArray();
 			charArray[lastUsableChar] = newLastChar;
 
-			return new String(charArray);
+			return padWithNulls(new String(charArray), maxWidth);
 		}
 		char[] patternChars = new char[patternLen];
 		char[] result = new char[patternLen];
@@ -1058,7 +1060,7 @@ else if (firstAnyString == -1)
 		}
 		result[r++] = newLastChar;
 		String gt = new String(result, 0, r);
-		return gt;
+		return padWithNulls(gt, maxWidth);
 	}
 	
 	/**
@@ -1102,4 +1104,23 @@ public static boolean isLikeComparisonNeeded(String pattern)
 
 		return false;
 	}
+
+	/**
+	 * Pad a string with null characters, in order to make it &gt; and &lt;
+	 * comparable with SQLChar.
+	 * 
+	 * @param string	The string to pad
+	 * @param len		Max number of characters to pad to
+	 * @returns the string padded with 0s up to the given length
+	 */
+	private static String padWithNulls(String string, int len) 
+	{
+		if(string.length() >= len)
+			return string;
+
+		StringBuffer buf = new StringBuffer(len).append(string);
+		buf.setLength(len);
+		
+		return buf.toString();
+	}
 }
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
index 1ece92ff..0a3a3a40 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
@@ -554,7 +554,9 @@ public ValueNode preprocess(int numTables,
 				return this;
 			}
 
-			greaterEqualString = Like.greaterEqualString(pattern, escape);
+			int maxWidth = receiver.getTypeServices().getMaximumWidth();
+			greaterEqualString = Like.greaterEqualString(pattern, escape, 
+														 maxWidth);
 
 
 
@@ -563,7 +565,7 @@ public ValueNode preprocess(int numTables,
 			 */
             if ( ! receiver.getTypeId().isNationalStringTypeId() )
 			{
-				lessThanString = Like.lessThanString(greaterEqualString);
+				lessThanString = Like.lessThanString(pattern, escape, maxWidth);
 				eliminateLikeComparison = ! Like.isLikeComparisonNeeded(pattern);
 			}
 		}
@@ -610,8 +612,9 @@ public ValueNode preprocess(int numTables,
 			QueryTreeNode likeLTopt;
 			if (leftOperand.isParameterNode())
 			{
+				int maxWidth = receiver.getTypeServices().getMaximumWidth();
 				likeLTopt = setupOptimizeStringFromParameter(leftOperand, rightOperand,
-								"lessThanStringFromParameter");
+								"lessThanStringFromParameter", maxWidth);
 			}
 			else
 			{
@@ -655,8 +658,9 @@ public ValueNode preprocess(int numTables,
 			// Create an expression off the parameter
 			// new SQLChar(Like.greaterEqualString(?));
 
+			int maxWidth = receiver.getTypeServices().getMaximumWidth();
 			likeGEopt = setupOptimizeStringFromParameter(leftOperand, rightOperand,
-									"greaterEqualStringFromParameter");
+								"greaterEqualStringFromParameter", maxWidth);
 
 		} else {
 
@@ -789,7 +793,7 @@ public void generateExpression(ExpressionClassBuilder acb,
 	}
 
 	private ValueNode setupOptimizeStringFromParameter(ValueNode parameterNode,
-						ValueNode escapeNode,String methodName)
+						ValueNode escapeNode,String methodName, int maxWidth)
 		throws StandardException {
 
 		Vector param;
@@ -814,6 +818,12 @@ private ValueNode setupOptimizeStringFromParameter(ValueNode parameterNode,
 		if (escapeNode != null)
 			param.addElement(escapeNode);
 
+		QueryTreeNode maxWidthNode = getNodeFactory().getNode(
+										C_NodeTypes.INT_CONSTANT_NODE,
+										new Integer(maxWidth),
+										getContextManager());
+		param.addElement(maxWidthNode);
+
 		methodCall.addParms(param);
 
 
