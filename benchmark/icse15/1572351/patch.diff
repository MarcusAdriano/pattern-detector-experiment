diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
index 2b78582f..babf2d88 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
@@ -231,13 +231,8 @@ protected  OptimizerImpl(OptimizableList optimizableList,
 		this.numTablesInQuery = numTablesInQuery;
 		numOptimizables = optimizableList.size();
 		proposedJoinOrder = new int[numOptimizables];
-		if (numTablesInQuery > 6)
-		{
-			permuteState = READY_TO_JUMP;
+        if (initJumpState() == READY_TO_JUMP)
 			firstLookOrder = new int[numOptimizables];
-		}
-		else
-			permuteState = NO_JUMP;
 
 		/* Mark all join positions as unused */
 		for (int i = 0; i < numOptimizables; i++)
@@ -371,6 +366,26 @@ public void prepForNextRound()
 		 * phase in certain situations.  DERBY-1866.
 		 */
 		desiredJoinOrderFound = false;
+        
+        /*
+         * If we JUMPed permutations last round, it's possible that we timed out
+         * before finishing all of the jump processing (most likely we ended in
+         * the middle of a WALK_LOW). So reset the jump state here to make sure
+         * we get a clean start. Failure to do so can lead to execution of
+         * code-paths that are not expected and thus incorrect cost estimates
+         * (most notably, an uninitialized bestCost, which we should never see).
+         * DERBY-1905.
+         */
+        initJumpState();
+    }
+    
+    /**
+     * Determine if we want to try "jumping" permutations with this
+     * OptimizerImpl, and (re-)initialize the permuteState field accordingly.
+     */
+    private int initJumpState() {
+        permuteState = (numTablesInQuery >= 6 ? READY_TO_JUMP : NO_JUMP);
+        return permuteState;
 	}
 
     public int getMaxMemoryPerTable()
