diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/BayesAlgorithm.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/BayesAlgorithm.java
index 454ca5f4..0afc3045 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/BayesAlgorithm.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/BayesAlgorithm.java
@@ -17,22 +17,24 @@
 
 package org.apache.mahout.classifier.bayes.algorithm;
 
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Deque;
+import java.util.Collections;
 import java.util.HashMap;
-import java.util.LinkedList;
+import java.util.List;
 import java.util.Map;
+import java.util.PriorityQueue;
 
-import org.apache.hadoop.util.PriorityQueue;
 import org.apache.mahout.classifier.ClassifierResult;
-import org.apache.mahout.classifier.bayes.common.ClassifierResultPriorityQueue;
+import org.apache.mahout.classifier.bayes.common.ByScoreLabelResultComparator;
 import org.apache.mahout.classifier.bayes.exceptions.InvalidDatastoreException;
 import org.apache.mahout.classifier.bayes.interfaces.Algorithm;
 import org.apache.mahout.classifier.bayes.interfaces.Datastore;
 
 public class BayesAlgorithm implements Algorithm{
 
-  private double alpha_i = 1.0;
+  private static final double alpha_i = 1.0;
+
   @Override
   public ClassifierResult classifyDocument(String[] document,
       Datastore datastore, String defaultCategory)
@@ -57,24 +59,28 @@ public ClassifierResult classifyDocument(String[] document,
       Datastore datastore, String defaultCategory, int numResults)
       throws InvalidDatastoreException {
     Collection<String> categories = datastore.getKeys("labelWeight");    
-    PriorityQueue<ClassifierResult> pq = new ClassifierResultPriorityQueue(numResults);
-    ClassifierResult tmp;
+    PriorityQueue<ClassifierResult> pq =
+        new PriorityQueue<ClassifierResult>(numResults, new ByScoreLabelResultComparator());
     for (String category : categories){
       double prob = documentWeight(datastore, category, document);
       if (prob > 0.0) {
-        tmp = new ClassifierResult(category, prob);
-        pq.insert(tmp);
+        pq.add(new ClassifierResult(category, prob));
+        if (pq.size() > numResults) {
+          pq.remove();
+        }
       }
     }
 
-    Deque<ClassifierResult> result = new LinkedList<ClassifierResult>();
-    while ((tmp = pq.pop()) != null) {
-      result.addLast(tmp);
+    if (pq.isEmpty()) {
+      return new ClassifierResult[] { new ClassifierResult(defaultCategory, 0.0) };
+    } else {
+      List<ClassifierResult> result = new ArrayList<ClassifierResult>(pq.size());
+      while (pq.isEmpty() == false) {
+        result.add(pq.remove());
     }
-    if (result.isEmpty()){
-      result.add(new ClassifierResult(defaultCategory, 0));
+      Collections.reverse(result);
+      return result.toArray(new ClassifierResult[pq.size()]);
     }
-    return result.toArray(new ClassifierResult[result.size()]);  
   }
   
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/CBayesAlgorithm.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/CBayesAlgorithm.java
index 1b708a1a..9803ac82 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/CBayesAlgorithm.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/algorithm/CBayesAlgorithm.java
@@ -17,22 +17,23 @@
 
 package org.apache.mahout.classifier.bayes.algorithm;
 
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Deque;
+import java.util.Collections;
 import java.util.HashMap;
-import java.util.LinkedList;
+import java.util.List;
 import java.util.Map;
+import java.util.PriorityQueue;
 
-import org.apache.hadoop.util.PriorityQueue;
 import org.apache.mahout.classifier.ClassifierResult;
-import org.apache.mahout.classifier.bayes.common.ClassifierResultPriorityQueue;
+import org.apache.mahout.classifier.bayes.common.ByScoreLabelResultComparator;
 import org.apache.mahout.classifier.bayes.exceptions.InvalidDatastoreException;
 import org.apache.mahout.classifier.bayes.interfaces.Algorithm;
 import org.apache.mahout.classifier.bayes.interfaces.Datastore;
 
 public class CBayesAlgorithm implements Algorithm {
 
-  private double alpha_i = 1.0;
+  private static final double alpha_i = 1.0;
 
   @Override
   public ClassifierResult classifyDocument(String[] document,
@@ -58,25 +59,28 @@ public ClassifierResult classifyDocument(String[] document,
       Datastore datastore, String defaultCategory, int numResults)
       throws InvalidDatastoreException {
     Collection<String> categories = datastore.getKeys("labelWeight");
-    PriorityQueue<ClassifierResult> pq = new ClassifierResultPriorityQueue(
-        numResults);
-    ClassifierResult tmp;
+    PriorityQueue<ClassifierResult> pq =
+        new PriorityQueue<ClassifierResult>(numResults, new ByScoreLabelResultComparator());
     for (String category : categories) {
       double prob = documentWeight(datastore, category, document);
       if (prob > 0.0) {
-        tmp = new ClassifierResult(category, prob);
-        pq.insert(tmp);
+        pq.add(new ClassifierResult(category, prob));
+        if (pq.size() > numResults) {
+          pq.remove();
+        }
       }
     }
 
-    Deque<ClassifierResult> result = new LinkedList<ClassifierResult>();
-    while ((tmp = pq.pop()) != null) {
-      result.addLast(tmp);
+    if (pq.isEmpty()) {
+      return new ClassifierResult[] { new ClassifierResult(defaultCategory, 0.0) };
+    } else {
+      List<ClassifierResult> result = new ArrayList<ClassifierResult>(pq.size());
+      while (pq.isEmpty() == false) {
+        result.add(pq.remove());
     }
-    if (result.isEmpty()) {
-      result.add(new ClassifierResult(defaultCategory, 0));
+      Collections.reverse(result);
+      return result.toArray(new ClassifierResult[pq.size()]);
     }
-    return result.toArray(new ClassifierResult[result.size()]);
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ByScoreLabelResultComparator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ByScoreLabelResultComparator.java
index e69de29b..baa417d5 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ByScoreLabelResultComparator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ByScoreLabelResultComparator.java
@@ -0,0 +1,39 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.classifier.bayes.common;
+
+import org.apache.mahout.classifier.ClassifierResult;
+
+import java.util.Comparator;
+
+public final class ByScoreLabelResultComparator implements Comparator<ClassifierResult> {
+
+  @Override
+  public int compare(ClassifierResult cr1, ClassifierResult cr2) {
+    double score1 = cr1.getScore();
+    double score2 = cr2.getScore();
+    if (score1 < score2) {
+      return 1;
+    } else if (score1 > score2) {
+      return -1;
+    } else {
+      return cr1.getLabel().compareTo(cr2.getLabel());
+    }
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ClassifierResultPriorityQueue.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ClassifierResultPriorityQueue.java
index 714dce99..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ClassifierResultPriorityQueue.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/common/ClassifierResultPriorityQueue.java
@@ -1,38 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.classifier.bayes.common;
-
-import org.apache.hadoop.util.PriorityQueue;
-import org.apache.mahout.classifier.ClassifierResult;
-
-public class ClassifierResultPriorityQueue extends PriorityQueue<ClassifierResult> {
-
-  public ClassifierResultPriorityQueue(int numResults) {
-    initialize(numResults);
-  }
-
-  @Override
-  protected boolean lessThan(Object a, Object b) {
-    ClassifierResult cr1 = (ClassifierResult) a;
-    ClassifierResult cr2 = (ClassifierResult) b;
-
-    double score1 = cr1.getScore();
-    double score2 = cr2.getScore();
-    return score1 == score2 ? cr1.getLabel().compareTo(cr2.getLabel()) < 0 : score2<score1;
-  }
-}
