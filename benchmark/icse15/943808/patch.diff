diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
index ede34dc8..0ad8bccd 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
@@ -18,6 +18,8 @@
  */
 package org.apache.aries.jndi;
 
+import java.util.Arrays;
+import java.util.Comparator;
 import java.util.Hashtable;
 
 import javax.naming.Context;
@@ -49,113 +51,6 @@ public static void setBundleContext(BundleContext ctx)
   	context = ctx;
   }
   
-  /**
-   * This class creates a Context from an InitialContextFactory that may be
-   * named in the provided env. If no name is set the first InitialContextFactory
-   * returned from the service registry is used.
-   * 
-   * @param env
-   * @return the context.
-   * @throws NamingException
-   */
-  public static Context createContext(Hashtable<?,?> env)
-    throws NamingException
-  {
-  	
-    InitialContextFactory icf = null;
-    ServiceReference ref = null;
-
-    String icfFactory = (String) env.get(Context.INITIAL_CONTEXT_FACTORY);
-    
-    boolean icfFactorySet = true;
-
-    if (icfFactory == null) {
-      icfFactory = InitialContextFactory.class.getName();
-      icfFactorySet = false;
-    }
-    
-    try {
-      ServiceReference[] refs = context.getAllServiceReferences(icfFactory, null);
-      if (refs != null) {
-        ref = refs[0];
-        icf = (InitialContextFactory) context.getService(ref);
-      }
-    } catch (InvalidSyntaxException e) {
-      // TODO nls enable this.
-      NamingException e4 = new NamingException("Argh this should never happen :)");
-      e4.initCause(e);
-      
-      throw e4;
-    }
-
-    if (icf == null) {
-      try {
-        ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
-
-        if (refs != null) {
-          for (ServiceReference icfbRef : refs) {
-            InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(icfbRef);
-
-            icf = builder.createInitialContextFactory(env);
-            
-            context.ungetService(icfbRef);
-            if (icf != null) {
-              break;
-            }
-          }
-        }
-      } catch (InvalidSyntaxException e) {
-        // TODO nls enable this.
-        NamingException e4 = new NamingException("Argh this should never happen :)");
-        e4.initCause(e);    
-        throw e4;
-      }
-    }
-
-    if (icf == null && icfFactorySet) {
-      try {
-        Class<?> clazz = Class.forName(icfFactory, true, null);
-        icf = (InitialContextFactory) clazz.newInstance();
-      } catch (ClassNotFoundException e11) {
-        // TODO nls enable this.
-        NamingException e = new NamingException("Argh this should never happen :)");
-        e.initCause(e11);    
-        throw e;
-      } catch (InstantiationException e2) {
-        // TODO nls enable this.
-        NamingException e4 = new NamingException("Argh this should never happen :)");
-        e4.initCause(e2);    
-        throw e4;
-      } catch (IllegalAccessException e1) {
-        // TODO nls enable this.
-        NamingException e4 = new NamingException("Argh this should never happen :)");
-        e4.initCause(e1);    
-        throw e4;
-      }
-    }
-
-    if (icf == null) {
-
-      // TODO nls enable this.
-      NamingException e3 = new NoInitialContextException("We could not find an InitialContextFactory to use");
-      
-      throw e3;
-    }
-
-    Context ctx = icf.getInitialContext(env);
-
-    if (ref != null) context.ungetService(ref);
-
-    if (ctx == null) {
-      // TODO nls enable this
-      NamingException e = new NamingException("The ICF returned a null context");
-      throw e;
-    }
-
-    return ctx;
-  }
-  
-  
   private static Context createIcfContext(Hashtable<?,?> env) throws NamingException
   {
     String icfFactory = (String) env.get(Context.INITIAL_CONTEXT_FACTORY);
@@ -250,4 +145,148 @@ public static Context createURLContext(String urlScheme, Hashtable<?, ?> env)
 
     return ctx;
   }
+  
+    public static Context getInitialContext(BundleContext context, Hashtable<?, ?> environment)
+            throws NamingException {
+        ContextProvider provider = getContextProvider(context, environment);
+        String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
+        if (contextFactoryClass == null) {
+            if (provider == null) {
+                return new DelegateContext(context, environment);
+            } else {
+                return new DelegateContext(context, provider);
+            }
+        } else {
+            if (provider == null) {
+                throw new NoInitialContextException("We could not find an InitialContextFactory to use");
+            } else {
+                return new DelegateContext(context, provider);
+            }
+        }
+    }
+
+    public static ContextProvider getContextProvider(BundleContext context,
+                                                     Hashtable<?, ?> environment)
+            throws NamingException {
+        ContextProvider provider = null;
+        String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
+        if (contextFactoryClass == null) {
+            // 1. get ContextFactory using builder
+            provider = getInitialContextUsingBuilder(context, environment);
+
+            // 2. lookup all ContextFactory services
+            if (provider == null) {
+                String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory))";
+                ServiceReference[] references = null;
+                try {
+                    references = context.getAllServiceReferences(InitialContextFactory.class.getName(), filter);
+                } catch (InvalidSyntaxException e) {
+                    NamingException ex = new NamingException("Bad filter: " + filter);
+                    ex.initCause(e);
+                    throw ex;
+                }
+                if (references != null) {
+                    Context initialContext = null;
+                    Arrays.sort(references, new ServiceReferenceComparator());
+                    for (ServiceReference reference : references) {
+                        InitialContextFactory factory = (InitialContextFactory) context.getService(reference);
+                        try {
+                            initialContext = factory.getInitialContext(environment);
+                        } finally {
+                            context.ungetService(reference);
+                        }
+                        if (initialContext != null) {
+                            provider = new ContextProvider(reference, initialContext);
+                            break;
+                        }
+                    }
+                }
+            }
+        } else {
+            // 1. lookup ContextFactory using the factory class
+            String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory)(objectClass="+ contextFactoryClass + "))";
+            ServiceReference[] references = null;
+            try {
+                references = context.getServiceReferences(InitialContextFactory.class.getName(), filter);
+            } catch (InvalidSyntaxException e) {
+                NamingException ex = new NamingException("Bad filter: " + filter);
+                ex.initCause(e);
+                throw ex;
+            }
+
+            if (references != null && references.length > 0) {
+                Context initialContext = null;
+                Arrays.sort(references, new ServiceReferenceComparator());
+                ServiceReference reference = references[0];
+                InitialContextFactory factory = (InitialContextFactory) context.getService(reference);
+                try {
+                    initialContext = factory.getInitialContext(environment);
+                } finally {
+                    context.ungetService(reference);
+                }
+                if (initialContext != null) {
+                    provider = new ContextProvider(reference, initialContext);                    
+                }
+            }
+
+            // 2. get ContextFactory using builder
+            if (provider == null) {
+                provider = getInitialContextUsingBuilder(context, environment);
+            }
+        }
+        
+        return provider;
+    }
+
+    private static ContextProvider getInitialContextUsingBuilder(BundleContext context,
+                                                                 Hashtable<?, ?> environment)
+            throws NamingException {
+        ContextProvider provider = null;
+        try {
+            ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
+            if (refs != null) {
+                InitialContextFactory factory = null;
+                Arrays.sort(refs, new ServiceReferenceComparator());
+                for (ServiceReference ref : refs) {                    
+                    InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
+                    try {
+                        factory = builder.createInitialContextFactory(environment);
+                    } catch (NamingException e) {
+                        // TODO: log
+                        // ignore
+                    } finally {
+                        context.ungetService(ref);
+                    }
+                    if (factory != null) {
+                        provider = new ContextProvider(ref, factory.getInitialContext(environment));
+                        break;
+                    }
+                }
+            }
+        } catch (InvalidSyntaxException e) {
+            // ignore - should never happen
+        }
+        return provider;
+    }
+    
+    public static class ContextProvider {
+        
+        ServiceReference reference;
+        Context context;
+        
+        public ContextProvider(ServiceReference reference, Context context) {
+            this.reference = reference;
+            this.context = context;
+        }        
+        
+        public boolean isValid() {
+            return (reference.getBundle() != null);
+        }
+    }
+    
+    public static class ServiceReferenceComparator implements Comparator<ServiceReference> {
+        public int compare(ServiceReference o1, ServiceReference o2) {        
+          return o2.compareTo(o1);
+        }
+    }
 }
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java
index e69de29b..359f5039 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java
@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.jndi;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Hashtable;
+import java.util.Map;
+import java.util.Set;
+
+import javax.naming.Context;
+import javax.naming.NamingException;
+import javax.naming.directory.DirContext;
+
+import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleContext;
+import org.osgi.service.jndi.JNDIContextManager;
+
+public class ContextManagerService implements JNDIContextManager {
+
+    private Set<Context> contexts = Collections.synchronizedSet(new HashSet<Context>());
+    private Bundle bundle;
+    
+    public ContextManagerService(Bundle bundle) { 
+        this.bundle = bundle;
+    }
+    
+    public void close() {      
+        synchronized (contexts) {
+            for (Context context : contexts) {
+                try {
+                    context.close();
+                } catch (NamingException e) {
+                    // ignore
+                }
+            }
+            contexts.clear();
+        }
+    }
+    
+    public Context newInitialContext() throws NamingException {
+        return newInitialContext(new Hashtable());
+    }
+
+    public Context newInitialContext(Map environment) throws NamingException {
+        return getInitialContext(environment);
+    }
+
+    public DirContext newInitialDirContext() throws NamingException {
+        return newInitialDirContext(new Hashtable());
+    }
+
+    public DirContext newInitialDirContext(Map environment) throws NamingException {
+        return DirContext.class.cast( getInitialContext(environment) );
+    }
+    
+    private Context getInitialContext(Map environment) throws NamingException {
+        Hashtable env;
+        if (environment instanceof Hashtable) {
+            env = (Hashtable) environment;
+        } else {
+            env = new Hashtable();
+            if (environment != null) {
+                env.putAll(environment);        
+            }
+        }
+        
+        BundleContext bundleContext = bundle.getBundleContext();
+        Context context = ContextHelper.getInitialContext(bundleContext, env);
+        contexts.add(context);
+        return context;
+    }
+
+}
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerServiceFactory.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerServiceFactory.java
index e69de29b..72a81294 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerServiceFactory.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerServiceFactory.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.jndi;
+
+import org.osgi.framework.Bundle;
+import org.osgi.framework.ServiceFactory;
+import org.osgi.framework.ServiceRegistration;
+
+public class ContextManagerServiceFactory implements ServiceFactory {
+
+    public Object getService(Bundle bundle, ServiceRegistration registration) {
+        return new ContextManagerService(bundle);
+    }
+
+    public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {
+        ((ContextManagerService) service).close();
+    }
+
+}
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
index f8e3a4e3..a1d1334b 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
@@ -22,8 +22,6 @@
 package org.apache.aries.jndi;
 
 import java.util.Hashtable;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
 
 import javax.naming.Binding;
 import javax.naming.Context;
@@ -32,194 +30,174 @@
 import javax.naming.NameParser;
 import javax.naming.NamingEnumeration;
 import javax.naming.NamingException;
+import javax.naming.NoInitialContextException;
 import javax.naming.directory.Attributes;
 import javax.naming.directory.DirContext;
 import javax.naming.directory.ModificationItem;
 import javax.naming.directory.SearchControls;
 
-public class DelegateContext implements DirContext
-{
+import org.apache.aries.jndi.ContextHelper.ContextProvider;
+import org.osgi.framework.BundleContext;
+
+public class DelegateContext implements DirContext {
+    
   private Hashtable<Object, Object> env = new Hashtable<Object, Object>();
-  private Context defaultContext;
-  private static ConcurrentMap<String, Context> urlContexts = new ConcurrentHashMap<String, Context>();
 
-  public DelegateContext(Hashtable<?, ?> theEnv)
-  {
+    private BundleContext bundleContext;
+    private ContextProvider contextProvider;
+    private boolean rebind;
+
+    public DelegateContext(BundleContext bundleContext, Hashtable<?, ?> theEnv) {
+        this.bundleContext = bundleContext;
     env.putAll(theEnv);
+        rebind = false;
   }
   
-  public DelegateContext(Context ctx) throws NamingException
-	{
-
-  		defaultContext = ctx;
-			env.putAll(ctx.getEnvironment());
-
+    public DelegateContext(BundleContext bundleContext, ContextProvider contextProvider) throws NamingException {
+        this.bundleContext = bundleContext;
+        this.contextProvider = contextProvider;
+        env.putAll(contextProvider.context.getEnvironment());
+        rebind = true;
 	}
 
-	public Object addToEnvironment(String propName, Object propVal) throws NamingException
-  {
+    public Object addToEnvironment(String propName, Object propVal) throws NamingException {
     Context ctx = getDefaultContext();
     
-    if (ctx != null) ctx.addToEnvironment(propName, propVal);
+        if (ctx != null) {
+            ctx.addToEnvironment(propName, propVal);
+        }
     
     return env.put(propName, propVal);
   }
 
-  public void bind(Name name, Object obj) throws NamingException
-  {
+    public void bind(Name name, Object obj) throws NamingException {
     findContext(name).bind(name, obj);
   }
 
-  public void bind(String name, Object obj) throws NamingException
-  {
+    public void bind(String name, Object obj) throws NamingException {
     findContext(name).bind(name, obj);
   }
 
-  public void close() throws NamingException
-  {
-    if (defaultContext != null) defaultContext.close();
+    public void close() throws NamingException {
+        if (contextProvider != null) {
+            contextProvider.context.close();
+        }
     env.clear();
   }
 
-  public Name composeName(Name name, Name prefix) throws NamingException
-  {
+    public Name composeName(Name name, Name prefix) throws NamingException {
     return findContext(name).composeName(name, prefix);
   }
 
-  public String composeName(String name, String prefix) throws NamingException
-  {
+    public String composeName(String name, String prefix) throws NamingException {
     return findContext(name).composeName(name, prefix);
   }
 
-  public Context createSubcontext(Name name) throws NamingException
-  {
+    public Context createSubcontext(Name name) throws NamingException {
     return findContext(name).createSubcontext(name);
   }
 
-  public Context createSubcontext(String name) throws NamingException
-  {
+    public Context createSubcontext(String name) throws NamingException {
     return findContext(name).createSubcontext(name);
   }
 
-  public void destroySubcontext(Name name) throws NamingException
-  {
+    public void destroySubcontext(Name name) throws NamingException {
     findContext(name).destroySubcontext(name);
   }
 
-  public void destroySubcontext(String name) throws NamingException
-  {
+    public void destroySubcontext(String name) throws NamingException {
     findContext(name).destroySubcontext(name);
   }
 
-  public Hashtable<?, ?> getEnvironment() throws NamingException
-  {
+    public Hashtable<?, ?> getEnvironment() throws NamingException {
     Hashtable<Object, Object> theEnv = new Hashtable<Object, Object>();
     theEnv.putAll(env);
     return theEnv;
   }
 
-  public String getNameInNamespace() throws NamingException
-  {
+    public String getNameInNamespace() throws NamingException {
     return getDefaultContext().getNameInNamespace();
   }
 
-  public NameParser getNameParser(Name name) throws NamingException
-  {
+    public NameParser getNameParser(Name name) throws NamingException {
     return findContext(name).getNameParser(name);
   }
 
-  public NameParser getNameParser(String name) throws NamingException
-  {
+    public NameParser getNameParser(String name) throws NamingException {
     return findContext(name).getNameParser(name);
   }
 
-  public NamingEnumeration<NameClassPair> list(Name name) throws NamingException
-  {
+    public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {
     return findContext(name).list(name);
   }
 
-  public NamingEnumeration<NameClassPair> list(String name) throws NamingException
-  {
+    public NamingEnumeration<NameClassPair> list(String name) throws NamingException {
     return findContext(name).list(name);
   }
 
-  public NamingEnumeration<Binding> listBindings(Name name) throws NamingException
-  {
+    public NamingEnumeration<Binding> listBindings(Name name) throws NamingException {
     return findContext(name).listBindings(name);
   }
 
-  public NamingEnumeration<Binding> listBindings(String name) throws NamingException
-  {
+    public NamingEnumeration<Binding> listBindings(String name) throws NamingException {
     return findContext(name).listBindings(name);
   }
 
-  public Object lookup(Name name) throws NamingException
-  {
+    public Object lookup(Name name) throws NamingException {
     return findContext(name).lookup(name);
   }
 
-  public Object lookup(String name) throws NamingException
-  {
+    public Object lookup(String name) throws NamingException {
     return findContext(name).lookup(name);
   }
 
-  public Object lookupLink(Name name) throws NamingException
-  {
+    public Object lookupLink(Name name) throws NamingException {
     return findContext(name).lookupLink(name);
   }
 
-  public Object lookupLink(String name) throws NamingException
-  {
+    public Object lookupLink(String name) throws NamingException {
     return findContext(name).lookupLink(name);
   }
 
-  public void rebind(Name name, Object obj) throws NamingException
-  {
+    public void rebind(Name name, Object obj) throws NamingException {
     findContext(name).rebind(name, obj);
   }
 
-  public void rebind(String name, Object obj) throws NamingException
-  {
+    public void rebind(String name, Object obj) throws NamingException {
     findContext(name).rebind(name, obj);
   }
 
-  public Object removeFromEnvironment(String propName) throws NamingException
-  {
+    public Object removeFromEnvironment(String propName) throws NamingException {
     Context ctx = getDefaultContext();
     
-    if (ctx != null) ctx.removeFromEnvironment(propName);
+        if (ctx != null) {
+            ctx.removeFromEnvironment(propName);
+        }
     
     return env.remove(propName);
   }
 
-  public void rename(Name oldName, Name newName) throws NamingException
-  {
+    public void rename(Name oldName, Name newName) throws NamingException {
     findContext(oldName).rename(oldName, newName);
   }
 
-  public void rename(String oldName, String newName) throws NamingException
-  {
+    public void rename(String oldName, String newName) throws NamingException {
     findContext(oldName).rename(oldName, newName);
   }
 
-  public void unbind(Name name) throws NamingException
-  {
+    public void unbind(Name name) throws NamingException {
     findContext(name).unbind(name);
   }
 
-  public void unbind(String name) throws NamingException
-  {
+    public void unbind(String name) throws NamingException {
     findContext(name).unbind(name);
   }
 
-  protected Context findContext(Name name) throws NamingException
-  {
+    protected Context findContext(Name name) throws NamingException {
     return findContext(name.toString());
   }
 
-  
-  protected Context findContext(String name) throws NamingException
-  {
+    protected Context findContext(String name) throws NamingException {
   	Context toReturn = null;
   	
   	if (name.contains(":")) {
@@ -228,12 +206,10 @@ protected Context findContext(String name) throws NamingException
       toReturn =  getDefaultContext();
     }
     
-  	if (toReturn != null)
-  	{
+        if (toReturn != null) {
   		String packages = System.getProperty(Context.URL_PKG_PREFIXES, null);
   		
-  		if (packages != null)
-  		{
+            if (packages != null) {
   			toReturn.addToEnvironment(Context.URL_PKG_PREFIXES, packages);	
   		}
   	}
@@ -241,16 +217,22 @@ protected Context findContext(String name) throws NamingException
     return toReturn;
   }
 
-  private Context getDefaultContext() throws NamingException
-  {
-    if (defaultContext == null) {
-      defaultContext = ContextHelper.createContext(env);
+    private Context getDefaultContext() throws NamingException {
+        if (rebind) {
+            if (contextProvider == null || !contextProvider.isValid()) {
+                contextProvider = ContextHelper.getContextProvider(bundleContext, env);
+            }
+            if (contextProvider == null) {
+                throw new NoInitialContextException();
+            } else {
+                return contextProvider.context;
+            }
+        } else {
+            throw new NoInitialContextException();
     }
-    return defaultContext;
   }
 
-  private Context getURLContext(String name) throws NamingException
-  {
+    private Context getURLContext(String name) throws NamingException {
     Context ctx = null;
     
     int index = name.indexOf(':');
@@ -268,132 +250,123 @@ private Context getURLContext(String name) throws NamingException
     return ctx;
   }
   
-  /**
-   * This method allows the caller to set the default context if one is to hand.
-   * Normally the context would be lazily constructed upon first use, but this
-   * if one already exists when this is created it can be pushed in.
-   * 
-   * @param ctx the context to use.
-   */
-  public void setDefaultContext(Context ctx)
-  {
-    defaultContext = ctx;
-  }
-  
-  /**
-   * This method allows URL contexts to be pushed in. We should probably be 
-   * pushing in references to the ObjectFactory for the url Object Factory, but
-   * for now lets just push the context itself in.
-   * 
-   * @param url
-   * @param ctx
-   */
-  public void setURLContext(String url, Context ctx)
-  {
-    urlContexts.put(url, ctx);
-  }
-  
   public Attributes getAttributes(Name name) throws NamingException {
-      return ((DirContext)findContext(name)).getAttributes(name);
+        return ((DirContext) findContext(name)).getAttributes(name);
   }
   
   public Attributes getAttributes(String name) throws NamingException {
-      return ((DirContext)findContext(name)).getAttributes(name);
+        return ((DirContext) findContext(name)).getAttributes(name);
   }
   
   public Attributes getAttributes(Name name, String[] attrIds) throws NamingException {
-      return ((DirContext)findContext(name)).getAttributes(name, attrIds);
+        return ((DirContext) findContext(name)).getAttributes(name, attrIds);
   }
   
   public Attributes getAttributes(String name, String[] attrIds) throws NamingException {
-      return ((DirContext)findContext(name)).getAttributes(name, attrIds);
+        return ((DirContext) findContext(name)).getAttributes(name, attrIds);
   }
   
   public void modifyAttributes(Name name, int mod_op, Attributes attrs) throws NamingException {
-      ((DirContext)findContext(name)).modifyAttributes(name, mod_op, attrs);
+        ((DirContext) findContext(name)).modifyAttributes(name, mod_op, attrs);
   }
   
   public void modifyAttributes(String name, int mod_op, Attributes attrs) throws NamingException {
-      ((DirContext)findContext(name)).modifyAttributes(name, mod_op, attrs);
+        ((DirContext) findContext(name)).modifyAttributes(name, mod_op, attrs);
   }
   
   public void modifyAttributes(Name name, ModificationItem[] mods) throws NamingException {
-      ((DirContext)findContext(name)).modifyAttributes(name, mods);
+        ((DirContext) findContext(name)).modifyAttributes(name, mods);
   }
   
   public void modifyAttributes(String name, ModificationItem[] mods) throws NamingException {
-      ((DirContext)findContext(name)).modifyAttributes(name, mods);
+        ((DirContext) findContext(name)).modifyAttributes(name, mods);
   }
   
   public void bind(Name name, Object obj, Attributes attrs) throws NamingException {
-      ((DirContext)findContext(name)).bind(name, obj, attrs);
+        ((DirContext) findContext(name)).bind(name, obj, attrs);
   }
   
   public void bind(String name, Object obj, Attributes attrs) throws NamingException {
-      ((DirContext)findContext(name)).bind(name, obj, attrs);
+        ((DirContext) findContext(name)).bind(name, obj, attrs);
   }
 
   public void rebind(Name name, Object obj, Attributes attrs) throws NamingException {
-      ((DirContext)findContext(name)).rebind(name, obj, attrs);
+        ((DirContext) findContext(name)).rebind(name, obj, attrs);
   }
 
   public void rebind(String name, Object obj, Attributes attrs) throws NamingException {
-      ((DirContext)findContext(name)).rebind(name, obj, attrs);
+        ((DirContext) findContext(name)).rebind(name, obj, attrs);
   }
 
   public DirContext createSubcontext(Name name, Attributes attrs) throws NamingException {
-      return ((DirContext)findContext(name)).createSubcontext(name, attrs);
+        return ((DirContext) findContext(name)).createSubcontext(name, attrs);
   }
 
   public DirContext createSubcontext(String name, Attributes attrs) throws NamingException {
-      return ((DirContext)findContext(name)).createSubcontext(name, attrs);
+        return ((DirContext) findContext(name)).createSubcontext(name, attrs);
   }
 
   public DirContext getSchema(Name name) throws NamingException {
-      return ((DirContext)findContext(name)).getSchema(name);
+        return ((DirContext) findContext(name)).getSchema(name);
   }
 
   public DirContext getSchema(String name) throws NamingException {
-      return ((DirContext)findContext(name)).getSchema(name);
+        return ((DirContext) findContext(name)).getSchema(name);
   }
 
   public DirContext getSchemaClassDefinition(Name name) throws NamingException {
-      return ((DirContext)findContext(name)).getSchemaClassDefinition(name);
+        return ((DirContext) findContext(name)).getSchemaClassDefinition(name);
   }
 
   public DirContext getSchemaClassDefinition(String name) throws NamingException {
-      return ((DirContext)findContext(name)).getSchemaClassDefinition(name);
+        return ((DirContext) findContext(name)).getSchemaClassDefinition(name);
   }
 
-  public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, matchingAttributes, attributesToReturn);
+    public NamingEnumeration search(Name name,
+                                    Attributes matchingAttributes,
+                                    String[] attributesToReturn) throws NamingException {
+        return ((DirContext) findContext(name))
+                .search(name, matchingAttributes, attributesToReturn);
   }
 
-  public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, matchingAttributes, attributesToReturn);
+    public NamingEnumeration search(String name,
+                                    Attributes matchingAttributes,
+                                    String[] attributesToReturn) throws NamingException {
+        return ((DirContext) findContext(name))
+                .search(name, matchingAttributes, attributesToReturn);
   }
 
-  public NamingEnumeration search(Name name, Attributes matchingAttributes) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, matchingAttributes);
+    public NamingEnumeration search(Name name, Attributes matchingAttributes)
+            throws NamingException {
+        return ((DirContext) findContext(name)).search(name, matchingAttributes);
   }
 
-  public NamingEnumeration search(String name, Attributes matchingAttributes) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, matchingAttributes);
+    public NamingEnumeration search(String name, Attributes matchingAttributes)
+            throws NamingException {
+        return ((DirContext) findContext(name)).search(name, matchingAttributes);
   }
 
-  public NamingEnumeration search(Name name, String filter, SearchControls cons) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, filter, cons);
+    public NamingEnumeration search(Name name, String filter, SearchControls cons)
+            throws NamingException {
+        return ((DirContext) findContext(name)).search(name, filter, cons);
   }
 
-  public NamingEnumeration search(String name, String filter, SearchControls cons) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, filter, cons);
+    public NamingEnumeration search(String name, String filter, SearchControls cons)
+            throws NamingException {
+        return ((DirContext) findContext(name)).search(name, filter, cons);
   }
 
-  public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, filterExpr, filterArgs, cons);
+    public NamingEnumeration search(Name name,
+                                    String filterExpr,
+                                    Object[] filterArgs,
+                                    SearchControls cons) throws NamingException {
+        return ((DirContext) findContext(name)).search(name, filterExpr, filterArgs, cons);
   }
 
-  public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) throws NamingException {
-      return ((DirContext)findContext(name)).search(name, filterExpr, filterArgs, cons);
+    public NamingEnumeration search(String name,
+                                    String filterExpr,
+                                    Object[] filterArgs,
+                                    SearchControls cons) throws NamingException {
+        return ((DirContext) findContext(name)).search(name, filterExpr, filterArgs, cons);
   }
 }
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/JREInitialContextFactoryBuilder.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/JREInitialContextFactoryBuilder.java
index e69de29b..750c6b62 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/JREInitialContextFactoryBuilder.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/JREInitialContextFactoryBuilder.java
@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.jndi;
+
+import java.util.Hashtable;
+
+import javax.naming.Context;
+import javax.naming.NamingException;
+import javax.naming.spi.InitialContextFactory;
+import javax.naming.spi.InitialContextFactoryBuilder;
+
+public class JREInitialContextFactoryBuilder implements InitialContextFactoryBuilder {
+
+    public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
+        throws NamingException {
+        String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
+        if (contextFactoryClass != null) {
+            try {
+                Class clazz = ClassLoader.getSystemClassLoader().loadClass(contextFactoryClass);
+                return InitialContextFactory.class.cast(clazz.newInstance());
+            } catch (Exception e) {
+                return null;
+            }
+        }
+        return null;
+    }
+   
+}
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
index cd2d1f40..7ebd2f52 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
@@ -18,18 +18,14 @@
  */
 package org.apache.aries.jndi;
 
-import java.util.Arrays;
 import java.util.Hashtable;
 
 import javax.naming.Context;
 import javax.naming.NamingException;
-import javax.naming.NoInitialContextException;
 import javax.naming.spi.InitialContextFactory;
 import javax.naming.spi.InitialContextFactoryBuilder;
 
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.InvalidSyntaxException;
-import org.osgi.framework.ServiceReference;
 
 public class OSGiInitialContextFactoryBuilder implements InitialContextFactoryBuilder, InitialContextFactory {
 
@@ -49,105 +45,7 @@ public Context getInitialContext(Hashtable<?, ?> environment)
 	    
 	    // TODO: use caller's bundle context
 	    
-	    Context initialContext = null;
-	    
-	    String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
-	    if (contextFactoryClass == null) {
-	        // 1. get ContextFactory using builder
-	        initialContext = getInitialContextUsingBuilder(_context, environment);
-	        
-	        // 2. lookup all ContextFactory services
-	        if (initialContext == null) {
-	            String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory))";
-	            ServiceReference[] references = null;
-	            try {
-	                references = _context.getAllServiceReferences(InitialContextFactory.class.getName(), filter);
-	            } catch (InvalidSyntaxException e) {
-	                NamingException ex = new NamingException("Bad filter: " + filter);
-	                ex.initCause(e);    
-	                throw ex;
-	            }
-	            if (references != null) {
-	                for (int i = 0; i < references.length && initialContext == null; i++) {
-	                    ServiceReference reference = references[i];	                    
-	                    InitialContextFactory factory = (InitialContextFactory) _context.getService(reference);
-	                    try {
-	                        initialContext = factory.getInitialContext(environment);
-	                    } finally {	                  
-	                        _context.ungetService(reference);
-	                    }
-	                }
-	            }
-	        }
-	        
-	        if (initialContext == null) {
-	            // TODO: only url based lookups are allowed
-	            return new DelegateContext(environment);
-	        } else {
-	            return new DelegateContext(initialContext);
-	        }
-	    } else {
-	        // 1. lookup ContextFactory using the factory class
-	        String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory)(objectClass=" + contextFactoryClass + "))";
-	        ServiceReference[] references = null;
-	        try {
-	            references = _context.getServiceReferences(InitialContextFactory.class.getName(), filter);
-	        } catch (InvalidSyntaxException e) {
-	            NamingException ex = new NamingException("Bad filter: " + filter);
-	            ex.initCause(e);    
-	            throw ex;
-	        }
-	        
-	        if (references != null && references.length > 0) {
-	            Arrays.sort(references);
-	            ServiceReference factoryReference = references[0];
-	            InitialContextFactory factory = (InitialContextFactory)_context.getService(factoryReference);
-	            try {
-	                initialContext = factory.getInitialContext(environment);
-	            } finally {
-	                _context.ungetService(factoryReference);
-	            }
-	        }	        
-	        
-	        // 2. get ContextFactory using builder
-	        if (initialContext == null) {
-	            initialContext = getInitialContextUsingBuilder(_context, environment);
+	    return ContextHelper.getInitialContext(_context, environment);
 	        }
 	        
-	        if (initialContext == null) {
-	            throw new NoInitialContextException("We could not find an InitialContextFactory to use");
-	        } else {
-	            return new DelegateContext(initialContext);
-	        }
-	    }	   
-	}
-	
-	private static Context getInitialContextUsingBuilder(BundleContext context, Hashtable<?, ?> environment) 
-        throws NamingException {
-	    InitialContextFactory factory = getInitialContextFactoryBuilder(context, environment);
-	    return (factory == null) ? null : factory.getInitialContext(environment);
-	}
-	
-	private static InitialContextFactory getInitialContextFactoryBuilder(BundleContext context, Hashtable<?, ?> environment) 
-	    throws NamingException {
-	    InitialContextFactory factory = null;
-	    try {
-	        ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
-	        if (refs != null) {
-	            Arrays.sort(refs);
-	            for (int i = 0; i < refs.length && factory == null; i++) {
-	                ServiceReference ref = refs[i];	                
-	                InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
-	                try {
-	                    factory = builder.createInitialContextFactory(environment);
-	                } finally {	              
-	                    context.ungetService(ref);
-	                }
-	            }
-	        }	        
-	    } catch (InvalidSyntaxException e) {
-	        // ignore - should never happen
-	    }
-	    return factory;
-	}
 }
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
index 440f7d2f..f24a00b2 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
@@ -21,13 +21,21 @@
  */
 package org.apache.aries.jndi.startup;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import javax.naming.NamingException;
+import javax.naming.spi.InitialContextFactoryBuilder;
 import javax.naming.spi.NamingManager;
 
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
+import org.osgi.framework.ServiceRegistration;
+import org.osgi.service.jndi.JNDIContextManager;
 
 import org.apache.aries.jndi.ContextHelper;
+import org.apache.aries.jndi.ContextManagerServiceFactory;
+import org.apache.aries.jndi.JREInitialContextFactoryBuilder;
 import org.apache.aries.jndi.OSGiInitialContextFactoryBuilder;
 import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
 
@@ -35,10 +43,21 @@
  * The activator for this bundle makes sure the static classes in it are
  * driven so they can do their magic stuff properly.
  */
-public class Activator implements BundleActivator
-{
-  public void start(BundleContext context)
-  {
+public class Activator implements BundleActivator {
+    
+    private List<ServiceRegistration> registrations = new ArrayList<ServiceRegistration>();
+    
+    public void start(BundleContext context) {
+  
+        registrations.add(context.registerService(InitialContextFactoryBuilder.class.getName(), 
+                                                 new JREInitialContextFactoryBuilder(), 
+                                                 null));
+        
+        ContextManagerServiceFactory contextManagerFactory = new ContextManagerServiceFactory();
+        registrations.add(context.registerService(JNDIContextManager.class.getName(), 
+                                                  contextManagerFactory, 
+                                                  null));
+        
     ContextHelper.setBundleContext(context);
     OSGiObjectFactoryBuilder.setBundleContext(context);
   
@@ -61,5 +80,10 @@ public void start(BundleContext context)
     }
   }
 
-  public void stop(BundleContext context) {}
+    public void stop(BundleContext context) {
+        for (ServiceRegistration registration : registrations) {
+            registration.unregister();
+        }
+        registrations.clear();
+    }
 }
