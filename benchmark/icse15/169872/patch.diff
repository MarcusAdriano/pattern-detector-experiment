diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java
index 06291b2d..e55dce8a 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java
@@ -349,7 +349,6 @@ ScanManager openScan(
      *
 	 * @return The GroupFetchScanController to be used to fetch the rows.
      *
-	 * @param conglomId             see openScan()
      * @param hold                  see openScan()
      * @param open_mode             see openScan()
      * @param lock_level            see openScan()
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java
index 2c0e62e9..790d8841 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java
@@ -183,7 +183,7 @@ void fetchSet(
      * For some conglomerates this may be a no-op.
      * <p>
      *
-     * @param conlgom   Conglomerate object of the conglomerate being changed.
+     * @param conglom   Conglomerate object of the conglomerate being changed.
      * @param page      Page in the conglomerate being changed.
      *
 	 * @exception  StandardException  Standard exception policy.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java
index 18c5ff7c..e667e5f1 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java
@@ -167,7 +167,7 @@ public Transaction getRawStoreXact()
      * For some conglomerates this may be a no-op.
      * <p>
      *
-     * @param conlgom   Conglomerate object of the conglomerate being changed.
+     * @param conglom   Conglomerate object of the conglomerate being changed.
      * @param page      Page in the conglomerate being changed.
      *
 	 * @exception  StandardException  Standard exception policy.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java
index d2238a80..c4315e84 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java
@@ -159,7 +159,7 @@ public void lockRecordForRead(
 
         @param t                        Transaction to associate lock with.
         @param record                   Record to lock.
-        @param lockForInsertPreviouskey Lock is for a previous key of a insert.
+        @param lockForPreviousKey       Lock is for a previous key of a insert.
         @param waitForLock              Should lock request wait until granted?
 
 		@return true if the lock was obtained, false if it wasn't. 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java
index 5629c8be..89265e4b 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java
@@ -71,14 +71,14 @@ public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 
 	/**
 		The log operations are responsible to create the ByteArray, and the log
-		operations should write out any optional data for the change to the ByteArray.
+		operations should write out any optional data for the change to the 
+        ByteArray.
 		The ByteArray can be prepared when the log operation is constructed,
 		or it can be prepared when getPreparedLog() is called.
 
 		Called by the log manager to allow the log operation to pass the buffer
-		which contains optional data that will be available in to doMe() methods.
-
-		@param out Where and how to write to optional data.
+		which contains optional data that will be available in to doMe() 
+        methods.
 
 		@exception StandardException Standard Cloudscape policy.
 	
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java
index f358dd44..253e3014 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java
@@ -421,12 +421,13 @@ public boolean delete(
      * <BR>
      * A page latch on the new page will be requested and released.
      *
+     * @param slot           Slot of row to move.
+     * @param row            A template to read the current row into as part
+     *                       of moving it.
      * @param old_handle     An array to be filled in by the call with the 
      *                       old handles of all rows moved.
      * @param new_handle     An array to be filled in by the call with the 
      *                       new handles of all rows moved.
-     * @param new_pageno     An array to be filled in by the call with the 
-     *                       new page number of all rows moved.
      *
      * @return the number of rows processed.
      *
@@ -451,7 +452,7 @@ public int moveRecordForCompressAtSlot(
      * <BR>
      * MT - latched
      *
-     * @param record Handle to deleted or non-deleted record
+     * @param handle    record handle to deleted or non-deleted record
      *
      * @return the number of fields in the record
      *
@@ -622,7 +623,7 @@ RecordHandle insertAtSlot(
 		
 	*/
     /**
-     * Values for insertFlag:
+     * Values for insertFlag.
      * <p>
      *
      * INSERT_INITIAL			- flag initializer
@@ -671,7 +672,7 @@ RecordHandle insertAtSlot(
 
 
     /**
-     * Fetch a record located in the passed in slot
+     * Fetch a record located in the passed in slot.
      * <p>
      * Fetch a record located in the passed in slot and fill-in the passed in 
      * StorebleRow and the Object columns contained within. If row
@@ -764,7 +765,8 @@ public RecordHandle fetchFromSlot(
 		<P>
 		<B>Locking Policy</B>
 		<BR>
-			No locks are obtained. It is up to the caller to obtain the correct locks.
+			No locks are obtained. 
+            It is up to the caller to obtain the correct locks.
 		<BR>
 
 		It is guaranteed that the page latch is not released by this method
@@ -772,7 +774,6 @@ public RecordHandle fetchFromSlot(
 		@param slot is the slot number
 		@param fieldId is the column id
 		@param column is to be filled in with information from the record.
-		@param forUpdate true if the intention is to update this record, false otherwise.
 
 		@return the Handle to the record that is locked
 
@@ -967,13 +968,14 @@ public RecordHandle deleteAtSlot(
      *
      * <BR>
 	 *<B>NOTE : Data Logging for Purges</B><BR>
-	 * @param needDataLogged is used to specify whether data is required to be
+	 * needDataLogged is used to specify whether data is required to be
 	 * logged for purge operatios. Data Logging is required 
 	 * Only if the row can be reused or required for key search if a purge is
 	 * rolled back;(rollback can occur if the system crashes in the middle of
 	 * purges or some unexpected error condiditions  rolled back.
 	 * For example: 
-	 * 1)Btree expects the data to be there if a purge is rolled back;needDataLogged=true
+	 * 1)Btree expects the data to be there if a purge is rolled back;
+     *   needDataLogged=true
 	 * 2)Heaps does not care if data exist because only operation that can occur
 	 * on a row whose purge rolled back is purging again.(needDataLogged=false)
 	 * 
@@ -981,17 +983,19 @@ public RecordHandle deleteAtSlot(
      *
      *
      * @param slot	    the starting slot number
-     * @param numpurges	number of slots to purge. 
-     *                  If <= 0, just returns as a no-op.
-	 * @param needDataLogged  if set to true data is logged for purges else only headers.
+     * @param numpurges	        number of slots to purge.  If <= 0, 
+     *                          just returns as a no-op.
+	 * @param needDataLogged    if set to true data is logged for purges else 
+     *                          only headers.
 	 *
      * @exception StandardException	Standard Cloudscape error policy
      * @see LockingPolicy
      **/
 	public void purgeAtSlot(
     int slot, 
-    int n,
-	boolean needDataLogged) throws StandardException;
+    int     numpurges,
+	boolean needDataLogged) 
+        throws StandardException;
 
 
     /**
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
index ec646405..b79a0189 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
@@ -413,7 +413,7 @@ The cleanupOnError() method of this context behaves as follows:
         @param format_id  the format id part of the Xid - ie. Xid.getFormatId().
         @param global_id  the global transaction identifier part of XID - ie.
                           Xid.getGlobalTransactionId().
-        @param branch_id  The branch qualifier of the Xid - ie. 
+        @param local_id   The branch qualifier of the Xid - ie. 
                           Xid.getBranchQaulifier()
 
 		@exception StandardException Standard Cloudscape error policy
@@ -435,9 +435,10 @@ public Transaction startGlobalTransaction(
 		current context manager.  If a user transaction does not already exist,
 		then create one @see #startTransaction
 
-		@param context is the context manager to use.  An exception will be
+		@param contextMgr the context manager to use.  An exception will be 
 		thrown if context is not the current context.
-        @param transName  If a new transaction is started, it will be given this name.
+        @param transName  If a new transaction is started, it will be given 
+                          this name.
         The name is displayed in the transactiontable VTI.
 
 		@exception StandardException Standard Cloudscape error policy
@@ -602,7 +603,6 @@ The cleanupOnError() method of this context behaves as follows:
 		context is popped off the stack.
 		</UL>
 
-		@param compatibilitySpace compatibility space to use for locks.
 		@param contextMgr is the context manager to use.  An exception will be
 		thrown if context is not the current context.
         @param transName is the name of the transaction. This name will be 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
index 63fc6030..f41b93ce 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
@@ -105,7 +105,7 @@ Obtain a locking policy for use in openContainer(). The mode
 
 		@param mode A constant of the form LockingPolicy.MODE_*
 		@param isolation A constant of the form LockingPolicy.ISOLATION_*
-		@param stricterOK True if a stricter level of locking is acceptable, 
+		@param stricterOk True if a stricter level of locking is acceptable, 
         false if an exact match is required.
 
 		@return A object that can be used in an openContainer call, 
@@ -322,7 +322,7 @@ as openContainer(int containerId,  boolean forUpdate).
         requested with no wait time, and if lock is not granted a 
         SQLState.LOCK_TIMEOUT exception will be thrown.
 
-		@param policy The lock policy to use, if null then then a no locking 
+		@param locking The lock policy to use, if null then then a no locking 
         policy will be used.
 
 		@return a valid ContainerHandle or null if the container does not exist.
@@ -331,8 +331,10 @@ as openContainer(int containerId,  boolean forUpdate).
 
 	*/
 
-	public ContainerHandle openContainer(ContainerKey containerId,
-										 LockingPolicy locking, int mode) 
+	public ContainerHandle openContainer(
+    ContainerKey    containerId,
+    LockingPolicy   locking, 
+    int             mode) 
 		throws StandardException;
 
 
@@ -540,7 +542,6 @@ public abstract void dropStreamContainer(long segmentId, long containerId)
      * can be delivered on a non-1.2 vm system and not require the javax classes
      * in the path.  
      *
-     * @param cm        The context manager for the current context.
      * @param format_id the format id part of the Xid - ie. Xid.getFormatId().
      * @param global_id the global transaction identifier part of XID - ie.
      *                  Xid.getGlobalTransactionId().
