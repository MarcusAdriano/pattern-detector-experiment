diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/memory/LowMemory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/memory/LowMemory.java
index 822fe632..f0f5d951 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/memory/LowMemory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/memory/LowMemory.java
@@ -90,13 +90,20 @@ public void setLowMemory() {
             // up some memory that throws off our calcuation. This is
             // avoided by clearing lowMemory some time later on an
             // isLowMemory() call.
+            boolean interrupted = false;
+
             for (int i = 0; i < 5; i++) {
                 System.gc();
                 System.runFinalization();
                 try {
                     Thread.sleep(50L);
                 } catch (InterruptedException e) {
+                    interrupted = true;
+                }
                 }
+            if (interrupted) {
+                // reinstate flag
+                Thread.currentThread().interrupt();
             }
         }
         synchronized (this) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
index 0c09ef28..a671e059 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
@@ -58,7 +58,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     /**
      * Use thread local variable to store interrupt status flag *only* if we
-     * don't have lcc, e.g. during database creation.
+     * don't have lcc, e.g. during database creation, shutdown etc.
      */
     private static final ThreadLocal exception = new ThreadLocal ();
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
index f6115dfa..9d78315d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.iapi.services.context.ContextService;
 import org.apache.derby.iapi.services.monitor.Monitor;
+import org.apache.derby.iapi.util.InterruptStatus;
 import org.apache.derby.iapi.store.replication.slave.SlaveFactory;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
@@ -271,7 +272,7 @@ public void failover(String dbname) throws StandardException {
                 try {
                     Thread.sleep(500);
                 } catch (InterruptedException ie) {
-                // do nothing
+                    InterruptStatus.setInterrupted();
                 }
             }
         } else {
@@ -347,7 +348,7 @@ private void verifySuccessfulBoot() throws StandardException {
                 try {
                     Thread.sleep(500);
                 } catch (InterruptedException ie) {
-                    // do nothing
+                    InterruptStatus.setInterrupted();
                 }
             }
         }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index 4bcd802e..ca9c4a3a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -2614,22 +2614,27 @@ private void checkDatabaseCreatePrivileges(String user,
     }
 
     /**
-     * Puts the current thread to sleep and sets the interrupt flag of the
-     * thread if an {@code InterruptedException} is thrown while sleeping.
+     * Puts the current thread to sleep.
      * <p>
-     * <em>NOTE</em>: This method does not guarantee that the thread sleeps at
+     * <em>NOTE</em>: This method guarantees that the thread sleeps at
      * least {@code millis} milliseconds.
      *
      * @param millis milliseconds to sleep
      */
     private static void sleep(long millis) {
+        long startMillis = System.currentTimeMillis();
+        long waited = 0L;
+        while (waited < millis) {
         try {
-            Thread.sleep(millis);
+                Thread.sleep(millis - waited);
         } catch (InterruptedException ie) {
-            // Set the interrupt flag of the thread to allow code higher up the
-            // stack to detect the interruption.
-            Thread.currentThread().interrupt();
+                InterruptStatus.setInterrupted();
+                waited = System.currentTimeMillis() - startMillis;
+                continue;
+            }
+            break;
         }
+
     }
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
index 3b2c2cae..e7d0caea 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
@@ -51,6 +51,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.access.ScanController;
 import org.apache.derby.iapi.store.access.TransactionController;
 import org.apache.derby.iapi.types.DataValueDescriptor;
+import org.apache.derby.iapi.util.InterruptStatus;
 
 /**
  * Daemon acting as a coordinator for creating and updating index cardinality
@@ -959,8 +960,7 @@ private static void sleep(long ms) {
         try {
             Thread.sleep(ms);
         } catch (InterruptedException ie) {
-            // Set the interrupt flag again.
-            Thread.currentThread().interrupt();
+            InterruptStatus.setInterrupted();
         }
     }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
index 9a3ed496..a38fba9e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.iapi.util.InterruptStatus;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.reference.EngineType;
 
@@ -187,7 +188,7 @@ boolean isActiveService(ProtocolKey otherKey) {
 				try {
 					wait();
 				} catch (InterruptedException ioe) {
-					return false;
+                    InterruptStatus.setInterrupted();
 				}
 			}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java
index 4c9fe23c..33a89b30 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import javax.net.SocketFactory;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.util.InterruptStatus;
 import org.apache.derby.shared.common.reference.MessageId;
 
 /**
@@ -202,12 +203,25 @@ public void sendMessage(ReplicationMessage message) throws IOException {
         receivedMsg = null;
         checkSocketConnection();
         socketConn.writeMessage(message);
+        long startMillis = System.currentTimeMillis();
+        long waited = 0L;
+
+        while (receivedMsg == null &&
+               waited < DEFAULT_MESSAGE_RESPONSE_TIMEOUT) {
+
         synchronized (receiveSemaphore) {
             try {
-                receiveSemaphore.wait(DEFAULT_MESSAGE_RESPONSE_TIMEOUT);
+                    receiveSemaphore.wait(
+                        DEFAULT_MESSAGE_RESPONSE_TIMEOUT - waited);
             } catch (InterruptedException ie) {
+                    InterruptStatus.setInterrupted();
+                    waited = System.currentTimeMillis() - startMillis;
+                    continue;
             }
+                break;
         }
+        }
+
         if (receivedMsg == null) {
             throw StandardException.
                 newException(SQLState.REPLICATION_CONNECTION_LOST, dbname);
