diff --git a/lucene/dev/branches/lucene_solr_4_3/solr/core/src/java/org/apache/solr/request/SimpleFacets.java b/lucene/dev/branches/lucene_solr_4_3/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
index 7b7be5c3..ea9c0a58 100644
--- a/lucene/dev/branches/lucene_solr_4_3/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
+++ b/lucene/dev/branches/lucene_solr_4_3/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
@@ -150,6 +150,8 @@ protected void parseParams(String type, String param) throws SyntaxError, IOExce
     threads = -1;
 
     if (localParams == null) {
+      params = orig;
+      required = new RequiredSolrParams(params);
       return;
     }
     params = SolrParams.wrapDefaults(localParams, orig);
diff --git a/lucene/dev/branches/lucene_solr_4_3/solr/core/src/test/org/apache/solr/request/TestFaceting.java b/lucene/dev/branches/lucene_solr_4_3/solr/core/src/test/org/apache/solr/request/TestFaceting.java
index 6e4ffaa0..d2e4220e 100644
--- a/lucene/dev/branches/lucene_solr_4_3/solr/core/src/test/org/apache/solr/request/TestFaceting.java
+++ b/lucene/dev/branches/lucene_solr_4_3/solr/core/src/test/org/apache/solr/request/TestFaceting.java
@@ -496,6 +496,122 @@ public void testSimpleFacetCountsWithMultipleConfigurationsForSameField() {
               ,"//lst[@name='bar']/int[@name='Chauvinist'][.='1']"
               ,"//lst[@name='bar']/int[@name='Obnoxious'][.='1']"
               );
+
+      assertQ("localparams in one facet variant should not affect defaults in another: facet.sort vs facet.missing",
+                  req("q", "id:[42 TO 47]"
+                          ,"rows","0"
+                          ,"facet", "true"
+                          ,"fq", "id:[42 TO 45]"
+                          ,"facet.field", "{!key=foo " +
+                              "facet.sort=index" +
+                          "}"+fname
+                          ,"facet.field", "{!key=bar " +
+                              "facet.missing=true" +
+                          "}"+fname
+                          )
+                      // foo is in index order w/o missing
+                      ,"*[count(//lst[@name='foo']/int)=4]"
+                  ,"//lst[@name='foo']/int[1][@name='Chauvinist'][.='1']"
+                  ,"//lst[@name='foo']/int[2][@name='Obnoxious'][.='1']"
+                  ,"//lst[@name='foo']/int[3][@name='Pig'][.='0']"
+                  ,"//lst[@name='foo']/int[4][@name='Tool'][.='2']"
+                  // bar is in count order by default and includes missing
+                  ,"*[count(//lst[@name='bar']/int)=5]"
+                  ,"//lst[@name='bar']/int[1][@name='Tool'][.='2']"
+                  // don't assume tie breaker for slots 3 & 4, behavior undefined?
+                  ,"//lst[@name='bar']/int[4][@name='Pig'][.='0']"
+                  ,"//lst[@name='bar']/int[5][not(@name)][.='1']"
+                  );
+
+      assertQ("localparams in one facet variant should not affect defaults in another: facet.mincount",
+                  req("q", "id:[42 TO 47]"
+                          ,"rows","0"
+                          ,"facet", "true"
+                          ,"fq", "id:[42 TO 45]"
+                          ,"facet.field", "{!key=foo " +
+                              "facet.mincount=2" +
+                          "}"+fname
+                          ,"facet.field", "{!key=bar}"+fname
+                          )
+                      // only Tool for foo
+                      ,"*[count(//lst[@name='foo']/int)=1]"
+                  ,"//lst[@name='foo']/int[1][@name='Tool'][.='2']"
+                  // all for bar
+                  ,"*[count(//lst[@name='bar']/int)=4]"
+                  ,"//lst[@name='bar']/int[1][@name='Tool'][.='2']"
+                  // don't assume tie breaker for slots 3 & 4, behavior undefined?
+                  ,"//lst[@name='bar']/int[4][@name='Pig'][.='0']"
+                  );
+
+      assertQ("localparams in one facet variant should not affect defaults in another: facet.missing",
+                  req("q", "id:[42 TO 47]"
+                          ,"rows","0"
+                          ,"facet", "true"
+                          ,"fq", "id:[42 TO 45]"
+                          ,"facet.field", "{!key=foo " +
+                              "facet.missing=true" +
+                          "}"+fname
+                          ,"facet.field", "{!key=bar}"+fname
+                          )
+                      // foo includes missing
+                      ,"*[count(//lst[@name='foo']/int)=5]"
+                  ,"//lst[@name='foo']/int[1][@name='Tool'][.='2']"
+                  // don't assume tie breaker for slots 3 & 4, behavior undefined?
+                  ,"//lst[@name='foo']/int[4][@name='Pig'][.='0']"
+                  ,"//lst[@name='foo']/int[5][not(@name)][.='1']"
+                  // bar does not
+                  ,"*[count(//lst[@name='bar']/int)=4]"
+                  ,"//lst[@name='bar']/int[1][@name='Tool'][.='2']"
+                  // don't assume tie breaker for slots 3 & 4, behavior undefined?
+                  ,"//lst[@name='bar']/int[4][@name='Pig'][.='0']"
+                  );
+
+      assertQ("checking facets when local facet.prefix param used after regular/raw field faceting",
+          req("q", "*:*"
+              ,"facet", "true"
+              ,"facet.field", fname
+              ,"facet.field", "{!key=foo " +
+              "facet.prefix=T "+
+              "}"+fname
+          )
+          ,"*[count(//doc)=6]"
+          ,"*[count(//lst[@name='" + fname + "']/int)=4]"
+          ,"*[count(//lst[@name='foo']/int)=1]"
+          ,"//lst[@name='foo']/int[@name='Tool'][.='2']"
+      );
+
+      assertQ("checking facets when local facet.prefix param used before regular/raw field faceting",
+          req("q", "*:*"
+              ,"facet", "true"
+              ,"facet.field", "{!key=foo " +
+              "facet.prefix=T "+
+              "}"+fname
+              ,"facet.field", fname
+          )
+          ,"*[count(//doc)=6]"
+          ,"*[count(//lst[@name='" + fname + "']/int)=4]"
+          ,"*[count(//lst[@name='foo']/int)=1]"
+          ,"//lst[@name='foo']/int[@name='Tool'][.='2']"
+      );
+
+      final String foo_range_facet = "{!key=foo facet.range.gap=2}val_i";
+      final String val_range_facet = "val_i";
+      for (boolean toggle : new boolean[] { true, false }) {
+          assertQ("local gap param mixed w/raw range faceting: " + toggle,
+                      req("q", "*:*"
+                              ,"facet", "true"
+                              ,"rows", "0"
+                              ,"facet.range.start", "0"
+                              ,"facet.range.end", "10"
+                              ,"facet.range.gap", "1"
+                              ,"facet.range", (toggle ? foo_range_facet : val_range_facet)
+                              ,"facet.range", (toggle ? val_range_facet : foo_range_facet)
+                              )
+                          ,"*[count(//lst[@name='val_i']/lst[@name='counts']/int)=10]"
+                      ,"*[count(//lst[@name='foo']/lst[@name='counts']/int)=5]"
+                      );
+        }
+
       clearIndex();
       assertU(commit());
   }
