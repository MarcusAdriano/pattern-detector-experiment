diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
index 06ee01bc..435c4584 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
@@ -151,16 +151,6 @@ public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {
     return arr;
   }
 
-  @Override
-  public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-    throw new UnsupportedOperationException();
-  }
-
   @Override
   public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
     encode(toLongArray(values, valuesOffset, iterations * valueCount()), 0, blocks, blocksOffset, iterations);
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java
index b4c21619..41ef456d 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked1 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -103,6 +106,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -182,6 +186,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -254,6 +259,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -333,6 +339,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -341,6 +348,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java
index d91cf088..20d23d7c 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked10 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 5;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -75,6 +78,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -154,6 +158,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -198,6 +203,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -277,6 +283,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -289,6 +296,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java
index 603fc356..9788cae5 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked11 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 11;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -113,6 +116,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -272,6 +276,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -354,6 +359,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -513,6 +519,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -531,6 +538,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java
index aaffb9c5..c944982e 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked12 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 3;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -57,6 +60,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -104,6 +108,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -130,6 +135,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -177,6 +183,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -187,6 +194,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java
index f924ce4b..f1a08a45 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked13 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 13;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -115,6 +118,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -290,6 +294,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -374,6 +379,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -549,6 +555,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -569,6 +576,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java
index 92249483..9b5198be 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked14 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 7;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -77,6 +80,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -172,6 +176,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -218,6 +223,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -313,6 +319,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -327,6 +334,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java
index 00b8c550..90319279 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked15 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 15;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -117,6 +120,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -308,6 +312,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -394,6 +399,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -585,6 +591,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -607,6 +614,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java
index 4f751705..93aee65c 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked16 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
     }
 
+    @Override
     public int valueCount() {
       return 4;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -43,6 +46,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -62,6 +66,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -74,6 +79,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -93,6 +99,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -101,6 +108,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java
index 0aa56ee0..b2a150e7 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked17 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 17;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -119,6 +122,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -326,6 +330,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -414,6 +419,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -621,6 +627,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -645,6 +652,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java
index 1bf712e7..7a641ff2 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked18 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 9;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -79,6 +82,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -190,6 +194,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -238,6 +243,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -349,6 +355,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -365,6 +372,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java
index bcaea4be..a67dc35a 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked19 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 19;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -121,6 +124,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -344,6 +348,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -434,6 +439,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -657,6 +663,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -683,6 +690,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java
index d9989991..39ac3e66 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked2 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -71,6 +74,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -118,6 +122,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -158,6 +163,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -205,6 +211,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -213,6 +220,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java
index cb0fe50b..aa9f4bf1 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked20 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 5;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -59,6 +62,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -122,6 +126,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -150,6 +155,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -213,6 +219,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -225,6 +232,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java
index 2fd69b3e..d02b0bf0 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked21 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 21;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -123,6 +126,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -362,6 +366,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -454,6 +459,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -693,6 +699,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -721,6 +728,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java
index c9f2776a..67943e87 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked22 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 11;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -81,6 +84,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -208,6 +212,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -258,6 +263,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -385,6 +391,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -403,6 +410,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java
index e04b5fd0..e2ee7bff 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked23 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 23;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -125,6 +128,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -380,6 +384,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -474,6 +479,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -729,6 +735,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -759,6 +766,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java
index 8b0d1327..c8138efc 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked24 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 3;
     }
 
+    @Override
     public int valueCount() {
       return 8;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -49,6 +52,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -88,6 +92,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -106,6 +111,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -145,6 +151,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -155,6 +162,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked25.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked25.java
index 19719534..51803516 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked25.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked25.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked25 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 25;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -127,6 +130,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -398,6 +402,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -494,6 +499,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -765,6 +771,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -797,6 +804,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26.java
index f1a5c03e..03e3e4a1 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked26 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 13;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -83,6 +86,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -226,6 +230,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -278,6 +283,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -421,6 +427,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -441,6 +448,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked27.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked27.java
index 9f6dbbea..0dd7837b 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked27.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked27.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked27 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 27;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -129,6 +132,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -416,6 +420,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -514,6 +519,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -801,6 +807,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -835,6 +842,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked28.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked28.java
index 4d91807b..64a0f313 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked28.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked28.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked28 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 7;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -61,6 +64,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -140,6 +144,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -170,6 +175,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -249,6 +255,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -263,6 +270,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked29.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked29.java
index dca141fa..a880c8c4 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked29.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked29.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked29 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 29;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -131,6 +134,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -434,6 +438,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -534,6 +539,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -837,6 +843,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -873,6 +880,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java
index bf2aa23e..7e280757 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked3 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 3;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -105,6 +108,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -200,6 +204,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -274,6 +279,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -369,6 +375,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -379,6 +386,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked30.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked30.java
index e0f941f8..9f32731c 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked30.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked30.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked30 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 15;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -85,6 +88,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -244,6 +248,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -298,6 +303,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -457,6 +463,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -479,6 +486,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked31.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked31.java
index b7040cfc..63fa0bab 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked31.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked31.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked31 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 31;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -133,6 +136,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -452,6 +456,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -554,6 +559,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -873,6 +879,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -911,6 +918,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked32.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked32.java
index 0d1ee8f0..b8cb4bc1 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked32.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked32.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked32 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
     }
 
+    @Override
     public int valueCount() {
       return 2;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -41,6 +44,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -58,6 +62,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -68,6 +73,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -85,6 +91,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -93,6 +100,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java
index e02d6021..4519a20c 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked33 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 33;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -139,6 +148,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -474,6 +484,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -514,6 +525,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java
index 3b09e0cb..60d3d45a 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked34 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 17;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -91,6 +100,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -266,6 +276,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -290,6 +301,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java
index aede6498..ffc45600 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked35 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 35;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -141,6 +150,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -492,6 +502,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -534,6 +545,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java
index 0d0a9186..f9f5f09a 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked36 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 9;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -67,6 +76,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -162,6 +172,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -178,6 +189,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java
index 8a3b655d..4d94c91d 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked37 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 37;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -143,6 +152,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -510,6 +520,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -554,6 +565,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java
index bf6da1ed..52a127d6 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked38 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 19;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -93,6 +102,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -284,6 +294,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -310,6 +321,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java
index 72725f52..735d1d6f 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked39 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 39;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -145,6 +154,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -528,6 +538,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -574,6 +585,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java
index 9c283537..592a90ac 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked4 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -55,6 +58,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -86,6 +90,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -110,6 +115,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -141,6 +147,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -149,6 +156,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java
index 7a9c9d7c..9dc3c3bc 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked40 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 5;
     }
 
+    @Override
     public int valueCount() {
       return 8;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -55,6 +64,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -110,6 +120,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -122,6 +133,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java
index ceb47882..a29f2609 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked41 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 41;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -147,6 +156,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -546,6 +556,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -594,6 +605,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java
index bdc46610..65fa472c 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked42 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 21;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -95,6 +104,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -302,6 +312,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -330,6 +341,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java
index 8836fdbd..cacab461 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked43 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 43;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -149,6 +158,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -564,6 +574,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -614,6 +625,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java
index 9e8e85fa..21157760 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked44 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 11;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -69,6 +78,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -180,6 +190,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -198,6 +209,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java
index e830391b..32de95e8 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked45 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 45;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -151,6 +160,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -582,6 +592,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -634,6 +645,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java
index 6282f33a..2f73c4e4 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked46 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 23;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -97,6 +106,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -320,6 +330,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -350,6 +361,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java
index 22265a6f..ec800397 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked47 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 47;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -153,6 +162,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -600,6 +610,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -654,6 +665,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java
index 891cdf8e..fe2cbc2c 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked48 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 3;
     }
 
+    @Override
     public int valueCount() {
       return 4;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -49,6 +58,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -84,6 +94,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -94,6 +105,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java
index 26668984..8469c3c8 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked49 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 49;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -155,6 +164,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -618,6 +628,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -674,6 +685,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java
index a514b432..dfa195b3 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked5 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 5;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -107,6 +110,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -218,6 +222,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -294,6 +299,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -405,6 +411,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -417,6 +424,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java
index 5484865e..680ef40e 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked50 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 25;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -99,6 +108,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -338,6 +348,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -370,6 +381,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java
index 4a20bfb5..f8a7ed8b 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked51 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 51;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -157,6 +166,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -636,6 +646,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -694,6 +705,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java
index dd31c0ab..a98984f3 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked52 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 13;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -71,6 +80,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -198,6 +208,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -218,6 +229,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java
index 5302b825..4cd1844e 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked53 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 53;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -159,6 +168,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -654,6 +664,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -714,6 +725,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java
index 5c9ee2ae..1b8e959b 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked54 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 27;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -101,6 +110,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -356,6 +366,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -390,6 +401,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java
index 6b1c008a..45737cdc 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked55 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 55;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -161,6 +170,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -672,6 +682,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -734,6 +745,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java
index 994b9d1a..8b752bc2 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked56 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 7;
     }
 
+    @Override
     public int valueCount() {
       return 8;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -57,6 +66,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -128,6 +138,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -142,6 +153,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java
index 4a45ec28..360ed343 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked57 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 57;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -163,6 +172,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -690,6 +700,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -754,6 +765,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java
index eb5ee26f..107de04d 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked58 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 29;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -103,6 +112,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -374,6 +384,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -410,6 +421,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java
index 1c85c497..897d09ae 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked59 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 59;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -165,6 +174,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -708,6 +718,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -774,6 +785,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java
index 1e4b5188..b2a45a31 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked6 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 3;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -73,6 +76,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -136,6 +140,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -178,6 +183,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -241,6 +247,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -251,6 +258,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java
index 7a0a448f..e3c46b0e 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked60 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 15;
     }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -73,6 +82,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -216,6 +226,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -238,6 +249,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java
index 0626bc2f..650d23a0 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked61 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 61;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -167,6 +176,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -726,6 +736,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -794,6 +805,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java
index b7146e99..90c51804 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked62 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 31;
     }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -105,6 +114,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -392,6 +402,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -430,6 +441,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java
index 4759187e..8736d630 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java
@@ -23,18 +23,27 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked63 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 63;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -169,6 +178,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -744,6 +754,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -814,6 +825,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java
index 894f57a3..ae562ae2 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java
@@ -26,22 +26,37 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked64 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
     }
 
+    @Override
     public int valueCount() {
       return 1;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       System.arraycopy(blocks, blocksOffset, values, valuesOffset, valueCount() * iterations);
     }
 
+    @Override
+    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       LongBuffer.wrap(values, valuesOffset, iterations * valueCount()).put(ByteBuffer.wrap(blocks, blocksOffset, 8 * iterations * blockCount()).asLongBuffer());
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       System.arraycopy(values, valuesOffset, blocks, blocksOffset, valueCount() * iterations);
     }
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java
index 83a2529b..2dbd06ba 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked7 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 7;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -109,6 +112,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -236,6 +240,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -314,6 +319,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -441,6 +447,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -455,6 +462,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java
index f7cd8e1a..074c52fe 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked8 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
     }
 
+    @Override
     public int valueCount() {
       return 8;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -47,6 +50,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -70,6 +74,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -86,6 +91,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -109,6 +115,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -117,6 +124,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java
index 21832f4e..f994b042 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPacked9 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 9;
     }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -111,6 +114,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -254,6 +258,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -334,6 +339,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -477,6 +483,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -493,6 +500,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java
index e76e771d..d2b0f560 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock1 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 64;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -103,6 +106,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -182,6 +186,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -254,6 +259,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -333,6 +339,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -341,6 +348,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java
index 10b0e435..826f78b4 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock10 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 6;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -45,6 +48,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -66,6 +70,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -80,6 +85,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -101,6 +107,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -109,6 +116,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java
index 1ae07cac..1f4af518 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock12 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 5;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -44,6 +47,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -64,6 +68,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -77,6 +82,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -97,6 +103,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -105,6 +112,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java
index 01c00bf4..46f831a3 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock16 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 4;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -43,6 +46,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -62,6 +66,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -74,6 +79,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -93,6 +99,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -101,6 +108,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java
index cdd46a4c..a7de63eb 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock2 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 32;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -71,6 +74,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -118,6 +122,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -158,6 +163,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -205,6 +211,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -213,6 +220,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java
index 1edfce8d..1b85f4bd 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock21 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 3;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -42,6 +45,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -60,6 +64,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -71,6 +76,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -89,6 +95,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -97,6 +104,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java
index 690bbe44..1ee530d3 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock3 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 21;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -60,6 +63,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -96,6 +100,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -125,6 +130,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -161,6 +167,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -169,6 +176,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock32.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock32.java
index aeb2b417..0a4f395e 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock32.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock32.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock32 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 2;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -41,6 +44,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -58,6 +62,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -68,6 +73,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -85,6 +91,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -93,6 +100,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java
index 2ab19fcc..0062c361 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock4 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 16;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -55,6 +58,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -86,6 +90,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -110,6 +115,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -141,6 +147,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -149,6 +156,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java
index cdf6c86b..e6e4b6c5 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock5 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 12;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -51,6 +54,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -78,6 +82,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -98,6 +103,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -125,6 +131,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -133,6 +140,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java
index c6bf06e2..e60e36c5 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock6 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 10;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -49,6 +52,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -74,6 +78,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -92,6 +97,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -117,6 +123,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -125,6 +132,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java
index 0ea4b329..fc90ebca 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock7 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 9;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -48,6 +51,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -72,6 +76,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -89,6 +94,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -113,6 +119,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -121,6 +128,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java
index b95a575c..bfc6e5f8 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock8 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 8;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -47,6 +50,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -70,6 +74,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -86,6 +91,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -109,6 +115,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -117,6 +124,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java
index a220a5db..0264413f 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java
@@ -23,14 +23,17 @@
  * Efficient sequential read/write of packed integers.
  */
 final class BulkOperationPackedSingleBlock9 extends BulkOperation {
+    @Override
     public int blockCount() {
       return 1;
      }
 
+    @Override
     public int valueCount() {
       return 7;
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -46,6 +49,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -68,6 +72,7 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
       }
     }
 
+    @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -83,6 +88,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -105,6 +111,7 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
       }
     }
 
+    @Override
     public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
@@ -113,6 +120,7 @@ public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffs
       }
     }
 
+    @Override
     public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
