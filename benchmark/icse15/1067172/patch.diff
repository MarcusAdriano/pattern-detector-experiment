diff --git a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDataConfig.java b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDataConfig.java
index b17fcc38..efa834fa 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDataConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDataConfig.java
@@ -20,9 +20,10 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.w3c.dom.Document;
+import org.xml.sax.InputSource;
 
 import javax.xml.parsers.DocumentBuilderFactory;
-import java.io.ByteArrayInputStream;
+import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -56,7 +57,7 @@ public void testDataConfigWithDataSource() throws Exception {
   public void testBasic() throws Exception {
     javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory
             .newInstance().newDocumentBuilder();
-    Document doc = builder.parse(new ByteArrayInputStream(xml.getBytes()));
+    Document doc = builder.parse(new InputSource(new StringReader(xml)));
 
     DataConfig dc = new DataConfig();
     dc.readFromXml(doc.getDocumentElement());
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java
index 6f6fd817..596fa33b 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java
@@ -46,7 +46,7 @@ public void withFieldsAndXpath() throws Exception {
     tmpdir.delete();
     tmpdir.mkdir();
     tmpdir.deleteOnExit();
-    createFile(tmpdir, "x.xsl", xsl.getBytes(), false);
+    createFile(tmpdir, "x.xsl", xsl.getBytes("UTF-8"), false);
     Map entityAttrs = createMap("name", "e", "url", "cd.xml",
             XPathEntityProcessor.FOR_EACH, "/catalog/cd");
     List fields = new ArrayList();
@@ -211,7 +211,7 @@ public void withDefaultSolrAndXsl() throws Exception {
     tmpdir.delete();
     tmpdir.mkdir();
     tmpdir.deleteOnExit();
-    TestFileListEntityProcessor.createFile(tmpdir, "x.xsl", xsl.getBytes(),
+    TestFileListEntityProcessor.createFile(tmpdir, "x.xsl", xsl.getBytes("UTF-8"),
             false);
     Map entityAttrs = createMap("name", "e",
             XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, "true", "xsl", ""
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java
index c80fbce7..fcee63a7 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java
@@ -129,7 +129,7 @@ public CoreContainer initialize() throws IOException,
         cores.load(solrHome, fconf);
       } else {
         cores.defaultAbortOnConfigError = abortOnConfigurationError;
-        cores.load(solrHome, new ByteArrayInputStream(DEF_SOLR_XML.getBytes()));
+        cores.load(solrHome, new ByteArrayInputStream(DEF_SOLR_XML.getBytes("UTF-8")));
         cores.configFile = fconf;
       }
       setAbortOnConfigurationError(0 < cores.numCoresAbortOnConfigError);
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/DumpRequestHandler.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/DumpRequestHandler.java
index f1190005..6e86dd7d 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/DumpRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/DumpRequestHandler.java
@@ -18,7 +18,7 @@
 package org.apache.solr.handler;
 
 import java.io.IOException;
-import java.io.InputStream;
+import java.io.Reader;
 import java.util.ArrayList;
 
 import org.apache.commons.io.IOUtils;
@@ -46,11 +46,11 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw
         stream.add( "sourceInfo", content.getSourceInfo() );
         stream.add( "size", content.getSize() );
         stream.add( "contentType", content.getContentType() );
-        InputStream is = content.getStream();
+        Reader reader = content.getReader();
         try {
-          stream.add( "stream", IOUtils.toString(is) );
+          stream.add( "stream", IOUtils.toString(reader) );
         } finally {
-          is.close();
+          reader.close();
         }
         streams.add( stream );
       }
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java
index 3e0d6089..656a09ad 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java
@@ -215,7 +215,7 @@ public static String getFileContents( String path )
     try {
       SolrCore core = SolrCore.getSolrCore();
       InputStream input = core.getResourceLoader().openResource(path);
-      return IOUtils.toString( input );
+      return IOUtils.toString( input, "UTF-8" );
     }
     catch( Exception ex ) {} // ignore it
     return "";
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java
index 8d0606cc..16b5d25b 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java
@@ -169,6 +169,7 @@ private static String execute( String cmd )
     try {
       Process process = Runtime.getRuntime().exec(cmd);
       in = new DataInputStream( process.getInputStream() );
+      // use default charset from locale here, because the command invoked also uses the default locale:
       return IOUtils.toString( in );
     }
     catch( Exception ex ) {
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/SolrParamResourceLoader.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/SolrParamResourceLoader.java
index 9784fe01..6319a602 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/SolrParamResourceLoader.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/SolrParamResourceLoader.java
@@ -25,6 +25,7 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -56,7 +57,11 @@ public void init(ExtendedProperties extendedProperties) {
   @Override
   public InputStream getResourceStream(String s) throws ResourceNotFoundException {
     String template = templates.get(s);
-    return template == null ? null : new ByteArrayInputStream(template.getBytes());
+    try {
+      return template == null ? null : new ByteArrayInputStream(template.getBytes("UTF-8"));
+    } catch (UnsupportedEncodingException e) {
+      throw new RuntimeException(e); // may not happen
+    }
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
index 7a6068c7..cce5d3da 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
@@ -86,23 +86,23 @@ public void testJSP() throws Exception
     // sure they compile ok
     
     String adminPath = "http://localhost:"+port+context+"/";
-    String html = IOUtils.toString( new URL(adminPath).openStream() );
-    assertNotNull( html ); // real error will be an exception
+    byte[] bytes = IOUtils.toByteArray( new URL(adminPath).openStream() );
+    assertNotNull( bytes ); // real error will be an exception
 
     adminPath += "admin/";
-    html = IOUtils.toString( new URL(adminPath).openStream() );
-    assertNotNull( html ); // real error will be an exception
+    bytes = IOUtils.toByteArray( new URL(adminPath).openStream() );
+    assertNotNull( bytes ); // real error will be an exception
 
     // analysis
-    html = IOUtils.toString( new URL(adminPath+"analysis.jsp").openStream() );
-    assertNotNull( html ); // real error will be an exception
+    bytes = IOUtils.toByteArray( new URL(adminPath+"analysis.jsp").openStream() );
+    assertNotNull( bytes ); // real error will be an exception
 
     // schema browser
-    html = IOUtils.toString( new URL(adminPath+"schema.jsp").openStream() );
-    assertNotNull( html ); // real error will be an exception
+    bytes = IOUtils.toByteArray( new URL(adminPath+"schema.jsp").openStream() );
+    assertNotNull( bytes ); // real error will be an exception
 
     // schema browser
-    html = IOUtils.toString( new URL(adminPath+"threaddump.jsp").openStream() );
-    assertNotNull( html ); // real error will be an exception
+    bytes = IOUtils.toByteArray( new URL(adminPath+"threaddump.jsp").openStream() );
+    assertNotNull( bytes ); // real error will be an exception
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java
index 5aa7138d..2e4c1e40 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java
@@ -26,6 +26,7 @@
 import java.io.InputStream;
 import java.io.StringReader;
 import java.net.URL;
+import java.net.URLConnection;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
@@ -41,7 +42,7 @@ public void testStringStream() throws IOException
     String input = "aads ghaskdgasgldj asl sadg ajdsg &jag # @ hjsakg hsakdg hjkas s";
     ContentStreamBase stream = new ContentStreamBase.StringStream( input );
     assertEquals( input.length(), stream.getSize().intValue() );
-    assertEquals( input, IOUtils.toString( stream.getStream() ) );
+    assertEquals( input, IOUtils.toString( stream.getStream(), "UTF-8" ) );
     assertEquals( input, IOUtils.toString( stream.getReader() ) );
   }
 
@@ -63,33 +64,40 @@ public void testFileStream() throws IOException
 
   public void testURLStream() throws IOException 
   {
-    String content = null;
+    byte[] content = null;
+    String contentType = null;
     URL url = new URL( "http://svn.apache.org/repos/asf/lucene/dev/trunk/" );
     InputStream in = url.openStream();
     try {
-      content = IOUtils.toString( in );
+      URLConnection conn = url.openConnection();
+      in = conn.getInputStream();
+      contentType = conn.getContentType();
+      content = IOUtils.toByteArray(in);
     } 
     finally {
       IOUtils.closeQuietly(in);
     }
     
-    assertTrue( content.length() > 10 ); // found something...
+    assertTrue( content.length > 10 ); // found something...
     
     ContentStreamBase stream = new ContentStreamBase.URLStream( url );
-    assertEquals( content.length(), stream.getSize().intValue() );
+    assertEquals( content.length, stream.getSize().intValue() );
     
     // Test the stream
     in = stream.getStream();
     try {
       assertTrue( IOUtils.contentEquals( 
-          new ByteArrayInputStream( content.getBytes() ), in ) );
+          new ByteArrayInputStream(content), in ) );
     } 
     finally {
       IOUtils.closeQuietly(in);
     }
 
+    String charset = ContentStreamBase.getCharsetFromContentType(contentType);
+    if (charset == null)
+      charset = ContentStreamBase.DEFAULT_CHARSET;
     // Re-open the stream and this time use a reader
     stream = new ContentStreamBase.URLStream( url );
-    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );
+    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/DOMUtilTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/DOMUtilTest.java
index 87403355..069c2f93 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/DOMUtilTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/common/util/DOMUtilTest.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.common.util;
 
-import java.io.ByteArrayInputStream;
+import java.io.StringReader;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -27,6 +27,7 @@
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
+import org.xml.sax.InputSource;
 
 import org.apache.lucene.util.LuceneTestCase;
 
@@ -85,6 +86,6 @@ public Node getNode( Document doc, String path ) throws Exception {
   }
   
   public Document getDocument( String xml ) throws Exception {
-    return builder.parse( new ByteArrayInputStream( xml.getBytes() ) );
+    return builder.parse(new InputSource(new StringReader(xml)));
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
index b4fa8cd7..9c42dc59 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
@@ -177,7 +177,7 @@ public void testCharsetOutsideDocument() throws Exception {
       "</docs>"
     ).getBytes("ISO-8859-1");
     
-    // we declare a content stream without charset:
+    // we declare a content stream with charset:
     final ContentStream cs = new ByteStream(xmlBytes, "application/xml; charset=ISO-8859-1");
     
     ModifiableSolrParams params = new ModifiableSolrParams();
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java
index d3901361..a9339c72 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -656,7 +656,7 @@ public void run() {
         try {
           url = new URL(masterUrl);
           stream = url.openStream();
-          response = IOUtils.toString(stream);
+          response = IOUtils.toString(stream, "UTF-8");
           if(response.contains("<str name=\"status\">success</str>")) {
             success = true;
           }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java
index cc763c88..6f7cb427 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java
@@ -74,7 +74,7 @@ public void testStreamBody() throws Exception
     List<ContentStream> streams = new ArrayList<ContentStream>();
     SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
     assertEquals( 1, streams.size() );
-    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );
+    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );
     req.close();
 
     // Now add three and make sure they come out ok
@@ -87,9 +87,9 @@ public void testStreamBody() throws Exception
     input.add( body1 );
     input.add( body2 );
     input.add( body3 );
-    output.add( IOUtils.toString( streams.get(0).getStream() ) );
-    output.add( IOUtils.toString( streams.get(1).getStream() ) );
-    output.add( IOUtils.toString( streams.get(2).getStream() ) );
+    output.add( IOUtils.toString( streams.get(0).getReader() ) );
+    output.add( IOUtils.toString( streams.get(1).getReader() ) );
+    output.add( IOUtils.toString( streams.get(2).getReader() ) );
     // sort them so the output is consistent
     Collections.sort( input );
     Collections.sort( output );
@@ -112,13 +112,13 @@ public void testStreamURL() throws Exception
   {
     boolean ok = false;
     String url = "http://www.apache.org/dist/lucene/solr/";
-    String txt = null;
+    byte[] bytes = null;
     try {
       URLConnection connection = new URL(url).openConnection();
       connection.setConnectTimeout(5000);
       connection.setReadTimeout(5000);
       connection.connect();
-      txt = IOUtils.toString( connection.getInputStream());
+      bytes = IOUtils.toByteArray( connection.getInputStream());
     }
     catch( Exception ex ) {
       assumeNoException("Unable to connect to " + url + " to run the test.", ex);
@@ -134,7 +134,7 @@ public void testStreamURL() throws Exception
     List<ContentStream> streams = new ArrayList<ContentStream>();
     SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
     assertEquals( 1, streams.size() );
-    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );
+    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );
     req.close();
   }
   
diff --git a/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java b/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java
index 104663f7..c54fb5ad 100644
--- a/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -65,7 +65,7 @@
 
   public SolrDispatchFilter() {
     try {
-      adminRequestParser = new SolrRequestParsers(new Config(null,"solr",new ByteArrayInputStream("<root/>".getBytes()),"") );
+      adminRequestParser = new SolrRequestParsers(new Config(null,"solr",new ByteArrayInputStream("<root/>".getBytes("UTF-8")),"") );
     } catch (Exception e) {
       //unlikely
       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);
diff --git a/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java b/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java
index 6169a5cb..7a43e770 100644
--- a/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java
+++ b/lucene/dev/branches/branch_3x/solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java
@@ -18,6 +18,7 @@
 package org.apache.solr.servlet.cache;
 
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -75,11 +76,15 @@ public String calcEtag(final long currentIndexVersion) {
       if (currentIndexVersion != indexVersionCache) {
         indexVersionCache=currentIndexVersion;
         
+        try {
         etagCache = "\""
           + new String(Base64.encodeBase64((Long.toHexString
                                             (Long.reverse(indexVersionCache))
-                                            + etagSeed).getBytes()))
+                                             + etagSeed).getBytes()), "US-ASCII")
           + "\"";
+        } catch (UnsupportedEncodingException e) {
+          throw new RuntimeException(e); // may not happen
+        }
       }
       
       return etagCache;
