diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java
index c5418028..cd9201d2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java
@@ -1219,6 +1219,8 @@ private void updatecursorlocks(
                 )
             ));
         commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         commit();
@@ -2086,6 +2088,8 @@ private void updatecursorlocks(
                 )
             ));
         commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
 
@@ -2378,6 +2382,8 @@ private void updatecursorlocks(
                 )
             ));
         commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
 
@@ -2458,6 +2464,8 @@ private void updatesetlocks(
                     {_app, _ut, _t, "2", _IX, _A, _tl, _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2594,6 +2602,8 @@ private void updatesetlocks(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2631,6 +2641,8 @@ private void updatesetlocks(
                     {_app, _ut, _t, "2", _IX, _A, _tl, _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2822,6 +2834,8 @@ private void updatesetlocks(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2977,6 +2991,8 @@ private void updatesetlocks(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -4490,6 +4506,8 @@ private void updateBtreeCursorLocks1(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -5968,6 +5986,8 @@ private void updateBtreeCursorLocks2(
              )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6105,6 +6125,8 @@ private void updateBtreeCursorLocks2(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6542,6 +6564,8 @@ private void updateBtreeCursorLocks2(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6740,6 +6764,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "2", _X, _A, "(4,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6763,6 +6789,8 @@ private void updateBtreeSetLocks (
                 {"7", "70", pad2("seven", pad), pad2("index pad 7", idxPad)}});
 
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         /* ------------------------------------------------------------
          * Test full cursor scan which deletes "even" rows.
          * ------------------------------------------------------------
@@ -6771,7 +6799,6 @@ private void updateBtreeSetLocks (
             "delete from a where a = 2 or a = 4 or a = 6");
         ltrs = getLocks();
 
-        s.execute("call wait_for_post_commit()");
         JDBC.assertUnorderedResultSet(
             ltrs,
             isolation == Connection.TRANSACTION_SERIALIZABLE ?
@@ -6829,6 +6856,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "2", _X, _A, "(6,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6872,10 +6901,11 @@ private void updateBtreeSetLocks (
         s.executeUpdate(
             "delete from a where (a = 2 or a = 4 or a = 6) and (b < 8)");
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
-        s.execute("call wait_for_post_commit()");
         JDBC.assertUnorderedResultSet(
             s.executeQuery("select * from a"),
             unPadded ?
@@ -7137,7 +7167,6 @@ private void updateBtreeSetLocks (
             "delete from a  where a = 2");
         ltrs = getLocks();
 
-        s.execute("call wait_for_post_commit()");
         JDBC.assertUnorderedResultSet(
             ltrs,
             isolation == Connection.TRANSACTION_SERIALIZABLE ?
@@ -7177,6 +7206,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "1", _X, _A, "(2,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         s.executeUpdate(
             "update a  set b = -b where a = 2");
         ltrs = getLocks();
@@ -7305,6 +7336,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "1", _X, _A, "(7,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         JDBC.assertUnorderedResultSet(
@@ -7337,7 +7370,6 @@ private void updateBtreeSetLocks (
             "delete from a  where a = 1 or a = 7");
         ltrs = getLocks();
 
-        s.execute("call wait_for_post_commit()");
         JDBC.assertUnorderedResultSet(
             ltrs,
             isolation == Connection.TRANSACTION_SERIALIZABLE ?
@@ -7386,6 +7418,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "2", _X, _A, "(7,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -7541,6 +7575,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "3", _X, _A, "(3,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
