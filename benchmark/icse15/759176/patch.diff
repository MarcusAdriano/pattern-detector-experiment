diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java
index bb7797ce..cd5c64f2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java
@@ -58,7 +58,7 @@ public static boolean purgeDatabase(final String dbName) {
             DataStore store = (DataStore)DATABASES.remove(dbName);
             if (store != null) {
                 // Delete everything.
-                store.deleteAll("/");
+                store.purge();
                 return true;
             }
             return false;
@@ -104,11 +104,8 @@ public void init(String home, String databaseName,
             throws IOException {
         // Handle cases where a database name is specified.
         if (databaseName != null) {
-            // TODO: Is using java.io.File the right thing to do?
-            //       Should we just set the canonical name equal to the
-            //       specified database name instead?
             if (home != null &&
-                    !databaseName.startsWith(String.valueOf(getSeparator()))) {
+                    !new File(databaseName).isAbsolute()) {
                 canonicalName = new File(home, databaseName).getCanonicalPath();
             } else {
                 canonicalName = new File(databaseName).getCanonicalPath();
@@ -307,7 +304,7 @@ public boolean supportsWriteSync() {
     private String normalizePath(String dir, String file) {
         if (dir == null || dir.equals("")) {
             dir = dataDirectory.getPath();
-        } else if (dir.charAt(0) != getSeparator()) {
+        } else if (!new File(dir).isAbsolute()) {
             dir = new File(dataDirectory.getPath(), dir).getPath();
         }
         // We now have an absolute path for the directory.
@@ -324,7 +321,7 @@ private String normalizePath(String dir, String file) {
     private String normalizePath(String path) {
         if (path == null || path.equals("")) {
             return dataDirectory.getPath();
-        } else if (path.charAt(0) == getSeparator()) {
+        } else if (new File(path).isAbsolute()) {
             return path;
         } else {
             return new File(dataDirectory.getPath(), path).getPath();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStore.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStore.java
index 5de2849d..222a799e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStore.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStore.java
@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.io.vfmem;
 
+import java.io.File;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
@@ -31,6 +33,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 /**
  * A virtual data store, keeping track of all the virtual files existing and
  * offering a set of high-level operations on virtual files.
+ * <p>
+ * A newly created data store doesn't contain a single existing directory.
  */
 public final class DataStore {
 
@@ -64,9 +68,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     public DataStore(String databaseName) {
         this.databaseName = databaseName;
-        // Create the absolute root.
-        createEntry(String.valueOf(SEP), true);
-
     }
 
     /**
@@ -91,23 +92,24 @@ public String getDatabaseName() {
      *      created, {@code null} otherwise
      */
     public DataStoreEntry createEntry(String iPath, boolean isDir) {
+        // Normalize the path.
+        final String nPath = new File(iPath).getPath();
         synchronized (LOCK) {
-            if (files.containsKey(iPath)) {
+            if (files.containsKey(nPath)) {
                 return null;
             }
             // Make sure the the parent directories exists.
-            String parent = PathUtil.getParent(iPath);
-            while (parent != null) {
-                DataStoreEntry entry = (DataStoreEntry)files.get(parent);
+            String[] parents = getParentList(nPath);
+            for (int i=parents.length -1; i >= 0; i--) {
+                DataStoreEntry entry = (DataStoreEntry)files.get(parents[i]);
                 if (entry == null) {
                     return null;
                 } else if (!entry.isDirectory()) {
                     return null;
                 }
-                parent = PathUtil.getParent(parent);
             }
-            DataStoreEntry newEntry = new DataStoreEntry(iPath, isDir);
-            files.put(iPath, newEntry);
+            DataStoreEntry newEntry = new DataStoreEntry(nPath, isDir);
+            files.put(nPath, newEntry);
             return newEntry;
         }
     }
@@ -119,25 +121,19 @@ public DataStoreEntry createEntry(String iPath, boolean isDir) {
      *      or were created, {@code false} otherwise
      */
     public boolean createAllParents(String path) {
-        if (path.charAt(path.length() -1) == SEP) {
-            path = path.substring(0, path.length() -1);
-        }
-        // If there is no path separator, only one entry will be created.
-        if (path.indexOf(SEP) == -1) {
-            return true;
-        }
+        final String nPath = new File(path).getPath();
+        // Iterate through the list and create the missing parents.
+        String[] parents = getParentList(nPath);
         synchronized (LOCK) {
-            int index = path.indexOf(SEP, 1); // The root always exists
-
-            while (index > 0) {
-                String subPath = path.substring(0, index);
+            for (int i=parents.length -1; i >= 0; i--) {
+                String subPath = parents[i];
                 DataStoreEntry entry = (DataStoreEntry)files.get(subPath);
                 if (entry == null) {
                     createEntry(subPath, true);
                 } else if (!entry.isDirectory()) {
+                    // Fail if one of the parents is a regular file.
                     return false;
                 }
-                index = path.indexOf(SEP, index +1);
             }
         }
         return true;
@@ -153,21 +149,20 @@ public boolean createAllParents(String path) {
      * @return {@code true} if the entry was deleted, {@code false} otherwise.
      */
     public boolean deleteEntry(String iPath) {
+        final String nPath = new File(iPath).getPath();
         DataStoreEntry entry;
         synchronized (LOCK) {
-            entry = (DataStoreEntry)files.remove(iPath);
+            entry = (DataStoreEntry)files.remove(nPath);
             if (entry != null) {
                 if (entry.isDirectory()) {
-                    String[] children = listChildren(iPath);
-                    if (children == null || children.length == 0){
-                        entry.release();
+                    String[] children = listChildren(nPath);
+                    if (children.length > 0) {
                         // Re-add the entry.
-                        files.put(iPath, entry);
+                        files.put(nPath, entry);
                         return false;
                     }
-                } else {
-                    entry.release();
                 }
+                entry.release();
             }
         }
         return (entry != null);
@@ -182,7 +177,8 @@ public boolean deleteEntry(String iPath) {
      */
     public DataStoreEntry getEntry(String iPath) {
         synchronized (LOCK) {
-            return (DataStoreEntry)files.get(iPath);
+            // Use java.io.File to normalize the path.
+            return (DataStoreEntry)files.get(new File(iPath).getPath());
         }
     }
 
@@ -194,14 +190,15 @@ public DataStoreEntry getEntry(String iPath) {
      *      {@code false} if the root doesn't exist.
      */
     public boolean deleteAll(String iPath) {
+        final String nPath = new File(iPath).getPath();
         synchronized (LOCK) {
-            DataStoreEntry entry = (DataStoreEntry)files.remove(iPath);
+            DataStoreEntry entry = (DataStoreEntry)files.remove(nPath);
             if (entry == null) {
                 // Delete root doesn't exist.
                 return false;
             } else if (entry.isDirectory()) {
                 // Delete root is a directory.
-                return _deleteAll(iPath);
+                return _deleteAll(nPath);
             } else {
                 // Delete root is a file.
                 entry.release();
@@ -222,9 +219,10 @@ public boolean deleteAll(String iPath) {
             throw new IllegalArgumentException(
                     "The empty string is not a valid path");
         }
+        String nPath = new File(iPath).getPath();
         // Make sure the search path ends with the separator.
-        if (iPath.charAt(iPath.length() -1) != SEP) {
-            iPath += SEP;
+        if (nPath.charAt(nPath.length() -1) != SEP) {
+            nPath += SEP;
         }
         ArrayList children = new ArrayList();
         synchronized (LOCK) {
@@ -232,8 +230,8 @@ public boolean deleteAll(String iPath) {
             String candidate;
             while (paths.hasNext()) {
                 candidate = (String)paths.next();
-                if (candidate.startsWith(iPath)) {
-                    children.add(candidate.substring(iPath.length()));
+                if (candidate.startsWith(nPath)) {
+                    children.add(candidate.substring(nPath.length()));
                 }
             }
         }
@@ -249,30 +247,51 @@ public boolean deleteAll(String iPath) {
      *      file already existed or the existing file doesn't exist.
      */
     public boolean move(StorageFile currentFile, StorageFile newFile) {
+        final String currentPath = new File(currentFile.getPath()).getPath();
+        final String newPath = new File(newFile.getPath()).getPath();
         synchronized (LOCK) {
-            if (files.containsKey(newFile.getPath())) {
+            if (files.containsKey(newPath)) {
                 return false;
             }
             DataStoreEntry current = (DataStoreEntry)
-                    files.remove(currentFile.getPath());
+                    files.remove(currentPath);
             if (current == null) {
                 return false;
             }
-            files.put(newFile.getPath(), current);
+            files.put(newPath, current);
             return true;
         }
     }
 
+    /**
+     * Purges the database and releases all files associated with it.
+     */
+    public void purge() {
+        synchronized (LOCK) {
+            Iterator fileIter = files.values().iterator();
+            while (fileIter.hasNext()) {
+                ((DataStoreEntry)fileIter.next()).release();
+            }
+            // Clear all the mappings.
+            files.clear();
+        }
+    }
+
     /**
      * Deletes every child of the root path specified.
      * <p>
      * Note that the root itself must be removed outside of this method.
      *
-     * @param prefixPath the root path to start deleting from
+     * @param prefixPath the normalized root path to start deleting from
      * @return {@code true} if all children of the root path were deleted,
      *      {@code false} otherwise.
      */
+    //@GuardedBy("LOCK")
     private boolean _deleteAll(String prefixPath) {
+        // Make sure the search path ends with the separator.
+        if (prefixPath.charAt(prefixPath.length() -1) != SEP) {
+            prefixPath += SEP;
+        }
         ArrayList toDelete = new ArrayList();
         Iterator paths = files.keySet().iterator();
         // Find all the entries to delete.
@@ -289,10 +308,8 @@ private boolean _deleteAll(String prefixPath) {
         while (keys.hasNext()) {
             DataStoreEntry entry = (DataStoreEntry)
                     files.remove((String)keys.next());
-            if (!entry.isDirectory()) {
                 entry.release();
             }
-        }
         return true;
     }
 
@@ -306,4 +323,23 @@ public long getTempFileCounter() {
             return ++tmpFileCounter;
         }
     }
+
+    /**
+     * Returns the list of parents for the specified path.
+     * <p>
+     * The lowest level parent is listed first in the list, so all absolute
+     * paths will have the root listed as the last element.
+     *
+     * @param path the normalized path to create a parent list for
+     * @return A list of parents.
+     */
+    private String[] getParentList(String path) {
+        ArrayList parents = new ArrayList();
+        String parent = path;
+        // Build the list of parents.
+        while ((parent = new File(parent).getParent()) != null) {
+            parents.add(parent);
+        }
+        return (String[])parents.toArray(new String[parents.size()]);
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStoreEntry.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStoreEntry.java
index 60dacdc9..f8ed8dbd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStoreEntry.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/DataStoreEntry.java
@@ -147,8 +147,10 @@ public boolean isReadOnly() {
      */
     void release() {
         released = true;
+        if (src != null) {
         src.release();
     }
+    }
 
     /**
      * Sets the length of this entry.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java
index ee4406ba..01f66a2d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java
@@ -272,6 +272,70 @@ public void testGetRAFOnDirectory() {
         assertTrue(vFile.isDirectory());
     }
 
+    /**
+     * Tests that {@code listChildren} doesn't include too many entries.
+     */
+    public void testListChilderen() {
+        DataStore store = getStore();
+        VirtualFile dir1 = new VirtualFile(PathUtilTest.abs("mydir"), store);
+        VirtualFile dir2 = new VirtualFile(
+                PathUtilTest.abs("mydirectory"), store);
+        VirtualFile file1 = new VirtualFile(
+                PathUtilTest.joinAbs("mydir", "file1.txt"), store);
+        VirtualFile file2 = new VirtualFile(
+                PathUtilTest.joinAbs("mydirectory", "file2.txt"), store);
+        assertTrue(dir1.mkdirs());
+        assertTrue(dir1.exists());
+        assertTrue(dir1.isDirectory());
+        assertTrue(dir2.mkdirs());
+        assertTrue(dir2.exists());
+        assertTrue(dir2.isDirectory());
+        assertTrue(file1.createNewFile());
+        assertTrue(file1.exists());
+        assertFalse(file1.isDirectory());
+        assertTrue(file2.createNewFile());
+        assertTrue(file2.exists());
+        assertFalse(file2.isDirectory());
+        // We should only get one child; file1.txt
+        String[] children = dir1.list();
+        assertEquals(1, children.length);
+        assertEquals(file1.getName(), children[0]);
+        // Test that the same path ending with the separator results in the
+        // same list being returned.
+        VirtualFile dir1abs = new VirtualFile(
+                PathUtilTest.joinAbs("mydir", ""), store);
+        assertFalse(dir1.getName().equals(dir1abs.getName()));
+        String[] childrenAbs = dir1abs.list();
+        assertEquals(1, childrenAbs.length);
+        assertEquals(children[0], childrenAbs[0]);
+        // The deleteAll below shouldn't delete "mydirectory" and "file2.txt"..
+        assertFalse(dir1.delete());
+        assertTrue(dir1.deleteAll());
+        assertTrue(dir2.exists());
+        assertTrue(file2.exists());
+    }
+
+    /**
+     * Makes sure that the root can be created.
+     */
+    public void testCreateRoot() {
+        DataStore store = new DataStore("testCreateRootStore");
+        String path = PathUtilTest.joinAbs("these", "are", "directories");
+        assertTrue(store.createAllParents(path));
+        assertNotNull(store.createEntry(path, true));
+        VirtualFile vf = new VirtualFile(path, store);
+        assertTrue(vf.exists());
+        assertTrue(vf.isDirectory());
+
+        // Also test one Windows specific root.
+        path = PathUtilTest.join("c:", "Documents and Settings", "directories");
+        assertTrue(store.createAllParents(path));
+        assertNotNull(store.createEntry(path, true));
+        vf = new VirtualFile(path, store);
+        assertTrue(vf.exists());
+        assertTrue(vf.isDirectory());
+    }
+
     public static Test suite() {
         return new TestSuite(VirtualFileTest.class);
     }
@@ -280,6 +344,9 @@ public static Test suite() {
     private static int dbStoreIndex = 0;
     /** Utility method returning a fresh data store. */
     private static synchronized DataStore getStore() {
-        return new DataStore("testVFMemDB-" + dbStoreIndex++);
+        DataStore store = new DataStore("testVFMemDB-" + dbStoreIndex++);
+        // We need the root to exist.
+        assertNotNull(store.createEntry(java.io.File.separator, true));
+        return store;
     }
 }
