diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
index 5ca45e90..68128db3 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
@@ -79,6 +79,17 @@ public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,
           this, similarity, reader.norms(query.getField()));
     }
 
+    @Override
+    public Explanation explain(IndexReader reader, int doc) throws IOException {
+      if (includeSpanScore) {
+        return super.explain(reader, doc);
+      } else {
+        // if we don't include the span score, we need to return our scorer's explanation only
+        PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(reader, true, false);
+        return scorer.explain(doc);
+      }
+    }
+
     protected class PayloadTermSpanScorer extends SpanScorer {
       // TODO: is this the best way to allocate this?
       protected byte[] payload = new byte[256];
@@ -166,21 +177,29 @@ protected float getPayloadScore() {
 
       @Override
       protected Explanation explain(final int doc) throws IOException {
-        ComplexExplanation result = new ComplexExplanation();
         Explanation nonPayloadExpl = super.explain(doc);
-        result.addDetail(nonPayloadExpl);
+        
         // QUESTION: Is there a way to avoid this skipTo call? We need to know
         // whether to load the payload or not
         Explanation payloadBoost = new Explanation();
-        result.addDetail(payloadBoost);
 
         float payloadScore = getPayloadScore();
         payloadBoost.setValue(payloadScore);
         // GSI: I suppose we could toString the payload, but I don't think that
         // would be a good idea
         payloadBoost.setDescription("scorePayload(...)");
+        
+        ComplexExplanation result = new ComplexExplanation();
+        if (includeSpanScore) {
+          result.addDetail(nonPayloadExpl);
+          result.addDetail(payloadBoost);
         result.setValue(nonPayloadExpl.getValue() * payloadScore);
         result.setDescription("btq, product of:");
+        } else {
+          result.addDetail(payloadBoost);
+          result.setValue(payloadScore);
+          result.setDescription("btq(includeSpanScore=false), result of:");
+        }
         result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE
             : Boolean.TRUE); // LUCENE-1303
         return result;
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java
index e69de29b..3ebb9fd2 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java
@@ -0,0 +1,95 @@
+package org.apache.lucene.search.payloads;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.DefaultSimilarity;
+import org.apache.lucene.search.Similarity;
+import org.apache.lucene.search.TestExplanations;
+import org.apache.lucene.search.spans.SpanQuery;
+import org.apache.lucene.util.BytesRef;
+
+/**
+ * TestExplanations subclass focusing on payload queries
+ */
+public class TestPayloadExplanations extends TestExplanations {
+  private PayloadFunction functions[] = new PayloadFunction[] { 
+      new AveragePayloadFunction(),
+      new MinPayloadFunction(),
+      new MaxPayloadFunction(),
+  };
+  
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    searcher.setSimilarity(new PayloadBoostSimilarity());
+  }
+  
+  // must be a static class so it can serialize
+  private static class PayloadBoostSimilarity extends DefaultSimilarity {
+    @Override
+    public float scorePayload(int docId, String fieldName, int start, int end, byte[] payload, int offset, int length) {
+      return 1 + (new BytesRef(payload, offset, length).hashCode() % 10);
+    }
+  }
+
+  /** macro for payloadtermquery */
+  private SpanQuery pt(String s, PayloadFunction fn, boolean includeSpanScore) {
+    return new PayloadTermQuery(new Term(FIELD,s), fn, includeSpanScore);
+  }
+  
+  /* simple PayloadTermQueries */
+  
+  public void testPT1() throws Exception {
+    for (PayloadFunction fn : functions) {
+      qtest(pt("w1", fn, false), new int[] {0,1,2,3});
+      qtest(pt("w1", fn, true), new int[] {0,1,2,3});
+    }
+  }
+
+  public void testPT2() throws Exception {
+    for (PayloadFunction fn : functions) {
+      SpanQuery q = pt("w1", fn, false);
+      q.setBoost(1000);
+      qtest(q, new int[] {0,1,2,3});
+      q = pt("w1", fn, true);
+      q.setBoost(1000);
+      qtest(q, new int[] {0,1,2,3});
+    }
+  }
+
+  public void testPT4() throws Exception {
+    for (PayloadFunction fn : functions) {
+      qtest(pt("xx", fn, false), new int[] {2,3});
+      qtest(pt("xx", fn, true), new int[] {2,3});
+    }
+  }
+
+  public void testPT5() throws Exception {
+    for (PayloadFunction fn : functions) {
+      SpanQuery q = pt("xx", fn, false);
+      q.setBoost(1000);
+      qtest(q, new int[] {2,3});
+      q = pt("xx", fn, true);
+      q.setBoost(1000);
+      qtest(q, new int[] {2,3});
+    }
+  }
+
+  // TODO: test the payloadnear query too!
+}
