diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java
index 07ba909a..e306249e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java
@@ -39,7 +39,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.BaseTestCase;
 import org.apache.derbyTesting.junit.TestConfiguration;
-import org.apache.derbyTesting.junit.Utilities;
 
 
 /**
@@ -471,7 +470,7 @@ public void testDefaultRollingUserConfig() throws IOException, SQLException {
                 
         bootDerby();
         
-        // This will generate enough output to roll through all 10 log files
+        // This will generate enough output to roll through all 3 log files
         for (int i = 0; i < 10; i++) {
             checkAllConsistency(getConnection());
         }
@@ -814,13 +813,17 @@ public void runBareOverridable() throws Throwable {
         catch (Throwable running) {
             PrintWriter stackOut = null;
             try{
-                String failPath = PrivilegedFileOpsForTests.getAbsolutePath(getFailureFolder());
-                // Copy the logfiles dir
-                File origLogFilesDir = new File(DEFAULT_DB_DIR, LOGFILESDIR);
-                File newLogFilesDir = new File (failPath, LOGFILESDIR);
-                PrivilegedFileOpsForTests.copy(origLogFilesDir,newLogFilesDir);
+                copyFileToFail(LOGFILESDIR);
                 nullFields();
-                removeDirectory(origLogFilesDir);
+                deleteFile(LOGFILESDIR);
+                // copy files from testStyleRollingFile:
+                copyFileToFail("derby-0.log");
+                copyFileToFail("derby-0.log.lck");
+                // copy files from the testDefaultRollingUserConfig test
+                for (int i = 0; i < 3; i++) {
+                    copyFileToFail("db-" + i + ".log");
+                    deleteFile("db-" + i + ".log");
+                }
            }
             catch (IOException ioe) {
                 // We need to throw the original exception so if there
@@ -849,9 +852,29 @@ public void runBareOverridable() throws Throwable {
             }
         }
         finally{
+            // attempt to clean up
+            // first ensure we have the engine shutdown, or some
+            // files cannot be cleaned up.
+            getTestConfiguration().shutdownEngine();
             File origLogFilesDir = new File(DEFAULT_DB_DIR, LOGFILESDIR);
             nullFields();
             removeDirectory(origLogFilesDir);
+            deleteFile("derby-0.log.lck");
+            deleteFile("derby-0.log");
+            deleteFile("derby.log");
+        }
+    }
+    
+    private void copyFileToFail(String origFileName) throws IOException {
+        String failPath = PrivilegedFileOpsForTests.getAbsolutePath(getFailureFolder());
+        File origFile = new File (DEFAULT_DB_DIR, origFileName); 
+        File newFile = new File (failPath, origFileName);
+        PrivilegedFileOpsForTests.copy(origFile,newFile);
         }
+    
+    // delete a file - used in cleanup when we don't care about the result
+    private void deleteFile(String origFileName) throws IOException {
+        File origFile = new File (DEFAULT_DB_DIR, origFileName);
+        PrivilegedFileOpsForTests.delete(origFile);                
     }
 }
