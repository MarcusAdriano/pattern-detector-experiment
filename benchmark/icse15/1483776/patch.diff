diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/FastProjectionSearch.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/FastProjectionSearch.java
index 318b94e7..f7cc0cfc 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/FastProjectionSearch.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/FastProjectionSearch.java
@@ -10,10 +10,10 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import org.apache.mahout.math.random.RandomProjector;
 import org.apache.mahout.common.distance.DistanceMeasure;
 import org.apache.mahout.math.Matrix;
 import org.apache.mahout.math.Vector;
+import org.apache.mahout.math.random.RandomProjector;
 import org.apache.mahout.math.random.WeightedThing;
 
 /**
@@ -185,6 +185,14 @@ public int size() {
       }
     }
 
+    for (Vector vector : pendingAdditions) {
+      double distance = distanceMeasure.distance(vector, query);
+      if (distance < bestDistance && (!differentThanQuery || !vector.equals(query))) {
+        bestDistance = distance;
+        bestVector = vector;
+      }
+    }
+
     return new WeightedThing<Vector>(bestVector, bestDistance);
   }
 
@@ -206,6 +214,8 @@ public boolean remove(Vector v, double epsilon) {
         break;
       }
       double oldWeight = currProjections.get(middle).getWeight();
+      // Elements to be removed are kept in the sorted array until the next reindex, but their inner vector
+      // is set to null.
       scalarProjections.get(i).set(middle, new WeightedThing<Vector>(oldWeight));
     }
     if (isProjected) {
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java
index 1c73b431..800faf82 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/neighborhood/SearchSanityTest.java
@@ -29,6 +29,7 @@
 import org.apache.mahout.math.Matrix;
 import org.apache.mahout.math.MatrixSlice;
 import org.apache.mahout.math.Vector;
+import org.apache.mahout.math.jet.math.Constants;
 import org.apache.mahout.math.random.MultiNormal;
 import org.apache.mahout.math.random.WeightedThing;
 import org.junit.Test;
@@ -199,8 +200,27 @@ public void testSearchFirst() {
       assertEquals("First isn't self", 0, first.getWeight(), 0);
       assertEquals("First isn't self", datapoint, first.getValue());
       assertEquals("First doesn't match", first, firstTwo.get(0));
-      assertEquals(String.format("Second doesn't match got %f expected %f", second.getWeight(), firstTwo.get(1).getWeight()),
-          second, firstTwo.get(1));
+      assertEquals("Second doesn't match", second, firstTwo.get(1));
+    }
+  }
+
+  @Test
+  public void testRemove() {
+    searcher.clear();
+    for (int i = 0; i < dataPoints.rowSize(); ++i) {
+      Vector datapoint = dataPoints.viewRow(i);
+      searcher.add(datapoint);
+      // As long as points are not searched for right after being added, in FastProjectionSearch, points are not
+      // merged with the main list right away, so if a search for a point occurs before it's merged the pendingAdditions
+      // list also needs to be looked at.
+      // This used to not be the case for searchFirst(), thereby causing removal failures.
+      if (i % 2 == 0) {
+        assertTrue("Failed to find self [search]",
+            searcher.search(datapoint, 1).get(0).getWeight() < Constants.EPSILON);
+        assertTrue("Failed to find self [searchFirst]",
+            searcher.searchFirst(datapoint, false).getWeight() < Constants.EPSILON);
+        assertTrue("Failed to remove self", searcher.remove(datapoint, Constants.EPSILON));
+      }
     }
   }
 }
