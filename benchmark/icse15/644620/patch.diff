diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
index d5bd58ac..e0927918 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
@@ -270,22 +270,13 @@ protected int getMaxFreeSpace() {
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
-	protected void createPage(PageKey newIdentity, int[] args) 
+	protected void createPage(PageKey newIdentity, PageCreationArgs args)
 		 throws StandardException
 	{
 
 		super.createPage(newIdentity, args);
 
-		// args[0] is the format id
-		// args[1] is whether to sync the page to disk or not
-		// args[2] is the pagesize (used by StoredPage)
-		// args[3] is the spareSize (used by StoredPage)
-		// args[4] is the number of bytes to reserve for container header
-		// args[5] is the minimumRecordSize
-		// NOTE: the arg list here must match the one in FileContainer
-		int pageSize = args[2];
-		int minimumRecordSize = args[5];
-		borrowedSpace = args[4];
+		borrowedSpace = args.containerInfoSize;
 
 		if (SanityManager.DEBUG)
 		{
@@ -321,7 +312,7 @@ protected void createPage(PageKey newIdentity, int[] args)
 		// the pages this extent is going to manage starts from pageNum+1
 		// starting physical offset is pageSize*(pageNum+1) since we have
 		// no logical to physical mapping yet...
-		extent = createExtent(newIdentity.getPageNumber()+1, pageSize, 0 /* pagesAlloced */, maxSpace);
+		extent = createExtent(newIdentity.getPageNumber()+1, getPageSize(), 0 /* pagesAlloced */, maxSpace);
 	}
 
 	private AllocExtent createExtent(long pageNum, int pageSize, int pagesAlloced, int availspace)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
index 7af03856..9d37b053 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
@@ -256,9 +256,10 @@ public Cacheable createIdentity(
 
 		PageKey newIdentity = (PageKey) key;
 
-		int[] createArgs = (int[]) createParameter;
+		PageCreationArgs createArgs = (PageCreationArgs) createParameter;
+        int formatId = createArgs.formatId;
 
-		if (createArgs[0] == -1)
+		if (formatId == -1)
         {
 			throw StandardException.newException(
                     SQLState.DATA_UNKNOWN_PAGE_FORMAT, newIdentity);
@@ -267,10 +268,10 @@ public Cacheable createIdentity(
 		// createArgs[0] contains the integer form of the formatId 
 		// if it is not the same as this instance's formatId, instantiate the
 		// real page object
-		if (createArgs[0] != getTypeFormatId())
+		if (formatId != getTypeFormatId())
 		{
 			return(
-                changeInstanceTo(createArgs[0], newIdentity).createIdentity(
+                changeInstanceTo(formatId, newIdentity).createIdentity(
                         key, createParameter));
 		}
 		
@@ -296,22 +297,23 @@ public Cacheable createIdentity(
 		 *	will be a SYNC call after all the pages are preallocated
 		 * 0 means creating a page that has already been preallocated.
 		 */
-		if ((createArgs[1] & WRITE_SYNC) != 0 ||
-			(createArgs[1] & WRITE_NO_SYNC) != 0)
-			writePage(newIdentity, (createArgs[1] & WRITE_SYNC) != 0);
+        int syncFlag = createArgs.syncFlag;
+		if ((syncFlag & WRITE_SYNC) != 0 ||
+			(syncFlag & WRITE_NO_SYNC) != 0)
+			writePage(newIdentity, (syncFlag & WRITE_SYNC) != 0);
 
 		if (SanityManager.DEBUG)
 		{
 			if (SanityManager.DEBUG_ON(FileContainer.SPACE_TRACE))
 			{
-				String syncFlag = 
-                    ((createArgs[1] & WRITE_SYNC) != 0)     ? "Write_Sync" :
-					(((createArgs[1] & WRITE_NO_SYNC) != 0) ? "Write_NO_Sync" : 
+				String sync =
+                    ((syncFlag & WRITE_SYNC) != 0)     ? "Write_Sync" :
+					(((syncFlag & WRITE_NO_SYNC) != 0) ? "Write_NO_Sync" :
 					                                          "No_write");
 
 				SanityManager.DEBUG(
                     FileContainer.SPACE_TRACE,
-                    "creating new page " + newIdentity + " with " + syncFlag);
+                    "creating new page " + newIdentity + " with " + sync);
 			}
 		}
 
@@ -900,7 +902,7 @@ protected abstract void initFromData(FileContainer container, PageKey id)
 
 
 	// create the page
-	protected abstract void createPage(PageKey id, int[] args) 
+	protected abstract void createPage(PageKey id, PageCreationArgs args)
         throws StandardException;
 
 	// page is about to be written, write everything to pageData array
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
index 80b804c4..52ca1d25 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
@@ -290,12 +290,6 @@ Writer to alloc Page (to invalidate alloc cache)
 	protected static final int CONTAINER_INFO_SIZE = 
 		CONTAINER_FORMAT_ID_SIZE+4+4+4+4+2+2+8+8+8+8+CHECKSUM_SIZE+8+8;
 
-	/**
-		the number of arguments we need to pass to alloc page for create
-	*/
-	protected static final int STORED_PAGE_ARG_NUM = 5;
-	protected static final int ALLOC_PAGE_ARG_NUM  = 6;
-
 	/**
 	 * where the first alloc page is located - 
 	 * the logical page number and the physical page offset
@@ -1769,13 +1763,13 @@ protected BasePage newPage(BaseContainerHandle userHandle,
 			    // 2'nd element is pagesize
 			    // 3'rd element is spareSpace
 
-			    int[] createPageArgs = new int[STORED_PAGE_ARG_NUM];
-			    createPageArgs[0] = StoredPage.FORMAT_NUMBER;
-			    createPageArgs[1] = prealloced ? 
-                                        0 : (noIO ? 0 : CachedPage.WRITE_SYNC);
-			    createPageArgs[2] = pageSize;
-			    createPageArgs[3] = spareSpace;
-			    createPageArgs[4] = minimumRecordSize;
+                PageCreationArgs createPageArgs = new PageCreationArgs(
+                        StoredPage.FORMAT_NUMBER,
+                        prealloced ? 0 : (noIO ? 0 : CachedPage.WRITE_SYNC),
+                        pageSize,
+                        spareSpace,
+                        minimumRecordSize,
+                        0 /* containerInfoSize - unused for StoredPage */);
 
 			    // RESOLVE: right now, there is no re-mapping of pages, so
 			    // pageOffset = pageNumber*pageSize
@@ -1798,7 +1792,7 @@ protected BasePage newPage(BaseContainerHandle userHandle,
                         SanityManager.DEBUG_PRINT("FileContainer",
                             "got exception from initPage:"  +
                             "\nreuse = " + reuse +
-                            "\ncreatePageArgs[1] = " + createPageArgs[1] +
+                            "\nsyncFlag = " + createPageArgs.syncFlag +
                             "\nallocPage = " + allocPage
                             );
                     }
@@ -2224,13 +2218,13 @@ private AllocPage makeAllocPage(RawTransaction ntt,
 		boolean noIO = (handle.getMode() & ContainerHandle.MODE_UNLOGGED) ==
 			ContainerHandle.MODE_UNLOGGED;
 
-		int[] createAllocPageArgs = new int[ALLOC_PAGE_ARG_NUM];
-		createAllocPageArgs[0] = AllocPage.FORMAT_NUMBER;	
-		createAllocPageArgs[1] = noIO ? 0 : CachedPage.WRITE_SYNC;
-		createAllocPageArgs[2] = pageSize;
-		createAllocPageArgs[3] = 0;		// allocation page has no need for spare
-		createAllocPageArgs[4] = containerInfoSize;
-		createAllocPageArgs[5] = minimumRecordSize;
+		PageCreationArgs createAllocPageArgs = new PageCreationArgs(
+                AllocPage.FORMAT_NUMBER,
+                noIO ? 0 : CachedPage.WRITE_SYNC,
+                pageSize,
+                0,        // allocation page has no need for spare
+                minimumRecordSize,
+                containerInfoSize);
 
 		if (SanityManager.DEBUG)
         {
@@ -2272,7 +2266,7 @@ private AllocPage makeAllocPage(RawTransaction ntt,
 
 		@param allochandle the contianer handle to initialize the page with - the ntt
 		@param pkey the page number of the page to be initialized
-		@param createArgs the int array for page creation
+		@param createArgs the arguments for page creation
 		@param reuse is true if we are reusing a page that has 
 				already been initialized once
 
@@ -2280,7 +2274,7 @@ private AllocPage makeAllocPage(RawTransaction ntt,
 	*/
 	protected BasePage initPage(BaseContainerHandle allochandle, 
 								PageKey pkey,
-								int[] createArgs,
+								PageCreationArgs createArgs,
 								long pageOffset,
 								boolean reuse,
 								boolean overflow) throws StandardException
@@ -2554,20 +2548,20 @@ protected BasePage reCreatePageForRedoRecovery(
 		// no address translation necessary
 		PageKey pkey = new PageKey(identity, pageNumber);
 
-		int[] reCreatePageArgs = null;
+		PageCreationArgs reCreatePageArgs;
 
 		if (pageFormat == StoredPage.FORMAT_NUMBER)
 		{
-			reCreatePageArgs = new int[STORED_PAGE_ARG_NUM];
-			reCreatePageArgs[0] = pageFormat;
-			reCreatePageArgs[1] = CachedPage.WRITE_SYNC;
-			reCreatePageArgs[2] = pageSize;
-			reCreatePageArgs[3] = spareSpace;
-			reCreatePageArgs[4] = minimumRecordSize;
+            reCreatePageArgs = new PageCreationArgs(
+                    pageFormat,
+                    CachedPage.WRITE_SYNC,
+                    pageSize,
+                    spareSpace,
+                    minimumRecordSize,
+                    0 /* containerInfoSize - unused for StoredPage */);
 		}
 		else if (pageFormat == AllocPage.FORMAT_NUMBER)
 		{
-			reCreatePageArgs = new int[ALLOC_PAGE_ARG_NUM];
 
 			// only the first allocation page have borrowed space for the
 			// container info
@@ -2580,13 +2574,14 @@ else if (pageFormat == AllocPage.FORMAT_NUMBER)
 				firstAllocPageOffset = pageOffset;
 			}
 
+            reCreatePageArgs = new PageCreationArgs(
+                    pageFormat,
+                    CachedPage.WRITE_SYNC,
+                    pageSize,
+                    0, // allocation page has no need for spare
+                    minimumRecordSize,
+                    containerInfoSize);
 
-			reCreatePageArgs[0] = pageFormat;
-			reCreatePageArgs[1] = CachedPage.WRITE_SYNC;
-			reCreatePageArgs[2] = pageSize;
-			reCreatePageArgs[3] = 0; // allocation page has no need for spare
-			reCreatePageArgs[4] = containerInfoSize;
-			reCreatePageArgs[5] = minimumRecordSize;
 		}
 		else
 		{
@@ -3252,12 +3247,13 @@ protected int doPreAllocatePages(long lastPreallocPagenum,
 								 "how can we be Preallocating pages in a read only database?");
 
 		// initialize and a new page in cache
-		int[] createArgs = new int[5];
-		createArgs[0] = StoredPage.FORMAT_NUMBER;	// default is a stored page
-		createArgs[1] = CachedPage.WRITE_NO_SYNC;	// write it but no sync
-		createArgs[2] = pageSize;
-		createArgs[3] = spareSpace;
-		createArgs[4] = minimumRecordSize;
+        PageCreationArgs createArgs = new PageCreationArgs(
+                StoredPage.FORMAT_NUMBER, // default is a stored page
+                CachedPage.WRITE_NO_SYNC, // write it but no sync
+                pageSize,
+                spareSpace,
+                minimumRecordSize,
+                0 /* containerInfoSize - unused for StoredPage */);
 
 		StoredPage page = new StoredPage();
 		page.setFactory(dataFactory);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageCreationArgs.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageCreationArgs.java
index e69de29b..d48159d3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageCreationArgs.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageCreationArgs.java
@@ -0,0 +1,64 @@
+/*
+
+   Derby - Class org.apache.derby.impl.store.raw.data.PageCreationArgs
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.impl.store.raw.data;
+
+/**
+ * This class holds information that is passed to {@code
+ * CachedPage.createPage()} and used when a page object (either a
+ * {@code StoredPage} or an {@code AllocPage}) is created.
+ */
+class PageCreationArgs {
+    /**
+     * Tells which type of page to create. Either
+     * {@code StoredPage.FORMAT_NUMBER} or {@code AllocPage.FORMAT_NUMBER}.
+     */
+    final int formatId;
+
+    /**
+     * Tells whether writes to this page should be synced. Should be
+     * {@code CachedPage.WRITE_SYNC} or {@code CachedPage.WRITE_NO_SYNC}, or
+     * 0 if the page is in a temporary container.
+     */
+    final int syncFlag;
+
+    /** The size of the page in bytes. */
+    final int pageSize;
+
+    /** % of page to keep free for updates. Not used for {@code AllocPage}. */
+    final int spareSpace;
+
+    /** Minimum space to reserve for record portion length of row. */
+    final int minimumRecordSize;
+
+    /** Size of the container information stored in the {@code AllocPage}. */
+    final int containerInfoSize;
+
+    PageCreationArgs(int formatId, int syncFlag, int pageSize, int spareSpace,
+                     int minimumRecordSize, int containerInfoSize) {
+        this.formatId = formatId;
+        this.syncFlag = syncFlag;
+        this.pageSize = pageSize;
+        this.spareSpace = spareSpace;
+        this.minimumRecordSize = minimumRecordSize;
+        this.containerInfoSize = containerInfoSize;
+    }
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
index 3840a909..17fc9d23 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
@@ -746,23 +746,18 @@ private int calculateSlotFieldSize(int pageSize) {
      *
      * @param newIdentity   The key describing page (segment,container,page).
      * @param args          information stored about the page, once in the 
-     *                      container header and passed in through the array.
+     *                      container header and passed in through the object.
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
-	protected void createPage(
-    PageKey newIdentity, 
-    int[]   args) 
+	protected void createPage(PageKey newIdentity, PageCreationArgs args)
 		 throws StandardException
 	{
-		// arg[0] is the formatId of the page
-		// arg[1] is whether to sync the page to disk or not
 
-		int pageSize        = args[2];
-		spareSpace          = args[3];
-		minimumRecordSize   = args[4];
+		spareSpace          = args.spareSpace;
+		minimumRecordSize   = args.minimumRecordSize;
 
-        setPageArray(pageSize);
+        setPageArray(args.pageSize);
 
 		cleanPage();			// clean up the page array
 
