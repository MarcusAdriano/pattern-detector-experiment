diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
index 4ce7049b..13b387e1 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
@@ -120,6 +120,16 @@ public void setLimit(int length)
 		return;
 	}
 
+	/**
+     * return limit of the stream that can be read without throwing
+     * EOFException
+     * @return the remaining bytes left to be read from the stream
+     */
+    public final int getLimit()
+    {
+        return remainingBytes;
+    }
+
 	/**
 		Clear any limit set by setLimit. After this call no limit checking
 		will be made on any read until a setLimit()) call is made.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index c94859cc..59032da5 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -86,6 +86,18 @@
 	extends DataType implements StringDataValue, StreamStorable
 {
 
+	/**
+     * threshold, that decides when we return space back to the VM
+     * see getString() where it is used
+     */
+    protected final static int RETURN_SPACE_THRESHOLD = 4096;
+    
+    /**
+     * when we know that the array needs to grow by at least
+     * one byte, it is not performant to grow by just one byte
+     * instead this amount is used to provide a reasonable growby size.
+     */
+    private final static int GROWBY_FOR_CHAR = 64;
 	/**
 		Static array that can be used for blank padding.
 	*/
@@ -335,7 +347,7 @@ public String getString() throws StandardException
 				// data is stored in the char[] array
 
 				value = new String(rawData, 0, len);
-				if (len > 4096) {
+				if (len > RETURN_SPACE_THRESHOLD) {
 					// free up this char[] array to reduce memory usage
 					rawData = null;
 					rawLength = -1;
@@ -641,6 +653,11 @@ public void readExternal(ObjectInput in) throws IOException
         int utflen = in.readUnsignedShort();
 
         int requiredLength;
+        // minimum amount that is reasonable to grow the array
+        // when we know the array needs to growby at least one
+        // byte but we dont want to grow by one byte as that
+        // is not performant
+        int minGrowBy = growBy();
         if (utflen != 0)
         {
             // the object was not stored as a streaming column 
@@ -654,8 +671,8 @@ public void readExternal(ObjectInput in) throws IOException
             // OR
             // The original string was a 0 length string.
             requiredLength = in.available();
-            if (requiredLength < 64)
-                requiredLength = 64;
+            if (requiredLength < minGrowBy)
+                requiredLength = minGrowBy;
         }
 
         char str[];
@@ -707,12 +724,26 @@ public void readExternal(ObjectInput in) throws IOException
             if (strlen >= arrayLength) // the char array needs to be grown 
             {
                 int growby = in.available();
-
-                // We know at the array needs to be grown by at least one.
+                // We know that the array needs to be grown by at least one.
                 // However, even if the input stream wants to block on every
                 // byte, we don't want to grow by a byte at a time.
-                if (growby < 64)
-                    growby = 64;
+                // Note, for large data (clob > 32k), it is performant
+                // to grow the array by atleast 4k rather than a small amount
+                // Even better maybe to grow by 32k but then may be
+                // a little excess(?) for small data. 
+                // hopefully in.available() will give a fair
+                // estimate of how much data can be read to grow the 
+                // array by larger and necessary chunks.
+                // This performance issue due to 
+                // the slow growth of this array was noticed since inserts
+                // on clobs was taking a really long time as
+                // the array here grew previously by 64 bytes each time 
+                // till stream was drained.  (Derby-302)
+                // for char, growby 64 seems reasonable, but for varchar
+                // clob 4k or 32k is performant and hence
+                // growBy() is override correctly to ensure this
+                if (growby < minGrowBy)
+                    growby = minGrowBy;
 
                 int newstrlength = arrayLength + growby;
                 char oldstr[] = str;
@@ -805,6 +836,18 @@ else if ((c & 0x70) == 0x60) // we know the top bit is set here
     }
 
 	/**
+     * returns the reasonable minimum amount by 
+     * which the array can grow . See readExternal. 
+     * when we know that the array needs to grow by at least
+     * one byte, it is not performant to grow by just one byte
+     * instead this amount is used to provide a resonable growby size.
+     * @return minimum reasonable growby size
+     */
+    protected int growBy()
+    {
+        return GROWBY_FOR_CHAR;  //seems reasonable for a char
+    }
+	/**
 	 * @see Storable#restoreToNull
 	 *
 	 */
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarchar.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarchar.java
index e6f6418c..76198a90 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarchar.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarchar.java
@@ -182,4 +182,17 @@ public int typePrecedence()
 	{
 		return TypeId.VARCHAR_PRECEDENCE;
 	}
+    
+    /**
+     * returns the reasonable minimum amount by 
+     * which the array can grow . See readExternal. 
+     * when we know that the array needs to grow by at least
+     * one byte, it is not performant to grow by just one byte
+     * instead this amount is used to provide a resonable growby size.
+     * @return minimum reasonable growby size
+     */
+    protected final int growBy()
+    {
+        return RETURN_SPACE_THRESHOLD;  //seems reasonable for a varchar or clob 
+    }
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java
index 43d043b5..9371b2ff 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ReaderToUTF8Stream.java
@@ -43,11 +43,14 @@
 	private int blen;
 	private boolean eof;
 	private boolean multipleBuffer;
+    // buffer to hold the data read from stream 
+    // and converted to UTF8 format
+    private final static int BUFSIZE = 32768;
 
 	ReaderToUTF8Stream(LimitReader reader)
 	{
 		this.reader = reader;
-		buffer = new byte[4096];
+		buffer = new byte[BUFSIZE];
 		blen = -1;
 	}
 
@@ -196,5 +199,20 @@ public void close() throws IOException
 		reader.close();
 	}
 
+    /**
+     * Return an optimized version of bytes available to read from 
+     * the stream 
+     * Note, it is not exactly per java.io.InputStream#available()
+     */
+    public final int available()
+    {
+       int remainingBytes = reader.getLimit();
+       // this object buffers BUFSIZE bytes that can be read 
+       // and when that is finished it reads the next available bytes
+       // from the reader object 
+       // reader.getLimit() returns the remaining bytes available
+       // on this stream
+       return (BUFSIZE > remainingBytes ? remainingBytes : BUFSIZE);
+    }
 }
 
