diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
index 7a34f12f..718cd5cd 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
@@ -162,37 +162,38 @@ public double dot(Vector x) {
       return dotSelf();
     }
     
-    double result = 0;
     if (x instanceof SequentialAccessSparseVector) {
       // For sparse SeqAccVectors. do dot product without lookup in a linear fashion
       Iterator<Element> myIter = iterateNonZero();
       Iterator<Element> otherIter = x.iterateNonZero();
-      Element myCurrent = null;
-      Element otherCurrent = null;
-      while (myIter.hasNext() && otherIter.hasNext()) {
-        if (myCurrent == null) {
-          myCurrent = myIter.next();
-        }
-        if (otherCurrent == null) {
-          otherCurrent = otherIter.next();
+      if (!myIter.hasNext() || !otherIter.hasNext()) {
+        return 0.0;
         }
-
+      Element myCurrent = myIter.next();
+      Element otherCurrent = otherIter.next();
+      double result = 0.0;
+      while (true) {
         int myIndex = myCurrent.index();
         int otherIndex = otherCurrent.index();
-        
-        if (myIndex < otherIndex) {
-          // due to the sparseness skipping occurs more hence checked before equality
-          myCurrent = null;
-        } else if (myIndex > otherIndex){
-          otherCurrent = null;
-        } else { // both are equal 
+        if (myIndex == otherIndex) {
           result += myCurrent.get() * otherCurrent.get();
-          myCurrent = null;
-          otherCurrent = null;
+        }
+        if (myIndex <= otherIndex) {
+          if (!myIter.hasNext()) {
+            break;
+          }
+          myCurrent = myIter.next();
+        }
+        if (myIndex >= otherIndex) {
+          if (!otherIter.hasNext()) {
+            break;
+          }
+          otherCurrent = otherIter.next();
         } 
       }
       return result;
     } else { // seq.rand. seq.dense
+      double result = 0.0;      
       Iterator<Element> iter = iterateNonZero();
       while (iter.hasNext()) {
         Element element = iter.next();
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractTestVector.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractTestVector.java
index 9fa466b0..fdea7a00 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractTestVector.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractTestVector.java
@@ -219,6 +219,13 @@ public void testDot() throws Exception {
     assertEquals("dot", expected, res, EPSILON);
   }
 
+  public void testDot2() {
+    Vector test2 = test.clone();
+    test2.set(1, 0.0);
+    test2.set(3, 0.0);
+    assertEquals(3.3 * 3.3, test2.dot(test), EPSILON);
+  }
+
   public void testDotCardinality() {
     try {
       test.dot(new DenseVector(test.size() + 1));
