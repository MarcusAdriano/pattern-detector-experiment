diff --git a/aries/trunk/spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java b/aries/trunk/spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java
index cc19b429..e4f22476 100644
--- a/aries/trunk/spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java
+++ b/aries/trunk/spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java
@@ -56,6 +56,9 @@
     // (to the Util.class.getPackage()) is needed.
     private boolean additionalImportRequired = false;
 
+    // This field is true when the class was woven
+    private boolean woven = false;
+
     public TCCLSetterVisitor(ClassVisitor cv, String className, Set<WeavingData> weavingData) {
         super(cv);
         this.targetClass = Type.getType("L" + className.replace('.', '/') + ";");
@@ -73,6 +76,15 @@ public MethodVisitor visitMethod(int access, String name, String desc,
 
     @Override
     public void visitEnd() {
+        if (!woven) {
+            System.out.println("+++ not woven: " + targetClass);
+            // if this class wasn't woven, then don't add the synthesized method either.
+            super.visitEnd();
+            return;
+        } else {
+            System.out.println("+++ woven: " + targetClass);
+        }
+
         // Add generated static method
         Set<String> methodNames = new HashSet<String>();
 
@@ -165,6 +177,7 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc)
                 System.out.println("+++ Gotcha!");
 
                 additionalImportRequired = true;
+                woven = true;
                 
                 Label startTry = newLabel();
                 Label endTry = newLabel();
