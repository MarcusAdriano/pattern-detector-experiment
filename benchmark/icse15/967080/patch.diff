diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
index 8a7bfff9..e214f388 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
@@ -247,7 +247,8 @@ public Random newRandom() {
     if (seed != null) {
       throw new IllegalStateException("please call LuceneTestCase.newRandom only once per test");
     }
-    return newRandom(seedRnd.nextLong());
+    this.seed = Long.valueOf(seedRnd.nextLong());
+    return new Random(seed);
   }
   
   /**
@@ -259,6 +260,7 @@ public Random newRandom(long seed) {
     if (this.seed != null) {
       throw new IllegalStateException("please call LuceneTestCase.newRandom only once per test");
     }
+    System.out.println("WARNING: random seed of testcase '" + getName() + "' is fixed to: " + seed);
     this.seed = Long.valueOf(seed);
     return new Random(seed);
   }
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
index dedc0de5..3fa12efd 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
@@ -323,7 +323,8 @@ public Random newRandom() {
     if (seed != null) {
       throw new IllegalStateException("please call LuceneTestCaseJ4.newRandom only once per test");
     }
-    return newRandom(seedRnd.nextLong());
+    this.seed = Long.valueOf(seedRnd.nextLong());
+    return new Random(seed);
   }
 
   /**
@@ -335,6 +336,7 @@ public Random newRandom(long seed) {
     if (this.seed != null) {
       throw new IllegalStateException("please call LuceneTestCaseJ4.newRandom only once per test");
     }
+    System.out.println("WARNING: random seed of testcase '" + getName() + "' is fixed to: " + seed);
     this.seed = Long.valueOf(seed);
     return new Random(seed);
   }
@@ -350,7 +352,9 @@ public Random newRandom(long seed) {
    * .
    */
   public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz) {
-    return newStaticRandom(clazz, seedRnd.nextLong());
+    Long seed = seedRnd.nextLong();
+    staticSeeds.put(clazz, seed);
+    return new Random(seed);
   }
   
   /**
@@ -361,6 +365,7 @@ public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz) {
    */
   public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {
     staticSeeds.put(clazz, Long.valueOf(seed));
+    System.out.println("WARNING: random static seed of testclass '" + clazz + "' is fixed to: " + seed);
     return new Random(seed);
   }
 
