diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/vti/Restriction.java b/db/derby/code/trunk/java/engine/org/apache/derby/vti/Restriction.java
index ce3152fc..d7417305 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/vti/Restriction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/vti/Restriction.java
@@ -21,7 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.vti;
 
 import java.io.Serializable;
-import java.sql.SQLException;
+import org.apache.derby.iapi.util.IdUtil;
 
 /**
    <p>
@@ -40,9 +40,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     public abstract String toSQL();
 
-    /** Utility method to double quote a string */
-    protected String doubleQuote( String raw ) { return "\"" + raw + "\""; }
-
     /** Utility method to parenthesize an expression */
     protected String parenthesize( String raw ) { return "( " + raw + " )"; }
     
@@ -236,7 +233,7 @@ public String toSQL()
         {
             StringBuffer buffer = new StringBuffer();
 
-            buffer.append( doubleQuote( _columnName ) );
+            buffer.append( IdUtil.normalToDelimited( _columnName ) );
             buffer.append( " " + OPERATOR_SYMBOLS[ _comparisonOperator ] + " " );
             if ( _constantOperand != null ) { buffer.append( _constantOperand ); }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java
index 75a0cbd4..00866ed3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java
@@ -24,13 +24,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
+import java.sql.Statement;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
 
 /**
  * <p>
@@ -154,6 +155,21 @@ protected void    setUp()
                  "external name 'org.apache.derbyTesting.functionTests.tests.lang.RestrictedVTITest.nullableIntegerList'\n"
                  );
         }
+        if ( !routineExists( conn, "INTEGERLISTSPECIALCOLNAMES" ) )
+        {
+            goodStatement
+                (
+                 conn,
+                 "create function integerListSpecialColNames()\n" +
+                 "returns table( \"CoL \"\"1\"\"\" int,\n" +
+                 "\"cOL \"\"2\"\"\" int, col3 int, col4 int )\n" +
+                 "language java\n" +
+                 "parameter style derby_jdbc_result_set\n" +
+                 "no sql\n" +
+                 "external name '" + getClass().getName() +
+                 ".integerListSpecialColNames'\n"
+                 );
+        }
         if ( !tableExists( conn, "T_4357_1" ) )
         {
             goodStatement
@@ -724,6 +740,44 @@ public void test_09_4651() throws Exception
              );
     }
 
+    /**
+     * Test that {@code Restriction.toSQL()} returns properly quoted column
+     * names. DERBY-4654.
+     */
+    public void test_10_quotes_in_column_names() throws Exception
+    {
+        String[][] expectedRows = new String[][] {{"100", "200", "300", "400"}};
+        String expectedRestriction =
+                "( \"cOL \"\"2\"\"\" < 1000 ) AND ( \"CoL \"\"1\"\"\" > 1 )";
+
+        // Check that we can execute a query against a restricted VTI with
+        // double quotes in the column names.
+        assertPR(
+                getConnection(),
+                "select * from table(integerListSpecialColNames()) t " +
+                "where \"CoL \"\"1\"\"\" > 1 and \"cOL \"\"2\"\"\" < 1000",
+                expectedRows,
+                "[CoL \"1\", cOL \"2\", COL3, COL4]",
+                expectedRestriction);
+
+        // Get the restriction that was pushed down.
+        Statement stmt = createStatement();
+        ResultSet rs = executeQuery(stmt, "values getLastRestriction()");
+        assertTrue("empty result", rs.next());
+        String restriction = rs.getString(1);
+        assertEquals(expectedRestriction, restriction);
+        rs.close();
+
+        // Verify that the returned restriction has correct syntax so that
+        // we can put it directly into the WHERE clause of a select query and
+        // get the same rows as we did above.
+        rs = executeQuery(
+                stmt,
+                "select * from table(integerListSpecialColNames()) t where " +
+                restriction);
+        JDBC.assertUnorderedResultSet(rs, expectedRows);
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // SQL ROUTINES
@@ -769,6 +823,21 @@ public static IntegerArrayVTI nullableIntegerList()
     }
     private static Integer i( int intValue ) { return new Integer( intValue ); }
     
+    public static IntegerArrayVTI integerListSpecialColNames()
+    {
+        return new IntegerArrayVTI
+            (
+             new String[] { "CoL \"1\"", "cOL \"2\"", "COL3", "COL4" },
+             new int[][]
+             {
+                 new int[] { 1, 2, 3, 4 },
+                 new int[] { 100, 200, 300, 400 },
+                 new int[] { 1000, 2000, 3000, 4000 },
+                 new int[] { 10000, 20000, 30000, 40000 },
+             }
+             );
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
