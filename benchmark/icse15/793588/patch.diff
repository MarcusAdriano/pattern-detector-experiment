diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
index 09e4fa2d..e308992f 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
@@ -70,7 +70,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	protected boolean RDBUPDRM_sent = false;	//We have sent that an update
 											// occurred in this transaction
 	protected boolean sendTRGDFTRT = false; // Send package target default value
-
     /**
      * Connection to the database in the embedded engine.
      */
@@ -80,8 +79,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private DRDAStatement currentStatement; // current statement we are working on
 	private Hashtable stmtTable;		// Hash table for storing statements
 
-	boolean forXA = false;
-
 	// constructor
 	/**
 	 * Database constructor
@@ -336,7 +333,12 @@ protected void rollback() throws SQLException
 			conn.rollback();
 	}
 	/**
-	  * Close the connection and clean up the statement table
+	  * Database close does following cleanup tasks
+	  * 1)Rollback any pending transaction on the Connection object (except 
+	  * for a global-XA Connection obejct) before closing the Connection. 
+	  * Without the rollback, the Connection close will result into an 
+	  * exception if there is a pending transaction on that Connection.
+	  * 2)Clean up the statement table 
 	  * @throws SQLException on conn.close() error to be handled in DRDAConnThread.
 	  */
 	protected void close() throws SQLException
@@ -355,7 +357,8 @@ protected void close() throws SQLException
 				defaultStatement.close();
 			if ((conn != null) && !conn.isClosed())
 			{
-				if (! forXA)
+				//rollback all the pending transactions except global XA trans
+				if (! conn.isInGlobalTransaction())
 				{
 					conn.rollback();
 				}
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
index 61ce5c4e..7b715534 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
@@ -57,7 +57,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	XADatabase (String dbName)
 	{
 		super(dbName);
-		forXA = true;
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
index c4913216..331cca7c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
@@ -475,6 +475,11 @@ public final void setDrdaID(String drdaID)
         }
 	}
 
+    /** @see EngineConnection#isInGlobalTransaction() */
+    public boolean isInGlobalTransaction() {
+    	return control.isInGlobalTransaction();
+    }
+
 	/**
 	 *  Set the internal isolation level to use for preparing statements.
 	 *  Subsequent prepares will use this isoalation level
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnectionControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnectionControl.java
index 9d441bb7..786f6ca1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnectionControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnectionControl.java
@@ -91,6 +91,12 @@ public int checkHoldCursors(int holdability, boolean downgrade)
 	*/
 	public void resetIsolationLevelFlag() throws SQLException;
 
+	/**
+     * Is this a global transaction
+     * @return true if this is a global XA transaction
+     */
+    public boolean isInGlobalTransaction();
+
 	/**
 		Close called on BrokeredConnection. If this call
 		returns true then getRealConnection().close() will be called.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
index fdd758b7..a53fd6d2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
@@ -40,6 +40,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     public void setDrdaID(String drdaID);
 
+    /** 
+     * Is this a global transaction
+     * @return true if this is a global XA transaction
+     */
+    public boolean isInGlobalTransaction();
+    
     /** 
      * Set the transaction isolation level that will be used for the 
      * next prepare.  Used by network server to implement DB2 style 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index 2de687c8..3aebf796 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -2733,6 +2733,11 @@ public void setDrdaID(String drdaID) {
 		getLanguageConnection().setDrdaID(drdaID);
 	}
 
+    /** @see EngineConnection#isInGlobalTransaction() */
+    public boolean isInGlobalTransaction() {
+    	return false;
+    }
+
 	/**
 		Reset the connection before it is returned from a PooledConnection
 		to a new application request (wrapped by a BrokeredConnection).
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
index c49c2e22..4330f4dd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
@@ -410,6 +410,10 @@ public void resetIsolationLevelFlag() throws SQLException {
 		realConnection.getLanguageConnection().resetIsolationLevelFlagUsedForSQLandJDBC();
 	}
 	
+    /** @see BrokeredConnectionControl#isInGlobalTransaction() */
+    public boolean isInGlobalTransaction() {
+    	return false;
+    }	
 	
 	/**
 		Notify the control class that a SQLException was thrown
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java
index 14101b35..cb0a7023 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.jdbc;
 
 import org.apache.derby.impl.jdbc.Util;
+import org.apache.derby.iapi.jdbc.BrokeredConnectionControl;
 import org.apache.derby.iapi.jdbc.EngineConnection;
 import org.apache.derby.iapi.jdbc.ResourceAdapter;
 
@@ -53,6 +54,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
                 xaRes = new EmbedXAResource (this, ra);
 	}
 
+    /** @see BrokeredConnectionControl#isInGlobalTransaction() */
+    public boolean isInGlobalTransaction() {
+    	return isGlobal();
+    }	
+
     /**
      * Check if this connection is part of a global XA transaction.
      *
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java
index a1f405f8..948b354e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java
@@ -51,6 +51,55 @@ Licensed to the Apache Software Foundation (ASF) under one or more
   */
 public class XATransactionTest extends BaseJDBCTestCase {
 
+	/**
+	  * This test does following 
+	  * 1)Start the network server
+	  * 2)Start a local xa transaction
+	  * 3)Do not commit the local XA transaction
+	  * 4)Shutdown the network server
+	  * 5)Start the server again
+	  * 
+	  * Before the fix for DERBY-4053 went in, step 4) would not shutdown the
+	  * server properly because of the pending local XA transaction. During the
+	  * server shutdown, we try to close all the open connections but the close 
+	  * on the XA connection results into an exception because there is still a
+	  * pending transaction. That exception is not handled by the server and
+	  * because of that, all the code necessary to shutdown the server is not
+	  * executed. The next time around, step 5), when we try to bring up the
+	  * server again, it ends up hanging
+	  * 2009-07-09 21:21:28.828 GMT : Invalid reply from network server: Insufficient data.
+	  * 2009-07-09 21:21:28.843 GMT : Could not listen on port 1527 on host 127.0.0.1: java.net.BindException: Address already in use: JVM_Bind
+	  * 
+	  * The fix for DERBY-4053 makes sure that before calling close on local XA
+	  * transaction, we first rollback any transaction active on the 
+	  * connection. 
+	 */
+	public void testPendingLocalTranAndServerShutdown() throws Exception {
+        if (usingEmbedded())
+            return;
+        //1)Server must be up already through the Derby junit framework
+        //2)Start a local xa transaction
+        XADataSource xaDataSource = J2EEDataSource.getXADataSource();
+        XAConnection xaconn = xaDataSource.getXAConnection();
+        XAResource xar = xaconn.getXAResource();
+        Connection conn = xaconn.getConnection();
+        Statement s = conn.createStatement();
+        s.executeUpdate("create table tab(i int)");
+        s.executeUpdate("insert into tab values (1),(2),(3),(4)");
+        conn.commit();
+        conn.setAutoCommit(false);
+        ResultSet rs = s.executeQuery("select * from tab");
+        rs.next();
+        //3)Do not commit this pending local XA transaction
+    	
+        //4)Shutdown the network server
+        //bring the server down while the local xa transaction is still active
+        TestConfiguration.getCurrent().stopNetworkServer();
+        
+        //5)Start the server again
+        TestConfiguration.getCurrent().startNetworkServer();
+	}
+	
     /** Tests whether it is possible to reconstruct the original Xid value
       * correctly from SYSCS_DIAG.TRANSACTION_TABLE. */
     public void testGlobalXIDinTransactionTable() throws Exception {
