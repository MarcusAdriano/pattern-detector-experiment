diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index a96f49da..2e205ffe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -646,16 +646,19 @@ void copyResultColumnNames(ResultColumnList nameList)
 		 */
 		if (SanityManager.DEBUG)
 		{
-			 if ((! countMismatchAllowed) && visibleSize() != nameList.size())
+             if ( (! countMismatchAllowed) &&
+                  visibleSize() != nameList.visibleSize() )
 			 {
 				SanityManager.THROWASSERT(
 					"The size of the 2 lists is expected to be the same. " +
 					"visibleSize() = " + visibleSize() +
-					", nameList.size() = " + nameList.size());
+                    ", nameList.visibleSize() = " + nameList.visibleSize());
 			 }
 		 }
 
-		int size = (countMismatchAllowed) ? nameList.size() : visibleSize();
+        int size =
+            (countMismatchAllowed) ? nameList.visibleSize() : visibleSize();
+
 		for (int index = 0; index < size; index++)
 		{
 			ResultColumn thisResultColumn = (ResultColumn) elementAt(index);
@@ -2050,7 +2053,7 @@ public void propagateDCLInfo(ResultColumnList derivedRCL, String tableName)
 		if (derivedRCL.size() != size() &&
 		    ! derivedRCL.getCountMismatchAllowed())
 		{
-			if (visibleSize() != derivedRCL.size()) {
+            if (visibleSize() != derivedRCL.visibleSize()) {
 				throw StandardException.newException(SQLState.LANG_DERIVED_COLUMN_LIST_MISMATCH, tableName);
 			}
 		}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByInSubqueries.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByInSubqueries.java
index c95a7304..69d81aa1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByInSubqueries.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByInSubqueries.java
@@ -288,6 +288,16 @@ public void testInsertSelectOrderBy() throws SQLException {
                 {"8", null},
                 {"1", null}});
 
+        // DERBY-4496
+        s.executeUpdate("create table t4496(x varchar(100))");
+        s.execute("insert into t4496(x) select ibmreqd from " +
+                  "    (select * from sysibm.sysdummy1" +
+                  "         order by length(ibmreqd)) t1");
+
+        JDBC.assertFullResultSet(
+            s.executeQuery("select * from t4496"),
+            new String[][]{{"Y"}});
+
         rollback();
     }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index 0ee7b7fb..74a37559 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -207,6 +207,7 @@ public static Test suite() {
         suite.addTest(UserLobTest.suite());
         suite.addTest(OffsetFetchNextTest.suite());
         suite.addTest(SequenceTest.suite());
+        suite.addTest(OrderByInSubqueries.suite());
         suite.addTest(OLAPTest.suite());
 
         return suite;
