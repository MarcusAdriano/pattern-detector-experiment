diff --git a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Activator.java b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Activator.java
index 8578ba84..033b95f0 100644
--- a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Activator.java
+++ b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Activator.java
@@ -24,18 +24,14 @@
 import org.osgi.framework.hooks.weaving.WeavingHook;
 
 public class Activator implements BundleActivator {
-	private ServiceRegistration<WeavingHook> reg;
-
-	public void start(BundleContext context) throws Exception {
-		System.out.println("Hello World!!");
+	private ServiceRegistration<WeavingHook> weavingHookService;
 		
+	public synchronized void start(BundleContext context) throws Exception {
 		WeavingHook wh = new MyWeavingHook();
-		reg = context.registerService(WeavingHook.class, wh, null);
+		weavingHookService = context.registerService(WeavingHook.class, wh, null);
 	}
 	
-	public void stop(BundleContext context) throws Exception {
-		reg.unregister();
-		
-		System.out.println("Goodbye World!!");
+	public synchronized void stop(BundleContext context) throws Exception {
+		weavingHookService.unregister();
 	}
 }
diff --git a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/MyWeavingHook.java b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/MyWeavingHook.java
index b049285b..2023f177 100644
--- a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/MyWeavingHook.java
+++ b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/MyWeavingHook.java
@@ -18,18 +18,12 @@
  */
 package testweavinghook;
 
-import java.io.IOException;
-import java.net.URL;
-import java.util.List;
-
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.osgi.framework.hooks.weaving.WeavingHook;
 import org.osgi.framework.hooks.weaving.WovenClass;
-import org.osgi.framework.wiring.BundleWiring;
 
 public class MyWeavingHook implements WeavingHook {
-
 	@Override
 	public void weave(WovenClass wovenClass) {
 	    if (wovenClass.getBundleWiring().getBundle().getSymbolicName().equals("MyTestBundle"))
@@ -42,23 +36,5 @@ public void weave(WovenClass wovenClass) {
 	        cr.accept(tsv, 0);
 	        wovenClass.setBytes(cw.toByteArray());
 	    }
-	    /*
-		if (wovenClass.getClassName().startsWith("mytestbundle")) {
-			BundleWiring bw = wovenClass.getBundleWiring();
-			String fileName = wovenClass.getClassName().replace('.', '/') + ".class";
-			URL res = bw.getBundle().getResource("/altclasses/" + fileName);
-			if (res != null) {
-				System.out.println("*** Found an alternative class: " + res);
-				try {
-					wovenClass.setBytes(Streams.suck(res.openStream()));
-					List<String> imports = wovenClass.getDynamicImports();
-					imports.add("org.apache.aries.spifly.util");
-					imports.add("org.osgi.util.tracker");
-					imports.add("org.osgi.framework.wiring");
-				} catch (IOException e) {
-					e.printStackTrace();
-				}
-			}				
-		}*/			
 	}
 }
diff --git a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/TCCLSetterVisitor.java b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/TCCLSetterVisitor.java
index 809891e7..ca7f1de3 100644
--- a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/TCCLSetterVisitor.java
+++ b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/TCCLSetterVisitor.java
@@ -57,12 +57,18 @@ public void visitMethodInsn(int opcode, String owner, String name,
                 "load".equals(name)) {
                 System.out.println("+++ Gotcha!");
                 
-                mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
-                mv.visitLdcInsn("Bleeeeeh");
-                mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
-            }
+                mv.visitMethodInsn(INVOKESTATIC, "testweavinghook/Util",
+                        "storeContextClassloader", "()V");
+                mv.visitMethodInsn(INVOKESTATIC, "testweavinghook/Util",
+                        "fixContextClassloader", "()V");
+
+                super.visitMethodInsn(opcode, owner, name, desc);
                 
+                mv.visitMethodInsn(INVOKESTATIC, "testweavinghook/Util",
+                        "restoreContextClassloader", "()V");
+            } else {                
             super.visitMethodInsn(opcode, owner, name, desc);
         }
     }
+    }
 }
diff --git a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Util.java b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Util.java
index e69de29b..07dec238 100644
--- a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Util.java
+++ b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/TestWeavingHook/src/testweavinghook/Util.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package testweavinghook;
+
+import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleReference;
+import org.osgi.framework.wiring.BundleWiring;
+
+public class Util {
+    static ThreadLocal<ClassLoader> classLoaders = new ThreadLocal<ClassLoader>();
+    
+    public static void storeContextClassloader() {
+        classLoaders.set(Thread.currentThread().getContextClassLoader());
+    }
+    
+    public static void restoreContextClassloader() {
+        Thread.currentThread().setContextClassLoader(classLoaders.get());
+        classLoaders.set(null);
+    }
+    
+    public static void fixContextClassloader() {
+        Thread.currentThread().setContextClassLoader(findClassLoader());
+    }
+    
+    private static ClassLoader findClassLoader() {
+        ClassLoader cl = Activator.class.getClassLoader();
+        if (!(cl instanceof BundleReference)) {
+            return null;
+        }
+        
+        BundleReference br = (BundleReference) cl;      
+        for (Bundle b : br.getBundle().getBundleContext().getBundles()) {
+            // TODO find the appropriate bundle
+            if ("MyServiceImpl".equals(b.getSymbolicName())) {
+                BundleWiring bw = b.adapt(BundleWiring.class);
+                if (bw != null)
+                    return bw.getClassLoader();
+            }           
+        }
+        return null;
+    }
+}
