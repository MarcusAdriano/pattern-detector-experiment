diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java
index 5b9fba6b..c7d28ec4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java
@@ -66,8 +66,21 @@ public static void copyFiles(File outDir, String suppFiles)
 		    fw.close();
 		    suppFile = new File(f.getCanonicalPath());
 		}
-
-
+                // need to make a guess so we copy text files to local encoding
+                // on non-ascii systems...
+		        if ((fileName.indexOf("sql") > 0) || (fileName.indexOf("txt") > 0) || (fileName.indexOf(".view") > 0) || (fileName.indexOf(".policy") > 0))
+                {
+                    BufferedReader inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+                    PrintWriter pw = new PrintWriter
+                       ( new BufferedWriter(new FileWriter(suppFile), 10000), true );
+                    int c;
+                    while ((c = inFile.read()) != -1)
+                        pw.write(c);
+                    pw.flush();
+                    pw.close();
+                }
+                else
+                {
     			FileOutputStream fos = new FileOutputStream(suppFile);
                 byte[] data = new byte[4096];
                 int len;
@@ -79,4 +92,5 @@ public static void copyFiles(File outDir, String suppFiles)
 			}
         }
 	}
+	}
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java
index 3de295cd..e701340a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java
@@ -200,6 +200,21 @@ public boolean exec(String outfile, File outDir, PrintWriter pwDiff,
 		        System.out.println("SED Error: " + cfe.getMessage());
 		    }
 		}
+        else 
+        {
+            // read in in fixed format, but write out relying on default encoding
+            File EncodedOutFile = new File(outDir, testBase + ".tmpmstr");
+            BufferedReader inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+            
+            PrintWriter pw = new PrintWriter
+            ( new BufferedWriter(new FileWriter(EncodedOutFile), 10000), true );
+            int c;
+            while ((c = inFile.read()) != -1)
+                pw.write(c);
+            pw.flush();
+            pw.close();
+            is = new FileInputStream(EncodedOutFile);
+        }	
         
         // Define the input and output files
         outFile = new BufferedReader(new FileReader(outfile));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
index 5b03e4f6..51e6541b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
@@ -227,7 +227,7 @@ private static void runSuites(Vector suitesToRun)
             }
 
             // Create a BufferedReader to read the list of tests to run
-            runlistFile = new BufferedReader(new InputStreamReader(is));
+            runlistFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
             if (runlistFile == null)
             {
                 System.out.println("The suite runall file could not be read.");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index 54fe0968..27fc9d1e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -36,6 +36,7 @@
 import java.io.BufferedOutputStream;
 import java.io.BufferedWriter;
 import java.io.FileWriter;
+import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.PrintStream;
 import java.io.IOException;
@@ -103,6 +104,7 @@
 	static boolean upgradetest = false;
 	static boolean encryption = false; // requires jdk12ext plus encryptionProtocol
 	static boolean jdk12exttest = false; // requires jdk12ext
+    static boolean generateUTF8Out = false; // setting to create a utf8 encoded master file.
 	static String runningdir = ""; // where the tests are run and suppfiles placed
 	static String outputdir = ""; // user can specify as a property (optional)
 	static String canondir; // optional (to specify other than "master")
@@ -135,7 +137,8 @@
 	static String testOutName; // output name without path or extension (optional)
 	static String passFileName; // file listing passed tests
 	static String failFileName; // file listing failed tests
-	static String JCCOutName; //file name for JCC corrected master
+    static String UTF8OutName; // file name for utf8 encoded out - not used for file comparison
+	static String tempMasterName; //file name for master, converted to local encoding, and for network server, corrected master
     static File passFile;
     static File failFile;
 	static String shutdownurl = "";
@@ -152,9 +155,10 @@
     static File runDir; // where test is run and where support files are expected
     static File canonDir; // allows setting master dir other than default
     static File tmpOutFile; // tmp output file (before sed)
-    static File JCCOutFile; // master file processed for JCC
+    static File tempMasterFile; // master file copied into local encoding - with networkserver, also processed
     static File stdOutFile; // for tests with useoutput false
     static File finalOutFile; // final output file (after sed)
+    static File UTF8OutFile; // file name for out file copied into utf8 encoding
     static File appPropFile; // testname_app.properties or default
     static File clPropFile; // testname_derby.properties or default
     static File diffFile; // To indicate diffs
@@ -409,9 +413,10 @@ public static void main(String[] args)
     		pwDiff.flush();
         }
 
+        generateUTF8OutFile(finalOutFile);
+        
 		// Cleanup files
 		doCleanup(javaVersion);
-
 	}
 
     private static void testRun(String propString, Properties sysProp)
@@ -643,7 +648,7 @@ private static void setDirectories(String scriptName, Properties sp)
 
             // Read the test file and copy it to the outDir
             // except for multi tests (for multi we just need to locate it)
-            BufferedReader in = new BufferedReader(new InputStreamReader(is));
+            BufferedReader in = new BufferedReader(new InputStreamReader(is, "UTF-8"));
             if (upgradetest)
 		
                 //these calls to getCanonicalPath catch IOExceptions as a workaround to
@@ -765,11 +770,10 @@ else if (useCommonDB == true)
 
         // Create a .tmp file for doing sed later to create testBase.out
         tmpOutFile = new File(outDir, testOutName + ".tmp");
-		if (NetServer.isClientConnection(framework))
-		{
-			JCCOutName = testOutName+".tmpmstr";
-		}
-
+        // Always create a.tmpmstr copy of the master file in local encoding.
+        // With network server, this gets adjusted for displaywidth 
+        tempMasterName = testOutName+".tmpmstr";
+		UTF8OutName = testOutName+".utf8out";
 		// Define the .out file which will be created by massaging the tmp.out
 		finalOutFile = new File(outDir, testOutName + ".out");
 
@@ -801,18 +805,18 @@ else if (useCommonDB == true)
         // Delete any old .out or .tmp files
         if (tmpOutFile.exists())
             status = tmpOutFile.delete();
-		if (NetServer.isClientConnection(framework))
-		{
-        	JCCOutFile = new File(outDir, JCCOutName);
-        	if (JCCOutFile.exists())
-            	status = JCCOutFile.delete();
-		}
+        tempMasterFile = new File(outDir, tempMasterName);
+        if (tempMasterFile.exists())
+            status = tempMasterFile.delete();
         if (finalOutFile.exists())
             status = finalOutFile.delete();
         if (diffFile.exists())
             status = diffFile.delete();
         if (stdOutFile.exists())
             status = stdOutFile.delete();
+        UTF8OutFile = new File (outDir, UTF8OutName);
+        if (UTF8OutFile.exists())
+            status = UTF8OutFile.delete();
 
         // Delete any old pass or fail files
         if (!isSuiteRun)
@@ -849,6 +853,10 @@ private static JavaVersionHolder getProperties(Properties sp)
         if (hostName == null)
            hostName="localhost";
 		
+        String generateUTF8OutProp = sp.getProperty("generateUTF8Out");
+        if (generateUTF8OutProp != null && generateUTF8OutProp.equals("true"))
+        	generateUTF8Out = true;
+        
         // Some tests will not work with some frameworks,
         // so check suite exclude files for tests to be skipped
         String skipFile = framework + ".exclude";
@@ -1408,6 +1416,7 @@ else if (isClDef != null)
 			{
 				ap.put("derby.ui.codeset",fileEnc);
 			}
+
 			if (verbose)
 				System.out.println("console.encoding:" + conEnc + 
 								   " file.encoding:" + fileEnc +
@@ -1820,8 +1829,8 @@ private static void doCleanup(String javaVersion)
         //printWriter.close();
         //printWriter = null;
 
-        //Always cleanup the script files
-        if ( !(script == null) && (script.exists()) )
+        //Always cleanup the script files - except when keepfiles is true
+        if ( !(script == null) && (script.exists()) && (!keepfiles) )
         {
             status = script.delete();
             //System.out.println("Status was: " + status);
@@ -1851,12 +1860,11 @@ private static void doCleanup(String javaVersion)
             status = finalOutFile.delete();
             if (skiptest == false)
                 status = diffFile.delete();
-			// delete JCC filtered master file
-			if (NetServer.isClientConnection(framework))
-			{
-        		JCCOutFile = new File(outDir, JCCOutName);
-            	status = JCCOutFile.delete();
-			}
+            // delete the copied (and for Network Server, modified) master file 
+            tempMasterFile = new File(outDir, tempMasterName);
+            status = tempMasterFile.delete();
+            UTF8OutFile = new File(outDir, UTF8OutName);
+            status = UTF8OutFile.delete();
             if (deleteBaseDir)
             {
                 if (useCommonDB == false) 
@@ -1995,7 +2003,7 @@ static void appendStderr(BufferedOutputStream bos, InputStream is)
     {
         PrintWriter tmpPw = new PrintWriter(bos);
         // reader for stderr
-        BufferedReader errReader = new BufferedReader(new InputStreamReader(is));
+        BufferedReader errReader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
         String s = null;
         int lines = 0;
         while ((s = errReader.readLine()) != null)
@@ -2133,18 +2141,23 @@ else if ( (runDir != null) && (runDir.exists()) )
         Vector v = jvm.getCommandLine();
         if ( ij.startsWith("ij") )
         {
-            // as of cn1411-20030930, the system takes the default console encoding
-            // which in the US, on windows, is Cp437.
-            // Sun on the other hand, always forces a console encoding of 1252.
-            // To get the same result for ibm141 & jdk14*, we need to force 
-            // the console encoding to Cp1252 for ij tests.
-            // see beetle 5475.
+            // As of cn1411-20030930 IBM jvm the system takes the default
+            // console encoding which in the US, on windows, is Cp437.
+            // Sun jvms, however, always force a console encoding of 1252.
+            // To get the same result for ibm141 & jdk14*, the harness needs to
+            // force the console encoding to Cp1252 for ij tests - unless 
+            // we're on non-ascii systems.
+            String isNotAscii = System.getProperty("platform.notASCII");
+            if ( (isNotAscii == null) || (isNotAscii.equals("false"))) 
             v.addElement("-Dconsole.encoding=Cp1252" );
             v.addElement("org.apache.derby.tools." + ij);
             if (ij.equals("ij"))
             {
-                v.addElement("-fr");
-                v.addElement(scriptFileName);
+                //TODO: is there a setting/property we could check after which
+            	// we can use v.addElement("-fr"); (read from the classpath?)
+                // then we can also use v.addElement(scriptFile);
+            	v.addElement("-f");
+                v.addElement(outDir.toString() + File.separatorChar + scriptFileName);
             }
             v.addElement("-p");
             v.addElement(propString);
@@ -2570,6 +2583,29 @@ else if (!haveSecurityManagerAlready)
         return installedSecurityManager;
     }
 
+    // copy the .out file in utf8 format. 
+    // This can then be used as a new master in the source.
+    // It is assumed that if one runs with this property, keepfiles should be true.
+    private static void generateUTF8OutFile(File FinalOutFile) throws IOException
+    {
+        if (generateUTF8Out) 
+        {
+            keepfiles=true;
+        	File UTF8OutFile = new File(UTF8OutName);
+        	
+        	// start reading the .out file back in, using default encoding
+        	BufferedReader inFile = new BufferedReader(new FileReader(FinalOutFile));
+        	FileOutputStream fos = new FileOutputStream(UTF8OutFile);
+        	BufferedWriter bw = new BufferedWriter (new OutputStreamWriter(fos, "UTF-8"));  
+        	int c;
+        	while ((c = inFile.read()) != -1)
+        		bw.write(c);
+        	bw.flush();
+        	bw.close();
+        	fos.close();     
+        }
+    }
+
 }
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
index 3ff1d4a1..1ab8d193 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
@@ -357,7 +357,7 @@ else if (key.equals("delete"))
         if (is == null)
             inFile = new BufferedReader(new FileReader(srcFile));
         else
-            inFile = new BufferedReader(new InputStreamReader(is));
+            inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
         outFile = new PrintWriter
         ( new BufferedWriter(new FileWriter(dstFile), 10000), true );
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java
index c7c2c135..feee3f74 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java
@@ -53,7 +53,7 @@ public static boolean skipIt(String listFileName, String testName)
         }
         
         // Create a BufferedReader to read the list of tests to skip
-        BufferedReader listFile = new BufferedReader(new InputStreamReader(is));
+        BufferedReader listFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
         String str = "";
         // Read the list of tests to skip, compare to testName
         while ( (str = listFile.readLine()) != null )
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java b/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
index 4326ff66..67a8af18 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
@@ -212,6 +212,7 @@ private void initMaxSizes2(){
 		timeSize=len;
 
 	}
+
 	public LocalizedInput getNewInput(InputStream i) {
 		try {
 			if (encode != null)
@@ -223,6 +224,16 @@ public LocalizedInput getNewInput(InputStream i) {
 		return new LocalizedInput(i);
 	}
 
+	public LocalizedInput getNewEncodedInput(InputStream i, String encoding) {
+		try {
+	          return new LocalizedInput(i,encoding);
+		}
+		catch (UnsupportedEncodingException e){
+			
+		}
+		return new LocalizedInput(i);
+        }
+
 	public LocalizedOutput getNewOutput(OutputStream o){
 		try {
 			if (encode != null)
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
index 46adde14..e5f886cd 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
@@ -541,7 +541,7 @@ void newResourceInput(String resourceName) {
 		if (is==null) throw ijException.resourceNotFound();
 		oldGrabbers.push(commandGrabber[currCE]);
 	    commandGrabber[currCE] = 
-                new StatementFinder(langUtil.getNewInput(new BufferedInputStream(is, BUFFEREDFILESIZE)));
+                new StatementFinder(langUtil.getNewEncodedInput(new BufferedInputStream(is, BUFFEREDFILESIZE), "UTF8"));
 		fileInput = true;
 	}
 
