diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
index 12d99868..9e00119e 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
@@ -85,13 +85,29 @@
     protected boolean isXAConnection_ = false; // Indicates an XA connection
 
     // XA States
-    public static final int XA_LOCAL = 0;   //  No global transaction in process
-    public static final int XA_GLOBAL = 1;  // Global transaction in process
-    //TODO: Remove entirely once indoubtlist is gone.  
+    // The client needs to keep track of the connection's transaction branch association
+    // per table 2.6 in the XA+ specification in order to determine if commits should flow in
+    // autocommit mode.  There is no need to keep track of suspended transactions separately from
+    // XA_TO_NOT_ASSOCIATED.
+    // 
+    /**
+     * <code>XA_T0_NOT_ASSOCIATED</code>
+     * This connection is not currently associated with an XA transaction
+     * In this state commits will flow in autocommit mode.
+     */
+    public static final int XA_T0_NOT_ASSOCIATED = 0;   
+    
+    /**
+     * <code>XA_T1_ASSOCIATED</code>
+     * In this state commits will not flow in autocommit mode.
+     */
+    public static final int XA_T1_ASSOCIATED = 1;  
+    
+    //TODO: Remove XA_RECOVER entirely once indoubtlist is gone.  
     //public static final int XA_RECOVER = 14;
 
 
-    protected int xaState_ = XA_LOCAL;
+    protected int xaState_ = XA_T0_NOT_ASSOCIATED;
 
     // XA Host Type
     public int xaHostVersion_ = 0;
@@ -524,7 +540,7 @@ void writeAutoCommit() throws SqlException {
 
     public void writeCommit() throws SqlException {
         if (isXAConnection_) {
-            if ((xaState_ == XA_LOCAL) ) {
+            if ((xaState_ == XA_T0_NOT_ASSOCIATED) ) {
                 writeLocalXACommit_();
             }
         } else {
@@ -541,7 +557,7 @@ void readAutoCommit() throws SqlException {
 
     public void readCommit() throws SqlException {
         if (isXAConnection_) {
-            if ((xaState_ == XA_LOCAL) ) {
+            if ((xaState_ == XA_T0_NOT_ASSOCIATED) ) {
                 readLocalXACommit_();               
             }
         } else {
@@ -749,7 +765,7 @@ private void readCloseStatements() throws SqlException {
     * 	Might be logically closed but available for reuse.
     *   @return true if physical connection still open
     */
-    public boolean isPhysicallyClosed() {
+    public boolean isPhysicalConnClosed() {
     return !open_ && !availableForReuse_; 
    }
 
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
index 9e1752ea..bbae95d7 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
@@ -1189,7 +1189,7 @@ private boolean willTickleServer(int number, boolean allowAutoCommits) throws Sq
         }
         if (connection_.autoCommit_ && requiresAutocommit) { // for the auto-commit;
             if (connection_.isXAConnection_) {
-                return (connection_.xaState_ == Connection.XA_LOCAL) ;
+                return (connection_.xaState_ == Connection.XA_T0_NOT_ASSOCIATED) ;
             } else {
                 return true;
             }
@@ -1268,7 +1268,7 @@ boolean writeCloseResultSets(int number, boolean allowAutoCommits) throws SqlExc
         if (connection_.autoCommit_ && requiresAutocommit && isAutoCommittableStatement_) {
             connection_.writeAutoCommit();
             if (connection_.isXAConnection_) {
-                return (connection_.xaState_ == Connection.XA_LOCAL) ;
+                return (connection_.xaState_ == Connection.XA_T0_NOT_ASSOCIATED) ;
             } else {
                 return true;
             }
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
index ab3b008e..25cc6aae 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
@@ -1367,7 +1367,7 @@ protected boolean allowCloseInUOW_() {
     // Allow local COMMIT/ROLLBACK only if we are not in an XA transaction
     protected boolean allowLocalCommitRollback_() throws org.apache.derby.client.am.SqlException {
        
-    	if (xaState_ == XA_LOCAL) {
+    	if (xaState_ == XA_T0_NOT_ASSOCIATED) {
             return true;
         }
         return false;
@@ -1471,7 +1471,7 @@ public boolean willAutoCommitGenerateFlow() {
         int xaState = getXAState();
 
         
-        if (xaState == XA_LOCAL) {
+        if (xaState == XA_T0_NOT_ASSOCIATED) {
             doCommit = true;
         }
 
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java
index fa0c32c7..b46ec1bf 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java
@@ -132,7 +132,7 @@ public void writeCommit() throws SqlException {
         // this logic must be in sync with willAutoCommitGenerateFlow() logic
         if (isXAConnection_) { // XA Connection
             int xaState = getXAState();
-            if (xaState == XA_LOCAL){
+            if (xaState == XA_T0_NOT_ASSOCIATED){
                 xares_.callInfoArray_[xares_.conn_.currXACallInfoOffset_].xid_ =
                         NetXAResource.nullXid;
                 writeLocalXACommit_();
@@ -147,7 +147,7 @@ public void readCommit() throws SqlException {
             int xaState = getXAState();
             NetXACallInfo callInfo = xares_.callInfoArray_[currXACallInfoOffset_];
             callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // initialize XARETVAL
-            if (xaState == XA_LOCAL) {
+            if (xaState == XA_T0_NOT_ASSOCIATED) {
                 readLocalXACommit_();
                 //TODO: Remove
                 //setXAState(XA_LOCAL);
@@ -191,7 +191,7 @@ public void readRollback() throws SqlException {
 
             // for all XA connectiions
             // TODO:KATHEY - Do we need this?
-            setXAState(XA_LOCAL);
+            setXAState(XA_T0_NOT_ASSOCIATED);
         } else {
             readLocalRollback_(); // non-XA connections
         }
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
index 90deb462..fc0decf7 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
@@ -184,7 +184,7 @@ public void commit(Xid xid, boolean onePhase) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "commit", xid, onePhase);
         }
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
@@ -216,9 +216,6 @@ public void commit(Xid xid, boolean onePhase) throws XAException {
         if (rc != XAResource.XA_OK) {
             throwXAException(rc, false);
         }
-        else {
-        	conn_.setXAState(Connection.XA_LOCAL);
-        }
     }
 
     /**
@@ -248,7 +245,7 @@ public void end(Xid xid, int flags) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "end", xid, flags);
         }
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
@@ -279,8 +276,9 @@ public void end(Xid xid, int flags) throws XAException {
         }
         if (rc != XAResource.XA_OK) {
             throwXAException(rc, false);
+        }else {
+        	conn_.setXAState(Connection.XA_T0_NOT_ASSOCIATED);
         } 
-
     }
 
     /**
@@ -300,7 +298,7 @@ public void forget(Xid xid) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "forget", xid);
         }
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
         NetXACallInfo callInfo = callInfoArray_[conn_.currXACallInfoOffset_];
@@ -353,7 +351,7 @@ public int getTransactionTimeout() throws XAException {
             conn_.agent_.logWriter_.traceEntry(this, "getTransactionTimeout");
         }
         exceptionsOnXA = null;
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
@@ -382,7 +380,7 @@ public int prepare(Xid xid) throws XAException { // public interface for prepare
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "prepare", xid);
         }
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
@@ -448,7 +446,7 @@ public int prepare(Xid xid) throws XAException { // public interface for prepare
             conn_.agent_.logWriter_.traceEntry(this, "recover", flag);
         }
         exceptionsOnXA = null;
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
@@ -513,7 +511,7 @@ public void rollback(Xid xid) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "rollback", xid);
         }
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
@@ -544,9 +542,7 @@ public void rollback(Xid xid) throws XAException {
         if (rc != XAResource.XA_OK) {
             throwXAException(rc, false);
         }
-        else {
-        	conn_.setXAState(Connection.XA_LOCAL);
-        }
+ 
     }
 
     /**
@@ -586,7 +582,7 @@ public synchronized void start(Xid xid, int flags) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "start", xid, flags);
         }
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
@@ -610,7 +606,7 @@ public synchronized void start(Xid xid, int flags) throws XAException {
             // Setting this is currently required to avoid client from sending
             // commit for autocommit.
             if (rc == XARETVAL_XAOK) {
-                conn_.setXAState(Connection.XA_GLOBAL);
+                conn_.setXAState(Connection.XA_T1_ASSOCIATED);
             }
 
         } catch (SqlException sqle) {
@@ -627,7 +623,6 @@ public synchronized void start(Xid xid, int flags) throws XAException {
 
 
     protected void throwXAException(int rc) throws XAException {
-        // By default, throwXAException will reset the state of the failed connection
         throwXAException(rc, rc != XAException.XAER_NOTA);
     }
 
@@ -736,9 +731,56 @@ protected void throwXAException(int rc, boolean resetFlag) throws XAException {
                         sqlExceptions,
                         xaExceptionText);
         xaException.errorCode = rc;
+        setXaStateForXAException(rc); 
         throw xaException;
     }
 
+
+    /**
+     * Reset the transaction branch association state  to XA_T0_NOT_ASSOCIATED
+     * for XAER_RM* and XA_RB* Exceptions. All other exeptions leave the state 
+     * unchanged
+     * 
+     * @param rc  // return code from XAException
+     * @throws XAException
+     */
+    private void setXaStateForXAException(int rc) {
+    	switch (rc)
+		{
+        	// Reset to T0, not  associated for XA_RB*, RM*
+           // XAER_RMFAIL and XAER_RMERR will be fatal to the connection
+           // but that is not dealt with here
+           case javax.transaction.xa.XAException.XAER_RMFAIL:
+           case javax.transaction.xa.XAException.XAER_RMERR:
+           case javax.transaction.xa.XAException.XA_RBROLLBACK:
+           case javax.transaction.xa.XAException.XA_RBCOMMFAIL:
+           case javax.transaction.xa.XAException.XA_RBDEADLOCK:
+           case javax.transaction.xa.XAException.XA_RBINTEGRITY:
+           case javax.transaction.xa.XAException.XA_RBOTHER:
+           case javax.transaction.xa.XAException.XA_RBPROTO:
+           case javax.transaction.xa.XAException.XA_RBTIMEOUT:
+           case javax.transaction.xa.XAException.XA_RBTRANSIENT:
+           	conn_.setXAState(Connection.XA_T0_NOT_ASSOCIATED);
+           break;
+            // No change for other XAExceptions
+            // javax.transaction.xa.XAException.XA_NOMIGRATE
+           //javax.transaction.xa.XAException.XA_HEURHAZ
+           // javax.transaction.xa.XAException.XA_HEURCOM
+           // javax.transaction.xa.XAException.XA_HEURRB
+           // javax.transaction.xa.XAException.XA_HEURMIX
+           // javax.transaction.xa.XAException.XA_RETRY
+           // javax.transaction.xa.XAException.XA_RDONLY
+           // javax.transaction.xa.XAException.XAER_ASYNC
+           // javax.transaction.xa.XAException.XAER_NOTA
+           // javax.transaction.xa.XAException.XAER_INVAL                
+           // javax.transaction.xa.XAException.XAER_PROTO
+           // javax.transaction.xa.XAException.XAER_DUPID
+           // javax.transaction.xa.XAException.XAER_OUTSIDE            	
+            default:
+  			  return;
+		}	
+    }
+
     public boolean isSameRM(XAResource xares) throws XAException {
         boolean isSame = false; // preset that the RMs are NOT the same
         exceptionsOnXA = null;
@@ -746,7 +788,7 @@ public boolean isSameRM(XAResource xares) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "isSameRM", xares);
         }
-        if (conn_.isPhysicallyClosed()) {
+        if (conn_.isPhysicalConnClosed()) {
             connectionClosedFailure();
         }
 
