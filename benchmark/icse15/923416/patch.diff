diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 4e2a0317..b34301ba 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -20,6 +20,7 @@
 
 import java.io.Closeable;
 import java.io.File;
+import java.io.IOError;
 import java.io.IOException;
 import java.lang.management.ManagementFactory;
 import java.util.*;
@@ -32,8 +33,6 @@
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.apache.commons.collections.IteratorUtils;
 
 import com.google.common.base.Predicate;
@@ -50,7 +49,6 @@
 import org.apache.cassandra.dht.Bounds;
 import org.apache.cassandra.dht.Range;
 import org.apache.cassandra.dht.Token;
-import org.apache.cassandra.io.*;
 import org.apache.cassandra.io.sstable.SSTable;
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.io.sstable.SSTableScanner;
@@ -59,6 +57,8 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.SliceRange;
 import org.apache.cassandra.utils.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean
 {
@@ -125,7 +125,7 @@
     private long rowsCompactedTotalSize = 0L;
     private long rowsCompactedCount = 0L;
     
-    ColumnFamilyStore(String table, String columnFamilyName, boolean isSuper, int indexValue) throws IOException
+    ColumnFamilyStore(String table, String columnFamilyName, boolean isSuper, int indexValue)
     {
         table_ = table;
         columnFamily_ = columnFamilyName;
@@ -151,14 +151,28 @@
                 if (!new File(basePath + "-Data.db").exists())
                 {
                     logger_.info(String.format("Removing orphan %s", file.getAbsolutePath()));
+                    try
+                    {
                     FileUtils.deleteWithConfirm(file);
+                    }
+                    catch (IOException e)
+                    {
+                        throw new IOError(e);
+                    }
                     continue;
                 }
             }
 
             if (((file.length() == 0 && !filename.endsWith("-Compacted")) || (filename.contains("-" + SSTable.TEMPFILE_MARKER))))
             {
+                try
+                {
                 FileUtils.deleteWithConfirm(file);
+                }
+                catch (IOException e)
+                {
+                    throw new IOError(e);
+                }
                 continue;
             }
 
@@ -221,7 +235,7 @@ public long getMeanRowCompactedSize()
             return 0L;
     }
 
-    public static ColumnFamilyStore createColumnFamilyStore(String table, String columnFamily) throws IOException
+    public static ColumnFamilyStore createColumnFamilyStore(String table, String columnFamily)
     {
         /*
          * Get all data files associated with old Memtables for this table.
@@ -560,15 +574,8 @@ void forceCleanup()
 
     public Table getTable()
     {
-        try
-        {
             return Table.open(table_);
         }
-        catch (IOException e)
-        {
-            throw new RuntimeException(e);
-        }
-    }
 
     void markCompacted(Collection<SSTableReader> sstables) throws IOException
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 4a8721f4..ee035daa 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -85,7 +85,7 @@
     // cache application CFs since Range queries ask for them a _lot_
     private SortedSet<String> applicationColumnFamilies;
     
-    public static Table open(String table) throws IOException
+    public static Table open(String table)
     {
         Table tableInstance = instances.get(table);
         if (tableInstance == null)
@@ -229,7 +229,7 @@ public void forceCompaction()
         return list;
     }
 
-    private Table(String table) throws IOException
+    private Table(String table)
     {
         name = table;
         waitForCommitLog = DatabaseDescriptor.getCommitLogSync() == DatabaseDescriptor.CommitLogSync.batch;
@@ -282,7 +282,7 @@ public void dropCf(String cfName) throws IOException
     }
     
     /** adds a cf to internal structures, ends up creating disk files). */
-    public void addCf(String cfName) throws IOException
+    public void addCf(String cfName)
     {
         assert !columnFamilyStores.containsKey(cfName) : cfName;
         columnFamilyStores.put(cfName, ColumnFamilyStore.createColumnFamilyStore(name, cfName));
@@ -430,15 +430,8 @@ public static String getSnapshotPath(String dataDirPath, String tableName, Strin
         {
             public Table apply(String tableName)
             {
-                try
-                {
                     return Table.open(tableName);
                 }
-                catch (IOException e)
-                {
-                    throw new RuntimeException(e);
-                }
-            }
         };
         return Iterables.transform(DatabaseDescriptor.getTables(), transformer);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
index a44a1ba5..14a2d099 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
@@ -20,6 +20,7 @@
 package org.apache.cassandra.io.sstable;
 
 import java.io.File;
+import java.io.IOError;
 import java.io.IOException;
 import java.util.List;
 import java.util.Arrays;
@@ -122,14 +123,21 @@ protected static String compactedFilename(String dataFile)
      *
      * @return true if the file was deleted
      */
-    public static boolean deleteIfCompacted(String dataFilename) throws IOException
+    public static boolean deleteIfCompacted(String dataFilename)
     {
         if (new File(compactedFilename(dataFilename)).exists())
         {
+            try
+            {
             FileUtils.deleteWithConfirm(new File(dataFilename));
             FileUtils.deleteWithConfirm(new File(SSTable.indexFilename(dataFilename)));
             FileUtils.deleteWithConfirm(new File(SSTable.filterFilename(dataFilename)));
             FileUtils.deleteWithConfirm(new File(SSTable.compactedFilename(dataFilename)));
+            }
+            catch (IOException e)
+            {
+                throw new IOError(e);
+            }
             logger.info("Deleted " + dataFilename);
             return true;
         }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 816f53ff..e3b434c2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -358,14 +358,7 @@ public void prepare()
         {
             List<DecoratedKey> keys = new ArrayList<DecoratedKey>();
             ColumnFamilyStore cfs;
-            try
-            {
                 cfs = Table.open(cf.left).getColumnFamilyStore(cf.right);
-            }
-            catch (IOException e)
-            {
-                throw new IOError(e);
-            }
             if (cfs != null) // TODO test w/ valid CF definitions, this if{} shouldn't be necessary
             {
                 for (DecoratedKey sample : cfs.allKeySamples())
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 8393db67..a5fd0b6b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -857,15 +857,7 @@ public double getLoad()
         double bytes = 0;
         for (String tableName : DatabaseDescriptor.getTables())
         {
-            Table table;
-            try
-            {
-                table = Table.open(tableName);
-            }
-            catch (IOException e)
-            {
-                throw new IOError(e);
-            }
+            Table table = Table.open(tableName);
             for (String cfName : table.getColumnFamilies())
             {
                 ColumnFamilyStore cfs = table.getColumnFamilyStore(cfName);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
index 08baf11a..b97ce951 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
@@ -45,16 +45,9 @@
     public static String CFNAME;
     static
     {
-        try
-        {
             TABLENAME = DatabaseDescriptor.getTables().iterator().next();
             CFNAME = Table.open(TABLENAME).getColumnFamilies().iterator().next();
         }
-        catch(IOException e)
-        {
-            throw new RuntimeException(e);
-        }
-    }
 
     public static File tempSSTableFile(String tablename, String cfname) throws IOException
     {
