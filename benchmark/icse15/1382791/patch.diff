diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/_Suite.java
index 02f7c45b..bc2306d9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/_Suite.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import junit.framework.TestSuite;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.Derby;
 import org.apache.derbyTesting.junit.DerbyVersion;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.ServerSetup;
@@ -120,7 +121,11 @@ public static Test suite() {
         // DERBY-5889: Disabling tests on Windonws while investigating.
         if (isWindowsPlatform()) {
             return new TestSuite(
-                    "tests.compatibilty disabled on Windows, see DERBY-5889");
+                    "tests.compatibility disabled on Windows, see DERBY-5889");
+        }
+        if (!Derby.hasClient() || !Derby.hasServer()) {
+            return new TestSuite("Compatibility tests skipped because " +
+                                 "client or server is missing");
         }
         TestSuite suite = new TestSuite();
         addVersionCombinations(suite);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/CacheSessionDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/CacheSessionDataTest.java
index 5d17a1cf..1a0da6e3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/CacheSessionDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/CacheSessionDataTest.java
@@ -449,7 +449,7 @@ private void verifyCachedIsolation(Connection c) throws SQLException {
     }
     
     private void verifyCachedSchema(Connection c) throws SQLException {
-        if (c instanceof org.apache.derby.client.am.Connection) {
+        if (usingDerbyNetClient()) {
             String cached =
                     ((org.apache.derby.client.am.Connection) c).
                     getCurrentSchemaName();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java
index ac2dc7b9..c858c567 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java
@@ -21,7 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
-import java.sql.CallableStatement;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -32,12 +31,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import javax.transaction.xa.XAResource;
 import javax.transaction.xa.Xid;
 
-import junit.framework.Assert;
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.apache.derby.client.ClientXid;
-import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.shared.common.reference.SQLState;
 
 import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
@@ -118,7 +114,7 @@ public void testGlobalXIDinTransactionTable() throws Exception {
             gid[i] = (byte) i;
             bid[i] = (byte) (64 - i);
         }
-        Xid xid = new ClientXid(0x1234, gid, bid);
+        Xid xid = XATestUtil.getXid(0x1234, gid, bid);
 
         // get the stuff required to execute the global transaction
         xaConn = xaDataSource.getXAConnection();
@@ -590,8 +586,7 @@ public void testDerby5562ReadOnlyTimeout()
     static Xid createXid(int gtrid, int bqual) throws XAException {
         byte[] gid = new byte[2]; gid[0]= (byte) (gtrid % 256); gid[1]= (byte) (gtrid / 256);
         byte[] bid = new byte[2]; bid[0]= (byte) (bqual % 256); bid[1]= (byte) (bqual / 256);
-        Xid xid = new ClientXid(0x1234, gid, bid);
-        return xid;
+        return XATestUtil.getXid(0x1234, gid, bid);
     }
 
     /** Parses the xid value from the string. The format of the input string is
@@ -623,11 +618,7 @@ private static Xid parseXid(String str) {
             bqual[i] = (byte) Integer.parseInt(bqualS.substring(2*i, 2*i + 2), 16);
         }
 
-        // Using ClientXid is ok also for embedded driver
-        // since it does not contain any related code
-        // and there is no implementation of Xid iterface
-        // for embedded driver
-        return new ClientXid(fmtid, gtid, bqual);
+        return XATestUtil.getXid(fmtid, gtid, bqual);
     }
 
     public XATransactionTest(String name) {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java
index 80ded36d..2cdfa49d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import junit.framework.Test;
 import junit.framework.TestSuite;
 import org.apache.derbyTesting.junit.BaseTestCase;
+import org.apache.derbyTesting.junit.Derby;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 
@@ -46,9 +47,8 @@ public static Test suite() {
         TestSuite suite = new TestSuite(cl);
 
         // The server command can only be used on platforms that support
-        // the network server. Specifically, it does not work in J2ME
-        // environments.
-        if (JDBC.vmSupportsJDBC3()) {
+        // the network server.
+        if (Derby.hasServer()) {
             suite.addTest(new derbyrunjartest("xtestServer"));
         }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java
index b97df8a5..bfc49ee8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XATestUtil.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.Arrays;
 
 import javax.transaction.xa.XAException;
 import javax.transaction.xa.Xid;
@@ -35,8 +36,23 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /**
      * Return a new Xid for testing.
     */
-    public static Xid getXid(int xid, int b1, int b2) {
-        return new utilXid(xid, b1, b2);
+    public static Xid getXid(int formatId, int b1, int b2) {
+        byte[] globalId = new byte[Xid.MAXGTRIDSIZE];
+        byte[] branchId = new byte[Xid.MAXBQUALSIZE];
+
+        for (int i = 0; i < globalId.length; i++) {
+            globalId[i] = (byte) (b1 + i);
+        }
+
+        for (int i = 0; i < branchId.length; i++) {
+            branchId[i] = (byte) (b2 + i);
+        }
+
+        return getXid(formatId, globalId, branchId);
+    }
+
+    public static Xid getXid(int formatId, byte[] globalId, byte[] branchId) {
+        return new utilXid(formatId, globalId, branchId);
     }
     
     /**
@@ -133,18 +149,10 @@ public static String errorCode(XAException e)
 
     private byte[] branch_id;
 
-    utilXid(int xid, int b1, int b2) {
-        format_id = xid;
-        global_id = new byte[Xid.MAXGTRIDSIZE];
-        branch_id = new byte[Xid.MAXBQUALSIZE];
-
-        for (int i = 0; i < global_id.length; i++) {
-            global_id[i] = (byte) (b1 + i);
-        }
-
-        for (int i = 0; i < branch_id.length; i++) {
-            branch_id[i] = (byte) (b2 + i);
-        }
+    utilXid(int format_id, byte[] global_id, byte[] branch_id) {
+        this.format_id = format_id;
+        this.global_id = global_id;
+        this.branch_id = branch_id;
     }
 
     /**
@@ -177,4 +185,25 @@ public int getFormatId() {
     public byte[] getBranchQualifier() {
         return (branch_id);
     }
+
+    public boolean equals(Object obj) {
+        boolean ret = false;
+
+        if (obj instanceof utilXid) {
+            utilXid that = (utilXid) obj;
+            ret = this.format_id == that.format_id &&
+                    Arrays.equals(this.global_id, that.global_id) &&
+                    Arrays.equals(this.branch_id, that.branch_id);
+        }
+
+        return ret;
+    }
+
+    public int hashCode() {
+        int hash = 7;
+        hash = 41 * hash + this.format_id;
+        hash = 41 * hash + Arrays.hashCode(this.global_id);
+        hash = 41 * hash + Arrays.hashCode(this.branch_id);
+        return hash;
+    }
 }
