diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
index 317f8f17..79d63cc6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.NoSuchElementException;
 import java.util.Properties;
 import java.util.Vector;
+import org.apache.derby.shared.common.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.types.SQLInteger;
@@ -63,6 +64,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private final DataValueDescriptor[]   scanKey = { new SQLInteger()};
     private int                           size;
     private boolean                       keepStatistics;
+    private final boolean                 keepAfterCommit;
 
     /**
      * Creates a new <code>DiskHashtable</code> instance.
@@ -88,6 +90,7 @@ public DiskHashtable(
         this.tc                         = tc;
         this.key_column_numbers         = key_column_numbers;
         this.remove_duplicates          = remove_duplicates;
+        this.keepAfterCommit            = keepAfterCommit;
         LanguageConnectionContext lcc   = (LanguageConnectionContext)
             ContextService.getContextOrNull(
                 LanguageConnectionContext.CONTEXT_ID);
@@ -387,13 +390,14 @@ public Enumeration elements()
     {
         private ScanController scan;
         private boolean hasMore;
+        private RowLocation rowloc;
 
         ElementEnum()
         {
             try
             {
                 scan = tc.openScan( rowConglomerateId,
-                                    false, // do not hold
+                                    keepAfterCommit,
                                     0, // read only
                                     TransactionController.MODE_TABLE,
                                     TransactionController.ISOLATION_NOLOCK,
@@ -408,6 +412,9 @@ public Enumeration elements()
                 {
                     scan.close();
                     scan = null;
+                } else if (keepAfterCommit) {
+                    rowloc = rowConglomerate.newRowLocationTemplate();
+                    scan.fetchLocation(rowloc);
                 }
             }
             catch( StandardException se)
@@ -436,13 +443,27 @@ public Object nextElement()
                 throw new NoSuchElementException();
             try
             {
-                scan.fetch( row);
+                if (scan.isHeldAfterCommit()) {
+                    // automatically reopens scan:
+                    if (!scan.positionAtRowLocation(rowloc)) {
+                        // Will not happen unless compress of this table
+                        // has invalidated the row location. Possible?
+                        throw StandardException.
+                            newException(SQLState.NO_CURRENT_ROW);
+                    }
+                }
+
+                scan.fetch(row);
+
                 Object retValue =  BackingStoreHashtable.shallowCloneRow( row);
                 hasMore = scan.next();
+
                 if( ! hasMore)
                 {
                     scan.close();
                     scan = null;
+                } else if (keepAfterCommit) {
+                    scan.fetchLocation(rowloc);
                 }
 
                 return retValue;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ScanController.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ScanController.java
index e873fe36..2d5013da 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ScanController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ScanController.java
@@ -167,6 +167,18 @@ has returned true (for instance the client can delete the row, or if
     boolean doesCurrentPositionQualify()
 		throws StandardException;
 
+
+    /**
+     * Return true is the scan has been closed after a commit, but was
+     * opened with holdability and can be reopened using
+     * positionAtRowLocation.
+     *
+     * @exception StandardException Standard exception policy.
+     *
+     * @see ScanController#positionAtRowLocation
+     */
+    boolean isHeldAfterCommit() throws StandardException;
+
     /**
     Fetch the (partial) row at the current position of the Scan.
 	The value in the destRow storable row is replaced
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
index 7bd2945a..e8610bbf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
@@ -901,6 +901,8 @@ ConglomerateController openCompiledConglomerate(
      *                              BackingStoreHashtable.getRuntimeStats().
 	 * @param skipNullKeyColumns	Whether or not to skip rows with 1 or more null key columns
      *
+     * @param keepAfterCommit       If true then the hash table is kept after a
+     *                              commit
      * @see BackingStoreHashtable
      * @see TransactionController#openScan
      *
@@ -925,7 +927,8 @@ BackingStoreHashtable createBackingStoreHashtableFromScan(
     int                     initialCapacity,
     float                   loadFactor,
     boolean                 collect_runtimestats,
-    boolean		            skipNullKeyColumns)
+    boolean		            skipNullKeyColumns,
+    boolean                 keepAfterCommit)
         throws StandardException;
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java
index cb35f54e..83a4e28c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java
@@ -104,6 +104,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public int[] keyColumns;
 	private boolean sameStartStopPosition;
 	private boolean skipNullKeyColumns;
+	private boolean keepAfterCommit;
 
 	protected BackingStoreHashtable hashtable;
 	protected boolean eliminateDuplicates;		// set to true in DistinctScanResultSet
@@ -187,6 +188,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		this.isConstraint = isConstraint;
 		this.forUpdate = forUpdate;
 		this.skipNullKeyColumns = skipNullKeyColumns;
+		this.keepAfterCommit = activation.getResultSetHoldability();
 
 		/* Retrieve the hash key columns */
 		FormatableArrayHolder fah = (FormatableArrayHolder)
@@ -296,7 +298,8 @@ else if (! hashtableBuilt)
                     initialCapacity,    // in memory Hashtable initial capacity
                     loadFactor,         // in memory Hashtable load factor
                     runTimeStatisticsOn,
-					skipNullKeyColumns); 
+					skipNullKeyColumns,
+					keepAfterCommit);
 
 
 			if (runTimeStatisticsOn)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java
index aead718b..fc965f8f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java
@@ -83,7 +83,8 @@ public BackingStoreHashTableFromScan(
         int                     initialCapacity,
         float                   loadFactor,
         boolean                 collect_runtimestats,
-		boolean					skipNullKeyColumns)
+		boolean					skipNullKeyColumns,
+        boolean                 keepAfterCommit)
             throws StandardException
     {
 
@@ -97,7 +98,7 @@ public BackingStoreHashTableFromScan(
             initialCapacity,
             loadFactor,
 			skipNullKeyColumns,
-            false /* Do not keep the hash table after a commit. */);
+            keepAfterCommit);
 
         open_scan =  (ScanManager)
             tc.openScan(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
index 9cab0aa7..b805d8a8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
@@ -1367,7 +1367,8 @@ public BackingStoreHashtable createBackingStoreHashtableFromScan(
     int                     initialCapacity,
     float                   loadFactor,
     boolean                 collect_runtimestats,
-    boolean		            skipNullKeyColumns)
+    boolean		            skipNullKeyColumns,
+    boolean                 keepAfterCommit)
         throws StandardException
     {
         return (
@@ -1391,7 +1392,8 @@ public BackingStoreHashtable createBackingStoreHashtableFromScan(
                 initialCapacity,
                 loadFactor,
                 collect_runtimestats,
-				skipNullKeyColumns));
+				skipNullKeyColumns,
+                keepAfterCommit));
     }
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java
index c14d381f..553aa831 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java
@@ -1589,6 +1589,15 @@ private void fetch(DataValueDescriptor[] row, boolean qualify)
 		return;
 	}
 
+    /**
+     * @see org.apache.derby.iapi.store.access.ScanController#isHeldAfterCommit
+     */
+    public boolean isHeldAfterCommit() throws StandardException
+    {
+        return (scan_state == SCAN_HOLD_INIT ||
+                scan_state == SCAN_HOLD_INPROGRESS);
+    }
+
     /**
     Fetch the row at the current position of the Scan.
 	@see ScanController#fetch
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
index d85a22fa..769021cf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
@@ -65,8 +65,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
                 extended
                 to provide more information if necessary.
 
-scan_state    - a scan has 3 possible states: 
-                SCAN_INIT, SCAN_INPROGRESS, SCAN_DONE
+scan_state    - a scan has 5 possible states:
+                SCAN_INIT, SCAN_INPROGRESS, SCAN_DONE, SCAN_HOLD_INIT, and
+                SCAN_HOLD_INPROGRESS
 
 positionAtInitScan()
               - This routine is called to move the scan to the SCAN_INIT state.
@@ -1454,6 +1455,17 @@ public void fetchWithoutQualify(DataValueDescriptor[] row)
 		fetch(row, false);
 	}
 	
+	/**
+     * @see org.apache.derby.iapi.store.access.ScanController#isHeldAfterCommit
+     */
+    public boolean isHeldAfterCommit() throws StandardException
+    {
+        return (scan_state == SCAN_HOLD_INIT ||
+                scan_state == SCAN_HOLD_INPROGRESS);
+    }
+
+
+	
 	/**
     Fetch the row at the current position of the Scan.
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/Scan.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/Scan.java
index 018dd4ce..46f415cc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/Scan.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/Scan.java
@@ -386,4 +386,14 @@ public Properties getAllScanInfo(Properties prop)
 
         return(prop);
     }
+
+    /**
+     * @see org.apache.derby.iapi.store.access.ScanController#isHeldAfterCommit
+     */
+    public boolean isHeldAfterCommit() throws StandardException
+    {
+        throw StandardException.newException(
+                SQLState.SORT_IMPROPER_SCAN_METHOD);
+    }
+
 }
diff --git a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java
index d7177c0f..8ad8b164 100644
--- a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java
+++ b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java
@@ -152,7 +152,8 @@ public BackingStoreHashtable createBackingStoreHashtableFromScan(
             int stopSearchOperator, long max_rowcnt, int[] key_column_numbers,
             boolean remove_duplicates, long estimated_rowcnt,
             long max_inmemory_rowcnt, int initialCapacity, float loadFactor,
-            boolean collect_runtimestats, boolean skipNullKeyColumns)
+            boolean collect_runtimestats, boolean skipNullKeyColumns,
+            boolean keepAfterCommit)
             throws StandardException {
         // TODO Auto-generated method stub
         return null;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java
index 8e6b4d79..2935066b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java
@@ -1,6 +1,6 @@
 /*
 
-   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.bug4356
+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SpillHash
 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
+import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
 
 /**
  * Test BackingStoreHashtable spilling to disk.
@@ -41,8 +42,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public class SpillHash
 {
-    private static PreparedStatement joinStmt;
-    private static PreparedStatement distinctStmt;
     private static final int LOTS_OF_ROWS = 10000;
     private static int errorCount = 0;
     
@@ -62,11 +61,6 @@ public static void main (String args[])
             PreparedStatement insB = conn.prepareStatement( "insert into tb(cb1,cb2) values(?,?)");
             insertDups( insA, insB, initDupVals);
 
-            joinStmt =
-              conn.prepareStatement( "select ta.ca1, ta.ca2, tb.cb2 from ta, tb where ca1 = cb1");
-            distinctStmt =
-              conn.prepareStatement( "select distinct ca1 from ta");
-
             runStatements( conn, 0, new String[][][] {initDupVals});
 
             System.out.println( "Growing database.");
@@ -102,12 +96,10 @@ public static void main (String args[])
         if( errorCount == 0)
         {
             System.out.println( "PASSED.");
-            System.exit(0);
         }
         else
         {
             System.out.println( "FAILED: " + errorCount + ((errorCount == 1) ? " error" : " errors"));
-            System.exit(1);
         }
     } // end of main
     
@@ -171,20 +163,49 @@ private static String cb2Val( int col1Val)
         return "B" + col1Val;
     }
     
+    static final boolean NEGATIVE_TEST = false;
+    static final boolean POSITIVE_TEST = true;
+
     private static void runStatements( Connection conn, int maxColValue, String[][][] dupVals)
         throws SQLException
     {
-        runJoin( conn, maxColValue, dupVals);
-        runDistinct( conn, maxColValue, dupVals);
-        runCursor( conn, maxColValue, dupVals);
+        // run variants with holdability false and true (last arg)
+        runJoin( conn, maxColValue, dupVals, false, POSITIVE_TEST);
+        runJoin( conn, maxColValue, dupVals, false, NEGATIVE_TEST);
+        runJoin( conn, maxColValue, dupVals, true, POSITIVE_TEST);
+
+        runDistinct( conn, maxColValue, dupVals, false, POSITIVE_TEST);
+        runDistinct( conn, maxColValue, dupVals, false, NEGATIVE_TEST);
+        runDistinct( conn, maxColValue, dupVals, true, POSITIVE_TEST);
+
+        runCursor( conn, maxColValue, dupVals, false, POSITIVE_TEST);
+        runCursor( conn, maxColValue, dupVals, false, NEGATIVE_TEST);
+        runCursor( conn, maxColValue, dupVals, true, POSITIVE_TEST);
     }
 
-    private static void runJoin( Connection conn, int maxColValue, String[][][] dupVals)
+    private static void runJoin( Connection conn,
+                                 int maxColValue,
+                                 String[][][] dupVals,
+                                 boolean holdOverCommit,
+                                 boolean positiveTest)
         throws SQLException
     {
-        System.out.println( "Running join");
+        System.out.println( "Running join, holdability=" + holdOverCommit +
+                            " " + (positiveTest ? "positive" : "negative"));
         int expectedRowCount = maxColValue; // plus expected duplicates, to be counted below
-        ResultSet rs = joinStmt.executeQuery();
+
+        Statement stmt;
+        if( holdOverCommit) {
+            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
+                                        ResultSet.CONCUR_READ_ONLY,
+                                        ResultSet.HOLD_CURSORS_OVER_COMMIT);
+        } else {
+            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
+                                        ResultSet.CONCUR_READ_ONLY,
+                                        ResultSet.CLOSE_CURSORS_AT_COMMIT);
+        }
+        ResultSet rs = stmt.executeQuery(
+            "select ta.ca1, ta.ca2, tb.cb2 from ta, tb where ca1 = cb1");
         BitSet joinRowFound = new BitSet( maxColValue);
         int dupKeyCount = 0;
         for( int i = 0; i < dupVals.length; i++)
@@ -255,6 +276,35 @@ private static void runJoin( Connection conn, int maxColValue, String[][][] dupV
                 }
                 dupsFound[dupKeyIdx].set( idx);
             }
+
+            if (holdOverCommit) {
+                // Commit inside an open result set to test
+                // rs' holdability, next() will reopen it if all is well.
+                rs.getStatement().getConnection().commit();
+                holdOverCommit = false; // hack: do this only once
+            } else if (!positiveTest) {
+                // Negative test, check if we get the expected error.
+                rs.getStatement().getConnection().commit();
+
+                try {
+                    rs.next();
+                } catch (SQLException e) {
+                    if (!e.getSQLState().
+                            equals(SQLStateConstants.RESULT_SET_IS_CLOSED)) {
+                        System.out.println("Running join, holdability=false " +
+                                           "negative test: Failed " +
+                                           e.getSQLState());
+                        rs.close();
+                    }
+                    stmt.close();
+                    return;
+                }
+                System.out.println("Running join, holdability=false " +
+                                   "negative test: Failed: rs not closed");
+                rs.close();
+                stmt.close();
+                return;
+            }
         };
         if( count != expectedRowCount)
         {
@@ -262,6 +312,7 @@ private static void runJoin( Connection conn, int maxColValue, String[][][] dupV
             errorCount++;
         }
         rs.close();
+        stmt.close();
     } // end of runJoin
 
     private static int findDupVal( ResultSet rs, int col, char prefix, int keyIdx, String[][][] dupVals)
@@ -296,17 +347,36 @@ private static String trim( String str)
         return str.trim();
     }
     
-    private static void runDistinct( Connection conn, int maxColValue, String[][][] dupVals)
+    private static void runDistinct( Connection   conn,
+                                     int          maxColValue,
+                                     String[][][] dupVals,
+                                     boolean      holdOverCommit,
+                                     boolean      positiveTest)
         throws SQLException
     {
-        System.out.println( "Running distinct");
-        ResultSet rs = distinctStmt.executeQuery();
-        checkAllCa1( rs, false, false, maxColValue, dupVals, "DISTINCT");
+        System.out.println( "Running distinct, holdability=" + holdOverCommit +
+                            " " + (positiveTest ? "positive" : "negative"));
+        Statement stmt;
+        if( holdOverCommit) {
+            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
+                                        ResultSet.CONCUR_READ_ONLY,
+                                        ResultSet.HOLD_CURSORS_OVER_COMMIT);
+        } else {
+            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
+                                        ResultSet.CONCUR_READ_ONLY,
+                                        ResultSet.CLOSE_CURSORS_AT_COMMIT);
+        }
+        ResultSet rs = stmt.executeQuery("select distinct ca1 from ta");
+        checkAllCa1( rs, false, holdOverCommit, positiveTest,
+                     maxColValue, dupVals, "DISTINCT");
+        rs.close();
+        stmt.close();
     }
 
     private static void checkAllCa1( ResultSet rs,
                                      boolean expectDups,
                                      boolean holdOverCommit,
+                                     boolean positiveTest,
                                      int maxColValue,
                                      String[][][] dupVals,
                                      String label)
@@ -391,10 +461,36 @@ else if( dupFoundCount[ -col1Val] > expectedDupCount[ -col1Val])
                     found.set( col1Val);
                     count++;
                 }
-                if( holdOverCommit)
-                {
+
+                if( holdOverCommit) {
+                    // Commit inside an open result set to test
+                    // rs' holdability, next() will reopen it if all is well.
                     rs.getStatement().getConnection().commit();
                     holdOverCommit = false;
+                } else if (!positiveTest) {
+                    // Negative test, check if we get the expected error.
+                    rs.getStatement().getConnection().commit();
+
+                    String runningWhat =
+                        (expectDups ?
+                         "Running scroll insensitive cursor, " +
+                         "holdability=false" :
+                         "Running distinct, holdability=false");
+
+                    try {
+                        rs.next();
+                    } catch (SQLException e) {
+                        if (!e.getSQLState().equals
+                                (SQLStateConstants.RESULT_SET_IS_CLOSED)) {
+                            System.out.println(runningWhat +
+                                               " negative test: Failed " +
+                                               e.getSQLState());
+                        }
+                        return;
+                    }
+                    System.out.println(runningWhat +
+                                       " negative test: Failed: rs not closed");
+                    return;
                 }
             }
             if( count != maxColValue)
@@ -418,12 +514,16 @@ else if( dupFoundCount[ -col1Val] > expectedDupCount[ -col1Val])
         }
     } // End of checkAllCa1
 
-    private static void runCursor( Connection conn, int maxColValue, String[][][] dupVals)
+    private static void runCursor( Connection   conn,
+                                   int          maxColValue,
+                                   String[][][] dupVals,
+                                   boolean      holdOverCommit,
+                                   boolean      positiveTest)
         throws SQLException
     {
-        System.out.println( "Running scroll insensitive cursor");
-        DatabaseMetaData dmd = conn.getMetaData();
-        boolean holdOverCommit = dmd.supportsOpenCursorsAcrossCommit();
+        System.out.println( "Running scroll insensitive cursor, holdability=" +
+                            holdOverCommit +
+                            " " + (positiveTest ? "positive" : "negative"));
         Statement stmt;
         if( holdOverCommit)
             stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
@@ -431,8 +531,10 @@ private static void runCursor( Connection conn, int maxColValue, String[][][] du
                                         ResultSet.HOLD_CURSORS_OVER_COMMIT);
         else
             stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
-                                        ResultSet.CONCUR_READ_ONLY);
+                                        ResultSet.CONCUR_READ_ONLY,
+                                        ResultSet.CLOSE_CURSORS_AT_COMMIT);
         ResultSet rs = stmt.executeQuery( "SELECT ca1 FROM ta");
-        checkAllCa1( rs, true, holdOverCommit, maxColValue, dupVals, "scroll insensitive cursor");
+        checkAllCa1( rs, true, holdOverCommit, positiveTest,
+                     maxColValue, dupVals, "scroll insensitive cursor");
     }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java
index 212db66e..6a654bbb 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java
@@ -1016,7 +1016,8 @@ public static boolean t_scanFetchHashtable(
                 -1,             // use default initial capacity
                 -1,             // use default load factor
                 false,         // don't maintain runtime statistics
-				false);			// don't skip null key columns
+                false,          // don't skip null key columns
+                false);         // don't keep after commit
 
         // make sure the expected result set is the same as the actual result
         // set.
@@ -1104,8 +1105,8 @@ else if (obj instanceof List)
                 -1,             // use default initial capacity
                 -1,             // use default load factor
                 false,         // don't maintain runtime statistics
-				false);			// don't skip null key columns
-
+				false,			// don't skip null key columns
+                false);         // don't keep after commit
 
         Object removed_obj;
         for (numrows = 0; numrows < expect_numrows; numrows++)
