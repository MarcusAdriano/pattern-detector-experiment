diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java
index 4e623ad5..07f7ad07 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java
@@ -82,7 +82,7 @@ public Visitable visit(Visitable node)
 
 			if (groupByList.findGroupingColumn(cr) == null)
 			{
-				throw StandardException.newException(SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
+				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getSQLColumnName());
 			}
 		} 
 		
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java
index 11782734..32f7f871 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java
@@ -229,19 +229,19 @@ public void testDerby3094Expressions() throws Exception
                         {112, 2},
                         {114, 2}});
         assertCompileError(
-                "42Y30", "select c1+c2, sum(c3) from test group by c1");
+                "42Y36", "select c1+c2, sum(c3) from test group by c1");
         assertCompileError(
-                "42Y30", "select c1,c2, sum(c3) from test group by c1+c2,c1");
+                "42Y36", "select c1,c2, sum(c3) from test group by c1+c2,c1");
         assertCompileError(
-                "42Y30", "select c1+c2, sum(c3) from test group by 1");
+                "42Y36", "select c1+c2, sum(c3) from test group by 1");
         assertCompileError(
             "42X04", "select c1+c2 as expr, sum(c3) from test group by expr");
         assertCompileError(
             "42X04", "select c1 as c1a, c2, sum(c3) from test group by c1a,c2");
         assertCompileError(
-                "42Y30", "select c1 as c2, sum(c3) from test group by c2");
+                "42Y36", "select c1 as c2, sum(c3) from test group by c2");
         assertCompileError(
-                "42Y30", "select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)");
+                "42Y36", "select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)");
     }
     
     public void testSubSelect() throws Exception
@@ -483,48 +483,48 @@ public void testNegative()
                 "42Y30", "select count(*) from test group by r()");
         // invalid grouping expression.
         assertCompileError(
-                "42Y30", "select c1+1, count(*) from test group by c1+2");
+                "42Y36", "select c1+1, count(*) from test group by c1+2");
         
         // again invalid grouping expression because cast type is different.
         assertCompileError(
-                "42Y30", "select (cast (c as char(2))), count(*) " +
+                "42Y36", "select (cast (c as char(2))), count(*) " +
                 " from alltypes group by (cast (c as char(3)))");
 
         // same column name, same table but different tablenumber in the query
         assertCompileError(
-                "42Y30", 
+                "42Y36", 
                 "select t1.c1, count(*) from test t1, test t2 " + 
                 " group by t2.c1");
         // ternary operator, not equivalent test.
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select substr(c, 3, 4) from alltypes group by substr(v, 3, 4)");
 
         // DERBY-2008
         // invalid grouping expression 
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select substr(c1, 3, 4) from t1 group by substr(c1, 3)");
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select substr(c1, 3) from t1 group by substr(c1, 3, 4)");
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select locate(c1, 'abc') from t2 group by locate(c1, 'abc',3)");
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc')");
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc',3)");
 
         // DERBY-2014
         // invalid grouping expression
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select nullif(c1,c2) from t3 group by nullif(c2,c1)");
         assertCompileError(
-                "42Y30",
+                "42Y36",
                 "select nullif(c1,100) from t3 group by nullif(c1,200)");
 
         // aggregates in group by list.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
index 35fd3517..3fac35d0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
@@ -91,6 +91,10 @@ private static void createSchemaObjects(Statement st)
         st.executeUpdate("insert into d3613 values (1,2,1,2), (1,2,3,4), " +
                 "(1,3,5,6), (2,2,2,2)");
 
+        st.executeUpdate("create table d2085 (a int, b int, c int, d int)");
+        st.executeUpdate("insert into d2085 values (1,1,1,1), (1,2,3,4), " +
+                "(4,3,2,1), (2,2,2,2)");
+
         // create an all types tables
         
         st.executeUpdate(
@@ -234,7 +238,7 @@ public void testGroupByErrors()
         // group by constant. should compile but fail because it 
         // is not a valid grouping expression.
         
-        assertStatementError("42Y30", st,
+        assertStatementError("42Y36", st,
             "select * from t1 group by 1");
         
         // column in group by list not in from list
@@ -244,13 +248,13 @@ public void testGroupByErrors()
         
         // column in group by list not in select list
         
-        assertStatementError("42Y30", st,
+        assertStatementError("42Y36", st,
             "select a as b from t1 group by b");
         
-        assertStatementError("42Y30", st,
+        assertStatementError("42Y36", st,
             " select a from t1 group by b");
         
-        assertStatementError("42Y30", st,
+        assertStatementError("42Y36", st,
             " select a, char(b) from t1 group by a");
         
         // cursor with group by is not updatable
@@ -1541,11 +1545,11 @@ public void testDistinctGroupBy() throws SQLException
         JDBC.assertUnorderedResultSet(rs,
                 new String[][] {{"1","7"},{"2","2"}});
         // A few error cases:
-        assertStatementError("42Y30", s,
+        assertStatementError("42Y36", s,
             "select distinct a,b from d3613 group by a");
-        assertStatementError("42Y30", s,
+        assertStatementError("42Y36", s,
             "select distinct a,b from d3613 group by a,c");
-        assertStatementError("42Y30", s,
+        assertStatementError("42Y36", s,
             "select distinct a,b,sum(b) from d3613 group by a");
         
         // A few queries from other parts of this suite, with DISTINCT added:
@@ -1569,5 +1573,19 @@ public void testDistinctGroupBy() throws SQLException
                 " select distinct t.dt from t group by i, dt, b order by dt"),
             new String [][] { {"1992-01-01"}, {"1992-09-09"}, {null} });
     }
+    /**
+      * DERBY-2085 check message on order by of non-grouped column
+      */
+    public void testOrderByNonGroupedColumn() throws SQLException
+    {
+        Statement s = createStatement();
+        ResultSet rs;
+        assertStatementError("42Y36", s,
+            "select a from d2085 group by a order by b");
+        assertStatementError("42Y36", s,
+            "select a from d2085 group by a,b order by c");
+        assertStatementError("42Y36", s,
+            "select a,b from d2085 group by a,b order by c*2");
+    }
 }
 
