diff --git a/incubator/aries/trunk/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java b/incubator/aries/trunk/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
index 25ff665c..b79aaa8d 100644
--- a/incubator/aries/trunk/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
+++ b/incubator/aries/trunk/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
@@ -143,7 +143,7 @@ public AriesApplication createApplication(IDirectory ebaFile) throws ManagementE
         if (bm != null) {
           if (bm.isValid()) {
             extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.toURL().toExternalForm()));
-          } else if (deploymentManifest == null){ 
+          } else if (deploymentManifest == null) { 
             // We have a jar that needs converting to a bundle, or a war to migrate to a WAB 
             // We only do this if a DEPLOYMENT.MF does not exist.
             BundleConversion convertedBinary = null;
@@ -166,13 +166,18 @@ public AriesApplication createApplication(IDirectory ebaFile) throws ManagementE
             }
             if (convertedBinary != null) { 
               modifiedBundles.put (f.getName(), convertedBinary);
-              bm = BundleManifest.fromBundle(f);
-              extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.getName()));
+              extraBundlesInfo.add(convertedBinary.getBundleInfo(_applicationMetadataFactory));
             } 
           }
         } 
       }
  
+      // if Application-Content header was not specified build it based on the bundles included by value
+      if (applicationManifest.getMainAttributes().getValue(AppConstants.APPLICATION_CONTENT) == null) {
+          String appContent = buildAppContent(extraBundlesInfo);
+          applicationManifest.getMainAttributes().putValue(AppConstants.APPLICATION_CONTENT, appContent);
+      }
+      
       ManifestDefaultsInjector.updateManifest(applicationManifest, appName, ebaFile); 
       applicationMetadata = _applicationMetadataFactory.createApplicationMetadata(applicationManifest);
       
@@ -198,6 +203,30 @@ public AriesApplication createApplication(IDirectory ebaFile) throws ManagementE
     return application;
   }
 
+  private String buildAppContent(Set<BundleInfo> bundleInfos) {
+      StringBuilder builder = new StringBuilder();
+      Iterator<BundleInfo> iterator = bundleInfos.iterator();
+      while (iterator.hasNext()) {
+          BundleInfo info = iterator.next();
+          builder.append(info.getSymbolicName());
+
+          // bundle version is not a required manifest header
+          if (info.getVersion() != null) {
+              String version = info.getVersion().toString();
+              builder.append(";version=\"[");
+              builder.append(version);
+              builder.append(',');
+              builder.append(version);
+              builder.append("]\"");
+          }
+
+          if (iterator.hasNext()) {
+              builder.append(",");
+          }
+      }
+      return builder.toString();
+  }
+  
   /**
    * Create an application from a URL. 
    * The first version of this method isn't smart enough to check whether
diff --git a/incubator/aries/trunk/application/application-management/src/test/java/org/apache/aries/application/management/impl/AriesApplicationManagerImplTest.java b/incubator/aries/trunk/application/application-management/src/test/java/org/apache/aries/application/management/impl/AriesApplicationManagerImplTest.java
index c9c5d027..b002e4f8 100644
--- a/incubator/aries/trunk/application/application-management/src/test/java/org/apache/aries/application/management/impl/AriesApplicationManagerImplTest.java
+++ b/incubator/aries/trunk/application/application-management/src/test/java/org/apache/aries/application/management/impl/AriesApplicationManagerImplTest.java
@@ -64,6 +64,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.osgi.framework.Constants;
 import org.osgi.framework.Version;
 
 /**
@@ -112,20 +113,17 @@ public BundleConversion convert(IDirectory parentEba, IFile toBeConverted)
             try {
             	is = new FileInputStream(new File("../src/test/resources/conversion/MANIFEST.MF"));
             	Manifest warManifest = new Manifest(is);            	
-            	IOUtils.jarUp(new File("../src/test/resources/conversion/conversion.eba/helloWorld.war"), new File("./ariesApplicationManagerImplTest/conversion/helloWorld.war"), warManifest);
-            	IOUtils.zipUp(new  File("../src/test/resources/conversion/conversion.eba/helloWorld.jar"), new File("./ariesApplicationManagerImplTest/conversion/helloWorld.jar"));
-            	
-            	IOUtils.zipUp(new File("./ariesApplicationManagerImplTest/conversion"), new File("./ariesApplicationManagerImplTest/conversion.eba"));
-            	final InputStream jarIs = new FileInputStream(new File("./ariesApplicationManagerImplTest/conversion.eba"));            	
+            	final File convertedFile = new File("./ariesApplicationManagerImplTest/conversion/helloWorld.war");
+            	IOUtils.jarUp(new File("../src/test/resources/conversion/conversion.eba/helloWorld.war"), convertedFile, warManifest);            
                 final String location = toBeConverted.toString();                
             	return new BundleConversion() {
 
 					public BundleInfo getBundleInfo(ApplicationMetadataFactory amf) throws IOException {
-						return new SimpleBundleInfo(amf, BundleManifest.fromBundle(jarIs), location);
+						return new SimpleBundleInfo(amf, BundleManifest.fromBundle(convertedFile), location);
 					}
 
 					public InputStream getInputStream() throws IOException {
-						return jarIs;
+						return new FileInputStream(convertedFile);
 					}
                 	
                 };
@@ -222,7 +220,7 @@ public void testCreateAndConversion() throws Exception {
 	    assertEquals (appMeta.getApplicationSymbolicName(), "conversion.eba");	    
 	    assertEquals (appMeta.getApplicationVersion(), new Version("0.0"));	    
 	    List<Content> appContent = appMeta.getApplicationContents();
-	    assertEquals (appContent.size(), 2);
+	    assertEquals (2, appContent.size());
 	    Content fbw = new ContentImpl("hello.world.jar;version=\"[1.1.0, 1.1.0]\"");
 	    Content mbl = new ContentImpl("helloWorld.war;version=\"[0.0.0, 0.0.0]\"");
 	    assertTrue (appContent.contains(fbw));
@@ -242,6 +240,26 @@ public void testCreateAndConversion() throws Exception {
 	    
 	    assertEquals(1, dcList.size());
 	    assertTrue (dcList.contains(dc3));
+	    
+	    assertEquals(2, app.getBundleInfo().size());
+	    BundleInfo info;
+	    info = findBundleInfo(app.getBundleInfo(), "hello.world.jar");
+	    assertNotNull(info);
+	    assertEquals("HelloWorldJar", info.getHeaders().get(Constants.BUNDLE_NAME));
+	    
+	    info = findBundleInfo(app.getBundleInfo(), "helloWorld.war");
+        assertNotNull(info);
+        assertEquals("helloWorld.war", info.getHeaders().get(Constants.BUNDLE_NAME));
+        assertEquals("/test", info.getHeaders().get("Bundle-ContextPath"));
+  }
+  
+  private BundleInfo findBundleInfo(Set<BundleInfo> infos, String symbolicName) {
+      for (BundleInfo info : infos) {
+          if (symbolicName.equals(info.getSymbolicName())) {
+              return info;
+          }
+      }
+      return null;
   }
   
   @Test
