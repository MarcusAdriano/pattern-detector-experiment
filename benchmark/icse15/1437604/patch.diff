diff --git a/lucene/dev/trunk/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/dev/trunk/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index cb40b0d7..64a9e366 100644
--- a/lucene/dev/trunk/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/dev/trunk/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -1138,7 +1138,8 @@ public DocValues docValues(String field) {
     
     @Override
     public DocValues normValues(String field) {
-      if (fieldInfos.get(field).omitsNorms())
+      FieldInfo fieldInfo = fieldInfos.get(field);
+      if (fieldInfo == null || fieldInfo.omitsNorms())
         return null;
       DocValues norms = cachedNormValues;
       Similarity sim = getSimilarity();
diff --git a/lucene/dev/trunk/lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java b/lucene/dev/trunk/lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index db6a6cce..cd683417 100644
--- a/lucene/dev/trunk/lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ b/lucene/dev/trunk/lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -381,6 +381,17 @@ public void testSameFieldAddedMultipleTimes() throws IOException {
     assertTrue("posGap" + mockAnalyzer.getPositionIncrementGap("field") , mindex.search(query) > 0.0001);
   }
   
+  public void testNonExistingsField() throws IOException {
+    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);
+    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());
+    mindex.addField("field", "the quick brown fox", mockAnalyzer);
+    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();
+    assertNull(reader.docValues("not-in-index"));
+    assertNull(reader.normValues("not-in-index"));
+    assertNull(reader.termDocsEnum(new Term("not-in-index", "foo")));
+    assertNull(reader.termPositionsEnum(new Term("not-in-index", "foo")));
+    assertNull(reader.terms("not-in-index"));
+  }
   
   public void testDuellMemIndex() throws IOException {
     LineFileDocs lineFileDocs = new LineFileDocs(random());
