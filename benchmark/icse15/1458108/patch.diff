diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/CloudDescriptor.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/CloudDescriptor.java
index 98a882b1..248faa6f 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/CloudDescriptor.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/CloudDescriptor.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.params.SolrParams;
 
 public class CloudDescriptor {
@@ -28,7 +29,7 @@
   private String nodeName = null;
 
   volatile boolean isLeader = false;
-  volatile String lastPublished;
+  volatile String lastPublished = ZkStateReader.ACTIVE;
   
   public String getLastPublished() {
     return lastPublished;
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index 5d5efaa5..2d98873d 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -132,6 +132,9 @@ public void close() {
     syncStrategy.close();
   }
   
+  /* 
+   * weAreReplacement: has someone else been the leader already?
+   */
   @Override
   void runLeaderProcess(boolean weAreReplacement) throws KeeperException,
       InterruptedException, IOException {
@@ -302,7 +305,7 @@ private void waitForReplicasToComeUp(boolean weAreReplacement,
           found = zkClient.getChildren(shardsElectZkPath, null, true).size();
         } catch (KeeperException e) {
           SolrException.log(log,
-              "Errir checking for the number of election participants", e);
+              "Error checking for the number of election participants", e);
         }
         
         // on startup and after connection timeout, wait for all known shards
@@ -321,6 +324,11 @@ private void waitForReplicasToComeUp(boolean weAreReplacement,
           log.info("Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later");
           return;
         }
+      } else {
+        log.warn("Shard not found: " + shardId + " for collection " + collection);
+
+        return;
+
       }
       
       Thread.sleep(500);
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index e4b8e183..95bf15fe 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -1007,7 +1007,9 @@ public void publish(final CoreDescriptor cd, final String state, boolean updateL
             : null,
         ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName
             : null);
+    if (updateLastState) {
     cd.getCloudDescriptor().lastPublished = state;
+    }
     overseerJobQueue.offer(ZkStateReader.toJSON(m));
   }
 
@@ -1206,11 +1208,10 @@ public ZkStateReader getZkStateReader() {
   }
 
   private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {
-    final String shardZkNodeName = getCoreNodeName(descriptor);
+    final String coreNodeName = getCoreNodeName(descriptor);
     int retryCount = 320;
     while (retryCount-- > 0) {
-      final String shardId = zkStateReader.getClusterState().getShardId(
-          shardZkNodeName);
+      final String shardId = zkStateReader.getClusterState().getShardId(coreNodeName);
       if (shardId != null) {
         return shardId;
       }
@@ -1222,7 +1223,7 @@ private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {
     }
     
     throw new SolrException(ErrorCode.SERVER_ERROR,
-        "Could not get shard_id for core: " + coreName + " coreNodeName:" + shardZkNodeName);
+        "Could not get shard_id for core: " + coreName + " coreNodeName:" + coreNodeName);
   }
   
   public static void uploadToZK(SolrZkClient zkClient, File dir, String zkPath) throws IOException, KeeperException, InterruptedException {
@@ -1280,9 +1281,15 @@ public static void downloadConfigDir(SolrZkClient zkClient, String configName, F
   public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {
     // before becoming available, make sure we are not live and active
     // this also gets us our assigned shard id if it was not specified
-    publish(cd, ZkStateReader.DOWN); 
-    String shardZkNodeName = getCoreNodeName(cd);
-    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {
+    publish(cd, ZkStateReader.DOWN, false);
+    String coreNodeName = getCoreNodeName(cd);
+    
+    // make sure the node name is set on the descriptor
+    if (cd.getCloudDescriptor().getCoreNodeName() == null) {
+      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);
+    }
+    
+    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {
       String shardId;
       shardId = doGetShardIdProcess(cd.getName(), cd);
       cd.getCloudDescriptor().setShardId(shardId);
