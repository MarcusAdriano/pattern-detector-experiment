diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java
index 55455555..2d063908 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.util.BitSet;
+import java.util.Set;
 
 /**
  * A query that wraps a filter and simply returns a constant score equal to the
@@ -39,6 +40,11 @@ public Query rewrite(IndexReader reader) throws IOException {
     return this;
   }
 
+  public void extractTerms(Set terms) {
+    // OK to not add any terms when used for MultiSearcher,
+    // but may not be OK for highlighting
+  }
+
   protected class ConstantWeight implements Weight {
     private Similarity similarity;
     private float queryNorm;
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/MatchAllDocsQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
index 67405a92..1543d4e0 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
@@ -25,6 +25,8 @@
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.ToStringUtils;
 
+import java.util.Set;
+
 /**
  * A query that matches all documents.
  * 
@@ -132,6 +134,9 @@ protected Weight createWeight(Searcher searcher) {
     return new MatchAllDocsWeight(searcher);
   }
 
+  public void extractTerms(Set terms) {
+  }
+
   public String toString(String field) {
     StringBuffer buffer = new StringBuffer();
     buffer.append("MatchAllDocsQuery");
