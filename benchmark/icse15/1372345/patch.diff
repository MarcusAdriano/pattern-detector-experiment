diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/ClientCompatibilityRunControl.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/ClientCompatibilityRunControl.java
index da60a979..6581e5be 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/ClientCompatibilityRunControl.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/ClientCompatibilityRunControl.java
@@ -21,7 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.compatibility;
 
 import java.io.File;
-import java.net.URL;
+import java.net.URI;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.DerbyDistribution;
@@ -84,7 +84,7 @@ public void testClient()
         // Fork the client test with a minimal classpath.
         String classpath = clientDist.getDerbyClientJarPath() +
                 File.pathSeparator + testingPath +
-                File.pathSeparator + getJUnitURL().getPath();
+                File.pathSeparator + getJUnitPath();
         // If we are running the LOB tests we also need derby.jar, because the
         // test code being run references classes from the iapi package.
         // This may also happen for the non-LOB tests in the future.
@@ -114,12 +114,14 @@ public void testClient()
     }
 
 	/**
-	 * Returns the URL of the JUnit classes.
+     * Returns the path of the JUnit classes.
      *
-     * @return A URL.
+     * @return A path.
 	 */
-    private static URL getJUnitURL() {
-        return VersionCombinationConfigurator.getClassURL(
+    private static String getJUnitPath() {
+        URI uri = VersionCombinationConfigurator.getClassURI(
                 junit.framework.TestCase.class);
+        return new File(uri).getPath();
 	}
 }
+
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
index 5e65e123..b2491f27 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
@@ -21,8 +21,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.compatibility;
 
 import java.io.File;
-import java.net.URL;
+import java.net.URISyntaxException;
+import java.net.URI;
 import java.security.AccessController;
+import java.security.CodeSource;
 import java.security.PrivilegedAction;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -253,8 +255,7 @@ public void setExcludes(List<DerbyVersion> toExclude) {
      *      if trunk is run off the classes directory
      */
     private DerbyDistribution getRunningDistribution() {
-        URL testingURL = getClassURL(getClass());
-        File libDir = new File(testingURL.getPath());
+        File libDir = new File(getClassURI(getClass()));
         if (libDir.isDirectory()) {
             throw new IllegalStateException("only running off jars is " +
                     "supported, currently running off " + libDir);
@@ -263,7 +264,12 @@ private DerbyDistribution getRunningDistribution() {
         libDir = libDir.getParentFile();
         DerbyVersion version = DerbyVersion.parseVersionString(
                 sysinfo.getVersionString());
-        return DerbyDistribution.getInstance(libDir, version);
+        DerbyDistribution dist = DerbyDistribution.getInstance(libDir, version);
+        if (dist == null) {
+            throw new IllegalStateException(
+                    "failed to get running distribution (programming error?)");
+        }
+        return dist;
     }
 
     /**
@@ -305,19 +311,25 @@ private DerbyDistribution getRunningDistribution() {
     }
 
     /**
-     * Returns the URL of the source for the specified class.
+     * Returns the URI of the source for the specified class.
      *
      * @param cl class to find the source for
-     * @return A {@code URL} pointing to the source, or {@code null} it cannot
+     * @return A {@code URI} pointing to the source, or {@code null} it cannot
      *      be obtained.
      */
-    static URL getClassURL(final Class cl) {
-        return AccessController.doPrivileged(new PrivilegedAction<URL>() {
-            public URL run() {
-                if (cl.getProtectionDomain().getCodeSource() == null) {
-                    return null;
+    static URI getClassURI(final Class cl) {
+        return AccessController.doPrivileged(new PrivilegedAction<URI>() {
+            public URI run() {
+                CodeSource cs = cl.getProtectionDomain().getCodeSource();
+                if (cs != null) {
+                    try {
+                        return cs.getLocation().toURI();
+                    } catch (URISyntaxException use) {
+                        // Shouldn't happen, fall through and return null.
+                        BaseTestCase.alarm("bad URI: " + use.getMessage());
+                }
                 }
-                return cl.getProtectionDomain().getCodeSource().getLocation();
+                return null;
             }
         });
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java
index 6a736244..e3952d82 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyDistribution.java
@@ -201,6 +201,7 @@ private static boolean hasRequiredJars(List jars) {
                 }
             }
             if (!hasJar) {
+                BaseTestCase.println("missing jar: " + REQUIRED_JARS[i]);
                 return false;
             }
         }
