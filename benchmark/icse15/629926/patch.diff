diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index 26961ef1..fef15394 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -1643,8 +1643,15 @@ static EmbedResultSet processDynamicResult(EmbedConnection conn,
             return null;
 
         // ignore closed result sets.
-        if (lrs.isClosed)
+        try {
+        	//following will check if the JDBC ResultSet or the language
+        	//ResultSet is closed. If yes, then it will throw an exception.
+        	//So, the exception indicates that the ResultSet is closed and
+        	//hence we should ignore it. 
+        	lrs.checkIfClosed("");
+        } catch (SQLException ex) {
             return null;
+        }
         
         lrs.setDynamicResultSet(callStatement);
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index b5dc80b7..d2621580 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -2699,7 +2699,11 @@ public boolean isLastHandler(int severity)
 
 	/**
 		If we are called as part of rollback code path, then we will reset all 
-		the activations. 
+		the activations that have resultset returning rows associated with 
+		them. DERBY-3304 Resultsets that do not return rows should be left 
+		alone when the rollback is through the JDBC Connection object. If the 
+		rollback is caused by an exception, then at that time, all kinds of
+		resultsets should be closed. 
 		
 		If we are called as part of commit code path, then we will do one of 
 		the following if the activation has resultset assoicated with it. Also,
@@ -2738,10 +2742,25 @@ private void endTransactionActivationHandling(boolean forRollback) throws Standa
 				continue;
 			}
 
+			ResultSet activationResultSet = null;
+			boolean resultsetReturnsRows = false;
+			if (a.getResultSet() != null) {
+				activationResultSet = a.getResultSet();
+				resultsetReturnsRows = activationResultSet.returnsRows();
+			}
+
 			if (forRollback) { 
-				//Since we are dealing with rollback, we need to reset the 
-				//activation no matter what the holdability might be or no
-				//matter whether the associated resultset returns rows or not.
+				if (activationResultSet != null) 
+					if (resultsetReturnsRows)
+						//Since we are dealing with rollback, we need to reset 
+						//the activation no matter what the holdability might 
+						//be provided that resultset returns rows. An example
+						//where we do not want to close a resultset that does
+						//not return rows would be a java procedure which has
+						//user invoked rollback inside of it. That rollback
+						//should not reset the activation associated with
+						//the call to java procedure because that activation
+						//is still being used.
 				a.reset();
 				// Only invalidate statements if we performed DDL.
 				if (dataDictionaryInWriteMode()) {
@@ -2752,9 +2771,7 @@ private void endTransactionActivationHandling(boolean forRollback) throws Standa
 				}
 			} else {
 				//We are dealing with commit here. 
-				if (a.getResultSet() != null) {
-					ResultSet activationResultSet = a.getResultSet();
-					boolean resultsetReturnsRows = activationResultSet.returnsRows();
+				if (activationResultSet != null) {
 					//if the activation has resultset associated with it, then 
 					//use following criteria to take the action
 					if (resultsetReturnsRows){
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java
index 8acde25b..6156d90f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java
@@ -801,16 +801,33 @@ else if (pass == 3)
             .execute("create procedure procWithRollback(p1 int) parameter style JAVA READS SQL DATA dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.rollbackInsideProc'");
             drs1 = prepareCall("CALL procWithRollback(3)");
             drs1.execute();
-            rs = drs1.getResultSet();
             //Following shows that the rollback inside the java procedure will
             //cuase procedure to return no resultset (A procedure does
             //not return closed resultsets). In 10.2 codeline though, java
             //procedure returns a closed resultset if there is a rollback 
             //inside the java procedure.
             JDBC.assertNoMoreResults(drs1);
-
             JDBC.assertClosed(rs1);
             JDBC.assertClosed(resultSet);
+
+            //Following shows that the rollback inside the java procedure will 
+            //only close the resultset created before the rollback. The 
+            //resultset created after the rollback will remain open and if it
+            //is a resultset returned through the procedure then it will be
+            //available to the caller of the procedure. Notice that even though
+            //the procedure is defined to 2 return dynamic resultsets, only one
+            //is returned because the other one was closed as a result of 
+            //rollback.
+            s.execute("create procedure procWithRollbackAnd2Resulsets"+
+            		"(p1 int) parameter style JAVA READS SQL DATA dynamic "+
+            		"result sets 2 language java external name "+
+            		"'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.rollbackInsideProcWith2ResultSets'");
+            drs1 = prepareCall("CALL procWithRollbackAnd2Resulsets(3)");
+            drs1.execute();
+            rs = drs1.getResultSet();
+            JDBC.assertDrainResults(rs);
+            JDBC.assertNoMoreResults(drs1);
+            
             s.execute("drop table dellater1");
             s.execute("drop table dellater2");
             conn.setAutoCommit(oldAutoCommit);
@@ -1136,6 +1153,35 @@ public static void rollbackInsideProc(int p1, ResultSet[] data)
         conn.close();
     }
     
+    /**
+     * A test case for DERBY-3414. An explicit rollback inside the procedure
+     * should close all the resultsets created before the call to the
+     * procedure and any resultsets created inside the procedure including
+     * the dynamic resultsets. But the resultset created after the rollback
+     * should stay open
+     * 
+     * @param p1
+     * @param data
+     * @throws SQLException
+     */
+    public static void rollbackInsideProcWith2ResultSets(int p1, 
+    		ResultSet[] data1,
+            ResultSet[] data2) 
+    throws SQLException {
+        Connection conn = DriverManager.getConnection(
+        		"jdbc:default:connection");
+        PreparedStatement ps = conn.prepareStatement(
+        		"select * from t1 where i = ?");
+        ps.setInt(1, p1);
+        data1[0] = ps.executeQuery();
+        conn.rollback();
+        ps = conn.prepareStatement(
+        		"select * from dellater1 where i = ?");
+        ps.setInt(1, p1);
+        data2[0] = ps.executeQuery();
+        conn.close();
+    }
+    
     public static void selectRows(int p1, int p2, ResultSet[] data1,
             ResultSet[] data2) throws SQLException {
 
