diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
index be370d03..5486a8ad 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
@@ -23,6 +23,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.concurrent.Callable;
@@ -55,7 +56,7 @@ public static final Object getProxyInstance(Bundle client, Collection<Class<?>>
     
     ProxyClassLoader pcl = null;
     
-    HashSet<Class<?>> classSet = createSet(ifaces);
+    LinkedHashSet<Class<?>> classSet = createSet(ifaces);
     
     synchronized (cache) {
       WeakReference<ProxyClassLoader> ref = cache.get(client);
@@ -92,8 +93,8 @@ public static final Object getProxyInstance(Bundle client, Collection<Class<?>>
    * @param ifaces
    * @return
    */
-  private static HashSet<Class<?>> createSet(Collection<Class<?>> ifaces) {
-    HashSet<Class<?>> classes = new HashSet<Class<?>>();
+  private static LinkedHashSet<Class<?>> createSet(Collection<Class<?>> ifaces) {
+    LinkedHashSet<Class<?>> classes = new LinkedHashSet<Class<?>>();
     for(Class<?> c : ifaces) {
       //If we already have a class contained then we have already covered its hierarchy
       if(classes.add(c))
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
index b76ee715..d504528b 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
@@ -5,6 +5,7 @@
 import java.security.Permissions;
 import java.security.ProtectionDomain;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -32,8 +33,8 @@
   }
   
   /** A {@link Map} of classes we already know */
-  private final ConcurrentMap<HashSet<Class<?>>, String> classes = 
-                new ConcurrentHashMap<HashSet<Class<?>>, String>();
+  private final ConcurrentMap<LinkedHashSet<Class<?>>, String> classes = 
+                new ConcurrentHashMap<LinkedHashSet<Class<?>>, String>();
   
   private final ConcurrentMap<String, Class<?>> locatedClasses = 
                 new ConcurrentHashMap<String, Class<?>>();
@@ -96,7 +97,7 @@ public boolean isInvalid(Set<Class<?>> createSet) {
       return false;
   }
 
-  public Class<?> createProxyClass(HashSet<Class<?>> createSet) throws UnableToProxyException {
+  public Class<?> createProxyClass(LinkedHashSet<Class<?>> createSet) throws UnableToProxyException {
     
     String className = classes.get(createSet);
     
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
index d6081f43..c932025f 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
@@ -197,10 +197,10 @@ public void testHandlesObjectMethods() throws Exception {
       
       // obeys hashCode and equals, they *are* on the interface
       assertTrue(proxied.equals(Arrays.asList("one", "two", "three")));
-      assertEquals(Collection.class.getMethod("equals", Object.class), listener.getLastMethod());
+      assertEquals(List.class.getMethod("equals", Object.class), listener.getLastMethod());
       listener.clear();
       assertEquals(Arrays.asList("one", "two", "three").hashCode(), proxied.hashCode());
-      assertEquals(Collection.class.getMethod("hashCode"), listener.getLastMethod());
+      assertEquals(List.class.getMethod("hashCode"), listener.getLastMethod());
       listener.clear();
       // and toString
       assertEquals(list.toString(), proxied.toString());
