diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index 004a7c1e..6340b4bf 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -40,26 +40,29 @@ public int compare(byte[] o1, byte[] o2)
         {
             return 1;
         }
-        
-        long t1 = getTimestamp(o1);
-        long t2 = getTimestamp(o2);
-        return t1 < t2 ? -1 : (t1 > t2 ? 1 : FBUtilities.compareByteArrays(o1, o2));
+        int res = compareTimestampBytes(o1, o2);
+        if (res != 0)
+            return res;
+        return FBUtilities.compareByteArrays(o1, o2);
     }
 
-    static long getTimestamp(byte[] bytes)
+    private static int compareTimestampBytes(byte[] o1, byte[] o2)
     {
-        long low = 0;
-        int mid = 0;
-        int hi = 0;
-
-        for (int i = 0; i < 4; i++)
-            low = (low << 8) | (bytes[i] & 0xff);
-        for (int i = 4; i < 6; i++)
-            mid = (mid << 8) | (bytes[i] & 0xff);
-        for (int i = 6; i < 8; i++)
-            hi = (hi << 8) | (bytes[i] & 0xff);
-
-        return low + ((long)mid << 32) + ((long)(hi & 0x0FFF) << 48);
+        int d = (o1[6] & 0xF) - (o2[6] & 0xF);
+        if (d != 0) return d;
+        d = (o1[7] & 0xFF) - (o2[7] & 0xFF);
+        if (d != 0) return d;
+        d = (o1[4] & 0xFF) - (o2[4] & 0xFF);
+        if (d != 0) return d;
+        d = (o1[5] & 0xFF) - (o2[5] & 0xFF);
+        if (d != 0) return d;
+        d = (o1[0] & 0xFF) - (o2[0] & 0xFF);
+        if (d != 0) return d;
+        d = (o1[1] & 0xFF) - (o2[1] & 0xFF);
+        if (d != 0) return d;
+        d = (o1[2] & 0xFF) - (o2[2] & 0xFF);
+        if (d != 0) return d;
+        return (o1[3] & 0xFF) - (o2[3] & 0xFF);
     }
 
     public String getString(byte[] bytes)
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
index 74254834..15fe74cd 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
@@ -18,6 +18,9 @@
 */
 package org.apache.cassandra.db.marshal;
 
+import java.util.Arrays;
+import java.util.Random;
+
 import org.junit.Test;
 import static org.junit.Assert.assertEquals;
 
@@ -27,7 +30,7 @@
 import org.safehaus.uuid.UUID;
 import org.safehaus.uuid.UUIDGenerator;
 
-public class TimeUUIDTypeTest extends CleanupHelper
+public class TimeUUIDTypeTest
 {
     TimeUUIDType timeUUIDType = new TimeUUIDType();
     UUIDGenerator generator = UUIDGenerator.getInstance();
@@ -48,9 +51,9 @@ public void testSmaller()
         UUID b = generator.generateTimeBasedUUID();
         UUID c = generator.generateTimeBasedUUID();
 
-        assertEquals(-1, timeUUIDType.compare(a.asByteArray(), b.asByteArray()));
-        assertEquals(-1, timeUUIDType.compare(b.asByteArray(), c.asByteArray()));
-        assertEquals(-1, timeUUIDType.compare(a.asByteArray(), c.asByteArray()));
+        assert timeUUIDType.compare(a.asByteArray(), b.asByteArray()) < 0;
+        assert timeUUIDType.compare(b.asByteArray(), c.asByteArray()) < 0;
+        assert timeUUIDType.compare(a.asByteArray(), c.asByteArray()) < 0;
     }
 
     @Test
@@ -60,18 +63,30 @@ public void testBigger()
         UUID b = generator.generateTimeBasedUUID();
         UUID c = generator.generateTimeBasedUUID();
 
-        assertEquals(1, timeUUIDType.compare(c.asByteArray(), b.asByteArray()));
-        assertEquals(1, timeUUIDType.compare(b.asByteArray(), a.asByteArray()));
-        assertEquals(1, timeUUIDType.compare(c.asByteArray(), a.asByteArray()));
+        assert timeUUIDType.compare(c.asByteArray(), b.asByteArray()) > 0;
+        assert timeUUIDType.compare(b.asByteArray(), a.asByteArray()) > 0;
+        assert timeUUIDType.compare(c.asByteArray(), a.asByteArray()) > 0;
     }
 
     @Test
-    public void testTimestamp()
+    public void testTimestampComparison()
+    {
+        Random rng = new Random();
+        byte[][] uuids = new byte[100][];
+        for (int i = 0; i < uuids.length; i++)
     {
-        for (int i = 0; i < 100; i++)
+            uuids[i] = new byte[16];
+            rng.nextBytes(uuids[i]);
+            // set version to 1
+            uuids[i][6] &= 0x0F;
+            uuids[i][6] |= 0x10;
+        }
+        Arrays.sort(uuids, timeUUIDType);
+        for (int i = 1; i < uuids.length; i++)
         {
-            UUID uuid = generator.generateTimeBasedUUID();
-            assert TimeUUIDType.getTimestamp(uuid.asByteArray()) == LexicalUUIDType.getUUID(uuid.asByteArray()).timestamp();
+            long i0 = LexicalUUIDType.getUUID(uuids[i - 1]).timestamp();
+            long i1 = LexicalUUIDType.getUUID(uuids[i]).timestamp();
+            assert i0 <= i1;
         }
     }
 }
