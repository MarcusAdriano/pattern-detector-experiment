diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java
index c541fdd7..b4ca6d20 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java
@@ -49,8 +49,20 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // life of object.
     final NoPutResultSet source;
     final private boolean runTimeStatsOn;
-    private long offset;
-    private long fetchFirst;
+    final private long offset;
+    final private long fetchFirst;
+
+    /**
+     * True if we haven't yet fetched any rows from this result set.
+     * Will be reset on close so the result set is ready to reuse.
+     */
+    private boolean virginal;
+
+    /**
+     * Holds the number of rows returned so far in this round of using the
+     * result set.  Will be reset on close so the result set is ready to reuse.
+     */
+    private long rowsFetched;
 
     /**
      * RowCountResultSet constructor
@@ -87,6 +99,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
         this.offset = offset;
         this.fetchFirst = fetchFirst;
+        virginal = true;
+        rowsFetched = 0;
 
         /* Remember whether or not RunTimeStatistics is on */
         runTimeStatsOn =
@@ -159,24 +173,26 @@ public ExecRow  getNextRowCore() throws StandardException {
 
         beginTime = getCurrentTimeMillis();
 
-        if (offset > 0) {
+        if (virginal && offset > 0) {
+            // Only skip rows the first time around
+            virginal = false;
+
+            long offsetCtr = offset;
+
             do {
                 result = source.getNextRowCore();
-                offset--;
+                offsetCtr--;
 
-                if (result != null && offset >= 0) {
+                if (result != null && offsetCtr >= 0) {
                     rowsFiltered++;
                 } else {
                     break;
                 }
 
             } while (true);
-
-            // only skip row first time
-            offset = 0;
         } else {
 
-            if (fetchFirst != -1 && rowsSeen >= fetchFirst) {
+            if (fetchFirst != -1 && rowsFetched >= fetchFirst) {
                 result = null;
             } else {
                 result = source.getNextRowCore();
@@ -185,6 +201,7 @@ public ExecRow  getNextRowCore() throws StandardException {
 
 
         if (result != null) {
+            rowsFetched++;
             rowsSeen++;
         }
 
@@ -248,6 +265,10 @@ public void close() throws StandardException {
             }
         }
 
+        // Reset state for result set reuse, if any
+        virginal = true;
+        rowsFetched = 0;
+
         closeTime += getElapsedMillis(beginTime);
     }
 
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java
index 01f360ef..6865e6a9 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java
@@ -649,6 +649,19 @@ public void testBigTable() throws SQLException {
         stm.close();
     }
 
+    /**
+     * Test that the values of offset and fetch first are not forgotten if
+     * a {@code PreparedStatement} is executed multiple times (DERBY-4212).
+     */
+    public void testRepeatedExecution() throws SQLException {
+        PreparedStatement ps = prepareStatement(
+                "select * from t1 order by b " +
+                "offset 2 rows fetch next 2 rows only");
+        String[][] expected = {{"1", "3"}, {"1", "4"}};
+        for (int i = 0; i < 10; i++) {
+            JDBC.assertFullResultSet(ps.executeQuery(), expected);
+        }
+    }
 
     private void queryAndCheck(
         Statement stm,
