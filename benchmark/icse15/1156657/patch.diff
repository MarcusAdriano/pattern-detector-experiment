diff --git a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
index 47ce52ac..cc06298f 100644
--- a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
+++ b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -21,13 +22,18 @@
 import org.apache.aries.application.modelling.WrappedServiceMetadata;
 import org.apache.aries.blueprint.ComponentDefinitionRegistry;
 import org.apache.aries.util.manifest.ManifestHeaderProcessor;
+import org.osgi.service.blueprint.reflect.BeanArgument;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
+import org.osgi.service.blueprint.reflect.BeanProperty;
 import org.osgi.service.blueprint.reflect.CollectionMetadata;
 import org.osgi.service.blueprint.reflect.ComponentMetadata;
 import org.osgi.service.blueprint.reflect.MapEntry;
+import org.osgi.service.blueprint.reflect.MapMetadata;
 import org.osgi.service.blueprint.reflect.Metadata;
 import org.osgi.service.blueprint.reflect.RefMetadata;
 import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
+import org.osgi.service.blueprint.reflect.ReferenceListener;
+import org.osgi.service.blueprint.reflect.RegistrationListener;
 import org.osgi.service.blueprint.reflect.ServiceMetadata;
 import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
 import org.osgi.service.blueprint.reflect.Target;
@@ -101,9 +107,7 @@ public ParsedServiceElements parseAllServiceElements(InputStream blueprintToPars
 	      boolean suppressAnonymousServices) { 
 	    _logger.debug(LOG_ENTRY, "parseCDRForServices", new Object[]{cdr, suppressAnonymousServices});
 	    List<ExportedService> result = new ArrayList<ExportedService>();
-	    Set<String> names = cdr.getComponentDefinitionNames();
-	    for (String name: names) { 
-	      ComponentMetadata compMetadata = cdr.getComponentDefinition(name);
+	    for (ComponentMetadata compMetadata : findAllComponents(cdr)) { 
 	      if (compMetadata instanceof ServiceMetadata) { 
 	        ServiceMetadata serviceMetadata = (ServiceMetadata)compMetadata;
 	        String serviceName;
@@ -181,9 +185,7 @@ public ParsedServiceElements parseAllServiceElements(InputStream blueprintToPars
 	  private List<ImportedService> parseCDRForReferences (ComponentDefinitionRegistry cdr) throws InvalidAttributeException { 
 	    _logger.debug(LOG_ENTRY, "parseCDRForReferences", new Object[]{cdr});
 	    List<ImportedService> result = new ArrayList<ImportedService>();
-	    Set<String> names = cdr.getComponentDefinitionNames();
-	    for (String name: names) { 
-	      ComponentMetadata compMetadata = cdr.getComponentDefinition(name);
+	    for (ComponentMetadata compMetadata : findAllComponents(cdr)) { 
 	      if (compMetadata instanceof ServiceReferenceMetadata) { 
 	        ServiceReferenceMetadata referenceMetadata = (ServiceReferenceMetadata)compMetadata;
 
@@ -211,6 +213,91 @@ public ParsedServiceElements parseAllServiceElements(InputStream blueprintToPars
 	    return result; 
 	  }
 	
+	  /**
+	   * Find all the components in a given {@link ComponentDefinitionRegistry} this finds top-level
+	   * components as well as their nested counter-parts. It may however not find components in custom namespacehandler 
+	   * {@link ComponentMetadata} instances.
+	   * 
+	   * @param cdr The {@link ComponentDefinitionRegistry} to scan
+	   * @return a {@link Set} of {@link ComponentMetadata}
+	   */
+	  private Set<ComponentMetadata> findAllComponents(ComponentDefinitionRegistry cdr) {
+	      Set<ComponentMetadata> components = new HashSet<ComponentMetadata>();
+	      
+	      for (String name : cdr.getComponentDefinitionNames()) {
+	          ComponentMetadata component = cdr.getComponentDefinition(name);
+	          traverseComponent(component, components);
+	      }
+	      
+	      return components;
+	  }
+	  
+	  /**
+	   * Traverse to find all nested {@link ComponentMetadata} instances
+	   * @param metadata
+	   * @param output
+	   */
+	  private void traverse(Metadata metadata, Set<ComponentMetadata> output) {
+	      if (metadata instanceof ComponentMetadata) {
+	          traverseComponent((ComponentMetadata) metadata, output);	          
+	      } else if (metadata instanceof CollectionMetadata) {
+	          CollectionMetadata collection = (CollectionMetadata) metadata;
+	          
+	          for (Metadata v : collection.getValues()) traverse(v, output);
+	      } else if (metadata instanceof MapMetadata) {
+	          MapMetadata map = (MapMetadata) metadata;
+	          
+	          for (MapEntry e : map.getEntries()) {
+	              traverse(e.getKey(), output);
+	              traverse(e.getValue(), output);
+	          }
+	      }
+	  }
+	  
+	  /**
+	   * Traverse {@link ComponentMetadata} instances to find all nested {@link ComponentMetadata} instances
+	   * @param component
+	   * @param output
+	   */
+	  private void traverseComponent(ComponentMetadata component, Set<ComponentMetadata> output) {
+	      if (!!!output.add(component)) return;
+	      
+	      if (component instanceof BeanMetadata) {
+	          BeanMetadata bean = (BeanMetadata) component;
+	          
+	          traverse(bean.getFactoryComponent(), output);
+
+	          for (BeanArgument argument : bean.getArguments()) {
+	              traverse(argument.getValue(), output);
+	          }
+	          
+	          for (BeanProperty property : bean.getProperties()) {
+	              traverse(property.getValue(), output);
+	          }
+	          
+	      } else if (component instanceof ServiceMetadata) {
+	          ServiceMetadata service = (ServiceMetadata) component;
+	          	          
+	          traverse(service.getServiceComponent(), output);
+	          
+	          for (RegistrationListener listener : service.getRegistrationListeners()) {
+	               traverse(listener.getListenerComponent(), output);
+	          }
+	          
+	          for (MapEntry e : service.getServiceProperties()) {
+	              traverse(e.getKey(), output);
+	              traverse(e.getValue(), output);
+	          }
+	          
+	      } else if (component instanceof ServiceReferenceMetadata) {
+	          ServiceReferenceMetadata reference = (ServiceReferenceMetadata) component;
+	          
+	          for (ReferenceListener listener : reference.getReferenceListeners()) {
+	              traverse(listener.getListenerComponent(), output);
+	          }
+	      }
+	  }
+	
 	  /**
 	   * Some services are injected directly into isolated frameworks by default. We do 
 	   * not need to model these services. They are not represented as ExportedServices 
diff --git a/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/ModellerTest.java b/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/ModellerTest.java
index 4404eef2..ca83821b 100644
--- a/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/ModellerTest.java
+++ b/aries/trunk/application/application-modeller-common-test/src/test/java/org/apache/aries/application/modelling/ModellerTest.java
@@ -6,7 +6,6 @@
 import java.io.InputStream;
 import java.net.URL;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.jar.Manifest;
@@ -39,7 +38,7 @@
         ModelledResourceManagerImpl manager = new ModelledResourceManagerImpl();
         manager.setModellingManager(new ModellingManagerImpl());
         manager.setParserProxy(ParserProxyTest.getMockParserServiceProxy());
-        manager.setModellingPlugins((Collection<ServiceModeller>)Collections.EMPTY_LIST);
+        manager.setModellingPlugins(Collections.<ServiceModeller>emptyList());
 
         return Arrays.asList(new Object[][] {
                 {OfflineModellingFactory.getModelledResourceManager()},
@@ -127,13 +126,19 @@ private void checkTestBundleResource(ModelledResource resource) {
 
         // sanity check that we have parsed the services
 
-        assertEquals(3, resource.getExportedServices().size());
-        assertEquals(1, resource.getImportedServices().size());
+        assertEquals(4, resource.getExportedServices().size());
+        assertEquals(4, resource.getImportedServices().size());
 
-        ImportedService service = resource.getImportedServices().iterator().next();
-        assertEquals("foo.bar.MyInjectedService", service.getInterface());
+        boolean foundFirst = false;
+        for (ImportedService service : resource.getImportedServices()) {
+            if ("foo.bar.MyInjectedService".equals(service.getInterface())) {
+                foundFirst = true;
         assertTrue(service.isOptional());
         assertFalse(service.isList());
         assertEquals("anOptionalReference", service.getId());
     }
+        }
+        
+        assertTrue(foundFirst);
+    }
 }
