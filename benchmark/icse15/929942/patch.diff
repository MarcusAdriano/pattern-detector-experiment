diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
index eaf4a22d..980a8eb8 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
@@ -135,6 +135,9 @@ public Object invoke(Object proxy, Method method, Object[] args)
                 args[0] = AsmInterceptorWrapper.unwrapObject(args[0]);
             }
             toReturn = delegate.invoke(proxy, method, args);
+        } else if (method.getName().equals("finalize") && method.getParameterTypes().length == 0) {
+            // special case finalize, don't route through to delegate because that will get its own call
+            toReturn = null;
         } else 
         // Proxy the call through to the delegate, wrapping call in 
         // interceptor invocations.
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
index 4cc6b176..60a6fa6f 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
@@ -329,6 +329,28 @@ public void testObjectEquality() throws Exception
     assertTrue("The proxy object should be equal to another proxy instance of the same delegate", o2.equals(o));
   }
   
+  private static class ProxyTestOverridesFinalize {
+      public boolean finalizeCalled = false;
+      
+      @Override
+      protected void finalize() {
+          finalizeCalled = true;
+      }
+  }
+  
+  @Test
+  public void testFinalizeNotCalled() throws Exception {
+      ProxyTestOverridesFinalize testObj = new ProxyTestOverridesFinalize();
+      InvocationHandler ih = new Collaborator(null, null, testObj);
+      Object o = ProxySubclassGenerator.newProxySubclassInstance(ProxyTestOverridesFinalize.class, ih);
+      
+      Method m = o.getClass().getDeclaredMethod("finalize");
+      m.setAccessible(true);
+      m.invoke(o);
+      
+      assertFalse(testObj.finalizeCalled);
+  }
+  
 
   private Class<?> getGeneratedSubclass() throws Exception
   {
