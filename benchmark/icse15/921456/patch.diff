diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/IAsyncCallback.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/IAsyncCallback.java
index 6ed3a0c6..0cb19515 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/IAsyncCallback.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/IAsyncCallback.java
@@ -18,11 +18,16 @@
 
 package org.apache.cassandra.net;
 
+/**
+ * implementors of IAsyncCallback need to make sure that any public methods
+ * are threadsafe with respect to response() being called from the message
+ * service.  In particular, if any shared state is referenced, making
+ * response alone synchronized will not suffice.
+ */
 public interface IAsyncCallback 
 {
 	/**
 	 * @param msg response received.
-     * Calls to response() are serialized by ResponseVerbHandler.
 	 */
 	public void response(Message msg);
 }
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/ResponseVerbHandler.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
index 2107abc8..3a62b94c 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
@@ -32,11 +32,8 @@ public void doVerb(Message message)
         {
             if (logger_.isDebugEnabled())
                 logger_.debug("Processing response on a callback from " + message.getMessageId() + "@" + message.getFrom());
-            synchronized (cb)
-            {
                 cb.response(message);
             }
-        }
         else
         {
             IAsyncResult ar = MessagingService.getAsyncResult(messageId);
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyManager.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyManager.java
index 925d4261..540a9262 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyManager.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyManager.java
@@ -21,23 +21,26 @@
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
 import java.io.IOException;
+import java.net.InetAddress;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
+
+import org.apache.log4j.Logger;
+import org.apache.commons.lang.StringUtils;
 
 import org.apache.cassandra.cache.ICacheExpungeHook;
+import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.ReadCommand;
 import org.apache.cassandra.db.ReadResponse;
 import org.apache.cassandra.db.Row;
-import org.apache.cassandra.db.ColumnFamily;
-import java.net.InetAddress;
 import org.apache.cassandra.net.IAsyncCallback;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
-import org.apache.cassandra.utils.*;
-
-import org.apache.log4j.Logger;
-import org.apache.commons.lang.StringUtils;
+import org.apache.cassandra.utils.ExpiringMap;
+import org.apache.cassandra.utils.FBUtilities;
 
 
 class ConsistencyManager implements Runnable
@@ -47,9 +50,10 @@
 
     class DigestResponseHandler implements IAsyncCallback
 	{
-		List<Message> responses_ = new ArrayList<Message>();
+		Collection<Message> responses_ = new LinkedBlockingQueue<Message>();
 
-		public void response(Message msg)
+        // syncronized so "size() == " works
+		public synchronized void response(Message msg)
 		{
 			responses_.add(msg);
             if (responses_.size() == ConsistencyManager.this.replicas_.size())
@@ -94,9 +98,9 @@ private void doReadRepair() throws IOException
 	
 	static class DataRepairHandler implements IAsyncCallback, ICacheExpungeHook<String, String>
 	{
-		private List<Message> responses_ = new ArrayList<Message>();
-		private IResponseResolver<Row> readResponseResolver_;
-		private int majority_;
+		private final Collection<Message> responses_ = new LinkedBlockingQueue<Message>();
+		private final IResponseResolver<Row> readResponseResolver_;
+		private final int majority_;
 		
 		DataRepairHandler(int responseCount, IResponseResolver<Row> readResponseResolver)
 		{
@@ -104,7 +108,8 @@ private void doReadRepair() throws IOException
 			majority_ = (responseCount / 2) + 1;  
 		}
 		
-		public void response(Message message)
+        // synchronized so the " == majority" is safe
+		public synchronized void response(Message message)
 		{
 			if (logger_.isDebugEnabled())
 			  logger_.debug("Received responses in DataRepairHandler : " + message.toString());
@@ -120,7 +125,7 @@ public void callMe(String key, String value)
 		{
             try
 			{
-				readResponseResolver_.resolve(new ArrayList<Message>(responses_));
+				readResponseResolver_.resolve(responses_);
             }
             catch (Exception ex)
             {
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
index 25d8817b..11f176fd 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
@@ -53,12 +53,11 @@ public DatacenterSyncWriteResponseHandler(Map<String, Integer> responseCounts, S
     }
 
     @Override
-    public void response(Message message)
+    // synchronized for the benefit of dcResponses and responseCounts.  "responses" itself
+    // is inherited from WRH and is concurrent.
+    // TODO can we use concurrent structures instead?
+    public synchronized void response(Message message)
     {
-        if (condition.isSignaled())
-        {
-            return;
-        }
         try
         {
             String dataCenter = endPointSnitch.getLocation(message.getFrom());
@@ -89,8 +88,7 @@ else if ((Integer) blockFor > quorumCount)
             throw new RuntimeException(e);
         }
         responses.add(message);
-        // If done then the response count will be empty after removing
-        // everything.
+        // If done then the response count will be empty
         if (responseCounts.isEmpty())
         {
             condition.signal();
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
index f2db44bc..803ff021 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
@@ -26,6 +26,7 @@
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.locator.IEndPointSnitch;
@@ -40,15 +41,15 @@
  */
 public class DatacenterWriteResponseHandler extends WriteResponseHandler
 {
-    private int blockFor;
-    private DatacenterEndPointSnitch endpointsnitch;
-    private InetAddress localEndpoint;
+    private final AtomicInteger blockFor;
+    private final DatacenterEndPointSnitch endpointsnitch;
+    private final InetAddress localEndpoint;
 
     public DatacenterWriteResponseHandler(int blockFor, String table)
     {
         // Response is been managed by the map so the waitlist size really doesnt matter.
         super(blockFor, table);
-        this.blockFor = blockFor;
+        this.blockFor = new AtomicInteger(blockFor);
         endpointsnitch = (DatacenterEndPointSnitch) DatabaseDescriptor.getEndPointSnitch(table);
         localEndpoint = FBUtilities.getLocalAddress();
     }
@@ -56,17 +57,13 @@ public DatacenterWriteResponseHandler(int blockFor, String table)
     @Override
     public void response(Message message)
     {
-        // IF done look no futher.
-        if (condition.isSignaled())
-        {
-            return;
-        }
             //Is optimal to check if same datacenter than comparing Arrays.
+        int b = -1;
         try
         {
             if (endpointsnitch.isInSameDataCenter(localEndpoint, message.getFrom()))
             {
-                blockFor--;
+                b = blockFor.decrementAndGet();
             }
         }
         catch (UnknownHostException e)
@@ -74,7 +71,7 @@ public void response(Message message)
             throw new RuntimeException(e);
         }
         responses.add(message);
-        if (blockFor <= 0)
+        if (b == 0)
         {
             //Singnal when Quorum is recived.
             condition.signal();
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/IResponseResolver.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/IResponseResolver.java
index 0daf5932..9e514ecb 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/IResponseResolver.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/IResponseResolver.java
@@ -18,6 +18,7 @@
 
 package org.apache.cassandra.service;
 
+import java.util.Collection;
 import java.util.List;
 import java.io.IOException;
 
@@ -33,7 +34,7 @@
 	 * repairs . Hence you need to derive a response resolver based on your
 	 * needs from this interface.
 	 */
-	public T resolve(List<Message> responses) throws DigestMismatchException, IOException;
-	public boolean isDataPresent(List<Message> responses);
+	public T resolve(Collection<Message> responses) throws DigestMismatchException, IOException;
+	public boolean isDataPresent(Collection<Message> responses);
 
 }
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/QuorumResponseHandler.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
index 7b0975db..bc86a026 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
@@ -18,8 +18,11 @@
 
 package org.apache.cassandra.service;
 
+import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.io.IOException;
@@ -36,13 +39,13 @@
 {
     protected static final Logger logger = Logger.getLogger( QuorumResponseHandler.class );
     protected final SimpleCondition condition = new SimpleCondition();
-    protected final List<Message> responses;
+    protected final Collection<Message> responses;
     private IResponseResolver<T> responseResolver;
     private final long startTime;
 
     public QuorumResponseHandler(int responseCount, IResponseResolver<T> responseResolver)
     {
-        responses = new ArrayList<Message>(responseCount);
+        responses = new LinkedBlockingQueue<Message>();
         this.responseResolver =  responseResolver;
         startTime = System.currentTimeMillis();
     }
@@ -85,9 +88,6 @@ public T get() throws TimeoutException, DigestMismatchException, IOException
     
     public void response(Message message)
     {
-        if (condition.isSignaled())
-            return;
-
         responses.add(message);
         if (responseResolver.isDataPresent(responses))
         {
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
index 289e3e76..c9a761ca 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
@@ -51,7 +51,7 @@ public RangeSliceResponseResolver(String table, List<InetAddress> sources)
         this.table = table;
     }
 
-    public List<Row> resolve(List<Message> responses) throws DigestMismatchException, IOException
+    public List<Row> resolve(Collection<Message> responses) throws DigestMismatchException, IOException
     {
         CollatingIterator collator = new CollatingIterator(new Comparator<Pair<Row,InetAddress>>()
         {
@@ -99,7 +99,7 @@ protected Row getReduced()
         return resolvedRows;
     }
 
-    public boolean isDataPresent(List<Message> responses)
+    public boolean isDataPresent(Collection<Message> responses)
     {
         return responses.size() >= sources.size();
     }
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java
index cca93bf6..ae7a3d6a 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 
 import org.apache.cassandra.db.ColumnFamily;
@@ -63,7 +64,7 @@ public ReadResponseResolver(String table, int responseCount)
       * repair request should be scheduled.
       *
       */
-	public Row resolve(List<Message> responses) throws DigestMismatchException, IOException
+	public Row resolve(Collection<Message> responses) throws DigestMismatchException, IOException
     {
         long startTime = System.currentTimeMillis();
 		List<ColumnFamily> versions = new ArrayList<ColumnFamily>();
@@ -159,7 +160,7 @@ static ColumnFamily resolveSuperset(List<ColumnFamily> versions)
         return resolved;
     }
 
-	public boolean isDataPresent(List<Message> responses)
+	public boolean isDataPresent(Collection<Message> responses)
 	{
         if (responses.size() < responseCount)
             return false;
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/WriteResponseHandler.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/WriteResponseHandler.java
index e1f299df..dd32f3bb 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/WriteResponseHandler.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/WriteResponseHandler.java
@@ -18,11 +18,15 @@
 
 package org.apache.cassandra.service;
 
+import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.io.IOException;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.net.IAsyncCallback;
@@ -37,8 +41,8 @@
     protected static final Logger logger = Logger.getLogger( WriteResponseHandler.class );
     protected final SimpleCondition condition = new SimpleCondition();
     private final int responseCount;
-    protected final List<Message> responses;
-    protected int localResponses;
+    protected final Collection<Message> responses;
+    protected AtomicInteger localResponses = new AtomicInteger(0);
     private final long startTime;
 
     public WriteResponseHandler(int responseCount, String table)
@@ -49,7 +53,7 @@ public WriteResponseHandler(int responseCount, String table)
             : "invalid response count " + responseCount;
 
         this.responseCount = responseCount;
-        responses = new ArrayList<Message>(responseCount);
+        responses = new LinkedBlockingQueue<Message>();
         startTime = System.currentTimeMillis();
     }
 
@@ -82,25 +86,21 @@ public void get() throws TimeoutException
         }
     }
 
-    public synchronized void response(Message message)
+    public void response(Message message)
     {
-        if (condition.isSignaled())
-            return;
         responses.add(message);
         maybeSignal();
     }
 
-    public synchronized void localResponse()
+    public void localResponse()
     {
-        if (condition.isSignaled())
-            return;
-        localResponses++;
+        localResponses.addAndGet(1);
         maybeSignal();
     }
 
     private void maybeSignal()
     {
-        if (responses.size() + localResponses >= responseCount)
+        if (responses.size() + localResponses.get() >= responseCount)
         {
             condition.signal();
         }
