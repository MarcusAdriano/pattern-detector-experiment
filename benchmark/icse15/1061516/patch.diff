diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index 9018957f..6db0e243 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -42,6 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.execute.ExecutionContext;
 import org.apache.derby.impl.sql.compile.StatementNode;
 import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
+import org.apache.derby.iapi.util.InterruptStatus;
 
 public class GenericStatement
 	implements Statement {
@@ -196,7 +197,7 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 				try {
 					preparedStmt.wait();
 				} catch (InterruptedException ie) {
-					throw StandardException.interrupt(ie);
+                    InterruptStatus.setInterrupted();
 				}
 			}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index c6150e88..d8c83b79 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -71,6 +71,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.Property;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.util.ByteArray;
+import org.apache.derby.iapi.util.InterruptStatus;
 import org.apache.derby.iapi.services.io.FileUtil;
 import org.apache.derby.iapi.util.ReuseFactory;
 import org.apache.derby.iapi.services.property.PropertyUtil;
@@ -2350,13 +2351,7 @@ public void freezePersistentStore() throws StandardException
 					}
 					catch (InterruptedException ie) 
 					{
-						// make sure we are not stuck in frozen state if we
-						// caught an interrupt exception and the calling 
-                        // thread may not have a chance to call unfreeze
-						isFrozen = false;
-						freezeSemaphore.notifyAll();
-
-						throw StandardException.interrupt(ie);
+                        InterruptStatus.setInterrupted();
 					}
 				}
 			}
@@ -2399,7 +2394,7 @@ public void writeInProgress() throws StandardException
 				}
 				catch (InterruptedException ie)
 				{
-					throw StandardException.interrupt(ie);
+                    InterruptStatus.setInterrupted();
 				}
 			}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
index 6cdd231c..e462ae68 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
@@ -45,6 +45,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
 
+import org.apache.derby.iapi.util.InterruptStatus;
+
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.ObjectInput;
@@ -1683,7 +1685,7 @@ void setExclusive(BaseContainerHandle requester)
 					// Expect notify from releaseExclusive().
 					wait();
 				} catch (InterruptedException ie) {
-					throw StandardException.interrupt(ie);
+                    InterruptStatus.setInterrupted();
 				}
 			}
 
@@ -1712,6 +1714,7 @@ void setExclusive(BaseContainerHandle requester)
                 } 
                 catch (InterruptedException ie) 
                 {
+                    InterruptStatus.setInterrupted();
                 }
             }
 
@@ -1770,6 +1773,7 @@ boolean setExclusiveNoWait(BaseContainerHandle requester) throws StandardExcepti
                 } 
                 catch (InterruptedException ie) 
                 {
+                    InterruptStatus.setInterrupted();
                 }
             }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
index f0dba94f..c09452d8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
@@ -37,6 +37,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.error.ExceptionSeverity;
+
+import org.apache.derby.iapi.util.InterruptStatus;
+
 import java.io.IOException;
 
 /**
@@ -563,7 +566,7 @@ public void clean(boolean remove) throws StandardException
 				} 
                 catch (InterruptedException ie) 
                 {
-					throw StandardException.interrupt(ie);
+                    InterruptStatus.setInterrupted();
 				}
 			}
 
@@ -586,8 +589,7 @@ public void clean(boolean remove) throws StandardException
 				} 
                 catch (InterruptedException ie) 
 				{
-					inClean = false;
-					throw StandardException.interrupt(ie);
+                    InterruptStatus.setInterrupted();
 				}
 			}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
index aa2e7952..1e72dba3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
@@ -570,7 +570,7 @@ public void clean(boolean forRemove) throws StandardException
                             // we re-grab monitor on "this" (which recovery
                             // needs) and retry writeRAFHeader.
                             try {
-                                Thread.sleep(500); // 0.5s
+                                Thread.sleep(INTERRUPT_RETRY_SLEEP);
                             } catch (InterruptedException ee) {
                                 // This thread received an interrupt as
                                 // well, make a note.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
index 1846b1bf..df144b99 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
@@ -314,10 +314,7 @@ private void readPage(long pageNumber, byte[] pageData, long offset)
                     try {
                         channelCleanupMonitor.wait();
                     } catch (InterruptedException e) {
-                        InterruptStatus.noteAndClearInterrupt(
-                            "interrupt while waiting to gain entry",
-                            threadsInPageIO,
-                            hashCode());
+                        InterruptStatus.setInterrupted();
                     }
 
                 }
@@ -517,10 +514,7 @@ protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
                     try {
                         channelCleanupMonitor.wait();
                     } catch (InterruptedException e) {
-                        InterruptStatus.noteAndClearInterrupt(
-                            "interrupt while waiting to gain entry",
-                            threadsInPageIO,
-                            hashCode());
+                        InterruptStatus.setInterrupted();
                     }
 
                 }
@@ -833,7 +827,7 @@ private boolean recoverContainerAfterInterrupt(
             try {
                 Thread.sleep(10);
             } catch (InterruptedException te) {
-                // again! No need, we have already taken note, pal!
+                InterruptStatus.setInterrupted();
             }
         }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
index f45331a1..a376a2ce 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
@@ -31,7 +31,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.SyncFailedException;
-import java.io.InterruptedIOException;
 import java.util.LinkedList;
 
 import org.apache.derby.iapi.services.io.FormatIdOutputStream;
@@ -39,6 +38,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.replication.master.MasterFactory;
 import org.apache.derby.iapi.store.raw.RawStoreFactory;
 
+import org.apache.derby.iapi.util.InterruptStatus;
 
 /**
 	Wraps a RandomAccessFile file to provide buffering
@@ -513,11 +513,7 @@ protected void flushDirtyBuffers() throws IOException
 						wait();
 					}catch (InterruptedException ie) 
 					{
-						//do nothing, let the flush request to complete.
-						//because it possible that other thread which is
-						//currently might have completed this request also ,
-						//if exited  on interrupt and throw exception, can not
-						//be sure whether this transaction is COMMITTED ot not.
+                        InterruptStatus.setInterrupted();
 					}
 				}
 		
@@ -676,7 +672,8 @@ public void syncLogAccessFile()
                     Thread.sleep( 200 ); 
                 }
                 catch( InterruptedException ie )
-                {   //does not matter weather I get interrupted or not
+                {
+                    InterruptStatus.setInterrupted();
                 }
 
                 if( i > 20 )
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
index b00e7c3c..ca768185 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
@@ -91,6 +91,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.io.StorageFile;
 import org.apache.derby.io.StorageRandomAccessFile;
 
+import org.apache.derby.iapi.util.InterruptStatus;
+import org.apache.derby.iapi.util.InterruptDetectedException;
+
 import java.io.File; // Plain files are used for backups
 import java.io.IOException;
 import java.io.SyncFailedException;
@@ -99,6 +102,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
 import java.io.FileNotFoundException;
+import java.io.InterruptedIOException;
 
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -715,7 +719,7 @@ public void recover(
                     try {
                         slaveRecoveryMonitor.wait();
                     } catch (InterruptedException ie) {
-                        // do nothing
+                        InterruptStatus.setInterrupted();
                     }
                 }
             }
@@ -1522,7 +1526,7 @@ public boolean checkpoint(
 
 		@exception StandardException Derby Standard Error Policy 
 	*/
-	protected boolean checkpointWithTran(
+    private boolean checkpointWithTran(
     RawTransaction      cptran, 
     RawStoreFactory     rsf,
     DataFactory         df,
@@ -1601,7 +1605,7 @@ protected boolean checkpointWithTran(
                             }	
                             catch (InterruptedException ie)
                             {
-                                throw StandardException.interrupt(ie);
+                                InterruptStatus.setInterrupted();
                             }	
                         }
                     }
@@ -2023,7 +2027,7 @@ public void switchLogFile() throws StandardException
 				}
 				catch (InterruptedException ie)
 				{
-					throw StandardException.interrupt(ie);
+                    InterruptStatus.setInterrupted();
 				}	
 			}
 
@@ -2985,7 +2989,7 @@ protected StorageRandomAccessFile getLogFileAtBeginning(long filenumber)
                     try {
                         slaveRecoveryMonitor.wait();
                     } catch (InterruptedException ie) {
-                        // do nothing
+                        InterruptStatus.setInterrupted();
                     }
                 }
             }
@@ -3946,7 +3950,7 @@ protected void flush(long fileNumber, long wherePosition) throws StandardExcepti
 						} 
 						catch (InterruptedException ie) 
 						{
-							throw StandardException.interrupt(ie);
+                            InterruptStatus.setInterrupted();
 						}
 					}
 
@@ -4008,7 +4012,7 @@ protected void flush(long fileNumber, long wherePosition) throws StandardExcepti
 						}
 						catch (InterruptedException ie)
 						{
-							throw StandardException.interrupt(ie);
+                            InterruptStatus.setInterrupted();
 						}
 					}
 					else
@@ -4210,7 +4214,7 @@ private void syncFile( StorageRandomAccessFile raf)
                 }
                 catch( InterruptedException ie )
                 {   
-                    //does not matter weather I get interrupted or not
+                    InterruptStatus.setInterrupted();
                 }
 
                 if( i > 20 )
@@ -4974,7 +4978,7 @@ public void startLogBackup(File toDir) throws StandardException
 				}	
 				catch (InterruptedException ie)
 				{
-					throw StandardException.interrupt(ie);
+                    InterruptStatus.setInterrupted();
 				}	
 			}
 		
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
index 7b03b1be..e2addef7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
@@ -66,6 +66,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
+import org.apache.derby.iapi.util.InterruptStatus;
 
 import java.util.Enumeration;
 import java.util.Properties;
@@ -1068,11 +1069,8 @@ public boolean inDatabaseCreation()
      *             is blocked. 
      * @return     <tt>true</tt> if backup is blocked.
      *			   <tt>false</tt> otherwise.
-     * @exception StandardException if interrupted while waiting for a 
-     *           backup  to complete.
      */
 	protected boolean blockBackup(boolean wait)
-        throws StandardException 
 	{
 		synchronized(backupSemaphore) {
             // do not allow backup blocking operations, if online backup is
@@ -1084,7 +1082,7 @@ protected boolean blockBackup(boolean wait)
                         try {
                             backupSemaphore.wait();
                         } catch (InterruptedException ie) {
-                            throw StandardException.interrupt(ie);
+                            InterruptStatus.setInterrupted();
                         }
                     }
                 }else {
@@ -1133,10 +1131,10 @@ protected void unblockBackup()
 	 * @return     <tt>true</tt> if no backup blocking operations are in 
      *             progress
 	 *             <tt>false</tt> otherwise.
-	 * @exception StandardException if interrupted or a runtime exception occurs
+     * @exception RuntimeException if runtime exception occurs, in which case
+     *             other threads blocked on backupSemaphore are notified
 	 */
 	public boolean blockBackupBlockingOperations(boolean wait) 
-		throws StandardException 
 	{
 		synchronized(backupSemaphore) {
 			if (wait) {
@@ -1151,14 +1149,7 @@ public boolean blockBackupBlockingOperations(boolean wait)
 							backupSemaphore.wait();
 						}
 						catch (InterruptedException ie) {
-							// make sure we are not stuck in the backup state 
-                            // if we caught an interrupt exception and the 
-                            // calling thread may not have a chance to clear 
-                            // the in backup state.
-
-							inBackup = false;
-							backupSemaphore.notifyAll();
-							throw StandardException.interrupt(ie);
+                            InterruptStatus.setInterrupted();
 						}
 					}
 				}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
index 9eaf64ac..63283452 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
@@ -34,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer;
 import org.apache.derby.impl.store.replication.net.ReplicationMessage;
 import org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit;
+import org.apache.derby.iapi.util.InterruptStatus;
 
 /**
  * <p>
@@ -221,8 +222,7 @@ public void run() {
                     }
                 }
             } catch (InterruptedException ie) {
-                //Interrupt the log shipping thread.
-                return;
+                InterruptStatus.setInterrupted();
             } catch (IOException ioe) {
                 //The transmitter is recreated if the connection to the
                 //slave can be re-established.
@@ -334,6 +334,7 @@ public void forceFlush() throws IOException, StandardException
             try {
                 forceFlushSemaphore.wait(DEFAULT_FORCEFLUSH_TIMEOUT);
             } catch (InterruptedException ex) {
+                InterruptStatus.setInterrupted();
             }
         }
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
index c23ebb0e..368099cb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
@@ -34,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.impl.store.raw.log.LogCounter;
+import org.apache.derby.iapi.util.InterruptStatus;
 
 /**
  * This class is the Receiver (viz. Socket server or listener) part of the
@@ -82,6 +83,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /** Used for synchronization of the ping thread */
     private final Object sendPingSemaphore = new Object();
 
+    /**
+     * Whether or not the ping thread has been notified to check connection.
+     * Protected by sendPingSemaphore.
+     */
+    private boolean doSendPing = false;
+
     /** Used for synchronization when waiting for a ping reply message */
     private final Object receivePongSemaphore = new Object();
 
@@ -464,17 +471,40 @@ public synchronized boolean isConnectedToMaster() {
         // synchronize on receivePongSemaphore so that this thread is
         // guaraneed to get to receivePongSemaphore.wait before the pong
         // message is processed in readMessage
+
         synchronized (receivePongSemaphore) {
             connectionConfirmed = false;
+
+            long startWaitingatTime;
+            long giveupWaitingAtTime;
+            long nextWait = DEFAULT_PING_TIMEOUT;
+
             synchronized (sendPingSemaphore) {
                 // Make ping thread send a ping message to the master
+                doSendPing = true;
                 sendPingSemaphore.notify();
+
+                // want result within DEFAULT_PING_TIMEOUT millis.
+                startWaitingatTime = System.currentTimeMillis();
+                giveupWaitingAtTime = startWaitingatTime + DEFAULT_PING_TIMEOUT;
             }
 
+            while (true) {
             try {
                 // Wait for the pong response message
-                receivePongSemaphore.wait(DEFAULT_PING_TIMEOUT);
+                    receivePongSemaphore.wait(nextWait);
             } catch (InterruptedException ex) {
+                    InterruptStatus.setInterrupted();
+                }
+
+                nextWait = giveupWaitingAtTime - System.currentTimeMillis();
+
+                if (!connectionConfirmed && nextWait > 0) {
+                    // we could have been interrupted or seen a spurious
+                    // wakeup, so wait a bit longer
+                    continue;
+                }
+                break;
             }
         }
         return connectionConfirmed;
@@ -500,8 +530,17 @@ public void run() {
             try {
                 while (!killPingThread) {
                     synchronized (sendPingSemaphore) {
+                        while (!doSendPing) {
+                            try {
                         sendPingSemaphore.wait();
+                            } catch (InterruptedException e) {
+                                InterruptStatus.setInterrupted();
                     }
+                        }
+
+                        doSendPing = false;
+                    }
+
                     if (killPingThread) {
                         // The thread was notified to terminate
                         break;
@@ -509,7 +548,6 @@ public void run() {
 
                     sendMessage(pingMsg);
                 }
-            } catch (InterruptedException ie) {
             } catch (IOException ioe) {
             // For both exceptions: Do nothing. isConnectedToMaster will return
             // 'false' and appropriate action will be taken.
