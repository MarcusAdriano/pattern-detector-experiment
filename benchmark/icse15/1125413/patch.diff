diff --git a/aries/trunk/spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizerTest.java b/aries/trunk/spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizerTest.java
index a11cfd01..75af7368 100644
--- a/aries/trunk/spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizerTest.java
+++ b/aries/trunk/spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizerTest.java
@@ -18,6 +18,10 @@
  */
 package org.apache.aries.spifly;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertSame;
+
 import java.net.URL;
 import java.util.Collection;
 import java.util.Collections;
@@ -28,8 +32,6 @@
 import org.apache.aries.spifly.api.SpiFlyConstants;
 import org.apache.aries.spifly.impl1.MySPIImpl1;
 import org.easymock.EasyMock;
-import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
@@ -37,7 +39,6 @@
 
 public class ProviderBundleTrackerCustomizerTest {
     @Test
-    @Ignore("Need to fix, this is WIP")
     @SuppressWarnings("unchecked")
     public void testAddingRemovedBundle() throws Exception {        
         Bundle spiBundle = EasyMock.createMock(Bundle.class);
@@ -69,25 +70,26 @@ public void start(BundleContext context) throws Exception {}
         Dictionary<String, String> headers = new Hashtable<String, String>();
         // Specify the headers for the test bundle
         headers.put(SpiFlyConstants.SPI_PROVIDER_HEADER, "*");
-        EasyMock.expect(implBundle.getHeaders()).andReturn(headers);
+        EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
         
         // List the resources found at META-INF/services in the test bundle
+        URL dir = getClass().getResource("impl1/META-INF/services");
+        assertNotNull("precondition", dir);
+        EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
         URL res = getClass().getResource("impl1/META-INF/services/org.apache.aries.mytest.MySPI");
-        Assert.assertNotNull("precondition", res);
+        assertNotNull("precondition", res);
         EasyMock.expect(implBundle.findEntries("META-INF/services", "*", false)).andReturn(
-                Collections.enumeration(Collections.singleton(res)));
-        
+                Collections.enumeration(Collections.singleton(res))).anyTimes();
         Class<?> cls = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl1.MySPIImpl1");
-        EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls);
-        
+        EasyMock.<Object> expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls).anyTimes();
         EasyMock.replay(implBundle);
         
-        Assert.assertEquals("Precondition", 0, a.findProviderBundles("org.apache.aries.mytest.MySPI").size());
+        assertEquals("Precondition", 0, a.findProviderBundles("org.apache.aries.mytest.MySPI").size());
         // Call addingBundle();
         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
         Collection<Bundle> bundles = a.findProviderBundles("org.apache.aries.mytest.MySPI");
-        Assert.assertEquals(1, bundles.size());
-        Assert.assertSame(implBundle, bundles.iterator().next());
+        assertEquals(1, bundles.size());
+        assertSame(implBundle, bundles.iterator().next());
         
         // The bc.registerService() call should now have been made
         EasyMock.verify(implBC);
