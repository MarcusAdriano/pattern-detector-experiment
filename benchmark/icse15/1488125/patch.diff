diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index c08c961b..3f8bb528 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -925,7 +925,14 @@ public Void run() {
                         if (passwordArg != null) {
                             p.setProperty("password", passwordArg);
                         }
-                        cloudscapeDriver.connect("jdbc:derby:;shutdown=true", p);
+                        // DERBY-6224: DriverManager.deregisterDriver() requires
+                        // an extra permission in JDBC 4.2 and later. Invoke
+                        // system shutdown with deregister=false to avoid the
+                        // need for the extre permission in the default server
+                        // policy. Since the JVM is about to terminate, we don't
+                        // care whether the JDBC driver is deregistered.
+                        cloudscapeDriver.connect(
+                            "jdbc:derby:;shutdown=true;deregister=false", p);
                     }
                 } catch (SQLException sqle) {
                     // If we can't shutdown Derby, perhaps, authentication has
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
index d2514294..cd7eedbc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
@@ -29,6 +29,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLFeatureNotSupportedException;
 
 import java.io.PrintStream;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.util.Properties;
 import java.util.logging.Logger;
 
@@ -66,7 +69,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	
 
     // This is the driver that memorizes the autoloadeddriver (DERBY-2905)
-    private static Driver _autoloadedDriver;
+    private static AutoloadedDriver _autoloadedDriver;
 
 	//
 	// This is the driver that's specific to the JDBC level we're running at.
@@ -260,13 +263,13 @@ static	void	unregisterDriverModule()
         try {
             // deregister is false if user set deregister=false attribute (DERBY-2905)
             if (InternalDriver.getDeregister() && _autoloadedDriver != null) {
-                DriverManager.deregisterDriver(_autoloadedDriver);
+                deregisterDriver(_autoloadedDriver);
                 _autoloadedDriver = null;
-            } else {
-                DriverManager.deregisterDriver(_driverModule);
-                //DERBY 5085, need to restore the default value
-                InternalDriver.setDeregister(true);
             }
+
+            // DERBY-5085, need to restore the default value
+            InternalDriver.setDeregister(true);
+
             _driverModule = null;
         } catch (SQLException e) {
             if (SanityManager.DEBUG)
@@ -274,6 +277,25 @@ static	void	unregisterDriverModule()
         }
 	}
 	
+    private static void deregisterDriver(final AutoloadedDriver driver)
+            throws SQLException {
+        // DERBY-6224: DriverManager.deregisterDriver() requires a special
+        // permission in JDBC 4.2 and later. Call it in a privileged block
+        // so that the permission doesn't have to be granted to code that
+        // invokes engine shutdown.
+        try {
+            AccessController.doPrivileged(
+                    new PrivilegedExceptionAction<Void>() {
+                public Void run() throws SQLException {
+                    // Requires SQLPermission("deregisterDriver")
+                    DriverManager.deregisterDriver(driver);
+                    return null;
+                }
+            });
+        } catch (PrivilegedActionException pae) {
+            throw (SQLException) pae.getCause();
+        }
+    }
 
 	/*
 	** Return true if the engine has been booted.
