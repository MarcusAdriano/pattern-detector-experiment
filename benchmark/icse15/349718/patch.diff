diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index 5ec0fa04..0aac96c1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -251,8 +251,17 @@ public String getSubString(long pos, int length) throws SQLException
 			}
 			finally
 			{
-				if (clobReader != null)
+			    if (clobReader != null){
+				
+				try{
 					clobReader.close();
+				    
+				}catch(IOException e){
+				    e.printStackTrace();
+				    throw new SQLException(e.getMessage());
+				    
+				}
+			    }
 				restoreContextStack();
 			}
 		}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
index 00e99709..1fd3d71a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
@@ -26,9 +26,16 @@
 import java.io.UTFDataFormatException;
 import java.io.EOFException;
 import java.sql.SQLException;
+import org.apache.derby.iapi.types.Resetable;
+import org.apache.derby.iapi.error.StandardException;
+    
 
 /**
-*/
+ *
+ * If source InputStream of this class is Resetable, close method of this class reset the source instead of close it,
+ * because the source InputStream can be shared.
+ *
+ */
 public final class UTF8Reader extends Reader
 {
 
@@ -140,7 +147,7 @@ public long skip(long len) throws IOException {
 
 	}
 
-	public void close()
+	public void close() throws IOException
 	{
 		synchronized (lock) {
 			closeIn();
@@ -212,23 +219,33 @@ int readAsciiInto(byte[] abuf, int off, int len) throws IOException {
 	*/
 
 
-	private void closeIn() {
+	private void closeIn() throws IOException {
 		if (in != null) {
 			try {
+			    
+			    if(in instanceof Resetable){
+				((Resetable) in).resetStream();
+				
+			    }else{
 				in.close();
-			} catch (IOException ioe) {
+			    }
+			    
+			} catch (StandardException e) {
+			    e.printStackTrace();
+			    throw new IOException(e.getMessage());
+			    
 			} finally {
 				in = null;
 			}
 		}
 	}
-	private IOException utfFormatException(String s) {
+	private IOException utfFormatException(String s) throws IOException {
 		noMoreReads = true;
 		closeIn();
 		return new UTFDataFormatException(s);
 	}
 
-	private IOException utfFormatException() {
+	private IOException utfFormatException() throws IOException {
 		noMoreReads = true;
 		closeIn();
 		return new UTFDataFormatException();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
index d86cfb50..b8caafbf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
@@ -41,6 +41,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.ByteArrayInputStream;
+import java.io.CharArrayReader;
 
 /**
  * Test of JDBC result set Stream calls.
@@ -481,8 +482,11 @@ private static void executeTestOfRepeatedStream(Connection conn)
 
 	    prepareTestRepeatedStream(conn);
 	    readFromRepeatedStream(conn);
-	    cleanTestRepeatedStream(conn);
+	    cleanTest(conn);
 	    
+	    prepareTestRepeatedReader(conn);
+	    readFromRepeatedReader(conn);
+	    cleanTest(conn);
 	    
 	}
     
@@ -577,7 +581,97 @@ private static void readHeadOfStream(ResultSet rs)
 	}
     
     
-	private static void cleanTestRepeatedStream(Connection conn) 
+	private static void prepareTestRepeatedReader(Connection conn) throws SQLException {
+	
+	    PreparedStatement st = null;
+
+	    try{
+
+		st = conn.prepareStatement("create table testBlobX2 (a integer, b clob(1024K))");
+		st.execute();
+		st.close();
+
+		st = conn.prepareStatement("insert into testBlobX2(a,b) values(1,?)");
+
+		char[] testData = new char[1024 * 1024];
+	    
+		for(int i = 0;
+		    i < testData.length;
+		    i ++)
+		    testData[i] = (char) (i % Character.MAX_VALUE);
+	    
+		st.setCharacterStream(1, 
+				      new CharArrayReader(testData),
+				      testData.length);
+
+		st.executeUpdate();
+
+	    }finally{
+		if(st != null)
+		    st.close();
+	    }
+	
+	}
+	
+	
+	private static void readFromRepeatedReader(Connection conn) 
+	    throws SQLException ,IOException {
+	
+	    PreparedStatement st = null;
+	    ResultSet rs = null;
+	
+	    InputStream is = null;
+
+	    try{
+		st = conn.prepareStatement("SELECT b FROM testBlobX2 WHERE a = 1");
+		rs = st.executeQuery();
+	    
+		rs.next();
+		
+		System.out.print("first reader: ");
+		readHeadOfReader(rs);
+	    
+		System.out.print("second reader: ");
+		readHeadOfReader(rs);
+		
+	    }finally{
+		if(rs != null)
+		    rs.close();
+	    
+		if(st != null)
+		    st.close();
+	    
+	    }
+
+	}
+	
+	
+	private static void readHeadOfReader(ResultSet rs) 
+	    throws SQLException, IOException {
+	
+	    Reader reader = null;
+
+	    try{
+		reader = rs.getCharacterStream(1);
+
+		for( int i = 0 ;
+		     i < 8 ;
+		     i ++ ){
+		
+		    System.out.print(reader.read());
+		
+		}
+	    
+		System.out.println();
+	    
+	    }finally{
+		if(reader != null)
+		    reader.close();
+	    }
+	}
+	
+	
+	private static void cleanTest(Connection conn) 
 	    throws SQLException {
 	
 	    Statement st = null;
