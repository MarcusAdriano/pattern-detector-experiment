diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
index 75a6819d..b862fab2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
@@ -317,27 +317,27 @@ void recover(File[] clogs) throws IOException
                 bufIn.reset(bytes, bytes.length);
 
                 /* read the commit log entry */
-                Row row = Row.serializer().deserialize(bufIn);
+                RowMutation rm = RowMutation.serializer().deserialize(bufIn);
                 if (logger_.isDebugEnabled())
                     logger_.debug(String.format("replaying mutation for %s.%s: %s",
-                                                row.getTable(),
-                                                row.key(),
-                                                "{" + StringUtils.join(row.getColumnFamilies(), ", ") + "}"));
-                Table table = Table.open(row.getTable());
+                                                rm.getTable(),
+                                                rm.key(),
+                                                "{" + StringUtils.join(rm.getColumnFamilies(), ", ") + "}"));
+                Table table = Table.open(rm.getTable());
                 tablesRecovered.add(table);
-                Collection<ColumnFamily> columnFamilies = new ArrayList<ColumnFamily>(row.getColumnFamilies());
+                Collection<ColumnFamily> columnFamilies = new ArrayList<ColumnFamily>(rm.getColumnFamilies());
                 /* remove column families that have already been flushed */
                 for (ColumnFamily columnFamily : columnFamilies)
                 {
                     int id = table.getColumnFamilyId(columnFamily.name());
                     if (!clHeader.isDirty(id) || reader.getFilePointer() < clHeader.getPosition(id))
                     {
-                        row.removeColumnFamily(columnFamily);
+                        rm.removeColumnFamily(columnFamily);
                     }
                 }
-                if (!row.isEmpty())
+                if (!rm.isEmpty())
                 {
-                    table.applyNow(row);
+                    table.applyNow(rm);
                 }
             }
             reader.close();
@@ -353,10 +353,10 @@ void recover(File[] clogs) throws IOException
      * Update the header of the commit log if a new column family
      * is encountered for the first time.
     */
-    private void maybeUpdateHeader(Row row) throws IOException
+    private void maybeUpdateHeader(RowMutation rm) throws IOException
     {
-        Table table = Table.open(row.getTable());
-        for (ColumnFamily columnFamily : row.getColumnFamilies())
+        Table table = Table.open(rm.getTable());
+        for (ColumnFamily columnFamily : rm.getColumnFamilies())
         {
             int id = table.getColumnFamilyId(columnFamily.name());
             if (!clHeader_.isDirty(id) || (clHeader_.isDirty(id) && clHeader_.getPosition(id) == 0))
@@ -396,9 +396,9 @@ public CommitLogContext call() throws Exception
      * of any problems. This way we can assume that the subsequent commit log
      * entry will override the garbage left over by the previous write.
     */
-    void add(Row row, DataOutputBuffer serializedRow) throws IOException
+    void add(RowMutation rowMutation, DataOutputBuffer serializedRow) throws IOException
     {
-        Callable<CommitLogContext> task = new LogRecordAdder(row, serializedRow);
+        Callable<CommitLogContext> task = new LogRecordAdder(rowMutation, serializedRow);
 
         try
         {
@@ -558,12 +558,12 @@ void sync() throws IOException
 
     class LogRecordAdder implements Callable<CommitLog.CommitLogContext>
     {
-        final Row row;
+        final RowMutation rowMutation;
         final Object serializedRow;
 
-        LogRecordAdder(Row row, DataOutputBuffer serializedRow)
+        LogRecordAdder(RowMutation rm, DataOutputBuffer serializedRow)
         {
-            this.row = row;
+            this.rowMutation = rm;
             this.serializedRow = serializedRow;
         }
 
@@ -576,7 +576,7 @@ void sync() throws IOException
                 currentPosition = logWriter_.getFilePointer();
                 CommitLogContext cLogCtx = new CommitLogContext(logFile_, currentPosition);
                 /* Update the header */
-                maybeUpdateHeader(row);
+                maybeUpdateHeader(rowMutation);
                 if (serializedRow instanceof DataOutputBuffer)
                 {
                     DataOutputBuffer buffer = (DataOutputBuffer) serializedRow;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
index 43e38faa..aa0b810d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
@@ -23,6 +23,7 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -33,6 +34,7 @@
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 
+import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.net.EndPoint;
 import org.apache.cassandra.net.Message;
@@ -83,7 +85,7 @@ protected RowMutation(String table, String key, Map<String, ColumnFamily> modifi
         modifications_ = modifications;
     }
 
-    public String table()
+    public String getTable()
     {
         return table_;
     }
@@ -98,6 +100,11 @@ public String key()
         return modifications_.keySet();
     }
 
+    public Collection<ColumnFamily> getColumnFamilies()
+    {
+        return modifications_.values();
+    }
+
     void addHints(String key, String host) throws IOException
     {
         QueryPath path = new QueryPath(HintedHandOffManager.HINTS_CF, key.getBytes("UTF-8"), host.getBytes("UTF-8"));
@@ -119,6 +126,17 @@ public void add(ColumnFamily columnFamily)
         modifications_.put(columnFamily.name(), columnFamily);
     }
 
+    /** should only be called by commitlog replay code */
+    public void removeColumnFamily(ColumnFamily columnFamily)
+    {
+        modifications_.remove(columnFamily.name());
+    }
+    
+    public boolean isEmpty()
+    {
+        return modifications_.isEmpty();
+    }
+
     /*
      * Specify a column name and a corresponding value for
      * the column. Column name is specified as <column family>:column.
@@ -184,18 +202,7 @@ else if (path.columnName == null)
     */
     public void apply() throws IOException
     {
-        Row row = createRow();
-        Table.open(table_).apply(row, row.getSerializedBuffer());
-    }
-
-    private Row createRow()
-    {
-        Row row = new Row(table_, key_);
-        for (String cfName : modifications_.keySet())
-        {
-            row.addColumnFamily(modifications_.get(cfName));
-        }
-        return row;
+        Table.open(table_).apply(this, this.getSerializedBuffer());
     }
 
     /*
@@ -204,7 +211,7 @@ private Row createRow()
     */
     void applyBinary() throws IOException, ExecutionException, InterruptedException
     {
-        Table.open(table_).load(createRow());
+        Table.open(table_).load(this);
     }
 
     public Message makeRowMutationMessage() throws IOException
@@ -248,6 +255,13 @@ public static RowMutation getRowMutation(String table, String key, Map<String, L
         return rm;
     }
 
+    public DataOutputBuffer getSerializedBuffer() throws IOException
+    {
+        DataOutputBuffer buffer = new DataOutputBuffer();
+        RowMutation.serializer().serialize(this, buffer);
+        return buffer;
+    }
+
     public String toString()
     {
         return "RowMutation(" +
@@ -281,7 +295,7 @@ private void freezeTheMaps(Map<String, ColumnFamily> map, DataOutputStream dos)
 
     public void serialize(RowMutation rm, DataOutputStream dos) throws IOException
     {
-        dos.writeUTF(rm.table());
+        dos.writeUTF(rm.getTable());
         dos.writeUTF(rm.key());
 
         /* serialize the modifications_ in the mutation */
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 40e6c820..4b786882 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -53,14 +53,14 @@ public void doVerb(Message message)
                 if (logger_.isDebugEnabled())
                   logger_.debug("Adding hint for " + hint);
                 /* add necessary hints to this mutation */
-                RowMutation hintedMutation = new RowMutation(Table.SYSTEM_TABLE, rm.table());
+                RowMutation hintedMutation = new RowMutation(Table.SYSTEM_TABLE, rm.getTable());
                 hintedMutation.addHints(rm.key(), hint.getHost());
                 hintedMutation.apply();
             }
 
             rm.apply();
 
-            WriteResponse response = new WriteResponse(rm.table(), rm.key(), true);
+            WriteResponse response = new WriteResponse(rm.getTable(), rm.key(), true);
             Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
             if (logger_.isDebugEnabled())
               logger_.debug(rm + " applied.  Sending response to " + message.getMessageId() + "@" + message.getFrom());
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 0230a7ed..391fe718 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -594,20 +594,20 @@ public Row getRow(QueryFilter filter) throws IOException
      * Once this happens the data associated with the individual column families
      * is also written to the column family store's memtable.
     */
-    void apply(Row row, DataOutputBuffer serializedRow) throws IOException
+    void apply(RowMutation mutation, DataOutputBuffer serializedMutation) throws IOException
     {
         HashMap<ColumnFamilyStore,Memtable> memtablesToFlush = new HashMap<ColumnFamilyStore, Memtable>(2);
 
         flusherLock_.readLock().lock();
         try
         {
-            CommitLog.open().add(row, serializedRow);
+            CommitLog.open().add(mutation, serializedMutation);
         
-            for (ColumnFamily columnFamily : row.getColumnFamilies())
+            for (ColumnFamily columnFamily : mutation.getColumnFamilies())
             {
                 Memtable memtableToFlush;
                 ColumnFamilyStore cfStore = columnFamilyStores_.get(columnFamily.name());
-                if ((memtableToFlush=cfStore.apply(row.key(), columnFamily)) != null)
+                if ((memtableToFlush=cfStore.apply(mutation.key(), columnFamily)) != null)
                     memtablesToFlush.put(cfStore, memtableToFlush);
             }
         }
@@ -621,7 +621,7 @@ void apply(Row row, DataOutputBuffer serializedRow) throws IOException
             entry.getKey().switchMemtable(entry.getValue());
     }
 
-    void applyNow(Row row) throws IOException
+    void applyNow(RowMutation row) throws IOException
     {
         String key = row.key();
         for (ColumnFamily columnFamily : row.getColumnFamilies())
@@ -647,11 +647,11 @@ public void flush(boolean fRecovery) throws IOException
     }
 
     // for binary load path.  skips commitlog.
-    void load(Row row) throws IOException
+    void load(RowMutation rowMutation) throws IOException
     {
-        String key = row.key();
+        String key = rowMutation.key();
                 
-        for (ColumnFamily columnFamily : row.getColumnFamilies())
+        for (ColumnFamily columnFamily : rowMutation.getColumnFamilies())
         {
             Collection<IColumn> columns = columnFamily.getSortedColumns();
             for (IColumn column : columns)
@@ -660,7 +660,6 @@ void load(Row row) throws IOException
                 cfStore.applyBinary(key, column.value());
             }
         }
-        row.clear();
     }
 
     public SortedSet<String> getApplicationColumnFamilies()
