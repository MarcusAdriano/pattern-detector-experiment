diff --git a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
index 8779db77..a926b862 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
@@ -51,15 +51,16 @@
   
   protected DIHCacheSupport cacheSupport = null;
 
+
   @Override
   public void init(Context context) {
     this.context = context;
     if (isFirstInit) {
       firstInit(context);
     }
+    if(cacheSupport!=null) {
     rowIterator = null;
     query = null;
-    if(cacheSupport!=null) {
       cacheSupport.initNewParent(context);
     }   
     
@@ -119,10 +120,12 @@ protected void initCache(Context context) {
         if (rowIterator.hasNext())
           return rowIterator.next();
         query = null;
+        rowIterator = null;
         return null;
       } catch (Exception e) {
         SolrException.log(log, "getNext() failed for query '" + query + "'", e);
         query = null;
+        rowIterator = null;
         wrapAndThrow(DataImportHandlerException.WARN, e);
         return null;
       }
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestMultiThreadedFileReader.java b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestMultiThreadedFileReader.java
index e69de29b..ac0ad520 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestMultiThreadedFileReader.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestMultiThreadedFileReader.java
@@ -0,0 +1,55 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.handler.dataimport;
+
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class TestMultiThreadedFileReader extends AbstractDataImportHandlerTestCase {
+  private String getConf() {
+    int numThreads = random.nextInt(8) + 2; // between 2 and 10
+    System.out.println(getFile("dih/TestMultiThreadedFileReader").getAbsolutePath());
+    return
+      "<dataConfig>" +
+      "  <dataSource name=\"files\" type=\"FileDataSource\" encoding=\"UTF-8\"/>" +
+      "  <document>" +
+      "    <entity name=\"filesdata\" processor=\"FileListEntityProcessor\" threads=\"" + numThreads + "\" rootEntity=\"false\" fileName=\"\\.xml$\" recursive=\"true\" dataSource=\"null\" baseDir=\"" + getFile("dih/TestMultiThreadedFileReader").getAbsolutePath() + "\" >" +
+      "      <entity name=\"records\" processor=\"XPathEntityProcessor\" rootEntity=\"true\" dataSource=\"files\" stream=\"true\" forEach=\"/documents/document\" url=\"${filesdata.fileAbsolutePath}\">" +
+      "        <field column=\"id\"   xpath=\"/documents/document/@id\"/>" +
+      "        <field column=\"desc\" xpath=\"/documents/document/element[@name='desc']/value\"/>" +
+      "      </entity>" +
+      "    </entity>" +
+      "  </document>" +
+      "</dataConfig>"
+    ;
+  }
+  private String[] tests = {
+      "//*[@numFound='6']"
+  };
+
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("dataimport-solrconfig.xml", "dataimport-schema.xml");
+  }
+
+  @Test
+  public void testMultiThreadedFileReader() throws Exception {
+    runFullImport(getConf());
+    assertQ(req("*:*"), tests );
+  }
+
+}
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestThreaded.java b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestThreaded.java
index 553624d4..08ece7ea 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestThreaded.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestThreaded.java
@@ -98,7 +98,7 @@ public void testCachedSingleThread_FullImport() throws Exception {
   
   @Test
   public void testCachedThread_FullImport() throws Exception {
-    int numThreads = random.nextInt(9) + 1; // between one and 10
+    int numThreads = random.nextInt(8) + 2; // between 2 and 10
     String config = getCachedConfig(random.nextBoolean(), random.nextBoolean(), numThreads);
     runFullImport(config);
   }
