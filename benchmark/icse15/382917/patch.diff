diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java
index e7d45d6b..0777b693 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java
@@ -317,7 +317,8 @@ private static int tokenizeOptionalPortNumber(java.util.StringTokenizer urlToken
     private static String tokenizeDatabase(java.util.StringTokenizer urlTokenizer,
                                            String url) throws SqlException {
         try {
-            String databaseName = urlTokenizer.nextToken(" \t\n\r\f;");
+        	// DERBY-618 - database name can contain spaces in the path
+            String databaseName = urlTokenizer.nextToken("\t\n\r\f;");
             return databaseName;
         } catch (java.util.NoSuchElementException e) {
             // A null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
index eb55d942..26b6c1b9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
@@ -57,6 +57,13 @@
 	private static String CLIENT_URL_WITH_SINGLE_QUOTES1; 
 	private static String CLIENT_URL_WITH_SINGLE_QUOTES2;
 	
+	// DERBY-618 - Database name with spaces
+	private static String DB_NAME_WITH_SPACES = "db name with spaces";
+	private static String EMBEDDED_URL_WITH_SPACES = "jdbc:derby:" + 
+										DB_NAME_WITH_SPACES + ";create=true";
+	private static String CLIENT_URL_WITH_SPACES;
+	private static String JCC_URL_WITH_SPACES;
+	
 	/**
 	 * url prefix for this framework
 	 */
@@ -88,6 +95,9 @@ else if (TestUtil.isJCCFramework())
 		CLIENT_URL_WITH_DOUBLE_QUOTES2 = "jdbc:derby://" + hostName + ":1527/\"" + DERBY_SYSTEM_HOME + File.separator + "wombat\";create=true";
 		CLIENT_URL_WITH_SINGLE_QUOTES1 = "jdbc:derby://" + hostName + ":1527/'" + DERBY_SYSTEM_HOME + File.separator + "wombat';create=true";
 		CLIENT_URL_WITH_SINGLE_QUOTES2 = "jdbc:derby://" + hostName + ":1527/'wombat';create=true";
+		
+		CLIENT_URL_WITH_SPACES = "jdbc:derby://" + hostName + ":1527/" + DB_NAME_WITH_SPACES + ";create=true"; 
+		JCC_URL_WITH_SPACES = "jdbc:derby:net://" + hostName + ":1527/" + DB_NAME_WITH_SPACES + ";create=true";
 	}
 
 	// URLS to check.  New urls need to also be added to the acceptsUrl table
@@ -132,6 +142,7 @@ public static void main(String[] args) {
 			testEmbeddedAttributes(driver);
 			testClientAttributes(driver);
 			doClientURLTest(driver);
+			testDbNameWithSpaces(driver);
 		}
 		catch (SQLException se)
 		{
@@ -378,6 +389,53 @@ private static void doClientURLTest(Driver driver){
 		}
 	}	
 	
+	/**
+	 * Tests URL with spaces in database name to check create and connect works. 
+	 * (DERBY-618). Make sure that the specified database gets created. We need 
+	 * to check this because even without the patch for DERBY-618, no exception
+	 * gets thrown when we try to connect to a database name with spaces. 
+	 * Instead, client driver extracts the database name as the string before 
+	 * the first occurence of space separator. Hence the database which gets 
+	 * created is wrong. e.g, if we specified database name as 
+	 * "db name with spaces", the database that got created by client driver 
+	 * was "db", which was wrong. The URL returned by call to 
+	 * conn.getMetaData().getURL() was also wrong.      
+	 * 
+	 * @param driver
+	 * @throws SQLException
+	 */
+	private static void testDbNameWithSpaces(Driver driver) throws SQLException {
+		System.out.println("START testDbNameWithSpaces ...");
+		
+		Connection conn = null;
+		Properties info = null;
+		String url = null;
+		
+		if(TestUtil.isEmbeddedFramework())
+			url = EMBEDDED_URL_WITH_SPACES;
+		else if(TestUtil.isDerbyNetClientFramework()) 
+			url = CLIENT_URL_WITH_SPACES;
+		else if(TestUtil.isJCCFramework()) {
+			url = JCC_URL_WITH_SPACES;
+			// JCC requires user and password
+			info =  new Properties();
+			info.put("user", "tester");
+			info.put("password", "testpass");
+		}
+		
+		conn = testConnect(driver, url, info);
+		if(conn != null)
+			System.out.println("PASSED:Connection Successful with url: " + url );
+		
+		// Check that the specified database (with spaces) is created
+		File file = new File(DERBY_SYSTEM_HOME + File.separator + DB_NAME_WITH_SPACES);
+		if(file.exists())
+			System.out.println("testDbNameWithSpaces PASSED - Database created successfully");
+		else
+			System.out.println("testDbNameWithSpaces FAILED - Database not created correctly");
+		
+	}
+	
 	/**
 	 * Make  java.sql.Driver.connect(String url, Properties info call) and print the status of
 	 * the connection.
