diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java
index c864e1e4..3033bdbc 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java
@@ -50,7 +50,10 @@
 
     public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {
       super(dir, conf);
-      this.r = r;
+      // must make a private random since our methods are
+      // called from different threads; else test failures may
+      // not be reproducible from the original seed
+      this.r = new Random(r.nextInt());
     }
 
     @Override
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
index ae032733..d9b68663 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
@@ -128,21 +128,44 @@ private static IndexReader build(Random random, TestIndex index) throws IOExcept
     doc.add(randField);
     doc.add(bodyField);
     
+    int minCount = 0;
+    int maxCount = 0;
+
+    while(true) {
+
     for (int d = minId; d <= maxId; d++) {
       idField.setValue(pad(d));
       int r = index.allowNegativeRandomInts ? random.nextInt() : random
           .nextInt(Integer.MAX_VALUE);
       if (index.maxR < r) {
         index.maxR = r;
+          maxCount = 1;
+        } else if (index.maxR == r) {
+          maxCount++;
       }
+
       if (r < index.minR) {
         index.minR = r;
+          minCount = 1;
+        } else if (r == index.minR) {
+          minCount++;
       }
       randField.setValue(pad(r));
       bodyField.setValue("body");
       writer.addDocument(doc);
     }
     
+      if (minCount == 1 && maxCount == 1) {
+        // our subclasses rely on only 1 doc having the min or
+        // max, so, we loop until we satisfy that.  it should be
+        // exceedingly rare (Yonik calculates 1 in ~429,000)
+        // times) that this loop requires more than one try:
+        break;
+      }
+
+      // try again
+    }
+    
     IndexReader ir = writer.getReader();
     writer.close();
     return ir;
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper.java
index fd9f895e..bea2c6ed 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper.java
@@ -80,7 +80,10 @@ private synchronized void init() {
 
   public MockDirectoryWrapper(Random random, Directory delegate) {
     this.delegate = delegate;
-    this.randomState = random;
+    // must make a private random since our methods are
+    // called from different threads; else test failures may
+    // not be reproducible from the original seed
+    this.randomState = new Random(random.nextInt());
     init();
   }
 
