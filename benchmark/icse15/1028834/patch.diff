diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
index 48e885d9..df075f2e 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
@@ -41,6 +41,7 @@
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.net.io.SerializerType;
 import org.apache.cassandra.net.sink.SinkManager;
+import org.apache.cassandra.service.GCInspector;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.ExpiringMap;
 import org.apache.cassandra.utils.GuidGenerator;
@@ -72,7 +73,7 @@
     private static NonBlockingHashMap<InetAddress, OutboundTcpConnectionPool> connectionManagers_ = new NonBlockingHashMap<InetAddress, OutboundTcpConnectionPool>();
     
     private static Logger logger_ = Logger.getLogger(MessagingService.class);
-    private static int LOG_DROPPED_INTERVAL_IN_MS = 1000;
+    private static int LOG_DROPPED_INTERVAL_IN_MS = 5000;
     
     public static final MessagingService instance = new MessagingService();
 
@@ -499,16 +500,21 @@ public static int incrementDroppedMessages(StorageService.Verb verb)
                
     private static void logDroppedMessages()
     {
+        boolean logTpstats = false;
         for (Map.Entry<StorageService.Verb, AtomicInteger> entry : droppedMessages.entrySet())
         {
             AtomicInteger dropped = entry.getValue();
             if (dropped.get() > 0)
             {
+                logTpstats = true;
                 logger_.warn(String.format("Dropped %s %s messages in the last %sms",
                                            dropped, entry.getKey(), LOG_DROPPED_INTERVAL_IN_MS));
             }
             dropped.set(0);
         }
+
+        if (logTpstats)
+            GCInspector.instance.logStats();
     }
 
     private class SocketThread extends Thread
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/GCInspector.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/GCInspector.java
index 45b29512..33721fd2 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/GCInspector.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/GCInspector.java
@@ -132,23 +132,25 @@ else if (logger.isDebugEnabled())
                 logger.debug(st);
             if (gcw.getDuration() > MIN_DURATION_TPSTATS)
             {
-                try
-                {
                     logStats();
                 }
-                catch (MalformedObjectNameException e)
-                {
-                    throw new RuntimeException(e);
-                }
-            }
         }
     }
 
-    private void logStats() throws MalformedObjectNameException
+    public void logStats()
     {
         // everything from o.a.c.concurrent
         logger.info(String.format("%-25s%10s%10s", "Pool Name", "Active", "Pending"));
-        for (ObjectName objectName : server.queryNames(new ObjectName("org.apache.cassandra.concurrent:type=*"), null))
+        ObjectName concurrent = null;
+        try
+        {
+            concurrent = new ObjectName("org.apache.cassandra.concurrent:type=*");
+        }
+        catch (MalformedObjectNameException e)
+        {
+            throw new RuntimeException(e);
+        }
+        for (ObjectName objectName : server.queryNames(concurrent, null))
         {
             String poolName = objectName.getKeyProperty("type");
             IExecutorMBean threadPoolProxy = JMX.newMBeanProxy(server, objectName, IExecutorMBean.class);
