diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractRackAwareSnitch.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractRackAwareSnitch.java
index d8af2f7b..11d8c25d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractRackAwareSnitch.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractRackAwareSnitch.java
@@ -27,8 +27,7 @@
 
 /**
  * An endpoint snitch tells Cassandra information about network topology that it can use to route
- * requests more efficiently (with "sortByProximity").  Of the abstract methods, isOnSameRack
- * and isInSameDataCenter are always required; getLocation is only used by DatacenterShardStrategy.
+ * requests more efficiently.
  */
 public abstract class AbstractRackAwareSnitch implements IEndpointSnitch
 {
@@ -48,13 +47,25 @@
      */
     abstract public String getDatacenter(InetAddress endpoint) throws UnknownHostException;
 
-    public List<InetAddress> getSortedListByProximity(final InetAddress address, Collection<InetAddress> unsortedAddress)
+    /**
+     * Sorts the <tt>Collection</tt> of node addresses by proximity to the given address
+     * @param address the address to sort by proximity to
+     * @param addresses the nodes to sort
+     * @return a new sorted <tt>List</tt>
+     */
+    public List<InetAddress> getSortedListByProximity(final InetAddress address, Collection<InetAddress> addresses)
     {
-        List<InetAddress> preferred = new ArrayList<InetAddress>(unsortedAddress);
+        List<InetAddress> preferred = new ArrayList<InetAddress>(addresses);
         sortByProximity(address, preferred);
         return preferred;
     }
 
+    /**
+     * Sorts the <tt>List</tt> of node addresses by proximity to the given address
+     * @param address the address to sort the proximity by
+     * @param addresses the nodes to sort
+     * @return the sorted <tt>List</tt>
+     */
     public List<InetAddress> sortByProximity(final InetAddress address, List<InetAddress> addresses)
     {
         Collections.sort(addresses, new Comparator<InetAddress>()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
index 78f65d4a..4ded4177 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
@@ -35,9 +35,7 @@
 import org.apache.cassandra.utils.FBUtilities;
 
 /**
- * This class contains a helper method that will be used by
- * all abstraction that implement the IReplicaPlacementStrategy
- * interface.
+ * A abstract parent for all replication strategies.
 */
 public abstract class AbstractReplicationStrategy
 {
@@ -59,18 +57,18 @@
      */
     public abstract ArrayList<InetAddress> getNaturalEndpoints(Token token, TokenMetadata metadata, String table);
     
-    public WriteResponseHandler getWriteResponseHandler(int blockFor, ConsistencyLevel consistency_level, String table)
+    public ArrayList<InetAddress> getNaturalEndpoints(Token token, String table)
     {
-        return new WriteResponseHandler(blockFor, table);
+        return getNaturalEndpoints(token, tokenMetadata_, table);
     }
 
-    public ArrayList<InetAddress> getNaturalEndpoints(Token token, String table)
+    public WriteResponseHandler getWriteResponseHandler(int blockFor, ConsistencyLevel consistency_level, String table)
     {
-        return getNaturalEndpoints(token, tokenMetadata_, table);
+        return new WriteResponseHandler(blockFor, table);
     }
     
     /**
-     * returns multimap of {live destination: ultimate targets}, where if target is not the same
+     * returns <tt>Multimap</tt> of {live destination: ultimate targets}, where if target is not the same
      * as the destination, it is a "hinted" write, and will need to be sent to
      * the ultimate target when it becomes alive again.
      */
@@ -143,9 +141,10 @@ public WriteResponseHandler getWriteResponseHandler(int blockFor, ConsistencyLev
     }
 
     /*
-     NOTE: this is pretty inefficient. also the inverse (getRangeAddresses) below.
-     this is fine as long as we don't use this on any critical path.
-     (fixing this would probably require merging tokenmetadata into replicationstrategy, so we could cache/invalidate cleanly.)
+     * NOTE: this is pretty inefficient. also the inverse (getRangeAddresses) below.
+     * this is fine as long as we don't use this on any critical path.
+     * (fixing this would probably require merging tokenmetadata into replicationstrategy,
+     * so we could cache/invalidate cleanly.)
      */
     public Multimap<InetAddress, Range> getAddressRanges(TokenMetadata metadata, String table)
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterShardStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterShardStrategy.java
index 321f45b7..4a1130a5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterShardStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterShardStrategy.java
@@ -36,10 +36,14 @@
 import org.apache.cassandra.thrift.ConsistencyLevel;
 
 /**
- * This Stategy is little diffrent than the Rack aware Statergy. If there is
- * replication factor is N. We will make sure that (N-1)%2 of the nodes are in
- * other Datacenter.... For example if we have 5 nodes this stategy will make
- * sure to make 2 copies out of 5 in other dataceneter.
+ * This Replication Strategy takes a property file that gives the intended
+ * replication factor in each datacenter.  The sum total of the datacenter
+ * replication factor values should be equal to the keyspace replication
+ * factor.
+ * <p>
+ * So for example, if the keyspace replication factor is 6, the
+ * datacenter replication factors could be 3, 2, and 1 - so 3 replicas in
+ * one datacenter, 2 in another, and 1 in another - totalling 6.
  * <p/>
  * This class also caches the Endpoints and invalidates the cache if there is a
  * change in the number of tokens.
@@ -65,10 +69,6 @@
         return new HashMap<String, Integer>(quorumRepFactor);
     }
 
-    /**
-     * This Method will get the required information of the Endpoint from the
-     * DataCenterEndpointSnitch and poopulates this singleton class.
-     */
     private synchronized void loadEndpoints(TokenMetadata metadata) throws UnknownHostException
     {
         this.tokens = new ArrayList<Token>(metadata.sortedTokens());
@@ -206,7 +206,7 @@ public DatacenterShardStrategy(TokenMetadata tokenMetadata, IEndpointSnitch snit
             }
 
             /*
-            * If we found N number of nodes we are good. This loop wil just
+            * If we found N number of nodes we are good. This loop will just
             * exit. Otherwise just loop through the list and add until we
             * have N nodes.
             */
@@ -232,7 +232,7 @@ public DatacenterShardStrategy(TokenMetadata tokenMetadata, IEndpointSnitch snit
      * This method will generate the QRH object and returns. If the Consistency
      * level is DCQUORUM then it will return a DCQRH with a map of local rep
      * factor alone. If the consistency level is DCQUORUMSYNC then it will
-     * return a DCQRH with a map of all the DC rep facor.
+     * return a DCQRH with a map of all the DC rep factor.
      */
     @Override
     public WriteResponseHandler getWriteResponseHandler(int blockFor, ConsistencyLevel consistency_level, String table)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/IEndpointSnitch.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/IEndpointSnitch.java
index 9084ef3c..1bcf4a26 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/IEndpointSnitch.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/IEndpointSnitch.java
@@ -30,19 +30,17 @@
  * This interface helps determine location of node in the data center relative to another node.
  * Give a node A and another node B it can tell if A and B are on the same rack or in the same
  * data center.
- *
- * Not all methods will be germate to all implementations.  Throw UnsupportedOperation as necessary.
  */
 
 public interface IEndpointSnitch
 {
     /**
-     * returns a new List<InetAddress> sorted by proximity to the given endpoint
+     * returns a new <tt>List</tt> sorted by proximity to the given endpoint
      */
     public List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress);
 
     /**
-     * This method will sort the List<InetAddress> according to the proximity of the given address.
+     * This method will sort the <tt>List</tt> by proximity to the given address.
      */
     public List<InetAddress> sortByProximity(InetAddress address, List<InetAddress> addresses);
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
index f1ef16c2..12ded391 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
@@ -36,13 +36,11 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * PropertyFileSnitch
- *
- * PropertyFileSnitch is used by Digg to determine if two IP's are in the same
- * datacenter or on the same rack.
- *
+ * Used to determine if two IP's are in the same datacenter or on the same rack.
+ * <p/>
+ * Based on a properties file configuration.
  */
-public class PropertyFileSnitch extends RackInferringSnitch implements PropertyFileSnitchMBean {
+public class PropertyFileSnitch extends AbstractRackAwareSnitch implements PropertyFileSnitchMBean {
     /**
      * A list of properties with keys being host:port and values being datacenter:rack
      */
@@ -117,6 +115,9 @@ public String getRack(InetAddress endpoint) {
         return getEndpointInfo(endpoint)[1];
     }
 
+    /**
+     * @return the <tt>String</tt> representation of the configuration
+     */
     public String displayConfiguration() {
         StringBuffer configurationString = new StringBuffer("Current rack configuration\n=================\n");
         for (Object key: hostProperties.keySet()) {
@@ -127,6 +128,9 @@ public String displayConfiguration() {
         return configurationString.toString();
     }
 
+    /**
+     * Reloads the configuration from the file
+     */
     public void reloadConfiguration() throws ConfigurationException
     {
         ClassLoader loader = PropertyFileSnitch.class.getClassLoader();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java
index 39ee0458..7c2e92ff 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java
@@ -28,11 +28,11 @@
 import java.net.InetAddress;
 
 /*
- * This class returns the nodes responsible for a given
- * key but does respects rack awareness. It makes a best
- * effort to get a node from a different data center and
- * a node in a different rack in the same datacenter as
- * the primary.
+ * This Replication Strategy returns the nodes responsible for a given
+ * key but respects rack awareness. It places one replica in a
+ * different data center from the first (if there is any such data center),
+ * and remaining replicas in different racks in the same datacenter as
+ * the first.
  */
 public class RackAwareStrategy extends AbstractReplicationStrategy
 {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/RackInferringSnitch.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/RackInferringSnitch.java
index b849b758..337ea087 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/RackInferringSnitch.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/RackInferringSnitch.java
@@ -23,7 +23,7 @@
 import java.util.*;
 
 /**
- * A simple endpoint snitch implementation that assumes rack and dc information is encoded
+ * A simple endpoint snitch implementation that assumes datacenter and rack information is encoded
  * in the 2nd and 3rd octets of the ip address, respectively.
  */
 public class RackInferringSnitch extends AbstractRackAwareSnitch
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
index 6537401c..a4efa85c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
@@ -42,7 +42,7 @@
     // Now suppose node B bootstraps between A and C at the same time. Its pending ranges would be C-E, E-A and A-B.
     // Now both nodes have pending range E-A in their list, which will cause pending range collision
     // even though we're only talking about replica range, not even primary range. The same thing happens
-    // for any nodes that boot simultaneously between same two nodes. For this we cannot simply make pending ranges a multimap,
+    // for any nodes that boot simultaneously between same two nodes. For this we cannot simply make pending ranges a <tt>Multimap</tt>,
     // since that would make us unable to notice the real problem of two nodes trying to boot using the same token.
     // In order to do this properly, we need to know what tokens are booting at any time.
     private BiMap<Token, InetAddress> bootstrapTokens;
@@ -395,15 +395,15 @@ public InetAddress getSuccessor(InetAddress endpoint)
         return bootstrapTokens;
     }
 
-    /** caller should not modify leavigEndpoints */
+    /** caller should not modify leavingEndpoints */
     public Set<InetAddress> getLeavingEndpoints()
     {
         return leavingEndpoints;
     }
 
     /**
-     * iterator over the Tokens in the given ring, starting with the token for the node owning start
-     * (which does not have to be a Token in the ring)
+     * <tt>Iterator</tt> over the <tt>Token</tt>s in the given ring, starting with the token for the node owning start
+     * (which does not have to be a <tt>Token</tt> in the ring)
      */
     public static Iterator<Token> ringIterator(final List ring, Token start)
     {
