diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 7351a157..12d67548 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -117,6 +117,7 @@
         try
         {
             configFileName_ = System.getProperty("storage-config") + System.getProperty("file.separator") + "storage-conf.xml";
+            if (logger_.isDebugEnabled())
             logger_.debug("Loading settings from " + configFileName_);
             XMLUtils xmlUtils = new XMLUtils(configFileName_);
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
index d3db8bdb..8b8b48df 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
@@ -75,6 +75,7 @@ boolean isThresholdViolated()
     {
         if (currentSize_.get() >= threshold_ || columnFamilies_.size() > 50000)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("CURRENT SIZE:" + currentSize_.get());
         	return true;
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
index fae2da9d..fb048fc2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
@@ -76,6 +76,7 @@ public void run()
             }
             catch (IOException e)
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug( LogUtil.throwableToString(e) );
             }        	
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java
index ad622e8f..0b31917d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java
@@ -161,6 +161,7 @@ public void addCallout(String callout, String script) throws IOException
         File file = new File(scriptFile);
         if ( file.exists() )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Deleting the old script file ...");
             file.delete();
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index 2862de51..7fe13d20 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -220,6 +220,7 @@ public void addColumn(String name, byte[] value, long timestamp, boolean deleted
 
     void clear()
     {
+        if (logger_.isDebugEnabled())
         logger_.debug("clearing");
     	columns_.clear();
     	size_.set(0);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 92db6fdd..3c56aceb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -285,14 +285,17 @@ boolean forceCompaction(List<Range> ranges, EndPoint target, long skip, List<Str
             {
                 result = futurePtr.get();
             }
+            if (logger_.isDebugEnabled())
             logger_.debug("Done forcing compaction ...");
         }
         catch (ExecutionException ex)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug(LogUtil.throwableToString(ex));
         }
         catch (InterruptedException ex2)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug(LogUtil.throwableToString(ex2));
         }
         return result;
@@ -744,6 +747,7 @@ void storeLocation(SSTable sstable)
            not enough to bother with. */
         if (ssTableCount >= MinorCompactionManager.COMPACTION_THRESHOLD)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Submitting " + columnFamily_ + " for compaction");
             MinorCompactionManager.instance().submit(this);
         }
@@ -978,6 +982,7 @@ void doCleanup(String file) throws IOException
         Map<EndPoint, List<Range>> endPointtoRangeMap = StorageService.instance().constructEndPointToRangesMap();
         myRanges = endPointtoRangeMap.get(StorageService.getLocalStorageEndPoint());
         doFileAntiCompaction(files, myRanges, null, newFiles);
+        if (logger_.isDebugEnabled())
         logger_.debug("Original file : " + file + " of size " + new File(file).length());
         lock_.writeLock().lock();
         try
@@ -985,6 +990,7 @@ void doCleanup(String file) throws IOException
             ssTables_.remove(file);
             for (String newfile : newFiles)
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug("New file : " + newfile + " of size " + new File(newfile).length());
                 assert newfile != null;
                 ssTables_.put(newfile, SSTable.open(newfile, StorageService.getPartitioner()));
@@ -1044,6 +1050,7 @@ boolean doFileAntiCompaction(List<String> files, List<Range> ranges, EndPoint ta
         DataOutputBuffer bufOut = new DataOutputBuffer();
         int expectedBloomFilterSize = SSTable.getApproximateKeyCount(files);
         expectedBloomFilterSize = (expectedBloomFilterSize > 0) ? expectedBloomFilterSize : SSTable.indexInterval();
+        if (logger_.isDebugEnabled())
         logger_.debug("Expected bloom filter size : " + expectedBloomFilterSize);
         List<ColumnFamily> columnFamilies = new ArrayList<ColumnFamily>();
 
@@ -1184,6 +1191,7 @@ boolean doFileAntiCompaction(List<String> files, List<Range> ranges, EndPoint ta
 
         logger_.debug("Total time taken for range split   ..."
                       + (System.currentTimeMillis() - startTime));
+        if (logger_.isDebugEnabled())
         logger_.debug("Total bytes Read for range split  ..." + totalBytesRead);
         logger_.debug("Total bytes written for range split  ..."
                       + totalBytesWritten + "   Total keys read ..." + totalkeysRead);
@@ -1241,6 +1249,7 @@ private int doFileCompaction(List<String> files, int minBufferSize) throws IOExc
         DataOutputBuffer bufOut = new DataOutputBuffer();
         int expectedBloomFilterSize = SSTable.getApproximateKeyCount(files);
         expectedBloomFilterSize = (expectedBloomFilterSize > 0) ? expectedBloomFilterSize : SSTable.indexInterval();
+        if (logger_.isDebugEnabled())
         logger_.debug("Expected bloom filter size : " + expectedBloomFilterSize);
         List<ColumnFamily> columnFamilies = new ArrayList<ColumnFamily>();
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
index 01d5747d..3b8e0fe6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
@@ -464,6 +464,7 @@ private void discard(CommitLog.CommitLogContext cLogCtx, int id) throws IOExcept
                 oldCommitLogHeader.and(commitLogHeader);
                 if(oldCommitLogHeader.isSafeToDelete())
                 {
+                	if (logger_.isDebugEnabled())
                 	logger_.debug("Deleting commit log:"+ oldFile);
                     FileUtils.deleteAsync(oldFile);
                     listOfDeletedFiles.add(oldFile);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index 73ec4a1b..ca1a5edc 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -147,6 +147,7 @@ private static void deleteHintedData(String tableName, String key) throws IOExce
     /** hintStore must be the hints columnfamily from the system table */
     private static void deliverAllHints(ColumnFamilyStore hintStore) throws DigestMismatchException, IOException, InvalidRequestException, TimeoutException
     {
+        if (logger_.isDebugEnabled())
         logger_.debug("Started deliverAllHints");
 
         // 1. Scan through all the keys that we need to handoff
@@ -186,11 +187,13 @@ private static void deliverAllHints(ColumnFamilyStore hintStore) throws DigestMi
         hintStore.forceFlush();
         hintStore.forceCompaction(null, null, 0, null);
 
+        if (logger_.isDebugEnabled())
         logger_.debug("Finished deliverAllHints");
     }
 
     private static void deliverHintsToEndpoint(EndPoint endPoint) throws IOException, DigestMismatchException, InvalidRequestException, TimeoutException
     {
+        if (logger_.isDebugEnabled())
         logger_.debug("Started hinted handoff for endPoint " + endPoint.getHost());
 
         // 1. Scan through all the keys that we need to handoff
@@ -223,6 +226,7 @@ private static void deliverHintsToEndpoint(EndPoint endPoint) throws IOException
             }
         }
 
+        if (logger_.isDebugEnabled())
         logger_.debug("Finished hinted handoff for endpoint " + endPoint.getHost());
     }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java
index 5f0aecbb..2e223d6c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java
@@ -84,6 +84,7 @@ public static MinorCompactionManager instance()
         public Boolean call()
         {
         	boolean result;
+            if (logger_.isDebugEnabled())
             logger_.debug("Started  compaction ..."+columnFamilyStore_.columnFamily_);
             try
             {
@@ -93,6 +94,7 @@ public Boolean call()
             {
                 throw new RuntimeException(e);
             }
+            if (logger_.isDebugEnabled())
             logger_.debug("Finished compaction ..."+columnFamilyStore_.columnFamily_);
             return result;
         }
@@ -111,6 +113,7 @@ public Boolean call()
 
         public void run()
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Started  Major compaction for " + columnFamilyStore_.columnFamily_);
             try
             {
@@ -120,6 +123,7 @@ public void run()
             {
                 throw new RuntimeException(e);
             }
+            if (logger_.isDebugEnabled())
             logger_.debug("Finished Major compaction for " + columnFamilyStore_.columnFamily_);
         }
     }
@@ -135,6 +139,7 @@ public void run()
 
         public void run()
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Started  compaction ..."+columnFamilyStore_.columnFamily_);
             try
             {
@@ -144,6 +149,7 @@ public void run()
             {
                 throw new RuntimeException(e);
             }
+            if (logger_.isDebugEnabled())
             logger_.debug("Finished compaction ..."+columnFamilyStore_.columnFamily_);
         }
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
index 233ec00f..2e6563df 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
@@ -95,6 +95,7 @@ public void doVerb(Message message)
             System.arraycopy(readCtx.bufOut_.getData(), 0, bytes, 0, bytes.length);
 
             Message response = message.getReply(StorageService.getLocalStorageEndPoint(), bytes);
+            if (logger_.isDebugEnabled())
             logger_.debug("Read key " + readCommand.key + "; sending response to " + message.getMessageId() + "@" + message.getFrom());
             MessagingService.getMessagingInstance().sendOneWay(response, message.getFrom());
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 7cae3a97..41b52440 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -61,6 +61,7 @@ public void doVerb(Message message)
         try
         {
             RowMutation rm = RowMutation.serializer().deserialize(rowMutationCtx.buffer_);
+            if (logger_.isDebugEnabled())
             logger_.debug("Applying " + rm);
 
             /* Check if there were any hints in this message */
@@ -68,6 +69,7 @@ public void doVerb(Message message)
             if ( hintedBytes != null && hintedBytes.length > 0 )
             {
             	EndPoint hint = EndPoint.fromBytes(hintedBytes);
+                if (logger_.isDebugEnabled())
                 logger_.debug("Adding hint for " + hint);
                 /* add necessary hints to this mutation */
                 RowMutation hintedMutation = new RowMutation(Table.SYSTEM_TABLE, rm.table());
@@ -82,6 +84,7 @@ public void doVerb(Message message)
 
             WriteResponse response = new WriteResponse(rm.table(), rm.key(), true);
             Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
+            if (logger_.isDebugEnabled())
             logger_.debug(rm + " applied.  Sending response to " + message.getMessageId() + "@" + message.getFrom());
             MessagingService.getMessagingInstance().sendOneWay(responseMessage, message.getFrom());
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
index c8df0589..f6afd93f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
@@ -52,6 +52,7 @@ public static void updateToken(Token token) throws IOException
         /* create the "Token" whose value is the new token. */
         IColumn tokenColumn = new Column(SystemTable.TOKEN, p.getTokenFactory().toByteArray(token), oldTokenColumnTimestamp + 1);
         /* replace the old "Token" column with this new one. */
+        if (logger_.isDebugEnabled())
         logger_.debug("Replacing old token " + p.getTokenFactory().fromByteArray(cf.getColumn(SystemTable.TOKEN).value()) + " with " + token);
         RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, LOCATION_KEY);
         cf.addColumn(tokenColumn);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 483d0710..2553352e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -98,6 +98,7 @@ public void add(String cf, int id)
         
         public void add(String cf, int id, String type)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("adding " + cf + " as " + id);
             assert !idCfMap_.containsKey(id);
             cfIdMap_.put(cf, id);
@@ -192,6 +193,7 @@ public void onStreamCompletion(String host, StreamContextManager.StreamContext s
             }
             
             EndPoint to = new EndPoint(host, DatabaseDescriptor.getStoragePort());
+            if (logger_.isDebugEnabled())
             logger_.debug("Sending a bootstrap terminate message with " + streamStatus + " to " + to);
             /* Send a StreamStatusMessage object which may require the source node to re-stream certain files. */
             StreamContextManager.StreamStatusMessage streamStatusMessage = new StreamContextManager.StreamStatusMessage(streamStatus);
@@ -234,6 +236,7 @@ public void doVerb(Message message)
                     String newFileName = fileNames.get( peices[1] + "-" + peices[2] );
                     
                     String file = DatabaseDescriptor.getDataFileLocation() + File.separator + newFileName + "-Data.db";
+                    if (logger_.isDebugEnabled())
                     logger_.debug("Received Data from  : " + message.getFrom() + " " + streamContext.getTargetFile() + " " + file);
                     streamContext.setTargetFile(file);
                     addStreamContext(message.getFrom().getHost(), streamContext, streamStatus);                                            
@@ -278,6 +281,7 @@ public void doVerb(Message message)
                 Map<String, ColumnFamilyStore> columnFamilyStores = table.getColumnFamilyStores();
 
                 ColumnFamilyStore cfStore = columnFamilyStores.get(peices[1]);
+                if (logger_.isDebugEnabled())
                 logger_.debug("Generating file name for " + distinctEntry + " ...");
                 fileNames.put(distinctEntry, cfStore.getNextFileName());
             }
@@ -287,6 +291,7 @@ public void doVerb(Message message)
 
         private void addStreamContext(String host, StreamContextManager.StreamContext streamContext, StreamContextManager.StreamStatus streamStatus)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Adding stream context " + streamContext + " for " + host + " ...");
             StreamContextManager.addStreamContext(host, streamContext, streamStatus);
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index ea3c0cbd..b34809a4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -76,6 +76,7 @@ public void run()
 
             Set<Token> oldTokens = new HashSet<Token>( tokenToEndPointMap.keySet() );
             Range[] oldRanges = StorageService.instance().getAllRanges(oldTokens);
+            if (logger_.isDebugEnabled())
             logger_.debug("Total number of old ranges " + oldRanges.length);
             /* 
              * Find the ranges that are split. Maintain a mapping between
@@ -113,6 +114,7 @@ public void run()
             Collections.addAll( oldTokens, tokens_ );
             Range[] newRanges = StorageService.instance().getAllRanges(oldTokens);
 
+            if (logger_.isDebugEnabled())
             logger_.debug("Total number of new ranges " + newRanges.length);
             /* Calculate the list of nodes that handle the new ranges */
             Map<Range, List<EndPoint>> newRangeToEndPointMap = StorageService.instance().constructRangeToEndPointMap(newRanges);
@@ -123,6 +125,7 @@ public void run()
         }
         catch ( Throwable th )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug( LogUtil.throwableToString(th) );
         }
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
index 46038823..62c735f5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataVerbHandler.java
@@ -46,6 +46,7 @@
     
     public void doVerb(Message message)
     {
+        if (logger_.isDebugEnabled())
         logger_.debug("Received a BootstrapMetadataMessage from " + message.getFrom());
         byte[] body = message.getMessageBody();
         DataInputBuffer bufIn = new DataInputBuffer();
@@ -89,6 +90,7 @@ private void doTransfer(EndPoint target, List<Range> ranges) throws IOException
     {
         if ( ranges.size() == 0 )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("No ranges to give scram ...");
             return;
         }
@@ -114,8 +116,10 @@ private void doTransfer(EndPoint target, List<Range> ranges) throws IOException
         for ( String tName : tables )
         {
             Table table = Table.open(tName);
+            if (logger_.isDebugEnabled())
             logger_.debug("Flushing memtables ...");
             table.flush(false);
+            if (logger_.isDebugEnabled())
             logger_.debug("Forcing compaction ...");
             /* Get the counting bloom filter for each endpoint and the list of files that need to be streamed */
             List<String> fileList = new ArrayList<String>();
@@ -141,6 +145,7 @@ private void doHandoff(EndPoint target, List<String> fileList) throws IOExceptio
         for ( File file : files )
         {
             streamContexts[i] = new StreamContextManager.StreamContext(file.getAbsolutePath(), file.length());
+            if (logger_.isDebugEnabled())
             logger_.debug("Stream context metadata " + streamContexts[i]);
             ++i;
         }
@@ -152,8 +157,10 @@ private void doHandoff(EndPoint target, List<String> fileList) throws IOExceptio
             /* Send the bootstrap initiate message */
             BootstrapInitiateMessage biMessage = new BootstrapInitiateMessage(streamContexts);
             Message message = BootstrapInitiateMessage.makeBootstrapInitiateMessage(biMessage);
+            if (logger_.isDebugEnabled())
             logger_.debug("Sending a bootstrap initiate message to " + target + " ...");
             MessagingService.getMessagingInstance().sendOneWay(message, target);                
+            if (logger_.isDebugEnabled())
             logger_.debug("Waiting for transfer to " + target + " to complete");
             StreamManager.instance(target).waitForStreamCompletion();
             logger_.debug("Done with transfer to " + target);  
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolHelper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolHelper.java
index cbd5ecbb..e49aeea6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolHelper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolHelper.java
@@ -111,6 +111,7 @@
         Set<Range> oldRangeSet = oldRangeToEndPointMap.keySet();
         for(Range range : oldRangeSet)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Attempting to figure out the dudes who are bumped out for " + range + " ...");
             List<EndPoint> oldEndPoints = oldRangeToEndPointMap.get(range);
             List<EndPoint> newEndPoints = newRangeToEndPointMap.get(range);
@@ -130,6 +131,7 @@
             {
                 logger_.warn("Trespassing - scram");
             }
+            if (logger_.isDebugEnabled())
             logger_.debug("Done figuring out the dudes who are bumped out for range " + range + " ...");
         }
         for ( Range range : oldRangeSet )
@@ -200,6 +202,7 @@ protected static void assignWork(Map<Range, List<BootstrapSourceTarget>> rangesW
             /* only send the message to the nodes that are in the filter. */
             if ( filters != null && filters.size() > 0 && !filters.contains(source) )
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug("Filtering endpoint " + source + " as source ...");
                 continue;
             }
@@ -218,6 +221,7 @@ protected static void assignWork(Map<Range, List<BootstrapSourceTarget>> rangesW
             BootstrapMetadataMessage bsMetadataMessage = new BootstrapMetadataMessage(bsmdList.toArray( new BootstrapMetadata[0] ) );
             /* Send this message to the source to do his shit. */
             Message message = BootstrapMetadataMessage.makeBootstrapMetadataMessage(bsMetadataMessage); 
+            if (logger_.isDebugEnabled())
             logger_.debug("Sending the BootstrapMetadataMessage to " + source);
             MessagingService.getMessagingInstance().sendOneWay(message, source);
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java
index 97e06527..e7e3e6fd 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java
@@ -70,6 +70,7 @@ public void run()
             
             Set<Token> oldTokens = new HashSet<Token>( tokenToEndPointMap.keySet() );
             Range[] oldRanges = StorageService.instance().getAllRanges(oldTokens);
+            if (logger_.isDebugEnabled())
             logger_.debug("Total number of old ranges " + oldRanges.length);
             /* Calculate the list of nodes that handle the old ranges */
             Map<Range, List<EndPoint>> oldRangeToEndPointMap = StorageService.instance().constructRangeToEndPointMap(oldRanges);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index f5331a62..08b050c0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -927,6 +927,7 @@ public void stop()
     public void doVerb(Message message)
     {
         EndPoint from = message.getFrom();
+        if (logger_.isDebugEnabled())
         logger_.debug("Received a JoinMessage from " + from);
 
         byte[] bytes = message.getMessageBody();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java
index 8ee95b61..60da10bf 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java
@@ -71,6 +71,7 @@ public static int getApproximateKeyCount(List<String> dataFiles)
             assert sstable != null;
             int indexKeyCount = sstable.getIndexPositions().size();
             count = count + (indexKeyCount + 1) * indexInterval_;
+            if (logger_.isDebugEnabled())
             logger_.debug("index size for bloom filter calc for file  : " + dataFileName + "   : " + count);
         }
 
@@ -116,6 +117,7 @@ public static synchronized SSTable open(String dataFileName, IPartitioner partit
             long start = System.currentTimeMillis();
             sstable.loadIndexFile();
             sstable.loadBloomFilter();
+            if (logger_.isDebugEnabled())
             logger_.debug("INDEX LOAD TIME for "  + dataFileName + ": " + (System.currentTimeMillis() - start) + " ms.");
 
             openedFiles.put(dataFileName, sstable);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java
index df63db6f..7fed493d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/RackAwareStrategy.java
@@ -104,6 +104,7 @@ public RackAwareStrategy(TokenMetadata tokenMetadata, IPartitioner partitioner,
             }
             catch (UnknownHostException e)
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug(LogUtil.throwableToString(e));
             }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
index a8dcac23..fced3b43 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
@@ -57,6 +57,7 @@ public void run()
             File file = new File(file_);             
             connection.stream(file, startPosition_, total_);
             MessagingService.setStreamingMode(false);
+            if (logger_.isDebugEnabled())
             logger_.debug("Done streaming " + file);
         }            
         catch ( SocketException se )
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index a63e5ef7..bec4631a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -248,6 +248,7 @@ public void listen(EndPoint localEp) throws IOException
     public void listenUDP(EndPoint localEp)
     {
         UdpConnection connection = new UdpConnection();
+        if (logger_.isDebugEnabled())
         logger_.debug("Starting to listen on " + localEp);
         try
         {
@@ -535,6 +536,7 @@ public static void shutdown()
             verbHandlers_.clear();                                    
             bShutdown_ = true;
         }
+        if (logger_.isDebugEnabled())
         logger_.debug("Shutdown invocation complete.");
     }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
index e637e31a..2913cf8a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
@@ -34,6 +34,7 @@ public void doVerb(Message message)
         IAsyncCallback cb = MessagingService.getRegisteredCallback(messageId);
         if ( cb != null )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Processing response on a callback from " + message.getMessageId() + "@" + message.getFrom());
             cb.response(message);
         }
@@ -42,6 +43,7 @@ public void doVerb(Message message)
             IAsyncResult ar = MessagingService.getAsyncResult(messageId);
             if ( ar != null )
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug("Processing response on an async result from " + message.getMessageId() + "@" + message.getFrom());
                 ar.result(message);
             }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java
index 739178dc..4b8ec7c8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java
@@ -138,6 +138,7 @@ public void read(SelectionKey key)
             SocketAddress sa = socketChannel_.receive(buffer);
             if ( sa == null )
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug("*** No datagram packet was available to be read ***");
                 return;
             }            
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
index 99f6ffad..9c69d1cc 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
@@ -57,6 +57,7 @@ private void createFileChannel() throws IOException
     {
         if ( fc_ == null )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Creating file for " + streamContext_.getTargetFile());
             FileOutputStream fos = new FileOutputStream( streamContext_.getTargetFile(), true );
             fc_ = fos.getChannel();            
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
index 97a99b2f..2a83c715 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
@@ -92,6 +92,7 @@ private void doReadRepair() throws IOException
 			IAsyncCallback responseHandler = new DataRepairHandler(ConsistencyManager.this.replicas_.size(), readResponseResolver);	
             ReadCommand readCommand = constructReadMessage(false);
             Message message = readCommand.makeReadMessage();
+            if (logger_.isDebugEnabled())
             logger_.debug("Performing read repair for " + readCommand_.key + " to " + message.getMessageId() + "@[" + StringUtils.join(replicas_, ", ") + "]");
 			MessagingService.getMessagingInstance().sendRR(message, replicas_.toArray(new EndPoint[replicas_.size()]), responseHandler);
 		}
@@ -111,6 +112,7 @@ private void doReadRepair() throws IOException
 		
 		public void response(Message message)
 		{
+			if (logger_.isDebugEnabled())
 			logger_.debug("Received responses in DataRepairHandler : " + message.toString());
 			responses_.add(message);
 			if ( responses_.size() == majority_ )
@@ -162,6 +164,7 @@ public void run()
 		try
 		{
 			Message message = readCommandDigestOnly.makeReadMessage();
+            if (logger_.isDebugEnabled())
             logger_.debug("Reading consistency digest for " + readCommand_.key + " from " + message.getMessageId() + "@[" + StringUtils.join(replicas_, ", ") + "]");
             MessagingService.getMessagingInstance().sendRR(message, replicas_.toArray(new EndPoint[replicas_.size()]), new DigestResponseHandler());
 		}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java
index 25403cce..82b1cd6b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java
@@ -36,6 +36,7 @@ public void run()
         {
             long diskSpace = FileUtils.getUsedDiskSpace();                
             String diskUtilization = FileUtils.stringifyFileSize(diskSpace);
+            if (logger_.isDebugEnabled())
             logger_.debug("Disseminating load info ...");
             Gossiper.instance().addApplicationState(LoadDisseminator.loadInfo_, new ApplicationState(diskUtilization));
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/MultiQuorumResponseHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/MultiQuorumResponseHandler.java
index 5a9fb5b2..6e5003e9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/MultiQuorumResponseHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/MultiQuorumResponseHandler.java
@@ -163,6 +163,7 @@ public MultiQuorumResponseHandler(Map<String, ReadCommand> readMessages, Map<Str
             }
             catch ( InterruptedException ex )
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug( LogUtil.throwableToString(ex) );
             }
             
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
index dcd3e0b7..630dc66b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
@@ -72,6 +72,7 @@ public T get() throws TimeoutException, DigestMismatchException
             }
             catch ( InterruptedException ex )
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug( LogUtil.throwableToString(ex) );
             }
             
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
index 369443c6..5b46e585 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
@@ -81,6 +81,7 @@ public Row resolve(List<Message> responses) throws DigestMismatchException
             {
                 long start = System.currentTimeMillis();
                 ReadResponse result = ReadResponse.serializer().deserialize(bufIn);
+                if (logger_.isDebugEnabled())
                 logger_.debug( "Response deserialization time : " + (System.currentTimeMillis() - start) + " ms.");
     			if(!result.isDigestQuery())
     			{
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
index 680f2c44..dc52d831 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
@@ -79,12 +79,14 @@ public void run()
             int threshold = (int)(StorageLoadBalancer.ratio_ * averageSystemLoad());
             int myLoad = localLoad();            
             EndPoint predecessor = storageService_.getPredecessor(StorageService.getLocalStorageEndPoint());
+            if (logger_.isDebugEnabled())
             logger_.debug("Trying to relocate the predecessor " + predecessor);
             boolean value = tryThisNode(myLoad, threshold, predecessor);
             if ( !value )
             {
                 loadInfo2_.remove(predecessor);
                 EndPoint successor = storageService_.getSuccessor(StorageService.getLocalStorageEndPoint());
+                if (logger_.isDebugEnabled())
                 logger_.debug("Trying to relocate the successor " + successor);
                 value = tryThisNode(myLoad, threshold, successor);
                 if ( !value )
@@ -95,6 +97,7 @@ public void run()
                         EndPoint target = findARandomLightNode();
                         if ( target != null )
                         {
+                            if (logger_.isDebugEnabled())
                             logger_.debug("Trying to relocate the random node " + target);
                             value = tryThisNode(myLoad, threshold, target);
                             if ( !value )
@@ -136,15 +139,18 @@ private boolean tryThisNode(int myLoad, int threshold, EndPoint target)
             {
                 //calculate the number of keys to be transferred
                 int keyCount = ( (myLoad - pLoad) >> 1 );
+                if (logger_.isDebugEnabled())
                 logger_.debug("Number of keys we attempt to transfer to " + target + " " + keyCount);
                 // Determine the token that the target should join at.         
                 BigInteger targetToken = BootstrapAndLbHelper.getTokenBasedOnPrimaryCount(keyCount);
                 // Send a MoveMessage and see if this node is relocateable
                 MoveMessage moveMessage = new MoveMessage(targetToken);
                 Message message = new Message(StorageService.getLocalStorageEndPoint(), StorageLoadBalancer.lbStage_, StorageLoadBalancer.moveMessageVerbHandler_, new Object[]{moveMessage});
+                if (logger_.isDebugEnabled())
                 logger_.debug("Sending a move message to " + target);
                 IAsyncResult result = MessagingService.getMessagingInstance().sendRR(message, target);
                 value = (Boolean)result.get()[0];
+                if (logger_.isDebugEnabled())
                 logger_.debug("Response for query to relocate " + target + " is " + value);
             }
             return value;
@@ -224,6 +230,7 @@ public void onChange(EndPoint endpoint, EndPointState epState)
             // Perform the analysis for load balance operations
             if ( isHeavyNode() )
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug(StorageService.getLocalStorageEndPoint() + " is a heavy node with load " + localLoad());
                 // lb_.schedule( new LoadBalancer(), StorageLoadBalancer.delay_, TimeUnit.MINUTES );
             }
@@ -286,6 +293,7 @@ private int averageSystemLoad()
                 systemLoad += load.count();
         }
         int averageLoad = (nodeCount > 0) ? (systemLoad / nodeCount) : 0;
+        if (logger_.isDebugEnabled())
         logger_.debug("Average system load should be " + averageLoad);
         return averageLoad;
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 256318de..fbaa6728 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -120,6 +120,7 @@ public static IPartitioner getPartitioner() {
 
         public void doVerb(Message message)
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Received a bootstrap initiate done message ...");
             /* Let the Stream Manager do his thing. */
             StreamManager.instance(message.getFrom()).start();            
@@ -348,6 +349,7 @@ public void doConsistencyCheck(Row row, List<EndPoint> endpoints, ReadCommand co
     */
     public Map<Range, List<EndPoint>> constructRangeToEndPointMap(Range[] ranges)
     {
+        if (logger_.isDebugEnabled())
         logger_.debug("Constructing range to endpoint map ...");
         Map<Range, List<EndPoint>> rangeToEndPointMap = new HashMap<Range, List<EndPoint>>();
         for ( Range range : ranges )
@@ -355,6 +357,7 @@ public void doConsistencyCheck(Row row, List<EndPoint> endpoints, ReadCommand co
             EndPoint[] endpoints = getNStorageEndPoint(range.right());
             rangeToEndPointMap.put(range, new ArrayList<EndPoint>( Arrays.asList(endpoints) ) );
         }
+        if (logger_.isDebugEnabled())
         logger_.debug("Done constructing range to endpoint map ...");
         return rangeToEndPointMap;
     }
@@ -368,6 +371,7 @@ public void doConsistencyCheck(Row row, List<EndPoint> endpoints, ReadCommand co
     */
     public Map<Range, List<EndPoint>> constructRangeToEndPointMap(Range[] ranges, Map<Token, EndPoint> tokenToEndPointMap)
     {
+        if (logger_.isDebugEnabled())
         logger_.debug("Constructing range to endpoint map ...");
         Map<Range, List<EndPoint>> rangeToEndPointMap = new HashMap<Range, List<EndPoint>>();
         for ( Range range : ranges )
@@ -375,6 +379,7 @@ public void doConsistencyCheck(Row row, List<EndPoint> endpoints, ReadCommand co
             EndPoint[] endpoints = getNStorageEndPoint(range.right(), tokenToEndPointMap);
             rangeToEndPointMap.put(range, new ArrayList<EndPoint>( Arrays.asList(endpoints) ) );
         }
+        if (logger_.isDebugEnabled())
         logger_.debug("Done constructing range to endpoint map ...");
         return rangeToEndPointMap;
     }
@@ -410,6 +415,7 @@ public void onChange(EndPoint endpoint, EndPointState epState)
         if (nodeIdState != null)
         {
             Token newToken = getPartitioner().getTokenFactory().fromString(nodeIdState.getState());
+            if (logger_.isDebugEnabled())
             logger_.debug("CHANGE IN STATE FOR " + endpoint + " - has token " + nodeIdState.getState());
             Token oldToken = tokenMetadata_.getToken(ep);
 
@@ -423,6 +429,7 @@ public void onChange(EndPoint endpoint, EndPointState epState)
                 */
                 if ( !oldToken.equals(newToken) )
                 {
+                    if (logger_.isDebugEnabled())
                     logger_.debug("Relocation for endpoint " + ep);
                     tokenMetadata_.update(newToken, ep);                    
                 }
@@ -432,6 +439,7 @@ public void onChange(EndPoint endpoint, EndPointState epState)
                      * This means the node crashed and is coming back up.
                      * Deliver the hints that we have for this endpoint.
                     */
+                    if (logger_.isDebugEnabled())
                     logger_.debug("Sending hinted data to " + ep);
                     doBootstrap(endpoint, BootstrapMode.HINT);
                 }
@@ -452,6 +460,7 @@ public void onChange(EndPoint endpoint, EndPointState epState)
             */
             if ( epState.isAlive() && tokenMetadata_.isKnownEndPoint(endpoint) )
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug("EndPoint " + ep + " just recovered from a partition. Sending hinted data.");
                 doBootstrap(ep, BootstrapMode.HINT);
             }
@@ -709,6 +718,7 @@ public void forceHandoff(String directories, String host) throws IOException
         for ( File file : files )
         {
             streamContexts[i] = new StreamContextManager.StreamContext(file.getAbsolutePath(), file.length());
+            if (logger_.isDebugEnabled())
             logger_.debug("Stream context metadata " + streamContexts[i]);
             ++i;
         }
@@ -721,8 +731,10 @@ public void forceHandoff(String directories, String host) throws IOException
             /* Send the bootstrap initiate message */
             BootstrapInitiateMessage biMessage = new BootstrapInitiateMessage(streamContexts);
             Message message = BootstrapInitiateMessage.makeBootstrapInitiateMessage(biMessage);
+            if (logger_.isDebugEnabled())
             logger_.debug("Sending a bootstrap initiate message to " + target + " ...");
             MessagingService.getMessagingInstance().sendOneWay(message, target);                
+            if (logger_.isDebugEnabled())
             logger_.debug("Waiting for transfer to " + target + " to complete");
             StreamManager.instance(target).waitForStreamCompletion();
             logger_.debug("Done with transfer to " + target);  
@@ -983,6 +995,7 @@ public EndPoint findSuitableEndPoint(String key) throws IOException
 		{
 			if ( FailureDetector.instance().isAlive(endpoints[j]) )
 			{
+				if (logger_.isDebugEnabled())
 				logger_.debug("EndPoint " + endpoints[j] + " is alive so get data from it.");
 				return endpoints[j];
 			}
@@ -1017,6 +1030,7 @@ public EndPoint findSuitableEndPoint(String key) throws IOException
 			{
 				if ( StorageService.instance().isInSameDataCenter(endpoints[j]) && FailureDetector.instance().isAlive(endpoints[j]) )
 				{
+					if (logger_.isDebugEnabled())
 					logger_.debug("EndPoint " + endpoints[j] + " is in the same data center as local storage endpoint.");
 					suitableEndPoints.put(key, endpoints[j]);
 					moveOn = true;
@@ -1035,6 +1049,7 @@ public EndPoint findSuitableEndPoint(String key) throws IOException
 			{
 				if ( FailureDetector.instance().isAlive(endpoints[j]) )
 				{
+					if (logger_.isDebugEnabled())
 					logger_.debug("EndPoint " + endpoints[j] + " is alive so get data from it.");
 					suitableEndPoints.put(key, endpoints[j]);
 					break;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java
index 6cdf9765..fda7b405 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StreamManager.java
@@ -64,6 +64,7 @@ public void doVerb(Message message)
                         break;
 
                     case STREAM:
+                        if (logger_.isDebugEnabled())
                         logger_.debug("Need to re-stream file " + streamStatus.getFile());
                         StreamManager.instance(message.getFrom()).repeat();
                         break;
@@ -105,6 +106,7 @@ public void addFilesToStream(StreamContextManager.StreamContext[] streamContexts
     {
         for ( StreamContextManager.StreamContext streamContext : streamContexts )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Adding file " + streamContext.getTargetFile() + " to be streamed.");
             filesToStream_.add( new File( streamContext.getTargetFile() ) );
             totalBytesToStream_ += streamContext.getExpectedBytes();
@@ -116,6 +118,7 @@ void start()
         if ( filesToStream_.size() > 0 )
         {
             File file = filesToStream_.get(0);
+            if (logger_.isDebugEnabled())
             logger_.debug("Streaming file " + file + " ...");
             MessagingService.getMessagingInstance().stream(file.getAbsolutePath(), 0L, file.length(), StorageService.getLocalStorageEndPoint(), to_);
         }
@@ -130,6 +133,7 @@ void repeat()
     void finish(String file) throws IOException
     {
         File f = new File(file);
+        if (logger_.isDebugEnabled())
         logger_.debug("Deleting file " + file + " after streaming " + f.length() + "/" + totalBytesToStream_ + " bytes.");
         FileUtils.delete(file);
         filesToStream_.remove(0);
@@ -139,6 +143,7 @@ void finish(String file) throws IOException
         {
             synchronized(this)
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug("Signalling that streaming is done for " + to_);
                 notifyAll();
             }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
index 5fd69e7d..b58bea0c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/TokenUpdateVerbHandler.java
@@ -46,6 +46,7 @@ public void doVerb(Message message)
         }
     	catch( IOException ex )
     	{
+    		if (logger_.isDebugEnabled())
     		logger_.debug(LogUtil.throwableToString(ex));
     	}
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/TestRunner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/TestRunner.java
index e4af6508..c925f49e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/TestRunner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/TestRunner.java
@@ -248,6 +248,7 @@ public void run()
             while ( scanner.hasNext() )
             {
                 Row row = scanner.next();    
+                if (logger_.isDebugEnabled())
                 logger_.debug(row.key());
             }            
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
index 3caa490a..4bad2233 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
@@ -61,16 +61,19 @@ public void doVerb(Message message)
             /* Get the headers for this message */
             Map<String, byte[]> headers = message.getHeaders();
             headers.remove( StorageService.getLocalStorageEndPoint().getHost() );
+            if (logger_.isDebugEnabled())
             logger_.debug("Number of nodes in the header " + headers.size());
             Set<String> nodes = headers.keySet();
             
             for ( String node : nodes )
             {            
+                if (logger_.isDebugEnabled())
                 logger_.debug("Processing node " + node);
                 byte[] bytes = headers.remove(node);
                 /* Send a message to this node to alter its membership state. */
                 EndPoint targetNode = new EndPoint(node, DatabaseDescriptor.getStoragePort());                
                 
+                if (logger_.isDebugEnabled())
                 logger_.debug("Sending a membership clean message to " + targetNode);
                 MessagingService.getMessagingInstance().sendOneWay(message, targetNode);
                 break;
@@ -78,6 +81,7 @@ public void doVerb(Message message)
         }
         catch( IOException ex )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug(LogUtil.throwableToString(ex));
         }
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
index 27d1a66d..330e42d2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/TokenUpdateVerbHandler.java
@@ -62,12 +62,14 @@ public void doVerb(Message message)
             /* Get the headers for this message */
             Map<String, byte[]> headers = message.getHeaders();
             headers.remove( StorageService.getLocalStorageEndPoint().getHost() );
+            if (logger_.isDebugEnabled())
             logger_.debug("Number of nodes in the header " + headers.size());
             Set<String> nodes = headers.keySet();
             
             IPartitioner p = StorageService.getPartitioner();
             for ( String node : nodes )
             {            
+                if (logger_.isDebugEnabled())
                 logger_.debug("Processing node " + node);
                 byte[] bytes = headers.remove(node);
                 /* Send a message to this node to update its token to the one retreived. */
@@ -80,6 +82,7 @@ public void doVerb(Message message)
                 Token.serializer().serialize(token, dos);
                 message.setMessageBody(bos.toByteArray());
                 
+                if (logger_.isDebugEnabled())
                 logger_.debug("Sending a token update message to " + target + " to update it to " + token);
                 MessagingService.getMessagingInstance().sendOneWay(message, target);
                 break;
@@ -87,6 +90,7 @@ public void doVerb(Message message)
         }
     	catch( IOException ex )
     	{
+    		if (logger_.isDebugEnabled())
     		logger_.debug(LogUtil.throwableToString(ex));
     	}
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java
index 6cb2b371..e87b5a62 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java
@@ -144,6 +144,7 @@ public static boolean delete(List<String> files) throws IOException
             bVal = delete(file);
             if (bVal)
             {
+            	if (logger_.isDebugEnabled())
             	logger_.debug("Deleted file " + file);
                 files.remove(i);
             }
