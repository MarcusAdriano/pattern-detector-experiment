diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdUtil.java
index 51e09134..8db68d20 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdUtil.java
@@ -48,6 +48,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public final class FormatIdUtil
 {
+	private	static	final	int		BYTE_MASK = 0xFF;
+	private	static	final	int		NIBBLE_MASK = 0xF;
+	private	static	final	int		NIBBLE_SHIFT = 4;
+	private	static	final	int		HEX_RADIX = 16;
+
 	private FormatIdUtil() {
 	}
 
@@ -76,4 +81,61 @@ public static String formatIdToString(int fmtId) {
 
 		return Integer.toString(fmtId);
 	}
+
+	/**
+	 * <p>
+	 * Encode a byte array as a string.
+	 * </p>
+	 */
+	public	static	String	toString( byte[] written, int count )
+	{
+		char[]	chars = new char[ count * 2 ];
+		int		charIdx = 0;
+
+		for ( int i = 0; i < count; i++ )
+		{
+			int		current = written[ i ] & BYTE_MASK;
+			int		lowNibble = current & NIBBLE_MASK;
+			int		highNibble = current >>> NIBBLE_SHIFT;
+
+			chars[ charIdx++ ] = encodeNibble( lowNibble );
+			chars[ charIdx++ ] = encodeNibble( highNibble );
+		}
+
+		return new String( chars );
+	}
+
+	/**
+	 * <p>
+	 * Decode a byte array which had been encoded as a string.
+	 * </p>
+	 */
+	public	static	byte[]	fromString( String objString )
+	{
+		char[]	chars = objString.toCharArray();
+		int		count = chars.length;
+		byte[]	bytes = new byte[ count / 2 ];
+		int		byteIdx = 0;
+
+		for ( int i = 0; i < count; i = i + 2 )
+		{
+			int lowNibble = decodeNibble( chars[ i ] );
+			int highNibble = decodeNibble( chars[ i + 1 ] );
+
+			bytes[ byteIdx++ ] = (byte) ( ( highNibble << NIBBLE_SHIFT ) | lowNibble );
+		}
+
+		return bytes;
+	}
+
+	private	static	char	encodeNibble( int nibble )
+	{
+		return Character.forDigit( nibble, HEX_RADIX );
+	}
+
+	private	static	int		decodeNibble( char c )
+	{
+		return Character.digit( c, HEX_RADIX );
+	}
+    
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index 585f95ec..4f8f3864 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -23,6 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
 import org.apache.derby.iapi.services.io.FormatIdOutputStream;
+import org.apache.derby.iapi.services.io.FormatIdUtil;
 import org.apache.derby.iapi.services.loader.ClassInspector;
 import org.apache.derby.iapi.services.loader.GeneratedMethod;
 
@@ -1702,8 +1703,11 @@ private String  freezeReturnType( TypeDescriptor td )
             dbaos.flush();
 
             byte[]      rawResult = dbaos.getByteArray();
+            int         count = dbaos.getUsed();
 
-            return new String( rawResult );
+            String  retval = FormatIdUtil.toString( rawResult, count );
+
+            return retval;
             
         } catch (Throwable t)
         {
@@ -1711,4 +1715,5 @@ private String  freezeReturnType( TypeDescriptor td )
         }
     }
     
+   
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
index 9fb01c3f..de93d419 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
@@ -49,6 +49,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.services.io.FormatIdInputStream;
+import org.apache.derby.iapi.services.io.FormatIdUtil;
 import org.apache.derby.iapi.services.loader.GeneratedMethod;
 
 import org.apache.derby.iapi.types.RowLocation;
@@ -690,7 +691,7 @@ private TypeDescriptor  thawReturnType( String ice )
         throws StandardException
     {
         try {
-            byte[]                                          bytes = ice.getBytes();
+            byte[]                                          bytes = FormatIdUtil.fromString( ice );
             ByteArrayInputStream                    bais = new ByteArrayInputStream( bytes );
             FormatIdInputStream                     fiis = new FormatIdInputStream( bais );
             TypeDescriptor                              td = (TypeDescriptor) fiis.readObject();
@@ -786,5 +787,4 @@ private void    castDecimal( DataTypeDescriptor dtd, DataValueDescriptor dvd )
         vsdv.setWidth( dtd.getPrecision(), dtd.getScale(), false );
     }
     
-    
 }
