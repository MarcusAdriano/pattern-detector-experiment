diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java
index 5bb43eb3..1bf9d352 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java
@@ -155,8 +155,6 @@ private BackingStoreHashtable(){}
      * If the number of rows is > "max_inmemory_rowcnt", then the rows will
      * be all placed in some sort of Access temporary file on disk.  This 
      * case requires a valid TransactionController.
-     *
-	 * @return The identifier to be used to open the conglomerate later.
      *
      * @param tc                An open TransactionController to be used if the
      *                          hash table needs to overflow to disk.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ConglomerateController.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ConglomerateController.java
index ef81d3f9..23af5d52 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ConglomerateController.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/ConglomerateController.java
@@ -118,7 +118,7 @@ public void close()
      * RESOLVE (mikem) - move this call to ConglomerateManager so it is
      * obvious that non-access clients should not call this.
      *
-     * @param closeHeldController     If true, means to close controller even if
+     * @param closeHeldScan           If true, means to close controller even if
      *                                it has been opened to be kept opened 
      *                                across commit.  This is
      *                                used to close these controllers on abort.
@@ -369,9 +369,18 @@ boolean lockRow(
      *
 	 * @return true if lock was granted, only can be false if wait was false.
      *
-	 * @param loc           The "RowLocation" of the exact row to lock.
-     * @param forUpdate     Lock the record for read or write.
-     * @param forInsert     Lock the record for insert?
+     * @param page_num      page number of record to lock.
+     * @param record_id     record id of record to lock.
+     * @param lock_oper     For what operation are we requesting the lock, this
+     *                      should be one of the following 4 options:
+     *                      LOCK_READ [read lock], 
+     *                      (LOCK_INS | LOCK_UPD) [ lock for insert], 
+     *                      (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
+     *                      previous key to insert],
+     *                      (LOCK_UPD) [lock for delete or replace]
+     *                      (LOCK_UPD | LOCK_UPDATE_LOCKS) [lock scan for 
+     *                          update, will upgrade lock later if actual update
+     *                          is take place]
      * @param wait          Should the lock call wait to be granted?
      * @param lock_duration If set to TransactionManager.LOCK_INSTANT_DURATION,
      *                      then lock will be released immediately after being
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
index 1442d05b..5ea3950d 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
@@ -133,7 +133,6 @@ public void close() throws StandardException
      * Put a new row in the overflow structure.
      *
      * @param row The row to be inserted.
-     * @param hashCode The row's hash code.
      *
      * @return true if the row was added,
      *         false if it was not added (because it was a duplicate and we are eliminating duplicates).
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/FileResource.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/FileResource.java
index d0dd01a2..68eee871 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/FileResource.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/FileResource.java
@@ -65,7 +65,6 @@ Within a database a	(name,generationId) pair uniquely identifies
 	  @param name the name of the file resource.
 	  @param source an input stream for reading the content of
 	         the file resource.
-	  @param name the name of the fileResource
 	  @return the generationId for the file resource. This
 	  quantity increases when you replace the file resource.
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GenericScanController.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GenericScanController.java
index 103ec66c..9cfa826c 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GenericScanController.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GenericScanController.java
@@ -144,9 +144,9 @@ the current scan had been closed and a openScan() had been called instead.
 	the scan.  If null, the starting position of the scan
 	is the first row of the conglomerate.
 	
-	@param startSearchOperation an operator which defines
+	@param startSearchOperator an operator which defines
 	how the startKeyValue is to be searched for.  If 
-    startSearchOperation is ScanController.GE, the scan starts on
+    startSearchOperator is ScanController.GE, the scan starts on
 	the first row which is greater than or equal to the 
 	startKeyValue.  If startSearchOperation is ScanController.GT,
 	the scan starts on the first row whose key is greater than
@@ -164,7 +164,7 @@ the current scan had been closed and a openScan() had been called instead.
 	the scan.  If null, the ending position of the scan
 	is the last row of the conglomerate.
 	
-	@param stopSearchOperation an operator which defines
+	@param stopSearchOperator an operator which defines
 	how the stopKeyValue is used to determine the scan stopping
 	position. If stopSearchOperation is ScanController.GE, the scan 
 	stops just before the first row which is greater than or
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/Qualifier.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/Qualifier.java
index 7d79529e..128962e5 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/Qualifier.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/Qualifier.java
@@ -210,8 +210,8 @@ encoding of (a or b) that takes advantage of this.
      **/
 	int getOperator();
 
-	/** Should the result from the compare operation be negated?  If true
-     *  then only rows which fail the compare operation will qualify.
+	/** Determine if the result from the compare operation should be negated.  
+     *  If true then only rows which fail the compare operation will qualify.
      *
      *  @see DataValueDescriptor#compare
      **/
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java
index 41249401..29ec2050 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java
@@ -514,7 +514,6 @@ public static String toString(Object[] row)
      *
 	 * @return The string version of row.
      *
-     * @param row The row.
      *
      **/
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/StoreCostController.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/StoreCostController.java
index a213ee62..9b3a7af8 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/StoreCostController.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/StoreCostController.java
@@ -315,7 +315,7 @@ public double getFetchFromFullKeyCost(
      *                        conglomerate.  The startKeyValue must only
      *                        reference columns included in the scanColumnList.
      *
-	 * @param startSearchOperation 
+	 * @param startSearchOperator 
      *                        an operator which defines how the startKeyValue
      *                        is to be searched for.  If startSearchOperation 
      *                        is ScanController.GE, the scan starts on the 
@@ -334,7 +334,7 @@ public double getFetchFromFullKeyCost(
      *                        stopKeyValue must only reference columns included
      *                        in the scanColumnList.
      *
-	 * @param stopSearchOperation
+	 * @param stopSearchOperator
      *                        an operator which defines how the stopKeyValue
      *                        is used to determine the scan stopping position. 
      *                        If stopSearchOperation is ScanController.GE, the
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
index 8c214b72..11ccac3c 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
@@ -154,7 +154,7 @@ gaining access to resources (conglomerates, scans, etc.) in the transaction
 
     /**
      * Read and write locks are held until end of transaction, but no
-     * phantom protection is performed (ie. no previous key locking).
+     * phantom protection is performed (ie no previous key locking).
      * Writes only visible when committed. 
      *
      * Note this constant is currently mapped to ISOLATION_SERIALIZABLE.  
@@ -498,7 +498,7 @@ template is kept (and thus this template can be re-used in subsequent
 
 	@param properties Implementation-specific properties of the conglomerate.  
 
-    @param  temporary  If true, the conglomerate is temporary.
+    @param  temporaryFlag  If true, the conglomerate is temporary.
 	Temporary conglomerates are only visible through the transaction
 	controller that created them.  Otherwise, they are opened,
 	scanned, and dropped in the same way as permanent conglomerates.
@@ -806,7 +806,7 @@ ConglomerateController openCompiledConglomerate(
      * @param scanColumnList        see openScan()
      * @param startKeyValue         see openScan()
      * @param startSearchOperator   see openScan()
-     * @param qualifier[]           see openScan()
+     * @param qualifier             see openScan()
      * @param stopKeyValue          see openScan()
      * @param stopSearchOperator    see openScan()
      *
@@ -1014,11 +1014,6 @@ For example ((x = 5) or (x = 6)) and ((y = 1) or (y = 2)) would be
 
     @param lock_level        One of (MODE_TABLE, MODE_RECORD).
 
-    @param isolation_level   The isolation level to lock the conglomerate at.
-                             One of (ISOLATION_READ_COMMITTED, 
-                             ISOLATION_REPEATABLE_READ or 
-                             ISOLATION_SERIALIZABLE).
-
     @param isolation_level   The isolation level to lock the conglomerate at.
                              One of (ISOLATION_READ_COMMITTED, 
                              ISOLATION_REPEATABLE_READ or 
@@ -1038,7 +1033,7 @@ One of (ISOLATION_READ_COMMITTED,
     The startKeyValue must only reference columns included
     in the scanColumnList.
 	
-	@param startSearchOperation an operator which defines
+	@param startSearchOperator an operator which defines
 	how the startKeyValue is to be searched for.  If 
     startSearchOperation is ScanController.GE, the scan starts on
 	the first row which is greater than or equal to the 
@@ -1067,7 +1062,7 @@ One of (ISOLATION_READ_COMMITTED,
     The stopKeyValue must only reference columns included
     in the scanColumnList.
 	
-	@param stopSearchOperation an operator which defines
+	@param stopSearchOperator an operator which defines
 	how the stopKeyValue is used to determine the scan stopping
 	position. If stopSearchOperation is ScanController.GE, the scan 
 	stops just before the first row which is greater than or
@@ -1118,14 +1113,13 @@ ScanController openScan(
      *
 	 * @return The identifier to be used to open the conglomerate later.
      *
-	 * @param conglomId             see openScan()
      * @param open_mode             see openScan()
      * @param lock_level            see openScan()
      * @param isolation_level       see openScan()
      * @param scanColumnList        see openScan()
      * @param startKeyValue         see openScan()
      * @param startSearchOperator   see openScan()
-     * @param qualifier[]           see openScan()
+     * @param qualifier             see openScan()
      * @param stopKeyValue          see openScan()
      * @param stopSearchOperator    see openScan()
      * @param static_info       object returned from 
@@ -1168,7 +1162,7 @@ ScanController openCompiledScan(
      * @param scanColumnList        see openScan()
      * @param startKeyValue         see openScan()
      * @param startSearchOperator   see openScan()
-     * @param qualifier[]           see openScan()
+     * @param qualifier             see openScan()
      * @param stopKeyValue          see openScan()
      * @param stopSearchOperator    see openScan()
      *
@@ -1192,7 +1186,7 @@ GroupFetchScanController openGroupFetchScan(
 			throws StandardException;
 
     /**
-     * Compress table in place
+     * Compress table in place.
      * <p>
      * Returns a GroupFetchScanController which can be used to move rows
      * around in a table, creating a block of free pages at the end of the
