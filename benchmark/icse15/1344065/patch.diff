diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
index e80b2d0d..675bd36d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
@@ -702,7 +702,10 @@ public final synchronized ExecPreparedStatement getPreparedStatement(boolean rec
 				TransactionController nestedTC;
 				try
 				{
-					nestedTC = lcc.getTransactionCompile().startNestedUserTransaction(false);
+					nestedTC = 
+                        lcc.getTransactionCompile().startNestedUserTransaction(
+                            false, true);
+
                     // DERBY-3693: The nested transaction may run into a lock
                     // conflict with its parent transaction, in which case we
                     // don't want to wait for a timeout. If a lock timeout is
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
index ffc8d511..f2719597 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
@@ -742,19 +742,30 @@ long findContainerid(long conglomid)
      *   moving tuples around in heap and indexes.  changed with DERBY-5493 
      *   to do synchronous commit. code in DDLConstantAction.java.
      * o autoincrement/generated key case.  Kept behavior previous to 
-     *   DERBY-5493 by changing to use commitNoSync.  Changing every 
+     *   DERBY-5493 by changing to use commitNoSync, and defaulting 
+     *   flush_log_on_xact_end to false.  Changing every 
      *   key allocation to be a synchronous commit would be a huge performance
      *   problem for existing applications depending on current performance.
      *   code in InsertResultSet.java
      *
-     * @param readOnly  Is transaction readonly?  Only 1 non-readonly nested
-     *                  transaction is allowed per transaction.
+     * @param readOnly                 Is transaction readonly?  Only 1 non-read
+     *                                 only nested transaction is allowed per 
+     *                                 transaction.
+     *
+     * @param flush_log_on_xact_end    By default should the transaction commit
+     *                                 and abort be synced to the log.  Normal
+     *                                 usage should pick true, unless there is
+     *                                 specific performance need and usage 
+     *                                 works correctly if a commit can be lost
+     *                                 on system crash.
      *
 	 * @return The new nested user transaction.
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
-    public TransactionController startNestedUserTransaction(boolean readOnly)
+    public TransactionController startNestedUserTransaction(
+    boolean readOnly,
+    boolean flush_log_on_xact_end)
         throws StandardException;
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
index 7ece941a..a0122987 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
@@ -723,6 +723,10 @@ The cleanupOnError() method of this context behaves as follows:
         thrown if context is not the current context.
         @param transName is the name of the transaction. This name will be 
         displayed by the transactiontable VTI.
+        @param flush_log_on_xact_end    By default should the transaction 
+        commit and abort be synced to the log.  Normal usage should pick true, 
+        unless there is specific performance need and usage works correctly if 
+        a commit can be lost on system crash.
 
         @exception StandardException Standard Derby error policy
 
@@ -733,7 +737,8 @@ The cleanupOnError() method of this context behaves as follows:
 
     public Transaction startNestedUpdateUserTransaction(
     ContextManager contextMgr,
-    String         transName)
+    String         transName,
+    boolean        flush_log_on_xact_end)
         throws StandardException;
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
index 98070d99..503b19fb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
@@ -117,10 +117,16 @@ public RawTransaction startNestedReadOnlyUserTransaction(
         will push a transaction context as described in
         RawStoreFactory.startNestedTransaction
 
-        @param contextMgr           is the context manager to use.  It must be 
-                                    the current context manager.
+        @param contextMgr               is the context manager to use.  It must
+                                        be the current context manager.
         @param transName            is the transaction name. It will be 
                                     displayed in the transactiontable VTI.
+        @param flush_log_on_xact_end    By default should the transaction commit
+                                        and abort be synced to the log.  Normal
+                                        usage should pick true, unless there
+                                        is specific performance need and usage
+                                        works correctly if a commit can be 
+                                        lost on system crash.
 
 		@see RawStoreFactory#startNestedUpdateUserTransaction
 
@@ -129,7 +135,8 @@ public RawTransaction startNestedReadOnlyUserTransaction(
 	public RawTransaction startNestedUpdateUserTransaction(
     RawStoreFactory rsf,
     ContextManager  contextMgr,
-    String          transName)
+    String          transName,
+    boolean         flush_log_on_xact_end)
         throws StandardException;
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java
index b3a04127..cb01808f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java
@@ -272,7 +272,9 @@ public Cacheable setIdentity(Object key) throws StandardException
             // contention. Since this is a read-only subtransaction, there should be
             // no conflict with the parent transaction.
             //
-            TransactionController subTransaction = executionTC.startNestedUserTransaction( true );
+            TransactionController subTransaction = 
+                executionTC.startNestedUserTransaction( true, true );
+
             try {
                 _sequenceGenerator = createSequenceGenerator( subTransaction );
             }
@@ -414,7 +416,8 @@ public synchronized boolean updateCurrentValueOnDisk( Long oldValue, Long newVal
 		}
 
         TransactionController executionTransaction = lcc.getTransactionExecute();
-        TransactionController nestedTransaction = executionTransaction.startNestedUserTransaction( false );
+        TransactionController nestedTransaction = 
+            executionTransaction.startNestedUserTransaction( false, true );
 
         if ( nestedTransaction != null )
         {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 65e81fa7..89a85241 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -1897,7 +1897,8 @@ public void beginNestedTransaction(boolean readOnly) throws StandardException
         }
 
         if (readOnlyNestedTransaction == null)
-            readOnlyNestedTransaction = tran.startNestedUserTransaction(readOnly);
+            readOnlyNestedTransaction = 
+                tran.startNestedUserTransaction(readOnly, true);
 
         queryNestingDepth++;
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index 3f1b6995..561841a0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -793,7 +793,7 @@ private void defragmentRows(TransactionController tc)
 		try {
 
             nested_tc = 
-                tc.startNestedUserTransaction(false);
+                tc.startNestedUserTransaction(false, true);
 
             switch (td.getTableType())
             {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
index 317e5c36..9d8677bb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
@@ -164,7 +164,7 @@ static SchemaDescriptor getSchemaDescriptorForCreate(
 		TransactionController nestedTc = null;
 
 		try {
-			nestedTc = tc.startNestedUserTransaction(false);
+			nestedTc = tc.startNestedUserTransaction(false, true);
 			useTc = nestedTc;
 		} catch (StandardException e) {
 			if (SanityManager.DEBUG) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index 49c93d43..d1f32b13 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -793,7 +793,15 @@ public ResultSet getAutoGeneratedKeysResultset()
 
 			try
 			{
-				nestedTC = tc.startNestedUserTransaction(false);
+                // DERBY-5780, defaulting log syncing to false, which improves
+                // performance of identity value generation.  If system 
+                // crashes may reuse an identity value because commit did not
+                // sync, but only if no subsequent user transaction has 
+                // committed or aborted and thus no row can exist that used
+                // the previous value.  Without this identity values pay
+                // a synchronous I/O to the log file for each new value no
+                // matter how many are inserted in a single transaction.
+				nestedTC = tc.startNestedUserTransaction(false, false);
 				tcToUse = nestedTC;
 			}
 			catch (StandardException se)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
index 27905577..1beafda2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
@@ -2301,12 +2301,25 @@ public TransactionManager getInternalTransaction()
      * transaction is not acceptable.  2 examples of this are system catalog
      * read locks accumulated while compiling a plan, and auto-increment.
      * <p>
+     *
+     * @param readOnly                 Is transaction readonly?  Only 1 non-read
+     *                                 only nested transaction is allowed per 
+     *                                 transaction.
+     *
+     * @param flush_log_on_xact_end    By default should the transaction commit
+     *                                 and abort be synced to the log.  Normal
+     *                                 usage should pick true, unless there is
+     *                                 specific performance need and usage 
+     *                                 works correctly if a commit can be lost
+     *                                 on system crash.
      *
 	 * @return The new nested user transaction.
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
-    public TransactionController startNestedUserTransaction(boolean readOnly)
+    public TransactionController startNestedUserTransaction(
+    boolean readOnly,
+    boolean flush_log_on_xact_end)
         throws StandardException
     {
         // Get the context manager.
@@ -2327,10 +2340,13 @@ public TransactionController startNestedUserTransaction(boolean readOnly)
         Transaction child_rawtran = 
             ((readOnly) ?
                 accessmanager.getRawStore().startNestedReadOnlyUserTransaction(
-                    getLockSpace(), cm,
+                    getLockSpace(), 
+                    cm,
                     AccessFactoryGlobals.NESTED_READONLY_USER_TRANS) :
                 accessmanager.getRawStore().startNestedUpdateUserTransaction(
-                    cm, AccessFactoryGlobals.NESTED_UPDATE_USER_TRANS));
+                    cm, 
+                    AccessFactoryGlobals.NESTED_UPDATE_USER_TRANS,
+                    flush_log_on_xact_end));
 
         RAMTransaction rt   = 
             new RAMTransaction(accessmanager, child_rawtran, this);
@@ -2344,11 +2360,6 @@ public TransactionController startNestedUserTransaction(boolean readOnly)
         child_rawtran.setDefaultLockingPolicy(
                 accessmanager.getDefaultLockingPolicy());
 
-        /*
-        System.out.println("returning nested xact: " + rt + 
-                "child_rawtran = " + child_rawtran); 
-                */
-
         return(rt);
     }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java
index b05ee98a..7f9b617b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java
@@ -823,7 +823,7 @@ public void purgeConglomerate(
             // locks on the table, otherwise the purge will fail with a self
             // deadlock.
             nested_xact = (TransactionManager) 
-                xact_manager.startNestedUserTransaction(false);
+                xact_manager.startNestedUserTransaction(false, true);
 
             // now open the table in a nested user transaction so that each
             // page worth of work can be committed after it is done.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
index 72464227..1ca672a0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
@@ -444,12 +444,13 @@ public Transaction startNestedReadOnlyUserTransaction(
 
 	public Transaction startNestedUpdateUserTransaction(
     ContextManager  contextMgr,
-    String          transName)
+    String          transName,
+    boolean         flush_log_on_xact_end)
         throws StandardException
     {
 		return(
             xactFactory.startNestedUpdateUserTransaction(
-                this, contextMgr, transName));
+                this, contextMgr, transName, flush_log_on_xact_end));
 	}
 
 	public Transaction findUserTransaction(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/InternalXact.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/InternalXact.java
index 2e7124ec..a44dda54 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/InternalXact.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/InternalXact.java
@@ -57,7 +57,7 @@ protected InternalXact(
     {
 		super(
             xactFactory, logFactory, dataFactory, dataValueFactory, 
-            false, null);
+            false, null, false);
 
 		// always want to hold latches & containers open past the commit/abort
 		setPostComplete();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
index ab6b4e39..d2be4643 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
@@ -243,6 +243,20 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // The transaction is only allowed read operations, no log writes.
     private boolean         readOnly;
 
+    // Whether or not to flush log on commit or abort.  
+    // Current usage:
+    // User transactions default to flush.  Internal and nested top
+    // transactions default to not flush.  
+    //
+    // Nested user update transactions are configured when they are created, 
+    // and most default to flush.  Nested user update transaction used for
+    // identity column maintenance defaults to not flush to maintain 
+    // backward performance compatibility with previous releases.
+    //
+    // In all cases log will not be flushsed by Xact.prepareCommit()
+    // if commitNoSync() has been called rather than commit.
+    private boolean         flush_log_on_xact_end;
+
 	// true, if the transaction executed some operations(like unlogged
 	// operations) that block the  online backup to prevent inconsistent
 	// backup copy.
@@ -264,7 +278,8 @@ protected Xact(
     DataFactory         dataFactory,
     DataValueFactory    dataValueFactory,
     boolean             readOnly,
-    CompatibilitySpace  compatibilitySpace)
+    CompatibilitySpace  compatibilitySpace,
+    boolean             flush_log_on_xact_end)
     {
 
 		super();
@@ -274,6 +289,7 @@ protected Xact(
 		this.dataFactory        = dataFactory;
 		this.dataValueFactory   = dataValueFactory;
 		this.readOnly           = readOnly;
+		this.flush_log_on_xact_end  = flush_log_on_xact_end;
 
 		if (compatibilitySpace == null) {
 			this.compatibilitySpace =
@@ -298,11 +314,6 @@ protected Xact(
 		setIdleState();
 
 		backupBlocked = false; 
-
-        /*
-        System.out.println("Xact.constructor: readonly = " + this.readOnly +
-                ";this = " + this);
-                */
 	}
 
 
@@ -773,8 +784,8 @@ private LogInstant prepareCommit(int commitflag)
 
 			// flush the log.
 
-			if (seenUpdates) {
-
+			if (seenUpdates) 
+            {
 				EndXact ex = 
                     new EndXact(
                         getGlobalId(), 
@@ -784,7 +795,7 @@ private LogInstant prepareCommit(int commitflag)
 
 				flushTo = logger.logAndDo(this, ex);
 
-				if (xactFactory.flushLogOnCommit(xc.getIdName()))
+				if (flush_log_on_xact_end)
 				{
 					if ((commitflag & COMMIT_SYNC) == 0)
                     {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
index f68a472d..cd83997b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
@@ -318,7 +318,8 @@ private RawTransaction startCommonTransaction(
     CompatibilitySpace compatibilitySpace,
     String          xact_context_id,
     String          transName,
-    boolean         excludeMe)
+    boolean             excludeMe,
+    boolean             flush_log_on_xact_end)
         throws StandardException
     {
 
@@ -335,7 +336,7 @@ private RawTransaction startCommonTransaction(
 		Xact xact = 
             new Xact(
                 this, logFactory, dataFactory, dataValueFactory, 
-                readOnly, compatibilitySpace);
+                readOnly, compatibilitySpace, flush_log_on_xact_end);
 
         xact.setTransName(transName);
 		pushTransactionContext(cm, xact_context_id, xact,
@@ -351,8 +352,16 @@ public RawTransaction startTransaction(
     String transName)
         throws StandardException
     {
-        return(startCommonTransaction(
-                rsf, cm, false, null, USER_CONTEXT_ID, transName, true));
+        return(
+            startCommonTransaction(
+                rsf, 
+                cm, 
+                false,              // user xact always read/write 
+                null, 
+                USER_CONTEXT_ID, 
+                transName, 
+                true,               // user xact always excluded during quiesce
+                true));             // user xact default flush on xact end
 	}
 
 	public RawTransaction startNestedReadOnlyUserTransaction(
@@ -362,20 +371,39 @@ public RawTransaction startNestedReadOnlyUserTransaction(
     String          transName)
         throws StandardException
     {
-        return(startCommonTransaction(
-            rsf, cm, true, compatibilitySpace, 
-            NESTED_READONLY_USER_CONTEXT_ID, transName, false));
+        return(
+            startCommonTransaction(
+                rsf, 
+                cm, 
+                true, 
+                compatibilitySpace, 
+                NESTED_READONLY_USER_CONTEXT_ID, 
+                transName, 
+                false,
+                true));             // user readonly xact default flush on xact
+                                    // end, should never have anything to flush.
 	}
 
 	public RawTransaction startNestedUpdateUserTransaction(
     RawStoreFactory rsf,
     ContextManager  cm,
-    String          transName)
+    String          transName,
+    boolean         flush_log_on_xact_end)
         throws StandardException
     {
-        return(startCommonTransaction(
-            rsf, cm, false, null, 
-            NESTED_UPDATE_USER_CONTEXT_ID, transName, true));
+        return(
+            startCommonTransaction(
+                rsf, 
+                cm, 
+                false, 
+                null, 
+                NESTED_UPDATE_USER_CONTEXT_ID, 
+                transName, 
+                true,
+                flush_log_on_xact_end));    // allow caller to choose default 
+                                            // log log flushing on commit/abort
+                                            // for internal operations used 
+                                            // nested user update transaction.
 	}
 
 	public RawTransaction startGlobalTransaction(
@@ -395,8 +423,14 @@ public RawTransaction startGlobalTransaction(
 
         RawTransaction xact = 
             startCommonTransaction(
-                rsf, cm, false, null, 
-                USER_CONTEXT_ID, AccessFactoryGlobals.USER_TRANS_NAME, true);
+                rsf, 
+                cm, 
+                false, 
+                null, 
+                USER_CONTEXT_ID, 
+                AccessFactoryGlobals.USER_TRANS_NAME, 
+                true,
+                true);             // user xact default flush on xact end
 
         xact.setTransactionId(gid, xact.getId());
 
@@ -443,7 +477,8 @@ public RawTransaction startNestedTopTransaction(RawStoreFactory rsf, ContextMana
 
 		Xact xact = 
             new Xact(
-                this, logFactory, dataFactory, dataValueFactory, false, null);
+                this, logFactory, dataFactory, dataValueFactory, 
+                false, null, false);
 
 		// hold latches etc. past commit in NTT
 		xact.setPostComplete();
@@ -936,28 +971,6 @@ public UUID makeNewUUID()
 		return uuidFactory.createUUID();
 	}
 
-	/**
-		Decide if a transaction of this contextId needs to flush the log when
-		it commits
-	*/
-	public boolean flushLogOnCommit(String contextName)
-	{
-		//
-		// if this is a user transaction, flush the log by default.
-        // if this is a nested user update transaction, flush log by default.
-		// if this is an internal or nested top transaction, do not
-		// flush, let it age out.
-        //
-        // In all cases log will not be flushsed by Xact.prepareCommit() 
-        // if commitNoSync() has been called rather than commit.
-		//
-		return (contextName == USER_CONTEXT_ID               || 
-				contextName.equals(USER_CONTEXT_ID)          ||
-                contextName == NESTED_UPDATE_USER_CONTEXT_ID ||
-                contextName.equals(NESTED_UPDATE_USER_CONTEXT_ID));
-	}
-
-
 	/**
 		Get a locking policy for a transaction.
 	*/
diff --git a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java
index 2d62c589..7812c26d 100644
--- a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java
+++ b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java
@@ -118,7 +118,9 @@ public long findContainerid(long conglomid) throws StandardException {
         return 0;
     }
 
-    public TransactionController startNestedUserTransaction(boolean readOnly)
+    public TransactionController startNestedUserTransaction(
+    boolean readOnly,
+    boolean flush_log_on_xact_end)
             throws StandardException {
         return this;
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java
index 28fab3a2..e9672235 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_AccessFactory.java
@@ -2987,7 +2987,8 @@ protected boolean nestedUserTransaction(TransactionController tc)
                 ContextService.getFactory().getCurrentContextManager());
 
         // get a nested user transaction
-        TransactionController child_tc = tc.startNestedUserTransaction(true);
+        TransactionController child_tc = 
+            tc.startNestedUserTransaction(true, true);
 
         TransactionController current_xact_after_nest = 
             store.getTransaction(
@@ -3033,11 +3034,11 @@ protected boolean nestedUserTransaction(TransactionController tc)
         tc.dropConglomerate(orig_conglomid);
 
         // trying to double nest a nested transaction should not work.
-        child_tc = tc.startNestedUserTransaction(true);
+        child_tc = tc.startNestedUserTransaction(true, true);
 
         try
         {
-            child_tc.startNestedUserTransaction(true);
+            child_tc.startNestedUserTransaction(true, true);
 
 			throw T_Fail.testFailMsg(
                 "(nestedUserTransaction) double nest xact not allowed.");
@@ -3074,7 +3075,7 @@ protected boolean nestedUserTransaction(TransactionController tc)
                 null,         // default properties
                 TransactionController.IS_DEFAULT);       // not temporary
 
-        child_tc = tc.startNestedUserTransaction(true);
+        child_tc = tc.startNestedUserTransaction(true, true);
 
         // add 20 pages worth of data, causing allocation
         
@@ -3132,7 +3133,7 @@ protected boolean nestedUserTransaction(TransactionController tc)
         tc.commit();
 
 
-        child_tc = tc.startNestedUserTransaction(true);
+        child_tc = tc.startNestedUserTransaction(true, true);
 
         // add 20 pages worth of data, causing allocation
         
@@ -3183,7 +3184,7 @@ protected boolean nestedUserTransaction(TransactionController tc)
         }
 
         // start an read only nested user transaction.
-        child_tc = tc.startNestedUserTransaction(true);
+        child_tc = tc.startNestedUserTransaction(true, true);
 
         ConglomerateController child_cc = 
             child_tc.openConglomerate(
@@ -3213,7 +3214,7 @@ protected boolean nestedUserTransaction(TransactionController tc)
         tc.commit();
 
         // start an update nested user transaction.
-        child_tc = tc.startNestedUserTransaction(false);
+        child_tc = tc.startNestedUserTransaction(false, true);
 
         child_cc = 
             child_tc.openConglomerate(
@@ -3253,7 +3254,7 @@ protected boolean nestedUserTransaction(TransactionController tc)
                 TransactionController.ISOLATION_SERIALIZABLE);
 
         // start an update nested user transaction.
-        child_tc = tc.startNestedUserTransaction(false);
+        child_tc = tc.startNestedUserTransaction(false, true);
 
         try 
         {
