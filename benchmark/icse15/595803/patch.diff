diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java
index cbba95f1..402913ce 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection40.java
@@ -55,38 +55,74 @@ public LogicalConnection40(Connection physicalConnection,
 
     public Array createArrayOf(String typeName, Object[] elements)
         throws SQLException {
+        try
+        {
 		checkForNullPhysicalConnection();
         return physicalConnection_.createArrayOf( typeName, elements );
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
     
     public Blob createBlob()
         throws SQLException {
+        try
+        {
 		checkForNullPhysicalConnection();
         return physicalConnection_.createBlob();
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
 
     public Clob createClob()
         throws SQLException {
+        try
+        {
 		checkForNullPhysicalConnection();
         return physicalConnection_.createClob();
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
     
     public NClob createNClob()
         throws SQLException {
+        try
+        {
 		checkForNullPhysicalConnection();
         return physicalConnection_.createNClob();
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
 
     public SQLXML createSQLXML()
         throws SQLException {
+        try
+        {
 		checkForNullPhysicalConnection();
         return physicalConnection_.createSQLXML();
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
 
     public Struct createStruct(String typeName, Object[] attributes)
         throws SQLException {
+        try
+        {
 		checkForNullPhysicalConnection();
         return physicalConnection_.createStruct( typeName, attributes );
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
 
     /**
@@ -101,8 +137,14 @@ public Struct createStruct(String typeName, Object[] attributes)
      */
     public Properties getClientInfo()
         throws SQLException {
+        try
+        {
 	checkForNullPhysicalConnection();
 	return physicalConnection_.getClientInfo();
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
     
     /**
@@ -117,8 +159,14 @@ public Properties getClientInfo()
      */
     public String getClientInfo(String name)
         throws SQLException {
+        try
+        {
 	checkForNullPhysicalConnection();
 	return physicalConnection_.getClientInfo(name);
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
 
     /**
@@ -128,8 +176,14 @@ public String getClientInfo(String name)
      * @exception SQLException if a database access error occurs
      */
     public Map<String, Class<?>> getTypeMap() throws SQLException {
+        try
+        {
         checkForNullPhysicalConnection();
         return ((java.sql.Connection) physicalConnection_).getTypeMap();
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
 
     /**
@@ -147,18 +201,30 @@ public String getClientInfo(String name)
      * exception.
      */
     synchronized public boolean isValid(int timeout) throws SQLException {
+        try
+        {
         // Check if we have a underlying physical connection
         if (physicalConnection_ == null) {
             return false;
         }
         return physicalConnection_.isValid(timeout);
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
    
 
     public boolean isWrapperFor(Class<?> interfaces)
         throws SQLException {
+        try
+        {
         checkForNullPhysicalConnection();
         return interfaces.isInstance(this);
+		} catch (SQLException sqle) {
+			notifyException(sqle);
+			throw sqle;
+		}
     }
 
     /**
@@ -171,13 +237,20 @@ public boolean isWrapperFor(Class<?> interfaces)
      */
     public void setClientInfo(Properties properties)
         throws SQLClientInfoException {
-	try { checkForNullPhysicalConnection(); }
-	catch (SQLException se) { 
+        try
+        {
+    		checkForNullPhysicalConnection(); 
+        	physicalConnection_.setClientInfo(properties);
+        } catch (SQLClientInfoException cie) {
+            notifyException(cie);
+            throw cie;
+    	} catch (SQLException sqle) {
+    		notifyException(sqle);
 	    throw new SQLClientInfoException
-		(se.getMessage(), se.getSQLState(), 
+    		(sqle.getMessage(), sqle.getSQLState(), 
+    				sqle.getErrorCode(),
 		 (new FailedProperties40(properties)).getProperties());
 	}
-	physicalConnection_.setClientInfo(properties);
     }
     
     /**
@@ -190,19 +263,28 @@ public void setClientInfo(Properties properties)
      */
     public void setClientInfo(String name, String value)
         throws SQLClientInfoException {
-	try { checkForNullPhysicalConnection(); }
-        catch (SQLException se) {
+        try
+        {
+    		checkForNullPhysicalConnection(); 
+        	physicalConnection_.setClientInfo(name, value);
+        } catch (SQLClientInfoException cie) {
+            notifyException(cie);
+            throw cie;
+    	} catch (SQLException sqle) {
+    		notifyException(sqle);
             throw new SQLClientInfoException
-                (se.getMessage(), se.getSQLState(),
+            (sqle.getMessage(), sqle.getSQLState(),
+            		sqle.getErrorCode(),
                  new FailedProperties40
                  (FailedProperties40.makeProperties
                   (name,value)).getProperties());
         }
-	physicalConnection_.setClientInfo(name, value);
     }
     
     public <T>T unwrap(Class<T> interfaces)
         throws SQLException {
+        try
+        {
         checkForNullPhysicalConnection();
         // Derby does not implement non-standard methods on JDBC objects
         try {
@@ -212,6 +294,10 @@ public void setClientInfo(String name, String value)
                                    new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),
                                    interfaces).getSQLException();
         }
+    	} catch (SQLException sqle) {
+    		notifyException(sqle);
+    		throw sqle;
+    	}
     }
     
 } // End class LogicalConnection40
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java
index c97daa8f..caeac804 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection40.java
@@ -245,6 +245,7 @@ public void setClientInfo(String name, String value)
 	catch (SqlException se) {
             throw new SQLClientInfoException
                 (se.getMessage(), se.getSQLState(), 
+                		se.getErrorCode(),
                  new FailedProperties40(p).getProperties());
         }
 
@@ -274,6 +275,7 @@ public void setClientInfo(Properties properties)
 	try { checkForClosedConnection(); } 
 	catch (SqlException se) {
 	    throw new SQLClientInfoException(se.getMessage(), se.getSQLState(),
+	    		se.getErrorCode(),
 					  fp.getProperties());
 	}
 	
@@ -287,7 +289,9 @@ public void setClientInfo(Properties properties)
 			     (SQLState.PROPERTY_UNSUPPORTED_CHANGE), 
 			     fp.getFirstKey(), fp.getFirstValue());
         throw new SQLClientInfoException(se.getMessage(),
-                                         se.getSQLState(), fp.getProperties());
+        		se.getSQLState(), 
+	    		se.getErrorCode(),
+	    		fp.getProperties());
     }
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
index 62e91d41..6059b45d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
@@ -67,9 +67,6 @@ public Array createArrayOf(String typeName, Object[] elements)
      *
      */
     public Blob createBlob() throws SQLException {
-        if (isClosed()) {
-            throw Util.noCurrentConnection();
-        }
         // Forward the createBlob call to the physical connection
         try {
             return getRealConnection().createBlob();
@@ -93,9 +90,6 @@ public Blob createBlob() throws SQLException {
      *
      */
     public Clob createClob() throws SQLException{
-        if (isClosed()) {
-            throw Util.noCurrentConnection();
-        }
         // Forward the createClob call to the physical connection
         try {
             return getRealConnection().createClob();
@@ -182,8 +176,10 @@ public void setClientInfo(String name, String value)
             throw se;
         }
         catch (SQLException se) {
+            notifyException(se);
             throw new SQLClientInfoException
                 (se.getMessage(), se.getSQLState(), 
+                		se.getErrorCode(),
   		 (new FailedProperties40
 		  (FailedProperties40.makeProperties(name,value))).
 		 getProperties());
@@ -210,8 +206,10 @@ public void setClientInfo(Properties properties)
             throw cie;
         }
         catch (SQLException se) {
+            notifyException(se);
             throw new SQLClientInfoException
                 (se.getMessage(), se.getSQLState(), 
+                		se.getErrorCode(),
   		 (new FailedProperties40(properties)).getProperties());
         }
     }
@@ -311,8 +309,14 @@ public final BrokeredCallableStatement newBrokeredStatement(BrokeredStatementCon
      *                                with the given interface.
      */
     public final boolean isWrapperFor(Class<?> interfaces) throws SQLException {
-        checkIfClosed();
+        try {
+            if (getRealConnection().isClosed())
+                throw Util.noCurrentConnection();
         return interfaces.isInstance(this);
+        } catch (SQLException sqle) {
+            notifyException(sqle);
+            throw sqle;
+        }
     }
     
     /**
@@ -325,7 +329,9 @@ public final boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      */
     public final <T> T unwrap(java.lang.Class<T> interfaces) 
                             throws SQLException{
-        checkIfClosed();
+        try {
+            if (getRealConnection().isClosed())
+                throw Util.noCurrentConnection();
         //Derby does not implement non-standard methods on 
         //JDBC objects
         try {
@@ -334,5 +340,9 @@ public final boolean isWrapperFor(Class<?> interfaces) throws SQLException {
             throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
                     interfaces);
         }
+        } catch (SQLException sqle) {
+            notifyException(sqle);
+            throw sqle;
+        }
     }    
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
index b87c5829..3b42341a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
@@ -120,6 +120,7 @@ public void setClientInfo(String name, String value)
             FailedProperties40 fp = new FailedProperties40(p);
             throw new SQLClientInfoException(se.getMessage(), 
                                              se.getSQLState(), 
+                                             se.getErrorCode(),
                                              fp.getProperties());
         }
         // Allow null to simplify compliance testing through
@@ -152,7 +153,7 @@ public void setClientInfo(Properties properties)
         try { checkIfClosed(); }
         catch (SQLException se) {
             throw new SQLClientInfoException(se.getMessage(), se.getSQLState(),
-                                             fp.getProperties());
+            		se.getErrorCode(), fp.getProperties());
         }
 
         // Allow null to simplify compliance testing through
@@ -169,7 +170,9 @@ public void setClientInfo(Properties properties)
              fp.getFirstKey(), 
              fp.getFirstValue());
         throw new SQLClientInfoException(se.getMessage(),
-                                         se.getSQLState(), fp.getProperties());
+        		se.getSQLState(), 
+        		se.getErrorCode(),
+        		fp.getProperties());
     }
     
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java
index a49fa832..778f350e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java
@@ -23,11 +23,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import junit.framework.*;
 
+import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
+import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
+import org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.JDBCDataSource;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 import java.sql.*;
+
 import javax.sql.*;
 
 /**
@@ -38,6 +43,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     
     //Default DataSource that will be used by the tests
     private DataSource ds = null;
+    protected static String dbName = 
+        TestConfiguration.getCurrent().getDefaultDatabaseName();
     
     /**
      *
@@ -116,6 +123,192 @@ public void testUnwrapResultSet() {
         }
     }
 
+    /**
+     * Test case for DERBY-3172
+     * When the Derby engine is shutdown or Network Server is brought down, any
+     * api on JDBC Connection object should generate a Connection error event.
+     */
+    public void testConnectionErrorEvent() throws SQLException, Exception
+    {
+    	Connection conn;
+    	ConnectionPoolDataSource ds;
+    	PooledConnection pc;
+    	Statement st;
+        AssertEventCatcher aes12 = new AssertEventCatcher(12);
+        //Get the correct ConnectionPoolDataSource object
+        if (usingEmbedded())
+        {
+        	ds = new EmbeddedConnectionPoolDataSource();
+            ((EmbeddedConnectionPoolDataSource)ds).setDatabaseName(dbName);
+        } else
+        {
+            ds = new ClientConnectionPoolDataSource();
+            ((ClientConnectionPoolDataSource)ds).setDatabaseName(dbName);
+        }
+        pc = ds.getPooledConnection();
+        //Add a connection event listener to ConnectionPoolDataSource
+        pc.addConnectionEventListener(aes12);
+        conn = pc.getConnection();
+        st = conn.createStatement();
+        //TAB1 does not exist and hence catch the expected exception
+        try {
+            st.executeUpdate("drop table TAB1");
+        } catch (SQLException sqle) {
+            assertSQLState("42Y55", sqle);
+        }
+        //No event should have been generated at this point
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        assertFalse(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();
+        //Shutdown the Derby engine or Network Server depending on what 
+        //mode we are running in.
+        if (usingEmbedded())
+        {
+        	getTestConfiguration().shutdownDatabase();
+        } else
+        {
+        	getTestConfiguration().stopNetworkServer();
+        }
+        //Now try to use various apis on the JDBC Connection object created 
+        //before shutdown and they all should generate connection error event.
+        try {
+            conn.createArrayOf("junk", null);
+        } catch (SQLException e) {
+            assertSQLState("0A000", e);
+        }
+        try {
+            conn.createNClob();
+        } catch (SQLException e) {
+            assertSQLState("0A000", e);
+        }
+        try {
+            conn.createSQLXML();
+        } catch (SQLException e) {
+            assertSQLState("0A000", e);
+        }
+        try {
+            conn.createStruct("junk", null);
+        } catch (SQLException e) {
+            assertSQLState("0A000", e);
+        }
+        try {
+            conn.createBlob();
+        } catch (SQLException e) {
+            //The first call on JDBC Connection object after Network Server
+            //shutdown will generate a communication error and that's why we
+            //are checking for SQL State 08006 rather than No current connection
+            //SQL State 08003. In embedded mode, we will get SQL State 08003
+        	//meaning No current connection
+            if (usingEmbedded())
+                assertSQLState("08003", e);
+            else
+                assertSQLState("08006", e);
+        }
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        assertTrue(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.createClob();
+        } catch (SQLException e) {
+                assertSQLState("08003", e);
+        }
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        assertTrue(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.getClientInfo();
+        } catch (SQLException e) {
+                assertSQLState("08003", e);
+        }
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        assertTrue(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.getClientInfo("junk");
+        } catch (SQLException e) {
+                assertSQLState("08003", e);
+        }
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        assertTrue(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.setClientInfo(null);
+        } catch (SQLException e) {
+                assertSQLState("08003", e);
+        }
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        assertTrue(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.setClientInfo("junk1", "junk2");
+        } catch (SQLException e) {
+                assertSQLState("08003", e);
+        }
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        assertTrue(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.isWrapperFor(this.getClass());
+        } catch (SQLException e) {
+                assertSQLState("08003", e);
+        }
+        assertFalse(aes12.didConnectionClosedEventHappen());
+        if (usingEmbedded())
+        	assertTrue(aes12.didConnectionErrorEventHappen());
+        else
+        	//We do not make any call on underneath JDBC Connection
+        	//object for isWrapperFor and hence never get Connection
+        	//Error event
+        	assertFalse(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.unwrap(this.getClass());
+        } catch (SQLException e) {
+            if (usingEmbedded())
+                assertSQLState("08003", e);
+            else
+            	//We do not make any call on underneath JDBC Connection
+            	//object for unwrap and hence never get Connection
+            	//closed exception. Instead we got exception because
+            	//client driver code is trying to unwrap this.getClass
+            	//and it can't do that
+                assertSQLState("XJ128", e);
+        }
+    	assertFalse(aes12.didConnectionClosedEventHappen());
+        if (usingEmbedded())
+        	assertTrue(aes12.didConnectionErrorEventHappen());
+        else
+        	//We do not make any call on underneath JDBC Connection
+        	//object for isWrapperFor and hence never get Connection
+        	//Error event
+        	assertFalse(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        try {
+            conn.isValid(5);
+        } catch (SQLException e) {
+            assertSQLState("08003", e);
+        }
+        if (usingEmbedded())
+        	assertTrue(aes12.didConnectionClosedEventHappen());
+        else
+        	assertFalse(aes12.didConnectionClosedEventHappen());
+    	//As per the JDBC definition, an exception and hence an event is raised
+    	//for isValid only if the param value is illegal
+    	assertFalse(aes12.didConnectionErrorEventHappen());
+        aes12.resetState();        	
+        if (usingEmbedded())
+        {
+            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
+        }else
+        {
+        	getTestConfiguration().startNetworkServer();
+        }
+
+        // Get a new connection to the database
+        conn = getConnection();
+        conn.close();
+    }
+
     /**
      * Return suite with all tests of the class.
      */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AssertEventCatcher.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AssertEventCatcher.java
index e69de29b..c2e2b0d5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AssertEventCatcher.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AssertEventCatcher.java
@@ -0,0 +1,75 @@
+/*
+ 
+   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+ 
+      http://www.apache.org/licenses/LICENSE-2.0
+ 
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ 
+ */
+
+package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+
+import javax.sql.*;
+
+public class AssertEventCatcher implements ConnectionEventListener
+{
+    private final int catcher;
+    //The following flags will indicate what kind of event was
+    //received by this listener
+    private boolean gotConnectionClosed = false;
+    private boolean gotConnectionErrorOccured = false;
+
+    public AssertEventCatcher(int which) {
+        catcher=which;
+    }
+
+    // ConnectionEventListener methods
+    public void connectionClosed(ConnectionEvent event)
+    {
+        gotConnectionClosed = true;
+    }
+
+    public void connectionErrorOccurred(ConnectionEvent event)
+    {
+        gotConnectionErrorOccured = true;
+    }
+
+    /**
+     * Tell the caller if we received Connection closed event
+     * @return true if received Connection closed event
+     */
+    public boolean didConnectionClosedEventHappen() 
+    {
+    	return gotConnectionClosed;
+    }
+    
+    /**
+     * Tell the caller if we received Connection error event
+     * @return true if received Connection error event
+     */
+    public boolean didConnectionErrorEventHappen() 
+    {
+    	return gotConnectionErrorOccured;
+    }
+    
+    /**
+     * Clear the event received flags for this listener.
+     */
+    public void resetState() 
+    {
+    	gotConnectionClosed = false;
+    	gotConnectionErrorOccured = false;
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
index 8c05ba57..1dc11745 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
@@ -36,8 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Hashtable;
 import java.util.Iterator;
 
-import javax.sql.ConnectionEvent;
-import javax.sql.ConnectionEventListener;
+import org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher;
 import javax.sql.ConnectionPoolDataSource;
 import javax.sql.DataSource;
 import javax.sql.PooledConnection;
@@ -3616,54 +3615,3 @@ public int getFormatId()
         return(branch_id);
     }
 }
-
-class AssertEventCatcher implements ConnectionEventListener
-{
-    private final int catcher;
-    //The following flags will indicate what kind of event was
-    //received by this listener
-    private boolean gotConnectionClosed = false;
-    private boolean gotConnectionErrorOccured = false;
-
-    AssertEventCatcher(int which) {
-        catcher=which;
-    }
-
-    // ConnectionEventListener methods
-    public void connectionClosed(ConnectionEvent event)
-    {
-        gotConnectionClosed = true;
-    }
-
-    public void connectionErrorOccurred(ConnectionEvent event)
-    {
-        gotConnectionErrorOccured = true;
-    }
-
-    /**
-     * Tell the caller if we received Connection closed event
-     * @return true if received Connection closed event
-     */
-    public boolean didConnectionClosedEventHappen() 
-    {
-    	return gotConnectionClosed;
-    }
-    
-    /**
-     * Tell the caller if we received Connection error event
-     * @return true if received Connection error event
-     */
-    public boolean didConnectionErrorEventHappen() 
-    {
-    	return gotConnectionErrorOccured;
-    }
-    
-    /**
-     * Clear the event received flags for this listener.
-     */
-    public void resetState() 
-    {
-    	gotConnectionClosed = false;
-    	gotConnectionErrorOccured = false;
-    }
-}
