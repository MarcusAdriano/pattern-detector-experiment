diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index a56cdb3b..24bb4044 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -36,6 +36,8 @@
 import java.util.Set;
 import java.util.HashSet;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
 
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
@@ -43,6 +45,9 @@
 import javax.xml.transform.Source;
 import javax.xml.XMLConstants;
 
+import org.w3c.dom.ls.LSInput;
+import org.w3c.dom.ls.LSResourceResolver;
+
 import org.apache.aries.blueprint.NamespaceHandler;
 import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
 import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
@@ -54,7 +59,9 @@
 import org.osgi.util.tracker.ServiceTrackerCustomizer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
 
 /**
  * Default implementation of the NamespaceHandlerRegistry.
@@ -229,7 +236,7 @@ public synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers) throws
             }
         }
         if (schema == null) {
-            List<StreamSource> schemaSources = new ArrayList<StreamSource>();
+            final List<StreamSource> schemaSources = new ArrayList<StreamSource>();
             try {
                 schemaSources.add(new StreamSource(getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd")));
                 // Create a schema for all namespaces known at this point
@@ -242,7 +249,77 @@ public synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers) throws
                         schemaSources.add(new StreamSource(url.openStream(), url.toExternalForm()));
                     }
                 }
-                schema = getSchemaFactory().newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
+                SchemaFactory factory = getSchemaFactory();
+                factory.setResourceResolver(new LSResourceResolver() {
+                    public LSInput resolveResource(String type, 
+                                                   final String namespaceURI, 
+                                                   final String publicId,
+                                                   String systemId, String baseURI) {
+                        
+                        URI uri = URI.create((String) namespaceURI);
+                        Set<NamespaceHandler> hs = NamespaceHandlerRegistryImpl.this.handlers.get(uri);
+                        if (hs == null) {
+                            return null;
+                        }
+                        for (NamespaceHandler h : hs) {
+                            final URL url = h.getSchemaLocation(namespaceURI);
+                            if (url != null) {
+                                try {
+                                    final StreamSource source 
+                                        = new StreamSource(url.openStream(), url.toExternalForm());
+                                    schemaSources.add(source);
+                                    return new LSInput() {
+                                        public Reader getCharacterStream() {
+                                            return null;
+                                        }
+                                        public void setCharacterStream(Reader characterStream) {
+                                        }
+                                        public InputStream getByteStream() {
+                                            return source.getInputStream();
+                                        }
+                                        public void setByteStream(InputStream byteStream) {
+                                        }
+                                        public String getStringData() {
+                                            return null;
+                                        }
+                                        public void setStringData(String stringData) {
+                                        }
+                                        public String getSystemId() {
+                                            return url.toExternalForm();
+                                        }
+                                        public void setSystemId(String systemId) {
+                                        }
+                                        public String getPublicId() {
+                                            return publicId;
+                                        }
+                                        public void setPublicId(String publicId) {
+                                        }
+                                        public String getBaseURI() {
+                                            return null;
+                                        }
+                                        public void setBaseURI(String baseURI) {
+                                        }
+                                        public String getEncoding() {
+                                            return null;
+                                        }
+                                        public void setEncoding(String encoding) {
+                                        }
+                                        public boolean getCertifiedText() {
+                                            return false;
+                                        }
+                                        public void setCertifiedText(boolean certifiedText) {
+                                        }
+                                    };
+                                } catch (IOException e) {
+                                    throw new RuntimeException(e);
+                                }
+                            }
+                        }
+                        return null;
+                    }
+                    
+                });
+                schema = factory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
                 // Remove schemas that are fully included
                 for (Iterator<Map<URI, NamespaceHandler>> iterator = schemas.keySet().iterator(); iterator.hasNext();) {
                     Map<URI, NamespaceHandler> key = iterator.next();
@@ -286,7 +363,6 @@ protected synchronized void removeSchemasFor(NamespaceHandler handler) {
     }
 
     private SchemaFactory getSchemaFactory() {
-        SchemaFactory schemaFactory = null;
         if (schemaFactory == null) {
             schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
         }
diff --git a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFive.java b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFive.java
index 2773ff2a..6b5822ba 100644
--- a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFive.java
+++ b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFive.java
@@ -43,10 +43,6 @@
     private static String ATTRIB_ID = "id";
 
 
-    public static class Five {
-        public Five() {
-        }
-    }
     //process elements
     public Metadata parse(Element element, ParserContext context) {
         Metadata retval = null;       
@@ -55,7 +51,7 @@ public Metadata parse(Element element, ParserContext context) {
             MutableBeanMetadata bm = context.createMetadata(MutableBeanMetadata.class);
             bm.setId(id);
             bm.setScope("PROTOTYPE");
-            bm.setClassName(Five.class.getName());
+            bm.setClassName(TestBean.class.getName());
             retval = bm;
         }
         return retval;
@@ -71,7 +67,7 @@ public URL getSchemaLocation(String namespace) {
     }
 
     public Set<Class> getManagedClasses() {
-        Class cls = Five.class;
+        Class cls = TestBean.class;
         return Collections.singleton(cls);
     }
 
diff --git a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFour.java b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFour.java
index de6a6716..ec6e7620 100644
--- a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFour.java
+++ b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerFour.java
@@ -40,11 +40,6 @@
     private static String ELT_NAME = "nshandlerfour";
     private static String ATTRIB_ID = "id";
 
-
-    public static class Four {
-        public Four() {
-        }
-    }
     //process elements
     public Metadata parse(Element element, ParserContext context) {
         Metadata retval = null;       
@@ -53,7 +48,7 @@ public Metadata parse(Element element, ParserContext context) {
             MutableBeanMetadata bm = context.createMetadata(MutableBeanMetadata.class);
             bm.setId(id);
             bm.setScope("PROTOTYPE");
-            bm.setClassName(Four.class.getName());
+            bm.setClassName(TestBean.class.getName());
             retval = bm;
         }
         return retval;
@@ -65,7 +60,7 @@ public URL getSchemaLocation(String namespace) {
     }
 
     public Set<Class> getManagedClasses() {
-        Class cls = Four.class;
+        Class cls = TestBean.class;
         return Collections.singleton(cls);
     }
 
diff --git a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerSix.java b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerSix.java
index 03ac8996..5a580581 100644
--- a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerSix.java
+++ b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerSix.java
@@ -1,3 +1,79 @@
   + text/xml
   + Rev Date
   + native
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.aries.blueprint.testbundlea;
+
+import java.net.URL;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
+import org.apache.aries.blueprint.NamespaceHandler;
+import org.apache.aries.blueprint.ParserContext;
+import org.apache.aries.blueprint.PassThroughMetadata;
+import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
+import org.apache.aries.blueprint.mutable.MutableRefMetadata;
+import org.osgi.service.blueprint.reflect.BeanMetadata;
+import org.osgi.service.blueprint.reflect.ComponentMetadata;
+import org.osgi.service.blueprint.reflect.Metadata;
+import org.osgi.service.blueprint.reflect.RefMetadata;
+
+import org.w3c.dom.Attr;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+public class NSHandlerSix implements NamespaceHandler{
+    public static String NSURI = "http://ns.handler.six";
+    private static String ELT_NAME = "nshandlersix";
+    private static String ATTRIB_ID = "id";
+
+    //process elements
+    public Metadata parse(Element element, ParserContext context) {
+        Metadata retval = null;       
+        if( element.getLocalName().equals(ELT_NAME) ) {
+            final String id = element.getAttributeNS(NSURI, ATTRIB_ID);
+            MutableBeanMetadata bm = context.createMetadata(MutableBeanMetadata.class);
+            bm.setId(id);
+            bm.setScope("PROTOTYPE");
+            bm.setClassName(TestBean.class.getName());
+            retval = bm;
+        }
+        return retval;
+    }    
+
+    //supply schema back to blueprint.
+    public URL getSchemaLocation(String namespace) {
+        System.out.println("Schemans: " + namespace);
+        if (NSURI.equals(namespace)) {
+            return this.getClass().getResource("nshandlersix.xsd");
+        }
+        return this.getClass().getResource("nshandlersiximport.xsd");
+    }
+
+    public Set<Class> getManagedClasses() {
+        Class cls = TestBean.class;
+        return Collections.singleton(cls);
+    }
+
+    public ComponentMetadata decorate(Node node, ComponentMetadata component,
+                                      ParserContext context) {
+        return component;
+    }
+
+}
diff --git a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/TestBean.java b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/TestBean.java
index 12078a75..1dae0a78 100644
--- a/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/TestBean.java
+++ b/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/TestBean.java
@@ -1,2 +1,27 @@
   + Rev Date
   + native
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.testbundlea;
+
+public class TestBean {
+    public TestBean() {
+        
+    }
+}
