diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java
index f2dcbb67..b393c2a4 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java
@@ -253,14 +253,15 @@ public int compareTo(AuthenticationException other) {
     int lastComparison = 0;
     AuthenticationException typedOther = (AuthenticationException)other;
 
-    lastComparison = Boolean.valueOf(isSetWhy()).compareTo(isSetWhy());
+    lastComparison = Boolean.valueOf(isSetWhy()).compareTo(typedOther.isSetWhy());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(why, typedOther.why);
+    if (isSetWhy()) {      lastComparison = TBaseHelper.compareTo(why, typedOther.why);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -273,22 +274,19 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case WHY:
+      switch (field.id) {
+        case 1: // WHY
             if (field.type == TType.STRING) {
               this.why = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
index ab8191bc..19df75f2 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
@@ -279,12 +279,8 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case CREDENTIALS:
+      switch (field.id) {
+        case 1: // CREDENTIALS
             if (field.type == TType.MAP) {
               {
                 TMap _map16 = iprot.readMapBegin();
@@ -303,10 +299,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java
index 427900ac..d6a96335 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java
@@ -253,14 +253,15 @@ public int compareTo(AuthorizationException other) {
     int lastComparison = 0;
     AuthorizationException typedOther = (AuthorizationException)other;
 
-    lastComparison = Boolean.valueOf(isSetWhy()).compareTo(isSetWhy());
+    lastComparison = Boolean.valueOf(isSetWhy()).compareTo(typedOther.isSetWhy());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(why, typedOther.why);
+    if (isSetWhy()) {      lastComparison = TBaseHelper.compareTo(why, typedOther.why);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -273,22 +274,19 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case WHY:
+      switch (field.id) {
+        case 1: // WHY
             if (field.type == TType.STRING) {
               this.why = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
index 31881d9d..7ee92abb 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
@@ -77,6 +77,7 @@
      * Perform a get for column_path in parallel on the given list<string> keys. The return value maps keys to the
      * ColumnOrSuperColumn found. If no value corresponding to a key is present, the key will still be in the map, but both
      * the column and super_column references of the ColumnOrSuperColumn object it maps to will be null.
+     * @deprecated; use multiget_slice
      * 
      * @param keyspace
      * @param keys
@@ -1119,7 +1120,17 @@ public boolean process(TProtocol iprot, TProtocol oprot) throws TException
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         login_args args = new login_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("login", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         login_result result = new login_result();
         try {
@@ -1149,7 +1160,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         get_args args = new get_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("get", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         get_result result = new get_result();
         try {
@@ -1183,7 +1204,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         get_slice_args args = new get_slice_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("get_slice", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         get_slice_result result = new get_slice_result();
         try {
@@ -1215,7 +1246,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         multiget_args args = new multiget_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("multiget", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         multiget_result result = new multiget_result();
         try {
@@ -1247,7 +1288,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         multiget_slice_args args = new multiget_slice_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("multiget_slice", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         multiget_slice_result result = new multiget_slice_result();
         try {
@@ -1279,7 +1330,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         get_count_args args = new get_count_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("get_count", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         get_count_result result = new get_count_result();
         try {
@@ -1312,7 +1373,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         get_range_slice_args args = new get_range_slice_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("get_range_slice", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         get_range_slice_result result = new get_range_slice_result();
         try {
@@ -1344,7 +1415,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         get_range_slices_args args = new get_range_slices_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("get_range_slices", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         get_range_slices_result result = new get_range_slices_result();
         try {
@@ -1376,7 +1457,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         insert_args args = new insert_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("insert", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         insert_result result = new insert_result();
         try {
@@ -1408,7 +1499,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         batch_insert_args args = new batch_insert_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("batch_insert", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         batch_insert_result result = new batch_insert_result();
         try {
@@ -1440,7 +1541,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         remove_args args = new remove_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("remove", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         remove_result result = new remove_result();
         try {
@@ -1472,7 +1583,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         batch_mutate_args args = new batch_mutate_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("batch_mutate", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         batch_mutate_result result = new batch_mutate_result();
         try {
@@ -1504,7 +1625,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         get_string_property_args args = new get_string_property_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("get_string_property", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         get_string_property_result result = new get_string_property_result();
         result.success = iface_.get_string_property(args.property);
@@ -1520,7 +1651,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         get_string_list_property_args args = new get_string_list_property_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("get_string_list_property", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         get_string_list_property_result result = new get_string_list_property_result();
         result.success = iface_.get_string_list_property(args.property);
@@ -1536,7 +1677,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         describe_keyspaces_args args = new describe_keyspaces_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("describe_keyspaces", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         describe_keyspaces_result result = new describe_keyspaces_result();
         result.success = iface_.describe_keyspaces();
@@ -1552,7 +1703,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         describe_cluster_name_args args = new describe_cluster_name_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("describe_cluster_name", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         describe_cluster_name_result result = new describe_cluster_name_result();
         result.success = iface_.describe_cluster_name();
@@ -1568,7 +1729,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         describe_version_args args = new describe_version_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("describe_version", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         describe_version_result result = new describe_version_result();
         result.success = iface_.describe_version();
@@ -1584,7 +1755,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         describe_ring_args args = new describe_ring_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("describe_ring", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         describe_ring_result result = new describe_ring_result();
         result.success = iface_.describe_ring(args.keyspace);
@@ -1600,7 +1781,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         describe_keyspace_args args = new describe_keyspace_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("describe_keyspace", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         describe_keyspace_result result = new describe_keyspace_result();
         try {
@@ -1628,7 +1819,17 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
         describe_splits_args args = new describe_splits_args();
+        try {
         args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("describe_splits", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
         iprot.readMessageEnd();
         describe_splits_result result = new describe_splits_result();
         result.success = iface_.describe_splits(args.start_token, args.end_token, args.keys_per_split);
@@ -1905,19 +2106,15 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case AUTH_REQUEST:
+          case 2: // AUTH_REQUEST
               if (field.type == TType.STRUCT) {
                 this.auth_request = new AuthenticationRequest();
                 this.auth_request.read(iprot);
@@ -1925,10 +2122,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -2251,22 +2449,24 @@ public int compareTo(login_result other) {
       int lastComparison = 0;
       login_result typedOther = (login_result)other;
 
-      lastComparison = Boolean.valueOf(isSetAuthnx()).compareTo(isSetAuthnx());
+      lastComparison = Boolean.valueOf(isSetAuthnx()).compareTo(typedOther.isSetAuthnx());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(authnx, typedOther.authnx);
+      if (isSetAuthnx()) {        lastComparison = TBaseHelper.compareTo(authnx, typedOther.authnx);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetAuthzx()).compareTo(isSetAuthzx());
+      }
+      lastComparison = Boolean.valueOf(isSetAuthzx()).compareTo(typedOther.isSetAuthzx());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(authzx, typedOther.authzx);
+      if (isSetAuthzx()) {        lastComparison = TBaseHelper.compareTo(authzx, typedOther.authzx);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -2279,12 +2479,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case AUTHNX:
+        switch (field.id) {
+          case 1: // AUTHNX
               if (field.type == TType.STRUCT) {
                 this.authnx = new AuthenticationException();
                 this.authnx.read(iprot);
@@ -2292,7 +2488,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case AUTHZX:
+          case 2: // AUTHZX
               if (field.type == TType.STRUCT) {
                 this.authzx = new AuthorizationException();
                 this.authzx.read(iprot);
@@ -2300,10 +2496,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -2748,38 +2945,42 @@ public int compareTo(get_args other) {
       int lastComparison = 0;
       get_args typedOther = (get_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
+      }
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
+      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(key, typedOther.key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(isSetColumn_path());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(typedOther.isSetColumn_path());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
+      if (isSetColumn_path()) {        lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -2792,26 +2993,22 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEY:
+          case 2: // KEY
               if (field.type == TType.STRING) {
                 this.key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PATH:
+          case 3: // COLUMN_PATH
               if (field.type == TType.STRUCT) {
                 this.column_path = new ColumnPath();
                 this.column_path.read(iprot);
@@ -2819,17 +3016,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 4: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -3352,46 +3550,51 @@ public int compareTo(get_result other) {
       int lastComparison = 0;
       get_result typedOther = (get_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      }
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetNfe()).compareTo(isSetNfe());
+      }
+      lastComparison = Boolean.valueOf(isSetNfe()).compareTo(typedOther.isSetNfe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(nfe, typedOther.nfe);
+      if (isSetNfe()) {        lastComparison = TBaseHelper.compareTo(nfe, typedOther.nfe);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -3404,12 +3607,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.STRUCT) {
                 this.success = new ColumnOrSuperColumn();
                 this.success.read(iprot);
@@ -3417,7 +3616,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case IRE:
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -3425,7 +3624,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case NFE:
+          case 2: // NFE
               if (field.type == TType.STRUCT) {
                 this.nfe = new NotFoundException();
                 this.nfe.read(iprot);
@@ -3433,7 +3632,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 3: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -3441,7 +3640,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 4: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -3449,10 +3648,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -3989,46 +4189,51 @@ public int compareTo(get_slice_args other) {
       int lastComparison = 0;
       get_slice_args typedOther = (get_slice_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
+      }
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
+      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(key, typedOther.key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(isSetColumn_parent());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(typedOther.isSetColumn_parent());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
+      if (isSetColumn_parent()) {        lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(isSetPredicate());
+      }
+      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(typedOther.isSetPredicate());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
+      if (isSetPredicate()) {        lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -4041,26 +4246,22 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEY:
+          case 2: // KEY
               if (field.type == TType.STRING) {
                 this.key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PARENT:
+          case 3: // COLUMN_PARENT
               if (field.type == TType.STRUCT) {
                 this.column_parent = new ColumnParent();
                 this.column_parent.read(iprot);
@@ -4068,7 +4269,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case PREDICATE:
+          case 4: // PREDICATE
               if (field.type == TType.STRUCT) {
                 this.predicate = new SlicePredicate();
                 this.predicate.read(iprot);
@@ -4076,17 +4277,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 5: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -4589,38 +4791,42 @@ public int compareTo(get_slice_result other) {
       int lastComparison = 0;
       get_slice_result typedOther = (get_slice_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      }
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -4633,12 +4839,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.LIST) {
                 {
                   TList _list21 = iprot.readListBegin();
@@ -4656,7 +4858,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case IRE:
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -4664,7 +4866,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -4672,7 +4874,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -4680,10 +4882,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -5179,38 +5382,42 @@ public int compareTo(multiget_args other) {
       int lastComparison = 0;
       multiget_args typedOther = (multiget_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(isSetKeys());
+      }
+      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(typedOther.isSetKeys());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keys, typedOther.keys);
+      if (isSetKeys()) {        lastComparison = TBaseHelper.compareTo(keys, typedOther.keys);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(isSetColumn_path());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(typedOther.isSetColumn_path());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
+      if (isSetColumn_path()) {        lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -5223,19 +5430,15 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEYS:
+          case 2: // KEYS
               if (field.type == TType.LIST) {
                 {
                   TList _list25 = iprot.readListBegin();
@@ -5252,7 +5455,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PATH:
+          case 3: // COLUMN_PATH
               if (field.type == TType.STRUCT) {
                 this.column_path = new ColumnPath();
                 this.column_path.read(iprot);
@@ -5260,17 +5463,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 4: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -5770,12 +5974,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.MAP) {
                 {
                   TMap _map29 = iprot.readMapBegin();
@@ -5795,7 +5995,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case IRE:
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -5803,7 +6003,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -5811,7 +6011,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -5819,10 +6019,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -6375,46 +6576,51 @@ public int compareTo(multiget_slice_args other) {
       int lastComparison = 0;
       multiget_slice_args typedOther = (multiget_slice_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(isSetKeys());
+      }
+      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(typedOther.isSetKeys());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keys, typedOther.keys);
+      if (isSetKeys()) {        lastComparison = TBaseHelper.compareTo(keys, typedOther.keys);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(isSetColumn_parent());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(typedOther.isSetColumn_parent());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
+      if (isSetColumn_parent()) {        lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(isSetPredicate());
+      }
+      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(typedOther.isSetPredicate());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
+      if (isSetPredicate()) {        lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -6427,19 +6633,15 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEYS:
+          case 2: // KEYS
               if (field.type == TType.LIST) {
                 {
                   TList _list34 = iprot.readListBegin();
@@ -6456,7 +6658,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PARENT:
+          case 3: // COLUMN_PARENT
               if (field.type == TType.STRUCT) {
                 this.column_parent = new ColumnParent();
                 this.column_parent.read(iprot);
@@ -6464,7 +6666,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case PREDICATE:
+          case 4: // PREDICATE
               if (field.type == TType.STRUCT) {
                 this.predicate = new SlicePredicate();
                 this.predicate.read(iprot);
@@ -6472,17 +6674,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 5: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -7002,12 +7205,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.MAP) {
                 {
                   TMap _map38 = iprot.readMapBegin();
@@ -7037,7 +7236,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case IRE:
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -7045,7 +7244,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -7053,7 +7252,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -7061,10 +7260,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -7548,38 +7748,42 @@ public int compareTo(get_count_args other) {
       int lastComparison = 0;
       get_count_args typedOther = (get_count_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
+      }
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
+      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(key, typedOther.key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(isSetColumn_parent());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(typedOther.isSetColumn_parent());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
+      if (isSetColumn_parent()) {        lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -7592,26 +7796,22 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEY:
+          case 2: // KEY
               if (field.type == TType.STRING) {
                 this.key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PARENT:
+          case 3: // COLUMN_PARENT
               if (field.type == TType.STRUCT) {
                 this.column_parent = new ColumnParent();
                 this.column_parent.read(iprot);
@@ -7619,17 +7819,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 4: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -8098,38 +8299,42 @@ public int compareTo(get_count_result other) {
       int lastComparison = 0;
       get_count_result typedOther = (get_count_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      }
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -8142,12 +8347,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.I32) {
                 this.success = iprot.readI32();
                 setSuccessIsSet(true);
@@ -8155,7 +8356,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case IRE:
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -8163,7 +8364,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -8171,7 +8372,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -8179,10 +8380,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -8823,62 +9025,69 @@ public int compareTo(get_range_slice_args other) {
       int lastComparison = 0;
       get_range_slice_args typedOther = (get_range_slice_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(isSetColumn_parent());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(typedOther.isSetColumn_parent());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
+      if (isSetColumn_parent()) {        lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(isSetPredicate());
+      }
+      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(typedOther.isSetPredicate());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
+      if (isSetPredicate()) {        lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(isSetStart_key());
+      }
+      lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(typedOther.isSetStart_key());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(start_key, typedOther.start_key);
+      if (isSetStart_key()) {        lastComparison = TBaseHelper.compareTo(start_key, typedOther.start_key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetFinish_key()).compareTo(isSetFinish_key());
+      }
+      lastComparison = Boolean.valueOf(isSetFinish_key()).compareTo(typedOther.isSetFinish_key());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(finish_key, typedOther.finish_key);
+      if (isSetFinish_key()) {        lastComparison = TBaseHelper.compareTo(finish_key, typedOther.finish_key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetRow_count()).compareTo(isSetRow_count());
+      }
+      lastComparison = Boolean.valueOf(isSetRow_count()).compareTo(typedOther.isSetRow_count());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(row_count, typedOther.row_count);
+      if (isSetRow_count()) {        lastComparison = TBaseHelper.compareTo(row_count, typedOther.row_count);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -8891,19 +9100,15 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PARENT:
+          case 2: // COLUMN_PARENT
               if (field.type == TType.STRUCT) {
                 this.column_parent = new ColumnParent();
                 this.column_parent.read(iprot);
@@ -8911,7 +9116,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case PREDICATE:
+          case 3: // PREDICATE
               if (field.type == TType.STRUCT) {
                 this.predicate = new SlicePredicate();
                 this.predicate.read(iprot);
@@ -8919,21 +9124,21 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case START_KEY:
+          case 4: // START_KEY
               if (field.type == TType.STRING) {
                 this.start_key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case FINISH_KEY:
+          case 5: // FINISH_KEY
               if (field.type == TType.STRING) {
                 this.finish_key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case ROW_COUNT:
+          case 6: // ROW_COUNT
               if (field.type == TType.I32) {
                 this.row_count = iprot.readI32();
                 setRow_countIsSet(true);
@@ -8941,17 +9146,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 7: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -9481,38 +9687,42 @@ public int compareTo(get_range_slice_result other) {
       int lastComparison = 0;
       get_range_slice_result typedOther = (get_range_slice_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      }
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -9525,12 +9735,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.LIST) {
                 {
                   TList _list47 = iprot.readListBegin();
@@ -9548,7 +9754,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case IRE:
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -9556,7 +9762,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -9564,7 +9770,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -9572,10 +9778,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -10107,46 +10314,51 @@ public int compareTo(get_range_slices_args other) {
       int lastComparison = 0;
       get_range_slices_args typedOther = (get_range_slices_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(isSetColumn_parent());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(typedOther.isSetColumn_parent());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
+      if (isSetColumn_parent()) {        lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(isSetPredicate());
+      }
+      lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(typedOther.isSetPredicate());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
+      if (isSetPredicate()) {        lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetRange()).compareTo(isSetRange());
+      }
+      lastComparison = Boolean.valueOf(isSetRange()).compareTo(typedOther.isSetRange());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(range, typedOther.range);
+      if (isSetRange()) {        lastComparison = TBaseHelper.compareTo(range, typedOther.range);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -10159,19 +10371,15 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PARENT:
+          case 2: // COLUMN_PARENT
               if (field.type == TType.STRUCT) {
                 this.column_parent = new ColumnParent();
                 this.column_parent.read(iprot);
@@ -10179,7 +10387,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case PREDICATE:
+          case 3: // PREDICATE
               if (field.type == TType.STRUCT) {
                 this.predicate = new SlicePredicate();
                 this.predicate.read(iprot);
@@ -10187,7 +10395,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case RANGE:
+          case 4: // RANGE
               if (field.type == TType.STRUCT) {
                 this.range = new KeyRange();
                 this.range.read(iprot);
@@ -10195,17 +10403,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 5: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -10708,38 +10917,42 @@ public int compareTo(get_range_slices_result other) {
       int lastComparison = 0;
       get_range_slices_result typedOther = (get_range_slices_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      }
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -10752,12 +10965,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.LIST) {
                 {
                   TList _list51 = iprot.readListBegin();
@@ -10775,7 +10984,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case IRE:
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -10783,7 +10992,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -10791,7 +11000,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -10799,10 +11008,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -11393,54 +11603,60 @@ public int compareTo(insert_args other) {
       int lastComparison = 0;
       insert_args typedOther = (insert_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
+      }
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
+      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(key, typedOther.key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(isSetColumn_path());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(typedOther.isSetColumn_path());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
+      if (isSetColumn_path()) {        lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetValue()).compareTo(isSetValue());
+      }
+      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(value, typedOther.value);
+      if (isSetValue()) {        lastComparison = TBaseHelper.compareTo(value, typedOther.value);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(isSetTimestamp());
+      }
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
+      if (isSetTimestamp()) {        lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -11453,26 +11669,22 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEY:
+          case 2: // KEY
               if (field.type == TType.STRING) {
                 this.key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PATH:
+          case 3: // COLUMN_PATH
               if (field.type == TType.STRUCT) {
                 this.column_path = new ColumnPath();
                 this.column_path.read(iprot);
@@ -11480,14 +11692,14 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case VALUE:
+          case 4: // VALUE
               if (field.type == TType.STRING) {
                 this.value = iprot.readBinary();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TIMESTAMP:
+          case 5: // TIMESTAMP
               if (field.type == TType.I64) {
                 this.timestamp = iprot.readI64();
                 setTimestampIsSet(true);
@@ -11495,17 +11707,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 6: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -11948,30 +12161,33 @@ public int compareTo(insert_result other) {
       int lastComparison = 0;
       insert_result typedOther = (insert_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -11984,12 +12200,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case IRE:
+        switch (field.id) {
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -11997,7 +12209,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -12005,7 +12217,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -12013,10 +12225,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -12503,26 +12716,22 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEY:
+          case 2: // KEY
               if (field.type == TType.STRING) {
                 this.key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CFMAP:
+          case 3: // CFMAP
               if (field.type == TType.MAP) {
                 {
                   TMap _map55 = iprot.readMapBegin();
@@ -12552,17 +12761,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 4: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -12988,30 +13198,33 @@ public int compareTo(batch_insert_result other) {
       int lastComparison = 0;
       batch_insert_result typedOther = (batch_insert_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -13024,12 +13237,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case IRE:
+        switch (field.id) {
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -13037,7 +13246,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -13045,7 +13254,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -13053,10 +13262,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -13571,46 +13781,51 @@ public int compareTo(remove_args other) {
       int lastComparison = 0;
       remove_args typedOther = (remove_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
+      }
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
+      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(key, typedOther.key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(isSetColumn_path());
+      }
+      lastComparison = Boolean.valueOf(isSetColumn_path()).compareTo(typedOther.isSetColumn_path());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
+      if (isSetColumn_path()) {        lastComparison = TBaseHelper.compareTo(column_path, typedOther.column_path);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(isSetTimestamp());
+      }
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
+      if (isSetTimestamp()) {        lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
+      }
+      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
+      if (isSetConsistency_level()) {        lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -13623,26 +13838,22 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEY:
+          case 2: // KEY
               if (field.type == TType.STRING) {
                 this.key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_PATH:
+          case 3: // COLUMN_PATH
               if (field.type == TType.STRUCT) {
                 this.column_path = new ColumnPath();
                 this.column_path.read(iprot);
@@ -13650,7 +13861,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TIMESTAMP:
+          case 4: // TIMESTAMP
               if (field.type == TType.I64) {
                 this.timestamp = iprot.readI64();
                 setTimestampIsSet(true);
@@ -13658,17 +13869,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 5: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -14087,30 +14299,33 @@ public int compareTo(remove_result other) {
       int lastComparison = 0;
       remove_result typedOther = (remove_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -14123,12 +14338,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case IRE:
+        switch (field.id) {
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -14136,7 +14347,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -14144,7 +14355,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -14152,10 +14363,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -14599,19 +14811,15 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case MUTATION_MAP:
+          case 2: // MUTATION_MAP
               if (field.type == TType.MAP) {
                 {
                   TMap _map64 = iprot.readMapBegin();
@@ -14653,17 +14861,18 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case CONSISTENCY_LEVEL:
+          case 3: // CONSISTENCY_LEVEL
               if (field.type == TType.I32) {
                 this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -15081,30 +15290,33 @@ public int compareTo(batch_mutate_result other) {
       int lastComparison = 0;
       batch_mutate_result typedOther = (batch_mutate_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
+      if (isSetIre()) {        lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
+      }
+      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
+      if (isSetUe()) {        lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
+      }
+      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
+      if (isSetTe()) {        lastComparison = TBaseHelper.compareTo(te, typedOther.te);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -15117,12 +15329,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case IRE:
+        switch (field.id) {
+          case 1: // IRE
               if (field.type == TType.STRUCT) {
                 this.ire = new InvalidRequestException();
                 this.ire.read(iprot);
@@ -15130,7 +15338,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case UE:
+          case 2: // UE
               if (field.type == TType.STRUCT) {
                 this.ue = new UnavailableException();
                 this.ue.read(iprot);
@@ -15138,7 +15346,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case TE:
+          case 3: // TE
               if (field.type == TType.STRUCT) {
                 this.te = new TimedOutException();
                 this.te.read(iprot);
@@ -15146,10 +15354,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -15420,14 +15629,15 @@ public int compareTo(get_string_property_args other) {
       int lastComparison = 0;
       get_string_property_args typedOther = (get_string_property_args)other;
 
-      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(isSetProperty());
+      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(property, typedOther.property);
+      if (isSetProperty()) {        lastComparison = TBaseHelper.compareTo(property, typedOther.property);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -15440,22 +15650,19 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case PROPERTY:
+        switch (field.id) {
+          case 1: // PROPERTY
               if (field.type == TType.STRING) {
                 this.property = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -15706,14 +15913,15 @@ public int compareTo(get_string_property_result other) {
       int lastComparison = 0;
       get_string_property_result typedOther = (get_string_property_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -15726,22 +15934,19 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.STRING) {
                 this.success = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -15988,14 +16193,15 @@ public int compareTo(get_string_list_property_args other) {
       int lastComparison = 0;
       get_string_list_property_args typedOther = (get_string_list_property_args)other;
 
-      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(isSetProperty());
+      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(property, typedOther.property);
+      if (isSetProperty()) {        lastComparison = TBaseHelper.compareTo(property, typedOther.property);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -16008,22 +16214,19 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case PROPERTY:
+        switch (field.id) {
+          case 1: // PROPERTY
               if (field.type == TType.STRING) {
                 this.property = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -16294,14 +16497,15 @@ public int compareTo(get_string_list_property_result other) {
       int lastComparison = 0;
       get_string_list_property_result typedOther = (get_string_list_property_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -16314,12 +16518,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.LIST) {
                 {
                   TList _list78 = iprot.readListBegin();
@@ -16336,10 +16536,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -16542,15 +16743,12 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
+        switch (field.id) {
+          default:
           TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -16807,12 +17005,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.SET) {
                 {
                   TSet _set82 = iprot.readSetBegin();
@@ -16829,10 +17023,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -17035,15 +17230,12 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
+        switch (field.id) {
+          default:
           TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -17279,14 +17471,15 @@ public int compareTo(describe_cluster_name_result other) {
       int lastComparison = 0;
       describe_cluster_name_result typedOther = (describe_cluster_name_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -17299,22 +17492,19 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.STRING) {
                 this.success = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -17510,15 +17700,12 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
+        switch (field.id) {
+          default:
           TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -17754,14 +17941,15 @@ public int compareTo(describe_version_result other) {
       int lastComparison = 0;
       describe_version_result typedOther = (describe_version_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -17774,22 +17962,19 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.STRING) {
                 this.success = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -18036,14 +18221,15 @@ public int compareTo(describe_ring_args other) {
       int lastComparison = 0;
       describe_ring_args typedOther = (describe_ring_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -18056,22 +18242,19 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -18342,14 +18525,15 @@ public int compareTo(describe_ring_result other) {
       int lastComparison = 0;
       describe_ring_result typedOther = (describe_ring_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -18362,12 +18546,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.LIST) {
                 {
                   TList _list86 = iprot.readListBegin();
@@ -18385,10 +18565,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -18642,14 +18823,15 @@ public int compareTo(describe_keyspace_args other) {
       int lastComparison = 0;
       describe_keyspace_args typedOther = (describe_keyspace_args)other;
 
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
+      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(typedOther.isSetKeyspace());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
+      if (isSetKeyspace()) {        lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -18662,22 +18844,19 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
+        switch (field.id) {
+          case 1: // KEYSPACE
               if (field.type == TType.STRING) {
                 this.keyspace = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -19023,12 +19202,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.MAP) {
                 {
                   TMap _map90 = iprot.readMapBegin();
@@ -19059,7 +19234,7 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case NFE:
+          case 1: // NFE
               if (field.type == TType.STRUCT) {
                 this.nfe = new NotFoundException();
                 this.nfe.read(iprot);
@@ -19067,10 +19242,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -19459,30 +19635,33 @@ public int compareTo(describe_splits_args other) {
       int lastComparison = 0;
       describe_splits_args typedOther = (describe_splits_args)other;
 
-      lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(isSetStart_token());
+      lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(typedOther.isSetStart_token());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
+      if (isSetStart_token()) {        lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(isSetEnd_token());
+      }
+      lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(typedOther.isSetEnd_token());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
+      if (isSetEnd_token()) {        lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetKeys_per_split()).compareTo(isSetKeys_per_split());
+      }
+      lastComparison = Boolean.valueOf(isSetKeys_per_split()).compareTo(typedOther.isSetKeys_per_split());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(keys_per_split, typedOther.keys_per_split);
+      if (isSetKeys_per_split()) {        lastComparison = TBaseHelper.compareTo(keys_per_split, typedOther.keys_per_split);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -19495,26 +19674,22 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case START_TOKEN:
+        switch (field.id) {
+          case 1: // START_TOKEN
               if (field.type == TType.STRING) {
                 this.start_token = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case END_TOKEN:
+          case 2: // END_TOKEN
               if (field.type == TType.STRING) {
                 this.end_token = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case KEYS_PER_SPLIT:
+          case 3: // KEYS_PER_SPLIT
               if (field.type == TType.I32) {
                 this.keys_per_split = iprot.readI32();
                 setKeys_per_splitIsSet(true);
@@ -19522,10 +19697,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
@@ -19823,14 +19999,15 @@ public int compareTo(describe_splits_result other) {
       int lastComparison = 0;
       describe_splits_result typedOther = (describe_splits_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(success, typedOther.success);
       if (lastComparison != 0) {
         return lastComparison;
       }
+      }
       return 0;
     }
 
@@ -19843,12 +20020,8 @@ public void read(TProtocol iprot) throws TException {
         if (field.type == TType.STOP) { 
           break;
         }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
+        switch (field.id) {
+          case 0: // SUCCESS
               if (field.type == TType.LIST) {
                 {
                   TList _list100 = iprot.readListBegin();
@@ -19865,10 +20038,11 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
           }
           iprot.readFieldEnd();
         }
-      }
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java
index 8566156e..01a0c7df 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java
@@ -373,30 +373,33 @@ public int compareTo(Column other) {
     int lastComparison = 0;
     Column typedOther = (Column)other;
 
-    lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
+    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(name, typedOther.name);
+    if (isSetName()) {      lastComparison = TBaseHelper.compareTo(name, typedOther.name);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetValue()).compareTo(isSetValue());
+    }
+    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(value, typedOther.value);
+    if (isSetValue()) {      lastComparison = TBaseHelper.compareTo(value, typedOther.value);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(isSetTimestamp());
+    }
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
+    if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -409,26 +412,22 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case NAME:
+      switch (field.id) {
+        case 1: // NAME
             if (field.type == TType.STRING) {
               this.name = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case VALUE:
+        case 2: // VALUE
             if (field.type == TType.STRING) {
               this.value = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case TIMESTAMP:
+        case 3: // TIMESTAMP
             if (field.type == TType.I64) {
               this.timestamp = iprot.readI64();
               setTimestampIsSet(true);
@@ -436,10 +435,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java
index cb138e42..13c33d84 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java
@@ -307,22 +307,24 @@ public int compareTo(ColumnOrSuperColumn other) {
     int lastComparison = 0;
     ColumnOrSuperColumn typedOther = (ColumnOrSuperColumn)other;
 
-    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(isSetColumn());
+    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(column, typedOther.column);
+    if (isSetColumn()) {      lastComparison = TBaseHelper.compareTo(column, typedOther.column);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(isSetSuper_column());
+    }
+    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(typedOther.isSetSuper_column());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
+    if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -335,12 +337,8 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case COLUMN:
+      switch (field.id) {
+        case 1: // COLUMN
             if (field.type == TType.STRUCT) {
               this.column = new Column();
               this.column.read(iprot);
@@ -348,7 +346,7 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case SUPER_COLUMN:
+        case 2: // SUPER_COLUMN
             if (field.type == TType.STRUCT) {
               this.super_column = new SuperColumn();
               this.super_column.read(iprot);
@@ -356,10 +354,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java
index 415cbfd6..58823d11 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java
@@ -311,22 +311,24 @@ public int compareTo(ColumnParent other) {
     int lastComparison = 0;
     ColumnParent typedOther = (ColumnParent)other;
 
-    lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(isSetColumn_family());
+    lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(typedOther.isSetColumn_family());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(column_family, typedOther.column_family);
+    if (isSetColumn_family()) {      lastComparison = TBaseHelper.compareTo(column_family, typedOther.column_family);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(isSetSuper_column());
+    }
+    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(typedOther.isSetSuper_column());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
+    if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -339,29 +341,26 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case COLUMN_FAMILY:
+      switch (field.id) {
+        case 3: // COLUMN_FAMILY
             if (field.type == TType.STRING) {
               this.column_family = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case SUPER_COLUMN:
+        case 4: // SUPER_COLUMN
             if (field.type == TType.STRING) {
               this.super_column = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java
index 822298f1..559289e8 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java
@@ -370,30 +370,33 @@ public int compareTo(ColumnPath other) {
     int lastComparison = 0;
     ColumnPath typedOther = (ColumnPath)other;
 
-    lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(isSetColumn_family());
+    lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(typedOther.isSetColumn_family());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(column_family, typedOther.column_family);
+    if (isSetColumn_family()) {      lastComparison = TBaseHelper.compareTo(column_family, typedOther.column_family);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(isSetSuper_column());
+    }
+    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(typedOther.isSetSuper_column());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
+    if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(isSetColumn());
+    }
+    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(column, typedOther.column);
+    if (isSetColumn()) {      lastComparison = TBaseHelper.compareTo(column, typedOther.column);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -406,36 +409,33 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case COLUMN_FAMILY:
+      switch (field.id) {
+        case 3: // COLUMN_FAMILY
             if (field.type == TType.STRING) {
               this.column_family = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case SUPER_COLUMN:
+        case 4: // SUPER_COLUMN
             if (field.type == TType.STRING) {
               this.super_column = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case COLUMN:
+        case 5: // COLUMN
             if (field.type == TType.STRING) {
               this.column = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java
index 6e0c12eb..3639ae6a 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java
@@ -66,12 +66,6 @@
   ALL(5),
   ANY(6);
 
-  private static final Map<Integer, ConsistencyLevel> BY_VALUE = new HashMap<Integer,ConsistencyLevel>() {{
-    for(ConsistencyLevel val : ConsistencyLevel.values()) {
-      put(val.getValue(), val);
-    }
-  }};
-
   private final int value;
 
   private ConsistencyLevel(int value) {
@@ -90,6 +84,23 @@ public int getValue() {
    * @return null if the value is not found.
    */
   public static ConsistencyLevel findByValue(int value) { 
-    return BY_VALUE.get(value);
+    switch (value) {
+      case 0:
+        return ZERO;
+      case 1:
+        return ONE;
+      case 2:
+        return QUORUM;
+      case 3:
+        return DCQUORUM;
+      case 4:
+        return DCQUORUMSYNC;
+      case 5:
+        return ALL;
+      case 6:
+        return ANY;
+      default:
+        return null;
+    }
   }
 }
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java
index 70b6fb9e..7218bad6 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java
@@ -361,30 +361,33 @@ public int compareTo(Deletion other) {
     int lastComparison = 0;
     Deletion typedOther = (Deletion)other;
 
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
+    if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(isSetSuper_column());
+    }
+    lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(typedOther.isSetSuper_column());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
+    if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(isSetPredicate());
+    }
+    lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(typedOther.isSetPredicate());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
+    if (isSetPredicate()) {      lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -397,12 +400,8 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case TIMESTAMP:
+      switch (field.id) {
+        case 1: // TIMESTAMP
             if (field.type == TType.I64) {
               this.timestamp = iprot.readI64();
               setTimestampIsSet(true);
@@ -410,14 +409,14 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case SUPER_COLUMN:
+        case 2: // SUPER_COLUMN
             if (field.type == TType.STRING) {
               this.super_column = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case PREDICATE:
+        case 3: // PREDICATE
             if (field.type == TType.STRUCT) {
               this.predicate = new SlicePredicate();
               this.predicate.read(iprot);
@@ -425,10 +424,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java
index 40c6c2e2..4c477e4d 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java
@@ -254,14 +254,15 @@ public int compareTo(InvalidRequestException other) {
     int lastComparison = 0;
     InvalidRequestException typedOther = (InvalidRequestException)other;
 
-    lastComparison = Boolean.valueOf(isSetWhy()).compareTo(isSetWhy());
+    lastComparison = Boolean.valueOf(isSetWhy()).compareTo(typedOther.isSetWhy());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(why, typedOther.why);
+    if (isSetWhy()) {      lastComparison = TBaseHelper.compareTo(why, typedOther.why);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -274,22 +275,19 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case WHY:
+      switch (field.id) {
+        case 1: // WHY
             if (field.type == TType.STRING) {
               this.why = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
index 06900f61..f4304386 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
@@ -478,46 +478,51 @@ public int compareTo(KeyRange other) {
     int lastComparison = 0;
     KeyRange typedOther = (KeyRange)other;
 
-    lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(isSetStart_key());
+    lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(typedOther.isSetStart_key());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(start_key, typedOther.start_key);
+    if (isSetStart_key()) {      lastComparison = TBaseHelper.compareTo(start_key, typedOther.start_key);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(isSetEnd_key());
+    }
+    lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(typedOther.isSetEnd_key());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(end_key, typedOther.end_key);
+    if (isSetEnd_key()) {      lastComparison = TBaseHelper.compareTo(end_key, typedOther.end_key);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(isSetStart_token());
+    }
+    lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(typedOther.isSetStart_token());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
+    if (isSetStart_token()) {      lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(isSetEnd_token());
+    }
+    lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(typedOther.isSetEnd_token());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
+    if (isSetEnd_token()) {      lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetCount()).compareTo(isSetCount());
+    }
+    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(count, typedOther.count);
+    if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(count, typedOther.count);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -530,40 +535,36 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case START_KEY:
+      switch (field.id) {
+        case 1: // START_KEY
             if (field.type == TType.STRING) {
               this.start_key = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case END_KEY:
+        case 2: // END_KEY
             if (field.type == TType.STRING) {
               this.end_key = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case START_TOKEN:
+        case 3: // START_TOKEN
             if (field.type == TType.STRING) {
               this.start_token = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case END_TOKEN:
+        case 4: // END_TOKEN
             if (field.type == TType.STRING) {
               this.end_token = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case COUNT:
+        case 5: // COUNT
             if (field.type == TType.I32) {
               this.count = iprot.readI32();
               setCountIsSet(true);
@@ -571,10 +572,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
index 20762f81..012b1a0d 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
@@ -333,22 +333,24 @@ public int compareTo(KeySlice other) {
     int lastComparison = 0;
     KeySlice typedOther = (KeySlice)other;
 
-    lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
+    lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(key, typedOther.key);
+    if (isSetKey()) {      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(isSetColumns());
+    }
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
+    if (isSetColumns()) {      lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -361,19 +363,15 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case KEY:
+      switch (field.id) {
+        case 1: // KEY
             if (field.type == TType.STRING) {
               this.key = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case COLUMNS:
+        case 2: // COLUMNS
             if (field.type == TType.LIST) {
               {
                 TList _list8 = iprot.readListBegin();
@@ -391,10 +389,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java
index b66630dc..e07adfbe 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java
@@ -302,22 +302,24 @@ public int compareTo(Mutation other) {
     int lastComparison = 0;
     Mutation typedOther = (Mutation)other;
 
-    lastComparison = Boolean.valueOf(isSetColumn_or_supercolumn()).compareTo(isSetColumn_or_supercolumn());
+    lastComparison = Boolean.valueOf(isSetColumn_or_supercolumn()).compareTo(typedOther.isSetColumn_or_supercolumn());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(column_or_supercolumn, typedOther.column_or_supercolumn);
+    if (isSetColumn_or_supercolumn()) {      lastComparison = TBaseHelper.compareTo(column_or_supercolumn, typedOther.column_or_supercolumn);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetDeletion()).compareTo(isSetDeletion());
+    }
+    lastComparison = Boolean.valueOf(isSetDeletion()).compareTo(typedOther.isSetDeletion());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(deletion, typedOther.deletion);
+    if (isSetDeletion()) {      lastComparison = TBaseHelper.compareTo(deletion, typedOther.deletion);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -330,12 +332,8 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case COLUMN_OR_SUPERCOLUMN:
+      switch (field.id) {
+        case 1: // COLUMN_OR_SUPERCOLUMN
             if (field.type == TType.STRUCT) {
               this.column_or_supercolumn = new ColumnOrSuperColumn();
               this.column_or_supercolumn.read(iprot);
@@ -343,7 +341,7 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case DELETION:
+        case 2: // DELETION
             if (field.type == TType.STRUCT) {
               this.deletion = new Deletion();
               this.deletion.read(iprot);
@@ -351,10 +349,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java
index 4bf08980..6af149d9 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java
@@ -202,15 +202,12 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
+      switch (field.id) {
+        default:
         TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
index 99fd4f71..67d1c59b 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
@@ -331,22 +331,24 @@ public int compareTo(SlicePredicate other) {
     int lastComparison = 0;
     SlicePredicate typedOther = (SlicePredicate)other;
 
-    lastComparison = Boolean.valueOf(isSetColumn_names()).compareTo(isSetColumn_names());
+    lastComparison = Boolean.valueOf(isSetColumn_names()).compareTo(typedOther.isSetColumn_names());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(column_names, typedOther.column_names);
+    if (isSetColumn_names()) {      lastComparison = TBaseHelper.compareTo(column_names, typedOther.column_names);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetSlice_range()).compareTo(isSetSlice_range());
+    }
+    lastComparison = Boolean.valueOf(isSetSlice_range()).compareTo(typedOther.isSetSlice_range());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(slice_range, typedOther.slice_range);
+    if (isSetSlice_range()) {      lastComparison = TBaseHelper.compareTo(slice_range, typedOther.slice_range);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -359,12 +361,8 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case COLUMN_NAMES:
+      switch (field.id) {
+        case 1: // COLUMN_NAMES
             if (field.type == TType.LIST) {
               {
                 TList _list4 = iprot.readListBegin();
@@ -381,7 +379,7 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case SLICE_RANGE:
+        case 2: // SLICE_RANGE
             if (field.type == TType.STRUCT) {
               this.slice_range = new SliceRange();
               this.slice_range.read(iprot);
@@ -389,10 +387,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
index ac9061d6..4cf43d1c 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
@@ -441,38 +441,42 @@ public int compareTo(SliceRange other) {
     int lastComparison = 0;
     SliceRange typedOther = (SliceRange)other;
 
-    lastComparison = Boolean.valueOf(isSetStart()).compareTo(isSetStart());
+    lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(start, typedOther.start);
+    if (isSetStart()) {      lastComparison = TBaseHelper.compareTo(start, typedOther.start);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetFinish()).compareTo(isSetFinish());
+    }
+    lastComparison = Boolean.valueOf(isSetFinish()).compareTo(typedOther.isSetFinish());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(finish, typedOther.finish);
+    if (isSetFinish()) {      lastComparison = TBaseHelper.compareTo(finish, typedOther.finish);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetReversed()).compareTo(isSetReversed());
+    }
+    lastComparison = Boolean.valueOf(isSetReversed()).compareTo(typedOther.isSetReversed());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(reversed, typedOther.reversed);
+    if (isSetReversed()) {      lastComparison = TBaseHelper.compareTo(reversed, typedOther.reversed);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetCount()).compareTo(isSetCount());
+    }
+    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(count, typedOther.count);
+    if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(count, typedOther.count);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -485,26 +489,22 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case START:
+      switch (field.id) {
+        case 1: // START
             if (field.type == TType.STRING) {
               this.start = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case FINISH:
+        case 2: // FINISH
             if (field.type == TType.STRING) {
               this.finish = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case REVERSED:
+        case 3: // REVERSED
             if (field.type == TType.BOOL) {
               this.reversed = iprot.readBool();
               setReversedIsSet(true);
@@ -512,7 +512,7 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case COUNT:
+        case 4: // COUNT
             if (field.type == TType.I32) {
               this.count = iprot.readI32();
               setCountIsSet(true);
@@ -520,10 +520,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java
index c7288bd2..5b6e90c2 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java
@@ -333,22 +333,24 @@ public int compareTo(SuperColumn other) {
     int lastComparison = 0;
     SuperColumn typedOther = (SuperColumn)other;
 
-    lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
+    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(name, typedOther.name);
+    if (isSetName()) {      lastComparison = TBaseHelper.compareTo(name, typedOther.name);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(isSetColumns());
+    }
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
+    if (isSetColumns()) {      lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -361,19 +363,15 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case NAME:
+      switch (field.id) {
+        case 1: // NAME
             if (field.type == TType.STRING) {
               this.name = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case COLUMNS:
+        case 2: // COLUMNS
             if (field.type == TType.LIST) {
               {
                 TList _list0 = iprot.readListBegin();
@@ -391,10 +389,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java
index 331ca734..7d9be2ec 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java
@@ -202,15 +202,12 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
+      switch (field.id) {
+        default:
         TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
index fb4aa173..648fc9d3 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
@@ -382,30 +382,33 @@ public int compareTo(TokenRange other) {
     int lastComparison = 0;
     TokenRange typedOther = (TokenRange)other;
 
-    lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(isSetStart_token());
+    lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(typedOther.isSetStart_token());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
+    if (isSetStart_token()) {      lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(isSetEnd_token());
+    }
+    lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(typedOther.isSetEnd_token());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
+    if (isSetEnd_token()) {      lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = Boolean.valueOf(isSetEndpoints()).compareTo(isSetEndpoints());
+    }
+    lastComparison = Boolean.valueOf(isSetEndpoints()).compareTo(typedOther.isSetEndpoints());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    lastComparison = TBaseHelper.compareTo(endpoints, typedOther.endpoints);
+    if (isSetEndpoints()) {      lastComparison = TBaseHelper.compareTo(endpoints, typedOther.endpoints);
     if (lastComparison != 0) {
       return lastComparison;
     }
+    }
     return 0;
   }
 
@@ -418,26 +421,22 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
-        TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
-          case START_TOKEN:
+      switch (field.id) {
+        case 1: // START_TOKEN
             if (field.type == TType.STRING) {
               this.start_token = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case END_TOKEN:
+        case 2: // END_TOKEN
             if (field.type == TType.STRING) {
               this.end_token = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case ENDPOINTS:
+        case 3: // ENDPOINTS
             if (field.type == TType.LIST) {
               {
                 TList _list12 = iprot.readListBegin();
@@ -454,10 +453,11 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
diff --git a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java
index ac6b853c..d9e42b90 100644
--- a/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java
+++ b/incubator/cassandra/branches/cassandra-0.6/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java
@@ -202,15 +202,12 @@ public void read(TProtocol iprot) throws TException {
       if (field.type == TType.STOP) { 
         break;
       }
-      _Fields fieldId = _Fields.findByThriftId(field.id);
-      if (fieldId == null) {
+      switch (field.id) {
+        default:
         TProtocolUtil.skip(iprot, field.type);
-      } else {
-        switch (fieldId) {
         }
         iprot.readFieldEnd();
       }
-    }
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
