diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index c4e02569..6f520d2c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -205,7 +205,6 @@ public static Test suite() {
     /**
      * Return the identifiers used to create schemas,
      * tables etc. in the order the database stores them.
-     * @return
      */
     private String[] getSortedIdentifiers()
     {
@@ -1257,7 +1256,7 @@ private void assertMatchesPattern(String pattern, String result)
      * @param pp Position in pattern to start the actual pattern from
      * @param result result string
      * @param rp position in result to starting checking
-     * @return
+     * @return true if a match is found
      */
     private boolean doesMatch(String pattern, int pp,
             String result, int rp)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
index 61d68bfe..6a32dae2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
@@ -56,7 +56,6 @@ public GrantRevokeTest(String name) {
 	/**
 	 * Most tests run in embedded only, since they are only checking DDL
 	 * statements. Metadata methods test also runs in client/server mode.
-	 * @return
 	 */
 	public static Test suite() {
 		TestSuite suite = new TestSuite();
@@ -1302,7 +1301,7 @@ public void assertFunctionPrivilege(boolean hasPrivilege, String user, String sc
      * @param hasPrivilege whether or not the user has the privilege
      * @param user the user to check
      * @param schema the schema to check
-     * @param table the table to check
+     * @param procedure the name of the procedure to check
      * @throws SQLException throws all exceptions
      */
     public void assertProcedurePrivilege(boolean hasPrivilege, String user, String schema, String procedure) throws SQLException {
