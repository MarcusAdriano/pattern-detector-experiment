diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
index 5a34ecaf..cb015220 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
@@ -1144,10 +1144,20 @@ protected ResultSetNode getSourceResultSet(int [] colNum)
 		rcExpr = rc.getExpression();
 		colNum[0] = getColumnNumber();
 
-		while ((rcExpr != null) && (rcExpr instanceof ColumnReference))
+		/* We have to make sure we enter this loop if rc is redundant,
+		 * so that we can navigate down to the actual source result
+		 * set (DERBY-1777). If rc *is* redundant, then rcExpr is not
+		 * guaranteed to be a ColumnReference, so we have to check
+		 * for that case inside the loop.
+		 */
+		while ((rcExpr != null) &&
+			(rc.isRedundant() || (rcExpr instanceof ColumnReference)))
+		{
+			if (rcExpr instanceof ColumnReference)
 		{
 			colNum[0] = ((ColumnReference)rcExpr).getColumnNumber();
 			rc = ((ColumnReference)rcExpr).getSource();
+			}
 
 			/* If "rc" is redundant then that means it points to another
 			 * ResultColumn that in turn points to the source expression.
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
index d724537c..84807822 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java
@@ -439,18 +439,21 @@ public boolean getNextPermutation()
 					firstLookOrder[i] = bestJoinOrder[i];
 				permuteState = JUMPING;
 
-				// If we were in the middle of a join order when this
-				// happened, then reset the join order before jumping.
-				// The call to rewindJoinOrder() here will put joinPosition
-				// back to 0.  But that said, we'll then end up incrementing 
-				// joinPosition before we start looking for the next join
-				// order (see below), which means we need to set it to -1
-				// here so that it gets incremented to "0" and then
-				// processing can continue as normal from there.  Note:
-				// we don't need to set reloadBestPlan to true here
-				// because we only get here if we have *not* found a
-				// best plan yet.
-				if (joinPosition > 0)
+				/* If we already assigned at least one position in the
+				 * join order when this happened (i.e. if joinPosition
+				 * is greater than *or equal* to zero; DERBY-1777), then 
+				 * reset the join order before jumping.  The call to
+				 * rewindJoinOrder() here will put joinPosition back
+				 * to 0.  But that said, we'll then end up incrementing
+				 * joinPosition before we start looking for the next
+				 * join order (see below), which means we need to set
+				 * it to -1 here so that it gets incremented to "0" and
+				 * then processing can continue as normal from there.  
+				 * Note: we don't need to set reloadBestPlan to true
+				 * here because we only get here if we have *not* found
+				 * a best plan yet.
+				 */
+				if (joinPosition >= 0)
 				{
 					rewindJoinOrder();
 					joinPosition = -1;
@@ -1596,6 +1599,18 @@ public void costPermutation() throws StandardException
 						getBestAccessPath().getCostEstimate();
 		}
 
+		/* At this point outerCost should be non-null (DERBY-1777).
+		 * Do the assertion here so that we catch it right away;
+		 * otherwise we'd end up with an NPE somewhere further
+		 * down the tree and it'd be harder to figure out where
+		 * it came from.
+		 */
+		if (SanityManager.DEBUG)
+		{
+			SanityManager.ASSERT(outerCost != null,
+				"outerCost is not expected to be null");
+		}
+
 		Optimizable optimizable = optimizableList.getOptimizable(proposedJoinOrder[joinPosition]);
 
 		/*
