diff --git a/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java b/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index d3ccd61b..8ae25e0b 100644
--- a/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ b/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.StringReader;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -40,11 +41,16 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.queryparser.classic.QueryParser;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.RegexpQuery;
 import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;
+import org.apache.lucene.search.spans.SpanOrQuery;
+import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util._TestUtil;
@@ -225,4 +231,28 @@ public void testDocsAndPositionsEnumStart() throws Exception {
     assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
     reader.close();
   }
+
+  // LUCENE-3831
+  public void testNullPointerException() throws IOException {
+    RegexpQuery regex = new RegexpQuery(new Term("field", "worl."));
+    SpanQuery wrappedquery = new SpanMultiTermQueryWrapper<RegexpQuery>(regex);
+        
+    MemoryIndex mindex = new MemoryIndex();
+    mindex.addField("field", new MockAnalyzer(random).tokenStream("field", new StringReader("hello there")));
+
+    // This throws an NPE
+    assertEquals(0, mindex.search(wrappedquery), 0.00001f);
+  }
+    
+  // LUCENE-3831
+  public void testPassesIfWrapped() throws IOException {
+    RegexpQuery regex = new RegexpQuery(new Term("field", "worl."));
+    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));
+
+    MemoryIndex mindex = new MemoryIndex();
+    mindex.addField("field", new MockAnalyzer(random).tokenStream("field", new StringReader("hello there")));
+
+    // This passes though
+    assertEquals(0, mindex.search(wrappedquery), 0.00001f);
+  }
 }
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
index d2e42c63..72be59cc 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
@@ -197,6 +197,7 @@ public FieldsEnum iterator() {
 
   @Override
   public Terms terms(String field) throws IOException {
+    assert field != null;
     return fields.get(field);
   }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
index f773e1e7..00a0c2a6 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
@@ -211,6 +211,7 @@ public FieldsEnum iterator() {
 
   @Override
   public Terms terms(String field) throws IOException {
+    assert field != null;
     return fields.get(field);
   }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
index fa19fad4..ebc8640f 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -584,8 +584,9 @@ public Weight createNormalizedWeight(Query query) throws IOException {
     Weight weight = query.createWeight(this);
     float v = weight.getValueForNormalization();
     float norm = getSimilarity().queryNorm(v);
-    if (Float.isInfinite(norm) || Float.isNaN(norm))
+    if (Float.isInfinite(norm) || Float.isNaN(norm)) {
       norm = 1.0f;
+    }
     weight.normalize(norm, 1.0f);
     return weight;
   }
@@ -813,6 +814,8 @@ public CollectionStatistics collectionStatistics(String field) throws IOExceptio
     final long sumTotalTermFreq;
     final long sumDocFreq;
     
+    assert field != null;
+    
     Terms terms = MultiFields.getTerms(reader, field);
     if (terms == null) {
       docCount = 0;
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
index 8c6f3d33..aa5ab171 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
@@ -57,29 +57,38 @@ public SpanWeight(SpanQuery query, IndexSearcher searcher)
       termContexts.put(term, state);
       i++;
     }
+    final String field = query.getField();
+    if (field != null) {
     stats = similarity.computeWeight(query.getBoost(), 
         searcher.collectionStatistics(query.getField()), 
         termStats);
   }
+  }
 
   @Override
   public Query getQuery() { return query; }
 
   @Override
   public float getValueForNormalization() throws IOException {
-    return stats.getValueForNormalization();
+    return stats == null ? 1.0f : stats.getValueForNormalization();
   }
 
   @Override
   public void normalize(float queryNorm, float topLevelBoost) {
+    if (stats != null) {
     stats.normalize(queryNorm, topLevelBoost);
   }
+  }
 
   @Override
   public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,
       boolean topScorer, Bits acceptDocs) throws IOException {
+    if (stats == null) {
+      return null;
+    } else {
     return new SpanScorer(query.getSpans(context, acceptDocs, termContexts), this, similarity.sloppySimScorer(stats, context));
   }
+  }
 
   @Override
   public Explanation explain(AtomicReaderContext context, int doc) throws IOException {
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
index 92b9caae..768c528f 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
@@ -17,31 +17,31 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
+
+import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.TextField;
+import org.apache.lucene.index.AtomicReaderContext;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexReaderContext;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.CheckHits;
 import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.CheckHits;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.index.AtomicReaderContext;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.IndexReaderContext;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.StringField;
-import org.apache.lucene.document.TextField;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.ReaderUtil;
 
-import java.io.IOException;
-
 public class TestSpans extends LuceneTestCase {
   private IndexSearcher searcher;
   private IndexReader reader;
