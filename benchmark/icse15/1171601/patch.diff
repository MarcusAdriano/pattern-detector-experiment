diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
index 1552f7b7..032e29f5 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
@@ -69,14 +69,11 @@
   public static final String INDEX_DIR = "spellcheckIndexDir";
   public static final String ACCURACY = "accuracy";
   public static final String STRING_DISTANCE = "distanceMeasure";
-  public static final String FIELD_TYPE = "fieldType";
   public static final String COMPARATOR_CLASS = "comparatorClass";
 
   public static final String SCORE_COMP = "score";
   public static final String FREQ_COMP = "freq";
 
-  protected String field;
-  protected String fieldTypeName;
   protected org.apache.lucene.search.spell.SpellChecker spellChecker;
 
   protected String sourceLocation;
@@ -118,7 +115,6 @@ public String init(NamedList config, SolrCore core) {
     } else {
       comp = SuggestWordQueue.DEFAULT_COMPARATOR;
     }
-    field = (String) config.get(FIELD);
     String strDistanceName = (String)config.get(STRING_DISTANCE);
     if (strDistanceName != null) {
       sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);
@@ -141,18 +137,6 @@ public String init(NamedList config, SolrCore core) {
                 "Unparseable accuracy given for dictionary: " + name, e);
       }
     }
-    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {
-      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();
-    }
-    fieldTypeName = (String) config.get(FIELD_TYPE);
-    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {
-      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);
-      analyzer = fieldType.getQueryAnalyzer();
-    }
-    if (analyzer == null)   {
-      log.info("Using WhitespaceAnalzyer for dictionary: " + name);
-      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);
-    }
     return name;
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
index cfdc04ac..1b17e804 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
@@ -19,8 +19,10 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.SolrCore;
+import org.apache.solr.schema.FieldType;
 import org.apache.solr.search.SolrIndexSearcher;
 
 import java.io.IOException;
@@ -38,15 +40,31 @@
 public abstract class SolrSpellChecker {
   public static final String DICTIONARY_NAME = "name";
   public static final String DEFAULT_DICTIONARY_NAME = "default";
+  public static final String FIELD = "field";
+  public static final String FIELD_TYPE = "fieldType";
   /** Dictionary name */
   protected String name;
   protected Analyzer analyzer;
+  protected String field;
+  protected String fieldTypeName;
 
   public String init(NamedList config, SolrCore core) {
     name = (String) config.get(DICTIONARY_NAME);
     if (name == null) {
       name = DEFAULT_DICTIONARY_NAME;
     }
+    field = (String)config.get(FIELD);
+    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {
+      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();
+    }
+    fieldTypeName = (String) config.get(FIELD_TYPE);
+    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {
+      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);
+      analyzer = fieldType.getQueryAnalyzer();
+    }
+    if (analyzer == null)   {
+      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);
+    }
     return name;
   }
   
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java
index c9bc2553..8db99160 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java
@@ -52,8 +52,6 @@
    * current IndexReader.
    */
   public static final String LOCATION = "sourceLocation";
-  /** Field to use as the source of terms if using IndexReader. */
-  public static final String FIELD = "field";
   /** Fully-qualified class of the {@link Lookup} implementation. */
   public static final String LOOKUP_IMPL = "lookupImpl";
   /**
@@ -69,7 +67,6 @@
   
   protected String sourceLocation;
   protected File storeDir;
-  protected String field;
   protected float threshold;
   protected Dictionary dictionary;
   protected IndexReader reader;
@@ -84,7 +81,6 @@ public String init(NamedList config, SolrCore core) {
     threshold = config.get(THRESHOLD_TOKEN_FREQUENCY) == null ? 0.0f
             : (Float)config.get(THRESHOLD_TOKEN_FREQUENCY);
     sourceLocation = (String) config.get(LOCATION);
-    field = (String)config.get(FIELD);
     lookupImpl = (String)config.get(LOOKUP_IMPL);
 
     // support the old classnames without -Factory for config file backwards compatibility.
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java
index 804842f2..600c598a 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java
@@ -21,6 +21,7 @@
 
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.params.SpellingParams;
+import org.apache.solr.common.util.NamedList;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -95,4 +96,13 @@ public void testRebuild() throws Exception {
     assertQ(req("qt", requestUri, "q", "ac", SpellingParams.SPELLCHECK_COUNT, "2", SpellingParams.SPELLCHECK_ONLY_MORE_POPULAR, "true"),
       "//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='ac']/int[@name='numFound'][.='2']");
   }
+  
+  // SOLR-2726
+  public void testAnalyzer() throws Exception {
+    Suggester suggester = new Suggester();
+    NamedList params = new NamedList();
+    params.add("lookupImpl", "org.apache.solr.spelling.suggest.tst.TSTLookupFactory");
+    suggester.init(params, h.getCore());
+    assertTrue(suggester.getQueryAnalyzer() != null);
+  }
 }
