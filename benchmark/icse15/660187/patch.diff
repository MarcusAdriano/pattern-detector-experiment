diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java
index 227d1b9a..a816363e 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java
@@ -30,10 +30,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class Blob extends Lob implements java.sql.Blob {
     
-    //This boolean variable indicates whether the Blob object has
-    //been invalidated by calling free() on it
-    private boolean isValid = true;
-    
     //-----------------------------state------------------------------------------
 
     byte[] binaryString_ = null;
@@ -608,11 +604,11 @@ public void free()
         throws SQLException {
         
         //calling free() on a already freed object is treated as a no-op
-        if (!isValid) return;
+        if (!isValid_) return;
         
         //now that free has been called the Blob object is no longer
         //valid
-        isValid = false;
+        isValid_ = false;
         try {            
             synchronized (agent_.connection_) {
                 if (agent_.loggingEnabled()) {
@@ -736,20 +732,6 @@ protected boolean isSubString(byte[] pattern, int index) {
         return true;
     }
     
-    /**
-     * Checks is isValid is true. If it is not true throws 
-     * a SQLException stating that a method has been called on
-     * an invalid LOB object
-     *
-     * @throws SQLException if isValid is not true
-     */
-    private void checkValidity() throws SQLException{
-        if(!isValid)
-            throw new SqlException(null,new ClientMessageId(SQLState.LOB_OBJECT_INVALID))
-                                                  .getSQLException();
-    }
-    
-
     /**
      * Materialize the stream used for input to the database.
      *
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java
index a6467b89..45a8f1a5 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java
@@ -48,10 +48,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     protected String encoding_ = "UNICODE";
 
-    //This boolean variable indicates whether the Clob object has
-    //been invalidated by calling free() on it
-    private boolean isValid = true;
-
     //---------------------constructors/finalizer---------------------------------
     public Clob(Agent agent, String string) {
 
@@ -816,11 +812,11 @@ public void free()
         throws SQLException {
 
         //calling free() on a already freed object is treated as a no-op
-        if (!isValid) return;
+        if (!isValid_) return;
 
         //now that free has been called the Blob object is no longer
         //valid
-        isValid = false;
+        isValid_ = false;
 
         try {
             synchronized (agent_.connection_) {
@@ -1021,18 +1017,7 @@ public void convertFromAsciiToCharacterStream() throws SqlException {
     }
 
 
-    /*
-     * Checks is isValid is true. If it is not true throws
-     * a SQLException stating that a method has been called on
-     * an invalid LOB object
-     *
-     * throws SQLException if isvalid is not true.
-     */
-    private void checkValidity() throws SQLException{
-        if(!isValid)
-            throw new SqlException(null,new ClientMessageId(SQLState.LOB_OBJECT_INVALID))
-                                                  .getSQLException();
-    }
+
 
     /**
      * Materialize the stream used for input to the database.
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Connection.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Connection.java
index 20ffcb9f..8a8b5624 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Connection.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Connection.java
@@ -117,6 +117,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private boolean accumulated440ForMessageProcFailure_ = false;
     private boolean accumulated444ForMessageProcFailure_ = false;
 
+    private int transactionID_ = 0;
+
     //---------------------XA-----------------------------------------------------
 
     protected boolean isXAConnection_ = false; // Indicates an XA connection
@@ -1103,6 +1105,14 @@ public int getTransactionIsolation() throws SQLException {
         }
     }
   
+    /**
+     * Returns the ID of the active transaction for this connection.
+     * @return the ID of the active transaction
+     */
+    public int getTransactionID(){
+        return transactionID_;
+    }
+
     /**
      * Returns the current schema (the schema that would be used for
      * compilation. This is not part of the java.sql.Connection interface, and
@@ -1973,6 +1983,7 @@ public void completeLocalCommit() {
             listener.completeLocalCommit(i);
         }
         inUnitOfWork_ = false;
+        transactionID_++;
     }
 
     public abstract void writeLocalRollback_() throws SqlException;
@@ -1989,6 +2000,7 @@ public void completeLocalRollback() {
             listener.completeLocalRollback(i);
         }
         inUnitOfWork_ = false;
+        transactionID_++;
     }
     
     /**
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Lob.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Lob.java
index f01adabf..a1b40d14 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Lob.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Lob.java
@@ -53,6 +53,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private long sqlLength_;// length of the LOB value, as defined by the server
     private boolean lengthObtained_;
     
+    /**
+     * This boolean variable indicates whether the Lob object has been
+     * invalidated by calling free() on it
+     */
+    protected boolean isValid_ = true;
+
     final private boolean willBeLayerBStreamed_;
     
         
@@ -66,6 +72,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     //limit imposed.
     private long updateCount;
 
+    /**
+     * This integer identifies which transaction the Lob is associated with
+     */
+    private int transactionID_;
+
     //-----------------------------messageId------------------------------------------
     final static protected ClientMessageId LOB_OBJECT_LENGTH_UNKNOWN_YET =
         new ClientMessageId( SQLState.LOB_OBJECT_LENGTH_UNKNOWN_YET );
@@ -77,6 +88,7 @@ protected Lob(Agent agent,
         agent_ = agent;
         lengthObtained_ = false;
         willBeLayerBStreamed_ = willBeLayerBStreamed;
+        transactionID_ = agent_.connection_.getTransactionID();
     }
 
     protected void finalize() throws java.lang.Throwable {
@@ -373,4 +385,27 @@ void checkForLocatorValidity() throws SqlException {
         //valid
         sqlLength();
     }
+    
+    /**
+     * Checks if isValid is true and whether the transaction that
+     * created the Lob is still active. If any of which is not true throws
+     * a SQLException stating that a method has been called on
+     * an invalid LOB object.
+     *
+     * @throws SQLException if isValid is not true or the transaction that
+     * created the Lob is not active
+     */
+    protected void checkValidity() throws SQLException{
+
+        // If there isn't an open connection, the Lob is invalid.
+        try {
+            agent_.connection_.checkForClosedConnection();
+        } catch (SqlException se) {
+            throw se.getSQLException();
+        }
+
+        if(!isValid_ || transactionID_ != agent_.connection_.getTransactionID())
+            throw new SqlException(null,new ClientMessageId(SQLState.LOB_OBJECT_INVALID))
+                                                  .getSQLException();
+    }
 }
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index 7b898217..7c4aff27 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -1359,6 +1359,14 @@ public void testClobAfterCommit() throws Exception {
             if (clobLength == 26)
                 shortClob = rs.getClob(1);
         }
+        
+        /*
+        * We call it before the commit(); to cache the result
+        * DERBY-3574
+        */
+        clob.length();
+        shortClob.length();
+        
         rs.close();
         stmt.close();
         commit();
@@ -1451,6 +1459,14 @@ public void testClobAfterClosingConnection() throws Exception {
             if (clobLength == 26)
                 shortClob = rs.getClob(1);
         }
+		
+        /*
+         * We call it before the commit(); to cache the result
+         * DERBY-3574
+         */
+        clob.length();
+        shortClob.length();
+		
         rs.close();
         stmt.close();
         commit();
@@ -2412,6 +2428,14 @@ public void testBlobAfterCommit() throws Exception {
             if (blobLength == 26)
                 shortBlob = rs.getBlob(1);
         }
+		
+        /*
+         * We call it before the commit(); to cache the result
+         * DERBY-3574
+         */
+        blob.length();
+        shortBlob.length();
+		
         rs.close();
         stmt.close();
         commit();
@@ -2479,6 +2503,14 @@ public void testBlobAfterClosingConnection() throws Exception {
             if (blobLength == 26)
                 shortBlob = rs.getBlob(1);
         }
+		
+        /*
+         * We call it before the commit(); to cache the result
+         * DERBY-3574
+         */
+        blob.length();
+        shortBlob.length();
+		
         rs.close();
         rollback();
         getConnection().close();
