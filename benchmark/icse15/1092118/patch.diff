diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
index 8f179a1d..d5afdeff 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
@@ -203,10 +203,11 @@ private void rehash() {
 
         if (totalFieldCount >= fieldHash.length/2)
           rehash();
-      } else
+      } else {
         fp.fieldInfo.update(field.isIndexed(), field.isTermVectorStored(),
                             field.isStorePositionWithTermVector(), field.isStoreOffsetWithTermVector(),
                             field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());
+      }
 
       if (thisFieldGen != fp.lastGen) {
 
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfo.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfo.java
index d7cb2177..c84220ca 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfo.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfo.java
@@ -54,6 +54,7 @@
       this.omitNorms = true;
       this.omitTermFreqAndPositions = false;
     }
+    assert !omitTermFreqAndPositions || !storePayloads;
   }
 
   @Override
@@ -64,6 +65,7 @@ public Object clone() {
 
   void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, 
               boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {
+
     if (this.isIndexed != isIndexed) {
       this.isIndexed = true;                      // once indexed, always index
     }
@@ -85,7 +87,9 @@ void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWit
       }
       if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {
         this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life
+        this.storePayloads = false;
       }
     }
+    assert !this.omitTermFreqAndPositions || !this.storePayloads;
   }
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfos.java
index 9ba09121..a71f5ff3 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FieldInfos.java
@@ -240,6 +240,7 @@ synchronized public FieldInfo add(String name, boolean isIndexed, boolean storeT
     } else {
       fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);
     }
+    assert !fi.omitTermFreqAndPositions || !fi.storePayloads;
     return fi;
   }
 
@@ -321,6 +322,7 @@ public void write(IndexOutput output) throws IOException {
     output.writeVInt(size());
     for (int i = 0; i < size(); i++) {
       FieldInfo fi = fieldInfo(i);
+      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;
       byte bits = 0x0;
       if (fi.isIndexed) bits |= IS_INDEXED;
       if (fi.storeTermVector) bits |= STORE_TERMVECTOR;
@@ -367,6 +369,13 @@ private void read(IndexInput input, String fileName) throws IOException {
       boolean storePayloads = (bits & STORE_PAYLOADS) != 0;
       boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;
       
+      // LUCENE-3027: past indices were able to write
+      // storePayloads=true when omitTFAP is also true,
+      // which is invalid.  We correct that, here:
+      if (omitTermFreqAndPositions) {
+        storePayloads = false;
+      }
+
       addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);
     }
 
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
index 04ab77b4..f3b1ec25 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
@@ -109,8 +109,10 @@ public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPer
 
         // Aggregate the storePayload as seen by the same
         // field across multiple threads
+        if (!fieldInfo.omitTermFreqAndPositions) {
         fieldInfo.storePayloads |= fields[i-start].hasPayloads;
       }
+      }
 
       // If this field has postings then add them to the
       // segment
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestOmitTf.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestOmitTf.java
index a7d4a977..aa7293f6 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestOmitTf.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestOmitTf.java
@@ -118,6 +118,7 @@ public void testMixedMerge() throws Exception {
             setMaxBufferedDocs(3).
             setMergePolicy(newLogMergePolicy(2))
     );
+    writer.setInfoStream(VERBOSE ? System.out : null);
     Document d = new Document();
         
     // this field will have Tf
