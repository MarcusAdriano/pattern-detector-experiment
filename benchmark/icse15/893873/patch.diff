diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/Cachetable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/Cachetable.java
index d2a7679d..5ffed819 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/Cachetable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/Cachetable.java
@@ -22,9 +22,9 @@
 
 import org.apache.log4j.Logger;
 
-public class Cachetable<K,V> implements ICachetable<K,V>
+public class Cachetable<K, V> implements ICachetable<K, V>
 {
-    private class CacheableObject<V>
+    private class CacheableObject
     {
         private V value_;
         private long age_;
@@ -35,11 +35,13 @@
             age_ = System.currentTimeMillis();
         }
 
+        @Override
         public boolean equals(Object o)
         {
             return value_.equals(o);
         }
 
+        @Override
         public int hashCode()
         {
             return value_.hashCode();
@@ -52,7 +54,7 @@ V getValue()
         
         boolean isReadyToDie(long expiration)
         {
-            return ( (System.currentTimeMillis() - age_) > expiration );
+            return ((System.currentTimeMillis() - age_) > expiration);
         }
     }
     
@@ -65,21 +67,24 @@ boolean isReadyToDie(long expiration)
             expiration_ = expiration;
         }
         
+        @Override
         public void run()
         {  
-            Map<K,V> expungedValues = new HashMap<K,V>();            
-            synchronized(cache_)
+            Map<K, V> expungedValues = new HashMap<K, V>();
+            synchronized (cache_)
             {
                 Enumeration<K> e = cache_.keys();
-                while( e.hasMoreElements() )
+                while (e.hasMoreElements())
                 {        
                     K key = e.nextElement();
-                    CacheableObject<V> co = cache_.get(key);
-                    if ( co != null && co.isReadyToDie(expiration_) )
+                    CacheableObject co = cache_.get(key);
+                    if (co != null && co.isReadyToDie(expiration_))
                     {
                         V v = co.getValue();
-                        if(null != v)
+                        if (null != v)
+                        {
                             expungedValues.put(key, v);
+                        }
                         cache_.remove(key);                                       
                     }
                 }
@@ -87,10 +92,10 @@ public void run()
             
             /* Calling the hooks on the keys that have been expunged */
             Set<K> keys = expungedValues.keySet();                                               
-            for ( K key : keys )
+            for (K key : keys)
             {                                
                 V value = expungedValues.get(key);
-                ICacheExpungeHook<K,V> hook = hooks_.remove(key);
+                ICacheExpungeHook<K, V> hook = hooks_.remove(key);
                 if (hook != null)
                 {
                     hook.callMe(key, value);
@@ -104,20 +109,22 @@ else if (globalHook_ != null)
         }
     }   
 
-    private ICacheExpungeHook<K,V> globalHook_;
-    private Hashtable<K, CacheableObject<V>> cache_;
-    private Map<K, ICacheExpungeHook<K,V>> hooks_;
+    private ICacheExpungeHook<K, V> globalHook_;
+    private Hashtable<K, CacheableObject> cache_;
+    private Map<K, ICacheExpungeHook<K, V>> hooks_;
     private Timer timer_;
     private static int counter_ = 0;
-    private static Logger logger_ = Logger.getLogger(Cachetable.class);
+    private static final Logger LOGGER = Logger.getLogger(Cachetable.class);
 
     private void init(long expiration)
     {
-        if ( expiration <= 0 )
+        if (expiration <= 0)
+        {
             throw new IllegalArgumentException("Argument specified must be a positive number");
+        }
 
-        cache_ = new Hashtable<K, CacheableObject<V>>();
-        hooks_ = new Hashtable<K, ICacheExpungeHook<K,V>>();
+        cache_ = new Hashtable<K, CacheableObject>();
+        hooks_ = new Hashtable<K, ICacheExpungeHook<K, V>>();
         timer_ = new Timer("CACHETABLE-TIMER-" + (++counter_), true);        
         timer_.schedule(new CacheMonitor(expiration), expiration, expiration);
     }
@@ -137,7 +144,7 @@ public Cachetable(long expiration)
      * a key has a key-specific hook installed invoke that
      * instead.
      */
-    public Cachetable(long expiration, ICacheExpungeHook<K,V> global)
+    public Cachetable(long expiration, ICacheExpungeHook<K, V> global)
     {
         init(expiration);
         globalHook_ = global;        
@@ -150,10 +157,10 @@ public void shutdown()
     
     public void put(K key, V value)
     {        
-        cache_.put(key, new CacheableObject<V>(value));
+        cache_.put(key, new CacheableObject(value));
     }
 
-    public void put(K key, V value, ICacheExpungeHook<K,V> hook)
+    public void put(K key, V value, ICacheExpungeHook<K, V> hook)
     {
         put(key, value);
         hooks_.put(key, hook);
@@ -162,8 +169,8 @@ public void put(K key, V value, ICacheExpungeHook<K,V> hook)
     public V get(K key)
     {
         V result = null;
-        CacheableObject<V> co = cache_.get(key);
-        if ( co != null )
+        CacheableObject co = cache_.get(key);
+        if (co != null)
         {
             result = co.getValue();
         }
@@ -172,9 +179,9 @@ public V get(K key)
 
     public V remove(K key)
     {
-        CacheableObject<V> co = cache_.remove(key);
+        CacheableObject co = cache_.remove(key);
         V result = null;
-        if ( co != null )
+        if (co != null)
         {
             result = co.getValue();
         }
@@ -193,7 +200,7 @@ public boolean containsKey(K key)
 
     public boolean containsValue(V value)
     {
-        return cache_.containsValue( new CacheableObject<V>(value) );
+        return cache_.containsValue(new CacheableObject(value));
     }
 
     public boolean isEmpty()
