diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
index 274588f7..0b1e833d 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
@@ -1347,17 +1347,15 @@ private void countScanFlags()
      * every ColumnReference in the predicate is itself a ColumnReference.
 	 *
 	 * This is useful when attempting to push predicates into non-flattenable
-	 * views or derived tables or into unions.
+	 * views or derived tables.
 	 *
 	 * @param select			The underlying SelectNode.
-	 * @param copyPredicate		Whether to make a copy of the predicate
-	 *							before pushing
 	 *
 	 * @return Nothing.
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	void pushExpressionsIntoSelect(SelectNode select, boolean copyPredicate)
+	void pushExpressionsIntoSelect(SelectNode select)
 		throws StandardException
 	{
 		/* Walk list backwards since we can delete while
@@ -1392,92 +1390,7 @@ void pushExpressionsIntoSelect(SelectNode select, boolean copyPredicate)
 				}
 			}
 
-			if (!state)
-				continue;
-
-			if (copyPredicate)
-			{
-				// Copy this predicate and push this instead
-				AndNode andNode = predicate.getAndNode();
-				ValueNode leftOperand;
-				ColumnReference crNode;
-				BinaryRelationalOperatorNode opNode=null;
-				InListOperatorNode inNode=null;
-
-				// Make sure we are only pushing binary relations and InList for
-				// copyPredicate case. It should be benificial to push expressions that
-				// can be pushed, so they can be applied closer to the data.
-
-				if (andNode.getLeftOperand() instanceof BinaryRelationalOperatorNode)
-				{
-					opNode = (BinaryRelationalOperatorNode) andNode.getLeftOperand();
-					// Investigate using invariant interface to check rightOperand
-					if (! (opNode.getLeftOperand() instanceof ColumnReference) ||
-					    ! (opNode.getRightOperand() instanceof ConstantNode ||
-							 opNode.getRightOperand() instanceof ParameterNode))
-						continue;
-
-					crNode = (ColumnReference) opNode.getLeftOperand();
-				}
-				else if (andNode.getLeftOperand() instanceof InListOperatorNode)
-				{
-					inNode = (InListOperatorNode) andNode.getLeftOperand();
-					if (! (inNode.getRightOperandList().isConstantExpression()))
-						continue;
-
-					crNode = (ColumnReference) inNode.getLeftOperand();
-				}
-				else
-					continue;
-
-				// Remap this crNode to underlying column reference in the select, if possible.
-				ColumnReference newCRNode = select.findColumnReferenceInResult(crNode.columnName);
-				if (newCRNode == null)
-					continue;
-
-				if (andNode.getLeftOperand() instanceof BinaryRelationalOperatorNode)
-				{
-					BinaryRelationalOperatorNode newEquals = (BinaryRelationalOperatorNode)
-							getNodeFactory().getNode(
-										C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
-										newCRNode,
-										opNode.getRightOperand(),
-										getContextManager());
-					newEquals.bindComparisonOperator();
-					leftOperand = newEquals;
-				}
-				else
-				{
-					InListOperatorNode newInNode = (InListOperatorNode)
-							getNodeFactory().getNode(
-								C_NodeTypes.IN_LIST_OPERATOR_NODE,
-								newCRNode,
-								inNode.getRightOperandList(),
-								getContextManager());
-					newInNode.setType(inNode.getTypeServices());
-					leftOperand = newInNode;
-				}
-
-				ValueNode trueNode = (ValueNode) getNodeFactory().getNode(
-										C_NodeTypes.BOOLEAN_CONSTANT_NODE,
-										Boolean.TRUE,
-										getContextManager());
-				AndNode newAnd = (AndNode) getNodeFactory().getNode(
-													C_NodeTypes.AND_NODE,
-													leftOperand,
-													trueNode,
-													getContextManager());
-				newAnd.postBindFixup();
-				JBitSet tableMap = new JBitSet(select.referencedTableMap.size());
-
-				// Use newly constructed predicate
-				predicate = (Predicate) getNodeFactory().getNode(
-												C_NodeTypes.PREDICATE,
-												newAnd,
-												tableMap,
-												getContextManager());
-			}
-			else
+			if (state)
 			{
 				// keep the counters up to date when removing a predicate
 				if (predicate.isStartKey())
@@ -1493,12 +1406,11 @@ else if (andNode.getLeftOperand() instanceof InListOperatorNode)
 				predicate.clearScanFlags();
 				// Remove this predicate from the list
 				removeElementAt(index);
-			}
-
 			// Push it into the select
  			select.pushExpressionsIntoSelect(predicate);
 		}		
 	}
+	}
 
 	/**
 	 * Mark all of the RCs and the RCs in their RC/VCN chain
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
index 51f60fba..5175d630 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
@@ -953,20 +953,9 @@ public void pushExpressions(PredicateList predicateList)
 		 */
 		if (pushPList != null && (childResult instanceof SelectNode))
 		{
-			pushPList.pushExpressionsIntoSelect((SelectNode) childResult, false);
+			pushPList.pushExpressionsIntoSelect((SelectNode) childResult);
 		}
 
-		/* DERBY-649: Push simple predicates into Unions. It would be up to UnionNode
-		 * to decide if these predicates can be pushed further into underlying SelectNodes
-		 * or UnionNodes.  Note, we also keep the predicateList at this
-		 * ProjectRestrictNode in case the predicates are not pushable or only
-		 * partially pushable.
-		 *
-		 * It is possible to expand this optimization in UnionNode later.
-		 */
-		if (pushPList != null && (childResult instanceof UnionNode))
-			((UnionNode)childResult).pushExpressions(pushPList);
-
 		if (restrictionList == null)
 		{
 			restrictionList = pushPList;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index 11a57e50..1d9808be 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -293,47 +293,6 @@ public GroupByList getGroupByList()
 		return groupByList;
 	}
 
-	/**
-	 * Find colName in the result columns and return underlying columnReference.
-	 * Note that this function returns null if there are more than one FromTable
-	 * for this SelectNode and the columnReference needs to be directly under
-	 * the resultColumn. So having an expression under the resultSet would cause
-	 * returning null.
-	 *
-	 * @param	colName		Name of the column
-	 *
-	 * @return	ColumnReference	ColumnReference to the column, if found
-	 */
-	public ColumnReference findColumnReferenceInResult(String colName)
-					throws StandardException
-	{
-		if (fromList.size() != 1)
-			return null;
-
-		// This logic is similar to SubQueryNode.singleFromBaseTable(). Refactor
-		FromTable ft = (FromTable) fromList.elementAt(0);
-		if (! ((ft instanceof ProjectRestrictNode) &&
-		 		((ProjectRestrictNode) ft).getChildResult() instanceof FromBaseTable) &&
-				!(ft instanceof FromBaseTable))
-			return null;
-
-		// Loop through the result columns looking for a match
-		int rclSize = resultColumns.size();
-		for (int index = 0; index < rclSize; index++)
-		{
-			ResultColumn rc = (ResultColumn) resultColumns.elementAt(index);
-			if (! (rc.getExpression() instanceof ColumnReference))
-				return null;
-
-			ColumnReference crNode = (ColumnReference) rc.getExpression();
-
-			if (crNode.columnName.equals(colName))
-				return (ColumnReference) crNode.getClone();
-		}
-
-		return null;
-	}
-
 	/**
 	 * Return the whereClause for this SelectNode.
 	 *
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
index 35dd5218..85941165 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
@@ -257,46 +257,6 @@ public CostEstimate optimizeIt(Optimizer optimizer,
 		return costEstimate;
 	}
 
-	/**
-	 * DERBY-649: Handle pushing predicates into UnionNodes. It is possible to push
-	 * single table predicates that are binaryOperations or inListOperations. 
-	 *
-	 * Predicates of the form <columnReference> <RELOP> <constant> or <columnReference>
-	 * IN <constantList> are currently handled. Since these predicates would allow
-	 * optimizer to pick available indices, pushing them provides maximum benifit.
-	 *
-	 * It should be possible to expand this logic to cover more cases. Even pushing
-	 * expressions (like a+b = 10) into SELECTs would improve performance, even if
-	 * they don't allow use of index. It would mean evaluating expressions closer to
-	 * data and hence could avoid sorting or other overheads that UNION may require.
-	 *
-	 * Note that the predicates are not removed after pushing. This is to ensure if
-	 * pushing is not possible or only partially feasible.
-	 *
-	 * @param 	predicateList		List of single table predicates to push
-	 *
-	 * @return	Nothing
-	 *
-	 * @exception	StandardException		Thrown on error
-	 */
-	public void pushExpressions(PredicateList predicateList)
-					throws StandardException
-	{
-		// If left or right side is a UnionNode, further push the predicate list
-		// Note, it is OK not to push these predicates since they are also evaluated
-		// in the ProjectRestrictNode. There are other types of operations possible
-		// here in addition to UnionNode or SelectNode, like RowResultSetNode.
-		if (leftResultSet instanceof UnionNode)
-			((UnionNode)leftResultSet).pushExpressions(predicateList);
-		else if (leftResultSet instanceof SelectNode)
-			predicateList.pushExpressionsIntoSelect((SelectNode)leftResultSet, true);
-
-		if (rightResultSet instanceof UnionNode)
-			((UnionNode)rightResultSet).pushExpressions(predicateList);
-		else if (rightResultSet instanceof SelectNode)
-			predicateList.pushExpressionsIntoSelect((SelectNode)rightResultSet, true);
-	}
-
 	/**
 	 * @see Optimizable#modifyAccessPath
 	 *
