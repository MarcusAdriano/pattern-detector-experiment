diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/Blog.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/Blog.java
index e69de29b..e0eb7a64 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/Blog.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/Blog.java
@@ -0,0 +1,29 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+
+public interface Blog
+{
+  /**
+   * Gets the title of the blog
+   * @return currently returns the fixed value of "Aries Sample Blog"
+   */
+  String getBlogTitle();
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthor.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthor.java
index e69de29b..be3e3dc6 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthor.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthor.java
@@ -0,0 +1,56 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+import java.util.List;
+
+
+public interface BlogAuthor
+{
+  /** Get the author's display name 
+   *  @return the display name String
+   */
+  String getName();
+
+  /** Get the author's full name
+   *  @return the full name String
+   */
+  String getFullName();
+
+  /** Get the author's email address 
+   *  @return the email address String
+   */
+  String getEmailAddress();
+
+  /** Get the author's biography 
+   *  @return the biography String
+   */
+  String getBio();
+
+  /** Get the author's date of birth 
+   *  @return the date of birth String (dd-mm-yyyy) 
+   */
+  String getDateOfBirth();
+  
+  /**
+   * 
+   * @return a list of Blog Entries
+   */
+  List <? extends BlogEntry> getEntries();
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthorManager.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthorManager.java
index e69de29b..bc8115e5 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthorManager.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthorManager.java
@@ -0,0 +1,68 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+import java.text.ParseException;
+import java.util.List;
+
+
+public interface BlogAuthorManager
+{
+  /**
+   * Create an author.
+   * @param email the author's email address, this is used as the key in the database
+   * @param dob the author's date of birth
+   * @param name the author's full name
+   * @param displayName the author's display name
+   * @param bio the author's biography
+   * @throws ParseException
+   */
+  public void createAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException;
+  
+  /**
+   * Get all authors from the database.
+   * @return a List<Author> of all authors in the database
+   */
+  public List<? extends BlogAuthor> getAllAuthors();
+  
+  /**
+   * Get an individual author.
+   * @param emailAddress - the email address of the author to retrieve
+   * @return the author
+   */
+  public BlogAuthor getAuthor(String emailAddress);
+  
+  /**
+   * Delete an author from the database.
+   * @param emailAddress the email address of the author to delete
+   */
+  public void removeAuthor(String emailAddress);
+  
+  /**
+   * Update a specific author.
+   * @param email the email address of the author being updated.
+   * @param dob the new date of birth (as a string)
+   * @param name the new full name
+   * @param displayName the new display name
+   * @param bio the new biography
+   * @throws ParseException
+   */
+  public void updateAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException;
+  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogComment.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogComment.java
index e69de29b..58b9d595 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogComment.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogComment.java
@@ -0,0 +1,48 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+public interface BlogComment {
+	  /** Get comment 
+	   *  @return the String representing the comment 
+	   */
+	  String getComment();
+	  
+	  /** Get the author of the comment 
+	   *  @return the BlogAuthor instance 
+	   */
+	  BlogAuthor getAuthor();
+	  
+	  /** Get the parent blog post for the comment 
+	   *  @return the BlogPost instance the comment is attached to.  
+	   */
+	  BlogEntry getEntry();
+
+	  /** Get the Id value of the comment 
+	   *  @return the integer id of the comment 
+	   */
+	  int getId();
+	  
+	  /** Get the creation date for the comment 
+	   *  @return the String representation of the date the comment was
+	   *  created in dd-mm-yyyy format. 
+	   */
+	  String getCommentCreationDate();
+	  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogCommentManager.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogCommentManager.java
index e69de29b..b1f66804 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogCommentManager.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogCommentManager.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+import java.util.List;
+
+public interface BlogCommentManager {
+	/**
+	 * Create a comment by an author (email) against a post (Id)
+	 * @param comment
+	 * @param email
+	 * @param entryId
+	 */
+	public void createComment(String comment, String email, long entryId);
+
+	/**
+	 * Get all the comments made by an author
+	 * @param email
+	 * @return a list of comments made by an author
+	 */
+	public List<? extends BlogComment> getCommentsByAuthor(String email);
+
+	/**
+	 * 
+	 * @param id
+	 * @return A list of comments made about an entry
+	 */
+	public List<? extends BlogComment> getCommentsForPost(long id); 
+
+	/**
+	 * Delete a specific comment using it's id
+	 * @param id
+	 */
+	public void deleteComment(int id);
+
+	/**
+	 * Check to see whether the comment service is available
+	 * @return
+	 */
+	public boolean isCommentingAvailable();
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntry.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntry.java
index e69de29b..4f777b0e 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntry.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntry.java
@@ -0,0 +1,61 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+import java.util.Date;
+
+public interface BlogEntry
+{
+  /** 
+   * Get the title of the blog posting.
+   * @return the title String
+   */
+  String getTitle();
+
+  /** 
+   * Get the body of the blog posting.
+   * @return the body content as a String
+   */
+  String getBody();
+
+  /** 
+   * Get the author of the blog entry.
+   * @return the author's display name or email address if display name is null
+   */
+  BlogAuthor getAuthor();
+
+  /**
+   * Get the email address of the author of the blog posting.
+   * @return the author's email address
+   */
+  String getAuthorEmail();
+
+  /**
+   * Get the publish date of a blog posting.
+   * @return the date of publish
+   */
+  public Date getPublishDate();
+
+  /**
+   * Get the Id value for the blog posting. 
+   * @return the id value
+   */
+  public long getId();
+  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java
index e69de29b..3a7d4617 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java
@@ -0,0 +1,111 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+import java.text.ParseException;
+import java.util.List;
+
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+
+public interface BlogEntryManager
+{
+  /**
+   * Create a blog posting.
+   * @param email the author's email
+   * @param title the title of the entry
+   * @param blogText the text of the entry
+   * @param tags tags associated with the blog entry
+   */
+  public void createBlogPost(String email, String title, String blogText, List<String> tags);
+  
+  /**
+   * Find a specific blog entry by title.
+   * @param title the title to search for
+   * @return the blog entry
+   */
+  public Entry findBlogEntryByTitle(String title);
+  
+  /**
+   * Retrieve all blog entries.
+   * @return a List<BlogEntry> of all blog entries
+   */
+  public List<? extends BlogEntry> getAllBlogEntries();
+  
+  /**
+   * Retrieve all blog entries for a specific author.
+   * @param emailAddress the email address of the author in question
+   * @return a List<BlogEntry>
+   */
+  public List<? extends BlogEntry> getBlogsForAuthor(String emailAddress);
+  
+  /**
+   * Retrieve all blog entries created between a specified date range.
+   * @param startDate the start date
+   * @param endDate the end date
+   * @return a List<BlogEntry>
+   * @throws ParseException
+   */
+  public List<?extends BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException;
+
+  /**
+   * Get N posts from the database starting at post number X
+   * 
+   * @param firstPostIndex the first post to retrieve
+   * @param noOfPosts the number of posts to retrieve in total
+   * @return a List<BlogEntry> of N posts
+   */
+  public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts);
+  
+  /**
+   * Get the total number of blog entries in the database
+   * @return the int number of entries
+   */
+  public int getNoOfPosts();
+  
+  /**
+   * Remove a specific blog entry.
+   * @param a the author of the blog entry
+   * @param title the title of the blog entry
+   * @param publishDate the publication date of the blog entry
+   * @throws ParseException
+   */
+  public void removeBlogEntry(BlogAuthor author, String title, String publishDate) throws ParseException;
+  
+  /**
+   * Update a blog entry.
+   * @param originalEntry the original blog entry
+   * @param a the author of the blog entry
+   * @param title the title of the blog entry
+   * @param publishDate the publication date of the blog entry
+   * @param blogText the text content of the blog entry
+   * @param tags any assocaited tags for the blog entry
+   * @throws ParseException
+   */
+  public void updateBlogEntry(BlogEntry originalEntry, BlogAuthor a, String title, String publishDate, String blogText, List<String> tags) throws ParseException;
+
+  
+  /**
+   * Get the specified blog posting.
+   * @param id the id of the blog posting
+   * @return the blog post
+   */
+  public BlogEntry getBlogPost(long id);
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BloggingService.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BloggingService.java
index e69de29b..07fe0b4c 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BloggingService.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BloggingService.java
@@ -0,0 +1,124 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.api;
+
+import java.util.List;
+
+public interface BloggingService
+{
+  /**
+   *  Get the blog
+   *  @return the title of the Blog
+   */
+  String getBlogTitle();
+
+  /** 
+   * Get the author associated with a given email address.
+   * 
+   * @param email the email address of interest
+   * @return the blog author with the supplied email address
+   */
+  BlogAuthor getBlogAuthor(String email);
+  
+  /**
+   * Get the blog post with the specified id.
+   * 
+   * @param id the blog entry id
+   * @return the blog post
+   */
+  BlogEntry getBlogEntry(long id);
+
+
+  /**
+   * Update the attributes of an author.
+   * 
+   * @param email the email address of the author being updated
+   * @param nickName the display name for this author
+   * @param name the full name for this author
+   * @param bio the biography for this author
+   * @param dob the date of birth for this author
+   */
+  void updateBlogAuthor(String email, String nickName, String name, String bio, String dob);
+  
+  /**
+   * Get the number of entries(posts) in the blog
+   * @return the number of posts.
+   */
+  public int getNoOfEntries(); 
+  
+  /**
+   * Get the a number of entries starting at the teh first index
+   * @param firstPostIndex
+   * @param noOfPosts
+   * @return a list of BlogEntries
+   */
+  public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts);
+  
+  /**
+   * Get all the blog entries
+   * @return a lost of BlogEntrys
+   */
+  public List<? extends BlogEntry> getAllBlogEntries();
+
+  /**
+   * Create a new author.
+   * 
+   * @param email the author's email address
+   * @param nickName the author's display name
+   * @param name the author's full name
+   * @param bio the author's biography
+   * @param dob the author's date of birth
+   */
+  void createBlogAuthor(String email, String nickName, String name, String bio, String dob);
+  
+  /**
+   * 
+   * @param email the email address of the author
+   * @param title the title of the post
+   * @param blogText the test of the post
+   * @param tags list of tags associated with the post
+   */
+  void createBlogEntry(String email, String title, String blogText, String tags); 
+  
+  /**
+   * Retrieve the state of the blog commenting service
+   * 
+   * @return true if available else false
+   */
+  boolean isCommentingAvailable();
+  
+  /**
+   * Create a comment
+   * @param text
+   * @param email
+   * @param entryId
+   */
+  void createBlogComment(String text, String email, long entryId);
+  
+  /**
+   * Get the comments associated with an entry
+   * @param entry
+   * @return a list of comments for an entry (post)
+   */
+  List <? extends BlogComment> getCommentsForEntry(BlogEntry entry);
+  
+  
+  
+  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/BlogCommentService.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/BlogCommentService.java
index e69de29b..c3f3ac84 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/BlogCommentService.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/BlogCommentService.java
@@ -0,0 +1,57 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.comment.persistence.api;
+
+import java.util.List;
+
+public interface BlogCommentService {
+
+	  /**
+	   * Create a comment against a blog entry.
+	   * 
+	   * @param comment the comment text
+	   * @param author the author
+	   * @param blogEntry the blog entry against which we are commenting
+	   */
+	  void createComment(String comment, String authorEmail, long entryId);
+
+	  /**
+	   * Delete a blog entry comment
+	   * 
+	   * @param comment the comment being deleted.
+	   */
+	  void delete(int id);
+
+	  /**
+	   * Get comments for a given blog entry post.
+	   * 
+	   * @param id the blog entry id
+	   * @return a List<BlogComment> for the blog entry
+	   */
+	  List<? extends Comment> getCommentsForEntry(long id);
+
+	  /**
+	   * Get comments for a given author.
+	   * 
+	   * @param emailAddress the email address of the author
+	   * @return a List<BlogComment> for the given email address
+	   */
+	 List<? extends Comment> getCommentsForAuthor(String emailAddress);
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/Comment.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/Comment.java
index e69de29b..31a586d0 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/Comment.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/comment/persistence/api/Comment.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.comment.persistence.api;
+
+import java.util.Date;
+
+import org.apache.aries.samples.blog.persistence.api.Author;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+public interface Comment {
+	 /** Get comment 
+	   *  @return the String representing the comment 
+	   */
+	  String getComment();
+	  
+	  /** Get the author of the comment 
+	   *  @return the BlogAuthor instance 
+	   */
+	  Author getAuthor();
+	  
+	  /** Get the parent blog post for the comment 
+	   *  @return the BlogPost instance the comment is attached to.  
+	   */
+	  Entry getEntry();
+
+	  /** Get the Id value of the comment 
+	   *  @return the integer id of the comment 
+	   */
+	  int getId();
+	  
+	  /** Get the creation date for the comment 
+	   *  @return the String representation of the date the comment was
+	   *  created in dd-mm-yyyy format. 
+	   */
+	  Date getCreationDate();
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Author.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Author.java
index e69de29b..7dc557c5 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Author.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Author.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.persistence.api;
+
+import java.util.Date;
+import java.util.List;
+
+
+public interface Author {
+
+	/** Get the author's email address */
+	public String getEmail();
+
+	/** Get the author's full name */
+	public String getName();
+
+	/** Get the author's displayed name */
+	public String getDisplayName();
+
+	/** Get the author's biographical information */
+	public String getBio();
+
+	/** Get the author's date of birth */
+	public Date getDob();
+
+	/** Get the author's blog posts */
+	public List<? extends Entry> getEntries();
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/BlogPersistenceService.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/BlogPersistenceService.java
index e69de29b..1af5a950 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/BlogPersistenceService.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/BlogPersistenceService.java
@@ -0,0 +1,162 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.persistence.api;
+
+import java.util.Date;
+import java.util.List;
+
+
+
+/**
+ * This is the interface for the persistence layer of the blog
+ * application.  This persistence layer is registered in the service
+ * registry and is used by the main application layer. 
+ *
+ */
+public interface BlogPersistenceService
+{
+
+  /**
+   * Get all the blog entries in the data store
+   * @return a list of BlogEntry objects
+   */
+  public List<? extends Entry> getAllBlogEntries();
+
+  /**
+   * Get the number of blog entries in the data store
+   * @return the number of blog entries
+   */
+  public int getNoOfBlogEntries();
+
+  /**
+   * Get the first N most recent posts starting from post X
+   * @param firstPostIndex - The index of the first post to be retrieved
+   * @param no - The number of posts to be retrieved starting from firstPostIndex
+   */
+  public List<? extends Entry> getBlogEntries(int firstPostIndex, int no);
+
+  /**
+   * Get all the blog entries made by a particular
+   * author
+   * 
+   * @param emailAddress the author's email address
+   * @return a list of BlogEntry objects
+   */
+  public List<? extends Entry> getBlogsForAuthor(String emailAddress);
+
+  /**
+   * Get a BlogEntry that has a given title
+   * @param title the title of interest
+   * @return A BlogEntry with a specific title (or null if no entry exists in the
+   *         data store)
+   */
+  public Entry findBlogEntryByTitle(String title);
+
+  /**
+   * Get BlogEntries created or modified between two specified dates
+   * @param start  The Date defining the start of the time period
+   * @param end    The Date defining the end of the time period
+   * @return  A list of BlogEntry objects
+   */
+  public List<? extends Entry> getBlogEntriesModifiedBetween(Date start, Date end);
+
+  /**
+   * Obtain a given Blog post using its unique id.
+   * 
+   * @param postId the posts unique id.
+   * @return the Blog post.
+   */
+  public Entry getBlogEntryById(long postId);
+
+  /**
+   * Get the details for an author
+   * @param emailAddress the Author's email address
+   * @return An Author object
+   */
+  public Author getAuthor(String emailAddress);
+
+  /**
+   * Get all authors in the database
+   * @return a List of Authors
+   */
+  public List<? extends Author> getAllAuthors();
+
+  /**
+   * Create an author in the database
+   * 
+   * @param emailAddress
+   * 			The author's email address
+   * @param dob
+   *     		The author's date of birth
+   * @param name
+   *        	The author's name
+   * @param displayName
+   *        	??
+   * @param bio
+   *        	The author's bio.
+   */
+  public void createAuthor(String email, Date dob, String name, String displayName, String bio);
+
+  /**
+   * Create an Blog post in the database
+   * 
+   * @param a
+   * 			The author
+   * @param title
+   * 			The title of the post
+   * @param blogText
+   * 			The text of the post
+   * @param tags
+   * 			??
+   */
+  public void createBlogPost(String email, String title, String blogText, List<String> tags);
+
+  /**
+   * Update an author in the database
+   * @param 
+   */
+  public void updateAuthor(String email, Date dob, String name, String displayName, String bio);
+
+  /**
+   * Update an post in the database
+   * 
+   * @param email The author's email
+   * @param title The title of the post
+   * @param blogText The text of the blog
+   * @param tags The list of tags
+   * @param updatedDate The date the update was made
+   */
+  public void updateBlogEntry(long id, String email, String title, String blogText, List<String> tags, Date updatedDate);
+
+  /**
+   * Remove the author with the specified email address
+   * 
+   * @param emailAddress the email address of the author to remove
+   */
+  public void removeAuthor(String emailAddress);
+
+  /**
+   * Remove the specified BlogEntry, note that this must be a BlogEntry returned by
+   * this service.
+   * 
+   * @param id the unique id of the blog entry to remove
+   */
+  public void removeBlogEntry(long id);
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Entry.java b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Entry.java
index e69de29b..87c8334a 100644
--- a/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Entry.java
+++ b/incubator/aries/trunk/samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/persistence/api/Entry.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.persistence.api;
+
+import java.util.Date;
+import java.util.List;
+
+
+
+public interface Entry {
+
+	/** Get the author of this blog post */
+	public Author getAuthor();
+
+	/** Get the publish date of this blog post */
+	public Date getPublishDate();
+	
+	/** Get the title of this blog post */
+	public String getTitle();
+	
+	/** Get the tags for this blog post */
+	public List<String> getTags();
+	
+	/** Get the text for this blog post */
+	public String getBlogText();
+	
+	/** get the Blog post id */
+	public long getId();
+
+	/**
+	 * @return The date of the last update to this blog or null if it has never
+	 *         been modified
+	 */
+	public Date getUpdatedDate();
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java
index e69de29b..bc29c45b 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.persistence.api.Author;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+
+public class BlogAuthorImpl implements BlogAuthor
+{
+  private static Calendar cal = Calendar.getInstance();
+  private Author author;
+  
+  public BlogAuthorImpl(Author a)
+  {
+    author = a;
+  }
+
+  public String getBio()
+  {
+    return author.getBio();
+  }
+
+  public String getEmailAddress()
+  {
+    return author.getEmail();
+  }
+
+  public String getFullName()
+  {
+    return author.getName();
+  }
+
+  public String getName()
+  {
+    return author.getDisplayName();
+  }
+
+  public String getDateOfBirth()
+  {
+    Date dob = author.getDob();
+    
+    int year;
+    int month;
+    int date;
+    
+    synchronized (cal) {
+      cal.setTime(dob);
+      year = cal.get(Calendar.YEAR);
+      month = cal.get(Calendar.MONTH) + 1;
+      date = cal.get(Calendar.DATE);
+    }
+    
+    return year + "-" + month + "-" + date;
+  }
+  
+	public List<? extends BlogEntry> getEntries() {
+		return adapt(author.getEntries());
+	}
+	
+	private List<? extends BlogEntry> adapt (List<? extends Entry> list) {
+		List<BlogEntryImpl> bei = null;;
+		return bei;
+	}
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java
index e69de29b..3c4e36bc 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java
@@ -0,0 +1,98 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.*;
+import org.apache.aries.samples.blog.persistence.api.Author;
+import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
+
+
+
+public class BlogAuthorManagerImpl implements BlogAuthorManager
+{
+  private BlogPersistenceService persistenceService;
+
+  // Blueprint injection used to set the persistenceService
+  public void setPersistenceService(BlogPersistenceService persistenceService)
+  {
+    this.persistenceService = persistenceService;
+  }
+  
+  public void createAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
+  {
+    if(email == null) throw new IllegalArgumentException("Email must not be null");
+   
+    Date dateOfBirth;
+    
+	dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("dd-mm-yyyy").parse(dob);
+	
+    persistenceService.createAuthor(email, dateOfBirth, name, displayName, bio);
+  }
+  
+  public List<? extends BlogAuthor> getAllAuthors()
+  {
+	  List<? extends Author> authors = persistenceService.getAllAuthors();
+		return adaptAuthor(authors);
+  }
+  
+  public BlogAuthor getAuthor(String emailAddress)
+  {
+    if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
+    Author a = persistenceService.getAuthor(emailAddress);
+    if (a != null)
+		return new BlogAuthorImpl(a);
+	else
+		return null;
+  }
+  
+  public void removeAuthor(String emailAddress)
+  {
+    if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
+    persistenceService.removeAuthor(emailAddress);
+  }
+  
+  public void updateAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
+  { 
+	  if (email == null)
+			throw new IllegalArgumentException("Email must not be null");
+    Date dateOfBirth = (dob == null) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
+    persistenceService.updateAuthor(email, dateOfBirth, name, displayName, bio);
+  }
+  
+	private List<? extends BlogAuthor> adaptAuthor(
+			List<? extends Author> authors) {
+		List<BlogAuthorImpl> list = new ArrayList<BlogAuthorImpl>();
+
+		Iterator<? extends Author> a = authors.iterator();
+		while (a.hasNext()) {
+			list.add(new BlogAuthorImpl(a.next()));
+		}
+
+		return list;
+
+	}
+  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java
index e69de29b..2c9c31ea 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.Date;
+import java.util.Calendar;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogComment;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.comment.persistence.api.Comment;
+
+
+public class BlogCommentImpl implements BlogComment {
+	private static Calendar cal = Calendar.getInstance();
+	
+	private Comment comment;
+	
+	public BlogCommentImpl(Comment c) {
+		 comment = c;
+	}
+  /** Get comment 
+   *  @return the String representing the comment 
+   */
+  public String getComment() {
+	  return comment.getComment();
+  }
+  
+  /** Get the author of the comment 
+   *  @return the BlogAuthor instance 
+   */
+  public BlogAuthor getAuthor() {
+	  return new BlogAuthorImpl(comment.getAuthor());
+  }
+  
+  /** Get the parent blog post for the comment 
+   *  @return the BlogPost instance the comment is attached to.  
+   */
+  public BlogEntry getEntry() {
+	  return new BlogEntryImpl(comment.getEntry());
+  }
+
+  /** Get the Id value of the comment 
+   *  @return the integer id of the comment 
+   */
+  public int getId() {
+	  return comment.getId();
+  }
+  
+  /** Get the creation date for the comment 
+   *  @return the String representation of the date the comment was
+   *  created in dd-mm-yyyy format. 
+   */
+  public String getCommentCreationDate() {
+	  
+	  Date dc = comment.getCreationDate();
+	  int year;
+		int month;
+		int date;
+
+		synchronized (cal) {
+			cal.setTime(dc);
+			year = cal.get(Calendar.YEAR);
+			month = cal.get(Calendar.MONTH) + 1;
+			date = cal.get(Calendar.DATE);
+		}
+
+		return year + "-" + month + "-" + date;
+
+  }
+  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java
index e69de29b..80053515 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.aries.samples.blog.api.BlogComment;
+import org.apache.aries.samples.blog.api.BlogCommentManager;
+import org.apache.aries.samples.blog.comment.persistence.api.BlogCommentService;
+import org.apache.aries.samples.blog.comment.persistence.api.Comment;
+
+
+public class BlogCommentManagerImpl implements BlogCommentManager {
+	
+	private BlogCommentService commentService;
+	private boolean commentServiceValid;
+	
+	// Injected via blueprint
+	public void setCommentService(BlogCommentService bcs) {
+		commentService = bcs;
+	}
+
+
+	public void createComment(String comment, String email, long entryId) {
+		commentService.createComment(comment, email, entryId);
+	}
+
+	public List<? extends BlogComment> getCommentsByAuthor(String email) {
+		List<? extends Comment> comment = commentService.getCommentsForAuthor(email);
+		return adaptComment(comment);
+		
+	}		
+
+	public List<? extends BlogComment> getCommentsForPost(long id) {
+		List<? extends Comment> comment = commentService.getCommentsForEntry(id);
+		return adaptComment(comment);
+	}
+		
+
+	public void deleteComment(int id) {
+		commentService.delete(id);
+	}
+
+	private List<? extends BlogComment> adaptComment(
+			List<? extends Comment> comments) {
+		List<BlogComment> list = new ArrayList<BlogComment>();
+
+		Iterator<? extends Comment> c = comments.iterator();
+		while (c.hasNext()) {
+			list.add(new BlogCommentImpl(c.next()));
+			
+		}
+		return list;
+
+	}
+	
+	public boolean isCommentingAvailable() {
+		return commentServiceValid;
+	}
+	
+	public void blogServiceBound(BlogCommentService comment, Map props) {
+		commentServiceValid = true;
+	}
+
+	public void blogServiceUnbound(BlogCommentService comment, Map props) {
+
+	}
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java
index e69de29b..5d32a9d3 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java
@@ -0,0 +1,69 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.Date;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+/** Implementation of a BlogPast */
+public class BlogEntryImpl implements BlogEntry
+{
+  public Entry theEntry;
+
+  public BlogEntryImpl(Entry blogEntry)
+  {
+    theEntry = blogEntry;
+  }
+
+  public BlogAuthor getAuthor()
+  {
+    return new BlogAuthorImpl(theEntry.getAuthor());
+    
+  }
+
+  public String getBody()
+  {
+    return theEntry.getBlogText();
+  }
+
+  public String getTitle()
+  {
+    return theEntry.getTitle();
+  }
+
+  public String getAuthorEmail()
+  {
+    return theEntry.getAuthor().getEmail();
+  }
+  
+  public Date getPublishDate()
+  {
+    return theEntry.getPublishDate();
+  }
+  
+  public long getId()
+  {
+    return theEntry.getId();
+  }
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java
index e69de29b..77f0f067 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java
@@ -0,0 +1,168 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.api.BlogEntryManager;
+import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+
+public class BlogEntryManagerImpl implements BlogEntryManager
+{
+  private BlogPersistenceService persistenceService;
+  
+
+  // Injected via blueprint
+  public void setPersistenceService(BlogPersistenceService persistenceService)
+  {
+    this.persistenceService = persistenceService;
+  }
+  
+  
+  public void createBlogPost(String email, String title, String blogText, List<String> tags)
+  {
+    persistenceService.createBlogPost(email, title, blogText, tags);
+  }
+  
+  public Entry findBlogEntryByTitle(String title)
+  {
+    return persistenceService.findBlogEntryByTitle(title);
+  }
+  
+  public List<? extends BlogEntry> getAllBlogEntries()
+  {
+	  List<? extends Entry> entries = persistenceService.getAllBlogEntries();
+		return adaptEntries(entries);
+  }
+  
+  public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts)
+  { 
+	  List<? extends Entry> entries = persistenceService.getBlogEntries(firstPostIndex, noOfPosts);		   		      
+		return adaptEntries(entries);
+  }
+  
+  public List<? extends BlogEntry> getBlogsForAuthor(String emailAddress)
+  {
+		List <?extends Entry> entries= persistenceService.getBlogsForAuthor(emailAddress);
+		return adaptEntries(entries);
+    
+  }
+  
+  public List<? extends BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException
+  {
+    if(startDate == null || "".equals(startDate)) throw new IllegalArgumentException("A valid start date must be supplied");
+    if(endDate == null || "".equals(endDate)) throw new IllegalArgumentException("A valid end date must be supplied");
+    SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
+    Date start = sdf.parse(startDate);
+    Date end = sdf.parse(endDate);
+	List <? extends Entry> entries = persistenceService.getBlogEntriesModifiedBetween(start, end);
+	return adaptEntries(entries);
+  }
+  
+  public int getNoOfPosts()
+  {
+    return persistenceService.getNoOfBlogEntries();
+  }
+  
+  public void removeBlogEntry(BlogAuthor a, String title, String publishDate) throws ParseException
+  {
+    if(a == null) throw new IllegalArgumentException("An author must be specified");
+    if(title == null) title = "";
+    if(publishDate == null) throw new IllegalArgumentException("The article must have a publication date");
+    Date pubDate = parseDate(publishDate);
+    long found = -920234218060948564L;
+    
+    for(BlogEntry b : a.getEntries()) {
+      if(title.equals(b.getTitle()) && pubDate.equals(b.getPublishDate())){
+        found = b.getId();
+        break;
+      }
+    }
+    persistenceService.removeBlogEntry(found);
+  }
+  
+  public void updateBlogEntry(BlogEntry originalEntry, BlogAuthor a, String title, String publishDate, String blogText, List<String> tags) throws ParseException
+  {
+	
+	if (originalEntry.getAuthor() == null
+			|| originalEntry.getAuthorEmail() == null)
+		throw new IllegalArgumentException("An author must be specified");
+	if (title == null)
+		title = "";
+	if (publishDate == null)
+		throw new IllegalArgumentException(
+				"The article must have a publication date");
+	long found = -920234218060948564L;
+	Date pubDate = parseDate(publishDate);
+	for (BlogEntry b : getBlogsForAuthor(originalEntry.getAuthorEmail()
+			)) {
+		if (title.equals(b.getTitle())
+				&& pubDate.equals(b.getPublishDate())) {
+			found = b.getId();
+			break;
+		}
+	}
+
+	if (found == -920234218060948564L)
+		throw new IllegalArgumentException("No blog entry could be found");
+
+	String email = a.getEmailAddress();
+
+	if (tags == null) {
+		tags = new ArrayList<String>();
+	}
+
+	Date updatedDate = new Date(System.currentTimeMillis());
+
+	persistenceService.updateBlogEntry(found, email, title, blogText, tags,
+			updatedDate);
+  }
+  
+  private Date parseDate(String dateString) throws ParseException
+  {
+    SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
+    return sdf.parse(dateString);
+  }
+
+  
+  public BlogEntry getBlogPost(long id)
+  {
+    return new BlogEntryImpl(persistenceService.getBlogEntryById(id));
+  }
+  
+	private List <? extends BlogEntry> adaptEntries(List<? extends Entry> e) {
+		  List<BlogEntryImpl> posts = new ArrayList<BlogEntryImpl>();
+		    
+		    for (Entry entry : e) {
+		      posts.add(new BlogEntryImpl(entry));
+		    }
+		      
+		return posts;
+	}
+	
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java
index e69de29b..67d53eee 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java
@@ -0,0 +1,32 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import org.apache.aries.samples.blog.api.Blog;
+
+
+/** Implementation of Blog */
+public class BlogImpl implements Blog
+{
+  
+  public String getBlogTitle()
+  {
+    return "Sample Blog";
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java
index e69de29b..bbc28701 100644
--- a/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java
@@ -0,0 +1,127 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.text.ParseException;
+import java.util.Arrays;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogAuthorManager;
+import org.apache.aries.samples.blog.api.BlogComment;
+import org.apache.aries.samples.blog.api.BlogCommentManager;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.api.BlogEntryManager;
+import org.apache.aries.samples.blog.api.BloggingService;
+
+/** Implementation of the BloggingService */
+public class BloggingServiceImpl implements BloggingService {
+	private BlogEntryManager blogEntryManager;
+	private BlogAuthorManager blogAuthorManager;
+	private BlogCommentManager blogCommentManager;
+
+	// Injected via blueprint
+	public void setBlogEntryManager(BlogEntryManager blogPostManager) {
+		this.blogEntryManager = blogPostManager;
+	}
+
+	// Injected via blueprint
+	public void setBlogAuthorManager(BlogAuthorManager authorManager) {
+		this.blogAuthorManager = authorManager;
+	}
+	
+	// Injected via blueprint
+	public void setBlogCommentManager(BlogCommentManager commentManager) {
+		this.blogCommentManager = commentManager;
+	}
+
+
+	public String getBlogTitle() {
+		return new BlogImpl().getBlogTitle();
+	}
+
+	public BlogAuthor getBlogAuthor(String email) {
+		return blogAuthorManager.getAuthor(email);
+	}
+
+	public void createBlogAuthor(String email, String nickName, String name,
+			String bio, String dob) {
+		try {
+			blogAuthorManager.createAuthor(email, dob, name, nickName, bio);
+		} catch (ParseException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
+
+	public void updateBlogAuthor(String email, String nickName, String name,
+			String bio, String dob) {
+		try {
+			blogAuthorManager.updateAuthor(email, dob, name, nickName, bio);
+		} catch (ParseException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
+
+	public BlogEntry getPost(long id) {
+		return blogEntryManager.getBlogPost(id);
+	}
+
+	public List<? extends BlogEntry> getBlogEntries(int firstPostIndex,
+			int noOfPosts) {
+		return blogEntryManager.getBlogEntries(firstPostIndex, noOfPosts);
+
+	}
+
+	public List<? extends BlogEntry> getAllBlogEntries() {
+		return blogEntryManager.getAllBlogEntries();
+	}
+
+	public int getNoOfEntries() {
+		return blogEntryManager.getNoOfPosts();
+	}
+
+	public void createBlogEntry(String email, String title, String blogText,
+			String tags) {
+		blogEntryManager.createBlogPost(email, title, blogText, Arrays
+				.asList(tags.split(",")));
+	}
+
+	public void createBlogComment(String comment, String authorEmail, long id) {
+		blogCommentManager.createComment(comment, authorEmail, id);
+	}
+
+	public void deleteBlogComment(BlogComment comment) {
+		blogCommentManager.deleteComment(comment.getId());
+	}
+
+	public List<? extends BlogComment> getCommentsForEntry(BlogEntry entry) {
+		return blogCommentManager.getCommentsForPost(entry.getId());
+	}
+
+	public BlogEntry getBlogEntry(long id) {
+		return blogEntryManager.getBlogPost(id);
+	}
+	
+	public boolean isCommentingAvailable() {
+		return blogCommentManager.isCommentingAvailable();
+
+	}
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/ConnectionWrapper.java b/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/ConnectionWrapper.java
index e69de29b..cc3ac4d9 100644
--- a/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/ConnectionWrapper.java
+++ b/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/ConnectionWrapper.java
@@ -0,0 +1,312 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.datasource;
+
+import java.sql.Array;
+import java.sql.Blob;
+import java.sql.CallableStatement;
+import java.sql.Clob;
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.NClob;
+import java.sql.PreparedStatement;
+import java.sql.SQLClientInfoException;
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+import java.sql.SQLXML;
+import java.sql.Savepoint;
+import java.sql.Statement;
+import java.sql.Struct;
+import java.util.Map;
+import java.util.Properties;
+
+import javax.sql.XAConnection;
+import javax.transaction.Status;
+import javax.transaction.SystemException;
+import javax.transaction.Transaction;
+import javax.transaction.TransactionManager;
+import javax.transaction.xa.XAResource;
+
+/**
+ * This class is a wrapper around a {@link Connection} that performs
+ * enlistment/delistment of an {@link XAResource} from a transaction.
+ * 
+ * @see XADatasourceEnlistingWrapper
+ */
+public class ConnectionWrapper implements Connection {
+    private Connection connection;
+    
+    private XAConnection xaConnection;
+    
+    private TransactionManager tm;
+    
+    public ConnectionWrapper(XAConnection xaConnection, TransactionManager tm) {
+        try {
+            this.xaConnection = xaConnection;
+            this.tm = tm;
+            this.connection = xaConnection.getConnection();
+            
+            if (tm.getStatus() == Status.STATUS_ACTIVE) {
+                Transaction tx = tm.getTransaction();
+                tx.enlistResource(xaConnection.getXAResource());
+            }
+        } catch (Exception e) {
+            try {
+                if (tm != null)
+                    tm.setRollbackOnly();
+            } catch (IllegalStateException e1) {
+                e1.printStackTrace();
+            } catch (SystemException e1) {
+                e1.printStackTrace();
+            }
+        }
+    }
+
+    public void clearWarnings() throws SQLException {
+        connection.clearWarnings();
+    }
+
+    public void close() throws SQLException {
+        try {
+            if (tm.getStatus() == Status.STATUS_ACTIVE) {
+                Transaction tx = tm.getTransaction();
+                tx.delistResource(xaConnection.getXAResource(), XAResource.TMSUCCESS);
+            }
+        } catch (Exception e) {
+            try {
+                if (tm != null)
+                    tm.setRollbackOnly();
+            } catch (IllegalStateException e1) {
+                e1.printStackTrace();
+            } catch (SystemException e1) {
+                e1.printStackTrace();
+            }
+        }
+        
+        connection.close();
+    }
+
+    public void commit() throws SQLException {
+        connection.commit();
+    }
+
+    public Array createArrayOf(String typeName, Object[] elements)
+            throws SQLException {
+        return connection.createArrayOf(typeName, elements);
+    }
+
+    public Blob createBlob() throws SQLException {
+        return connection.createBlob();
+    }
+
+    public Clob createClob() throws SQLException {
+        return connection.createClob();
+    }
+
+    public NClob createNClob() throws SQLException {
+        return connection.createNClob();
+    }
+
+    public SQLXML createSQLXML() throws SQLException {
+        return connection.createSQLXML();
+    }
+
+    public Statement createStatement() throws SQLException {
+        return connection.createStatement();
+    }
+
+    public Statement createStatement(int resultSetType,
+            int resultSetConcurrency, int resultSetHoldability)
+            throws SQLException {
+        return connection.createStatement(resultSetType, resultSetConcurrency,
+                resultSetHoldability);
+    }
+
+    public Statement createStatement(int resultSetType, int resultSetConcurrency)
+            throws SQLException {
+        return connection.createStatement(resultSetType, resultSetConcurrency);
+    }
+
+    public Struct createStruct(String typeName, Object[] attributes)
+            throws SQLException {
+        return connection.createStruct(typeName, attributes);
+    }
+
+    public boolean getAutoCommit() throws SQLException {
+        return connection.getAutoCommit();
+    }
+
+    public String getCatalog() throws SQLException {
+        return connection.getCatalog();
+    }
+
+    public Properties getClientInfo() throws SQLException {
+        return connection.getClientInfo();
+    }
+
+    public String getClientInfo(String name) throws SQLException {
+        return connection.getClientInfo(name);
+    }
+
+    public int getHoldability() throws SQLException {
+        return connection.getHoldability();
+    }
+
+    public DatabaseMetaData getMetaData() throws SQLException {
+        return connection.getMetaData();
+    }
+
+    public int getTransactionIsolation() throws SQLException {
+        return connection.getTransactionIsolation();
+    }
+
+    public Map<String, Class<?>> getTypeMap() throws SQLException {
+        return connection.getTypeMap();
+    }
+
+    public SQLWarning getWarnings() throws SQLException {
+        return connection.getWarnings();
+    }
+
+    public boolean isClosed() throws SQLException {
+        return connection.isClosed();
+    }
+
+    public boolean isReadOnly() throws SQLException {
+        return connection.isReadOnly();
+    }
+
+    public boolean isValid(int timeout) throws SQLException {
+        return connection.isValid(timeout);
+    }
+
+    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+        return connection.isWrapperFor(iface);
+    }
+
+    public String nativeSQL(String sql) throws SQLException {
+        return connection.nativeSQL(sql);
+    }
+
+    public CallableStatement prepareCall(String sql, int resultSetType,
+            int resultSetConcurrency, int resultSetHoldability)
+            throws SQLException {
+        return connection.prepareCall(sql, resultSetType, resultSetConcurrency,
+                resultSetHoldability);
+    }
+
+    public CallableStatement prepareCall(String sql, int resultSetType,
+            int resultSetConcurrency) throws SQLException {
+        return connection.prepareCall(sql, resultSetType, resultSetConcurrency);
+    }
+
+    public CallableStatement prepareCall(String sql) throws SQLException {
+        return connection.prepareCall(sql);
+    }
+
+    public PreparedStatement prepareStatement(String sql, int resultSetType,
+            int resultSetConcurrency, int resultSetHoldability)
+            throws SQLException {
+        return connection.prepareStatement(sql, resultSetType,
+                resultSetConcurrency, resultSetHoldability);
+    }
+
+    public PreparedStatement prepareStatement(String sql, int resultSetType,
+            int resultSetConcurrency) throws SQLException {
+        return connection.prepareStatement(sql, resultSetType,
+                resultSetConcurrency);
+    }
+
+    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
+            throws SQLException {
+        return connection.prepareStatement(sql, autoGeneratedKeys);
+    }
+
+    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
+            throws SQLException {
+        return connection.prepareStatement(sql, columnIndexes);
+    }
+
+    public PreparedStatement prepareStatement(String sql, String[] columnNames)
+            throws SQLException {
+        return connection.prepareStatement(sql, columnNames);
+    }
+
+    public PreparedStatement prepareStatement(String sql) throws SQLException {
+        return connection.prepareStatement(sql);
+    }
+
+    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
+        connection.releaseSavepoint(savepoint);
+    }
+
+    public void rollback() throws SQLException {
+        connection.rollback();
+    }
+
+    public void rollback(Savepoint savepoint) throws SQLException {
+        connection.rollback(savepoint);
+    }
+
+    public void setAutoCommit(boolean autoCommit) throws SQLException {
+        connection.setAutoCommit(autoCommit);
+    }
+
+    public void setCatalog(String catalog) throws SQLException {
+        connection.setCatalog(catalog);
+    }
+
+    public void setClientInfo(Properties properties)
+            throws SQLClientInfoException {
+        connection.setClientInfo(properties);
+    }
+
+    public void setClientInfo(String name, String value)
+            throws SQLClientInfoException {
+        connection.setClientInfo(name, value);
+    }
+
+    public void setHoldability(int holdability) throws SQLException {
+        connection.setHoldability(holdability);
+    }
+
+    public void setReadOnly(boolean readOnly) throws SQLException {
+        connection.setReadOnly(readOnly);
+    }
+
+    public Savepoint setSavepoint() throws SQLException {
+        return connection.setSavepoint();
+    }
+
+    public Savepoint setSavepoint(String name) throws SQLException {
+        return connection.setSavepoint(name);
+    }
+
+    public void setTransactionIsolation(int level) throws SQLException {
+        connection.setTransactionIsolation(level);
+    }
+
+    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
+        connection.setTypeMap(map);
+    }
+
+    public <T> T unwrap(Class<T> iface) throws SQLException {
+        return connection.unwrap(iface);
+    }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/XADatasourceEnlistingWrapper.java b/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/XADatasourceEnlistingWrapper.java
index e69de29b..6e043ad1 100644
--- a/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/XADatasourceEnlistingWrapper.java
+++ b/incubator/aries/trunk/samples/blog/blog-datasource/src/main/java/org/apache/aries/samples/blog/datasource/XADatasourceEnlistingWrapper.java
@@ -0,0 +1,127 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.datasource;
+
+import java.io.PrintWriter;
+import java.io.Serializable;
+import java.sql.Connection;
+import java.sql.SQLException;
+
+import javax.sql.DataSource;
+import javax.sql.XAConnection;
+import javax.sql.XADataSource;
+import javax.transaction.TransactionManager;
+
+/**
+ * This class allows JDBC XA data sources to participate in global transactions,
+ * via the {@link ConnectionWrapper} that is returned. The only service provided
+ * is enlistment/delistment of the associated {@link XAResource} in transactions.
+ * Important consideration such as connection pooling and error handling are
+ * completely ignored.
+ *
+ */
+public class XADatasourceEnlistingWrapper implements DataSource, Serializable {
+    /** The serial version UID */
+    private static final long serialVersionUID = -3200389791205501228L;
+
+    private XADataSource wrappedDS;
+    
+    private transient TransactionManager tm;
+    
+    public Connection getConnection() throws SQLException
+    {
+      XAConnection xaConn = wrappedDS.getXAConnection();
+      Connection conn = getEnlistedConnection(xaConn);
+      
+      return conn;
+    }
+
+    public Connection getConnection(String username, String password) throws SQLException
+    {
+      XAConnection xaConn = wrappedDS.getXAConnection(username, password);
+      Connection conn = getEnlistedConnection(xaConn);
+      
+      return conn;
+    }
+
+    public PrintWriter getLogWriter() throws SQLException
+    {
+      return wrappedDS.getLogWriter();
+    }
+
+    public int getLoginTimeout() throws SQLException
+    {
+      return wrappedDS.getLoginTimeout();
+    }
+
+    public void setLogWriter(PrintWriter out) throws SQLException
+    {
+      wrappedDS.setLogWriter(out);
+    }
+
+    public void setLoginTimeout(int seconds) throws SQLException
+    {
+      wrappedDS.setLoginTimeout(seconds);
+    }
+
+    private Connection getEnlistedConnection(XAConnection xaConn) throws SQLException
+    {
+        return new ConnectionWrapper(xaConn, tm);
+    }
+
+    public void setDataSource(XADataSource dsToWrap)
+    {
+      wrappedDS = dsToWrap;
+    }
+
+
+    public void setTxManager(TransactionManager txMgr)
+    {
+      tm = txMgr;
+    }
+    
+    @Override
+    public boolean equals(Object other)
+    {
+      if (other == this) return true;
+      if (other == null) return false;
+      
+      if (other.getClass() == this.getClass()) {
+        return wrappedDS.equals(((XADatasourceEnlistingWrapper)other).wrappedDS);
+      }
+      
+      return false;
+    }
+    
+    @Override
+    public int hashCode()
+    {
+      return wrappedDS.hashCode();
+    }
+
+    public boolean isWrapperFor(Class<?> arg0) throws SQLException
+    {
+      return false;
+    }
+
+    public <T> T unwrap(Class<T> arg0) throws SQLException
+    {
+      return null;
+    }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java b/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java
index 9e1dca2a..f9402b56 100644
--- a/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java
@@ -1 +1,660 @@
   + target
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.persistence;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import javax.sql.DataSource;
+
+import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
+import org.apache.aries.samples.blog.persistence.entity.AuthorImpl;
+import org.apache.aries.samples.blog.persistence.entity.EntryImpl;
+
+/**
+ * This class is the implementation of the blogPersistenceService
+ */
+public class BlogPersistenceServiceImpl implements BlogPersistenceService {
+	private DataSource dataSource;
+	
+
+	/**
+	 * set data source
+	 */
+	public void setDataSource(DataSource dataSource) {
+		this.dataSource = dataSource;
+	}
+
+	/**
+	 * Create an author record
+	 * 
+	 * @param a
+	 *            The author object to be created
+	 * @throws ParseException
+	 * @throws ParseException
+	 */
+	public void createAuthor(String email, Date dob, String name,
+			String displayName, String bio) {
+		
+		
+		try {
+			Connection connection = dataSource.getConnection();
+			String sql = "INSERT INTO AUTHOR VALUES (?,?,?,?,?)";
+			
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ppsm.setString(1, email);
+			ppsm.setString(2, bio);
+			ppsm.setString(3, displayName);
+			if (dob != null)
+				ppsm.setDate(4, new java.sql.Date(dob.getTime()));
+			else
+				ppsm.setDate(4, null);
+			ppsm.setString(5, name);
+			int insertRows = ppsm.executeUpdate();
+			ppsm.close();
+			connection.close();
+			
+			if (insertRows != 1)
+				throw new IllegalArgumentException("The Author " + email
+						+ " cannot be inserted.");
+		} catch (SQLException e) {
+			e.printStackTrace();
+			throw new IllegalArgumentException(e.getMessage());
+		}
+
+	}
+
+	/**
+	 * Create a blog entry record
+	 * 
+	 * @param a 
+	 * 			The author
+	 * @param title 
+	 * 			The title of the post
+	 * @param blogText 
+	 * 			The text of the post
+	 * @param tags
+	 * 
+	 */
+	public void createBlogPost(String authorEmail, String title, String blogText,
+			List<String> tags) {
+		
+		AuthorImpl a = getAuthor(authorEmail);
+		
+		if(title == null) title = "";
+		Date publishDate = new Date(System.currentTimeMillis());
+		if(tags == null) tags = new ArrayList<String>();
+		
+
+		try {
+			Connection connection = dataSource.getConnection();
+			// let's find the max id from the blogentry table
+			String sql = "SELECT max(id) FROM BLOGENTRY";
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ResultSet rs = ppsm.executeQuery();
+			// we only expect to have one row returned
+			rs.next();
+
+			long max_id = rs.getLong(1);
+			ppsm.close();
+			
+			long post_id = max_id + 1;
+			sql = "INSERT INTO BLOGENTRY VALUES (?,?,?,?,?,?)";
+			
+		    ppsm = connection.prepareStatement(sql);
+			ppsm.setLong(1, post_id);
+			ppsm.setString(2, blogText);
+			if (publishDate != null)
+				ppsm
+						.setDate(3, new java.sql.Date(publishDate
+								.getTime()));
+			else
+				ppsm.setDate(3, null);
+			ppsm.setString(4, title);
+			
+		    ppsm.setDate(5, null);
+			ppsm.setString(6, a.getEmail());
+			int rows = ppsm.executeUpdate();
+			if (rows != 1)
+				throw new IllegalArgumentException(
+						"The blog entry record cannot be inserted: "
+								+ blogText);
+			ppsm.close();
+			
+			// insert a row in the relationship table
+
+			sql = "INSERT INTO Author_BlogEntry VALUES (?,?)";
+			ppsm = connection.prepareStatement(sql);
+			ppsm.setString(1, a.getEmail());
+			ppsm.setLong(2, post_id);
+
+			rows = ppsm.executeUpdate();
+			ppsm.close();
+			connection.close();
+			
+			if (rows != 1)
+				throw new IllegalArgumentException(
+						"The Author_BlogEntry record cannot be inserted: "
+								+ a.getEmail() + " , " + post_id);
+
+		} catch (SQLException sqle) {
+			sqle.printStackTrace();
+		}
+
+	}
+
+	/**
+	 * Find the blog entry record with the specified title
+	 * 
+	 * @param The title to be searched
+	 * @return The blogEntry record
+	 */
+	public EntryImpl findBlogEntryByTitle(String title) {
+
+		EntryImpl be = null;
+
+		String sql = "SELECT * FROM BlogEntry e WHERE e.title = '" + title
+				+ "'";
+
+		List<EntryImpl> blogEntries = findBlogs(sql);
+		
+		// just return the first blog entry for the time being
+		if ((blogEntries != null) && (blogEntries.size() > 0))
+			be = blogEntries.get(0);
+		return be;
+	}
+
+	/**
+	 * Return all author records in the Author table
+	 * 
+	 * @return the list of Author records
+	 */
+	public List<AuthorImpl> getAllAuthors() {
+		String sql = "SELECT * FROM Author";
+
+		List<AuthorImpl> list = findAuthors(sql);
+
+		return list;
+	}
+
+	/**
+	 * Return all blog entry records from BlogEntry table with the most recent
+	 * published blog entries first
+	 * 
+	 * @return a list of blogEntry object
+	 */
+	public List<EntryImpl> getAllBlogEntries() {
+		String sql = "SELECT * FROM BlogEntry b ORDER BY b.publishDate DESC";
+
+		List<EntryImpl> list = findBlogs(sql);
+
+		return list;
+	}
+
+	/**
+	 * Return the number of the blog entry records
+	 * 
+	 * @return the number of the blog Entry records
+	 */
+	public int getNoOfBlogEntries() {
+
+		int count = 0;
+
+		String sql = "SELECT count(*) FROM BLOGENTRY";
+		try {
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ResultSet rs = ppsm.executeQuery();
+			// we only expect to have one row returned
+			rs.next();
+			count = rs.getInt(1);
+			ppsm.close();
+			connection.close();
+
+		} catch (SQLException sqle) {
+			sqle.printStackTrace();
+		}
+		return count;
+	}
+
+	/**
+	 * Return the portion of blog Entries
+	 * 
+	 * @param firstPostIndex
+	 *            The index of the first blog entry to be returned
+	 * @param noOfPosts
+	 *            The number of blog entry to be returned
+	 * @return The list of the blog entry record
+	 */
+	public List<EntryImpl> getBlogEntries(int firstPostIndex, int noOfPosts) {
+		String sql = "SELECT * FROM BlogEntry b ORDER BY b.publishDate DESC";
+		List<EntryImpl> emptyList = new ArrayList<EntryImpl>();
+		List<EntryImpl> blogs = findBlogs(sql);
+		// we only return a portion of the list
+		if (blogs == null)
+			return emptyList;
+		// We need to make sure we won't throw IndexOutOfBoundException if the
+		// supplied
+		// index is out of the list range
+		int maximumIndex = blogs.size();
+		// if the first index is minus or greater than the last item index of
+		// the list, return an empty list
+		if ((firstPostIndex < 0) || (noOfPosts <= 0)
+				|| (firstPostIndex > maximumIndex))
+			return emptyList;
+		// return the required number of the blog entries or the available blog
+		// entries
+		int lastIndex = noOfPosts + firstPostIndex;
+		// we need to make sure we return the blog entries at most up to the
+		// final record
+
+		return (blogs.subList(firstPostIndex,
+				(lastIndex > maximumIndex) ? maximumIndex : lastIndex));
+
+	}
+
+	/**
+	 * Return the author with the specified email address
+	 * 
+	 * @param emailAddress
+	 *            The email address
+	 * @return The author record
+	 */
+	public AuthorImpl getAuthor(String emailAddress) {
+		String sql = "SELECT * FROM AUTHOR a where a.email='" + emailAddress
+				+ "'";
+		List<AuthorImpl> authors = findAuthors(sql);
+
+		if (authors.size() == 0)
+			return null;
+		else if (authors.size() > 1)
+			throw new IllegalArgumentException(
+					"Email address should be unique per author");
+
+		return authors.get(0); // just return the first author
+	}
+
+	/**
+	 * Return the blog entries modified between the date range of [start, end]
+	 * 
+	 * @param start
+	 *            The start date
+	 * @param end
+	 *            The end date
+	 * @return The list of blog entries
+	 */
+	public List<EntryImpl> getBlogEntriesModifiedBetween(Date start, Date end) {
+
+		// String sql = "SELECT * FROM BlogEntry b WHERE (b.updatedDate >= " +
+		// startTS +" AND b.updatedDate <= " + endTS + ") OR (b.publishDate >= "
+		// +startTS + " AND b.publishDate <= " + endTS +
+		// ") ORDER BY b.publishDate ASC";
+		String sql = "SELECT * FROM BlogEntry b WHERE (Date(b.updatedDate) BETWEEN '"
+				+ start
+				+ "' AND '"
+				+ end
+				+ "') OR (Date(b.publishDate) BETWEEN '"
+				+ start
+				+ "' AND  '"
+				+ end + "') ORDER BY b.publishDate ASC";
+
+		return findBlogs(sql);
+
+	}
+
+	/**
+	 * Return a list of blog entries belonging to the author with the specified
+	 * email address
+	 * 
+	 * @param emailAddress
+	 *            the author's email address
+	 * @return The list of blog entries
+	 */
+	public List<EntryImpl> getBlogsForAuthor(String emailAddress) {
+
+		String sql = "SELECT * FROM BlogEntry b WHERE b.AUTHOR_EMAIL='"
+				+ emailAddress + "'";
+		return findBlogs(sql);
+	}
+
+	/**
+	 * Update the author record
+	 * 
+	 * @param email
+	 * 			The email associated with an author
+	 * @param dob
+	 * 			The author's date of birth
+	 * @param name
+	 * 			the author's name
+	 * @param displayName
+	 * 			The displayName
+	 * @param bio
+	 * 			The aouthor's bio
+	 */
+	public void updateAuthor(String email, Date dob, String name,
+			String displayName, String bio) {
+
+		
+		String sql = "UPDATE AUTHOR a SET bio = ?, displayName = ?, dob = ?, name =? WHERE email ='"
+				+ email + "'";
+		int updatedRows = 0;
+		try {
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ppsm.setString(1, bio);
+			ppsm.setString(2, displayName);
+			if (dob != null)
+				ppsm.setDate(3, new java.sql.Date(dob.getTime()));
+			else
+				ppsm.setDate(3, null);
+			ppsm.setString(4, name);
+			updatedRows = ppsm.executeUpdate();
+			
+			ppsm.close();
+			connection.close();
+			
+			if (updatedRows != 1)
+				throw new IllegalArgumentException("The Author " + email
+						+ " cannot be updated.");
+		} catch (SQLException e) {
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * Update the blog entry record
+	 * 
+	 * 
+	 */
+	public void updateBlogEntry(long id, String email, String title, String blogText, List<String> tags, Date updatedDate) {
+		
+		if (id == -1)
+			throw new IllegalArgumentException(
+					"Not a BlogEntry returned by this interface");
+		EntryImpl b = getBlogEntryById(id);
+		String sql_se = "SELECT * FROM BLOGENTRY bp WHERE bp.id = " + id;
+		String email_old = null;
+		// let's find out the email address for the blog post to see whether the
+		// table Author_BlogEntry needs to be updated
+		// if the email is updated, we need to update the table Author_BlogEntry
+		// to reflect the change.
+		try {
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql_se);
+			ResultSet rs = ppsm.executeQuery();
+			// there should be just one record
+			rs.next();
+			email_old = rs.getString("AUTHOR_EMAIL");
+			ppsm.close();
+			connection.close();
+		} catch (SQLException sqle) {
+			sqle.printStackTrace();
+		}
+		String sql = "UPDATE BLOGENTRY bp SET bp.blogText = ?, bp.publishDate = ?, bp.title = ?, bp.updatedDate = ?, bp.AUTHOR_EMAIL = ? where bp.id = "
+				+ id;
+		int updatedRows = 0;
+		
+		try {
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ppsm.setString(1, blogText);
+			if (b.getPublishDate() != null)
+				ppsm
+						.setDate(2, new java.sql.Date(b.getPublishDate()
+								.getTime()));
+			else
+				ppsm.setDate(2, null);
+			ppsm.setString(3, b.getTitle());
+			if (b.getUpdatedDate() != null)
+				ppsm
+						.setDate(4, new java.sql.Date(b.getUpdatedDate()
+								.getTime()));
+			else
+				ppsm.setDate(4, null);
+
+			ppsm.setString(5, email);
+			updatedRows = ppsm.executeUpdate();
+			
+			ppsm.close();
+			
+			connection.close();
+
+			if (updatedRows != 1)
+				throw new IllegalArgumentException("The Blog " + b.getId()
+						+ " cannot be updated.");
+		} catch (SQLException e) {
+			e.printStackTrace();
+		}
+
+		// if the email address is changed, we need to need to update the
+		// relationship table Author_BlogEntry
+		if ((email_old != null) && (!!!email_old.equals(email))) {
+			// update the table Author_BlogEntry
+			String sql_ab = "UDPATE Author_BlogEntry ab SET ab.AUTHOR_EMAIL = '"
+					+ email + "'";
+			updatedRows = 0;
+			try {
+				Connection connection = dataSource.getConnection();
+				PreparedStatement ppsm = connection.prepareStatement(sql_ab);
+				updatedRows = ppsm.executeUpdate();
+				ppsm.close();
+                connection.close();
+				if (updatedRows != 1)
+					throw new IllegalArgumentException(
+							"The Author_BlogEntry with the postsID "
+									+ b.getId() + " cannot be updated.");
+			} catch (SQLException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+
+	/**
+	 * Delete the author record with the specified email address
+	 * 
+	 * @param emailAddress
+	 *            The author's email address
+	 * 
+	 */
+	public void removeAuthor(String emailAddress) {
+
+		// we need to remove the author and its blog entries
+
+		try {
+			String sql = "DELETE FROM BLOGENTRY bp WHERE bp.AUTHOR_EMAIL = '"
+					+ emailAddress + "'";
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ppsm.executeUpdate();
+			ppsm.close();
+			
+			// delete the records from Author_BlogEntry
+			sql = "DELETE FROM Author_BlogEntry ab WHERE ab.AUTHOR_EMAIL = '"
+					+ emailAddress + "'";
+			ppsm = connection.prepareStatement(sql);
+			ppsm.executeUpdate();
+			ppsm.close();
+
+			// delete the author record
+			sql = "DELETE FROM Author a WHERE a.EMAIL = '" + emailAddress + "'";
+			ppsm = connection.prepareStatement(sql);
+			ppsm.executeUpdate();
+			ppsm.close();
+			connection.close();
+
+		} catch (SQLException sqle) {
+			sqle.printStackTrace();
+		}
+
+	}
+
+	/**
+	 * Delete the blog entry record specified by the blogEntry
+	 * 
+	 * @param blogEntry
+	 *            the blog entry record to be deleted
+	 */
+	public void removeBlogEntry(long id) {
+		if (id == -1)
+			throw new IllegalArgumentException(
+					"Not a BlogEntry returned by this interface");
+
+		try {
+			String sql = "DELETE FROM BLOGENTRY bp WHERE bp.id = "
+					+ id;
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ppsm.executeUpdate();
+			ppsm.close();
+			// We also need to delete the records from Author_BlogEntry, as this
+			// table is a kind of link between author and blogentry record
+			sql = "DELETE FROM Author_BlogEntry ab WHERE ab.POSTS_ID = "
+					+ id;
+			ppsm = connection.prepareStatement(sql);
+			ppsm.executeUpdate();
+			ppsm.close();
+			connection.close();
+
+		} catch (SQLException sqle) {
+			sqle.printStackTrace();
+		}
+
+	}
+
+	/**
+	 * Return the blog entry record with the specified id
+	 * 
+	 * @param postId
+	 *            The blogEntry record id
+	 */
+	public EntryImpl getBlogEntryById(long postId) {
+		String sql = "SELECT * FROM BlogEntry b WHERE b.id = " + postId;
+		List<EntryImpl> blogs = findBlogs(sql);
+		if (blogs.size() == 0)
+			return null;
+		if (blogs.size() > 1)
+			throw new IllegalArgumentException("Blog id is not unique");
+		return blogs.get(0);
+	}
+
+	/**
+	 * Return a list of authors with the sql query
+	 * 
+	 * @param sql
+	 *            The SQL query
+	 * @return A list of author records
+	 */
+	private List<AuthorImpl> findAuthors(String sql) {
+		List<AuthorImpl> authorList = new ArrayList<AuthorImpl>();
+
+		try {
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+
+			ResultSet ars = ppsm.executeQuery();
+
+			while (ars.next()) {
+				AuthorImpl ar = new AuthorImpl();
+				ar.setBio(ars.getString("bio"));
+				ar.setDisplayName(ars.getString("displayName"));
+				ar.setDob(ars.getDate("dob"));
+				String email = ars.getString("email");
+				ar.setEmail(email);
+				ar.setName(ars.getString("name"));
+
+				// let's find the blog entries for the author
+				String sql_be = "SELECT * FROM BLOGENTRY be WHERE be.AUTHOR_EMAIL = '"
+						+ email + "'";
+				PreparedStatement ppsm2 = connection.prepareStatement(sql_be);
+				ResultSet rs = ppsm2.executeQuery();
+
+				List<EntryImpl> blogs = new ArrayList<EntryImpl>();
+				while (rs.next()) {
+					EntryImpl blog = new EntryImpl();
+					blog.setAuthor(ar);
+					blog.setId(rs.getLong("id"));
+					blog.setBlogText(rs.getString("blogText"));
+					blog.setPublishDate(rs.getDate("publishDate"));
+					blog.setTitle(rs.getString("title"));
+					blog.setUpdatedDate(rs.getDate("updatedDate"));
+					blogs.add(blog);
+				}
+				ar.setEntries(blogs);
+				authorList.add(ar);
+				ppsm2.close();
+			}
+		    ppsm.close();
+			connection.close();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return authorList;
+	}
+
+	/**
+	 * Return a list of blog entries with the sql query
+	 * 
+	 * @param sql
+	 *            The sql query to be executed
+	 * @return a list of blogEntry records
+	 */
+	private List<EntryImpl> findBlogs(String sql) {
+		List<EntryImpl> blogEntryList = new ArrayList<EntryImpl>();
+
+		try {
+			Connection connection = dataSource.getConnection();
+			PreparedStatement ppsm = connection.prepareStatement(sql);
+			ResultSet blogrs = ppsm.executeQuery();
+
+			while (blogrs.next()) {
+				EntryImpl be = new EntryImpl();
+				be.setId(blogrs.getLong("id"));
+				be.setBlogText(blogrs.getString("blogText"));
+				be.setPublishDate(blogrs.getDate("publishDate"));
+				be.setTitle(blogrs.getString("title"));
+				be.setUpdatedDate(blogrs.getDate("updatedDate"));
+				// find the author email address
+				String author_email = blogrs.getString("AUTHOR_EMAIL");
+				String author_sql = "SELECT * FROM Author a WHERE a.email ='"
+						+ author_email + "'";
+				List<AuthorImpl> authors = findAuthors(author_sql);
+				// there should be just one entry, as email is the primary key
+				// for the Author table
+				if (authors.size() != 1)
+					throw new IllegalArgumentException(
+							"We got more than one author with the same email address. This is wrong");
+				else
+					be.setAuthor(authors.get(0));
+				blogEntryList.add(be);
+			}
+			ppsm.close();
+			connection.close();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return blogEntryList;
+	}
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java b/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java
index e69de29b..4a8ff047 100644
--- a/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java
@@ -0,0 +1,125 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.aries.samples.blog.persistence.entity;
+
+import java.util.Date;
+import java.util.List;
+
+import org.apache.aries.samples.blog.persistence.api.Author;
+
+
+
+/**
+ * This class represents a blog post Author
+ */
+
+public class AuthorImpl implements Author
+{
+  /** The author's email address */
+
+
+  private String email;
+
+  /** The author's full name */
+  private String name;
+  /** The display name for this author */
+  private String displayName;
+  /** A short bio for this author */
+  private String bio;  
+  /** The Author's date of birth */
+  private Date dob;
+
+  /** The blog entries posted by this user */
+
+  private List<EntryImpl> posts;
+
+  /** Get the author's email address */
+  public String getEmail()
+  {
+    return email;
+  }
+
+  /** Set the author's email address */
+  public void setEmail(String email)
+  {
+    this.email = email;
+  }
+
+  /** Get the author's full name */
+  public String getName()
+  {
+    return name;
+  }
+
+  /** Set the author's full name */
+  public void setName(String name)
+  {
+    this.name = name;
+  }
+
+  /** Get the author's displayed name */
+  public String getDisplayName()
+  {
+    return displayName;
+  }
+
+  /** Set the author's displayed name */
+  public void setDisplayName(String displayName)
+  {
+    this.displayName = displayName;
+  }
+
+  /** Get the author's biographical information */
+  public String getBio()
+  {
+    return bio;
+  }
+
+  /** Set the author's biographical information */
+  public void setBio(String bio)
+  {
+    this.bio = bio;
+  }
+
+  /** Get the author's date of birth */
+  public Date getDob()
+  {
+    return dob;
+  }
+
+  /** Set the author's date of birth */
+  public void setDob(Date dob)
+  {
+    this.dob = dob;
+  }
+
+  /** Get the author's blog posts */
+  public List<EntryImpl> getEntries()
+  {
+    return posts;
+  }
+
+  /** Set the author's blog posts */
+  public void setEntries(List<EntryImpl> posts)
+  {
+    this.posts = posts;
+  }
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java b/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java
index e69de29b..892eac4c 100644
--- a/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java
@@ -0,0 +1,147 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.persistence.entity;
+
+import java.util.Date;
+import java.util.List;
+
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+
+/**
+ * This class represents a blog entry
+ */
+
+public class EntryImpl implements Entry
+{
+  /** An auto-generated primary key */
+
+  private Long id;
+
+  /** The author of the blog post */
+
+  private AuthorImpl author;
+
+  /** The date the post was published */
+  private Date publishDate;
+  /** The date the post was last updated */
+  private Date updatedDate;
+  /** The title of the post */
+  private String title;
+  /** Tags associated with the post */
+  private List<String> tags;
+  /** The text of the blog */
+
+  private String blogText;
+
+  /** Get the author of this blog post */
+  public AuthorImpl getAuthor()
+  {
+    return author;
+  }
+
+  /** Set the author of this blog post */
+  public void setAuthor(AuthorImpl author)
+  {
+    this.author = author;
+  }
+
+  /** Get the publish date of this blog post */
+  public Date getPublishDate()
+  {
+    return publishDate;
+  }
+
+  /** Set the publish date of this blog post */
+  public void setPublishDate(Date publishDate)
+  {
+    this.publishDate = publishDate;
+  }
+
+  /** Get the title of this blog post */
+  public String getTitle()
+  {
+    return title;
+  }
+
+  /** Set the title of this blog post */ 
+  public void setTitle(String title)
+  {
+    this.title = title;
+  }
+
+
+  /** Get the tags for this blog post */
+  public List<String> getTags()
+  {
+    return tags;
+  }
+
+  /** Set the tags for this blog post */
+  public void setTags(List<String> tags)
+  {
+    this.tags = tags;
+  }
+
+  /** Get the text for this blog post */
+  public String getBlogText()
+  {
+    return blogText;
+  }
+
+  /** Set the text for this blog post */
+  public void setBlogText(String blogText)
+  {
+    this.blogText = blogText;
+  }
+
+  /** get the Blog post id */
+  public long getId()
+  {
+    return id;
+  }
+
+  /** Set the id */
+  public void setId(Long id)
+  {
+    this.id = id;
+  }
+
+  /**
+   * @return The date of the last update to this blog
+   *         or null if it has never been modified
+   */
+  public Date getUpdatedDate()
+  {
+    return updatedDate;
+  }
+
+  /**
+   * Set the date that the blog post was last updated
+   * 
+   * @param updatedDate
+   */
+  public void setUpdatedDate(Date updatedDate)
+  {
+    this.updatedDate = updatedDate;
+  }
+
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java b/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java
index e69de29b..2a97a6ca 100644
--- a/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/BlogPersistenceServiceImpl.java
@@ -0,0 +1,213 @@
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.aries.samples.blog.persistence;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+import javax.persistence.Query;
+import javax.sql.DataSource;
+
+import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+import org.apache.aries.samples.blog.persistence.entity.AuthorImpl;
+import org.apache.aries.samples.blog.persistence.entity.EntryImpl;
+
+/**
+ * This class is the implementation of the blogPersistenceService
+ */
+public class BlogPersistenceServiceImpl implements BlogPersistenceService {
+
+	private EntityManager em;
+	private DataSource dataSource;
+	
+	public BlogPersistenceServiceImpl() {
+	}
+
+	
+	//@PersistenceContext(unitName = "blogExample")
+	public void setEntityManager(EntityManager e) {
+		em = e;
+	}
+	
+	public void setDataSource(DataSource dataSource) {
+		this.dataSource = dataSource;
+	}
+
+
+	public void createAuthor(String email, Date dob, String name,
+			String displayName, String bio) {
+		AuthorImpl a = new AuthorImpl();
+		a.setEmail(email);
+		a.setName(name);
+		a.setDisplayName(displayName);
+		a.setBio(bio);
+		a.setDob(dob);
+		em.persist(a);
+		
+	}
+
+	public void createBlogPost(String authorEmail, String title,
+			String blogText, List<String> tags) {
+
+		AuthorImpl a = em.find(AuthorImpl.class, authorEmail);
+		EntryImpl b = new EntryImpl();
+
+		Date publishDate = new Date(System.currentTimeMillis());
+
+		b.setBlogText(blogText);
+		b.setAuthor(a);
+		b.setTitle((title == null) ? "" : title);
+		b.setPublishDate(publishDate);
+		b.setTags((tags == null) ? new ArrayList<String>() : tags);
+
+		a.updateEntries(b);
+		em.persist(b);
+		em.merge(b.getAuthor());
+	}
+
+	public Entry findBlogEntryByTitle(String title) {
+		Query q = em
+				.createQuery("SELECT e FROM BLOGENTRY e WHERE e.title = ?1");
+		q.setParameter(1, title);
+		Entry b = (Entry) q.getSingleResult();
+		return b;
+	}
+
+	public List<AuthorImpl> getAllAuthors() {
+		@SuppressWarnings("unchecked")
+		List<AuthorImpl> list = em.createQuery("SELECT a FROM AUTHOR a")
+				.getResultList();
+
+		return list;
+	}
+
+	public List<EntryImpl> getAllBlogEntries() {
+		@SuppressWarnings("unchecked")
+		List<EntryImpl> list = em.createQuery(
+				"SELECT b FROM BLOGENTRY b ORDER BY b.publishDate DESC")
+				.getResultList();
+		return list;
+		
+	}
+
+	public int getNoOfBlogEntries() {
+		Number n = (Number) em.createQuery(
+				"SELECT COUNT(b) FROM BLOGENTRY b").getSingleResult();
+		return n.intValue();
+	}
+
+	public List<EntryImpl> getBlogEntries(int firstPostIndex, int noOfPosts) {
+		Query q = em
+				.createQuery("SELECT b FROM BLOGENTRY b ORDER BY b.publishDate DESC");
+		q.setFirstResult(firstPostIndex);
+		q.setMaxResults(noOfPosts);
+
+		@SuppressWarnings("unchecked")
+		List<EntryImpl> list = q.getResultList();
+
+		return list;
+	}
+
+	public AuthorImpl getAuthor(String emailAddress) {
+		AuthorImpl a = em.find(AuthorImpl.class, emailAddress);
+		return a;
+	}
+
+	public List<EntryImpl> getBlogEntriesModifiedBetween(Date start, Date end) {
+		Query q = em
+				.createQuery("SELECT b FROM BLOGENTRY b WHERE (b.updatedDate >= :start AND b.updatedDate <= :end) OR (b.publishDate >= :start AND b.publishDate <= :end) ORDER BY b.publishDate ASC");
+		q.setParameter("start", start);
+		q.setParameter("end", end);
+
+		@SuppressWarnings("unchecked")
+		List<EntryImpl> list = q.getResultList();
+
+		return list;
+	}
+	
+	public List<EntryImpl> getBlogsForAuthor(String emailAddress) {
+
+		List<EntryImpl> list = em.find(AuthorImpl.class, emailAddress)
+				.getEntries();
+		
+		return list;
+
+	}
+
+	public void updateAuthor(String email, Date dob, String name,
+			String displayName, String bio) {
+		AuthorImpl a = em.find(AuthorImpl.class, email);
+		a.setEmail(email);
+		a.setName(name);
+		a.setDisplayName(displayName);
+		a.setBio(bio);
+		a.setDob(dob);
+		em.merge(a);
+	}
+	
+	public void updateBlogEntry(long id, String email, String title,
+			String blogText, List<String> tags, Date updatedDate) {
+		EntryImpl b = em.find(EntryImpl.class, id);
+		b.setTitle(title);
+		b.setBlogText(blogText);
+		b.setTags(tags);
+		b.setUpdatedDate(updatedDate);
+
+		em.merge(b);
+	}
+
+	public void removeAuthor(String emailAddress) {
+		em.remove(em.find(AuthorImpl.class, emailAddress));
+	}
+
+	public void removeBlogEntry(long id) {
+		EntryImpl b = em.find(EntryImpl.class, id);
+		b = em.merge(b);
+		b.getAuthor().getEntries().remove(b);
+
+		em.remove(em.merge(b));
+		em.merge(b.getAuthor());
+
+	}
+
+	public EntryImpl getBlogEntryById(long postId) {
+		EntryImpl b =  em.find(EntryImpl.class, postId);
+		return b;
+	}
+
+	public void setPublishDate (long postId, Date date) {
+		//Added for testing
+		EntryImpl b = em.find(EntryImpl.class, postId);
+		b.setPublishDate(date);	
+		em.merge(b);
+	}
+	
+	public void setUpdatedDate (long postId, Date date) {
+		//Added for testing
+		EntryImpl b = em.find(EntryImpl.class, postId);
+		b.setUpdatedDate(date);	
+		em.merge(b);
+	}
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java b/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java
index e69de29b..f879e462 100644
--- a/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/AuthorImpl.java
@@ -0,0 +1,143 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.persistence.entity;
+
+
+import java.util.Date;
+import java.util.List;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.Id;
+import javax.persistence.OneToMany;
+import javax.persistence.OrderBy;
+import javax.persistence.Table;
+
+import org.apache.aries.samples.blog.persistence.api.Author;
+
+/**
+ * This class represents a blog post Author
+ */
+
+@Entity(name = "AUTHOR")
+@Table(name = "AUTHOR")
+public class AuthorImpl implements Author
+{
+  /** The author's email address */
+  @Id
+  @Column(nullable = false, unique = true)
+  private String email;
+  
+  /** The author's full name */
+  private String name;
+  /** The display name for this author */
+  private String displayName;
+  /** A short bio for this author */
+  private String bio;  
+  /** The Author's date of birth */
+  private Date dob;
+
+  /** The blog entries posted by this user */
+  @OneToMany(cascade = {CascadeType.REMOVE}, fetch = FetchType.EAGER)
+  @OrderBy("publishDate DESC")
+  private List<EntryImpl> posts;
+
+  /** Get the author's email address */
+  public String getEmail()
+  {
+    return email;
+  }
+
+  /** Get the author's full name */
+  public String getName()
+  {
+    return name;
+  } 
+  
+  /** Get the author's displayed name */
+  public String getDisplayName()
+  {
+    return displayName;
+  }
+
+  /** Get the author's biographical information */
+  public String getBio()
+  {
+    return bio;
+  }
+
+  /** Get the author's date of birth */
+  public Date getDob()
+  {
+    return dob;
+  } 
+
+  /** Get the author's blog posts */
+  public List<EntryImpl> getEntries()
+  {
+    return posts;
+  }
+  
+  // Set methods are not defined in the interface
+  
+  /** Set the author's email address */
+  public void setEmail(String email)
+  {
+    this.email = email;
+  }
+  
+  /** Set the author's full name */
+  public void setName(String name)
+  {
+    this.name = name;
+  }
+  
+  /** Set the author's displayed name */
+  public void setDisplayName(String displayName)
+  {
+    this.displayName = displayName;
+  }
+  
+  /** Set the author's biographical information */
+  public void setBio(String bio)
+  {
+    this.bio = bio;
+  }
+  
+  /** Set the author's date of birth */
+  public void setDob(Date dob)
+  {
+    this.dob = dob;
+  }
+
+  /** Update  the author's blog posts */
+  public void updateEntries(EntryImpl b)
+  {
+    this.posts.add(b);
+  }
+  
+  /** set  the author's blog posts */
+  public void setEntries(List<EntryImpl> lb)
+  {
+    this.posts = lb;
+  }
+  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java b/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java
index e69de29b..f2f19bad 100644
--- a/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java
+++ b/incubator/aries/trunk/samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/entity/EntryImpl.java
@@ -0,0 +1,158 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.persistence.entity;
+
+import java.util.Date;
+import java.util.List;
+
+import javax.persistence.Entity;
+import javax.persistence.Table;
+import javax.persistence.Id;
+import javax.persistence.GeneratedValue;
+import javax.persistence.FetchType;
+import javax.persistence.ManyToOne;
+import javax.persistence.Column;
+
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+
+/**
+ * This class represents a blog entry
+ */
+@Entity(name = "BLOGENTRY")
+@Table(name = "BLOGENTRY")
+public class EntryImpl implements Entry
+{
+  /** An auto-generated primary key */
+	@Id
+	@GeneratedValue
+  private Long id;
+
+  /** The author of the blog post */
+	@ManyToOne(fetch=FetchType.EAGER)
+  private AuthorImpl author;
+
+  /** The date the post was published */
+  private Date publishDate;
+  /** The date the post was last updated */
+  private Date updatedDate;
+  /** The title of the post */
+  private String title;
+  /** Tags associated with the post */
+  private List<String> tags;
+  /** The text of the blog */
+	@Column(length=10000)
+  private String blogText;
+
+  /** Get the author of this blog post */
+  public AuthorImpl getAuthor()
+  {
+    return author;
+  }
+
+  /** Set the author of this blog post */
+  public void setAuthor(AuthorImpl author)
+  {
+    this.author = author;
+  }
+
+  /** Get the publish date of this blog post */
+  public Date getPublishDate()
+  {
+    return publishDate;
+  }
+
+  /** Set the publish date of this blog post */
+  public void setPublishDate(Date publishDate)
+  {
+    this.publishDate = publishDate;
+  }
+
+  /** Get the title of this blog post */
+  public String getTitle()
+  {
+    return title;
+  }
+
+  /** Set the title of this blog post */ 
+  public void setTitle(String title)
+  {
+    this.title = title;
+  }
+
+
+  /** Get the tags for this blog post */
+  public List<String> getTags()
+  {
+    return tags;
+  }
+
+  /** Set the tags for this blog post */
+  public void setTags(List<String> tags)
+  {
+    this.tags = tags;
+  }
+
+  /** Get the text for this blog post */
+  public String getBlogText()
+  {
+    return blogText;
+  }
+
+  /** Set the text for this blog post */
+  public void setBlogText(String blogText)
+  {
+    this.blogText = blogText;
+  }
+
+  /** get the Blog post id */
+  public long getId()
+  {
+    return id;
+  }
+
+  /** Set the id */
+  public void setId(Long id)
+  {
+    this.id = id;
+  }
+
+  /**
+   * @return The date of the last update to this blog
+   *         or null if it has never been modified
+   */
+  public Date getUpdatedDate()
+  {
+    return updatedDate;
+  }
+
+  /**
+   * Set the date that the blog post was last updated
+   * 
+   * @param updatedDate
+   */
+  public void setUpdatedDate(Date updatedDate)
+  {
+    this.updatedDate = updatedDate;
+  }
+
+
+}
+
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddComment.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddComment.java
index e69de29b..6f06c4d7 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddComment.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddComment.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+
+import org.apache.aries.samples.blog.api.BloggingService;
+import org.apache.aries.samples.blog.web.util.JNDIHelper;
+
+public class AddComment extends HttpServlet {
+	private static final long serialVersionUID = -920234218060948564L;
+	public static final String ERROR_MESSAGES_ID = "commentErrorMessages";
+
+	@Override
+	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+			throws ServletException, IOException {
+
+		// email address of the comment's author
+		String email = req.getParameter("email");
+		// the id of the blog entry to which this comment is associated
+		long postId = Long.parseLong(req.getParameter("postId"));
+		// the text of the comment
+		String text = req.getParameter("text");
+
+		BloggingService service = JNDIHelper.getBloggingService();
+
+		// retrieve the blog entry and create the associated comment
+
+		if (service.getBlogAuthor(email) != null) {
+			service.createBlogComment(text, email, postId);
+			resp.sendRedirect("ViewBlog");
+		} else {
+
+			if (email.equals(""))
+				addError(req, "The email field is required.");
+			else
+				addError(req, "The email filed is not valid.");
+			resp.sendRedirect("AddCommentForm?postId=" + postId);
+		}
+	}
+
+	public static void addError(HttpServletRequest req, String error) {
+		HttpSession session = req.getSession();
+		if (session != null) {
+			@SuppressWarnings("unchecked")
+			List<String> errors = (List<String>) session
+					.getAttribute(ERROR_MESSAGES_ID);
+
+			if (errors == null) {
+				errors = new ArrayList<String>();
+				session.setAttribute(ERROR_MESSAGES_ID, errors);
+			}
+
+			errors.add(error);
+		}
+	}
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddCommentForm.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddCommentForm.java
index e69de29b..161358a6 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddCommentForm.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddCommentForm.java
@@ -0,0 +1,107 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.List;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.aries.samples.blog.web.util.HTMLOutput;
+
+public class AddCommentForm extends HttpServlet{
+	private static final long serialVersionUID = 4989805137759774598L;
+	public static final String ERROR_MESSAGES_ID = "commentErrorMessages";
+	public static final String ID = "comment";
+
+
+	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+			throws ServletException, IOException {
+		PrintWriter out = resp.getWriter();
+		
+		String postId = checkPostId(req.getParameter("postId"));
+
+		// if we have a valid postId, display the add comment page
+		if (postId != null) {
+			HTMLOutput.writeHTMLHeaderPartOne(out, "Add Comment");
+			HTMLOutput.writeDojoUses(out, "dojo.parser", "dijit.dijit",
+					"dijit.Editor", "dijit.form.TextBox");
+
+			out.println("<script type=\"text/javascript\">");
+			out.println("function storeCommentContent() {");
+			out.println("var textBox = dijit.byId('textArea');");
+			out.println("var textArea = dojo.byId('text');");
+			out.println("textArea.value = textBox.getValue();");
+			out.println("}");
+			out.println("</script>");
+
+			HTMLOutput.writeHTMLHeaderPartTwo(out);
+			
+			List<String> errors = null;
+			if (req.getSession() != null)
+				errors = (List<String>) req.getSession().getAttribute(
+						ERROR_MESSAGES_ID);
+
+			if (errors != null) {
+				out.println("\t\t\t<div id=\"errorMessages\">");
+				for (String msg : errors) {
+					out.println("\t\t\t\t<div class=\"errorMessage\">" + msg
+							+ "</div>");
+				}
+
+				out.println("\t\t\t</div>");
+				req.getSession().removeAttribute("commentErrorMessages");
+			}
+
+			out
+					.println("<form name=\"createComment\" method=\"get\" action=\"AddComment\">");
+			out
+					.println("<div class=\"textEntry\"><textarea dojoType=\"dijit.Editor\" id=\"textArea\" name=\"textArea\"></textarea></div>");
+			out
+					.println("<div class=\"textEntry\"><label>Email <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"email\" /></label></div>");
+			out
+					.println("<input type=\"hidden\" name=\"text\" id=\"text\" value=\"\"/>");
+			out.print("<input type=\"hidden\" name=\"postId\" value=\"");
+			out.print(postId);
+			out.println("\"/>");
+			out
+					.println("<input class=\"submit\" type=\"submit\" value=\"Submit\" name=\"Submit\" onclick=\"storeCommentContent()\"/>");
+			out.println("</form>");
+
+			HTMLOutput.writeHTMLFooter(out);
+			
+		} else {
+			// otherwise show the blog
+			RequestDispatcher dispatch = getServletContext()
+					.getRequestDispatcher("ViewBlog");
+			dispatch.forward(req, resp);
+		}
+	}
+
+	private String checkPostId(String parameter) {
+		if (parameter != null && parameter.matches("^\\d*$"))
+			return parameter;
+		return null;
+	}
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntry.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntry.java
index e69de29b..6f4093f5 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntry.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntry.java
@@ -0,0 +1,76 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.IOException;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.aries.samples.blog.api.BloggingService;
+import org.apache.aries.samples.blog.web.util.FormServlet;
+import org.apache.aries.samples.blog.web.util.JNDIHelper;
+
+public class CreateBlogEntry extends HttpServlet
+{
+  private static final long serialVersionUID = -6484228320837122235L;
+
+  @Override
+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
+      IOException{
+        doPost(req,resp);
+  }
+  
+  @Override
+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
+      IOException
+  {
+    // new blog entry values
+    String email = req.getParameter("email");
+    String title = req.getParameter("title");
+    String text = req.getParameter("text");
+    String tags = req.getParameter("tags");
+    
+    BloggingService service = JNDIHelper.getBloggingService();
+    
+    if (service.getBlogAuthor(email) != null) {
+      service.createBlogEntry(email, title, text, tags);
+      resp.sendRedirect("ViewBlog");
+    } else {
+      storeParam(req, "email", email);
+      storeParam(req, "title", title);
+      storeParam(req, "text", text);
+      storeParam(req, "tags", tags);
+      
+      if (email.equals(""))
+        FormServlet.addError(req, "The email field is required.");
+      else
+        FormServlet.addError(req, "The author's email is not valid.");
+      
+      resp.sendRedirect("CreateBlogEntryForm");
+    }
+  }
+  
+  private void storeParam(HttpServletRequest req, String param, String value) 
+  {
+    FormServlet.storeParam(req, CreateBlogEntryForm.ID, param, value);
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntryForm.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntryForm.java
index e69de29b..14512e91 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntryForm.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntryForm.java
@@ -0,0 +1,79 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.PrintWriter;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.apache.aries.samples.blog.web.util.FormServlet;
+import org.apache.aries.samples.blog.web.util.HTMLOutput;
+
+
+public class CreateBlogEntryForm extends FormServlet
+{
+  private static final long serialVersionUID = -6484228320837122235L;
+  public static final String ID = "post";
+  
+  public CreateBlogEntryForm()
+  {
+    super(ID);
+  }
+  
+  @Override
+  protected String getPageTitle(HttpServletRequest req)
+  { 
+    return "Create Blog Post";
+  }
+
+  @Override
+  protected void writeForm(HttpServletRequest req, PrintWriter out)
+  {
+    String email = retrieveOrEmpty(req, "email");
+    String title = retrieveOrEmpty(req, "title");
+    String text = retrieveOrEmpty(req, "text");
+    String tags = retrieveOrEmpty(req, "tags");
+    
+    out.println("<form name=\"createPost\" method=\"post\" action=\"CreateBlogEntry\">");
+
+    out.println("<div class=\"textEntry\"><label>Title <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"title\" value=\"" + title + "\"/></label></div>");
+    out.println("<div class=\"textEntry\"><textarea dojoType=\"dijit.Editor\" id=\"text\" name=\"text\">" + text + "</textarea></div>");
+    out.println("<div class=\"textEntry\"><label>Email <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"email\" value=\"" + email + "\"/></label></div>");
+    out.println("<div class=\"textEntry\"><label>Tags &nbsp;<input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"tags\" value=\"" + tags + "\"/></label></div>");
+    
+    out.println("<input type=\"hidden\" name=\"text\" id=\"text\" value=\"\"/>");
+    out.println("<input class=\"submit\" type=\"submit\" value=\"Submit\" name=\"Submit\" onclick=\"storeBlogContent();return true;\"/>");
+    out.println("</form>");
+  }
+  
+  @Override
+  protected void writeCustomHeaderContent(HttpServletRequest req, PrintWriter out)
+  {
+    HTMLOutput.writeDojoUses(out, "dojo.parser", "dijit.dijit", "dijit.Editor", "dijit.form.TextBox"); 
+    
+    
+    out.println("<script type=\"text/javascript\">");
+    out.println("  function storeBlogContent() {");
+    out.println("    var textBox = dijit.byId('textArea');");
+    out.println("    var textArea = dojo.byId('text');");
+    out.println("    textArea.value = textBox.getValue();");
+    out.println("  }");
+    out.println("</script>");
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java
index e69de29b..42bd39d0 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.IOException;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.aries.samples.blog.api.BloggingService;
+import org.apache.aries.samples.blog.web.util.FormServlet;
+import org.apache.aries.samples.blog.web.util.JNDIHelper;
+
+public class EditAuthor extends HttpServlet
+{
+  private static final long serialVersionUID = -8881545878284864977L;
+
+  @Override
+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
+  {
+    doPost(req, resp);
+  }
+  
+  @Override
+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
+      IOException
+  {
+    // This method will update or create an author depending on the
+    // existence of the author in the database.
+    
+    // The authors email address is the key in the database, thus if
+    // the email address is not in the database we create this as a 
+    // new author.
+    
+    String email = req.getParameter("email");
+    String nickName = req.getParameter("nickName");
+    String name = req.getParameter("name");
+    String bio = req.getParameter("bio");
+    String dob = req.getParameter("dob");
+    
+    if (email == null || email.equals("")) {
+      storeParam(req, "email", email);
+      storeParam(req, "nickName", nickName);
+      storeParam(req, "name", name);
+      storeParam(req, "bio", bio);
+      storeParam(req, "dob", dob);
+      
+      FormServlet.addError(req, "The email field is required.");
+      resp.sendRedirect("EditAuthorForm");
+    } else {
+      BloggingService service = JNDIHelper.getBloggingService();
+
+      if (service.getBlogAuthor(email) != null) {
+        // do an update
+        service.updateBlogAuthor(email, nickName, name, bio, dob);
+      } else {
+        // do a create
+        service.createBlogAuthor(email, nickName, name, bio, dob);
+      } 
+      RequestDispatcher dispatch = getServletContext().getRequestDispatcher("/ViewAuthor");
+      dispatch.forward(req, resp);
+    }
+  }
+  
+    private void storeParam(HttpServletRequest req, String param, String value) 
+  {
+    FormServlet.storeParam(req, EditAuthorForm.ID, param, value);
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
index e69de29b..9c1da77d 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
@@ -0,0 +1,130 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BloggingService;
+import org.apache.aries.samples.blog.web.util.FormServlet;
+import org.apache.aries.samples.blog.web.util.HTMLOutput;
+import org.apache.aries.samples.blog.web.util.JNDIHelper;
+
+
+public class EditAuthorForm extends FormServlet
+{
+  private static final long serialVersionUID = 4996935653835900015L;
+  public static final String ID = "author";
+
+  public EditAuthorForm()
+  {
+    super(ID);
+  }
+  
+  @Override
+  protected void writeCustomHeaderContent(HttpServletRequest req, PrintWriter out)
+  {
+    HTMLOutput.writeDojoUses(out, "dijit.form.TextBox", "dijit.form.DateTextBox", "dijit.form.Textarea");
+  }
+
+  @Override
+  protected String getPageTitle(HttpServletRequest req) throws IOException
+  {
+    String pageTitle = "Create Author";
+    
+    BloggingService service = JNDIHelper.getBloggingService();
+    String email = getEmail(req);
+    
+    if (email != null && !!!"".equals(email)) {
+      BlogAuthor author = service.getBlogAuthor(email);
+      if (author != null) {
+        pageTitle = "Update " + author.getName() + "'s profile";
+      }
+    }
+    
+    return pageTitle;
+  }
+
+  private String getEmail(HttpServletRequest req)
+  {
+    String email = retrieveOrEmpty(req, "email");
+    if ("".equals(email)) {
+      email = req.getParameter("email");
+    }
+    return checkEmail(email);
+  }
+  
+  @Override
+  protected void writeForm(HttpServletRequest req, PrintWriter out) throws IOException
+  {
+    String name = retrieveOrEmpty(req, "name");
+    String nickName = retrieveOrEmpty(req, "nickName");
+    String bio = retrieveOrEmpty(req, "bio");
+    String dob = retrieveOrEmpty(req, "dob");
+    String email = getEmail(req);
+    
+    BloggingService service = JNDIHelper.getBloggingService();
+    
+    if (email != null && !!!"".equals(email)) {
+      BlogAuthor author = service.getBlogAuthor(email);
+      
+      if ("".equals(name))
+        name = author.getFullName();
+      if ("".equals(nickName))
+        nickName = author.getName();
+      if ("".equals(bio))
+        bio = author.getBio();
+      if ("".equals(dob))
+        dob = author.getDateOfBirth();
+    } else {
+      email = "";
+    }
+    
+    out.println("<form method=\"get\" action=\"EditAuthor\">");
+    
+    out.print("<div class=\"textEntry\"><label>Name <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"name\" value=\"");
+    out.print(name);
+    out.println("\"/></label></div>");
+    out.print("<div class=\"textEntry\"><label>Nickname <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"nickName\" value=\"");
+    out.print(nickName);
+    out.println("\"/></label></div>");
+    out.print("<div class=\"textEntry\"><label>Email <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"email\" value=\"");
+    out.print(email);
+    out.println("\"/></label></div>");
+    out.print("<div class=\"textEntry\"><label>Date of Birth <input dojoType=\"dijit.form.DateTextBox\" type=\"text\" name=\"dob\" required=\"true\" value=\"");
+    out.print(dob);
+    out.println("\"/></label></div>");
+    out.print("<div class=\"textEntry\"><label>Bio <textarea dojoType=\"dijit.form.Textarea\" style=\"width:300px\" name=\"bio\">");
+    out.print(bio);
+    out.println("</textarea></label></div>");
+
+    out.println("<input class=\"submit\" type=\"submit\" value=\"Submit\" name=\"Submit\"/>");
+    
+    out.println("</form>");
+  }
+  
+  private String checkEmail(String parameter)
+  {
+    if (parameter != null && parameter.matches("^(?:[a-zA-Z0-9_'^&amp;/+-])+(?:\\.(?:[a-zA-Z0-9_'^&amp;/+-])+)*@(?:(?:\\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\]?)|(?:[a-zA-Z0-9-]+\\.)+(?:[a-zA-Z]){2,}\\.?)$")) return parameter;
+    return null;
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewAuthor.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewAuthor.java
index e69de29b..93bf2ddd 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewAuthor.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewAuthor.java
@@ -0,0 +1,87 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BloggingService;
+import org.apache.aries.samples.blog.web.util.HTMLOutput;
+import org.apache.aries.samples.blog.web.util.JNDIHelper;
+
+
+
+public class ViewAuthor extends HttpServlet
+{
+  private static final long serialVersionUID = 3020369464892668248L;
+
+  @Override
+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
+      IOException
+  {
+    String email = req.getParameter("email");
+    
+    if (email == null || "".equals(email)) {
+      // TODO dispatch to another page
+    } else {
+      PrintWriter out = resp.getWriter();
+      
+      BloggingService service = JNDIHelper.getBloggingService();
+      
+      BlogAuthor author = service.getBlogAuthor(email);
+      
+      HTMLOutput.writeHTMLHeaderPartOne(out, author.getName());
+      
+      HTMLOutput.writeHTMLHeaderPartTwo(out);
+
+      out.println("<h3>Name</h3>");
+      out.print("<div class=\"text\">");
+      out.print(author.getFullName());
+      out.println("</div>");
+      out.println("<h3>Nick Name</h3>");
+      out.print("<div class=\"text\">");
+      out.print(author.getName());
+      out.println("</div>");
+      out.println("<h3>Email</h3>");
+      out.print("<div class=\"text\">");
+      out.print(author.getEmailAddress());
+      out.println("</div>");
+      out.println("<h3>DOB</h3>");
+      out.print("<div class=\"text\">");
+      out.print(author.getDateOfBirth());
+      out.println("</div>");
+      out.println("<h3>Bio</h3>");
+      out.print("<div class=\"text\">");
+      out.print(author.getBio());
+      out.println("</div>");
+      
+      out.print("<a href=\"EditAuthorForm?email=");
+      out.print(author.getEmailAddress());
+      out.println("\">Edit Author Information</a>");
+      
+      HTMLOutput.writeHTMLFooter(out);
+    }
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewBlog.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewBlog.java
index e69de29b..78353cbf 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewBlog.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewBlog.java
@@ -0,0 +1,225 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.text.DateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.aries.samples.blog.api.BlogComment;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.api.BloggingService;
+import org.apache.aries.samples.blog.web.util.HTMLOutput;
+import org.apache.aries.samples.blog.web.util.JNDIHelper;
+
+
+
+public class ViewBlog extends HttpServlet
+{
+  private static final long serialVersionUID = -1854915218416871420L;
+  private static final int POSTS_PER_PAGE = 10;
+  
+  @Override
+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
+      IOException
+  {
+    PrintWriter out = resp.getWriter();
+
+    BloggingService service = JNDIHelper.getBloggingService();
+    
+    String blogTitle = service.getBlogTitle();
+
+    // TODO cope with the service being null, redirect elsewhere.
+
+    HTMLOutput.writeHTMLHeaderPartOne(out, blogTitle);
+    HTMLOutput.writeDojoUses(out, "dojo.parser");
+    
+    
+
+		HTMLOutput.writeHTMLHeaderPartTwo(out);
+
+    int maxPage = (service.getNoOfEntries()-1) / POSTS_PER_PAGE;
+    int pageNoInt = 0;
+    
+    String pageNo = req.getParameter("page");
+    if (pageNo != null) {
+      try {
+        pageNoInt = Integer.parseInt(pageNo)-1;
+
+        if (pageNoInt > maxPage)
+          pageNoInt = maxPage;
+        else if (pageNoInt < 0)
+          pageNoInt = 0;
+        
+      } catch (NumberFormatException e) {
+        e.printStackTrace();
+      }
+    }
+  
+    Iterator<? extends BlogEntry> posts = service.getBlogEntries(pageNoInt * POSTS_PER_PAGE, POSTS_PER_PAGE).iterator();
+    
+    out.println("<div class=\"links\"><a href=\"CreateBlogEntryForm\">Create New Post</a> <a href=\"EditAuthorForm\">Create Author</a></div>");
+    
+    Date currentDate = null;
+
+    for (int i = 0; posts.hasNext(); i++) {
+      BlogEntry post = posts.next();
+      
+      if (doesNotMatch(post.getPublishDate(), currentDate)) {
+        currentDate = post.getPublishDate();
+        out.print("<div class=\"postDate\">");
+        //out.print(DateFormat.getDateInstance(DateFormat.FULL).format(currentDate));
+        if (currentDate != null) {
+        	 out.print(DateFormat.getDateInstance(DateFormat.FULL).format(currentDate));          
+        }
+
+        out.println("</div>");
+      }
+      
+      out.print("\t\t<div class=\"post\" id=\"");
+      out.print(i);
+      out.println("\">");
+
+      out.print("\t\t\t<div class=\"postTitle\">");
+      out.print(post.getTitle());
+      out.print("</div>");
+      out.print("\t\t\t<div class=\"postBody\">");
+      out.print(post.getBody());
+      out.println("</div>");
+      out.print("\t\t\t<div class=\"postAuthor\"><a href=\"ViewAuthor?email=");
+      out.print(post.getAuthorEmail());
+      out.print("\">");
+      out.print(post.getAuthor().getFullName());
+      out.println("</a></div>");
+      
+      if (service.isCommentingAvailable()) {
+
+			out.print("<div class=\"links\"><a href=\"AddCommentForm?postId=");
+			out.print(post.getId());
+			out.print("\">Add Comment</a></div>");
+
+			List<? extends BlogComment> comments = service
+					.getCommentsForEntry(post);
+			int size = comments.size();
+			out.print("<div class=\"commentTitle\"");
+			if (size > 0) {
+				out.print("onclick=\"expand(");
+				out.print(post.getId());
+				out.print(")\"");
+			}
+			out.print(" style=\"cursor: pointer;\">Comments (");
+			out.print(size);
+			out.println(")</div>");
+
+			if (size > 0) {
+
+				out.print("<div id=\"comments");
+				out.print(post.getId());
+				out.println("\">");
+
+				for (BlogComment comment : comments) {
+					out.println("<div class=\"comment\">");
+
+					out.println(comment.getComment());
+
+					out.println("</div>");
+					out
+							.print("\t\t\t<div class=\"commentAuthor\"><a href=\"ViewAuthor?email=");
+					out.print(comment.getAuthor().getEmailAddress());
+					out.print("\">");
+					out.print(
+						comment.getAuthor().getName());
+					out.println("</a></div>");
+				}
+
+				out.println("</div>");
+			}
+		}
+
+     
+      out.println("\t\t</div>");
+    }
+    
+    /*
+     * Translate indices from 0-indexed to 1-indexed
+     */
+    writePager(out, pageNoInt+1, maxPage+1);
+
+    HTMLOutput.writeHTMLFooter(out);
+  }
+  
+  /**
+   * Write a paging bar (if there is more than a single page)
+   * 
+   * @param out
+   * @param currentPage Page number (indices starting from 1)
+   * @param maxPage (indices starting from 1)
+   */
+  private void writePager(PrintWriter out, int currentPage, int maxPage)
+  {
+    /*
+     * No paging is needed if we only have a single page
+     */
+    if (maxPage > 1) {
+      out.println("<div id=\"pagination\">");
+      
+      if (currentPage > 1) {
+        out.println("<a href=\"ViewBlog?page=1\">&lt;&lt;</a>");
+        out.println("<a href=\"ViewBlog?page="+(currentPage-1)+"\">&lt;</a>");
+      } else {
+        out.println("<span>&lt;&lt;</span>");
+        out.println("<span>&lt;</span>");
+      }
+      
+      out.println(currentPage + " of " + maxPage);
+  
+      if (currentPage < maxPage) {
+        out.println("<a href=\"ViewBlog?page="+(currentPage+1)+"\">&gt;</a>");
+        out.println("<a href=\"ViewBlog?page=" + maxPage + "\">&gt;&gt;</a>");
+      } else {
+        out.println("<span>&gt;&gt;</span>");
+        out.println("<span>&gt;</span>");        
+      }
+      
+      out.println("</div>");
+    }
+  }
+
+  private boolean doesNotMatch(Date publishDate, Date currentDate)
+  {
+    if (currentDate == null) return true;
+    Calendar publish = Calendar.getInstance();
+    Calendar current = Calendar.getInstance();
+    publish.setTime(publishDate);
+    current.setTime(currentDate);
+    boolean differentYear = publish.get(Calendar.YEAR) != current.get(Calendar.YEAR);
+    boolean differentMonth = publish.get(Calendar.MONTH) != current.get(Calendar.MONTH);
+    boolean differentDayOfMonth = publish.get(Calendar.DAY_OF_MONTH) != current.get(Calendar.DAY_OF_MONTH);
+    return differentYear || differentMonth || differentDayOfMonth;
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/FormServlet.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/FormServlet.java
index e69de29b..e5149090 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/FormServlet.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/FormServlet.java
@@ -0,0 +1,138 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web.util;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+
+
+
+public abstract class FormServlet extends HttpServlet
+{
+  private static final long serialVersionUID = -1019904995493434571L;
+  public static final String ERROR_MESSAGES_ID = "errorMessages";
+  private String id;
+  
+  public static void addError(HttpServletRequest req, String error)
+  {
+    HttpSession session = req.getSession();
+    if (session != null) {
+      @SuppressWarnings("unchecked")
+      List<String> errors = (List<String>) session.getAttribute(ERROR_MESSAGES_ID); 
+  
+      if (errors == null) {
+        errors = new ArrayList<String>();
+        session.setAttribute(ERROR_MESSAGES_ID, errors);
+      }
+      
+      errors.add(error);
+    }
+  }
+  
+  public static void storeParam(HttpServletRequest req, String id, String param, String value)
+  {
+    HttpSession session = req.getSession();
+    if (session != null)
+      session.setAttribute(id + ":" + param, value);
+  }
+  
+  protected FormServlet(String id)
+  {
+    this.id = id;
+  }
+  
+  protected abstract void writeCustomHeaderContent(HttpServletRequest req, PrintWriter out);
+  protected abstract void writeForm(HttpServletRequest req, PrintWriter out) throws IOException;
+  protected abstract String getPageTitle(HttpServletRequest req) throws IOException;
+  
+  protected String retrieveOrEmpty(HttpServletRequest req, String param)
+  {
+    HttpSession session = req.getSession();
+    String value = "";
+    if (session != null) { 
+      value = (String) session.getAttribute(id+":"+param);
+      if (value == null) {
+        value = "";
+      }
+    }
+    
+    return value;
+  }
+  
+  @Override
+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,IOException
+  {
+    PrintWriter out = resp.getWriter();
+
+    HTMLOutput.writeHTMLHeaderPartOne(out, getPageTitle(req));
+    writeCustomHeaderContent(req, out);
+    
+    List<String> errors = null;
+    if (req.getSession() != null)
+      errors = (List<String>) req.getSession().getAttribute(ERROR_MESSAGES_ID);
+    
+    if (errors == null) {    
+      try {
+		HTMLOutput.writeHTMLHeaderPartTwo(out);
+	} catch (Exception e) {
+		// TODO Auto-generated catch block
+		e.printStackTrace();
+	}
+    } else {
+      try {
+		HTMLOutput.writeHTMLHeaderPartTwo(out, errors);
+	} catch (Exception e) {
+		// TODO Auto-generated catch block
+		e.printStackTrace();
+	}
+    }
+    
+    writeForm(req, out);
+    
+    HTMLOutput.writeHTMLFooter(out);
+    cleanupSession(req);
+  }
+  
+  private void cleanupSession(HttpServletRequest req) 
+  {
+    HttpSession session = req.getSession();
+
+    if (session != null) {
+      @SuppressWarnings("unchecked")
+      Enumeration<String> names = session.getAttributeNames();
+      
+      while (names.hasMoreElements()) {
+        String name = names.nextElement();
+        if (name.startsWith(id+":"))
+          session.removeAttribute(name);
+      }
+      
+      session.removeAttribute("errorMessages");
+    }
+  }  
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
index e69de29b..526a8e6c 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
@@ -0,0 +1,200 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web.util;
+
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.Collection;
+
+/**
+ * Utility class to provide html headers, footers, dojo use and blogging
+ * service.
+ */
+public class HTMLOutput {
+
+	public static final void writeHTMLHeaderPartOne(PrintWriter out,
+			String pageTitle) {
+		out.println("<html>");
+		out.println(" <head>");
+
+		out
+				.println("  <link type=\"text/css\" rel=\"stylesheet\" href=\"style/blog.css\"></link>");
+		out.println("  <meta name=\"keywords\" content=\"...\">");
+		out.println("  <meta name=\"description\" content=\"...\">");
+
+		out.print("  <title>");
+		out.print(pageTitle);
+		out.println("  </title>");
+
+		out
+				.println("  <META http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">");
+		out.println(" </head>");
+		
+	}
+
+	public static final void writeDojoUses(PrintWriter out, String... modules) {
+		out
+				.println("<link rel=\"Stylesheet\" href=\"http://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dijit/themes/tundra/tundra.css\" type=\"text/css\" media=\"screen\"/>");
+		out
+				.println("<link rel=\"Stylesheet\" href=\"http://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dijit/themes/nihilo/nihilo.css\" type=\"text/css\" media=\"screen\"/>");
+		out
+				.println("<link rel=\"Stylesheet\" href=\"http://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dijit/themes/soria/soria.css\" type=\"text/css\" media=\"screen\"/>");
+	
+		out
+				.println("<script type=\"text/javascript\"  src=\"http://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dojo/dojo.xd.js\" djConfig=\"parseOnLoad: true\"></script>");
+		out.println("<script type=\"text/javascript\">");
+		out.println("dojo.require(\"dojo.parser\");");
+
+		for (String module : modules) {
+			out.print("dojo.require(\"");
+			out.print(module);
+			out.println("\");");
+		}
+
+		out.println("</script>");
+	}
+
+	public static final void writeHTMLHeaderPartTwo(PrintWriter out) {
+		writeHTMLHeaderPartTwo(out, new ArrayList<String>());
+	}
+
+	public static final void writeHTMLHeaderPartTwo(PrintWriter out,
+			Collection<String> errorMessages) {
+
+		out.println(" <body class=\"soria\">");
+
+		out
+				.println("  <TABLE width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">");
+		out.println("   <TR width=\"100%\">");
+		out.println("    <TD id=\"cell-0-0\" colspan=\"2\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-0-1\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-0-2\" colspan=\"2\">&nbsp;</TD>");
+		out.println("   </TR>");
+
+		out.println("   <TR width=\"100%\">");
+		out.println("    <TD id=\"cell-1-0\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-1-1\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-1-2\">");
+
+		out.println("     <DIV style=\"padding: 5px;\">");
+		out.println("      <DIV id=\"banner\">");
+
+		out
+				.println("       <TABLE border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">");
+		out.println("        <TR>");
+		out.println("         <TD align=\"left\" class=\"topbardiv\" nowrap=\"\">");
+		out
+				.println("          <A href=\"http://incubator.apache.org/aries/\" title=\"Apache Aries (incubating)\">");
+		out
+				.println("          <IMG border=\"0\" src=\"http://incubator.apache.org/aries/images/Arieslogo_Horizontal.gif\">");
+		out.println("          </A>");
+		out.println("         </TD>");
+		out.println("         <TD align=\"right\" nowrap=\"\">");
+		out
+				.println("          <A href=\"http://www.apache.org/\" title=\"The Apache Software Foundation\">");
+		out
+				.println("          <IMG border=\"0\" src=\"http://incubator.apache.org/aries/images/apache-incubator-logo.png\">");
+		out.println("          </A>");
+		out.println("         </TD>");
+		out.println("        </TR> ");
+		out.println("       </TABLE>");
+		out.println("      </DIV>");
+		out.println("     </DIV>");
+
+		out.println("     <DIV id=\"top-menu\">");
+		out
+				.println("      <TABLE border=\"0\" cellpadding=\"1\" cellspacing=\"0\" width=\"100%\">");
+		out.println("       <TR>");
+		out.println("        <TD>");
+		out.println("         <DIV align=\"left\">");
+		out.println("          <!-- Breadcrumbs -->");
+		out.println("          <!-- Breadcrumbs -->");
+		out.println("         </DIV>");
+		out.println("        </TD>");
+		out.println("        <TD>");
+		out.println("         <DIV align=\"right\">");
+		out.println("          <!-- Quicklinks -->");
+		out.println("           <p><a href=\"ViewBlog\" style=\"text-decoration: none; color: white\">Blog home</a></p>");
+		out.println("          <!-- Quicklinks -->");
+		out.println("         </DIV>");
+		out.println("        </TD>");
+		out.println("       </TR>");
+		out.println("      </TABLE>");
+		out.println("     </DIV>");
+		out.println("    </TD>");
+		out.println("    <TD id=\"cell-1-3\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-1-4\">&nbsp;</TD>");
+		out.println("   </TR>");
+
+		out.println("   <TR width=\"100%\">");
+		out.println("    <TD id=\"cell-2-0\" colspan=\"2\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-2-1\">");
+		out.println("     <TABLE>");
+		out.println("      <TR height=\"100%\" valign=\"top\">");
+		out.println("       <TD height=\"100%\"></td>");
+		out.println("       <TD height=\"100%\" width=\"100%\">");
+		out.println("        <H1>Apache Aries Sample Blog</H1><br>");
+
+		if (!!!errorMessages.isEmpty()) {
+			out.println("\t\t\t<div id=\"errorMessages\">");
+			for (String msg : errorMessages) {
+				out.println("\t\t\t\t<div class=\"errorMessage\">" + msg
+						+ "</div>");
+			}
+			out.println("\t\t\t</div>");
+		}
+
+		out.println("        <div id=\"mainContent\" class=\"mainContent\">");
+	}
+
+	public static final void writeHTMLFooter(PrintWriter out) {
+		out.println("         <BR>");
+		out.println("        </DIV>");
+		out.println("       </TD>");
+		out.println("      </TR>");
+		out.println("     </TABLE>");
+		out.println("    </TD>");
+		out.println("    <TD id=\"cell-2-2\" colspan=\"2\">&nbsp;</TD>");
+		out.println("   </TR>");
+		out.println("   <TR width=\"100%\">");
+
+		out.println("    <TD id=\"cell-3-0\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-3-1\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-3-2\">");
+		out.println("     <DIV id=\"footer\">");
+		out.println("     <!-- Footer -->");
+		out.println("     </DIV>");
+		
+		out.println("    </TD>");
+		out.println("    <TD id=\"cell-3-3\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-3-4\">&nbsp;</TD>");
+		out.println("   </TR>");
+		out.println("   <TR width=\"100%\">");
+		out.println("    <TD id=\"cell-4-0\" colspan=\"2\">&nbsp;</TD>");
+		out.println("    <TD id=\"cell-4-1\">&nbsp;</TD>");
+
+		out.println("    <TD id=\"cell-4-2\" colspan=\"2\">&nbsp;</TD>");
+		out.println("   </TR>");
+		out.println("  </TABLE>");
+		out.println(" </BODY>");
+		out.println("</HTML> ");
+
+	}
+
+}
diff --git a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/JNDIHelper.java b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/JNDIHelper.java
index e69de29b..828357a9 100644
--- a/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/JNDIHelper.java
+++ b/incubator/aries/trunk/samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/JNDIHelper.java
@@ -0,0 +1,43 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog.web.util;
+
+import java.io.IOException;
+
+import javax.naming.InitialContext;
+import javax.naming.NamingException;
+
+import org.apache.aries.samples.blog.api.BloggingService;
+
+public class JNDIHelper {
+	public static final BloggingService getBloggingService() throws IOException {
+		try {
+			InitialContext ic = new InitialContext();
+
+			return (BloggingService) ic.lookup("aries:services/"
+					+ BloggingService.class.getName());
+		} catch (NamingException e) {
+			e.printStackTrace();
+			IOException ioe = new IOException(
+					"Blogging service resolution failed");
+			ioe.initCause(e);
+			throw ioe;
+		}
+	}
+}
