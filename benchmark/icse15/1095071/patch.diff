diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
index 19c86400..91f35b86 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
@@ -26,7 +26,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
@@ -237,5 +239,19 @@ public boolean isLive()
     {
         return !isMarkedForDelete();
     }
+
+    protected void validateName(CFMetaData metadata) throws MarshalException
+    {
+        AbstractType nameValidator = metadata.cfType == ColumnFamilyType.Super ? metadata.subcolumnComparator : metadata.comparator;
+        nameValidator.validate(name());
+    }
+
+    public void validateFields(CFMetaData metadata) throws MarshalException
+    {
+        validateName(metadata);
+        AbstractType valueValidator = metadata.getValueValidator(name());
+        if (valueValidator != null)
+            valueValidator.validate(value());
+    }
 }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index a68d0f98..e4e62c2d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -38,6 +38,7 @@
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.marshal.AbstractCommutativeType;
 import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.io.IColumnSerializer;
 import org.apache.cassandra.io.util.IIterableColumns;
 import org.apache.cassandra.utils.FBUtilities;
@@ -432,4 +433,18 @@ public long serializedSize()
             size += column.serializedSize();
         return size;
     }
+
+    /**
+     * Goes over all columns and check the fields are valid (as far as we can
+     * tell).
+     * This is used to detect corruption after deserialization.
+     */
+    public void validateColumnFields() throws MarshalException
+    {
+        CFMetaData metadata = metadata();
+        for (IColumn column : getSortedColumns())
+        {
+            column.validateFields(metadata);
+        }
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/CounterColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/CounterColumn.java
index b257c17c..ab587c21 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/CounterColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/CounterColumn.java
@@ -27,9 +27,11 @@
 
 import org.apache.log4j.Logger;
 
+import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.db.context.CounterContext;
 import org.apache.cassandra.db.context.IContext.ContextRelationship;
 import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
@@ -204,6 +206,15 @@ public int serializationFlags()
         return ColumnSerializer.COUNTER_MASK;
     }
 
+    @Override
+    public void validateFields(CFMetaData metadata) throws MarshalException
+    {
+        validateName(metadata);
+        // We cannot use the value validator as for other columns as the CounterColumnType validate a long,
+        // which is not the internal representation of counters
+        contextManager.validateContext(value());
+    }
+
     /**
      * Check if a given nodeId is found in this CounterColumn context.
      */
@@ -269,4 +280,5 @@ public static void removeOldShards(ColumnFamily cf, int gcBefore)
             }
         }
     }
+
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DeletedColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DeletedColumn.java
index 3f7c0dd0..8f2de11b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DeletedColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DeletedColumn.java
@@ -20,6 +20,8 @@
 
 import java.nio.ByteBuffer;
 
+import org.apache.cassandra.config.CFMetaData;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class DeletedColumn extends Column
@@ -71,4 +73,14 @@ public int serializationFlags()
     {
         return ColumnSerializer.DELETION_MASK;
     }
+
+    @Override
+    public void validateFields(CFMetaData metadata) throws MarshalException
+    {
+        validateName(metadata);
+        if (value().remaining() != 4)
+            throw new MarshalException("A tombstone value should be 4 bytes long");
+        if (getLocalDeletionTime() < 0)
+            throw new MarshalException("The local deletion time should not be negative");
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java
index cf9395cc..555d2b76 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java
@@ -22,7 +22,9 @@
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
 
+import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
@@ -137,4 +139,14 @@ public int serializationFlags()
     {
         return ColumnSerializer.EXPIRATION_MASK;
     }
+
+    @Override
+    public void validateFields(CFMetaData metadata) throws MarshalException
+    {
+        super.validateFields(metadata);
+        if (timeToLive <= 0)
+            throw new MarshalException("A column TTL should be > 0");
+        if (localExpirationTime < 0)
+            throw new MarshalException("The local expiration time should not be negative");
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
index 7e6d84fa..ad5a4420 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
@@ -22,7 +22,9 @@
 import java.security.MessageDigest;
 import java.util.Collection;
 
+import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.utils.FBUtilities;
 
 public interface IColumn
@@ -46,6 +48,7 @@
     public void updateDigest(MessageDigest digest);
     public int getLocalDeletionTime(); // for tombstone GC, so int is sufficient granularity
     public String getString(AbstractType comparator);
+    public void validateFields(CFMetaData metadata) throws MarshalException;
 
     /** clones the column, interning column names and making copies of other underlying byte buffers
      * @param cfs*/
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
index fc181a8a..7d127ee9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -29,7 +29,9 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
+import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.io.IColumnSerializer;
 import org.apache.cassandra.io.util.ColumnSortedMap;
 import org.apache.cassandra.io.util.DataOutputBuffer;
@@ -321,6 +323,15 @@ public int serializationFlags()
     {
         throw new UnsupportedOperationException("Super columns don't have a serialization mask");
     }
+
+    public void validateFields(CFMetaData metadata) throws MarshalException
+    {
+        metadata.comparator.validate(name());
+        for (IColumn column : getSubColumns())
+        {
+            column.validateFields(metadata);
+        }
+    }
 }
 
 class SuperColumnSerializer implements IColumnSerializer
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/context/CounterContext.java b/cassandra/trunk/src/java/org/apache/cassandra/db/context/CounterContext.java
index 326b1fc8..aff555c5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/context/CounterContext.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/context/CounterContext.java
@@ -21,6 +21,7 @@
 import java.security.MessageDigest;
 import java.util.*;
 
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.db.DBConstants;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.NodeId;
@@ -452,6 +453,13 @@ public ByteBuffer clearAllDelta(ByteBuffer context)
         return cleaned;
     }
 
+    public void validateContext(ByteBuffer context) throws MarshalException
+    {
+        int headerLength = headerLength(context);
+        if (headerLength < 0 || (context.remaining() - headerLength) %  STEP_LENGTH != 0)
+            throw new MarshalException("Invalid size for a counter context");
+    }
+
     /**
      * Update a MessageDigest with the content of a context.
      * Note that this skips the header entirely since the header information
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java
index 691f75bc..fbeb8227 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java
@@ -35,6 +35,7 @@
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.IColumn;
 import org.apache.cassandra.db.columniterator.IColumnIterator;
+import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.io.util.BufferedRandomAccessFile;
 import org.apache.cassandra.utils.Filter;
 
@@ -56,6 +57,8 @@
     // Used by lazilyCompactedRow, so that we see the same things when deserializing the first and second time
     private final int expireBefore;
 
+    private final boolean validateColumns;
+
     /**
      * Used to iterate through the columns of a row.
      * @param sstable SSTable we are reading ffrom.
@@ -71,10 +74,20 @@ public SSTableIdentityIterator(SSTableReader sstable, BufferedRandomAccessFile f
         this(sstable, file, key, dataStart, dataSize, false);
     }
 
-    public SSTableIdentityIterator(SSTableReader sstable, BufferedRandomAccessFile file, DecoratedKey key, long dataStart, long dataSize, boolean deserializeRowHeader)
+    /**
+     * Used to iterate through the columns of a row.
+     * @param sstable SSTable we are reading ffrom.
+     * @param file Reading using this file.
+     * @param key Key of this row.
+     * @param dataStart Data for this row starts at this pos.
+     * @param dataSize length of row data
+     * @param checkData if true, do its best to deserialize and check the coherence of row data
+     * @throws IOException
+     */
+    public SSTableIdentityIterator(SSTableReader sstable, BufferedRandomAccessFile file, DecoratedKey key, long dataStart, long dataSize, boolean checkData)
     throws IOException
     {
-        this(sstable.metadata, file, key, dataStart, dataSize, deserializeRowHeader, sstable, false);
+        this(sstable.metadata, file, key, dataStart, dataSize, checkData, sstable, false);
     }
 
     public SSTableIdentityIterator(CFMetaData metadata, BufferedRandomAccessFile file, DecoratedKey key, long dataStart, long dataSize, boolean fromRemote)
@@ -84,7 +97,7 @@ public SSTableIdentityIterator(CFMetaData metadata, BufferedRandomAccessFile fil
     }
 
     // sstable may be null *if* deserializeRowHeader is false
-    private SSTableIdentityIterator(CFMetaData metadata, BufferedRandomAccessFile file, DecoratedKey key, long dataStart, long dataSize, boolean deserializeRowHeader, SSTableReader sstable, boolean fromRemote)
+    private SSTableIdentityIterator(CFMetaData metadata, BufferedRandomAccessFile file, DecoratedKey key, long dataStart, long dataSize, boolean checkData, SSTableReader sstable, boolean fromRemote)
     throws IOException
     {
         this.file = file;
@@ -93,12 +106,13 @@ private SSTableIdentityIterator(CFMetaData metadata, BufferedRandomAccessFile fi
         this.dataSize = dataSize;
         this.expireBefore = (int)(System.currentTimeMillis() / 1000);
         this.fromRemote = fromRemote;
+        this.validateColumns = checkData;
         finishedAt = dataStart + dataSize;
 
         try
         {
             file.seek(this.dataStart);
-            if (deserializeRowHeader)
+            if (checkData)
             {
                 try
                 {
@@ -155,12 +169,19 @@ public IColumn next()
     {
         try
         {
-            return columnFamily.getColumnSerializer().deserialize(file, null, fromRemote, expireBefore);
+            IColumn column = columnFamily.getColumnSerializer().deserialize(file, null, fromRemote, expireBefore);
+            if (validateColumns)
+                column.validateFields(columnFamily.metadata());
+            return column;
         }
         catch (IOException e)
         {
             throw new IOError(e);
         }
+        catch (MarshalException e)
+        {
+            throw new IOError(new IOException("Error validating row " + key, e));
+        }
     }
 
     public void remove()
@@ -192,6 +213,17 @@ public ColumnFamily getColumnFamilyWithColumns() throws IOException
         file.seek(columnPosition - 4); // seek to before column count int
         ColumnFamily cf = columnFamily.cloneMeShallow();
         ColumnFamily.serializer().deserializeColumns(file, cf, false, fromRemote);
+        if (validateColumns)
+        {
+            try
+            {
+                cf.validateColumnFields();
+            }
+            catch (MarshalException e)
+            {
+                throw new IOException("Error validating row " + key, e);
+            }
+        }
         return cf;
     }
 
