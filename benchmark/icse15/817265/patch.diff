diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 915938fe..2af44bb4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -76,7 +76,6 @@
     private static Set<String> applicationColumnFamilies_ = new HashSet<String>();
     private static int flushMinThreads_ = 1;
     private static int flushMaxThreads_ = 1;
-    private static int bmtThreshold_ = 256;
 
     // Default descriptive names for introspection. The user can override
     // these choices in the config file. These are not case sensitive.
@@ -285,12 +284,6 @@ else if (commitLogSync_ == CommitLogSync.batch)
                 flushMaxThreads_ = Integer.parseInt(rawflushMaxThreads);
             }
 
-            String bmtThreshold = xmlUtils.getNodeValue("/Storage/BinaryMemtableSizeInMB");
-            if (bmtThreshold != null)
-            {
-                bmtThreshold_ = Integer.parseInt(bmtThreshold);
-            }
-
             /* TCP port on which the storage system listens */
             String port = xmlUtils.getNodeValue("/Storage/StoragePort");
             if ( port != null )
@@ -1012,8 +1005,4 @@ public static int getFlushMaxThreads()
         return flushMaxThreads_;
     }
 
-    public static int getBMTThreshold()
-    {
-        return bmtThreshold_;
-    }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
index 73cfcf19..b65ff0a3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
@@ -39,7 +39,8 @@
 public class BinaryMemtable
 {
     private static Logger logger_ = Logger.getLogger( Memtable.class );
-    private int threshold_ = DatabaseDescriptor.getBMTThreshold()*1024*1024;
+    private int threshold_ = DatabaseDescriptor.getMemtableSize()*1024*1024;
+    private int thresholdCount_ = (int)(DatabaseDescriptor.getMemtableObjectCount()*1024*1024);
     private AtomicInteger currentSize_ = new AtomicInteger(0);
 
     /* Table and ColumnFamily name are used to determine the ColumnFamilyStore */
@@ -72,7 +73,7 @@ void resolveSize(int oldSize, int newSize)
 
     boolean isThresholdViolated()
     {
-        if (currentSize_.get() >= threshold_ || columnFamilies_.size() > 50000)
+        if (currentSize_.get() >= threshold_ || columnFamilies_.size() > thresholdCount_)
         {
             if (logger_.isDebugEnabled())
               logger_.debug("CURRENT SIZE:" + currentSize_.get());
