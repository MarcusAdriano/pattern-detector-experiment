diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
index 9a7405c8..f3cfad2a 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
@@ -40,6 +40,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.classfile.VMOpcode;
 
 import java.lang.reflect.Modifier;
+import java.security.AccessController;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.classfile.VMDescriptor;
@@ -149,7 +150,15 @@ public ByteArray getClassBytecode() throws StandardException {
 		if (SanityManager.DEBUG) {
 			if (SanityManager.DEBUG_ON("DumpClassFile")) {
 				/* Dump the file in derby.system.home */
-				String systemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY,".");
+				String systemHome = (String )AccessController.doPrivileged
+				(new java.security.PrivilegedAction(){
+
+					public Object run(){
+						return System.getProperty(Property.SYSTEM_HOME_PROPERTY,".");
+
+					}
+				}
+				);				
 				writeClassFile(systemHome,false,null);
 			}
 		}
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/GClass.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/GClass.java
index 060748d3..a664b743 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/GClass.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/services/bytecode/GClass.java
@@ -32,8 +32,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.util.ByteArray;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 
 /**
  * This is a common superclass for the various impls.
@@ -72,20 +76,30 @@ protected void writeClassFile(String dir, boolean logMessage, Throwable t)
 
 		filename = filename + ".class";
 
-		File classFile = new File(dir,filename);
+		final File classFile = new File(dir,filename);
 
 		// find the error stream
 		HeaderPrintWriter errorStream = Monitor.getStream();
-
+		FileOutputStream fos = null;
+		try {
 		try {
-			FileOutputStream fis = new FileOutputStream(classFile);
-			fis.write(bytecode.getArray(),
+				fos =  (FileOutputStream)AccessController.doPrivileged(
+						new PrivilegedExceptionAction() {
+							public Object run()
+							throws FileNotFoundException {
+								return new FileOutputStream(classFile);
+							}
+						});
+			} catch (PrivilegedActionException pae) {
+				throw (FileNotFoundException)pae.getCause();
+			}
+			fos.write(bytecode.getArray(),
 				bytecode.getOffset(), bytecode.getLength());
-			fis.flush();
+			fos.flush();
 			if (logMessage) {
 				errorStream.printlnWithHeader("Wrote class "+getFullName()+" to file "+classFile.toString()+". Please provide support with the file and the following exception message: "+t);
 			}
-			fis.close();
+			fos.close();
 		} catch (IOException e) {
 			if (SanityManager.DEBUG)
 				SanityManager.THROWASSERT("Unable to write .class file", e);
