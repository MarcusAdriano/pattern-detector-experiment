diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
index 4a5eaf7a..5dbdf6c9 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
@@ -120,10 +120,14 @@ public IRStatistics evaluate(RecommenderBuilder recommenderBuilder,
               intersectionSize++;
             }
           }
-          precision.addDatum((double) intersectionSize / (double) at);
+          int numRecommendedItems = recommendedItems.size();
+          if (numRecommendedItems > 0) {
+            precision.addDatum((double) intersectionSize / (double) numRecommendedItems);
+          }
           recall.addDatum((double) intersectionSize / (double) numRelevantItems);
           if (numRelevantItems < prefs.length) {
-            fallOut.addDatum((double) (at - intersectionSize) / (double) (prefs.length - numRelevantItems));
+            fallOut.addDatum((double) (numRecommendedItems - intersectionSize) /
+                             (double) (prefs.length - numRelevantItems));
           }
         }
       }
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluatorImplTest.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluatorImplTest.java
index 01855522..6a01b8f0 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluatorImplTest.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluatorImplTest.java
@@ -38,9 +38,9 @@ public Recommender buildRecommender(DataModel dataModel) throws TasteException {
     RecommenderIRStatsEvaluator evaluator = new GenericRecommenderIRStatsEvaluator();
     IRStatistics stats = evaluator.evaluate(builder, model, null, 5, 0.2, 1.0);
     assertNotNull(stats);
-    assertEquals(0.2, stats.getPrecision(), EPSILON);
+    assertEquals(0.5, stats.getPrecision(), EPSILON);
     assertEquals(1.0, stats.getRecall(), EPSILON);
-    assertEquals(0.33333, stats.getF1Measure(), EPSILON);
+    assertEquals(0.6666666666666666, stats.getF1Measure(), EPSILON);
   }
 
 }
