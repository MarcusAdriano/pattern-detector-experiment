diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/ExactPhraseScorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/ExactPhraseScorer.java
index 7ea82313..c9d579e0 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/ExactPhraseScorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/ExactPhraseScorer.java
@@ -23,9 +23,9 @@
 
 final class ExactPhraseScorer extends PhraseScorer {
 
-  ExactPhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,
+  ExactPhraseScorer(Weight weight, TermPositions[] tps, int[] positions, Similarity similarity,
                     byte[] norms) throws IOException {
-    super(weight, tps, similarity, norms);
+    super(weight, tps, positions, similarity, norms);
   }
 
   protected final float phraseFreq() throws IOException {
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
index 457620e9..591738e9 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.Vector;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultipleTermPositions;
@@ -42,6 +43,7 @@
 public class PhrasePrefixQuery extends Query {
   private String field;
   private ArrayList termArrays = new ArrayList();
+  private Vector positions = new Vector();
 
   private int slop = 0;
 
@@ -66,6 +68,21 @@
    * @see PhraseQuery#add(Term)
    */
   public void add(Term[] terms) {
+      int position = 0;
+      if(positions.size() > 0)
+          position = ((Integer) positions.lastElement()).intValue() + 1;
+      
+      add(terms, position);
+  }
+  
+  /**
+   * Allows to specify the relative position of terms within the phrase.
+   * 
+   * @ see PhraseQuery#add(Term, int)
+   * @param terms
+   * @param position
+   */
+  public void add(Term[] terms, int position) {
     if (termArrays.size() == 0)
       field = terms[0].field();
     
@@ -78,6 +95,18 @@ public void add(Term[] terms) {
     }
 
     termArrays.add(terms);
+        positions.addElement(new Integer(position));
+  }
+  
+  /**
+   * Returns the relative positions of terms in this phrase.
+   * @return
+   */
+  public int[] getPositions() {
+      int[] result = new int[positions.size()];
+      for(int i = 0; i < positions.size(); i++)
+          result[i] = ((Integer) positions.elementAt(i)).intValue();
+      return result;
   }
 
   private class PhrasePrefixWeight implements Weight {
@@ -133,10 +162,10 @@ public Scorer scorer(IndexReader reader) throws IOException {
       }
     
       if (slop == 0)
-        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),
+        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),
                                      reader.norms(field));
       else
-        return new SloppyPhraseScorer(this, tps, getSimilarity(searcher),
+        return new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),
                                       slop, reader.norms(field));
     }
     
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
index 6c3389fe..0762f014 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -31,6 +31,7 @@
 public class PhraseQuery extends Query {
   private String field;
   private Vector terms = new Vector();
+  private Vector positions = new Vector();
   private int slop = 0;
 
   /** Constructs an empty phrase query. */
@@ -54,15 +55,35 @@ the order of two words requires two moves (the first move places the words
   /** Returns the slop.  See setSlop(). */
   public int getSlop() { return slop; }
 
-  /** Adds a term to the end of the query phrase. */
+  /**
+   * Adds a term to the end of the query phrase.
+   * The relative position of the term is the one immediately after the last term added.
+   */
   public void add(Term term) {
+    int position = 0;
+    if(positions.size() > 0)
+        position = ((Integer) positions.lastElement()).intValue() + 1;
+    
+    add(term, position);
+  }
+  
+  /**
+   * Adds a term to the end of the query phrase.
+   * The relative position of the term within the phrase is specified explicitly.
+   * This allows e.g. phrases with more than one term at the same position
+   * or phrases with gaps (e.g. in connection with stopwords).
+   * 
+   * @param term
+   * @param position
+   */
+  public void add(Term term, int position) {
     if (terms.size() == 0)
       field = term.field();
     else if (term.field() != field)
-      throw new IllegalArgumentException
-	("All phrase terms must be in the same field: " + term);
+          throw new IllegalArgumentException("All phrase terms must be in the same field: " + term);
 
     terms.addElement(term);
+      positions.addElement(new Integer(position));
   }
 
   /** Returns the set of terms in this phrase. */
@@ -70,6 +91,17 @@ else if (term.field() != field)
     return (Term[])terms.toArray(new Term[0]);
   }
 
+  /**
+   * Returns the relative positions of terms in this phrase.
+   * @return
+   */
+  public int[] getPositions() {
+      int[] result = new int[positions.size()];
+      for(int i = 0; i < positions.size(); i++)
+          result[i] = ((Integer) positions.elementAt(i)).intValue();
+      return result;
+  }
+
   private class PhraseWeight implements Weight {
     private Searcher searcher;
     private float value;
@@ -111,11 +143,11 @@ public Scorer scorer(IndexReader reader) throws IOException {
       }
 
       if (slop == 0)				  // optimize exact case
-        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),
+        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),
                                      reader.norms(field));
       else
         return
-          new SloppyPhraseScorer(this, tps, getSimilarity(searcher), slop,
+          new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher), slop,
                                  reader.norms(field));
       
     }
@@ -246,14 +278,16 @@ public boolean equals(Object o) {
     PhraseQuery other = (PhraseQuery)o;
     return (this.getBoost() == other.getBoost())
       && (this.slop == other.slop)
-      &&  this.terms.equals(other.terms);
+      &&  this.terms.equals(other.terms)
+      && this.positions.equals(other.positions);
   }
 
   /** Returns a hash code value for this object.*/
   public int hashCode() {
     return Float.floatToIntBits(getBoost())
       ^ Float.floatToIntBits(slop)
-      ^ terms.hashCode();
+      ^ terms.hashCode()
+      ^ positions.hashCode();
   }
 
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java
index 57012c6a..311b20e5 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseScorer.java
@@ -32,7 +32,8 @@
 
   private float freq;
 
-  PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,
+
+  PhraseScorer(Weight weight, TermPositions[] tps, int[] positions, Similarity similarity,
                byte[] norms) {
     super(similarity);
     this.norms = norms;
@@ -41,7 +42,7 @@
 
     // convert tps to a list
     for (int i = 0; i < tps.length; i++) {
-      PhrasePositions pp = new PhrasePositions(tps[i], i);
+      PhrasePositions pp = new PhrasePositions(tps[i], positions[i]);
       if (last != null) {			  // add next to end of list
         last.next = pp;
       } else
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/SloppyPhraseScorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
index e06944bc..dcd9de21 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
@@ -25,9 +25,9 @@
 final class SloppyPhraseScorer extends PhraseScorer {
     private int slop;
 
-    SloppyPhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,
+    SloppyPhraseScorer(Weight weight, TermPositions[] tps, int[] positions, Similarity similarity,
                        int slop, byte[] norms) {
-        super(weight, tps, similarity, norms);
+        super(weight, tps, positions, similarity, norms);
         this.slop = slop;
     }
 
