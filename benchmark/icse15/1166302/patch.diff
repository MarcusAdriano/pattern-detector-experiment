diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 0114fb35..d9d805f5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1303,7 +1303,7 @@ public ViewFragment markReferenced(DecoratedKey startWith, DecoratedKey stopAt)
             view = data.getView();
             // startAt == minimum is ok, but stopAt == minimum is confusing because all IntervalTree deals with
             // is Comparable, so it won't know to special-case that.
-            Comparable stopInTree = stopAt.isEmpty() ? view.intervalTree.max : stopAt;
+            Comparable stopInTree = stopAt.isEmpty() ? view.intervalTree.max() : stopAt;
             sstables = view.intervalTree.search(new Interval(startWith, stopInTree));
             if (SSTableReader.acquireReferences(sstables))
                 break;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DataTracker.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DataTracker.java
index fcfcff0f..d30c183e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DataTracker.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DataTracker.java
@@ -516,11 +516,9 @@ public void unsubscribe(INotificationConsumer consumer)
 
         private IntervalTree buildIntervalTree(List<SSTableReader> sstables)
         {
-            List<SSTableReader> itsstList = ImmutableList.copyOf(Ordering.from(SSTable.sstableComparator).sortedCopy(sstables));
-            List<Interval> intervals = new ArrayList<Interval>(itsstList.size());
-            for (SSTableReader sstable : itsstList)
+            List<Interval> intervals = new ArrayList<Interval>(sstables.size());
+            for (SSTableReader sstable : sstables)
                 intervals.add(new Interval<SSTableReader>(sstable.first, sstable.last, sstable));
-            assert intervals.size() == sstables.size();
             return new IntervalTree<SSTableReader>(intervals);
         }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalNode.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalNode.java
index ebb07922..02231ff0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalNode.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalNode.java
@@ -1,13 +1,16 @@
 package org.apache.cassandra.utils.IntervalTree;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
-import java.util.concurrent.ConcurrentSkipListSet;
+import com.google.common.collect.ImmutableList;
 
 public class IntervalNode
 {
     Interval interval;
     Comparable v_pt;
+    Comparable v_min;
+    Comparable v_max;
     List<Interval> v_left;
     List<Interval> v_right;
     IntervalNode left = null;
@@ -17,7 +20,7 @@ public IntervalNode(List<Interval> toBisect)
     {
         if (toBisect.size() > 0)
         {
-            v_pt = findMedianEndpoint(toBisect);
+            findMinMedianMax(toBisect);
             v_left = interval.minOrdering.sortedCopy(getIntersectingIntervals(toBisect));
             v_right = interval.maxOrdering.reverse().sortedCopy(getIntersectingIntervals(toBisect));
             //if i.min < v_pt then it goes to the left subtree
@@ -64,22 +67,22 @@ public IntervalNode(List<Interval> toBisect)
         return retval;
     }
 
-    public Comparable findMedianEndpoint(List<Interval> intervals)
+    public void findMinMedianMax(List<Interval> intervals)
     {
-
-        ConcurrentSkipListSet<Comparable> sortedSet = new ConcurrentSkipListSet<Comparable>();
+        if (intervals.size() > 0)
+        {
+            List<Comparable> allEndpoints = new ArrayList<Comparable>(intervals.size() * 2);
 
         for (Interval interval : intervals)
         {
-            sortedSet.add(interval.min);
-            sortedSet.add(interval.max);
+                allEndpoints.add(interval.min);
+                allEndpoints.add(interval.max);
         }
-        int medianIndex = sortedSet.size() / 2;
-        if (sortedSet.size() > 0)
-        {
-            return (Comparable) sortedSet.toArray()[medianIndex];
+            Collections.sort(allEndpoints);
+            v_pt = allEndpoints.get(intervals.size());
+            v_min = allEndpoints.get(0);
+            v_max = allEndpoints.get(allEndpoints.size() - 1);
         }
-        return null;
     }
 
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalTree.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalTree.java
index 323a980d..9bfd3c52 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalTree.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/IntervalTree/IntervalTree.java
@@ -8,9 +8,6 @@
 {
     private final IntervalNode head;
 
-    public Comparable max = null;
-    public Comparable min = null;
-
     public IntervalTree()
     {
         head = null;
@@ -18,12 +15,17 @@ public IntervalTree()
 
     public IntervalTree(List<Interval> intervals)
     {
-        if (intervals.size() > 0)
+        head = new IntervalNode(intervals);
+    }
+
+    public Comparable max()
         {
-            min = intervals.get(0).min;
-            max = intervals.get(intervals.size() - 1).max;
+        return head.v_max;
         }
-        head = new IntervalNode(intervals);
+
+    public Comparable min()
+    {
+        return head.v_min;
     }
 
     public List<T> search(Interval searchInterval)
