diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
index 3c95b70c..c53cee0a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
@@ -600,7 +600,7 @@ else if (resultSet instanceof UnionNode)
 				resultSet.enhanceRCLForInsert(
 						numTableColumns, colMap, dataDictionary,
 						targetTableDescriptor, targetVTI);
-			resultColumnList.checkAutoincrement(resultSet.getResultColumns());
+			resultColumnList.forbidOverrides(resultSet.getResultColumns());
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
index 4950c74a..bf746ea4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
@@ -88,6 +88,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	boolean			updated;
 	boolean			updatableByCursor;
 	private boolean defaultColumn;
+    private boolean wasDefault;
 
 	// tells us if this ResultColumn is a placeholder for a generated
 	// autoincrement value for an insert statement.
@@ -207,6 +208,20 @@ public void setDefaultColumn(boolean value)
 		defaultColumn = value;
 	}
 
+	/**
+	 * Returns TRUE if the ResultColumn used to stand in for a DEFAULT keyword in
+	 * an insert/update statement.
+	 */
+	public boolean wasDefaultColumn()
+	{
+		return wasDefault;
+	}
+
+	public void setWasDefaultColumn(boolean value)
+	{
+		wasDefault = value;
+	}
+
 	/**
 	 * Return TRUE if this result column matches the provided column name.
 	 *
@@ -505,6 +520,8 @@ public String toString()
 			return "exposedName: " + exposedName + "\n" +
 				"name: " + name + "\n" +
 				"tableName: " + tableName + "\n" +
+				"isDefaultColumn: " + defaultColumn + "\n" +
+				"wasDefaultColumn: " + wasDefault + "\n" +
 				"isNameGenerated: " + isNameGenerated + "\n" +
 				"sourceTableName: " + sourceTableName + "\n" +
 				"type: " + getTypeServices() + "\n" +
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index aa8f0f17..27a8c3d4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -3919,7 +3919,6 @@ void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)
 							defaultInfo.getDefaultText(),
 							getLanguageConnectionContext(),
 							getCompilerContext()));
-
 				}
 				else
 				{
@@ -3927,6 +3926,7 @@ void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)
 						(ValueNode) getNodeFactory().getNode(
 										C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
 										getContextManager()));
+                    rc.setWasDefaultColumn( true );
 				}
 				rc.setDefaultColumn(false);
 			}
@@ -4056,13 +4056,13 @@ private	ResultColumn	makeColumnFromName( String columnName )
 	}
 	
 	/**
-	 * check if any autoincrement columns exist in the result column list.
+	 * check if any autoincrement or generated columns exist in the result column list.
 	 * called from insert or update where you cannot insert/update the value
-	 * of an autoincrement column.
+	 * of a generated or autoincrement column.
 	 *
 	 * @exception StandardException		If the column is an ai column
 	 */
-	public void checkAutoincrement(ResultColumnList sourceRSRCL)
+	public void forbidOverrides(ResultColumnList sourceRSRCL)
 		throws StandardException
 	{
 		int size = size();
@@ -4074,6 +4074,14 @@ public void checkAutoincrement(ResultColumnList sourceRSRCL)
 				(ResultColumn)((sourceRSRCL == null) ? null : sourceRSRCL.elementAt(index));
 			ColumnDescriptor cd = rc.getTableColumnDescriptor();
 			
+            if ( (cd != null) && cd.hasGenerationClause() )
+            {
+                if ( (sourceRC != null) && !sourceRC.hasGenerationClause() && !sourceRC.wasDefaultColumn() )
+                {
+                    throw StandardException.newException(SQLState.LANG_CANT_OVERRIDE_GENERATION_CLAUSE, rc.getName());
+                }
+            }
+			
 			if ((cd != null) && (cd.isAutoincrement()))
 			{
 				if ((sourceRC != null) && 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
index 1a5d0f96..b3c7af61 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
@@ -379,7 +379,7 @@ else if (cursorTargetTableName != null)
         
 		LanguageConnectionContext lcc = getLanguageConnectionContext();
 		if (lcc.getAutoincrementUpdate() == false)
-			resultSet.getResultColumns().checkAutoincrement(null);
+			resultSet.getResultColumns().forbidOverrides(null);
 
 		/*
 		** Mark the columns in this UpdateNode's result column list as
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
index 1dff44e7..b5b08ea5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
@@ -79,6 +79,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     protected static  final   String  LACK_COLUMN_PRIV = "42502";
     protected static  final   String  LACK_EXECUTE_PRIV = "42504";
     protected static  final   String  CANT_ADD_IDENTITY = "42601";
+    protected static  final   String  CANT_MODIFY_IDENTITY = "42Z23";
     
     protected static  final   String  CASCADED_COLUMN_DROP_WARNING = "01009";
     protected static  final   String  CONSTRAINT_DROPPED_WARNING = "01500";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index 5516f817..be54617f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -4181,6 +4181,156 @@ public  void    test_022_omitDatatype()
 
     }
     
+    /**
+     * <p>
+     * Test that you cannot override the value of a generated column via
+     * a driving SELECT--except where the value in the driving SELECT is the
+     * DEFAULT literal. Make sure that generation clauses behave like
+     * autoincrement columns in this respect.
+     * </p>
+     */
+    public  void    test_023_drivingSelect()
+        throws Exception
+    {
+        Connection  conn = getConnection();
+
+        //
+        // Schema and pre-population.
+        //
+        goodStatement
+            (
+             conn,
+             "create table t_ds_source( a int, b int )"
+             );
+        goodStatement
+            (
+             conn,
+             "create table t_ds_id( a int, b int generated always as identity )"
+             );
+        goodStatement
+            (
+             conn,
+             "create table t_ds_gc( a int, b generated always as ( -a ) )"
+             );
+        goodStatement
+            (
+             conn,
+             "insert into t_ds_source( a, b ) values ( 1, 1 )"
+             );
+        
+        //
+        // DEFAULT literals ok.
+        //
+        goodStatement
+            (
+             conn,
+             "insert into t_ds_id values ( 3, default )"
+             );
+        goodStatement
+            (
+             conn,
+             "insert into t_ds_gc values ( 3, default )"
+             );
+        
+        //
+        // Inserts into non-generated columns OK.
+        //
+        goodStatement
+            (
+             conn,
+             "insert into t_ds_id( a ) select a from t_ds_source"
+             );
+        goodStatement
+            (
+             conn,
+             "insert into t_ds_gc( a ) select a from t_ds_source"
+             );
+        
+        //
+        // Other literals raise an error.
+        //
+        expectCompilationError
+            (
+             CANT_MODIFY_IDENTITY,
+             "insert into t_ds_id values ( 2, 2 )"
+             );
+        expectCompilationError
+            (
+             CANT_OVERRIDE_GENERATION_CLAUSE,
+             "insert into t_ds_gc values ( 2, 2 )"
+             );
+        
+        //
+        // You can't stuff an overriding value from a nested SELECT
+        //
+        expectCompilationError
+            (
+             CANT_MODIFY_IDENTITY,
+             "insert into t_ds_id select * from t_ds_source"
+             );
+        expectCompilationError
+            (
+             CANT_OVERRIDE_GENERATION_CLAUSE,
+             "insert into t_ds_gc select * from t_ds_source"
+             );
+        
+        //
+        // You can't stuff an overriding value from a literal in a nested SELECT
+        //
+        expectCompilationError
+            (
+             CANT_MODIFY_IDENTITY,
+             "insert into t_ds_id select a, 3 from t_ds_source"
+             );
+        expectCompilationError
+            (
+             CANT_OVERRIDE_GENERATION_CLAUSE,
+             "insert into t_ds_gc select a, 3 from t_ds_source"
+             );
+
+        //
+        // DEFAULT literal in the SELECT list is just a syntax error.
+        //
+        expectCompilationError
+            (
+             SYNTAX_ERROR,
+             "insert into t_ds_id select a, default from t_ds_source"
+             );
+        expectCompilationError
+            (
+             SYNTAX_ERROR,
+             "insert into t_ds_gc select a, default from t_ds_source"
+             );
+
+        //
+        // Verify contents of tables.
+        //
+        assertResults
+            (
+             conn,
+             "select * from t_ds_id order by b",
+             new String[][]
+             {
+                 { "3", "1", },
+                 { "1", "2", },
+             },
+             false
+             );
+        assertResults
+            (
+             conn,
+             "select * from t_ds_gc order by b",
+             new String[][]
+             {
+                 { "3", "-3", },
+                 { "1", "-1", },
+             },
+             false
+             );
+
+    }
+    
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
