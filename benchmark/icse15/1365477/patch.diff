diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
index 5e38c247..2f728b3c 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
@@ -146,6 +146,7 @@
     private ScheduledFuture timeoutFuture;
     private final AtomicBoolean scheduled = new AtomicBoolean();
     private final AtomicBoolean running = new AtomicBoolean();
+    private Thread runningThread;
     private List<ServiceRecipe> services;
     private AccessControlContext accessControlContext;
     private final IdSpace tempRecipeIdSpace = new IdSpace();
@@ -237,11 +238,15 @@ public void run() {
         scheduled.set(false);
         synchronized (scheduled) {
             synchronized (running) {
+                runningThread = Thread.currentThread();
                 running.set(true);
+            }
                 try {
                     doRun();
                 } finally {
+                synchronized (running) {
                     running.set(false);
+                    runningThread = null;
                     running.notifyAll();
                 }
             }
@@ -823,12 +828,10 @@ public void destroy() {
         unregisterServices();
 
         synchronized (running) {
-            if (handlerSet != null) {
-                handlerSet.removeListener(this);
-                handlerSet.destroy();
-            }
-            
             while (running.get()) {
+                if (runningThread != null) {
+                    runningThread.interrupt();
+                }
                 try {
                     running.wait();
                 } catch (InterruptedException e) {
@@ -836,6 +839,10 @@ public void destroy() {
                 }
             }
         }
+        if (handlerSet != null) {
+            handlerSet.removeListener(this);
+            handlerSet.destroy();
+        }
 
         destroyComponents();
         
