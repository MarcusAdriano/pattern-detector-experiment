diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlWarning.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlWarning.java
index d0663989..94349d4d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlWarning.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlWarning.java
@@ -71,17 +71,9 @@ public SQLWarning getSQLWarning()
         // Set up the nextException chain
         if ( nextWarning_ != null )
         {
-            // The exception chain gets constructed automatically through 
+            // The warning chain gets constructed automatically through
             // the beautiful power of recursion
-            //
-            // We have to use the right method to convert the next exception
-            // depending upon its type.  Luckily with all the other subclasses
-            // of SQLException we don't have to make our own matching 
-            // subclasses because 
-            sqlw.setNextException(
-                nextException_ instanceof SqlWarning ?
-                    ((SqlWarning)nextException_).getSQLWarning() :
-                    nextException_.getSQLException());
+            sqlw.setNextWarning(nextWarning_.getSQLWarning());
         }
         
         return sqlw;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java
index 715082e5..98c218a1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java
@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.SQLWarning;
 import java.sql.Statement;
 import java.sql.Time;
 import java.sql.Timestamp;
@@ -359,6 +360,38 @@ public void testMultipleStatementsBatch() throws SQLException {
         commit();
     }
 
+    /**
+     * Regression test case for DERBY-6373.
+     */
+    public void testMultipleStatementsBatchWithWarnings() throws SQLException {
+        Statement s = createStatement();
+        s.execute("insert into t1 values 1");
+
+        // Execute a batch of three deletes. All of them should get a warning
+        // because no rows matched the WHERE clause.
+        s.addBatch("delete from t1 where c1 in (select 0 from t1)");
+        s.addBatch("delete from t1 where c1 in (select 0 from t1)");
+        s.addBatch("delete from t1 where c1 in (select 0 from t1)");
+        s.executeBatch();
+
+        // Used to fail with NullPointerException on the client.
+        SQLWarning w = s.getWarnings();
+
+        // Expect one warning per delete on the client. Embedded gives only
+        // a single warning.
+        assertSQLState("02000", w);
+        w = w.getNextWarning();
+        if (usingEmbedded()) {
+            assertNull(w);
+        } else {
+            assertSQLState("02000", w);
+            w = w.getNextWarning();
+            assertSQLState("02000", w);
+            w = w.getNextWarning();
+            assertNull(w);
+        }
+    }
+
     // try executing a batch with 1000 statements in it.
     public void test1000StatementsBatch() throws SQLException {
         int updateCount[];
