diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
index 8553eb00..fb908f89 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
@@ -700,6 +700,12 @@ public final synchronized ExecPreparedStatement getPreparedStatement(boolean rec
 					nestedTC = null;
 				}
 
+				// DERBY-2584: If the first attempt to compile the query fails,
+				// we need to reset initiallyCompilable to make sure the
+				// prepared plan is fully stored to disk. Save the initial
+				// value here.
+				final boolean compilable = initiallyCompilable;
+
 				try
 				{
 					prepareAndRelease(lcc, null, nestedTC);
@@ -717,6 +723,7 @@ public final synchronized ExecPreparedStatement getPreparedStatement(boolean rec
 						}
 						// if we couldn't do this with a nested xaction, retry with
 						// parent-- we need to wait this time!
+						initiallyCompilable = compilable;
 						prepareAndRelease(lcc, null, null);
 						updateSYSSTATEMENTS(lcc, RECOMPILE, null);
 					}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index 6f520d2c..4b33e232 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -47,6 +47,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derby.shared.common.reference.JDBC40Translation;
@@ -199,7 +200,20 @@ protected void tearDown() throws Exception
      * Default suite for running this test.
      */
     public static Test suite() {
-        return TestConfiguration.defaultSuite(DatabaseMetaDataTest.class);
+        TestSuite suite = new TestSuite("DatabaseMetaDataTest");
+        suite.addTest(
+            TestConfiguration.defaultSuite(DatabaseMetaDataTest.class));
+        // Test for DERBY-2584 needs a fresh database to ensure that the
+        // meta-data queries haven't already been compiled. No need to run the
+        // test in client/server mode since it only tests the compilation of
+        // meta-data queries.
+        suite.addTest(
+            TestConfiguration.singleUseDatabaseDecorator(
+                // until DERBY-177 is fixed, set lock timeout to prevent the
+                // test from waiting one minute
+                DatabasePropertyTestSetup.setLockTimeouts(
+                    new DatabaseMetaDataTest("initialCompilationTest"), 2, 4)));
+        return suite;
     }
     
     /**
@@ -225,6 +239,30 @@ private final DatabaseMetaData getDMD() throws SQLException
         return getConnection().getMetaData();
     }
 
+    /**
+     * Tests that a meta-data query is compiled and stored correctly even when
+     * there's a lock on the system tables (DERBY-2584). This test must run on
+     * a fresh database (that is, <code>getIndexInfo</code> must not have been
+     * prepared and stored in <code>SYS.SYSSTATEMENTS</code>).
+     */
+    public void initialCompilationTest() throws SQLException {
+        Connection c = getConnection();
+        c.setAutoCommit(false);
+        c.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
+        Statement s = createStatement();
+        // First get shared row locks on the SYSSTATEMENTS table.
+        JDBC.assertDrainResults(
+            s.executeQuery("SELECT * FROM SYS.SYSSTATEMENTS"));
+        s.close();
+        // Execute getIndexInfo() for the first time. Because of the shared
+        // locks on SYSSTATEMENTS, the query is compiled in the main
+        // transaction.
+        getDMD().getIndexInfo(null, null, "T", false, false).close();
+        // Re-use the previously compiled query from disk. Fails with
+        // ArrayIndexOutOfBoundsException before DERBY-2584.
+        getDMD().getIndexInfo(null, null, "T", false, false).close();
+    }
+
     /**
      * Test the methods that indicate if a feature
      * is supported or not. Methods start with
