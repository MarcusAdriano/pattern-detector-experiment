diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
index 0de9767f..5f618f16 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
@@ -1338,7 +1338,8 @@ private static void initDatePortion(Calendar cal, String date) {
 
         int month =
                 digit(date.charAt(5)) * 10 +
-                digit(date.charAt(6));
+                digit(date.charAt(6)) - 1; // subtract one since
+                                           // Calendar.JANUARY == 0
 
         int day =
                 digit(date.charAt(8)) * 10 +
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DaylightSavingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DaylightSavingTest.java
index 81d34962..f71418c2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DaylightSavingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DaylightSavingTest.java
@@ -62,7 +62,8 @@ public void testConversionToGMTAroundDSTChange() throws SQLException {
         Statement s = createStatement();
         s.execute("CREATE TABLE DERBY4582(" +
                 "ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, " +
-                "TS TIMESTAMP, T TIME, D DATE, T2 TIME, D2 DATE)");
+                "TS TIMESTAMP, T TIME, D DATE, T2 TIME, D2 DATE, " +
+                "TS_STR VARCHAR(100), T_STR VARCHAR(100), D_STR VARCHAR(100))");
 
         Calendar localCal = Calendar.getInstance();
 
@@ -92,20 +93,31 @@ public void testConversionToGMTAroundDSTChange() throws SQLException {
 
         // Store the GMT representations of the times.
         PreparedStatement insert = prepareStatement(
-                "INSERT INTO DERBY4582(TS, T, D, T2, D2) VALUES (?,?,?,?,?)");
+                "INSERT INTO DERBY4582 " +
+                "(TS, T, D, T2, D2, TS_STR, T_STR, D_STR) " +
+                "VALUES (?,?,?,?,?,?,?,?)");
         for (int i = 0; i < timestamps.length; i++) {
             Timestamp ts = timestamps[i];
             Time t = times[i];
             Date d = dates[i];
+
             // Set the TIMESTAMP/TIME/DATE values TS/T/D with their respective
             // setter methods.
             insert.setTimestamp(1, ts, cal);
             insert.setTime(2, t, cal);
             insert.setDate(3, d, cal);
+
             // Set the TIME/DATE values T2/D2 with setTimestamp() to verify
             // that this alternative code path also works.
             insert.setTimestamp(4, ts, cal);
             insert.setTimestamp(5, ts, cal);
+
+            // Also insert the values into VARCHAR columns so that we can
+            // check that they are converted correctly.
+            insert.setTimestamp(6, ts, cal);
+            insert.setTime(7, t, cal);
+            insert.setDate(8, d, cal);
+
             insert.execute();
         }
 
@@ -120,6 +132,10 @@ public void testConversionToGMTAroundDSTChange() throws SQLException {
             // T2 and D2 should have the same values as T and D.
             assertEquals("T2", stripDate(times[i], cal), rs.getTime(5, cal));
             assertEquals("D2", stripTime(dates[i], cal), rs.getDate(6, cal));
+            // The VARCHAR columns should have the same values as TS, T and D.
+            assertEquals("TS_STR", timestamps[i], rs.getTimestamp(7, cal));
+            assertEquals("T_STR", stripDate(times[i], cal), rs.getTime(8, cal));
+            assertEquals("D_STR", stripTime(dates[i], cal), rs.getDate(9, cal));
         }
         JDBC.assertEmpty(rs);
 
