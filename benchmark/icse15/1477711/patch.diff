diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/Activation.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/Activation.java
index ff6fb60f..2374e970 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/Activation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/Activation.java
@@ -567,7 +567,7 @@ public void informOfRowCount(NoPutResultSet resultSet, long rowCount)
 	//clear the parent resultset hash table;
 	public void clearParentResultSets();
 
-	public Hashtable getParentResultSets();
+	public Enumeration getParentResultSetKeys();
 
 	/**
 	 * beetle 3865: updateable cursor using index.  A way of communication
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index fd4ec2ca..98c4e371 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -707,7 +707,9 @@ private boolean execute(String sql, boolean executeQuery, boolean executeUpdate,
 			//bug 4838 - save the auto-generated key information in activation. keeping this
 			//information in lcc will not work work it can be tampered by a nested trasaction
 			if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS)
+            {
 				activation.setAutoGeneratedKeysResultsetInfo(columnIndexes, columnNames);
+            }
 			return executeStatement(activation, executeQuery, executeUpdate);
 		} finally {
 		    restoreContextStack();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
index b7432a21..0091174c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
@@ -322,8 +322,10 @@ public ResultSet execute() throws StandardException
 
 				newAC.setResultSetHoldability(ac.getResultSetHoldability());
 				if (ac.getAutoGeneratedKeysResultsetMode()) //Need to do copy only if auto generated mode is on
+                {
 					newAC.setAutoGeneratedKeysResultsetInfo(ac.getAutoGeneratedKeysColumnIndexes(),
 					ac.getAutoGeneratedKeysColumnNames());
+                }
 				newAC.setMaxRows(ac.getMaxRows());
 
 				// break the link with the prepared statement
@@ -809,9 +811,9 @@ public void clearParentResultSets()
 		ac.clearParentResultSets();
 	}
 
-	public Hashtable getParentResultSets()
+	public Enumeration getParentResultSetKeys()
 	{
-		return ac.getParentResultSets();
+		return ac.getParentResultSetKeys();
 	}
 
 	public void setForUpdateIndexScan(CursorResultSet forUpdateResultSet)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
index fa7e5358..9aa5858b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import java.sql.SQLWarning;
 import java.util.ArrayList;
+import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.Vector;
@@ -42,6 +43,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.context.Context;
 import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.services.loader.GeneratedByteCode;
 import org.apache.derby.iapi.services.loader.GeneratedClass;
@@ -643,8 +645,8 @@ public boolean getResultSetHoldability()
 	public void setAutoGeneratedKeysResultsetInfo(int[] columnIndexes, String[] columnNames)
 	{
 		autoGeneratedKeysResultSetMode = true;
-		autoGeneratedKeysColumnIndexes = columnIndexes;
-		autoGeneratedKeysColumnNames = columnNames;
+		autoGeneratedKeysColumnIndexes = ArrayUtil.copy( columnIndexes );
+		autoGeneratedKeysColumnNames = ArrayUtil.copy( columnNames );
 	}
 
 	/** @see Activation#getAutoGeneratedKeysResultsetMode */
@@ -656,13 +658,13 @@ public boolean getAutoGeneratedKeysResultsetMode()
 	/** @see Activation#getAutoGeneratedKeysColumnIndexes */
 	public int[] getAutoGeneratedKeysColumnIndexes()
 	{
-		return autoGeneratedKeysColumnIndexes;
+		return ArrayUtil.copy( autoGeneratedKeysColumnIndexes );
 	}
 
 	/** @see Activation#getAutoGeneratedKeysColumnNames */
 	public String[] getAutoGeneratedKeysColumnNames()
 	{
-		return autoGeneratedKeysColumnNames;
+		return ArrayUtil.copy( autoGeneratedKeysColumnNames );
 	}
 
 	//
@@ -1641,9 +1643,9 @@ public Vector getParentResultSet(String resultSetId)
 		return (Vector) parentResultSets.get(resultSetId);
 	}
 
-	public Hashtable getParentResultSets()
+	public Enumeration getParentResultSetKeys()
 	{
-		return parentResultSets;
+		return parentResultSets.keys();
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
index 99756bba..3115f93b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
@@ -430,8 +430,7 @@ public void finish() throws StandardException {
 	**/
 	private boolean isMultipleDeletePathsExist()
 	{
-		Hashtable parentResultSets = activation.getParentResultSets();
-		for (Enumeration e = parentResultSets.keys() ; e.hasMoreElements() ;) 
+		for (Enumeration e = activation.getParentResultSetKeys() ; e.hasMoreElements() ;) 
 		{
 			String rsId  = (String) e.nextElement();
 			Vector sVector = (Vector) activation.getParentResultSet(rsId);
@@ -453,8 +452,7 @@ private boolean isMultipleDeletePathsExist()
 	**/
 	private void setRowHoldersTypeToUniqueStream()
 	{
-		Hashtable parentResultSets = activation.getParentResultSets();
-		for (Enumeration e = parentResultSets.keys() ; e.hasMoreElements() ;) 
+		for (Enumeration e = activation.getParentResultSetKeys() ; e.hasMoreElements() ;) 
 		{
 			String rsId  = (String) e.nextElement();
 			Vector sVector = (Vector) activation.getParentResultSet(rsId);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index c9872fc6..5f3b3e6e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -417,10 +417,13 @@ public void open() throws StandardException
 		*/
 		if(activation.getAutoGeneratedKeysResultsetMode())
 		{
-			if (activation.getAutoGeneratedKeysColumnIndexes() != null)
-				verifyAutoGeneratedColumnsIndexes(activation.getAutoGeneratedKeysColumnIndexes());
-			else  if (activation.getAutoGeneratedKeysColumnNames() != null)
-				verifyAutoGeneratedColumnsNames(activation.getAutoGeneratedKeysColumnNames());
+            int[]   agi = activation.getAutoGeneratedKeysColumnIndexes();
+            if ( agi != null ) { verifyAutoGeneratedColumnsIndexes( agi ); }
+            else
+            {
+                String[]    agc = activation.getAutoGeneratedKeysColumnNames();
+                if ( agc != null ) { verifyAutoGeneratedColumnsNames( agc ); }
+            }
 		}
 		rowCount = 0L;
 
