diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java
index 0efd5de4..eedd7b64 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java
@@ -62,6 +62,7 @@
 import org.apache.derby.impl.sql.execute.RowResultSet;
 import org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;
 import org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet;
+import org.apache.derby.impl.sql.execute.SetOpResultSet;
 import org.apache.derby.impl.sql.execute.SortResultSet;
 import org.apache.derby.impl.sql.execute.TableScanResultSet;
 import org.apache.derby.impl.sql.execute.UnionResultSet;
@@ -96,6 +97,7 @@
 import org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics;
 import org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics;
 import org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics;
+import org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics;
 import org.apache.derby.impl.sql.execute.rts.RealSortStatistics;
 import org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics;
 import org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics;
@@ -816,9 +818,32 @@ else if (rs instanceof RowResultSet)
 											rrs.optimizerEstimatedRowCount,
 											rrs.optimizerEstimatedCost);
 		}
+		else if (rs instanceof SetOpResultSet)
+		{
+			SetOpResultSet srs = (SetOpResultSet) rs;
+
+			return new RealSetOpResultSetStatistics(
+											srs.getOpType(),
+											srs.numOpens,
+											srs.rowsSeen,
+											srs.rowsFiltered,
+											srs.constructorTime,
+											srs.openTime,
+											srs.nextTime,
+											srs.closeTime,
+											srs.getResultSetNumber(),
+											srs.getRowsSeenLeft(),
+											srs.getRowsSeenRight(),
+											srs.getRowsReturned(),
+											srs.optimizerEstimatedRowCount,
+											srs.optimizerEstimatedCost,
+											getResultSetStatistics(srs.getLeftSourceInput()),
+											getResultSetStatistics(srs.getRightSourceInput())
+											);
+		}
 		else if (rs instanceof UnionResultSet)
 		{
-			UnionResultSet urs = (UnionResultSet) rs;
+			UnionResultSet urs = (UnionResultSet)rs;
 
 			return new RealUnionResultSetStatistics(
 											urs.numOpens,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java
index 230cbc20..85e66c80 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java
@@ -2,7 +2,7 @@
 
    Derby - Class org.apache.derby.impl.sql.execute.SetOpResultSet
 
-   Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
+   Copyright 2004, 2006 The Apache Software Foundation or its licensors, as applicable.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
@@ -64,6 +64,11 @@
     private final int[] intermediateOrderByColumns;
     private final int[] intermediateOrderByDirection;
 
+    /* Run time statistics variables */
+    private int rowsSeenLeft;
+    private int rowsSeenRight;
+    private int rowsReturned;
+
     SetOpResultSet( NoPutResultSet leftSource,
                     NoPutResultSet rightSource,
                     Activation activation, 
@@ -99,12 +104,17 @@ public void	openCore() throws StandardException
 	{
 		beginTime = getCurrentTimeMillis();
 		if (SanityManager.DEBUG)
-	    	SanityManager.ASSERT( ! isOpen, "SetOpProjectRestrictResultSet already open");
+	    	SanityManager.ASSERT( ! isOpen, "SetOpResultSet already open");
 
         isOpen = true;
         leftSource.openCore();
         rightSource.openCore();
         rightInputRow = rightSource.getNextRowCore();
+        if (rightInputRow != null)
+        {
+            rowsSeenRight++;
+        }
+
 		numOpens++;
 
 		openTime += getElapsedMillis(beginTime);
@@ -121,6 +131,8 @@ public ExecRow	getNextRowCore() throws StandardException
         {
             while( (leftInputRow = leftSource.getNextRowCore()) != null)
             {
+                rowsSeenLeft++;
+
                 DataValueDescriptor[] leftColumns = leftInputRow.getRowArray();
                 if( !all)
                 {
@@ -130,8 +142,14 @@ public ExecRow	getNextRowCore() throws StandardException
                 }
                 int compare = 0;
                 // Advance the right until there are no more right rows or leftRow <= rightRow
-                while( rightInputRow != null && (compare = compare( leftColumns, rightInputRow.getRowArray())) > 0)
+                while ( rightInputRow != null && (compare = compare(leftColumns, rightInputRow.getRowArray())) > 0)
+                {
                     rightInputRow = rightSource.getNextRowCore();
+                    if (rightInputRow != null)
+                    {
+                        rowsSeenRight++;
+                    }
+                }
                 
                 if( rightInputRow == null || compare < 0)
                 {
@@ -145,10 +163,17 @@ public ExecRow	getNextRowCore() throws StandardException
                     // The left and right rows are the same
                     if( SanityManager.DEBUG)
                         SanityManager.ASSERT( rightInputRow != null && compare == 0,
-                                              "Insert/Except execution has gotten confused.");
-                    if( all)
+                                              "Intersect/Except execution has gotten confused.");
+                    if ( all)
+                    {
                         // Just advance the right input by one row.
                         rightInputRow = rightSource.getNextRowCore();
+                        if (rightInputRow != null)
+                        {
+                            rowsSeenRight++;
+                        }
+                    }
+
                     // If !all then we will skip past duplicates on the left at the top of this loop,
                     // which will then force us to skip past any right duplicates.
                     if( opType == IntersectOrExceptNode.INTERSECT_OP)
@@ -160,7 +185,12 @@ public ExecRow	getNextRowCore() throws StandardException
             }
         }
         currentRow = leftInputRow;
-        setCurrentRow( currentRow);
+        setCurrentRow( currentRow );
+
+        if (currentRow != null) {
+           rowsReturned++;
+        }
+
         nextTime += getElapsedMillis(beginTime);
         return currentRow;
     } // end of getNextRowCore
@@ -168,9 +198,13 @@ public ExecRow	getNextRowCore() throws StandardException
     private void advanceRightPastDuplicates( DataValueDescriptor[] leftColumns)
         throws StandardException
     {
-        while((rightInputRow = rightSource.getNextRowCore()) != null
-              && compare( leftColumns, rightInputRow.getRowArray()) == 0)
-            ;
+        while ((rightInputRow = rightSource.getNextRowCore()) != null)
+        {
+            rowsSeenRight++;
+
+            if (compare(leftColumns, rightInputRow.getRowArray()) == 0) 
+                continue;
+        }
     } // end of advanceRightPastDuplicates
         
     private int compare( DataValueDescriptor[] leftCols, DataValueDescriptor[] rightCols)
@@ -237,7 +271,7 @@ public void	close() throws StandardException
         }
 		else
 			if (SanityManager.DEBUG)
-				SanityManager.DEBUG("CloseRepeatInfo","Close of UnionResultSet repeated");
+				SanityManager.DEBUG("CloseRepeatInfo","Close of SetOpResultSet repeated");
 
 		closeTime += getElapsedMillis(beginTime);
 	} // end of close
@@ -284,4 +318,81 @@ public RowLocation getRowLocation() throws StandardException
         // left side, the right side, or null?
         return ((CursorResultSet)leftSource).getRowLocation();
     }
+
+    /**
+     * Return the set operation of this <code>SetOpResultSet</code>
+     *
+     * @return the set operation of this ResultSet, the value is either 
+     *         <code>IntersectOrExceptNode.INTERSECT_OP</code> for 
+     *         Intersect operation or <code>IntersectOrExceptNode.EXCEPT_OP
+     *         </code> for Except operation
+     *         
+     * @see    org.apache.derby.impl.sql.compile.IntersectOrExceptNode
+     */
+    public int getOpType()
+    {
+        return opType;
+    }
+
+    /**
+     * Return the result set number
+     *
+     * @return the result set number
+     */
+    public int getResultSetNumber()
+    {
+        return resultSetNumber;
+    }
+
+    /**
+     * Return the left source input of this <code>SetOpResultSet</code>
+     *
+     * @return the left source input of this <code>SetOpResultSet</code>
+     * @see org.apache.derby.iapi.sql.execute.NoPutResultSet
+     */
+    public NoPutResultSet getLeftSourceInput()
+    {
+        return leftSource;
+    }
+
+    /**
+     * Return the right source input of this <code>SetOpResultSet</code>
+     *
+     * @return the right source input of this <code>SetOpResultSet</code>
+     * @see org.apache.derby.iapi.sql.execute.NoPutResultSet
+     */
+    public NoPutResultSet getRightSourceInput()
+    {
+        return rightSource;
+    }
+
+    /**
+     * Return the number of rows seen on the left source input
+     *
+     * @return the number of rows seen on the left source input
+     */
+    public int getRowsSeenLeft()
+    {
+        return rowsSeenLeft;
+    }
+
+    /**
+     * Return the number of rows seen on the right source input
+     *
+     * @return the number of rows seen on the right source input
+     */
+    public int getRowsSeenRight()
+    {
+        return rowsSeenRight;
+    }
+
+    /**
+     * Return the number of rows returned from the result set
+     *
+     * @return the number of rows returned from the result set
+     */
+    public int getRowsReturned()
+    {
+        return rowsReturned;
+    }
 }
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 119e54ba..625bbc53 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1154,6 +1154,10 @@ The message identifier (ie. the value that matches a field in this class)
 	String RTS_END_DEPENDENT_NUMBER									   = "43Y55.U";	
 	String RTS_USER_SUPPLIED_OPTIMIZER_OVERRIDES_FOR_TABLE			   = "43Y56.U";	
 	String RTS_USER_SUPPLIED_OPTIMIZER_OVERRIDES_FOR_JOIN			   = "43Y57.U";	
+	String RTS_INTERSECT_RS                                            = "43Y58.U";
+	String RTS_INTERSECT                                               = "43Y59.U";
+	String RTS_EXCEPT_RS                                               = "43Y60.U";
+	String RTS_EXCEPT                                                  = "43Y61.U";
 
 	// org.apache.derby.catalog.types
 	String TI_SQL_TYPE_NAME			= "44X00.U";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
index ce1dc6da..f14eca99 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
@@ -39,7 +39,8 @@
 
 public class Sed
 {
-	private	static	final	String	SQL_EXCEPTION_FILTERED_SUBSTITUTION = "SQL Exception:";
+	private	static	final	String	SQL_EXCEPTION_FILTERED_SUBSTITUTION = 
+        "java.sql.SQLException:";
 
     public Sed()
     {
