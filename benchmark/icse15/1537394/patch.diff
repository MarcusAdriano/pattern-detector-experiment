diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java
index dcf8ef8a..56f899de 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java
@@ -402,11 +402,21 @@ public boolean renameTo( StorageFile newName)
      */
     public boolean deleteAll()
     {
-        if( !exists())
+        // Nothing to do if the file doesn't exist.
+        if (!exists()) {
             return false;
-        if( isDirectory())
-        {
+        }
+
+        // If the file is a directory, delete its contents recursively.
+        // File.list() will return null if it is not a directory, or if the
+        // contents of the directory cannot be read. Skip the recursive step
+        // in both of those cases. If it turns out that the file in fact is a
+        // directory, and we couldn't delete its contents, the delete() call
+        // at the end of this method will return false to notify the caller
+        // that the directory could not be deleted.
             String[] childList = super.list();
+        if (childList != null)
+        {
             String parentName = getPath();
             for( int i = 0; i < childList.length; i++)
             {
@@ -417,6 +427,9 @@ public boolean deleteAll()
                     return false;
             }
         }
+
+        // Finally, attempt to delete the file (or directory) and return
+        // whether or not we succeeded.
         return delete();
     } // end of deleteAll
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java
index e69de29b..80748bbe 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/Derby6396Test.java
@@ -0,0 +1,77 @@
+/*
+  Class org.apache.derbyTesting.functionTests.tests.engine.Derby6396Test
+
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to you under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+
+*/
+
+package org.apache.derbyTesting.functionTests.tests.engine;
+
+import java.io.File;
+import java.sql.SQLException;
+import junit.framework.Test;
+import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * Regression test case for DERBY-6396. Verify that booting the database
+ * does not fail with a NullPointerException if the user lacks read access
+ * on the temporary directory.
+ */
+public class Derby6396Test extends BaseJDBCTestCase {
+    private File tmpDir;
+
+    public Derby6396Test(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        // Use a separate database for this test to reduce the risk of
+        // interfering with other tests when changing file permissions.
+        return TestConfiguration.singleUseDatabaseDecorator(
+                TestConfiguration.embeddedSuite(Derby6396Test.class));
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        if (tmpDir != null) {
+            // Reset the permission of the temporary directory so that we
+            // don't run into problems when dropping the database.
+            PrivilegedFileOpsForTests.setReadable(tmpDir, true, true);
+            tmpDir = null;
+        }
+        super.tearDown();
+    }
+
+    public void testTempNotReadable() throws SQLException {
+        final TestConfiguration config = TestConfiguration.getCurrent();
+
+        // First make sure the database exists and is not booted.
+        getConnection().close();
+        config.shutdownDatabase();
+
+        // Now make sure the database has a tmp directory that cannot be read.
+        tmpDir = new File(
+            config.getDatabasePath(config.getDefaultDatabaseName()), "tmp");
+        assertTrue(PrivilegedFileOpsForTests.mkdir(tmpDir));
+        PrivilegedFileOpsForTests.setReadable(tmpDir, false, true);
+
+        // Booting the database used to fail with a NullPointerException.
+        // Should succeed now.
+        getConnection().close();
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java
index 6839f14b..6d3e29fb 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java
@@ -54,6 +54,7 @@ public static Test suite() throws Exception {
         suite.addTest(ModuleLoadingTest.suite());
         suite.addTest(ReadMeFilesTest.suite());
         suite.addTest(ShutdownWithoutDeregisterPermissionTest.suite());
+        suite.addTest(Derby6396Test.suite());
 
         return suite;
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
index d52ce3f2..05ecba92 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
@@ -162,6 +162,37 @@ public Boolean run() {
                     });
     }
 
+    /**
+     * Create a directory.
+     * @param dir the directory to create
+     * @return {@code true} if and only if the directory was created
+     */
+    public static boolean mkdir(final File dir) {
+        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
+            public Boolean run() {
+                return dir.mkdir();
+            }
+        });
+    }
+
+    /**
+     * Set the read permission for a file.
+     * @param file      the file to set the read permission for
+     * @param readable  {@code true} to allow read, {@code false} to deny it
+     * @param ownerOnly {@code true} if it should be set for the owner only,
+     *                  {@code false} if it should be set for everyone
+     * @return {@code true} if the operation succeeded, {@code false} otherwise
+     */
+    public static boolean setReadable(final File file,
+                                      final boolean readable,
+                                      final boolean ownerOnly) {
+        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
+            public Boolean run() {
+                return file.setReadable(readable, ownerOnly);
+            }
+        });
+    }
+
     /**
      * Obtains a reader for the specified file.
      *
@@ -194,7 +225,6 @@ public FileReader run()
      *
      * @param file the file to obtain a writer for
      * @return An writer for the specified file.
-     * @throws IOException 
      * @throws IOException if the file cannot be opened
      * @throws SecurityException if the required permissions to write to the file,
      *      or the path it is in, are missing
