diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java
index 4fd26fb6..73cd2c6e 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogCounter.java
@@ -61,17 +61,17 @@ is passed around as a LogCounter (through its LogInstant interface).
 	/** A well defined value of an invalid log instant. */
 	public static final long INVALID_LOG_INSTANT = 0;
 
-
-	// max possible log file number is 2^33 -1 (8589934591)
-	public static final long MAX_LOGFILE_NUMBER	= (long)0x1FFFFFFFFL; 
-
-	// lower end of 30 bits in long type are used to store the log file position
-	private static final long FILE_NUMBER_SHIFT	= 30;
-
-	// reserve top 2 bits in log file size for future use
+	// max possible log file number in versions before 10.1 is 2^22 -1
+	public static final long DERBY_10_0_MAX_LOGFILE_NUMBER = (long)0x003FFFFFL; // 4194303
+	// max possible log file number is 2^31 -1
+	public static final long MAX_LOGFILE_NUMBER	= (long)0x7FFFFFFFL; // 2147483647 
+	// lower end of 32 bits in long type are used to store the log file position
+	private static final long FILE_NUMBER_SHIFT	= 32;
+
+	// reserve top 4 bits in log file size for future use
 	public static final long MAX_LOGFILE_SIZE	    = (long)0x0FFFFFFFL; // 268435455
-	// 30 bits are used to store the log file postion
-	private static final long FILE_POSITION_MASK	= (long)0x3FFFFFFFL;
+	// 32 bits are used to store the log file postion
+	private static final long FILE_POSITION_MASK	= (long)0x7FFFFFFFL;
 
 	private long fileNumber;
 	private long filePosition;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
index 99a2aeb1..9a51f751 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
@@ -333,7 +333,7 @@ public int getTypeFormatId() {
 								// must be synchronized with this to access
 								// or change.
 	
-
+	private long              maxLogFileNumber = LogCounter.MAX_LOGFILE_NUMBER;
 	private CheckpointOperation		 currentCheckpoint;
 								// last checkpoint successfully taken
 								// 
@@ -1831,11 +1831,11 @@ private void switchLogFile() throws StandardException
 			// used.
 			StorageFile newLogFile = getLogFileName(logFileNumber+1);
 
-			if (logFileNumber+1 >= LogCounter.MAX_LOGFILE_NUMBER)
+			if (logFileNumber+1 >= maxLogFileNumber)
             {
 				throw StandardException.newException(
                         SQLState.LOG_EXCEED_MAX_LOG_FILE_NUMBER, 
-                        new Long(LogCounter.MAX_LOGFILE_NUMBER)); 
+                        new Long(maxLogFileNumber)); 
             }
 
 			StorageRandomAccessFile newLog = null;	// the new log file
@@ -3059,6 +3059,21 @@ else if (!verifyLogFormat(logFile, logFileNumber))
 		{
 			throw Monitor.exceptionStartingModule(ioe);
 		}
+			
+		// Number of the log file that can be created in Derby is increased from 
+		// 2^22 -1 to 2^31 -1 in version 10.1. But if the database is running on
+		// engines 10.1 or above on a  softupgrade  from versions 10.0 or
+		// before, the max log file number  that can be created is  
+		// still limited to 2^22 -1, because users can revert back to older  versions 
+		// which does not have logic to handle a log file number greater than
+		// 2^22-1. 
+
+		// set max possible log file number to derby 10.0 limit, if the database is not 
+		// fully upgraded to or created in version 10.1 or above. 
+		if (!checkVersion(RawStoreFactory.DERBY_STORE_MAJOR_VERSION_10, 
+						  RawStoreFactory.DERBY_STORE_MINOR_VERSION_1))
+			maxLogFileNumber = LogCounter.DERBY_10_0_MAX_LOGFILE_NUMBER;
+
 	} // end of boot
 
     private void getLogStorageFactory() throws StandardException
