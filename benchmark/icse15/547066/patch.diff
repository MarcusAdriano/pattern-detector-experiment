diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 0129979f..798b4841 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -4149,11 +4149,9 @@ void markForDistinctScan()
 
 
 	/**
-	 * Notify the underlying result set tree that the result is
-	 * ordering dependent.  (For example, no bulk fetch on an index
-	 * if under an IndexRowToBaseRow.)
+	 * @see ResultSetNode#adjustForSortElimination
 	 */
-	void markOrderingDependent()
+	void adjustForSortElimination()
 	{
 		/* NOTE: IRTBR will use a different method to tell us that
 		 * it cannot do a bulk fetch as the ordering issues are
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index f1558d8e..f70cc618 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -310,6 +310,27 @@ public boolean supportsMultipleInstantiations()
 		return supportsMultipleInstantiations;
 	}
 
+	/**
+	 * @see ResultSetNode#adjustForSortElimination()
+	 */
+	public void adjustForSortElimination()
+	{
+		/* It's possible that we have an ORDER BY on the columns for this
+		 * VTI but that the sort was eliminated during preprocessing (see
+		 * esp. SelectNode.preprocess()).  Take as an example the following
+		 * query:
+		 *
+		 *   select distinct * from
+		 *      table(syscs_diag.space_table('T1')) X order by 3
+		 *
+		 * For this query we will merge the ORDER BY and the DISTINCT and
+		 * thereby eliminate the sort for the ORDER BY.  As a result we
+		 * will end up here--but we don't need to do anything special to
+		 * return VTI rows in the correct order, so this method is a no-op.
+		 * DERBY-2805.
+		 */
+	}
+
 	/**
 	 * @see Optimizable#modifyAccessPath
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java
index 0559c0c3..58feba4e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java
@@ -349,11 +349,9 @@ public int updateTargetLockMode()
 	}
 
 	/**
-	 * Notify the underlying result set tree that the result is
-	 * ordering dependent.  (For example, no bulk fetch on an index
-	 * if under an IndexRowToBaseRow.)
+	 * @see ResultSetNode#adjustForSortElimination
 	 */
-	void markOrderingDependent()
+	void adjustForSortElimination()
 	{
 		/* NOTE: We use a different method to tell a FBT that
 		 * it cannot do a bulk fetch as the ordering issues are
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index 6bb91dd9..2b0d602f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -1870,16 +1870,38 @@ void markForDistinctScan()
 	}
 
 	/**
-	 * Notify the underlying result set tree that the result is
-	 * ordering dependent.  (For example, no bulk fetch on an index
-	 * if under an IndexRowToBaseRow.)
-	 */
-	void markOrderingDependent()
+	 * Notify the underlying result set tree that the optimizer has chosen
+	 * to "eliminate" a sort.  Sort elimination can happen as part of
+	 * preprocessing (see esp. SelectNode.preprocess(...)) or it can happen
+	 * if the optimizer chooses an access path that inherently returns the
+	 * rows in the correct order (also known as a "sort avoidance" plan).
+	 * In either case we drop the sort and rely on the underlying result set
+	 * tree to return its rows in the correct order.
+	 *
+	 * For most types of ResultSetNodes we automatically get the rows in the
+	 * correct order if the sort was eliminated. One exception to this rule,
+	 * though, is the case of an IndexRowToBaseRowNode, for which we have
+	 * to disable bulk fetching on the underlying base table.  Otherwise
+	 * the index scan could return rows out of order if the base table is
+	 * updated while the scan is "in progress" (i.e. while the result set
+	 * is open).
+	 *
+	 * In order to account for this (and potentially other, similar issues
+	 * in the future) this method exists to notify the result set node that
+	 * it is expected to return rows in the correct order.  The result set
+	 * can then take necessary action to satsify this requirement--such as
+	 * disabling bulk fetch in the case of IndexRowToBaseRowNode.
+	 *
+	 * All of that said, any ResultSetNodes for which we could potentially
+	 * eliminate sorts should override this method accordingly.  So we don't
+	 * ever expect to get here.
+	 */
+	void adjustForSortElimination()
 	{
 		if (SanityManager.DEBUG)
 		{
 			SanityManager.THROWASSERT(
-				"markOrderingDependent() not expected to be called for " +
+				"adjustForSortElimination() not expected to be called for " +
 				getClass().getName());
 		}
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
index b56395fb..31a1b125 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
@@ -724,11 +724,9 @@ void optimizeSubqueries(DataDictionary dd, double rowCount)
 	}
 
 	/**
-	 * Notify the underlying result set tree that the result is
-	 * ordering dependent.  (For example, no bulk fetch on an index
-	 * if under an IndexRowToBaseRow.)
+	 * @see ResultSetNode#adjustForSortElimination
 	 */
-	void markOrderingDependent()
+	void adjustForSortElimination()
 	{
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index d2bd6e79..1ce8bcbd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -1206,7 +1206,7 @@ public boolean flattenableInFromSubquery(FromList fromList)
 	public ResultSetNode genProjectRestrict(int origFromListSize)
 				throws StandardException
 	{
-		boolean				orderingDependent = false;
+		boolean				eliminateSort = false;
 		PredicateList		restrictionList;
 		ResultColumnList	prRCList;
 		ResultSetNode		prnRSN;
@@ -1255,8 +1255,8 @@ public ResultSetNode genProjectRestrict(int origFromListSize)
 			groupByList = null;
 			prnRSN  = gbn.getParent();
 
-			// Remember if the result is dependent on the ordering
-			orderingDependent = orderingDependent || gbn.getIsInSortedOrder();
+			// Remember whether or not we can eliminate the sort.
+			eliminateSort = eliminateSort || gbn.getIsInSortedOrder();
 		}
 
 		// if it is distinct, that must also be taken care of.
@@ -1322,8 +1322,8 @@ public ResultSetNode genProjectRestrict(int origFromListSize)
 											getContextManager());
 				prnRSN.costEstimate = costEstimate.cloneMe();
 
-				// Remember if the result is dependent on the ordering
-				orderingDependent = orderingDependent || inSortedOrder;
+				// Remember whether or not we can eliminate the sort.
+				eliminateSort = eliminateSort || inSortedOrder;
 			}
 		}
 
@@ -1395,18 +1395,18 @@ public ResultSetNode genProjectRestrict(int origFromListSize)
 
 		if (!(orderByList != null && orderByList.getSortNeeded()) && orderByQuery)
 		{
-			// Remember if the result is dependent on the ordering
-			orderingDependent = true;
+			// Remember whether or not we can eliminate the sort.
+			eliminateSort = true;
 		}
 
-		/* If the result is ordering dependent, then we must
-		 * tell the underlying tree.  At minimum, this means no
-		 * group fetch on an index under an IndexRowToBaseRow
-		 * since that could lead to incorrect results.  (Bug 2347.)
+		/* If we were able to eliminate the sort during optimization then
+		 * we must tell the underlying tree.  At minimum, this means no
+		 * group fetch on an index under an IndexRowToBaseRow since that
+		 * that could lead to incorrect results.  (Bug 2347.)
 		 */
-		if (orderingDependent)
+		if (eliminateSort)
 		{
-			prnRSN.markOrderingDependent();
+			prnRSN.adjustForSortElimination();
 		}
 
 		/* Set the cost of this node in the generated node */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java
index 65807498..c153baa0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java
@@ -569,13 +569,11 @@ void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)
 	}
 
 	/**
-	 * Notify the underlying result set tree that the result is
-	 * ordering dependent.  (For example, no bulk fetch on an index
-	 * if under an IndexRowToBaseRow.)
+	 * @see ResultSetNode#adjustForSortElimination
 	 */
-	void markOrderingDependent()
+	void adjustForSortElimination()
 	{
-		childResult.markOrderingDependent();
+		childResult.adjustForSortElimination();
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
index 5045bde6..c76042b8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
@@ -929,14 +929,12 @@ void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)
 	}
 
 	/**
-	 * Notify the underlying result set tree that the result is
-	 * ordering dependent.  (For example, no bulk fetch on an index
-	 * if under an IndexRowToBaseRow.)
+	 * @see ResultSetNode#adjustForSortElimination
 	 */
-	void markOrderingDependent()
+	void adjustForSortElimination()
 	{
-		leftResultSet.markOrderingDependent();
-		rightResultSet.markOrderingDependent();
+		leftResultSet.adjustForSortElimination();
+		rightResultSet.adjustForSortElimination();
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
index 95ef1bc2..84137f54 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
@@ -564,6 +564,91 @@ public void testInvalidTableFunctions() throws Exception
         st.close();
     }
 
+    /**
+     * Test that diagnostic VTIs will work correctly when an ORDER BY
+     * clause appears and/or sort elimination occurs.  DERBY-2805.
+     */
+    public void testOrderBy() throws SQLException
+    {
+        Statement st = createStatement();
+        st.executeUpdate("set schema APP");
+
+        // Create a single testing table for this fixture only.
+
+        st.execute("create table ob_t1 (i int, c char(250))");
+        st.execute("create index i_ix on ob_t1 (i)");
+        st.execute("create index c_ix on ob_t1 (c desc)");
+
+        /* Several queries to make sure ORDER BY actually takes effect.
+         * First execute with just the ORDER BY, then execute with the
+         * ORDER BY *and* a DISTINCT. The latter leads to sort elimination
+         * but should still run without error and return the same results
+         * (prior to the fix for DERBY-2805 the sort elimination would
+         * lead to an ASSERT failure with sane builds).
+         */
+
+        String [][] expRS = new String [][]
+        {
+            {"C_IX", "1", "0"},
+            {"I_IX", "1", "0"},
+            {"OB_T1", "0", "0"},
+        };
+
+        ResultSet rs = st.executeQuery(
+            "select CONGLOMERATENAME, ISINDEX, NUMFREEPAGES from " +
+            "table(syscs_diag.space_table('OB_T1')) X order by 1");
+
+        JDBC.assertFullResultSet(rs, expRS);
+
+        rs = st.executeQuery(
+            "select distinct CONGLOMERATENAME, ISINDEX, NUMFREEPAGES from " +
+            "table(syscs_diag.space_table('OB_T1')) X order by 1");
+
+        JDBC.assertFullResultSet(rs, expRS);
+
+        expRS = new String [][]
+        {
+            {"OB_T1", "0", "0"},
+            {"C_IX", "1", "0"},
+            {"I_IX", "1", "0"},
+        };
+
+        rs = st.executeQuery(
+            "select CONGLOMERATENAME, ISINDEX, NUMFREEPAGES from " +
+            "table(syscs_diag.space_table('OB_T1')) X order by 2, 1");
+
+        JDBC.assertFullResultSet(rs, expRS);
+
+        rs = st.executeQuery(
+            "select distinct CONGLOMERATENAME, ISINDEX, NUMFREEPAGES from " +
+            "table(syscs_diag.space_table('OB_T1')) X order by 2, 1");
+
+        JDBC.assertFullResultSet(rs, expRS);
+        expRS = new String [][]
+        {
+            {"OB_T1", "0", "0"},
+            {"I_IX", "1", "0"},
+            {"C_IX", "1", "0"},
+        };
+
+        rs = st.executeQuery(
+            "select CONGLOMERATENAME, ISINDEX, NUMFREEPAGES from " +
+            "table(syscs_diag.space_table('OB_T1')) X order by 2, 1 desc");
+
+        JDBC.assertFullResultSet(rs, expRS);
+
+        rs = st.executeQuery(
+            "select distinct CONGLOMERATENAME, ISINDEX, NUMFREEPAGES from " +
+            "table(syscs_diag.space_table('OB_T1')) X order by 2, 1 desc");
+
+        JDBC.assertFullResultSet(rs, expRS);
+
+        // Cleanup.
+
+        st.execute("drop table ob_t1");
+        st.close();
+    }
+
     /* All statements in this method should fail because a VTI table-
      * mapping that takes arguments can only be used as part of the TABLE 
      * constructor.  Any other uses of, or attempts to modify, such a
