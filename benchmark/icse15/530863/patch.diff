diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
index a4989832..73f1e97f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
@@ -35,7 +35,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.apache.derby.jdbc.ClientDataSource;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
 import org.apache.derbyTesting.junit.JDBC;
@@ -170,7 +169,7 @@ public void testConnectShutdownAuthentication() throws SQLException {
         assertShutdownWOUPFail("2850H", dbName, "dan", ("dan" + PASSWORD_SUFFIX));
         assertShutdownFail("2850H", dbName, "system", "admin");
         assertShutdownWOUPFail("2850H", dbName, "system", "admin");
-        assertShutdownOK(dbName, "APP", ("APP" + PASSWORD_SUFFIX));
+        assertShutdownUsingConnAttrsOK(dbName, "APP", ("APP" + PASSWORD_SUFFIX));
         
         // ensure that a password is encrypted
         Connection conn1 = openDefaultConnection(
@@ -532,7 +531,8 @@ public Object run(){
             assertConnectionOK(dbName, apollo, zeus);
             assertShutdownFail("08004", dbName, zeus, zeus);
             assertShutdownFail("2850H", dbName, apollo, zeus);
-            assertShutdownOK(dbName, "APP", ("APP" + PASSWORD_SUFFIX));
+            assertShutdownUsingSetShutdownOK(
+                dbName, "APP", ("APP" + PASSWORD_SUFFIX));
 
             conn1 = openDefaultConnection(zeus, apollo);
             Statement stmt = conn1.createStatement();
@@ -582,7 +582,8 @@ public Object run(){
                 }
         });
         // bring down the database
-        assertShutdownOK(dbName, "APP", "APP" + PASSWORD_SUFFIX);
+        assertShutdownUsingSetShutdownOK(
+            dbName, "APP", "APP" + PASSWORD_SUFFIX);
         // recheck
         assertConnectionOK(dbName, "system", "admin");
         assertConnectionOK(dbName, "dan", ("dan" + PASSWORD_SUFFIX));
@@ -616,7 +617,8 @@ public Object run(){
         conn1.commit();
         conn1.close();
         openDefaultConnection("system", "admin");
-        assertShutdownOK(dbName, "APP", "APP" + PASSWORD_SUFFIX);
+        assertShutdownUsingSetShutdownOK(
+            dbName, "APP", "APP" + PASSWORD_SUFFIX);
         assertSystemShutdownOK("", "system", "admin");
         openDefaultConnection("system", "admin"); // just so teardown works.
     }
@@ -745,12 +747,8 @@ protected void assertConnectionWOUPFail(
         }
     }
 
-    protected void assertShutdownOK(
-        String dbName, String user, String password)
-    throws SQLException {
-
-        if (usingEmbedded())
-        {
+    protected void assertShutdownUsingSetShutdownOK(
+            String dbName, String user, String password) throws SQLException {
             DataSource ds = JDBCDataSource.getDataSource(dbName);
             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
             try {
@@ -761,11 +759,13 @@ protected void assertShutdownOK(
                 assertSQLState("08006", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientDataSource ds = 
-                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
-            ds.setConnectionAttributes("shutdown=true");
+
+    protected void assertShutdownUsingConnAttrsOK(
+        String dbName, String user, String password) throws SQLException {
+
+        DataSource ds = JDBCDataSource.getDataSource(dbName);
+        JDBCDataSource.setBeanProperty(
+            ds, "connectionAttributes", "shutdown=true");
             try {
                 ds.getConnection(user, password);
                 fail("expected shutdown to fail");
@@ -774,7 +774,6 @@ else if (usingDerbyNetClient())
                 assertSQLState("08006", e);
             }
         }
-    }
 
     // same action as with assertShutdownOK, but using ds.getConnection()
     // instead of ds.getConnection(user, password). So, setting user and
@@ -783,8 +782,6 @@ protected void assertShutdownWOUPOK(
         String dbName, String user, String password)
     throws SQLException {
 
-        if (usingEmbedded())
-        {
             DataSource ds = JDBCDataSource.getDataSource(dbName);
             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
             JDBCDataSource.setBeanProperty(ds, "user", user);
@@ -797,30 +794,11 @@ protected void assertShutdownWOUPOK(
                 assertSQLState("08006", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientDataSource ds = 
-                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
-            ds.setConnectionAttributes(
-                    "shutdown=true;user=" + user + ";password="+password);
-            try {
-                ds.getConnection();
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                // expect 08006 on successful shutdown
-                assertSQLState("08006", e);
-            }
-        }
-    }
     
     protected void assertShutdownFail(
         String expectedSqlState, String dbName, String user, String password) 
     throws SQLException
     {
-
-        // with DerbyNetClient there is no Datasource setShutdownDatabase method
-        if (usingEmbedded()) 
-        {
             DataSource ds = JDBCDataSource.getDataSource(dbName);
             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
             try {
@@ -830,28 +808,11 @@ protected void assertShutdownFail(
                 assertSQLState(expectedSqlState, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientDataSource ds = 
-                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
-            ds.setConnectionAttributes("shutdown=true");
-            try {
-                ds.getConnection(user, password);
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedSqlState, e);
-            }
-        }
-    }
     
     protected void assertShutdownWOUPFail(
         String expectedSqlState, String dbName, String user, String password) 
     throws SQLException
     {
-        // with DerbyNetClient there is no Datasource setShutdownDatabase 
-        // method so can't use the same setBeanProperty as with embedded
-        if (usingEmbedded()) 
-        {
             DataSource ds = JDBCDataSource.getDataSource(dbName);
             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
             JDBCDataSource.setBeanProperty(ds, "user", user);
@@ -863,24 +824,11 @@ protected void assertShutdownWOUPFail(
                 assertSQLState(expectedSqlState, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientDataSource ds = 
-                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
-            ds.setConnectionAttributes(
-                "shutdown=true;user=" + user + ";password="+password);
-            try {
-                ds.getConnection();
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedSqlState, e);
-            }
-        }
-    }
     
     protected void assertSystemShutdownOK(
         String dbName, String user, String password)
     throws SQLException {
+        DataSource ds;
         if (usingEmbedded())
         {
             // we cannot use JDBCDataSource.getDataSource() (which uses the
@@ -889,77 +837,58 @@ protected void assertSystemShutdownOK(
             // The alternative is to use jDBCDataSource.getDatasource(dbName),
             // where dbName is an empty string - this will in the current code
             // be interpreted as a system shutdown.
-            DataSource ds = JDBCDataSource.getDataSource();
+            
+            ds = JDBCDataSource.getDataSource();
             JDBCDataSource.clearStringBeanProperty(ds, "databaseName");
-            JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
-            try {
-                ds.getConnection(user, password);
-                fail("expected system shutdown resulting in XJ015 error");
-            } catch (SQLException e) {
-                // expect XJ015, system shutdown, on successful shutdown
-                assertSQLState("XJ015", e);
-            }
         }
-        else if (usingDerbyNetClient())
+        else 
         {
-            // ds.setShutdown is not currently suppported by client, so we need
-            // to use ds.setConnectionAttributes.
             // With client, we cannot user clearStringBeanProperty on the  
             // databaseName, that will result in error 08001 - 
             // Required DataSource property databaseName not set.
             // So, we pass an empty string as databaseName, which the current
             // code interprets as a system shutdown.
-            ClientDataSource ds = 
-                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
-            ds.setConnectionAttributes("shutdown=true");
+            ds = JDBCDataSource.getDataSource(dbName);
+        }
+        
+        JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
             try {
                 ds.getConnection(user, password);
-                fail("expected shutdown to fail");
+            fail("expected system shutdown resulting in XJ015 error");
             } catch (SQLException e) {
-                // expect XJ015 on successful shutdown
+            // expect XJ015, system shutdown, on successful shutdown
                 assertSQLState("XJ015", e);
             }
         }
-    }
 
     protected void assertSystemShutdownFail(
         String expectedError, String dbName, String user, String password)
     throws SQLException {
+        DataSource ds;
         if (usingEmbedded())
         {
-            DataSource ds = JDBCDataSource.getDataSource();
+            ds = JDBCDataSource.getDataSource();
             JDBCDataSource.clearStringBeanProperty(ds, "databaseName");
-            JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
-            JDBCDataSource.setBeanProperty(ds, "user", user);
-            JDBCDataSource.setBeanProperty(ds, "password", password);
-            try {
-                ds.getConnection();
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedError, e);
-            }
         }
-        else if (usingDerbyNetClient())
+        else
         {
-            ClientDataSource ds = 
-                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
-            // note: with network server, you cannot set the databaseName
+            // note: with network server/client, you can't set the databaseName
             // to null, that results in error 08001 - Required DataSource
             // property databaseName not set.
             // so, we rely on passing of an empty string for databaseName,
             // which in the current code is interpreted as system shutdown.
-            // also, we need to use setConnectionAttributes.
-            ds.setConnectionAttributes(
-                "shutdown=true;user=" + user + ";password=" + password);
+            ds = JDBCDataSource.getDataSource(dbName);
+        }
+        JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
+        JDBCDataSource.setBeanProperty(ds, "user", user);
+        JDBCDataSource.setBeanProperty(ds, "password", password);
             try {
                 ds.getConnection();
                 fail("expected shutdown to fail");
-                ds.getConnection(user, password);
             } catch (SQLException e) {
                 assertSQLState(expectedError, e);
             }
         }
-    }
     
     public void assertConnectionFail(String dbName) throws SQLException {
         
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java
index 2e9de2f9..6d8d9f8c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java
@@ -39,6 +39,7 @@
 public class DSCreateShutdownDBTest extends BaseJDBCTestCase {
 
     static final String[] ADDITIONAL_DBS = {
+        "dscreateconatdb1",
         "dscreateshutdowndb1", 
         "dscreateshutdowndb2",
         "conflict1",
@@ -58,7 +59,7 @@ public DSCreateShutdownDBTest(String name) {
 
     public static Test suite() 
     {
-        TestSuite suite = new TestSuite("DSCreateShutdownTest"); 
+        TestSuite suite = new TestSuite("DSCreateShutdownDBTest"); 
         Test test = TestConfiguration.defaultSuite(DSCreateShutdownDBTest.class);        
         //Test test = TestConfiguration.clientServerSuite(DSCreateShutdownDBTest.class);
         suite.addTest(test);
@@ -78,8 +79,8 @@ public static Test suite()
     
     public void tearDown() throws Exception {
         // attempt to get rid of any databases. 
-        // only 4 dbs (in addition to defaultdb) should actually get
-        // created, but just in case...
+        // only 5 dbs (in addition to defaultdb) should actually get
+        // created, but just in case, try all...
         AccessController.doPrivileged(new java.security.PrivilegedAction() {
             public Object run() {
                 for (int i=0 ; i < ADDITIONAL_DBS.length ; i++)
@@ -166,21 +167,24 @@ public void testCreateAndShutdown() throws SQLException {
         
         assertReset(dbName);
         
-        // check that shutting down using Attributes works
+        // check that create using ConnAttributes works
+        assertCreateUsingConnAttrsOK(composeDatabaseName(ADDITIONAL_DBS[0]));
+        
+        // check that shutting down using ConnAttributes works
         assertShutdownUsingConnAttrsOK(dbName);
         // re-vive db
         getConnection();
         
         // now, actually create, and shutdown a database
         // first ensure it's not there yet
-        dbName = composeDatabaseName(ADDITIONAL_DBS[0]);
+        dbName = composeDatabaseName(ADDITIONAL_DBS[1]);
         assertNoDB(dbName);
         // straightforward create and shutdown
         assertPositive(dbName);
         
         // what happens when you combine set*Database and 
         // matching connection attribute? (should work)
-        dbName = composeDatabaseName(ADDITIONAL_DBS[1]);
+        dbName = composeDatabaseName(ADDITIONAL_DBS[2]);
         assertNoDB(dbName);
         assertTwiceOK(dbName);
         
@@ -190,15 +194,15 @@ public void testCreateAndShutdown() throws SQLException {
         // what happens when you combine create and shutdown connattr?
         // database does not get created.
         assertShutdownAndCreateConnAttr(DBNotFoundState, 
-            composeDatabaseName(ADDITIONAL_DBS[2]), 
+            composeDatabaseName(ADDITIONAL_DBS[3]), 
             "shutdown=true;create=true");
         assertShutdownAndCreateConnAttr(DBNotFoundState, 
-            composeDatabaseName(ADDITIONAL_DBS[3]), 
+            composeDatabaseName(ADDITIONAL_DBS[4]), 
             "create=true;shutdown=true");
 
         // and when you set both setShutdownDatabase and setCreateDatabase?
         // database does not get created
-        assertConflictedSettersOK(composeDatabaseName(ADDITIONAL_DBS[4]));
+        assertConflictedSettersOK(composeDatabaseName(ADDITIONAL_DBS[5]));
         
         // what happens when you combine set*Database and
         // opposing connection attributes? database does not get created. 
@@ -237,6 +241,7 @@ protected void assertNotSetAndGet(
     protected void assertReset(String dbName) 
     throws SQLException {
         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
+
         JDBCDataSource.setBeanProperty(ds, "createDatabase", "");
         assertNull(getBeanProperty(ds, "createDatabase"));
         JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
@@ -281,7 +286,6 @@ public static Object getBeanProperty(Object ds, String propertyString)
         String getterName = getGetterName(propertyString);
 
         // Base the type of the setter method from the value's class.
-
         Object retObject=null;
         try {
             Method getter = ds.getClass().getMethod(getterName, null);
@@ -310,9 +314,20 @@ protected void assertShutdownUsingSetOK(String dbName, boolean connAttr)
         assertDSConnectionFailed("08006", ds);
     }
     
-    protected void assertShutdownUsingConnAttrsOK(String dbName)
+    // for completeness' sake, test create=true conn attr.
+    protected void assertCreateUsingConnAttrsOK(String dbName)
     throws SQLException {
+        DataSource ds = JDBCDataSource.getDataSource(dbName);
+        JDBCDataSource.setBeanProperty(
+                ds, "ConnectionAttributes", "create=true");
+        assertUpdateCount(
+            ds.getConnection().createStatement(), 0, "set schema APP");
+        JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
+        assertShutdownUsingSetOK(dbName, false);
+    }
 
+    protected void assertShutdownUsingConnAttrsOK(String dbName)
+    throws SQLException {
         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
         JDBCDataSource.setBeanProperty(
             ds, "ConnectionAttributes", "shutdown=true");
@@ -379,17 +394,16 @@ protected void assertConflictedSettersOK(String dbName) throws SQLException {
 
     protected void assertConflictedSetterConnAttrOK() 
     throws SQLException {
-        assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[5]), 
+        assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[6]), 
             "shutdown=true", "CreateDatabase", "create");
         // with the new networkserver methods, this actually works...
-        assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[6]),
+        assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[7]),
             "create=true", "ShutdownDatabase", "shutdown");
-        assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[7]), 
+        assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[8]), 
             "shutdown=true", "CreateDatabase", "create");
         // with the new networkserver methods, this actually works...
-        assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[8]),
+        assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[9]),
             "create=true", "ShutdownDatabase", "shutdown");
-
     }
     
     // first sets setCreate/ShutdownDB, then sets ConnectionAttributes
@@ -397,7 +411,6 @@ protected void assertConSetOK(String expectedSQLState, String dbName,
         String connAttrValue, String setter, String setValue) 
     throws SQLException {
         DataSource ds = JDBCDataSource.getDataSource(dbName);
-        
         JDBCDataSource.setBeanProperty(ds, setter, setValue);
         JDBCDataSource.setBeanProperty(
             ds, "ConnectionAttributes", connAttrValue);
@@ -416,7 +429,6 @@ protected void assertSetConOK(String expectedSQLState, String dbName,
         String connAttrValue, String setter, String setValue) 
     throws SQLException {
         DataSource ds = JDBCDataSource.getDataSource(dbName);
-        
         JDBCDataSource.setBeanProperty(
             ds, "ConnectionAttributes", connAttrValue);
         JDBCDataSource.setBeanProperty(ds, setter, setValue);
@@ -429,5 +441,4 @@ protected void assertSetConOK(String expectedSQLState, String dbName,
         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
         JDBCDataSource.clearStringBeanProperty(ds, setter);
     }
-
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java
index acbc77b0..0d1844f3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java
@@ -23,15 +23,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
 import java.sql.SQLException;
-import java.util.Properties;
 
 import javax.sql.ConnectionPoolDataSource;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
-import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
 import org.apache.derbyTesting.junit.J2EEDataSource;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.JDBCDataSource;
@@ -155,11 +152,9 @@ protected void assertConnectionWOUPFail(
         }
     }
     
-    protected void assertShutdownOK(
+    protected void assertShutdownUsingSetShutdownOK(
         String dbName, String user, String password)
     throws SQLException {
-        if (usingEmbedded())
-        {
             pds = J2EEDataSource.getConnectionPoolDataSource();
             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
@@ -171,13 +166,12 @@ protected void assertShutdownOK(
                 assertSQLState("08006", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientConnectionPoolDataSource pds = 
-                (ClientConnectionPoolDataSource)
-                J2EEDataSource.getConnectionPoolDataSource();
-            pds.setDatabaseName(dbName);
-            pds.setConnectionAttributes("shutdown=true");
+    
+    protected void assertShutdownUsingConnAttrsOK(
+        String dbName, String user, String password) throws SQLException {
+        pds = J2EEDataSource.getConnectionPoolDataSource();
+        JDBCDataSource.setBeanProperty(
+            pds, "connectionAttributes", "shutdown=true");
             try {
                 pds.getPooledConnection(user, password);
                 fail("expected shutdown to fail");
@@ -186,13 +180,10 @@ else if (usingDerbyNetClient())
                 assertSQLState("08006", e);
             }
         }
-    }
 
     protected void assertShutdownWOUPOK(
         String dbName, String user, String password)
     throws SQLException {
-        if (usingEmbedded())
-        {
             pds = J2EEDataSource.getConnectionPoolDataSource();
             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
             JDBCDataSource.setBeanProperty(pds, "user", user);
@@ -206,30 +197,11 @@ protected void assertShutdownWOUPOK(
                 assertSQLState("08006", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientConnectionPoolDataSource pds = 
-                (ClientConnectionPoolDataSource)
-                J2EEDataSource.getConnectionPoolDataSource();
-            pds.setDatabaseName(dbName);
-            pds.setConnectionAttributes(
-                "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                pds.getPooledConnection();
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                // expect 08006 on successful shutdown
-                assertSQLState("08006", e);
-            }
-        }
-    }
 
     protected void assertShutdownFail(
         String expectedSqlState, String dbName, String user, String password) 
     throws SQLException
     {
-        if (usingEmbedded()) 
-        {
             pds = J2EEDataSource.getConnectionPoolDataSource();
             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
@@ -240,28 +212,11 @@ protected void assertShutdownFail(
                 assertSQLState(expectedSqlState, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientConnectionPoolDataSource pds = 
-                (ClientConnectionPoolDataSource)
-                J2EEDataSource.getConnectionPoolDataSource();
-            pds.setConnectionAttributes("shutdown=true");
-            pds.setDatabaseName(dbName);
-            try {
-                pds.getPooledConnection(user, password);
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedSqlState, e);
-            }
-        }
-    }
     
     protected void assertShutdownWOUPFail(
         String expectedSqlState, String dbName, String user, String password) 
     throws SQLException
     {
-        if (usingEmbedded()) 
-        {
             pds = J2EEDataSource.getConnectionPoolDataSource();
             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
             JDBCDataSource.setBeanProperty(pds, "user", user);
@@ -274,31 +229,15 @@ protected void assertShutdownWOUPFail(
                 assertSQLState(expectedSqlState, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientConnectionPoolDataSource pds = 
-                (ClientConnectionPoolDataSource)
-                J2EEDataSource.getConnectionPoolDataSource();
-            pds.setDatabaseName(dbName);
-            pds.setConnectionAttributes(
-                    "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                pds.getPooledConnection();
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedSqlState, e);
-            }
-        }
-    }
 
+    // using an empty dbName is interpreted as system shutdown
     protected void assertSystemShutdownOK(
         String dbName, String user, String password)
     throws SQLException {
-        if (usingEmbedded())
-        {
             pds = J2EEDataSource.getConnectionPoolDataSource();
             JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
+        JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
             JDBCDataSource.setBeanProperty(pds, "user", user);
             JDBCDataSource.setBeanProperty(pds, "password", password);
             try {
@@ -309,34 +248,13 @@ protected void assertSystemShutdownOK(
                 assertSQLState("XJ015", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientConnectionPoolDataSource pds = 
-                (ClientConnectionPoolDataSource)
-                J2EEDataSource.getConnectionPoolDataSource();
-            // current client/server code interprets shutdown with an
-            // empty databaseName string as a system shutdown
-            pds.setDatabaseName(dbName);
-            // Client does not support *ds*.setShutdown(), use set Conn Attrs 
-            pds.setConnectionAttributes(
-                    "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                pds.getPooledConnection(user, password);
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                // expect XJ015 on successful shutdown
-                assertSQLState("XJ015", e);
-            }
-        }
-    }
 
     protected void assertSystemShutdownFail(
             String expectedError, String dbName, String user, String password)
     throws SQLException {
-        if (usingEmbedded())
-        {
             pds = J2EEDataSource.getConnectionPoolDataSource();
             JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
+        JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
             JDBCDataSource.setBeanProperty(pds, "user", user);
             JDBCDataSource.setBeanProperty(pds, "password", password);
@@ -347,46 +265,17 @@ protected void assertSystemShutdownFail(
                 assertSQLState(expectedError, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientConnectionPoolDataSource pds = 
-                (ClientConnectionPoolDataSource)
-                J2EEDataSource.getConnectionPoolDataSource();
-            // current client/server code interprets shutdown with an
-            // empty databaseName string as a system shutdown
-            pds.setDatabaseName(dbName);
-            // Client does not support *ds*.setShutdown(), use set Conn Attrs 
-            pds.setConnectionAttributes(
-                    "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                pds.getPooledConnection(user, password);
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedError, e);
-            }
-        }
-    }
 
     public void assertConnectionFail(String dbName) throws SQLException {
-        // can't rely on junit framework automatic methods for they'll
-        // default the user / password which need to remain empty
+        pds = J2EEDataSource.getConnectionPoolDataSource();
+        // Reset to no user/password though client requires
+        // a valid name, so reset to the default
         if (usingDerbyNetClient())
-        {
-            ClientConnectionPoolDataSource pds = 
-                new ClientConnectionPoolDataSource();
-            pds.setDatabaseName(dbName);
-            try {
-                pds.getPooledConnection();
-                fail("expected connection to fail");
-            } catch (SQLException e) {
-                assertSQLState("08004", e);
-            }
-        }
-        else if (usingEmbedded()) 
-        {
-            EmbeddedConnectionPoolDataSource pds = 
-                new EmbeddedConnectionPoolDataSource();
-            pds.setDatabaseName(dbName);
+            JDBCDataSource.setBeanProperty(pds, "user", "APP");
+        else
+            JDBCDataSource.clearStringBeanProperty(pds, "user");
+        JDBCDataSource.clearStringBeanProperty(pds, "password");
+        JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
             try {
                 pds.getPooledConnection();
                 fail("expected connection to fail");
@@ -394,5 +283,4 @@ else if (usingEmbedded())
                 assertSQLState("08004", e);
             }
         }
-    }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java
index 68542209..6e138955 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java
@@ -23,14 +23,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
 import java.sql.SQLException;
-import java.util.Properties;
+
 import javax.sql.XADataSource;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.apache.derby.jdbc.ClientXADataSource;
-import org.apache.derby.jdbc.EmbeddedXADataSource;
 import org.apache.derbyTesting.junit.J2EEDataSource;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.JDBCDataSource;
@@ -151,11 +149,8 @@ protected void assertConnectionWOUPFail(
         }
     }
     
-    protected void assertShutdownOK(
-        String dbName, String user, String password)
-    throws SQLException {
-        if (usingEmbedded())
-        {
+    protected void assertShutdownUsingSetShutdownOK(
+            String dbName, String user, String password) throws SQLException {
             xads = J2EEDataSource.getXADataSource();
             JDBCDataSource.setBeanProperty(xads, "databaseName", dbName);
             JDBCDataSource.setBeanProperty(
@@ -168,12 +163,12 @@ protected void assertShutdownOK(
                 assertSQLState("08006", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientXADataSource xads = 
-                (ClientXADataSource)J2EEDataSource.getXADataSource();
-            xads.setDatabaseName(dbName);
-            xads.setConnectionAttributes("shutdown=true");
+
+    protected void assertShutdownUsingConnAttrsOK(
+        String dbName, String user, String password) throws SQLException {
+        xads = J2EEDataSource.getXADataSource();
+        JDBCDataSource.setBeanProperty(
+            xads, "connectionAttributes", "shutdown=true");
             try {
                 xads.getXAConnection(user, password);
                 fail("expected shutdown to fail");
@@ -182,13 +177,10 @@ else if (usingDerbyNetClient())
                 assertSQLState("08006", e);
             }
         }
-    }
 
     protected void assertShutdownWOUPOK(
         String dbName, String user, String password)
     throws SQLException {
-        if (usingEmbedded())
-        {
             xads = J2EEDataSource.getXADataSource();
             JDBCDataSource.setBeanProperty(xads, "databaseName", dbName);
             JDBCDataSource.setBeanProperty(
@@ -203,29 +195,11 @@ protected void assertShutdownWOUPOK(
                 assertSQLState("08006", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientXADataSource xads = 
-                (ClientXADataSource)J2EEDataSource.getXADataSource();
-            xads.setDatabaseName(dbName);
-            xads.setConnectionAttributes(
-                "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                xads.getXAConnection();
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                // expect 08006 on successful shutdown
-                assertSQLState("08006", e);
-            }
-        }
-    }
 
     protected void assertShutdownFail(
         String expectedSqlState, String dbName, String user, String password) 
     throws SQLException
     {
-        if (usingEmbedded()) 
-        {
             xads = J2EEDataSource.getXADataSource();
             JDBCDataSource.setBeanProperty(xads, "shutdownDatabase", "shutdown");
             JDBCDataSource.setBeanProperty(xads, "databaseName", dbName);
@@ -236,27 +210,11 @@ protected void assertShutdownFail(
                 assertSQLState(expectedSqlState, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientXADataSource xads = 
-                (ClientXADataSource)J2EEDataSource.getXADataSource();
-            xads.setDatabaseName(dbName);
-            xads.setConnectionAttributes("shutdown=true");
-            try {
-                xads.getXAConnection(user, password);
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedSqlState, e);
-            }
-        }
-    }
             
     protected void assertShutdownWOUPFail(
         String expectedSqlState, String dbName, String user, String password) 
     throws SQLException
     {
-        if (usingEmbedded()) 
-        {
             xads = J2EEDataSource.getXADataSource();
             JDBCDataSource.setBeanProperty(xads, "shutdownDatabase", "shutdown");
             JDBCDataSource.setBeanProperty(xads, "databaseName", dbName);
@@ -269,27 +227,10 @@ protected void assertShutdownWOUPFail(
                 assertSQLState(expectedSqlState, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientXADataSource xads = 
-                (ClientXADataSource)J2EEDataSource.getXADataSource();
-            xads.setDatabaseName(dbName);
-            xads.setConnectionAttributes(
-                "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                xads.getXAConnection();
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedSqlState, e);
-            }
-        }
-    }
 
     protected void assertSystemShutdownOK(
         String dbName, String user, String password)
     throws SQLException {
-        if (usingEmbedded())
-        {
             xads = J2EEDataSource.getXADataSource();
             JDBCDataSource.setBeanProperty(
                 xads, "shutdownDatabase", "shutdown");
@@ -304,31 +245,10 @@ protected void assertSystemShutdownOK(
                 assertSQLState("XJ015", e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientXADataSource xads = 
-                (ClientXADataSource)J2EEDataSource.getXADataSource();
-            // current client/server code interprets shutdown with an
-            // empty databaseName string as a system shutdown
-            xads.setDatabaseName(dbName);
-            // Client does not support *ds*.setShutdown(), use set Conn Attrs 
-            xads.setConnectionAttributes(
-                "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                xads.getXAConnection(user, password);
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                // expect XJ015 on successful shutdown
-                assertSQLState("XJ015", e);
-            }
-        }
-    }
 
     protected void assertSystemShutdownFail(
         String expectedError, String dbName, String user, String password)
     throws SQLException {
-        if (usingEmbedded())
-        {
             xads = J2EEDataSource.getXADataSource();
             JDBCDataSource.setBeanProperty(
                 xads, "shutdownDatabase", "shutdown");
@@ -342,43 +262,17 @@ protected void assertSystemShutdownFail(
                 assertSQLState(expectedError, e);
             }
         }
-        else if (usingDerbyNetClient())
-        {
-            ClientXADataSource xads = 
-                (ClientXADataSource)J2EEDataSource.getXADataSource();
-            // current client/server code interprets shutdown with an
-            // empty databaseName string as a system shutdown
-            xads.setDatabaseName(dbName);
-            // Client does not support *ds*.setShutdown(), use set Conn Attrs 
-            xads.setConnectionAttributes(
-                "shutdown=true;user=" + user + ";password=" + password);
-            try {
-                xads.getXAConnection(user, password);
-                fail("expected shutdown to fail");
-            } catch (SQLException e) {
-                assertSQLState(expectedError, e);
-            }
-        }
-    }
 
     public void assertConnectionFail(String dbName) throws SQLException {
-        // can't rely on junit framework automatic methods for they'll
-        // default the user / password which need to remain empty
+        xads = J2EEDataSource.getXADataSource();
+        // Reset to no user/password though client requires
+        // a valid name, so reset to the default
         if (usingDerbyNetClient())
-        {
-            ClientXADataSource xads = new ClientXADataSource();
-            xads.setDatabaseName(dbName);
-            try {
-                xads.getXAConnection();
-                fail("expected connection to fail");
-            } catch (SQLException e) {
-                assertSQLState("08004", e);
-            }
-        }
-        else if (usingEmbedded()) 
-        {
-            EmbeddedXADataSource xads = new EmbeddedXADataSource();
-            xads.setDatabaseName(dbName);
+            JDBCDataSource.setBeanProperty(xads, "user", "APP");
+        else
+            JDBCDataSource.clearStringBeanProperty(xads, "user");
+        JDBCDataSource.clearStringBeanProperty(xads, "password");
+        JDBCDataSource.setBeanProperty(xads, "databaseName", dbName);
             try {
                 xads.getXAConnection();
                 fail("expected connection to fail");
@@ -386,5 +280,4 @@ else if (usingEmbedded())
                 assertSQLState("08004", e);
             }
         }
-    }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
index 04256808..f4646415 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
@@ -221,20 +221,14 @@ private static String getSetterName(String attribute) {
      */
     public static void shutdownDatabase(javax.sql.DataSource ds)
     {
-        // commenting out until such time as setShutdownDatabase is
-        // supported by client
-        //setBeanProperty(ds, "shutdownDatabase", "shutdown");
-        setBeanProperty(ds, "connectionAttributes", "shutdown=true");
+        setBeanProperty(ds, "shutdownDatabase", "shutdown");
         try {
             ds.getConnection();
             Assert.fail("Database failed to shut down");
         } catch (SQLException e) {
              BaseJDBCTestCase.assertSQLState("Database shutdown", "08006", e);
         } finally {
-            // here too, commenting out until setShutdownDatabase is 
-            // supported by client
-            //clearStringBeanProperty(ds, "shutdownDatabase");
-            clearStringBeanProperty(ds, "connectionAttributes");
+            clearStringBeanProperty(ds, "shutdownDatabase");
         }
     }
 }
