diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java
index 4a0f48eb..a07cc8d4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java
@@ -242,7 +242,11 @@ protected void openScanController(TransactionController tc)
      */
     public void reopenCore() throws StandardException
     {
-        /* There are two scenarios for which we reopen this kind of scan:
+        reopenCore(false);
+    }
+
+    /**
+     * There are two scenarios for which we reopen this kind of scan:
          *
          *   A - The first is for join processing.  In this case we have
          * a(nother) row from some outer table and we want to reopen this
@@ -258,18 +262,30 @@ public void reopenCore() throws StandardException
          * want to reset our position within the probe list because that
          * position tells us where to find the next probe value.
          *
-         * The way we tell the difference between the two scenarios is
-         * by looking at our current position in the probe list (i.e. the
-         * value of probeValIndex): if our current position is beyond the
-         * length of the probe list then we know that we are reopening the
-         * scan for scenario A.  Or put another away, we should never get
-         * here for scenario B if probeValIndex is greater than or equal
-         * to the length of the probe list.  The reason is that the call
-         * to reopenCore() for scenario B will only ever happen when
-         * moreInListVals() returns true--and in that case we know that
-         * probeValIndex will be less than the length of the probeValues.
+     * That said, this method does the work of reopenCore() using
+     * the received boolean to determine which of the two scenarios
+     * we are in.  Note that if our current position (i.e. the value
+     * of probeValIndex) is beyond the length of the probe list then
+     * we know that we are reopening the scan for scenario A.  Or put
+     * another away, we should never get here for scenario B if
+     * probeValIndex is greater than or equal to the length of the
+     * probe list.  The reason is that the call to reopenCore() for
+     * scenario B will only ever happen when moreInListVals() returns
+     * true--and in that case we know that probeValIndex will be less
+     * than the length of the probeValues.  But the opposite is not
+     * true: i.e. it is *not* safe to say that a probeValIndex which
+     * is less than the length of probe list is always for scenario
+     * B.  That's not true because it's possible that the join to
+     * which this scan belongs is a "oneRowRightSide" join, meaning
+     * that this, the "right" side scan, will be "interrupted" after
+     * we return a single row for the current outer row.  If we then
+     * come back with a new outer row we need to reset our position--
+     * even though probeValIndex will be less than probeValues.length
+     * in that case.  DERBY-3603.
          */
-        if (probeValIndex >= probeValues.length)
+    private void reopenCore(boolean forNextProbe) throws StandardException
+    {
+        if (!forNextProbe)
             probeValIndex = 0;
 
         super.reopenCore();
@@ -346,7 +362,7 @@ public ExecRow getNextRowCore() throws StandardException
              * figure out what the next probe value should be (and thus
              * where to position the scan).
              */
-            reopenCore();
+            reopenCore(true);
             result = super.getNextRowCore();
         }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java
index be704ed0..fb4349d7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java
@@ -208,9 +208,23 @@ protected void decorateSQL(Statement s) throws SQLException
                     " ADD CONSTRAINT " + DATA_TABLE + "_PK " +
                     "PRIMARY KEY (ID)";
                 s.executeUpdate(ddl);
+                
+                for (int i = 0; i < DERBY_3603_Objects.length; i++)
+                    s.executeUpdate(DERBY_3603_Objects[i]);
             }
         };
     }
+    private static String []DERBY_3603_Objects = {
+        "create table d3603_a (a_id integer, c_id integer)",
+        "create table d3603_c (c_id integer not null, primary key(c_id)," +
+            " d_id integer, t_o bigint, t_i bigint)",
+        "insert into d3603_a (a_id, c_id) values (1, 1)",
+        "insert into d3603_a (a_id, c_id) values (2, 2)",
+        "insert into d3603_a (a_id, c_id) values (3, 1)",
+        "insert into d3603_c (c_id, d_id, t_o, t_i) values (1, 1, 1, 1)",
+        "insert into d3603_c (c_id, d_id, t_o, t_i) values (2, 2, 1, 1)",
+        "insert into d3603_c (c_id, d_id, t_o, t_i) values (21, 1, 1, 1)",
+    };
 
     /**
      * Executes three different types of queries ("strategies") repeatedly
@@ -879,6 +893,37 @@ public void testInListProbingWithOrderBy() throws SQLException
         st.close();
     }
 
+    public void testDerby3603()
+        throws SQLException
+    {
+        Statement s = createStatement();
+
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select count(*) from d3603_a, d3603_c " +
+                    "   where d3603_a.a_id <> 2 and d3603_c.c_id in (1, 21)"+
+                    "         and d3603_a.c_id = d3603_c.c_id"),
+                new String[][] {
+                    {"2"}
+                });
+        JDBC.assertUnorderedResultSet(s.executeQuery(
+                    "select d3603_a.a_id from d3603_a, d3603_c " +
+                    "   where d3603_a.a_id <> 2 and d3603_c.c_id in (1, 21)"+
+                    "         and d3603_a.c_id = d3603_c.c_id"),
+                new String[][] {
+                    {"1"},
+                    {"3"}
+                });
+        JDBC.assertUnorderedResultSet(s.executeQuery(
+                    "select d3603_a.a_id,d3603_c.d_id " +
+                    "       from d3603_a, d3603_c " +
+                    "   where d3603_a.a_id <> 2 and d3603_c.c_id in (1, 21)" +
+                    "         and d3603_a.c_id = d3603_c.c_id"),
+                new String[][] {
+                    {"1","1"},
+                    {"3","1"}
+                    });
+    }
+
     /**
      * Insert the received number of rows into DATA_TABLE via
      * batch processing.
