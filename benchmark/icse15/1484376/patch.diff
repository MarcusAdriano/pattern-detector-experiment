diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java
index 72fefd4a..0048dcc5 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java
@@ -175,6 +175,7 @@ public Vector viewRow(int row) {
     Vector res = rowVectors.get(row);
     if (res == null) {
       res = new RandomAccessSparseVector(columnSize());
+      rowVectors.put(row, res);
     }
     return res;
   }
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java
index 4b991814..89b01a25 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java
@@ -17,6 +17,8 @@
 
 package org.apache.mahout.math;
 
+import org.junit.Test;
+
 public final class TestSparseMatrix extends MatrixTest {
 
   @Override
@@ -30,4 +32,15 @@ public Matrix matrixFactory(double[][] values) {
     return matrix;
   }
 
+  @Test
+  public void testViewRow() {
+    //create a matrix with an unassigned row 0
+    Matrix matrix = new SparseMatrix(1, 1);
+    Vector view = matrix.viewRow(0);
+    final double value = 1.23;
+    view.assign(value);
+    //test whether the update in the view is reflected in the matrix
+    assertEquals("Matrix value", view.getQuick(0), matrix.getQuick(0, 0), EPSILON);
+  }
+
 }
