diff --git a/incubator/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java b/incubator/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
index 8564195c..4a727cae 100644
--- a/incubator/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
+++ b/incubator/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
@@ -30,14 +30,11 @@
 import java.net.URLConnection;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.jar.Attributes;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
 
 import org.apache.aries.application.InvalidAttributeException;
 import org.apache.aries.application.filesystem.IDirectory;
@@ -155,7 +152,7 @@ public ModelledResource getModelledResource(String uri, IDirectory bundle) throw
    * @throws OpenFailureException
    */
   private Collection<IFile> findBlueprints (IDirectory oneBundle) 
-  throws  IOException
+  throws  IOException, URISyntaxException
   {
     _logger.debug(LOG_ENTRY, "findBlueprints", oneBundle);
     Set<IDirectory> archiveSet = new HashSet<IDirectory>();
@@ -176,14 +173,13 @@ public ModelledResource getModelledResource(String uri, IDirectory bundle) throw
    * @throws OpenFailureException
    */
   private Collection<IFile> findBlueprints(Collection<IDirectory> applicationBundles)
-  throws IOException
+  throws IOException, URISyntaxException
   {
     _logger.debug(LOG_ENTRY, "findBlueprints", applicationBundles);
     Collection<IFile> blueprints = new ArrayList<IFile>();
     for (IDirectory appBundle : applicationBundles) {
       if (appBundle != null) {
-        File bundleFile = new File(appBundle.toString());
-        BundleManifest bundleMf = BundleManifest.fromBundle(bundleFile);
+        BundleManifest bundleMf = BundleManifest.fromBundle(appBundle);
         BundleBlueprintParser bpParser = new BundleBlueprintParser(bundleMf);
         List<IFile> files = appBundle.listAllFiles();
         Iterator<IFile> it = files.iterator();
diff --git a/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/filesystem/impl/ZipDirectory.java b/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/filesystem/impl/ZipDirectory.java
index 622cd9d7..0326ffb6 100644
--- a/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/filesystem/impl/ZipDirectory.java
+++ b/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/filesystem/impl/ZipDirectory.java
@@ -100,12 +100,17 @@ private ZipDirectory buildParent(ZipEntry foundEntry)
     StringBuilder baseBuilderCrapThingToGetRoundFindBugs = new StringBuilder(getName());
     
     if (!!!isRoot()) baseBuilderCrapThingToGetRoundFindBugs.append('/');
-    
-    if (paths != null && paths.length > 1) {
+    // Build 'result' as a chain of ZipDirectories. This will only work if java.util.ZipFile recognises every 
+    // directory in the chain as being a ZipEntry in its own right. 
+    outer: if (paths != null && paths.length > 1) {
       for (int i = 0; i < paths.length - 1; i++) {
         String path = paths[i];
         baseBuilderCrapThingToGetRoundFindBugs.append(path);
         ZipEntry dirEntry = getEntry(baseBuilderCrapThingToGetRoundFindBugs.toString());
+        if (dirEntry == null) { 
+          result = this;
+          break outer;
+        }
         result = new ZipDirectory(zip, dirEntry, result);
         baseBuilderCrapThingToGetRoundFindBugs.append('/');
       }
