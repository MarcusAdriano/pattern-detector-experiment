diff --git a/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java b/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java
index 2f0930a0..35ea843c 100644
--- a/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java
+++ b/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java
@@ -193,6 +193,8 @@ public SortInfo sort(File input, File output) throws IOException {
     output.delete();
 
     ArrayList<File> merges = new ArrayList<File>();
+    boolean success2 = false;
+    try {
     ByteSequencesReader is = new ByteSequencesReader(input);
     boolean success = false;
     try {
@@ -205,12 +207,15 @@ public SortInfo sort(File input, File output) throws IOException {
         // Handle intermediate merges.
         if (merges.size() == maxTempFiles) {
           File intermediate = File.createTempFile("sort", "intermediate", tempDirectory);
+            try {
           mergePartitions(merges, intermediate);
+            } finally {
           for (File file : merges) {
             file.delete();
           }
           merges.clear();
           merges.add(intermediate);
+            }
           sortInfo.tempMergeFiles++;
         }
       }
@@ -229,14 +234,19 @@ public SortInfo sort(File input, File output) throws IOException {
       // on a different volume or something. Copy the input then.
       if (!single.renameTo(output)) {
         copy(single, output);
-        single.delete();
       }
     } else { 
       // otherwise merge the partitions with a priority queue.                  
       mergePartitions(merges, output);                            
+      }
+      success2 = true;
+    } finally {
       for (File file : merges) {
         file.delete();
       }
+      if (!success2) {
+        output.delete();
+      }
     }
 
     sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); 
