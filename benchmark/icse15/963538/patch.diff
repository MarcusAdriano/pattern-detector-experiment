diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsAndPositionsEnum.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsAndPositionsEnum.java
index d8dfcea5..37dd3e12 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsAndPositionsEnum.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsAndPositionsEnum.java
@@ -40,7 +40,12 @@
 
   MultiDocsAndPositionsEnum reset(final EnumWithSlice[] subs, final int numSubs) throws IOException {
     this.numSubs = numSubs;
-    this.subs = subs;
+    this.subs = new EnumWithSlice[subs.length];
+    for(int i=0;i<subs.length;i++) {
+      this.subs[i] = new EnumWithSlice();
+      this.subs[i].docsAndPositionsEnum = subs[i].docsAndPositionsEnum;
+      this.subs[i].slice = subs[i].slice;
+    }
     upto = -1;
     current = null;
     return this;
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsEnum.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsEnum.java
index 804db92d..9bc00b39 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsEnum.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiDocsEnum.java
@@ -38,7 +38,13 @@
 
   MultiDocsEnum reset(final EnumWithSlice[] subs, final int numSubs) throws IOException {
     this.numSubs = numSubs;
-    this.subs = subs;
+
+    this.subs = new EnumWithSlice[subs.length];
+    for(int i=0;i<subs.length;i++) {
+      this.subs[i] = new EnumWithSlice();
+      this.subs[i].docsEnum = subs[i].docsEnum;
+      this.subs[i].slice = subs[i].slice;
+    }
     upto = -1;
     current = null;
     return this;
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java
index 41f6c2de..0a55415d 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java
@@ -272,9 +272,9 @@ public DocsEnum docs(Bits skipDocs, DocsEnum reuse) throws IOException {
         b = null;
       }
 
-      final DocsEnum subDocsEnum = entry.terms.docs(b, entry.reuseDocs);
+      final DocsEnum subDocsEnum = entry.terms.docs(b, null);
       if (subDocsEnum != null) {
-        entry.reuseDocs = subDocs[upto].docsEnum = subDocsEnum;
+        subDocs[upto].docsEnum = subDocsEnum;
         subDocs[upto].slice = entry.subSlice;
 
         upto++;
@@ -334,14 +334,14 @@ public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum
         b = null;
       }
 
-      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, entry.reusePostings);
+      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);
 
       if (subPostings != null) {
-        entry.reusePostings = subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;
+        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;
         subDocsAndPositions[upto].slice = entry.subSlice;
         upto++;
       } else {
-        if (entry.terms.docs(b, entry.reuseDocs) != null) {
+        if (entry.terms.docs(b, null) != null) {
           // At least one of our subs does not store
           // positions -- we can't correctly produce a
           // MultiDocsAndPositions enum
@@ -360,8 +360,6 @@ public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum
   private final static class TermsEnumWithSlice {
     private final ReaderUtil.Slice subSlice;
     private TermsEnum terms;
-    private DocsEnum reuseDocs;
-    private DocsAndPositionsEnum reusePostings;
     public BytesRef current;
 
     public TermsEnumWithSlice(ReaderUtil.Slice subSlice) {
@@ -372,9 +370,6 @@ public TermsEnumWithSlice(ReaderUtil.Slice subSlice) {
     public void reset(TermsEnum terms, BytesRef term) {
       this.terms = terms;
       current = term;
-      // TODO: can we not null these?
-      reuseDocs = null;
-      reusePostings = null;
     }
   }
 
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestMultiFields.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
index e87786f0..f1769889 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
@@ -115,4 +115,23 @@ private void verify(IndexReader r, String term, List<Integer> expected) throws E
     }
     assertEquals(docs.NO_MORE_DOCS, docs.nextDoc());
   }
+
+  public void testSeparateEnums() throws Exception {
+    Directory dir = new MockRAMDirectory();
+    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));
+    Document d = new Document();
+    d.add(new Field("f", "j", Field.Store.NO, Field.Index.NOT_ANALYZED));
+    w.addDocument(d);
+    w.commit();
+    w.addDocument(d);
+    IndexReader r = w.getReader();
+    w.close();
+    DocsEnum d1 = MultiFields.getTermDocsEnum(r, null, "f", new BytesRef("j"));
+    DocsEnum d2 = MultiFields.getTermDocsEnum(r, null, "f", new BytesRef("j"));
+    assertEquals(0, d1.nextDoc());
+    assertEquals(0, d2.nextDoc());
+    r.close();
+    dir.close();
+  }
+    
 }
