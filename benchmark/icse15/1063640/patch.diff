diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
index 3e4104b5..157f92e9 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
@@ -1,4 +1,5 @@
 package org.apache.lucene.benchmark.utils;
+
 /**
  * Copyright 2005 The Apache Software Foundation
  *
@@ -15,7 +16,6 @@
  * limitations under the License.
  */
 
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileFilter;
@@ -25,69 +25,54 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-
 /**
- * Split the Reuters SGML documents into Simple Text files containing: Title, Date, Dateline, Body
+ * Split the Reuters SGML documents into Simple Text files containing: Title,
+ * Date, Dateline, Body
  */
-public class ExtractReuters
-{
+public class ExtractReuters {
     private File reutersDir;
     private File outputDir;
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
-    public ExtractReuters(File reutersDir, File outputDir)
-    {
+  public ExtractReuters(File reutersDir, File outputDir) {
         this.reutersDir = reutersDir;
         this.outputDir = outputDir;
         System.out.println("Deleting all files in " + outputDir);
-        File [] files = outputDir.listFiles();
-        for (int i = 0; i < files.length; i++)
-        {
-            files[i].delete();
+    for (File f : outputDir.listFiles()) {
+      f.delete();
         }
-
     }
 
-    public void extract()
-    {
-        File [] sgmFiles = reutersDir.listFiles(new FileFilter()
-        {
-            public boolean accept(File file)
-            {
+  public void extract() {
+    File[] sgmFiles = reutersDir.listFiles(new FileFilter() {
+      public boolean accept(File file) {
                 return file.getName().endsWith(".sgm");
             }
         });
-        if (sgmFiles != null && sgmFiles.length > 0)
-        {
-            for (int i = 0; i < sgmFiles.length; i++)
-            {
-                File sgmFile = sgmFiles[i];
+    if (sgmFiles != null && sgmFiles.length > 0) {
+      for (File sgmFile : sgmFiles) {
                 extractFile(sgmFile);
             }
-        }
-        else
-        {
+    } else {
             System.err.println("No .sgm files in " + reutersDir);
         }
     }
 
-    Pattern EXTRACTION_PATTERN = Pattern.compile("<TITLE>(.*?)</TITLE>|<DATE>(.*?)</DATE>|<BODY>(.*?)</BODY>");
+  Pattern EXTRACTION_PATTERN = Pattern
+      .compile("<TITLE>(.*?)</TITLE>|<DATE>(.*?)</DATE>|<BODY>(.*?)</BODY>");
 
-    private static String[] META_CHARS
-            = {"&", "<", ">", "\"", "'"};
+  private static String[] META_CHARS = { "&", "<", ">", "\"", "'" };
 
-    private static String[] META_CHARS_SERIALIZATIONS
-            = {"&amp;", "&lt;", "&gt;", "&quot;", "&apos;"};
+  private static String[] META_CHARS_SERIALIZATIONS = { "&amp;", "&lt;",
+      "&gt;", "&quot;", "&apos;" };
 
     /**
      * Override if you wish to change what is extracted
      *
      * @param sgmFile
      */
-    protected void extractFile(File sgmFile)
-    {
-        try
-        {
+  protected void extractFile(File sgmFile) {
+    try {
             BufferedReader reader = new BufferedReader(new FileReader(sgmFile));
 
             StringBuilder buffer = new StringBuilder(1024);
@@ -95,37 +80,33 @@ protected void extractFile(File sgmFile)
 
             String line = null;
             int docNumber = 0;
-            while ((line = reader.readLine()) != null)
-            {
-                //when we see a closing reuters tag, flush the file
+      while ((line = reader.readLine()) != null) {
+        // when we see a closing reuters tag, flush the file
 
                 if (line.indexOf("</REUTERS") == -1) {
-                    //Replace the SGM escape sequences
+          // Replace the SGM escape sequences
 
-                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,
-                }
-                else
-                {
-                    //Extract the relevant pieces and write to a file in the output dir
+          buffer.append(line).append(' ');// accumulate the strings for now,
+                                          // then apply regular expression to
+                                          // get the pieces,
+        } else {
+          // Extract the relevant pieces and write to a file in the output dir
                     Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);
-                    while (matcher.find())
-                    {
-                        for (int i = 1; i <= matcher.groupCount(); i++)
-                        {
-                            if (matcher.group(i) != null)
-                            {
+          while (matcher.find()) {
+            for (int i = 1; i <= matcher.groupCount(); i++) {
+              if (matcher.group(i) != null) {
                                 outBuffer.append(matcher.group(i));
                             }
                         }
                         outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);
                     }
                     String out = outBuffer.toString();
-                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)
-                    {
+          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {
                         out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);
                     }
-                    File outFile = new File(outputDir, sgmFile.getName() + "-" + (docNumber++) + ".txt");
-                    //System.out.println("Writing " + outFile);
+          File outFile = new File(outputDir, sgmFile.getName() + "-"
+              + (docNumber++) + ".txt");
+          // System.out.println("Writing " + outFile);
                     FileWriter writer = new FileWriter(outFile);
                     writer.write(out);
                     writer.close();
@@ -134,41 +115,33 @@ protected void extractFile(File sgmFile)
                 }
             }
             reader.close();
-        }
-
-        catch (
-                IOException e
-                )
-
-        {
+    } catch (IOException e) {
             throw new RuntimeException(e);
         }
     }
 
-
-    public static void main(String[] args)
-    {
-        if (args.length != 2)
-        {
+  public static void main(String[] args) {
+    if (args.length != 2) {
             printUsage();
         }
         File reutersDir = new File(args[0]);
+    if (!reutersDir.exists()) {
+      printUsage();
+      return;
+    }
 
-        if (reutersDir.exists())
-        {
-            File outputDir = new File(args[1]);
+    // First, extract to a tmp directory and only if everything succeeds, rename
+    // to output directory.
+    File outputDir = new File(args[1] + "-tmp");
             outputDir.mkdirs();
             ExtractReuters extractor = new ExtractReuters(reutersDir, outputDir);
             extractor.extract();
-        }
-        else
-        {
-            printUsage();
-        }
+    // Now rename to requested output dir
+    outputDir.renameTo(new File(args[1]));
     }
 
-    private static void printUsage()
-    {
+  private static void printUsage() {
         System.err.println("Usage: java -cp <...> org.apache.lucene.benchmark.utils.ExtractReuters <Path to Reuters SGM files> <Output Path>");
     }
+  
 }
