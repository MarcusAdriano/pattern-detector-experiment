diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java
index 91a12c81..7c13a14d 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/GetProcedureColumns.java
@@ -175,9 +175,9 @@ else if (type == Types.DATE || type == Types.TIME
                 // No corresponding SQL type
                 return 0;
 
-		case 6: // LENGTH:
+		case 6: // LENGTH (in bytes):
                 if (sqlType != null)
-                    return sqlType.getMaximumWidth();
+                    return sqlType.getMaximumWidthInBytes();
 
                 // No corresponding SQL type
                 return 0;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/TypeDescriptor.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/TypeDescriptor.java
index 8338ab9b..c64d633a 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/TypeDescriptor.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/TypeDescriptor.java
@@ -73,6 +73,19 @@ is the number of bytes (i.e. 4).
 	public	int			getMaximumWidth();
 
 
+	/**
+	  Returns the maximum width of the type IN BYTES.  This is the
+	  maximum number of bytes that could be returned for this type
+	  if the corresponding getXXX() method is used.  For example,
+	  if we have a CHAR type, then we want the number of bytes
+	  that would be returned by a ResultSet.getString() call.
+
+	  @return	the maximum length of this Type IN BYTES;
+				-1 means "unknown/no max length"
+	  */
+	public	int			getMaximumWidthInBytes();
+
+
 	/**
 	  Returns the number of decimal digits for the type, if applicable.
 	 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
index 80d9ee0a..1800fcb9 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
@@ -154,6 +154,108 @@ public int	getMaximumWidth()
 		return maximumWidth;
 	}
 
+	/**
+	 * Return the length of this type in bytes.  Note that
+	 * while the JDBC API _does_ define a need for
+	 * returning length in bytes of a type, it doesn't
+	 * state clearly what that means for the various
+	 * types.  We assume therefore that the values here
+	 * are meant to match those specified by the ODBC
+	 * specification (esp. since ODBC clients are more
+	 * likely to need this value than a Java client).
+	 * The ODBC spec that defines the values we use here
+	 * can be found at the following link:
+	 * 
+	 * http://msdn.microsoft.com/library/default.asp?url=/library/
+	 * en-us/odbc/htm/odbctransfer_octet_length.asp
+	 *
+	 * @see TypeDescriptor#getMaximumWidthInBytes
+	 */
+	public int	getMaximumWidthInBytes()
+	{
+		switch (typeId.getJDBCTypeId()) {
+
+			case Types.BIT:
+			case Types.TINYINT:
+			case Types.SMALLINT:
+			case Types.INTEGER:
+			case Types.REAL:
+			case Types.DOUBLE:
+			case Types.FLOAT:
+			case Types.BINARY:
+			case Types.VARBINARY:
+			case Types.LONGVARBINARY:
+			case Types.BLOB:
+
+				// For all of these, just take the maximumWidth,
+				// since that already holds the length in bytes.
+				return maximumWidth;
+
+			// For BIGINT values, ODBC spec says to return
+			// 40 because max length of a C/C++ BIGINT in
+			// string form is 20 and we assume the client
+			// character set is Unicode (spec says to
+			// multiply by 2 for unicode).
+			case Types.BIGINT:
+				return 40;
+
+			// ODBC spec explicitly declares what the lengths
+			// should be for datetime values, based on the
+			// declared fields of SQL_DATE_STRUCT, SQL_TIME_STRUCT,
+			// and SQL_TIMESTAMP_STRUCT.  So we just use those
+			// values.
+			case Types.DATE:
+			case Types.TIME:
+				return 6;
+
+			case Types.TIMESTAMP:
+				return 16;
+
+			// ODBC spec says that for numeric/decimal values,
+			// we should use max number of digits plus 2
+			// (for sign and decimal point), since that's
+			// the length of a decimal value in string form.
+			// And since we assume client character set
+			// is unicode, we have to multiply by 2 to
+			// get the number of bytes.
+			case Types.NUMERIC:
+			case Types.DECIMAL:
+				return 2 * (precision + 2);
+
+			// ODBC spec says to use length in chars
+			// for character types, times two if we
+			// assume client character set is unicode.
+			// If 2 * character length is greater than
+			// variable type (in this case, integer),
+			// then we return the max value for an
+			// integer.
+			case Types.CHAR:
+			case Types.VARCHAR:
+			case Types.LONGVARCHAR:
+			case Types.CLOB:
+				if ((maximumWidth > 0) && (2 * maximumWidth < 0))
+				// integer overflow; return max integer possible.
+					return Integer.MAX_VALUE;
+				else
+					return 2 * maximumWidth;
+
+			case Types.ARRAY:
+			case Types.DISTINCT:
+			case Types.NULL:
+			case Types.OTHER:
+			case Types.REF:
+			case Types.STRUCT:
+			case Types.JAVA_OBJECT:
+			default:
+
+				// For these we don't know, so return the "don't-know"
+				// indicator.
+				return -1;
+
+		}
+
+	}
+
 	/**
 	 * Get the jdbc type id for this type.  JDBC type can be
 	 * found in java.sql.Types. 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
index c67e286e..150fb6c8 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
@@ -705,6 +705,14 @@ public int	getMaximumWidth()
 		return typeDescriptor.getMaximumWidth();
 	}
 
+	/**
+	 * @see TypeDescriptor#getMaximumWidthInBytes
+	 */
+	public int	getMaximumWidthInBytes()
+	{
+		return typeDescriptor.getMaximumWidthInBytes();
+	}
+
 	/**
 	 * Gets the TypeId for the datatype.
 	 *
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
index b82e2b0b..929ac824 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
@@ -165,17 +165,24 @@ protected void runTest() {
 							"bigintcol bigint, "+
 							"realcol real, "+
 							"doublepreccol double precision default 10, "+
+							"floatcol float default 8.8, "+
 							"decimalcol10p4s decimal(10,4), "+
 							"numericcol20p2s numeric(20,2), "+
 							"char8col___ char(8), "+
+							"char8forbitcol___ char(8) for bit data, "+
 							"varchar9col varchar(9), "+
+							"varchar9bitcol varchar(9) for bit data, "+
 							"longvarcharcol long varchar,"+
-							//"longvarbinarycol long bit varying,"+
+							"longvarbinarycol long varchar for bit data, "+
 							//"nchar10col nchar(10)"
 					  //+ ", nvarchar8col nvarchar(8)"
 					  //+ ", longnvarchar long nvarchar"
 					  //+ ", 
-						"blobcol blob(3K)"
+							"blobcol blob(3K), "+
+							"clobcol clob(3K), "+
+							"datecol date, "+
+							"timecol time, "+
+							"tscol timestamp"
 					  + ")" );
 			// test for beetle 4620
 			s.execute("CREATE TABLE INFLIGHT(FLT_NUM CHAR(20) NOT NULL," + 
