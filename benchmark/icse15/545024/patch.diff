diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
index 9afe07df..8569257a 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
@@ -117,7 +117,6 @@ public boolean skipTo(int target) throws IOException {
           if (!more) return false;
           heapify();
           firstTime = false;
-          return true;   // more would have been false if no subScorers had any docs
         }
 
         while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
index 825e395c..fb5b1ee1 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
@@ -29,6 +29,7 @@
 import org.apache.lucene.store.RAMDirectory;
 
 import java.text.DecimalFormat;
+import java.io.IOException;
 
 /**
  * Test of the DisjunctionMaxQuery.
@@ -125,6 +126,36 @@ public void setUp() throws Exception {
         s.setSimilarity(sim);
     }
 
+  public void testSkipToFirsttimeMiss() throws IOException {
+    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);
+    dq.add(tq("id","d1"));
+    dq.add(tq("dek","DOES_NOT_EXIST"));
+
+    QueryUtils.check(dq,s);
+
+    final Weight dw = dq.weight(s);
+    final Scorer ds = dw.scorer(r);
+    final boolean skipOk = ds.skipTo(3);
+    if (skipOk) {
+      fail("firsttime skipTo found a match? ... " + 
+            r.document(ds.doc()).get("id"));
+    }
+  }
+
+  public void testSkipToFirsttimeHit() throws IOException {
+    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);
+    dq.add(tq("dek","albino"));
+    dq.add(tq("dek","DOES_NOT_EXIST"));
+
+    QueryUtils.check(dq,s);
+
+    final Weight dw = dq.weight(s);
+    final Scorer ds = dw.scorer(r);
+    assertTrue("firsttime skipTo found no match", ds.skipTo(3));
+    assertEquals("found wrong docid", "d4", r.document(ds.doc()).get("id"));
+  }
+
+
 
     public void testSimpleEqualScores1() throws Exception {
 
