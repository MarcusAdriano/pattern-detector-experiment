diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java
index 51fb02a5..4fc9a94b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastByIDMap.java
@@ -107,11 +107,7 @@ private int find(long key) {
     int index = theHashCode % hashSize;
     long currentKey = keys[index];
     while (currentKey != NULL && key != currentKey) {
-      if (index < jump) {
-        index += hashSize - jump;
-      } else {
-        index -= jump;
-      }
+      index -= index < jump ? jump - hashSize : jump;
       currentKey = keys[index];
     }
     return index;
@@ -127,17 +123,21 @@ private int findForAdd(long key) {
     int jump = 1 + theHashCode % (hashSize - 2);
     int index = theHashCode % hashSize;
     long currentKey = keys[index];
-    while (currentKey != NULL && currentKey != REMOVED && key != currentKey) { // Different
-                                                                                                             // here
-      if (index < jump) {
-        index += hashSize - jump;
-      } else {
-        index -= jump;
-      }
+    while (currentKey != NULL && currentKey != REMOVED && key != currentKey) {
+      index -= index < jump ? jump - hashSize : jump;
       currentKey = keys[index];
     }
+    if (currentKey != REMOVED) {
     return index;
   }
+    // If we're adding, it's here, but, the key might have a value already later
+    int addIndex = index;
+    while (currentKey != NULL && key != currentKey) {
+      index -= index < jump ? jump - hashSize : jump;
+      currentKey = keys[index];
+    }
+    return key == currentKey ? index : addIndex;
+  }
   
   public V get(long key) {
     if (key == NULL) {
@@ -194,7 +194,7 @@ public V put(long key, V value) {
       V oldValue = values[index];
       values[index] = value;
       return oldValue;
-    } else {
+    }
       // If size is limited,
       if (countingAccesses && numEntries >= maxSize) {
         // and we're too large, clear some old-ish entry
@@ -208,7 +208,6 @@ public V put(long key, V value) {
       }
       return null;
     }
-  }
   
   private void clearStaleEntry(int index) {
     while (true) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java
index 5ff0662a..c1cf0f3d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastIDSet.java
@@ -78,11 +78,7 @@ private int find(long key) {
     int index = theHashCode % hashSize;
     long currentKey = keys[index];
     while (currentKey != NULL && key != currentKey) { // note: true when currentKey == REMOVED
-      if (index < jump) {
-        index += hashSize - jump;
-      } else {
-        index -= jump;
-      }
+      index -= index < jump ? jump - hashSize : jump;
       currentKey = keys[index];
     }
     return index;
@@ -98,16 +94,21 @@ private int findForAdd(long key) {
     int jump = 1 + theHashCode % (hashSize - 2);
     int index = theHashCode % hashSize;
     long currentKey = keys[index];
-    while (currentKey != NULL && currentKey != REMOVED && key != currentKey) { // Different here
-      if (index < jump) {
-        index += hashSize - jump;
-      } else {
-        index -= jump;
-      }
+    while (currentKey != NULL && currentKey != REMOVED && key != currentKey) {
+      index -= index < jump ? jump - hashSize : jump;
       currentKey = keys[index];
     }
+    if (currentKey != REMOVED) {
     return index;
   }
+    // If we're adding, it's here, but, the key might have a value already later
+    int addIndex = index;
+    while (currentKey != NULL && key != currentKey) {
+      index -= index < jump ? jump - hashSize : jump;
+      currentKey = keys[index];
+    }
+    return key == currentKey ? index : addIndex;
+  }
   
   public int size() {
     return numEntries;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
index c89f19a6..6d3f89fc 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
@@ -121,16 +121,35 @@ private int find(Object key) {
     int jump = 1 + theHashCode % (hashSize - 2);
     int index = theHashCode % hashSize;
     K currentKey = keys[index];
-    while (currentKey != null && (currentKey == REMOVED || !key.equals(currentKey))) {
-      if (index < jump) {
-        index += hashSize - jump;
-      } else {
-        index -= jump;
+    while (currentKey != null && !key.equals(currentKey)) {
+      index -= index < jump ? jump - hashSize : jump;
+      currentKey = keys[index];
+    }
+    return index;
       }
+
+  private int findForAdd(Object key) {
+    int theHashCode = key.hashCode() & 0x7FFFFFFF; // make sure it's positive
+    K[] keys = this.keys;
+    int hashSize = keys.length;
+    int jump = 1 + theHashCode % (hashSize - 2);
+    int index = theHashCode % hashSize;
+    K currentKey = keys[index];
+    while (currentKey != null && currentKey != REMOVED && key != currentKey) {
+      index -= index < jump ? jump - hashSize : jump;
       currentKey = keys[index];
     }
+    if (currentKey != REMOVED) {
     return index;
   }
+    // If we're adding, it's here, but, the key might have a value already later
+    int addIndex = index;
+    while (currentKey != null && key != currentKey) {
+      index -= index < jump ? jump - hashSize : jump;
+      currentKey = keys[index];
+    }
+    return key == currentKey ? index : addIndex;
+  }
   
   @Override
   public V get(Object key) {
@@ -191,8 +210,12 @@ public V put(K key, V value) {
       }
     }
     // Here we may later consider implementing Brent's variation described on page 532
-    int index = find(key);
-    if (keys[index] == null) {
+    int index = findForAdd(key);
+    if (keys[index] == key) {
+      V oldValue = values[index];
+      values[index] = value;
+      return oldValue;
+    }
       // If size is limited,
       if (countingAccesses && numEntries >= maxSize) {
         // and we're too large, clear some old-ish entry
@@ -203,11 +226,6 @@ public V put(K key, V value) {
       numEntries++;
       numSlotsUsed++;
       return null;
-    } else {
-      V oldValue = values[index];
-      values[index] = value;
-      return oldValue;
-    }
   }
   
   private void clearStaleEntry(int index) {
