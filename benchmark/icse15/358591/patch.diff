diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/TestProto.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/TestProto.java
index 1129345a..93eadc43 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/TestProto.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/TestProto.java
@@ -107,6 +107,7 @@
 	private static final int WRITE_ENCODED_LDSTRING = 53;
 	private static final int CHECK_SQLCARD = 54;
 	private static final int MORE_DATA = 55;
+	private static final int COMPLETE_TEST = 56;
 
 	private static final String MULTIVAL_START = "MULTIVALSTART";
 	private static final String MULTIVAL_SEP = "SEP";
@@ -175,7 +176,21 @@ private void processFile(String filename)
 	{
 		String prev_filename = current_filename;
 		current_filename = filename;
-		FileReader fr = new FileReader(filename);
+        	String hostName=getHostName();
+		FileReader fr;
+                if (!hostName.equals("localhost")) 
+		{
+			// if we're not on localhost, we must also be starting
+			// the server remotely, and useprocess=false, so, the location may
+			// be different.
+			String userdir =  System.getProperty("user.dir");
+			String sep =  System.getProperty("file.separator");
+			fr = new FileReader(userdir + sep + ".." + sep + filename);
+		}
+		else
+		{
+			fr = new FileReader(filename);
+		}
 		tkn = new StreamTokenizer(fr);
 		int val;
 		while ( (val = tkn.nextToken()) != StreamTokenizer.TT_EOF)
@@ -198,13 +213,14 @@ private void processFile(String filename)
 	 */
 	private void getConnection() 
 	{
+        String hostName=getHostName();
 		try {
-            monitorSocket = new Socket("localhost",1527);
+            monitorSocket = new Socket(hostName,1527);
         } catch (UnknownHostException e) {
-            System.err.println("Don't know about host: localhost");
+            System.err.println("Don't know about host: " + hostName);
             System.exit(1);
         } catch (IOException e) {
-            System.err.println("Couldn't get I/O for the connection to: localhost");
+            System.err.println("Couldn't get I/O for the connection to: " + hostName);
             System.exit(1);
         }
         try
@@ -214,7 +230,7 @@ private void getConnection()
 		}
 		catch (IOException e)
         {
-            System.err.println("Couldn't get I/O for the connection to: localhost");
+            System.err.println("Couldn't get I/O for the connection to: " + hostName);
             System.exit(1);
         }
 	}
@@ -240,6 +256,13 @@ private void reset()
 		reader.initialize(monitorIs);
 		writer.reset(null);
 	}
+	/**
+	 * finish by cleaning up the last connection
+	 */
+	private void completeTest()
+	{
+		closeConnection();
+	}
 	/**
 	 * Initialize hashtable for commands and set up a table to translate from
 	 * the codepoint name to the codepoint value
@@ -301,6 +324,7 @@ private static void init()
 		commandTable.put("writeencodedldstring", new Integer(WRITE_ENCODED_LDSTRING));
 		commandTable.put("checksqlcard", new Integer(CHECK_SQLCARD));
 		commandTable.put("moredata", new Integer(MORE_DATA));
+		commandTable.put("completetest", new Integer(COMPLETE_TEST));
 		
 		Integer key;
 		for (Enumeration e = codePointNameTable.keys(); e.hasMoreElements(); )
@@ -471,6 +495,9 @@ private void processCommand()
 			case CHECK_SQLCARD:
 				checkSQLCARD(getInt(), getString());
 				break;
+			case COMPLETE_TEST:
+				completeTest();
+				break;
 			case END_TEST:
 				// print that we passed the test if we haven't failed
 				if (failed == false)
@@ -957,4 +984,12 @@ private void checkSQLCARD(int sqlCode, String sqlState)
 		// skip the rest of the SQLCARD
 		reader.skipBytes();
 	}
+
+	private static String getHostName()
+	{
+		String hostName = (System.getProperty("hostName"));
+		if (hostName == null)
+			hostName="localhost";
+		return hostName;
+	}
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java
index ba938f3b..c284a313 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java
@@ -31,6 +31,7 @@
 import java.lang.reflect.Constructor;
 import java.net.ConnectException;
 import java.net.Socket;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 public class NetServer
 {
@@ -41,6 +42,7 @@
     String javaCmd;
     String jvmflags;
     String framework;
+    static String hostName;
     
     Object[] frameworkInfo;
     int port;
@@ -67,13 +69,15 @@
 
     
     static {
+    	hostName=TestUtil.getHostName();
 	m =  new Hashtable();
 	// Hashtable is keyed on framework name and has 
 	// an array of the framework prefix, suffix, driver, port  and 
 	// String[] command arguments to start the server
 	// String[] Command arguments to stop the server
+	String url = "jdbc:derby:net://" + hostName + ":1527/";
 	m.put("DerbyNet", new Object[]
-	    {"jdbc:derby:net://localhost:1527/",                 //prefix
+	    {url,                 //prefix
 	     "",                                            // suffix
 	     "com.ibm.db2.jcc.DB2Driver",                   //driver
 	     "1527",                                        // port
@@ -83,8 +87,9 @@
 			   "shutdown"},
 	     null});                                        //shutdown2
 
+	url = "jdbc:derby://" + hostName + ":1527/";  
 	m.put("DerbyNetClient", new Object[]
-	    {"jdbc:derby://localhost:1527/",                 //prefix
+	    {url,                 //prefix
 	     "",                                            // suffix
 	     "org.apache.derby.jdbc.ClientDriver",           //driver
 	     "1527",                                        // port
@@ -94,8 +99,9 @@
 			   "shutdown"},
 	     null});                                        //shutdown2
 
+	url = "jdbc:db2://" + hostName + ":50000/";
 	m.put("DB2jcc", new Object[]
-	    {"jdbc:db2://localhost:50000/",                //prefix
+	    {url,                //prefix
 	     "",                                            //suffix
 	     "com.ibm.db2.jcc.DB2Driver",                   //driver
 	     "50000",                                       //port
@@ -221,7 +227,7 @@ else if (javaCmd != null)
  			}
  			else	
  			{
- 				Socket s = new Socket("localhost", this.port);
+ 				Socket s = new Socket(hostName, this.port);
  				s.close();
 				break;
  			}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunClass.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunClass.java
index 46de749f..3323e545 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunClass.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunClass.java
@@ -30,16 +30,14 @@
 	/**
 		param args the arguments to pass into ij
 	*/
-	public RunClass(Class theClass, Method methodToCall, Object args[])
+	public RunClass(Method methodToCall, Object args[])
 	{
 		mainMethod = methodToCall;
 		arguments=args;	
-		testClass = theClass;
 	}
 
 	Object arguments[];
 	Method mainMethod;
-	Class testClass;
 
 	public void run()
 	{
@@ -47,15 +45,14 @@ public void run()
         {
 		    try
 		    {
-			    mainMethod.invoke(testClass.newInstance(), arguments);				
-		    }
-		    catch (InstantiationException ie)
-		    {
-		        System.out.println("Class could not be instantiated: " + ie);
-		        System.exit(1);
+			    // we're invoking the test class's main method - which is always static
+			    // thus we can pass null, an underlying object argument would be 
+			    // ignored anyway. 
+			    mainMethod.invoke(null, arguments);
 		    }
 		    catch (IllegalAccessException iae)
 		    {
+			iae.printStackTrace();
 		        System.out.println("RunClass: " + iae + " make sure the test class is public.");
 		        System.exit(1);
 		    }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
index 3880254c..b785b9b5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
@@ -119,6 +119,7 @@
 	static Properties suiteProperties;
 	static Properties specialProperties; // for testSpecialProps
 	static BufferedReader runlistFile;
+	static String hostName;
 
     static String [] clientExclusionKeywords = new String [] {
         "at-or-before:", "at-or-after:", "when-at-or-before:jdk",
@@ -419,6 +420,8 @@ private static void runTests(Properties suiteProps, String suite)
             jvmProps.addElement("serverJvm=" + serverJvm);
         if ( (serverJvmName != null) && (serverJvmName.length()>0) )
             jvmProps.addElement("serverJvmName=" + serverJvmName);
+        if ( (hostName != null) && (hostName.length()>0) )
+        	jvmProps.addElement("hostName=" + hostName);
         if ( useprocess == false )
             jvmProps.addElement("useprocess=false");
         if ( skipsed.equals("true") )
@@ -740,6 +743,7 @@ else if (javaCmd.equals("jview"))
 		bootcp = suiteProperties.getProperty("bootcp");
 		serverJvm = suiteProperties.getProperty("serverJvm");
 		serverJvmName = suiteProperties.getProperty("serverJvmName");
+		hostName = suiteProperties.getProperty("hostName");
 		canondir = suiteProperties.getProperty("canondir");
 		mtestdir = suiteProperties.getProperty("mtestdir");
 		String usepr = suiteProperties.getProperty("useprocess");
@@ -823,7 +827,10 @@ private static void setSuiteProperties(Properties p, String suiteName,
             p.put("serverJvmName", serverJvmName);
 		else
             serverJvmName = p.getProperty("serverJvmName");
-
+        if ( hostName != null )
+            p.put("hostName", hostName);
+        else
+        	p.put("hostName","localhost");
         // Encryption may be set at the top or just for a subsuite
 	    if ( parentProperties.getProperty("encryption") != null )
 		    p.put("encryption", encryption);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
index 47c689cc..d5f05f42 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
@@ -71,6 +71,7 @@
 	static String canondir; // location of master dir (default is master)
 	static String bootcp; //  path for j9 bootclasspath setting
 	static String serverJvm; //  path for j9 bootclasspath setting
+	static String hostName; // needs to be settable for IPV6 testing; localhost otherwise. 
 	static String ijdefaultResourcePackage; // for ij tests only
 	static String debug; // for setting verbose mode to pass down to RunTest
     static String timeout; // to allow killing a hanging test
@@ -341,6 +342,7 @@ static Properties getSuiteProperties(String suiteName, boolean isTop)
             outputdir = p.getProperty("outputdir");
             canondir = p.getProperty("canondir");
             bootcp = p.getProperty("bootcp");
+            hostName = p.getProperty("hostName");
             serverJvm = p.getProperty("serverJvm");
             systemdiff = p.getProperty("systemdiff");
             ijdefaultResourcePackage = p.getProperty("ij.defaultResourcePackage");
@@ -467,6 +469,9 @@ private static void getSystemProperties()
 		    bootcp = j9bootcp;
 		    suiteProperties.put("bootcp", bootcp);
 		}
+		String hostname = sp.getProperty("hostName");
+		if (hostname != null)
+			suiteProperties.put("hostName", hostname);
 		String serverJvm = sp.getProperty("serverJvm");
 		if (serverJvm != null)
 		    suiteProperties.put("serverJvm", serverJvm);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index 148579dc..dec38ed3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -121,6 +121,7 @@
 	static boolean dbIsNew = true;
 	static String runwithjvm="true";
 	static boolean startServer=true; // should test harness start the server
+	static String hostName; // needs to be settable for ipv testing, localhost otherwise.)
 
 	// Other test variables for directories, files, output
 	static String scriptName = ""; // testname as passed in
@@ -418,10 +419,6 @@ private static void testRun(String propString, Properties sysProp)
         if (testType.startsWith("sql"))
             scriptPath = script.getPath();
                 
-        // Build the test command
-        String[] testCmd = 
-    		buildTestCommand(propString, systemHome, scriptPath);
-        
 	    // cleanup for all tests that re-use standard testCSHome/wombat database
 	    if (useCommonDB == true 
 	    	&& (usesystem == null || usesystem == "")
@@ -434,7 +431,11 @@ private static void testRun(String propString, Properties sysProp)
         // Create a process to execute the command unless useprocess is false
         if ( useprocess )
 		{
+            // Build the test command
+            String[] testCmd = 
+        		buildTestCommand(propString, systemHome, scriptPath);
             execTestProcess(testCmd);
+        
 		}
         else
 		{
@@ -838,23 +839,32 @@ private static void getProperties(Properties sp)
 			framework = "";
 		else
 			driverName = NetServer.getDriverName(framework);
-		String skipFile;
-		// Some tests will not work with some frameworks,
-		// so check property files for tests to be skipped
-		skipFile = framework + ".exclude";
 
+        hostName = sp.getProperty("hostName");
+        // force hostName to localhost if it is not set
+        if (hostName == null)
+           hostName="localhost";
+		
+        // Some tests will not work with some frameworks,
+        // so check suite exclude files for tests to be skipped
+        String skipFile = framework + ".exclude";
 		if (!framework.equals(""))
 		{
-			if (SkipTest.skipIt(skipFile, scriptName)) {
-				skiptest = true;
-				addSkiptestReason("Test skipped: listed in " + 
-								  skipFile + 
-						  " file, skipping test: " 
-								  + scriptName);
+            skiptest = (SkipTest.skipIt(skipFile, scriptName));
+            // in addition, check to see if the test should get skipped 
+            // because it's not suitable for a remotely started server
+            if (!skiptest) 
+            {
+                if (!hostName.equals("localhost")) 
+                {
+                    skipFile = framework + "Remote.exclude";
+                    skiptest = (SkipTest.skipIt(skipFile, scriptName));
 			}
 		}
-		else
-			framework = "";
+            if (skiptest) // if we're skipping...
+                addSkiptestReason("Test skipped: listed in " + skipFile + 
+                     " file, skipping test: " + scriptName);
+        }
 	
 		jvmName = sp.getProperty("jvm");
 
@@ -921,7 +931,6 @@ private static void getProperties(Properties sp)
 		
         javaCmd = sp.getProperty("javaCmd");
         bootcp = sp.getProperty("bootcp");
-
         jvmflags = sp.getProperty("jvmflags");
 		testJavaFlags = sp.getProperty("testJavaFlags");
 		classpath = sp.getProperty("classpath");
@@ -1025,7 +1034,7 @@ private static void getProperties(Properties sp)
 		outputdir = sp.getProperty("outputdir");
 		if (outputdir == null)
 		    outputdir = "";
-		bootcp = sp.getProperty("bootcp");
+		
 		canondir = sp.getProperty("canondir");
 		canonpath = sp.getProperty("canonpath");
 
@@ -1048,6 +1057,16 @@ private static void getProperties(Properties sp)
 		else
 		    useprocess = true;
 		
+        // if the hostName is something other than localhost, we must
+        // be trying to connect to a remote server, and so, we should not
+        // try to create a new database.
+        // also, startServer should be false.
+		if (!hostName.equals("localhost"))
+		{
+        	useprocess=false;
+        	startServer=false;
+		}
+		
 		String nosed = sp.getProperty("skipsed");
 		if (nosed != null)
 		{
@@ -1519,7 +1538,6 @@ else if (encryption)
     		String suppFiles = ap.getProperty("supportfiles");
 			boolean copySupportFiles = ((suppFiles != null) && (suppFiles.length()>0));
 			boolean createExtDirs= new Boolean(ap.getProperty("useextdirs","false")).booleanValue();
-			
     		if (copySupportFiles || createExtDirs)
     		{
 				File copyOutDir = null;
@@ -2048,7 +2066,11 @@ else if ( (runDir != null) && (runDir.exists()) )
                 defaultPackageName);
         
         if ( (framework != null) )
+        {
             jvmProps.addElement("framework=" + framework);
+            if ((hostName != null) && (!hostName.equals("localhost")))
+            		jvmProps.addElement("hostName=" + hostName);
+        }
             
         if ( (jvmflags != null) && (jvmflags.length()>0) )
         {
@@ -2237,6 +2259,10 @@ private static void execTestNoProcess(Properties sysProp,
         Properties ptmp = System.getProperties();
         ptmp.put("derby.system.home", systemHome);
         ptmp.put("derby.infolog.append", "true");
+        // for framework tests, we may need to pick up the hostName 
+        // passed on on command line to individual tests...
+        if (framework.startsWith("DerbyNet"))
+        	ptmp.put("hostName=", hostName);
         System.setProperties(ptmp);
     	PrintStream stdout = System.out;
     	PrintStream stderr = System.err;
@@ -2256,6 +2282,7 @@ private static void execTestNoProcess(Properties sysProp,
 	        pathStr = tmpOutFile.getCanonicalPath().replace(File.separatorChar,fileSep);
 	    }
 
+
     	PrintStream ps = new PrintStream(new FileOutputStream(pathStr), true);
     	System.setOut(ps);
     	System.setErr(ps);
@@ -2301,7 +2328,9 @@ private static void execTestNoProcess(Properties sysProp,
         else if (testType.equals("java"))
         {
             sysProp.put("user.dir", outDir.getCanonicalPath());
+	    if (javaPath == null)
             javaPath = "org.apache.derbyTesting.functionTests.tests." + testDirName;
+	    
             String[] args = new String[2];
             args[0] = "-p";
             args[1] = propString;
@@ -2313,7 +2342,7 @@ else if (testType.equals("java"))
             Method testMain = JavaTest.getMethod("main", classArray);
             Object[] argObj = new Object[1];
             argObj[0] = args;
-			RunClass testObject = new RunClass(JavaTest, testMain, argObj);
+			RunClass testObject = new RunClass(testMain, argObj);
 			Thread testThread = new Thread(testObject);
 			try
 			{
@@ -2324,7 +2353,7 @@ else if (testType.equals("java"))
 				}
 				else
 				{
-					testThread.join(timeout * 1000);
+					testThread.join(timeout * 60 * 1000);
 				}
 			}
 			catch(Exception e)
@@ -2377,6 +2406,7 @@ else if (testType.equals("unit"))
             org.apache.derbyTesting.unitTests.harness.UnitTestMain.main(args);
             */
         }
+        
         ps.close();
         // Reset System.out and System.err
         System.setOut(stdout);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
index 998ca8d0..e6ec8cda 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
@@ -35,6 +35,7 @@
 import java.util.Enumeration;
 import java.util.Properties;
 import java.util.StringTokenizer;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 public class Sed
 {
@@ -57,6 +58,8 @@ public static void main(String[] args) throws Exception {
     public void exec(File srcFile, File dstFile, InputStream isSed, boolean isJCC, boolean isI18N)
         throws IOException
     {
+    	String hostName = TestUtil.getHostName();
+    	
         // Vector for storing lines to be deleted
         Vector deleteLines = new Vector();
         deleteLines.addElement("^ij version.*$");
@@ -165,6 +168,8 @@ public void exec(File srcFile, File dstFile, InputStream isSed, boolean isJCC, b
         searchStrings.addElement("  DB2ConnectionCorrelator: [0-9A-Z.]*");
 		// Filter for SAX exception name diffs between jvms.
         searchStrings.addElement("org.xml.sax.SAX.*$");
+        // Filter out localhost, or hostName
+        searchStrings.addElement(hostName);
 
         Vector subStrings = new Vector();
         subStrings.addElement("Transaction:(XXX)|");
@@ -202,6 +207,8 @@ public void exec(File srcFile, File dstFile, InputStream isSed, boolean isJCC, b
         subStrings.addElement("");
 		// Filter for SAX exception name diffs between jvms.
         subStrings.addElement("xxxFILTERED-SAX-EXCEPTIONxxx'.");
+        // Filter out localhost, or hostName
+        subStrings.addElement("xxxFILTERED_HOSTNAMExxx");
         doWork(srcFile, dstFile, null, deleteLines, searchStrings, subStrings, isSed, isI18N);
         
     } // end exec
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/jvm.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/jvm.java
index 6deb6ed8..27f03385 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/jvm.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/jvm.java
@@ -105,6 +105,7 @@
     public String minorVersion = "";
     public int imajor = 0;
     public int iminor = 0;
+    String hostName;
 
 	// security defaults relative to WS
 	// not used if jvmargs serverPolicyFile or serverCodeBase are set
@@ -370,8 +371,11 @@ protected void setSecurityProps() throws java.io.IOException, ClassNotFoundExcep
 		this.D.addElement(codebaseType + "=" + cb.toURL());
 		// file path to the codebase
 		this.D.addElement("csinfo.codedir=" + cb.getAbsolutePath());
-		this.D.addElement("csinfo.serverhost=localhost");
-		this.D.addElement("csinfo.trustedhost=localhost");	 
+		String hostName = (System.getProperty("hostName"));
+		if (hostName == null)
+			hostName="localhost";
+		this.D.addElement("csinfo.serverhost=" + hostName);
+		this.D.addElement("csinfo.trustedhost=" + hostName);	 
 		
 		// add an invalid path to the unused type 
 		this.D.addElement(unusedType + "=file://unused/");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetAutoStart.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetAutoStart.java
index 06c13269..ff565f08 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetAutoStart.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetAutoStart.java
@@ -72,6 +72,7 @@
     private static Connection embeddedConn;
     private static int testNumber = 0;
     private static int portNumber;
+    private static String hostName;
     private static String homeDir;
     private static String databaseName;
     private static Properties baseProperties = new Properties();
@@ -113,6 +114,7 @@ protected static void setup( String[] args)
 
 			ij.getPropertyArg(args);
             homeDir = System.getProperty( "derby.system.home", ".");
+            hostName = TestUtil.getHostName();
             
             for( int i = 0; i < args.length; i++)
             {
@@ -134,7 +136,7 @@ protected static void setup( String[] args)
                     if( portNumber <= 0)
                         portNumber = NetworkServerControl.DEFAULT_PORTNUMBER;
                     
-                    NetworkServerControl server = new NetworkServerControl(InetAddress.getByName("localhost"),portNumber);
+                    NetworkServerControl server = new NetworkServerControl(InetAddress.getByName(hostName),portNumber);
                     server.start(null);
 					// Wait for server to come up 
 					for (int j = 0; j < 60; j++)
@@ -316,7 +318,7 @@ private static void testExtantNetServer() throws Exception
 
         Process serverProcess = Runtime.getRuntime().exec( cmd);
         // Wait for to start
-        String dbUrl = TestUtil.getJdbcUrlPrefix("localhost",
+        String dbUrl = TestUtil.getJdbcUrlPrefix(hostName,
 												 Integer.parseInt(portStr)) +
 			"database1";
         Connection drdaConn = null;
@@ -450,7 +452,7 @@ private static void stopServer( Process serverProcess)
         try
         {
             NetworkServerControl server =
-				new NetworkServerControl(InetAddress.getByName("localhost"),
+				new NetworkServerControl(InetAddress.getByName(hostName),
 									 portNumber);
 			server.shutdown();
             Thread.sleep(5000);
@@ -540,7 +542,7 @@ private static boolean runTest( String[] properties)
                 try
                 {
                     drdaConn = DriverManager.getConnection(
-														   TestUtil.getJdbcUrlPrefix("localhost",portNumber) + databaseName,
+														   TestUtil.getJdbcUrlPrefix(hostName,portNumber) + databaseName,
 														   authenticationProperties);
                     break;
                 }
@@ -658,7 +660,7 @@ private static void endTest( boolean autoStarted)
                 }
                 catch( InterruptedException ie){};
                 drdaConn = DriverManager.getConnection(
-													   TestUtil.getJdbcUrlPrefix("localhost", portNumber) +  databaseName,
+													   TestUtil.getJdbcUrlPrefix(hostName, portNumber) +  databaseName,
                                                         authenticationProperties);
                 passed = false;
                 System.out.println( "Was able to connect to the network server after Derby shut down.");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java
index 135f69b4..8dd2a586 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java
@@ -77,7 +77,8 @@ public NSinSameJVM() {
 			System.out.println("FAIL Network Server did not start");
 			return;
 		}
-		String jdbcUrlPrefix = TestUtil.getJdbcUrlPrefix("localhost", NETWORKSERVER_PORT);
+		String hostName = TestUtil.getHostName();
+		String jdbcUrlPrefix = TestUtil.getJdbcUrlPrefix(hostName, NETWORKSERVER_PORT);
 
         String url = jdbcUrlPrefix + databaseFileName;
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java
index 23cdb8e0..c68940ac 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java
@@ -33,6 +33,7 @@
 import java.sql.DriverManager;
 import java.sql.Connection;
 import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 /**
 	This test tests the JDBC CallableStatement.
 */
@@ -50,7 +51,8 @@ public static void main (String args[])
 
 			// This also tests quoted pathname in database name portion of URL, beetle 4781.
 			String protocol = System.getProperty("ij.protocol");
-			System.setProperty("ij.database", protocol + "//localhost/\"" + System.getProperty("derby.system.home") + java.io.File.separator + "wombat;create=true\"");
+			String hostName = TestUtil.getHostName();
+			System.setProperty("ij.database", protocol + "//" + hostName + "/\"" + System.getProperty("derby.system.home") + java.io.File.separator + "wombat;create=true\"");
 			ij.getPropertyArg(args); 
 			Connection conn = ij.startJBMS();
 			if (conn == null)
@@ -228,6 +230,9 @@ public static void main (String args[])
 			// Temporarily take out testbatch until jcc bug is fixed (5827)
 			// testBatch(conn);
 
+                        cleanUp(stmt);
+			stmt.close();
+			conn.close();
 			System.out.println("CallableStatement Test Ends");
         }
 		catch (Exception e)
@@ -695,4 +700,15 @@ static void testBigDec(Connection conn) throws Exception
 	  
 	}
 
+
+	// test update of table in batch
+	public static void cleanUp (Statement stmt) throws SQLException 
+	{
+		String[] testObjects = { "table longvarbinary_tab", "table num_tab",
+			"procedure method1", "function method2",
+			"function method4", 
+			"procedure longvarbinary_in"}; 	
+		TestUtil.cleanUpTest(stmt, testObjects);
+	}
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/checkSecMgr.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/checkSecMgr.java
index 5fad125f..0bf2fd0f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/checkSecMgr.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/checkSecMgr.java
@@ -48,6 +48,7 @@ public static void main (String args[])
 			// bug 6021
 			// testIllegalDBCreate();
 			testIllegalPropertySet(conn);
+			cleanUp(conn);
 		}
 		catch (Exception e)
 		{
@@ -71,9 +72,18 @@ public static void testIllegalDBCreate() throws Exception
 			//    We seem to be able to create the database.
 			// Ideally this test should attempt to create the database
 			// ../wombat;create=true and get the security exception.
-			String databaseURL = TestUtil.getJdbcUrlPrefix() + "localhost/" + 
-				"\"D:/wombat;create=true\"";
-			System.out.println(databaseURL);
+			String hostName = TestUtil.getHostName();
+			String databaseURL;
+			if (hostName.equals("localhost"))
+			{
+				databaseURL = TestUtil.getJdbcUrlPrefix() + hostName + 
+				"/\"D:/wombat;create=true\"";
+			}
+			else
+			{
+				databaseURL = TestUtil.getJdbcUrlPrefix() + hostName + "wombat";
+			}
+			//System.out.println(databaseURL);
 			java.util.Properties properties = new java.util.Properties();
 			properties.put ("user", "cs");
 			properties.put ("password", "cs");
@@ -114,4 +124,15 @@ public static void setIllegalPropertyProc()
 	{
 		System.setProperty("notAllowed", "somevalue");
 	}
+
+	public static void cleanUp(Connection conn) throws SQLException
+	{
+		Statement stmt = conn.createStatement();
+		try {
+			stmt.executeUpdate("drop procedure setIllegalPropertyProc");
+		} catch (SQLException se) {
+			JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);
+		}
+	}
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java
index 4d7f9388..5c1a56a8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java
@@ -39,10 +39,14 @@
 	This test tests the JDBC PreparedStatement.
 */
 
-class csPrepStmt
+public class csPrepStmt
 {
 	private static Connection conn = null;
 
+    private static String[] testObjects =  // string array for cleaning up
+        {"table t1", "table tab1", "table t2", "table bigtab", "table tstab",
+         "table Numeric_Tab", "table lobCheckOne", "table lobCheckTwo"};
+
 	public static void main (String args[])
 	{
 		try
@@ -52,11 +56,16 @@ public static void main (String args[])
 			// Initialize JavaCommonClient Driver.
 			ij.getPropertyArg(args); 
 			conn = ij.startJBMS();
+
 			if (conn == null)
 			{
 				System.out.println("conn didn't work");
 				return;
 			}
+
+			Statement cleanstmt = conn.createStatement();
+			TestUtil.cleanUpTest(cleanstmt, testObjects);
+
 			PreparedStatement ps;
 			ResultSet rs;
 			boolean hasResultSet;
@@ -293,8 +302,23 @@ else if (ts.before(temp))
 				System.out.println("SQLState: " + e.getSQLState() + 
 								   " message: " + e.getMessage());
 			}
+			finally
+			{
+				try
+				{
+					if(rs != null)
+					{
 			rs.close();
+						 rs = null;
+					}
+					if(ps != null)
+					{
 			ps.close();
+						 ps = null;
+					}
+				}
+				catch(Exception e){ }
+			}
 
 			test4975(conn);
 			test5130(conn);
@@ -302,6 +326,11 @@ else if (ts.before(temp))
 			testLobInRS(conn);
 
 			conn.close();
+			// cleanup, first refresh conn
+			conn = ij.startJBMS();
+			cleanstmt = conn.createStatement();
+			TestUtil.cleanUpTest(cleanstmt, testObjects);
+			cleanstmt.close();
 			System.out.println("csPrepStmt Test Ends");
         }
 		catch (Exception e)
@@ -364,6 +393,8 @@ private static void test5172(Connection conn) throws Exception
 		ps.setString(2, timestamp );
 		try {
 			ResultSet rs = ps.executeQuery();
+            rs.close();
+			ps.close( );
 		}
 		catch (SQLException e) {
 			System.out.println("SQLState: " + e.getSQLState() + " message: " + e.getMessage());
@@ -503,6 +534,7 @@ private static void insertTab(String tabname , int numCols) throws SQLException
 			for (i = 1; i <= numCols; i++)
 				ps.setInt(i,i);
 			ps.executeUpdate();
+			ps.close();
 		} catch (SQLException e)
 		{
 			System.out.println("SQLState: " + e.getSQLState() + 
@@ -588,7 +620,8 @@ static void testLobInRS(Connection conn) {
 			else
 				System.out.println("FAIL: Statement executed, but returned " +
 					"an empty result set.");
-
+			rs.close();
+			st.close();
 		} catch (Exception e) {
 			System.out.println("FAIL: Encountered exception:");
 			e.printStackTrace();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
index 1913bdf6..25d4dc57 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
@@ -59,18 +59,26 @@
 public class dataSourcePermissions_net extends org.apache.derbyTesting.functionTests.tests.jdbcapi.dataSourcePermissions
 {
 
-	private static final int NETWORKSERVER_PORT = 20000;
-
+	private static int NETWORKSERVER_PORT;
+	private static String hostName;
 	private static NetworkServerControl networkServer = null;
 
 	public static void main(String[] args) throws Exception {
 
+		hostName = TestUtil.getHostName();
+		if (hostName.equals("localhost"))
+			NETWORKSERVER_PORT = 20000;
+		else
+			NETWORKSERVER_PORT = 1527;
+		
 		// Load harness properties.
 		ij.getPropertyArg(args);
 
 		// "runTest()" is going to try to connect to the database through
 		// the server at port NETWORKSERVER_PORT.  Thus, we have to
 		// start the server on that port before calling runTest.
+		// Except when we are using a remote server, then we assume the port is 1527,
+		// and we assume the server has been started already
 
 		try {
 			TestUtil.loadDriver();
@@ -78,6 +86,9 @@ public static void main(String[] args) throws Exception {
 			e.printStackTrace();
 		}
 
+
+		if (hostName.equals("localhost"))
+		{
 		// Start the NetworkServer on another thread
 		networkServer = new NetworkServerControl(InetAddress.getByName("localhost"),NETWORKSERVER_PORT);
 		networkServer.start(null);
@@ -85,6 +96,7 @@ public static void main(String[] args) throws Exception {
 		// Wait for the NetworkServer to start.
 		if (!isServerStarted(networkServer, 60))
 			System.exit(-1);
+		}
 
 		// Now, go ahead and run the test.
 		try {
@@ -93,6 +105,7 @@ public static void main(String[] args) throws Exception {
 			tester.runTest();
 			if (TestUtil.isDerbyNetClientFramework())
 				tester.testClientDataSourceProperties();
+			new dataSourcePermissions_net().cleanUp();
 
 		} catch (Exception e) {
 		// if we catch an exception of some sort, we need to make sure to
@@ -105,10 +118,13 @@ public static void main(String[] args) throws Exception {
 		}
 
 		// Shutdown the server.
+		if (hostName.equals("localhost"))
+		{
 		networkServer.shutdown();
 		// how do we do this with the new api?
 		//networkServer.join();
 		Thread.sleep(5000);
+		}
 		System.out.println("Completed dataSourcePermissions_net");
 
 		System.out.close();
@@ -121,10 +137,9 @@ public dataSourcePermissions_net() {
 	}
 
 	public void setProperties() {
-
 		// Set required server properties.
 		System.setProperty("database",
-						   TestUtil.getJdbcUrlPrefix("localhost",
+						   TestUtil.getJdbcUrlPrefix(hostName,
 													 NETWORKSERVER_PORT) +
 						   "wombat;create=true");
 		System.setProperty("ij.user", "EDWARD");
@@ -133,15 +148,19 @@ public void setProperties() {
 	}
 
 	public String getJDBCUrl(String db, String attrs) {
-
-		String s = TestUtil.getJdbcUrlPrefix("localhost", NETWORKSERVER_PORT)
+		// this method is accessed from subclasses - need to establish hostName
+		String hostName = TestUtil.getHostName();
+		if (hostName.equals("localhost"))
+			NETWORKSERVER_PORT = 20000;	
+		else
+			NETWORKSERVER_PORT = 1527;
+		String s = TestUtil.getJdbcUrlPrefix(hostName, NETWORKSERVER_PORT)
 			+ db;
 		if (attrs != null)
 			if (TestUtil.isJCCFramework())
 				s = s + ":" + attrs + ";";
 			else
 				s = s + ";" + attrs;
-		//System.out.println("getJDBCUrl:" + s);
 		return s;
 
 	}
@@ -182,18 +201,27 @@ public String getJDBCUrl(String db, String attrs) {
 
 	private Properties addRequiredAttributes(Properties attrs)
 	{
+		// this method is accessed from subclasses - need to establish hostName
+		hostName = TestUtil.getHostName();
 		if (TestUtil.isJCCFramework())
 		{
 			attrs.setProperty("driverType","4");
             /**
-             * As per the fix of derby-410
-             * servername should now default to localhost 
+             * As per the fix of derby-410 servername should
+             * default to localhost, but for jcc it's still needed  
              */
-            attrs.setProperty("serverName","localhost");
+            attrs.setProperty("serverName",hostName);
 		}
-
-
-		attrs.setProperty("portNumber","20000");
+		/** 
+		 * For a remote host of course it's also needed 
+		 */
+		if (!hostName.equals("localhost"))
+		{
+			attrs.setProperty("serverName",hostName);
+			attrs.setProperty("portNumber", "1527");
+		}
+		else
+			attrs.setProperty("portNumber", "20000");
 		//attrs.setProperty("retrieveMessagesFromServerOnGetMessage","true");
 		return attrs;
 	}
@@ -213,9 +241,8 @@ public void start() {
 	}
 
 	public void shutdown() {
-
 		try {
-			DriverManager.getConnection(TestUtil.getJdbcUrlPrefix("localhost",
+			DriverManager.getConnection(TestUtil.getJdbcUrlPrefix(hostName,
 																  NETWORKSERVER_PORT) +
 										"wombat;shutdown=true",
 				"EDWARD", "noodle");
@@ -224,8 +251,8 @@ public void shutdown() {
 		} catch (SQLException sqle) {
 			System.out.println("EXPECTED SHUTDOWN " + sqle.getMessage());
 		}
-
 	}
+
 	protected static boolean isServerStarted(NetworkServerControl server, int ntries)
 	{
 		for (int i = 1; i <= ntries; i ++)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/executeUpdate.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/executeUpdate.java
index d472bd36..3b3ea700 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/executeUpdate.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/executeUpdate.java
@@ -33,7 +33,7 @@
 	is minimally covered.
 */
 
-class executeUpdate
+public class executeUpdate
 {
 
 	public static void main (String args[])
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/maxthreads.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/maxthreads.java
index f9681545..32f7278d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/maxthreads.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/maxthreads.java
@@ -30,6 +30,7 @@
 import org.apache.derby.drda.NetworkServerControl;
 import org.apache.derbyTesting.functionTests.harness.jvm;
 import org.apache.derbyTesting.functionTests.harness.ProcessStreamResult;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 import org.apache.derby.tools.ij;
 
 /**
@@ -55,7 +56,7 @@
 			"maxthreads", "a"};
     private static  BufferedOutputStream bos = null;
 	private static  NetworkServerControl server;
-	private static String host = "localhost";
+	private static String host;
 	private static int port = 1527;
 	/**
 	 * Execute the given command and dump the results to standard out
@@ -116,6 +117,9 @@ private static void checkMaxThreads( int value)
 
 	public static void main (String args[]) throws Exception
 	{
+		host = TestUtil.getHostName();
+		maxthreadsCmd2[4] = host;
+		
 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
 			jvm = jvm.getJvm("j9_13");
 		else
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
index 37b3233d..7faeddf8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
@@ -40,10 +40,14 @@
 	This test tests the JDBC PreparedStatement.
 */
 
-class prepStmt
+public class prepStmt
 {
 	private static Connection conn = null;
 
+    private static String[] testObjects =  // string array for cleaning up
+        {"table t1", "table tab1", "table t2", "table bigtab", "table tstab",
+         "table doubletab", "table numtab", "table Numeric_Tab", "table jira614"};
+
 	public static void main (String args[])
 	{
 		try
@@ -57,6 +61,10 @@ public static void main (String args[])
 				System.out.println("conn didn't work");
 				return;
 			}
+	
+			Statement cleanstmt = conn.createStatement();
+			TestUtil.cleanUpTest(cleanstmt, testObjects);
+
 			PreparedStatement ps;
 			ResultSet rs;
 			boolean hasResultSet;
@@ -302,6 +310,12 @@ else if (ts.before(temp))
 			test5172(conn);
 			jira614Test(conn);
 			conn.close();
+			// refresh conn before cleaning up
+			conn = ij.startJBMS();
+			cleanstmt = conn.createStatement();
+			TestUtil.cleanUpTest(cleanstmt, testObjects);
+			cleanstmt.close();
+			conn.close();
 			System.out.println("prepStmt Test Ends");
         }
 		catch (Exception e)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol.java
index 9433e2ab..8b82e379 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testProtocol.java
@@ -32,7 +32,7 @@
 	private static final String DEFAULT_FILENAME = "protocol.tests";
 	
 	// constructor
-	private testProtocol() {}
+	public testProtocol() {}
 	
 
 	/**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
index 9c73c1b5..830482da 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
@@ -53,7 +53,7 @@
 
 {
 
-	private static final int NETWORKSERVER_PORT = 20000;
+	private static int NETWORKSERVER_PORT;
 
 	private static NetworkServerControl networkServer = null;
 
@@ -62,6 +62,12 @@ public static void main(String[] args) throws Exception {
 		// Load harness properties.
 		ij.getPropertyArg(args);
 
+		String hostName = TestUtil.getHostName();
+		if (hostName.equals("localhost"))
+			NETWORKSERVER_PORT = 20000;
+		else
+			NETWORKSERVER_PORT = 1527;
+
 		// "runTest()" is going to try to connect to the database through
 		// the server at port NETWORKSERVER_PORT.  Thus, we have to
 		// start the server on that port before calling runTest.
@@ -72,13 +78,16 @@ public static void main(String[] args) throws Exception {
 			e.printStackTrace();
 		}
 
-		// Start the NetworkServer on another thread
-		networkServer = new NetworkServerControl(InetAddress.getByName("localhost"),NETWORKSERVER_PORT);
+		// Start the NetworkServer on another thread, unless it's a remote host
+		networkServer = new NetworkServerControl(InetAddress.getByName(hostName),NETWORKSERVER_PORT);
+		if (hostName.equals("localhost"))
+		{
 		networkServer.start(null);
 
 		// Wait for the NetworkServer to start.
 		if (!isServerStarted(networkServer, 60))
 			System.exit(-1);
+		}
 
 		// Now, go ahead and run the test.
 		try {
@@ -96,10 +105,13 @@ public static void main(String[] args) throws Exception {
 		}
 
 		// Shutdown the server.
+		if (hostName.equals("localhost"))
+		{
 		networkServer.shutdown();
 		// how do we do this with the new api?
 		//networkServer.join();
 		Thread.sleep(5000);
+		}
 		System.out.println("Completed testSecMec");
 
 		System.out.close();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java
index cab0c5ed..c30166e8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testconnection.java
@@ -28,6 +28,7 @@
 
 import org.apache.derbyTesting.functionTests.harness.jvm;
 import org.apache.derbyTesting.functionTests.harness.ProcessStreamResult;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 import org.apache.derby.tools.ij;
 
 /**
@@ -39,6 +40,7 @@
 
 	private static jvm jvm;
 	private static Vector vCmd;
+	private static String hostName;
 	private static String[] TestConnectionCmd1 = new String[] {"org.apache.derby.drda.NetworkServerControl",
 		"ping"};
 	private static String[] TestConnectionCmd2 = new String[] {"org.apache.derby.drda.NetworkServerControl",
@@ -51,9 +53,13 @@
 	private static String[] TestConnectionCmd5 = new String[] {"org.apache.derby.drda.NetworkServerControl",
 		"ping", "-h", "localhost", "-p", "9393"};
 	private static String[] TestConnectionCmd6 = new String[] {"org.apache.derby.drda.NetworkServerControl",
-		"ping", "-p", "1527"};
+		"ping", "-h", "localhost", "-p", "1527"};
+	private static String[] TestConnectionCmd6b = new String[] {"org.apache.derby.drda.NetworkServerControl",
+		"ping", "-h", "localhost", "-p", "1527"};
 	private static String[] TestConnectionCmd7 = new String[] {"org.apache.derby.drda.NetworkServerControl",
-		"ping", "-p", "9393"};
+		"ping", "-h", "localhost", "-p", "9393"};
+	private static String[] TestConnectionCmd7b = new String[] {"org.apache.derby.drda.NetworkServerControl",
+		"ping", "-h", "localhost", "-p", "9393"};
 
     private static  BufferedOutputStream bos = null;
     
@@ -61,25 +67,51 @@
 	 * Execute the given command and dump the results to standard out
 	 *
 	 * @param args	command and arguments
+     * @param printcmd to printout the executing command or not
 	 * @exception Exception
 	 */
-    private static void execCmdDumpResults (String[] args)
+    private static void execCmdDumpResults (String[] args, boolean printcmd)
         throws Exception
     {
-        execCmdDumpResults(args, 0);
+        execCmdDumpResults(args, 0, printcmd);
     }
 
 	/**
 	 * Execute the given command and dump the results to standard out
 	 *
 	 * @param args	command and arguments
-     * @param expectedExitCode the exit code that we expect from running this
 	 * @exception Exception
 	 */
+    private static void execCmdDumpResults (String[] args)
+        throws Exception
+    {
+        execCmdDumpResults(args, 0, true);
+    }
 
+
+	/**
+	 * Execute the given command and dump the results to standard out
+	 *
+	 * @param args	command and arguments
+     * @param expectedExitCode the exit code that we expect from running this
+     */
 	private static void execCmdDumpResults (String[] args, int expectedExitCode)
         throws Exception
 	{
+        execCmdDumpResults(args, expectedExitCode, true);
+    }
+
+	/**
+	 * Execute the given command and dump the results to standard out
+	 *
+	 * @param args	command and arguments
+     * @param expectedExitCode the exit code that we expect from running this
+     * @param printcmd to indicate if the executing command should get printed
+	 * @exception Exception
+	 */
+	private static void execCmdDumpResults (String[] args, int expectedExitCode, boolean printcmd)
+        throws Exception
+	{
         // We need the process inputstream and errorstream
         ProcessStreamResult prout = null;
         ProcessStreamResult prerr = null;
@@ -90,7 +122,10 @@ private static void execCmdDumpResults (String[] args, int expectedExitCode)
         {
             sb.append(args[i] + " ");                    
         }
+        if (printcmd)
         System.out.println(sb.toString());
+        else
+            System.out.println("org.apache.derby.drda.NetworkServerControl ping...");            
 		int totalSize = vCmd.size() + args.length;
 		String serverCmd[] = new String[totalSize];
 		int i;
@@ -130,6 +165,15 @@ private static void execCmdDumpResults (String[] args, int expectedExitCode)
 
 	public static void main (String args[]) throws Exception
 	{
+		hostName = TestUtil.getHostName();
+		TestConnectionCmd2[3] = hostName;
+		TestConnectionCmd4[3] = hostName;
+		TestConnectionCmd5[3] = hostName;
+		TestConnectionCmd6b[3] = hostName;
+		TestConnectionCmd7b[3] = hostName;
+        
+ 
+		
 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
 			jvm = jvm.getJvm("j9_13");
 		else
@@ -145,7 +189,12 @@ public static void main (String args[]) throws Exception
 			 ************************************************************/
 			System.out.println("Testing testconnection");
 			//test connection - no parameters
-			execCmdDumpResults(TestConnectionCmd1);	
+            if (!hostName.equals("localhost")) // except with remote server, add the hostName 
+            {
+                execCmdDumpResults(TestConnectionCmd4, 0, false);
+            }
+            else
+		    	execCmdDumpResults(TestConnectionCmd1, false);	
 			//test connection - specifying host and port
 			execCmdDumpResults(TestConnectionCmd2);	
 			//test connection - specifying non-existant host and port
@@ -157,9 +206,15 @@ public static void main (String args[]) throws Exception
 			//test connection - specifying host and invalid port
 			execCmdDumpResults(TestConnectionCmd5, 1);	
 			//test connection - specifying no host and valid port
-			execCmdDumpResults(TestConnectionCmd6);	
+            if (!hostName.equals("localhost")) // except with remote server, add the hostName
+			    execCmdDumpResults(TestConnectionCmd6b, false);	
+            else
+			    execCmdDumpResults(TestConnectionCmd6, false);	
 			//test connection - specifying no host and invalid port
-			execCmdDumpResults(TestConnectionCmd7, 1);	
+            if (!hostName.equals("localhost")) // except with remote server, add the hostName
+			    execCmdDumpResults(TestConnectionCmd7b, 1, false);	
+            else
+			    execCmdDumpResults(TestConnectionCmd7, 1, false);	
 
 			System.out.println("End test");
 			bos.close();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java
index d3bc0722..c4e3f64b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testij.java
@@ -23,11 +23,17 @@
 import java.util.Vector;
 import java.util.Properties;
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.BufferedOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.ByteArrayInputStream;
+import java.io.FileNotFoundException;
 
 import org.apache.derbyTesting.functionTests.harness.jvm;
 import org.apache.derbyTesting.functionTests.harness.ProcessStreamResult;
+import org.apache.derbyTesting.functionTests.harness.Sed;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 import org.apache.derby.drda.NetworkServerControl;
@@ -40,11 +46,15 @@
 	private static Properties properties = new java.util.Properties();
 	private static jvm jvm;
 	private static Vector vCmd;
-	private static String[] jccIjCmd = new String[] {"org.apache.derby.tools.ij",
-		"extin/testij.sql"};
 
-	private static String[] clientIjCmd = new String[] {"org.apache.derby.tools.ij",
-													 "extin/testclientij.sql"};
+	private static String IjCmd="org.apache.derby.tools.ij";
+	private static String SqlDir="extin";
+	private static String jccSqlFile="testij.sql";
+	private static String sep;
+	private static String clientSqlFile="testclientij.sql";
+	private static String altExtinDir;
+	private static boolean useAltExtinDir=false;
+	
 	private static void execCmd (String[] args) throws Exception
 	{
 		int totalSize = vCmd.size() + args.length;
@@ -116,6 +126,42 @@ private static void execCmdDumpResults (String[] args) throws Exception
 
 	}
 
+    public static void massageSqlFile (String hostName, String fileName) throws Exception {
+        // only called if hostName is *not* localhost. 
+        // Need to replace each occurrence of the string 'localhost' with 
+        // whatever is the hostName
+        File tmpFile = new File("extin", "tmpFile.sql");
+        File orgFile = new File("extin", fileName);
+        // wrap this in a try to possibly try using user.dir to find the file
+        InputStream original; 
+        OutputStream copy; 
+        try { 
+            fileName = SqlDir + sep + fileName; 
+            original = new FileInputStream(fileName);
+            copy = new FileOutputStream(tmpFile);
+        }
+        catch (FileNotFoundException fnfe) {
+            // we must be running from within a suite...
+            useAltExtinDir = true;
+            String userdir =  System.getProperty("user.dir");
+            altExtinDir = userdir + sep + ".."; 
+            tmpFile = new File(altExtinDir, "tmpFile.sql");
+            orgFile = new File (altExtinDir,  fileName); 
+            fileName = altExtinDir + sep + fileName;
+            original = new FileInputStream(fileName);
+            copy = new FileOutputStream(tmpFile);
+        }
+        int content;
+        while ((content = original.read())> 0 ) {
+            copy.write(content);
+        }
+        copy.close();
+        original.close();
+        Sed hostSed = new Sed();
+        InputStream sedIs = new ByteArrayInputStream(("substitute=localhost;" + hostName).getBytes("UTF-8"));
+        hostSed.exec(tmpFile, orgFile, sedIs, false, false);		
+    }
+
 	public static void main (String args[]) throws Exception
 	{
 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
@@ -123,6 +169,7 @@ public static void main (String args[]) throws Exception
 		else
 			jvm = jvm.getJvm("currentjvm");		// ensure compatibility
 		vCmd = jvm.getCommandLine();
+		sep =  System.getProperty("file.separator");
 		try
 		{
 			/************************************************************
@@ -131,10 +178,27 @@ public static void main (String args[]) throws Exception
 			//create wombat database
 			NetworkServerControl server = new NetworkServerControl();
 			System.out.println("Testing various ij connections and comments in front of selects");
-			if (TestUtil.isJCCFramework())
-				execCmdDumpResults(jccIjCmd);	
-			else   // Derby Client
-				execCmdDumpResults(clientIjCmd);	
+			
+			// first, we have to massage the .sql file to replace localhost, if 
+			// there is a system property set.
+						
+			String hostName=TestUtil.getHostName();
+			if (TestUtil.isJCCFramework()){
+				// use jccSqlfile
+				if (!hostName.equals("localhost")) 
+					massageSqlFile(hostName,jccSqlFile);
+				if (useAltExtinDir)	
+					execCmdDumpResults(new String[]{IjCmd,(altExtinDir + sep + SqlDir + sep + jccSqlFile)});
+				execCmdDumpResults(new String[]{IjCmd,(SqlDir + sep + jccSqlFile)});
+			} else {   // Derby Client
+				// use clientSqlFile
+				if(!hostName.equals("localhost")) {
+					massageSqlFile(hostName,clientSqlFile);
+				if (useAltExtinDir)	
+					execCmdDumpResults(new String[]{IjCmd,(altExtinDir + sep + SqlDir + sep + clientSqlFile)});
+				}
+				execCmdDumpResults(new String[]{IjCmd,(SqlDir + sep + clientSqlFile)});
+			}
 			System.out.println("End test");
 		}
 		catch (Exception e)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/timeslice.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/timeslice.java
index 905bc27d..094579a0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/timeslice.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/timeslice.java
@@ -30,6 +30,7 @@
 import org.apache.derby.drda.NetworkServerControl;
 import org.apache.derbyTesting.functionTests.harness.jvm;
 import org.apache.derbyTesting.functionTests.harness.ProcessStreamResult;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 import org.apache.derby.tools.ij;
 
 /**
@@ -55,7 +56,7 @@
 			"timeslice", "a"};
     private static  BufferedOutputStream bos = null;
 	private static  NetworkServerControl server;
-	private static String host = "localhost";
+	private static String host;
 	private static int port = 1527;
 	/**
 	 * Execute the given command and dump the results to standard out
@@ -115,6 +116,8 @@ private static void checkTimeSlice( int value)
 
 	public static void main (String args[]) throws Exception
 	{
+		host = TestUtil.getHostName();
+		timesliceCmd2[4] = host;
 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
 			jvm = jvm.getJvm("j9_13");
 		else
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java
index 856c3bd9..e8c22b50 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java
@@ -470,6 +470,7 @@ public void testBlobInsert() {
 				" ) values (cast (X'a78a' as blob(80)) )";
 			Xprint(insert);
 		}
+            Xprint("drop table blobCheck");
 	}
     public void test() throws SQLException {
         // create table for testing
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StmtCloseFunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StmtCloseFunTest.java
index 083be0e9..4c5be028 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StmtCloseFunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StmtCloseFunTest.java
@@ -65,10 +65,12 @@ public static void main(String[] args) {
 			// make the initial connection.
 			ij.getPropertyArg(args);
 			Connection conn = ij.startJBMS();
+			cleanUp(conn);
 			test1(conn);
 			test2(conn);
 			test3(conn);
 
+			cleanUp(conn);
 			conn.close();		
 				
 		} catch (SQLException e) {
@@ -81,6 +83,16 @@ public static void main(String[] args) {
 		System.out.println("Statement Close Fun Test finished");
 	}
 
+	
+    private static void cleanUp(Connection conn) throws SQLException {
+	Statement s = conn.createStatement();
+	String[] testObjects = {"PROCEDURE TAKESSTRING", "TABLE TAB1", "TABLE TAB2", "TABLE TAB3"};
+        try {
+		TestUtil.cleanUpTest(s, testObjects);
+	} catch (SQLException se){//
+	}
+    }
+
     private static void test1(Connection conn) {
 		Statement s;
         try {
@@ -583,7 +595,6 @@ private static void test3(Connection conn) {
 				}
 				catch(SQLException e) { }
 
-				s.execute("drop procedure takesString");
 				s.close();
 			}
 		
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java
index d8b7cb1f..47c9d7cf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java
@@ -270,6 +270,8 @@ private static void dropTestTables( Connection conn ) throws SQLException {
 	    st = conn.createStatement();
 	    st.execute("drop table SMALL_BLOB_TABLE");
 	    st.execute("drop table LARGE_BLOB_TABLE");
+	    st.execute("drop table SMALL_CLOB_TABLE");
+	    st.execute("drop table LARGE_CLOB_TABLE");
 
 	}finally{
 	    if(st != null)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/autoGeneratedJdbc30.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/autoGeneratedJdbc30.java
index 5782fa04..c33e24ae 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/autoGeneratedJdbc30.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/autoGeneratedJdbc30.java
@@ -32,6 +32,8 @@
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
 
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+
 /**
  * Test the new Auto Generated Keys feature in jdbc 30 for Statement and PreparedStatement.
  *
@@ -39,6 +41,9 @@
  */
 
 public class autoGeneratedJdbc30 { 
+
+	private static String[] testObjects= {"table t11","table t21","table t31"};
+
 	public static void main(String[] args) {
 
 		Connection con = null;
@@ -63,6 +68,9 @@ public static void main(String[] args) {
 
 			negativeTests(con);
 
+			s = con.createStatement();
+			TestUtil.cleanUpTest(s, testObjects);
+			con.commit();
 			con.close();
 		}
 		catch (SQLException e) {
@@ -112,6 +120,15 @@ public static int count(Connection con, Statement s) throws SQLException {
 	//Set up the test by creating the table used by the rest of the test.
 	public static void setUpTest(Statement s)
 					throws SQLException {
+		try {
+			// first drop to make sure there's nothing there
+			s.execute("drop table t11");
+			s.execute("drop table t21");
+			s.execute("drop table t31");
+		} catch (SQLException se) {
+			// assume failure because there really wasn't anything there 
+		}
+
 		/* Create a table */
 		// set by increment not yet supported for create table...
 		// does not matter for purpose of this test.
@@ -883,6 +900,7 @@ public static void negativeTests(Connection con) throws SQLException
 				else
 					JDBCDisplayUtil.ShowSQLException(System.out,e);
 			}
+		con.rollback();
 	}
 
 	public static void doTest1920(Statement s, Connection con) throws SQLException
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
index bcd784c4..4f4f8910 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
@@ -57,6 +57,10 @@
 public class blobclob4BLOB { 
 
 	static String[] fileName;
+	static String[] basefileName; // for printing messages so that no path info is in .out
+	static String filePath;
+	static String unicodeFilePath;
+	static String sep;
 	static long[] fileLength;
     static int numFiles;
     static int numRows;
@@ -72,14 +76,21 @@
 	static
 	{
 		numFiles = 5;
+		filePath = "extin";
 		fileName = new String[numFiles];
+		basefileName = new String[numFiles];
 		fileLength = new long[numFiles];
 
-		fileName[0] = "extin/short.txt";	// set up a short (fit in one page) blob/clob
-		fileName[1] = "extin/littleclob.txt"; // set up a long (longer than a page) blob/clob
-		fileName[2] = "extin/empty.txt"; // set up a blob/clob with nothing in it
-		fileName[3] = "extin/searchclob.txt"; // set up a blob/clob to search with
-		fileName[4] = "extin/aclob.txt"; // set up a really long (over 300K) blob/clob
+		fileName[0] = "short.txt";	// set up a short (fit in one page) blob/clob
+		fileName[1] = "littleclob.txt"; // set up a long (longer than a page) blob/clob
+		fileName[2] = "empty.txt"; // set up a blob/clob with nothing in it
+		fileName[3] = "searchclob.txt"; // set up a blob/clob to search with
+		fileName[4] = "aclob.txt"; // set up a really long (over 300K) blob/clob
+
+		for (int i = 0 ; i < numFiles; i++)
+		{
+			basefileName[i] = fileName[i];
+		}
 
         numRows = 10;
 
@@ -90,7 +101,8 @@
         unicodeStrings[2] = "\u05d0\u05d1\u05d2";
         numRowsUnicode = 6;
 
-        unicodeFileName = "extinout/unicodeFile.txt";
+        unicodeFilePath = "extinout";
+        unicodeFileName = "unicodeFile.txt";
     }
 
 
@@ -102,6 +114,21 @@ public static void main(String[] args)
 
 		try
         {
+            // first check to see if the path to extin/out dir is ok.
+            sep = System.getProperty("file.separator");
+            boolean exists = (new File(filePath, fileName[0])).exists();
+            if (!exists)
+            {
+                String userDir = System.getProperty("user.dir");
+                filePath = userDir + sep + ".." + sep + filePath;
+                unicodeFilePath = userDir + sep + ".." + sep + unicodeFilePath;
+            }
+            for (int i=0; i < numFiles; i++) 
+            {
+                fileName[i] = filePath + sep + fileName[i];
+            }
+            unicodeFileName = unicodeFilePath + sep + unicodeFileName;
+
 			// use the ij utility to read the property file and
 			// make the initial connection.
 			ij.getPropertyArg(args);
@@ -180,9 +207,23 @@ public static void main(String[] args)
             conn.commit();
             clobNegativeTest_Derby265(conn);
             blobNegativeTest_Derby265(conn);
+
+            // restart the connection for cleaning up
+            conn = ij.startJBMS();
+            String[] testObjects = {"table testclob_main", "table searchclob", 
+                                  "table testunicode", "table testunicode2", 
+                                  "table testclob10", "table testinteger", 
+                                  "table testclobcolumn", "table testclob2", 
+                                  "table testclob7", "table testlongrowclob", 
+                                  "table testblob", "table searchblob", 
+                                  "table testvarbinary", "table testinteger2", 
+                                  "table testblobcolumn", "table testblob2", 
+                                  "table testblobx", "table testlongrowblob", 
+                                  "table maps", "table maps_blob"};
+            Statement stmt = conn.createStatement();
+            TestUtil.cleanUpTest(stmt, testObjects);
             conn.close();
             System.out.println("FINISHED TEST blobclob :-)");
-
 		}
         catch (SQLException e)
         {
@@ -263,12 +304,12 @@ private static void prepareCLOBMAIN(Connection conn)
                 fileLength[i] = file.length();
 				/*
 				System.out.println("inserting filename[" +i +
-								   "]" + fileName[i] +
+								   "]" + basefileName[i] +
 								   " length: " + fileLength[i]);
 				*/
                 InputStream fileIn = new FileInputStream(file);
 
-                System.out.println("===> inserting " + fileName[i] + " length = "
+                System.out.println("===> inserting " + basefileName[i] + " length = "
 				    				   + fileLength[i]);
 
                 // insert a streaming column
@@ -348,10 +389,10 @@ private static void prepareSearchClobTable(Connection conn)
 
 				/*
 				System.out.println("inserting filename[" +i +
-								   "]" + fileName[i] +
+								   "]" + basefileName[i] +
 								   " length: " + fileLength[i]);
 				*/
-                System.out.println("===> inserting " + fileName[i] + " length = "
+                System.out.println("===> inserting " + basefileName[i] + " length = "
 				    				   + fileLength[i]);
 
                 // insert a streaming column
@@ -2682,7 +2723,7 @@ private static void prepareBlobTable(Connection conn)
                 fileLength[i] = file.length();
                 InputStream fileIn = new FileInputStream(file);
 
-                System.out.println("===> inserting " + fileName[i] + " length = "
+                System.out.println("===> inserting " + basefileName[i] + " length = "
 				    				   + fileLength[i]);
 
                 // insert a streaming column
@@ -2797,7 +2838,7 @@ private static void prepareSearchBlobTable(Connection conn)
                 fileLength[i] = file.length();
                 InputStream fileIn = new FileInputStream(file);
 
-                System.out.println("===> inserting " + fileName[i] + " length = "
+                System.out.println("===> inserting " + basefileName[i] + " length = "
 				    				   + fileLength[i]);
 
                 // insert a streaming column
@@ -4202,11 +4243,3 @@ static private boolean isNullSearchPattern(SQLException se)
 }
 
 
-
-
-
-
-
-
-
-
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
index c39aa3b4..3572f33a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
@@ -42,45 +42,20 @@
 
 public class checkDriver {
 
+	private static String hostName;
 	private static String EMBEDDED_URL = "jdbc:derby:wombat;create=true";
-	private static String CLIENT_URL = "jdbc:derby://localhost:1527/wombat;create=true";
-	private static String JCC_URL = "jdbc:derby:net://localhost:1527/wombat;create=true";
+	private static String CLIENT_URL;
+	private static String JCC_URL;
 	private static String INVALID_URL = "jdbc:db2j:wombat;create=true";
 	
 	private static String DERBY_SYSTEM_HOME = System.getProperty("derby.system.home");
 	
-	private static String CLIENT_URL_WITH_COLON1 = 
-		"jdbc:derby://localhost:1527/wombat:create=true";
-	private static String CLIENT_URL_WITH_COLON2 = 
-		"jdbc:derby://localhost:1527/"+ DERBY_SYSTEM_HOME + File.separator +"wombat:create=true";
-	private static String CLIENT_URL_WITH_DOUBLE_QUOTES1 = 
-		"jdbc:derby://localhost:1527/\"wombat\";create=true"; 
-	private static String CLIENT_URL_WITH_DOUBLE_QUOTES2 = 
-		"jdbc:derby://localhost:1527/\"" + DERBY_SYSTEM_HOME + File.separator + "wombat\";create=true";
-	private static String CLIENT_URL_WITH_SINGLE_QUOTES1 = 
-		"jdbc:derby://localhost:1527/'" + DERBY_SYSTEM_HOME + File.separator + "wombat';create=true";
-	private static String CLIENT_URL_WITH_SINGLE_QUOTES2 = 
-		"jdbc:derby://localhost:1527/'wombat';create=true";
-	
-	// URLS to check.  New urls need to also be added to the acceptsUrl table
-	private static String[] urls = new String[]
-	{
-	  	EMBEDDED_URL,
-		CLIENT_URL,
-		JCC_URL,
-		INVALID_URL,
-	};
-	
-	//Client URLS
-	private static String[] clientUrls = new String[]
-	{
-		CLIENT_URL_WITH_COLON1,
-		//CLIENT_URL_WITH_COLON2,
-		//CLIENT_URL_WITH_DOUBLE_QUOTES1,
-		//CLIENT_URL_WITH_DOUBLE_QUOTES2,
-		//CLIENT_URL_WITH_SINGLE_QUOTES1,
-		CLIENT_URL_WITH_SINGLE_QUOTES2
-	};
+	private static String CLIENT_URL_WITH_COLON1; 
+	private static String CLIENT_URL_WITH_COLON2;
+	private static String CLIENT_URL_WITH_DOUBLE_QUOTES1;  
+	private static String CLIENT_URL_WITH_DOUBLE_QUOTES2; 
+	private static String CLIENT_URL_WITH_SINGLE_QUOTES1; 
+	private static String CLIENT_URL_WITH_SINGLE_QUOTES2;
 	
 	/**
 	 * url prefix for this framework
@@ -91,7 +66,6 @@
 	// to check for valid results for each framework
 	private static int  frameworkOffset;
 	
-	
 	private static int EMBEDDED_OFFSET = 0;
 	private static int DERBYNETCLIENT_OFFSET = 1;
 	private static int DERBYNET_OFFSET = 2;   // JCC
@@ -104,8 +78,39 @@ else if (TestUtil.isDerbyNetClientFramework())
 			frameworkOffset = DERBYNETCLIENT_OFFSET;
 		else if (TestUtil.isJCCFramework())
 			frameworkOffset = DERBYNET_OFFSET; // JCC
+		
+		hostName = TestUtil.getHostName();
+		CLIENT_URL = "jdbc:derby://" + hostName + ":1527/wombat;create=true";
+		JCC_URL = "jdbc:derby:net://" + hostName + ":1527/wombat;create=true";
+		CLIENT_URL_WITH_COLON1 = "jdbc:derby://" + hostName + ":1527/wombat:create=true";
+		CLIENT_URL_WITH_COLON2 = "jdbc:derby://" + hostName + ":1527/"+ DERBY_SYSTEM_HOME + File.separator +"wombat:create=true";
+		CLIENT_URL_WITH_DOUBLE_QUOTES1 = "jdbc:derby://" + hostName + ":1527/\"wombat\";create=true"; 
+		CLIENT_URL_WITH_DOUBLE_QUOTES2 = "jdbc:derby://" + hostName + ":1527/\"" + DERBY_SYSTEM_HOME + File.separator + "wombat\";create=true";
+		CLIENT_URL_WITH_SINGLE_QUOTES1 = "jdbc:derby://" + hostName + ":1527/'" + DERBY_SYSTEM_HOME + File.separator + "wombat';create=true";
+		CLIENT_URL_WITH_SINGLE_QUOTES2 = "jdbc:derby://" + hostName + ":1527/'wombat';create=true";
 	}
 	
+	// URLS to check.  New urls need to also be added to the acceptsUrl table
+	private static String[] urls = new String[]
+	{
+	  	EMBEDDED_URL,
+		CLIENT_URL,
+		JCC_URL,
+		INVALID_URL,
+	};
+		
+	//Client URLS
+	private static String[] clientUrls = new String[]
+	{
+		CLIENT_URL_WITH_COLON1,
+		//CLIENT_URL_WITH_COLON2,
+		//CLIENT_URL_WITH_DOUBLE_QUOTES1,
+		//CLIENT_URL_WITH_DOUBLE_QUOTES2,
+		//CLIENT_URL_WITH_SINGLE_QUOTES1,
+		CLIENT_URL_WITH_SINGLE_QUOTES2
+	};
+	
+	
 	// Table that shows whether tested urls should return true for acceptsURL
 	// under the given framework
 	private static boolean[][] acceptsURLTable = new boolean[][]
@@ -120,6 +125,7 @@ else if (TestUtil.isJCCFramework())
 			
 
 	public static void main(String[] args) {
+		
 		try {
 			Driver driver = loadAndCheckDriverForFramework();			
 			checkAcceptsURL(driver);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java
index e260a37c..2150c802 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java
@@ -44,6 +44,8 @@
    
 	static private boolean isDerbyNet = false;
 
+	static private String[] testObjects = {"TABLE TAB1"};
+
 	public static void main(String[] args) {
 		Connection conn, connreturn;
 		Statement stmt, stmtreturn;
@@ -58,6 +60,8 @@ public static void main(String[] args) {
 			 conn = ij.startJBMS();
 			 isDerbyNet = TestUtil.isNetFramework();
 			 stmt = conn.createStatement();
+			// cleanup table, just in case
+			TestUtil.cleanUpTest(stmt, testObjects);
             //create a table, insert a row, do a select from the table,
 			 stmt.execute("create table tab1("+
                                            "c1 char(100) for bit data,"+
@@ -162,6 +166,7 @@ public static void main(String[] args) {
 
             cs.close();
 			conn.close();
+			TestUtil.cleanUpTest(stmt, testObjects);
 
 		}
 		catch (SQLException e) {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dataSourcePermissions.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dataSourcePermissions.java
index 3f2b7f12..0f2d9a40 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dataSourcePermissions.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dataSourcePermissions.java
@@ -24,6 +24,8 @@
 import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
 import org.apache.derby.jdbc.EmbeddedXADataSource;
 
+import java.util.Properties;
+
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.PreparedStatement;
@@ -44,6 +46,7 @@
 import javax.sql.ConnectionEvent;
 import org.apache.derby.tools.JDBCDisplayUtil;
 import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 import java.io.*;
 import java.util.Hashtable;
@@ -62,6 +65,7 @@ public static void main(String[] args) throws Exception {
 
 		ij.getPropertyArg(args);
 		new dataSourcePermissions().runTest();
+		new dataSourcePermissions().cleanUp();
 		System.out.println("Completed dataSourcePermissions");
 
 	}
@@ -281,6 +285,7 @@ protected void runTest() throws Exception {
 
 		shutdown();
 		}
+
 	}
 
 	private static void checkConnection(Connection conn) throws SQLException {
@@ -372,4 +377,47 @@ public void shutdown() {
 			System.out.println("EXPECTED SHUTDOWN " + sqle.getMessage());
 		}
 	}
+
+	protected void cleanUp() throws Exception {
+		// clear up in case this test gets run with useprocess=false
+		try {
+			TestUtil.loadDriver();
+			Connection conn = DriverManager.getConnection(getJDBCUrl("wombat", "user=EDWARD;password=noodle"));
+			CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
+			start();
+
+			cs.setString(1, "derby.connection.requireAuthentication");
+			cs.setString(2, "false");
+			cs.execute();
+			cs.close();
+
+			shutdown();
+			start();
+
+			conn = DriverManager.getConnection(getJDBCUrl("wombat", "user=EDWARD;password=noodle"));
+			cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
+
+			cs.setString(1, "derby.user.EDWARD");
+			cs.setNull(2, java.sql.Types.VARCHAR);
+			cs.execute();
+
+			cs.setString(1, "derby.user.FRANCES");
+			cs.setNull(2, java.sql.Types.VARCHAR);
+			cs.execute();
+
+			cs.setString(1, "derby.user." + zeus);
+			cs.setNull(2, java.sql.Types.VARCHAR);
+			cs.execute();
+
+			cs.close();
+
+			conn.close();
+			shutdown();
+		
+		} catch (SQLException sqle) {
+			System.out.println("UNEXPECTED CONNFAIL " + sqle.getMessage());
+			System.out.println("could not clean up");
+		}
+	}
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/lobStreams.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/lobStreams.java
index f9b61a9e..1e31c8c6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/lobStreams.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/lobStreams.java
@@ -40,6 +40,7 @@
 public class lobStreams {
     
         static String[] fileName = new String[2];
+        static String sep;
         static long fileLength;
 
         static boolean debug = true;
@@ -47,14 +48,34 @@
 
         static
         {
-            fileName[0] = "extin/aclob.txt";
-            fileName[1] = "extin/littleclob.txt";
+//            fileName[0] = "extin" + sep + "aclob.txt";
+ //           fileName[1] = "extin" + sep + "littleclob.txt";
+            fileName[0] =  "aclob.txt";
+            fileName[1] =  "littleclob.txt";
         }
         
         public static void main(String[] args)
         {
             System.out.println("Test lob stream with multiple writes starting");
 
+            // check to see if we have the correct extin path, if the files aren't right here, try one more time
+	    boolean exists = (new File("extin", fileName[0])).exists();
+            String sep =  System.getProperty("file.separator");
+	    if (!exists) 
+            {
+                // assume it's in a dir up, if that's wrong too, too bad...
+                String userdir =  System.getProperty("user.dir");
+                fileName[0] = userdir + sep + ".." + sep + "extin" + sep + fileName[0];
+                fileName[1] = userdir + sep + ".." + sep + "extin" + sep + fileName[1];
+            }
+            else
+            {
+                // assume it's in a dir up, if that's wrong too, too bad...
+                fileName[0] = "extin" + sep + fileName[0];
+                fileName[1] = "extin" + sep + fileName[1];
+            }
+
+
             try
             {
                 // use the ij utility to read the property file and
@@ -76,6 +97,8 @@ public static void main(String[] args)
 
                 // restart the connection
                 conn.commit();
+                cleanUp(conn);
+                conn.commit();
                 conn.close();
                 System.out.println("FINISHED TEST blobSetBinaryStream :-)");
 
@@ -443,4 +466,11 @@ private static boolean compareLob2File(InputStream fStream, InputStream lStream)
             } 
             return true;
         }
+
+        private static void cleanUp(Connection conn) throws SQLException {
+            String[] testObjects = {"table testBlobX1"};
+            Statement cleanupStmt = conn.createStatement();
+            TestUtil.cleanUpTest(cleanupStmt, testObjects);
+        }
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/maxfieldsize.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/maxfieldsize.java
index 9262de37..165b1a89 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/maxfieldsize.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/maxfieldsize.java
@@ -61,6 +61,10 @@ public static void main(String[] args) {
 		Connection conn;
 		Statement stmt;
 
+		// start by cleaning up, just in case
+		String[] testObjects = {"table tab1", "table tab2"};
+		
+
 		System.out.println("Test MaxFieldSize  starting");
 
 		isDerbyNet = TestUtil.isNetFramework();
@@ -71,6 +75,7 @@ public static void main(String[] args) {
 			 ij.getPropertyArg(args);
 			 conn = ij.startJBMS();
 			 stmt = conn.createStatement();
+			 TestUtil.cleanUpTest(stmt, testObjects);
             //create a table, insert a row, do a select from the table,
 			 stmt.execute("create table tab1("+
                                            "c1 char(100) for bit data,"+
@@ -163,6 +168,8 @@ public static void main(String[] args) {
 
 			testSort(conn, stmt);
 
+			TestUtil.cleanUpTest(stmt, testObjects);
+
 			stmt.close();
 			conn.close();
 
@@ -313,4 +320,10 @@ static private void dumpExpectedSQLExceptions (SQLException se) {
         }
     }
 
+	static private void cleanUp(Connection conn) throws SQLException
+	{
+		
+	}
+
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
index fe8425f0..c639895c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadata_test.java
@@ -39,6 +39,7 @@
 import java.util.StringTokenizer;
 
 import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 /**
  * Test of database meta-data.  This program simply calls each of the meta-data
@@ -1062,24 +1063,14 @@ public void runTest() {
 				" parameter style java"); 
             	s.execute("call isReadO()");
             }
-			s.execute("drop procedure isReadO");
-			s.execute("drop procedure GETPCTEST4Bx");
-			s.execute("drop procedure GETPCTEST4B");
-			s.execute("drop procedure GETPCTEST4A");
-			s.execute("drop procedure GETPCTEST3B");
-			s.execute("drop procedure GETPCTEST3A");
-			s.execute("drop procedure GETPCTEST2");
-			s.execute("drop procedure GETPCTEST1");
-			s.execute("drop table t");
-			s.execute("drop table reftab");
-			s.execute("drop table reftab2");
-			s.execute("drop view SCREWIE");
-			s.execute("drop table louie");
-			s.execute("drop table alltypes");
+			cleanUp(s);
+	
 			s.close();
+
 			if (con.getAutoCommit() == false)
 				con.commit();
 
+			
 			con.close();
 
 		}
@@ -1278,5 +1269,18 @@ protected Connection createConnection(String[] args) throws Exception {
 		return con;
 
 	}
+
+	protected void cleanUp(Statement stmt) throws SQLException {
+		con.setAutoCommit(true);
+		String[] testObjects = {"table t", "table t1", "view screwie", 
+			"table reftab", "table reftab2", "table inflight" , "table alltypes", 
+			"table louie",
+			"procedure getpctest1", "procedure getpctest2",
+			"procedure getpctest3a", "procedure getpctest3b",
+			"procedure getpctest4a", "procedure getpctest4b", "procedure getpctest4bx",
+			"procedure isreadO" };
+		TestUtil.cleanUpTest(stmt, testObjects);
+	}
+
 }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java
index 79ed6915..a6755d71 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java
@@ -199,7 +199,7 @@ private static void derby522(Statement st) throws Exception
 			st.execute("drop table t1");
 		} catch (SQLException se) {}
 		try {
-			st.execute("drop procedure proc1");
+			st.execute("drop procedure za");
 		} catch (SQLException se) {}
 
 		st.close();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMetaDataJdbc30.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMetaDataJdbc30.java
index cffb2f48..d33b45b7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMetaDataJdbc30.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMetaDataJdbc30.java
@@ -44,6 +44,8 @@
 
 public class parameterMetaDataJdbc30 {
 	private static boolean isDerbyNet;
+	private static String[] testObjects = { "TABLE  T", "FUNCTION RDB",
+					 "PROCEDURE DUMMYINT", "PROCEDURE DUMMY_NUMERIC_PROC"};
 	public static void main(String[] args) {
 		Connection con = null;
 		Statement  s;
@@ -65,6 +67,7 @@ public static void main(String[] args) {
 			s = con.createStatement();
 
 			/* Create the table and do any other set-up */
+			TestUtil.cleanUpTest(s, testObjects);
 			setUpTest(s);
 
       s.executeUpdate("create function RDB(P1 INT) RETURNS DECIMAL(10,2) language java external name 'org.apache.derbyTesting.functionTests.tests.lang.outparams30.returnsBigDecimal' parameter style java");
@@ -181,6 +184,7 @@ public static void main(String[] args) {
       ps.execute();
 
       cs.close();
+      ps.close();    
 
       System.out.println("test: the scale returned should be the one set by registerOutParameter");
       s.executeUpdate("create procedure dummy_numeric_Proc(out a NUMERIC(30,15), out b NUMERIC(30,15)) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.parameterMetaDataJdbc30.dummy_numeric_Proc'");
@@ -252,6 +256,13 @@ public static void main(String[] args) {
 	  cs.close();
 	  s.execute("DROP PROCEDURE PMDD");
       }
+     s.close();
+     con = ij.startJBMS();
+     con.setAutoCommit(true); // make sure it is true
+     s = con.createStatement();
+	 TestUtil.cleanUpTest(s, testObjects);
+     s.close();
+     con.close();
      }
 	 catch (SQLException e) {
 	 dumpSQLExceptions(e);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtMetaData.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtMetaData.java
index f2b2e1cb..94c01e2f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtMetaData.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtMetaData.java
@@ -140,6 +140,7 @@ public static void main(String[] args) {
 
 			// clean up
 			executeStmt(con,"drop table ab");
+			executeStmt(con,"drop table bug4579");
 
 			con.close();
 		}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
index 39c03d93..9e0700ea 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
@@ -6,6 +6,8 @@
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
 
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+
 public class prepStmtNull {
 
     public static void main(String[] args) {
@@ -51,6 +53,9 @@ public static void test1(String []args) {
 			   System.out.println("ResultSet is: "+rs.getObject(1));
 			   System.out.println("ResultSet is: "+rs.getObject(2));
 			}
+			String[] testObjects = {"table nullTS"};
+                        TestUtil.cleanUpTest(stmt1, testObjects);
+   			con.commit();
  		} catch(SQLException sqle) {
  		   dumpSQLExceptions(sqle);
  		   sqle.printStackTrace();
@@ -99,6 +104,9 @@ public static void test2(String []args) {
 			   System.out.println("ResultSet is: "+rs.getObject(1));
 			   System.out.println("ResultSet is: "+rs.getObject(2));
 			}
+			String[] testObjects = {"table nullBlob"};
+                        TestUtil.cleanUpTest(stmt1, testObjects);
+   			con.commit();
  		} catch(SQLException sqle) {
  		   dumpSQLExceptions(sqle);
  		   sqle.printStackTrace();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
index 2566589d..f9825813 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
@@ -166,6 +166,11 @@ public static void main(String[] args) throws Throwable {
 			stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
 									   ResultSet.CONCUR_UPDATABLE);
 
+            try { 
+                stmt.execute("drop table t"); 
+            } catch (SQLException se) {
+            } // ignore, assume it is because table does not exist
+
 			stmt.execute("create table t (i int, s smallint, r real, "+
 				"d double precision, dt date, t time, ts timestamp, "+
 				"c char(10), v varchar(40) not null, dc dec(10,2),"+
@@ -597,7 +602,8 @@ public static void main(String[] args) throws Throwable {
 			System.out.println("rollback with auto commit");
 			showLocksForAutoCommitSelect(con, stmt, 2);
 
-
+            stmt.execute("drop table bug4810");
+			con.commit();
 			stmt.close();
 
 			testMutableValues(con);
@@ -877,6 +883,13 @@ static private void testCorrelationNamesAndMetaDataCalls(Connection conn) throws
 		System.out.println("Schema name of first column is " + met.getSchemaName(1));
 		System.out.println("Table name of second column is " + met.getTableName(2));
 		System.out.println("Schema name of second column is " + met.getSchemaName(2));
+        stmt.execute("drop table s");
+        stmt.execute("drop table s1.t1");
+        stmt.execute("drop schema s1 restrict");
+        stmt.execute("drop table app1.t1");
+        stmt.execute("drop table app2.t1");
+        stmt.execute("drop schema app2 restrict");
+        stmt.execute("drop schema app1 restrict");
 	}
 
 	static private void doTheTests() throws Exception
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetJdbc20.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetJdbc20.java
index ac09113b..f847d259 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetJdbc20.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetJdbc20.java
@@ -31,6 +31,8 @@
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
 
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+
 /**
  * Test of additional methods in JDBC2.0 result set meta-data.
  * This program simply calls each of the additional result set meta-data
@@ -39,11 +41,13 @@
  */
 
 public class resultsetJdbc20 { 
+	private static String[] testObjects = { "TABLE T"};
 	public static void main(String[] args) {
 		Connection con;
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
+		
 		String[]  columnNames = {"i", "s", "r", "d", "dt", "t", "ts", "c", "v", "dc"};
 
 		System.out.println("Test resultsetJdbc20 starting");
@@ -55,6 +59,8 @@ public static void main(String[] args) {
 			ij.getPropertyArg(args);
 			con = ij.startJBMS();
 			stmt = con.createStatement();
+			// first clean up
+			TestUtil.cleanUpTest(stmt, testObjects);
 
       //create a table, insert a row, do a select from the table,
       //get the resultset meta data and go through each column in
@@ -91,6 +97,7 @@ public static void main(String[] args) {
 
 			rs.close();
 
+			TestUtil.cleanUpTest(stmt, testObjects);
 			stmt.close();
 			con.close();
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
index f562c33f..c7f3f191 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
@@ -31,6 +31,7 @@
 
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 import java.io.InputStream;
 import java.io.IOException;
@@ -70,14 +71,22 @@ public static void main(String[] args) {
 			stmt.execute("create table t2 (len int, data LONG VARCHAR FOR BIT DATA)");
 			PreparedStatement ppw = con.prepareStatement(
 				"insert into t2 (len, data) values (?, ?)");
-			File file = new File("extin/littleclob.txt");
+			String filePath = "extin";
+			String sep = System.getProperty("file.separator");
+			boolean exists = (new File("extin", "littleclob.txt")).exists();
+			if (!exists)
+			{
+				String userDir = System.getProperty("user.dir");
+					filePath = userDir + sep + ".." + sep + filePath;
+			}
+			File file = new File(filePath + sep + "littleclob.txt");
 			int fileSize = (int) file.length();
 			BufferedInputStream fileData = new BufferedInputStream(new FileInputStream(file));
 			ppw.setInt(1, fileSize);
 			ppw.setBinaryStream(2, fileData, fileSize);
 			ppw.executeUpdate();
 
-			file = new File("extin/short.txt");
+			file = new File(filePath + sep + "short.txt");
 			fileSize = (int) file.length();
 			fileData = new BufferedInputStream(new FileInputStream(file));
 			ppw.setInt(1, fileSize);
@@ -89,7 +98,7 @@ public static void main(String[] args) {
 			ppw.executeUpdate();
 
 			// value copied over from original Java object test.
-			File rssg = new java.io.File("extin/resultsetStream.gif");
+			File rssg = new java.io.File(filePath + sep + "resultsetStream.gif");
 			int rssgLength = (int) rssg.length();
 			ppw.setInt(1, (int) rssgLength);
 			ppw.setBinaryStream(2, new FileInputStream(rssg), rssgLength);
@@ -282,10 +291,11 @@ public static void main(String[] args) {
 
 			ppw.close();
 			rs.close();
-			stmt.close();
 			
 			TestOfGetAsciiStream.executeTestOfGetAsciiStream(con);
 
+			cleanUp(stmt);
+			stmt.close();
 			con.close();
 
 		}
@@ -308,6 +318,10 @@ static private void dumpSQLExceptions (SQLException se) {
 		}
 	}
 	
+	private static void cleanUp(Statement stmt) throws SQLException {
+		String[] testObjects = { " table t3", "table t2" };
+		TestUtil.cleanUpTest(stmt, testObjects);
+	}
 	
 	static class TestOfGetAsciiStream {
 		
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/rsgetXXXcolumnNames.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/rsgetXXXcolumnNames.java
index 3634ebaf..de3315b3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/rsgetXXXcolumnNames.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/rsgetXXXcolumnNames.java
@@ -6,6 +6,8 @@
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
 
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+
 public class rsgetXXXcolumnNames {
 
     public static void main(String[] args) {
@@ -27,10 +29,15 @@ public static void test1(String []args) {
                         ij.getPropertyArg(args);
                         con = ij.startJBMS();
 					
-			con.setAutoCommit(false);                        			              
 
                         stmt = con.createStatement(); 
 
+                        // first cleanup in case we're using useprocess false
+                        String[] testObjects = {"table caseiscol"};
+                        TestUtil.cleanUpTest(stmt, testObjects);
+
+			con.setAutoCommit(false);                        			              
+
 			// create a table with two columns, their names differ in they being in different cases.
                         stmt.executeUpdate("create table caseiscol(COL1 int ,\"col1\" int)");
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java
index 72e4cd5b..1fb9ed24 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java
@@ -44,8 +44,12 @@
 
 	static private boolean isDerbyNet = false;
 
+    static private String[] testObjects = { "table t1", "table t2", "table savepoint"};
+
+
+
 	public static void main(String[] args) {
-		Connection con = null, con2 = null;
+		Connection con = null, con2 = null, con3 = null;
 		Statement  s;
 		System.out.println("Test savepointJdbc30 starting");
 
@@ -80,6 +84,15 @@ public static void main(String[] args) {
 			s.close();
 			con.close();
 			con2.close();
+
+			con3 = ij.startJBMS();
+			con3.setAutoCommit(true);
+			s = con3.createStatement();
+			TestUtil.cleanUpTest(s, testObjects);
+			s.close();
+			con3.close();
+
+
 		}
 		catch (SQLException e) {
 			dumpSQLExceptions(e);
@@ -873,6 +886,16 @@ static void genericTests(Connection con, Connection con2, Statement s)
 	//Set up the test by creating the table used by the rest of the test.
 	static void setUpTest(Statement s)
 					throws SQLException {
+
+		try {
+			/* Drop the tables, just in case they're there from another test */
+			s.execute("drop table t1");
+			s.execute("drop table t2");
+			s.execute("drop table savepoint");
+		} catch (SQLException se) {
+			//System.out.println("Expected Exception is " + se.getMessage());
+		}
+
 		/* Create a table */
 		s.execute("create table t1 (c11 int, c12 smallint)");
 		s.execute("create table t2 (c11 int)");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java
index 13155248..f48fe71c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java
@@ -35,6 +35,7 @@
 
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 
 public class setTransactionIsolation{
@@ -54,6 +55,7 @@ public static void main (String args[])
 		createAndPopulateTable(conn);
 		runTests(conn);
 		conn.rollback();
+		cleanUp(conn);
 		conn.close();
     } catch (Throwable  e) {
 		e.printStackTrace();
@@ -343,6 +345,16 @@ public static void showScanStatistics(ResultSet rs, Connection conn)
 		}			
 	}
 
+	static void cleanUp(Connection conn) throws SQLException
+	{
+		String[] testObjects = {"table t1"};
+		Statement stmt = conn.createStatement();
+		TestUtil.cleanUpTest(stmt, testObjects);
+		conn.commit();
+		stmt.close();
+	}
+	
+
 }
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/bug5054.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/bug5054.java
index df73058a..dde05f55 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/bug5054.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/bug5054.java
@@ -45,6 +45,7 @@ public static void main (String args[])
       	createTables(conn);
       	doUpdates(conn);
       	dumpResult(conn);
+        cleanUp(conn);
 		conn.close();
     } catch (Exception e) {
 		System.out.println("FAIL -- unexpected exception "+e);
@@ -68,6 +69,14 @@ private static void createTables(Connection conn) throws SQLException {
     stmt.close();
   }
 
+  private static void cleanUp(Connection conn) throws SQLException {
+    Statement stmt = conn.createStatement();
+	try {
+    	stmt.executeUpdate( "DROP TABLE T1" );
+	}catch (Exception e) {}
+    stmt.close();
+  }
+
   private static void doUpdates(Connection conn) throws SQLException
   {
     int rc;
@@ -98,6 +107,7 @@ private static void dumpResult(Connection conn) throws SQLException
     while (rs.next()) {
       System.out.println(rs.getInt(1)+ " " + rs.getInt(2));
     }
+    rs.close();
   }
 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJavaJDBC30.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJavaJDBC30.java
index a40ba7a3..646a3d1a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJavaJDBC30.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/declareGlobalTempTableJavaJDBC30.java
@@ -1185,8 +1185,8 @@ static boolean testPooledConnectionClose()
 				ds.setDatabaseName("wombat");
 				ds.setUser("cs");
 				ds.setPassword("cs");
-
-				ds.setServerName("localhost");
+				hostName = TestUtil.getHostName();
+				ds.setServerName(hostName);
 				ds.setPortNumber(1527);
 				ds.setDriverType(4);
 				dsp = ds;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJava.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJava.java
index 39adef27..baaa1a1f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJava.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJava.java
@@ -33,10 +33,15 @@
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
 
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+
 /**
  * Test hold cursor after commit
  */
 public class holdCursorJava {
+  private static String[] databaseObjects = {"PROCEDURE MYPROC", "TABLE T1", "TABLE T2",
+                                 "TABLE TESTTABLE1", "TABLE TESTTABLE2",
+                                 "TABLE BUG4385"};
 
   public static void main (String args[])
   {
@@ -57,7 +62,13 @@ public static void main (String args[])
 		testIsolationLevelChange(conn);
 
 		conn.rollback();
+                conn.setAutoCommit(true);
+		
+		Statement stmt = conn.createStatement();
+                TestUtil.cleanUpTest(stmt, databaseObjects);
 		conn.close();
+               
+
     } catch (Exception e) {
 		System.out.println("FAIL -- unexpected exception "+e);
 		JDBCDisplayUtil.ShowException(System.out, e);
@@ -69,6 +80,9 @@ public static void main (String args[])
   private static void createAndPopulateTable(Connection conn) throws SQLException {
     Statement stmt = conn.createStatement();
 
+    // first drop the objects, in case something is left over from past runs or other tests
+    TestUtil.cleanUpTest(stmt, databaseObjects);
+
     System.out.println("Creating table...");
     stmt.executeUpdate( "CREATE TABLE T1 (c11 int, c12 int)" );
     stmt.executeUpdate("INSERT INTO T1 VALUES(1,1)");
@@ -88,6 +102,19 @@ private static void createAndPopulateTable(Connection conn) throws SQLException
     stmt.close();
   }
 
+  //drop tables
+  private static void cleanUpTest(Connection conn) throws SQLException {
+    Statement stmt = conn.createStatement();
+    //System.out.println("dropping test objects...");
+    stmt.executeUpdate( "DROP PROCEDURE MYPROC" );
+    stmt.executeUpdate( "DROP TABLE T1" );
+    stmt.executeUpdate( "DROP TABLE T2" );
+    stmt.executeUpdate( "DROP TABLE testtable1" );
+    stmt.executeUpdate( "DROP TABLE testtable2" );
+    stmt.executeUpdate( "DROP TABLE BUG4385" );
+    stmt.close();
+  }
+
   //test cursor holdability after commit on multi table query
   private static void testHoldCursorOnMultiTableQuery(Connection conn) throws Exception
   {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJavaReflection.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJavaReflection.java
index c1689bd4..81ea8237 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJavaReflection.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/holdCursorJavaReflection.java
@@ -72,6 +72,7 @@ public static void main (String args[])
 		ij.getPropertyArg(args);
 		Connection conn = ij.startJBMS();
 
+        dropTable(conn);
 		createAndPopulateTable(conn);
 
     //set autocommit to off after creating table and inserting data
@@ -80,6 +81,8 @@ public static void main (String args[])
 		testPreparedStatement(conn);
 		testCallableStatement(conn);
 		conn.rollback();
+        conn.setAutoCommit(true);
+        dropTable(conn);
 		conn.close();
     } catch (Exception e) {
 		System.out.println("FAIL -- unexpected exception "+e);
@@ -101,6 +104,17 @@ private static void createAndPopulateTable(Connection conn) throws SQLException
     stmt.close();
   }
 
+  //drop table
+  private static void dropTable(Connection conn)
+// throws SQLException 
+{
+    try {
+        Statement stmt = conn.createStatement();
+        stmt.executeUpdate( "DROP TABLE T1" );
+        stmt.close();
+    } catch (SQLException se) {} // assume any error is because table doesn't exist  
+  }
+
   //test cursor holdability for callable statements
   private static void testCallableStatement(Connection conn) throws Exception
   {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedure.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedure.java
index 1a22b3bf..8c1d4cda 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedure.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedure.java
@@ -48,6 +48,7 @@ public static void main (String[] argv) throws Throwable
 	{
    		ij.getPropertyArg(argv); 
         Connection conn = ij.startJBMS();
+		cleanUp(conn);
 		isDerbyNet = TestUtil.isNetFramework();
 
 		// DB2 !!
@@ -86,6 +87,7 @@ public static void runTests( Connection conn) throws Throwable
 			testLiterals(conn);
             
             multipleRSTests(conn);
+			cleanUp(conn);
 		} catch (SQLException sqle) {
 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, sqle);
 			sqle.printStackTrace(System.out);
@@ -1761,4 +1763,21 @@ public static boolean getMoreResults(CallableStatement cs) throws SQLException {
         } catch (Exception e) {return cs.getMoreResults();}//for jdks prior to jdk14 
     }
 
+    /** 
+     * clean up any objects not cleaned up by previous efforts
+     */
+    private static void cleanUp(Connection conn) throws SQLException {
+        String[] testObjects = {
+            "table t1", "procedure procdup", "schema s1 restrict",
+            "schema s2 restrict", "procedure drs", "procedure drs2",
+            "procedure litt.ty_smallint", "procedure litt.ty_integer", "procedure litt.ty_bigint",
+            "procedure litt.ty_real", "procedure litt.ty_double", "procedure litt.ty_decimal",
+            "procedure litt.ty_char", "procedure litt.ty_varchar",
+            "table SQLC.SQLCONTROL_DDL", "table SQLCONTROL_DDL",
+            "table SQLC.SQLCONTROL_DML",
+             }; 
+        Statement stmt = conn.createStatement();
+        TestUtil.cleanUpTest(stmt, testObjects);
+    } 
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedureJdbc30.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedureJdbc30.java
index 778423a1..8fe85140 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedureJdbc30.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/procedureJdbc30.java
@@ -32,6 +32,7 @@
 { 
 
 	static private boolean isDerbyNet = false;
+	static private String[] testObjects = { "TABLE MRS.FIVERS", "PROCEDURE MRS.FIVEJP"};
 
 	public static void main (String[] argv) throws Throwable
 	{
@@ -56,6 +57,7 @@ public static void runTests( Connection conn) throws Throwable
 	private static void testMoreResults(Connection conn) throws SQLException {
 
 		Statement s = conn.createStatement();
+		TestUtil.cleanUpTest(s, testObjects);
 
 		s.executeUpdate("create table MRS.FIVERS(i integer)");
 		PreparedStatement ps = conn.prepareStatement("insert into MRS.FIVERS values (?)");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java
index a00af71d..3b829913 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java
@@ -64,6 +64,7 @@ public static void main(String[] args) {
 			// make the initial connection.
 			ij.getPropertyArg(args);
 			conn = ij.startJBMS();
+			cleanUp(conn);	
 			conn.setAutoCommit(false);
 
 			/* Create the table and do any other set-up */
@@ -1611,17 +1612,15 @@ private static boolean checkException(SQLException e,
 	static boolean cleanUp(Connection conn, Statement s) {
 		try {
 			/* Drop the table we created */
-			if (s != null)
+			if (s == null)
 			{
-				s.execute("drop table t");
+				// well, then, we'll have to restart
+				s = conn.createStatement();
 			}
-
+			s.execute("drop table t");
 			/* Close the connection */
-			if (conn != null)
-			{
 				conn.commit();
 				conn.close();
-			}
 		} catch (Throwable e) {
 			System.out.println("FAIL -- unexpected exception caught in cleanup()");
 			JDBCDisplayUtil.ShowException(System.out, e);
@@ -1630,4 +1629,17 @@ static boolean cleanUp(Connection conn, Statement s) {
 
 		return true;
 	}
+
+	/* 
+	 * cleanup also before test start, just in case
+	 * @param conn	The Connection
+	 */
+	static void cleanUp(Connection conn) throws SQLException {
+		Statement cleanupStmt = conn.createStatement();
+		String[] testObjects = {"table t"};
+		TestUtil.cleanUpTest(cleanupStmt, testObjects);
+		cleanupStmt.close();
+	}
+
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/unaryArithmeticDynamicParameter.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/unaryArithmeticDynamicParameter.java
index ff16c036..0a10c1a1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/unaryArithmeticDynamicParameter.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/unaryArithmeticDynamicParameter.java
@@ -28,6 +28,7 @@
 import java.sql.Statement;
 
 import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 
 /**
@@ -421,7 +422,22 @@ public static void main (String[] argv) throws Throwable
 			System.out.println("SQL State : " + e.getSQLState());
 			System.out.println("Got expected exception " + e.getMessage());
 		}
+		finally {
+			cleanUp(conn);
+		}
 	};
+
+	private static void cleanUp(Connection conn) throws SQLException
+	{
+		Statement stmt = conn.createStatement();
+		String[] testObjects = { "table t1", "table t2", "view v1", 
+					"procedure abs_funct", "procedure max_cni"};
+		// this will drop all testobjects listed
+		TestUtil.cleanUpTest(stmt, testObjects);
+		stmt.close();
+		conn.close();
+	}
+
 	private static void dumpRS(ResultSet s) throws SQLException
 	{
 		if (s == null)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
index 34795127..9c5259d4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
@@ -2685,18 +2685,16 @@ static void setup(boolean first) throws SQLException {
 
 	static void teardown() throws SQLException {
 		Statement stmt = conn.createStatement();
-		stmt.executeUpdate("drop table t1");
-		stmt.executeUpdate("drop table t2");
-		stmt.executeUpdate("drop table t3");
-		stmt.executeUpdate("drop table tableWithConstraint");
-		stmt.executeUpdate("drop table tableWithPrimaryKey");
-		stmt.executeUpdate("drop table deleteTriggerInsertIntoThisTable");
-		stmt.executeUpdate("drop table updateTriggerInsertIntoThisTable");
-		stmt.executeUpdate("drop table table0WithTriggers");
-		stmt.executeUpdate("drop table table1WithTriggers");
-		stmt.executeUpdate("drop table table2WithTriggers");
-		stmt.executeUpdate("drop table selfReferencingT1");
-		stmt.executeUpdate("drop table selfReferencingT2");
+		String[] testObjects={"table \" t 11 \"", "table \"t1\"",
+			"trigger tr1", "trigger tr2", "trigger tr3", "trigger tr4",
+			"view v1", "table s2.t1", "schema s2 restrict", "table t2", 
+			"table t1", "table t3",	"table tableWithConstraint",
+			"table tableWithPrimaryKey", "table deleteTriggerInsertIntoThisTable",
+			"table updateTriggerInsertIntoThisTable", "table table0WithTriggers",
+			"table table1WithTriggers", "table table2WithTriggers",
+			"table selfReferencingT1", "table selfReferencingT2",
+			"table AllDataTypesForTestingTable", "table AllDataTypesNewValuesData"};
+		TestUtil.cleanUpTest(stmt, testObjects);	
 		conn.commit();
 		stmt.close();
 	}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java
index 36752626..457d9f6a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java
@@ -50,6 +50,9 @@ public static void main(String[] args) {
 			ij.getPropertyArg(args);
 			Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
 			con = DriverManager.getConnection("jdbc:derby:wombat");
+			stmt = con.createStatement();
+			// while we're here, let's cleanup
+			stmt.execute("drop table t1");
 			//infinite loop until it gets killed.
 			for(;;)
 			{
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
index 8d32bf27..a46541f8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
@@ -386,7 +386,8 @@ private void lookThree(String dbName)
 
 		printAsHeader("\nDumping DDL for all objects, " +
 			"using\nNetwork Server:\n");
-		jdbcProtocol = TestUtil.getJdbcUrlPrefix("localhost",SERVER_PORT);
+		String hostName = TestUtil.getHostName();
+		jdbcProtocol = TestUtil.getJdbcUrlPrefix(hostName,SERVER_PORT);
 
 		String sourceDBUrl;
 		if (TestUtil.isJCCFramework())
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
index e347f20d..fc7ace38 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
@@ -181,13 +181,26 @@ else if (frameworkString.toUpperCase(Locale.ENGLISH).indexOf("DB2JNET") != -1)
 	/**
 	    Get URL prefix for current framework.
 		
-		@return url, assume localhost and port 1527 for Network Tests
+		@return url, assume localhost - unless set differently in System property - 
+		             and assume port 1527 for Network Tests
 		@see getJdbcUrlPrefix(String server, int port)
 		
 	*/
 	public static String getJdbcUrlPrefix()
 	{
-		return getJdbcUrlPrefix("localhost", 1527);
+        String hostName=getHostName();
+        return getJdbcUrlPrefix(hostName, 1527);
+    }
+
+    /** Get hostName as passed in - if not, set it to "localhost" 
+        @return hostName, as passed into system properties, or "localhost"
+    */
+    public static String getHostName()
+    {
+        String hostName = (System.getProperty("hostName"));
+        if (hostName == null)
+            hostName="localhost";
+        return hostName;
 	}
 
 	/** 
@@ -660,6 +673,26 @@ public static int getJDBCMajorVersion(Connection conn)
 
 	}
 	
+    /**
+        Drop the test objects passed in as a string identifying the
+        type of object (e.g. TABLE, PROCEDURE) and its name.
+        Thus, for example, a testObject array could be:
+        {"TABLE MYSCHEMA.MYTABLE", "PROCEDURE THISDUMMY"}
+        The statement passed in must be a 'live' statement in the test.
+    */
+    public static void cleanUpTest (Statement s, String[] testObjects)
+                                    throws SQLException {
+        /* drop each object named */
+        for (int i=0; i < testObjects.length; i++) {
+            try {
+                s.execute("drop " + testObjects[i]);
+                //System.out.println("now dropping " + testObjects[i]);
+            } catch (SQLException se) { // ignore...
+            }
+        }	
+    }
+
+	
 	public static Connection getDataSourceConnection (Properties prop) throws SQLException {
 		DataSource ds = TestUtil.getDataSource(prop);
 		try {
@@ -683,5 +716,6 @@ public static void shutdownUsingDataSource (String dbName) throws SQLException {
 			throw e;
 		}
 	}
+
 }
 
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
index 095756a9..47c745da 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
@@ -89,8 +89,17 @@ public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
 			  
 			  if (isJCC || isNetClient)
 			  {
+			  	String hostName = System.getProperty("hostName");
+			  	if ((hostName != null ) && (!hostName.equals("localhost")))
+				{			
+			  		xaHelper.setDataSourceProperty(currentXADataSource,
+											 "ServerName", hostName);
+				}
+			  	else
+				{			
 			  xaHelper.setDataSourceProperty(currentXADataSource,
 											 "ServerName", "localhost");
+				}
 			  xaHelper.setDataSourceProperty(currentXADataSource,
 											 "portNumber", 1527);
 			  
