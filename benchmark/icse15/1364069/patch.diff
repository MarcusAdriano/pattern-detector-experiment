diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
index 89a805a7..7e68f045 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
@@ -1680,8 +1680,10 @@ public int advance(int target) {
     private int skipPositions;
     private int startOffset;
     private int endOffset;
+    private int lastPayloadOffset;
     private int payloadOffset;
     private int payloadLength;
+    private byte[] payloadBytes;
 
     public LowFreqDocsAndPositionsEnum(Bits liveDocs, boolean hasOffsets, boolean hasPayloads) {
       this.liveDocs = liveDocs;
@@ -1708,7 +1710,7 @@ public DocsAndPositionsEnum reset(int[] postings, byte[] payloadBytes) {
       endOffset = -1;
       docID = -1;
       payloadLength = 0;
-      payload.bytes = payloadBytes;
+      this.payloadBytes = payloadBytes;
       return this;
     }
 
@@ -1741,9 +1743,19 @@ public int nextDoc() {
             skipPositions = freq;
             return docID;
           }
+          if (hasPayloads) {
+            for(int i=0;i<freq;i++) {
+              upto++;
+              if (hasOffsets) {
+                upto += 2;
+              }
+              payloadOffset += postings[upto++];
+            }
+          } else {
           upto += posMult * freq;
         }
       }
+      }
 
       return docID = NO_MORE_DOCS;
     }
@@ -1769,7 +1781,7 @@ public int nextPosition() {
       }
       if (hasPayloads) {
         payloadLength = postings[upto++];
-        payload.offset = payloadOffset;
+        lastPayloadOffset = payloadOffset;
         payloadOffset += payloadLength;
       }
       return pos;
@@ -1802,6 +1814,8 @@ public boolean hasPayload() {
     @Override
     public BytesRef getPayload() {
       if (payloadLength > 0) {
+        payload.bytes = payloadBytes;
+        payload.offset = lastPayloadOffset;
         payload.length = payloadLength;
         payloadLength = 0;
         return payload;
