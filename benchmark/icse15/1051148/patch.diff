diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
index e1e05b7c..98181e89 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
@@ -2693,7 +2693,7 @@ public ResultSet getCrossReferenceForODBC(
 	 * @exception SQLException thrown on failure.
      */
 	public ResultSet getTypeInfo() throws SQLException {
-		return getSimpleQuery("getTypeInfo");
+		return getTypeInfoMinion("getTypeInfo");
 	}
 
 	/**
@@ -2704,7 +2704,29 @@ public ResultSet getTypeInfo() throws SQLException {
 	 * conform to ODBC specifications.
 	 */
 	public ResultSet getTypeInfoForODBC() throws SQLException {
-		return getSimpleQuery("odbc_getTypeInfo");
+		return getTypeInfoMinion("odbc_getTypeInfo");
+	}
+
+    /**
+     * Get a description of the standard SQL types supported by this database.
+     *
+     * @param queryName the name of the query that fetches the information
+     * @return a result set with SQL type description
+     */
+    private ResultSet getTypeInfoMinion(String queryName) throws SQLException {
+        try {
+            // DERBY-4946: BOOLEAN data type was introduced in 10.7
+            boolean booleanSupported =
+                    getLanguageConnectionContext().getDataDictionary().
+                    checkVersion(DataDictionary.DD_VERSION_DERBY_10_7, null);
+
+            PreparedStatement ps = getPreparedQuery(queryName);
+            ps.setBoolean(1, booleanSupported);
+            return ps.executeQuery();
+
+        } catch (StandardException se) {
+            throw handleException(se);
+        }
 	}
 
     /**
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index 349b20a0..90cdb08f 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -43,6 +43,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Arrays;
 //import java.util.HashMap;
 //import java.util.Iterator;
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.List;
@@ -2075,9 +2076,8 @@ public void testTableTypes() throws SQLException
     
     /**
      * Test getTypeInfo
-     * @throws SQLException 
      */
-    public void testGetTypeInfo() throws SQLException
+    public void testGetTypeInfo() throws Exception
     {
         // Client returns BOOLEAN type from the engine as SMALLINT
         int BOOLEAN = Types.BOOLEAN;      
@@ -2131,7 +2131,7 @@ public void testGetTypeInfo() throws SQLException
 	 Derby-2258 Removed 3 data types which are not supported by Derby
 	 and added XML data type which is supported by Derby
 	*/
-        int[] supportedTypes = new int[] {
+        int[] allTypes = new int[] {
           Types.BIGINT, Types.BINARY, Types.BLOB, Types.BOOLEAN,
           Types.CHAR, Types.CLOB, Types.DATE,
           Types.DECIMAL, Types.DOUBLE, Types.FLOAT,
@@ -2141,9 +2141,24 @@ public void testGetTypeInfo() throws SQLException
           Types.VARCHAR, JDBC.SQLXML, Types.JAVA_OBJECT
         };
         
+        ArrayList supportedTypes = new ArrayList();
+        for (int i = 0; i < allTypes.length; i++) {
+            supportedTypes.add(new Integer(allTypes[i]));
+        }
+
+        Version dataVersion = getDataVersion(getConnection());
+        boolean booleanSupported =
+                dataVersion.compareTo(new Version(10, 7, 0, 0)) >= 0;
+        
+        // DERBY-4946: Boolean isn't supported if DB is soft-upgraded from
+        // pre-10.7 version
+        if (!booleanSupported) {
+            supportedTypes.remove(new Integer(Types.BOOLEAN));
+        }
+
         // Rows are returned from getTypeInfo in order of
         // "DATA_TYPE" (which is a constant from java.sql.Types)
-        Arrays.sort(supportedTypes);
+        Collections.sort(supportedTypes);
         
         int offset = 0;
         while (rs.next()) {
@@ -2154,7 +2169,7 @@ public void testGetTypeInfo() throws SQLException
             // DATA_TYPE (column 2)
             int type = rs.getInt("DATA_TYPE");
             assertFalse(rs.wasNull());
-            if (supportedTypes[offset] != type)
+            if (!supportedTypes.get(offset).equals(new Integer(type)))
             {
                 fail("Unexpected type " + typeName);
             }
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java
index f80d2589..9fba5429 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java
@@ -22,22 +22,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derbyTesting.junit.SupportFilesSetup;
 
-import org.apache.derbyTesting.junit.JDBCDataSource;
-import java.lang.reflect.Method;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.sql.Connection;
-import java.sql.CallableStatement;
-import java.sql.PreparedStatement;
 import java.sql.ResultSet;
-
-import javax.sql.DataSource;
+import java.util.HashSet;
+import java.util.Set;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.apache.derby.catalog.types.RoutineAliasInfo;
-import org.apache.derby.catalog.TypeDescriptor;
 import org.apache.derbyTesting.junit.JDBC;
 
 
@@ -124,14 +117,17 @@ public void testBoolean() throws SQLException
         {
         case PH_CREATE: // create with old version
         case PH_POST_SOFT_UPGRADE: // soft-downgrade: boot with old version after soft-upgrade
+            assertFalse(getSupportedTypes().contains("BOOLEAN"));
             assertStatementError(  SYNTAX_ERROR, s, booleanValuedFunction );
             break;
 
         case PH_SOFT_UPGRADE: // boot with new version and soft-upgrade
+            assertFalse(getSupportedTypes().contains("BOOLEAN"));
             assertStatementError( UPGRADE_REQUIRED, s, booleanValuedFunction );
             break;
             
         case PH_HARD_UPGRADE: // boot with new version and hard-upgrade
+            assertTrue(getSupportedTypes().contains("BOOLEAN"));
             s.execute( booleanValuedFunction );
             break;
         }
@@ -139,6 +135,23 @@ public void testBoolean() throws SQLException
         s.close();
     }
 
+    /**
+     * Get the names of all supported types, as reported by
+     * {@code DatabaseMetaData.getTypeInfo()}.
+     *
+     * @return a set with the names of all supported types in the loaded
+     * version of Derby
+     */
+    private Set getSupportedTypes() throws SQLException {
+        HashSet types = new HashSet();
+        ResultSet rs = getConnection().getMetaData().getTypeInfo();
+        while (rs.next()) {
+            types.add(rs.getString("TYPE_NAME"));
+        }
+        rs.close();
+        return types;
+    }
+
     /**
      * Make sure that DERBY-1482 changes do not break backward compatibility
      */
