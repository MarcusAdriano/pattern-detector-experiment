diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 8baf41ff..f5da7221 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -57,7 +57,6 @@
     private static Logger logger_ = Logger.getLogger(ColumnFamilyStore.class);
 
     private static final int BUFSIZE = 128 * 1024 * 1024;
-    private static final int COMPACTION_MEMORY_THRESHOLD = 1 << 30;
 
     private static NonBlockingHashMap<String, Set<Memtable>> memtablesPendingFlush = new NonBlockingHashMap<String, Set<Memtable>>();
     private static ExecutorService flusher_ = new DebuggableThreadPoolExecutor("MEMTABLE-FLUSHER-POOL");
@@ -902,7 +901,6 @@ boolean doFileAntiCompaction(List<String> files, List<Range> ranges, EndPoint ta
         long totalkeysWritten = 0;
         String rangeFileLocation;
         String mergedFileName;
-        IPartitioner p = StorageService.getPartitioner();
         // Calculate the expected compacted filesize
         long expectedRangeFileSize = getExpectedCompactedFileSize(files);
         /* in the worst case a node will be giving out half of its data so we take a chance */
@@ -1378,7 +1376,6 @@ public ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore) throws IOE
         // if we are querying subcolumns of a supercolumn, fetch the supercolumn with NQF, then filter in-memory.
         if (filter.path.superColumnName != null)
         {
-            AbstractType comparator = DatabaseDescriptor.getComparator(table_, columnFamily_);
             QueryFilter nameFilter = new NamesQueryFilter(filter.key, new QueryPath(columnFamily_), filter.path.superColumnName);
             ColumnFamily cf = getColumnFamily(nameFilter);
             if (cf != null)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
index 92d777eb..a82f7627 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
@@ -101,13 +101,6 @@ public int compare(String f, String f2)
         {
             return (int)(getCreationTime(f) - getCreationTime(f2));
         }
-
-        public boolean equals(Object o)
-        {
-            if ( !(o instanceof CommitLogFileComparator) )
-                return false;
-            return true;
-        }
     }
 
     public static void setSegmentSize(int size)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
index da5c0705..36338497 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
@@ -1,5 +1,7 @@
 package org.apache.cassandra.db.marshal;
 
+import java.util.Arrays;
+
 public class BytesType extends AbstractType
 {
     public int compare(byte[] o1, byte[] o2)
@@ -28,6 +30,6 @@ public int compare(byte[] o1, byte[] o2)
 
     public String getString(byte[] bytes)
     {
-        return bytes.toString();
+        return Arrays.toString(bytes);
     }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
index a4582749..efa3718b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
@@ -18,7 +18,7 @@ public int compare(byte[] o1, byte[] o2)
 
         long L1 = ByteBuffer.wrap(o1).order(ByteOrder.LITTLE_ENDIAN).getLong();
         long L2 = ByteBuffer.wrap(o2).order(ByteOrder.LITTLE_ENDIAN).getLong();
-        return new Long(L1).compareTo(L2);
+        return Long.valueOf(L1).compareTo(Long.valueOf(L2));
     }
 
     public String getString(byte[] bytes)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index f7c57f62..6b3d16f5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -1,7 +1,6 @@
 package org.apache.cassandra.db.marshal;
 
 import java.util.UUID;
-import java.nio.ByteBuffer;
 
 public class TimeUUIDType extends AbstractType
 {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index 7059cd9d..01e1766f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -19,6 +19,7 @@
 package org.apache.cassandra.dht;
 
  import java.util.ArrayList;
+ import java.util.Arrays;
  import java.util.Collections;
  import java.util.HashMap;
  import java.util.HashSet;
@@ -31,7 +32,7 @@
  import org.apache.cassandra.locator.TokenMetadata;
  import org.apache.cassandra.net.EndPoint;
  import org.apache.cassandra.service.StorageService;
- import org.apache.cassandra.utils.LogUtil;
+import org.apache.cassandra.utils.LogUtil;
 
 
 /**
@@ -59,7 +60,7 @@ public void run()
         try
         {
             if (logger_.isDebugEnabled())
-              logger_.debug("Beginning bootstrap process for " + targets_ + " ...");                                                               
+              logger_.debug("Beginning bootstrap process for " + Arrays.toString(targets_) + " ...");                                                               
             /* copy the token to endpoint map */
             Map<Token, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
             /* remove the tokens associated with the endpoints being bootstrapped */                
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java
index 34126b24..fc9631c1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadata.java
@@ -55,6 +55,8 @@
     
     BootstrapMetadata(EndPoint target, List<Range> ranges)
     {
+        assert target_ != null;
+        assert ranges_ != null;
         target_ = target;
         ranges_ = ranges;
     }
@@ -78,10 +80,8 @@ public String toString()
     public void serialize(BootstrapMetadata bsMetadata, DataOutputStream dos) throws IOException
     {
         CompactEndPointSerializationHelper.serialize(bsMetadata.target_, dos);
-        int size = (bsMetadata.ranges_ == null) ? 0 : bsMetadata.ranges_.size();            
-        dos.writeInt(size);
-        
-        for ( Range range : bsMetadata.ranges_ )
+        dos.writeInt(bsMetadata.ranges_.size());
+        for (Range range : bsMetadata.ranges_)
         {
             Range.serializer().serialize(range, dos);
         }            
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
index 341d72e1..a786cab6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootstrapMetadataMessage.java
@@ -60,6 +60,7 @@ protected static Message makeBootstrapMetadataMessage(BootstrapMetadataMessage b
     
     BootstrapMetadataMessage(BootstrapMetadata[] bsMetadata)
     {
+        assert bsMetadata != null;
         bsMetadata_ = bsMetadata;
     }
 }
@@ -69,9 +70,8 @@ protected static Message makeBootstrapMetadataMessage(BootstrapMetadataMessage b
     public void serialize(BootstrapMetadataMessage bsMetadataMessage, DataOutputStream dos) throws IOException
     {
         BootstrapMetadata[] bsMetadata = bsMetadataMessage.bsMetadata_;
-        int size = (bsMetadata == null) ? 0 : bsMetadata.length;
-        dos.writeInt(size);
-        for ( BootstrapMetadata bsmd : bsMetadata )
+        dos.writeInt(bsMetadata.length);
+        for (BootstrapMetadata bsmd : bsMetadata)
         {
             BootstrapMetadata.serializer().serialize(bsmd, dos);
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
index 94f9d3d0..69c3296b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
@@ -98,7 +98,7 @@ private void doReadRepair() throws IOException
 		}
 	}
 	
-	class DataRepairHandler implements IAsyncCallback, ICacheExpungeHook<String, String>
+	static class DataRepairHandler implements IAsyncCallback, ICacheExpungeHook<String, String>
 	{
 		private List<Message> responses_ = new ArrayList<Message>();
 		private IResponseResolver<Row> readResponseResolver_;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java
index 28775f85..71db3ee3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleaner.java
@@ -44,7 +44,7 @@ public static void main(String[] args) throws Throwable
     {
         if ( args.length != 3 )
         {
-            System.out.println("Usage : java com.facebook.infrastructure.tools.MembershipCleaner " +
+            System.out.println("Usage : java org.apache.cassandra.tools.MembershipCleaner " +
                     "<ip:port to send the message> " +
                     "<node which needs to be removed> " +
                     "<file containing all nodes in the cluster>");
@@ -82,7 +82,6 @@ public static void main(String[] args) throws Throwable
     public static class MembershipCleanerMessage implements Serializable
     {
         private static ICompactSerializer<MembershipCleanerMessage> serializer_;
-        private static AtomicInteger idGen_ = new AtomicInteger(0);
         
         static
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
index b34db74d..610b5e82 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/MembershipCleanerVerbHandler.java
@@ -69,7 +69,7 @@ public void doVerb(Message message)
             {            
                 if (logger_.isDebugEnabled())
                   logger_.debug("Processing node " + node);
-                byte[] bytes = headers.remove(node);
+                headers.remove(node);
                 /* Send a message to this node to alter its membership state. */
                 EndPoint targetNode = new EndPoint(node, DatabaseDescriptor.getStoragePort());                
                 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java
index a29f2a85..3110d046 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FileUtils.java
@@ -88,13 +88,6 @@ public int compare(File f, File f2)
         {
             return (int)(f.lastModified() - f2.lastModified());
         }
-
-        public boolean equals(Object o)
-        {
-            if ( !(o instanceof FileComparator) )
-                return false;
-            return true;
-        }
     }
 
     public static void createDirectory(String directory) throws IOException
