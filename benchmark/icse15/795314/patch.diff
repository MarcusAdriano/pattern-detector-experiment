diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index ab9215bb..efac73c5 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -112,6 +112,8 @@ public void testUnconsumedParameter() throws SQLException
         
         PreparedStatement ps = prepareStatement( sql);
         ps.setBinaryStream( 1, is,data.length);
+        //DERBY-4312 Make sure commit() doesn't interfere here
+        commit();
         ps.executeUpdate();          
         // Make sure things still work ok when we have a parameter that does get consumed.
         // insert a matching row.
@@ -209,6 +211,8 @@ public void testSetCharacterStream() throws Exception {
         Reader streamReader = new LoopingAlphabetReader(
                 clobLength, CharAlphabet.tamil());
         ps.setCharacterStream(1, streamReader, clobLength);
+        //DERBY-4312 make sure commit() doesn't interfere
+        commit();
         ps.executeUpdate();
         streamReader.close();
         ps.close();
@@ -1302,6 +1306,8 @@ public void testLockingWithLongRowClob() throws Exception
         InputStream streamIn = new LoopingAlphabetStream(10000);
         ps.setAsciiStream(5, streamIn, 10000);
         ps.setInt(6, 1);
+        // DERBY-4312 make sure commit() doesn't interfere here.
+        commit();
         ps.executeUpdate();
         streamIn.close();
         ps.close();
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IjSecurityManagerTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IjSecurityManagerTest.java
index e69de29b..e65af74b 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IjSecurityManagerTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/IjSecurityManagerTest.java
@@ -0,0 +1,89 @@
+/*
+
+   Derby - Class 
+   org.apache.derbyTesting.functionTests.tests.tools.IjSecurityManager
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.tools;
+
+import java.io.PrintStream;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.TestNullOutputStream;
+import org.apache.derbyTesting.junit.BaseTestCase;
+import org.apache.derbyTesting.junit.SupportFilesSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+public class IjSecurityManagerTest extends BaseTestCase {
+
+	public IjSecurityManagerTest(String name) {
+		super(name);
+	}
+
+	public void testRunIJ() throws Exception {
+	    /* Save the original out stream */
+	    final PrintStream out = System.out;
+	    
+	    /* Mute the test */
+	    AccessController.doPrivileged(new PrivilegedAction() {
+            public Object run() {
+                System.setOut(new PrintStream(new TestNullOutputStream()));
+                return null;
+            }
+        });
+	    
+	    try {
+	        /* Run ij */
+	        ij.main(new String[]{"extinout/IjSecurityManagerTest.sql"});
+	    } catch (Exception e) { /* Should NEVER happen */
+	        fail("Failed to run ij under security manager.",e);
+	    } finally {
+	        /* Restore the original out stream */
+	        AccessController.doPrivileged(new PrivilegedAction() {
+	            public Object run() {
+	                System.setOut(out);
+	                return null;
+	            }
+	        });
+	    }
+	}
+	
+	private static Test decorateTest() {	    
+	    Test test = TestConfiguration.embeddedSuite(IjSecurityManagerTest.class);
+        test = new SupportFilesSetup
+         (
+          test,
+          null,
+          new String[] { "functionTests/tests/tools/IjSecurityManagerTest.sql"  },
+          null,
+          new String[] { "IjSecurityManagerTest.sql"}
+          );
+        return test;
+	}
+	public static Test suite() {		
+		TestSuite suite = new TestSuite("IjSecurityManagerTest");
+		suite.addTest(decorateTest());
+		return suite;
+	}
+}
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
index 19f6625e..778133be 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
@@ -55,6 +55,7 @@ public static Test suite() {
         suite.addTest(ToolScripts.suite());
         suite.addTest(SysinfoCPCheckTest.suite());
         suite.addTest(SysinfoLocaleTest.suite());
+        suite.addTest(IjSecurityManagerTest.suite());
 
         // SysinfoAPITest currently fails when run against jars, so is
         // disabled. Only the first jar file on the classpath properly
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/util/TestNullOutputStream.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/util/TestNullOutputStream.java
index e69de29b..f1d181c4 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/util/TestNullOutputStream.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/util/TestNullOutputStream.java
@@ -0,0 +1,60 @@
+/*
+
+   Derby - Class 
+   org.apache.derbyTesting.functionTests.util.TestNullOutputStream
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.util;
+
+import java.io.OutputStream;
+
+/**
+An OutputStream that simply discards all data written to it.
+*/
+
+public class TestNullOutputStream extends OutputStream {
+
+    /*
+    ** Methods of OutputStream
+    */
+
+    /**
+        Discard the data.
+
+        @see OutputStream#write
+    */
+    public  void write(int b)  {
+    }
+
+    /**
+        Discard the data.
+
+        @see OutputStream#write
+    */
+    public void write(byte b[]) {
+    }
+
+    /**
+        Discard the data.
+
+        @see OutputStream#write
+    */
+    public void write(byte b[], int off, int len)  {
+    }
+}
diff --git a/db/derby/code/branches/10.5/java/tools/org/apache/derby/impl/tools/ij/Main.java b/db/derby/code/branches/10.5/java/tools/org/apache/derby/impl/tools/ij/Main.java
index c822778b..431a26bd 100644
--- a/db/derby/code/branches/10.5/java/tools/org/apache/derby/impl/tools/ij/Main.java
+++ b/db/derby/code/branches/10.5/java/tools/org/apache/derby/impl/tools/ij/Main.java
@@ -40,6 +40,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.sql.Connection;
 import java.sql.SQLException;
 
@@ -115,12 +117,17 @@ public static void mainCore(String[] args, Main main)
                         out.flush();
     	        } else {
                     try {
-                        in1 = new FileInputStream(file);
+                    	final String inFile1 = file;
+                    	in1 = (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
+            				public Object run() throws FileNotFoundException {
+        						return new FileInputStream(inFile1);
+            				}
+            			});
                         if (in1 != null) {
                             in1 = new BufferedInputStream(in1, utilMain.BUFFEREDFILESIZE);
                             in = langUtil.getNewInput(in1);
                         }
-                    } catch (FileNotFoundException e) {
+                    } catch (PrivilegedActionException e) {
                         if (Boolean.getBoolean("ij.searchClassPath")) {
                             in = langUtil.getNewInput(util.getResourceAsStream(file));
                         }
