diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/streaming/tools/ClusterQualitySummarizer.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/streaming/tools/ClusterQualitySummarizer.java
index 74c6dec0..95a97ef3 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/streaming/tools/ClusterQualitySummarizer.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/streaming/tools/ClusterQualitySummarizer.java
@@ -70,10 +70,7 @@ public static void printSummaries(List<OnlineSummarizer> summarizers, String typ
     double maxDistance = 0;
     for (int i = 0; i < summarizers.size(); ++i) {
       OnlineSummarizer summarizer = summarizers.get(i);
-      if (summarizer.getCount() == 0) {
-        System.out.printf("Cluster %d is empty\n", i);
-        continue;
-      }
+      if (summarizer.getCount() != 0) {
       maxDistance = Math.max(maxDistance, summarizer.getMax());
       System.out.printf("Average distance in cluster %d [%d]: %f\n", i, summarizer.getCount(), summarizer.getMean());
       // If there is just one point in the cluster, quartiles cannot be estimated. We'll just assume all the quartiles
@@ -88,6 +85,9 @@ public static void printSummaries(List<OnlineSummarizer> summarizers, String typ
             moreThanOne ? summarizer.getQuartile(3) : summarizer.getQuartile(0),
             summarizer.getQuartile(4), summarizer.getCount(), type);
       }
+      } else {
+        System.out.printf("Cluster %d is empty\n", i);
+      }
     }
     System.out.printf("Num clusters: %d; maxDistance: %f\n", summarizers.size(), maxDistance);
   }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java
index 16ff7798..2d989419 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java
@@ -17,8 +17,6 @@
 
 package org.apache.mahout.math.stats;
 
-import org.apache.mahout.math.list.DoubleArrayList;
-
 /**
  * Computes on-line estimates of mean, variance and all five quartiles (notably including the
  * median).  Since this is done in a completely incremental fashion (that is what is meant by
@@ -40,13 +38,7 @@
  */
 public class OnlineSummarizer {
 
-  private boolean sorted = true;
-
-  // the first several samples are kept so we can boot-strap our estimates cleanly
-  private DoubleArrayList starter = new DoubleArrayList(100);
-
-  // quartile estimates
-  private final double[] q = new double[5];
+  private TDigest quantiles = new TDigest(100);
 
   // mean and variance estimates
   private double mean;
@@ -56,43 +48,13 @@
   private int n;
 
   public void add(double sample) {
-    sorted = false;
-
     n++;
     double oldMean = mean;
     mean += (sample - mean) / n;
     double diff = (sample - mean) * (sample - oldMean);
     variance += (diff - variance) / n;
 
-    if (n < 100) {
-      starter.add(sample);
-    } else if (n == 100 && starter != null) {
-      // when we first reach 100 elements, we switch to incremental operation
-      starter.add(sample);
-      for (int i = 0; i <= 4; i++) {
-        q[i] = getQuartile(i);
-      }
-      // this signals any invocations of getQuartile at exactly 100 elements that we have
-      // already switched to incremental operation
-      starter = null;
-    } else {
-      // n >= 100 && starter == null
-      q[0] = Math.min(sample, q[0]);
-      q[4] = Math.max(sample, q[4]);
-
-      double rate = 2 * (q[3] - q[1]) / n;
-      q[1] += (Math.signum(sample - q[1]) - 0.5) * rate;
-      q[2] += Math.signum(sample - q[2]) * rate;
-      q[3] += (Math.signum(sample - q[3]) + 0.5) * rate;
-
-      if (q[1] < q[0]) {
-        q[1] = q[0];
-      }
-
-      if (q[3] > q[4]) {
-        q[3] = q[4];
-      }
-    }
+    quantiles.add(sample);
   }
 
   public int getCount() {
@@ -111,48 +73,16 @@ public double getMin() {
     return getQuartile(0);
   }
 
-  private void sort() {
-    if (!sorted && starter != null) {
-      starter.sort();
-      sorted = true;
-    }
-  }
-
   public double getMax() {
     return getQuartile(4);
   }
 
   public double getQuartile(int i) {
-    if (n > 100 || starter == null) {
-      return q[i];
-    } else {
-      sort();
-      switch (i) {
-        case 0:
-          if (n == 0) {
-            throw new IllegalArgumentException("Must have at least one sample to estimate minimum value");
-          }
-          return starter.get(0);
-        case 1:
-        case 2:
-        case 3:
-          if (n >= 2) {
-            double x = i * (n - 1) / 4.0;
-            int k = (int) Math.floor(x);
-            double u = x - k;
-            return starter.get(k) * (1 - u) + starter.get(k + 1) * u;
-          } else {
-            throw new IllegalArgumentException("Must have at least two samples to estimate quartiles");
-          }
-        case 4:
-          if (n == 0) {
-            throw new IllegalArgumentException("Must have at least one sample to estimate maximum value");
-          }
-          return starter.get(starter.size() - 1);
-        default:
-          throw new IllegalArgumentException("Quartile number must be in the range [0..4] not " + i);
-      }
+    return quantiles.quantile(0.25 * i);
     }
+
+  public double quantile(double q) {
+    return quantiles.quantile(q);
   }
 
   public double getMedian() {
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineSummarizerTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineSummarizerTest.java
index 452e1fda..f74992a6 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineSummarizerTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineSummarizerTest.java
@@ -17,7 +17,10 @@
 
 package org.apache.mahout.math.stats;
 
+import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.MahoutTestCase;
+import org.apache.mahout.math.jet.random.AbstractContinousDistribution;
+import org.apache.mahout.math.jet.random.Gamma;
 import org.junit.Test;
 
 import java.util.Random;
@@ -45,36 +48,39 @@ public void testStats() {
     // 95% confidence limits for those values.
 
     // symmetrical, well behaved
+    System.out.printf("normal\n");
     check(normal(10000),
             -4.417246, -3.419809,
             -0.6972919, -0.6519899,
             -0.02056658, 0.02176474,
             0.6503866, 0.6983311,
-            3.419809, 4.417246,
+      4.419809, 5.417246,
             -0.01515753, 0.01592942,
             0.988395, 1.011883);
 
     // asymmetrical, well behaved.  The range for the maximum was fudged slightly to all this to pass.
+    System.out.printf("exp\n");
     check(exp(10000),
-            4.317969e-06, 3.278763e-04,
+            -3e-4, 3.278763e-04,
             0.2783866, 0.298,
             0.6765024, 0.7109463,
             1.356929, 1.414761,
-            8, 13,
+            8, 20,
             0.983805, 1.015920,
             0.977162, 1.022093
     );
 
-    // asymmetrical, wacko distribution where mean/median > 10^28
-    // TODO need more work here
-//    check(gamma(10000, 3),
-//            0, 0,                                             // minimum
-//            0, 6.26363334269806e-58,                          // 25th %-ile
-//            8.62261497075834e-30, 2.01422505081014e-28,       // median
-//            6.70225617733614e-12, 4.44299757853286e-11,       // 75th %-ile
-//            238.451174077827, 579.143886928158,               // maximum
-//            0.837031762527458, 1.17244066539313,              // mean
-//            8.10277696526878, 12.1426255901507);              // standard dev
+    // asymmetrical, wacko distribution where mean/median is about 200
+    System.out.printf("gamma\n");
+    check(gamma(10000, 0.1),
+      -5e-30, 5e-30,                                    // minimum
+      3.8e-6, 8.6e-6,                                   // 25th %-ile
+      0.004847959, 0.007234259,                         // median
+      0.3074556, 0.4049404,                             // 75th %-ile
+      45, 100,                                          // maximum
+      0.9, 1.1,                                         // mean
+      2.8, 3.5);                                        // standard dev
+
   }
 
   private static void check(OnlineSummarizer x, double... values) {
@@ -95,8 +101,7 @@ private static void checkRange(String msg, double v, double low, double high) {
 
   private static OnlineSummarizer normal(int n) {
     OnlineSummarizer x = new OnlineSummarizer();
-    // TODO use RandomUtils.getRandom() and rejigger constants to make test pass
-    Random gen = new Random(1L);
+    Random gen = RandomUtils.getRandom(1L);
     for (int i = 0; i < n; i++) {
       x.add(gen.nextGaussian());
     }
@@ -105,14 +110,23 @@ private static OnlineSummarizer normal(int n) {
 
   private static OnlineSummarizer exp(int n) {
     OnlineSummarizer x = new OnlineSummarizer();
-    // TODO use RandomUtils.getRandom() and rejigger constants to make test pass
-    Random gen = new Random(1L);
+    Random gen = RandomUtils.getRandom(1L);
     for (int i = 0; i < n; i++) {
       x.add(-Math.log1p(-gen.nextDouble()));
     }
     return x;
   }
 
+  private static OnlineSummarizer gamma(int n, double shape) {
+    OnlineSummarizer x = new OnlineSummarizer();
+    Random gen = RandomUtils.getRandom();
+    AbstractContinousDistribution gamma = new Gamma(shape, shape, gen);
+    for (int i = 0; i < n; i++) {
+      x.add(gamma.nextDouble());
+    }
+    return x;
+  }
+
 }
 
 
