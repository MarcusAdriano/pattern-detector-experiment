diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
index 3a3d26ab..fc005c2b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
@@ -133,7 +133,7 @@ protected void init(IndexSchema schema, Map<String, String> args) {
       provider = c.newInstance();
       provider.init(args);
     } catch (Exception e) {
-      throw new SolrException(ErrorCode.BAD_REQUEST, "Error instansiating exhange rate provider "+exchangeRateProviderClass+". Please check your FieldType configuration", e);
+      throw new SolrException(ErrorCode.BAD_REQUEST, "Error instantiating exhange rate provider "+exchangeRateProviderClass+": " + e.getMessage(), e);
     }
   }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
index d108b15b..bccc4934 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
@@ -33,19 +33,29 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * Exchange Rates Provider for {@link CurrencyField} implementing the freely available
- * exchange rates from openexchangerates.org
+ * <p>
+ * Exchange Rates Provider for {@link CurrencyField} capable of fetching &amp 
+ * parsing the freely available exchange rates from openexchangerates.org
+ * </p>
+ * <p>
+ * Configuration Options:
+ * </p>
+ * <ul>
+ *  <li><code>ratesFileLocation</code> - A file path or absolute URL specifying the JSON data to load (mandatory)</li>
+ *  <li><coderefreshInterval></code> - How frequently (in minutes) to reload the exchange rate data (default: 1440)</li>
+ * </ul>
  * <p>
  * <b>Disclaimer:</b> This data is collected from various providers and provided free of charge
  * for informational purposes only, with no guarantee whatsoever of accuracy, validity,
  * availability or fitness for any purpose; use at your own risk. Other than that - have
  * fun, and please share/watch/fork if you think data like this should be free!
+ * </p>
+ * @see <a href="https://openexchangerates.org/documentation">openexchangerates.org JSON Data Format</a>
  */
 public class OpenExchangeRatesOrgProvider implements ExchangeRateProvider {
   public static Logger log = LoggerFactory.getLogger(OpenExchangeRatesOrgProvider.class);
   protected static final String PARAM_RATES_FILE_LOCATION   = "ratesFileLocation";
   protected static final String PARAM_REFRESH_INTERVAL      = "refreshInterval";
-  protected static final String DEFAULT_RATES_FILE_LOCATION = "http://openexchangerates.org/latest.json";
   protected static final String DEFAULT_REFRESH_INTERVAL    = "1440";
   
   protected String ratesFileLocation;
@@ -145,7 +155,10 @@ public boolean reload() throws SolrException {
   @Override
   public void init(Map<String,String> params) throws SolrException {
     try {
-      ratesFileLocation = getParam(params.get(PARAM_RATES_FILE_LOCATION), DEFAULT_RATES_FILE_LOCATION);
+      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);
+      if (null == ratesFileLocation) {
+        throw new SolrException(ErrorCode.SERVER_ERROR, "Init param must be specified: " + PARAM_RATES_FILE_LOCATION);
+      }
       refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));
       // Force a refresh interval of minimum one hour, since the API does not offer better resolution
       if (refreshInterval < 60) {
@@ -153,8 +166,11 @@ public void init(Map<String,String> params) throws SolrException {
         log.warn("Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org");
       }
       log.info("Initialized with rates="+ratesFileLocation+", refreshInterval="+refreshInterval+".");
-    } catch (Exception e) {
-      throw new SolrException(ErrorCode.BAD_REQUEST, "Error initializing", e);
+    } catch (SolrException e1) {
+      throw e1;
+    } catch (Exception e2) {
+      throw new SolrException(ErrorCode.SERVER_ERROR, "Error initializing: " + 
+                              e2.getMessage(), e2);
     } finally {
       // Removing config params custom to us
       params.remove(PARAM_RATES_FILE_LOCATION);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
index 63f43651..f8ef4ca1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
@@ -73,6 +73,11 @@ public void testMultivaluedCurrency() throws Exception {
            "Fields can not be multiValued: *_c");
   }
 
+  public void testCurrencyOERNoRates() throws Exception {
+    doTest("bad-schema-currency-ft-oer-norates.xml", 
+           "ratesFileLocation");
+  }
+
   public void testPerFieldtypeSimButNoSchemaSimFactory() throws Exception {
     doTest("bad-schema-sim-global-vs-ft-mismatch.xml", "global similarity does not support it");
   }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java
index bb184725..eb51ab04 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java
@@ -35,8 +35,7 @@
 public class OpenExchangeRatesOrgProviderTest extends SolrTestCaseJ4 {
   OpenExchangeRatesOrgProvider oerp;
   ResourceLoader loader;
-  private final Map<String,String> emptyParams = new HashMap<String,String>();
-  private Map<String,String> mockParams;
+  private final Map<String,String> mockParams = new HashMap<String,String>();
 
   @Override
   @Before
@@ -45,24 +44,27 @@ public void setUp() throws Exception {
       ("USD", "EUR", "MXN", "GBP", "JPY");
 
     super.setUp();
-    mockParams = new HashMap<String,String>();;
-    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_RATES_FILE_LOCATION, "open-exchange-rates.json");  
+    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_RATES_FILE_LOCATION, 
+                   "open-exchange-rates.json");  
     oerp = new OpenExchangeRatesOrgProvider();
     loader = new SolrResourceLoader("solr/collection1");
   }
   
   @Test
   public void testInit() throws Exception {
-    oerp.init(emptyParams);
-    assertTrue("Wrong default url", oerp.ratesFileLocation.toString().equals("http://openexchangerates.org/latest.json"));
-    assertTrue("Wrong default interval", oerp.refreshInterval == 1440);
+    oerp.init(mockParams);
+    assertEquals("Wrong url", 
+                 "open-exchange-rates.json", oerp.ratesFileLocation);
+    assertEquals("Wrong default interval", 1440, oerp.refreshInterval);
 
     Map<String,String> params = new HashMap<String,String>();
-    params.put(OpenExchangeRatesOrgProvider.PARAM_RATES_FILE_LOCATION, "http://foo.bar/baz");
+    params.put(OpenExchangeRatesOrgProvider.PARAM_RATES_FILE_LOCATION, 
+               "http://foo.bar/baz");
     params.put(OpenExchangeRatesOrgProvider.PARAM_REFRESH_INTERVAL, "100");
     oerp.init(params);
-    assertTrue("Wrong param set url", oerp.ratesFileLocation.equals("http://foo.bar/baz"));
-    assertTrue("Wrong param interval", oerp.refreshInterval == 100);
+    assertEquals("Wrong param set url", 
+                 "http://foo.bar/baz", oerp.ratesFileLocation);
+    assertEquals("Wrong param interval", 100, oerp.refreshInterval);
   }
 
   @Test
