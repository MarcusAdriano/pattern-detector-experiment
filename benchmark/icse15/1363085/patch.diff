diff --git a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceDescriptorParserImpl.java b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceDescriptorParserImpl.java
index 6c8dd12e..0b59f61b 100644
--- a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceDescriptorParserImpl.java
+++ b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceDescriptorParserImpl.java
@@ -47,6 +47,7 @@
   public Collection<? extends ParsedPersistenceUnit> parse(Bundle b, PersistenceDescriptor descriptor) throws PersistenceDescriptorParserException {
     Collection<ParsedPersistenceUnit> persistenceUnits = new ArrayList<ParsedPersistenceUnit>();
     SAXParserFactory parserFactory = SAXParserFactory.newInstance();
+    parserFactory.setNamespaceAware(true);
     RememberingInputStream is = null;
     boolean schemaFound = false;
     try {
diff --git a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/SchemaLocatingHandler.java b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/SchemaLocatingHandler.java
index 256a1275..500d626c 100644
--- a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/SchemaLocatingHandler.java
+++ b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/SchemaLocatingHandler.java
@@ -36,6 +36,10 @@
  */
 public class SchemaLocatingHandler extends DefaultHandler
 {
+  /**
+  * URI for the JPA persistence namespace 
+  */
+  private static final String PERSISTENCE_NS_URI = "http://java.sun.com/xml/ns/persistence";
   
   /**
    * A static cache of schemas in use in the runtime
@@ -49,8 +53,8 @@ public void startElement(String uri, String localName, String name, Attributes a
     
     Schema s = null;
     String version = null;
-    if("persistence".equals(name)) {
-      version = attributes.getValue(uri, "version");
+    if(PERSISTENCE_NS_URI.equals(uri) && "persistence".equals(localName) ) {
+      version = attributes.getValue("version");
        s = validate(version);
     }
     throw new EarlyParserReturn(s, version);
diff --git a/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/parsing/PersistenceXMLParsingTest.java b/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/parsing/PersistenceXMLParsingTest.java
index ea02d87e..5b2a5f53 100644
--- a/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/parsing/PersistenceXMLParsingTest.java
+++ b/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/parsing/PersistenceXMLParsingTest.java
@@ -310,6 +310,44 @@ public int compare(ParsedPersistenceUnit p1,
     }
   }
 
+  @Test
+  public void elementsPrefixedWithPersistenceNameSpaceShouldBeAccepted() throws Exception{
+	  InputStream is = null;
+	    try {
+	      String location = "file26/META-INF/persistence.xml"; 
+	      is = getClass().getClassLoader().getResourceAsStream(location);
+	      PersistenceDescriptor descriptor = new PersistenceDescriptorImpl(location, is);
+	      
+	      Bundle b = Skeleton.newMock(Bundle.class);
+	      
+	      Collection<? extends ParsedPersistenceUnit> parsedUnits = new PersistenceDescriptorParserImpl().parse(b, descriptor);
+	      assertEquals("An incorrect number of persistence units has been returned.", 1, parsedUnits.size());
+	     
+	    } finally {
+	      if(is != null)
+	        is.close();
+	    }
+  }
+  
+  @Test(expected=PersistenceDescriptorParserException.class)
+  public void elementsPrefixedWithWrongNameSpaceShouldBeRejected() throws Exception{
+	  InputStream is = null;
+	    try {
+	      String location = "file27/META-INF/persistence.xml"; 
+	      is = getClass().getClassLoader().getResourceAsStream(location);
+	      PersistenceDescriptor descriptor = new PersistenceDescriptorImpl(location, is);
+	      
+	      Bundle b = Skeleton.newMock(Bundle.class);
+	      
+	      Collection<? extends ParsedPersistenceUnit> parsedUnits = new PersistenceDescriptorParserImpl().parse(b, descriptor);
+	      fail("should throw");
+	     
+	    } finally {
+	      if(is != null)
+	        is.close();
+	    }
+  }
+  
   private void checkParsedUnit(Bundle b, ParsedPersistenceUnit unit, String number) {
     assertEquals("The schema version was incorrect", "1.0",
         unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.SCHEMA_VERSION));
