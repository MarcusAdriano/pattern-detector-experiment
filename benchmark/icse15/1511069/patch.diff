diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
index 0cd04eab..ebcc10a9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
@@ -576,7 +576,7 @@ private static void getDetailedFieldInfo(SolrQueryRequest req, String field, Sim
       throws IOException {
 
     SolrParams params = req.getParams();
-    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );
+    final int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );
 
     TopTermQueue tiq = new TopTermQueue(numTerms + 1);  // Something to collect the top N terms in.
 
@@ -600,7 +600,7 @@ private static void getDetailedFieldInfo(SolrQueryRequest req, String field, Sim
       int freq = termsEnum.docFreq();  // This calculation seems odd, but it gives the same results as it used to.
       int slot = 32 - Integer.numberOfLeadingZeros(Math.max(0, freq - 1));
       buckets[slot] = buckets[slot] + 1;
-      if (freq > tiq.minFreq) {
+      if (numTerms > 0 && freq > tiq.minFreq) {
         UnicodeUtil.UTF8toUTF16(text, spare);
         String t = spare.toString();
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
index 461d818a..ec5131c8 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest.java
@@ -238,6 +238,29 @@ public void testFlParam() {
     }
   }
 
+  public void testNumTerms() throws Exception {
+    final String f = "name";
+    for (String n : new String[] {"2", "3", "100", "99999"}) {
+      assertQ(req("qt", "/admin/luke", "fl", f, "numTerms", n),
+              field(f) + "lst[@name='topTerms']/int[@name='Apache']",
+              field(f) + "lst[@name='topTerms']/int[@name='Solr']",
+              "count("+field(f)+"lst[@name='topTerms']/int)=2");
+    }
+    
+    assertQ(req("qt", "/admin/luke", "fl", f, "numTerms", "1"),
+            // no garuntee which one we find
+            "count("+field(f)+"lst[@name='topTerms']/int)=1");
+
+    assertQ(req("qt", "/admin/luke", "fl", f, "numTerms", "0"),
+            "count("+field(f)+"lst[@name='topTerms']/int)=0");
+
+    // field with no terms shouldn't error
+    for (String n : new String[] {"0", "1", "2", "100", "99999"}) {
+      assertQ(req("qt", "/admin/luke", "fl", "bogus_s", "numTerms", n),
+              "count("+field(f)+"lst[@name='topTerms']/int)=0");
+    }
+  }
+
   public void testCopyFieldLists() throws Exception {
     SolrQueryRequest req = req("qt", "/admin/luke", "show", "schema");
 
