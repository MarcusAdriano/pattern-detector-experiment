diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java
index 431c3758..a5714a94 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java
@@ -84,10 +84,9 @@
  * 
  * <p>
  * <h3>Initial Usage</h3>
- * 
- * This class has lots of options to try to make it efficient and flexible. See
- * the body of {@link #main main()} below in the source for real code, or if you
- * want pseudo code, the simplest possible usage is as follows. The bold
+ * <p/>
+ * This class has lots of options to try to make it efficient and flexible.
+ * The simplest possible usage is as follows. The bold
  * fragment is specific to this class.
  * 
  * <pre class="prettyprint">
@@ -634,7 +633,8 @@ public Query like(int docNum) throws IOException {
    * Return a query that will return docs like the passed file.
    * 
    * @return a query that will return docs like the passed file.
-   */
+   * @deprecated use {@link #like(Reader, String)} instead */
+  @Deprecated
   public Query like(File f) throws IOException {
     if (fieldNames == null) {
       // gather list of valid fields from lucene
@@ -650,7 +650,8 @@ public Query like(File f) throws IOException {
    * Return a query that will return docs like the passed URL.
    * 
    * @return a query that will return docs like the passed URL.
-   */
+   * @deprecated use {@link #like(Reader, String)} instead */
+  @Deprecated
   public Query like(URL u) throws IOException {
     return like(new InputStreamReader(u.openConnection().getInputStream()));
   }
@@ -659,18 +660,25 @@ public Query like(URL u) throws IOException {
    * Return a query that will return docs like the passed stream.
    * 
    * @return a query that will return docs like the passed stream.
-   */
+   * @deprecated use {@link #like(Reader, String)} instead */
+  @Deprecated
   public Query like(java.io.InputStream is) throws IOException {
     return like(new InputStreamReader(is));
   }
   
+  /** @deprecated use {@link #like(Reader, String)} instead */
+  @Deprecated
+  public Query like(Reader r) throws IOException {
+    return createQuery(retrieveTerms(r, fieldNames[0]));
+  }
+
   /**
    * Return a query that will return docs like the passed Reader.
    * 
    * @return a query that will return docs like the passed Reader.
    */
-  public Query like(Reader r) throws IOException {
-    return createQuery(retrieveTerms(r));
+  public Query like(Reader r, String fieldName) throws IOException {
+    return createQuery(retrieveTerms(r, fieldName));
   }
   
   /**
@@ -791,63 +799,6 @@ public String describeParams() {
     return sb.toString();
   }
   
-  /**
-   * Test driver. Pass in "-i INDEX" and then either "-fn FILE" or "-url URL".
-   */
-  public static void main(String[] a) throws Throwable {
-    String indexName = "localhost_index";
-    String fn = "c:/Program Files/Apache Group/Apache/htdocs/manual/vhosts/index.html.en";
-    URL url = null;
-    for (int i = 0; i < a.length; i++) {
-      if (a[i].equals("-i")) {
-        indexName = a[++i];
-      } else if (a[i].equals("-f")) {
-        fn = a[++i];
-      } else if (a[i].equals("-url")) {
-        url = new URL(a[++i]);
-      }
-    }
-    
-    PrintStream o = System.out;
-    FSDirectory dir = FSDirectory.open(new File(indexName));
-    IndexReader r = IndexReader.open(dir, true);
-    o.println("Open index " + indexName + " which has " + r.numDocs() + " docs");
-    
-    MoreLikeThis mlt = new MoreLikeThis(r);
-    
-    o.println("Query generation parameters:");
-    o.println(mlt.describeParams());
-    o.println();
-    
-    Query query = null;
-    if (url != null) {
-      o.println("Parsing URL: " + url);
-      query = mlt.like(url);
-    } else if (fn != null) {
-      o.println("Parsing file: " + fn);
-      query = mlt.like(new File(fn));
-    }
-    
-    o.println("q: " + query);
-    o.println();
-    IndexSearcher searcher = new IndexSearcher(dir, true);
-    
-    TopDocs hits = searcher.search(query, null, 25);
-    int len = hits.totalHits;
-    o.println("found: " + len + " documents matching");
-    o.println();
-    ScoreDoc[] scoreDocs = hits.scoreDocs;
-    for (int i = 0; i < Math.min(25, len); i++) {
-      Document d = searcher.doc(scoreDocs[i].doc);
-      String summary = d.get("summary");
-      o.println("score  : " + scoreDocs[i].score);
-      o.println("url    : " + d.get("url"));
-      o.println("\ttitle  : " + d.get("title"));
-      if (summary != null) o.println("\tsummary: " + d.get("summary"));
-      o.println();
-    }
-  }
-  
   /**
    * Find words for a more-like-this query former.
    * 
@@ -984,29 +935,29 @@ private boolean isNoiseWord(String term) {
    * <li>The frequency of this word in the index (Integer)
    * <li>The frequency of this word in the source document (Integer)
    * </ol>
-   * This is a somewhat "advanced" routine, and in general only the 1st entry in
-   * the array is of interest. This method is exposed so that you can identify
-   * the "interesting words" in a document. For an easier method to call see
-   * {@link #retrieveInterestingTerms retrieveInterestingTerms()}.
-   * 
-   * @param r
-   *          the reader that has the content of the document
-   * @return the most interesting words in the document ordered by score, with
-   *         the highest scoring, or best entry, first
-   * 
+   * This is a somewhat "advanced" routine, and in general only the 1st entry in the array is of interest.
+   * This method is exposed so that you can identify the "interesting words" in a document.
+   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.
+   *
+   * @param r the reader that has the content of the document
+   * @param fieldName field passed to the analyzer to use when analyzing the content
+   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first
    * @see #retrieveInterestingTerms
    */
-  public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {
-    Map<String,Int> words = new HashMap<String,Int>();
-    for (int i = 0; i < fieldNames.length; i++) {
-      String fieldName = fieldNames[i];
+  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {
+    Map<String, Int> words = new HashMap<String, Int>();
       addTermFrequencies(r, words, fieldName);
-    }
     return createQueue(words);
   }
   
+  /** @deprecated use {@link #retrieveTerms(Reader, String)} instead */
+  @Deprecated
+  public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {
+    return retrieveTerms(r, fieldNames[0]);
+  }
+  
   /**
-   * @see #retrieveInterestingTerms(java.io.Reader)
+   * @see #retrieveInterestingTerms(java.io.Reader, String)
    */
   public String[] retrieveInterestingTerms(int docNum) throws IOException {
     ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);
@@ -1025,20 +976,18 @@ private boolean isNoiseWord(String term) {
   }
   
   /**
-   * Convenience routine to make it easy to return the most interesting words in
-   * a document. More advanced users will call
-   * {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.
+   * Convenience routine to make it easy to return the most interesting words in a document.
+   * More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.
    * 
-   * @param r
-   *          the source document
+   * @param r the source document
+   * @param fieldName field passed to analyzer to use when analyzing the content
    * @return the most interesting words in the document
-   * 
-   * @see #retrieveTerms(java.io.Reader)
+   * @see #retrieveTerms(java.io.Reader, String)
    * @see #setMaxQueryTerms
    */
-  public String[] retrieveInterestingTerms(Reader r) throws IOException {
+  public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {
     ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);
-    PriorityQueue<Object[]> pq = retrieveTerms(r);
+    PriorityQueue<Object[]> pq = retrieveTerms(r, fieldName);
     Object cur;
     int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all
                              // words but that's probably not useful to our
@@ -1052,6 +1001,12 @@ private boolean isNoiseWord(String term) {
     return al.toArray(res);
   }
   
+  /** @deprecated use {@link #retrieveInterestingTerms(Reader, String)} instead. */
+  @Deprecated
+  public String[] retrieveInterestingTerms(Reader r) throws IOException {
+    return retrieveInterestingTerms(r, fieldNames[0]);
+  }
+  
   /**
    * PriorityQueue that orders words by score.
    */
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java
index c64aa1bd..ec1568c3 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java
@@ -20,7 +20,6 @@
  * limitations under the License.
  */
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.util.Set;
 
@@ -31,6 +30,8 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.similar.MoreLikeThis;
 
+import java.io.StringReader;
+
 /**
  * A simple wrapper for MoreLikeThis for use in scenarios where a Query object
  * is required eg in custom QueryParser extensions. At query.rewrite() time the
@@ -42,20 +43,27 @@
   private String likeText;
   private String[] moreLikeFields;
   private Analyzer analyzer;
-  float percentTermsToMatch = 0.3f;
-  int minTermFrequency = 1;
-  int maxQueryTerms = 5;
-  Set<?> stopWords = null;
-  int minDocFreq = -1;
+  private String fieldName;
+  private float percentTermsToMatch = 0.3f;
+  private int minTermFrequency = 1;
+  private int maxQueryTerms = 5;
+  private Set<?> stopWords = null;
+  private int minDocFreq = -1;
+
+  /** @deprecated use {@link #MoreLikeThisQuery(String, String[], Analyzer, String)} instead. */
+  @Deprecated
+  public MoreLikeThisQuery(String likeText, String[] moreLikeFields, Analyzer analyzer) {
+    this(likeText, moreLikeFields, analyzer, moreLikeFields[0]);
+  }
   
   /**
    * @param moreLikeFields
    */
-  public MoreLikeThisQuery(String likeText, String[] moreLikeFields,
-      Analyzer analyzer) {
+  public MoreLikeThisQuery(String likeText, String[] moreLikeFields, Analyzer analyzer, String fieldName) {
     this.likeText = likeText;
     this.moreLikeFields = moreLikeFields;
     this.analyzer = analyzer;
+    this.fieldName = fieldName;
   }
   
   @Override
@@ -70,8 +78,7 @@ public Query rewrite(IndexReader reader) throws IOException {
     }
     mlt.setMaxQueryTerms(maxQueryTerms);
     mlt.setStopWords(stopWords);
-    BooleanQuery bq = (BooleanQuery) mlt.like(new ByteArrayInputStream(likeText
-        .getBytes()));
+    BooleanQuery bq = (BooleanQuery) mlt.like(new StringReader(likeText), fieldName);
     BooleanClause[] clauses = bq.getClauses();
     // make at least half the terms match
     bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java
index 26b6a191..858c210e 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java
@@ -87,7 +87,7 @@ public void testBoostFactor() throws Throwable {
     mlt.setBoostFactor(boostFactor);
     
     BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(
-        "lucene release"));
+        "lucene release"), "text");
     List<BooleanClause> clauses = query.clauses();
     
     assertEquals("Expected " + originalValues.size() + " clauses.",
@@ -116,7 +116,7 @@ public void testBoostFactor() throws Throwable {
     mlt.setFieldNames(new String[] {"text"});
     mlt.setBoost(true);
     BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(
-        "lucene release"));
+        "lucene release"), "text");
     List<BooleanClause> clauses = query.clauses();
     
     for (int i = 0; i < clauses.size(); i++) {
@@ -126,4 +126,27 @@ public void testBoostFactor() throws Throwable {
     }
     return originalValues;
   }
+  
+  // LUCENE-3326
+  public void testMultiFields() throws Exception {
+    MoreLikeThis mlt = new MoreLikeThis(reader);
+    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));
+    mlt.setMinDocFreq(1);
+    mlt.setMinTermFreq(1);
+    mlt.setMinWordLen(1);
+    mlt.setFieldNames(new String[] {"text", "foobar"});
+    mlt.like(new StringReader("this is a test"), "foobar");
+  }
+  
+  // LUCENE-3326
+  @Deprecated
+  public void testMultiFieldsDeprecated() throws Exception {
+    MoreLikeThis mlt = new MoreLikeThis(reader);
+    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));
+    mlt.setMinDocFreq(1);
+    mlt.setMinTermFreq(1);
+    mlt.setMinWordLen(1);
+    mlt.setFieldNames(new String[] {"text", "foobar"});
+    mlt.like(new StringReader("this is a test"));
+  }
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/LikeThisQueryBuilder.java b/lucene/dev/branches/branch_3x/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/LikeThisQueryBuilder.java
index d461dbe5..9b3da2e1 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/LikeThisQueryBuilder.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/LikeThisQueryBuilder.java
@@ -96,7 +96,7 @@ public Query getQuery(Element e) throws ParserException {
 		}
 		
 		
-		MoreLikeThisQuery mlt=new MoreLikeThisQuery(DOMUtils.getText(e),fields,analyzer);
+		MoreLikeThisQuery mlt=new MoreLikeThisQuery(DOMUtils.getText(e),fields,analyzer, fields[0]);
 		mlt.setMaxQueryTerms(DOMUtils.getAttribute(e,"maxQueryTerms",defaultMaxQueryTerms));
 		mlt.setMinTermFrequency(DOMUtils.getAttribute(e,"minTermFrequency",defaultMinTermFrequency));
 		mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e,"percentTermsToMatch",defaultPercentTermsToMatch)/100);
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
index e34ac88a..d5f6f25d 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
@@ -336,7 +336,8 @@ public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> f
 
     public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException
     {
-      rawMLTQuery = mlt.like(reader);
+      // analyzing with the first field: previous (stupid) behavior
+      rawMLTQuery = mlt.like(reader, mlt.getFieldNames()[0]);
       boostedMLTQuery = getBoostedQuery( rawMLTQuery );
       if( terms != null ) {
         fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );
