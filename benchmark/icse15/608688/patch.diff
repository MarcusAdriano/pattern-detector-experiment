diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java
index 83247dc9..49983643 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java
@@ -40,7 +40,6 @@ Licensed to the Apache Software Foundation (ASF) under one
  * Test for comments.
  */
 public final class CommentTest extends BaseJDBCTestCase {
-    private Statement stmt;
 
     /**
      * Public constructor required for running test as standalone JUnit.
@@ -63,6 +62,8 @@ public static Test suite()
      */
     public void testBracketedComments() throws Exception
     {
+        Statement stmt = createStatement();
+        
         JDBC.assertFullResultSet(
             stmt.executeQuery("/* a comment */ VALUES 1"), 
             new String [][] {{"1"}});
@@ -121,10 +122,10 @@ public void testBracketedComments() throws Exception
             new String [][] {{"/* a comment \n-- */"}});
 
         // unterminated comments generate lexical errors
-        assertCallError("42X03", getConnection(), "VALUES 1 /*");
-        assertCallError("42X03", getConnection(), "VALUES 1 /* comment");
-        assertCallError("42X03", getConnection(), "VALUES 1 /* comment /*");
-        assertCallError("42X03", getConnection(), "VALUES 1 /* comment /* nested */");
+        assertCompileError("42X02", "VALUES 1 /*");
+        assertCompileError("42X02", "VALUES 1 /* comment");
+        assertCompileError("42X02", "VALUES 1 /* comment /*");
+        assertCompileError("42X02", "VALUES 1 /* comment /* nested */");
 
         // just comments generates syntax error
         assertCompileError("42X01", "/* this is a comment */");
@@ -132,20 +133,10 @@ public void testBracketedComments() throws Exception
     }
     
     /**
-     * Set the fixture up.
+     * Default connections to auto-commit false.
      */
-    protected void setUp() throws SQLException
-    {    
-        getConnection().setAutoCommit(false);
-        stmt = createStatement();
-    }
-    
-    /**
-     * Tear-down the fixture.
-     */
-    protected void tearDown() throws Exception
+    protected void initializeConnection(Connection conn) throws SQLException
     {
-        stmt.close();
-        super.tearDown();
+        conn.setAutoCommit(false);
     }
 }
