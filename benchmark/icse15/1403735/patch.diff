diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index bcb04d7c..fc280a5b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -770,9 +770,11 @@ private boolean isDropDatabase(Properties p) {
      * @return {@code true} if a boot will perform a cryptographic operation on
      *      the database.
      */
-    private boolean isCryptoBoot(Properties p) {
+    private boolean isCryptoBoot(Properties p)
+        throws SQLException
+    {
         return (isTrue(p, Attribute.DATA_ENCRYPTION) ||
-                isTrue(p, Attribute.DECRYPT_DATABASE) ||
+                vetTrue(p, Attribute.DECRYPT_DATABASE) ||
                 isSet(p, Attribute.NEW_BOOT_PASSWORD) ||
                 isSet(p, Attribute.NEW_CRYPTO_EXTERNAL_KEY));
 	}
@@ -849,6 +851,22 @@ private static boolean isTrue(Properties p, String attribute) {
         return Boolean.valueOf(p.getProperty(attribute)).booleanValue();
     }
 
+    /**
+     * Returns true if the attribute exists and is set to true.
+     * Raises an exception if the attribute exists and is set to something else.
+     */
+    private static boolean vetTrue(Properties p, String attribute)
+        throws SQLException
+    {
+        String  value = p.getProperty( attribute );
+        if ( value == null ) { return false; }
+
+        if ( Boolean.valueOf( value ).booleanValue() ) { return true; }
+
+        throw newSQLException
+            ( SQLState.INVALID_ATTRIBUTE, attribute, value, Boolean.TRUE.toString() );
+    }
+
     private String getReplicationOperation(Properties p) 
         throws StandardException {
 
@@ -3168,15 +3186,18 @@ public ExceptionFactory getExceptionFactory() {
         return Util.getExceptionFactory();
     }
 
-	protected SQLException newSQLException(String messageId) {
+	protected static SQLException newSQLException(String messageId) {
 		return Util.generateCsSQLException(messageId);
 	}
-	protected SQLException newSQLException(String messageId, Object arg1) {
+	protected static SQLException newSQLException(String messageId, Object arg1) {
 		return Util.generateCsSQLException(messageId, arg1);
 	}
-	protected SQLException newSQLException(String messageId, Object arg1, Object arg2) {
+	protected static SQLException newSQLException(String messageId, Object arg1, Object arg2) {
 		return Util.generateCsSQLException(messageId, arg1, arg2);
 	}
+	protected static SQLException newSQLException(String messageId, Object arg1, Object arg2, Object arg3) {
+		return Util.generateCsSQLException(messageId, arg1, arg2, arg3);
+	}
 
 	/////////////////////////////////////////////////////////////////////////
 	//
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java
index 3a8233d6..edc0ffac 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java
@@ -148,6 +148,15 @@ public void testDecryptDatabaseNegative()
         } catch (SQLException sqle) {
             assertSQLState("XBM06", sqle);
         }
+        
+        // Bad setting for decryptDatabase
+        try {
+            connect( false, BOOTPW, "decryptDatabase=fred" );
+            fail( "bad decryptDatabase setting not detected" );
+        } catch (SQLException sqle) {
+            assertSQLState("XJ05B", sqle);
+        }
+
         connect(false, BOOTPW, null);
     }
 
