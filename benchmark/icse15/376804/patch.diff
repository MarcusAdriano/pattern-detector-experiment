diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryAfterBackup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryAfterBackup.java
index d825c14d..52f77780 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryAfterBackup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryAfterBackup.java
@@ -77,12 +77,9 @@ public static void main(String[] argv) throws Throwable
             s.execute ("INSERT INTO t1 SELECT a+128 FROM t1");
 
             // Shut down database
-            Properties shutdownAttrs = new Properties();
-            shutdownAttrs.setProperty("shutdownDatabase", "shutdown");
             System.out.println("Shutting down database ...");
             try {
-                DataSource ds = TestUtil.getDataSource(shutdownAttrs);
-                ds.getConnection();
+            	TestUtil.getConnection("", "shutdown=true");
             } catch(SQLException sqle) {
                 if (sqle.getSQLState() != null 
                     && sqle.getSQLState().equals("XJ015")) {
@@ -94,12 +91,10 @@ public static void main(String[] argv) throws Throwable
 
             // Start up with rollforward-recovery
             System.out.println("Starting restore with roll-forward recovery..");
-            Properties restoreAttrs = new Properties();
-            restoreAttrs.setProperty("DatabaseName", "hairynosedwombat");
-            restoreAttrs.setProperty("connectionAttributes", 
-                  "rollForwardRecoveryFrom=extinout/mybackup/hairynosedwombat");
-            DataSource ds = TestUtil.getDataSource(restoreAttrs);
-            conn = ds.getConnection();
+            String dbName = "hairynosedwombat";
+            String connAttrs = 
+            	"rollForwardRecoveryFrom=extinout/mybackup/hairynosedwombat";
+            conn = TestUtil.getConnection(dbName, connAttrs);
 
             // After restore table should contain all records inserted above
             System.out.println("Verifying database ...");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
index fcea2317..abc3f9cd 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
@@ -695,6 +695,46 @@ public static void cleanUpTest (Statement s, String[] testObjects)
     }
 
 	
+    /**
+     * Get connection to given database using the connection attributes. This
+     * method is used by tests to get a secondary connection with 
+     * different set of attributes. It does not use what is specified in 
+     * app_properties file or system properties. This method uses DataSource 
+     * class for CDC/Foundation Profile environments, which are based on 
+     * JSR169. Using DataSource will not work with other j9 profiles. So
+     * DriverManager is used for non-JSR169. The method is used as a wrapper to
+     * hide this difference in getting connections in different environments.
+     *  
+     * @param databaseName
+     * @param connAttrs
+     * @return Connection to database 
+     * @throws SQLException on failure to connect.
+     * @throws ClassNotFoundException on failure to load driver.
+     * @throws InstantiationException on failure to load driver.
+     * @throws IllegalAccessException on failure to load driver.
+     */
+    public static Connection getConnection(String databaseName, 
+    									   String connAttrs) 
+    	throws SQLException, ClassNotFoundException, 
+				InstantiationException, IllegalAccessException {
+    	
+    	Connection conn;
+    	if(TestUtil.HAVE_DRIVER_CLASS) {
+    		String driver = "org.apache.derby.jdbc.EmbeddedDriver";
+    		Class.forName(driver).newInstance();
+    		conn = DriverManager.getConnection("jdbc:derby:" + databaseName 
+												+ ";" + connAttrs );
+    	}
+    	else {
+    		//Use DataSource for JSR169
+	    	Properties prop = new Properties();
+	        prop.setProperty("databaseName", databaseName);
+	        prop.setProperty("connectionAttributes", connAttrs);
+	        conn = getDataSourceConnection(prop);
+    	}
+        return conn;
+    }
+    
 	public static Connection getDataSourceConnection (Properties prop) throws SQLException {
 		DataSource ds = TestUtil.getDataSource(prop);
 		try {
