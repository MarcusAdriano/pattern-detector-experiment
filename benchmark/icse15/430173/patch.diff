diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
index 89ffdf77..cc560385 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
@@ -441,7 +441,6 @@ public ResultColumnList expandAll(TableName allTableName)
 		for (int index = 0; index < size; index++)
 		{
 			fromTable = (FromTable) elementAt(index);
-			fromTable.setAllColumnsProjected(true);
 
 			/* We let the FromTable decide if there is a match on
 			 * the exposed name.  (A JoinNode will not have an
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
index 52136f5a..bcefadca 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
@@ -65,7 +65,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  *
  * @author Jeff Lichtman
  */
-public abstract class FromTable extends ResultSetNode implements Optimizable
+abstract class FromTable extends ResultSetNode implements Optimizable
 {
 	Properties		tableProperties;
 	String		correlationName;
@@ -111,19 +111,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	*/
 	private HashMap optimizerToBestPlanMap;
 
-  //this flag tells you if all the columns from this table are projected using * from it.
-  //Used by replication enabled databases where the target-only view failure is detected
-  //using this boolean
-  private boolean allColumnsProjected;
-
-  public boolean areAllColumnsProjected() {
-    return allColumnsProjected;
-  }
-
-  public void setAllColumnsProjected(boolean flag) {
-    allColumnsProjected = flag;
-  }
-
 	/**
 	 * Initializer for a table in a FROM list.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
index dc3159d9..9460884c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
@@ -52,7 +52,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * @author Jeff Lichtman
  */
 
-public abstract class SetOperatorNode extends TableOperatorNode
+abstract class SetOperatorNode extends TableOperatorNode
 {
 	/**
 	** Tells whether to eliminate duplicate rows.  all == TRUE means do
@@ -63,17 +63,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	OrderByList orderByList;
 
 	// List of scoped predicates for pushing during optimization.
-	PredicateList leftOptPredicates;
-	PredicateList rightOptPredicates;
+	private PredicateList leftOptPredicates;
+	private PredicateList rightOptPredicates;
 
 	// List of original (unscoped) predicates that we tried to push
 	// during the most recent phase of optimization.
-	PredicateList pushedPredicates;
+	private PredicateList pushedPredicates;
 
 	// Mapping of original predicates to scoped predicates, used to
 	// avoid re-scoping predicates unnecessarily.
-	HashMap leftScopedPreds;
-	HashMap rightScopedPreds;
+	private HashMap leftScopedPreds;
+	private HashMap rightScopedPreds;
 
 	/**
 	 * Initializer for a SetOperatorNode.
@@ -1014,7 +1014,7 @@ public boolean performMaterialization(JBitSet outerTables)
 	 * targeted for the left child.  Create a new (empty)
 	 * list if the list is null.
 	 */
-	protected PredicateList getLeftOptPredicateList()
+	PredicateList getLeftOptPredicateList()
 		throws StandardException
 	{
 		if (leftOptPredicates == null) {
@@ -1032,7 +1032,7 @@ protected PredicateList getLeftOptPredicateList()
 	 * targeted for the right child.  Create a new (empty)
 	 * list if the list is null.
 	 */
-	protected PredicateList getRightOptPredicateList()
+	PredicateList getRightOptPredicateList()
 		throws StandardException
 	{
 		if (rightOptPredicates == null) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
index 06c66e79..94c8e270 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
@@ -58,9 +58,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * @author Jeff Lichtman
  */
 
-public abstract class TableOperatorNode extends FromTable
+abstract class TableOperatorNode extends FromTable
 {
-	boolean			nestedInParens;
 	ResultSetNode	leftResultSet;
 	ResultSetNode	rightResultSet;
 	Optimizer		leftOptimizer;
@@ -209,7 +208,7 @@ public String toString()
 	{
 		if (SanityManager.DEBUG)
 		{
-			return "nestedInParens: " + nestedInParens + "\n" +
+			return "nestedInParens: " + false + "\n" +
 				leftResultSet.toString() + "\n" +
 				rightResultSet.toString() + "\n" + 
 				super.toString();
@@ -324,24 +323,15 @@ public String getExposedName()
 	/**
 	 * Mark whether or not this node is nested in parens.  (Useful to parser
 	 * since some trees get created left deep and others right deep.)
+	 * The resulting state of this cal was never used so its
+	 * field was removed to save runtimespace for this node.
+	 * Further cleanup can be done including parser changes
+	 * if this call is really nor required.
 	 *
 	 * @param nestedInParens	Whether or not this node is nested in parens.
 	 */
 	public void setNestedInParens(boolean nestedInParens)
 	{
-		this.nestedInParens = nestedInParens;
-	}
-
-	/**
-	 * Return whether or not the table operator for this node was
-	 * nested in parens in the query.  (Useful to parser
-	 * since some trees get created left deep and others right deep.)
-	 *
-	 * @return boolean		Whether or not this node was nested in parens.
-	 */
-	public boolean getNestedInParens()
-	{
-		return nestedInParens;
 	}
 
 
