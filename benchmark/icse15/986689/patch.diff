diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
index d5c8bd2b..718f2f8f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
@@ -218,6 +218,8 @@ public NetConnection(NetLogWriter netLogWriter,
         flowConnect(password, securityMechanism_);
         if(!isConnectionNull())
         	completeConnect();
+        //DERBY-2026. reset timeout after connection is made
+        netAgent_.setTimeout(0);
     }
 
     // For JDBC 2 Connections
@@ -304,14 +306,19 @@ private void initialize(String password,
         // (which the InternalDriver assumes means there's a subsubprotocol)  
         // and it's not a subsubprotocol recognized by our drivers.
         // If so, bail out here.
-        if(!isConnectionNull())
+        if(!isConnectionNull()) {
             completeConnect();
+        }
         else
         {
             agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,
                     new ClientMessageId(SQLState.PROPERTY_INVALID_VALUE),
                     Attribute.DBNAME_ATTR,databaseName_));
         }
+        // DERBY-2026
+        //reset timeout if previously set for login timeout
+        netAgent_.setTimeout(0);
+        
     }
 
     // preferably without password in the method signature.
@@ -339,6 +346,9 @@ public void resetNetConnection(org.apache.derby.client.am.LogWriter logWriter)
         boolean isDeferredReset = flowReconnect(getDeferredResetPassword(),
                                                 securityMechanism_);
         completeReset(isDeferredReset);
+        //DERBY-2026. Make sure soTimeout is set back to
+        // infinite after connection is made.
+        netAgent_.setTimeout(0);
     }
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
index 711f6f17..a6f30b35 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
@@ -59,6 +59,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.jdbc.EmbeddedSimpleDataSource;
 import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
 import org.apache.derbyTesting.functionTests.util.SecurityCheck;
+import org.apache.derbyTesting.functionTests.util.TestRoutines;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
@@ -180,6 +181,7 @@ private static Test getClientSuite() {
                 "testClientMessageTextConnectionAttribute"));
         suite.addTest(new J2EEDataSourceTest("testConnectionFlowCommit"));
         suite.addTest(new J2EEDataSourceTest("testConnectionFlowCommitAlt"));
+        suite.addTest(new J2EEDataSourceTest("testDerby2026LoginTimeout"));
         // Disabled because rollback flow optimization hasn't been implemented.
         // See DERBY-4687
         //suite.addTest(new J2EEDataSourceTest("testConnectionFlowRollbackAlt"));
@@ -239,6 +241,7 @@ public static Test suite() {
                  * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
                  */
                 protected void decorateSQL(Statement s) throws SQLException {
+                    TestRoutines.installRoutines(getConnection());
                     s.executeUpdate("create table autocommitxastart(i int)");
                     s.executeUpdate("insert into autocommitxastart values 1,2,3,4,5");
                     s.executeUpdate("create schema SCHEMA_Patricio");
@@ -2108,6 +2111,58 @@ public void testConnectionFlowCommit()
         conn.close();       
     }
 
+    /**
+     * DERBY-2026 - Make sure login timeout does not impact 
+     * queries.
+     */
+    public void testDerby2026LoginTimeout() throws SQLException {
+        DataSource jds = JDBCDataSource.getDataSource();
+        jds.setLoginTimeout(10);
+        Connection conn = jds.getConnection();
+        CallableStatement cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
+        cs.execute();
+        //rollback to make sure our connection is ok.
+        conn.rollback();
+        
+        ConnectionPoolDataSource cpds = J2EEDataSource.getConnectionPoolDataSource();        
+        cpds.setLoginTimeout(10);
+        PooledConnection pc = cpds.getPooledConnection();
+        conn = pc.getConnection();
+        cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
+        cs.execute();
+        //rollback to make sure our connection is ok.
+        conn.rollback();
+        
+        // Close the logical connection and get a new one.
+        // This will invoke reset which also needs its timeout reset
+        conn.close();
+        conn = pc.getConnection();
+        cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
+        cs.execute();
+        //rollback to make sure our connection is ok.
+        conn.rollback();
+        
+        
+        XADataSource xads = J2EEDataSource.getXADataSource();        
+        xads.setLoginTimeout(10);
+        XAConnection xac = xads.getXAConnection();
+        conn = pc.getConnection();
+        cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
+        cs.execute();
+        //rollback to make sure our connection is ok.
+        conn.rollback();
+        
+        // Close the logical connection and get a new one.
+        // This will invoke reset which also needs its timeout reset
+        conn.close();
+        conn = pc.getConnection();
+        cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
+        cs.execute();
+        //rollback to make sure our connection is ok.
+        conn.rollback();
+        
+    }
+    
     /**
      * Doing the work for test Connection.flowcommit() and Connection.flowrollback()
      * @param conn
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java
index bbbcb8db..9e80ad7e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 */
 package org.apache.derbyTesting.functionTests.tests.lang;
 
+import java.sql.CallableStatement;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.SQLException;
@@ -29,7 +30,9 @@ Licensed to the Apache Software Foundation (ASF) under one
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.apache.derbyTesting.functionTests.util.TestRoutines;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
@@ -48,8 +51,15 @@ public static Test suite() {
             // is not supported with JSR169
             return 
             new TestSuite("empty ConnectTest:DriverManager not supported");
-        else
-            return TestConfiguration.defaultSuite(ConnectTest.class);
+        else  {
+                TestSuite suite = new TestSuite("ConnectTest suite");  
+                suite.addTest(TestConfiguration.defaultSuite(ConnectTest.class));
+                // Derby2026 test uses explicit client connection so not relevant to embedded
+                suite.addTest(TestConfiguration.
+                            clientServerDecorator(new ConnectTest("clientTestDerby2026LoginTimeout")));
+                return new CleanDatabaseTestSetup(suite);
+        }
+                  
     }
 
     /**
@@ -137,4 +147,28 @@ public void testGrantAndRevoke() throws SQLException {
         st.close();
         con.close();
     }
+
+    /**
+     * DERBY-2026 make sure loginTimeout does not
+     * affect queries
+     * @throws SQLException
+     */
+    public void clientTestDerby2026LoginTimeout() throws SQLException  {
+        String url = "jdbc:derby://" + TestConfiguration.getCurrent().getHostName() +":" +
+        TestConfiguration.getCurrent().getPort() + "/" + TestConfiguration.getCurrent().getDefaultDatabaseName();
+        DriverManager.setLoginTimeout(10);
+        //System.out.println(url);
+        try {
+            Class.forName("org.apache.derby.jdbc.ClientDriver");
+        } catch (ClassNotFoundException e) {
+            fail(e.getMessage());
+        }
+        Connection conn = DriverManager.getConnection(url);
+        TestRoutines.installRoutines(conn);
+        CallableStatement cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
+        cs.execute();
+        //rollback to make sure our connection is ok.
+        conn.rollback();
+    }
+    
 }
