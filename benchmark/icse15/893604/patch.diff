diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index c8b8618e..06b6ca7d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -245,9 +245,6 @@ void onStart() throws IOException
         }
         ssTables_.onStart(sstables);
 
-        // submit initial check-for-compaction request
-        CompactionManager.instance.submitMinor(ColumnFamilyStore.this);
-
         // schedule hinted handoff
         if (table_.equals(Table.SYSTEM_TABLE) && columnFamily_.equals(HintedHandOffManager.HINTS_CF))
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
index b9f4ed28..7584e96c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -527,4 +527,22 @@ public void close() throws IOException
             }
         }
     }
+
+    public void checkAllColumnFamilies()
+    {
+        for (String tableName : DatabaseDescriptor.getTables())
+        {
+            try
+            {
+                for (ColumnFamilyStore cfs : Table.open(tableName).getColumnFamilyStores().values())
+                {
+                    submitMinor(cfs);
+                }
+            }
+            catch (IOException e)
+            {
+                throw new RuntimeException(e);
+            }
+        }
+    }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
index dfb999ad..4d713b72 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
@@ -38,6 +38,7 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.db.RecoveryManager;
+import org.apache.cassandra.db.CompactionManager;
 
 /**
  * This class supports two methods for creating a Cassandra node daemon, 
@@ -90,8 +91,9 @@ public void uncaughtException(Thread t, Throwable e)
             tbl.onStart();
         }
 
-        // replay the log if necessary
+        // replay the log if necessary and check for compaction candidates
         RecoveryManager.doRecovery();
+        CompactionManager.instance.checkAllColumnFamilies();
 
         // start server internals
         StorageService.instance().initServer();
