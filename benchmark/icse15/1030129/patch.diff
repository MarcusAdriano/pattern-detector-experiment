diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
index 6c0bbe7e..aa32a388 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
@@ -23,7 +23,6 @@
 import java.util.*;
 import java.util.concurrent.ExecutorService;
 
-import com.sun.jna.LastErrorException;
 import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
 
 import org.apache.log4j.Logger;
@@ -203,21 +202,25 @@ public static void deleteDir(File dir) throws IOException
      */
     public static void createHardLink(File sourceFile, File destinationFile) throws IOException
     {
+        int errno = Integer.MIN_VALUE;
         try
         {
             int result = CLibrary.link(sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());
-            assert result == 0; // success is always zero
+            if (result != 0)
+                errno = Native.getLastError();
         }
         catch (UnsatisfiedLinkError e)
         {
             createHardLinkWithExec(sourceFile, destinationFile);
+            return;
         }
-        catch (LastErrorException e)
+
+        if (errno != Integer.MIN_VALUE)
         {
             // there are 17 different error codes listed on the man page.  punt until/unless we find which
             // ones actually turn up in practice.
             throw new IOException(String.format("Unable to create hard link from %s to %s (errno %d)",
-                                                sourceFile, destinationFile, CLibrary.errno(e)));
+                                                sourceFile, destinationFile, errno));
         }
     }
 
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
index e0163bf0..ee85a9a5 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
@@ -21,7 +21,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.LastErrorException;
 import com.sun.jna.Native;
 
 public final class CLibrary
@@ -49,23 +48,10 @@
         }
     }
 
-    public static native int mlockall(int flags) throws LastErrorException;
-    public static native int munlockall() throws LastErrorException;
+    public static native int mlockall(int flags);
+    public static native int munlockall();
 
-    public static native int link(String from, String to) throws LastErrorException;
-
-    public static int errno(LastErrorException e)
-    {
-        try
-        {
-            return e.getErrorCode();
-        }
-        catch (NoSuchMethodError x)
-        {
-            logger.warn("Obsolete version of JNA present; unable to read errno. Upgrade to JNA 3.2.7 or later");
-            return 0;
-        }
-    }
+    public static native int link(String from, String to);
 
     private CLibrary() {}
 }
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
index eccf4cf7..b3c425c0 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -37,7 +37,6 @@
 
 import org.apache.commons.collections.iterators.CollatingIterator;
 
-import com.sun.jna.LastErrorException;
 import com.sun.jna.Native;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.DecoratedKey;
@@ -554,18 +553,22 @@ public static AbstractType getComparator(String compareWith)
 
     public static void tryMlockall()
     {
+        int errno = Integer.MIN_VALUE;
         try
         {
             int result = CLibrary.mlockall(CLibrary.MCL_CURRENT);
-            assert result == 0; // mlockall should always be zero on success
+            if (result != 0)
+                errno = Native.getLastError();
         }
         catch (UnsatisfiedLinkError e)
         {
             // this will have already been logged by CLibrary, no need to repeat it
+            return;
         }
-        catch (LastErrorException e)
+
+        if (errno != Integer.MIN_VALUE)
         {
-            if (CLibrary.errno(e) == CLibrary.ENOMEM && System.getProperty("os.name").toLowerCase().contains("linux"))
+            if (errno == CLibrary.ENOMEM && System.getProperty("os.name").toLowerCase().contains("linux"))
             {
                 logger_.warn("Unable to lock JVM memory (ENOMEM)."
                              + " This can result in part of the JVM being swapped out, especially with mmapped I/O enabled."
@@ -574,7 +577,7 @@ public static void tryMlockall()
             else if (!System.getProperty("os.name").toLowerCase().contains("mac"))
             {
                 // OS X allows mlockall to be called, but always returns an error
-                logger_.warn("Unknown mlockall error " + CLibrary.errno(e));
+                logger_.warn("Unknown mlockall error " + errno);
             }
         }
     }
