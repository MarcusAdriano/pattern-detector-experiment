diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/thrift/CassandraDaemon.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
index 0d47f3af..262f2e35 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
@@ -42,6 +42,7 @@
 import org.apache.thrift.TProcessorFactory;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.CLibrary;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.db.CompactionManager;
@@ -62,6 +63,8 @@
 
     private void setup() throws IOException, TTransportException
     {
+        FBUtilities.tryMlockall();
+        
         // log4j
         String file = System.getProperty("storage-config") + File.separator + "log4j.properties";
         PropertyConfigurator.configure(file);
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
index 5b4538cf..983518df 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -37,6 +37,7 @@
 
 import org.apache.commons.collections.iterators.CollatingIterator;
 
+import com.sun.jna.Native;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.marshal.AbstractType;
@@ -549,4 +550,50 @@ public static AbstractType getComparator(String compareWith)
             throw new RuntimeException(e);
         }
     }
+
+    public static void tryMlockall()
+    {
+        int errno = Integer.MIN_VALUE;
+        try
+        {
+            int result = CLibrary.mlockall(CLibrary.MCL_CURRENT);
+            if (result != 0)
+                errno = Native.getLastError();
+        }
+        catch (UnsatisfiedLinkError e)
+        {
+            // this will have already been logged by CLibrary, no need to repeat it
+            return;
+        }
+        catch (Exception e)
+        {
+            logger_.debug("Unable to mlockall", e);
+            // skipping mlockall doesn't seem to be a Big Deal except on Linux.  See CASSANDRA-1214
+            if (System.getProperty("os.name").toLowerCase().contains("linux"))
+            {
+                logger_.warn("Unable to lock JVM memory (" + e.getMessage() + ")."
+                             + " This can result in part of the JVM being swapped out, especially with mmapped I/O enabled.");
+            }
+            else if (!System.getProperty("os.name").toLowerCase().contains("windows"))
+            {
+                logger_.info("Unable to lock JVM memory: " + e.getMessage());
+            }
+            return;
+        }
+
+        if (errno != Integer.MIN_VALUE)
+        {
+            if (errno == CLibrary.ENOMEM && System.getProperty("os.name").toLowerCase().contains("linux"))
+            {
+                logger_.warn("Unable to lock JVM memory (ENOMEM)."
+                             + " This can result in part of the JVM being swapped out, especially with mmapped I/O enabled."
+                             + " Increase RLIMIT_MEMLOCK or run Cassandra as root.");
+            }
+            else if (!System.getProperty("os.name").toLowerCase().contains("mac"))
+            {
+                // OS X allows mlockall to be called, but always returns an error
+                logger_.warn("Unknown mlockall error " + errno);
+            }
+        }
+    }
 }
