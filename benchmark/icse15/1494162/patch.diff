diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
index c10bd5ed..d13a5fb9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
@@ -118,26 +118,21 @@ private void recoveryFailed(final SolrCore core,
     }
   }
   
-  private void replicate(String nodeName, SolrCore core, ZkNodeProps leaderprops, String baseUrl)
+  private void replicate(String nodeName, SolrCore core, ZkNodeProps leaderprops)
       throws SolrServerException, IOException {
    
-    String leaderBaseUrl = leaderprops.getStr(ZkStateReader.BASE_URL_PROP);
     ZkCoreNodeProps leaderCNodeProps = new ZkCoreNodeProps(leaderprops);
     String leaderUrl = leaderCNodeProps.getCoreUrl();
     
     log.info("Attempting to replicate from " + leaderUrl + ". core=" + coreName);
     
-    // if we are the leader, either we are trying to recover faster
-    // then our ephemeral timed out or we are the only node
-    if (!leaderBaseUrl.equals(baseUrl)) {
-      
       // send commit
       commitOnLeader(leaderUrl);
       
       // use rep handler directly, so we can do this sync rather than async
       SolrRequestHandler handler = core.getRequestHandler(REPLICATION_HANDLER);
       if (handler instanceof LazyRequestHandlerWrapper) {
-        handler = ((LazyRequestHandlerWrapper)handler).getWrappedHandler();
+      handler = ((LazyRequestHandlerWrapper) handler).getWrappedHandler();
       }
       ReplicationHandler replicationHandler = (ReplicationHandler) handler;
       
@@ -153,7 +148,8 @@ private void replicate(String nodeName, SolrCore core, ZkNodeProps leaderprops,
       boolean success = replicationHandler.doFetch(solrParams, false);
 
       if (!success) {
-        throw new SolrException(ErrorCode.SERVER_ERROR, "Replication for recovery failed.");
+      throw new SolrException(ErrorCode.SERVER_ERROR,
+          "Replication for recovery failed.");
       }
       
       // solrcloud_debug
@@ -169,7 +165,7 @@ private void replicate(String nodeName, SolrCore core, ZkNodeProps leaderprops,
 //      } catch (Exception e) {
 //        
 //      }
-    }
+    
   }
 
   private void commitOnLeader(String leaderUrl) throws SolrServerException, IOException {
@@ -406,8 +402,7 @@ public void doRecovery(SolrCore core) throws KeeperException, InterruptedExcepti
         
         try {
 
-          replicate(zkController.getNodeName(), core,
-              leaderprops, leaderUrl);
+          replicate(zkController.getNodeName(), core, leaderprops);
 
           replay(ulog);
           replayed = true;
