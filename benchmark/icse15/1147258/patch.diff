diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java
index bdf6d926..df0f5c6d 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java
@@ -279,19 +279,41 @@ private void executeDelete(Tree statement)
             return;
         }
         
+        Tree columnTree = (columnSpecCnt >= 1)
+                           ? columnFamilySpec.getChild(2)
+                           : null;
+
+        Tree subColumnTree = (columnSpecCnt == 2)
+                              ? columnFamilySpec.getChild(3)
+                              : null;
+
         if (columnSpecCnt == 1)
         {
             // table.cf['key']['column']
+            assert columnTree != null;
+
+            byte[] columnNameBytes = (columnTree.getType() == CliParser.FUNCTION_CALL)
+                                      ? convertValueByFunction(columnTree, null, null).array()
+                                      : columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
+
             if (isSuper)
-                superColumnName = columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
+                superColumnName = columnNameBytes;
             else
-                columnName = columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
+                columnName = columnNameBytes;
         }
         else if (columnSpecCnt == 2)
         {
+            assert columnTree != null;
+            assert subColumnTree != null;
+
             // table.cf['key']['column']['column']
-            superColumnName = columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
-            columnName = subColumnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 1), cfDef);
+            superColumnName = (columnTree.getType() == CliParser.FUNCTION_CALL)
+                                      ? convertValueByFunction(columnTree, null, null).array()
+                                      : columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
+
+            columnName = (subColumnTree.getType() == CliParser.FUNCTION_CALL)
+                                         ? convertValueByFunction(subColumnTree, null, null).array()
+                                         : subColumnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 1), cfDef);
         }
 
         ColumnPath path = new ColumnPath(columnFamily);
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/cli/CliTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/cli/CliTest.java
index 9c2388b7..6a9efc80 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/cli/CliTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/cli/CliTest.java
@@ -53,6 +53,8 @@
         "get CF1 where world2 = long(15);",
         "get cF1 where world2 = long(15);",
         "get Cf1 where world2 = long(15);",
+        "del CF1[utf8('hello')][utf8('world')];",
+        "del CF1[hello][world2];",
         "set CF1['hello'][time_spent_uuid] = timeuuid(a8098c1a-f86e-11da-bd1a-00112444be1e);",
         "create column family CF2 with comparator=IntegerType;",
         "set CF2['key'][98349387493847748398334] = 'some text';",
