diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
index 3e3673ef..e8e09fd6 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
@@ -31,11 +31,7 @@
 	public RequireCapabilityRequirement(RequireCapabilityHeader.Clause clause, Resource resource) {
 		namespace = clause.getNamespace();
 		Directive filter = clause.getDirective(RequireCapabilityHeader.Clause.DIRECTIVE_FILTER);
-		// It is legal for requirements to have no filter directive, in which 
-		// case the requirement would match any capability from the same 
-		// namespace.
-		if (filter == null)
-			filter = new FilterDirective('(' + namespace + "=*)");
+		if (filter != null)
 		directives.put(DIRECTIVE_FILTER, filter.getValue());
 		this.resource = resource;
 	}
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
index 7d7800ff..a53bf7b8 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
@@ -132,8 +132,11 @@ public Resource getResource() {
 		}
 		
 		private void initializeAttributes() {
+			String filter = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
+			if (filter == null)
+				return;
 			Pattern pattern = Pattern.compile("\\(([^(=]+)=([^)]+)\\)");
-			Matcher matcher = pattern.matcher(requirement.getDirectives().get(Constants.FILTER_DIRECTIVE));
+			Matcher matcher = pattern.matcher(filter);
 			while (matcher.find())
 				attributes.put(matcher.group(1), matcher.group(2));
 		}
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
index 005fe686..41a43138 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
@@ -702,6 +702,12 @@ private void setImportIsolationPolicy(RegionFilterBuilder builder, RequireCapabi
 			RequireCapabilityRequirement requirement = new RequireCapabilityRequirement(clause, this);
 			String policy = requirement.getNamespace();
 			String filter = requirement.getDirectives().get(RequireCapabilityRequirement.DIRECTIVE_FILTER);
+			if (filter == null)
+				// A null filter directive means the requirement matches any
+				// capability from the same namespace.
+				builder.allowAll(policy);
+			else
+				// Otherwise, the capabilities must be filtered accordingly.
 			builder.allow(policy, filter);
 		}
 	}
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoRequirementFilterTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoRequirementFilterTest.java
index 5b053581..15099556 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoRequirementFilterTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoRequirementFilterTest.java
@@ -26,6 +26,12 @@
 import org.osgi.service.subsystem.Subsystem;
 import org.osgi.service.subsystem.SubsystemConstants;
 
+/*
+ * Generic requirements are not required to specify the filter directive, in
+ * which case it would match any capability from the same namespace.
+ * 
+ * Generic capabilities are not required to use the namespace as an attribute.
+ */
 @RunWith(JUnit4TestRunner.class)
 public class NoRequirementFilterTest extends SubsystemTest {
 	/*
@@ -40,7 +46,7 @@
 	private static final String BUNDLE_A = "bundle.a.jar";
 	/*
 	 * Bundle-SymbolicName: bundle.b.jar
-	 * Provide-Capability: y;y=foo
+	 * Provide-Capability: y
 	 */
 	private static final String BUNDLE_B = "bundle.b.jar";
 	
@@ -64,7 +70,7 @@ private static void createBundleA() throws IOException {
 	
 	private static void createBundleB() throws IOException {
 		Map<String, String> headers = new HashMap<String, String>();
-		headers.put(Constants.PROVIDE_CAPABILITY, "y;y=foo");
+		headers.put(Constants.PROVIDE_CAPABILITY, "y");
 		createBundle(BUNDLE_B, headers);
 	}
 	
@@ -85,7 +91,7 @@ public void setUp() throws Exception {
 	}
 	
 	@Test
-	public void testRequireCapability() throws Exception {
+	public void testNoFilterDirectiveWithNoNamespaceAttribute() throws Exception {
 		Bundle bundleB = installBundleFromFile(BUNDLE_B);
 		try {
 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_A);
