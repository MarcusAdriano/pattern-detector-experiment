diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Types.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Types.java
index 0996dd74..be78a8a2 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Types.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Types.java
@@ -21,7 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.client.am;
 
 import org.apache.derby.iapi.reference.DRDAConstants;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.reference.JDBC40Translation;
 
 // This enumeration of types represents the typing scheme used by our jdbc driver.
@@ -36,7 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
     //public final static int TINYINT 	= java.sql.Types.TINYINT;       // -6;
 
-    public final static int BOOLEAN = JDBC30Translation.BOOLEAN;       // 16;
+    public final static int BOOLEAN = java.sql.Types.BOOLEAN;       // 16;
 
     public final static int SMALLINT = java.sql.Types.SMALLINT;      // 5;
 
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 13662ef8..a8a3e757 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -4486,7 +4486,7 @@ private void readAndSetParams(int i,
 				if (SanityManager.DEBUG)
 					trace("short parameter value is: "+paramVal);
  				// DB2 does not have a BOOLEAN java.sql.bit type, it's sent as small
-				if (pmeta.getParameterType(i+1) == JDBC30Translation.BOOLEAN)
+				if (pmeta.getParameterType(i+1) == Types.BOOLEAN)
 					ps.setBoolean(i+1, (paramVal == 1));
 				else
 					ps.setShort(i+1, paramVal);
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/FdocaConstants.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/FdocaConstants.java
index e1e67ca8..d6644bf1 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/FdocaConstants.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/FdocaConstants.java
@@ -21,7 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.drda;
 
 import java.sql.Types;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.reference.DRDAConstants;
 import java.sql.SQLException;
 import org.apache.derby.iapi.reference.Limits;
@@ -139,7 +138,7 @@ protected static int mapJdbcTypeToDrdaType(int jdbcType, boolean nullable,
 	{
 		int drdaType = 0;
 		switch (jdbcType) {
-			case JDBC30Translation.BOOLEAN:
+			case Types.BOOLEAN:
 			case java.sql.Types.BIT:
 			case java.sql.Types.TINYINT:
 			case java.sql.Types.SMALLINT:
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/SQLTypes.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/SQLTypes.java
index 380407b4..9bb422b2 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/SQLTypes.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/SQLTypes.java
@@ -24,7 +24,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Types;
 import java.sql.SQLException;
 import org.apache.derby.iapi.reference.DRDAConstants;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 
 
 
@@ -145,7 +144,7 @@ static protected int mapJdbcTypeToDB2SqlType (int jdbctype, boolean nullable,
 
 	  switch(jdbctype)
 	  {
-		  case JDBC30Translation.BOOLEAN:
+		  case Types.BOOLEAN:
 		  case java.sql.Types.BIT:
 		  case java.sql.Types.TINYINT:
 		  case java.sql.Types.SMALLINT:
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java
index d8cd1175..3a8db8ed 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java
@@ -41,7 +41,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.info.JVMInfo;
 
 import java.sql.Types;
-import org.apache.derby.iapi.reference.JDBC20Translation; // needed for BLOB/CLOB types
 
 import java.io.InputStream;
 import java.io.ByteArrayInputStream;
@@ -344,7 +343,7 @@ private void setTypeIdSpecificInstanceVariables()
 
           case StoredFormatIds.CLOB_TYPE_ID_IMPL:
                 SQLTypeName = TypeId.CLOB_NAME;
-                JDBCTypeId = JDBC20Translation.SQL_TYPES_CLOB;
+                JDBCTypeId = Types.CLOB;
                 wrapperTypeFormatId = StoredFormatIds.CLOB_TYPE_ID;
                 break;
 
@@ -368,7 +367,7 @@ private void setTypeIdSpecificInstanceVariables()
 
           case StoredFormatIds.BLOB_TYPE_ID_IMPL:
                 SQLTypeName = TypeId.BLOB_NAME;
-                JDBCTypeId = JDBC20Translation.SQL_TYPES_BLOB;
+                JDBCTypeId = Types.BLOB;
                 wrapperTypeFormatId = StoredFormatIds.BLOB_TYPE_ID;
                 break;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/JDBC20Translation.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/JDBC20Translation.java
index c3a0070f..f2b18f3c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/JDBC20Translation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/JDBC20Translation.java
@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.sql.ResultSet;
 import javax.transaction.xa.XAResource;
-import java.sql.Types;
 
 /**
         This class contains public statics that map directly
@@ -78,12 +77,4 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         public static final int XA_STARTRSCAN = XAResource.TMSTARTRSCAN;
         public static final int XA_SUCCESS = XAResource.TMSUCCESS;
         public static final int XA_SUSPEND = XAResource.TMSUSPEND;
-
-
-        /*
-        ** New types in JDBC 2.0
-        */
-        public static final int SQL_TYPES_JAVA_OBJECT = Types.JAVA_OBJECT;
-        public static final int SQL_TYPES_BLOB = Types.BLOB;
-        public static final int SQL_TYPES_CLOB = Types.CLOB;
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
index 4bf651e8..cac3dbc6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.services.info;
 
+import java.sql.Types;
+
 
 /**
 	This class is used to determine which Java specification Derby will run at.
@@ -142,7 +144,7 @@ else if (javaVersion.equals("1.6"))
 		JDK_ID = id;
 		J2ME = isJ2ME;
 		JAVA_SQL_TYPES_BOOLEAN = (isJ2ME || id >= J2SE_14) ?
-			org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN :java.sql.Types.BIT;
+			Types.BOOLEAN :java.sql.Types.BIT;
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
index e37099fd..6fc76b96 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
@@ -1628,7 +1628,7 @@ public static boolean isNumericType(int jdbcType) {
 
 		switch (jdbcType) {
 		case Types.BIT:
-		case org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN:
+		case Types.BOOLEAN:
 		case Types.TINYINT:
 		case Types.SMALLINT:
 		case Types.INTEGER:
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
index b04a52b2..07397064 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.reference.JDBC40Translation;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
@@ -56,7 +55,7 @@ public static int getPrecision(DataTypeDescriptor dtd) {
 				return dtd.getMaximumWidth();
 			case Types.SMALLINT:
 				return 5;
-			case JDBC30Translation.SQL_TYPES_BOOLEAN:
+			case Types.BOOLEAN:
 				return 1;
 		}
     	
@@ -194,7 +193,7 @@ public	static	int getColumnDisplaySize(int typeId, int storageLength)
 				size = 20;
 				break;
 			case Types.BIT:
-			case JDBC30Translation.SQL_TYPES_BOOLEAN:
+			case Types.BOOLEAN:
 				// Types.BIT == SQL BOOLEAN, so 5 chars for 'false'
 				// In JDBC 3.0, Types.BIT or Types.BOOLEAN = SQL BOOLEAN
 				size = 5;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
index 6db5dc9e..15140252 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
@@ -42,8 +42,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.*;
 import org.apache.derby.iapi.types.*;
 
-import org.apache.derby.iapi.reference.JDBC20Translation;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.reference.JDBC40Translation;
 
 import java.sql.Types;
@@ -371,7 +369,7 @@ public static TypeId getBuiltInTypeId(int JDBCTypeId)
                                                                         new BaseTypeIdImpl(StoredFormatIds.TIMESTAMP_TYPE_ID_IMPL));
                           break;
                   case Types.BIT:
-                  case JDBC30Translation.SQL_TYPES_BOOLEAN:
+                  case Types.BOOLEAN:
                           return BOOLEAN_ID;
 
                   case Types.BINARY:
@@ -402,14 +400,14 @@ public static TypeId getBuiltInTypeId(int JDBCTypeId)
                                                             new BaseTypeIdImpl(StoredFormatIds.LONGVARCHAR_TYPE_ID_IMPL));
                       break;
 
-                  case JDBC20Translation.SQL_TYPES_BLOB:
+                  case Types.BLOB:
                       ret = BLOB_ID;
                       if (ret == null)
                           ret = BLOB_ID = new TypeId(StoredFormatIds.BLOB_TYPE_ID,
                                                      new BaseTypeIdImpl(StoredFormatIds.BLOB_TYPE_ID_IMPL));
                       break;
                                                 
-                  case JDBC20Translation.SQL_TYPES_CLOB:
+                  case Types.CLOB:
                       ret = CLOB_ID;
                       if (ret == null)
                           ret = CLOB_ID = new TypeId(StoredFormatIds.CLOB_TYPE_ID,
@@ -505,11 +503,11 @@ else if (javaTypeName.equals("java.sql.Timestamp"))
                 }
                 else if (javaTypeName.equals("java.sql.Blob"))
                 {
-                        return getBuiltInTypeId(JDBC20Translation.SQL_TYPES_BLOB);
+                        return getBuiltInTypeId(Types.BLOB);
                 }
                 else if (javaTypeName.equals("java.sql.Clob"))
                 {
-                        return getBuiltInTypeId(JDBC20Translation.SQL_TYPES_CLOB);
+                        return getBuiltInTypeId(Types.CLOB);
                 }
                 else if (javaTypeName.equals("org.apache.derby.iapi.types.XML"))
                 {
@@ -597,10 +595,10 @@ public static TypeId getBuiltInTypeId(String SQLTypeName) {
                         return getBuiltInTypeId(Types.LONGVARBINARY);
                 }
                 if (SQLTypeName.equals(TypeId.BLOB_NAME)) {
-                        return getBuiltInTypeId(JDBC20Translation.SQL_TYPES_BLOB);
+                        return getBuiltInTypeId(Types.BLOB);
                 }
                 if (SQLTypeName.equals(TypeId.CLOB_NAME)) {
-                        return getBuiltInTypeId(JDBC20Translation.SQL_TYPES_CLOB);
+                        return getBuiltInTypeId(Types.CLOB);
                 }
                 if (SQLTypeName.equals(TypeId.XML_NAME)) {
                         return getBuiltInTypeId(StoredFormatIds.XML_TYPE_ID);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index ca84aca5..ddc87880 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -1192,7 +1192,7 @@ public final void setObject(int parameterIndex, Object x) throws SQLException {
 			throw dataTypeConversion(parameterIndex, "null");
 		}
 		
-		if (colType == org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT) {
+		if (colType == Types.JAVA_OBJECT) {
 			try {
 				/* JDBC is one-based, DBMS is zero-based */
 				getParms().setParameterAsObject(parameterIndex - 1, x);
@@ -1730,7 +1730,7 @@ private void checkForSupportedDataType(int dataType) throws SQLException {
 
         switch (dataType) {
         case Types.ARRAY:
-        case JDBC30Translation.DATALINK:
+        case Types.DATALINK:
         case JDBC40Translation.NCHAR:
         case JDBC40Translation.NCLOB:
         case JDBC40Translation.NVARCHAR:
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 02c08a7b..b75388ab 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -3053,7 +3053,7 @@ public void updateObject(int columnIndex, Object x, int scale)
 	public void updateObject(int columnIndex, Object x) throws SQLException {
 		checksBeforeUpdateXXX("updateObject", columnIndex);
 		int colType = getColumnType(columnIndex);
-		if (colType == org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT) {
+		if (colType == Types.JAVA_OBJECT) {
 			try {
 				((UserDataValue) getDVDforColumnToBeUpdated(columnIndex, "updateObject")).setValue(x);
 				return;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
index 63c66765..a1af4f10 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
@@ -32,7 +32,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.reference.MessageId;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.reference.JDBC40Translation;
 
 import java.sql.SQLException;
@@ -301,8 +300,8 @@ public static String typeName(int jdbcType) {
 		switch (jdbcType) {
 			case Types.ARRAY: return TypeId.ARRAY_NAME;
 			case Types.BIT 		:  return TypeId.BIT_NAME;
-			case JDBC30Translation.SQL_TYPES_BOOLEAN  : return TypeId.BOOLEAN_NAME;
-			case JDBC30Translation.DATALINK: return TypeId.DATALINK_NAME;
+			case Types.BOOLEAN  : return TypeId.BOOLEAN_NAME;
+			case Types.DATALINK: return TypeId.DATALINK_NAME;
 			case Types.TINYINT 	:  return TypeId.TINYINT_NAME;
 			case Types.SMALLINT	:  return TypeId.SMALLINT_NAME;
 			case Types.INTEGER 	:  return TypeId.INTEGER_NAME;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java
index b671a3e8..5532f714 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java
@@ -21,10 +21,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.catalog;
 
+import java.sql.Types;
+
 import org.apache.derby.catalog.AliasInfo;
 import org.apache.derby.catalog.UUID;
 import org.apache.derby.iapi.error.StandardException;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.uuid.UUIDFactory;
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
@@ -371,7 +372,7 @@ public TupleDescriptor buildDescriptor(
         SystemColumnImpl.getIndicatorColumn("ALIASTYPE"),
         SystemColumnImpl.getIndicatorColumn("NAMESPACE"),
         SystemColumnImpl.getColumn("SYSTEMALIAS",
-                JDBC30Translation.SQL_TYPES_BOOLEAN, false),
+                Types.BOOLEAN, false),
         SystemColumnImpl.getJavaColumn("ALIASINFO",
                 "org.apache.derby.catalog.AliasInfo", true),
         SystemColumnImpl.getIdentifierColumn("SPECIFICNAME", false)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
index 7523ab45..f6b52b95 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
@@ -22,7 +22,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package	org.apache.derby.impl.sql.compile;
 
 import org.apache.derby.iapi.reference.ClassName;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 
 import org.apache.derby.iapi.util.JBitSet;
 
@@ -968,7 +967,7 @@ else if (columnSide == RIGHT)
 			typeId = rightOperand.getTypeId();
 
 		if (typeId != null && (typeId.getJDBCTypeId() == Types.BIT ||
-		typeId.getJDBCTypeId() == JDBC30Translation.SQL_TYPES_BOOLEAN))
+		typeId.getJDBCTypeId() == Types.BOOLEAN))
 			retval = 0.5d;
 
 		return retval;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
index 51f23568..267b7e7c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
@@ -45,7 +45,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.util.StringUtil;
 
 import org.apache.derby.iapi.reference.ClassName;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.services.classfile.VMOpcode;
 
 import org.apache.derby.iapi.sql.compile.Visitable;
@@ -285,9 +284,9 @@ else if (this.targetCharType == Types.VARCHAR)
 			switch (sourceJDBCTypeId)
 			{
 				case Types.BIT:
-				case JDBC30Translation.SQL_TYPES_BOOLEAN:
+				case Types.BOOLEAN:
 					// (BIT is boolean)
-					if (destJDBCTypeId == Types.BIT || destJDBCTypeId == JDBC30Translation.SQL_TYPES_BOOLEAN)
+					if (destJDBCTypeId == Types.BIT || destJDBCTypeId == Types.BOOLEAN)
 					{
 						retNode = castOperand;
 					}
@@ -450,7 +449,7 @@ private ValueNode getCastFromCharConstant(int destJDBCTypeId)
 		switch (destJDBCTypeId)
 		{
 			case Types.BIT:
-			case JDBC30Translation.SQL_TYPES_BOOLEAN:
+			case Types.BOOLEAN:
 				if (cleanCharValue.equals("TRUE"))
 				{
 					return (ValueNode) getNodeFactory().getNode(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java
index 1dc95d7a..53e81ebe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java
@@ -151,7 +151,7 @@ private int getConstantLength( ) throws StandardException
         {
         case Types.BIGINT:
             return 8;
-		case org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN:
+		case Types.BOOLEAN:
         case Types.BIT:
             return 1;
         case Types.BINARY:
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java
index 2c51112e..ac33003b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java
@@ -34,7 +34,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.ClassName;
-import org.apache.derby.iapi.reference.JDBC20Translation;
 
 import java.sql.Types;
 
@@ -110,8 +109,8 @@ public ValueNode bindExpression(
 				case Types.VARBINARY:
 				case Types.LONGVARBINARY:
 				case Types.LONGVARCHAR:
-                case JDBC20Translation.SQL_TYPES_BLOB:
-                case JDBC20Translation.SQL_TYPES_CLOB:
+                case Types.BLOB:
+                case Types.CLOB:
 					break;
 			
 				default:
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index 7993b327..4387f33b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -3239,7 +3239,7 @@ public void createListFromResultSetMetaData(ResultSetMetaData rsmd,
 				int jdbcColumnType = rsmd.getColumnType(index);
 
 				switch (jdbcColumnType) {
-				case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:
+				case Types.JAVA_OBJECT:
 				case Types.OTHER:
 				{
 					cti = TypeId.getUserDefinedTypeId(rsmd.getColumnTypeName(index), false);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
index 9bd086f6..246a6b80 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
@@ -93,7 +93,7 @@ public ValueNode bindExpression(
 				case Types.LONGVARCHAR:
 				case Types.CLOB:
 					break;
-				case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:
+				case Types.JAVA_OBJECT:
 				case Types.OTHER:	
 				{
 					throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TypeCompilerFactoryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TypeCompilerFactoryImpl.java
index fbf8664c..63b65267 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TypeCompilerFactoryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TypeCompilerFactoryImpl.java
@@ -27,8 +27,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
-import org.apache.derby.iapi.reference.JDBC20Translation;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.reference.JDBC40Translation;
 
 import org.apache.derby.iapi.services.io.StoredFormatIds;
@@ -92,7 +90,7 @@ static TypeCompiler staticGetTypeCompiler(TypeId typeId)
                                                                         typeId);
 
                   case Types.BIT:
-                  case JDBC30Translation.SQL_TYPES_BOOLEAN:
+                  case Types.BOOLEAN:
                         return booleanTypeCompiler =
                                         getAnInstance(PACKAGE_NAME + "BooleanTypeCompiler",
                                                                 booleanTypeCompiler,
@@ -130,7 +128,7 @@ static TypeCompiler staticGetTypeCompiler(TypeId typeId)
                                                                 longintTypeCompiler,
                                                                 typeId);
 
-                  case JDBC20Translation.SQL_TYPES_BLOB:
+                  case Types.BLOB:
                         return blobTypeCompiler =
                                 getAnInstance(PACKAGE_NAME + "LOBTypeCompiler",
                                                           blobTypeCompiler,
@@ -142,7 +140,7 @@ static TypeCompiler staticGetTypeCompiler(TypeId typeId)
                                                           longvarbitTypeCompiler,
                                                           typeId);
 
-                  case JDBC20Translation.SQL_TYPES_CLOB:
+                  case Types.CLOB:
                       sqlTypeName = typeId.getSQLTypeName();
                       return clobTypeCompiler =
                           getAnInstance(PACKAGE_NAME + "CLOBTypeCompiler",
@@ -202,7 +200,7 @@ static TypeCompiler staticGetTypeCompiler(TypeId typeId)
                                                       varcharTypeCompiler,
                                                       typeId);
 
-                  case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:
+                  case Types.JAVA_OBJECT:
                   case Types.OTHER:
                         if (typeId.isRefTypeId())
                         {
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java
index 3a8f6273..f92b897c 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java
@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.ParameterMetaData;
 import java.sql.ResultSet;
 import java.sql.Statement;
-import java.sql.Types;
 /**
         This class contains public statics that map directly
         to the new public statics in the jdbc 3.0 classes.
@@ -69,15 +68,4 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         public static final int EXECUTE_FAILED = Statement.EXECUTE_FAILED;
         public static final int RETURN_GENERATED_KEYS = Statement.RETURN_GENERATED_KEYS;
         public static final int NO_GENERATED_KEYS = Statement.NO_GENERATED_KEYS;
-
-        /*
-        ** public statics from 3.0 version of java.sql.Types
-        */
-        public static final int DATALINK = Types.DATALINK;
-        public static final int BOOLEAN = Types.BOOLEAN;
-
-        /*
-        ** New types in JDBC 3.0
-        */
-        public static final int SQL_TYPES_BOOLEAN = Types.BOOLEAN;
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/outparams.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/outparams.java
index 8aa2223b..9addd757 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/outparams.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/outparams.java
@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.*;
 
 import org.apache.derby.tools.ij;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import java.io.PrintStream;
 import java.math.BigInteger;
 import java.math.BigDecimal;
@@ -337,7 +336,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	static final int types[] =
 	{
 		Types.BIT,
-		JDBC30Translation.SQL_TYPES_BOOLEAN,
+		Types.BOOLEAN,
 		Types.TINYINT,
 		Types.SMALLINT,
 		Types.INTEGER,
@@ -1015,7 +1014,7 @@ private static void callSetObject(CallableStatement cs, int arg, int type, Strin
 		switch (type)	
 		{
 			case Types.BIT:
-			case JDBC30Translation.SQL_TYPES_BOOLEAN:
+			case Types.BOOLEAN:
 				strbuf.append("setObject("+arg+", true)");
 				cs.setObject(arg, new Boolean(true));
 				break;
@@ -1102,7 +1101,7 @@ private static void callSetMethod(CallableStatement cs, int arg, int type, Strin
 		switch (type)	
 		{
 			case Types.BIT:
-			case JDBC30Translation.SQL_TYPES_BOOLEAN:
+			case Types.BOOLEAN:
 				strbuf.append("setBoolean("+arg+", true)");
 				cs.setBoolean(arg, true);
 				break;
@@ -1190,7 +1189,7 @@ private static void callGetMethod(CallableStatement cs, int arg, int type, int p
 		switch (type)	
 		{
 			case Types.BIT:
-			case JDBC30Translation.SQL_TYPES_BOOLEAN:
+			case Types.BOOLEAN:
 				strbuf.append("getBoolean("+arg+") = ");
 				strbuf.append(cs.getBoolean(arg));
 				break;
@@ -1342,7 +1341,7 @@ private static String getStringOfType(int type) throws Throwable
 				return "00680065006c006c006f";
 
 			case Types.BIT:
-			case JDBC30Translation.SQL_TYPES_BOOLEAN:
+			case Types.BOOLEAN:
 				return "true";
 
 			default:
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
index fc8f44f1..b71be5c5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
@@ -37,7 +37,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.security.PrivilegedActionException;
 import javax.sql.DataSource;
 
-import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.services.info.JVMInfo;
 import org.apache.derbyTesting.functionTests.harness.RunTest;
 
@@ -525,7 +524,7 @@ public static void dumpSQLExceptions(SQLException sqle, boolean expected) {
 	  public static String sqlNameFromJdbc(int jdbcType) {
 		switch (jdbcType) {
 			case Types.BIT 		:  return "Types.BIT";
-			case JDBC30Translation.SQL_TYPES_BOOLEAN  : return "Types.BOOLEAN";
+			case Types.BOOLEAN  : return "Types.BOOLEAN";
 			case Types.TINYINT 	:  return "Types.TINYINT";
 			case Types.SMALLINT	:  return "SMALLINT";
 			case Types.INTEGER 	:  return "INTEGER";
@@ -560,7 +559,7 @@ public static String sqlNameFromJdbc(int jdbcType) {
 	  public static String getNameFromJdbcType(int jdbcType) {
 		switch (jdbcType) {
 			case Types.BIT 		:  return "Types.BIT";
-			case JDBC30Translation.SQL_TYPES_BOOLEAN  : return "Types.BOOLEAN";
+			case Types.BOOLEAN  : return "Types.BOOLEAN";
 			case Types.TINYINT 	:  return "Types.TINYINT";
 			case Types.SMALLINT	:  return "Types.SMALLINT";
 			case Types.INTEGER 	:  return "Types.INTEGER";
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java b/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java
index 454e2831..527193e7 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java
@@ -677,7 +677,7 @@ static private void DisplayRow(PrintWriter out, ResultSet rs, ResultSetMetaData
 			default:
 				s = LocalizedResource.getInstance().getLocalizedString(rs, rsmd, colnum );
 				break;
-			case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:
+			case Types.JAVA_OBJECT:
 			case Types.OTHER:
 			{
 				Object o = rs.getObject(colnum);
@@ -1187,7 +1187,7 @@ static private void DisplayRow(PrintStream out, ResultSet rs, ResultSetMetaData
 			default:
 				s = rs.getString(colnum);
 				break;
-			case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:
+			case Types.JAVA_OBJECT:
 			case Types.OTHER:
 			{
 				Object o = rs.getObject(colnum);
