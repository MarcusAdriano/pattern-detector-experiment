diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/RunLogistic.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/RunLogistic.java
index c47a0a83..4e5c8dbb 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/RunLogistic.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/RunLogistic.java
@@ -34,6 +34,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintStream;
+import java.util.Locale;
 
 public final class RunLogistic {
 
@@ -64,28 +65,28 @@ public static void main(String[] args) throws IOException {
       csv.firstLine(line);
       line = in.readLine();
       if (showScores) {
-        output.printf("\"%s\",\"%s\",\"%s\"\n", "target", "model-output", "log-likelihood");
+        output.printf(Locale.ENGLISH, "\"%s\",\"%s\",\"%s\"\n", "target", "model-output", "log-likelihood");
       }
       while (line != null) {
         Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
         int target = csv.processLine(line, v);
         double score = lr.classifyScalar(v);
         if (showScores) {
-          output.printf("%d,%.3f,%.6f\n", target, score, lr.logLikelihood(target, v));
+          output.printf(Locale.ENGLISH, "%d,%.3f,%.6f\n", target, score, lr.logLikelihood(target, v));
         }
         collector.add(target, score);
         line = in.readLine();
       }
 
       if (showAuc) {
-        output.printf("AUC = %.2f\n", collector.auc());
+        output.printf(Locale.ENGLISH, "AUC = %.2f\n", collector.auc());
       }
       if (showConfusion) {
         Matrix m = collector.confusion();
-        output.printf("confusion: [[%.1f, %.1f], [%.1f, %.1f]]\n",
+        output.printf(Locale.ENGLISH, "confusion: [[%.1f, %.1f], [%.1f, %.1f]]\n",
           m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
         m = collector.entropy();
-        output.printf("entropy: [[%.1f, %.1f], [%.1f, %.1f]]\n",
+        output.printf(Locale.ENGLISH, "entropy: [[%.1f, %.1f], [%.1f, %.1f]]\n",
           m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
       }
     }
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java
index d372e830..d8e3db77 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java
@@ -42,6 +42,7 @@
 import java.io.Writer;
 import java.nio.charset.Charset;
 import java.util.List;
+import java.util.Locale;
 
 
 /**
@@ -92,7 +93,7 @@ public static void main(String[] args) throws IOException {
           }
           double p = lr.classifyScalar(input);
           if (scores) {
-            output.printf("%10d %2d %10.2f %2.4f %10.4f %10.4f\n",
+            output.printf(Locale.ENGLISH, "%10d %2d %10.2f %2.4f %10.4f %10.4f\n",
               samples, targetValue, lr.currentLearningRate(), p, logP, logPEstimate);
           }
 
@@ -111,13 +112,13 @@ public static void main(String[] args) throws IOException {
         modelOutput.close();
       }
       
-      output.printf("%d\n", lmp.getNumFeatures());
-      output.printf("%s ~ ", lmp.getTargetVariable());
+      output.printf(Locale.ENGLISH, "%d\n", lmp.getNumFeatures());
+      output.printf(Locale.ENGLISH, "%s ~ ", lmp.getTargetVariable());
       String sep = "";
       for (String v : csv.getPredictors()) {
         double weight = predictorWeight(lr, 0, csv, v);
         if (weight != 0) {
-          output.printf("%s%.3f*%s", sep, weight, v);
+          output.printf(Locale.ENGLISH, "%s%.3f*%s", sep, weight, v);
           sep = " + ";
         }
       }
@@ -127,11 +128,11 @@ public static void main(String[] args) throws IOException {
         for (String key : csv.getTraceDictionary().keySet()) {
           double weight = predictorWeight(lr, row, csv, key);
           if (weight != 0) {
-            output.printf("%20s %.5f\n", key, weight);
+            output.printf(Locale.ENGLISH, "%20s %.5f\n", key, weight);
           }
         }
         for (int column = 0; column < lr.getBeta().numCols(); column++) {
-          output.printf("%15.9f ", lr.getBeta().get(row, column));
+          output.printf(Locale.ENGLISH, "%15.9f ", lr.getBeta().get(row, column));
         }
         output.println();
       }
