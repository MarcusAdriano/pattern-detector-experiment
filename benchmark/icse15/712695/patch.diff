diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index 4e342856..1f0d50bf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -1969,4 +1969,14 @@ public void dropDependentsStoredDependencies(UUID dependentsUUID,
 	public boolean existsGrantToAuthid(String authId,
 									   TransactionController tc)
 				throws StandardException;
+
+	
+	/**
+	 * Drop and recreate metadata stored prepared statements.
+	 * 
+     * @param tc the xact
+	 * @throws StandardException
+	 */
+	public void updateMetadataSPSes(TransactionController tc) throws StandardException;
+	
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
index e9e7e76d..45562bd7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
@@ -340,8 +340,7 @@ private	void	doFullUpgrade(TransactionController tc, int fromMajorVersionNumber,
 		//Drop and recreate the stored versions of the JDBC database metadata queries
 		//This is to make sure that we have the stored versions of JDBC database
 		//metadata queries matching with this release of the engine.
-		dropJDBCMetadataSPSes(tc, false);
-		bootingDictionary.createSystemSps(tc);
+		bootingDictionary.updateMetadataSPSes(tc);
 
 		/*
 		 * OLD Cloudscape 5.1 upgrade code, Derby does not support
@@ -450,6 +449,14 @@ private void handleMinorRevisionChange(TransactionController tc, DD_Version from
 		boolean isReadOnly = bootingDictionary.af.isReadOnly();
 
 		if (!isReadOnly) {
+			// Once a database is version 10.5 we will start updating metadata SPSes
+			// on any version change,up or down.  This will ensure that metadata queries 
+			// match the version we are using.  We don't want to do this for lower 
+			// database versions because on reverting to the previous version the 
+			// SPSes won't be restored.
+			if (fromVersion.majorVersionNumber >= DataDictionary.DD_VERSION_DERBY_10_5)
+				bootingDictionary.updateMetadataSPSes(tc);
+			else
 			bootingDictionary.clearSPSPlans();
 
 			DD_Version lastRun;
@@ -486,48 +493,6 @@ private void handleMinorRevisionChange(TransactionController tc, DD_Version from
 		bootingDictionary.clearCaches();
 	}
 
-	/**
-	 * Drop all jdbc metadata spses.  This
-	 * it to ensure that we don't have any problems
-	 * with old metadata queries that have outdated
-	 * query text (the plans are always cleared out
-	 * on upgrade time).
-	 *
-	 * @param tc the xact
-	 * @param removeSYSIBMonly if <code>true</code>, remove stored
-	 * prepared statements in the SYSIBM schema only; otherwise,
-	 * remove stored prepared statements in all system schemas
-	 * (including SYSIBM)
-	 *
-	 * @exception StandardException  Standard Derby error policy.
-	 */
-	protected void dropJDBCMetadataSPSes(TransactionController tc, boolean removeSYSIBMonly)
-		throws StandardException
-	{
-		for (java.util.Iterator it = bootingDictionary.getAllSPSDescriptors().iterator(); it.hasNext(); )
-		{
-			SPSDescriptor spsd = (SPSDescriptor) it.next();
-			SchemaDescriptor sd = spsd.getSchemaDescriptor();
-			// need to compare the name, old SYSIBM is not built-in
-			boolean isSYSIBM = sd.getSchemaName().equals(SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME);
-
-			// don't drop statements in non-system schemas
-			if (!sd.isSystemSchema() && !isSYSIBM) {
-				continue;
-			}
-
-			// don't drop statements outside the SYSIBM schema if
-			// we're told not to
-			if (removeSYSIBMonly && !isSYSIBM) {
-				continue;
-			}
-
-			bootingDictionary.dropSPSDescriptor(spsd, tc);
-			bootingDictionary.dropDependentsStoredDependencies(spsd.getUUID(),
-															   tc);
-		}
-	}
-
 	/**
  	 * Make a catalog.
 	 *	@param	tc	TransactionController
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index ec090e69..4e0e93b0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -12295,4 +12295,42 @@ public boolean existsGrantToAuthid(String authId,
 				 GRANTEE_COL_NUM_IN_GRANTEE_ALIAS_GRANTOR_INDEX) ||
 			 existsRoleGrantByGrantee(authId, tc));
 	}
+
+
+	/**
+	 * Remove metadata stored prepared statements.
+	 * @param tc the xact
+	 * 
+	 *
+	 */
+	private void dropJDBCMetadataSPSes(TransactionController tc) throws StandardException
+	{
+		for (java.util.Iterator it = getAllSPSDescriptors().iterator(); it.hasNext(); )
+		{
+			SPSDescriptor spsd = (SPSDescriptor) it.next();
+			SchemaDescriptor sd = spsd.getSchemaDescriptor();
+
+			// don't drop statements in non-system schemas
+			if (!sd.isSystemSchema()) {
+				continue;
+			}
+
+			dropSPSDescriptor(spsd, tc);
+			dropDependentsStoredDependencies(spsd.getUUID(),                                                                                                              tc);
+
+		}
+	}
+
+
+	/**
+	 * Drop and recreate metadata stored prepared statements.
+	 * 
+	 * @param tc the xact
+	 * @throws StandardException
+	 */
+	public void updateMetadataSPSes(TransactionController tc) throws StandardException {
+		dropJDBCMetadataSPSes(tc);
+		createSystemSps(tc);		
+	}
+
 }
diff --git a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
index 09980750..52558fa5 100644
--- a/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
+++ b/db/derby/code/trunk/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
@@ -814,4 +814,8 @@ public String getBuiltinVTIClass(TableDescriptor td, boolean asTableFunction) th
         // TODO Auto-generated method stub
         return null;
     }
+
+	public void updateMetadataSPSes(TransactionController tc) throws StandardException {
+		// TODO Auto-generated method stub		
+	}
 }
