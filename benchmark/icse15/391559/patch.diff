diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
index 16b3553d..37cc5c5c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
@@ -311,10 +311,7 @@ private void getCursor() throws StandardException {
 
 			if (cursorActivation != null)
 			{
-				// check we are compiled against the correct cursor
-				PreparedStatement cps = cursorActivation.getPreparedStatement();
 
-				if (psName.equals(cps.getObjectName())) {
 					cursor = cursorActivation.getCursorResultSet();
 					target = cursorActivation.getTargetResultSet();
 					/* beetle 3865: updateable cursor using index. 2 way communication between
@@ -325,13 +322,6 @@ private void getCursor() throws StandardException {
 					if (cursorActivation.getHeapConglomerateController() != null)
 						cursorActivation.getHeapConglomerateController().close();
 					cursorActivation.setHeapConglomerateController(activation.getHeapConglomerateController());
-				} else {
-
-					// our prepared statement is now invalid since there
-					// exists another cursor with the same name but a different
-					// statement.
-					activation.getPreparedStatement().makeInvalid(DependencyManager.CHANGED_CURSOR, lcc);
-				}
 			}
 		}
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
index 09ceb336..d7fb4987 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java
@@ -849,16 +849,12 @@ public void testScrollInsensitiveConcurUpdatableWithoutForUpdate3()
     }
     
     /**
-     * Get a new cursor name. WORKAROUND FOR DERBY-787, since
-     * the cursors have side-effects..!
-     * To reproduce DERBY-787, just return the same cursor name.
+     * Get a cursor name. We use the same cursor name for all cursors.
      */
     private final String getNextCursorName() {
-        return "MYCURSOR" + cursorIndex++;
+        return "MYCURSOR";
     }
     
-    private static int cursorIndex = 0;
-
     
     /**
      * The suite contains all testcases in this class running on different 
