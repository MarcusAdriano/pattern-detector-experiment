diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl.java
index e4c5a484..ac72d5a0 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl.java
@@ -230,7 +230,7 @@ public void addPosition(int position, BytesRef payload) throws IOException {
     assert !omitTF;
 
     final int delta = position - lastPosition;
-    assert delta > 0 || position == 0: "position=" + position + " lastPosition=" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)
+    assert delta >= 0: "position=" + position + " lastPosition=" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)
     lastPosition = position;
 
     if (storePayloads) {
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter.java
index 457e3c24..091afc89 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter.java
@@ -194,7 +194,7 @@ public void addPosition(int position, BytesRef payload) throws IOException {
 
     final int delta = position - lastPosition;
     
-    assert delta > 0 || position == 0: "position=" + position + " lastPosition=" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)
+    assert delta >= 0: "position=" + position + " lastPosition=" + lastPosition;
 
     lastPosition = position;
 
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
index e69de29b..b46c37d9 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
@@ -0,0 +1,82 @@
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.Reader;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestSameTokenSamePosition extends LuceneTestCase {
+
+  /**
+   * Attempt to reproduce an assertion error that happens
+   * only with the trunk version around April 2011.
+   * @param args
+   */
+  public void test() throws Exception {
+    Directory dir = newDirectory();
+    RandomIndexWriter riw = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new BugReproAnalyzer()));
+    Document doc = new Document();
+    doc.add(new Field("eng", "Six drunken" /*This shouldn't matter. */, 
+                      Field.Store.YES, Field.Index.ANALYZED));
+    riw.addDocument(doc);
+    riw.close();
+    dir.close();
+  }
+}
+
+final class BugReproAnalyzer extends Analyzer{
+  @Override
+  public TokenStream tokenStream(String arg0, Reader arg1) {
+    return new BugReproAnalyzerTokenizer();
+  }
+}
+
+final class BugReproAnalyzerTokenizer extends TokenStream {
+  private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+  private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+  private final PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);
+  int tokenCount = 4;
+  int nextTokenIndex = 0;
+  String terms[] = new String[]{"six", "six", "drunken", "drunken"};
+  int starts[] = new int[]{0, 0, 4, 4};
+  int ends[] = new int[]{3, 3, 11, 11};
+  int incs[] = new int[]{1, 0, 1, 0};
+
+  @Override
+  public boolean incrementToken() throws IOException {
+    if (nextTokenIndex < tokenCount) {
+      termAtt.setEmpty().append(terms[nextTokenIndex]);
+      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);
+      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);
+      nextTokenIndex++;
+      return true;			
+    } else {
+      return false;
+    }
+  }
+}
