diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
index cced0599..2552f743 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
@@ -949,40 +949,9 @@ private boolean signatureConvertableFromTo(Class[] fromTypes, Class[] primFromTy
 	protected boolean classConvertableFromTo(Class fromClass, Class toClass, boolean mixTypes) {
 
         //
-        // Don't allow widening of String to Object. Otherwise, the SQL
-        // signature
+        // ANSI rules do not allow widening
         //
-        //    f( a varchar( 10 ) ) returns varchar( 10 )
-        //
-        // will incorrectly match the Java signature
-        //
-        //   public static String f( Object a )
-        //
-        // Also don't allow the widening of BigDecimal to Object. Otherwise, the
-        // SQL signature
-        //
-        //    f( a numeric( 7, 2 ) ) returns numeric( 7, 2 )
-        //
-        // will incorrectly match the Java signature
-        //
-        //   public static BigDecimal f( Object a )
-        //
-        //
-        // For a description of the ANSI signature matching rules, see
-        // DERBY-3652.
-        //
-		if (
-            !(
-              (
-               STRING_TYPE_NAME.equals( fromClass.getName() ) ||
-               BIGDECIMAL_TYPE_NAME.equals( fromClass.getName() )
-               ) && OBJECT_TYPE_NAME.equals( toClass.getName() )
-              ) &&
-            toClass.isAssignableFrom(fromClass)
-            )
-        {            
-			return true;
-		}
+        if ( fromClass.getName().equals( toClass.getName() ) ) { return true; }
 
 		// When comparing two candidate methods to see which one is closer,
 		// we want to mix object type and primitive type, because they could
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
index 8e4c780d..85b36ca6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
 
 /**
  * <p>
@@ -228,6 +229,12 @@ public  void    test_double_Double_Double()
     public  void    test_numeric_BigDecimal_BigDecimal()
         throws Exception
     {
+        //
+        // On small device platforms, this raises an exception in the byte-code
+        // compiler. See DERBY-3697.
+        //
+        if ( JDBC.vmSupportsJSR169() ) { return; }
+        
         declareAndRunFunction
             ( "numeric_BigDecimal_BigDecimal", "numeric( 7, 2 )", new String[] { "numeric( 7, 2 )" }, "12345.67", "12345.67" );
     }
