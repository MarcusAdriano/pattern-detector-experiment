diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java
index 6e8ac64f..274a4ad6 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java
@@ -147,14 +147,6 @@ public void generateExpression(ExpressionClassBuilder acb,
 		** time this method is called.
 		*/
 
-		/*
-		** Save the evaluation of the left operand in a field.
-		** Generated code is:
-		**		(<fieldx> = <leftOperand>)
-		*/
-		LocalField leftOperandSaver = acb.newFieldDeclaration(Modifier.PRIVATE,
-												ClassName.BooleanDataValue);
-
 		/*
 		** See whether the left operand equals the short-circuit value.
 		** Generated code is:
@@ -162,9 +154,16 @@ public void generateExpression(ExpressionClassBuilder acb,
 		*/
 
 		leftOperand.generateExpression(acb, mb);
-		mb.putField(leftOperandSaver);
+		// stack - left
+
+		// put an extra left of the stack for potential
+		// use in the else clause.
+		mb.dup();
+		// stack - left, left
 		mb.push(shortCircuitValue);
+		// stack - left, left, shortcircuit
 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "equals", "boolean", 1);
+		// stack left, result
 
 		/*
 		** Generate the if expression.  This is what accomplishes
@@ -178,6 +177,8 @@ public void generateExpression(ExpressionClassBuilder acb,
 
 		mb.conditionalIf();
 
+		// stack: left
+		
 		/*
 		** Generate the return value if the left operand equals the short-
 		** circuit value.  Generated code calls a static method in the
@@ -187,8 +188,11 @@ public void generateExpression(ExpressionClassBuilder acb,
 		LocalField reusableBoolean = acb.newFieldDeclaration(Modifier.PRIVATE,
 												ClassName.BooleanDataValue);
 
+
 		mb.push(shortCircuitValue);
+		// stack: left, shortcircuit
 		acb.generateDataValue(mb, getTypeCompiler(), reusableBoolean);
+		// stack: left, dvf
 
 
 		mb.startElseCode();
@@ -202,14 +206,34 @@ public void generateExpression(ExpressionClassBuilder acb,
 		**	<fieldx>.<methodName>(<rightOperand>)
 		*/
 
-		mb.getField(leftOperandSaver);
+		// stack: left
+		
+		// we duplicate left here rather than just pop'ing left
+		// in the 'then' clause. pop'ing in the then clause
+		// breaks the current conditional implementation
+		// which is modeling a simple ? : operator.
+		// note that this will leave through either path
+		// an extra left on the stack after the conditional
+		mb.dup();
+		// stack left, left
 
 		rightOperand.generateExpression(acb, mb);
+		// stack: left, left, right
 		mb.upCast(ClassName.BooleanDataValue);
 
 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, methodName, ClassName.BooleanDataValue, 1);
+		// stack: left, result(left op right)
 
 		mb.completeConditional();
+		//	 stack: left, result
+		
+		// remove the extra left on the stack, see the
+		// comments in the else clause.
+		mb.swap();
+		// stack: result, left
+		mb.pop();
+		
+		// stack: result
 	}
 
 	DataTypeDescriptor resolveLogicalBinaryOperator(
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java
index 865787a1..78017046 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java
@@ -338,7 +338,6 @@ public void generateExpression(ExpressionClassBuilder acb,
 		throws StandardException
 	{
 		String		resultTypeName;
-		LocalField	receiverField;
 		String		receiverType;
 
 /*
@@ -353,9 +352,6 @@ public void generateExpression(ExpressionClassBuilder acb,
 		** The receiver is the operand with the higher type precedence.
 		** Like always makes the left the receiver.
 		**
-		** Allocate an object for re-use to hold the receiver.  This is because
-		** the receiver is passed to the method as one of the parameters,
-		** and we don't want to evaluate it twice.
 		*/
 		if (leftOperand.getTypeId().typePrecedence() >
 			rightOperand.getTypeId().typePrecedence())
@@ -371,20 +367,22 @@ public void generateExpression(ExpressionClassBuilder acb,
 		    receiverType = getReceiverInterfaceName();
 
 			/*
-			** Generate (field = <left expression>).  This assignment is
-			** used as the receiver of the method call for this operator,
-			** and the field is used as the left operand:
+			** Generate (with <left expression> only being evaluated once)
 			**
-			**	(field = <left expression>).method(field, <right expression>...)
+			**	<left expression>.method(<left expression>, <right expression>...)
 			*/
-			receiverField =
-				acb.newFieldDeclaration(Modifier.PRIVATE, receiverType);
 
 			leftOperand.generateExpression(acb, mb);
-			mb.putField(receiverField); // method instance
 			mb.cast(receiverType); // cast the method instance
-			mb.getField(receiverField); mb.cast(leftInterfaceType); // first arg with cast
-			rightOperand.generateExpression(acb, mb); mb.cast(rightInterfaceType); // second arg with cast
+			// stack: left
+			
+			mb.dup();
+			mb.cast(leftInterfaceType);
+			// stack: left, left
+			
+			rightOperand.generateExpression(acb, mb);
+			mb.cast(rightInterfaceType); // second arg with cast
+			// stack: left, left, right
 		}
 		else
 		{
@@ -399,20 +397,25 @@ public void generateExpression(ExpressionClassBuilder acb,
 		    receiverType = getReceiverInterfaceName();
 
 			/*
-			** Generate (field = <right expression>).  This assignment is
-			** used as the receiver of the method call for this operator,
-			** and the field is used as the right operand:
+			** Generate (with <right expression> only being evaluated once)
 			**
-			**	(field = <right expression>).method(<left expression>, field...)
+			**	<right expression>.method(<left expression>, <right expression>)
 			*/
-			receiverField =
-				acb.newFieldDeclaration(Modifier.PRIVATE, rightInterfaceType);
 
 			rightOperand.generateExpression(acb, mb);
-			mb.putField(receiverField); // method instance
 			mb.cast(receiverType); // cast the method instance
-			leftOperand.generateExpression(acb, mb); mb.cast(leftInterfaceType); // second arg with cast
-			mb.getField(receiverField); mb.cast(rightInterfaceType); // first arg with cast
+			// stack: right
+			
+			mb.dup();
+			mb.cast(rightInterfaceType);
+			// stack: right,right
+			
+			leftOperand.generateExpression(acb, mb);
+			mb.cast(leftInterfaceType); // second arg with cast
+			// stack: right,right,left
+			
+			mb.swap();
+			// stack: right,left,right			
 		}
 
 		/* Figure out the result type name */
