diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
index 9a8d5145..e3e14441 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
@@ -389,7 +389,7 @@ protected void tearDown() throws Exception {
                 // Destroy the process if a failed shutdown
                 // to avoid hangs running tests as the complete()
                 // waits for the process to complete.
-                spawnedServer.complete(failedShutdown != null);
+                spawnedServer.complete(failedShutdown != null, getWaitTime());
                 spawnedServer = null;
             }
             
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java
index 2e71c1ab..072a163a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java
@@ -126,15 +126,47 @@ public String getFailMessage(String reason) throws InterruptedException
        return sb.toString();
     }
 
+    /*Complete the method
+     * @param destroy true to destroy it, false to wait indefinitely to complete 
+     */
+    public int complete(boolean destroy) throws InterruptedException, IOException {
+        return complete(destroy, -1L);
+    }
+    
     /**
      * Complete the method.
-     * @param destroy True to destroy it, false to wait for it to complete.
+     * @param destroy True to destroy it, false to wait for it to complete 
+     * based on timeout.
+     *  
+     * @param timeout milliseconds to wait until finished or else destroy.
+     * -1 don't timeout
+     *  
      */
-    public int complete(boolean destroy) throws InterruptedException, IOException {
+    public int complete(boolean destroy, long timeout) throws InterruptedException, IOException {
+        int exitCode;
+        if (timeout >= 0 ) {
+            long totalwait = -1;
+            while (totalwait < timeout) {
+               try  { 
+               exitCode = javaProcess.exitValue();
+               //if no exception thrown, exited normally
+               destroy = false;
+               break;
+               }catch (IllegalThreadStateException ite) {
+                   if (totalwait >= timeout) {
+                       destroy = true;
+                       break;
+                   } else {
+                       totalwait += 1000;
+                       Thread.sleep(1000);
+                   }
+               }
+            }
+    	}
         if (destroy)
             javaProcess.destroy();
 
-        int exitCode = javaProcess.waitFor();
+        exitCode = javaProcess.waitFor();
         Thread.sleep(500);
         synchronized (this) {
 
