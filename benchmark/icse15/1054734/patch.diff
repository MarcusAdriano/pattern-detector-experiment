diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
index 4d508c92..23457859 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
@@ -703,30 +703,29 @@ private void    vetDataTypeCount( Connection conn ) throws Exception
         throws Exception
     {
         String  stringValue = "a";
-        byte[]  binaryValue = new byte[] { (byte) 0xde };
         byte    intValue = (byte) 1;
         float   floatValue = 1.0F;
         String lobValue = "abc";
         
         bigintarg[0] = intValue;
-        blobarg[0] = new HarmonySerialBlob( lobValue.getBytes( "UTF-8" ));
+        blobarg[0] = new HarmonySerialBlob( BINARY_VALUE );
         booleanarg[0] = true;
         chararg[0] = stringValue;
-        charforbitdataarg[0] = binaryValue;
+        charforbitdataarg[0] = BINARY_VALUE;
         clobarg[0] = new HarmonySerialClob( lobValue );
         datearg[0]= new Date( 761990400000L );
         doublearg[0] = floatValue;
         floatarg[0] = floatValue;
         intarg[0] = intValue;
         longvarchararg[0] = stringValue;
-        longvarcharforbitdataarg[0] =  binaryValue;
+        longvarcharforbitdataarg[0] =  BINARY_VALUE;
         numericarg[0] = new BigDecimal( "1.0" );
         realarg[0] = floatValue;
         smallintarg[0] = intValue;
         timearg[0] = new Time( 83342000L );
         timestamparg[0] = new Timestamp( -229527385766L );
         varchararg[0] = stringValue;
-        varcharforbitdataarg[0] = binaryValue;
+        varcharforbitdataarg[0] = BINARY_VALUE;
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java
index 5e63ef03..48d021e5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java
@@ -44,6 +44,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.HashMap;
+import org.apache.derby.iapi.types.HarmonySerialBlob;
 import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
 
 import junit.framework.Test;
@@ -1981,9 +1982,9 @@ public  void    testJDBC4_1() throws Exception
         PreparedStatement   ps = prepareStatement
             (
              conn,
-             "create function makeBlob( a varchar( 32670 ) ) returns blob\n" +
+             "create function makeBlob( ) returns blob\n" +
              "language java parameter style java no sql deterministic\n" +
-             "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.blob_Blob_String'\n"
+             "external name 'org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.makeBlob'\n"
              );
         ps.execute();
         ps.close();
@@ -2047,7 +2048,7 @@ public  void    testJDBC4_1() throws Exception
              "values\n" +
              "(\n" +
              "    1,\n" +
-             "    makeBlob( 'abc' ),\n" +
+             "    makeBlob(  ),\n" +
              "    true,\n" +
              "    'a',\n" +
              "    X'DE',\n" +
@@ -2099,5 +2100,15 @@ private void    vetDataTypeCount( Connection conn ) throws Exception
         assertEquals( 22, actualTypeCount );
     }
     
+    /**
+     * <p>
+     * Function for making a Blob.
+     * </p>
+     */
+    public  static  final   Blob    makeBlob()  throws Exception
+    {
+        return new HarmonySerialBlob( BINARY_VALUE );
+    }
+    
 }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java
index d1f47004..1604c83b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java
@@ -60,6 +60,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     private static  final   String  VARIABLE_STRING = "XXXXX";
 
+    public  static  final   byte[]  BINARY_VALUE = new byte[] { (byte) 0xde };
+
+
+
     ///////////////////////////////////////////////////////////////////////
     //
     // STATE
@@ -180,7 +184,7 @@ private void    vetWrappedBlob( Wrapper41 wrapper ) throws Exception
              wrapper,
              2,
              "BLOBCOL",
-             "abc",
+             BINARY_VALUE,
              new Class[] { Blob.class, Object.class, byteArrayClass, String.class,  }
              );
         
@@ -309,7 +313,7 @@ private void    vetWrappedBinary( Wrapper41 wrapper, int colID, String colName )
              wrapper,
              colID,
              colName,
-             "\ufffd",
+             BINARY_VALUE,
              new Class[] { byteArrayClass, Object.class }
              );
         
@@ -505,7 +509,7 @@ private void    vetWrappedTimestamp( Wrapper41 wrapper ) throws Exception
 
     @SuppressWarnings("unchecked")
     private void    vetWrapperOK
-        ( Wrapper41 wrapper, int colID, String colName, String expectedValue, Class[] supportedCoercions )
+        ( Wrapper41 wrapper, int colID, String colName, Object expectedValue, Class[] supportedCoercions )
         throws Exception
     {
         int coercionCount = supportedCoercions.length;
@@ -523,7 +527,7 @@ private void    vetWrappedTimestamp( Wrapper41 wrapper ) throws Exception
         }
     }
     @SuppressWarnings("unchecked")
-    private void    vetCandidate( Class candidate, String expectedValue, Object actualValue )
+    private void    vetCandidate( Class candidate, Object expectedValue, Object actualValue )
         throws Exception
     {
         assertTrue( candidate.getName(), candidate.isAssignableFrom( actualValue.getClass( ) ) );
@@ -534,11 +538,13 @@ private void    vetCandidate( Class candidate, String expectedValue, Object actu
         if ( actualValue instanceof Blob )
         {
             Blob    blob = (Blob) actualValue;
-            actualString = squeezeString( blob.getBytes( 1L, (int) blob.length() ) );
+            vetBytes( (byte[]) expectedValue, blob.getBytes( 1L, (int) blob.length() ) );
+            return;
         }
         else if ( actualValue instanceof byte[] )
         {
-            actualString = squeezeString( (byte[]) actualValue );
+            vetBytes( (byte[]) expectedValue, (byte[]) actualValue );
+            return;
         }
         else if ( actualValue instanceof Clob )
         {
@@ -547,14 +553,17 @@ else if ( actualValue instanceof Clob )
         }
         else { actualString = actualValue.toString(); }
         
-        assertEquals( candidate.getName(), expectedValue, actualString );
+        assertEquals( candidate.getName(), (String) expectedValue, actualString );
     }
-    private String  squeezeString( byte[] bytes ) throws Exception
+    private void    vetBytes( byte[] expected, byte[] actual ) throws Exception
     {
+        int count = expected.length;
         
-        String result = new String( bytes, "UTF-8" );
-
-        return result;
+        assertEquals( count, actual.length );
+        for ( int i = 0; i < count; i++ )
+        {
+            assertEquals( expected[ i ], actual[ i ] );
+        }
     }
     private void    vetNoWrapper
         ( Wrapper41 wrapper, int colID, String colName, Class[] unsupportedCoercions )
