diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 5cb0be38..27f089c3 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -565,6 +565,9 @@ private UpdateHandler createReloadedUpdateHandler(String className, String msg,
     } else if (o instanceof NamedListInitializedPlugin) {
       ((NamedListInitializedPlugin) o).init(info.initArgs);
     }
+    if(o instanceof SearchComponent) {
+      ((SearchComponent) o).setName(info.name);
+    }
     return o;
   }
 
@@ -1170,7 +1173,10 @@ public SolrRequestHandler registerRequestHandler(String handlerName, SolrRequest
     if(!registry.containsKey(name)){
       T searchComp = resourceLoader.newInstance(c.getName(), c);
       if (searchComp instanceof NamedListInitializedPlugin){
-        ((NamedListInitializedPlugin)searchComp).init( new NamedList() );
+        ((NamedListInitializedPlugin)searchComp).init( new NamedList<String>() );
+      }
+      if(searchComp instanceof SearchComponent) {
+        ((SearchComponent)searchComp).setName(name);
       }
       registry.put(name, searchComp);
       if (searchComp instanceof SolrInfoMBean){
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
index 0a5ed2ff..a270a417 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
@@ -21,7 +21,6 @@
 import java.net.URL;
 
 import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.core.SolrInfoMBean;
 import org.apache.solr.util.plugin.NamedListInitializedPlugin;
 
@@ -33,6 +32,10 @@
  */
 public abstract class SearchComponent implements SolrInfoMBean, NamedListInitializedPlugin
 {
+  /**
+   * The name given to this component in solrconfig.xml file
+   */
+  private String name = this.getClass().getName();
   /**
    * Prepare the response.  Guaranteed to be called before any SearchComponent {@link #process(org.apache.solr.handler.component.ResponseBuilder)} method.
    * Called for every incoming request.
@@ -72,6 +75,14 @@ public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {
   public void finishStage(ResponseBuilder rb) {
   }
 
+  /**
+   * Sets the name of the SearchComponent. The name of the component is usually
+   * the name defined for it in the configuration.
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+
 
   //////////////////////// NamedListInitializedPlugin methods //////////////////////
   @Override
@@ -84,7 +95,7 @@ public void init( NamedList args )
 
   @Override
   public String getName() {
-    return this.getClass().getName();
+    return name;
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java
index 5cf8a2af..65889e2f 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java
@@ -229,10 +229,10 @@ public void testInfoRegistry() throws Exception {
     Map<String, SolrInfoMBean> infoRegistry = core.getInfoRegistry();
     assertTrue("infoRegistry Size: " + infoRegistry.size() + " is not greater than: " + 0, infoRegistry.size() > 0);
     //try out some that we know are in the config
-    SolrInfoMBean bean = infoRegistry.get(SpellCheckComponent.class.getName());
+    SolrInfoMBean bean = infoRegistry.get(SpellCheckComponent.COMPONENT_NAME);
     assertNotNull("bean not registered", bean);
     //try a default one
-    bean = infoRegistry.get(QueryComponent.class.getName());
+    bean = infoRegistry.get(QueryComponent.COMPONENT_NAME);
     assertNotNull("bean not registered", bean);
     //try a Req Handler, which are stored by name, not clas
     bean = infoRegistry.get("standard");
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/MockSearchComponent.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/MockSearchComponent.java
index e69de29b..0c3ae674 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/MockSearchComponent.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/MockSearchComponent.java
@@ -0,0 +1,39 @@
+package org.apache.solr.search;
+
+import java.io.IOException;
+
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.handler.component.ResponseBuilder;
+import org.apache.solr.handler.component.SearchComponent;
+
+public class MockSearchComponent extends SearchComponent {
+  
+  private String testParam = null;
+  
+  @Override
+  public void init(NamedList args) {
+    super.init(args);
+    testParam = (String) args.get("testParam");
+  }
+
+  @Override
+  public void prepare(ResponseBuilder rb) throws IOException {
+    
+  }
+
+  @Override
+  public void process(ResponseBuilder rb) throws IOException {
+    rb.rsp.add(this.getName(), this.testParam);
+  }
+
+  @Override
+  public String getDescription() {
+    return "Mock search component for tests";
+  }
+
+  @Override
+  public String getSource() {
+    return "";
+  }
+  
+}
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestComponentsName.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestComponentsName.java
index e69de29b..a704379f 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestComponentsName.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestComponentsName.java
@@ -0,0 +1,56 @@
+package org.apache.solr.search;
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.handler.component.DebugComponent;
+import org.apache.solr.handler.component.FacetComponent;
+import org.apache.solr.handler.component.MoreLikeThisComponent;
+import org.apache.solr.handler.component.QueryComponent;
+import org.apache.solr.handler.component.StatsComponent;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class TestComponentsName extends SolrTestCaseJ4{
+  
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-components-name.xml","schema.xml");
+  }
+  
+  @Override
+  public void tearDown() throws Exception {
+    super.tearDown();
+    assertU(delQ("*:*"));
+    assertU((commit()));
+  }
+  
+  
+  @Test
+  public void testComponentsName() {
+    assertU(adoc("id", "0", "name", "Zapp Brannigan"));
+    assertU(adoc("id", "1", "name", "The Zapper"));
+    assertU((commit()));
+    
+    assertQ("match all docs query",
+        req("q","*:*")
+        ,"//result[@numFound='2']",
+        "/response/str[@name='component1'][.='foo']", 
+        "/response/str[@name='component2'][.='bar']");
+    
+    assertQ("use debugQuery",
+        req("q","*:*",
+            "debugQuery", "true")
+        ,"//result[@numFound='2']",
+        "/response/str[@name='component1'][.='foo']", 
+        "/response/str[@name='component2'][.='bar']",
+        "/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='component1']",
+        "/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='" + QueryComponent.COMPONENT_NAME + "']",
+        "/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='" + FacetComponent.COMPONENT_NAME + "']",
+        "/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='" + MoreLikeThisComponent.COMPONENT_NAME + "']",
+        "/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='" + StatsComponent.COMPONENT_NAME + "']",
+        "/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='" + DebugComponent.COMPONENT_NAME + "']",
+        "/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='component2']");
+  }
+  
+}
+
+
