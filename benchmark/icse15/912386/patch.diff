diff --git a/lucene/java/trunk/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java b/lucene/java/trunk/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
index cda224a2..217600a7 100644
--- a/lucene/java/trunk/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
+++ b/lucene/java/trunk/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
@@ -27,6 +27,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
@@ -36,6 +37,7 @@
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.function.CustomScoreQuery;
+import org.apache.lucene.search.function.CustomScoreProvider;
 import org.apache.lucene.search.function.FieldScoreQuery;
 import org.apache.lucene.search.function.FieldScoreQuery.Type;
 import org.apache.lucene.spatial.geohash.GeoHashUtils;
@@ -189,6 +191,9 @@ public void testAntiM() throws IOException, InvalidGeoException {
     CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){
 
       @Override
+      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {
+        return new CustomScoreProvider(reader) {
+          @Override // TODO: broken, as reader is not used!
       public float customScore(int doc, float subQueryScore, float valSrcScore){
         System.out.println(doc);
         if (dq.distanceFilter.getDistance(doc) == null)
@@ -203,6 +208,9 @@ public float customScore(int doc, float subQueryScore, float valSrcScore){
         float score = (float) ((miles - distance) / miles );
         return score * subQueryScore;
       }
+    };
+      }
+      
     };
     // Create a distance sort
     // As the radius filter has performed the distance calculations
@@ -276,6 +284,9 @@ public void testPoleFlipping() throws IOException, InvalidGeoException {
     CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){
 
       @Override
+      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {
+        return new CustomScoreProvider(reader) {
+          @Override // TODO: broken, as reader is not used!
       public float customScore(int doc, float subQueryScore, float valSrcScore){
         System.out.println(doc);
         if (dq.distanceFilter.getDistance(doc) == null)
@@ -290,6 +301,9 @@ public float customScore(int doc, float subQueryScore, float valSrcScore){
         float score = (float) ((miles - distance) / miles );
         return score * subQueryScore;
       }
+    };
+      }
+      
     };
     // Create a distance sort
     // As the radius filter has performed the distance calculations
@@ -363,8 +377,10 @@ public void testRange() throws IOException, InvalidGeoException {
       FieldScoreQuery fsQuery = new FieldScoreQuery("geo_distance", Type.FLOAT);
     
       CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){
-      
           @Override
+        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {
+          return new CustomScoreProvider(reader) {
+            @Override // TODO: broken, as reader is not used!
             public float customScore(int doc, float subQueryScore, float valSrcScore){
             //System.out.println(doc);
             if (dq.distanceFilter.getDistance(doc) == null)
@@ -380,6 +396,8 @@ public float customScore(int doc, float subQueryScore, float valSrcScore){
             return score * subQueryScore;
           }
         };
+        }
+      };
       // Create a distance sort
       // As the radius filter has performed the distance calculations
       // already, pass in the filter to reuse the results.
@@ -452,8 +470,10 @@ public void testGeoHashRange() throws IOException, InvalidGeoException {
 	    
       FieldScoreQuery fsQuery = new FieldScoreQuery("geo_distance", Type.FLOAT);
       CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){
-	      
           @Override
+        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {
+          return new CustomScoreProvider(reader) {
+              @Override // TODO: broken, as reader is not used!
             public float customScore(int doc, float subQueryScore, float valSrcScore){
             //System.out.println(doc);
             if (dq.distanceFilter.getDistance(doc) == null)
@@ -469,6 +489,8 @@ public float customScore(int doc, float subQueryScore, float valSrcScore){
             return score * subQueryScore;
           }
         };
+        }
+      };
       // Create a distance sort
       // As the radius filter has performed the distance calculations
       // already, pass in the filter to reuse the results.
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreProvider.java b/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreProvider.java
index e69de29b..7557dbb6 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreProvider.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreProvider.java
@@ -0,0 +1,163 @@
+package org.apache.lucene.search.function;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.ComplexExplanation;
+import org.apache.lucene.search.Explanation;
+import org.apache.lucene.search.FieldCache; // for javadocs
+
+/**
+ * An instance of this subclass should be returned by
+ * {@link CustomScoreQuery#getCustomScoreProvider}, if you want
+ * to modify the custom score calculation of a {@link CustomScoreQuery}.
+ * <p>Since Lucene 2.9, queries operate on each segment of an index separately,
+ * so the protected {@link #reader} field can be used to resolve doc IDs,
+ * as the supplied <code>doc</code> ID is per-segment and without knowledge
+ * of the IndexReader you cannot access the document or {@link FieldCache}.
+ * 
+ * @lucene.experimental
+ * @since 2.9.2
+ */
+public class CustomScoreProvider {
+
+  protected final IndexReader reader;
+
+  /**
+   * Creates a new instance of the provider class for the given {@link IndexReader}.
+   */
+  public CustomScoreProvider(IndexReader reader) {
+    this.reader = reader;
+  }
+
+  /**
+   * Compute a custom score by the subQuery score and a number of 
+   * {@link ValueSourceQuery} scores.
+   * <p> 
+   * Subclasses can override this method to modify the custom score.  
+   * <p>
+   * If your custom scoring is different than the default herein you 
+   * should override at least one of the two customScore() methods.
+   * If the number of ValueSourceQueries is always &lt; 2 it is 
+   * sufficient to override the other 
+   * {@link #customScore(int, float, float) customScore()} 
+   * method, which is simpler. 
+   * <p>
+   * The default computation herein is a multiplication of given scores:
+   * <pre>
+   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...
+   * </pre>
+   * 
+   * @param doc id of scored doc. 
+   * @param subQueryScore score of that doc by the subQuery.
+   * @param valSrcScores scores of that doc by the ValueSourceQuery.
+   * @return custom score.
+   */
+  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {
+    if (valSrcScores.length == 1) {
+      return customScore(doc, subQueryScore, valSrcScores[0]);
+    }
+    if (valSrcScores.length == 0) {
+      return customScore(doc, subQueryScore, 1);
+    }
+    float score = subQueryScore;
+    for(int i = 0; i < valSrcScores.length; i++) {
+      score *= valSrcScores[i];
+    }
+    return score;
+  }
+
+  /**
+   * Compute a custom score by the subQuery score and the ValueSourceQuery score.
+   * <p> 
+   * Subclasses can override this method to modify the custom score.
+   * <p>
+   * If your custom scoring is different than the default herein you 
+   * should override at least one of the two customScore() methods.
+   * If the number of ValueSourceQueries is always &lt; 2 it is 
+   * sufficient to override this customScore() method, which is simpler. 
+   * <p>
+   * The default computation herein is a multiplication of the two scores:
+   * <pre>
+   *     ModifiedScore = subQueryScore * valSrcScore
+   * </pre>
+   *
+   * @param doc id of scored doc. 
+   * @param subQueryScore score of that doc by the subQuery.
+   * @param valSrcScore score of that doc by the ValueSourceQuery.
+   * @return custom score.
+   */
+  public float customScore(int doc, float subQueryScore, float valSrcScore) throws IOException {
+    return subQueryScore * valSrcScore;
+  }
+
+  /**
+   * Explain the custom score.
+   * Whenever overriding {@link #customScore(int, float, float[])}, 
+   * this method should also be overridden to provide the correct explanation
+   * for the part of the custom scoring.
+   *  
+   * @param doc doc being explained.
+   * @param subQueryExpl explanation for the sub-query part.
+   * @param valSrcExpls explanation for the value source part.
+   * @return an explanation for the custom score
+   */
+  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {
+    if (valSrcExpls.length == 1) {
+      return customExplain(doc, subQueryExpl, valSrcExpls[0]);
+    }
+    if (valSrcExpls.length == 0) {
+      return subQueryExpl;
+    }
+    float valSrcScore = 1;
+    for (int i = 0; i < valSrcExpls.length; i++) {
+      valSrcScore *= valSrcExpls[i].getValue();
+    }
+    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), "custom score: product of:");
+    exp.addDetail(subQueryExpl);
+    for (int i = 0; i < valSrcExpls.length; i++) {
+      exp.addDetail(valSrcExpls[i]);
+    }
+    return exp;
+  }
+  
+  /**
+   * Explain the custom score.
+   * Whenever overriding {@link #customScore(int, float, float)}, 
+   * this method should also be overridden to provide the correct explanation
+   * for the part of the custom scoring.
+   *  
+   * @param doc doc being explained.
+   * @param subQueryExpl explanation for the sub-query part.
+   * @param valSrcExpl explanation for the value source part.
+   * @return an explanation for the custom score
+   */
+  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {
+    float valSrcScore = 1;
+    if (valSrcExpl != null) {
+      valSrcScore *= valSrcExpl.getValue();
+    }
+    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), "custom score: product of:");
+    exp.addDetail(subQueryExpl);
+    exp.addDetail(valSrcExpl);
+    return exp;
+  }
+
+}
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
index 0185447e..4d15e371 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
@@ -42,7 +42,7 @@
  *        For most simple/convenient use cases this query is likely to be a 
  *        {@link org.apache.lucene.search.function.FieldScoreQuery FieldScoreQuery}</li>
  * </ol>
- * Subclasses can modify the computation by overriding {@link #customScore(int, float, float)}.
+ * Subclasses can modify the computation by overriding {@link #getCustomScoreProvider}.
  * 
  * @lucene.experimental
  */
@@ -82,7 +82,6 @@ public CustomScoreQuery(Query subQuery, ValueSourceQuery valSrcQuery) {
    * This parameter is optional - it can be null or even an empty array.
    */
   public CustomScoreQuery(Query subQuery, ValueSourceQuery... valSrcQueries) {
-    super();
     this.subQuery = subQuery;
     this.valSrcQueries = valSrcQueries!=null?
         valSrcQueries : new ValueSourceQuery[0];
@@ -92,11 +91,23 @@ public CustomScoreQuery(Query subQuery, ValueSourceQuery... valSrcQueries) {
   /*(non-Javadoc) @see org.apache.lucene.search.Query#rewrite(org.apache.lucene.index.IndexReader) */
   @Override
   public Query rewrite(IndexReader reader) throws IOException {
-    subQuery = subQuery.rewrite(reader);
+    CustomScoreQuery clone = null;
+    
+    final Query sq = subQuery.rewrite(reader);
+    if (sq != subQuery) {
+      clone = (CustomScoreQuery) clone();
+      clone.subQuery = sq;
+    }
+
     for(int i = 0; i < valSrcQueries.length; i++) {
-      valSrcQueries[i] = (ValueSourceQuery) valSrcQueries[i].rewrite(reader);
+      final ValueSourceQuery v = (ValueSourceQuery) valSrcQueries[i].rewrite(reader);
+      if (v != valSrcQueries[i]) {
+        if (clone == null) clone = (CustomScoreQuery) clone();
+        clone.valSrcQueries[i] = v;
+      }
     }
-    return this;
+    
+    return (clone == null) ? this : clone;
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.Query#extractTerms(java.util.Set) */
@@ -141,7 +152,8 @@ public boolean equals(Object o) {
     }
     CustomScoreQuery other = (CustomScoreQuery)o;
     if (this.getBoost() != other.getBoost() ||
-        !this.subQuery.equals(other.subQuery)||
+        !this.subQuery.equals(other.subQuery) ||
+        this.strict != other.strict ||
         this.valSrcQueries.length != other.valSrcQueries.length) {
       return false;
     }
@@ -152,132 +164,17 @@ public boolean equals(Object o) {
   @Override
   public int hashCode() {
     return (getClass().hashCode() + subQuery.hashCode() + Arrays.hashCode(valSrcQueries))
-      ^ Float.floatToIntBits(getBoost());
-  }  
-  
-  /**
-   * Compute a custom score by the subQuery score and a number of 
-   * ValueSourceQuery scores.
-   * <p> 
-   * Subclasses can override this method to modify the custom score.  
-   * <p>
-   * If your custom scoring is different than the default herein you 
-   * should override at least one of the two customScore() methods.
-   * If the number of ValueSourceQueries is always &lt; 2 it is 
-   * sufficient to override the other 
-   * {@link #customScore(int, float, float) customScore()} 
-   * method, which is simpler. 
-   * <p>
-   * The default computation herein is a multiplication of given scores:
-   * <pre>
-   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...
-   * </pre>
-   * 
-   * @param doc id of scored doc. 
-   * @param subQueryScore score of that doc by the subQuery.
-   * @param valSrcScores scores of that doc by the ValueSourceQuery.
-   * @return custom score.
-   */
-  public float customScore(int doc, float subQueryScore, float valSrcScores[]) {
-    if (valSrcScores.length == 1) {
-      return customScore(doc, subQueryScore, valSrcScores[0]);
-    }
-    if (valSrcScores.length == 0) {
-      return customScore(doc, subQueryScore, 1);
-    }
-    float score = subQueryScore;
-    for(int i = 0; i < valSrcScores.length; i++) {
-      score *= valSrcScores[i];
-    }
-    return score;
-  }
-
-  /**
-   * Compute a custom score by the subQuery score and the ValueSourceQuery score.
-   * <p> 
-   * Subclasses can override this method to modify the custom score.
-   * <p>
-   * If your custom scoring is different than the default herein you 
-   * should override at least one of the two customScore() methods.
-   * If the number of ValueSourceQueries is always &lt; 2 it is 
-   * sufficient to override this customScore() method, which is simpler. 
-   * <p>
-   * The default computation herein is a multiplication of the two scores:
-   * <pre>
-   *     ModifiedScore = subQueryScore * valSrcScore
-   * </pre>
-   *
-   * <p><b>NOTE</b>: The doc is relative to the current
-   * reader, last passed to {@link #setNextReader}.
-   * 
-   * @param doc id of scored doc. 
-   * @param subQueryScore score of that doc by the subQuery.
-   * @param valSrcScore score of that doc by the ValueSourceQuery.
-   * @return custom score.
-   */
-  public float customScore(int doc, float subQueryScore, float valSrcScore) {
-    return subQueryScore * valSrcScore;
-  }
-
-  /**
-   * Called when the scoring switches to another reader.
-   * 
-   * @param reader
-   *          next IndexReader
-   */
-  public void setNextReader(IndexReader reader) throws IOException {
-  }
-
-  /**
-   * Explain the custom score.
-   * Whenever overriding {@link #customScore(int, float, float[])}, 
-   * this method should also be overridden to provide the correct explanation
-   * for the part of the custom scoring.
-   *  
-   * @param doc doc being explained.
-   * @param subQueryExpl explanation for the sub-query part.
-   * @param valSrcExpls explanation for the value source part.
-   * @return an explanation for the custom score
-   */
-  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {
-    if (valSrcExpls.length == 1) {
-      return customExplain(doc, subQueryExpl, valSrcExpls[0]);
-    }
-    if (valSrcExpls.length == 0) {
-      return subQueryExpl;
-    }
-    float valSrcScore = 1;
-    for (int i = 0; i < valSrcExpls.length; i++) {
-      valSrcScore *= valSrcExpls[i].getValue();
-    }
-    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), "custom score: product of:");
-    exp.addDetail(subQueryExpl);
-    for (int i = 0; i < valSrcExpls.length; i++) {
-      exp.addDetail(valSrcExpls[i]);
-    }
-    return exp;
+      ^ Float.floatToIntBits(getBoost()) ^ (strict ? 1234 : 4321);
   }
 
   /**
-   * Explain the custom score.
-   * Whenever overriding {@link #customScore(int, float, float)}, 
-   * this method should also be overridden to provide the correct explanation
-   * for the part of the custom scoring.
-   *  
-   * @param doc doc being explained.
-   * @param subQueryExpl explanation for the sub-query part.
-   * @param valSrcExpl explanation for the value source part.
-   * @return an explanation for the custom score
+   * Returns a {@link CustomScoreProvider} that calculates the custom scores
+   * for the given {@link IndexReader}. The default implementation returns a default
+   * implementation as specified in the docs of {@link CustomScoreProvider}.
+   * @since 2.9.2
    */
-  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {
-    float valSrcScore = 1;
-    if (valSrcExpl != null) {
-      valSrcScore *= valSrcExpl.getValue();
-    }
-    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), "custom score: product of:");
-    exp.addDetail(subQueryExpl);
-    exp.addDetail(valSrcExpl);
-    return exp;
+  protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) throws IOException {
+    return new CustomScoreProvider(reader);
   }
 
   //=========================== W E I G H T ============================
@@ -373,7 +270,7 @@ private Explanation doExplain(IndexReader reader, int doc) throws IOException {
       for(int i = 0; i < valSrcWeights.length; i++) {
         valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);
       }
-      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);
+      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(reader).customExplain(doc,subQueryExpl,valSrcExpls);
       float sc = getValue() * customExp.getValue();
       Explanation res = new ComplexExplanation(
         true, sc, CustomScoreQuery.this.toString() + ", product of:");
@@ -400,6 +297,7 @@ public boolean scoresDocsOutOfOrder() {
     private Scorer subQueryScorer;
     private Scorer[] valSrcScorers;
     private IndexReader reader;
+    private final CustomScoreProvider provider;
     private float vScores[]; // reused in score() to avoid allocating this array for each doc 
 
     // constructor
@@ -411,7 +309,7 @@ private CustomScorer(Similarity similarity, IndexReader reader, CustomWeight w,
       this.valSrcScorers = valSrcScorers;
       this.reader = reader;
       this.vScores = new float[valSrcScorers.length];
-      setNextReader(reader);
+      this.provider = CustomScoreQuery.this.getCustomScoreProvider(reader);
     }
 
     @Override
@@ -436,7 +334,7 @@ public float score() throws IOException {
       for (int i = 0; i < valSrcScorers.length; i++) {
         vScores[i] = valSrcScorers[i].score();
       }
-      return qWeight * customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);
+      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);
     }
 
     @Override
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.java b/lucene/java/trunk/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.java
index 2627e9af..5611ce1c 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.java
@@ -33,7 +33,6 @@
 /**
  * Test CustomScoreQuery search.
  */
-@SuppressWarnings({"MagicNumber"})
 public class TestCustomScoreQuery extends FunctionTestSetup {
 
   /* @override constructor */
@@ -97,13 +96,14 @@ public String name() {
       return "customAdd";
     }
 
-    /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */
+    @Override
+    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {
+      return new CustomScoreProvider(reader) {
     @Override
     public float customScore(int doc, float subQueryScore, float valSrcScore) {
       return subQueryScore + valSrcScore;
     }
 
-    /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/
     @Override
     public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {
       float valSrcScore = valSrcExpl == null ? 0 : valSrcExpl.getValue();
@@ -114,6 +114,8 @@ public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation
       }
       return exp;
     }
+      };
+    }
   }
 
   // must have static class otherwise serialization tests fail
@@ -130,7 +132,9 @@ public String name() {
       return "customMulAdd";
     }
 
-    /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */
+    @Override
+    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {
+      return new CustomScoreProvider(reader) {
     @Override
     public float customScore(int doc, float subQueryScore, float valSrcScores[]) {
       if (valSrcScores.length == 0) {
@@ -144,7 +148,6 @@ public float customScore(int doc, float subQueryScore, float valSrcScores[]) {
       return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two
     }
 
-    /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/
     @Override
     public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {
       if (valSrcExpls.length == 0) {
@@ -162,20 +165,22 @@ public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation
       exp2.addDetail(exp);
       return exp2;
     }
+      };
+    }
   }
 
   private final class CustomExternalQuery extends CustomScoreQuery {
-    private IndexReader reader;
-    private int[] values;
 
-    public float customScore(int doc, float subScore, float valSrcScore) {
+    @Override
+    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) throws IOException {
+      final int[] values = FieldCache.DEFAULT.getInts(reader, INT_FIELD);
+      return new CustomScoreProvider(reader) {
+        @Override
+        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {
       assertTrue(doc <= reader.maxDoc());
       return (float) values[doc];
     }
-
-    public void setNextReader(IndexReader r) throws IOException {
-      reader = r;
-      values = FieldCache.DEFAULT.getInts(r, INT_FIELD);
+      };
     }
 
     public CustomExternalQuery(Query q) {
