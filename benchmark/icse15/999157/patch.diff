diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/CgLibProxyFactory.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/CgLibProxyFactory.java
index 8e250e09..84350a50 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/CgLibProxyFactory.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/CgLibProxyFactory.java
@@ -19,6 +19,7 @@
 package org.apache.aries.jndi.services;
 
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
 
@@ -31,7 +32,7 @@
 public class CgLibProxyFactory implements ProxyFactory {
 
     public Object createProxy(final Bundle bundle,
-                              final Class[] classes,
+                              final List<Class<?>> classes,
                               final Callable<Object> dispatcher) {
         Enhancer e = new Enhancer();
         e.setClassLoader(new CgLibClassLoader(bundle));
@@ -47,7 +48,7 @@ public Object loadObject() throws Exception {
         return e.create();
     }
 
-    private static Class<?>[] getInterfaces(Class<?>[] classes) {
+    private static Class<?>[] getInterfaces(List<Class<?>> classes) {
         Set<Class<?>> interfaces = new HashSet<Class<?>>();
         for (Class<?> clazz : classes) {
             if (clazz.isInterface()) {
@@ -57,7 +58,7 @@ public Object loadObject() throws Exception {
         return interfaces.toArray(new Class[interfaces.size()]);
     }
 
-    protected Class<?> getTargetClass(Class<?>[] interfaceNames) {
+    protected Class<?> getTargetClass(List<Class<?>> interfaceNames) {
         // Only allow class proxying if specifically asked to
         Class<?> root = Object.class;
         for (Class<?> clazz : interfaceNames) {
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/JdkProxyFactory.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/JdkProxyFactory.java
index 395d1c22..20e73a20 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/JdkProxyFactory.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/JdkProxyFactory.java
@@ -22,6 +22,8 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
+import java.util.Iterator;
+import java.util.List;
 import java.util.concurrent.Callable;
 
 import org.apache.aries.util.BundleToClassLoaderAdapter;
@@ -30,9 +32,15 @@
 public class JdkProxyFactory implements ProxyFactory {
 
     public Object createProxy(final Bundle bundle,
-                              final Class[] classes,
+                              final List<Class<?>> classes,
                               final Callable<Object> dispatcher) {
-        return Proxy.newProxyInstance(new BundleToClassLoaderAdapter(bundle), classes,
+      
+        Iterator<Class<?>> it = classes.iterator();
+        while (it.hasNext()) {
+            if (it.next().isInterface()) it.remove();
+        }
+        
+        return Proxy.newProxyInstance(new BundleToClassLoaderAdapter(bundle), classes.toArray(new Class[classes.size()]),
                 new InvocationHandler() {
                     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                         try {
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ProxyFactory.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ProxyFactory.java
index 845ac3d5..4644cfa2 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ProxyFactory.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ProxyFactory.java
@@ -18,12 +18,13 @@
  */
 package org.apache.aries.jndi.services;
 
+import java.util.List;
 import java.util.concurrent.Callable;
 
 import org.osgi.framework.Bundle;
 
 public interface ProxyFactory {
 
-    Object createProxy(Bundle bundle, Class[] classes, Callable<Object> dispatcher);
+    Object createProxy(Bundle bundle, List<Class<?>> classes, Callable<Object> dispatcher);
 
 }
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
index 93dc5464..9b158327 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
@@ -334,9 +334,8 @@ private static Object proxyPriviledged(String interface1, String filter, boolean
     // wrapping the service provider bundle. The class is actually defined
     // on this adapter.
 
-    Class[] classArray = clazz.toArray(new Class[clazz.size()]);
     try {
-      return proxyFactory.createProxy(serviceProviderBundle, classArray, ih);
+      return proxyFactory.createProxy(serviceProviderBundle, clazz, ih);
     } catch (IllegalArgumentException e) {
       throw e;
     } catch (RuntimeException e) {
@@ -434,7 +433,7 @@ protected static synchronized ProxyFactory getProxyFactory() {
       try {
         // Try load load a cglib class (to make sure it's actually available
         // then create the cglib factory
-        ServiceHelper.class.getClassLoader().loadClass("net.sf.cglib.proxy.Enhancer");
+        Class.forName("net.sf.cglib.proxy.Enhancer");
         proxyFactory = new CgLibProxyFactory();
       } catch (Throwable t) {
         proxyFactory = new JdkProxyFactory();
