diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java
index 4b5e5d4b..43d67e89 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/CPFile.java
@@ -26,7 +26,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.net.URL;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 
 /**
  * This class provides a class path based implementation of the StorageFile interface. It is used by the
@@ -90,29 +95,21 @@ StorageFile getParentDir( int pathLen)
      */
     public InputStream getInputStream( ) throws FileNotFoundException
     {
-    	//System.out.println("HERE FOR " + toString());
-    	InputStream is = null;
-    	ClassLoader cl = Thread.currentThread().getContextClassLoader();
-    	if (cl != null)
-    		is = cl.getResourceAsStream(path);
+        URL url = getURL();
     	
-       	// don't assume the context class loader is tied
-    	// into the class loader that loaded this class.
-    	if (is == null)
-    	{
-    		cl = getClass().getClassLoader();
-    		// Javadoc indicates implementations can use
-    		// null as a return from Class.getClassLoader()
-    		// to indicate the system/bootstrap classloader.
-    		if (cl != null)
-    			is = cl.getResourceAsStream(path);
-    		else
-    			is = ClassLoader.getSystemResourceAsStream(path);
+        if (url == null) {
+            throw new FileNotFoundException(toString());
     	}
     	
-    	if (is == null)
-    		throw new FileNotFoundException(toString());
-    	return is;
+        try {
+            return openStream(url);
+        } catch (FileNotFoundException fnf) {
+            throw fnf;
+        } catch (IOException ioe) {
+            FileNotFoundException fnf = new FileNotFoundException(toString());
+            fnf.initCause(ioe);
+            throw fnf;
+        }
     	
     } // end of getInputStream
     
@@ -123,10 +120,10 @@ public InputStream getInputStream( ) throws FileNotFoundException
      */
     public URL getURL() {
 
-        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        ClassLoader cl = getContextClassLoader(Thread.currentThread());
         URL myURL;
         if (cl != null) {
-            myURL = cl.getResource(path);
+            myURL = getResource(cl, path);
             if (myURL != null)
                 return myURL;
         }
@@ -138,9 +135,51 @@ public URL getURL() {
         // null as a return from Class.getClassLoader()
         // to indicate the system/bootstrap classloader.
         if (cl != null) {
-            return cl.getResource(path);
+            return getResource(cl, path);
         } else {
-            return ClassLoader.getSystemResource(path);
+            return getSystemResource(path);
+        }
+    }
+
+    /** Privileged wrapper for {@code Thread.getContextClassLoader()}. */
+    private static ClassLoader getContextClassLoader(final Thread thread) {
+        return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
+            public ClassLoader run() {
+                return thread.getContextClassLoader();
+            }
+        });
+    }
+
+    /** Privileged wrapper for {@code ClassLoader.getResource(String)}. */
+    private static URL getResource(
+            final ClassLoader cl, final String name) {
+        return AccessController.doPrivileged(new PrivilegedAction<URL>() {
+            public URL run() {
+                return cl.getResource(name);
+            }
+        });
+    }
+
+    /** Privileged wrapper for {@code ClassLoader.getSystemResource(String)}. */
+    private static URL getSystemResource(final String name) {
+        return AccessController.doPrivileged(new PrivilegedAction<URL>() {
+            public URL run() {
+                return ClassLoader.getSystemResource(name);
+            }
+        });
+    }
+
+    /** Privileged wrapper for {@code URL.openStream()}. */
+    private static InputStream openStream(final URL url) throws IOException {
+        try {
+            return AccessController.doPrivileged(
+                    new PrivilegedExceptionAction<InputStream>() {
+                public InputStream run() throws IOException {
+                    return url.openStream();
+                }
+            });
+        } catch (PrivilegedActionException pae) {
+            throw (IOException) pae.getCause();
         }
     }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index 21f79279..60629d9c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -44,6 +44,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.ClasspathSetup;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
@@ -114,17 +115,15 @@ public static Test suite() throws Exception
                 suite.addTest(new DatabaseClassLoadingTest(orderedTests[i]));
             }
        
-           suite.addTest(SecurityManagerSetup.noSecurityManager(
-                   new DatabaseClassLoadingTest("testDatabaseInJar"))); 
+            suite.addTest(new DatabaseClassLoadingTest("testDatabaseInJar"));
 
             // DERBY-2162: Only run this test case on platforms that support
             // the URLClassLoader.close() method. Otherwise, we won't be able
             // to delete the jar file afterwards.
             if (ClasspathSetup.supportsClose()) {
-                suite.addTest(SecurityManagerSetup.noSecurityManager(
-                    new ClasspathSetup(
+                suite.addTest(new ClasspathSetup(
                         new DatabaseClassLoadingTest("testDatabaseInClasspath"),
-                        SupportFilesSetup.getReadOnlyURL("dclt.jar"))));
+                        SupportFilesSetup.getReadOnlyURL("dclt.jar")));
             }
            
            // No security manager because the test uses getClass().getClassLoader()
@@ -638,7 +637,8 @@ public Void run() throws Exception {
     public void testDatabaseInJar() throws SQLException
     {
         File jarFile = SupportFilesSetup.getReadOnly("dclt.jar");
-        String dbName = "jar:(" + jarFile.getAbsolutePath() + ")dbro";
+        String dbName = "jar:(" +
+                PrivilegedFileOpsForTests.getAbsolutePath(jarFile) + ")dbro";
         
         DataSource ds = JDBCDataSource.getDataSource(dbName);
         
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java
index 32cc2fd6..691902fb 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java
@@ -37,7 +37,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.DatabaseChangeSetup;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.JDBCDataSource;
-import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.SupportFilesSetup;
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
@@ -73,9 +72,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private static  final   boolean DISABLE_AUTHORIZATION = true;
     private static  final   boolean DONT_DISABLE_AUTH = false;
     
-    private static  final   boolean DISABLE_JAVA_SECURITY = true;
-    private static  final   boolean ENABLE_JAVA_SECURITY = false;
-    
     // fruits are legal users. nuts are not
     private static  final   String  DBO = "KIWI";   
     private static  final   String  APPLE_USER = "APPLE";   
@@ -158,7 +154,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private final   boolean _nativeAuthentication;
     private final   boolean _localAuthentication;
     private final   boolean _turnOffAuthenticationAndAuthorization;
-    private final   boolean _disableSecurityManager;
 
     private String  _credentialsDBPhysicalName;
 
@@ -184,8 +179,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
          int            credentialsDBLocation,
          boolean    nativeAuthentication,
          boolean    localAuthentication,
-         boolean    turnOffAuthenticationAndAuthorization,
-         boolean    disableSecurityManager
+         boolean    turnOffAuthenticationAndAuthorization
          )
     {
         super( "testAll" );
@@ -194,7 +188,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         _nativeAuthentication = nativeAuthentication;
         _localAuthentication = localAuthentication;
         _turnOffAuthenticationAndAuthorization = turnOffAuthenticationAndAuthorization;
-        _disableSecurityManager = disableSecurityManager;
     }
 
     ///////////////////////////////////////////////////////////////////////////////////
@@ -329,14 +322,11 @@ private String  nameOfTest()
         String  authOverrides = _turnOffAuthenticationAndAuthorization ?
             "Authentication/Authorization turned OFF, " :
             "Authentication/Authorization DEFAULT, ";
-        String  securityManager = _disableSecurityManager ?
-            "SecurityManager OFF, " :
-            "SecurityManager ON, ";
         String  embedded = isEmbedded() ?
             "Embedded" :
             "Client/Server";
 
-        return "[ " + dbLocation + authType + local + authOverrides + securityManager + embedded + " ]";
+        return "[ " + dbLocation + authType + local + authOverrides + embedded + " ]";
     }
 
     /** Return true if the test is running embedded */
@@ -367,7 +357,7 @@ public static Test suite() throws Exception
                 (
                  (
                   new NativeAuthenticationServiceTest
-                  ( JAR_ENCRYPTED, NATIVE, LOCAL, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )
+                  ( JAR_ENCRYPTED, NATIVE, LOCAL, DONT_DISABLE_AUTH )
                   ).decorate( false )
                  );
         }
@@ -413,7 +403,7 @@ private static Test allConfigurations(boolean clientServer) throws Exception
             (
              (
               new NativeAuthenticationServiceTest
-              ( NONE, NO_AUTH, SYSTEM_WIDE, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )
+              ( NONE, NO_AUTH, SYSTEM_WIDE, DONT_DISABLE_AUTH )
               ).decorate( clientServer )
              );
 
@@ -424,14 +414,14 @@ private static Test allConfigurations(boolean clientServer) throws Exception
             (
              (
               new NativeAuthenticationServiceTest
-              ( FILE, NATIVE, LOCAL, DISABLE_AUTHORIZATION, ENABLE_JAVA_SECURITY )
+              ( FILE, NATIVE, LOCAL, DISABLE_AUTHORIZATION )
               ).decorate( clientServer )
              );
         suite.addTest
             (
              (
               new NativeAuthenticationServiceTest
-              ( FILE, NATIVE, LOCAL, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )
+              ( FILE, NATIVE, LOCAL, DONT_DISABLE_AUTH )
               ).decorate( clientServer )
              );
 
@@ -442,14 +432,14 @@ private static Test allConfigurations(boolean clientServer) throws Exception
             (
              (
               new NativeAuthenticationServiceTest
-              ( FILE, NATIVE, SYSTEM_WIDE, DISABLE_AUTHORIZATION, ENABLE_JAVA_SECURITY )
+              ( FILE, NATIVE, SYSTEM_WIDE, DISABLE_AUTHORIZATION )
               ).decorate( clientServer )
              );
         suite.addTest
             (
              (
               new NativeAuthenticationServiceTest
-              ( FILE, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )
+              ( FILE, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH )
               ).decorate( clientServer )
              );
         
@@ -466,14 +456,14 @@ private static Test allConfigurations(boolean clientServer) throws Exception
                 (
                  (
                   new NativeAuthenticationServiceTest
-                  ( JAR, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )
+                  ( JAR, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH )
                   ).decorate( clientServer )
                  );
             suite.addTest
                 (
                  (
                   new NativeAuthenticationServiceTest
-                  ( JAR, NATIVE, LOCAL, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )
+                  ( JAR, NATIVE, LOCAL, DONT_DISABLE_AUTH )
                   ).decorate( clientServer )
                  );
 
@@ -484,14 +474,14 @@ private static Test allConfigurations(boolean clientServer) throws Exception
                 (
                  (
                   new NativeAuthenticationServiceTest
-                  ( CLASSPATH, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH, DISABLE_JAVA_SECURITY )
+                  ( CLASSPATH, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH )
                   ).decorate( clientServer )
                  );
             suite.addTest
                 (
                  (
                   new NativeAuthenticationServiceTest
-                  ( CLASSPATH, NATIVE, LOCAL, DONT_DISABLE_AUTH, DISABLE_JAVA_SECURITY )
+                  ( CLASSPATH, NATIVE, LOCAL, DONT_DISABLE_AUTH )
                   ).decorate( clientServer )
                  );
         }
@@ -512,8 +502,6 @@ private Test decorate(boolean clientServer) throws Exception
         
         Test        result = this;
 
-        if ( _disableSecurityManager ) { result = SecurityManagerSetup.noSecurityManager( result ); }
-
         //
         // Putting the clientServer decorator on the inside allows the server-side
         // embedded driver to be re-registered after engine shutdown. If you put
@@ -881,11 +869,8 @@ private void    vetCoreBehavior()   throws Exception
             // database accessed via jar subprotocol
             vetProtocol( jarDBName( _credentialsDBLocation ) );
         
-            //
-            // We only use the classpath subprotocol if we are not running under a security manager.
-            // We may be able to remove that restriction after DERBY-5615 is fixed.
-            //
-            if ( _disableSecurityManager ) { vetProtocol( classpathDBName() ); }
+            // database accessed via classpath subprotocol
+            vetProtocol( classpathDBName() );
         }
         
         ///////////////////////////////////////////////////////////////////////////////////
