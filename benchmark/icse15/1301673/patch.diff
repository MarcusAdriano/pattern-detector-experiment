diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
index 27d35e8d..3dc4a39f 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
@@ -150,10 +150,13 @@ private void objectifyStreams(ExecRow row) throws StandardException
 					heapIx :
 					baseRowReadMap[heapIx];
 
-                
 				DataValueDescriptor col = row.getColumn(readIx+1);
+				
+				// Derby-4779
+				if ( col != null ) {
 				InputStream stream = ((StreamStorable)col).returnStream();
 				((StreamStorable)col).loadStream();
+
 				// DERBY-3238 
 				// fix up any duplicate streams, for instance in the case of an update with a trigger,
 				// all the columns are read as update columns even if they are not updated, so 
@@ -174,6 +177,7 @@ private void objectifyStreams(ExecRow row) throws StandardException
 				}
 			}
 	}
+	}
 
 	/**
 	 * For deferred update, get a deferred sparse row based on the
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index 079f3ed2..ffadaffe 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -5472,7 +5472,69 @@ public void test_derby_4425()
                 new String[][] { {"1","2"},{"2","4"},{"3","6"}}, false);
     }
 
+    // Derby 4779
+    public void test_derby_4779()
+        throws Exception
+    {
+    	Connection conn = getConnection();
+
+        goodStatement
+        (
+         conn,
+         "create function f_getRegion\n" +
+         "(\n" +
+         "    v int\n" +
+         ")\n" +
+         "returns int\n" +
+         "language java\n" +
+         "parameter style java\n" +
+         "deterministic\n" +
+         "no sql\n" +
+         "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.signum'\n"
+        );
+
+        goodStatement
+        (
+         conn,
+         "create table t1_orders( price int, region generated always as " +
+         "( f_getRegion(price) ) )\n"
+        );
+        
+        goodStatement
+        (
+         conn,
+         "create table t1_dummy(a int)\n"
+        );
 
+        goodStatement
+        (
+         conn,
+         "create trigger t1_trig_after_insert_row_trigger_4779\n" +
+         "after insert on t1_orders\n" +
+         "referencing new as ar\n" +
+         "for each row\n" +
+         "insert into t1_dummy( a ) values ( 1 )\n"
+        );
+
+        goodStatement
+        (
+         conn, 
+         "insert into t1_orders(price) values (1), (2)"
+        );
+
+        assertResults
+        ( 
+         conn,
+         "select a from t1_dummy",
+         new String[][]
+                      {
+                          { "1" },
+                          { "1" }
+                      },
+                      false
+         
+        );
+    }
 
     ///////////////////////////////////////////////////////////////////////////////////
     //
@@ -5595,6 +5657,13 @@ public static   int readMinusCounter()
         return _minusCounter;
     }
 
+    public static   int signum( int i )
+    {
+        if ( i > 0 ) { return 1; }
+        else if ( i == 0 ) { return 0; }
+        else { return -1; }
+    }
+
     public  static  void    clearTriggerReports()
     {
         _triggerReports.clear();
