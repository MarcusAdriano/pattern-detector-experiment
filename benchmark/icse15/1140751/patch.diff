diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java
index 7f71a641..41010d39 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -871,10 +871,7 @@ public void maybeInitializeLocalState(int generationNbr)
      */
     public void addSavedEndpoint(InetAddress ep)
     {
-        EndpointState epState = endpointStateMap.get(ep);
-        if (epState == null)
-        {
-            epState = new EndpointState(new HeartBeatState(0));
+        EndpointState epState = new EndpointState(new HeartBeatState(0));
             epState.markDead();
             epState.setHasToken(true);
             endpointStateMap.put(ep, epState);
@@ -882,7 +879,6 @@ public void addSavedEndpoint(InetAddress ep)
             if (logger.isTraceEnabled())
                 logger.trace("Adding saved endpoint " + ep + " " + epState.getHeartBeatState().getGeneration());
         }
-    }
 
     public void addLocalApplicationState(ApplicationState state, VersionedValue value)
     {
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/IncomingTcpConnection.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
index 6b49e996..047b45f3 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
@@ -76,25 +76,43 @@ public void run()
                 // we should buffer
                 input = new DataInputStream(new BufferedInputStream(socket.getInputStream(), 4096));
             version = MessagingService.getBits(header, 15, 8);
-            Gossiper.instance.setVersion(socket.getInetAddress(), version);
+            if (logger.isDebugEnabled())
+                logger.debug("Version for " + socket.getInetAddress() + " is " + version);
         }
         catch (IOException e)
         {
             close();
             throw new IOError(e);
         }
-        while (true)
-        {
-            try
+
+        if (version > MessagingService.version_)
             {
+            // save the endpoint so gossip will reconnect to it
+            Gossiper.instance.addSavedEndpoint(socket.getInetAddress());
+            logger.info("Received " + (isStream ? "streaming " : "") + "connection from newer protocol version. Ignorning");
+
+            // streaming connections are per-session and have a fixed version.  we can't do anything with a new-version
+            // stream connection, so drop it.
                 if (isStream)
                 {
-                    if (version > MessagingService.version_)
-                    {
-                        logger.error("Received untranslated stream from newer protcol version. Terminating connection!");
                         close();
                         return;
                     }
+            // for non-streaming connections, continue to read the messages (and ignore them) until sender
+            // starts sending correct-version messages (which it can do without reconnecting -- version is per-Message)
+        }
+        else
+        {
+            // only set version when <= to us, otherwise it's the responsibility of the other end to mimic us
+            Gossiper.instance.setVersion(socket.getInetAddress(), version);
+        }
+
+        while (true)
+        {
+            try
+            {
+                if (isStream)
+                {
                     int size = input.readInt();
                     byte[] headerBytes = new byte[size];
                     input.readFully(headerBytes);
@@ -112,11 +130,8 @@ public void run()
                         input.readFully(contentBytes, offset, CHUNK_SIZE);
                     input.readFully(contentBytes, size - remainder, remainder);
 
-                    if (version > MessagingService.version_)
-                        logger.info("Received connection from newer protocol version. Ignorning message.");
-                    else
+                    if (version <= MessagingService.version_)
                     {
-                        // todo: need to be aware of message version.
                         DataInputStream dis = new DataInputStream(new ByteArrayInputStream(contentBytes));
                         String id = dis.readUTF();
                         Message message = Message.serializer().deserialize(dis, version);
@@ -126,9 +141,8 @@ public void run()
                 // prepare to read the next message
                 MessagingService.validateMagic(input.readInt());
                 int header = input.readInt();
-                version = MessagingService.getBits(header, 15, 8);
                 assert isStream == (MessagingService.getBits(header, 3, 1) == 1) : "Connections cannot change type: " + isStream;
-                assert version == MessagingService.getBits(header, 15, 8) : "Protocol version shouldn't change during a session";
+                version = MessagingService.getBits(header, 15, 8);
             }
             catch (EOFException e)
             {
