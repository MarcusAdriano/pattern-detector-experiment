diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index eec7d77c..cd7f9019 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -86,7 +86,7 @@ void runLeaderProcess(boolean weAreReplacement) throws KeeperException, Interrup
           leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),
           CreateMode.EPHEMERAL, true);
     } catch (NodeExistsException e) {
-      // if a previous leader ephemeral exists for some reason, try and remove it
+      // if a previous leader ephemeral still exists for some reason, try and remove it
       zkClient.delete(leaderPath, -1, true);
       zkClient.makePath(leaderPath,
           leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
index 7e2a575f..e248bcb7 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
@@ -35,7 +35,6 @@
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 
 public class ChaosMonkeyNothingIsSafeTest extends FullSolrCloudTest {
   
@@ -53,18 +52,7 @@ public static void afterSuperClass() throws Exception {
   @Override
   public void setUp() throws Exception {
     super.setUp();
-    // we expect this time of exception as shards go up and down...
-    ignoreException("shard update error ");
-    ignoreException("Connection refused");
-    ignoreException("interrupted waiting for shard update response");
-    ignoreException("org\\.mortbay\\.jetty\\.EofException");
-    ignoreException("java\\.lang\\.InterruptedException");
-    ignoreException("java\\.nio\\.channels\\.ClosedByInterruptException");
-    ignoreException("Failure to open existing log file \\(non fatal\\)");
-    
-    
-    // sometimes we cannot get the same port
-    ignoreException("java\\.net\\.BindException: Address already in use");
+    // TODO use @Noisy annotation as we expect lots of exceptions
     
     System.setProperty("numShards", Integer.toString(sliceCount));
   }
@@ -79,7 +67,7 @@ public void tearDown() throws Exception {
   
   public ChaosMonkeyNothingIsSafeTest() {
     super();
-    shardCount = atLeast(2);
+    shardCount = atLeast(3);
     sliceCount = 2;
   }
   
@@ -95,7 +83,7 @@ public void doTest() throws Exception {
     //del("*:*");
     
     List<StopableIndexingThread> threads = new ArrayList<StopableIndexingThread>();
-    int threadCount = atLeast(1);
+    int threadCount = 1;
     int i = 0;
     for (i = 0; i < threadCount; i++) {
       StopableIndexingThread indexThread = new StopableIndexingThread(i * 50000, true);
@@ -110,7 +98,7 @@ public void doTest() throws Exception {
     
     chaosMonkey.startTheMonkey(true);
     
-    Thread.sleep(atLeast(15000));
+    Thread.sleep(atLeast(10000));
     
     chaosMonkey.stopTheMonkey();
     
@@ -259,6 +247,7 @@ private void changeUrlOnError(Exception e) {
           clientIndex = 0;
         }
         try {
+          suss.shutdown();
           suss = new StreamingUpdateSolrServer(((CommonsHttpSolrServer) clients.get(clientIndex)).getBaseURL(), 30, 3);
         } catch (MalformedURLException e1) {
           e1.printStackTrace();
@@ -268,7 +257,7 @@ private void changeUrlOnError(Exception e) {
     
     public void safeStop() {
       stop = true;
-      suss.blockUntilFinished();
+      suss.shutdownNow();
     }
 
     public int getFails() {
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java
index a0f9bfb7..74212bc9 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java
@@ -44,7 +44,7 @@
   static final int TIMEOUT = 30000;
   private ZkTestServer server;
   private SolrZkClient zkClient;
-  ZkStateReader zkStateReader;
+  private ZkStateReader zkStateReader;
   private Map<Integer,Thread> seqToThread;
   
   private volatile boolean stopStress = false;
@@ -83,12 +83,13 @@ public void setUp() throws Exception {
     private volatile boolean stop;
     private volatile boolean electionDone = false;
     private final ZkNodeProps props;
+    private ZkStateReader zkStateReader;
 
     
     public ClientThread(int nodeNumber) throws Exception {
       super("Thread-" + nodeNumber);
-      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);
-    
+      this.zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);
+      this.zkStateReader = new ZkStateReader(zkClient);
       this.nodeNumber = nodeNumber;
       props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, Integer.toString(nodeNumber), ZkStateReader.CORE_PROP, "");
     }
@@ -96,10 +97,10 @@ public ClientThread(int nodeNumber) throws Exception {
     @Override
     public void run() {
       
-        LeaderElector elector = new LeaderElector(zkClient);
+        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);
         
         ElectionContext context = new ShardLeaderElectionContext("shard1",
-            "collection1", Integer.toString(nodeNumber), props, zkStateReader);
+            "collection1", Integer.toString(nodeNumber), props, this.zkStateReader);
         
         try {
           elector.setup(context);
@@ -109,7 +110,7 @@ public void run() {
         } catch (InterruptedException e) {
           return;
         } catch (Throwable e) {
-          e.printStackTrace();
+          //e.printStackTrace();
         }
         
       while (!stop) {
@@ -148,12 +149,16 @@ public void testBasic() throws Exception {
     assertEquals("http://127.0.0.1/solr/", getLeaderUrl("collection1", "shard2"));
   }
   
-  private String getLeaderUrl(final String collection, final String slice) throws KeeperException, InterruptedException {
-    int iterCount=30;
+  private String getLeaderUrl(final String collection, final String slice)
+      throws KeeperException, InterruptedException {
+    int iterCount = 30;
     while (iterCount-- > 0)
       try {
-      byte[] data = zkClient.getData(ZkStateReader.getShardLeadersPath(collection, slice), null, null, true);
-      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(ZkNodeProps.load(data));
+        byte[] data = zkClient.getData(
+            ZkStateReader.getShardLeadersPath(collection, slice), null, null,
+            true);
+        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(
+            ZkNodeProps.load(data));
       return leaderProps.getCoreUrl();
     } catch (NoNodeException e) {
       Thread.sleep(100);
@@ -197,14 +202,22 @@ public void testElection() throws Exception {
     
     // kill n_0, 1, 3 and 4
     ((ClientThread) seqToThread.get(0)).close();
+    
+    waitForLeader(threads, 1);
+    
+    leaderThread = getLeaderThread();
+    
+    // whoever the leader is, should be the n_1 seq
+    
+    assertEquals(1, threads.get(leaderThread).seq);
+    
     ((ClientThread) seqToThread.get(4)).close();
     ((ClientThread) seqToThread.get(1)).close();
     ((ClientThread) seqToThread.get(3)).close();
     
     // whoever the leader is, should be the n_2 seq
     
-    // nocommit
-    Thread.sleep(1000);
+    waitForLeader(threads, 2);
     
     leaderThread = getLeaderThread();
     assertEquals(2, threads.get(leaderThread).seq);
@@ -216,8 +229,7 @@ public void testElection() throws Exception {
     ((ClientThread) seqToThread.get(7)).close();
     ((ClientThread) seqToThread.get(8)).close();
     
-    // nocommit
-    Thread.sleep(1000);
+    waitForLeader(threads, 9);
     leaderThread = getLeaderThread();
     
     // whoever the leader is, should be the n_9 seq
@@ -233,11 +245,25 @@ public void testElection() throws Exception {
       thread.join();
     }
     
-    //printLayout(server.getZkAddress());
+  }
+
+  private void waitForLeader(List<ClientThread> threads, int seq)
+      throws KeeperException, InterruptedException {
+    int leaderThread;
+    int tries = 0;
+    leaderThread = getLeaderThread();
+    while (threads.get(leaderThread).seq < seq) {
+      leaderThread = getLeaderThread();
+      if (tries++ > 50) {
+        break;
+      }
+      Thread.sleep(200);
+    }
   }
 
   private int getLeaderThread() throws KeeperException, InterruptedException {
-    return Integer.parseInt(getLeaderUrl("collection1", "shard1").replaceAll("/", ""));
+    String leaderUrl = getLeaderUrl("collection1", "shard1");
+    return Integer.parseInt(leaderUrl.replaceAll("/", ""));
   }
   
   @Test
@@ -348,10 +374,6 @@ public void run() {
     
     scheduler.shutdownNow();
     
-
-    printLayout(server.getZkAddress());
-    
-
     int seq = threads.get(getLeaderThread()).getSeq();
     
     assertFalse("seq is -1 and we may have a zombie leader", seq == -1);
@@ -370,7 +392,6 @@ public void run() {
   
   @Override
   public void tearDown() throws Exception {
-    printLayout(server.getZkAddress());
     zkClient.close();
     server.shutdown();
     SolrConfig.severeErrors.clear();
