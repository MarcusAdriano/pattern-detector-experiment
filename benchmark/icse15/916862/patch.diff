diff --git a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java
index 42074d41..1d6bad9a 100644
--- a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java
+++ b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java
@@ -131,7 +131,7 @@
 
 	/**
 	 * The Composite Type for a batch action result.
-	 * {@link #refreshPackages(long)} and {@link #refreshPackages(long[])}.
+	 * {@link #refreshBundle(long)} and {@link #refreshBundles(long[])}.
 	 * Notice that a batch action result returns uses an id for the
 	 * {@link #BUNDLE_IN_ERROR} while the {@link #BATCH_INSTALL_RESULT_TYPE}
 	 * uses a location.
@@ -267,35 +267,23 @@
 	 * @return the resulting state from executing the operation
 	 * @throws IOException if the operation does not succeed
 	 */
-	CompositeData installBundles(String[] locations, String[] urls)
-			throws IOException;
+	CompositeData installBundles(String[] locations, String[] urls) throws IOException;
 
 	/**
-	 * Force the update, replacement or removal of the pacakges identified by
-	 * the list of bundles
+	 * Force the update, replacement or removal of the packages identified by the specified bundle. 
 	 * 
-	 * @see #BATCH_ACTION_RESULT_TYPE for the precise specification of the
-	 *      CompositeData type representing the returned result.
-	 * 
-	 *      ### there is not result???
 	 * @param bundleIdentifier the bundle identifier
 	 * @throws IOException if the operation failed
 	 */
-	void refreshPackages(long bundleIdentifier) throws IOException;
+	void refreshBundle(long bundleIdentifier) throws IOException;
 
 	/**
-	 * Force the update, replacement or removal of the packages identified by
-	 * the list of bundles.
-	 * 
+	 * Force the update, replacement or removal of the packages identified by the list of bundles. 
 	 * 
-	 * @see #BATCH_ACTION_RESULT_TYPE for the precise specification of the
-	 *      CompositeData type representing the returned result.
-	 * 
-	 * @param bundleIdentifiers the array of bundle identifiers
-	 * @return the resulting state from executing the operation
+	 * @param bundleIdentifiers The identifiers of the bundles to refresh, or null for all bundles with packages pending removal.
 	 * @throws IOException if the operation failed
 	 */
-	CompositeData refreshPackages(long[] bundleIdentifiers) throws IOException;
+	void refreshBundles(long[] bundleIdentifiers) throws IOException;
 
 	/**
 	 * Resolve the bundle indicated by the unique symbolic name and version
@@ -310,7 +298,7 @@ CompositeData installBundles(String[] locations, String[] urls)
 	/**
 	 * Batch resolve the bundles indicated by the list of bundle identifiers
 	 * 
-	 * @param bundleIdentifiers = the identifiers of the bundles to resolve
+	 * @param bundleIdentifiers The identifiers of the bundles to resolve, or null to resolve all unresolved bundles. 
 	 * @return true if the bundles were resolved, false otherwise
 	 * @throws IOException if the operation does not succeed
 	 */
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
index 3c66aecf..cac92839 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
@@ -162,29 +162,28 @@ public CompositeData installBundles(String[] locations, String[] urls) throws IO
     }
 
     /**
-     * @see org.osgi.jmx.framework.FrameworkMBean#refreshPackages(long)
+     * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundle(long)
      */
-    public void refreshPackages(long bundleIdentifier) throws IOException {
+    public void refreshBundle(long bundleIdentifier) throws IOException {
         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
         packageAdmin.refreshPackages(new Bundle[] { bundle });
-
     }
 
     /**
-     * @see org.osgi.jmx.framework.FrameworkMBean#refreshPackages(long[])
+     * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundles(long[])
      */
-    public CompositeData refreshPackages(long[] bundleIdentifiers) throws IOException {
-        if(bundleIdentifiers == null){
-            return new BatchActionResult("Failed to refresh packages  bundle id's can't be null").toCompositeData(); 
+    public void refreshBundles(long[] bundleIdentifiers) throws IOException 
+    {
+       Bundle[] bundles = null;
+       if(bundleIdentifiers != null)
+       {
+          bundles = new Bundle[bundleIdentifiers.length];
+          for (int i = 0; i < bundleIdentifiers.length; i++) 
+          {
+             bundles[i] = context.getBundle(bundleIdentifiers[i]);
          }
-        for (int i = 0; i < bundleIdentifiers.length; i++) {
-            try {
-                refreshPackages(bundleIdentifiers[i]);
-            } catch (Throwable t) {
-                return createFailedBatchActionResult(bundleIdentifiers, i, t);
             }
-        }
-        return new BatchActionResult(bundleIdentifiers).toCompositeData();
+       packageAdmin.refreshPackages(bundles);
     }
 
     /**
@@ -199,14 +198,15 @@ public boolean resolveBundle(long bundleIdentifier) throws IOException {
      * @see org.osgi.jmx.framework.FrameworkMBean#resolveBundles(long[])
      */
     public boolean resolveBundles(long[] bundleIdentifiers) throws IOException {
-        if(bundleIdentifiers == null){
-            throw new IllegalArgumentException("Failed to resolve  bundles id's can't be null"); 
+       Bundle[] bundles = null;
+       if(bundleIdentifiers != null)
+       {
+          bundles = new Bundle[bundleIdentifiers.length];
+          for (int i = 0; i < bundleIdentifiers.length; i++) 
+          {
+             bundles[i] = context.getBundle(bundleIdentifiers[i]);
          }
-        Bundle[] bundles = new Bundle[bundleIdentifiers.length];
-        for (int i = 0; i < bundleIdentifiers.length; i++) {
-            bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
         }
-
         return packageAdmin.resolveBundles(bundles);
     }
 
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java
index 57cc84ca..635b97fb 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/FrameworkTest.java
@@ -175,15 +175,15 @@ public void testInstallBundlesStringArrayStringArray() throws Exception {
     }
 
     @Test
-    public void testRefreshPackagesLong() throws Exception {
+    public void testRefreshBundleLong() throws Exception {
         Bundle bundle = Mockito.mock(Bundle.class);
         Mockito.when(context.getBundle(1)).thenReturn(bundle);
 
-        mbean.refreshPackages(1);
+        mbean.refreshBundle(1);
         Mockito.verify(admin).refreshPackages((Bundle[]) Mockito.any());
 
         try {
-            mbean.refreshPackages(2);
+            mbean.refreshBundle(2);
             Assert.fail("Shouldn't happen illegal argument");
         } catch (IllegalArgumentException iae) {
             // expected
@@ -191,23 +191,15 @@ public void testRefreshPackagesLong() throws Exception {
     }
 
     @Test
-    public void testRefreshPackagesLongArray() throws IOException {
+    public void testRefreshBundlesLongArray() throws IOException {
         Bundle bundle = Mockito.mock(Bundle.class);
         Mockito.when(context.getBundle(1)).thenReturn(bundle);
 
-        mbean.refreshPackages(new long[] { 1 });
+        mbean.refreshBundles(new long[] { 1 });
         Mockito.verify(admin).refreshPackages((Bundle[]) Mockito.any());
 
-        CompositeData data = mbean.refreshPackages(new long[] { 2 });
-        // shouldn't found bundle whith id 2
-        Assert.assertNotNull(data);
-        BatchActionResult batch = BatchActionResult.from(data);
-        Assert.assertEquals(0, batch.getCompleted().length);
-        Assert.assertFalse(batch.isSuccess());
-        Assert.assertNotNull(batch.getError());
-        Assert.assertNotNull(batch.getRemainingItems());
-        Assert.assertEquals(2, batch.getBundleInError());
-
+        mbean.refreshBundles(null);
+        Mockito.verify(admin).refreshPackages(null);
     }
 
     @Test
@@ -226,6 +218,9 @@ public void testResolveBundles() throws IOException {
 
         mbean.resolveBundles(new long[] { 1 });
         Mockito.verify(admin).resolveBundles(new Bundle[] { bundle });
+
+        mbean.resolveBundles(null);
+        Mockito.verify(admin).resolveBundles(null);
     }
 
     @Test
