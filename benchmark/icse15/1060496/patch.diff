diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index 85166bf9..49929186 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -29,7 +29,7 @@
 import org.apache.commons.lang.builder.ToStringBuilder;
 
 import org.apache.avro.util.Utf8;
-import org.apache.cassandra.db.migration.avro.ColumnDef;
+import org.apache.cassandra.avro.ColumnDef;
 import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.db.HintedHandOffManager;
 import org.apache.cassandra.db.SystemTable;
@@ -363,9 +363,9 @@ public static String indexName(String parentCf, ColumnDefinition info)
         return parentCf + "." + (info.getIndexName() == null ? FBUtilities.bytesToHex(info.name) : info.getIndexName());
     }
 
-    public org.apache.cassandra.db.migration.avro.CfDef deflate()
+    public org.apache.cassandra.avro.CfDef deflate()
     {
-        org.apache.cassandra.db.migration.avro.CfDef cf = new org.apache.cassandra.db.migration.avro.CfDef();
+        org.apache.cassandra.avro.CfDef cf = new org.apache.cassandra.avro.CfDef();
         cf.id = cfId;
         cf.keyspace = new Utf8(tableName);
         cf.name = new Utf8(cfName);
@@ -388,13 +388,13 @@ public static String indexName(String parentCf, ColumnDefinition info)
         cf.memtable_throughput_in_mb = memtableThroughputInMb;
         cf.memtable_operations_in_millions = memtableOperationsInMillions;
         cf.column_metadata = SerDeUtils.createArray(column_metadata.size(),
-                                                    org.apache.cassandra.db.migration.avro.ColumnDef.SCHEMA$);
+                                                    org.apache.cassandra.avro.ColumnDef.SCHEMA$);
         for (ColumnDefinition cd : column_metadata.values())
             cf.column_metadata.add(cd.deflate());
         return cf;
     }
 
-    public static CFMetaData inflate(org.apache.cassandra.db.migration.avro.CfDef cf)
+    public static CFMetaData inflate(org.apache.cassandra.avro.CfDef cf)
     {
         AbstractType comparator;
         AbstractType subcolumnComparator = null;
@@ -413,7 +413,7 @@ public static CFMetaData inflate(org.apache.cassandra.db.migration.avro.CfDef cf
             throw new RuntimeException("Could not inflate CFMetaData for " + cf, ex);
         }
         Map<ByteBuffer, ColumnDefinition> column_metadata = new TreeMap<ByteBuffer, ColumnDefinition>(BytesType.instance);
-        for (ColumnDef aColumn_metadata : cf.column_metadata)
+        for (org.apache.cassandra.avro.ColumnDef aColumn_metadata : cf.column_metadata)
         {
             ColumnDefinition cd = ColumnDefinition.inflate(aColumn_metadata);
             column_metadata.put(cd.name, cd);
@@ -604,7 +604,7 @@ public AbstractType getValueValidator(ByteBuffer column)
     }
     
     /** applies implicit defaults to cf definition. useful in updates */
-    public static void applyImplicitDefaults(org.apache.cassandra.db.migration.avro.CfDef cf_def)
+    public static void applyImplicitDefaults(org.apache.cassandra.avro.CfDef cf_def)
     {
         if (cf_def.min_compaction_threshold == null)
             cf_def.min_compaction_threshold = CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD;
@@ -642,7 +642,7 @@ public static void applyImplicitDefaults(org.apache.cassandra.thrift.CfDef cf_de
     }
     
     // merges some final fields from this CFM with modifiable fields from CfDef into a new CFMetaData.
-    public void apply(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException
+    public void apply(org.apache.cassandra.avro.CfDef cf_def) throws ConfigurationException
     {
         // validate
         if (!cf_def.id.equals(cfId))
@@ -685,8 +685,8 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         // adjust secondary indexes. figure out who is coming and going.
         Set<ByteBuffer> toRemove = new HashSet<ByteBuffer>();
         Set<ByteBuffer> newIndexNames = new HashSet<ByteBuffer>();
-        Set<org.apache.cassandra.db.migration.avro.ColumnDef> toAdd = new HashSet<org.apache.cassandra.db.migration.avro.ColumnDef>();
-        for (org.apache.cassandra.db.migration.avro.ColumnDef def : cf_def.column_metadata)
+        Set<org.apache.cassandra.avro.ColumnDef> toAdd = new HashSet<org.apache.cassandra.avro.ColumnDef>();
+        for (org.apache.cassandra.avro.ColumnDef def : cf_def.column_metadata)
         {
             newIndexNames.add(def.name);
             if (!column_metadata.containsKey(def.name))
@@ -700,7 +700,7 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         for (ByteBuffer indexName : toRemove)
             column_metadata.remove(indexName);
         // update the ones staying
-        for (org.apache.cassandra.db.migration.avro.ColumnDef def : cf_def.column_metadata)
+        for (org.apache.cassandra.avro.ColumnDef def : cf_def.column_metadata)
         {
             if (!column_metadata.containsKey(def.name))
                 continue;
@@ -708,7 +708,7 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
             column_metadata.get(def.name).setIndexName(def.index_name == null ? null : def.index_name.toString());
         }
         // add the new ones coming in.
-        for (org.apache.cassandra.db.migration.avro.ColumnDef def : toAdd)
+        for (org.apache.cassandra.avro.ColumnDef def : toAdd)
         {
             ColumnDefinition cd = new ColumnDefinition(def.name, 
                                                        def.validation_class.toString(), 
@@ -759,9 +759,9 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
     }
     
     // converts CFM to avro CfDef
-    public static org.apache.cassandra.db.migration.avro.CfDef convertToAvro(CFMetaData cfm)
+    public static org.apache.cassandra.avro.CfDef convertToAvro(CFMetaData cfm)
     {
-        org.apache.cassandra.db.migration.avro.CfDef def = new org.apache.cassandra.db.migration.avro.CfDef();
+        org.apache.cassandra.avro.CfDef def = new org.apache.cassandra.avro.CfDef();
         def.name = cfm.cfName;
         def.keyspace = cfm.tableName;
         def.id = cfm.cfId;
@@ -786,12 +786,12 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         def.memtable_flush_after_mins = cfm.memtableFlushAfterMins;
         def.memtable_throughput_in_mb = cfm.memtableThroughputInMb;
         def.memtable_operations_in_millions = cfm.memtableOperationsInMillions;
-        List<org.apache.cassandra.db.migration.avro.ColumnDef> column_meta = new ArrayList<org.apache.cassandra.db.migration.avro.ColumnDef>(cfm.column_metadata.size());
+        List<org.apache.cassandra.avro.ColumnDef> column_meta = new ArrayList<org.apache.cassandra.avro.ColumnDef>(cfm.column_metadata.size());
         for (ColumnDefinition cd : cfm.column_metadata.values())
         {
-            org.apache.cassandra.db.migration.avro.ColumnDef tcd = new org.apache.cassandra.db.migration.avro.ColumnDef();
+            org.apache.cassandra.avro.ColumnDef tcd = new org.apache.cassandra.avro.ColumnDef();
             tcd.index_name = cd.getIndexName();
-            tcd.index_type = cd.getIndexType() == null ? null : org.apache.cassandra.db.migration.avro.IndexType.valueOf(cd.getIndexType().name());
+            tcd.index_type = cd.getIndexType() == null ? null : org.apache.cassandra.avro.IndexType.valueOf(cd.getIndexType().name());
             tcd.name = ByteBufferUtil.clone(cd.name);
             tcd.validation_class = cd.validator.getClass().getName();
             column_meta.add(tcd);
@@ -800,9 +800,9 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         return def;
     }
     
-    public static org.apache.cassandra.db.migration.avro.CfDef convertToAvro(org.apache.cassandra.thrift.CfDef def)
+    public static org.apache.cassandra.avro.CfDef convertToAvro(org.apache.cassandra.thrift.CfDef def)
     {
-        org.apache.cassandra.db.migration.avro.CfDef newDef = new org.apache.cassandra.db.migration.avro.CfDef();
+        org.apache.cassandra.avro.CfDef newDef = new org.apache.cassandra.avro.CfDef();
         newDef.keyspace = def.getKeyspace();
         newDef.name = def.getName();
         newDef.column_type = def.getColumn_type();
@@ -824,14 +824,14 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         newDef.row_cache_size = def.getRow_cache_size();
         newDef.subcomparator_type = def.getSubcomparator_type();
         
-        List<org.apache.cassandra.db.migration.avro.ColumnDef> columnMeta = new ArrayList<org.apache.cassandra.db.migration.avro.ColumnDef>();
+        List<org.apache.cassandra.avro.ColumnDef> columnMeta = new ArrayList<org.apache.cassandra.avro.ColumnDef>();
         for (org.apache.cassandra.thrift.ColumnDef cdef : def.getColumn_metadata())
         {
-            org.apache.cassandra.db.migration.avro.ColumnDef tdef = new org.apache.cassandra.db.migration.avro.ColumnDef();
+            org.apache.cassandra.avro.ColumnDef tdef = new org.apache.cassandra.avro.ColumnDef();
             tdef.name = ByteBufferUtil.clone(cdef.BufferForName());
             tdef.validation_class = cdef.getValidation_class();
             tdef.index_name = cdef.getIndex_name();
-            tdef.index_type = cdef.getIndex_type() == null ? null : org.apache.cassandra.db.migration.avro.IndexType.valueOf(cdef.getIndex_type().name());
+            tdef.index_type = cdef.getIndex_type() == null ? null : org.apache.cassandra.avro.IndexType.valueOf(cdef.getIndex_type().name());
             columnMeta.add(tdef);
         }
         newDef.column_metadata = columnMeta;
@@ -868,7 +868,7 @@ else if (cf_def.isSetMax_compaction_threshold())
         }
     }
 
-    public static void validateMinMaxCompactionThresholds(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException
+    public static void validateMinMaxCompactionThresholds(org.apache.cassandra.avro.CfDef cf_def) throws ConfigurationException
     {
         if (cf_def.min_compaction_threshold != null && cf_def.max_compaction_threshold != null)
         {
@@ -911,7 +911,7 @@ public static void validateMemtableSettings(org.apache.cassandra.thrift.CfDef cf
         }
     }
 
-    public static void validateMemtableSettings(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException
+    public static void validateMemtableSettings(org.apache.cassandra.avro.CfDef cf_def) throws ConfigurationException
     {
         if (cf_def.memtable_flush_after_mins != null && cf_def.memtable_flush_after_mins <= 0) {
             throw new ConfigurationException("memtable_flush_after_mins cannot be non-positive");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java
index 3824c151..62b3774a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java
@@ -79,18 +79,18 @@ public int hashCode()
         return result;
     }
 
-    public org.apache.cassandra.db.migration.avro.ColumnDef deflate()
+    public org.apache.cassandra.avro.ColumnDef deflate()
     {
-        org.apache.cassandra.db.migration.avro.ColumnDef cd = new org.apache.cassandra.db.migration.avro.ColumnDef();
+        org.apache.cassandra.avro.ColumnDef cd = new org.apache.cassandra.avro.ColumnDef();
         cd.name = name;
         cd.validation_class = new Utf8(validator.getClass().getName());
         cd.index_type = index_type == null ? null :
-            Enum.valueOf(org.apache.cassandra.db.migration.avro.IndexType.class, index_type.name());
+            Enum.valueOf(org.apache.cassandra.avro.IndexType.class, index_type.name());
         cd.index_name = index_name == null ? null : new Utf8(index_name);
         return cd;
     }
 
-    public static ColumnDefinition inflate(org.apache.cassandra.db.migration.avro.ColumnDef cd)
+    public static ColumnDefinition inflate(org.apache.cassandra.avro.ColumnDef cd)
     {
         IndexType index_type = cd.index_type == null ? null :
             Enum.valueOf(IndexType.class, cd.index_type.name());
@@ -110,7 +110,7 @@ public static ColumnDefinition fromColumnDef(ColumnDef thriftColumnDef) throws C
         return new ColumnDefinition(ByteBufferUtil.clone(thriftColumnDef.name), thriftColumnDef.validation_class, thriftColumnDef.index_type, thriftColumnDef.index_name);
     }
     
-    public static ColumnDefinition fromColumnDef(org.apache.cassandra.db.migration.avro.ColumnDef avroColumnDef) throws ConfigurationException
+    public static ColumnDefinition fromColumnDef(org.apache.cassandra.avro.ColumnDef avroColumnDef) throws ConfigurationException
     {
         validateIndexType(avroColumnDef);
         return new ColumnDefinition(avroColumnDef.name,
@@ -131,13 +131,13 @@ public static ColumnDefinition fromColumnDef(org.apache.cassandra.db.migration.a
         return Collections.unmodifiableMap(cds);
     }
     
-    public static Map<ByteBuffer, ColumnDefinition> fromColumnDefs(Iterable<org.apache.cassandra.db.migration.avro.ColumnDef> avroDefs) throws ConfigurationException
+    public static Map<ByteBuffer, ColumnDefinition> fromColumnDefs(Iterable<org.apache.cassandra.avro.ColumnDef> avroDefs) throws ConfigurationException
     {
         if (avroDefs == null)
             return Collections.emptyMap();
 
         Map<ByteBuffer, ColumnDefinition> cds = new TreeMap<ByteBuffer, ColumnDefinition>();
-        for (org.apache.cassandra.db.migration.avro.ColumnDef avroColumnDef : avroDefs)
+        for (org.apache.cassandra.avro.ColumnDef avroColumnDef : avroDefs)
         {
             validateIndexType(avroColumnDef);
             cds.put(avroColumnDef.name, fromColumnDef(avroColumnDef));
@@ -146,7 +146,7 @@ public static ColumnDefinition fromColumnDef(org.apache.cassandra.db.migration.a
         return Collections.unmodifiableMap(cds);
     }
 
-    public static void validateIndexType(org.apache.cassandra.db.migration.avro.ColumnDef avroColumnDef) throws ConfigurationException
+    public static void validateIndexType(org.apache.cassandra.avro.ColumnDef avroColumnDef) throws ConfigurationException
     {
         if ((avroColumnDef.index_name != null) && (avroColumnDef.index_type == null))
             throw new ConfigurationException("index_name cannot be set if index_type is not also set");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
index 576bc6ae..753a9741 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
@@ -73,9 +73,9 @@ public boolean equals(Object obj)
         return cfMetaData;
     }
         
-    public org.apache.cassandra.db.migration.avro.KsDef deflate()
+    public org.apache.cassandra.avro.KsDef deflate()
     {
-        org.apache.cassandra.db.migration.avro.KsDef ks = new org.apache.cassandra.db.migration.avro.KsDef();
+        org.apache.cassandra.avro.KsDef ks = new org.apache.cassandra.avro.KsDef();
         ks.name = new Utf8(name);
         ks.strategy_class = new Utf8(strategyClass.getName());
         if (strategyOptions != null)
@@ -87,13 +87,13 @@ public boolean equals(Object obj)
             }
         }
         ks.replication_factor = replicationFactor;
-        ks.cf_defs = SerDeUtils.createArray(cfMetaData.size(), org.apache.cassandra.db.migration.avro.CfDef.SCHEMA$);
+        ks.cf_defs = SerDeUtils.createArray(cfMetaData.size(), org.apache.cassandra.avro.CfDef.SCHEMA$);
         for (CFMetaData cfm : cfMetaData.values())
             ks.cf_defs.add(cfm.deflate());
         return ks;
     }
 
-    public static KSMetaData inflate(org.apache.cassandra.db.migration.avro.KsDef ks)
+    public static KSMetaData inflate(org.apache.cassandra.avro.KsDef ks)
     {
         Class<AbstractReplicationStrategy> repStratClass;
         try
@@ -116,7 +116,7 @@ public static KSMetaData inflate(org.apache.cassandra.db.migration.avro.KsDef ks
         }
         int cfsz = (int)ks.cf_defs.size();
         CFMetaData[] cfMetaData = new CFMetaData[cfsz];
-        Iterator<org.apache.cassandra.db.migration.avro.CfDef> cfiter = ks.cf_defs.iterator();
+        Iterator<org.apache.cassandra.avro.CfDef> cfiter = ks.cf_defs.iterator();
         for (int i = 0; i < cfsz; i++)
             cfMetaData[i] = CFMetaData.inflate(cfiter.next());
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
index f9bf1231..78c3b1bf 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
@@ -63,7 +63,7 @@ public static synchronized void dumpToStorage(UUID version) throws IOException
         rm.add(new QueryPath(Migration.SCHEMA_CF,
                              null,
                              DEFINITION_SCHEMA_COLUMN_NAME),
-                             ByteBuffer.wrap(org.apache.cassandra.db.migration.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
+                             ByteBuffer.wrap(org.apache.cassandra.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
                              now);
         rm.apply();
 
@@ -97,7 +97,7 @@ public static synchronized void dumpToStorage(UUID version) throws IOException
         {
             if (column.name().equals(DEFINITION_SCHEMA_COLUMN_NAME))
                 continue;
-            org.apache.cassandra.db.migration.avro.KsDef ks = SerDeUtils.deserialize(schema, column.value(), new org.apache.cassandra.db.migration.avro.KsDef());
+            org.apache.cassandra.avro.KsDef ks = SerDeUtils.deserialize(schema, column.value(), new org.apache.cassandra.avro.KsDef());
             keyspaces.add(KSMetaData.inflate(ks));
         }
         return keyspaces;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
index b583c55a..b0d1e4f2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -234,7 +234,7 @@ static RowMutation makeDefinitionMutation(KSMetaData add, KSMetaData remove, UUI
         rm.add(new QueryPath(SCHEMA_CF,
                              null,
                              DefsTable.DEFINITION_SCHEMA_COLUMN_NAME),
-                             ByteBuffer.wrap(org.apache.cassandra.db.migration.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
+                             ByteBuffer.wrap(org.apache.cassandra.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
                              now);
         return rm;
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java
index 01b89ec3..a256d95e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java
@@ -38,7 +38,7 @@
     protected UpdateColumnFamily() { }
     
     /** assumes validation has already happened. That is, replacing oldCfm with newCfm is neither illegal or totally whackass. */
-    public UpdateColumnFamily(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException, IOException
+    public UpdateColumnFamily(org.apache.cassandra.avro.CfDef cf_def) throws ConfigurationException, IOException
     {
         super(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()), DatabaseDescriptor.getDefsVersion());
         
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
index ddefc28c..bd6f11c8 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
@@ -51,7 +51,7 @@ public void testCFMetaDataSerialization() throws IOException, ConfigurationExcep
         {
             for (CFMetaData cfm : DatabaseDescriptor.getTableMetaData(table).values())
             {
-                CFMetaData cfmDupe = CFMetaData.inflate(serDe(cfm.deflate(), new org.apache.cassandra.db.migration.avro.CfDef()));
+                CFMetaData cfmDupe = CFMetaData.inflate(serDe(cfm.deflate(), new org.apache.cassandra.avro.CfDef()));
                 assert cfmDupe != null;
                 assert cfmDupe.equals(cfm);
             }
@@ -63,7 +63,7 @@ public void testKSMetaDataSerialization() throws IOException, ConfigurationExcep
     {
         for (KSMetaData ksm : DatabaseDescriptor.tables.values())
         {
-            KSMetaData ksmDupe = KSMetaData.inflate(serDe(ksm.deflate(), new org.apache.cassandra.db.migration.avro.KsDef()));
+            KSMetaData ksmDupe = KSMetaData.inflate(serDe(ksm.deflate(), new org.apache.cassandra.avro.KsDef()));
             assert ksmDupe != null;
             assert ksmDupe.equals(ksm);
         }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index e742b116..b74d0844 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -70,12 +70,12 @@
     @Test
     public void testZeroInjection() throws IOException
     {
-        org.apache.cassandra.db.migration.avro.CfDef cd = new org.apache.cassandra.db.migration.avro.CfDef();
+        org.apache.cassandra.avro.CfDef cd = new org.apache.cassandra.avro.CfDef();
         // populate only fields that must be non-null.
         cd.keyspace = new Utf8("Lest Ks");
         cd.name = new Utf8("Mest Cf");
         
-        org.apache.cassandra.db.migration.avro.CfDef cd2 = SerDeUtils.deserializeWithSchema(SerDeUtils.serializeWithSchema(cd), new org.apache.cassandra.db.migration.avro.CfDef());
+        org.apache.cassandra.avro.CfDef cd2 = SerDeUtils.deserializeWithSchema(SerDeUtils.serializeWithSchema(cd), new org.apache.cassandra.avro.CfDef());
         assert cd.equals(cd2);
         // make sure some of the fields didn't get unexpected zeros put in during [de]serialize operations.
         assert cd.min_compaction_threshold == null;
@@ -126,20 +126,20 @@ public void testCFMetaDataApply() throws ConfigurationException
         
         // we'll be adding this one later. make sure it's not already there.
         assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 5 })) == null;
-        org.apache.cassandra.db.migration.avro.CfDef cfDef = CFMetaData.convertToAvro(cfm);
+        org.apache.cassandra.avro.CfDef cfDef = CFMetaData.convertToAvro(cfm);
         
         // add one.
-        org.apache.cassandra.db.migration.avro.ColumnDef addIndexDef = new org.apache.cassandra.db.migration.avro.ColumnDef();
+        org.apache.cassandra.avro.ColumnDef addIndexDef = new org.apache.cassandra.avro.ColumnDef();
         addIndexDef.index_name = "5";
-        addIndexDef.index_type = org.apache.cassandra.db.migration.avro.IndexType.KEYS;
+        addIndexDef.index_type = org.apache.cassandra.avro.IndexType.KEYS;
         addIndexDef.name = ByteBuffer.wrap(new byte[] { 5 });
         addIndexDef.validation_class = BytesType.class.getName();
         cfDef.column_metadata.add(addIndexDef);
         
         // remove one.
-        org.apache.cassandra.db.migration.avro.ColumnDef removeIndexDef = new org.apache.cassandra.db.migration.avro.ColumnDef();
+        org.apache.cassandra.avro.ColumnDef removeIndexDef = new org.apache.cassandra.avro.ColumnDef();
         removeIndexDef.index_name = "0";
-        removeIndexDef.index_type = org.apache.cassandra.db.migration.avro.IndexType.KEYS;
+        removeIndexDef.index_type = org.apache.cassandra.avro.IndexType.KEYS;
         removeIndexDef.name = ByteBuffer.wrap(new byte[] { 0 });
         removeIndexDef.validation_class = BytesType.class.getName();
         assert cfDef.column_metadata.remove(removeIndexDef);
@@ -627,9 +627,9 @@ public void testUpdateColumnFamilyNoIndexes() throws ConfigurationException, IOE
         assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName) != null;
         
         // updating certain fields should fail.
-        org.apache.cassandra.db.migration.avro.CfDef cf_def = CFMetaData.convertToAvro(cf);
+        org.apache.cassandra.avro.CfDef cf_def = CFMetaData.convertToAvro(cf);
         cf_def.row_cache_size = 43.3;
-        cf_def.column_metadata = new ArrayList<org.apache.cassandra.db.migration.avro.ColumnDef>();
+        cf_def.column_metadata = new ArrayList<org.apache.cassandra.avro.ColumnDef>();
         cf_def.default_validation_class ="BytesType";
         cf_def.min_compaction_threshold = 5;
         cf_def.max_compaction_threshold = 31;
