diff --git a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index fa1356e2..e670d50c 100644
--- a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -188,7 +188,6 @@ void onStart() throws IOException
         ssTables_.addAll(filenames);
         /* Load the index files and the Bloom Filters associated with them. */
         SSTable.onStart(filenames);
-        logger_.debug("Submitting a major compaction task ...");
         MinorCompactionManager.instance().submit(ColumnFamilyStore.this);
         if (columnFamily_.equals(Table.hints_))
         {
@@ -417,13 +416,6 @@ String getTempFileName(List<String> files)
         return table_ + "-" + columnFamily_ + "-" + SSTable.temporaryFile_ + "-" + index;
     }
 
-
-    /*
-    * This version is used only on start up when we are recovering from logs.
-    * In the future we may want to parellelize the log processing for a table
-    * by having a thread per log file present for recovery. Re-visit at that
-    * time.
-    */
     void switchMemtable()
     {
         memtableLock_.writeLock().lock();
@@ -445,12 +437,6 @@ void switchMemtable()
         memtableSwitchCount++;
     }
 
-    /*
-     * This version is used only on start up when we are recovering from logs.
-     * In the future we may want to parellelize the log processing for a table
-     * by having a thread per log file present for recovery. Re-visit at that
-     * time.
-     */
     void switchBinaryMemtable(String key, byte[] buffer) throws IOException
     {
         binaryMemtable_.set(new BinaryMemtable(table_, columnFamily_));
@@ -481,7 +467,6 @@ public void run()
     void forceFlushBinary()
     {
         BinaryMemtableManager.instance().submit(getColumnFamilyName(), binaryMemtable_.get());
-        //binaryMemtable_.get().flush(true);
     }
 
     /**
@@ -728,7 +713,7 @@ else if ((c.isMarkedForDelete() && c.getLocalDeletionTime() <= gcBefore)
      */
     void applyNow(String key, ColumnFamily columnFamily) throws IOException
     {
-        getMemtableThreadSafe().putOnRecovery(key, columnFamily);
+        getMemtableThreadSafe().put(key, columnFamily);
     }
 
     /*
diff --git a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/CommitLog.java b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/CommitLog.java
index ad35957e..3ece7ffe 100644
--- a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/CommitLog.java
+++ b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/CommitLog.java
@@ -34,6 +34,8 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
+import org.apache.commons.lang.StringUtils;
+
 /*
  * Commit Log tracks every write operation into the system. The aim
  * of the commit log is to be able to successfully recover data that was
@@ -300,16 +302,12 @@ void recover(List<File> clogs) throws IOException
             file = clogs.get(i);
             readCommitLogHeader(file.getAbsolutePath(), header2);
             byte[] result = CommitLogHeader.and(header, header2);
-            if ( !CommitLogHeader.isZero(result) )
-            {
-                filesNeeded.push(file);
-            }
-            else
-            {
+            if (CommitLogHeader.isZero(result))
                 break;
-            }
+            filesNeeded.push(file);
         }
 
+        logger_.info("Replaying logs from " + StringUtils.join(filesNeeded, ", "));
         doRecovery(filesNeeded, header);
     }
 
diff --git a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/Memtable.java b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/Memtable.java
index 497583d2..8771220a 100644
--- a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/Memtable.java
+++ b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/Memtable.java
@@ -160,6 +160,8 @@ public void forceflush()
         }
     }
 
+    /** flush synchronously (in the current thread, not on the executor).
+     *  only the recover code should call this. */
     void flushOnRecovery() throws IOException {
         if (!isClean())
             flush(CommitLog.CommitLogContext.NULL);
@@ -201,16 +203,6 @@ public String contents()
         return builder.toString();
     }
 
-    /**
-     * This version is called on commit log recovery. The threshold
-     * is not respected and a forceFlush() needs to be invoked to flush
-     * the contents to disk.  Does not go through the executor.
-    */
-    void putOnRecovery(String key, ColumnFamily columnFamily)
-    {
-        resolve(key, columnFamily);
-    }
-
     ColumnFamily getLocalCopy(String key, String columnFamilyColumn, IFilter filter)
     {
     	String[] values = RowMutation.getColumnAndColumnFamily(columnFamilyColumn);
diff --git a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/PeriodicFlushManager.java b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/PeriodicFlushManager.java
index 58bbda62..f9da29b7 100644
--- a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/PeriodicFlushManager.java
+++ b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/db/PeriodicFlushManager.java
@@ -76,7 +76,6 @@ public void run()
                 columnFamilyStore.forceFlush();
             }
         };
-        logger_.info("start periodic flush daemon every " + flushPeriodInMinutes + " minutes for " + columnFamilyStore.columnFamily_);
         flusher_.scheduleWithFixedDelay(runnable, flushPeriodInMinutes, flushPeriodInMinutes, TimeUnit.MINUTES);       
     }
 }
diff --git a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/io/SSTable.java b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/io/SSTable.java
index 0e2a0c34..15de4f0e 100644
--- a/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/io/SSTable.java
+++ b/incubator/cassandra/branches/cassandra-0.3/src/java/org/apache/cassandra/io/SSTable.java
@@ -403,6 +403,7 @@ private void loadBloomFilter(IFileReader indexReader, long size) throws IOExcept
 
     private void loadIndexFile() throws IOException
     {
+        logger_.debug("Loading indexes from " + dataFile_);
         IFileReader indexReader = null;
         /* Read all block indexes to maintain an index in memory */
         try
@@ -441,7 +442,6 @@ private void loadIndexFile() throws IOException
                     String blockIndexKey = bufIn.readUTF();
                     if (!blockIndexKey.equals(SSTable.blockIndexKey_))
                     {
-                        logger_.debug(" Done reading the block indexes, Index has been created");
                         break;
                     }
                     /* read the size of the block index */
