diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
index 6b9dfed3..9572b454 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
@@ -206,7 +206,8 @@ private boolean shouldCast(DataTypeDescriptor newType,
 	 * @exception             StandardException Thrown on error.
 	 */
 	private DataTypeDescriptor findType(ValueNodeList thenElseList,
-		FromList fromList) throws StandardException
+		FromList fromList, SubqueryList subqueryList, Vector aggregateVector)
+		throws StandardException
 	{
 		/* We need to "prebind" because we want the Types.  Provide
 		 * dummy SubqueryList and AggreateList (we don't care)
@@ -214,11 +215,11 @@ private DataTypeDescriptor findType(ValueNodeList thenElseList,
 
 		ValueNode thenNode =
 			((ValueNode)thenElseList.elementAt(0)).bindExpression(
-				fromList, new SubqueryList(), new Vector());
+				fromList, subqueryList, aggregateVector);
 
 		ValueNode elseNode =
 			((ValueNode)thenElseList.elementAt(1)).bindExpression(
-				fromList, new SubqueryList(), new Vector());
+				fromList, subqueryList, aggregateVector);
 
 		DataTypeDescriptor thenType = thenNode.getTypeServices();
 		DataTypeDescriptor elseType = elseNode.getTypeServices();
@@ -257,7 +258,8 @@ private DataTypeDescriptor findType(ValueNodeList thenElseList,
 		if (isConditionalNode(thenNode))
 		{
 			theType =
-				findType(((ConditionalNode)thenNode).thenElseList, fromList);
+				findType(((ConditionalNode)thenNode).thenElseList, fromList,
+					subqueryList, aggregateVector);
 		}
 
 		if (theType != null) return theType;
@@ -266,7 +268,8 @@ private DataTypeDescriptor findType(ValueNodeList thenElseList,
 		if (isConditionalNode(elseNode))
 		{
 			theType =
-				findType(((ConditionalNode)elseNode).thenElseList, fromList);
+				findType(((ConditionalNode)elseNode).thenElseList, fromList,
+					subqueryList, aggregateVector);
 		}
 
 		if (theType != null) return theType;
@@ -386,15 +389,22 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 						thenElseList.elementAt(0), 
 						bcon.getLeftOperand().getTypeServices().getNullabilityType(true),
 						getContextManager());
-			thenElseList.setElementAt(cast,0);
-		} else {
-			recastNullNodes(thenElseList, findType(thenElseList, fromList));
- 		}
 
+			thenElseList.setElementAt(cast,0);
 		thenElseList.bindExpression(fromList,
 			subqueryList,
 			aggregateVector);
 
+		} else {
+			/* Following call to "findType()" will indirectly bind the
+			 * expressions in the thenElseList, so no need to call
+			 * "thenElseList.bindExpression(...)" after we do this.
+			 * DERBY-2986.
+			 */
+			recastNullNodes(thenElseList,
+				findType(thenElseList, fromList, subqueryList, aggregateVector));
+ 		}
+
 		// Can't get the then and else expressions until after they've been bound
 		ValueNode thenExpression = (ValueNode) thenElseList.elementAt(0);
 		ValueNode elseExpression = (ValueNode) thenElseList.elementAt(1);
