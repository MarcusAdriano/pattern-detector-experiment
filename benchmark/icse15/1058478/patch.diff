diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java
index c281507a..0483f2ad 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java
@@ -574,16 +574,13 @@ public URL getURL(String parameterName)
      * @exception SQLException if a database-access error occurs.
      */
     public Blob getBlob (int parameterIndex) throws SQLException {
-		checkStatus();
-		try {
-			DataValueDescriptor param = getParms().getParameterForGet(parameterIndex-1);
-			Blob v = (Blob) param.getObject();
-			wasNull = (v == null);
-			return v;
-		} catch (StandardException e)
-		{
-			throw EmbedResultSet.noStateChangeException(e);
-		}
+        Object o = getObject(parameterIndex);
+        if (o == null || o instanceof Blob) {
+            return (Blob) o;
+        }
+        throw newSQLException(SQLState.LANG_DATA_TYPE_GET_MISMATCH,
+                Blob.class.getName(),
+                Util.typeName(getParameterJDBCType(parameterIndex)));
     }
 
     /**
@@ -596,16 +593,13 @@ public Blob getBlob (int parameterIndex) throws SQLException {
      * @exception SQLException if a database-access error occurs.
      */
     public Clob getClob (int parameterIndex) throws SQLException {
-		checkStatus();
-		try {
-			DataValueDescriptor param = getParms().getParameterForGet(parameterIndex-1);
-			Clob v = (Clob) param.getObject();
-			wasNull = (v == null);
-			return v;
-		} catch (StandardException e)
-		{
-			throw EmbedResultSet.noStateChangeException(e);
-		}
+        Object o = getObject(parameterIndex);
+        if (o == null || o instanceof Clob) {
+            return (Clob) o;
+        }
+        throw newSQLException(SQLState.LANG_DATA_TYPE_GET_MISMATCH,
+                Clob.class.getName(),
+                Util.typeName(getParameterJDBCType(parameterIndex)));
     }
     
 	public void addBatch() throws SQLException {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
index 18b09c97..82bf1d88 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
@@ -26,6 +26,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.sql.Types;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
@@ -593,6 +594,40 @@ public void testDynamicResultSetsFromOtherConnectionWithExecuteUpdate()
         JDBC.assertNoMoreResults(ps);
     }
 
+    /**
+     * Test that a call to getBlob() to retrieve the value of a non-BLOB
+     * parameter fails with the expected SQLException. Used to throw
+     * ClassCastException, see DERBY-4970.
+     */
+    public void testGetBlobFromIntParameter() throws SQLException {
+        CallableStatement cs = prepareCall("call int_out(?)");
+        cs.registerOutParameter(1, Types.INTEGER);
+        cs.execute();
+        try {
+            cs.getBlob(1);
+            fail("getBlob() on int parameter expected to fail");
+        } catch (SQLException sqle) {
+            assertSQLState("22005", sqle);
+        }
+    }
+
+    /**
+     * Test that a call to getClob() to retrieve the value of a non-CLOB
+     * parameter fails with the expected SQLException. Used to throw
+     * ClassCastException, see DERBY-4970.
+     */
+    public void testGetClobFromIntParameter() throws SQLException {
+        CallableStatement cs = prepareCall("call int_out(?)");
+        cs.registerOutParameter(1, Types.INTEGER);
+        cs.execute();
+        try {
+            cs.getClob(1);
+            fail("getClob() on int parameter expected to fail");
+        } catch (SQLException sqle) {
+            assertSQLState("22005", sqle);
+        }
+    }
+
     // UTILITY METHODS
 
     /**
@@ -737,8 +772,11 @@ public void setUp() throws SQLException {
           "CREATE PROCEDURE NESTED_RESULT_SETS(proctext VARCHAR(128)) LANGUAGE JAVA " +
           "PARAMETER STYLE JAVA EXTERNAL NAME '" +
           ProcedureTest.class.getName() + ".nestedDynamicResultSets' " +
-          "DYNAMIC RESULT SETS 6"
+          "DYNAMIC RESULT SETS 6",
 
+          "CREATE PROCEDURE INT_OUT(OUT X INTEGER) LANGUAGE JAVA " +
+          "PARAMETER STYLE JAVA EXTERNAL NAME '" +
+          ProcedureTest.class.getName() + ".intOut'",
     };
 
     /**
@@ -888,6 +926,13 @@ public static void nestedDynamicResultSets(String procedureText,
     
     }
 
+    /**
+     * Stored procedure with an integer output parameter.
+     * @param out an output parameter
+     */
+    public static void intOut(int[] out) {
+        out[0] = 42;
+    }
     
         /**
          * Test various combinations of getMoreResults
