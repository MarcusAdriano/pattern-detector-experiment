diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index ba70d712..1a4a4c21 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -438,8 +438,15 @@ public boolean accept(File pathname)
                 Table.open(def.name);
             }
             
-            // since we loaded definitions from local storage, log a warning if definitions exist in yaml.
+            // happens when someone manually deletes all tables and restarts.
+            if (tableDefs.size() == 0)
+            {
+                logger.warn("No schema definitions were found in local storage.");
+                // set defsVersion so that migrations leading up to emptiness aren't replayed.
+                defsVersion = uuid;
+            }
             
+            // since we loaded definitions from local storage, log a warning if definitions exist in yaml.
             if (conf.keyspaces != null && conf.keyspaces.size() > 0)
                 logger.warn("Schema definitions were defined both locally and in " + STORAGE_CONF_FILE +
                     ". Definitions in " + STORAGE_CONF_FILE + " were ignored.");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
index bd649c05..1360ff30 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
@@ -72,6 +72,9 @@ public static synchronized void dumpToStorage(UUID version) throws IOException
         Collection<KSMetaData> tables = new ArrayList<KSMetaData>();
         for (IColumn col : cf.getSortedColumns())
         {
+            //  don't allow deleted columns.
+            if (col instanceof DeletedColumn)
+                continue;
             KSMetaData ks = KSMetaData.deserialize(new ByteArrayInputStream(col.value()));
             tables.add(ks);
         }
