diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 7c57e052..58451486 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -5288,17 +5288,25 @@ private void writeSQLCAGRP(byte[] sqlState, int sqlcode,
 	
 	
 	// Delimiters for SQLERRMC values.
-	
+    // The token delimiter value will be used to parse the MessageId from the 
+	// SQLERRMC in MessageService.getLocalizedMessage and the MessageId will be
+    // used to retrive the localized message. If this delimiter value is changed
+    // please make sure to make appropriate changes in
+    // MessageService.getLocalizedMessage that gets called from 
+    // SystemProcedures.SQLCAMESSAGE
 	/**
 	 * <code>SQLERRMC_TOKEN_DELIMITER</code> separates message argument tokens 
 	 */
-	private static String SQLERRMC_TOKEN_DELIMITER = new String(new byte[] {20});
+	private static String SQLERRMC_TOKEN_DELIMITER = new String(new char[] {(char)20});
+
 	
+    // This token delimiter value is used to separate the tokens for multiple 
+    // error messages.  This is used in SystemProcedures.SQLCAMESSAGE.
 	/**
 	 * <code>SQLERRMC_MESSAGE_DELIMITER</code> When message argument tokes are sent,
 	 * this value separates the tokens for mulitiple error messages 
 	 */
-	private static String SQLERRMC_MESSAGE_DELIMITER = new String(new byte[] {20,20,20});
+	private static String SQLERRMC_MESSAGE_DELIMITER = new String(new char[] {(char)20,(char)20,(char)20});
 	
 	/**
 	 * <code>SQLERRMC_PREFORMATTED_MESSAGE_DELIMITER</code>, When full message text is 
@@ -5315,6 +5323,19 @@ private void writeSQLCAGRP(byte[] sqlState, int sqlcode,
 	 * This method will also truncate the value according the client capacity.
 	 * CCC can only handle 70 characters.
 	 * 
+     * Server sends the sqlerrmc using UTF8 encoding to the client.
+     * To get the message, client sends back information to the server
+     * calling SYSIBM.SQLCAMESSAGE (see Sqlca.getMessage).  Several parameters 
+     * are sent to this procedure including the locale, the sqlerrmc that the 
+     * client received from the server. 
+     * On server side, the procedure SQLCAMESSAGE in SystemProcedures then calls
+     * the MessageService.getLocalizedMessage to retrieve the localized error message. 
+     * In MessageService.getLocalizedMessage the sqlerrmc that is passed in, 
+     * is parsed to retrieve the message id. The value it uses to parse the MessageId
+     * is char value of 20, otherwise it uses the entire sqlerrmc as the message id. 
+     * This messageId is then used to retrieve the localized message if present, to 
+     * the client.
+     * 
 	 * @param se  SQLException to build SQLERRMC
 	 *  
 	 * @return  String which is either the message arguments to be passed to 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
index 24e401b1..48d3fc11 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
@@ -96,7 +96,10 @@ public static void SQLCAMESSAGE(int sqlcode, short errmcLen, String sqlerrmc,
 										String[] msg, int[] rc)
 	{
 		int numMessages = 1;
-		byte[] b = {20, 20, 20};
+        
+        // This corresponds to the DRDAConnThread.SQLERRMC_MESSAGE_DELIMITER
+        // delimiter for multiple messages that are set in sqlerrmc.
+		char[] b = {(char)20, (char)20, (char)20};
 		String errSeparator = new String(b);
 
 		// Figure out if there are multiple exceptions in sqlerrmc. If so get each one
