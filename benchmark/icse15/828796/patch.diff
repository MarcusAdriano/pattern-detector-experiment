diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java
index 45cfff6f..f9a4f7db 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java
@@ -770,7 +770,13 @@ public void clearSnapshot() throws IOException
             logger_.debug("Cleared out all snapshot directories");
     }
 
-    public void forceTableFlushBinary(String tableName) throws IOException
+    /**
+     * Flush all memtables for a table and column families.
+     * @param tableName
+     * @param columnFamilies
+     * @throws IOException
+     */
+    public void forceTableFlush(String tableName, String... columnFamilies) throws IOException
     {
         if (DatabaseDescriptor.getTable(tableName) == null)
         {
@@ -778,16 +784,33 @@ public void forceTableFlushBinary(String tableName) throws IOException
         }
 
         Table table = Table.open(tableName);
-        Set<String> columnFamilies = table.getColumnFamilies();
+        Set<String> positiveColumnFamilies = table.getColumnFamilies();
+
+        // no columnFamilies means flush'em all.
+        if (columnFamilies == null || columnFamilies.length == 0)
+        {
+            columnFamilies = positiveColumnFamilies.toArray(new String[positiveColumnFamilies.size()]);
+        }
+
         for (String columnFamily : columnFamilies)
         {
+
+            if (positiveColumnFamilies.contains(columnFamily))
+            {
             ColumnFamilyStore cfStore = table.getColumnFamilyStore(columnFamily);
-            logger_.debug("Forcing flush on keyspace " + tableName + " on CF " + columnFamily);
+                logger_.debug("Forcing binary flush on keyspace " + tableName + ", CF " + columnFamily);
             cfStore.forceFlushBinary();
+                logger_.debug("Forcing flush on keyspace " + tableName + ", CF " + columnFamily);
+                cfStore.forceFlush();
+            }
+            else
+            {
+                // this means there was a cf passed in that is not recognized in the keyspace. report it and continue.
+                logger_.warn(String.format("Invalid column family specified: %s. Proceeding with others.", columnFamily));
+            }
         }
     }
 
-
     /* End of MBean interface methods */
     
     /**
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageServiceMBean.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageServiceMBean.java
index 9759bcc3..8c59e183 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageServiceMBean.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageServiceMBean.java
@@ -86,11 +86,13 @@
     public void clearSnapshot() throws IOException;
 
     /**
-     * Flush all binary memtables for a table
+     * Flush all memtables for the given column families, or all columnfamilies for the given table
+     * if none are explicitly listed.
      * @param tableName
+     * @param columnFamilies
      * @throws IOException
      */
-    public void forceTableFlushBinary(String tableName) throws IOException;
+    public void forceTableFlush(String tableName, String... columnFamilies) throws IOException;
 
     /** set the logging level at runtime */
     public void setLog4jLevel(String classQualifier, String level);
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/tools/NodeProbe.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/tools/NodeProbe.java
index 245bce80..e0d6bf61 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -260,11 +260,11 @@ public void forceTableCompaction() throws IOException
     }
 
     /**
-     * Trigger a binary flush on CFs of a table.
+     * Trigger a flush of the given CFs
      */
-    public void forceTableFlushBinary(String tableName) throws IOException
+    public void forceTableFlush(String tableName, String... columnFamilies) throws IOException
     {
-        ssProxy.forceTableFlushBinary(tableName);
+        ssProxy.forceTableFlush(tableName, columnFamilies);
     }
 
 
@@ -529,7 +529,7 @@ private static void printUsage()
     {
         HelpFormatter hf = new HelpFormatter();
         String header = String.format(
-                "%nAvailable commands: ring, cluster, info, cleanup, compact, cfstats, snapshot [name], clearsnapshot, bootstrap, tpstats, flush_binary");
+                "%nAvailable commands: ring, cluster, info, cleanup, compact, cfstats, snapshot [name], clearsnapshot, bootstrap, tpstats, flush");
         String usage = String.format("java %s -host <arg> <command>%n", NodeProbe.class.getName());
         hf.printHelp(usage, "", options, header);
     }
@@ -621,7 +621,7 @@ else if (cmdName.equals("tpstats"))
         {
             probe.printThreadPoolStats(System.out);
         }
-        else if (cmdName.equals("flush_binary"))
+        else if (cmdName.equals("flush"))
         {
             if (probe.getArgs().length < 2)
             {
@@ -629,7 +629,13 @@ else if (cmdName.equals("flush_binary"))
                 NodeProbe.printUsage();
                 System.exit(1);
             }
-            probe.forceTableFlushBinary(probe.getArgs()[1]);
+
+            String[] columnFamilies = new String[probe.getArgs().length - 2];
+            for (int i = 0; i < columnFamilies.length; i++)
+            {
+                columnFamilies[i] = probe.getArgs()[i + 2];
+            }   
+            probe.forceTableFlush(probe.getArgs()[1], columnFamilies);
         }
         else
         {
