diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java
index 15b9db21..0aa9d678 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java
@@ -147,11 +147,15 @@ private static void writeVal(Writer writer, float boost, String name, Object v,
     } else {
       if( boost != 1.0f ) {
         XML.writeXML(writer, "field", v.toString(), "name", name, "boost", boost, "update", update);
-      } else if (v != null) {
+      } else {
+        if (v == null)  {
+          XML.writeXML(writer, "field", null, "name", name, "update", update, "null", true);
+        } else  {
         XML.writeXML(writer, "field", v.toString(), "name", name, "update", update);
       }
     }
   }
+  }
 
 
   public static String toXML( SolrInputDocument doc )
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
index 98af835d..7106d150 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
@@ -30,6 +31,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import junit.framework.Assert;
 
 import org.apache.lucene.util._TestUtil;
@@ -1393,7 +1395,7 @@ public void testUpdateMultiValuedField() throws Exception {
     assertEquals("Failed to add doc to cloud server", 1, response.getResults().getNumFound());
 
     Map<String, List<String>> operation = new HashMap<String, List<String>>();
-    operation.put("set", Lists.asList("first", "second", new String[]{"third"}));
+    operation.put("set", Arrays.asList("first", "second", "third"));
     doc.addField("multi_ss", operation);
     solrServer.add(doc);
     solrServer.commit(true, true);
@@ -1403,7 +1405,7 @@ public void testUpdateMultiValuedField() throws Exception {
     assertEquals("Field values was not updated with all values via atomic update", 3, values.size());
 
     operation.clear();
-    operation.put("add", Lists.asList("fourth", new String[]{"fifth"}));
+    operation.put("add", Arrays.asList("fourth", "fifth"));
     doc.removeField("multi_ss");
     doc.addField("multi_ss", operation);
     solrServer.add(doc);
@@ -1413,6 +1415,27 @@ public void testUpdateMultiValuedField() throws Exception {
     assertEquals("Field values was not updated with all values via atomic update", 5, values.size());
   }
   
+  @Test
+  public void testSetNullUpdates() throws Exception {
+    SolrServer solrServer = getSolrServer();
+    SolrInputDocument doc = new SolrInputDocument();
+    doc.addField("id", "testSetNullUpdates");
+    doc.addField("single_s", "test-value");
+    doc.addField("multi_ss", Arrays.asList("first", "second"));
+    solrServer.add(doc);
+    solrServer.commit(true, true);
+    doc.removeField("single_s");
+    doc.removeField("multi_ss");
+    Map<String, Object> map = Maps.newHashMap();
+    map.put("set", null);
+    doc.addField("multi_ss", map);
+    solrServer.add(doc);
+    solrServer.commit(true, true);
+    QueryResponse response = solrServer.query(new SolrQuery("id:testSetNullUpdates"));
+    assertNotNull("Entire doc was replaced because null update was not written", response.getResults().get(0).getFieldValue("single_s"));
+    assertNull("Null update failed. Value still exists in document", response.getResults().get(0).getFieldValue("multi_ss"));
+  }
+  
   @Test
   public void testQueryWithParams() throws SolrServerException {
     SolrServer server = getSolrServer();
