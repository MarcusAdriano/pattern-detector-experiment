diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
index bafe7510..c57ed0e6 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
@@ -137,6 +137,6 @@ public void setDocSession(Map<String, Object> docSession) {
 
 
   public SolrCore getSolrCore() {
-    return dataImporter.getCore();
+    return dataImporter == null ? null : dataImporter.getCore();
   }
 }
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
index eb904baa..5788cf69 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
@@ -262,7 +262,7 @@ public void readFromXml(Element e) {
                   DataImportHandlerException.SEVERE,
                   "<function> must have a 'name' and 'class' attributes");
         try {
-          evaluators.put(func, (Evaluator) DocBuilder.loadClass(clz)
+          evaluators.put(func, (Evaluator) DocBuilder.loadClass(clz, null)
                   .newInstance());
         } catch (Exception exp) {
           throw new DataImportHandlerException(
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler.java
index fedc6ac2..47ed3e91 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler.java
@@ -300,9 +300,6 @@ public void log(int event, String name, Object row) {
       }
 
 
-      public Class loadClass(String name) throws ClassNotFoundException {
-        return loader.findClass(name);
-      }
 
       public SolrDoc getSolrDocInstance() {
         return new SolrDocumentWrapper();
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
index 5499de5d..7cdd1214 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
@@ -82,7 +82,7 @@
   DataImporter() {
   }
 
-  public DataImporter(String dataConfig, SolrCore core,
+  DataImporter(String dataConfig, SolrCore core,
                       Map<String, Properties> ds) {
     if (dataConfig == null)
       throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
@@ -236,31 +236,31 @@ private void initEntity(DataConfig.Entity e,
 
   }
 
-  public DataConfig getConfig() {
+  DataConfig getConfig() {
     return config;
   }
 
-  public Date getIndexStartTime() {
+  Date getIndexStartTime() {
     return indexStartTime;
   }
 
-  public void setIndexStartTime(Date indextStartTime) {
+  void setIndexStartTime(Date indextStartTime) {
     this.indexStartTime = indextStartTime;
   }
 
-  public Date getLastIndexTime() {
+  Date getLastIndexTime() {
     return lastIndexTime;
   }
 
-  public void setLastIndexTime(Date lastIndexTime) {
+  void setLastIndexTime(Date lastIndexTime) {
     this.lastIndexTime = lastIndexTime;
   }
 
-  public void store(Object key, Object value) {
+  void store(Object key, Object value) {
     store.put(key, value);
   }
 
-  public Object retrieve(Object key) {
+  Object retrieve(Object key) {
     return store.get(key);
   }
 
@@ -291,7 +291,7 @@ DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx
       dataSrc = new JdbcDataSource();
     } else {
       try {
-        dataSrc = (DataSource) DocBuilder.loadClass(impl).newInstance();
+        dataSrc = (DataSource) DocBuilder.loadClass(impl, getCore()).newInstance();
       } catch (Exception e) {
         throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
                 "Invalid type for data source: " + impl, e);
@@ -406,11 +406,11 @@ void runCmd(RequestParams reqParams, SolrWriter sw,
 
   }
 
-  public DocBuilder getDocBuilder() {
+  DocBuilder getDocBuilder() {
     return docBuilder;
   }
 
-  public static final ThreadLocal<AtomicLong> QUERY_COUNT = new ThreadLocal<AtomicLong>() {
+  static final ThreadLocal<AtomicLong> QUERY_COUNT = new ThreadLocal<AtomicLong>() {
     protected AtomicLong initialValue() {
       return new AtomicLong();
     }
@@ -516,7 +516,7 @@ public RequestParams(Map<String, Object> requestParams) {
   }
 
 
-  public SolrCore getCore() {
+  SolrCore getCore() {
     return core;
   }
 
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
index 60237e80..13c996d4 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
@@ -17,6 +17,8 @@
 
 package org.apache.solr.handler.dataimport;
 
+import org.apache.solr.core.SolrCore;
+
 import java.util.*;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -232,7 +234,7 @@ private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,
                              Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,
                              ContextImpl parentCtx) {
 
-    EntityProcessor entityProcessor = getEntityProcessor(entity);
+    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());
     DataSource ds = entity.dataSrc;
     if (verboseDebug) {
       ds = DebugLogger.wrapDs(ds);
@@ -415,7 +417,7 @@ private void addFieldValue(DataConfig.Field field, Map<String, Object> arow,
     }
   }
 
-  public static EntityProcessor getEntityProcessor(DataConfig.Entity entity) {
+  public static EntityProcessor getEntityProcessor(DataConfig.Entity entity, SolrCore core) {
     if (entity.processor != null)
       return entity.processor;
     EntityProcessor entityProcessor;
@@ -423,7 +425,7 @@ public static EntityProcessor getEntityProcessor(DataConfig.Entity entity) {
       entityProcessor = new SqlEntityProcessor();
     } else {
       try {
-        entityProcessor = (EntityProcessor) loadClass(entity.proc)
+        entityProcessor = (EntityProcessor) loadClass(entity.proc, core)
                 .newInstance();
       } catch (Exception e) {
         throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
@@ -469,7 +471,7 @@ public static EntityProcessor getEntityProcessor(DataConfig.Entity entity) {
 
     Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();
     resolver.addNamespace(null, (Map) entity.allAttributes);
-    EntityProcessor entityProcessor = getEntityProcessor(entity);
+    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());
     entityProcessor.init(new ContextImpl(entity, resolver, entity.dataSrc,
             Context.FIND_DELTA, requestParameters.requestParams, session, null,
             dataImporter));
@@ -506,7 +508,7 @@ public static EntityProcessor getEntityProcessor(DataConfig.Entity entity) {
     myModifiedPks.addAll(deltaSet);
     Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();
     if (parentEntity != null && parentEntity.isDocRoot) {
-      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity);
+      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());
       parentEntityProcessor.init(new ContextImpl(parentEntity, resolver,
               parentEntity.dataSrc, Context.FIND_DELTA,
               requestParameters.requestParams, session, null, dataImporter));
@@ -570,17 +572,16 @@ static String getTimeElapsedSince(long l) {
   }
 
   @SuppressWarnings("unchecked")
-  static Class loadClass(String name) throws ClassNotFoundException {
-    DocBuilder inst = INSTANCE.get();
+  static Class loadClass(String name, SolrCore core) throws ClassNotFoundException {
     try {
-      return inst != null ?
-              inst.writer.loadClass(name) :
+      return core != null ?
+              core.getResourceLoader().findClass(name) :
               Class.forName(name);
     } catch (Exception e) {
       try {
         String n = DocBuilder.class.getPackage().getName() + "." + name;
-        return inst != null ?
-                inst.writer.loadClass(n) :
+        return core != null ?
+                core.getResourceLoader().findClass(n) :
                 Class.forName(n);
       } catch (Exception e1) {
         throw new ClassNotFoundException("Unable to load " + name + " or " + DocBuilder.class.getPackage().getName() + "." + name, e);
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
index 3d6ecd7e..d6b5e126 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
@@ -93,7 +93,7 @@ public boolean add(Transformer transformer) {
         continue;
       }
       try {
-        Class clazz = DocBuilder.loadClass(trans);
+        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());
         if (clazz.newInstance() instanceof Transformer) {
           transformers.add((Transformer) clazz.newInstance());
         } else {
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
index 7a068678..4f56f27a 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
@@ -16,6 +16,8 @@
  */
 package org.apache.solr.handler.dataimport;
 
+import org.apache.solr.common.SolrException;
+
 import java.sql.*;
 import java.util.*;
 import java.util.concurrent.Callable;
@@ -97,26 +99,39 @@ private void createConnectionFactory(final Context context,
                                        final Properties initProps) {
 
     final String url = initProps.getProperty(URL);
-    String driver = initProps.getProperty(DRIVER);
+    final String driver = initProps.getProperty(DRIVER);
 
     if (url == null)
       throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
               "JDBC URL cannot be null");
 
+    if (driver != null) {
     try {
-      if (driver != null)
-        Class.forName(driver);
+        DocBuilder.loadClass(driver, context.getSolrCore());
     } catch (ClassNotFoundException e) {
-      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
-              "driver could not be loaded");
+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Could not load driver: " + driver, e);
+      }
+    } else {
+      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Driver must be specified");
     }
+
     factory = new Callable<Connection>() {
       public Connection call() throws Exception {
         LOG.info("Creating a connection for entity "
                 + context.getEntityAttribute(DataImporter.NAME) + " with URL: "
                 + url);
         long start = System.currentTimeMillis();
-        Connection c = DriverManager.getConnection(url, initProps);
+        Connection c = null;
+        try {
+          c = DriverManager.getConnection(url, initProps);
+        } catch (SQLException e) {
+          // DriverManager does not allow you to use a driver which is not loaded through
+          // the class loader of the class which is trying to make the connection.
+          // This is a workaround for cases where the user puts the driver jar in the
+          // solr.home/lib or solr.home/core/lib directories.
+          Driver d = (Driver) DocBuilder.loadClass(driver, context.getSolrCore()).newInstance();
+          c = d.connect(url, initProps);
+        }
         LOG.info("Time taken for getConnection(): "
                 + (System.currentTimeMillis() - start));
         return c;
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java
index a6ff1213..ffda5bd1 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java
@@ -230,10 +230,6 @@ public Date loadIndexStartTime() {
     return this.getStartTime();
   }
 
-  public Class loadClass(String name) throws ClassNotFoundException {
-    return Class.forName(name);
-  }
-
   /**
    * <p>
    * Stores the last indexed time into the <code>IMPORTER_PROPERTIES</code>
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder.java b/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder.java
index f453c7f4..ec298a54 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder.java
@@ -38,7 +38,7 @@
 
   @Test
   public void loadClass() throws Exception {
-    Class clz = DocBuilder.loadClass("RegexTransformer");
+    Class clz = DocBuilder.loadClass("RegexTransformer", null);
     Assert.assertNotNull(clz);
   }
 
