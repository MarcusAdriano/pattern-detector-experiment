diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/Overseer.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/Overseer.java
index 68fc59ee..b7bb8490 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/Overseer.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/Overseer.java
@@ -323,7 +323,6 @@ private void updateState(CoreState coreState) {
    */
   private void publishCloudState() {
     try {
-      System.out.println("publish:" + cloudState.getCollections());
       CloudStateUtility.update(zkClient, cloudState, null);
     } catch (KeeperException e) {
       log.error("Could not publish cloud state.", e);
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index 22299e53..7ddceb28 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -622,7 +622,7 @@ public void uploadToZK(File dir, String zkPath) throws IOException, KeeperExcept
     for(File file : files) {
       if (!file.getName().startsWith(".")) {
         if (!file.isDirectory()) {
-          zkClient.setData(zkPath + "/" + file.getName(), file);
+          zkClient.makePath(zkPath + "/" + file.getName(), file);
         } else {
           uploadToZK(file, zkPath + "/" + file.getName());
         }
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase.java
index 5ba888bc..c37683ab 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase.java
@@ -96,9 +96,10 @@ static void buildZooKeeper(String zkHost, String zkAddress, String config,
     zkClient.close();
   }
 
-  private static void putConfig(SolrZkClient zkConnection, String name)
+  private static void putConfig(SolrZkClient zkClient, String name)
       throws Exception {
-    zkConnection.setData("/configs/conf1/" + name, getFile("solr"
+
+    zkClient.makePath("/configs/conf1/" + name, getFile("solr"
         + File.separator + "conf" + File.separator + name));
   }
 
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
index 579611d2..c6360a4e 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullDistributedZkTest.java
@@ -51,12 +51,10 @@
 import org.apache.zookeeper.KeeperException;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 
 /**
  *
  */
-@Ignore("Trying to figure out an issue")
 public class FullDistributedZkTest extends AbstractDistributedZkTestCase {
   
   static final String DISTRIB_UPDATE_CHAIN = "distrib-update-chain";
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
index 7a82f37c..a7ac24fb 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
@@ -63,10 +63,10 @@ public void testShardAssignment() throws Exception {
    
       props.put("num_shards", "3");
       ZkNodeProps zkProps = new ZkNodeProps(props);
-      zkClient.setData("/collections/collection1", zkProps.store());
+      zkClient.makePath("/collections/collection1", zkProps.store());
       props.put("num_shards", "1");
       zkProps = new ZkNodeProps(props);
-      zkClient.setData("/collections/collection2", zkProps.store());
+      zkClient.makePath("/collections/collection2", zkProps.store());
       ZkNodeProps z = new ZkNodeProps(props);
       
       CoreDescriptor desc = new CoreDescriptor(null, "core1", "");
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
index ef27a15c..0a171ac4 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
@@ -49,7 +49,6 @@
   private String defaultCollection;
   private LBHttpSolrServer lbServer;
   Random rand = new Random();
-  static AtomicInteger cnt = new AtomicInteger(0);
 
   /**
    * @param zkHost The address of the zookeeper quorum containing the cloud state
@@ -95,10 +94,6 @@ public void connect() {
       synchronized (this) {
         if (zkStateReader == null) {
           try {
-            if (cnt.incrementAndGet() > 1) {
-              throw new IllegalStateException();
-            }
-            System.out.println("SHOULD ONLY HAPPEN ONCE");
             ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,
                 zkClientTimeout, true);
             zk.createClusterStateWatchersAndUpdate();
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
index 4d43fa33..dd16fca1 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
@@ -273,6 +273,16 @@ public void makePath(String path) throws KeeperException,
     makePath(path, null, CreateMode.PERSISTENT);
   }
   
+  public void makePath(String path, File file) throws IOException,
+      KeeperException, InterruptedException {
+    if (log.isInfoEnabled()) {
+      log.info("Write to ZooKeepeer " + file.getAbsolutePath() + " to " + path);
+    }
+    
+    String data = FileUtils.readFileToString(file);
+    makePath(path, data.getBytes("UTF-8"));
+  }
+  
   public void makePath(String path, CreateMode createMode) throws KeeperException,
       InterruptedException {
     makePath(path, null, createMode);
@@ -398,15 +408,7 @@ public void makePath(String zkPath, CreateMode createMode, Watcher watcher)
    */
   public void setData(String path, byte[] data) throws KeeperException,
       InterruptedException {
-
-    makePath(path);
-
-    Object exists = exists(path, null);
-    if (exists != null) {
       setData(path, data, -1);
-    } else {
-      create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
-    }
   }
 
   /**
