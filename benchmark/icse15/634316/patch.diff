diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index 28b41dd5..3885554f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -591,7 +591,18 @@ public void bindExpressionsWithTables(FromList fromListParam)
 	public void bindTargetExpressions(FromList fromListParam)
 					throws StandardException
 	{
+		/*
+		 * With a FromSubquery in the FromList we cannot bind target expressions 
+		 * at this level (DERBY-3321)
+		 */
+		CollectNodesVisitor cnv = new CollectNodesVisitor(FromSubquery.class, 
+														  FromSubquery.class);
+		fromList.accept(cnv);
+		if (!cnv.getList().isEmpty()){		
+			bindTargetListOnly = false;
+		} else {
 		bindTargetListOnly = true;
+		}		
 		bindExpressions(fromListParam);
 		bindTargetListOnly = false;
 	}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java
index 94135aae..3007acb3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java
@@ -355,6 +355,33 @@ public void testBasicOperations()
 		/* Expected rows are as above */
 		JDBC.assertUnorderedResultSet(rs, expectedRows);
 		
+		/*
+		 * DERBY-3321 revealed an NPE with a subquery in the [NOT] EXIST subuery FromList.
+		 */
+		s.executeUpdate("create table a (aa int, bb int)");
+		s.executeUpdate("create table b (bb int)");
+		s.executeUpdate("insert into a values (1,1),(1,2),(2,2)");
+		s.executeUpdate("insert into b values (1)");
+		
+		/* NOT EXISTS */
+		sb = new StringBuffer();
+		sb.append("select * from a ");
+		sb.append("where not exists ");
+		sb.append("(select bb from (select bb from b) p where a.bb=p.bb)");
+		rs = s.executeQuery(sb.toString());
+		expectedRows = new String [][] {{"1","2"},		
+										{"2","2"}};
+		JDBC.assertUnorderedResultSet(rs, expectedRows);		
+		
+		/* EXISTS */
+		sb = new StringBuffer();
+		sb.append("select * from a ");
+		sb.append("where exists ");
+		sb.append("(select bb from (select bb from b) p where a.bb=p.bb)");
+		rs = s.executeQuery(sb.toString());
+		expectedRows = new String [][] {{"1","1"}};										
+		JDBC.assertUnorderedResultSet(rs, expectedRows);	
+		
 		/*
 		 * Clean up the tables used.
 		 */				
@@ -363,6 +390,9 @@ public void testBasicOperations()
 		s.executeUpdate("drop table employees");
 		s.executeUpdate("drop table departments");			
 		
+		s.executeUpdate("drop table a");	
+		s.executeUpdate("drop table b");	
+		
 		s.close();
 	}
 
