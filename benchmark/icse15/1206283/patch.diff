diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/HashPartitioner.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/HashPartitioner.java
index a78b25f9..2ac078d8 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/HashPartitioner.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/HashPartitioner.java
@@ -21,7 +21,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
-
+/**
+ * Class to partition int range into n ranges.
+ * 
+ */
 public class HashPartitioner {
   
   public static class Range {
@@ -34,9 +37,15 @@ public Range(long min, long max) {
     }
   }
   
+  /**
+   * works up to 65537 before requested num of ranges is one short
+   * 
+   * @param partitions
+   * @return
+   */
   public List<Range> partitionRange(int partitions) {
     // some hokey code to partition the int space
-    long range = Integer.MAX_VALUE + (Math.abs((long)Integer.MIN_VALUE));
+    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));
     long srange = range / partitions;
     
     List<Range> ranges = new ArrayList<Range>(partitions);
@@ -46,8 +55,8 @@ public Range(long min, long max) {
 
     while (end < Integer.MAX_VALUE) {
       end = start + srange;
-      start = end + 1L;
       ranges.add(new Range(start, end));
+      start = end + 1L;
     }
     
     return ranges;
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
index e69de29b..f4167db7 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
@@ -0,0 +1,44 @@
+package org.apache.solr.cloud;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with this
+ * work for additional information regarding copyright ownership. The ASF
+ * licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+import java.util.List;
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.cloud.HashPartitioner.Range;
+
+public class TestHashPartitioner extends SolrTestCaseJ4 {
+  
+  public void testMapHashes() throws Exception {
+    HashPartitioner hp = new HashPartitioner();
+    
+    for (int i = 1; i <= 30000; i++) {
+      List<Range> ranges = hp.partitionRange(i);
+      
+      assertEquals(i, ranges.size());
+      
+      assertTrue("First range does not start before " + Integer.MIN_VALUE
+          + " it is:" + ranges.get(0).min,
+          ranges.get(0).min <= Integer.MIN_VALUE);
+      assertTrue("Last range does not end after " + Integer.MAX_VALUE
+          + " it is:" + ranges.get(ranges.size() - 1).max,
+          ranges.get(ranges.size() - 1).max >= Integer.MAX_VALUE);
+    }
+  }
+  
+}
