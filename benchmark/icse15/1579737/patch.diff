diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index 50e1f914..f545f1a6 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -27,7 +27,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Hashtable;
 import java.util.Properties;
 import java.util.Vector;
-
 import org.apache.derby.catalog.types.StatisticsImpl;
 import org.apache.derby.iapi.db.TriggerExecutionContext;
 import org.apache.derby.iapi.error.StandardException;
@@ -48,8 +47,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
-import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
+import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
 import org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
@@ -60,6 +59,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.execute.NoPutResultSet;
 import org.apache.derby.iapi.sql.execute.RowChanger;
 import org.apache.derby.iapi.sql.execute.TargetResultSet;
+import org.apache.derby.iapi.store.access.AccessFactoryGlobals;
 import org.apache.derby.iapi.store.access.ColumnOrdering;
 import org.apache.derby.iapi.store.access.ConglomerateController;
 import org.apache.derby.iapi.store.access.GroupFetchScanController;
@@ -1763,29 +1763,24 @@ private void setUpAllSorts(ExecRow sourceRow,
 			boolean[] isAscending     = constants.irgs[index].isAscending();
            
 			int numColumnOrderings;
-			SortObserver sortObserver = null;
+            SortObserver sortObserver;
 
 			/* We can only reuse the wrappers when doing an
 			 * external sort if there is only 1 index.  Otherwise,
 			 * we could get in a situation where 1 sort reuses a
 			 * wrapper that is still in use in another sort.
 			 */
-			boolean reuseWrappers = (numIndexes == 1);
-			if (cd.getIndexDescriptor().isUnique())
-			{
-				numColumnOrderings = baseColumnPositions.length;
-				String[] columnNames = getColumnNames(baseColumnPositions);
+            final boolean reuseWrappers = (numIndexes == 1);
+            final IndexRowGenerator indDes = cd.getIndexDescriptor();
+            final String indexOrConstraintName = cd.getConglomerateName();
+            Properties sortProperties = null;
 
-				String indexOrConstraintName = cd.getConglomerateName();
-				if (cd.isConstraint()) 
-				{
-                    // so, the index is backing up a constraint
-
-					ConstraintDescriptor conDesc = 
-                        dd.getConstraintDescriptor(td, cd.getUUID());
+            if (indDes.isUnique())
+            {
+                numColumnOrderings =
+                        indDes.isUnique() ? baseColumnPositions.length :
+                        baseColumnPositions.length + 1;
 
-					indexOrConstraintName = conDesc.getConstraintName();
-				}
 				sortObserver = 
                     new UniqueIndexSortObserver(
                             false, // don't clone rows
@@ -1794,6 +1789,25 @@ private void setUpAllSorts(ExecRow sourceRow,
                             indexRows[index],
                             reuseWrappers,
                             td.getName());
+            } else if (indDes.isUniqueWithDuplicateNulls())
+            {
+                numColumnOrderings = baseColumnPositions.length + 1;
+                // tell transaction controller to use the unique with
+                // duplicate nulls sorter, when making createSort() call.
+                sortProperties = new Properties();
+                sortProperties.put(
+                   AccessFactoryGlobals.IMPL_TYPE,
+                   AccessFactoryGlobals.SORT_UNIQUEWITHDUPLICATENULLS_EXTERNAL);
+                //use sort operator which treats nulls unequal
+                sortObserver =
+                        new UniqueWithDuplicateNullsIndexSortObserver(
+                                false, // don't clone rows
+                                cd.isConstraint(),
+                                indexOrConstraintName,
+                                indexRows[index],
+                                reuseWrappers,
+                                td.getName());
+
 			}
 			else
 			{
@@ -1822,7 +1836,7 @@ private void setUpAllSorts(ExecRow sourceRow,
 			// create the sorters
 			sortIds[index] = 
                 tc.createSort(
-                    (Properties)null, 
+                    sortProperties,
                     indexRows[index].getRowArrayClone(),
                     ordering[index],
                     sortObserver,
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java
index 8cbaf913..64df6845 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java
@@ -45,6 +45,11 @@
  */
 public class NullableUniqueConstraintTest extends BaseJDBCTestCase {
     
+    private static final String LANG_DUPLICATE_KEY_CONSTRAINT = "23505";
+    static String expImpDataFile;          // file used to perform
+                                           // import/export
+    static boolean exportFilesCreated = false;
+
     /**
      * Basic constructor.
      */
@@ -62,7 +67,7 @@ public static Test suite() {
         TestSuite suite = new TestSuite("NullableUniqueConstraintTest");
         suite.addTest(TestConfiguration.defaultSuite(
                             NullableUniqueConstraintTest.class));
-        return suite;
+        return new SupportFilesSetup(suite);
     }
     
     /**
@@ -73,6 +78,21 @@ protected void setUp() throws Exception {
         Statement stmt = con.createStatement();
         stmt.executeUpdate("create table constraintest (val1 varchar (20), " +
                 "val2 varchar (20), val3 varchar (20), val4 varchar (20))");
+        expImpDataFile =
+                SupportFilesSetup.getReadWrite("t.data").getPath();
+
+        if (!exportFilesCreated) {
+            exportFilesCreated = true;
+
+            Statement s = createStatement();
+            s.executeUpdate("create table t(i int)");
+            s.executeUpdate("insert into t values 1,2,2,3");
+            s.executeUpdate(
+                    "call SYSCS_UTIL.SYSCS_EXPORT_TABLE (" +
+                            "    'APP' , 'T' , '" + expImpDataFile + "'," +
+                            "    null, null , null)");
+            s.executeUpdate("drop table t");
+        }
     }
     
     protected void tearDown() throws Exception {
@@ -584,6 +604,42 @@ public void testInsertDeleteContinuouslySameValue() throws SQLException {
         assertTableRowCount("D4081", 0);
     }
 
+    public void testDerby6374() throws SQLException {
+        Statement s = createStatement();
+
+        s.executeUpdate("create table t(i int)");
+
+         try {
+            // Try the test cases below with both "replace" and not with
+            // the import statement:
+            for (int addOrReplace = 0; addOrReplace < 2; addOrReplace++) {
+
+                // Import duplicate data into a table a nullable
+                // UNIQUE constraint
+                s.executeUpdate("alter table t add constraint c unique(i)");
+                commit();
+
+                try {
+                    s.executeUpdate(
+                            "call SYSCS_UTIL.SYSCS_IMPORT_TABLE (" +
+                            "    'APP' , 'T' , '" + expImpDataFile + "'," +
+                            "    null, null , null, " + addOrReplace + ")");
+                    fail("expected duplicates error on commit");
+                } catch (SQLException e) {
+                    assertSQLState(LANG_DUPLICATE_KEY_CONSTRAINT, e);
+                }
+                s.executeUpdate("alter table t drop constraint c");
+            }
+        } finally {
+            try {
+                s.executeUpdate("drop table t");
+                commit();
+            } catch (SQLException e) {
+                e.printStackTrace(System.out);
+            }
+        }
+    }
+
     public static void main(String [] args) {
         TestResult tr = new TestResult();
         Test t = suite();
