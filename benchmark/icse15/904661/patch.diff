diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/Streaming.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/Streaming.java
index 3fca28a0..b1348544 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/Streaming.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/Streaming.java
@@ -173,11 +173,12 @@ public void doVerb(Message message)
                 StreamInitiateMessage biMsg = StreamInitiateMessage.serializer().deserialize(bufIn);
                 StreamContextManager.StreamContext[] streamContexts = biMsg.getStreamContext();
 
-                if (streamContexts.length == 0 && StorageService.instance().isBootstrapMode())
+                if (streamContexts.length == 0)
                 {
                     if (logger.isDebugEnabled())
                         logger.debug("no data needed from " + message.getFrom());
-                    StorageService.instance().removeBootstrapSource(message.getFrom(), new String(message.getHeader(Streaming.TABLE_NAME)));
+                    if (StorageService.instance.isBootstrapMode())
+                        StorageService.instance.removeBootstrapSource(message.getFrom(), new String(message.getHeader(Streaming.TABLE_NAME)));
                     return;
                 }
 
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
index 77bde86c..6e40438c 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -258,41 +258,6 @@ public ColumnOrSuperColumn get(String table, String key, ColumnPath column_path,
         return column;
     }
 
-    /** no values will be mapped to keys with no data */
-    private Map<String, Collection<IColumn>> multigetColumns(List<ReadCommand> commands, int consistency_level)
-    throws InvalidRequestException, UnavailableException, TimedOutException
-    {
-        Map<String, ColumnFamily> cfamilies = readColumnFamily(commands, consistency_level);
-        Map<String, Collection<IColumn>> columnFamiliesMap = new HashMap<String, Collection<IColumn>>();
-
-        for (ReadCommand command: commands)
-        {
-            ColumnFamily cfamily = cfamilies.get(command.key);
-            if (cfamily == null)
-                continue;
-
-            Collection<IColumn> columns = null;
-            if (command.queryPath.superColumnName != null)
-            {
-                IColumn column = cfamily.getColumn(command.queryPath.superColumnName);
-                if (column != null)
-                {
-                    columns = column.getSubColumns();
-                }
-            }
-            else
-            {
-                columns = cfamily.getSortedColumns();
-            }
-
-            if (columns != null && columns.size() != 0)
-            {
-                columnFamiliesMap.put(command.key, columns);
-            }
-        }
-        return columnFamiliesMap;
-    }
-
     /** always returns a ColumnOrSuperColumn for each key, even if there is no data for it */
     public Map<String, ColumnOrSuperColumn> multiget(String table, List<String> keys, ColumnPath column_path, int consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
@@ -317,36 +282,20 @@ public ColumnOrSuperColumn get(String table, String key, ColumnPath column_path,
         }
 
         Map<String, ColumnOrSuperColumn> columnFamiliesMap = new HashMap<String, ColumnOrSuperColumn>();
-        Map<String, Collection<IColumn>> columnsMap = multigetColumns(commands, consistency_level);
+        Map<String, ColumnFamily> cfamilies = readColumnFamily(commands, consistency_level);
 
         for (ReadCommand command: commands)
         {
-            ColumnOrSuperColumn columnorsupercolumn;
-
-            Collection<IColumn> columns = columnsMap.get(command.key);
-            if (columns == null)
+            ColumnFamily cf = cfamilies.get(command.key);
+            if (cf == null)
             {
-               columnorsupercolumn = new ColumnOrSuperColumn();
+                columnFamiliesMap.put(command.key, new ColumnOrSuperColumn());
             }
             else
             {
-                assert columns.size() == 1;
-                IColumn column = columns.iterator().next();
-
-
-                if (column.isMarkedForDelete())
-                {
-                    columnorsupercolumn = new ColumnOrSuperColumn();
+                List<ColumnOrSuperColumn> tcolumns = thriftifyColumnFamily(cf, command.queryPath.superColumnName != null, false);
+                columnFamiliesMap.put(command.key, tcolumns.size() > 0 ? tcolumns.iterator().next() : new ColumnOrSuperColumn());
                 }
-                else
-                {
-                    columnorsupercolumn = column instanceof org.apache.cassandra.db.Column
-                                          ? new ColumnOrSuperColumn(new Column(column.name(), column.value(), column.timestamp()), null)
-                                          : new ColumnOrSuperColumn(null, new SuperColumn(column.name(), thriftifySubColumns(column.getSubColumns())));
-                }
-
-            }
-            columnFamiliesMap.put(command.key, columnorsupercolumn);
         }
 
         return columnFamiliesMap;
@@ -357,44 +306,10 @@ public int get_count(String table, String key, ColumnParent column_parent, int c
     {
         if (logger.isDebugEnabled())
             logger.debug("get_count");
-        return multigetCountInternal(table, Arrays.asList(key), column_parent, consistency_level).get(key);
-    }
-
-    private Map<String, Integer> multigetCountInternal(String table, List<String> keys, ColumnParent column_parent, int consistency_level)
-    throws InvalidRequestException, UnavailableException, TimedOutException
-    {
-        // validateColumnParent assumes we require simple columns; g_c_c is the only
-        // one of the columnParent-taking apis that can also work at the SC level.
-        // so we roll a one-off validator here.
-        String cfType = ThriftValidation.validateColumnFamily(table, column_parent.column_family);
-        if (cfType.equals("Standard") && column_parent.super_column != null)
-        {
-            throw new InvalidRequestException("columnfamily alone is required for standard CF " + column_parent.column_family);
-        }
-
-        List<ReadCommand> commands = new ArrayList<ReadCommand>();
-        for (String key: keys)
-        {
-            ThriftValidation.validateKey(key);
-            commands.add(new SliceFromReadCommand(table, key, column_parent, ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, Integer.MAX_VALUE));
-        }
-
-        Map<String, Integer> columnFamiliesMap = new HashMap<String, Integer>();
-        Map<String, Collection<IColumn>> columnsMap = multigetColumns(commands, consistency_level);
 
-        for (ReadCommand command: commands)
-        {
-            Collection<IColumn> columns = columnsMap.get(command.key);
-            if(columns == null)
-            {
-               columnFamiliesMap.put(command.key, 0);
-            }
-            else
-            {
-               columnFamiliesMap.put(command.key, columns.size());
-            }
-        }
-        return columnFamiliesMap;
+        SliceRange range = new SliceRange(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, Integer.MAX_VALUE);
+        SlicePredicate predicate = new SlicePredicate().setSlice_range(range);
+        return get_slice(table, key, column_parent, predicate, consistency_level).size();
     }
 
     public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int consistency_level)
diff --git a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java
index 31815c2e..35ecc062 100644
--- a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java
+++ b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java
@@ -159,4 +159,33 @@ private void validateRemoveWithNewData() throws IOException
         assert subColumns.iterator().next().timestamp() == 2;
     }
 
+    @Test
+    public void testRemoveSuperColumnResurrection() throws IOException, ExecutionException, InterruptedException
+    {
+        ColumnFamilyStore store = Table.open("Keyspace1").getColumnFamilyStore("Super2");
+        RowMutation rm;
+        String key = "keyC";
+
+        // add data
+        rm = new RowMutation("Keyspace1", key);
+        addMutation(rm, "Super2", "SC1", 1, "val1", 0);
+        rm.apply();
+
+        // remove
+        rm = new RowMutation("Keyspace1", key);
+        rm.delete(new QueryPath("Super2", "SC1".getBytes()), 1);
+        rm.apply();
+        assertNull(store.getColumnFamily(new NamesQueryFilter(key, new QueryPath("Super2"), "SC1".getBytes()), Integer.MAX_VALUE));
+
+        // resurrect
+        rm = new RowMutation("Keyspace1", key);
+        addMutation(rm, "Super2", "SC1", 1, "val2", 2);
+        rm.apply();
+
+        // validate
+        ColumnFamily resolved = store.getColumnFamily(new NamesQueryFilter(key, new QueryPath("Super2"), "SC1".getBytes()), Integer.MAX_VALUE);
+        Collection<IColumn> subColumns = resolved.getSortedColumns().iterator().next().getSubColumns();
+        assert subColumns.size() == 1;
+        assert subColumns.iterator().next().timestamp() == 2;
+    }
 }
