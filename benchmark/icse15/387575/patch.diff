diff --git a/lucene/java/trunk/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/java/trunk/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index afedafe9..79e27fd4 100644
--- a/lucene/java/trunk/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/java/trunk/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -1031,6 +1031,9 @@ protected void doClose() {
 			if (DEBUG) System.err.println("MemoryIndexReader.doClose");
 		}
 	
+    
+
+
 		// lucene <= 1.4.3
 		public Collection getFieldNames() {
 			if (DEBUG) System.err.println("MemoryIndexReader.getFieldNames");
diff --git a/lucene/java/trunk/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java b/lucene/java/trunk/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index 34e9e8bd..97d47954 100644
--- a/lucene/java/trunk/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ b/lucene/java/trunk/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -350,12 +350,7 @@ private void run(String[] args) throws Throwable {
 	
 	private Document createDocument(String content) {
 		Document doc = new Document();
-		{ // lucene-1.4.3
-			doc.add(Field.UnStored(FIELD_NAME, content));
-		}
-//		{ // lucene >= 1.9
-//			doc.add(new Field(FIELD_NAME, content, Field.Store.NO, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS));
-//		}
+		doc.add(new Field(FIELD_NAME, content, Field.Store.NO, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS));
 		return doc;
 	}
 	
@@ -374,8 +369,7 @@ private RAMDirectory createRAMIndex(Document doc) {
 		IndexWriter writer = null;
 		try {
 			writer = new IndexWriter(dir, analyzer, true);
-			writer.maxFieldLength = Integer.MAX_VALUE; // ensure large files are scored correctly
-//			writer.setMaxFieldLength(Integer.MAX_VALUE);
+			writer.setMaxFieldLength(Integer.MAX_VALUE);
 			writer.addDocument(doc);
 			writer.optimize();
 			return dir;
diff --git a/lucene/java/trunk/contrib/queries/src/java/org/apache/lucene/search/similar/SimilarityQueries.java b/lucene/java/trunk/contrib/queries/src/java/org/apache/lucene/search/similar/SimilarityQueries.java
index f04bb5ab..33dc0f61 100644
--- a/lucene/java/trunk/contrib/queries/src/java/org/apache/lucene/search/similar/SimilarityQueries.java
+++ b/lucene/java/trunk/contrib/queries/src/java/org/apache/lucene/search/similar/SimilarityQueries.java
@@ -105,7 +105,7 @@ public static Query formSimilarQuery( String body,
 			TermQuery tq = new TermQuery( new Term( field, word));
 			try
 			{
-				tmp.add( tq, false, false);
+				tmp.add( tq, BooleanClause.Occur.SHOULD);
 			}
 			catch( BooleanQuery.TooManyClauses too)
 			{
diff --git a/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java b/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java
index 869b4b11..1fbea2a1 100644
--- a/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java
+++ b/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java
@@ -121,9 +121,9 @@ private void reindex() {
                 //this will allow us to retrive the results later
                 //and map this list model's row to a row in the decorated
                 //list model
-                document.add(new Field(ROW_NUMBER, "" + row, true, true, true));
+                document.add(new Field(ROW_NUMBER, "" + row, Field.Store.YES, Field.Index.TOKENIZED));
                 //add the string representation of the row to the index
-                document.add(new Field(FIELD_NAME, String.valueOf(listModel.getElementAt(row)).toLowerCase(), true, true, true));
+                document.add(new Field(FIELD_NAME, String.valueOf(listModel.getElementAt(row)).toLowerCase(), Field.Store.YES, Field.Index.TOKENIZED));
                 writer.addDocument(document);
             }
             writer.optimize();
@@ -161,7 +161,8 @@ public void search(String searchString){
             //build a query based on the fields, searchString and cached analyzer
             //NOTE: This is an area for improvement since the MultiFieldQueryParser
             // has some weirdness.
-            Query query = MultiFieldQueryParser.parse(searchString, fields, analyzer);
+            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);
+            Query query =parser.parse(searchString);
             //run the search
             Hits hits = is.search(query);
             //reset this list model with the new results
diff --git a/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java b/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java
index 04541ce6..0828fa6c 100644
--- a/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java
+++ b/lucene/java/trunk/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java
@@ -176,14 +176,14 @@ private void reindex() {
                 //this will allow us to retrive the results later
                 //and map this table model's row to a row in the decorated
                 //table model
-                document.add(new Field(ROW_NUMBER, "" + row, true, true, true));
+                document.add(new Field(ROW_NUMBER, "" + row, Field.Store.YES, Field.Index.TOKENIZED));
                 //iterate through all columns
                 //index the value keyed by the column name
                 //NOTE: there could be a problem with using column names with spaces
                 for (int column=0; column < tableModel.getColumnCount(); column++){
                     String columnName = tableModel.getColumnName(column);
                     String columnValue = String.valueOf(tableModel.getValueAt(row, column)).toLowerCase();
-                    document.add(new Field(columnName, columnValue, true, true, true));
+                    document.add(new Field(columnName, columnValue, Field.Store.YES, Field.Index.TOKENIZED));
                 }
                 writer.addDocument(document);
             }
@@ -246,7 +246,8 @@ public void search(String searchString){
             //build a query based on the fields, searchString and cached analyzer
             //NOTE: This is an area for improvement since the MultiFieldQueryParser
             // has some weirdness.
-            Query query = MultiFieldQueryParser.parse(searchString, fields, analyzer);
+            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);
+            Query query = parser.parse(searchString);
             //run the search
             Hits hits = is.search(query);
             //reset this table model with the new results
