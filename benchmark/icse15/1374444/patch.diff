diff --git a/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java b/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java
index 9b1efc35..375532fc 100644
--- a/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java
+++ b/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java
@@ -71,6 +71,8 @@ public String hello(String msg) {
                 return "Hello " + msg + "!";
             }
         }, null);
+        waitForAsynchronousHandling();
+
         assertNotNull(listener.getA());
         assertNotNull(listener.getReference());
         assertEquals("Hello world!", a.hello("world"));
@@ -83,16 +85,21 @@ public String hello(String msg) {
             }
         }, props);
 
+        waitForAsynchronousHandling();
+
         assertNotNull(listener.getA());
         assertNotNull(listener.getReference());
         assertEquals("Hello world!", a.hello("world"));
 
         reg1.unregister();
+        waitForAsynchronousHandling();
         assertNotNull(listener.getA());
         assertNotNull(listener.getReference());
         assertEquals("Good morning world!", a.hello("world"));
 
         reg2.unregister();
+        waitForAsynchronousHandling();
+
         assertNull(listener.getA());
         assertNull(listener.getReference());
         try {
@@ -121,6 +128,8 @@ public String hello(String msg) {
                 return "Hello " + msg + "!";
             }
         }, null);
+    
+        waitForAsynchronousHandling();
         assertNotNull(listener.getA());
         assertNotNull(listener.getReference());
         assertEquals(1, refs.size());
@@ -138,12 +147,16 @@ public void testDefaultReference() throws Exception {
       Runnable refRunnable = (Runnable) blueprintContainer.getComponentInstance("refWithDefault");
       DefaultRunnable defaultRunnable = (DefaultRunnable) blueprintContainer.getComponentInstance("defaultRunnable");
       refRunnable.run();
+      waitForAsynchronousHandling();
+      Thread.sleep(2000);
       
       assertEquals("The default runnable was not called", 1, defaultRunnable.getCount());
       
       Runnable mockService = Skeleton.newMock(Runnable.class);
       
       ServiceRegistration reg = bundleContext.registerService(Runnable.class.getName(), mockService, null);
+      waitForAsynchronousHandling();
+      Thread.sleep(2000);
       
       refRunnable.run();
       
@@ -152,6 +165,8 @@ public void testDefaultReference() throws Exception {
       Skeleton.getSkeleton(mockService).assertCalled(new MethodCall(Runnable.class, "run"));
       
       reg.unregister();
+      waitForAsynchronousHandling();
+      Thread.sleep(2000);
       
       refRunnable.run();
       
@@ -187,6 +202,12 @@ private Bundle findBundle(String bsn)
       return null;
     }
 
+    private void waitForAsynchronousHandling() throws InterruptedException {
+      // Since service events are handled asynchronously in AbstractServiceReferenceRecipe, pause
+       Thread.sleep(200);
+      
+   }
+
     @org.ops4j.pax.exam.junit.Configuration
     public static Option[] configuration() {
         return testOptions(
