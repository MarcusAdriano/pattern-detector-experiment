diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/db/SlaveDatabase.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
index 2b6a195d..bfed96b6 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
@@ -126,7 +126,10 @@ public void boot(boolean create, Properties startParams)
         // SlaveDatabaseBootThread is an internal class
         SlaveDatabaseBootThread dbBootThread =
             new SlaveDatabaseBootThread(create, startParams);
-        new Thread(dbBootThread, "derby.slave.boot-" + dbname).start();
+        Thread sdbThread = 
+                new Thread(dbBootThread, "derby.slave.boot-" + dbname);
+        sdbThread.setDaemon(true);
+        sdbThread.start();
 
         // Check that the database was booted successfully, or throw
         // the exception that caused the boot to fail.
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
index c21e3ff0..a285bf7e 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
@@ -5103,8 +5103,10 @@ public void startReplicationMasterRole(MasterFactory masterFactory)
     public void stopReplicationMasterRole() {
         inReplicationMasterMode = false;
         masterFactory = null;
+        if(logOut != null) {
         logOut.stopReplicationMasterRole();
     }
+    }
 
     /**
      * Stop the slave functionality for this LogFactory. Calling this
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java
index 29ac62c4..d609e26e 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java
@@ -156,11 +156,17 @@ public boolean canSupport(Properties startParams) {
     }
     
     /**
-     * Will stop the replication master service
-     *
-     * Not implemented yet
+     * Will stop the replication master service.
      */
-    public void stop() { }
+    public void stop() { 
+        try {
+            stopMaster();
+        } catch (StandardException se) {
+            repLogger.
+                logError(MessageId.REPLICATION_MASTER_STOPPED, se);
+        }
+       
+    }
 
     ////////////////////////////////////////////////////////////
     // Implementation of methods from interface MasterFactory //
@@ -220,7 +226,8 @@ public void startMaster(RawStoreFactory rawStore,
                                                         transmitter,
                                                         this,
                                                         repLogger);
-                ((Thread)logShipper).start();
+                logShipper.setDaemon(true);
+                logShipper.start();
             }
         } catch (StandardException se) {
             // cleanup everything that may have been started before
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java
index c2dee2d4..89d571a5 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java
@@ -400,6 +400,7 @@ private void handleDisconnect(Exception e) {
      */
     private void startLogReceiverThread() {
         logReceiverThread = new SlaveLogReceiverThread();
+        logReceiverThread.setDaemon(true);
         logReceiverThread.start();
     }
 
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java
index 7983d6ee..23354d03 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java
@@ -199,7 +199,10 @@ private void _testPostStartedMasterAndSlave_StopSlave()
         killMaster(masterServerHost, masterServerPort);
         Thread.sleep(5000L); // TEMPORARY to see if slave sees that master is gone!
         
-        // 3.  stopSlave on slave should now be allowed. Observe that the database shall be shutdown.
+        // 3.  stopSlave on slave should now result in an exception stating that
+        //     the slave database has been shutdown. A master shutdown results
+        //     in a behaviour that is similar to what happens when a stopMaster
+        //     is called.
         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
         connectionURL = "jdbc:derby:"  
                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
@@ -218,9 +221,10 @@ private void _testPostStartedMasterAndSlave_StopSlave()
             int ec = se.getErrorCode();
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
-            util.DEBUG("3. Got "+msg + " Expected: " + SQLState.REPLICATION_SLAVE_SHUTDOWN_OK);
+            util.DEBUG("3. Got "+msg + " Expected: " + 
+                    SQLState.REPLICATION_DB_NOT_BOOTED);
             assertTrue(connectionURL + " failed: " + msg, 
-                    SQLState.REPLICATION_SLAVE_SHUTDOWN_OK.equals(ss));
+                    SQLState.REPLICATION_DB_NOT_BOOTED.equals(ss));
             util.DEBUG("3. Failed as expected: " + connectionURL +  " " + msg);
             stopSlaveCorrect = true;
         }
