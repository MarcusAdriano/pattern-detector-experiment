diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
index 8c2ae550..21bd36ff 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -471,6 +472,19 @@ private Region createRegion(long id) throws BundleException {
 	
 	private ResolveContext createResolveContext() {
 		return new ResolveContext() {
+			private final Map<Resource, Wiring> wirings = computeWirings();
+			
+			private Map<Resource, Wiring> computeWirings() {
+				Map<Resource, Wiring> wirings = new HashMap<Resource, Wiring>();
+				for (AriesSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystems())
+					for (Resource constituent : subsystem.getConstituents())
+						if (constituent instanceof BundleRevision) {
+							BundleRevision revision = (BundleRevision)constituent;
+							wirings.put(revision, revision.getWiring());
+						}
+				return Collections.unmodifiableMap(wirings);
+			}
+			
 			@Override
 			public List<Capability> findProviders(Requirement requirement) {
 				List<Capability> result = new ArrayList<Capability>();
@@ -519,8 +533,8 @@ public boolean isEffective(Requirement requirement) {
 			}
 
 			@Override
-			public Map<Resource, Wiring> getWirings() {
-				return Collections.emptyMap();
+			public synchronized Map<Resource, Wiring> getWirings() {
+				return wirings;
 			}
 		};
 	}
