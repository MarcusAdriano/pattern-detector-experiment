diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java
index 1ca1ddb2..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnFamily.java
@@ -1,22 +0,0 @@
-package org.apache.cassandra.config;
-
-import java.util.Collections;
-import java.util.Map;
-
-import org.apache.cassandra.db.ClockType;
-import org.apache.cassandra.db.ColumnFamilyType;
-
-public class ColumnFamily {
-    public String name;            
-    public ColumnFamilyType column_type;
-    public ClockType clock_type;
-    public String reconciler;
-    public String compare_with;
-    public String compare_subcolumns_with;
-    public String comment;
-    public double rows_cached = CFMetaData.DEFAULT_ROW_CACHE_SIZE; 
-    public double keys_cached = CFMetaData.DEFAULT_KEY_CACHE_SIZE; 
-    public double read_repair_chance = CFMetaData.DEFAULT_READ_REPAIR_CHANCE;
-    public boolean preload_row_cache = CFMetaData.DEFAULT_PRELOAD_ROW_CACHE;
-    public RawColumnDefinition[] column_metadata = new RawColumnDefinition[0];
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
index 44bd3712..b1245acb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
@@ -2,7 +2,8 @@
 import java.util.List;
 
 
-public class Config {
+public class Config
+{
     public String cluster_name = "Test Cluster";
     public String authenticator;
     
@@ -76,7 +77,7 @@
     public RequestSchedulerId request_scheduler_id;
     public RequestSchedulerOptions request_scheduler_options;
 
-    public List<Keyspace> keyspaces;
+    public List<RawKeyspace> keyspaces;
     
     public static enum CommitLogSync {
         periodic,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
index 86a975a9..9d9f403f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
@@ -25,15 +25,19 @@
 import org.yaml.snakeyaml.nodes.Tag;
 import org.yaml.snakeyaml.representer.Representer;
 
-public class Converter {
+/**
+ * @deprecated Yaml configuration for Keyspaces and ColumnFamilies is deprecated in 0.7
+ */
+public class Converter
+{
 
     private static Config conf = new Config();
     private final static String PREVIOUS_CONF_FILE = "cassandra.xml";
     
-    private static List<Keyspace> readTablesFromXml(XMLUtils xmlUtils) throws ConfigurationException
+    private static List<RawKeyspace> readTablesFromXml(XMLUtils xmlUtils) throws ConfigurationException
     {
 
-        List<Keyspace> keyspaces = new ArrayList<Keyspace>();
+        List<RawKeyspace> keyspaces = new ArrayList<RawKeyspace>();
         /* Read the table related stuff from config */
         try
         {
@@ -42,7 +46,7 @@
             for ( int i = 0; i < size; ++i )
             {
                 String value;
-                Keyspace ks = new Keyspace();
+                RawKeyspace ks = new RawKeyspace();
                 Node table = tablesxml.item(i);
                 /* parsing out the table ksName */
                 ks.name = XMLUtils.getAttributeValue(table, "Name");
@@ -61,11 +65,11 @@
                 NodeList columnFamilies = xmlUtils.getRequestedNodeList(xqlTable + "ColumnFamily");
 
                 int size2 = columnFamilies.getLength();
-                ks.column_families = new ColumnFamily[size2];
+                ks.column_families = new RawColumnFamily[size2];
                 for ( int j = 0; j < size2; ++j )
                 {
                     Node columnFamily = columnFamilies.item(j);
-                    ks.column_families[j] = new ColumnFamily();
+                    ks.column_families[j] = new RawColumnFamily();
                     ks.column_families[j].name = XMLUtils.getAttributeValue(columnFamily, "Name");
                     String xqlCF = xqlTable + "ColumnFamily[@Name='" + ks.column_families[j].name + "']/";
                     ks.column_families[j].column_type = ColumnFamilyType.create(XMLUtils.getAttributeValue(columnFamily, "ColumnType"));
@@ -259,7 +263,7 @@ private static void dumpConfig(String outfile) throws IOException
         SkipNullRepresenter representer = new SkipNullRepresenter();
         /* Use Tag.MAP to avoid the class name being included as global tag */
         representer.addClassTag(Config.class, Tag.MAP);
-        representer.addClassTag(ColumnFamily.class, Tag.MAP);
+        representer.addClassTag(RawColumnFamily.class, Tag.MAP);
         Dumper dumper = new Dumper(representer, options);
         Yaml yaml = new Yaml(dumper);
         String output = yaml.dump(conf);
@@ -285,7 +289,7 @@ public static void main (String[] args)
             if (scpurl != null)
                 configname = scpurl.getFile();
             else 
-                throw new ConfigurationException("Error finding previuos configuration file.");
+                throw new ConfigurationException("Error finding previous configuration file.");
             
             System.out.println("Found previous configuration: " + configname);
             
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 8d684416..4cbe3193 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -123,10 +123,10 @@ static String getStorageConfigPath() throws ConfigurationException
             InputStream input = new FileInputStream(new File(configFileName));
             org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(Config.class);
             TypeDescription desc = new TypeDescription(Config.class);
-            desc.putListPropertyType("keyspaces", Keyspace.class);
-            TypeDescription ksDesc = new TypeDescription(Keyspace.class);
-            ksDesc.putListPropertyType("column_families", ColumnFamily.class);
-            TypeDescription cfDesc = new TypeDescription(ColumnFamily.class);
+            desc.putListPropertyType("keyspaces", RawKeyspace.class);
+            TypeDescription ksDesc = new TypeDescription(RawKeyspace.class);
+            ksDesc.putListPropertyType("column_families", RawColumnFamily.class);
+            TypeDescription cfDesc = new TypeDescription(RawColumnFamily.class);
             cfDesc.putListPropertyType("column_metadata", RawColumnDefinition.class);
             constructor.addTypeDescription(desc);
             constructor.addTypeDescription(ksDesc);
@@ -512,7 +512,7 @@ public boolean accept(File pathname)
         
         
         /* Read the table related stuff from config */
-        for (Keyspace keyspace : conf.keyspaces)
+        for (RawKeyspace keyspace : conf.keyspaces)
         {
             /* parsing out the table name */
             if (keyspace.name == null)
@@ -549,7 +549,7 @@ public boolean accept(File pathname)
             int size2 = keyspace.column_families.length;
             CFMetaData[] cfDefs = new CFMetaData[size2];
             int j = 0;
-            for (ColumnFamily cf : keyspace.column_families)
+            for (RawColumnFamily cf : keyspace.column_families)
             {
                 if (cf.name == null)
                 {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Keyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Keyspace.java
index e3bd3d7f..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Keyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Keyspace.java
@@ -1,8 +0,0 @@
-package org.apache.cassandra.config;
-
-public class Keyspace {
-    public String name;
-    public String replica_placement_strategy;
-    public Integer replication_factor;
-    public ColumnFamily[] column_families;
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
index e69de29b..a0c72964 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
@@ -0,0 +1,26 @@
+package org.apache.cassandra.config;
+
+import java.util.Collections;
+import java.util.Map;
+
+import org.apache.cassandra.db.ClockType;
+import org.apache.cassandra.db.ColumnFamilyType;
+
+/**
+ * @deprecated Yaml configuration for Keyspaces and ColumnFamilies is deprecated in 0.7
+ */
+public class RawColumnFamily
+{
+    public String name;            
+    public ColumnFamilyType column_type;
+    public ClockType clock_type;
+    public String reconciler;
+    public String compare_with;
+    public String compare_subcolumns_with;
+    public String comment;
+    public double rows_cached = CFMetaData.DEFAULT_ROW_CACHE_SIZE; 
+    public double keys_cached = CFMetaData.DEFAULT_KEY_CACHE_SIZE; 
+    public double read_repair_chance = CFMetaData.DEFAULT_READ_REPAIR_CHANCE;
+    public boolean preload_row_cache = CFMetaData.DEFAULT_PRELOAD_ROW_CACHE;
+    public RawColumnDefinition[] column_metadata = new RawColumnDefinition[0];
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/RawKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/config/RawKeyspace.java
index e69de29b..2fba2fa9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/RawKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/RawKeyspace.java
@@ -0,0 +1,12 @@
+package org.apache.cassandra.config;
+
+/**
+ * @deprecated Yaml configuration for Keyspaces and ColumnFamilies is deprecated in 0.7
+ */
+public class RawKeyspace
+{
+    public String name;
+    public String replica_placement_strategy;
+    public Integer replication_factor;
+    public RawColumnFamily[] column_families;
+}
