diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index a4adddf6..856bba0b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -437,7 +437,8 @@ public void forceFlush()
 
     void forceBlockingFlush() throws IOException, ExecutionException, InterruptedException
     {
-        forceFlush();
+        Memtable oldMemtable = memtable_.get();
+        oldMemtable.forceflush();
         // block for flush to finish by adding a no-op action to the flush executorservice
         // and waiting for that to finish.  (this works since flush ES is single-threaded.)
         Future f = MemtableManager.instance().flusher_.submit(new Runnable()
@@ -447,6 +448,7 @@ public void run()
             }
         });
         f.get();
+        assert oldMemtable.isFlushed() || oldMemtable.isClean();
     }
 
     void forceFlushBinary()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
index 3978c824..135a7682 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
@@ -56,7 +56,8 @@ public static void shutdown()
     }
 
     private MemtableThreadPoolExecutor executor_;
-    private boolean isFrozen_;
+    private volatile boolean isFrozen_;
+    private volatile boolean isFlushed_; // for tests, in particular forceBlockingFlush asserts this
 
     private int threshold_ = DatabaseDescriptor.getMemtableSize()*1024*1024;
     private int thresholdCount_ = (int)(DatabaseDescriptor.getMemtableObjectCount()*1024*1024);
@@ -81,6 +82,11 @@ public static void shutdown()
         runningExecutorServices_.add(executor_);
     }
 
+    public boolean isFlushed()
+    {
+        return isFlushed_;
+    }
+
     class Putter implements Runnable
     {
         private String key_;
@@ -203,7 +209,7 @@ void put(String key, ColumnFamily columnFamily, CommitLog.CommitLogContext cLogC
     */
     public void forceflush()
     {
-        if (columnFamilies_.isEmpty())
+        if (isClean())
             return;
 
         try
@@ -355,6 +361,7 @@ public int compare(String o1, String o2)
         cfStore.onMemtableFlush(cLogCtx);
         cfStore.storeLocation( ssTable.getDataFileLocation(), bf );
         buffer.close();
+        isFlushed_ = true;
     }
 
     private class MemtableThreadPoolExecutor extends DebuggableThreadPoolExecutor
@@ -401,4 +408,9 @@ public void run()
         pq.addAll(keys);
         return new DestructivePQIterator<String>(pq);
     }
+
+    public boolean isClean()
+    {
+        return columnFamilies_.isEmpty() && executor_.getPendingTasks() == 0;
+    }
 }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index b12891a0..ed5efb5b 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -257,6 +257,7 @@ public void testRemoveSuperColumn() throws IOException, ExecutionException, Inte
         rm.apply();
 
         List<ColumnFamily> families = store.getColumnFamilies("key1", "Super1", new IdentityFilter());
+        assert families.size() == 2 : StringUtils.join(families, ", ");
         assert families.get(0).getAllColumns().first().getMarkedForDeleteAt() == 1; // delete marker, just added
         assert !families.get(1).getAllColumns().first().isMarkedForDelete(); // flushed old version
         ColumnFamily resolved = ColumnFamily.resolve(families);
