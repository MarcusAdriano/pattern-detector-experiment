diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
index 6804c6ec..c0517de7 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
@@ -570,7 +570,7 @@ public String toString(String field)
   /** Returns true if <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (SpatialDistanceQuery.class != o.getClass()) return false;
+    if (!super.equals(o)) return false;
     SpatialDistanceQuery other = (SpatialDistanceQuery)o;
     return     this.latCenter == other.latCenter
             && this.lonCenter == other.lonCenter
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ByteFieldSource.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ByteFieldSource.java
index 3784cc32..bb12e8d1 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ByteFieldSource.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ByteFieldSource.java
@@ -102,8 +102,8 @@ public boolean equals(Object o) {
     ByteFieldSource
             other = (ByteFieldSource) o;
     return super.equals(other)
-            && this.parser == null ? other.parser == null :
-            this.parser.getClass() == other.parser.getClass();
+            && (this.parser == null ? other.parser == null :
+            this.parser.getClass() == other.parser.getClass());
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/DoubleFieldSource.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/DoubleFieldSource.java
index e4053903..0387a422 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/DoubleFieldSource.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/DoubleFieldSource.java
@@ -152,8 +152,8 @@ public boolean equals(Object o) {
     if (o.getClass() != DoubleFieldSource.class) return false;
     DoubleFieldSource other = (DoubleFieldSource) o;
     return super.equals(other)
-            && this.parser == null ? other.parser == null :
-            this.parser.getClass() == other.parser.getClass();
+            && (this.parser == null ? other.parser == null :
+            this.parser.getClass() == other.parser.getClass());
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/FloatFieldSource.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/FloatFieldSource.java
index a90e6560..044b1b62 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/FloatFieldSource.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/FloatFieldSource.java
@@ -92,8 +92,8 @@ public boolean equals(Object o) {
     if (o.getClass() !=  FloatFieldSource.class) return false;
     FloatFieldSource other = (FloatFieldSource)o;
     return super.equals(other)
-           && this.parser==null ? other.parser==null :
-              this.parser.getClass() == other.parser.getClass();
+           && (this.parser==null ? other.parser==null :
+              this.parser.getClass() == other.parser.getClass());
   }
 
   @Override
@@ -101,6 +101,6 @@ public int hashCode() {
     int h = parser==null ? Float.class.hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
     return h;
-  };
+  }
 
 }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/IntFieldSource.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/IntFieldSource.java
index 6cf41050..8fee3e33 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/IntFieldSource.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/IntFieldSource.java
@@ -126,8 +126,8 @@ public boolean equals(Object o) {
     if (o.getClass() !=  IntFieldSource.class) return false;
     IntFieldSource other = (IntFieldSource)o;
     return super.equals(other)
-           && this.parser==null ? other.parser==null :
-              this.parser.getClass() == other.parser.getClass();
+           && (this.parser==null ? other.parser==null :
+              this.parser.getClass() == other.parser.getClass());
   }
 
   @Override
@@ -135,6 +135,6 @@ public int hashCode() {
     int h = parser==null ? Integer.class.hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
     return h;
-  };
+  }
 
 }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/LongFieldSource.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/LongFieldSource.java
index 7640c07c..836677e3 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/LongFieldSource.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/LongFieldSource.java
@@ -133,8 +133,8 @@ public boolean equals(Object o) {
     if (o.getClass() != this.getClass()) return false;
     LongFieldSource other = (LongFieldSource) o;
     return super.equals(other)
-            && this.parser == null ? other.parser == null :
-            this.parser.getClass() == other.parser.getClass();
+            && (this.parser == null ? other.parser == null :
+            this.parser.getClass() == other.parser.getClass());
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ShortFieldSource.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ShortFieldSource.java
index a24e7f4f..9304cbf2 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ShortFieldSource.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/function/ShortFieldSource.java
@@ -99,8 +99,8 @@ public boolean equals(Object o) {
     ShortFieldSource
             other = (ShortFieldSource) o;
     return super.equals(other)
-            && this.parser == null ? other.parser == null :
-            this.parser.getClass() == other.parser.getClass();
+            && (this.parser == null ? other.parser == null :
+            this.parser.getClass() == other.parser.getClass());
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/SpatialFilterTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/SpatialFilterTest.java
index 608f9793..0491cee1 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/SpatialFilterTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/SpatialFilterTest.java
@@ -118,6 +118,21 @@ public void testLatLonType() throws Exception {
     // falls outside of the real distance, but inside the bounding box   
     checkHits(fieldName, true, "43.517030,-96.789603", 110, 0);
     checkHits(fieldName, false, "43.517030,-96.789603", 110, 1, 17);
+    
+    
+	// Tests SOLR-2829
+	String fieldNameHome = "home_ll";
+	String fieldNameWork = "work_ll";
+
+	clearIndex();
+	assertU(adoc("id", "1", fieldNameHome, "52.67,7.30", fieldNameWork,"48.60,11.61"));
+	assertU(commit());
+
+	checkHits(fieldNameHome, "52.67,7.30", 1, 1);
+	checkHits(fieldNameWork, "48.60,11.61", 1, 1);
+	checkHits(fieldNameWork, "52.67,7.30", 1, 0);
+	checkHits(fieldNameHome, "48.60,11.61", 1, 0); 
+	  
   }
 
   private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java
index e69de29b..2dd7286f 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java
@@ -0,0 +1,132 @@
+package org.apache.solr.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.QueryUtils;
+import org.apache.solr.SolrTestCaseJ4;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+// NOTE: this is a direct result of SOLR-2829
+public class TestValueSourceCache extends SolrTestCaseJ4 {
+
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig.xml", "schema.xml");
+  }
+
+  // This is actually also tested by the tests for val_d1 below, but the bug was reported against geodist()...
+  @Test
+  public void testGeodistSource() {
+    try {
+      Query q_home = QueryParsing.parseFunction("geodist(home_ll, 45.0, 43.0)", h.getCore().getSchema());
+      Query q_work = QueryParsing.parseFunction("geodist(work_ll, 45.0, 43.0)", h.getCore().getSchema());
+      Query q_home2 = QueryParsing.parseFunction("geodist(home_ll, 45.0, 43.0)", h.getCore().getSchema());
+      QueryUtils.checkUnequal(q_work, q_home);
+      QueryUtils.checkEqual(q_home, q_home2);
+    } catch (Exception e) {
+      fail(e.toString());
+    }
+  }
+
+  @Test
+  public void testNumerics() {
+    String[] templates = new String[]{
+        "sum(#v0, #n0)",
+        "product(pow(#v0,#n0),#v1,#n1)",
+        "log(#v0)",
+        "log(sum(#n0,#v0,#v1,#n1))",
+        "scale(map(#v0,#n0,#n1,#n2),#n3,#n4)",
+    };
+    String[] numbers = new String[]{
+        "1,2,3,4,5",
+        "1.0,2.0,3.0,4.0,5.0",
+        "1,2.0,3,4.0,5",
+        "1.0,2,3.0,4,5.0",
+        "1000000,2000000,3000000,4000000,5000000"
+    };
+    String[] types = new String[]{
+        "val1_f1",
+        "val1_d1",
+        "val1_b1",
+        "val1_i1",
+        "val1_l1",
+        "val1_b1",
+        "val1_by1",
+        "val1_sh1"
+    };
+    for (String template : templates) {
+      for (String nums : numbers) {
+        for (String type : types) {
+          tryQuerySameTypes(template, nums, type);
+          tryQueryDiffTypes(template, nums, types);
+        }
+      }
+    }
+  }
+
+  // This test should will fail because q1 and q3 evaluate as equal unless
+  // fixes for bug 2829 are in place.
+  void tryQuerySameTypes(String template, String numbers, String type) {
+    try {
+      String s1 = template;
+      String s2 = template;
+      String s3 = template;
+
+      String[] numParts = numbers.split(",");
+      String type2 = type.replace("val1", "val2");
+      for (int idx = 0; s1.contains("#"); ++idx) {
+        String patV = "#v" + Integer.toString(idx);
+        String patN = "#n" + Integer.toString(idx);
+        s1 = s1.replace(patV, type).replace(patN, numParts[idx]);
+        s2 = s2.replace(patV, type).replace(patN, numParts[idx]);
+        s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);
+      }
+      Query q1 = QueryParsing.parseFunction(s1, h.getCore().getSchema());
+      Query q2 = QueryParsing.parseFunction(s2, h.getCore().getSchema());
+      Query q3 = QueryParsing.parseFunction(s3, h.getCore().getSchema());
+      QueryUtils.checkEqual(q1, q2);
+      QueryUtils.checkUnequal(q1, q3);
+    } catch (Exception e) {
+      fail(e.toString());
+    }
+  }
+
+  // These should always and forever fail, and would have failed without the fixes for 2829, but why not make
+  // some more tests just in case???
+  void tryQueryDiffTypes(String template, String numbers, String[] types) {
+    try {
+      String s1 = template;
+      String s2 = template;
+
+      String[] numParts = numbers.split(",");
+      for (int idx = 0; s1.contains("#"); ++idx) {
+        String patV = "#v" + Integer.toString(idx);
+        String patN = "#n" + Integer.toString(idx);
+        s1 = s1.replace(patV, types[idx % types.length]).replace(patN, numParts[idx]);
+        s2 = s2.replace(patV, types[(idx + 1) % types.length]).replace(patN, numParts[idx]);
+      }
+      Query q1 = QueryParsing.parseFunction(s1, h.getCore().getSchema());
+      Query q2 = QueryParsing.parseFunction(s2, h.getCore().getSchema());
+      QueryUtils.checkUnequal(q1, q2);
+    } catch (Exception e) {
+      fail(e.toString());
+    }
+  }
+}
