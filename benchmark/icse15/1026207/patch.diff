diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 9bf6e0b0..39a4b38e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -183,6 +183,9 @@
     /* These are locally held copies to be changed from the config during runtime */
     private int minCompactionThreshold;
     private int maxCompactionThreshold;
+    private int memtime;
+    private int memsize;
+    private double memops;
 
     private final Runnable rowCacheSaverTask = new WrappedRunnable()
     {
@@ -208,6 +211,9 @@ private ColumnFamilyStore(Table table, String columnFamilyName, IPartitioner par
         this.metadata = metadata;
         this.minCompactionThreshold = metadata.minCompactionThreshold;
         this.maxCompactionThreshold = metadata.maxCompactionThreshold;
+        this.memtime = metadata.memtableFlushAfterMins;
+        this.memsize = metadata.memtableThroughputInMb;
+        this.memops = metadata.memtableOperationsInMillions;
         this.partitioner = partitioner;
         fileIndexGenerator.set(generation);
         memtable = new Memtable(this);
@@ -580,7 +586,7 @@ public String getColumnFamilyName()
      */
     public String getFlushPath()
     {
-        long guessedSize = 2 * metadata.memtableThroughputInMb * 1024*1024; // 2* adds room for keys, column indexes
+        long guessedSize = 2 * memsize * 1024*1024; // 2* adds room for keys, column indexes
         String location = DatabaseDescriptor.getDataFileLocationForTable(table.name, guessedSize);
         if (location == null)
             throw new RuntimeException("Insufficient disk space to flush");
@@ -1831,7 +1837,6 @@ public int getMinimumCompactionThreshold()
     
     public void setMinimumCompactionThreshold(int minCompactionThreshold)
     {
-        //TODO: If someone complains this is too rude, make it more friendly.
         if ((minCompactionThreshold > this.maxCompactionThreshold) && this.maxCompactionThreshold != 0) {
             throw new RuntimeException("The min_compaction_threshold cannot be larger than the max.");
         }
@@ -1845,7 +1850,6 @@ public int getMaximumCompactionThreshold()
 
     public void setMaximumCompactionThreshold(int maxCompactionThreshold)
     {
-        //TODO: If someone complains this is too rude, make it more friendly.
         if (maxCompactionThreshold < this.minCompactionThreshold) {
             throw new RuntimeException("The max_compaction_threshold cannot be smaller than the min.");
         }
@@ -1857,4 +1861,40 @@ public void disableAutoCompaction()
         this.minCompactionThreshold = 0;
         this.maxCompactionThreshold = 0;
     }
+
+    public int getMemtableFlushAfterMins()
+    {
+        return memtime;
+    }
+    public void setMemtableFlushAfterMins(int time)
+    {
+        if (time <= 0) {
+            throw new RuntimeException("MemtableFlushAfterMins must be greater than 0.");
+        }
+        this.memtime = time;
+    }
+
+    public int getMemtableThroughputInMB()
+    {
+        return memsize;
+    }
+    public void setMemtableThroughputInMB(int size)
+    {
+        if (size <= 0) {
+            throw new RuntimeException("MemtableThroughputInMB must be greater than 0.");
+        }
+        this.memsize = size;
+    }
+
+    public double getMemtableOperationsInMillions()
+    {
+        return memops;
+    }
+    public void setMemtableOperationsInMillions(double ops)
+    {
+        if (ops <= 0) {
+            throw new RuntimeException("MemtableOperationsInMillions must be greater than 0.0.");
+        }
+        this.memops = ops;
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
index 68666a57..1aaf999d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
@@ -201,4 +201,13 @@
      * Disable automatic compaction.
      */
     public void disableAutoCompaction();
+
+    public int getMemtableFlushAfterMins();
+    public void setMemtableFlushAfterMins(int time);
+
+    public int getMemtableThroughputInMB();
+    public void setMemtableThroughputInMB(int size);
+
+    public double getMemtableOperationsInMillions();
+    public void setMemtableOperationsInMillions(double ops);
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
index 2041242d..41dc9c88 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
@@ -66,8 +66,8 @@ public Memtable(ColumnFamilyStore cfs)
 
         this.cfs = cfs;
         creationTime = System.currentTimeMillis();
-        this.THRESHOLD = cfs.metadata.memtableThroughputInMb * 1024 * 1024;
-        this.THRESHOLD_COUNT = (int) (cfs.metadata.memtableOperationsInMillions * 1024 * 1024);
+        this.THRESHOLD = cfs.getMemtableThroughputInMB() * 1024 * 1024;
+        this.THRESHOLD_COUNT = (int) (cfs.getMemtableOperationsInMillions() * 1024 * 1024);
     }
 
     /**
@@ -294,6 +294,6 @@ void clearUnsafe()
 
     public boolean isExpired()
     {
-        return System.currentTimeMillis() > creationTime + cfs.metadata.memtableFlushAfterMins * 60 * 1000;
+        return System.currentTimeMillis() > creationTime + cfs.getMemtableFlushAfterMins() * 60 * 1000;
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 11a896fa..68ce353a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -263,7 +263,7 @@ private Table(String table)
         int minCheckMs = Integer.MAX_VALUE;
         for (ColumnFamilyStore cfs : columnFamilyStores.values())
         {
-            minCheckMs = Math.min(minCheckMs, cfs.metadata.memtableFlushAfterMins * 60 * 1000);
+            minCheckMs = Math.min(minCheckMs, cfs.getMemtableFlushAfterMins() * 60 * 1000);
         }
 
         Runnable runnable = new Runnable()
