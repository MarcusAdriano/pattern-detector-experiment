diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
index 4389a757..dffbe3bf 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
@@ -727,13 +727,11 @@ synchronized SegmentInfo flush(IndexWriter writer, boolean closeDocStore, IndexF
         newSegment.setDocStoreOffset(docStoreOffset);
       }
       
-      boolean hasVectors = false;
-
       if (closeDocStore) {
         closeDocStore(flushState, writer, deleter, newSegment, mergePolicy, segmentInfos);
       }
 
-      hasVectors |= flushState.hasVectors;
+      boolean hasVectors = flushState.hasVectors;
 
       if (numDocsInRAM > 0) {
 
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index 24521553..61d9e9a7 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -2719,8 +2719,6 @@ synchronized private boolean commitMerge(MergePolicy.OneMerge merge, SegmentMerg
     // format as well:
     setMergeDocStoreIsCompoundFile(merge);
 
-    merge.info.setHasProx(merger.fieldInfos().hasProx());
-
     segmentInfos.subList(start, start + merge.segments.size()).clear();
     assert !segmentInfos.contains(merge.info);
     segmentInfos.add(start, merge.info);
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentInfo.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
index d88bba82..f1ec386f 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
@@ -116,6 +116,7 @@ void reset(SegmentInfo src) {
     docStoreOffset = src.docStoreOffset;
     docStoreIsCompoundFile = src.docStoreIsCompoundFile;
     hasVectors = src.hasVectors;
+    hasProx = src.hasProx;
     if (src.normGen == null) {
       normGen = null;
     } else {
@@ -194,12 +195,30 @@ public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider co
       hasVectors = input.readByte() == 1;
     } else {
       final String storesSegment;
+      final String ext;
+      final boolean isCompoundFile;
       if (docStoreOffset != -1) {
         storesSegment = docStoreSegment;
+        isCompoundFile = docStoreIsCompoundFile;
+        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;
       } else {
         storesSegment = name;
+        isCompoundFile = getUseCompoundFile();
+        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;
+      }
+      final Directory dirToTest;
+      if (isCompoundFile) {
+        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, "", ext));
+      } else {
+        dirToTest = dir;
+      }
+      try {
+        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, "", IndexFileNames.VECTORS_INDEX_EXTENSION));
+      } finally {
+        if (isCompoundFile) {
+          dirToTest.close();
+        }
       }
-      hasVectors = dir.fileExists(IndexFileNames.segmentFileName(storesSegment, "", IndexFileNames.VECTORS_INDEX_EXTENSION));
     }
   }
   
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/DefaultSegmentInfosWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/DefaultSegmentInfosWriter.java
index 3157feba..ea402d95 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/DefaultSegmentInfosWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/DefaultSegmentInfosWriter.java
@@ -37,14 +37,14 @@
 
   /** Each segment records whether its postings are written
    *  in the new flex format */
-  public static final int FORMAT_4_0 = -10;
+  public static final int FORMAT_4_0 = -11;
 
   /** Each segment records whether it has term vectors */
-  public static final int FORMAT_HAS_VECTORS = -11;
+  public static final int FORMAT_HAS_VECTORS = -10;
 
   /** This must always point to the most recent file format.
    * whenever you add a new format, make it 1 smaller (negative version logic)! */
-  public static final int FORMAT_CURRENT = FORMAT_HAS_VECTORS;
+  public static final int FORMAT_CURRENT = FORMAT_4_0;
   
   /** This must always point to the first supported file format. */
   public static final int FORMAT_MINIMUM = FORMAT_DIAGNOSTICS;
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
index 14a5a920..b017d97e 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
@@ -344,6 +344,10 @@ public void searchIndex(String dirName, String oldName) throws IOException {
           f = d.getField("fie\u2C77ld");
           assertEquals("field with non-ascii name", f.stringValue());
         }
+
+        TermFreqVector tfv = reader.getTermFreqVector(i, "utf8");
+        assertNotNull("docID=" + i + " index=" + dirName, tfv);
+        assertTrue(tfv instanceof TermPositionVector);
       } else
         // Only ID 7 is deleted
         assertEquals(7, i);
