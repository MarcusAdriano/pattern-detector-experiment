diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
index 1e2bbe9d..1609e05d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
@@ -421,12 +421,10 @@ public Void remove(ByteBuffer key, ColumnPath columnPath, Clock clock, Consisten
 
     private void doInsert(ConsistencyLevel consistency, RowMutation rm) throws UnavailableException, TimedOutException
     {
-        if (consistency != ConsistencyLevel.ZERO)
-        {
             try
             {
                 schedule();
-                StorageProxy.mutateBlocking(Arrays.asList(rm), thriftConsistencyLevel(consistency));
+            StorageProxy.mutate(Arrays.asList(rm), thriftConsistencyLevel(consistency));
             }
             catch (TimeoutException e)
             {
@@ -441,19 +439,6 @@ private void doInsert(ConsistencyLevel consistency, RowMutation rm) throws Unava
                 release();
             }
         }
-        else
-        {
-            try
-            {
-                schedule();
-                StorageProxy.mutate(Arrays.asList(rm));
-            }
-            finally
-            {
-                release();
-            }
-        }
-    }
 
     @Override
     public Void batch_mutate(GenericArray<MutationsMapEntry> mutationMap, ConsistencyLevel consistencyLevel)
@@ -479,30 +464,16 @@ public Void batch_mutate(GenericArray<MutationsMapEntry> mutationMap, Consistenc
             rowMutations.add(getRowMutationFromMutations(curKeyspace.get(), pair.key.array(), cfToMutations));
         }
         
-        if (consistencyLevel == ConsistencyLevel.ZERO)
-        {
             try
             {
                 schedule();
-                StorageProxy.mutate(rowMutations);
-            }
-            finally
-            {
-                release();
-            }
-        }
-        else
-        {
-            try
-            {
-                schedule();
-                StorageProxy.mutateBlocking(rowMutations, thriftConsistencyLevel(consistencyLevel));
+            StorageProxy.mutate(rowMutations, thriftConsistencyLevel(consistencyLevel));
             }
             catch (TimeoutException te)
             {
                 throw newTimedOutException();
             }
-            // FIXME: StorageProxy.mutateBlocking throws Thrift's UnavailableException
+        // FIXME: StorageProxy.mutate throws Thrift's UnavailableException
             catch (org.apache.cassandra.thrift.UnavailableException ue)
             {
                 throw newUnavailableException();
@@ -511,7 +482,6 @@ public Void batch_mutate(GenericArray<MutationsMapEntry> mutationMap, Consistenc
             {
                 release();
             }
-        }
         
         return null;
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index c716e47c..66eb89fb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -40,6 +40,7 @@
 import org.apache.cassandra.service.DigestMismatchException;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.service.WriteResponseHandler;
+import org.apache.cassandra.service.IWriteResponseHandler;
 import org.apache.cassandra.thrift.InvalidRequestException;
 import org.apache.cassandra.utils.WrappedRunnable;
 import org.cliffc.high_scale_lib.NonBlockingHashSet;
@@ -122,7 +123,7 @@ private static boolean sendMessage(InetAddress endpoint, String tableName, Strin
             RowMutation rm = new RowMutation(tableName, key);
             rm.add(cf);
             Message message = rm.makeRowMutationMessage();
-            WriteResponseHandler responseHandler = new WriteResponseHandler(endpoint);
+            IWriteResponseHandler responseHandler =  WriteResponseHandler.create(endpoint);
             MessagingService.instance.sendRR(message, new InetAddress[] { endpoint }, responseHandler);
             try
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
index d1669ba7..95ce762d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
@@ -104,11 +104,11 @@
      */
     public abstract Set<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) throws IllegalStateException;
 
-    public AbstractWriteResponseHandler getWriteResponseHandler(Collection<InetAddress> writeEndpoints,
+    public IWriteResponseHandler getWriteResponseHandler(Collection<InetAddress> writeEndpoints,
                                                                 Multimap<InetAddress, InetAddress> hintedEndpoints,
                                                                 ConsistencyLevel consistencyLevel)
     {
-        return new WriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
+        return WriteResponseHandler.create(writeEndpoints, hintedEndpoints, consistencyLevel, table);
     }
 
     // instance method so test subclasses can override it
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
index f00d701f..fcfa66ef 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
@@ -152,16 +152,16 @@ public int getReplicationFactor(String dc)
      * return a DCQRH with a map of all the DC rep factor.
      */
     @Override
-    public AbstractWriteResponseHandler getWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistency_level)
+    public IWriteResponseHandler getWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistency_level)
     {
         if (consistency_level == ConsistencyLevel.DCQUORUM)
         {
             // block for in this context will be localnodes block.
-            return new DatacenterWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level, table);
+            return DatacenterWriteResponseHandler.create(writeEndpoints, hintedEndpoints, consistency_level, table);
         }
         else if (consistency_level == ConsistencyLevel.DCQUORUMSYNC)
         {
-            return new DatacenterSyncWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level, table);
+            return DatacenterSyncWriteResponseHandler.create(writeEndpoints, hintedEndpoints, consistency_level, table);
         }
         return super.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java
index ebf299c0..abfaaa30 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java
@@ -28,13 +28,13 @@
 
 import com.google.common.collect.Multimap;
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.net.IAsyncCallback;
 import org.apache.cassandra.net.Message;
+import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.thrift.ConsistencyLevel;
 import org.apache.cassandra.thrift.UnavailableException;
 import org.apache.cassandra.utils.SimpleCondition;
 
-public abstract class AbstractWriteResponseHandler implements IAsyncCallback
+public abstract class AbstractWriteResponseHandler implements IWriteResponseHandler
 {
     protected final SimpleCondition condition = new SimpleCondition();
     protected final long startTime;
@@ -42,7 +42,7 @@
     protected final Multimap<InetAddress, InetAddress> hintedEndpoints;
     protected final ConsistencyLevel consistencyLevel;
 
-    public AbstractWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel)
+    protected AbstractWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel)
     {
         startTime = System.currentTimeMillis();
         this.consistencyLevel = consistencyLevel;
@@ -69,6 +69,13 @@ public void get() throws TimeoutException
         }
     }
 
+    public void addHintCallback(Message hintedMessage, InetAddress destination)
+    {
+        // (non-destination hints are part of the callback and count towards consistency only under CL.ANY)
+        if (writeEndpoints.contains(destination) || consistencyLevel == ConsistencyLevel.ANY)
+            MessagingService.instance.addCallback(this, hintedMessage.getMessageId());
+    }
+
     /** null message means "response from local write" */
     public abstract void response(Message msg);
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
index 02a47e4f..e039c2b5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
@@ -56,7 +56,7 @@
 	private final NetworkTopologyStrategy strategy;
     private HashMap<String, AtomicInteger> responses = new HashMap<String, AtomicInteger>();
 
-    public DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
+    protected DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
     {
         // Response is been managed by the map so make it 1 for the superclass.
         super(writeEndpoints, hintedEndpoints, consistencyLevel);
@@ -71,6 +71,18 @@ public DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints
         }
     }
 
+    public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
+    {
+        if (consistencyLevel == ConsistencyLevel.ZERO)
+        {
+            return NoConsistencyWriteResponseHandler.instance;
+        }
+        else
+        {
+            return new DatacenterSyncWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
+        }
+    }
+
     public void response(Message message)
     {
         String dataCenter = message == null
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
index 4954faa2..a035c038 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
@@ -50,12 +50,23 @@
         localdc = snitch.getDatacenter(FBUtilities.getLocalAddress());
     }
 
-    public DatacenterWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
+    protected DatacenterWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
     {
         super(writeEndpoints, hintedEndpoints, consistencyLevel, table);
         assert consistencyLevel == ConsistencyLevel.DCQUORUM;
     }
 
+    public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
+    {
+        if (consistencyLevel == ConsistencyLevel.ZERO)
+        {
+            return NoConsistencyWriteResponseHandler.instance;
+        }
+        else
+        {
+            return new DatacenterWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
+        }
+    }
 
     @Override
     protected int determineBlockFor(String table)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/IWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/IWriteResponseHandler.java
index e69de29b..69768934 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/IWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/IWriteResponseHandler.java
@@ -0,0 +1,35 @@
+package org.apache.cassandra.service;
+/*
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ *
+ */
+
+import java.net.InetAddress;
+import java.util.concurrent.TimeoutException;
+
+import org.apache.cassandra.net.IAsyncCallback;
+import org.apache.cassandra.net.Message;
+import org.apache.cassandra.thrift.UnavailableException;
+
+public interface IWriteResponseHandler extends IAsyncCallback
+{
+    public void get() throws TimeoutException;
+    public void addHintCallback(Message hintedMessage, InetAddress destination);
+    public void assureSufficientLiveNodes() throws UnavailableException;
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java
index e69de29b..fe0eadcf 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java
@@ -0,0 +1,20 @@
+package org.apache.cassandra.service;
+
+import java.net.InetAddress;
+import java.util.concurrent.TimeoutException;
+
+import org.apache.cassandra.net.Message;
+import org.apache.cassandra.thrift.UnavailableException;
+
+class NoConsistencyWriteResponseHandler implements IWriteResponseHandler
+{
+    static final IWriteResponseHandler instance = new NoConsistencyWriteResponseHandler();
+
+    public void get() throws TimeoutException {}
+
+    public void addHintCallback(Message hintedMessage, InetAddress destination) {}
+
+    public void response(Message msg) {}
+
+    public void assureSufficientLiveNodes() throws UnavailableException {}
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index c8d3640e..c428e16a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -84,100 +84,13 @@ private StorageProxy() {}
      * of the possibility of a replica being down and hint
      * the data across to some other replica.
      *
-     * This is the ZERO consistency level. We do not wait for replies.
-     *
      * @param mutations the mutations to be applied across the replicas
+     * @param consistency_level the consistency level for the operation
     */
-    public static void mutate(List<RowMutation> mutations)
-    {
-        long startTime = System.nanoTime();
-        try
-        {
-            StorageService ss = StorageService.instance;
-            for (final RowMutation rm: mutations)
-            {
-                try
-                {
-                    String table = rm.getTable();
-                    AbstractReplicationStrategy rs = ss.getReplicationStrategy(table);
-
-                    List<InetAddress> naturalEndpoints = ss.getNaturalEndpoints(table, rm.key());
-                    Multimap<InetAddress,InetAddress> hintedEndpoints = rs.getHintedEndpoints(naturalEndpoints);
-                    Message unhintedMessage = null; // lazy initialize for non-local, unhinted writes
-
-                    // 3 cases:
-                    // 1. local, unhinted write: run directly on write stage
-                    // 2. non-local, unhinted write: send row mutation message
-                    // 3. hinted write: add hint header, and send message
-                    for (Map.Entry<InetAddress, Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet())
-                    {
-                        InetAddress destination = entry.getKey();
-                        Collection<InetAddress> targets = entry.getValue();
-                        if (targets.size() == 1 && targets.iterator().next().equals(destination))
-                        {
-                            // unhinted writes
-                            if (destination.equals(FBUtilities.getLocalAddress()))
-                            {
-                                if (logger.isDebugEnabled())
-                                    logger.debug("insert writing local " + rm.toString(true));
-                                Runnable runnable = new WrappedRunnable()
-                                {
-                                    public void runMayThrow() throws IOException
-                                    {
-                                        rm.apply();
-                                    }
-                                };
-                                StageManager.getStage(StageManager.MUTATION_STAGE).execute(runnable);
-                            }
-                            else
-                            {
-                                if (unhintedMessage == null)
-                                    unhintedMessage = rm.makeRowMutationMessage();
-                                if (logger.isDebugEnabled())
-                                    logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to " + unhintedMessage.getMessageId() + "@" + destination);
-                                MessagingService.instance.sendOneWay(unhintedMessage, destination);
-                            }
-                        }
-                        else
-                        {
-                            // hinted
-                            Message hintedMessage = rm.makeRowMutationMessage();
-                            for (InetAddress target : targets)
-                            {
-                                if (!target.equals(destination))
-                                {
-                                    addHintHeader(hintedMessage, target);
-                                    if (logger.isDebugEnabled())
-                                        logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to " + hintedMessage.getMessageId() + "@" + destination + " for " + target);
-                                }
-                            }
-                            MessagingService.instance.sendOneWay(hintedMessage, destination);
-                        }
-                    }
-                }
-                catch (IOException e)
-                {
-                    throw new RuntimeException("error inserting key " + FBUtilities.bytesToHex(rm.key()), e);
-                }
-            }
-        }
-        finally
-        {
-            writeStats.addNano(System.nanoTime() - startTime);
-        }
-    }
-
-    private static void addHintHeader(Message message, InetAddress target)
-    {
-        byte[] oldHint = message.getHeader(RowMutation.HINT);
-        byte[] hint = oldHint == null ? target.getAddress() : ArrayUtils.addAll(oldHint, target.getAddress());
-        message.setHeader(RowMutation.HINT, hint);
-    }
-
-    public static void mutateBlocking(List<RowMutation> mutations, ConsistencyLevel consistency_level) throws UnavailableException, TimeoutException
+    public static void mutate(List<RowMutation> mutations, ConsistencyLevel consistency_level) throws UnavailableException, TimeoutException
     {
         long startTime = System.nanoTime();
-        ArrayList<AbstractWriteResponseHandler> responseHandlers = new ArrayList<AbstractWriteResponseHandler>();
+        ArrayList<IWriteResponseHandler> responseHandlers = new ArrayList<IWriteResponseHandler>();
 
         RowMutation mostRecentRowMutation = null;
         StorageService ss = StorageService.instance;
@@ -195,7 +108,7 @@ public static void mutateBlocking(List<RowMutation> mutations, ConsistencyLevel
                 Multimap<InetAddress, InetAddress> hintedEndpoints = rs.getHintedEndpoints(writeEndpoints);
                 
                 // send out the writes, as in mutate() above, but this time with a callback that tracks responses
-                final AbstractWriteResponseHandler responseHandler = rs.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);
+                final IWriteResponseHandler responseHandler = rs.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);
                 responseHandler.assureSufficientLiveNodes();
 
                 responseHandlers.add(responseHandler);
@@ -238,15 +151,13 @@ public static void mutateBlocking(List<RowMutation> mutations, ConsistencyLevel
                                     logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to " + hintedMessage.getMessageId() + "@" + destination + " for " + target);
                             }
                         }
-                        // (non-destination hints are part of the callback and count towards consistency only under CL.ANY)
-                        if (writeEndpoints.contains(destination) || consistency_level == ConsistencyLevel.ANY)
-                            MessagingService.instance.addCallback(responseHandler, hintedMessage.getMessageId());
+                        responseHandler.addHintCallback(hintedMessage, destination);
                         MessagingService.instance.sendOneWay(hintedMessage, destination);
                     }
                 }
             }
             // wait for writes.  throws timeoutexception if necessary
-            for (AbstractWriteResponseHandler responseHandler : responseHandlers)
+            for (IWriteResponseHandler responseHandler : responseHandlers)
             {
                 responseHandler.get();
             }
@@ -265,7 +176,14 @@ public static void mutateBlocking(List<RowMutation> mutations, ConsistencyLevel
 
     }
 
-    private static void insertLocalMessage(final RowMutation rm, final AbstractWriteResponseHandler responseHandler)
+    private static void addHintHeader(Message message, InetAddress target)
+    {
+        byte[] oldHint = message.getHeader(RowMutation.HINT);
+        byte[] hint = oldHint == null ? target.getAddress() : ArrayUtils.addAll(oldHint, target.getAddress());
+        message.setHeader(RowMutation.HINT, hint);
+    }
+
+    private static void insertLocalMessage(final RowMutation rm, final IWriteResponseHandler responseHandler)
     {
         if (logger.isDebugEnabled())
             logger.debug("insert writing local " + rm.toString(true));
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
index d2daec27..63064f6d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
@@ -39,15 +39,15 @@
 {
     protected static final Logger logger = LoggerFactory.getLogger(WriteResponseHandler.class);
 
-    protected AtomicInteger responses;
+    protected final AtomicInteger responses;
 
-    public WriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
+    protected WriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
     {
         super(writeEndpoints, hintedEndpoints, consistencyLevel);
         responses = new AtomicInteger(determineBlockFor(table));
     }
 
-    public WriteResponseHandler(InetAddress endpoint)
+    protected WriteResponseHandler(InetAddress endpoint)
     {
         super(Arrays.asList(endpoint),
               ImmutableMultimap.<InetAddress, InetAddress>builder().put(endpoint, endpoint).build(),
@@ -55,6 +55,23 @@ public WriteResponseHandler(InetAddress endpoint)
         responses = new AtomicInteger(1);
     }
 
+    public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
+    {
+        if (consistencyLevel == ConsistencyLevel.ZERO)
+        {
+            return NoConsistencyWriteResponseHandler.instance;
+        }
+        else
+        {
+            return new WriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
+        }
+    }
+
+    public static IWriteResponseHandler create(InetAddress endpoint)
+    {
+        return new WriteResponseHandler(endpoint);
+    }
+
     public void response(Message m)
     {
         if (responses.decrementAndGet() == 0)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 4c48fe59..67d98138 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -463,22 +463,15 @@ private void doInsert(ConsistencyLevel consistency_level, List<RowMutation> muta
         {
             schedule();
 
-            if (consistency_level == ConsistencyLevel.ZERO)
-            {
-                StorageProxy.mutate(mutations);
-            }
-            else
-            {
                 try
                 {
-                    StorageProxy.mutateBlocking(mutations, consistency_level);
+              StorageProxy.mutate(mutations, consistency_level);
                 }
                 catch (TimeoutException e)
                 {
                     throw new TimedOutException();
                 }
             }
-        }
         finally
         {
             release();
