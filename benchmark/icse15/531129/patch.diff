diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java
index 05c2b52d..54291e1d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.client.am;
 
 import org.apache.derby.client.ClientPooledConnection;
+import org.apache.derby.client.ClientXAConnection;
 import org.apache.derby.jdbc.ClientDataSource;
 import java.sql.SQLException;
 import org.apache.derby.jdbc.ClientBaseDataSource;
@@ -54,6 +55,15 @@ ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,
             LogWriter logWriter,String user,String password,int rmId)
             throws SQLException;
     
+    /**
+     * This method is used to return an instance of
+     * ClientXAConnection (or ClientXAConnection40) class which
+     * implements javax.sql.XAConnection
+     */
+    ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,
+            LogWriter logWriter,String user,String password)
+            throws SQLException;
+    
     /**
      * Returns an instance of org.apache.derby.client.am.CallableStatement.
      * or CallableStatement40 which implements java.sql.CallableStatement
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java
index 5acd3bd7..e471034b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Connection;
 import java.sql.SQLException;
 import org.apache.derby.client.ClientPooledConnection;
+import org.apache.derby.client.ClientXAConnection;
 import org.apache.derby.client.am.CallableStatement;
 import org.apache.derby.client.am.ClientJDBCObjectFactory;
 import org.apache.derby.client.am.LogicalConnection;
@@ -37,7 +38,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.client.am.Statement;
 import org.apache.derby.client.am.SqlException;
 import org.apache.derby.client.am.Cursor;
+import org.apache.derby.client.net.NetLogWriter;
 import org.apache.derby.jdbc.ClientBaseDataSource;
+import org.apache.derby.jdbc.ClientXADataSource;
 import org.apache.derby.client.am.ColumnMetaData;
 
 /**
@@ -64,6 +67,15 @@ public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,
             String password,int rmId) throws SQLException {
         return new ClientPooledConnection(ds,logWriter,user,password,rmId);
     }
+    /**
+     * Returns an instance of org.apache.derby.client.ClientXAConnection 
+     */
+    public ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,
+        LogWriter logWriter,String user, String password) throws SQLException
+    {
+        return new ClientXAConnection((ClientXADataSource)ds,
+            (NetLogWriter)logWriter,user,password);
+    }
     /**
      * Returns an instance of org.apache.derby.client.am.CallableStatement.
      *
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java
index d0cc18a7..5340404b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java
@@ -23,6 +23,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.client.ClientPooledConnection;
 import org.apache.derby.client.ClientPooledConnection40;
+import org.apache.derby.client.ClientXAConnection;
+import org.apache.derby.client.ClientXAConnection40;
 import org.apache.derby.client.am.CallableStatement;
 import org.apache.derby.client.am.CallableStatement40;
 import org.apache.derby.client.am.ColumnMetaData;
@@ -42,9 +44,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.client.am.Statement40;
 import org.apache.derby.client.am.SqlException;
 import org.apache.derby.client.am.Cursor;
+import org.apache.derby.client.net.NetLogWriter;
 import org.apache.derby.jdbc.ClientDataSource;
-import java.sql.SQLException;
 import org.apache.derby.jdbc.ClientBaseDataSource;
+import org.apache.derby.jdbc.ClientXADataSource;
+
+import java.sql.SQLException;
 
 /**
  * Implements the ClientJDBCObjectFactory interface
@@ -75,6 +80,16 @@ public ClientPooledConnection newClientPooledConnection(
             String password,int rmId) throws SQLException {
         return new ClientPooledConnection40(ds,logWriter,user,password,rmId);
     }
+    /**
+     * Returns an instance of org.apache.derby.client.ClientXAConnection40 
+     */
+    public ClientXAConnection newClientXAConnection(
+        ClientBaseDataSource ds, LogWriter logWriter,String user,
+        String password) throws SQLException
+    {
+        return new ClientXAConnection40((ClientXADataSource)ds,
+            (NetLogWriter)logWriter,user,password);
+    }
     /**
      * Returns an instance of org.apache.derby.client.am.CallableStatement.
      *
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
index 53d25687..69f47e99 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.client.ClientXAConnection;
 import org.apache.derby.client.net.NetLogWriter;
+import org.apache.derby.client.am.LogWriter;
 import org.apache.derby.client.am.SqlException;
 
 
@@ -68,11 +69,23 @@ public XAConnection getXAConnection(String user, String password) throws SQLExce
         try
         {
             NetLogWriter dncLogWriter = (NetLogWriter) super.computeDncLogWriterForNewConnection("_xads");
-            return new ClientXAConnection(this, dncLogWriter, user, password);
+            return getXAConnectionX(dncLogWriter, this, user, password);
         }
         catch ( SqlException se )
         {
             throw se.getSQLException();
         }
     }    
+
+    /**
+     * Method that establishes the initial physical connection
+     * using DS properties instead of CPDS properties.
+     */
+    private XAConnection getXAConnectionX(LogWriter dncLogWriter,
+        ClientBaseDataSource ds, String user, String password)
+        throws SQLException
+    {
+        return ClientDriver.getFactory().newClientXAConnection(ds,
+                dncLogWriter, user, password);
+    }   
 }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
index c7dc97de..215eeaab 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
@@ -53,22 +53,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class ClientXADataSource40 extends ClientXADataSource {
     
     /**
-     * creates a jdbc4.0 XAConnection
-     * @param user 
-     * @param password 
-     * @return XAConnection
-     */
-    public XAConnection getXAConnection(String user, String password) throws SQLException {
-        try {
-            NetLogWriter dncLogWriter = (NetLogWriter) 
-                        super.computeDncLogWriterForNewConnection("_xads");
-            return new ClientXAConnection40 (this, dncLogWriter, user, password);
-        } catch ( SqlException se ) {
-            throw se.getSQLException();
-        }
-    }
-    
-	/**
      * Returns false unless <code>interfaces</code> is implemented 
      * 
      * @param  interfaces             a Class defining an interface.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java
index 14332e96..1c273365 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java
@@ -30,10 +30,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.jdbc.BrokeredConnection;
 import org.apache.derby.iapi.jdbc.BrokeredConnection30;
 import org.apache.derby.iapi.jdbc.BrokeredConnectionControl;
+import org.apache.derby.iapi.jdbc.ResourceAdapter;
+
 import java.sql.Connection;
 import java.sql.SQLException;
 import org.apache.derby.impl.jdbc.*;
 
+/** -- jdbc 2.0. extension -- */
+import javax.sql.PooledConnection;
+import javax.sql.XAConnection;
+
 import java.util.Properties;
 
 /**
@@ -123,4 +129,30 @@ public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl contro
 
 		return new BrokeredConnection30(control);
 	}
+
+    /**
+     * Create and return an EmbedPooledConnection from the received instance
+     * of EmbeddedDataSource.
+     */
+    protected PooledConnection getNewPooledConnection(
+        EmbeddedDataSource eds, String user, String password,
+        boolean requestPassword) throws SQLException
+    {
+        return new EmbedPooledConnection(
+            eds, user, password, requestPassword);
+    }
+
+    /**
+     * Create and return an EmbedXAConnection from the received instance
+     * of EmbeddedDataSource.
+     */
+    protected XAConnection getNewXAConnection(
+        EmbeddedDataSource eds, ResourceAdapter ra,
+        String user, String password, boolean requestPassword)
+        throws SQLException
+    {
+        return new EmbedXAConnection(
+            eds, ra, user, password, requestPassword);
+    }
+
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java
index e862878e..29f84660 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java
@@ -39,6 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.impl.jdbc.SQLExceptionFactory40;
 import org.apache.derby.impl.jdbc.EmbedStatement40;
 import org.apache.derby.impl.jdbc.EmbedResultSetMetaData40;
+import org.apache.derby.iapi.jdbc.ResourceAdapter;
 import org.apache.derby.impl.jdbc.Util;
 import java.sql.Connection;
 import java.sql.SQLException;
@@ -47,6 +48,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Properties;
 import org.apache.derby.iapi.sql.ResultColumnDescriptor;
 
+/** -- jdbc 2.0. extension -- */
+import javax.sql.PooledConnection;
+import javax.sql.XAConnection;
 
 public class Driver40 extends Driver30 {
     
@@ -160,4 +164,29 @@ public DatabaseMetaData newEmbedDatabaseMetaData(EmbedConnection conn, String db
                              (ResultColumnDescriptor[] columnInfo) {
             return new EmbedResultSetMetaData40(columnInfo);
         }
+
+    /**
+     * Create and return an EmbedPooledConnection from the received instance
+     * of EmbeddedDataSource.
+     */
+    protected PooledConnection getNewPooledConnection(
+        EmbeddedDataSource eds, String user, String password,
+        boolean requestPassword) throws SQLException
+    {
+        return new EmbedPooledConnection40(
+            eds, user, password, requestPassword);
+    }
+
+    /**
+     * Create and return an EmbedXAConnection from the received instance
+     * of EmbeddedDataSource.
+     */
+    protected XAConnection getNewXAConnection(
+        EmbeddedDataSource eds, ResourceAdapter ra,
+        String user, String password, boolean requestPassword)
+        throws SQLException
+    {
+        return new EmbedXAConnection40(
+            eds, ra, user, password, requestPassword);
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java
index 84aa84f9..7e52b1b0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java
@@ -94,12 +94,43 @@ public final PooledConnection getPooledConnection(String username,
 	}
         
     /**
-     * create and returns EmbedPooledConnection.
+     * Create and return an EmbedPooledConnection from this instance
+     * of EmbeddedConnectionPoolDataSource.
      */
     protected PooledConnection createPooledConnection (String user,
-            String password, boolean requestPassword) throws SQLException {
-        return new EmbedPooledConnection(this, user, password, requestPassword);
+        String password, boolean requestPassword) throws SQLException
+    {
+        /* This object (EmbeddedConnectionPoolDataSource) is a JDBC 2
+         * and JDBC 3 implementation of ConnectionPoolDatSource.  However,
+         * it's possible that we are running with a newer driver (esp.
+         * JDBC 4) in which case we should return a PooledConnection that
+         * implements the newer JDBC interfaces--even if "this" object
+         * does not itself satisfy those interfaces.  As an example, if
+         * we have a JDK 6 application then even though this specific
+         * object doesn't implement JDBC 4 (it only implements JDBC 2
+         * and 3), we should still return a PooledConnection object that
+         * *does* implement JDBC 4 because that's what a JDK 6 app
+         * expects.
+         *
+         * By calling "findDriver()" here we will get the appropriate
+         * driver for the JDK in use (ex. if using JDK 6 then findDriver()
+         * will return the JDBC 4 driver).  If we then ask the driver to
+         * give us a pooled connection, we will get a connection that
+         * corresponds to whatever driver/JDBC implementation is being
+         * used--which is what we want.  So for a JDK 6 application we
+         * will correctly return a JDBC 4 PooledConnection. DERBY-2488.
+         *
+         * This type of scenario can occur if an application that was
+         * previously running with an older JVM (ex. JDK 1.4/1.5) starts
+         * running with a newer JVM (ex. JDK 6), in which case the app
+         * is probably still using the "old" data source (ex. is still
+         * instantiating EmbeddedConnectionPoolDataSource) instead of
+         * the newer one (EmbeddedConnectionPoolDataSource40).
+         */
+        return ((Driver30) findDriver()).getNewPooledConnection(
+            this, user, password, requestPassword);
     }
+
 }
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java
index ee1085f2..bd01bffb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java
@@ -91,14 +91,4 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
                     interfaces);
         }
     }
-
-    /**
-     * create and returns EmbedPooledConnection.
-     */
-    protected PooledConnection createPooledConnection (String user, 
-            String password, boolean requestPassword)  throws SQLException {
-        return new EmbedPooledConnection40(this, user, password,
-                                           requestPassword);
-    }    
-        
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java
index 15d7a58c..88751ecc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java
@@ -191,15 +191,45 @@ private void setupResourceAdapter(String user, String password, boolean requestP
 	}
         
     /**
-     * Intantiate and returns EmbedXAConnection.
+     * Intantiate and return an EmbedXAConnection from this instance
+     * of EmbeddedXADataSource.
+     *
      * @param user 
      * @param password 
      * @return XAConnection
      */
         protected XAConnection createXAConnection (ResourceAdapter ra, 
-                String user, String password, 
-                boolean requestPassword) throws SQLException {
-            return new EmbedXAConnection(this, ra, user, 
-                    password, requestPassword);
+        String user, String password, boolean requestPassword)
+        throws SQLException
+    {
+        /* This object (EmbeddedXADataSource) is a JDBC 2 and JDBC 3
+         * implementation of XADatSource.  However, it's possible that we
+         * are running with a newer driver (esp. JDBC 4) in which case we
+         * should return a PooledConnection that implements the newer JDBC
+         * interfaces--even if "this" object does not itself satisfy those
+         * interfaces.  As an example, if we have a JDK 6 application then
+         * even though this specific object doesn't implement JDBC 4 (it
+         * only implements JDBC 2 and 3), we should still return an
+         * XAConnection object that *does* implement JDBC 4 because that's
+         * what a JDK 6 app expects.
+         *
+         * By calling "findDriver()" here we will get the appropriate
+         * driver for the JDK in use (ex. if using JDK 6 then findDriver()
+         * will return the JDBC 4 driver).  If we then ask the driver to
+         * give us an XA connection, we will get a connection that
+         * corresponds to whatever driver/JDBC implementation is being
+         * used--which is what we want.  So for a JDK 6 application we
+         * will correctly return a JDBC 4 XAConnection. DERBY-2488.
+         *
+         * This type of scenario can occur if an application that was
+         * previously running with an older JVM (ex. JDK 1.4/1.5) starts
+         * running with a newer JVM (ex. JDK 6), in which case the app
+         * is probably still using the "old" data source (ex. is still
+         * instantiating EmbeddedXADataSource) instead of the newer one
+         * (EmbeddedXADataSource40).
+         */
+        return ((Driver30) findDriver()).getNewXAConnection(
+            this, ra, user, password, requestPassword);
         }
+
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java
index 21398575..079dfab5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java
@@ -100,16 +100,4 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
         }
     }
 	
-    /**
-     * Intantiate and returns EmbedXAConnection.
-     * @param user 
-     * @param password 
-     * @return XAConnection
-     */
-        protected XAConnection createXAConnection (ResourceAdapter ra, 
-                String user, String password,
-                boolean requestPassword)  throws SQLException {
-            return new EmbedXAConnection40 (this, ra, user, 
-                    password, requestPassword);
-        }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java
index e69de29b..beed7783 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java
@@ -0,0 +1,155 @@
+/*
+ 
+   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+ 
+      http://www.apache.org/licenses/LICENSE-2.0
+ 
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ 
+ */
+
+package org.apache.derbyTesting.functionTests.tests.jdbc4;
+
+import junit.framework.*;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.JDBCClient;
+import org.apache.derbyTesting.junit.JDBCDataSource;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+import javax.sql.ConnectionPoolDataSource;
+import javax.sql.DataSource;
+import javax.sql.PooledConnection;
+import javax.sql.StatementEvent;
+import javax.sql.StatementEventListener;
+import javax.sql.XADataSource;
+
+/**
+ * This test ensures that when a JDBC 4 application instantiates a JDBC 3
+ * data source, that data source will return JDBC 4 connections even though
+ * the data source itself is not a JDBC 4 object.
+ */
+public class JDBC4FromJDBC3DataSourceTest extends BaseJDBCTestCase {
+    
+    /**
+     * Create a test with the given name.
+     * @param name name of the test.
+     *
+     */
+    public JDBC4FromJDBC3DataSourceTest(String name)
+    {
+        super(name);
+    }
+    
+    /**
+     * Return suite with all tests of the class.
+     */
+    public static Test suite()
+    {
+        // Only run this test if we have a JDBC 4 JVM.
+        if (JDBC.vmSupportsJDBC4())
+        {
+            return TestConfiguration.forceJDBC3Suite(
+                JDBC4FromJDBC3DataSourceTest.class);
+        }
+
+        // Else return empty suite.
+        return new TestSuite("JDBC 4 from JDBC 3 Data Sources");
+    }
+
+    /**
+     * Test that a JDBC 3 data source returns a JDBC 4 PooledConnection
+     * when running with a JDBC 4 JDK.
+     */
+    public void testPooledConnection() throws Exception
+    {
+        ConnectionPoolDataSource ds = (ConnectionPoolDataSource)
+            JDBCDataSource.getConnectionPoolDataSource();
+
+        assertNonJDBC4DataSource((DataSource)ds);
+        checkJDBC4Interface(ds.getPooledConnection());
+    }
+
+    /**
+     * Test that a JDBC 3 data source returns a JDBC 4 XAConnection
+     * when running with a JDBC 4 JDK.
+     */
+    public void testXAConnection() throws Exception
+    {
+        XADataSource ds = 
+            (XADataSource) JDBCDataSource.getXADataSource();
+
+        assertNonJDBC4DataSource((DataSource)ds);
+        checkJDBC4Interface(ds.getXAConnection());
+    }
+
+    /**
+     * Make sure that the received DataSource is *not* a JDBC 4
+     * data source, since that would defeat the whole purpose
+     * of this test.
+     */
+    private void assertNonJDBC4DataSource(DataSource ds)
+        throws SQLException
+    {
+        /* Simplest way is to try to call a JDBC 4 interface method;
+         * if it succeeds, then we must have a JDBC 4 data source
+         * (which we don't want).
+         */
+        try {
+
+            ds.isWrapperFor(DataSource.class);
+            fail("Found JDBC 4 data source when JDBC 3 was expected.");
+
+        } catch (java.lang.AbstractMethodError ame) {}
+    }
+
+    /**
+     * Make sure that the received PooledConnection, which we assume came
+     * from a JDBC 3 data source, is nonetheless a JDBC 4 object.
+     */
+    private void checkJDBC4Interface(PooledConnection pc)
+        throws Exception
+    {
+        // Create dummy event listener.
+        StatementEventListener listener =
+            new StatementEventListener()
+            {
+                public void statementClosed(StatementEvent event) {}
+                public void statementErrorOccurred(StatementEvent event) {}
+            };
+
+        /* Assert that metadata reports JDBC 4 for the connection, which
+         * it should even though the connection was created from a JDBC 3
+         * datasource.
+         */
+        Connection conn = pc.getConnection();
+        assertEquals(4, conn.getMetaData().getJDBCMajorVersion());
+        conn.close();
+        conn = null;
+
+        /* The way we check to see if we actually have JDBC 4 objects is
+         * to call two methods that only exist in JDBC 4.  These should
+         * succeed.  Before DERBY-2488 they would fail with an Abstract
+         * MethodError.
+         */
+        pc.addStatementEventListener(listener);
+        pc.removeStatementEventListener(listener);
+        pc.close();
+    }
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
index 2b0349b4..8d7adda0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
@@ -71,6 +71,7 @@ public static Test suite() throws SQLException {
         suite.addTest(VerifySignatures.suite());
         suite.addTest (LobStreamTest.suite());
         suite.addTest (BlobSetMethodsTest.suite());
+        suite.addTest (JDBC4FromJDBC3DataSourceTest.suite());
 		
 		return suite;
 	}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java
index ff8aadf0..a90c772f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java
@@ -94,6 +94,14 @@ static JDBCClient getDefaultEmbedded()
             "org.apache.derby.jdbc.ClientXADataSource",
             "jdbc:derby://");
     
+    static final JDBCClient DERBYNETCLIENT_30 = new JDBCClient(
+            "DerbyNetClient",
+            "org.apache.derby.jdbc.ClientDriver",
+            "org.apache.derby.jdbc.ClientDataSource",
+            "org.apache.derby.jdbc.ClientConnectionPoolDataSource",
+            "org.apache.derby.jdbc.ClientXADataSource",
+            "jdbc:derby://");
+
     /**
      * The DB2 Universal JDBC network client.
      * AKA: JCC or DerbyNet.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
index f4646415..612b07a7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
@@ -43,6 +43,33 @@
         return getDataSource(TestConfiguration.getCurrent(), (HashMap) null);
     }
     
+    /**
+     * Return a ConnectionPoolDataSource corresponding to the current
+     * configuration.  This method returns a generic Object (as opposed
+     * to a ConnectionPoolDataSource) because this class has to work
+     * with JSR169 JVMs, as well, and those JVMs do not include the
+     * javax.sql.ConnectionPoolDataSource class.
+     */
+    public static Object getConnectionPoolDataSource()
+    {
+        TestConfiguration config = TestConfiguration.getCurrent();
+        return getDataSource(config, (HashMap) null,
+			config.getJDBCClient().getConnectionPoolDataSourceClassName());
+    }
+    
+    /*
+     * Return an XADataSource corresponding to the current configuration.
+     * This method returns a generic Object (as opposed to an XADataSource)
+     * because this class has to work with JSR169 JVMs, as well, and those
+     * JVMs do not include the javax.sql.XADataSource class.
+     */
+    public static Object getXADataSource()
+    {
+        TestConfiguration config = TestConfiguration.getCurrent();
+        return getDataSource(config, (HashMap) null,
+            config.getJDBCClient().getXADataSourceClassName());
+    }
+    
     /**
      * Return a DataSource corresponding to the current
      * configuration except that the databse name is different.
@@ -85,13 +112,23 @@
      */
     static javax.sql.DataSource getDataSource(TestConfiguration config,
             HashMap beanProperties)
+    {
+        return (javax.sql.DataSource) getDataSource(config,
+            beanProperties, config.getJDBCClient().getDataSourceClassName());
+    }
+
+    /**
+     * Create a new DataSource object setup from the passed in
+     * TestConfiguration using the received properties and data
+     * source class name.
+     */
+    static Object getDataSource(TestConfiguration config,
+        HashMap beanProperties, String dsClassName)
     {
         if (beanProperties == null)
              beanProperties = getDataSourceProperties(config);
         
-        String dataSourceClass = config.getJDBCClient().getDataSourceClassName();
-        
-        return (javax.sql.DataSource) getDataSourceObject(dataSourceClass,
+        return (javax.sql.DataSource) getDataSourceObject(dsClassName,
                 beanProperties);
     }
     
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ServerSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ServerSetup.java
index bcd9d535..649e57c4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ServerSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ServerSetup.java
@@ -32,6 +32,7 @@
 
     private final String host;
     private final int port;
+    private JDBCClient client;
     
     public ServerSetup(Test test, String host, int port) {
         super(test);
@@ -41,7 +42,15 @@ public ServerSetup(Test test, String host, int port) {
 
     TestConfiguration getNewConfiguration(TestConfiguration old) {
                
-        return new TestConfiguration(old, JDBCClient.DERBYNETCLIENT,
-                    host, port);
+        return new TestConfiguration(old,
+            (client == null) ? JDBCClient.DERBYNETCLIENT : client, host, port);
+    }
+
+    /**
+     * Specify a JDBCClient to use in place of the default DERBYNETCLIENT.
+     */
+    void setJDBCClient(JDBCClient newClient)
+    {
+        this.client = newClient;
     }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 7d869729..3f74eb6d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -228,6 +228,30 @@ public static Test defaultSuite(Class testClass, boolean cleanDB)
         return (suite);
     }
     
+    /**
+     * Return a Test suite that contains all the test fixtures
+     * for the passed in class running in embedded and client-
+     * server *JDBC3* configurations.
+     * <BR>
+     * Each set of embedded and set of client server tests is
+     * decorated with a CleanDatabaseTestSetup.
+     * <BR>
+     */
+    public static Test forceJDBC3Suite(Class testClass)
+    {
+        final TestSuite suite = new TestSuite(suiteName(testClass));
+
+        suite.addTest(
+            new CleanDatabaseTestSetup(
+                forceJDBC3Embedded(embeddedSuite(testClass))));
+
+        suite.addTest(
+            new CleanDatabaseTestSetup(
+                forceJDBC3NetClient(clientServerSuite(testClass))));
+
+        return (suite);
+    }
+
     /**
      * Generate a suite name from a class name, taking
      * only the last element of the fully qualified class name.
@@ -570,6 +594,26 @@ public static Test forceJDBC3Embedded(Test test)
         return test;
     }
     
+    /**
+     * Returns a decorator that forces the JDBC 3 network client in
+     * a Java SE 6/JDBC 4 environment. The only difference is that
+     * the DataSource class names will be the "old" JDBC 3 versions
+     * and not the JDBC 4 specific ones.
+     *
+     * Assumption is that the received Test is an instance of ServerSetup,
+     * which is the decorator for client server tests.  If that is not
+     * the case then this method is a no-op.
+     *
+     * @param test Test around which to wrap the JDBC 3 network client
+     *  configuration.
+     */
+    public static Test forceJDBC3NetClient(Test test)
+    {
+        if (JDBC.vmSupportsJDBC4() && (test instanceof ServerSetup))
+            ((ServerSetup)test).setJDBCClient(JDBCClient.DERBYNETCLIENT_30);
+        return test;
+    }
+    
     /**
      * Default embedded configuration
      *
