diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java
index 84b5261e..5d28c3f6 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java
@@ -318,7 +318,7 @@ public int getColumnDisplaySize(int column) throws SQLException {
             case Types.TIME:
                 return 8;
             case Types.TIMESTAMP:
-                return 26;
+                return 29;
             case Types.JAVA_OBJECT:
                 return JDBC30Translation.DEFAULT_COLUMN_DISPLAY_SIZE;
             case Types.BINARY:
@@ -452,7 +452,7 @@ public int getPrecision(int column) throws SQLException {
             case Types.TIME:
                 return 8;
             case Types.TIMESTAMP:
-                return 26;
+                return 29;
             case Types.JAVA_OBJECT:
                 return JDBC30Translation.UNKNOWN_PRECISION;
             default:
@@ -472,15 +472,6 @@ public int getScale(int column) throws SQLException {
             checkForClosedStatement();
             checkForValidColumnIndex(column);
 
-            // We get the scale from the SQLDA as returned by DERBY, but DERBY does not return the ANSI-defined
-            // value of scale 6 for TIMESTAMP.
-            //
-            //   The JDBC drivers should hardcode this info as a short/near term solution.
-            //
-            if (types_[column - 1] == Types.TIMESTAMP) {
-                return 6;
-            }
-
             return sqlScale_[column - 1];
         }
         catch ( SqlException e )
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/DRDAConstants.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/DRDAConstants.java
index 589d9bf7..3a50cfac 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/DRDAConstants.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/DRDAConstants.java
@@ -228,7 +228,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // nanoseconds precision: yyyy-mm-dd-hh.mm.ss.ffffff
     // In contrast, JDBC supports full nanoseconds precision: yyyy-mm-dd-hh.mm.ss.fffffffff
     //
-    public   static final int DRDA_TIMESTAMP_LENGTH = 26;
+    public   static final int DRDA_TIMESTAMP_LENGTH = 29;
     public   static final int JDBC_TIMESTAMP_LENGTH = 29;
 
     // Values for the EXTDTA stream status byte.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
index 616fb356..e7523496 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
@@ -156,7 +156,7 @@ public	static	int getColumnDisplaySize(int typeId, int storageLength)
 		switch (typeId)
 		{
 			case Types.TIMESTAMP:
-				size = 26;
+				size = 29;
 				break;
 			case Types.DATE:
 				size = 10;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
index ac58cae2..7918197d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
@@ -119,16 +119,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         public static final int DATE_MAXWIDTH           = 10;	// yyyy-mm-dd
         public static final int TIME_MAXWIDTH           = 8;	// hh:mm:ss
 
-        // I believe that the following is wrong. The format of java.sql.Timestamp.toString()
+        // The format of java.sql.Timestamp.toString()
         // is yyyy-mm-dd hh:mm:ss.fffffffff
-        public static final int TIMESTAMP_MAXWIDTH      = DRDAConstants.DRDA_TIMESTAMP_LENGTH;	// yyyy-mm-dd hh:mm:ss.ffffff
+        public static final int TIMESTAMP_MAXWIDTH      = DRDAConstants.DRDA_TIMESTAMP_LENGTH;	// yyyy-mm-dd hh:mm:ss.fffffffff
 
         // Scale DOES exist for time values.  For a TIMESTAMP value,
-        // it's 6 ('ffffff'); for a TIME value, it's 0 (because there
+        // it's 9 ('fffffffff'); for a TIME value, it's 0 (because there
         // are no fractional seconds).  Note that date values do
         // not have a scale.
         public static final int TIME_SCALE           = 0;
-        public static final int TIMESTAMP_SCALE      = 6;
+        public static final int TIMESTAMP_SCALE      = 9;
 
         /* These define all the type names for SQL92 and JDBC 
          * NOTE: boolean is SQL3
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index c65a7b29..349b20a0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
+import java.lang.reflect.Method;
 import java.io.IOException;
 import java.math.BigDecimal;
 //import java.lang.reflect.Constructor;
@@ -2185,7 +2186,7 @@ public void testGetTypeInfo() throws SQLException
                 precision = 8;
                 break;
             case Types.TIMESTAMP:
-                precision = 26;
+                precision = 29;
                 break;
                                 
             case Types.DECIMAL:
@@ -2363,7 +2364,7 @@ public void testGetTypeInfo() throws SQLException
             maxScale = 31; // Max Scale for Decimal & Numeric is 31: Derby-2262
             break;
             case Types.TIMESTAMP:
-                maxScale = 6;
+                maxScale = 9;
                 break;
             case Types.SMALLINT:
             case Types.INTEGER:
@@ -4524,7 +4525,7 @@ public void testGetProceduresGetProcColumns() throws Exception {
                 {null,"APP","GETPCTEST1","I","1","8","DOUBLE","52","8",null,"2","1",null,null,"8",null,null,"9","YES","genid","12","8"},                
                 {null,"APP","GETPCTEST1","K","1","91","DATE","10","6","0","10","1",null,null,"9","1",null,"10","YES","genid","12","9"},                
                 {null,"APP","GETPCTEST1","L","1","92","TIME","8","6","0","10","1",null,null,"9","2",null,"11","YES","genid","12","10"},                
-                {null,"APP","GETPCTEST1","T","1","93","TIMESTAMP","26","16","6","10","1",null,null,"9","3",null,"12","YES","genid","12","11"},                
+                {null,"APP","GETPCTEST1","T","1","93","TIMESTAMP","29","16","9","10","1",null,null,"9","3",null,"12","YES","genid","12","11"},                
                 {null,"APP","GETPCTEST2","PA","1","4","INTEGER","10","4","0","10","1",null,null,"4",null,null,"1","YES","genid","2","0"},
                 {null,"APP","GETPCTEST2","PB","1","-5","BIGINT","19","40","0","10","1",null,null,"-5",null,null,"2","YES","genid","2","1"},
                 {null,"APP","GETPCTEST3A","STRING1","1","12","VARCHAR","5","10",null,null,"1",null,null,"12",null,"10","1","YES","genid","2","0"}, 
@@ -4776,6 +4777,85 @@ private ResultSet getProcedureColumnsODBC(String catalog,
         return rss;        
     }
 
+    /**
+     * Test DatabaseMetaData.getFunctionColumns()
+     */
+    public void testGetFunctionColumns() throws Exception
+    {
+        // this method is supported in database meta data only from 10.2 onward
+
+        boolean supportsBoolean = true;
+        Version dataVersion = getDataVersion( getConnection() );
+        if ( dataVersion.compareTo( new Version( 10, 7, 0, 0 ) ) < 0 ) { supportsBoolean = false; }
+        
+        if ( dataVersion.compareTo( new Version( 10, 2, 0, 0 ) ) < 0 ) { return; }
+
+        DatabaseMetaData dmd = getDMD();
+        Statement s = createStatement();
+        getConnection().setAutoCommit(false);
+        
+        s.execute("create function f_gfc_1 (" +
+                "a VARCHAR(3), b NUMERIC, c SMALLINT, " +
+                "e CHAR(3), f INTEGER, g BIGINT, h FLOAT, i DOUBLE PRECISION, " +
+                "k DATE, l TIME, T TIMESTAMP ) returns int "+
+                "language java external name " +
+                "'org.apache.derbyTesting.BlahBlah.blah'" +
+        " parameter style java"); 
+
+        if ( supportsBoolean )
+        {
+            s.execute("create function f_gfc_2 ( a boolean) returns boolean "+
+                      "language java external name " +
+                      "'org.apache.derbyTesting.functionTests.BlahBlah.blah'" +
+                      " parameter style java");
+        }
+
+        // We have to use reflection to get the getFunctionColumns() method.
+        // That is because we compile this test to run on old versions of the
+        // vm whose DatabaseMetaData doesn't include this method, even though
+        // our actual drivers do.
+        Method gfcMethod = dmd.getClass().getMethod
+            ( "getFunctionColumns", new Class[] { String.class, String.class, String.class, String.class, } );
+        
+        ResultSet rs = (ResultSet) gfcMethod.invoke( dmd, new String[] { null, "%", "F_GFC_%", "%" } );
+
+        String[][] expRS = new String[][]
+            {
+                {null,"APP","F_GFC_1","","4","4","INTEGER","10","4","0","10","1",null,null,"0","YES","genid","11","-1"},                
+                {null,"APP","F_GFC_1","A","1","12","VARCHAR","3","6",null,null,"1",null,"6","1","YES","genid","11","0"},
+                {null,"APP","F_GFC_1","B","1","2","NUMERIC","5","14","0","10","1",null,null,"2","YES","genid","11","1"},
+                {null,"APP","F_GFC_1","C","1","5","SMALLINT","5","2","0","10","1",null,null,"3","YES","genid","11","2"},
+                {null,"APP","F_GFC_1","E","1","1","CHAR","3","6",null,null,"1",null,"6","4","YES","genid","11","3"},
+                {null,"APP","F_GFC_1","F","1","4","INTEGER","10","4","0","10","1",null,null,"5","YES","genid","11","4"},                
+                {null,"APP","F_GFC_1","G","1","-5","BIGINT","19","40","0","10","1",null,null,"6","YES","genid","11","5"},                
+                {null,"APP","F_GFC_1","H","1","8","DOUBLE","52","8",null,"2","1",null,null,"7","YES","genid","11","6"},                
+                {null,"APP","F_GFC_1","I","1","8","DOUBLE","52","8",null,"2","1",null,null,"8","YES","genid","11","7"},                
+                {null,"APP","F_GFC_1","K","1","91","DATE","10","6","0","10","1",null,null,"9","YES","genid","11","8"},                
+                {null,"APP","F_GFC_1","L","1","92","TIME","8","6","0","10","1",null,null,"10","YES","genid","11","9"},                
+                {null,"APP","F_GFC_1","T","1","93","TIMESTAMP","29","16","9","10","1",null,null,"11","YES","genid","11","10"},                
+            };
+        if ( supportsBoolean )
+        {
+            expRS = appendArray
+                (
+                 expRS,
+                 new String[][]
+                 {
+                     {null,"APP","F_GFC_2","","4","16","BOOLEAN","1","1",null,null,"1",null,null,"0","YES","genid","1","-1"},
+                     {null,"APP","F_GFC_2","A","1","16","BOOLEAN","1","1",null,null,"1",null,null,"1","YES","genid","1","0"},
+                 }
+                 );
+        }
+
+        int rowcount = 0;
+
+        assertResults( rs, expRS, true );
+        
+        if ( supportsBoolean ) { s.execute("drop function f_gfc_2"); }
+        s.execute("drop function f_gfc_1");
+        commit();
+    }
+
     public void testBugFixes() throws SQLException {
         
         Statement s = createStatement();
@@ -4918,4 +4998,42 @@ private Version getDataVersion( Connection conn )
         }
     }
 
+    /**
+     * Assert that the ResultSet returns the desired rows.
+     */
+    private void assertResults( ResultSet rs, String[][] rows, boolean trimResults )
+        throws Exception
+    {
+        int     actualColumnCount = rs.getMetaData().getColumnCount();
+        int     rowCount = rows.length;
+
+        for ( int i = 0; i < rowCount; i++ )
+        {
+            String[]    row = rows[ i ];
+            int             columnCount = row.length;
+
+            assertTrue( rs.next() );
+            assertEquals( columnCount, actualColumnCount );
+
+            for ( int j = 0; j < columnCount; j++ )
+            {
+                String  expectedValue =  row[ j ];
+                //println( "XXX (row, column ) ( " + i + ", " +  j + " ) should be " + expectedValue );
+                String  actualValue = null;
+                int         column = j+1;
+
+                actualValue = rs.getString( column );
+                if ( rs.wasNull() ) { actualValue = null; }
+
+                if ( (actualValue != null) && trimResults ) { actualValue = actualValue.trim(); }
+                
+                assertEquals( (expectedValue == null), rs.wasNull() );
+                
+                if ( expectedValue == null )    { assertNull( actualValue ); }
+                else if ( "genid".equals( expectedValue ) ) { assertTrue( actualValue.startsWith( "SQL" ) ); }
+                else { assertEquals(expectedValue, actualValue); }
+            }
+        }
+    }
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMetaDataJdbc30Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMetaDataJdbc30Test.java
index d467bbfe..65e5432c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMetaDataJdbc30Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMetaDataJdbc30Test.java
@@ -31,6 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.ResultSet;
 import java.sql.Statement;
 import java.sql.SQLException;
+import java.sql.Timestamp;
 import java.sql.Types;
 import java.math.BigDecimal;
 
@@ -645,6 +646,43 @@ public void testParameterMetadataWithCHARParameters () throws SQLException {
        		stmt.execute("DROP PROCEDURE PMDC");
             stmt.close();
 	}
+
+	/**
+         * test ParameterMetaData for Java procedures with TIMESTAMP parameters
+	 *
+	 * @exception SQLException if error occurs
+         */
+    public void testParameterMetadataWithTimestampParameters () throws SQLException
+    {
+        Statement stmt = createStatement();
+        stmt.execute("CREATE PROCEDURE PMDT(IN pmdI_1 TIMESTAMP, INOUT pmdI_2 TIMESTAMP, OUT pmdI_3 TIMESTAMP) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyString'");
+        CallableStatement cs = prepareCall("CALL PMDT(?, ?, ?)");
+        // parameter 1 is input only	
+        cs.setTimestamp(1, new Timestamp( 0L ) );
+        // parameter 2 is input and output
+        Object x = new Timestamp( 2L );
+        cs.setObject(2,x, Types.CHAR);
+        cs.registerOutParameter(2,Types.TIMESTAMP);
+        //parameter 3 is output only
+        cs.registerOutParameter(3,Types.TIMESTAMP);
+        //verify the meta data for the parameters
+        ParameterMetaData paramMetaData = cs.getParameterMetaData();
+        assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
+        
+        //expected values to be stored in a 2dim. array
+        String parameterMetaDataArray0 [][] = {
+            //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
+            {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_IN"},
+            {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_IN_OUT"},
+            {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_OUT"}};
+        
+        testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
+        
+        cs.close();
+        stmt.execute("DROP PROCEDURE PMDT");
+        stmt.close();
+    }
+    
 	/**
          *  test ParameterMetaData for Java procedures with DECIMAL parameters
 	 *
@@ -914,6 +952,13 @@ public static void dummy_numeric_Proc (BigDecimal[] max_param,BigDecimal[] min_p
         public static void dummyString (String in_param, String in_param2, String[] in_param3, String[] in_param4) {
         }
 	
+	/**
+     * Java method for procedure PMDT which tests ParameterMetaData for Java procedures 
+     * with TIMESTAMP parameters.  
+     */
+    public static void dummyString (Timestamp in_param1, Timestamp[] inout_param2, Timestamp[] out_param3) {}
+
+	
 	/**
          * Java method for procedure PMDD which tests ParameterMetaData for Java procedures
 	 * with DECIMAL parameters. 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java
index d77ab961..fb2de331 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java
@@ -329,12 +329,12 @@ public void testAllDataTypesMetaData()  throws SQLException
         
         // COLUMN 16 TIMESTAMP
         assertEquals("java.sql.Timestamp", rsmd.getColumnClassName(16));
-        assertEquals(26, rsmd.getColumnDisplaySize(16));
+        assertEquals(29, rsmd.getColumnDisplaySize(16));
         assertEquals("TIMESTAMPCOL", rsmd.getColumnLabel(16));
         assertEquals(java.sql.Types.TIMESTAMP,rsmd.getColumnType(16));
         assertEquals("TIMESTAMP", rsmd.getColumnTypeName(16));
-        assertEquals(26,rsmd.getPrecision(16));
-        assertEquals(6, rsmd.getScale(16));
+        assertEquals(29,rsmd.getPrecision(16));
+        assertEquals(9, rsmd.getScale(16));
 
         // COLUMN 17 BLOB
         assertEquals("java.sql.Blob", rsmd.getColumnClassName(17));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java
index a4e60fcf..98b189f8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java
@@ -200,7 +200,7 @@ public void testResultSetMetaData() throws SQLException {
         assertFalse(met.isCurrency(7));
         assertEquals(ResultSetMetaData.columnNullable, met.isNullable(7));
         assertFalse(met.isSigned(7));
-        assertEquals(26, met.getColumnDisplaySize(7));
+        assertEquals(29, met.getColumnDisplaySize(7));
         assertEquals("TS", met.getColumnLabel(7));
         assertEquals("TS", met.getColumnName(7));
         // beetle 5323
@@ -208,8 +208,8 @@ public void testResultSetMetaData() throws SQLException {
         assertEquals("APP", met.getSchemaName(7));
         assertEquals("", met.getCatalogName(7));
         assertEquals(java.sql.Types.TIMESTAMP, met.getColumnType(7));
-        assertEquals(26, met.getPrecision(7));
-        assertEquals(6, met.getScale(7));
+        assertEquals(29, met.getPrecision(7));
+        assertEquals(9, met.getScale(7));
         assertEquals("TIMESTAMP", met.getColumnTypeName(7));
         // DERBY-142 client incorrectly returns true. Enable on client
         // once DERBY-142 is fixed
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java
index 624e7486..bb9a7db6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java
@@ -339,7 +339,7 @@ public void testCompatibleDatatypesCombinations() throws Throwable
                 "COL1(datatype : TIME, precision : 8, scale : 0) null 15:30:20 15:30:20 null ",
                 "COL1(datatype : TIME, precision : 8, scale : 0) null 15:30:20 15:30:20 15:30:20 ",
                 "COL1(datatype : TIME, precision : 8, scale : 0) null 15:30:20 15:30:20 15:30:20 ",
-                "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
+                "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
                 "", "",
                 "COL1(datatype : BLOB, precision : 1024, scale : 0) null null null null "
         };
@@ -525,11 +525,11 @@ public void testAllDatatypesCombinations() throws  Throwable
                 "COL1(datatype : TIME, precision : 8, scale : 0) null 15:30:20 15:30:20 null ",
                 "COL1(datatype : TIME, precision : 8, scale : 0) null 15:30:20 15:30:20 null ",
                 "","","","","","","","","","","","","","","","",
-                "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
-                "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
+                "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
+                "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
                 "","","","","","","","","","","","","","","","",
-                "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
-                "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
+                "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
+                "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 2000-01-01 15:30:20.0 2000-01-01 15:30:20.0 null ",
                 "","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",
                 "COL1(datatype : BLOB, precision : 1024, scale : 0) null null null null ",
                 "COL1(datatype : BLOB, precision : 1024, scale : 0) null null null null "
@@ -681,9 +681,9 @@ public void testTimeStampCoalesce() throws Throwable
         s.executeUpdate("insert into tH values(null, null, null)");
         s.executeUpdate("insert into tH values(timestamp('1992-01-01 12:30:30'), '1992-01-01 12:30:31', '1992-01-01 12:30:32')");
 
-        String expectedValue = "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 1992-01-01 12:30:30.0 ";
-        String expectedValue1 = "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 1992-01-01 12:30:31.0 ";
-        String expectedValue2 = "COL1(datatype : TIMESTAMP, precision : 26, scale : 6) null 1992-01-01 12:30:32.0 ";
+        String expectedValue = "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 1992-01-01 12:30:30.0 ";
+        String expectedValue1 = "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 1992-01-01 12:30:31.0 ";
+        String expectedValue2 = "COL1(datatype : TIMESTAMP, precision : 29, scale : 9) null 1992-01-01 12:30:32.0 ";
 
         dumpRS(s.executeQuery("select coalesce(timestampCol,timestampCol) from tH"), expectedValue);
         dumpRS(s.executeQuery("select value(timestampCol,timestampCol) from tH"), expectedValue);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index 7581a580..42324bce 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -788,9 +788,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
             FUNCTION_RESULT_COLUMN,
             JDBC_TYPE_TIMESTAMP,
             "TIMESTAMP",
-            new Integer( 26 ),     // PRECISION
+            new Integer( 29 ),     // PRECISION
             new Integer( 16 ),         // LENGTH
-            new Integer( 6 ),       // SCALE
+            new Integer( 9 ),       // SCALE
             RADIX_INTEGER,    // RADIX
             ALLOWS_NULLS,
             EMPTY_REMARKS,
