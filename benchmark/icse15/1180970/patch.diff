diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 3ef4ec6f..3ff5451e 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -915,7 +915,7 @@ public long getExpectedCompactedFileSize(Iterable<SSTableReader> sstables)
         long expectedFileSize = 0;
         for (SSTableReader sstable : sstables)
         {
-            long size = sstable.length();
+            long size = sstable.onDiskLength();
             expectedFileSize = expectedFileSize + size;
         }
         return expectedFileSize;
@@ -930,9 +930,9 @@ public SSTableReader getMaxSizeFile(Iterable<SSTableReader> sstables)
         SSTableReader maxFile = null;
         for (SSTableReader sstable : sstables)
         {
-            if (sstable.length() > maxSize)
+            if (sstable.onDiskLength() > maxSize)
             {
-                maxSize = sstable.length();
+                maxSize = sstable.onDiskLength();
                 maxFile = sstable;
             }
         }
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/CompactionManager.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/CompactionManager.java
index 796f79c4..020c6ff2 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/CompactionManager.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/CompactionManager.java
@@ -472,7 +472,7 @@ private void scrubOne(ColumnFamilyStore cfs, SSTableReader sstable) throws IOExc
         boolean isCommutative = cfs.metadata.getDefaultValidator().isCommutative();
 
         // Calculate the expected compacted filesize
-        String compactionFileLocation = cfs.table.getDataFileLocation(sstable.length());
+        String compactionFileLocation = cfs.table.getDataFileLocation(sstable.onDiskLength());
         if (compactionFileLocation == null)
             throw new IOException("disk full");
         int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(),
@@ -765,8 +765,8 @@ private void doCleanupCompaction(ColumnFamilyStore cfs, Collection<SSTableReader
 
                 String format = "Cleaned up to %s.  %,d to %,d (~%d%% of original) bytes for %,d keys.  Time: %,dms.";
                 long dTime = System.currentTimeMillis() - startTime;
-                long startsize = sstable.length();
-                long endsize = newSstable.length();
+                long startsize = sstable.onDiskLength();
+                long endsize = newSstable.onDiskLength();
                 double ratio = (double)endsize / (double)startsize;
                 logger.info(String.format(format, writer.getFilename(), startsize, endsize, (int)(ratio*100), totalkeysWritten, dTime));
             }
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java
index b9909ec7..e8c5c6ff 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java
@@ -100,7 +100,7 @@ public int getEstimatedRemainingTasks()
     {
         List<Pair<SSTableReader, Long>> tableLengthPairs = new ArrayList<Pair<SSTableReader, Long>>();
         for(SSTableReader table: collection)
-            tableLengthPairs.add(new Pair<SSTableReader, Long>(table, table.length()));
+            tableLengthPairs.add(new Pair<SSTableReader, Long>(table, table.onDiskLength()));
         return tableLengthPairs;
     }
 
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTable.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTable.java
index 5b7576b8..56b00a65 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTable.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTable.java
@@ -257,7 +257,7 @@ public static long getTotalBytes(Iterable<SSTableReader> sstables)
         long sum = 0;
         for (SSTableReader sstable : sstables)
         {
-            sum += sstable.length();
+            sum += sstable.onDiskLength();
         }
         return sum;
     }
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTableReader.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
index 5e7b5ad3..934b2b87 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
@@ -555,7 +555,7 @@ public void remove()
             long right = getPosition(new DecoratedKey(range.right, null), Operator.GT);
             if (right == -1 || Range.isWrapAround(range.left, range.right))
                 // right is past the end of the file, or it wraps
-                right = length();
+                right = uncompressedLength();
             if (left == right)
                 // empty range
                 continue;
@@ -669,13 +669,25 @@ public long getPosition(DecoratedKey decoratedKey, Operator op)
     }
 
     /**
-     * @return The length in bytes of the data file for this SSTable.
+     * @return The length in bytes of the data for this SSTable. For
+     * compressed files, this is not the same thing as the on disk size (see
+     * onDiskLength())
      */
-    public long length()
+    public long uncompressedLength()
     {
         return dfile.length;
     }
 
+    /**
+     * @return The length in bytes of the on disk size for this SSTable. For
+     * compressed files, this is not the same thing as the data length (see
+     * length())
+     */
+    public long onDiskLength()
+    {
+        return dfile.onDiskLength;
+    }
+
     public boolean acquireReference()
     {
         while (true)
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/CompressedSegmentedFile.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/CompressedSegmentedFile.java
index 76539d3e..4e0e7d8e 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/CompressedSegmentedFile.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/CompressedSegmentedFile.java
@@ -30,7 +30,7 @@
 
     public CompressedSegmentedFile(String path, CompressionMetadata metadata)
     {
-        super(path, metadata.dataLength);
+        super(path, metadata.dataLength, metadata.compressedFileLength);
         this.metadata = metadata;
     }
 
diff --git a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/SegmentedFile.java b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/SegmentedFile.java
index 322e7426..602909fb 100644
--- a/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/SegmentedFile.java
+++ b/cassandra/branches/cassandra-1.0.0/src/java/org/apache/cassandra/io/util/SegmentedFile.java
@@ -42,13 +42,23 @@
     public final String path;
     public final long length;
 
+    // This differs from length for compressed files (but we still need length for
+    // SegmentIterator because offsets in the file are relative to the uncompressed size)
+    public final long onDiskLength;
+
     /**
      * Use getBuilder to get a Builder to construct a SegmentedFile.
      */
     SegmentedFile(String path, long length)
+    {
+        this(path, length, length);
+    }
+
+    protected SegmentedFile(String path, long length, long onDiskLength)
     {
         this.path = path;
         this.length = length;
+        this.onDiskLength = onDiskLength;
     }
 
     /**
