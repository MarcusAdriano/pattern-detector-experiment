diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
index 6b4b489d..65bc4ffc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
@@ -102,13 +102,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	void setTopModule(Object instance) {
 		synchronized (this) {
-			for (int i = 0; i < moduleInstances.size(); i++) {
-				ModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);
-				if (module.getInstance() == instance) {
+            ModuleInstance module = findModuleInstance(instance);
+            if (module != null) {
 					topModule = module;
 					notifyAll();
-					break;
-				}
 			}
 
 			// now add an additional entry into the hashtable
@@ -223,6 +220,26 @@ synchronized Object findModule(ProtocolKey key, boolean findOnly, Properties pro
 		return null;
 	}
 
+	/**
+     * Find a {@code ModuleInstance} object whose {@code getInstance()} method
+     * returns the object specified by the {@code instance} parameter.
+     *
+     * @param instance the instance to look for
+     * @return a {@code ModuleInstance} object, or {@code null} if no match
+     * was found
+     */
+    private ModuleInstance findModuleInstance(Object instance) {
+        synchronized (moduleInstances) {
+            for (int i = 0; i < moduleInstances.size(); i++) {
+                ModuleInstance module = (ModuleInstance) moduleInstances.get(i);
+                if (module.getInstance() == instance) {
+                    return module;
+                }
+            }
+        }
+        return null;
+    }
+
 	/**
 		Boot a module, performs three steps.
 
@@ -394,14 +411,7 @@ private boolean addToProtocol(ProtocolKey key, ModuleInstance module) {
 	}
 
 	boolean inService(Object instance) {
-
-		for (int i = 0; i < moduleInstances.size(); i++) {
-
-			ModuleInstance mi = (ModuleInstance) moduleInstances.elementAt(i);
-			if (mi.getInstance() == instance)
-				return true;
-		}
-		return false;
+        return findModuleInstance(instance) != null;
 	}
 
 	public ProtocolKey getKey() {
