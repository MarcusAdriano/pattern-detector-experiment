diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index e2ced831..bc6d421b 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -947,6 +947,7 @@ public final void setObject(int parameterIndex, Object x) throws SQLException {
 		// for these calls is consistent with the matching setXXX() value.
 
 		// These are the supported setObject conversions from JDBC 3.0 table B5
+		// Byte and Short were added to the table in JDBC 4.0.
 
 		if (x instanceof String) {
 			setString(parameterIndex, (String) x);
@@ -957,6 +958,14 @@ public final void setObject(int parameterIndex, Object x) throws SQLException {
 			setBoolean(parameterIndex, ((Boolean) x).booleanValue());
 			return;
 		}
+		if (x instanceof Byte) {
+			setByte(parameterIndex, ((Byte) x).byteValue());
+			return;
+		}
+		if (x instanceof Short) {
+			setShort(parameterIndex, ((Short) x).shortValue());
+			return;
+		}
 		if (x instanceof Integer) {
 			setInt(parameterIndex, ((Integer) x).intValue());
 			return;
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
index ff843ecc..45ee8252 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
@@ -240,6 +240,11 @@ from the Java types (e.g. int as setInt) to the JDBC SQL Type (Types.INT).
 /*10 Timestamp */       { _, _, _, _, _, _, _, _, _, _, _, X, X, X, _, _, _, X, X, X, _, _},
 /*11 Blob   */          { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X},
 /*12 Clob */            { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, _},
+
+// Byte and Short were added to this table in JDBC 4.0. (See DERBY-1500.)
+
+/*13 Byte */            { X, X, X, X, X, X, X, X, X, X, X, X, X, X, _, _, _, _, _, _, _, _},
+/*14 Short */           { X, X, X, X, X, X, X, X, X, X, X, X, X, X, _, _, _, _, _, _, _, _},
 	};
 
 
@@ -2491,9 +2496,17 @@ private static void setXXX(Statement s, PreparedStatement psi, PreparedStatement
 		System.out.println(worked ? " FAIL " : (" OK " + sqleResult.getMessage()));
 		}
 
+
 		setXXX_setObject(s, psi, psq, type, "46", "java.lang.String", 0, executeBatchTests);
 		setXXX_setObject(s, psi, psq, type, BigDecimal.valueOf(72L), "java.math.BigDecimal", 1, executeBatchTests);
 		setXXX_setObject(s, psi, psq, type, Boolean.TRUE, "java.lang.Boolean", 2, executeBatchTests);
+
+		// DERBY-1500: setObject() should work for Byte and Short too.
+		setXXX_setObject(s, psi, psq, type, new Byte((byte) 2),
+						 "java.lang.Byte", 13,executeBatchTests);
+		setXXX_setObject(s, psi, psq, type, new Short((short) 11),
+						 "java.lang.Short", 14,executeBatchTests);
+
 		setXXX_setObject(s, psi, psq, type, new Integer(74), "java.lang.Integer", 3, executeBatchTests);
 		setXXX_setObject(s, psi, psq, type, new Long(79), "java.lang.Long", 4, executeBatchTests);
 		setXXX_setObject(s, psi, psq, type, new Float(76.3f), "java.lang.Float", 5, executeBatchTests);
