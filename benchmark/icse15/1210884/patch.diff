diff --git a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/io/compress/CompressionParameters.java b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/io/compress/CompressionParameters.java
index 554fe24c..eb4a9ec4 100644
--- a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/io/compress/CompressionParameters.java
+++ b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/io/compress/CompressionParameters.java
@@ -35,7 +35,7 @@
     public final static int DEFAULT_CHUNK_LENGTH = 65536;
 
     public static final String SSTABLE_COMPRESSION = "sstable_compression";
-    public static final String CHUNK_LENGTH = "chunk_length_kb";
+    public static final String CHUNK_LENGTH_KB = "chunk_length_kb";
 
     public final ICompressor sstableCompressor;
     private final Integer chunkLength;
@@ -45,9 +45,9 @@ public static CompressionParameters create(Map<? extends CharSequence, ? extends
     {
         Map<String, String> options = copyOptions(opts);
         String sstableCompressionClass = options.get(SSTABLE_COMPRESSION);
-        String chunkLength = options.get(CHUNK_LENGTH);
+        String chunkLength = options.get(CHUNK_LENGTH_KB);
         options.remove(SSTABLE_COMPRESSION);
-        options.remove(CHUNK_LENGTH);
+        options.remove(CHUNK_LENGTH_KB);
         CompressionParameters cp = new CompressionParameters(sstableCompressionClass, parseChunkLength(chunkLength), options);
         cp.validateChunkLength();
         return cp;
@@ -75,7 +75,6 @@ public int chunkLength()
         return chunkLength == null ? DEFAULT_CHUNK_LENGTH : chunkLength;
     }
 
-
     private static Class<? extends ICompressor> parseCompressorClass(String className) throws ConfigurationException
     {
         if (className == null)
@@ -144,18 +143,18 @@ private static ICompressor createCompressor(Class<? extends ICompressor> compres
     /**
      * Parse the chunk length (in KB) and returns it as bytes.
      */
-    private static Integer parseChunkLength(String chLength) throws ConfigurationException
+    private static Integer parseChunkLength(String chLengthKB) throws ConfigurationException
     {
-        if (chLength == null)
+        if (chLengthKB == null)
             return null;
 
         try
         {
-            return 1024 * Integer.parseInt(chLength);
+            return 1024 * Integer.parseInt(chLengthKB);
         }
         catch (NumberFormatException e)
         {
-            throw new ConfigurationException("Invalid value for " + CHUNK_LENGTH, e);
+            throw new ConfigurationException("Invalid value for " + CHUNK_LENGTH_KB, e);
         }
     }
 
@@ -168,7 +167,7 @@ private void validateChunkLength() throws ConfigurationException
             return; // chunk length not set, this is fine, default will be used
 
         if (chunkLength <= 0)
-            throw new ConfigurationException("Invalid negative or null " + CHUNK_LENGTH);
+            throw new ConfigurationException("Invalid negative or null " + CHUNK_LENGTH_KB);
 
         int c = chunkLength;
         boolean found = false;
@@ -177,7 +176,7 @@ private void validateChunkLength() throws ConfigurationException
             if ((c & 0x01) != 0)
             {
                 if (found)
-                    throw new ConfigurationException(CHUNK_LENGTH + " must be a power of 2");
+                    throw new ConfigurationException(CHUNK_LENGTH_KB + " must be a power of 2");
                 else
                     found = true;
             }
@@ -196,7 +195,7 @@ private void validateChunkLength() throws ConfigurationException
 
         options.put(new Utf8(SSTABLE_COMPRESSION), new Utf8(sstableCompressor.getClass().getName()));
         if (chunkLength != null)
-            options.put(new Utf8(CHUNK_LENGTH), new Utf8(chunkLength.toString()));
+            options.put(new Utf8(CHUNK_LENGTH_KB), new Utf8(chunkLengthInKB()));
         return options;
     }
 
@@ -208,10 +207,15 @@ private void validateChunkLength() throws ConfigurationException
 
         options.put(SSTABLE_COMPRESSION, sstableCompressor.getClass().getName());
         if (chunkLength != null)
-            options.put(CHUNK_LENGTH, chunkLength.toString());
+            options.put(CHUNK_LENGTH_KB, chunkLengthInKB());
         return options;
     }
 
+    private String chunkLengthInKB()
+    {
+        return String.valueOf(chunkLength() / 1024);
+    }
+
     @Override
     public boolean equals(Object obj)
     {
