diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
index 6a525345..21354b47 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -175,7 +175,7 @@ protected Weight createWeight(Searcher searcher) {
   /** Prints a user-readable version of this query. */
   public String toString(String field) {
     StringBuffer buffer = new StringBuffer();
-    if (getBoost() > 1.0) {
+    if (getBoost() != 1.0) {
       buffer.append("(");
     }
 
@@ -198,7 +198,7 @@ else if (c.required)
 	buffer.append(" ");
     }
 
-    if (getBoost() > 1.0) {
+    if (getBoost() != 1.0) {
       buffer.append(")^");
       buffer.append(getBoost());
     }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/Hits.java b/lucene/java/trunk/src/java/org/apache/lucene/search/Hits.java
index 54290ced..27d4deb7 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/Hits.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/Hits.java
@@ -95,8 +95,8 @@ private final void getMoreDocs(int min) throws IOException {
     ScoreDoc[] scoreDocs = topDocs.scoreDocs;
 
     float scoreNorm = 1.0f;
-//     if (length > 0 && scoreDocs[0].score > 1.0f)
-//       scoreNorm = 1.0f / scoreDocs[0].score;
+    if (length > 0 && scoreDocs[0].score > 1.0f)
+      scoreNorm = 1.0f / scoreDocs[0].score;
 
     int end = scoreDocs.length < length ? scoreDocs.length : length;
     for (int i = hitDocs.size(); i < end; i++)
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/java/trunk/src/java/org/apache/lucene/search/IndexSearcher.java
index e511f78c..bc52c19e 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -189,7 +189,6 @@ public final void collect(int doc, float score) {
     scorer.score(collector, reader.maxDoc());
   }
 
-  /** */
   public Query rewrite(Query original) throws IOException {
     Query query = original;
     for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;
@@ -199,7 +198,6 @@ public Query rewrite(Query original) throws IOException {
     return query;
   }
 
-  /** */
   public Explanation explain(Query query, int doc) throws IOException {
     return query.weight(this).scorer(reader).explain(doc);
   }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/MultiSearcher.java b/lucene/java/trunk/src/java/org/apache/lucene/search/MultiSearcher.java
index 5000832b..fdc26b72 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/MultiSearcher.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/MultiSearcher.java
@@ -204,7 +204,6 @@ public void collect(int doc, float score) {
     }
   }
   
-  /** */
   public Query rewrite(Query original) throws IOException {
     Query[] queries = new Query[searchables.length];
     for (int i = 0; i < searchables.length; i++) {
@@ -213,8 +212,6 @@ public Query rewrite(Query original) throws IOException {
     return original.combine(queries);
   }
 
-
-  /** */
   public Explanation explain(Query query, int doc) throws IOException {
     int i = subSearcher(doc);			  // find searcher index
     return searchables[i].explain(query,doc-starts[i]); // dispatch to searcher
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/Searchable.java b/lucene/java/trunk/src/java/org/apache/lucene/search/Searchable.java
index bf1ffb0b..7808d887 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/Searchable.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/Searchable.java
@@ -115,10 +115,17 @@ void search(Query query, Filter filter, HitCollector results)
    */
   Document doc(int i) throws IOException;
 
-  /** */
+  /** Expert: called to re-write queries into primitive queries. */
   Query rewrite(Query query) throws IOException;
 
-  /** */
+  /** Returns an Explanation that describes how <code>doc</code> scored against
+   * <code>query</code>.
+   *
+   * <p>This is intended to be used in developing Similarity implementations,
+   * and, for good performance, should not be displayed with every hit.
+   * Computing an explanation is as expensive as executing the query over the
+   * entire index.
+   */
   Explanation explain(Query query, int doc) throws IOException;
 
 
