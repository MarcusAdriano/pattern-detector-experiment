diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java
index 1f5e8a32..808c3c2f 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java
@@ -1,6 +1,5 @@
 package org.apache.lucene.search.payloads;
 
-import org.apache.lucene.search.Explanation;
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -36,14 +35,6 @@ public float currentScore(int docId, String field, int start, int end, int numPa
   public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {
     return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;
   }
-  @Override
-  public Explanation explain(int doc, int numPayloadsSeen, float payloadScore) {
-      Explanation payloadBoost = new Explanation();
-      float avgPayloadScore = (numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1);
-      payloadBoost.setValue(avgPayloadScore);
-      payloadBoost.setDescription("AveragePayloadFunction(...)");
-      return payloadBoost;
-  } 
 
   @Override
   public int hashCode() {
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
index c113fbca..b868e3bb 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
@@ -1,6 +1,5 @@
 package org.apache.lucene.search.payloads;
 
-import org.apache.lucene.search.Explanation;
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -40,14 +39,6 @@ public float docScore(int docId, String field, int numPayloadsSeen, float payloa
     return numPayloadsSeen > 0 ? payloadScore : 1;
   }
   
-  @Override
-  public Explanation explain(int doc, int numPayloadsSeen, float payloadScore) {
-	    Explanation expl = new Explanation();
-	    float maxPayloadScore = (numPayloadsSeen > 0 ? payloadScore : 1);
-	    expl.setValue(maxPayloadScore);
-	    expl.setDescription("MaxPayloadFunction(...)");
-	    return expl;
-	  } 
   @Override
   public int hashCode() {
     final int prime = 31;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
index 56b42075..00a61681 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
@@ -1,7 +1,6 @@
   Merged /lucene/dev/trunk/lucene/CHANGES.txt:r1365837
 package org.apache.lucene.search.payloads;
 
-import org.apache.lucene.search.Explanation;
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -39,14 +38,6 @@ public float docScore(int docId, String field, int numPayloadsSeen, float payloa
     return numPayloadsSeen > 0 ? payloadScore : 1;
   }
   
-  @Override
-  public Explanation explain(int doc, int numPayloadsSeen, float payloadScore) {
-	  Explanation expl = new Explanation();
-	  float minPayloadScore = (numPayloadsSeen > 0 ? payloadScore : 1);
-	  expl.setValue(minPayloadScore);
-	  expl.setDescription("MinPayloadFunction(...)");
-	  return expl;
-  }  
   @Override
   public int hashCode() {
     final int prime = 31;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadFunction.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadFunction.java
index cb34a0b6..976ed09f 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadFunction.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadFunction.java
@@ -55,10 +55,10 @@
    */
   public abstract float docScore(int docId, String field, int numPayloadsSeen, float payloadScore);
   
-  public Explanation explain(int docId, int numPayloadsSeen, float payloadScore){
+  public Explanation explain(int docId, String field, int numPayloadsSeen, float payloadScore){
 	  Explanation result = new Explanation();
-	  result.setDescription("Unimpl Payload Function Explain");
-	  result.setValue(1);
+	  result.setDescription(getClass().getSimpleName() + ".docScore()");
+	  result.setValue(docScore(docId, field, numPayloadsSeen, payloadScore));
 	  return result;
   };
   
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
index fe1433b9..5a94f088 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
@@ -167,8 +167,9 @@ public Explanation explain(AtomicReaderContext context, int doc) throws IOExcept
           Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, "phraseFreq=" + freq));
           expl.addDetail(scoreExplanation);
           expl.setValue(scoreExplanation.getValue());
+          String field = ((SpanQuery)getQuery()).getField();
           // now the payloads part
-          Explanation payloadExpl = function.explain(doc, scorer.payloadsSeen, scorer.payloadScore);
+          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);
           // combined
           ComplexExplanation result = new ComplexExplanation();
           result.addDetail(expl);
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
index 30d5bacf..1ac4dd4a 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
@@ -28,6 +28,7 @@
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.similarities.Similarity.SloppySimScorer;
+import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.TermSpans;
 import org.apache.lucene.search.spans.SpanTermQuery;
 import org.apache.lucene.search.spans.SpanWeight;
@@ -190,7 +191,8 @@ public Explanation explain(AtomicReaderContext context, int doc) throws IOExcept
           // whether to load the payload or not
           // GSI: I suppose we could toString the payload, but I don't think that
           // would be a good idea
-          Explanation payloadExpl = function.explain(doc, scorer.payloadsSeen, scorer.payloadScore);
+          String field = ((SpanQuery)getQuery()).getField();
+          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);
           payloadExpl.setValue(scorer.getPayloadScore());
           // combined
           ComplexExplanation result = new ComplexExplanation();
