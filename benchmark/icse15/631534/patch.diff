diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java
index 7ade82c1..faabe2a9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java
@@ -274,9 +274,10 @@ public void startFailover() throws StandardException {
         } else if (ack.getType() == ReplicationMessage.TYPE_ACK) {
             //An exception is thrown to indicate the successful completion 
             //of failover. Also the AsynchronousLogShipper thread is terminated.
+            //The socket connection that is obtained needs to be torn down.
             //The exception thrown is of Database Severity, this shuts
             //down the master database.
-            logShipper.stopLogShipment();
+            teardownNetwork();
             throw StandardException.newException
                     (SQLState.REPLICATION_FAILOVER_SUCCESSFUL, dbname);  
         } else {
@@ -299,6 +300,7 @@ public void startFailover() throws StandardException {
      */
     private void handleFailoverFailure(Throwable t) 
     throws StandardException {
+        teardownNetwork();
         rawStoreFactory.unfreeze();
         if (t != null) {
             throw StandardException.newException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java
index d0ecd407..13915bfe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/net/ReplicationMessageTransmit.java
@@ -119,6 +119,13 @@ public Object run() throws IOException {
             }
         });
         
+        //The reads on the InputStreams obtained from the socket on the
+        //transmitter should not hang indefinitely. Use the timeout
+        //used for the connection establishment here to ensure that the
+        //reads timeout after the timeout period mentioned for the
+        //connection.
+        s.setSoTimeout(timeout_);
+        
         socketConn = new SocketConnection(s);
         
         //send the initiate message and receive acknowledgment
