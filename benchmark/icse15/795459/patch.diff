diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java
index 4ae077b6..b1b3dd45 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java
@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
+import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
@@ -41,6 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.impl.sql.execute.ColumnInfo;
 import org.apache.derby.impl.sql.execute.ConstraintConstantAction;
+import org.apache.derby.impl.sql.execute.CreateConstraintConstantAction;
 
 /**
  * A AlterTableNode represents a DDL statement that alters a table.
@@ -511,6 +513,31 @@ private void	prepConstantAction() throws StandardException
 
 			tableElementList.genConstraintActions(false, conActions, getRelativeName(), schemaDescriptor,
 												  getDataDictionary());
+
+			for (int conIndex = 0; conIndex < conActions.length; conIndex++)
+			{
+				ConstraintConstantAction cca = conActions[conIndex];
+
+				if (cca instanceof CreateConstraintConstantAction)
+				{
+					int constraintType = cca.getConstraintType();
+					if (constraintType == DataDictionary.PRIMARYKEY_CONSTRAINT)
+					{
+						DataDictionary dd = getDataDictionary();
+						// Check to see if a constraint of the same type 
+						// already exists
+						ConstraintDescriptorList cdl = 
+                                dd.getConstraintDescriptors(baseTable);
+
+						if (cdl.getPrimaryKey() != null)
+						{
+							throw StandardException.newException(
+                                    SQLState.LANG_ADD_PRIMARY_KEY_FAILED1, 
+                                    baseTable.getQualifiedName());
+						}
+					}
+				}
+			}
 		}
 	}
 	  
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java
index a6490f27..0bae82aa 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java
@@ -113,6 +113,7 @@ private void checkWarning(Statement st, String expectedWarning)
     public void testAddColumn() throws Exception {
         Statement st = createStatement();
         createTestObjects(st);
+        conn.commit();
 
         // add column negative tests alter a non-existing table
         assertStatementError("42Y55", st,
@@ -202,18 +203,6 @@ public void testAddColumn() throws Exception {
             JDBC.assertFullResultSet(rs, new String[][]{{"1"}, {"2"}});
         }
 
-        // DERBY-4244 (START)
-        // Without these lines, this test fails a few lines later when
-        // it makes yet another attempt to add column c2 to table t0. This
-        // bug is logged as DERBY-4244. When that problem is fixed, this
-        // section could be removed.
-        conn.commit();
-        st.executeUpdate("drop table t0");
-        st.executeUpdate(
-                "create table t0(c1 int not null constraint p1 primary key)");
-        conn.commit();
-        // DERBY-4244 (END)
-
         // add non-nullable column to 0 row table and verify
         st.executeUpdate("alter table t0 add column c2 int not null default 0");
         st.executeUpdate("insert into t0 values (1, default)");
