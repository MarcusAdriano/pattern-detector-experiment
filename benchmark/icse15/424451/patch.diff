diff --git a/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 38b36c6f..6d2c7c1d 100644
--- a/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -55,7 +55,7 @@
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
 import org.apache.derby.iapi.tools.i18n.LocalizedResource;
-import org.apache.derby.impl.jdbc.EmbedParameterSetMetaData;
+import org.apache.derby.iapi.jdbc.EngineParameterMetaData;
 import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
 import org.apache.derby.impl.jdbc.EmbedSQLException;
 import org.apache.derby.impl.jdbc.EmbedStatement;
@@ -3760,7 +3760,6 @@ private void writeSQLCINRD(DRDAStatement stmt) throws DRDAProtocolException,SQLE
 	private void writeSQLRSLRD(DRDAStatement stmt) throws DRDAProtocolException,SQLException
 	{
 
-		EmbedPreparedStatement ps = (EmbedPreparedStatement) stmt.getPreparedStatement();
 		int numResults = stmt.getNumResultSets();
 
 		writer.createDssObject();
@@ -3832,7 +3831,7 @@ private void parseSQLDTA_work(DRDAStatement stmt) throws DRDAProtocolException,S
 		String strVal;
 		PreparedStatement ps = stmt.getPreparedStatement();
 		int codePoint;
-		EmbedParameterSetMetaData pmeta = null;
+		EngineParameterMetaData pmeta = null;
 		Vector paramDrdaTypes = new Vector();
 		Vector paramLens = new Vector();
 		ArrayList paramExtPositions = null;
@@ -3978,7 +3977,7 @@ private int getByteOrder()
 	 * @exception DRDAProtocolException, SQLException
 	 */
 	private ArrayList readAndSetParams(int i, DRDAStatement stmt, int
-									   drdaType, EmbedParameterSetMetaData pmeta,
+									   drdaType, EngineParameterMetaData pmeta,
 									   ArrayList paramExtPositions,
 									   int paramLenNumBytes)
 				throws DRDAProtocolException, SQLException
@@ -5589,7 +5588,7 @@ private void writeSQLDARD(DRDAStatement stmt, boolean rtnOutput, SQLException e)
 	{
 		PreparedStatement ps = stmt.getPreparedStatement();
 		ResultSetMetaData rsmeta = ps.getMetaData();
-		EmbedParameterSetMetaData pmeta = stmt.getParameterMetaData();
+		EngineParameterMetaData pmeta = stmt.getParameterMetaData();
 		int numElems = 0;
 		if (e == null || e instanceof SQLWarning)
 		{
@@ -5640,7 +5639,7 @@ private void writeQRYDSC(DRDAStatement stmt, boolean FDODSConly)
 
 		ResultSet rs = null;
 		ResultSetMetaData rsmeta = null;
-		EmbedParameterSetMetaData pmeta = null;
+		EngineParameterMetaData pmeta = null;
 		if (!stmt.needsToSendParamData)
 			rs = stmt.getResultSet();
 		if (rs == null)		// this is a CallableStatement, use parameter meta data
@@ -5735,7 +5734,7 @@ private void writeQRYDSC(DRDAStatement stmt, boolean FDODSConly)
 	 * @exception DRDAProtocolException, SQLException
 	 */
 	private void writeSQLDTAGRP(DRDAStatement stmt, ResultSetMetaData rsmeta, 
-								EmbedParameterSetMetaData pmeta,
+								EngineParameterMetaData pmeta,
 								int colStart, int colEnd, boolean first)
 		throws DRDAProtocolException, SQLException
 	{
@@ -6436,7 +6435,7 @@ private boolean positionCursor(DRDAStatement stmt, ResultSet rs)
 	 *
 	 * @exception DRDAProtocolException, SQLException
 	 */
-	private void writeSQLDAGRP(ResultSetMetaData rsmeta, EmbedParameterSetMetaData pmeta, int elemNum, boolean rtnOutput)
+	private void writeSQLDAGRP(ResultSetMetaData rsmeta, EngineParameterMetaData pmeta, int elemNum, boolean rtnOutput)
 		throws DRDAProtocolException, SQLException
 	{
 		//jdbc uses offset of 1
@@ -6571,14 +6570,14 @@ private void writeVCMorVCS(String s)
 	}
 
   
-	private void writeSQLUDTGRP(ResultSetMetaData rsmeta, EmbedParameterSetMetaData pmeta, int jdbcElemNum, boolean rtnOutput)
+	private void writeSQLUDTGRP(ResultSetMetaData rsmeta, EngineParameterMetaData pmeta, int jdbcElemNum, boolean rtnOutput)
 		throws DRDAProtocolException,SQLException
 	{
 		writer.writeByte(CodePoint.NULLDATA);
 
 	}
 
-	private void writeSQLDOPTGRP(ResultSetMetaData rsmeta, EmbedParameterSetMetaData pmeta, int jdbcElemNum, boolean rtnOutput)
+	private void writeSQLDOPTGRP(ResultSetMetaData rsmeta, EngineParameterMetaData pmeta, int jdbcElemNum, boolean rtnOutput)
 		throws DRDAProtocolException,SQLException
 	{
 
@@ -6598,7 +6597,7 @@ private void writeSQLDOPTGRP(ResultSetMetaData rsmeta, EmbedParameterSetMetaData
 	}
 
 
-	private void writeSQLDXGRP(ResultSetMetaData rsmeta, EmbedParameterSetMetaData pmeta, int jdbcElemNum, boolean rtnOutput)
+	private void writeSQLDXGRP(ResultSetMetaData rsmeta, EngineParameterMetaData pmeta, int jdbcElemNum, boolean rtnOutput)
 		throws DRDAProtocolException,SQLException
 	{
 		// Null indicator indicates we have data
diff --git a/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAStatement.java b/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
index 7b0326ba..50a02c0a 100644
--- a/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
+++ b/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
@@ -39,10 +39,11 @@
 import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
 import org.apache.derby.iapi.jdbc.EngineConnection;
 import org.apache.derby.iapi.jdbc.EngineStatement;
+import org.apache.derby.iapi.jdbc.EnginePreparedStatement;
+import org.apache.derby.iapi.jdbc.EngineParameterMetaData;
 import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.sql.execute.ExecutionContext;
 import org.apache.derby.iapi.util.StringUtil;
-import org.apache.derby.impl.jdbc.EmbedParameterSetMetaData;
 import org.apache.derby.impl.jdbc.Util;
 
 /**
@@ -81,7 +82,7 @@
 	protected byte [] rslsetflg;		// Result Set Flags
 	protected int maxrslcnt;			// Maximum Result set count
 	protected PreparedStatement ps;     // Prepared statement
-	protected EmbedParameterSetMetaData stmtPmeta; // param metadata
+	protected EngineParameterMetaData stmtPmeta; // param metadata
 	protected boolean isCall;
 	protected String procName;			// callable statement's method name
 	private   int[] outputTypes;		// jdbc type for output parameter or NOT_OUTPUT_PARAM
@@ -535,10 +536,6 @@ protected PreparedStatement prepare(String sqlStmt)   throws SQLException
 	 */
 	protected PreparedStatement getPreparedStatement() throws SQLException
 	{
-		if (ps instanceof BrokeredPreparedStatement)
-			return (PreparedStatement)(
-						   ((BrokeredPreparedStatement) ps).getStatement());
-		else
 			return ps;
 	}
 
@@ -1152,7 +1149,7 @@ protected int getParamPrecision(int index) throws SQLException
 	{
 		if (ps != null && ps instanceof CallableStatement)
 		{
-			EmbedParameterSetMetaData pmeta = 	getParameterMetaData();
+			EngineParameterMetaData pmeta = 	getParameterMetaData();
 
 			return Math.min(pmeta.getPrecision(index),
 							FdocaConstants.NUMERIC_MAX_PRECISION);
@@ -1173,7 +1170,7 @@ protected int getParamScale(int index) throws SQLException
 	{
 		if (ps != null && ps instanceof CallableStatement)
 		{
-			EmbedParameterSetMetaData pmeta = 	getParameterMetaData();
+			EngineParameterMetaData pmeta = 	getParameterMetaData();
 			return Math.min(pmeta.getScale(index),FdocaConstants.NUMERIC_MAX_PRECISION);
 		}
 		else 
@@ -1335,7 +1332,7 @@ private boolean isCallableSQL(String sql)
 
 	private void setupCallableStatementParams(CallableStatement cs) throws SQLException
 	{
-		EmbedParameterSetMetaData pmeta = 	getParameterMetaData();
+		EngineParameterMetaData pmeta = 	getParameterMetaData();
 		int numElems = pmeta.getParameterCount();
 
 		for ( int i = 0; i < numElems; i ++)
@@ -1566,30 +1563,20 @@ private PreparedStatement prepareStatementJDBC3(String sqlStmt, int
 
 	
 	/** 
-	 * Get parameter metadata from EmbedPreparedStatement or 
-	 * BrokeredPreparedStatement. We use reflection because we don't know which
-	 * we have.
-	 * 
-	 * @return EmbedParameterSetMetaData for the prepared statement. 
+	 * Retrieve the ParameterMetaData for the prepared statement. 
+     * To do so, use the engine defined interfaces:
+     * @see org.apache.derby.iapi.jdbc.EnginePreparedStatement
+     * @see org.apache.derby.iapi.jdbc.EngineParameterMetaData 
+	 * @return EngineParameterMetaData for the prepared statement. 
 	 * Note: there is no separate BrokeredParameterSetMetaData.
 	 */
-	protected EmbedParameterSetMetaData getParameterMetaData() throws SQLException
+	protected EngineParameterMetaData getParameterMetaData() throws SQLException
 	{
 		if (stmtPmeta != null)
 			return stmtPmeta;
 
-		EmbedParameterSetMetaData pmeta = null;
-		Class[] getParameterMetaDataParam = {};
-		try {
-			Method sh =
-				getPreparedStatement().getClass().getMethod("getEmbedParameterSetMetaData", getParameterMetaDataParam);
-			pmeta = (EmbedParameterSetMetaData)
-				sh.invoke(getPreparedStatement(),null);
-			stmtPmeta = pmeta;
-		}
-		catch (Exception e) {
-			handleReflectionException(e);
-		}
+		stmtPmeta = ((EnginePreparedStatement)ps).getEmbedParameterSetMetaData();
+        
 		return stmtPmeta;
 	}
 	
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
index 2481a948..7b3b5568 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
@@ -32,7 +32,7 @@
 	obtained through the BrokeredStatementControl getRealPreparedStatement method.
  */
 public class BrokeredPreparedStatement extends BrokeredStatement
-	implements PreparedStatement
+	implements EnginePreparedStatement
 {
 
 	/**
@@ -46,6 +46,21 @@ public BrokeredPreparedStatement(BrokeredStatementControl control, int jdbcLevel
 		this.sql = sql;
     }
 
+	/**
+     * Imitate the getParameterMetaData() function in JDBC 3.0
+     *
+     * Retrieves the number, types and properties of this PreparedStatement
+     * object's parameters.
+     *
+     * @return a EngineParameterMetaData object that contains information about the
+     * number, types and properties of this PreparedStatement object's parameters.
+     * @exception SQLException if a database access error occurs
+     */
+    public EngineParameterMetaData getEmbedParameterSetMetaData()
+    throws SQLException
+    {
+        return ((EnginePreparedStatement)getPreparedStatement()).getEmbedParameterSetMetaData();
+    }
 	/**
      * A prepared SQL query is executed and its ResultSet is returned.
      *
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EngineParameterMetaData.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EngineParameterMetaData.java
index e69de29b..608b326e 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EngineParameterMetaData.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EngineParameterMetaData.java
@@ -0,0 +1,127 @@
+/*
+ 
+ Derby - Class org.apache.derby.iapi.jdbc.EngineParameterMetaData
+ 
+ Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ 
+ */
+package org.apache.derby.iapi.jdbc;
+
+import java.sql.SQLException;
+import java.sql.PreparedStatement;
+
+
+/**
+ * An internal api only, mainly for use in the network server. 
+ * 
+ * This interface imitates the ParameterMetaData interface from JDBC3.0
+ * We want to provide the ParameterMetaData functionality to JDKs before JDBC3.0. 
+ * org.apache.derby.iapi.jdbc.EnginePreparedStatement interface returns an object 
+ * of this type on a getEmbedParameterSetMetaData
+ * Once,JDK1.3 stops being supported, this interface can be removed and 
+ * instead the JDBC 3.0 Class ParameterMetaData can be used
+ */
+public interface EngineParameterMetaData  {
+    
+    /**
+     * Retrieves the number of parameters in the PreparedStatement object for which
+     * this ParameterMetaData object contains information.
+     *
+     * @return the number of parameters
+     */
+    public int getParameterCount();
+    
+    /**
+     * Retrieves whether null values are allowed in the designated parameter.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return the nullability status of the given parameter; one of
+     * ParameterMetaData.parameterNoNulls, ParameterMetaData.parameterNullable, or
+     * ParameterMetaData.parameterNullableUnknown
+     * @exception SQLException if a database access error occurs
+     */
+    public int isNullable(int param) throws SQLException;
+    
+    /**
+     * Retrieves whether values for the designated parameter can be signed numbers.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return true if it can be signed numbers
+     * @exception SQLException if a database access error occurs
+     */
+    public boolean isSigned(int param) throws SQLException;
+    
+    /**
+     * Retrieves the designated parameter's number of decimal digits.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return precision
+     * @exception SQLException if a database access error occurs
+     */
+    public int getPrecision(int param) throws SQLException;        
+    
+    /**
+     * Retrieves the designated parameter's number of digits to right of the decimal point.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return scale
+     * @exception SQLException if a database access error occurs
+     */
+    public int getScale(int param) throws SQLException;
+    /**
+     *
+     * Retrieves the designated parameter's SQL type.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return SQL type from java.sql.Types
+     * @exception SQLException if a database access error occurs
+     */
+    public int getParameterType(int param) throws SQLException;
+    /**
+     *
+     * Retrieves the designated parameter's database-specific type name.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return type the name used by the database. If the parameter
+     * type is a user-defined type, then a fully-qualified type name is returned.
+     * @exception SQLException if a database access error occurs
+     */
+    public String getParameterTypeName(int param) throws SQLException;
+    
+    /**
+     * Retrieves the fully-qualified name of the Java class whose instances should be
+     * passed to the method PreparedStatement.setObject.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return the fully-qualified name of the class in the Java
+     * programming language that would be used by the method
+     * PreparedStatement.setObject to set the value in the specified parameter.
+     * This is the class name used for custom mapping.
+     * @exception SQLException if a database access error occurs
+     */
+    public String getParameterClassName(int param) throws SQLException;
+    
+    /**
+     * Retrieves the designated parameter's mode.
+     *
+     * @param param - the first parameter is 1, the second is 2, ...
+     * @return mode of the parameter; one of ParameterMetaData.parameterModeIn,
+     * ParameterMetaData.parameterModeOut, or ParameterMetaData.parameterModeInOut
+     * ParameterMetaData.parameterModeUnknown.
+     * @exception SQLException if a database access error occurs
+     */
+    public int getParameterMode(int param) throws SQLException;
+    
+}
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EnginePreparedStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EnginePreparedStatement.java
index 3f24d583..31609117 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EnginePreparedStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/EnginePreparedStatement.java
@@ -1 +1,50 @@
   + native
+/*
+ 
+ Derby - Class org.apache.derby.iapi.jdbc.EnginePreparedStatement
+ 
+ Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ 
+ */
+package org.apache.derby.iapi.jdbc;
+
+import java.sql.SQLException;
+import java.sql.PreparedStatement;
+
+/**
+ * Additional methods the embedded engine exposes on its 
+ * PreparedStatement object implementations. An internal api only, mainly 
+ * for the network server. Allows consistent interaction between embedded 
+ * PreparedStatement and Brokered PreparedStatements.
+ * (DERBY-1015)
+ */
+public interface EnginePreparedStatement extends PreparedStatement {
+    
+    /**
+     * Imitate the getParameterMetaData() that is in JDBC 3.0
+     * Once,JDK1.3 stops being supported, instead of returning EngineParameterMetaData
+     * the JDBC 3.0 class - ParameterMetaData can be used.
+     *
+     * Retrieves the number, types and properties of this PreparedStatement
+     * object's parameters.
+     *
+     * @return a EngineParameterMetaData object that contains information about the
+     * number, types and properties of this PreparedStatement object's parameters.
+     * @exception SQLException if a database access error occurs
+     */
+    public EngineParameterMetaData getEmbedParameterSetMetaData()
+        throws SQLException;
+    
+}
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedParameterSetMetaData.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedParameterSetMetaData.java
index 7acfc96c..5eabc837 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedParameterSetMetaData.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedParameterSetMetaData.java
@@ -26,6 +26,7 @@
 import org.apache.derby.iapi.types.DataTypeUtilities;
 import org.apache.derby.iapi.reference.JDBC30Translation;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.jdbc.EngineParameterMetaData;
 
 import java.sql.SQLException;
 import java.sql.Types;
@@ -37,13 +38,12 @@
  * It provides the parameter meta data for callable & prepared statements.
  * The subclass in Local30 actually implements ParameterMetaData interface.
  *
- * Our middle-tier servers or tools (eg. drda network server) can use it this way:
- * import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
- * import org.apache.derby.impl.jdbc.EmbedParameterSetMetaData;
- *
- *   EmbedParameterSetMetaData pmeta = ((EmbedPreparedStatement) ps).getEmbedParameterSetMetaData();
+ * For use of ParameterMetaData functionality in network server, please do not use
+ * this class directly. Instead use the method available on EnginePreparedStatement
+ * @see org.apache.derby.iapi.jdbc.EngineParameterMetaData
+ * @see org.apache.derby.iapi.jdbc.EnginePreparedStatement
  */
-public class EmbedParameterSetMetaData
+public class EmbedParameterSetMetaData implements EngineParameterMetaData
     {
 
     private final ParameterValueSet pvs;
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index b1ab6280..e2ced831 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -66,6 +66,8 @@
 import java.io.Reader;
 import java.sql.Types;
 
+import org.apache.derby.iapi.jdbc.EngineParameterMetaData;
+import org.apache.derby.iapi.jdbc.EnginePreparedStatement;
 
 /**
  *
@@ -77,7 +79,7 @@
  */
 public abstract class EmbedPreparedStatement
 	extends EmbedStatement
-	implements java.sql.PreparedStatement
+	implements EnginePreparedStatement
 {
 
 	//Moving jdbc2.0 batch related code in this class because callableStatement in jdbc 20 needs
@@ -1258,11 +1260,11 @@ private void setScale(int parameterIndex, int scale)
     * Retrieves the number, types and properties of this PreparedStatement
     * object's parameters.
     *
-    * @return a EmbedParameterSetMetaData object that contains information about the
+    * @return a EngineParameterMetaData object that contains information about the
     * number, types and properties of this PreparedStatement object's parameters.
     * @exception SQLException if a database access error occurs
 	*/
-	public EmbedParameterSetMetaData getEmbedParameterSetMetaData()
+	public EngineParameterMetaData getEmbedParameterSetMetaData()
     	throws SQLException
 	{
 	  checkExecStatus();
