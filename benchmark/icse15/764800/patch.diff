diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index fddebc77..aeb715fd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -616,15 +616,15 @@ public int setString(long pos, String str, int offset, int len)
      * len characters
      *
      * @param len the length, in characters, to which the CLOB value should be
-     *      truncated
+     *      truncated, 0 is accepted
      * @exception SQLException if truncating the CLOB value fails
      */
     public void truncate(long len) throws SQLException
     {
         checkValidity();
-        if (len < 1)
+        if (len < 0)
             throw Util.generateCsSQLException(
-                SQLState.BLOB_BAD_POSITION, new Long(len));
+                SQLState.BLOB_NONPOSITIVE_LENGTH, new Long(len));
         try {
             if (!clob.isWritable()) {
                 makeWritableClobClone(len);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java
index b2fe146c..2c75ffcd 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java
@@ -386,6 +386,42 @@ public void testPositionWithString_CJK()
         executeTestPositionWithStringToken(token, prefix);
     }
 
+    /**
+     * Truncating a Clob to the empty string.
+     */
+    public void testTruncateZeroOnDisk()
+            throws IOException, SQLException {
+        long size = 33*1024+7;
+        insertDataWithToken("", size, 0, SET_CHARACTER_STREAM);
+        truncateToZero(size);
+    }
+
+    /**
+     * Truncating a Clob to the empty string.
+     */
+    public void testTruncateZeroInMemory()
+            throws IOException, SQLException {
+        long size = 33;
+        insertDataWithToken("", size, 0, SET_STRING);
+        truncateToZero(size);
+    }
+
+    /**
+     * Truncates the default Clob to zero length and checks some basic
+     * operations on the empty Clob.
+     *
+     * @param initSize the expected size of the Clob to truncate
+     */
+    private void truncateToZero(long initSize)
+            throws IOException, SQLException {
+        assertEquals(initSize, this.clob.length());
+        this.clob.truncate(0);
+        assertEquals(0L, this.clob.length());
+        assertEquals("", this.clob.getSubString(1, 0));
+        assertEquals("", this.clob.getSubString(1, 1));
+        assertEquals(-1, this.clob.getCharacterStream().read());
+    }
+
     /**
      * Truncating a Clob to the current length should work.
      */
