diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index 8c85bc91..6bc4394b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -330,7 +330,7 @@ public void testServerStartup()
 
         assertEquals( myName + ": serverCameUp = " + serverCameUp, _outcome.serverShouldComeUp(), serverCameUp );
 
-        if (!runsWithEmma()) {
+        if (!(runsWithEmma() || runsWithJaCoCo())) {
             // With Emma we run without the security manager, so we can't
             // assert on seeing it.
             assertTrue( myName + "\nExpected: " +
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 3650f948..695f798d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -817,9 +817,7 @@ public static final boolean runsWithEmma() {
     }
 
     public static boolean runsWithJaCoCo() {
-        String agentProp = getSystemProperty(JACOCO_AGENT_PROP);
-        // Additional logic due to the use of a dummy property in build.xml
-        return agentProp != null && agentProp.startsWith("-javaagent");
+        return SecurityManagerSetup.jacocoEnabled;
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
index d83215d7..537a1997 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
@@ -331,7 +331,8 @@ private SpawnedProcess startSeparateProcess() throws Exception
         // running with Emma we don't run with the security manager, as the
         // default server policy doesn't contain needed permissions and,
         // additionally, Emma sources do not use doPrivileged blocks anyway.
-        if (!TestConfiguration.loadingFromJars() || BaseTestCase.runsWithEmma())
+        if (!TestConfiguration.loadingFromJars() ||
+                BaseTestCase.runsWithEmma() || BaseTestCase.runsWithJaCoCo())
         {
             boolean setNoSecurityManager = true;
             for (int i = 0; i < systemProperties.length; i++)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
index 356d3554..c9211c4b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
@@ -89,6 +89,19 @@
         
 	}
 	
+    static final boolean jacocoEnabled = checkIfJacocoIsRunning();
+    private static boolean checkIfJacocoIsRunning() {
+        return ((Boolean)AccessController.doPrivileged(new PrivilegedAction() {
+                public Object run() {
+                    if (getURL("org.jacoco.agent.rt.RT") != null) {
+                        System.setProperty("jacoco.active", "");
+                        return Boolean.TRUE;
+                    }
+                    return Boolean.FALSE;
+                }
+		})).booleanValue();
+    }
+
 	private final String decoratorPolicyResource;
     /** An additional policy to install (may be {@code null}). */
     private final String additionalPolicyResource;
@@ -430,6 +443,8 @@ public static URL getURL(String className) {
             return getURL(Class.forName(className));
         } catch (ClassNotFoundException e) {
             return null;
+        } catch (NoClassDefFoundError e) {
+            return null;
         }
     }
 	
