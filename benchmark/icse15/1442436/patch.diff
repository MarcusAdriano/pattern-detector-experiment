diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/OldQRDecomposition.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/OldQRDecomposition.java
index 3528b275..9f791614 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/OldQRDecomposition.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/OldQRDecomposition.java
@@ -41,7 +41,7 @@
  */
 
 /** partially deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
-public class OldQRDecomposition {
+public class OldQRDecomposition implements QR {
 
   /** Array for internal storage of decomposition. */
   private final Matrix qr;
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/QR.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/QR.java
index e69de29b..5992224d 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/QR.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/QR.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.package org.apache.mahout.math;
+ */
+package org.apache.mahout.math;
+
+public interface QR {
+  Matrix getQ();
+
+  Matrix getR();
+
+  boolean hasFullRank();
+
+  Matrix solve(Matrix B);
+}
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/QRDecomposition.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/QRDecomposition.java
index c47cc1df..879c16b2 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/QRDecomposition.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/QRDecomposition.java
@@ -23,10 +23,8 @@
  */
 package org.apache.mahout.math;
 
-import com.google.common.collect.Lists;
 import org.apache.mahout.math.function.Functions;
 
-import java.util.List;
 import java.util.Locale;
 
 
@@ -42,8 +40,7 @@
  returns <tt>false</tt>.
  */
 
-public class QRDecomposition {
-  private static final int N = 10;
+public class QRDecomposition implements QR {
   private final Matrix q, r;
   private final boolean fullRank;
   private final int rows;
@@ -111,6 +108,7 @@ public QRDecomposition(Matrix a) {
    *
    * @return <tt>Q</tt>
    */
+  @Override
   public Matrix getQ() {
     return q;
   }
@@ -120,6 +118,7 @@ public Matrix getQ() {
    *
    * @return <tt>R</tt>
    */
+  @Override
   public Matrix getR() {
     return r;
   }
@@ -129,6 +128,7 @@ public Matrix getR() {
    *
    * @return true if <tt>R</tt>, and hence <tt>A</tt>, has full rank.
    */
+  @Override
   public boolean hasFullRank() {
     return fullRank;
   }
@@ -140,6 +140,7 @@ public boolean hasFullRank() {
    * @return <tt>X</tt> that minimizes the two norm of <tt>Q*R*X - B</tt>.
    * @throws IllegalArgumentException if <tt>B.rows() != A.rows()</tt>.
    */
+  @Override
   public Matrix solve(Matrix B) {
     if (B.numRows() != rows) {
       throw new IllegalArgumentException("Matrix row dimensions must agree.");
@@ -175,37 +176,4 @@ public Matrix solve(Matrix B) {
   public String toString() {
     return String.format(Locale.ENGLISH, "QR(%d x %d,fullRank=%s)", rows, columns, hasFullRank());
   }
-
-  public static void main(String[] args) {
-    Matrix a = new DenseMatrix(60, 60).assign(Functions.random());
-
-    int n = 0;
-    List<Integer> counts = Lists.newArrayList(10, 20, 50, 100, 200, 500, 1000, 2000, 5000);
-    for (int k : counts) {
-      double warmup = 0;
-      double other = 0;
-
-      n += k;
-      for (int i = 0; i < k; i++) {
-        QRDecomposition qr = new QRDecomposition(a);
-        warmup = Math.max(warmup, qr.getQ().transpose().times(qr.getQ()).viewDiagonal().assign(Functions.plus(-1)).norm(1));
-        Matrix z = qr.getQ().times(qr.getR()).minus(a);
-        other = Math.max(other, z.aggregate(Functions.MIN, Functions.ABS));
-      }
-
-      double maxIdent = 0;
-      double maxError = 0;
-
-      long t0 = System.nanoTime();
-      for (int i = 0; i < N; i++) {
-        QRDecomposition qr = new QRDecomposition(a);
-
-        maxIdent = Math.max(maxIdent, qr.getQ().transpose().times(qr.getQ()).viewDiagonal().assign(Functions.plus(-1)).norm(1));
-        Matrix z = qr.getQ().times(qr.getR()).minus(a);
-        maxError = Math.max(maxError, z.aggregate(Functions.MIN, Functions.ABS));
-      }
-      System.out.printf("%d\t%.1f\t%g\t%g\t%g\n", n, (System.nanoTime() - t0) / 1e3 / N, maxIdent, maxError, warmup);
-//    System.out.printf("%g, %g\n", maxIdent, maxError);
-    }
-  }
 }
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/QRDecompositionTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/QRDecompositionTest.java
index 87aa2c62..13aac910 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/QRDecompositionTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/QRDecompositionTest.java
@@ -17,10 +17,14 @@
 
 package org.apache.mahout.math;
 
+import com.google.common.collect.Lists;
 import org.apache.mahout.math.function.DoubleDoubleFunction;
 import org.apache.mahout.math.function.Functions;
+import org.apache.mahout.math.stats.OnlineSummarizer;
 import org.junit.Test;
 
+import java.util.List;
+
 public final class QRDecompositionTest extends MahoutTestCase {
   @Test
   public void randomMatrix() {
@@ -156,6 +160,71 @@ public void fullRankWide() {
     assertEquals(x, qr.getQ().times(qr.getR()), 1e-15);
   }
 
+  @Test
+  public void fasterThanBefore() {
+
+    OnlineSummarizer s1 = new OnlineSummarizer();
+    OnlineSummarizer s2 = new OnlineSummarizer();
+
+    Matrix a = new DenseMatrix(60, 60).assign(Functions.random());
+
+    decompositionSpeedCheck(new Decomposer() {
+      @Override
+      public QR decompose(Matrix a) {
+        return new QRDecomposition(a);
+      }
+    }, s1, a, "new");
+
+    decompositionSpeedCheck(new Decomposer() {
+      @Override
+      public QR decompose(Matrix a) {
+        return new OldQRDecomposition(a);
+      }
+    }, s2, a, "old");
+
+    // should be much more than twice as fast.
+    System.out.printf("Speedup is about %.1f times\n", s2.getMedian() / s1.getMedian());
+    assertTrue(s1.getMedian() < 0.5 * s2.getMedian());
+  }
+
+  private interface Decomposer {
+    public QR decompose(Matrix a);
+  }
+
+  private void decompositionSpeedCheck(Decomposer qrf, OnlineSummarizer s1, Matrix a, String label) {
+    int n = 0;
+    List<Integer> counts = Lists.newArrayList(10, 20, 50, 100, 200, 500);
+    for (int k : counts) {
+      double warmup = 0;
+      double other = 0;
+
+      n += k;
+      for (int i = 0; i < k; i++) {
+        QR qr = qrf.decompose(a);
+        warmup = Math.max(warmup, qr.getQ().transpose().times(qr.getQ()).viewDiagonal().assign(Functions.plus(-1)).norm(1));
+        Matrix z = qr.getQ().times(qr.getR()).minus(a);
+        other = Math.max(other, z.aggregate(Functions.MIN, Functions.ABS));
+      }
+
+      double maxIdent = 0;
+      double maxError = 0;
+
+      long t0 = System.nanoTime();
+      for (int i = 0; i < n; i++) {
+        QR qr = qrf.decompose(a);
+
+        maxIdent = Math.max(maxIdent, qr.getQ().transpose().times(qr.getQ()).viewDiagonal().assign(Functions.plus(-1)).norm(1));
+        Matrix z = qr.getQ().times(qr.getR()).minus(a);
+        maxError = Math.max(maxError, z.aggregate(Functions.MIN, Functions.ABS));
+      }
+      long t1 = System.nanoTime();
+      if (k > 100) {
+        s1.add(t1 - t0);
+      }
+      System.out.printf("%s %d\t%.1f\t%g\t%g\t%g\n", label, n, (t1 - t0) / 1e3 / n, maxIdent, maxError, warmup);
+    }
+  }
+
   private static void assertEquals(Matrix ref, Matrix actual, double epsilon) {
     assertEquals(0, ref.minus(actual).aggregate(Functions.MAX, Functions.ABS), epsilon);
   }
