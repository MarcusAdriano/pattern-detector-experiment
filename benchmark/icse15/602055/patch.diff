diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentInfos.java b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentInfos.java
index 5469877c..48cc7910 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentInfos.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentInfos.java
@@ -528,6 +528,7 @@ public Object run() throws CorruptIndexException, IOException {
           // a stale cache (NFS) we have a better chance of
           // getting the right generation.
           long genB = -1;
+          if (directory != null) {
           for(int i=0;i<defaultGenFileRetryCount;i++) {
             IndexInput genInput = null;
             try {
@@ -564,6 +565,7 @@ public Object run() throws CorruptIndexException, IOException {
               // will retry
             }
           }
+          }
 
           message(IndexFileNames.SEGMENTS_GEN + " check: genB=" + genB);
 
@@ -656,7 +658,13 @@ public Object run() throws CorruptIndexException, IOException {
                                                                                "",
                                                                                gen-1);
             
-            if (directory.fileExists(prevSegmentFileName)) {
+            final boolean prevExists;
+            if (directory != null)
+              prevExists = directory.fileExists(prevSegmentFileName);
+            else
+              prevExists = new File(fileDirectory, prevSegmentFileName).exists();
+
+            if (prevExists) {
               message("fallback to prior segment file '" + prevSegmentFileName + "'");
               try {
                 Object v = doBody(prevSegmentFileName);
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
index 816993eb..7f3f8739 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
@@ -595,7 +595,14 @@ public void testFilesOpenClose() throws IOException
 
     public void testLastModified() throws IOException {
       assertFalse(IndexReader.indexExists("there_is_no_such_index"));
-      Directory dir = new MockRAMDirectory();
+      final File fileDir = new File(System.getProperty("tempDir"), "testIndex");
+      for(int i=0;i<2;i++) {
+        try {
+          final Directory dir;
+          if (0 == i)
+            dir = new MockRAMDirectory();
+          else
+            dir = getDirectory();
       assertFalse(IndexReader.indexExists(dir));
       IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
       addDocumentWithFields(writer);
@@ -605,9 +612,22 @@ public void testLastModified() throws IOException {
       IndexReader reader = IndexReader.open(dir);
       assertFalse(IndexReader.isLocked(dir));		// reader only, no lock
       long version = IndexReader.lastModified(dir);
+          if (i == 1) {
+            long version2 = IndexReader.lastModified(fileDir);
+            assertEquals(version, version2);
+          }
       reader.close();
       // modify index and check version has been
       // incremented:
+          while(true) {
+            try {
+              Thread.sleep(1000);
+              break;
+            } catch (InterruptedException ie) {
+              Thread.currentThread().interrupt();
+            }
+          }
+
       writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
       addDocumentWithFields(writer);
       writer.close();
@@ -615,6 +635,11 @@ public void testLastModified() throws IOException {
       assertTrue("old lastModified is " + version + "; new lastModified is " + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));
       reader.close();
       dir.close();
+        } finally {
+          if (i == 1)
+            _TestUtil.rmDir(fileDir);
+        }
+      }
     }
 
     public void testVersion() throws IOException {
