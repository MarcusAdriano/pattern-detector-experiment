diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java
index bd820437..983a7551 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java
@@ -633,6 +633,30 @@ public String toString(String[] dictionary) {
     return result.toString();
   }
 
+  /**
+   * toString() implementation for sparse vectors via {@link #nonZeroes()} method
+   * @return String representation of the vector
+   */
+  public String sparseVectorToString() {
+    Iterator<Element> it = iterateNonZero();
+    if (!it.hasNext()) {
+      return "{}";
+    }
+    else {
+      StringBuilder result = new StringBuilder();
+      result.append('{');
+      while (it.hasNext()) {
+        Vector.Element e = it.next();
+        result.append(e.index());
+        result.append(':');
+        result.append(e.get());
+        result.append(',');
+      }
+      result.setCharAt(result.length() - 1, '}');
+      return result.toString();
+    }
+  }
+
   protected final class LocalElement implements Element {
     int index;
 
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java
index 74b14cbf..3c3d6b43 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java
@@ -33,7 +33,9 @@ public DenseVector() {
     super(0);
   }
 
-  /** Construct a new instance using provided values */
+  /** Construct a new instance using provided values
+   *  @param values - array of values
+   */
   public DenseVector(double[] values) {
     this(values, false);
   }
@@ -47,7 +49,9 @@ public DenseVector(DenseVector values, boolean shallowCopy) {
     this(values.values, shallowCopy);
   }
 
-  /** Construct a new instance of the given cardinality */
+  /** Construct a new instance of the given cardinality
+   * @param cardinality - number of values in the vector
+   */
   public DenseVector(int cardinality) {
     super(cardinality);
     this.values = new double[cardinality];
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java
index 92b4bb95..f2c7455f 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java
@@ -75,23 +75,7 @@ public RandomAccessSparseVector clone() {
 
   @Override
   public String toString() {
-    StringBuilder result = new StringBuilder();
-    result.append('{');
-    Iterator<Element> it = iterateNonZero();
-    boolean first = true;
-    while (it.hasNext()) {
-      if (first) {
-        first = false;
-      } else {
-        result.append(',');
-      }
-      Element e = it.next();
-      result.append(e.index());
-      result.append(':');
-      result.append(e.get());
-    }
-    result.append('}');
-    return result.toString();
+    return sparseVectorToString();
   }
 
   @Override
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
index 15bed4a1..018449b2 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
@@ -126,18 +126,7 @@ public void mergeUpdates(OrderedIntDoubleMapping updates) {
 
   @Override
   public String toString() {
-    StringBuilder result = new StringBuilder();
-    result.append('{');
-    Iterator<Element> it = iterateNonZero();
-    while (it.hasNext()) {
-      Element e = it.next();
-      result.append(e.index());
-      result.append(':');
-      result.append(e.get());
-      result.append(',');
-    }
-    result.append('}');
-    return result.toString();
+    return sparseVectorToString();
   }
 
   /**
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractVectorTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractVectorTest.java
index 72936d79..5b03438d 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractVectorTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractVectorTest.java
@@ -3,6 +3,7 @@
 import java.util.Iterator;
 import java.util.Random;
 
+import com.google.common.collect.Iterables;
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.Vector.Element;
 import org.apache.mahout.math.function.Functions;
@@ -593,11 +594,7 @@ public void testIterators() {
       }
     }
 
-    int nonZeroIterated = 0;
-
-    for (Element ignored : v0.nonZeroes()) {
-      nonZeroIterated++;
-    }
+    int nonZeroIterated = Iterables.size(v0.nonZeroes());
     assertEquals(20, elements);
     assertEquals(v0.size(), elements);
     assertEquals(nonZeroIterated, nonZero);
@@ -623,4 +620,22 @@ public void testSmallDistances() {
       }
     }
   }
+
+
+  public void testToString() {
+    Vector w;
+
+    w = generateTestVector(20);
+    w.set(0, 1.1);
+    w.set(13, 100500.);
+    w.set(19, 3.141592);
+    assertEquals("{0:1.1,13:100500.0,19:3.141592}", w.toString());
+
+    w = generateTestVector(12);
+    w.set(10, 0.1);
+    assertEquals("{10:0.1}", w.toString());
+
+    w = generateTestVector(12);
+    assertEquals("{}", w.toString());
+  }
 }
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestDenseVector.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestDenseVector.java
index 41bec80c..dfbfeab3 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestDenseVector.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestDenseVector.java
@@ -18,6 +18,7 @@
 package org.apache.mahout.math;
 
 import org.apache.mahout.math.function.Functions;
+import org.junit.Test;
 
 public final class TestDenseVector extends AbstractVectorTest<DenseVector> {
 
@@ -37,4 +38,10 @@ public DenseVector vectorToTest(int size) {
     r.assign(Functions.random());
     return r;
   }
+
+  @Override
+  @Test
+  public void testToString() {
+    super.testToString();
+  }
 }
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestRandomAccessSparseVector.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestRandomAccessSparseVector.java
index 0e254cfc..d2d1924f 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestRandomAccessSparseVector.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestRandomAccessSparseVector.java
@@ -18,6 +18,7 @@
 package org.apache.mahout.math;
 
 import org.apache.mahout.common.RandomUtils;
+import org.junit.Test;
 
 import java.util.Random;
 
@@ -39,4 +40,9 @@ public RandomAccessSparseVector vectorToTest(int size) {
     return r;
   }
 
+  @Override
+  @Test
+  public void testToString() {
+    super.testToString();
+  }
 }
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSequentialAccessSparseVector.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSequentialAccessSparseVector.java
index 004594ee..02360b00 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSequentialAccessSparseVector.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSequentialAccessSparseVector.java
@@ -52,4 +52,11 @@ public SequentialAccessSparseVector vectorToTest(int size) {
     }
     return r;
   }
+
+
+  @Override
+  @Test
+  public void testToString() {
+    super.testToString();
+  }
 }
