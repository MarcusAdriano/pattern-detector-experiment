diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
index e98a0b0e..52f1e649 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
@@ -127,7 +127,7 @@ public void start() throws IOException
             logger.debug(String.format("Binding avro service to %s:%s", listenAddr, listenPort));
         SpecificResponder responder = new SpecificResponder(Cassandra.class, new CassandraServer());
         
-        logger.info("Cassandra starting up...");
+        logger.info("Listening for avro clients...");
         Mx4jTool.maybeLoad();
         // FIXME: This isn't actually binding to listenAddr (it should).
         server = new HttpServer(responder, listenPort);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index a616fd03..c5696ca1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -62,6 +62,7 @@
 import org.apache.cassandra.net.ResponseVerbHandler;
 import org.apache.cassandra.service.AntiEntropyService.TreeRequestVerbHandler;
 import org.apache.cassandra.streaming.*;
+import org.apache.cassandra.thrift.Constants;
 import org.apache.cassandra.thrift.UnavailableException;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.WrappedRunnable;
@@ -330,6 +331,9 @@ public synchronized void initClient() throws IOException
 
     public synchronized void initServer() throws IOException
     {
+        logger_.info("Cassandra version: " + FBUtilities.getCassandraVersionString());
+        logger_.info("Thrift API version: " + Constants.VERSION);
+
         if (initialized)
         {
             if (isClientMode)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
index ea169f10..8540d310 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
@@ -202,7 +202,7 @@ protected void afterExecute(Runnable r, Throwable t)
     /** hook for JSVC */
     public void start()
     {
-        logger.info("Cassandra starting up...");
+        logger.info("Listening for thrift clients...");
         Mx4jTool.maybeLoad();
         serverEngine.serve();
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index 32dcc699..ae635805 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -18,10 +18,7 @@
 
 package org.apache.cassandra.utils;
 
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.File;
-import java.io.IOException;
+import java.io.*;
 import java.math.BigInteger;
 import java.net.InetAddress;
 import java.net.URL;
@@ -30,10 +27,7 @@
 import java.nio.charset.CharacterCodingException;
 import java.nio.charset.CharsetDecoder;
 import java.security.MessageDigest;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
+import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
@@ -512,6 +506,21 @@ public static String resourceToFile(String filename) throws ConfigurationExcepti
         return scpurl.getFile();
     }
 
+    public static String getCassandraVersionString()
+    {
+        try
+        {
+            InputStream in = ClassLoader.getSystemClassLoader().getResourceAsStream("org/apache/cassandra/config/version.properties");
+            Properties props = new Properties();
+            props.load(in);
+            return props.getProperty("CassandraVersion");
+        }
+        catch (IOException ioe)
+        {
+            throw new IOError(ioe);
+        }
+    }
+
     public static long timestampMicros()
     {
         // we use microsecond resolution for compatibility with other client libraries, even though
