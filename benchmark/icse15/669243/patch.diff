diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 66321c7e..f686e35d 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -2155,8 +2155,9 @@ public void executeWork(int command) throws Exception
 					break;
 				}
 			case COMMAND_TRACEDIRECTORY:
-				setTraceDirectory((String) commandArgs.elementAt(0));
-				consolePropertyMessage("DRDA_TraceDirectoryChange.I", traceDirectory);
+				String directory = (String) commandArgs.elementAt(0);
+				sendSetTraceDirectory(directory);
+				consolePropertyMessage("DRDA_TraceDirectoryChange.I", directory);
 				break;
 			case COMMAND_TESTCONNECTION:
 				ping();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index 8a6b3c93..593be363 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.derbynet;
 
+import java.io.File;
 import java.io.InputStream;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -45,6 +46,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.SupportFilesSetup;
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
+import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
 
 import org.apache.derby.drda.NetworkServerControl;
 
@@ -353,6 +355,36 @@ public void testServerStartup()
         //
         runsysinfo();
         enableTracing();
+        setTraceDirectory();
+        disableTracing();
+        
+        
+    }
+
+    private void disableTracing() throws Exception {
+
+        String traceOffOutput = runServerCommand( "trace off" );
+
+        println( "Output for trace off command:\n\n" + traceOffOutput );
+
+        if ( traceOffOutput.indexOf( "Trace turned off for all sessions." ) < 0 )
+        { fail( "Failed to turn trace off:\n\n:" + traceOffOutput ); }
+    }
+
+    private void setTraceDirectory() throws Exception {
+
+        String  traceDirectoryOutput = runServerCommand( "tracedirectory trace" );
+        println( "Output for tracedirectory trace command:\n\n" + traceDirectoryOutput );
+
+        if ( traceDirectoryOutput.indexOf( "Trace directory changed to trace." ) < 0 )
+        { fail( "Unexpected output in setting trace directory:" + traceDirectoryOutput ); }
+
+        String pingOutput = runServerCommand( "ping" );
+
+        if (pingOutput.indexOf("Connection obtained for host:") < 0)
+        { fail ("Failed ping after changing trace directory: " + pingOutput);}
+        assertTrue("directory trace does not exist",
+                PrivilegedFileOpsForTests.exists(new File("trace")));
     }
 
     private void    connectToServer()
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
index a3a47579..f9024c30 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
@@ -82,4 +82,28 @@ public Object run() throws SecurityException, FileNotFoundException {
         }
     }
 
+    /**
+     * Check if the file exists.
+     *
+     * @return <code>true</code> if file exists, <code>false</code> otherwise
+     * @throws SecurityException if the required permissions to read the file,
+     *      or the path it is in, are missing
+     * @see File#exists
+     */
+    public static boolean exists(final File file)
+            throws SecurityException {
+        if (file == null) {
+            throw new IllegalArgumentException("file cannot be <null>");
+        }
+        try {
+            return ((Boolean)AccessController.doPrivileged(
+                        new PrivilegedExceptionAction() {
+                            public Object run() throws SecurityException {
+                                return new Boolean(file.exists());
+                            }
+                        })).booleanValue();
+        } catch (PrivilegedActionException pae) {
+            throw (SecurityException)pae.getException();
+        }
+    }
 }
