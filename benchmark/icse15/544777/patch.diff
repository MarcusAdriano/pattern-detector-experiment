diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 73542724..00024050 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -115,6 +115,9 @@ multiple threads and sucks data from the stream (returned from
              control = new LOBStreamControl (con.getDBName());
              control.write (blobBytes, 0, blobBytes.length, 0);
              materialized = true;
+             //add entry in connection so it can be cleared 
+             //when transaction is not valid
+             con.addLOBMapping (this);
          }
          catch (IOException e) {
              throw Util.setStreamFailure (e);
@@ -187,6 +190,9 @@ implementing the getStream() method for dvd.getStream(), does not
             buf = new byte[BLOB_BUF_SIZE];
         }
         pos = 0;
+        //add entry in connection so it can be cleared 
+        //when transaction is not valid
+        con.addLOBMapping (this);
     }
 
 
@@ -944,6 +950,9 @@ public InputStream getBinaryStream(long pos, long length)
      * throws SQLException if isvalid is not true.
      */
     private void checkValidity() throws SQLException{
+        //check for connection to maintain sqlcode for closed
+        //connection
+        getEmbedConnection().checkIfClosed();
         if(!isValid)
             throw newSQLException(SQLState.LOB_OBJECT_INVALID);
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index e458b5cc..6eb18d63 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.jdbc;
 
+import org.apache.derby.iapi.error.ExceptionSeverity;
 import org.apache.derby.jdbc.InternalDriver;
 
 import org.apache.derby.iapi.reference.Attribute;
@@ -1549,6 +1550,18 @@ protected final void checkIfClosed() throws SQLException {
 	SQLException handleException(Throwable thrownException)
 			throws SQLException
 	{
+		//assume in case of SQLException cleanup is 
+		//done already. This assumption is inline with
+		//TR's assumption. In case no rollback was 
+		//called lob objects will remain valid.
+		if (thrownException instanceof StandardException) {
+			if (((StandardException) thrownException)
+				.getSeverity() 
+				>= ExceptionSeverity.TRANSACTION_SEVERITY) {
+				clearLOBMapping();
+			}
+		}
+
 		/*
 		** By default, rollback the connection on if autocommit
 	 	** is on.
@@ -1585,6 +1598,17 @@ final SQLException handleException(Throwable thrownException,
 									   boolean rollbackOnAutoCommit) 
 			throws SQLException 
 	{
+		//assume in case of SQLException cleanup is 
+		//done already. This assumption is inline with
+		//TR's assumption. In case no rollback was 
+		//called lob objects will remain valid.
+		if (thrownException instanceof StandardException) {
+			if (((StandardException) thrownException)
+				.getSeverity() 
+				>= ExceptionSeverity.TRANSACTION_SEVERITY) {
+				clearLOBMapping();
+			}
+		}
 		return getTR().handleException(thrownException, autoCommit,
 								  rollbackOnAutoCommit); 
 
@@ -1667,6 +1691,7 @@ protected void commitIfNeeded() throws SQLException
             try
             {
                 getTR().commit();
+                clearLOBMapping();
             } 
             catch (Throwable t)
             {
@@ -1698,6 +1723,7 @@ protected void commitIfAutoCommit() throws SQLException
             try
             {
                 getTR().commit();
+                clearLOBMapping();
             } 
             catch (Throwable t)
             {
@@ -2295,7 +2321,7 @@ public void clearLOBMapping() throws SQLException {
 		//initialize the locator value to 0 and
 		//the hash table object to null.
 		if (lobHashMap != null) {
-			for (Iterator e = getlobHMObj().keySet().iterator();
+			for (Iterator e = getlobHMObj().values().iterator();
 				e.hasNext() ;) {
 				Object obj = e.next();
 				if (obj instanceof Clob)  {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index d14ef41a..49aca7b3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -2323,16 +2323,9 @@ public void testBlobAfterClosingConnection() throws Exception {
 
         try {
             long length = shortBlob.length();
-            // no problem accessing this after commit since it is in memory
-            if (usingEmbedded()) {
-                assertEquals("FAIL - wrong blob length", 26, length);
-            } else {
                 fail("FAIL - should get an exception, connection is closed");
-            }
         } catch (SQLException e) {
             checkException(NO_CURRENT_CONNECTION, e);
-            assertTrue("FAIL - Embedded should not get this exception",
-                    !usingEmbedded());
         }
 
         // these should all give blob/clob data unavailable exceptions
@@ -2341,56 +2334,36 @@ public void testBlobAfterClosingConnection() throws Exception {
             fail("FAIL - should not be able to access large lob " +
                     "after the connection is closed");
         } catch (SQLException e) {
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(NO_CURRENT_CONNECTION, e);
             }
-        }
         try {
             blob.getBytes(2,3);
             fail("FAIL - should not be able to access large lob " +
                     "after the connection is closed");
         } catch (SQLException e) {
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(NO_CURRENT_CONNECTION, e);
             }
-        }
         try {
             blob.getBinaryStream();
             fail("FAIL - should not be able to access large lob " +
                     "after the connection is closed");
         } catch (SQLException e) {
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(NO_CURRENT_CONNECTION, e);
             }
-        }
         try {
             blob.position("foo".getBytes("US-ASCII"),2);
             fail("FAIL - should not be able to access large lob " +
                     "after the connection is closed");
         } catch (SQLException e) {
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(NO_CURRENT_CONNECTION, e);
             }
-        }
         try {
             blob.position(blob,2);
             fail("FAIL - should not be able to access large lob " +
                     "after the connection is closed");
         } catch (SQLException e) {
-            if (usingEmbedded()) {
-                checkException(BLOB_ACCESSED_AFTER_COMMIT, e);
-            } else {
                 checkException(NO_CURRENT_CONNECTION, e);
             }
-        }
 
         // restart the connection
         getConnection().setAutoCommit(false);
@@ -3217,8 +3190,6 @@ private void checkException(String SQLState, SQLException se)
     }
 
 
-
-
     private static final String BLOB_BAD_POSITION = "XJ070";
     private static final String BLOB_NONPOSITIVE_LENGTH = "XJ071";
     private static final String BLOB_POSITION_TOO_LARGE = "XJ076";
@@ -3227,5 +3198,6 @@ private void checkException(String SQLState, SQLException se)
     private static final String LOCK_TIMEOUT = "40XL1";
     private static final String BLOB_ACCESSED_AFTER_COMMIT = "XJ073";
     private static final String NO_CURRENT_CONNECTION = "08003";
+    private static final String INVALID_BLOB = "XJ215";
 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java
index 0522543d..103d8629 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java
@@ -164,7 +164,7 @@ public void testBlobCreateLocatorSP() throws SQLException {
         //remember in setup a locator is already created
         //hence expected value is 2
         assertEquals("The locator values returned by " +
-            "SYSIBM.BLOBCREATELOCATOR() are incorrect", 2, locator);
+            "SYSIBM.BLOBCREATELOCATOR() are incorrect", 4, locator);
         cs.close();
     }
 
