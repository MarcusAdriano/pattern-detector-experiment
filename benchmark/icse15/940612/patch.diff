diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index addaa120..0f76dcb3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -37,11 +37,27 @@ public int compare(byte[] o1, byte[] o2)
             return 1;
         }
         
-        long t1 = LexicalUUIDType.getUUID(o1).timestamp();
-        long t2 = LexicalUUIDType.getUUID(o2).timestamp();
+        long t1 = getTimestamp(o1);
+        long t2 = getTimestamp(o2);
         return t1 < t2 ? -1 : (t1 > t2 ? 1 : FBUtilities.compareByteArrays(o1, o2));
     }
 
+    static long getTimestamp(byte[] bytes)
+    {
+        long low = 0;
+        int mid = 0;
+        int hi = 0;
+
+        for (int i = 0; i < 4; i++)
+            low = (low << 8) | (bytes[i] & 0xff);
+        for (int i = 4; i < 6; i++)
+            mid = (mid << 8) | (bytes[i] & 0xff);
+        for (int i = 6; i < 8; i++)
+            hi = (hi << 8) | (bytes[i] & 0xff);
+
+        return low + ((long)mid << 32) + ((long)(hi & 0x0FFF) << 48);
+    }
+
     public String getString(byte[] bytes)
     {
         if (bytes.length == 0)
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
index e69de29b..74254834 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TimeUUIDTypeTest.java
@@ -0,0 +1,77 @@
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.apache.cassandra.db.marshal;
+
+import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+
+import org.apache.cassandra.CleanupHelper;
+import org.apache.cassandra.db.marshal.TimeUUIDType;
+
+import org.safehaus.uuid.UUID;
+import org.safehaus.uuid.UUIDGenerator;
+
+public class TimeUUIDTypeTest extends CleanupHelper
+{
+    TimeUUIDType timeUUIDType = new TimeUUIDType();
+    UUIDGenerator generator = UUIDGenerator.getInstance();
+
+    @Test
+    public void testEquality()
+    {
+        UUID a = generator.generateTimeBasedUUID();
+        UUID b = new UUID(a.asByteArray());
+
+        assertEquals(0, timeUUIDType.compare(a.asByteArray(), b.asByteArray()));
+    }
+
+    @Test
+    public void testSmaller()
+    {
+        UUID a = generator.generateTimeBasedUUID();
+        UUID b = generator.generateTimeBasedUUID();
+        UUID c = generator.generateTimeBasedUUID();
+
+        assertEquals(-1, timeUUIDType.compare(a.asByteArray(), b.asByteArray()));
+        assertEquals(-1, timeUUIDType.compare(b.asByteArray(), c.asByteArray()));
+        assertEquals(-1, timeUUIDType.compare(a.asByteArray(), c.asByteArray()));
+    }
+
+    @Test
+    public void testBigger()
+    {
+        UUID a = generator.generateTimeBasedUUID();
+        UUID b = generator.generateTimeBasedUUID();
+        UUID c = generator.generateTimeBasedUUID();
+
+        assertEquals(1, timeUUIDType.compare(c.asByteArray(), b.asByteArray()));
+        assertEquals(1, timeUUIDType.compare(b.asByteArray(), a.asByteArray()));
+        assertEquals(1, timeUUIDType.compare(c.asByteArray(), a.asByteArray()));
+    }
+
+    @Test
+    public void testTimestamp()
+    {
+        for (int i = 0; i < 100; i++)
+        {
+            UUID uuid = generator.generateTimeBasedUUID();
+            assert TimeUUIDType.getTimestamp(uuid.asByteArray()) == LexicalUUIDType.getUUID(uuid.asByteArray()).timestamp();
+        }
+    }
+}
