diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index 1d5d20ef..a3fc463b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -95,6 +95,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private static final Outcome RUNNING_SECURITY_NOT_BOOTED = new Outcome( true, "" );
     private static final Outcome RUNNING_SECURITY_BOOTED = new Outcome( true,  serverBootedOK() );
 
+    /** Reference to the enclosing NetworkServerTestSetup. */
+    private NetworkServerTestSetup nsTestSetup;
         
     // startup state
     private boolean _unsecureSet;
@@ -214,7 +216,7 @@ protected void tearDown() throws Exception
         String[]        startupProperties = getStartupProperties( authenticationRequired, useCustomDerbyProperties );
         String[]        startupArgs = getStartupArgs( unsecureSet );
 
-        Test  testSetup = SecurityManagerSetup.noSecurityManager(
+        NetworkServerTestSetup networkServerTestSetup =
                 new NetworkServerTestSetup
             (
              secureServerTest,
@@ -223,7 +225,12 @@ protected void tearDown() throws Exception
              true,
              secureServerTest._outcome.serverShouldComeUp(),
              secureServerTest._inputStreamHolder
-             ));
+             );
+
+        secureServerTest.nsTestSetup = networkServerTestSetup;
+
+        Test testSetup =
+            SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
 
         // if using the custom derby.properties, copy the custom properties to a visible place
         if ( useCustomDerbyProperties )
@@ -366,7 +373,9 @@ private static  String  serverBootedOK()
     private boolean serverCameUp()
         throws Exception
     {
-        return NetworkServerTestSetup.pingForServerStart( NetworkServerTestSetup.getNetworkServerControl() );
+        return NetworkServerTestSetup.pingForServerStart(
+            NetworkServerTestSetup.getNetworkServerControl(),
+            nsTestSetup.getServerProcess());
     }
 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
index 8e0d6732..2e02ebd1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
@@ -67,6 +67,7 @@
     private final InputStream[] inputStreamHolder;
     private final String[]    systemProperties;
     private final String[]    startupArgs;
+    private Process serverProcess;
     
     /**
      * Decorator this test with the NetworkServerTestSetup
@@ -115,7 +116,7 @@ protected void setUp() throws Exception {
         networkServerController = getNetworkServerControl();
 
         if (useSeparateProcess)
-        { startSeparateProcess(); }
+        { serverProcess = startSeparateProcess(); }
         else if (asCommand)
         { startWithCommand(); }
         else
@@ -164,7 +165,7 @@ public void run() {
         }, "NetworkServerTestSetup command").start();
     }
 
-    private void startSeparateProcess() throws Exception
+    private Process startSeparateProcess() throws Exception
     {
         StringBuffer    buffer = new StringBuffer();
         String              classpath = BaseTestCase.getSystemProperty( "java.class.path" );
@@ -219,6 +220,17 @@ public Object run()
             );
 
         inputStreamHolder[ 0 ] = serverProcess.getInputStream();
+        return serverProcess;
+    }
+
+    /**
+     * Returns the <code>Process</code> object for the server process.
+     *
+     * @param a <code>Process</code> object, or <code>null</code> if the
+     * network server does not run in a separate process
+     */
+    public Process getServerProcess() {
+        return serverProcess;
     }
 
     /**
@@ -241,6 +253,11 @@ protected void tearDown() throws Exception {
             if ( serverOutput != null ) { serverOutput.close(); }
             networkServerController = null;
             serverOutput = null;
+
+            if (serverProcess != null) {
+                serverProcess.waitFor();
+                serverProcess = null;
+            }
         }
     }
     
@@ -303,8 +320,13 @@ public static void setWaitTime( long newWaitTime )
      * Ping server for upto sixty seconds. If the server responds
      * in that time then return true, otherwise return false.
      * 
+     * @param networkServerController controller object for network server
+     * @param serverProcess the external process in which the server runs
+     * (could be <code>null</code>)
+     * @return true if server responds in time, false otherwise
      */
-    public static boolean pingForServerStart(NetworkServerControl networkServerController)
+    public static boolean pingForServerStart(
+        NetworkServerControl networkServerController, Process serverProcess)
         throws InterruptedException
     {
         final long startTime = System.currentTimeMillis();
@@ -318,6 +340,26 @@ public static boolean pingForServerStart(NetworkServerControl networkServerContr
                     return false;
                 }
             }
+            if (serverProcess != null) {
+                // if the server runs in a separate process, check whether the
+                // process is still alive
+                try {
+                    int exitVal = serverProcess.exitValue();
+                    // When exitValue() returns successfully, the server
+                    // process must have terminated. No point in pinging the
+                    // server anymore.
+                    return false;
+                } catch (IllegalThreadStateException e) {
+                    // This exception is thrown by Process.exitValue() if the
+                    // process has not terminated. Keep on pinging the server.
+                }
+            }
+        }
         }
+
+    public static boolean pingForServerStart(NetworkServerControl control)
+        throws InterruptedException
+    {
+        return pingForServerStart(control, null);
     }
 }
