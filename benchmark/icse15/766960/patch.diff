diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/db/ReadCommand.java b/incubator/cassandra/trunk/src/org/apache/cassandra/db/ReadCommand.java
index 8e3f78bd..32df6019 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/db/ReadCommand.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/db/ReadCommand.java
@@ -128,7 +128,7 @@ public ReadCommand copy()
 
     public Row getRow(Table table) throws IOException, ColumnFamilyNotDefinedException
     {
-        if (columnNames != EMPTY_COLUMNS)
+        if (!columnNames.isEmpty())
         {
             return table.getRow(key, columnFamilyColumn, columnNames);
         }
diff --git a/incubator/cassandra/trunk/test/org/apache/cassandra/db/ReadMessageTest.java b/incubator/cassandra/trunk/test/org/apache/cassandra/db/ReadMessageTest.java
index d1f1a017..ca6c7e79 100644
--- a/incubator/cassandra/trunk/test/org/apache/cassandra/db/ReadMessageTest.java
+++ b/incubator/cassandra/trunk/test/org/apache/cassandra/db/ReadMessageTest.java
@@ -1,7 +1,10 @@
 package org.apache.cassandra.db;
 
+import static org.testng.Assert.assertNull;
+
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 
 import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
@@ -41,4 +44,22 @@ private ReadCommand serializeAndDeserializeReadMessage(ReadCommand rm)
         }
         return rm2;
     }
+    
+    @Test
+    public void testGetColumn() throws IOException, ColumnFamilyNotDefinedException
+    {
+        Table table = Table.open("Table1");
+        RowMutation rm;
+
+        // add data
+        rm = new RowMutation("Table1", "key1");
+        rm.add("Standard1:Column1", "abcd".getBytes(), 0);
+        rm.apply();
+
+        ReadCommand command = new ReadCommand("Table1", "key1", "Standard1:Column1", -1, Integer.MAX_VALUE);
+        Row row = command.getRow(table);
+        ColumnFamily cf = row.getColumnFamily("Standard1");
+        IColumn col = cf.getColumn("Column1");
+        assert Arrays.equals(((Column)col).value(), "abcd".getBytes());  
+    }
 }
