diff --git a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/update/PeerSync.java b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/update/PeerSync.java
index 543042c3..cfb148d5 100644
--- a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/update/PeerSync.java
+++ b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/update/PeerSync.java
@@ -291,7 +291,8 @@ private boolean handleResponse(ShardResponse srsp) {
       if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {
         Throwable solrException = ((SolrServerException) srsp.getException())
             .getRootCause();
-        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException
+        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());
+        if (connectTimeoutExceptionInChain || solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException
             || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {
           log.warn(msg() + " couldn't connect to " + srsp.getShardAddress() + ", counting as success");
 
@@ -308,6 +309,10 @@ private boolean handleResponse(ShardResponse srsp) {
         log.warn(msg() + " got a 404 from " + srsp.getShardAddress() + ", counting as success");
         return true;
       }
+      
+      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do
+      // that for these nodes
+      
       // TODO: at least log???
       // srsp.getException().printStackTrace(System.out);
      
@@ -323,6 +328,23 @@ private boolean handleResponse(ShardResponse srsp) {
     }
   }
   
+  // sometimes the root exception is a SocketTimeoutException, but ConnectTimeoutException
+  // is in the chain
+  private boolean connectTimeoutExceptionInChain(Throwable exception) {
+    Throwable t = exception;
+    while (true) {
+      if (t instanceof ConnectTimeoutException) {
+        return true;
+      }
+      Throwable cause = t.getCause();
+      if (cause != null) {
+        t = cause;
+      } else {
+        return false;
+      }
+    }
+  }
+
   private boolean handleVersions(ShardResponse srsp) {
     // we retrieved the last N updates from the replica
     List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get("versions");
diff --git a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
index 269cb9b1..d30fc89d 100644
--- a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
+++ b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
@@ -270,14 +270,6 @@ private void brindDownShardIndexSomeDocsAndRecover() throws Exception {
     // kill a shard
     CloudJettyRunner deadShard = chaosMonkey.stopShard(SHARD1, 0);
 
-
-    // we are careful to make sure the downed node is no longer in the state,
-    // because on some systems (especially freebsd w/ blackhole enabled), trying
-    // to talk to a downed node causes grief
-    Set<CloudJettyRunner> jetties = new HashSet<CloudJettyRunner>();
-    jetties.addAll(shardToJetty.get(SHARD1));
-    jetties.remove(deadShard);
-    
     // ensure shard is dead
     try {
       index_specific(deadShard.client.solrClient, id, 999, i1, 107, t1,
