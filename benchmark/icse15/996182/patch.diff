diff --git a/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/QueryComponent.java b/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/QueryComponent.java
index 4d49f2a3..1713ec8e 100644
--- a/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -20,10 +20,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queryParser.ParseException;
-import org.apache.lucene.search.FieldComparator;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.*;
 import org.apache.lucene.util.BytesRef;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.SolrDocumentList;
@@ -77,13 +74,23 @@ public void prepare(ResponseBuilder rb) throws IOException
 
     String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);
 
-    if (rb.getQueryString() == null) {
-      rb.setQueryString( params.get( CommonParams.Q ) );
+    // get it from the response builder to give a different component a chance
+    // to set it.
+    String queryString = rb.getQueryString();
+    if (queryString == null) {
+      // this is the normal way it's set.
+      queryString = params.get( CommonParams.Q );
+      rb.setQueryString(queryString);
     }
 
     try {
       QParser parser = QParser.getParser(rb.getQueryString(), defType, req);
-      rb.setQuery( parser.getQuery() );
+      Query q = parser.getQuery();
+      if (q == null) {
+        // normalize a null query to a query that matches nothing
+        q = new BooleanQuery();        
+      }
+      rb.setQuery( q );
       rb.setSortSpec( parser.getSort(true) );
       rb.setQparser(parser);
 
diff --git a/lucene/dev/trunk/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java b/lucene/dev/trunk/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
index 3a386d15..46eeca58 100644
--- a/lucene/dev/trunk/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
+++ b/lucene/dev/trunk/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
@@ -146,7 +146,8 @@ public Query parse() throws ParseException {
         altUserQuery = altQParser.getQuery();
         query.add( altUserQuery , BooleanClause.Occur.MUST );
       } else {
-        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "missing query string" );
+        return null;
+        // throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "missing query string" );
       }
     }
     else {     
diff --git a/lucene/dev/trunk/solr/src/java/org/apache/solr/search/LuceneQParserPlugin.java b/lucene/dev/trunk/solr/src/java/org/apache/solr/search/LuceneQParserPlugin.java
index 2010c966..1c2e8dad 100644
--- a/lucene/dev/trunk/solr/src/java/org/apache/solr/search/LuceneQParserPlugin.java
+++ b/lucene/dev/trunk/solr/src/java/org/apache/solr/search/LuceneQParserPlugin.java
@@ -58,6 +58,7 @@ public LuceneQParser(String qstr, SolrParams localParams, SolrParams params, Sol
 
   public Query parse() throws ParseException {
     String qstr = getString();
+    if (qstr == null) return null;
 
     String defaultField = getParam(CommonParams.DF);
     if (defaultField==null) {
@@ -74,7 +75,7 @@ public Query parse() throws ParseException {
 
 
   public String[] getDefaultHighlightFields() {
-    return new String[]{lparser.getField()};
+    return lparser == null ? new String[]{} : new String[]{lparser.getField()};
   }
   
 }
