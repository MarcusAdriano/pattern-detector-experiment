diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index 5db4cce5..2672f0e8 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -214,6 +214,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public static final int COMPILE_ONLY_MODE = 0;
 	public static final int DDL_MODE = 1;
 
+	/**
+	 * Clear the DataDictionary caches, including the sequence caches if requested..
+	 *
+	 * @exception StandardException Standard Derby error policy
+	 */
+	public void clearCaches( boolean clearSequenceCaches ) throws StandardException;
+
 	/**
 	 * Clear all of the DataDictionary caches.
 	 *
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 822e1d30..72ac27e9 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -1310,8 +1310,10 @@ public void startWriting(LanguageConnectionContext lcc)
 						/* Switch the caching mode to DDL */
 						setCacheMode(DataDictionary.DDL_MODE);
 	
-						/* Clear out all the caches */
-						clearCaches();
+						// Until we implement ALTER SEQUENCE, there should be no need
+                        // to clear the sequence cache. Always clearing the sequence cache
+                        // here gives rise to DERBY-6137.
+						clearCaches( false );
 					}
 		
 					/* Keep track of the number of DDL users */
@@ -9121,12 +9123,22 @@ protected void populateSYSDUMMY1(
 	 * @exception StandardException Standard Derby error policy
 	 */
 	public void clearCaches() throws StandardException
+	{
+        clearCaches( true );
+    }
+    
+	/**
+	 * Clear the DataDictionary caches, including the sequence caches if requested..
+	 *
+	 * @exception StandardException Standard Derby error policy
+	 */
+	public void clearCaches( boolean clearSequenceCaches ) throws StandardException
 	{
 		nameTdCache.cleanAll();
 		nameTdCache.ageOut();
 		OIDTdCache.cleanAll();
 		OIDTdCache.ageOut();
-        clearSequenceCaches();
+        if ( clearSequenceCaches ) { clearSequenceCaches(); }
 		if (spsNameCache != null)
 		{
 			//System.out.println("CLEARING SPS CACHE");
@@ -10493,7 +10505,19 @@ public Long peekAtSequence( String schemaName, String sequenceName )
                     ( schemaName + "." + sequenceName) );
         }
         
-        return ((SequenceUpdater) sequenceGeneratorCache.find( uuid )).peekAtCurrentValue();
+        SequenceUpdater sequenceUpdater = null;
+
+        try {
+            sequenceUpdater = (SequenceUpdater) sequenceGeneratorCache.find( uuid );
+            return sequenceUpdater.peekAtCurrentValue();
+        }
+        finally
+        {
+            if ( sequenceUpdater != null )
+            {
+                sequenceGeneratorCache.release( sequenceUpdater );
+            }
+        }
     }
     
     public RowLocation getRowLocationTemplate(LanguageConnectionContext lcc,
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DropSequenceConstantAction.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DropSequenceConstantAction.java
index 26c7429c..94bc32b1 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DropSequenceConstantAction.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DropSequenceConstantAction.java
@@ -91,6 +91,7 @@ public void executeConstantAction(Activation activation)
         ** the transaction.
         */
         dd.startWriting(lcc);
+        dd.clearSequenceCaches();
 
         SequenceDescriptor sequenceDescriptor = dd.getSequenceDescriptor(schemaDescriptor, sequenceName);
 
@@ -101,6 +102,5 @@ public void executeConstantAction(Activation activation)
         }
 
         sequenceDescriptor.drop(lcc);
-
     }
 }
diff --git a/db/derby/code/branches/10.10/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java b/db/derby/code/branches/10.10/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
index f3f1cdd4..91d0b6d9 100644
--- a/db/derby/code/branches/10.10/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
+++ b/db/derby/code/branches/10.10/java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java
@@ -78,6 +78,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public class EmptyDictionary implements DataDictionary, ModuleSupportable {
 
+	public void clearCaches( boolean clearSequenceCaches ) {}
+    
 	public void clearCaches() throws StandardException {
 		// Auto-generated method stub
 
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
index cbda0b16..50d7e63a 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
@@ -556,4 +556,82 @@ public void test_15_5254() throws Exception
         goodStatement( conn, "create table t_5254( cycle int, minvalue int, maxvalue int )" );
         goodStatement( conn, "drop table t_5254" );
     }
+    
+    /**
+     * Verify that trigger recompilation doesn't choke trying to create
+     * two nested writable transactions.
+     */
+    public void test_16_6137() throws Exception
+    {
+        Connection conn = openUserConnection( TEST_DBO );
+
+        goodStatement( conn, "call syscs_util.syscs_set_database_property( 'derby.language.sequence.preallocator', '2' )" );
+        goodStatement( conn, "create table t_6137( rateID int generated always as identity primary key, amount decimal( 5,2 ) )" );
+        goodStatement( conn, "create table t_history_6137( changeID int primary key, amount decimal( 5,2 ) )" );
+        goodStatement( conn, "create sequence seq_6137 start with 1" );
+        goodStatement
+            (
+             conn,
+             "create trigger trg_t_6137_hist_del\n" +
+             "after delete on t_6137\n" +
+             "referencing old row as old\n" +
+             "for each row\n" +
+             " insert into t_history_6137 ( changeID, amount ) values (( next value for seq_6137 ), old.amount )\n"
+             );
+        goodStatement( conn, "insert into t_6137( amount ) values ( 30.04 ), ( 60.04 ), ( 90.04 )" );
+
+        // invalidate the stored statements so that the trigger will have to be recompiled
+        goodStatement( conn, "call syscs_util.syscs_invalidate_stored_statements()" );
+
+        // put the sequence in the cache
+        assertResults
+            (
+             conn,
+             "values next value for seq_6137",
+             new String[][]
+             {
+                 { "1" },
+             },
+             true
+             );
+
+        // verify that the trigger recompiles and fires correctly
+        goodStatement( conn, "delete from t_6137 where rateID = 1" );
+        goodStatement( conn, "delete from t_6137 where rateID = 2" );
+        assertResults
+            (
+             conn,
+             "select * from t_history_6137 order by changeID",
+             new String[][]
+             {
+                 { "2", "30.04" },
+                 { "3", "60.04" },
+             },
+             true
+             );
+
+        // verify current value of sequence
+        String  peekAtSequence = "values syscs_util.syscs_peek_at_sequence('" + TEST_DBO + "', 'SEQ_6137')";
+        assertResults
+            (
+             conn,
+             peekAtSequence,
+             new String[][]
+             {
+                 { "4" },
+             },
+             true
+             );
+
+        // tidy up
+        goodStatement( conn, "drop trigger trg_t_6137_hist_del" );
+        goodStatement( conn, "drop table t_history_6137" );
+        goodStatement( conn, "drop table t_6137" );
+        goodStatement( conn, "drop sequence seq_6137 restrict" );
+        goodStatement( conn, "call syscs_util.syscs_set_database_property( 'derby.language.sequence.preallocator', null )" );
+
+        // verify that the uncleared cache does not leave a phantom sequence hanging around
+        expectExecutionError( conn, MISSING_OBJECT, peekAtSequence );
+        expectCompilationError( conn, OBJECT_DOES_NOT_EXIST, "values next value for seq_6137" );
+    }
 }
