diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java
index df8489c0..73b6a851 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/ModuleInstance.java
@@ -56,6 +56,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	*/
 	protected Object	service;
 
+    /** Flag that tells whether booting of the module has completed. */
+    private boolean booted;
+
 	/*
 	** Constructor
 	*/
@@ -111,4 +114,20 @@ protected Object getTopLevelService() {
 	protected Object getInstance() {
 		return instance;
 	}
+
+    /**
+     * Set a flag that indicates that booting of the module has completed.
+     */
+    synchronized void setBooted() {
+        booted = true;
+    }
+
+    /**
+     * Check whether booting of the module has completed.
+     * @return {@code true} if the module has been booted, or {@code false}
+     * otherwise
+     */
+    synchronized boolean isBooted() {
+        return booted;
+    }
 }
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/TopService.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/TopService.java
index e243bda9..6b4b489d 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/TopService.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/services/monitor/TopService.java
@@ -255,6 +255,16 @@ Object bootModule(boolean create, Object service, ProtocolKey key, Properties pr
 			for (int i = 0; i < moduleInstances.size(); i++) {
 				ModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);
 
+                // DERBY-2074: The module has not been properly booted, so we
+                // cannot yet determine whether or not this is a module we can
+                // use. Assume that we cannot use it and continue looking. We
+                // may end up booting the module twice if the assumption
+                // doesn't hold, but we'll detect and resolve that later when
+                // we call addToProtocol().
+                if (!module.isBooted()) {
+                    continue;
+                }
+
 				if (!module.isTypeAndName((PersistentService) null, key.getFactoryInterface(), key.getIdentifier()))
 					continue;
 
@@ -294,6 +304,8 @@ Object bootModule(boolean create, Object service, ProtocolKey key, Properties pr
 			throw se;
 		}
 
+        module.setBooted();
+
 		synchronized (this) {
 
 
