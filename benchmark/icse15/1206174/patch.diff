diff --git a/lucene/dev/trunk/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java b/lucene/dev/trunk/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
index b0dc0cfd..daa7c607 100644
--- a/lucene/dev/trunk/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
+++ b/lucene/dev/trunk/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
@@ -29,6 +29,7 @@
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 
 /**
  * <code>FieldTermStack</code> is a stack that keeps query terms in the specified field
@@ -95,7 +96,8 @@ public FieldTermStack( IndexReader reader, int docId, String fieldName, final Fi
     DocsAndPositionsEnum dpEnum = null;
     BytesRef text;
     while ((text = termsEnum.next()) != null) {
-      final String term = text.utf8ToChars(spare).toString();
+      UnicodeUtil.UTF8toUTF16(text, spare);
+      final String term = spare.toString();
       if (!termSet.contains(term)) {
         continue;
       }
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/BytesRef.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/BytesRef.java
index 11a9e84a..bad3d8a3 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/BytesRef.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/BytesRef.java
@@ -166,12 +166,6 @@ public String utf8ToString() {
     return ref.toString(); 
   }
   
-  /** Interprets stored bytes as UTF8 bytes into the given {@link CharsRef} */
-  public CharsRef utf8ToChars(CharsRef ref) {
-    UnicodeUtil.UTF8toUTF16(bytes, offset, length, ref);
-    return ref;
-  }
-
   /** Returns hex encoded bytes, eg [0x6c 0x75 0x63 0x65 0x6e 0x65] */
   @Override
   public String toString() {
diff --git a/lucene/dev/trunk/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java b/lucene/dev/trunk/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
index 92098e9f..e01980d0 100644
--- a/lucene/dev/trunk/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
+++ b/lucene/dev/trunk/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
@@ -25,6 +25,7 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.core.StopFilter;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.Version;
 import org.apache.lucene.util.BytesRef;
 
@@ -158,7 +159,8 @@ public QueryAutoStopWordAnalyzer(
         BytesRef text;
         while ((text = te.next()) != null) {
           if (te.docFreq() > maxDocFreq) {
-            stopWords.add(text.utf8ToChars(spare).toString());
+            UnicodeUtil.UTF8toUTF16(text, spare);
+            stopWords.add(spare.toString());
           }
         }
       }
diff --git a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java
index c74e0734..7e0bf927 100644
--- a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java
+++ b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java
@@ -25,6 +25,7 @@
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueStr;
 
@@ -77,7 +78,7 @@ public String strVal(int doc) {
     int ord=termsIndex.getOrd(doc);
     if (ord==0) return null;
     termsIndex.lookup(ord, spare);
-    spare.utf8ToChars(spareChars);
+    UnicodeUtil.UTF8toUTF16(spare, spareChars);
     return spareChars.toString();
   }
 
diff --git a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
index ee9582d1..bea471ae 100644
--- a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
+++ b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
@@ -34,6 +34,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.PriorityQueue;
+import org.apache.lucene.util.UnicodeUtil;
 
 
 /**
@@ -740,7 +741,8 @@ private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) thro
     final CharsRef spare = new CharsRef();
     BytesRef text;
     while((text = termsEnum.next()) != null) {
-      final String term = text.utf8ToChars(spare).toString();
+      UnicodeUtil.UTF8toUTF16(text, spare);
+      final String term = spare.toString();
       if (isNoiseWord(term)) {
         continue;
       }
diff --git a/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java b/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
index 7c6e71ea..b91ea35f 100644
--- a/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
+++ b/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
@@ -36,6 +36,7 @@
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.automaton.LevenshteinAutomata;
 
 /**
@@ -371,7 +372,10 @@ public void setDistance(StringDistance distance) {
     int index = suggestions.length - 1;
     for (ScoreTerm s : terms) {
       SuggestWord suggestion = new SuggestWord();
-      suggestion.string = s.termAsString != null ? s.termAsString : s.term.utf8ToChars(spare).toString();
+      if (s.termAsString == null) {
+        UnicodeUtil.UTF8toUTF16(s.term, spare);
+        s.termAsString = spare.toString();
+      }
       suggestion.score = s.score;
       suggestion.freq = s.docfreq;
       suggestions[index--] = suggestion;
@@ -428,7 +432,8 @@ public void setDistance(StringDistance distance) {
         // undo FuzzyTermsEnum's scale factor for a real scaled lev score
         score = boost / e.getScaleFactor() + e.getMinSimilarity();
       } else {
-        termAsString = candidateTerm.utf8ToChars(spare).toString();
+        UnicodeUtil.UTF8toUTF16(candidateTerm, spare);
+        termAsString = spare.toString();
         score = distance.getDistance(term.text(), termAsString);
       }
       
diff --git a/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java b/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
index f339924c..c8672538 100644
--- a/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
+++ b/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
@@ -26,6 +26,7 @@
 import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.UnicodeUtil;
 
 /**
  * HighFrequencyDictionary: terms taken from the given field
@@ -89,7 +90,12 @@ public String next() {
       }
       hasNextCalled = false;
 
-      return (actualTerm != null) ? actualTerm.utf8ToChars(spare).toString() : null;
+      if (actualTerm == null) {
+        return null;
+      } else {
+        UnicodeUtil.UTF8toUTF16(actualTerm, spare);
+        return spare.toString();
+      }
     }
 
     public boolean hasNext() {
diff --git a/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java b/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java
index 3f0d56cc..894dc0cf 100644
--- a/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java
+++ b/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java
@@ -24,6 +24,7 @@
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.MultiFields;
 
@@ -75,7 +76,7 @@ public String next() {
         return null;
       }
 
-      final String result = pendingTerm.utf8ToChars(spare).toString();
+      UnicodeUtil.UTF8toUTF16(pendingTerm, spare);
 
       try {
         pendingTerm = termsEnum.next();
@@ -83,7 +84,7 @@ public String next() {
         throw new RuntimeException(e);
       }
 
-      return result;
+      return spare.toString();
     }
 
     public boolean hasNext() {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
index 56660898..841dbf26 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
@@ -48,6 +48,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.PriorityQueue;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.solr.analysis.CharFilterFactory;
 import org.apache.solr.analysis.TokenFilterFactory;
 import org.apache.solr.analysis.TokenizerChain;
@@ -273,7 +274,8 @@ private static String getFieldFlags( SchemaField f )
             BytesRef text;
             while((text = termsEnum.next()) != null) {
               final int freq = (int) termsEnum.totalTermFreq();
-              tfv.add( text.utf8ToChars(spare).toString(), freq );
+              UnicodeUtil.UTF8toUTF16(text, spare);
+              tfv.add(spare.toString(), freq);
             }
             f.add( "termVector", tfv );
           }
@@ -649,7 +651,8 @@ protected final boolean lessThan(Object a, Object b) {
         TermsEnum termsEnum = terms.iterator(null);
         BytesRef text;
         while((text = termsEnum.next()) != null) {
-          String t = text.utf8ToChars(spare).toString();
+          UnicodeUtil.UTF8toUTF16(text, spare);
+          String t = spare.toString();
   
           // Compute distinct terms for every field
           TopTermQueue tiq = info.get( field );
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 98618605..1b110d23 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -30,6 +30,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.ReaderUtil;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.solr.cloud.CloudDescriptor;
 import org.apache.solr.cloud.ZkController;
 import org.apache.solr.common.SolrDocument;
@@ -605,7 +606,8 @@ protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher)
           // String field in Lucene, which returns the terms
           // data as BytesRef:
           if (val instanceof BytesRef) {
-            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());
+            UnicodeUtil.UTF8toUTF16((BytesRef)val, spare);
+            field.setValue(spare.toString());
             val = ft.toObject(field);
           }
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java
index 24d982b3..8dfebd9a 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java
@@ -366,7 +366,8 @@ public boolean collect(BytesRef term, int count) {
       // NOTE: we use c>min rather than c>=min as an optimization because we are going in
       // index order, so we already know that the keys are ordered.  This can be very
       // important if a lot of the counts are repeated (like zero counts would be).
-      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));
+      UnicodeUtil.UTF8toUTF16(term, spare);
+      queue.add(new SimpleFacets.CountPair<String,Integer>(spare.toString(), count));
       if (queue.size()>=maxsize) min=queue.last().val;
     }
     return false;
@@ -414,7 +415,8 @@ public boolean collect(BytesRef term, int count) {
     }
 
     if (limit > 0) {
-      res.add(term.utf8ToChars(spare).toString(), count);
+      UnicodeUtil.UTF8toUTF16(term, spare);
+      res.add(spare.toString(), count);
       limit--;
     }
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/DateField.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/DateField.java
index 7eb44305..530169a8 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/DateField.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/DateField.java
@@ -28,6 +28,7 @@
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.util.DateUtil;
 import org.apache.solr.request.SolrQueryRequest;
@@ -205,7 +206,7 @@ public String indexedToReadable(String indexedForm) {
 
   @Override
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
-    input.utf8ToChars(charsRef);
+    UnicodeUtil.UTF8toUTF16(input, charsRef);
     charsRef.append(Z_ARRAY, 0, 1);
     return charsRef;
   }
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java
index 2bdbeef0..77214b01 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java
@@ -349,7 +349,7 @@ public String indexedToReadable(String indexedForm) {
 
   /** Given an indexed term, append the human readable representation*/
   public CharsRef indexedToReadable(BytesRef input, CharsRef output) {
-    input.utf8ToChars(output);
+    UnicodeUtil.UTF8toUTF16(input, output);
     return output;
   }
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
index 32da3f95..9bd93499 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
@@ -24,6 +24,7 @@
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueDouble;
 import org.apache.solr.search.QParser;
@@ -79,7 +80,7 @@ public String indexedToReadable(String indexedForm) {
   @Override
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
     // TODO: this could be more efficient, but the sortable types should be deprecated instead
-    input.utf8ToChars(charsRef);
+    UnicodeUtil.UTF8toUTF16(input, charsRef);
     final char[] indexedToReadable = indexedToReadable(charsRef.toString()).toCharArray();
     charsRef.copyChars(indexedToReadable, 0, indexedToReadable.length);
     return charsRef;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
index a3a739b0..1ed0edf5 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
@@ -24,6 +24,7 @@
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueFloat;
 import org.apache.solr.search.QParser;
@@ -78,7 +79,8 @@ public String indexedToReadable(String indexedForm) {
 
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
     // TODO: this could be more efficient, but the sortable types should be deprecated instead
-    final char[] indexedToReadable = indexedToReadable(input.utf8ToChars(charsRef).toString()).toCharArray();
+    UnicodeUtil.UTF8toUTF16(input, charsRef);
+    final char[] indexedToReadable = indexedToReadable(charsRef.toString()).toCharArray();
     charsRef.copyChars(indexedToReadable, 0, indexedToReadable.length);
     return charsRef;
   }
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableIntField.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
index d8c6a35a..834bd645 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
@@ -24,6 +24,7 @@
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueInt;
 import org.apache.solr.search.QParser;
@@ -76,7 +77,8 @@ public String indexedToReadable(String indexedForm) {
 
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
     // TODO: this could be more efficient, but the sortable types should be deprecated instead
-    final char[] indexedToReadable = indexedToReadable(input.utf8ToChars(charsRef).toString()).toCharArray();
+    UnicodeUtil.UTF8toUTF16(input, charsRef);
+    final char[] indexedToReadable = indexedToReadable(charsRef.toString()).toCharArray();
     charsRef.copyChars(indexedToReadable, 0, indexedToReadable.length);
     return charsRef;
   }
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableLongField.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
index 50feceb7..0e0b3a52 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
@@ -24,6 +24,7 @@
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueLong;
 import org.apache.solr.search.QParser;
@@ -68,7 +69,8 @@ public String indexedToReadable(String indexedForm) {
 
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
     // TODO: this could be more efficient, but the sortable types should be deprecated instead
-    final char[] indexedToReadable = indexedToReadable(input.utf8ToChars(charsRef).toString()).toCharArray();
+    UnicodeUtil.UTF8toUTF16(input, charsRef);
+    final char[] indexedToReadable = indexedToReadable(charsRef.toString()).toCharArray();
     charsRef.copyChars(indexedToReadable, 0, indexedToReadable.length);
     return charsRef;
   }
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
index 8225d87e..2cb61f3a 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
@@ -21,6 +21,7 @@
 import org.apache.lucene.search.grouping.SearchGroup;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.SchemaField;
@@ -99,7 +100,8 @@ private NamedList serializeSearchGroup(Collection<SearchGroup<BytesRef>> data, S
         if (field != null) {
           FieldType fieldType = field.getType();
           if (sortValue instanceof BytesRef) {
-            String indexedValue = ((BytesRef) sortValue).utf8ToChars(spare).toString();
+            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);
+            String indexedValue = spare.toString();
             sortValue = (Comparable) fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));
           } else if (sortValue instanceof String) {
             sortValue = (Comparable) fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
index 471451e7..dd396305 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
@@ -27,6 +27,7 @@
 import org.apache.lucene.search.grouping.TopGroups;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.UnicodeUtil;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.handler.component.ResponseBuilder;
 import org.apache.solr.handler.component.ShardDoc;
@@ -200,7 +201,8 @@ protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField gro
           if (field != null) {
             FieldType fieldType = field.getType();
             if (sortValue instanceof BytesRef) {
-              String indexedValue = ((BytesRef) sortValue).utf8ToChars(spare).toString();
+              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);
+              String indexedValue = spare.toString();
               sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));
             } else if (sortValue instanceof String) {
               sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));
@@ -252,7 +254,8 @@ protected NamedList serializeTopDocs(QueryCommandResult result) throws IOExcepti
         if (field != null) {
           FieldType fieldType = field.getType();
           if (sortValue instanceof BytesRef) {
-            String indexedValue = ((BytesRef) sortValue).utf8ToChars(spare).toString();
+            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);
+            String indexedValue = spare.toString();
             sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));
           } else if (sortValue instanceof String) {
             sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));
