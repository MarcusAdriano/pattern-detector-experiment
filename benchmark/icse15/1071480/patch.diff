diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java
index 8ebe95da..197acacb 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java
@@ -85,6 +85,7 @@ static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldTy
     //Just set these, delegate everything else to the field type
     props.put("indexed", "true");
     props.put("stored", "false");
+    props.put("multiValued", "false");
     int p = SchemaField.calcProps(name, type, props);
     SchemaField proto = SchemaField.create(name,
             type, p, null);
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/BoolField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/BoolField.java
index 2b549486..b72ba85c 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/BoolField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/BoolField.java
@@ -18,6 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.OrdFieldSource;
 import org.apache.lucene.analysis.Analyzer;
@@ -46,7 +47,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new OrdFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ByteField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ByteField.java
index 50d58d18..8ae5d265 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ByteField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ByteField.java
@@ -23,6 +23,7 @@
 import org.apache.solr.response.XMLWriter;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.ByteFieldSource;
+import org.apache.solr.search.QParser;
 
 import java.io.IOException;
 import java.util.Map;
@@ -44,7 +45,8 @@ public SortField getSortField(SchemaField field, boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new ByteFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DateField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DateField.java
index dbe360e9..a357deef 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DateField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DateField.java
@@ -212,11 +212,6 @@ public SortField getSortField(SchemaField field,boolean reverse) {
     return getStringSort(field,reverse);
   }
 
-  @Override
-  public ValueSource getValueSource(SchemaField field) {
-    return new OrdFieldSource(field.name);
-  }
-
   @Override
   public void write(XMLWriter xmlWriter, String name, Fieldable f) throws IOException {
     xmlWriter.writeDate(name, toExternal(f));
@@ -406,6 +401,7 @@ protected DateFormat initialValue() {
 
   @Override
   public ValueSource getValueSource(SchemaField field, QParser parser) {
+    field.checkFieldCacheSource(parser);
     return new DateFieldSource(field.getName(), field.getType());
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DoubleField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DoubleField.java
index 1d89610c..cf478f21 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DoubleField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/DoubleField.java
@@ -23,6 +23,7 @@
 import org.apache.solr.response.XMLWriter;
 import org.apache.solr.search.function.DoubleFieldSource;
 import org.apache.solr.search.function.ValueSource;
+import org.apache.solr.search.QParser;
 
 import java.io.IOException;
 import java.util.Map;
@@ -44,8 +45,8 @@ public SortField getSortField(SchemaField field, boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
-    // fieldCache doesn't support double
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new DoubleFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FieldType.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FieldType.java
index 81447ec3..5823fef7 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FieldType.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FieldType.java
@@ -480,7 +480,8 @@ protected SortField getStringSort(SchemaField field, boolean reverse) {
    *  Lucene FieldCache.)
    */
   public ValueSource getValueSource(SchemaField field, QParser parser) {
-    return getValueSource(field);
+    field.checkFieldCacheSource(parser);
+    return new OrdFieldSource(field.name);
   }
 
 
@@ -489,7 +490,7 @@ public ValueSource getValueSource(SchemaField field, QParser parser) {
    */
   @Deprecated
   public ValueSource getValueSource(SchemaField field) {
-    return new OrdFieldSource(field.name);
+    return getValueSource(field,null);
   }
 
   /**
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FloatField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FloatField.java
index 136c3938..baee9f52 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FloatField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/FloatField.java
@@ -18,6 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FloatFieldSource;
 import org.apache.lucene.document.Fieldable;
@@ -42,7 +43,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new FloatFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/GeoHashField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/GeoHashField.java
index ea418f83..7f6c26e2 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/GeoHashField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/GeoHashField.java
@@ -104,6 +104,7 @@ public String toInternal(String val) {
 
   @Override
   public ValueSource getValueSource(SchemaField field, QParser parser) {
+    field.checkFieldCacheSource(parser);
     return new StrFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/IntField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/IntField.java
index 57698392..2a4581af 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/IntField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/IntField.java
@@ -18,6 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.IntFieldSource;
 import org.apache.lucene.document.Fieldable;
@@ -42,7 +43,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new IntFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/LongField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/LongField.java
index 83c65eac..3432128a 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/LongField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/LongField.java
@@ -23,6 +23,7 @@
 import org.apache.solr.response.XMLWriter;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.LongFieldSource;
+import org.apache.solr.search.QParser;
 
 import java.io.IOException;
 import java.util.Map;
@@ -44,8 +45,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
-
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new LongFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SchemaField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SchemaField.java
index 0c117956..15dc38a0 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SchemaField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SchemaField.java
@@ -22,6 +22,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 
 import org.apache.solr.response.TextResponseWriter;
 import org.apache.solr.response.XMLWriter;
@@ -139,8 +140,8 @@ public SortField getSortField(boolean top) {
 
   /** 
    * Sanity checks that the properties of this field type are plausible 
-   * for a field that may be used in sorting, throwing an appropraite 
-   * exception (including hte field name) if it is not.  FieldType subclasses 
+   * for a field that may be used in sorting, throwing an appropriate 
+   * exception (including the field name) if it is not.  FieldType subclasses 
    * can choose to call this method in their getSortField implementation
    * @see FieldType#getSortField
    */
@@ -158,6 +159,27 @@ public void checkSortability() throws SolrException {
     
   }
 
+  /** 
+   * Sanity checks that the properties of this field type are plausible 
+   * for a field that may be used to get a FieldCacheSource, throwing 
+   * an appropriate exception (including the field name) if it is not.  
+   * FieldType subclasses can choose to call this method in their 
+   * getValueSource implementation 
+   * @see FieldType#getValueSource
+   */
+  public void checkFieldCacheSource(QParser parser) throws SolrException {
+    if (! indexed() ) {
+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
+                              "can not use FieldCache on unindexed field: " 
+                              + getName());
+    }
+    if ( multiValued() ) {
+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
+                              "can not use FieldCache on multivalued field: " 
+                              + getName());
+    }
+    
+  }
 
   static SchemaField create(String name, FieldType ft, Map<String,String> props) {
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ShortField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ShortField.java
index 54d08371..33a9e7b2 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ShortField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/ShortField.java
@@ -23,6 +23,7 @@
 import org.apache.solr.response.XMLWriter;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.ShortFieldSource;
+import org.apache.solr.search.QParser;
 
 import java.io.IOException;
 import java.util.Map;
@@ -47,8 +48,8 @@ public SortField getSortField(SchemaField field, boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
-
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new ShortFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableDoubleField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
index ed27dd2c..ff080888 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
@@ -18,6 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
 import org.apache.solr.search.function.DocValues;
@@ -44,7 +45,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new SortableDoubleFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableFloatField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableFloatField.java
index b6679219..4182b6b7 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableFloatField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableFloatField.java
@@ -18,6 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
 import org.apache.solr.search.function.DocValues;
@@ -44,7 +45,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new SortableFloatFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableIntField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableIntField.java
index da9f0aa4..bb5b18f1 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableIntField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableIntField.java
@@ -18,6 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
 import org.apache.solr.search.function.DocValues;
@@ -44,7 +45,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new SortableIntFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableLongField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableLongField.java
index 5c5b756b..d47ee28f 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableLongField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/SortableLongField.java
@@ -18,6 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.search.SortField;
+import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
 import org.apache.solr.search.function.DocValues;
@@ -44,7 +45,8 @@ public SortField getSortField(SchemaField field,boolean reverse) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+    public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     return new SortableLongFieldSource(field.name);
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/StrField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/StrField.java
index e63aa2c5..d688b290 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/StrField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/StrField.java
@@ -56,6 +56,7 @@ public void write(TextResponseWriter writer, String name, Fieldable f) throws IO
 
   @Override
   public ValueSource getValueSource(SchemaField field, QParser parser) {
+    field.checkFieldCacheSource(parser);
     return new StrFieldSource(field.getName());
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieDateField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieDateField.java
index fb1e2ba1..a37ae6ee 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieDateField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieDateField.java
@@ -74,14 +74,11 @@ public SortField getSortField(SchemaField field, boolean top) {
     return new SortField(field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, top);
   }
 
-  @Override
-  public ValueSource getValueSource(SchemaField field) {
-    return new TrieDateFieldSource(field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER);
-  }
-
   @Override
   public ValueSource getValueSource(SchemaField field, QParser parser) {
+    field.checkFieldCacheSource(parser);
     return new TrieDateFieldSource(field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER);
+
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieField.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieField.java
index 6427b7d2..1374805b 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieField.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/schema/TrieField.java
@@ -132,7 +132,8 @@ public SortField getSortField(SchemaField field, boolean top) {
   }
 
   @Override
-  public ValueSource getValueSource(SchemaField field) {
+  public ValueSource getValueSource(SchemaField field, QParser qparser) {
+    field.checkFieldCacheSource(qparser);
     switch (type) {
       case INTEGER:
         return new IntFieldSource(field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER);
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java
index e1bf9c5c..6601c210 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java
@@ -102,10 +102,10 @@ public void testSort() throws Exception {
     assertEquals(flds[0].getField(), "pow(float(weight),const(2.0))");
     
     //test functions (more deep)
-    sort = QueryParsing.parseSort("sum(product(r_f,sum(d_f,t_f,1)),a_f) asc", req);
+    sort = QueryParsing.parseSort("sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.CUSTOM);
-    assertEquals(flds[0].getField(), "sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))");
+    assertEquals(flds[0].getField(), "sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))");
 
     sort = QueryParsing.parseSort("pow(weight,                 2)         desc", req);
     flds = sort.getSort();
@@ -135,11 +135,11 @@ public void testSort() throws Exception {
     assertEquals(flds[0].getField(), "weight");
 
     //Test literals in functions
-    sort = QueryParsing.parseSort("strdist(foo_s, \"junk\", jw) desc", req);
+    sort = QueryParsing.parseSort("strdist(foo_s1, \"junk\", jw) desc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.CUSTOM);
     //the value sources get wrapped, so the out field is different than the input
-    assertEquals(flds[0].getField(), "strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)");
+    assertEquals(flds[0].getField(), "strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)");
 
     sort = QueryParsing.parseSort("", req);
     assertNull(sort);
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java
index 4f111d80..0348bbab 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java
@@ -86,7 +86,6 @@ public void testQueryTypes() {
               ,"//*[@name='id'][.='999.0']"
               ,"//*[@name='" + f + "'][.='" + v + "']"
               );
-      // System.out.println("#########################################" + f + "=" + v);
 
       // field qparser
       assertQ(req( "q", "{!field f="+f+"}"+v)
@@ -97,6 +96,22 @@ public void testQueryTypes() {
       assertQ(req( "q", f + ":[\"" + v + "\" TO \"" + v + "\"]" )
               ,"//result[@numFound='1']"
               );
+    }
+
+    // frange and function query only work on single valued field types
+    Object[] fc_vals = new Object[] {
+      "id",999.0
+      ,"v_s","wow dude"
+      ,"v_ti",-1
+      ,"v_tl",-1234567891234567890L
+      ,"v_tf",-2.0f
+      ,"v_td",-2.0
+      ,"v_tdt","2000-05-10T01:01:01Z"
+    };
+    
+    for (int i=0; i<fc_vals.length; i+=2) {
+      String f = fc_vals[i].toString();
+      String v = fc_vals[i+1].toString();
 
       // frange qparser
       assertQ(req( "q", "{!frange v="+f+" l='"+v+"' u='"+v+"'}" )
@@ -107,10 +122,8 @@ public void testQueryTypes() {
        assertQ(req( "q", "+id:999 _val_:\"" + f + "\"")
             ,"//result[@numFound='1']"
         );
-
     }
 
-
     // Some basic tests to ensure that parsing local params is working
     assertQ("test prefix query",
             req("q","{!prefix f=v_t}hel")
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/SortByFunctionTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/SortByFunctionTest.java
index 448c834e..323fcd04 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/SortByFunctionTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/SortByFunctionTest.java
@@ -35,10 +35,10 @@ public String getSolrConfigFile() {
   }
 
   public void test() throws Exception {
-    assertU(adoc("id", "1", "x_td", "0", "y_td", "2", "w_td1", "25", "z_td", "5", "f_t", "ipod"));
-    assertU(adoc("id", "2", "x_td", "2", "y_td", "2", "w_td1", "15", "z_td", "5", "f_t", "ipod ipod ipod ipod ipod"));
-    assertU(adoc("id", "3", "x_td", "3", "y_td", "2", "w_td1", "55", "z_td", "5", "f_t", "ipod ipod ipod ipod ipod ipod ipod ipod ipod"));
-    assertU(adoc("id", "4", "x_td", "4", "y_td", "2", "w_td1", "45", "z_td", "5", "f_t", "ipod ipod ipod ipod ipod ipod ipod"));
+    assertU(adoc("id", "1", "x_td1", "0", "y_td1", "2", "w_td1", "25", "z_td1", "5", "f_t", "ipod"));
+    assertU(adoc("id", "2", "x_td1", "2", "y_td1", "2", "w_td1", "15", "z_td1", "5", "f_t", "ipod ipod ipod ipod ipod"));
+    assertU(adoc("id", "3", "x_td1", "3", "y_td1", "2", "w_td1", "55", "z_td1", "5", "f_t", "ipod ipod ipod ipod ipod ipod ipod ipod ipod"));
+    assertU(adoc("id", "4", "x_td1", "4", "y_td1", "2", "w_td1", "45", "z_td1", "5", "f_t", "ipod ipod ipod ipod ipod ipod ipod"));
     assertU(commit());
 
     assertQ(req("fl", "*,score", "q", "*:*"),
@@ -66,7 +66,7 @@ public void test() throws Exception {
     );
 
 
-    assertQ(req("fl", "*,score", "q", "*:*", "sort", "sum(x_td, y_td) desc"),
+    assertQ(req("fl", "*,score", "q", "*:*", "sort", "sum(x_td1, y_td1) desc"),
             "//*[@numFound='4']",
             "//float[@name='score']='1.0'",
             "//result/doc[1]/int[@name='id'][.='4']",
@@ -74,7 +74,7 @@ public void test() throws Exception {
             "//result/doc[3]/int[@name='id'][.='2']",
             "//result/doc[4]/int[@name='id'][.='1']"
     );
-    assertQ(req("fl", "*,score", "q", "*:*", "sort", "sum(x_td, y_td) asc"),
+    assertQ(req("fl", "*,score", "q", "*:*", "sort", "sum(x_td1, y_td1) asc"),
             "//*[@numFound='4']",
             "//float[@name='score']='1.0'",
             "//result/doc[1]/int[@name='id'][.='1']",
@@ -83,7 +83,7 @@ public void test() throws Exception {
             "//result/doc[4]/int[@name='id'][.='4']"
     );
     //the function is equal, w_td1 separates
-    assertQ(req("q", "*:*", "fl", "id", "sort", "sum(z_td, y_td) asc, w_td1 asc"),
+    assertQ(req("q", "*:*", "fl", "id", "sort", "sum(z_td1, y_td1) asc, w_td1 asc"),
             "//*[@numFound='4']",
             "//result/doc[1]/int[@name='id'][.='2']",
             "//result/doc[2]/int[@name='id'][.='1']",
@@ -92,7 +92,3 @@ public void test() throws Exception {
     );
   }
 }
-
-/*
-<lst name="responseHeader"><int name="status">0</int><int name="QTime">93</int></lst><result name="response" numFound="4" start="0" maxScore="1.0"><doc><float name="score">1.0</float><int name="id">4</int><int name="intDefault">42</int><arr name="multiDefault"><str>muLti-Default</str></arr><date name="timestamp">2009-12-12T12:59:46.412Z</date><arr name="x_td"><double>4.0</double></arr><arr name="y_td"><double>2.0</double></arr></doc><doc><float name="score">1.0</float><int name="id">3</int><int name="intDefault">42</int><arr name="multiDefault"><str>muLti-Default</str></arr><date name="timestamp">2009-12-12T12:59:46.409Z</date><arr name="x_td"><double>3.0</double></arr><arr name="y_td"><double>2.0</double></arr></doc><doc><float name="score">1.0</float><int name="id">2</int><int name="intDefault">42</int><arr name="multiDefault"><str>muLti-Default</str></arr><date name="timestamp">2009-12-12T12:59:46.406Z</date><arr name="x_td"><double>2.0</double></arr><arr name="y_td"><double>2.0</double></arr></doc><doc><float name="score">1.0</float><int name="id">1</int><int name="intDefault">42</int><arr name="multiDefault"><str>muLti-Default</str></arr><date name="timestamp">2009-12-12T12:59:46.361Z</date><arr name="x_td"><double>0.0</double></arr><arr name="y_td"><double>2.0</double></arr></doc></result>
-*/
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java
index d47822d9..b5bf8fb8 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java
@@ -36,12 +36,12 @@ public static void beforeClass() throws Exception {
   @Test
   public void testHaversine() throws Exception {
     clearIndex();
-    assertU(adoc("id", "1", "x_td", "0", "y_td", "0", "gh_s", GeoHashUtils.encode(32.7693246, -79.9289094)));
-    assertU(adoc("id", "2", "x_td", "0", "y_td", String.valueOf(Math.PI / 2), "gh_s", GeoHashUtils.encode(32.7693246, -78.9289094)));
-    assertU(adoc("id", "3", "x_td", String.valueOf(Math.PI / 2), "y_td", String.valueOf(Math.PI / 2), "gh_s", GeoHashUtils.encode(32.7693246, -80.9289094)));
-    assertU(adoc("id", "4", "x_td", String.valueOf(Math.PI / 4), "y_td", String.valueOf(Math.PI / 4), "gh_s", GeoHashUtils.encode(32.7693246, -81.9289094)));
+    assertU(adoc("id", "1", "x_td", "0", "y_td", "0", "gh_s1", GeoHashUtils.encode(32.7693246, -79.9289094)));
+    assertU(adoc("id", "2", "x_td", "0", "y_td", String.valueOf(Math.PI / 2), "gh_s1", GeoHashUtils.encode(32.7693246, -78.9289094)));
+    assertU(adoc("id", "3", "x_td", String.valueOf(Math.PI / 2), "y_td", String.valueOf(Math.PI / 2), "gh_s1", GeoHashUtils.encode(32.7693246, -80.9289094)));
+    assertU(adoc("id", "4", "x_td", String.valueOf(Math.PI / 4), "y_td", String.valueOf(Math.PI / 4), "gh_s1", GeoHashUtils.encode(32.7693246, -81.9289094)));
     assertU(adoc("id", "5", "x_td", "45.0", "y_td", "45.0",
-            "gh_s", GeoHashUtils.encode(32.7693246, -81.9289094)));
+            "gh_s1", GeoHashUtils.encode(32.7693246, -81.9289094)));
     assertU(adoc("id", "6", "point_hash", "32.5, -79.0", "point", "32.5, -79.0"));
     assertU(adoc("id", "7", "point_hash", "32.6, -78.0", "point", "32.6, -78.0"));
     assertU(commit());
@@ -56,7 +56,7 @@ public void testHaversine() throws Exception {
     
     //Geo Hash Haversine
     //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close
-    assertQ(req("fl", "*,score", "q", "{!func}ghhsin(" + DistanceUtils.EARTH_MEAN_RADIUS_KM + ", gh_s, \"" + GeoHashUtils.encode(32, -79) +
+    assertQ(req("fl", "*,score", "q", "{!func}ghhsin(" + DistanceUtils.EARTH_MEAN_RADIUS_KM + ", gh_s1, \"" + GeoHashUtils.encode(32, -79) +
             "\",)", "fq", "id:1"), "//float[@name='score']='122.171875'");
 
     assertQ(req("fl", "id,point_hash,score", "q", "{!func}recip(ghhsin(" + DistanceUtils.EARTH_MEAN_RADIUS_KM + ", point_hash, \"" + GeoHashUtils.encode(32, -79) + "\"), 1, 1, 0)"),
@@ -66,7 +66,7 @@ public void testHaversine() throws Exception {
             );
 
 
-    assertQ(req("fl", "*,score", "q", "{!func}ghhsin(" + DistanceUtils.EARTH_MEAN_RADIUS_KM + ", gh_s, geohash(32, -79))", "fq", "id:1"), "//float[@name='score']='122.171875'");
+    assertQ(req("fl", "*,score", "q", "{!func}ghhsin(" + DistanceUtils.EARTH_MEAN_RADIUS_KM + ", gh_s1, geohash(32, -79))", "fq", "id:1"), "//float[@name='score']='122.171875'");
   }
 
 
