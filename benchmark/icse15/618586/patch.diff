diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index b9c062e8..f8bcf491 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -112,6 +112,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	private boolean orderByAndDistinctMerged;
 
+	boolean originalWhereClauseHadSubqueries;
+	
 	/* Copy of fromList prior to generating join tree */
 	private FromList preJoinFL;
 
@@ -138,6 +140,16 @@ public void init(Object selectList,
 		this.groupByList = (GroupByList) groupByList;
 		this.havingClause = (ValueNode)havingClause;
 		bindTargetListOnly = false;
+		
+		this.originalWhereClauseHadSubqueries = false;
+		if (this.whereClause != null){
+			CollectNodesVisitor cnv = 
+				new CollectNodesVisitor(SubqueryNode.class, SubqueryNode.class);
+			this.whereClause.accept(cnv);
+			if (!cnv.getList().isEmpty()){
+				this.originalWhereClauseHadSubqueries = true;
+			}
+		}
 	}
 
 	/**
@@ -868,6 +880,13 @@ public ResultSetNode preprocess(int numTables,
 		 */
 		if (whereClause != null)
 		{
+			// DERBY-3301
+			// Mark subqueries that are part of the where clause as such so
+			// that we can avoid flattening later, particularly for nested 
+			// WHERE EXISTS subqueries.
+			if (whereSubquerys != null){
+				whereSubquerys.markWhereSubqueries();
+			}
 			whereClause.preprocess(numTables,
 								   fromList, whereSubquerys,
 								   wherePredicates);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
index 12db2678..65cc984b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
@@ -255,5 +255,20 @@ public void markHavingSubqueries() {
 	        subqueryNode.setHavingSubquery(true);
 	    }
 	}
+
+	/**
+	 * Mark all of the subqueries in this list as being part of a where clause
+	 * so we can avoid flattening later if needed.
+	 */
+	public void markWhereSubqueries() {
+		int size = size();
+		for (int index = 0; index < size; index++)
+		{
+			SubqueryNode    subqueryNode;
+
+			subqueryNode = (SubqueryNode) elementAt(index);
+			subqueryNode.setWhereSubquery(true);
+		}
+	}
 }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
index 2a3bc11f..654a89e6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
@@ -44,6 +44,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.lang.reflect.Modifier;
 
+import java.util.Iterator;
 import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
 import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
 import org.apache.derby.impl.sql.execute.OnceResultSet;
@@ -110,6 +111,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/* Whether or not this subquery began life as a distinct expression subquery */
 	boolean			distinctExpression;
 
+	/* Whether or not this subquery began life as a subquery in a where clause */
+	boolean			whereSubquery;
+	
 	/* Since we do not have separate subquery operator nodes, the
 	 * type of the subquery is stored in the subqueryType field.  Most subquery
 	 * types take a left operand (except for expression and exists).  We could
@@ -614,9 +618,14 @@ public ValueNode preprocess(int numTables,
          *  o It is not a subquery in a having clause (DERBY-3257)
 		 *  o It is an expression subquery on the right side
 		 *	  of a BinaryComparisonOperatorNode.
+		 *  o Either a) it does not appear within a WHERE clause, or 
+		 *           b) it appears within a WHERE clause but does not itself 
+		 *              contain a WHERE clause with other subqueries in it. 
+		 *          (DERBY-3301)
 		 */
 		flattenable = (resultSet instanceof RowResultSetNode) &&
 					  underTopAndNode && !havingSubquery &&
+					  !isWhereExistsAnyInWithWhereSubquery() &&
 					  parentComparisonOperator instanceof BinaryComparisonOperatorNode;
 		if (flattenable)
 		{
@@ -677,11 +686,16 @@ public ValueNode preprocess(int numTables,
 		 *
 		 *	OR,
 		 *  o The subquery is NOT EXISTS, NOT IN, ALL (beetle 5173).
+		 *  o Either a) it does not appear within a WHERE clause, or 
+		 *           b) it appears within a WHERE clause but does not itself 
+		 *              contain a WHERE clause with other subqueries in it. 
+		 *          (DERBY-3301)
 		 */
 		boolean flattenableNotExists = (isNOT_EXISTS() || canAllBeFlattened());
 
 		flattenable = (resultSet instanceof SelectNode) &&
 					  underTopAndNode && !havingSubquery &&
+					  !isWhereExistsAnyInWithWhereSubquery() &&
 					  (isIN() || isANY() || isEXISTS() || flattenableNotExists ||
                        parentComparisonOperator != null);
 
@@ -2310,4 +2324,67 @@ public boolean isHavingSubquery() {
     public void setHavingSubquery(boolean havingSubquery) {
         this.havingSubquery = havingSubquery;
     }
+	
+
+	/**
+	 * Is this subquery part of a whereclause?
+	 *
+	 * @return true if it is part of a where clause, otherwise false
+	 */
+	public boolean isWhereSubquery() {
+		return whereSubquery;
+	}
+
+	/**
+	 * Mark this subquery as being part of a where clause.
+	 * @param whereSubquery
+	 */
+	public void setWhereSubquery(boolean whereSubquery) {
+		this.whereSubquery = whereSubquery;
+	}
+
+	/**
+	 * Check whether this is a WHERE EXISTS | ANY | IN subquery with a subquery
+	 * in its own WHERE clause. Used in flattening decision making.
+	 * 
+	 * DERBY-3301 reported wrong results from a nested WHERE EXISTS, but 
+	 * according to the derby optimizer docs this applies to a broader range of 
+	 * WHERE clauses in a WHERE EXISTS subquery. No WHERE EXISTS subquery with 
+	 * anohter subquery in it own WHERE clause can be flattened. 
+	 * 
+	 * @return true if this subquery is a WHERE EXISTS | ANY | IN subquery with 
+	 *              a subquery in its own WHERE clause
+	 */
+	public boolean isWhereExistsAnyInWithWhereSubquery() 
+			throws StandardException
+	{
+		if ( isWhereSubquery() && (isEXISTS() || isANY() || isIN()) ) {
+			if (resultSet instanceof SelectNode){
+				SelectNode sn = (SelectNode) resultSet;
+				/* 
+				 * Flattening happens in lower QueryTree nodes first and then 
+				 * removes nodes from the whereSubquerys list or whereClause. 
+				 * Hence we check the original WHERE clause for subqueries in 
+				 * SelectNode.init(), and simply check here.
+				 */ 
+				if (sn.originalWhereClauseHadSubqueries){
+					/*
+					 * This is a WHERE EXISTS | ANY |IN subquery with a subquery
+					 * in its own WHERE clause (or now in whereSubquerys).
+					 */ 
+					return true;
+				}	
+			}
+			/* 
+			 * This is a WHERE EXISTS | ANY | IN subquery, but does not contain 
+			 * a subquery in its WHERE subquerylist or clause
+			 */
+			return false;
+		} else {
+			/* 
+			 * This isn't a WHERE EXISTS | ANY | IN subquery 
+			 */
+			return false;
+		}
+	}
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java
index e69de29b..db3f4175 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NestedWhereSubqueryTest.java
@@ -0,0 +1,208 @@
+/**
+ *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NestedWhereSubqueryTest
+ *  
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import junit.framework.Test;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * Nested WHERE subquery tests. Tests nested WHERE EXISTS | ANY | IN functionality.
+ *
+ * Please refer to DERBY-3301 for more details.
+ */
+public class NestedWhereSubqueryTest extends BaseJDBCTestCase {
+
+	public NestedWhereSubqueryTest(String name) {
+		super(name);
+	}
+
+	/**
+	 * Main test body
+	 * 
+	 * @throws SQLException
+	 */
+	public void testBasicOperations()
+		throws SQLException {
+		Statement s = createStatement();
+
+		/*
+		 * Create tables needed for DERBY-3301 regression test
+		 */
+		StringBuffer sb = new StringBuffer();
+		sb.append("CREATE TABLE departments ( ");
+		sb.append("ID INTEGER NOT NULL, ");
+		sb.append("NAME VARCHAR(32) NOT NULL, ");
+		sb.append("COMPANYID INTEGER, ");
+		sb.append("CONSTRAINT DEPTS_PK PRIMARY KEY (ID) ");
+		sb.append(")");
+		s.executeUpdate(sb.toString());
+
+		sb = new StringBuffer();
+		sb.append("CREATE TABLE employees ( ");
+		sb.append("EMPID INTEGER NOT NULL, ");
+		sb.append("FIRSTNAME VARCHAR(32) NOT NULL, ");
+		sb.append("DEPARTMENT INTEGER, ");
+		sb.append("CONSTRAINT PERS_DEPT_FK FOREIGN KEY (DEPARTMENT) REFERENCES departments, ");
+		sb.append("CONSTRAINT EMPS_PK PRIMARY KEY (EMPID) ");
+		sb.append(")");
+		s.executeUpdate(sb.toString());
+
+		sb = new StringBuffer();
+		sb.append("CREATE TABLE projects ( ");
+		sb.append("PROJID INTEGER NOT NULL, ");
+		sb.append("NAME VARCHAR(32) NOT NULL, ");
+		sb.append("CONSTRAINT PROJS_PK PRIMARY KEY (PROJID) ");
+		sb.append(")");
+		s.executeUpdate(sb.toString());
+
+		sb = new StringBuffer();
+		sb.append("CREATE TABLE project_employees ( ");
+		sb.append("PROJID INTEGER REFERENCES projects NOT NULL, ");
+		sb.append("EMPID INTEGER REFERENCES employees NOT NULL ");
+		sb.append(")");
+		s.executeUpdate(sb.toString());
+
+		/*
+		 * Fill some data into the tables
+		 */
+		s.executeUpdate("INSERT INTO departments VALUES (1, 'Research', 1)");
+		s.executeUpdate("INSERT INTO departments VALUES (2, 'Marketing', 1)");
+
+		s.executeUpdate("INSERT INTO employees VALUES (11, 'Alex', 1)");
+		s.executeUpdate("INSERT INTO employees VALUES (12, 'Bill', 1)");
+		s.executeUpdate("INSERT INTO employees VALUES (13, 'Charles', 1)");
+		s.executeUpdate("INSERT INTO employees VALUES (14, 'David', 2)");
+		s.executeUpdate("INSERT INTO employees VALUES (15, 'Earl', 2)");
+
+		s.executeUpdate("INSERT INTO projects VALUES (101, 'red')");
+		s.executeUpdate("INSERT INTO projects VALUES (102, 'orange')");
+		s.executeUpdate("INSERT INTO projects VALUES (103, 'yellow')");
+
+		s.executeUpdate("INSERT INTO project_employees VALUES (102, 13)");
+		s.executeUpdate("INSERT INTO project_employees VALUES (101, 13)");
+		s.executeUpdate("INSERT INTO project_employees VALUES (102, 12)");
+		s.executeUpdate("INSERT INTO project_employees VALUES (103, 15)");
+		s.executeUpdate("INSERT INTO project_employees VALUES (103, 14)");
+		s.executeUpdate("INSERT INTO project_employees VALUES (101, 12)");
+		s.executeUpdate("INSERT INTO project_employees VALUES (101, 11)");
+
+		/*
+		 * Preliminary data check
+		 */
+		ResultSet rs = s.executeQuery("select * from employees");
+		String[][] expectedRows = {{"11", "Alex", "1"},
+									{"12", "Bill", "1"},
+									{"13", "Charles", "1"},
+									{"14", "David", "2"},
+									{"15", "Earl", "2"}};		
+		JDBC.assertUnorderedResultSet(rs, expectedRows);
+
+		rs = s.executeQuery("select * from departments");
+		expectedRows = new String [][] {{"1", "Research", "1"},
+										{"2","Marketing","1"}};		
+		JDBC.assertUnorderedResultSet(rs, expectedRows);
+
+		rs = s.executeQuery("select * from projects");
+		expectedRows = new String [][] {{"101","red"},
+										{"102","orange"},
+										{"103","yellow"}};		
+		JDBC.assertUnorderedResultSet(rs, expectedRows);
+
+		rs = s.executeQuery("select * from project_employees");
+		expectedRows = new String [][] {{"102","13"},
+										{"101","13"},
+										{"102","12"},
+										{"103","15"},
+										{"103","14"},
+										{"101","12"},
+										{"101","11"}};		
+		JDBC.assertUnorderedResultSet(rs, expectedRows);
+
+		/*
+		 * DERBY-3301: This query should return 7 rows
+		 */
+		sb = new StringBuffer();
+		sb.append("select unbound_e.empid, unbound_p.projid ");
+		sb.append("from departments this, ");
+		sb.append("     employees unbound_e, ");
+		sb.append("     projects unbound_p ");
+		sb.append("where exists ( ");
+		sb.append("  select 1 from employees this_employees_e ");
+		sb.append("  where exists ( ");
+		sb.append("    select 1 from project_employees this_employees_e_projects_p ");
+		sb.append("    where this_employees_e_projects_p.empid = this_employees_e.empid ");
+		sb.append("    and this_employees_e.department = this.id ");
+		sb.append("    and unbound_p.projid = this_employees_e_projects_p.projid ");
+		sb.append("    and unbound_e.empid = this_employees_e.empid) ");
+		sb.append(" )");
+
+		rs = s.executeQuery(sb.toString());
+		expectedRows = new String [][] {{"13", "101"},
+										{"12", "101"},
+										{"11", "101"},
+										{"13", "102"},
+										{"12", "102"},
+										{"15", "103"},
+										{"14", "103"}};
+		JDBC.assertUnorderedResultSet(rs, expectedRows);
+		
+		/* A variation of the above WHERE EXISTS but using IN should return the same rows */
+		sb = new StringBuffer();
+		sb.append("select unbound_e.empid, unbound_p.projid ");
+		sb.append("from departments this, ");
+		sb.append("     employees unbound_e, ");
+		sb.append("     projects unbound_p ");
+		sb.append("where exists ( "); 
+		sb.append(" select 1 from employees this_employees_e ");
+		sb.append("     where this_employees_e.empid in ( ");
+		sb.append("         select this_employees_e_projects_p.empid ");
+		sb.append("           from project_employees this_employees_e_projects_p ");
+		sb.append("         where this_employees_e_projects_p.empid = this_employees_e.empid ");
+		sb.append("         and this_employees_e.department = this.id ");
+		sb.append("         and unbound_p.projid = this_employees_e_projects_p.projid ");
+		sb.append("         and unbound_e.empid = this_employees_e.empid) ");
+		sb.append("     )");
+
+		rs = s.executeQuery(sb.toString());
+		JDBC.assertUnorderedResultSet(rs, expectedRows);
+
+		/*
+		 * Clean up the tables used.
+		 */				
+		s.executeUpdate("drop table project_employees");	
+		s.executeUpdate("drop table projects");
+		s.executeUpdate("drop table employees");
+		s.executeUpdate("drop table departments");			
+		
+		s.close();
+	}
+
+	public static Test suite() {
+		return TestConfiguration.defaultSuite(NestedWhereSubqueryTest.class);
+	}
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index 6e7b820a..ce4d2aaf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -123,6 +123,7 @@ public static Test suite() {
         suite.addTest(Bug4356Test.suite());
         suite.addTest(SynonymTest.suite());
         suite.addTest(CommentTest.suite());
+        suite.addTest(NestedWhereSubqueryTest.suite());
 
         // Add the XML tests, which exist as a separate suite
         // so that users can "run all XML tests" easily.
