diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java
index e4324637..832e1a3c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java
@@ -62,9 +62,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	Information about memory usage to dynamically tune the
 	in-memory sort buffer size.
 	*/
-	private long beginFreeMemory;
-	private long beginTotalMemory;
-	private long estimatedMemoryUsed;
+    private long beginMemoryUsage;
 	private boolean avoidMergeRun;		// try to avoid merge run if possible
     private int runSize;
     private int totalRunSize;
@@ -121,6 +119,8 @@ public void insert(DataValueDescriptor[] row)
 
                 long currentFreeMemory = jvm.freeMemory();
                 long currentTotalMemory = jvm.totalMemory();
+                long currentMemoryUsage =
+                        currentTotalMemory - currentFreeMemory;
 
 				// before we create an external sort, which is expensive, see if
                 // we can use up more in-memory sort buffer
@@ -128,8 +128,8 @@ public void insert(DataValueDescriptor[] row)
 				// beginning of the sort.  Not all of this memory is used by
 				// the sort and GC may have kicked in and release some memory.
 				// But it is a rough guess.
-        		estimatedMemoryUsed = (currentTotalMemory-currentFreeMemory) -
-		   			(beginTotalMemory-beginFreeMemory);
+                long estimatedMemoryUsed =
+                        currentMemoryUsage - beginMemoryUsage;
 
  				if (SanityManager.DEBUG)
                 {
@@ -148,6 +148,17 @@ public void insert(DataValueDescriptor[] row)
                     }
                 }
 
+                if (estimatedMemoryUsed < 0) {
+                    // We use less memory now than before we started filling
+                    // the sort buffer, probably because gc has happened. This
+                    // means we don't have a good estimate for how much memory
+                    // the sort buffer has occupied. To compensate for that,
+                    // set the begin memory usage to the current memory usage,
+                    // so that we get a more correct (but probably still too
+                    // low) estimate the next time we get here. See DERBY-5416.
+                    beginMemoryUsage = currentMemoryUsage;
+                }
+
 				// we want to double the sort buffer size if that will result
 				// in the sort to use up no more than 1/2 of all the free
 				// memory (including the sort memory)
@@ -267,9 +278,7 @@ boolean initialize(MergeSort sort, TransactionManager tran)
             }
         }
 
-		beginFreeMemory = jvm.freeMemory();
-		beginTotalMemory = jvm.totalMemory();
-		estimatedMemoryUsed = 0;
+        beginMemoryUsage = jvm.totalMemory() - jvm.freeMemory();
 		avoidMergeRun = true;		// not an external sort
         stat_sortType = "internal";
         stat_numMergeRuns = 0;
