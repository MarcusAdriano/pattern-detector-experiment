diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java
index 5b000ea8..55f6265f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java
@@ -53,8 +53,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // setPKGNAMCBytes
     // holdPKGNAMCBytes stores PKGNAMCBytes when holdability is hold
     // noHoldPKGNAMCBytes stores PKGNAMCBytes when holdability is no hold
-    public static byte[] holdPKGNAMCBytes = null;
-    public static byte[] noHoldPKGNAMCBytes = null;
+    public byte[] holdPKGNAMCBytes = null;
+    public byte[] noHoldPKGNAMCBytes = null;
 
 
     final static String packageNameWithHold__ = "SYSLH000";
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 23134035..c9a65b10 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -4942,6 +4942,24 @@ private Pkgnamcsn parsePKGNAMCSN() throws DRDAProtocolException
 			if (SanityManager.DEBUG) 
 				trace("rdbnam = " + rdbnam);
 
+            // A check that the rdbnam field corresponds to a database
+            // specified in a ACCRDB term.
+            // The check is not performed if the client is DNC_CLIENT
+            // with version before 10.3.0 because these clients
+            // are broken and send incorrect database name
+            // if multiple connections to different databases
+            // are created
+                        
+            // This check was added because of DERBY-1434
+                        
+            // check the client version first
+            if ( appRequester.getClientType() != AppRequester.DNC_CLIENT
+                 || appRequester.greaterThanOrEqualTo(10,3,0) ) {
+                // check the database name
+                if (!rdbnam.toString().equals(database.dbName))
+                    rdbnamMismatch(CodePoint.PKGNAMCSN);
+            }
+
 			reader.readString(rdbcolid, CodePoint.RDBCOLID_LEN, true);
 			if (SanityManager.DEBUG) 
 				trace("rdbcolid = " + rdbcolid);
@@ -4969,6 +4987,24 @@ private Pkgnamcsn parsePKGNAMCSN() throws DRDAProtocolException
 			if (SanityManager.DEBUG)
 				trace("rdbnam = " + rdbnam);
 
+            // A check that the rdbnam field corresponds to a database
+            // specified in a ACCRDB term.
+            // The check is not performed if the client is DNC_CLIENT
+            // with version before 10.3.0 because these clients
+            // are broken and send incorrect database name
+            // if multiple connections to different databases
+            // are created
+                        
+            // This check was added because of DERBY-1434
+                        
+            // check the client version first
+            if ( appRequester.getClientType() != AppRequester.DNC_CLIENT
+                 || appRequester.greaterThanOrEqualTo(10,3,0) ) {
+                // check the database name
+                if (!rdbnam.toString().equals(database.dbName))
+                    rdbnamMismatch(CodePoint.PKGNAMCSN);
+            }
+
 			//RDBCOLID can be variable length in this format
 			length = reader.readNetworkShort();
 			reader.readString(rdbcolid, length, true);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java
index 329bad30..94667975 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java
@@ -56,6 +56,7 @@ public static Test suite() throws Exception {
         suite.addTest(org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite.suite());
         suite.addTest(org.apache.derbyTesting.functionTests.tests.store._Suite.suite());
         suite.addTest(org.apache.derbyTesting.functionTests.tests.tools._Suite.suite());
+        suite.addTest(org.apache.derbyTesting.functionTests.tests.derbynet._Suite.suite());
 
         // Suites that are compiled using Java SE 6 target need to
         // be added this way, otherwise creating the suite
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DRDAProtocolTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DRDAProtocolTest.java
index e69de29b..8e1f3fb0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DRDAProtocolTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DRDAProtocolTest.java
@@ -0,0 +1,93 @@
+/*
+ 
+   Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.DRDAProtocolTest
+ 
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+ 
+      http://www.apache.org/licenses/LICENSE-2.0
+ 
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ 
+ */
+
+package org.apache.derbyTesting.functionTests.tests.derbynet;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import javax.sql.DataSource;
+
+import junit.extensions.TestSetup;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derbyTesting.junit.JDBCDataSource;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+import org.apache.derbyTesting.junit.SupportFilesSetup;
+
+/** The test of the properties of the DRDA network protocol implementation.
+  */
+public class DRDAProtocolTest extends BaseJDBCTestCase {
+    
+    /** Test whether the multiple connections to different databases
+      * on a same derby instance are working without exceptions. */
+    public void testMultipleConnections() throws Exception {
+        DataSource ds1 = JDBCDataSource.getDataSource("FIRSTDB1");
+        JDBCDataSource.setBeanProperty(ds1, "connectionAttributes",
+                                       "create=true");
+        Connection conn1 = ds1.getConnection();
+        conn1.setAutoCommit(false);
+
+        Statement st = conn1.createStatement();
+        st.execute("create table FIRSTDB_T1 (i int, j int, k int)");
+        st.execute("insert into FIRSTDB_T1 values (1, 3, 5)");
+        PreparedStatement pSt1 =
+                conn1.prepareStatement("select * from FIRSTDB_T1");
+        
+        ResultSet rs1 = pSt1.executeQuery();
+        rs1.next();
+        rs1.close();
+        
+        DataSource ds2 = JDBCDataSource.getDataSource("SECONDDB2");
+        JDBCDataSource.setBeanProperty(ds2, "connectionAttributes",
+                                       "create=true");
+        Connection conn2 = ds2.getConnection();
+        conn2.setAutoCommit(false);
+        Statement st2 = conn2.createStatement();
+        st2.execute("create table SECONDDB_T1 (i int, j int, k int)");
+        st2.execute("insert into SECONDDB_T1 values (2, 4, 6)");
+        PreparedStatement pSt2 =
+                conn2.prepareStatement("select * from SECONDDB_T1");
+        
+        rs1 = pSt2.executeQuery();
+        rs1.next();
+        rs1.close();
+        
+        conn1.rollback();
+        conn1.close();
+        conn2.rollback();
+        conn2.close();
+    }
+    
+    /* ------------------- end helper methods  -------------------------- */
+    public DRDAProtocolTest(String name) {
+        super(name);
+    }
+    
+    public static Test suite() {
+        return TestConfiguration.clientServerSuite(DRDAProtocolTest.class);
+    }
+    
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
index 0985085b..aff17b14 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
@@ -48,6 +48,7 @@ public static Test suite() {
         suite.addTest(ShutDownDBWhenNSShutsDownTest.suite());
         suite.addTest(SqlExceptionTest.suite());
         suite.addTest(SuicideOfStreamingTest.suite());
+        suite.addTest(DRDAProtocolTest.suite());
  
         return suite;
     }
