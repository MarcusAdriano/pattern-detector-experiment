diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java
index 00001d1f..09276ce2 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.java
@@ -72,6 +72,7 @@ public void setUp() throws Exception {
     SolrZkClient zkClient;
     private int nodeNumber;
     private int seq = -1;
+    private volatile boolean stop;
     
     public ClientThread(int nodeNumber) throws Exception {
       super("Thread-" + nodeNumber);
@@ -81,26 +82,36 @@ public ClientThread(int nodeNumber) throws Exception {
     
     @Override
     public void run() {
-      try {
+      
         LeaderElector elector = new LeaderElector(zkClient);
         
-        ElectionContext context = new ShardLeaderElectionContext("shard1", "collection1", Integer.toString(nodeNumber), null);
+        ElectionContext context = new ShardLeaderElectionContext("shard1",
+            "collection1", Integer.toString(nodeNumber), null);
         
+        try {
         elector.setup(context);
+          
         seq = elector.joinElection(context);
         seqToThread.put(seq, this);
-        // run forever - we will be explicitly killed
-        Thread.sleep(Integer.MAX_VALUE);
-      } catch (Throwable e) {
+        } catch (Exception e) {
+          e.printStackTrace();
+        }
 
+      while (!stop) {
+        try {
+          Thread.sleep(100);
+        } catch (InterruptedException e) {
+          e.printStackTrace();
       }
     }
     
+    }
+    
     public void close() throws InterruptedException {
       if (!zkClient.isClosed()) {
         zkClient.close();
       }
-      this.stop();
+      this.stop = true;
     }
   }
   
@@ -151,7 +162,6 @@ public void testElection() throws Exception {
     int leaderThread = Integer.parseInt(getLeader());
     
     // whoever the leader is, should be the n_0 seq
-    // TODO: seen this fail by seq being -1
     assertEquals(0, threads.get(leaderThread).seq);
     
     // kill n_0, 1, 3 and 4
