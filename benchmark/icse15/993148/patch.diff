diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnection.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnection.java
index 0c7ea9cf..8d5e442e 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnection.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnection.java
@@ -41,16 +41,14 @@
     private static final ByteBuffer CLOSE_SENTINEL = ByteBuffer.allocate(0);
     private static final int OPEN_RETRY_DELAY = 100; // ms between retries
 
-    private final OutboundTcpConnectionPool pool;
     private final InetAddress endpoint;
     private final BlockingQueue<ByteBuffer> queue = new LinkedBlockingQueue<ByteBuffer>();
     private DataOutputStream output;
     private Socket socket;
 
-    public OutboundTcpConnection(final OutboundTcpConnectionPool pool, final InetAddress remoteEp)
+    public OutboundTcpConnection(InetAddress remoteEp)
     {
         super("WRITE-" + remoteEp);
-        this.pool = pool;
         this.endpoint = remoteEp;
     }
 
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
index 1878a3f4..5e544c3a 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
@@ -18,55 +18,35 @@
 
 package org.apache.cassandra.net;
 
-import java.io.IOException;
 import java.net.InetAddress;
 
-import org.apache.log4j.Logger;
-
 import org.apache.cassandra.concurrent.StageManager;
 
 class OutboundTcpConnectionPool
 {
-    private InetAddress remoteEp_;
-    private OutboundTcpConnection cmdCon;
-    private OutboundTcpConnection ackCon;
+    private final OutboundTcpConnection cmdCon;
+    private final OutboundTcpConnection ackCon;
 
     OutboundTcpConnectionPool(InetAddress remoteEp)
     {
-        remoteEp_ = remoteEp;
+         cmdCon = new OutboundTcpConnection(remoteEp);
+         ackCon = new OutboundTcpConnection(remoteEp);                                             
     }
 
     /**
      * returns the appropriate connection based on message type.
      * returns null if a connection could not be established.
      */
-    synchronized OutboundTcpConnection getConnection(Message msg)
-    {
-        if (StageManager.RESPONSE_STAGE.equals(msg.getMessageType())
-            || StageManager.GOSSIP_STAGE.equals(msg.getMessageType()))
-        {
-            if (ackCon == null)
-            {
-                ackCon = new OutboundTcpConnection(this, remoteEp_);
-                ackCon.start();
-            }
-            return ackCon;
-        }
-        else
-        {
-            if (cmdCon == null)
+    OutboundTcpConnection getConnection(Message msg)
             {
-                cmdCon = new OutboundTcpConnection(this, remoteEp_);
-                cmdCon.start();
-            }
-            return cmdCon;
-        }
+        return msg.getMessageType().equals(StageManager.RESPONSE_STAGE) || msg.getMessageType().equals(StageManager.GOSSIP_STAGE)
+               ? ackCon
+               : cmdCon;
     }
 
     synchronized void reset()
     {
         for (OutboundTcpConnection con : new OutboundTcpConnection[] { cmdCon, ackCon })
-            if (con != null)
                 con.closeSocket();
     }
 }
