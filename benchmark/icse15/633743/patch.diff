diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Checks.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Checks.java
index 6f212aee..57790700 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Checks.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/Checks.java
@@ -19,8 +19,8 @@
  */
 package org.apache.derbyTesting.system.oe.run;
 
-import java.sql.SQLException;
 import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.sql.Statement;
 
 import junit.framework.Assert;
@@ -28,7 +28,7 @@
 import junit.framework.TestSuite;
 
 import org.apache.derbyTesting.junit.JDBCPerfTestCase;
-import org.apache.derbyTesting.system.oe.client.Load;
+import org.apache.derbyTesting.system.oe.util.HandleCheckError;
 import org.apache.derbyTesting.system.oe.util.OEChecks;
 
 /**
@@ -65,7 +65,11 @@ public Checks(String name, short scale) {
     public void setUp() throws Exception
     {
         this.check = new OEChecks();
-        check.initialize(getConnection(),scale);
+        check.initialize(new HandleCheckError() {
+            public void handleCheckError(String error) {
+                fail(error);
+            }
+        }, getConnection(),scale);
     }
     /**
      * Return suite of tests that checks the row counts for all the tables in
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/DriverUtility.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/DriverUtility.java
index 52e6fbb5..c6b9c87f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/DriverUtility.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/run/DriverUtility.java
@@ -24,6 +24,7 @@
 import java.sql.Connection;
 import org.apache.derbyTesting.system.oe.client.Load;
 import org.apache.derbyTesting.system.oe.load.SimpleInsert;
+import org.apache.derbyTesting.system.oe.util.HandleCheckError;
 import org.apache.derbyTesting.system.oe.util.OEChecks;
 
 /**
@@ -138,7 +139,7 @@ public void populate() throws Exception {
      */
     public void allChecks() throws Exception {
         OEChecks checks = new OEChecks();
-        checks.initialize(getConnection(), scale);
+        checks.initialize(new HandleCheckError(), getConnection(), scale);
         long start = System.currentTimeMillis();
         checks.checkAllRowCounts();
         long stop = System.currentTimeMillis();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/HandleCheckError.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/HandleCheckError.java
index e69de29b..11ec23e3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/HandleCheckError.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/HandleCheckError.java
@@ -0,0 +1,35 @@
+/*
+ *
+ * Derby - Class org.apache.derbyTesting.system.oe.util.HandleCheckError
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, 
+ * software distributed under the License is distributed on an 
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific 
+ * language governing permissions and limitations under the License.
+ */
+package org.apache.derbyTesting.system.oe.util;
+
+/**
+ * Simple class to isolate OEChecks from junit but allow its
+ * checks to be used in JUnit tests. This implementation
+ * just reports errors to System.out. In a JUnit environment
+ * an implementation can use Assert.fail() to report failures.
+ *
+ */
+public class HandleCheckError {
+    
+    public void handleCheckError(String error) throws Exception {
+        System.out.println(error);
+    }
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/OEChecks.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/OEChecks.java
index cf3920ff..c21bea1b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/OEChecks.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/system/oe/util/OEChecks.java
@@ -32,6 +32,11 @@
  */
 public class OEChecks  {
 
+    /**
+     * How to report an error.
+     */
+    private HandleCheckError errorHandler;
+
     /**
      * Warehouse scaling factor
      */
@@ -39,9 +44,11 @@
 
     private Connection conn = null;
 
-    public void initialize(Connection conn, short scale)
+    public void initialize(HandleCheckError errorHandler,
+            Connection conn, short scale)
     throws Exception
     {
+        this.errorHandler = errorHandler;
         this.conn = conn;
         conn.setAutoCommit(false);
         this.scale = scale;
@@ -155,7 +162,7 @@ public void testOrderLineRows() throws Exception {
      */
     private void checkCountStar(String table, int expected) throws Exception {
         if( expected != rowsInTable(table))
-            System.out.println("ERROR:Number of rows loaded for " + table +
+            errorHandler.handleCheckError("ERROR:Number of rows loaded for " + table +
                     " not correct, expected="+expected +" rows found="+ 
                     rowsInTable(table));
 
@@ -197,7 +204,7 @@ private void checkWithinOnePercent(String tableName, int expected)
         double low = ((double) expected) * 0.99;
         double high = ((double) expected) * 1.01;
         if ( (count < low) || (count >high))
-            System.out.println("ERROR! Initial rows" + count + " in " + 
+            errorHandler.handleCheckError("ERROR! Initial rows" + count + " in " + 
                 tableName + " is out of range.[" + low + "-" + high + "]");
         
     }
