diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java
index e66a5a5b..ff96f259 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/FromList.java
@@ -384,27 +384,6 @@ public void bindResultColumns(FromList fromListParam)
 			fromListParam.removeElementAt(0);
 	}
 
-	/**
-	 * Returns true if any Outer joins present. Used to set Nullability
-	 *
-	 * @return	True if has any outer joins. False otherwise.
-	 */
-	public boolean hasOuterJoins()
-				throws StandardException
-	{
-		FromTable	fromTable;
-
-		int size = size();
-		for (int index = 0; index < size; index++)
-		{
-			fromTable = (FromTable) elementAt(index);
-			if (fromTable instanceof HalfOuterJoinNode)
-				return true;
-		}
-
-		return false;
-	}
-
 	/**
 	 * Expand a "*" into the appropriate ResultColumnList. If the "*"
 	 * is unqualified it will expand into a list of all columns in all
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
index c63ecf8f..34eeb437 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
@@ -572,6 +572,17 @@ public ResultColumn getMatchingColumn(ColumnReference columnReference) throws St
 				throw StandardException.newException(SQLState.LANG_AMBIGUOUS_COLUMN_NAME, 
 						 columnReference.getSQLColumnName());
 			}
+
+            // All columns on the logical right side of a "half" outer join
+            // can contain nulls. The correct nullability is set by
+            // bindResultColumns()/buildRCL(). However, if bindResultColumns()
+            // has not been called yet, the caller of this method will see
+            // the wrong nullability. This problem is logged as DERBY-2916.
+            // Until that's fixed, set the nullability here too.
+            if (this instanceof HalfOuterJoinNode) {
+                rightRC.setNullability(true);
+            }
+
 			resultColumn = rightRC;
 		}
 
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index fe761c4f..0c2dd8a2 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -635,10 +635,6 @@ public void bindResultColumns(FromList fromListParam)
 		{
 			throw StandardException.newException(SQLState.LANG_TOO_MANY_ELEMENTS);
 		}
-
-		/* Fix nullability in case of any outer joins in the fromList */
-		if (fromList.hasOuterJoins())
-			resultColumns.setNullability(true);
 	}
 
 	/**
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
index e69de29b..1c4c852f 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
@@ -0,0 +1,124 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.JoinTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import junit.framework.Test;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * Test cases for JOINs.
+ */
+public class JoinTest extends BaseJDBCTestCase {
+    public JoinTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        return TestConfiguration.defaultSuite(JoinTest.class);
+    }
+
+    /**
+     * Test that the columns returned by a left or right outer join have the
+     * correct nullability. In a left outer join, the columns from the left
+     * side of the join should have their original nullability, and all the
+     * columns from the right side of the join should be nullable. In a right
+     * outer join, all the columns from the left side should be nullable,
+     * and the columns from the right side should preserve their original
+     * nullability. DERBY-4284.
+     */
+    public void testNullabilityInLeftOrRightOuterJoin() throws SQLException {
+        // Turn auto-commit off so that tearDown() can roll back all test data
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.execute("create table t (c1 int not null, c2 int not null, c3 int)");
+
+        // Nullability should be unchanged for columns from the left side
+        // (first three columns) and nullable for the ones from the right side).
+        ResultSet rs = s.executeQuery(
+                "select * from t t1 left outer join t t2 on 1=1");
+        JDBC.assertNullability(rs,
+                new boolean[]{false, false, true, true, true, true});
+        JDBC.assertEmpty(rs);
+
+        // Nullability should be unchanged for columns from the right side of
+        // the right outer join, and nullable for the ones from the left side.
+        rs = s.executeQuery(
+                "select * from t t1 right outer join t t2 on 1=1");
+        JDBC.assertNullability(rs,
+                new boolean[]{true, true, true, false, false, true});
+        JDBC.assertEmpty(rs);
+
+        // CASTs had some problems where they set the nullability too early
+        // to get it correctly from the underlying join. Test it here.
+        rs = s.executeQuery(
+                "select cast(t1.c1 as int), cast(t2.c2 as int) from " +
+                "t t1 left outer join t t2 on 1=1");
+        JDBC.assertNullability(rs, new boolean[]{false, true});
+        JDBC.assertEmpty(rs);
+
+        rs = s.executeQuery(
+                "select cast(t1.c1 as int), cast(t2.c2 as int) from " +
+                "t t1 right outer join t t2 on 1=1");
+        JDBC.assertNullability(rs, new boolean[]{true, false});
+        JDBC.assertEmpty(rs);
+
+        // Nested outer joins
+        rs = s.executeQuery(
+                "select t1.c1, t2.c1, t3.c1 from " +
+                "t t1 left join (t t2 left join t t3 on 1=1) on 1=1");
+        JDBC.assertNullability(rs, new boolean[]{false, true, true});
+        JDBC.assertEmpty(rs);
+
+        rs = s.executeQuery(
+                "select t1.c1, t2.c1, t3.c1 from " +
+                "t t1 right join (t t2 right join t t3 on 1=1) on 1=1");
+        JDBC.assertNullability(rs, new boolean[]{true, true, false});
+        JDBC.assertEmpty(rs);
+
+        rs = s.executeQuery(
+                "select t1.c1, t2.c1, t3.c1, t4.c1 from " +
+                "(t t1 left join t t2 on 1=1) left join " +
+                "(t t3 left join t t4 on 1=1) on 1=1");
+        JDBC.assertNullability(rs, new boolean[]{false, true, true, true});
+        JDBC.assertEmpty(rs);
+
+        rs = s.executeQuery(
+                "select t1.c1, t2.c1, t3.c1, t4.c1 from " +
+                "(t t1 left join t t2 on 1=1) right join " +
+                "(t t3 left join t t4 on 1=1) on 1=1");
+        JDBC.assertNullability(rs, new boolean[]{true, true, false, true});
+        JDBC.assertEmpty(rs);
+
+        rs = s.executeQuery(
+                "select t1.c1, t2.c1, t3.c1, t4.c1 from " +
+                "(t t1 right join t t2 on 1=1) left join " +
+                "(t t3 left join t t4 on 1=1) on 1=1");
+        JDBC.assertNullability(rs, new boolean[]{true, false, true, true});
+        JDBC.assertEmpty(rs);
+    }
+}
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index dddfac29..03e57d20 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -70,6 +70,7 @@ public static Test suite() {
         suite.addTest(GrantRevokeTest.suite());
         suite.addTest(GroupByExpressionTest.suite());
         suite.addTest(InsertTest.suite());
+        suite.addTest(JoinTest.suite());
 		suite.addTest(LangScripts.suite());
         suite.addTest(MathTrigFunctionsTest.suite());
         suite.addTest(PrepareExecuteDDL.suite());
