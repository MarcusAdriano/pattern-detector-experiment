diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java
index 7a9ce0b5..7d30f6f8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java
@@ -138,7 +138,10 @@ private void setupResourceAdapter(String user, String password, boolean requestP
 				// If it is inactive, it is useless.
 				ra = null;
 
-				String dbName = getDatabaseName();
+				// DERBY-4907 make sure the database name sent to find service
+				// does not include attributes.
+				String dbName = getShortDatabaseName();
+				
 				if (dbName != null) {
 
 					// see if database already booted, if it is, then don't make a
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java
index 6b44dff6..a5a8c161 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java
@@ -79,6 +79,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private String description;
 	private String dataSourceName;
 	private String databaseName;
+	/** shortDatabaseName has attributes of databaseName stripped */
+	private String shortDatabaseName;	
+
 	private String password;
 	private String user;
 	private int loginTimeout;
@@ -109,12 +112,26 @@ public ReferenceableDataSource() {
 	*/
 	public final synchronized void setDatabaseName(String databaseName) {
 		this.databaseName = databaseName;
+		if( databaseName!= null && databaseName.contains(";")){
+			String[] dbShort = databaseName.split(";");
+			this.shortDatabaseName = dbShort[0];
+		}
+		else {
+			this.shortDatabaseName = databaseName;
+		}
 		update();
 	}
 	public String getDatabaseName() {
 		return databaseName;
 	}
 
+	/** 
+	 * @return databaseName with attributes stripped.
+	 */
+	protected String getShortDatabaseName() {
+		return shortDatabaseName;
+	}
+
 	/** 
 		Set the data source name.  The property is not mandatory.  It is used
 		for informational purposes only.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
index 6248dab7..0a9e5d3a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
@@ -831,6 +831,67 @@ public void testCloseActiveConnection_XA_global()
         xa.close();
     }
 
+    /**
+     * Test that a connection to XADataSource can be established
+     * successfully while creating a database using setDatabaseName()
+     * with create=true
+     *  
+     * @throws SQLException
+     * @throws XAException
+     */
+    public void testCreateInDatabaseName_XA() throws SQLException, XAException
+    {
+    	//test with XADataSource
+    	XADataSource xads = J2EEDataSource.getXADataSource();
+    	String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();    	
+    	J2EEDataSource.setBeanProperty(xads,"databaseName",dbName +";create=true");       
+    	XAConnection xa = xads.getXAConnection();
+    	Connection c = xa.getConnection();  
+    	c.setAutoCommit(false); 
+    	c.close();
+    }
+    
+    /**
+     * Test that a connection to PoolDataSource can be established
+     * successfully while creating a database using setDatabaseName()
+     * with create=true
+     * 
+     * @throws SQLException
+     */
+    
+    public void testCreateInDatabaseName_Pooled() throws SQLException
+    {
+    	//test with PooledConnection
+    	ConnectionPoolDataSource cpds = J2EEDataSource.getConnectionPoolDataSource();
+    	PooledConnection pc = cpds.getPooledConnection();
+    	String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
+    	J2EEDataSource.setBeanProperty(cpds, "databaseName",dbName +";create=true");
+    	Connection c;
+    	c = pc.getConnection();
+    	c.setAutoCommit(false);
+    	c.close();
+    	pc.close();
+    }
+    
+    /**
+     * Test that a connection to JDBCDataSource can be established
+     * successfully while creating a database using setDatabaseName()
+     * with create=true
+     * 
+     * @throws SQLException
+     */
+    
+    public void testCreateInDatabaseName_DS() throws SQLException
+    {
+    	DataSource ds = JDBCDataSource.getDataSource();
+    	String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
+    	JDBCDataSource.setBeanProperty(ds, "databaseName", dbName +";create=true");
+        Connection c = ds.getConnection();
+        c.setAutoCommit(false);
+        c.close();
+    }
+        
+    
     /**
      * Test that a PooledConnection can be reused and closed
      * (separately) during the close event raised by the
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
index d66e5ac2..9ee51580 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
@@ -135,7 +135,7 @@ static HashMap getDataSourceProperties(TestConfiguration config)
     }
     
     /**
-     * Return a DataSource object of the passsed in type
+     * Return a DataSource object of the passed in type
      * configured with the passed in Java bean properties.
      * This will actually work with any object that has Java bean
      * setter methods.
@@ -231,7 +231,7 @@ public static Object getBeanProperty(Object ds, String property)
     
     /**
      * Clear a String Java bean property by setting it to null.
-     * @param ds ds DataSource to have property cleared
+     * @param ds DataSource to have property cleared
      * @param property name of property.
      */
     public static void clearStringBeanProperty(Object ds, String property)
