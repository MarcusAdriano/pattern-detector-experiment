diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java
index c36c8cbc..08674857 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java
@@ -87,4 +87,9 @@ ResultColumn cloneMe() throws StandardException
 									tableName,
 									getContextManager());
 	}
+
+
+    public TableName getTableNameObject() {
+        return tableName;
+    }
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index d7e8fda6..405c2c6f 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -3412,7 +3412,7 @@ public TableName getTableNameField()
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultColumnList getAllResultColumns(String allTableName)
+	public ResultColumnList getAllResultColumns(TableName allTableName)
 			throws StandardException
 	{
 		return getResultColumnsForList(allTableName, resultColumns, tableName);
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
index 5e741af8..606105ab 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromList.java
@@ -136,14 +136,24 @@ public void addFromTable(FromTable fromTable) throws StandardException
 		 * user is executing a really dumb query and we won't throw
 		 * and exception - consider it an ANSI extension.
 		 */
+        TableName leftTable = null;
+        TableName rightTable = null;
 		if (! (fromTable instanceof TableOperatorNode))
 		{
 			/* Check for duplicate table name in FROM list */
 			int size = size();
 			for (int index = 0; index < size; index++)
 			{
-				if (fromTable.getExposedName().equals
-					(((FromTable) elementAt(index)).getExposedName()) )
+                leftTable = fromTable.getTableName();
+
+                if(((FromTable) elementAt(index)) instanceof TableOperatorNode) {
+                    continue;
+                }
+
+                else {                    
+                    rightTable = ((FromTable) elementAt(index)).getTableName();
+                }
+                if(leftTable.equals(rightTable))
 				{
 					throw StandardException.newException(SQLState.LANG_FROM_LIST_DUPLICATE_TABLE_NAME, fromTable.getExposedName());
 				}
@@ -380,7 +390,7 @@ public boolean hasOuterJoins()
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultColumnList expandAll(String allTableName)
+	public ResultColumnList expandAll(TableName allTableName)
 			throws StandardException
 	{
 		ResultColumnList resultColumnList = null;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
index 604cdb1f..da573306 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
@@ -626,14 +626,21 @@ public String getExposedName()
 	 * result columns from the subquery.
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultColumnList getAllResultColumns(String allTableName)
+	public ResultColumnList getAllResultColumns(TableName allTableName)
 			throws StandardException
 	{
 		ResultColumnList rcList = null;
 		TableName		 exposedName;
+        TableName        toCompare;
 
 
-		if (allTableName != null && ! allTableName.equals(getExposedName()))
+		if(allTableName != null)
+             toCompare = makeTableName(allTableName.getSchemaName(),correlationName);
+        else
+            toCompare = makeTableName(null,correlationName);
+        
+        if ( allTableName != null &&
+             ! allTableName.equals(toCompare))
 		{
 			return null;
 		}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
index b9d902cf..96b41def 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
@@ -32,12 +32,7 @@
 import org.apache.derby.iapi.sql.compile.RowOrdering;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 
-import org.apache.derby.iapi.sql.dictionary.DataDictionary;
-import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
-import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
-import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
-import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
-import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
+import org.apache.derby.iapi.sql.dictionary.*;
 
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 
@@ -52,6 +47,7 @@
 import org.apache.derby.iapi.util.JBitSet;
 import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.util.StringUtil;
+import org.apache.derby.catalog.UUID;
 
 import java.util.Enumeration;
 import java.util.Properties;
@@ -958,7 +954,7 @@ public String toString()
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultColumnList getResultColumnsForList(String allTableName,
+	public ResultColumnList getResultColumnsForList(TableName allTableName,
 												ResultColumnList inputRcl,
 												TableName tableName)
 			throws StandardException
@@ -968,11 +964,23 @@ public ResultColumnList getResultColumnsForList(String allTableName,
 		ValueNode		 valueNode;
 		String			 columnName;
 		TableName		 exposedName;
+        TableName        toCompare;
 
 		/* If allTableName is non-null, then we must check to see if it matches 
 		 * our exposed name.
 		 */
-		if (allTableName != null && ! allTableName.equals(getExposedName()))
+
+        if(correlationName == null)
+           toCompare = tableName;
+        else {
+            if(allTableName != null)
+                toCompare = makeTableName(allTableName.getSchemaName(),correlationName);
+            else
+                toCompare = makeTableName(null,correlationName);
+        }
+
+        if ( allTableName != null &&
+             ! allTableName.equals(toCompare))
 		{
 			return null;
 		}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index ac11442d..75a4315c 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -901,15 +901,22 @@ Vector getNodesFromParameters(Class nodeClass)
 	 * result columns from the subquery.
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultColumnList getAllResultColumns(String allTableName)
+	public ResultColumnList getAllResultColumns(TableName allTableName)
 			throws StandardException
 	{
 		ResultColumnList rcList = null;
 		ResultColumn	 resultColumn;
 		ValueNode		 valueNode;
 		String			 columnName;
+        TableName        toCompare;
 
-		if (allTableName != null && ! allTableName.equals(getExposedName()))
+		if(allTableName != null)
+             toCompare = makeTableName(allTableName.getSchemaName(),correlationName);
+        else
+            toCompare = makeTableName(null,correlationName);
+
+        if ( allTableName != null &&
+             ! allTableName.equals(toCompare))
 		{
 			return null;
 		}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
index 2bb5cf0b..e95151a4 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
@@ -359,7 +359,7 @@ protected void adjustNumberOfRowsReturned(CostEstimate costEstimate)
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultColumnList getAllResultColumns(String allTableName)
+	public ResultColumnList getAllResultColumns(TableName allTableName)
 			throws StandardException
 	{
 		/* We need special processing when there is a USING clause.
@@ -453,7 +453,7 @@ else if (rightRCL == null)
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	private ResultColumnList getAllResultColumnsNoUsing(String allTableName)
+	private ResultColumnList getAllResultColumnsNoUsing(TableName allTableName)
 			throws StandardException
 	{
 		ResultColumnList leftRCL = leftResultSet.getAllResultColumns(allTableName); 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
index 57d926bf..6648ab19 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
@@ -1730,4 +1730,8 @@ public DataTypeDescriptor getTypeServices()
         }
         return dtd;
     } // end of getTypeServices
+
+    public TableName getTableNameObject() {
+        return null;
+    }
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index fb9f60ec..b558b7c9 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -1451,7 +1451,7 @@ public void expandAllsAndNameColumns(FromList fromList)
 	{
 		boolean			expanded = false;
 		ResultColumnList allExpansion;
-		String			fullTableName;
+		TableName			fullTableName;
 
 		/* First walk result column list looking for *'s to expand */
 		for (int index = 0; index < size(); index++)
@@ -1461,7 +1461,15 @@ public void expandAllsAndNameColumns(FromList fromList)
 			{
 				expanded = true;
 
-				fullTableName = ((AllResultColumn) rc).getFullTableName();
+				//fullTableName = ((AllResultColumn) rc).getFullTableName();
+                TableName temp = rc.getTableNameObject();
+                if(temp != null) {
+                   String sName = temp.getSchemaName();
+                   String tName = temp.getTableName();
+                   fullTableName = makeTableName(sName,tName);
+                }
+                else
+                   fullTableName = null;
 				allExpansion = fromList.expandAll(fullTableName);
 
 				/* Make sure that every column has a name */
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index 3a9d9024..a4035572 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -493,7 +493,7 @@ public void verifySelectStarSubquery(FromList outerFromList, int subqueryType)
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ResultColumnList getAllResultColumns(String allTableName)
+	public ResultColumnList getAllResultColumns(TableName allTableName)
 					throws StandardException
 	{
 		if (SanityManager.DEBUG)
