diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
index ba0301e5..40c37291 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
@@ -120,19 +120,24 @@ public int read(byte b[], int off, int len) throws IOException {
 		return len;
 	}
 
+    /**
+     * Skip as many bytes as possible, but no more than {@code count}.
+     *
+     * @param count the number of bytes to skip
+     * @return the number of bytes that were skipped
+     */
 	public long skip(long count)  throws IOException {
 
-		if ((position + count) > end) {
-
-			count = end - position;
-
-			if (count == 0)
-				return 0; // end of file
+        // return 0 on non-positive count, per javadoc for
+        // InputStream.skip(long)
+        if (count <= 0) {
+            return 0;
 		}
 
-		position += count;
-
-		return count;
+        // don't skip more bytes than we have available
+        long toSkip = Math.min(count, available());
+        position += toSkip;
+        return toSkip;
 
 	}
 
@@ -218,12 +223,14 @@ public final void readFully(byte b[], int off, int len) throws IOException {
 		position += len;
 	}
 
+    /**
+     * Skip as many bytes as possible, but no more than {@code n}.
+     *
+     * @param n the number of bytes to skip
+     * @return the number of bytes that were skipped
+     */
     public final int skipBytes(int n) throws IOException {
-		if ((position + n) > end) {
-            n = end - position;
-		}
-		position += n;
-		return n;
+        return (int) skip(n);
     }
 
     public final boolean readBoolean() throws IOException {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/ArrayInputStreamTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/ArrayInputStreamTest.java
index e69de29b..0a59c9e1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/ArrayInputStreamTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/ArrayInputStreamTest.java
@@ -0,0 +1,85 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.unitTests.junit.ArrayInputStreamTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.unitTests.junit;
+
+import java.io.IOException;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+import org.apache.derby.iapi.services.io.ArrayInputStream;
+import org.apache.derbyTesting.junit.BaseTestCase;
+
+/**
+ * Unit tests for {@code org.apache.derby.iapi.services.io.ArrayInputStream}.
+ */
+public class ArrayInputStreamTest extends BaseTestCase {
+
+    public static Test suite() {
+        return new TestSuite(ArrayInputStreamTest.class);
+    }
+
+    public ArrayInputStreamTest(String name) {
+        super(name);
+    }
+
+    /**
+     * Test that we don't get an overflow when the argument to skip() is
+     * Long.MAX_VALUE (DERBY-3739).
+     */
+    public void testSkipLongMaxValue() throws IOException {
+        ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
+        assertEquals(1000, ais.skip(Long.MAX_VALUE));
+        assertEquals(1000, ais.getPosition());
+        ais.setPosition(1);
+        assertEquals(999, ais.skip(Long.MAX_VALUE));
+        assertEquals(1000, ais.getPosition());
+    }
+
+    /**
+     * Test that we don't get an overflow when the argument to skipBytes() is
+     * Integer.MAX_VALUE (DERBY-3739).
+     */
+    public void testSkipBytesIntMaxValue() throws IOException {
+        ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
+        assertEquals(1000, ais.skipBytes(Integer.MAX_VALUE));
+        assertEquals(1000, ais.getPosition());
+        ais.setPosition(1);
+        assertEquals(999, ais.skipBytes(Integer.MAX_VALUE));
+        assertEquals(1000, ais.getPosition());
+    }
+
+    /**
+     * Test that skip() returns 0 when the argument is negative (DERBY-3739).
+     */
+    public void testSkipNegative() throws IOException {
+        ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
+        assertEquals(0, ais.skip(-1));
+    }
+
+    /**
+     * Test that skipBytes() returns 0 when the argument is negative
+     * (DERBY-3739).
+     */
+    public void testSkipBytesNegative() throws IOException {
+        ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
+        assertEquals(0, ais.skipBytes(-1));
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
index a5d40da4..6dc1f233 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
@@ -47,6 +47,7 @@ public static Test suite() throws SQLException {
 
         TestSuite suite = new TestSuite("JUnit unit tests");
 
+        suite.addTest(ArrayInputStreamTest.suite());
         suite.addTest(FormatableBitSetTest.suite());
         suite.addTest(SystemPrivilegesPermissionTest.suite());
         suite.addTest(UTF8UtilTest.suite());
