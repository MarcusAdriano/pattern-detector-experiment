diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 79759cf9..f7c3a2c8 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -466,8 +466,18 @@ public static synchronized ColumnFamilyStore createColumnFamilyStore(Table table
     {
         // get the max generation number, to prevent generation conflicts
         List<Integer> generations = new ArrayList<Integer>();
-        for (Descriptor desc : files(table.name, columnFamily, true).keySet())
+        for (String path : DatabaseDescriptor.getAllDataFileLocationsForTable(table.name))
         {
+            Iterable<Pair<Descriptor, Component>> pairs = files(new File(path));
+            File incrementalsPath = new File(path, "backups");
+            if (incrementalsPath.exists())
+                pairs = Iterables.concat(pairs, files(incrementalsPath));
+
+            for (Pair<Descriptor, Component> pair : pairs)
+            {
+                Descriptor desc = pair.left;
+                if (!desc.cfname.equals(columnFamily))
+                    continue;
             generations.add(desc.generation);
             if (desc.isFromTheFuture())
             {
@@ -475,6 +485,7 @@ public static synchronized ColumnFamilyStore createColumnFamilyStore(Table table
                                                          Descriptor.CURRENT_VERSION, desc));
             }
         }
+        }
         Collections.sort(generations);
         int value = (generations.size() > 0) ? (generations.get(generations.size() - 1)) : 0;
 
@@ -622,12 +633,8 @@ public void runMayThrow()
         final Map<Descriptor,Set<Component>> sstables = new HashMap<Descriptor,Set<Component>>();
         for (String directory : DatabaseDescriptor.getAllDataFileLocationsForTable(keyspace))
         {
-            // NB: we never "accept" a file in the FilenameFilter sense: they are added to the sstable map
-            new File(directory).list(new FilenameFilter()
+            for (Pair<Descriptor, Component> component : files(new File(directory)))
             {
-                public boolean accept(File dir, String name)
-                {
-                    Pair<Descriptor,Component> component = SSTable.tryComponentFromFilename(dir, name);
                     if (component != null && component.left.cfname.equals(columnFamily))
                     {
                         if (includeCompacted || !new File(component.left.filenameFor(Component.COMPACTED_MARKER)).exists())
@@ -643,10 +650,25 @@ public boolean accept(File dir, String name)
                         else
                             logger.debug("not including compacted sstable " + component.left.cfname + "-" + component.left.generation);
                     }
+            }
+        }
+        return sstables;
+    }
+
+    private static List<Pair<Descriptor, Component>> files(File path)
+    {
+        final List<Pair<Descriptor, Component>> sstables = new ArrayList<Pair<Descriptor, Component>>();
+        // NB: we never "accept" a file in the FilenameFilter sense: they are added to the sstable map
+        path.list(new FilenameFilter()
+        {
+            public boolean accept(File dir, String name)
+            {
+                Pair<Descriptor, Component> pair = SSTable.tryComponentFromFilename(dir, name);
+                if (pair != null)
+                    sstables.add(pair);
                     return false;
                 }
             });
-        }
         return sstables;
     }
 
