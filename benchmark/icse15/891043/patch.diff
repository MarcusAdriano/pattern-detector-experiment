diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index aabd31d0..91cae0ab 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -388,7 +388,7 @@ public boolean apply(SSTable ss)
          *  4. No more invalid ranges exist.
          *
          * TODO: Because we only validate completely empty trees at the moment, we
-         * do not both dealing with case 2 and case 4 should result in an error.
+         * do not bother dealing with case 2 and case 4 should result in an error.
          *
          * Additionally, there is a special case for the minimum token, because
          * although it sorts first, it is contained in the last possible range.
@@ -474,15 +474,9 @@ public Object call() throws Exception
             Collection<InetAddress> neighbors = Collections2.filter(ss.getNaturalEndpoints(ss.getLocalToken()),
                                                                     Predicates.not(Predicates.equalTo(local)));
 
-            // cache the local tree
+            // cache the local tree and then broadcast it to our neighbors
             aes.register(cf, local, tree);
-
-            if (!local.equals(initiator))
-            {
-                // one of our neighbors initiated: broadcast the tree to all of them
                 aes.notifyNeighbors(this, local, neighbors);
-            }
-            // else: we initiated this validation session: wait for responses
 
             // return any old object
             return AntiEntropyService.class;
@@ -791,6 +785,7 @@ public void doVerb(Message message)
 
     /**
      * A tuple of table and cf.
+     * TODO: Use utils.Pair once it implements hashCode/equals.
      */
     static final class CFTuple
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java
index b03914a8..159b69c3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/MerkleTree.java
@@ -30,7 +30,7 @@
 /**
  * A MerkleTree implemented as a binary tree.
  *
- * A MerkleTree is a full binary that represents a perfect binary tree of
+ * A MerkleTree is a full binary tree that represents a perfect binary tree of
  * depth 'hashdepth'. In a perfect binary tree, each leaf contains a
  * sequentially hashed range, and each inner node contains the binary hash of
  * its two children. In the MerkleTree, many ranges will not be split to the
@@ -38,6 +38,9 @@
  * which contain the computed values of the nodes that would be below them if
  * the tree were perfect.
  *
+ * The hash values of the inner nodes of the MerkleTree are calculated lazily based
+ * on their children when the hash of a range is requested with hash(range).
+ *
  * Inputs passed to TreeRange.validate should be calculated using a very secure hash,
  * because all hashing internal to the tree is accomplished using XOR.
  *
