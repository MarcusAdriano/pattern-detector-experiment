diff --git a/lucene/solr/trunk/src/java/org/apache/solr/handler/component/SpellCheckComponent.java b/lucene/solr/trunk/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
index 63eb4ce7..350afec0 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
@@ -102,7 +102,7 @@ public void prepare(ResponseBuilder rb) throws IOException {
     }
     SolrSpellChecker spellChecker = getSpellChecker(params);
     if (params.getBool(SPELLCHECK_BUILD, false)) {
-      spellChecker.build(rb.req.getCore());
+      spellChecker.build(rb.req.getCore(), rb.req.getSearcher());
       rb.rsp.add("command", "build");
     } else if (params.getBool(SPELLCHECK_RELOAD, false)) {
       spellChecker.reload();
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java b/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
index 5305be16..a0c4991d 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
@@ -36,6 +36,7 @@
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.util.HighFrequencyDictionary;
+import org.apache.solr.search.SolrIndexSearcher;
 
 
 /**
@@ -65,7 +66,7 @@ public String init(NamedList config, SolrResourceLoader loader) {
     return name;
   }
 
-  public void build(SolrCore core) {
+  public void build(SolrCore core, SolrIndexSearcher searcher) {
     try {
       loadExternalFileDictionary(core.getSchema(), core.getResourceLoader());
       spellChecker.clearIndex();
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java b/lucene/solr/trunk/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
index 22b18dd8..4f177fc0 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
@@ -69,12 +69,11 @@ private void initSourceReader() {
     }
   }
 
-  public void build(SolrCore core) {
+  public void build(SolrCore core, SolrIndexSearcher searcher) {
     IndexReader reader = null;
     try {
       if (sourceLocation == null) {
         // Load from Solr's index
-        SolrIndexSearcher searcher = core.getSearcher().get();
         reader = searcher.getReader();
       } else {
         // Load from Lucene index at given sourceLocation
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/spelling/SolrSpellChecker.java b/lucene/solr/trunk/src/java/org/apache/solr/spelling/SolrSpellChecker.java
index d52ba0b4..bfe14644 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/spelling/SolrSpellChecker.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/spelling/SolrSpellChecker.java
@@ -22,6 +22,7 @@
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.core.SolrResourceLoader;
+import org.apache.solr.search.SolrIndexSearcher;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -67,10 +68,8 @@ public String getDictionaryName() {
 
   /**
    * (re)Build The Spelling index.  May be a NOOP if the ipmlementation doesn't require building, or can't be rebuilt
-   *
-   * @param core The SolrCore
    */
-  public abstract void build(SolrCore core);
+  public abstract void build(SolrCore core, SolrIndexSearcher searcher);
 
   /**
    * Assumes count = 1, onlyMorePopular = false, extendedResults = false
diff --git a/lucene/solr/trunk/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java b/lucene/solr/trunk/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
index 4140958e..ac28c82a 100644
--- a/lucene/solr/trunk/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
+++ b/lucene/solr/trunk/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
@@ -72,7 +72,7 @@ public void test() throws Exception {
     SolrCore core = h.getCore();
     String dictName = checker.init(spellchecker, core.getResourceLoader());
     assertTrue(dictName + " is not equal to " + "external", dictName.equals("external") == true);
-    checker.build(core);
+    checker.build(core, null);
 
     IndexReader reader = core.getSearcher().get().getReader();
     Collection<Token> tokens = queryConverter.convert("fob");
@@ -110,7 +110,7 @@ public void testFieldType() throws Exception {
     SolrCore core = h.getCore();
     String dictName = checker.init(spellchecker, core.getResourceLoader());
     assertTrue(dictName + " is not equal to " + "external", dictName.equals("external") == true);
-    checker.build(core);
+    checker.build(core, null);
 
     IndexReader reader = core.getSearcher().get().getReader();
     Collection<Token> tokens = queryConverter.convert("Solar");
@@ -151,7 +151,7 @@ public void testRAMDirectory() throws Exception {
     SolrCore core = h.getCore();
     String dictName = checker.init(spellchecker, core.getResourceLoader());
     assertTrue(dictName + " is not equal to " + "external", dictName.equals("external") == true);
-    checker.build(core);
+    checker.build(core, null);
 
     IndexReader reader = core.getSearcher().get().getReader();
     Collection<Token> tokens = queryConverter.convert("solar");
diff --git a/lucene/solr/trunk/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java b/lucene/solr/trunk/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java
index 7c0024da..15fdf826 100644
--- a/lucene/solr/trunk/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java
+++ b/lucene/solr/trunk/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java
@@ -43,6 +43,8 @@
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.util.AbstractSolrTestCase;
+import org.apache.solr.util.RefCounted;
+import org.apache.solr.search.SolrIndexSearcher;
 
 import java.io.File;
 import java.util.Collection;
@@ -105,9 +107,12 @@ public void testSpelling() throws Exception {
     String dictName = checker.init(spellchecker, core.getResourceLoader());
     assertTrue(dictName + " is not equal to " + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,
             dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);
-    checker.build(core);
+    RefCounted<SolrIndexSearcher> holder = core.getSearcher();
+    SolrIndexSearcher searcher = holder.get();
+    try {
+    checker.build(core, searcher);
 
-    IndexReader reader = core.getSearcher().get().getReader();
+    IndexReader reader = searcher.getReader();
     Collection<Token> tokens = queryConverter.convert("documemt");
     SpellingResult result = checker.getSuggestions(tokens, reader);
     assertTrue("result is null and it shouldn't be", result != null);
@@ -155,6 +160,9 @@ public void testSpelling() throws Exception {
     entry = suggestions.entrySet().iterator().next();
     assertTrue(entry.getKey() + " is equal to " + "bug and it shouldn't be", entry.getKey().equals("bug") == false);
     assertTrue(entry.getValue() + " does not equal: " + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);
+    } finally {
+      holder.decref();
+    }
   }
 
   public void testExtendedResults() throws Exception {
@@ -172,9 +180,12 @@ public void testExtendedResults() throws Exception {
     String dictName = checker.init(spellchecker, core.getResourceLoader());
     assertTrue(dictName + " is not equal to " + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,
             dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);
-    checker.build(core);
+    RefCounted<SolrIndexSearcher> holder = core.getSearcher();
+    SolrIndexSearcher searcher = holder.get();
+    try {
+    checker.build(core, searcher);
 
-    IndexReader reader = core.getSearcher().get().getReader();
+    IndexReader reader = searcher.getReader();
     Collection<Token> tokens = queryConverter.convert("documemt");
     SpellingResult result = checker.getSuggestions(tokens, reader, 1, false, true);
     assertTrue("result is null and it shouldn't be", result != null);
@@ -198,6 +209,9 @@ public void testExtendedResults() throws Exception {
     assertTrue("result is null and it shouldn't be", result != null);
     suggestions = result.get(tokens.iterator().next());
     assertTrue("suggestions is not null and it should be", suggestions == null);
+    } finally {
+      holder.decref();
+    }
   }
 
   private class TestSpellChecker extends IndexBasedSpellChecker{
@@ -222,12 +236,18 @@ public void testAlternateDistance() throws Exception {
     String dictName = checker.init(spellchecker, core.getResourceLoader());
     assertTrue(dictName + " is not equal to " + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,
             dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);
-    checker.build(core);
+    RefCounted<SolrIndexSearcher> holder = core.getSearcher();
+    SolrIndexSearcher searcher = holder.get();
+    try {
+    checker.build(core, searcher);
     SpellChecker sc = checker.getSpellChecker();
     assertTrue("sc is null and it shouldn't be", sc != null);
     StringDistance sd = sc.getStringDistance();
     assertTrue("sd is null and it shouldn't be", sd != null);
     assertTrue("sd is not an instance of " + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);
+    } finally {
+      holder.decref();
+    }
   }
 
   public void testAlternateLocation() throws Exception {
@@ -266,9 +286,12 @@ public void testAlternateLocation() throws Exception {
     String dictName = checker.init(spellchecker, core.getResourceLoader());
     assertTrue(dictName + " is not equal to " + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,
             dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);
-    checker.build(core);
+    RefCounted<SolrIndexSearcher> holder = core.getSearcher();
+    SolrIndexSearcher searcher = holder.get();
+    try {
+    checker.build(core, searcher);
 
-    IndexReader reader = core.getSearcher().get().getReader();
+    IndexReader reader = searcher.getReader();
     Collection<Token> tokens = queryConverter.convert("flesh");
     SpellingResult result = checker.getSuggestions(tokens, reader, 1, false, true);
     assertTrue("result is null and it shouldn't be", result != null);
@@ -292,7 +315,9 @@ public void testAlternateLocation() throws Exception {
     assertTrue("result is null and it shouldn't be", result != null);
     suggestions = result.get(tokens.iterator().next());
     assertTrue("suggestions is not null and it should be", suggestions == null);
-
+    } finally {
+      holder.decref();
+    }
   }
 }
 
