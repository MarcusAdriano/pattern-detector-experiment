diff --git a/incubator/solr/trunk/src/java/org/apache/solr/util/DOMUtil.java b/incubator/solr/trunk/src/java/org/apache/solr/util/DOMUtil.java
index 3e561c59..12531e3d 100644
--- a/incubator/solr/trunk/src/java/org/apache/solr/util/DOMUtil.java
+++ b/incubator/solr/trunk/src/java/org/apache/solr/util/DOMUtil.java
@@ -189,7 +189,6 @@ private static void getText(Node nd, StringBuilder buf) {
     switch (type) {
       
     case Node.ELEMENT_NODE: /* fall through */
-    case Node.ATTRIBUTE_NODE: /* fall through */
     case Node.ENTITY_NODE: /* fall through */
     case Node.ENTITY_REFERENCE_NODE: /* fall through */
     case Node.DOCUMENT_FRAGMENT_NODE: 
@@ -204,6 +203,20 @@ private static void getText(Node nd, StringBuilder buf) {
       }
       break;
       
+    case Node.ATTRIBUTE_NODE: /* fall through */
+      /* Putting Attribute nodes in this section does not exactly 
+         match the definition of how textContent should behave 
+         according to the DOM Level-3 Core documentation - which 
+         specifies that the Attr's children should have their 
+         textContent concated (Attr's can have a single child which 
+         is either Text node or an EntityRefrence).  In practice,
+         DOM implementations do not seem to use child nodes of 
+         Attributes, storing the "text" directly as the nodeValue.
+         Fortunately, the DOM Spec indicates that when Attr.nodeValue 
+         is read, it should return the nodeValue from the child Node, 
+         so this approach should work both for strict implementations, 
+         and implementations actually encountered.
+      */
     case Node.TEXT_NODE: /* fall through */
     case Node.CDATA_SECTION_NODE: /* fall through */
     case Node.COMMENT_NODE: /* fall through */
