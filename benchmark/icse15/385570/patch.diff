diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index 16d1d139..2de4bd74 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -200,7 +200,7 @@ public final void addBatch(String sql) throws SQLException {
 
 		@exception SQLException	thrown on failure
 	 */
-	protected void closeActions() throws SQLException {
+	void closeActions() throws SQLException {
 
 		//we release the resource for preparedStatement
 		preparedStatement = null;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index b2214ade..ea5ca6f2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -102,7 +102,17 @@
 	//deleteRow & updateRow make rowData null so that ResultSet is not positioned on deleted/updated row.
 	private DataValueDescriptor[] rowData;
 	protected boolean wasNull;
-	protected boolean isClosed;
+    
+    /**
+     * Set if this ResultSet is definitely closed.
+     * If the connection has been closed, or the database
+     *  or system shutdown but the ResultSet has not been
+     *  closed explictly then this may be false. Once
+     *  this object detects the connection is closed
+     *  isClosed will be set to true.
+     */
+    boolean isClosed;
+    
 	private boolean isOnInsertRow;
 	private ExecRow currentRowBeforeInsert;
 	private ExecRow insertRow = null;
@@ -3966,7 +3976,7 @@ protected EmbedResultSetMetaData newEmbedResultSetMetaData(ResultDescription res
 	 * Documented behaviour for streams is that they are implicitly closed on
 	 * the next get*() method call.
 	 */
-	protected final void closeCurrentStream() {
+	private final void closeCurrentStream() {
 
 		if (currentStream != null) {
 			try {
@@ -3995,20 +4005,33 @@ protected final void closeCurrentStream() {
 	 *
 	 * @exception SQLException		Thrown if this ResultSet is closed.
 	 */
-	protected final void checkIfClosed(String operation) throws SQLException {
+	final void checkIfClosed(String operation) throws SQLException {
 		if (isClosed) {
 			throw newSQLException(SQLState.LANG_RESULT_SET_NOT_OPEN, operation);
 		}
 	}
 
-	protected final void checkExecIfClosed(String operation) throws SQLException {
+    /**
+     * Throw an exception if this ResultSet is closed or its
+     * Connection has been closed. If the ResultSet has not
+     * been explictly closed but the Connection is closed,
+     * then this ResultSet will be marked as closed.
+     */
+	final void checkExecIfClosed(String operation) throws SQLException {
 		
 		checkIfClosed(operation);
 
 		java.sql.Connection appConn = getEmbedConnection().getApplicationConnection();
 
-		if ((appConn == null) || appConn.isClosed())
+        // Currently disconnected, i.e. a detached gobal transaction
+        if (appConn == null)
+			throw Util.noCurrentConnection();
+            
+		if (appConn.isClosed()) {
+            closeCurrentStream();
+            isClosed = true;
 			throw Util.noCurrentConnection();
+        }
 	}
     
 	/**
@@ -4045,7 +4068,7 @@ private static boolean isMaxFieldSizeType(int colType){
 	/*
 	 * close result set if we have a transaction level error 
 	 */
-	protected final SQLException closeOnTransactionError(Throwable thrownException) throws SQLException
+	final SQLException closeOnTransactionError(Throwable thrownException) throws SQLException
 	{
 		SQLException sqle = handleException(thrownException);
 		if (thrownException instanceof StandardException)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index ee4f1a1f..2336f499 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -275,7 +275,7 @@ public final void close() throws SQLException {
 
 	// allow sub-classes to execute additional close
 	// logic while holding the synchronization.
-	protected void closeActions() throws SQLException {
+	void closeActions() throws SQLException {
 	}
 
     //----------------------------------------------------------------------
@@ -939,8 +939,10 @@ protected boolean executeBatchElement(Object batchElement) throws SQLException,
 		checkStatus();
 
     	java.sql.Connection appConn = getEmbedConnection().getApplicationConnection();
-		if ((appConn != applicationConnection) || (appConn == null))
+		if ((appConn != applicationConnection) || (appConn == null)) {
+
 			throw Util.noCurrentConnection();
+        }
 		return appConn;
     }
 
@@ -995,7 +997,6 @@ public final boolean getMoreResults(int current) throws SQLException	{
 
 
 				try {
-					if (!lrs.isClosed)
 						lrs.close();
 				} catch (SQLException sqle) {
 					if (se == null)
@@ -1241,7 +1242,7 @@ public ParameterValueSet getParameterValueSet()
 
 	//check the status of this statement, if it has already been closed,
     //we throw an exception, need to be called by every public method
-    protected final void checkStatus() throws SQLException {
+    final void checkStatus() throws SQLException {
 
 		if (!active)
 			throw newSQLException(SQLState.ALREADY_CLOSED, "Statement");
@@ -1305,7 +1306,6 @@ protected void clearResultSets() throws SQLException {
 					continue;
 
 				try {
-					if (!lrs.isClosed)
 						lrs.close();
 				} catch (SQLException sdynamic) {
 					if (sqle == null)
