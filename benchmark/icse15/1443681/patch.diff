diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
index a5ff580f..98701da4 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
@@ -15,6 +15,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -43,7 +44,7 @@ public BundleEventHook() {
 	public void event(BundleEvent event, Collection<BundleContext> contexts) {
 		if ((event.getType() & (BundleEvent.INSTALLED | BundleEvent.UNINSTALLED)) == 0)
 			return;
-		// Protected against deadlock when the bundle event hook receives an
+		// Protect against deadlock when the bundle event hook receives an
 		// event before subsystems has fully initialized, in which case the
 		// events are queued and processed once initialization is complete.
 		synchronized (this) {
@@ -80,6 +81,12 @@ private Subsystems getSubsystems() {
 		return activator.getSubsystems();
 	}
 	
+	/*
+	 * Note that because some events may be processed asynchronously, we can no
+	 * longer rely on the guarantees that a synchronous event brings. For
+	 * example, bundle revisions adapted from bundles included in events may be
+	 * null.
+	 */
 	private void handleEvent(BundleEvent event) {
 		switch (event.getType()) {
 			case BundleEvent.INSTALLED:
@@ -93,13 +100,22 @@ private void handleEvent(BundleEvent event) {
 		}
 	}
 	
+	/*
+	 * This method guards against an uninstalled origin bundle. Guards against a
+	 * null bundle revision are done elsewhere. It is assumed the bundle
+	 * revision is never null once we get here.
+	 */
 	private void handleExplicitlyInstalledBundleBundleContext(BundleRevision originRevision, BundleRevision bundleRevision) {
 		// The bundle needs to be associated with all subsystems that are 
 		// associated with the bundle whose context was used to install the 
 		// bundle.
 		Collection<BasicSubsystem> subsystems = getSubsystems().getSubsystemsReferencing(originRevision);
 		if (subsystems.isEmpty())
-			throw new IllegalStateException("Orphaned bundle revision detected: " + originRevision);
+			// If subsystems does not know about the origin bundle for some
+			// reason (e.g., the event is being processed asynchronously
+			// and the origin bundle has been uninstalled), associate the
+			// installed bundle with the root subsystem.
+			subsystems = Collections.singleton(getSubsystems().getRootSubsystem());
 		for (BasicSubsystem s : subsystems)
 			Utils.installResource(bundleRevision, s);
 	}
@@ -124,13 +140,17 @@ private void handleInstalledEvent(BundleEvent event) {
 		BundleRevision originRevision = origin.adapt(BundleRevision.class);
 		Bundle bundle = event.getBundle();
 		BundleRevision bundleRevision = bundle.adapt(BundleRevision.class);
+		if (bundleRevision == null)
+			// The event is being processed asynchronously and the installed
+			// bundle has been uninstalled. Nothing we can do.
+			return;
 		bundleToRevision.put(bundle, bundleRevision);
 		// Only handle explicitly installed bundles. An explicitly installed
 		// bundle is a bundle that was installed using some other bundle's
 		// BundleContext or using RegionDigraph.
 		if (ThreadLocalSubsystem.get() != null)
 			return;
-		if ("org.eclipse.equionox.region".equals(origin.getSymbolicName()))
+		if ("org.eclipse.equinox.region".equals(origin.getSymbolicName()))
 			// The bundle was installed using RegionDigraph.
 			handleExplicitlyInstalledBundleRegionDigraph(origin, bundleRevision);
 		else
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
index d53427c7..6db345c9 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
@@ -27,6 +27,8 @@
 import org.osgi.service.repository.RepositoryContent;
 import org.osgi.service.subsystem.Subsystem.State;
 
+import com.sun.org.apache.bcel.internal.generic.GETSTATIC;
+
 public class SubsystemResourceInstaller extends ResourceInstaller {
 	public SubsystemResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
 		super(coordination, resource, subsystem);
@@ -83,16 +85,14 @@ public void failed(Coordination arg0) throws Exception {
 	}
 	
 	private BasicSubsystem installAriesSubsystem(BasicSubsystem subsystem) throws Exception {
-		// If the state is null, this is a brand new subsystem. If the state is
-		// not null, this is a persisted subsystem. For brand new subsystems,
-		// an INSTALLING event must be propagated.
-		if (subsystem.getState() == null)
-			subsystem.setState(State.INSTALLING);
 		addChild(subsystem);
 		addReference(subsystem);
 		addConstituent(subsystem);
 		addSubsystem(subsystem);
 		installRegionContextBundle(subsystem);
+		// This will emit the initial service event for INSTALLING subsystems.
+		// The first event for RESOLVED (i.e. persisted) subsystems is emitted later.
+		if (State.INSTALLING.equals(subsystem.getState()))
 		Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
 		Comparator<Resource> comparator = new InstallResourceComparator();
 		// Install dependencies first...
@@ -121,6 +121,9 @@ private BasicSubsystem installAriesSubsystem(BasicSubsystem subsystem) throws Ex
 		// in which case an INSTALLED event must be propagated.
 		if (State.INSTALLING.equals(subsystem.getState()))
 			subsystem.setState(State.INSTALLED);
+		else
+			// This is a persisted subsystem in the RESOLVED state. Emit the first service event.
+			Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
 		return subsystem;
 	}
 	
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java
index adb2d2bf..3bb68e2e 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java
@@ -18,25 +18,36 @@
  */
 package org.apache.aries.subsystem.itests;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
 
+import org.eclipse.equinox.region.RegionDigraph;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
 import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleException;
 import org.osgi.framework.ServiceEvent;
 import org.osgi.framework.ServiceListener;
+import org.osgi.framework.ServiceReference;
+import org.osgi.framework.namespace.IdentityNamespace;
+import org.osgi.service.subsystem.Subsystem;
+import org.osgi.service.subsystem.SubsystemConstants;
 
 @RunWith(MavenConfiguredJUnit4TestRunner.class)
 public class BundleEventHookTest extends SubsystemTest {
@@ -44,6 +55,10 @@
 	 * Bundle-SymbolicName: bundle.a.jar
 	 */
 	private static final String BUNDLE_A = "bundle.a.jar";
+	/*
+	 * Bundle-SymbolicName: bundle.b.jar
+	 */
+	private static final String BUNDLE_B = "bundle.b.jar";
 	
 	@Before
 	public static void createApplications() throws Exception {
@@ -51,6 +66,7 @@ public static void createApplications() throws Exception {
 			return;
 		}
 		createBundleA();
+		createBundleB();
 		createdApplications = true;
 	}
 	
@@ -58,6 +74,10 @@ private static void createBundleA() throws IOException {
 		createBundle(BUNDLE_A);
 	}
     
+	private static void createBundleB() throws IOException {
+		createBundle(BUNDLE_B);
+	}
+    
     /*
      * See https://issues.apache.org/jira/browse/ARIES-982.
      * 
@@ -124,4 +144,107 @@ public void run() {
     		executor.shutdownNow();
     	}
     }
+    
+    /*
+     * Because bundle events are queued for later asynchronous processing while
+     * the root subsystem is initializing, it is possible to see an installed
+     * event for a bundle that has been uninstalled (i.e. the bundle revision
+     * will be null). These events should be ignored.
+     */
+    @Test
+    public void testIgnoreUninstalledBundleInAsyncInstalledEvent() throws Exception {
+    	final Bundle core = getSubsystemCoreBundle();
+    	core.stop();
+    	final AtomicReference<Bundle> a = new AtomicReference<Bundle>();
+    	bundleContext.addServiceListener(
+    			new ServiceListener() {
+					@Override
+					public void serviceChanged(ServiceEvent event) {
+						if ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)
+							return;
+						if (a.get() != null)
+							// We've been here before and already done what needs doing.
+							return;
+						ServiceReference<Subsystem> sr = (ServiceReference<Subsystem>)event.getServiceReference();
+						Subsystem s = bundleContext.getService(sr);
+						try {
+							// Queue up the installed event.
+							a.set(core.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));
+							// Ensure the bundle will be uninstalled before the event is processed.
+							a.get().uninstall();
+						}
+						catch (Exception e) {
+							e.printStackTrace();
+						}
+					}
+    			}, 
+    			"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))");
+    	try {
+    		// Before the fix, this would fail due to an NPE resulting from a
+    		// null bundle revision.
+    		core.start();
+    	}
+    	catch (BundleException e) {
+    		e.printStackTrace();
+    		fail("Subsystems failed to handle an asynchronous bundle installed event after the bundle was uninstalled");
+    	}
+    	assertBundleState(a.get(), Bundle.UNINSTALLED);
+    	Subsystem root = getRootSubsystem();
+    	assertState(Subsystem.State.ACTIVE, root);
+    	assertNotConstituent(root, a.get().getSymbolicName());
+    }
+    
+    /*
+     * Because bundle events are queued for later asynchronous processing while
+     * the root subsystem is initializing, it is possible to see an installed
+     * event whose origin bundle has been uninstalled (i.e. the origin bundle's
+     * revision will be null). These events should result in the installed
+     * bundle being associated with the root subsystem.
+     */
+    @Test
+    public void testIgnoreUninstalledOriginBundleInAsyncInstalledEvent() throws Exception {
+    	final Bundle core = getSubsystemCoreBundle();
+    	core.stop();
+    	final Bundle b = bundleContext.installBundle(BUNDLE_B, new FileInputStream(BUNDLE_B));
+    	// Ensure bundle B has a context.
+    	b.start();
+    	final AtomicReference<Bundle> a = new AtomicReference<Bundle>();
+    	bundleContext.addServiceListener(
+    			new ServiceListener() {
+					@Override
+					public void serviceChanged(ServiceEvent event) {
+						if ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)
+							return;
+						if (a.get() != null)
+							// We've been here before and already done what needs doing.
+							return;
+						ServiceReference<Subsystem> sr = (ServiceReference<Subsystem>)event.getServiceReference();
+						Subsystem s = bundleContext.getService(sr);
+						try {
+							// Queue up the installed event for bundle A using B's context.
+							a.set(b.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));
+							// Ensure the origin bundle will be uninstalled before the event is processed.
+							b.uninstall();
+						}
+						catch (Exception e) {
+							e.printStackTrace();
+						}
+					}
+    			}, 
+    			"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))");
+    	try {
+    		// Before the fix, this would fail due to an NPE resulting from a
+    		// null bundle revision.
+    		core.start();
+    	}
+    	catch (BundleException e) {
+    		e.printStackTrace();
+    		fail("Subsystems failed to handle an asynchronous bundle installed event after the origin bundle was uninstalled");
+    	}
+    	assertBundleState(a.get(), Bundle.INSTALLED);
+    	assertBundleState(b, Bundle.UNINSTALLED);
+    	Subsystem root = getRootSubsystem();
+    	assertState(Subsystem.State.ACTIVE, root);
+    	assertConstituent(root, a.get().getSymbolicName());
+    }
 }
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
index 5ccd668e..0fdd683f 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
@@ -715,7 +715,7 @@ protected AriesSubsystem getRootAriesSubsystem() {
 	}
 	
 	protected Subsystem getRootSubsystem() {
-		return getOsgiService(Subsystem.class);
+		return getOsgiService(Subsystem.class, "(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0))", DEFAULT_TIMEOUT);
 	}
 	
 	protected Subsystem getRootSubsystemInState(Subsystem.State state, long timeout) throws InterruptedException {
