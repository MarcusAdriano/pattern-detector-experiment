diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
index cb7a12d2..60bc6492 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
@@ -103,7 +103,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * @param leftOperand     The left operand
      * @param rightOperand    The right operand
      * @param forQueryRewrite See method description
-     * @paran cm              The context manager
+     * @param cm              The context manager
      */
     BinaryRelationalOperatorNode(
             int kind,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 514e8864..25d66485 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -260,7 +260,7 @@ JBitSet LOJgetReferencedTables(int numTables)
 	 */
 
 	/**
-	 * @see Optimizable#nextAccessPath
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#nextAccessPath
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
@@ -529,7 +529,7 @@ public CostEstimate optimizeIt(
 		return getCurrentAccessPath().getCostEstimate();
 	}
 
-	/** @see Optimizable#getTableDescriptor */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#getTableDescriptor */
     @Override
 	public TableDescriptor getTableDescriptor()
 	{
@@ -537,7 +537,7 @@ public TableDescriptor getTableDescriptor()
 	}
 
 
-	/** @see Optimizable#isMaterializable 
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#isMaterializable 
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
@@ -551,7 +551,7 @@ public boolean isMaterializable()
 
 
 	/**
-	 * @see Optimizable#pushOptPredicate
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#pushOptPredicate
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
@@ -573,7 +573,7 @@ public boolean pushOptPredicate(OptimizablePredicate optimizablePredicate)
 	}
 
 	/**
-	 * @see Optimizable#pullOptPredicates
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#pullOptPredicates
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
@@ -590,7 +590,7 @@ public void pullOptPredicates(
 	}
 
 	/** 
-	 * @see Optimizable#isCoveringIndex
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#isCoveringIndex
 	 * @exception StandardException		Thrown on error
 	 */
     @Override
@@ -649,7 +649,7 @@ public boolean isCoveringIndex(ConglomerateDescriptor cd) throws StandardExcepti
 		return coveringIndex;
 	}
 
-	/** @see Optimizable#verifyProperties 
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#verifyProperties 
 	 * @exception StandardException		Thrown on error
 	 */
     @Override
@@ -844,14 +844,14 @@ else if (key.equals("bulkFetch"))
 		}
 	}
 
-	/** @see Optimizable#getBaseTableName */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#getBaseTableName */
     @Override
 	public String getBaseTableName()
 	{
 		return tableName.getTableName();
 	}
 
-	/** @see Optimizable#startOptimizing */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#startOptimizing */
     @Override
 	public void startOptimizing(Optimizer optimizer, RowOrdering rowOrdering)
 	{
@@ -887,7 +887,7 @@ public void startOptimizing(Optimizer optimizer, RowOrdering rowOrdering)
 		super.startOptimizing(optimizer, rowOrdering);
 	}
 
-	/** @see Optimizable#convertAbsoluteToRelativeColumnPosition */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#convertAbsoluteToRelativeColumnPosition */
     @Override
 	public int convertAbsoluteToRelativeColumnPosition(int absolutePosition)
 	{
@@ -909,7 +909,7 @@ public int convertAbsoluteToRelativeColumnPosition(int absolutePosition)
      * allows more concurrency.
      * </p>
      *
-	 * @see Optimizable#estimateCost
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#estimateCost
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
@@ -2065,14 +2065,14 @@ private void setLockingBasedOnThreshold(
 									TransactionController.MODE_RECORD);
 	}
 
-	/** @see Optimizable#isBaseTable */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#isBaseTable */
     @Override
 	public boolean isBaseTable()
 	{
 		return true;
 	}
 
-	/** @see Optimizable#forUpdate */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#forUpdate */
     @Override
 	public boolean forUpdate()
 	{
@@ -2084,14 +2084,14 @@ public boolean forUpdate()
 		return (updateOrDelete != 0) || cursorTargetTable || getUpdateLocks;
 	}
 
-	/** @see Optimizable#initialCapacity */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#initialCapacity */
     @Override
 	public int initialCapacity()
 	{
 		return initialCapacity;
 	}
 
-	/** @see Optimizable#loadFactor */
+	/** @see org.apache.derby.iapi.sql.compile.Optimizable#loadFactor */
     @Override
 	public float loadFactor()
 	{
@@ -2099,7 +2099,7 @@ public float loadFactor()
 	}
 
 	/**
-	 * @see Optimizable#memoryUsageOK
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#memoryUsageOK
 	 */
     @Override
 	public boolean memoryUsageOK(double rowCount, int maxMemoryPerTable)
@@ -2109,7 +2109,7 @@ public boolean memoryUsageOK(double rowCount, int maxMemoryPerTable)
 	}
 
 	/**
-	 * @see Optimizable#isTargetTable
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#isTargetTable
 	 */
     @Override
 	public boolean isTargetTable()
@@ -2118,7 +2118,7 @@ public boolean isTargetTable()
 	}
 
 	/**
-	 * @see Optimizable#uniqueJoin
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#uniqueJoin
 	 */
     @Override
 	public double uniqueJoin(OptimizablePredicateList predList)
@@ -2154,7 +2154,7 @@ public double uniqueJoin(OptimizablePredicateList predList)
 	}
 
 	/**
-	 * @see Optimizable#isOneRowScan
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#isOneRowScan
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
@@ -2175,7 +2175,7 @@ public boolean isOneRowScan()
 	}
 
 	/**
-	 * @see Optimizable#legalJoinOrder
+	 * @see org.apache.derby.iapi.sql.compile.Optimizable#legalJoinOrder
 	 */
     @Override
 	public boolean legalJoinOrder(JBitSet assignedTableMap)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
index 0a4a087f..42d874fd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
@@ -1302,11 +1302,11 @@ abstract boolean isEquivalent(ValueNode other)
     /**
      * Some node classes represent several logical node types (to reduce
      * footprint), which we call <em>kinds</em>.
-     * This means that implementations of {@link #isEquivalent()}
+     * This means that implementations of {@link #isEquivalent}
      * cannot always just use {@code instanceof} to check if the other node
      * represents the same kind. Hence this method needs to be
      * implemented by all node classes that represent several kinds.
-     * It is only called from implementations of {@code isEquivalent}.
+     * It is only called from implementations of {@code #isEquivalent}.
      *
      * @param other The other value node whose kind we want to compare with.
      * @return {@code true} if {@code this} and {@code o} represent the same
