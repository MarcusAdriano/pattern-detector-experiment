diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
index 736adc6d..2de7d6c2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
@@ -347,8 +347,21 @@ private boolean permitsSQL( RoutineAliasInfo rai )
 	 * This can't be done for parameters which are wrappers over SQL function
 	 * defined with RETURN NULL ON NULL INPUT because such functions need
 	 * access to both sql domain value and java domain value. - Derby479
+     * This optimization is not available if the outer function is
+	 * RETURN NULL ON NULL INPUT. That is because the SQLToJavaNode is
+	 * responsible for compiling the byte code which skips the method call if
+     * the parameter is null--if we remove the SQLToJavaNode, then we don't
+     * compile that check and we get bug DERBY-1030.
 	 */
 	private void optimizeDomainValueConversion() throws StandardException {
+
+        //
+        // This optimization is not possible if we are compiling a call to
+        // a NULL ON NULL INPUT method. See DERBY-1030 and the header
+        // comment above.
+        //
+        if ( !routineInfo.calledOnNullInput() ) { return; }
+        
 		int		count = methodParms.length;
 		for (int parm = 0; parm < count; parm++)
 		{
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java
index 2a3d7f29..38b03c78 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java
@@ -572,7 +572,7 @@ public void testFunctionNullHandling() throws SQLException, UnsupportedEncodingE
         // noon->NULL by inner function
         // NULL->NULL by outer due to RETURN NULL ON NULL INPUT
         ps.setTime(1, noon); // noon->NULL->NULL
-        JDBC.assertSingleValueResultSet(ps.executeQuery(), "11:00:00");        
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), null);        
         ps.setTime(1, null); // NULL->11:00:00->11:30:00
         JDBC.assertSingleValueResultSet(ps.executeQuery(), "11:30:00");
 
