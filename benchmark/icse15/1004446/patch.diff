diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
index 458470aa..fe1a8b10 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
@@ -45,6 +45,7 @@
 import org.apache.aries.blueprint.di.CollectionRecipe;
 import org.apache.aries.blueprint.di.Recipe;
 import org.apache.aries.blueprint.proxy.AsmInterceptorWrapper;
+import org.apache.aries.blueprint.proxy.UnableToProxyException;
 import org.apache.aries.blueprint.utils.BundleDelegatingClassLoader;
 import org.apache.aries.blueprint.utils.ReflectionUtils;
 import org.osgi.framework.Bundle;
@@ -640,7 +641,11 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
     public static class AsmProxyFactory implements ProxyFactory {
 
         public Object createProxy(final ClassLoader classLoader, final Class[] classes, final Callable<Object> dispatcher) {
+            try {
             return AsmInterceptorWrapper.createProxyObject(classLoader, null, null, dispatcher, classes);
+            } catch (UnableToProxyException e) {
+                throw new ComponentDefinitionException("Unable to create asm proxy", e);
+            }
         }
 
     }
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
index 180d72a9..c6723e11 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
@@ -41,6 +41,7 @@
 import org.apache.aries.blueprint.di.AbstractRecipe;
 import org.apache.aries.blueprint.di.Recipe;
 import org.apache.aries.blueprint.proxy.AsmInterceptorWrapper;
+import org.apache.aries.blueprint.proxy.UnableToProxyException;
 import org.apache.aries.blueprint.utils.ReflectionUtils;
 import org.apache.aries.blueprint.utils.ReflectionUtils.PropertyDescriptor;
 import org.osgi.service.blueprint.container.ComponentDefinitionException;
@@ -689,9 +690,13 @@ private Object addInterceptors(Object original)
             }
             // if asm is available we can proxy the original object with the
             // AsmInterceptorWrapper
+            try {
             intercepted = AsmInterceptorWrapper.createProxyObject(original
                     .getClass().getClassLoader(), interceptorLookupKey, interceptors,
                     AsmInterceptorWrapper.passThrough(original), original.getClass());
+            } catch (UnableToProxyException e) {
+                throw new ComponentDefinitionException("Unable to create asm proxy", e);
+            }
         } else {
             intercepted = original;
         }
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
index 5d7f9d34..6082a5a5 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
@@ -111,6 +111,8 @@ public void start(BundleContext context) {
     /**
      * this method checks the initial bundle that are installed/active before
      * bundle tracker is opened.  
+     *
+     * @param b the bundle to check
      */
     private void checkInitialBundle(Bundle b) {
         // If the bundle is active, check it
@@ -335,7 +337,7 @@ private URL getOverrideURLForCachePath(String privatePath){
         if (privateDataVersion != null
                 && privateDataVersion.exists()) {
             try {
-                override = privateDataVersion.toURL();
+                override = privateDataVersion.toURI().toURL();
             } catch (MalformedURLException e) {
                 LOGGER.error("Unexpected URL Conversion Issue", e);
             }
@@ -411,7 +413,7 @@ public void removedBundle(Bundle b, BundleEvent event, Object arg2) {
     
     protected BlueprintContainerImpl getBlueprintContainerImpl(Bundle bundle)
     {
-    	return (BlueprintContainerImpl) containers.get(bundle);
+    	return containers.get(bundle);
     }
     
 }
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
index 4294485d..81970a6e 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
@@ -17,6 +17,7 @@
 package org.apache.aries.blueprint.container;
 
 
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Dictionary;
@@ -30,17 +31,14 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
-import org.apache.aries.blueprint.BlueprintConstants;
-import org.apache.aries.blueprint.ComponentDefinitionRegistry;
-import org.apache.aries.blueprint.ExtendedBlueprintContainer;
-import org.apache.aries.blueprint.Interceptor;
-import org.apache.aries.blueprint.ServiceProcessor;
+import org.apache.aries.blueprint.*;
 import org.apache.aries.blueprint.di.AbstractRecipe;
 import org.apache.aries.blueprint.di.CollectionRecipe;
 import org.apache.aries.blueprint.di.MapRecipe;
 import org.apache.aries.blueprint.di.Recipe;
 import org.apache.aries.blueprint.di.Repository;
 import org.apache.aries.blueprint.proxy.AsmInterceptorWrapper;
+import org.apache.aries.blueprint.proxy.FinalModifierException;
 import org.apache.aries.blueprint.utils.JavaUtils;
 import org.apache.aries.blueprint.utils.ReflectionUtils;
 import org.osgi.framework.Bundle;
@@ -55,6 +53,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static java.lang.reflect.Modifier.isFinal;
+
 /**
  * A <code>Recipe</code> to export services into the OSGi registry.
  *
@@ -412,86 +412,73 @@ public void quiesce(DestroyCallback destroyCallback)
      
     private class TriggerServiceFactory implements ServiceFactory 
     {
-    	private QuiesceInterceptor interceptor;
     	private ServiceRecipe serviceRecipe;
     	private ComponentMetadata cm;
     	private ServiceMetadata sm;
+        private boolean isQuiesceAvailable;
+        private boolean isAsmAvailable;
     	public TriggerServiceFactory(ServiceRecipe serviceRecipe, ServiceMetadata cm)
     	{
     		this.serviceRecipe = serviceRecipe;
     		this.cm = cm;
     		this.sm = cm;
+            this.isQuiesceAvailable = isClassAvailable("org.apache.aries.quiesce.participant.QuiesceParticipant");
+            this.isAsmAvailable = isClassAvailable("org.objectweb.asm.ClassVisitor");
     	}
     	
         public Object getService(Bundle bundle, ServiceRegistration registration) {
-            Object original = ServiceRecipe.this.getService(bundle,
-                    registration);
+            Object original = ServiceRecipe.this.getService(bundle, registration);
             LOGGER.debug(LOG_ENTRY, "getService", original);
-            Object intercepted;
-
-            if (interceptor == null) {
-                interceptor = new QuiesceInterceptor(serviceRecipe);
-            }
 
             List<Interceptor> interceptors = new ArrayList<Interceptor>();
-            interceptors.add(interceptor);
-
-            //check for any registered interceptors for this metadata
             ComponentDefinitionRegistry reg = blueprintContainer.getComponentDefinitionRegistry();
             List<Interceptor> registeredInterceptors = reg.getInterceptors(cm);
-            //add the registered interceptors to the list of interceptors
-            if (registeredInterceptors != null && registeredInterceptors.size()>0){
+            if (registeredInterceptors != null) {
               interceptors.addAll(registeredInterceptors);
             }
-            
-            try {
-                // Try load load an asm class (to make sure it's actually
-                // available)
-                getClass().getClassLoader().loadClass(
-                        "org.objectweb.asm.ClassVisitor");
-                LOGGER.debug("asm available for interceptors");
-            } catch (Throwable t) {
-                LOGGER
-                        .info("A problem occurred trying to create a proxy object. Returning the original object instead.");
+            // Add quiesce interceptor if needed
+            if (isQuiesceAvailable)
+            {
+                interceptors.add(new QuiesceInterceptor(serviceRecipe));
+            }
+            // Exit if no interceptors configured
+            if (interceptors.isEmpty()) {
+                return original;
+            }
+            // If asm is not available, exit
+            if (!isAsmAvailable) {
+                LOGGER.info("ASM is not available to create a proxy object. Returning the original object instead.");
                 LOGGER.debug(LOG_EXIT, "getService", original);
                 return original;
             }
 
+            Object intercepted;
             try {
-                Set<String> interfaces = getClasses();
-
-                // check for the case where interfaces is null or empty
-                if (interfaces == null || interfaces.isEmpty()) {
+                try {
+                    // Try with subclass proxying first
                     intercepted = AsmInterceptorWrapper.createProxyObject(
                             original.getClass().getClassLoader(), cm,
                             interceptors, AsmInterceptorWrapper.passThrough(original),
                             original.getClass());
-                    LOGGER.debug(LOG_EXIT, "getService", intercepted);
-                    return intercepted;
-                }
-                Class[] classesToProxy = new Class[interfaces.size()];
-                Iterator<String> it = interfaces.iterator();
-                for (int i = 0; i < interfaces.size(); i++) {
-                    classesToProxy[i] = Class.forName(it.next(),
-                            true, original.getClass().getClassLoader());
+                } catch (FinalModifierException u) {
+                    LOGGER.debug("Error creating asm proxy (final modifier), trying with interfaces");
+                    List<Class> classes = new ArrayList<Class>();
+                    for (String className : getClasses()) {
+                        classes.add(blueprintContainer.loadClass(className));
                 }
-
-                // if asm is available we can proxy the original object with
-                // the AsmInterceptorWrapper
                 intercepted = AsmInterceptorWrapper.createProxyObject(
                         original.getClass().getClassLoader(), cm,
                         interceptors, AsmInterceptorWrapper.passThrough(original),
-                        classesToProxy);
+                            classes.toArray(new Class[classes.size()]));
+                }
             } catch (Throwable u) {
-                LOGGER
-                        .info("A problem occurred trying to create a proxy object. Returning the original object instead.");
+                LOGGER.info("A problem occurred trying to create a proxy object. Returning the original object instead.", u);
                 LOGGER.debug(LOG_EXIT, "getService", original);
                 return original;
             }
 
             LOGGER.debug(LOG_EXIT, "getService", intercepted);
             return intercepted;
-
         }
 
         public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {
@@ -528,4 +515,17 @@ public void updateProperties(Dictionary properties) {
         }        
     }
 
+    private boolean isClassAvailable(String clazz) {
+        try {
+            getClass().getClassLoader().loadClass(clazz);
+            return true;
+        }
+        catch (ClassNotFoundException e) {
+            return false;
+        }
+        catch (NoClassDefFoundError e) {
+            return false;
+        }
+    }
+
 }
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/AsmInterceptorWrapper.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/AsmInterceptorWrapper.java
index 71db6308..c358eb10 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/AsmInterceptorWrapper.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/AsmInterceptorWrapper.java
@@ -40,14 +40,14 @@
   final static String LOG_EXCEPTION = "Caught exception";
 
   public static Object createProxyObject(ClassLoader cl, ComponentMetadata cm,
-      List<Interceptor> interceptors, Callable<Object> delegate, Class<?>... classesToProxy)
+      List<Interceptor> interceptors, Callable<Object> delegate, Class<?>... classesToProxy) throws UnableToProxyException
   {
 
     LOGGER.debug(LOG_ENTRY, "createProxyObject", new Object[] { cl, cm, interceptors, delegate,
         classesToProxy });
 
     Object proxyObject = null;
-    try {
+
       if (classesToProxy.length == 1 && !classesToProxy[0].isInterface()) {
 
         Class<?> classToProxy = classesToProxy[0];
@@ -141,13 +141,6 @@ public static Object createProxyObject(ClassLoader cl, ComponentMetadata cm,
         }
 
       }
-    } catch (UnableToProxyException e) {
-      // translate UnableToProxyException into
-      // ComponentDefinitionException
-      // if the bean is final, or otherwise unable to be proxied.
-      LOGGER.debug(LOG_EXIT, "createProxyObject", e);
-      throw new ComponentDefinitionException("Unable to proxy bean for interceptors: " + e);
-    }
 
 //    LOGGER.debug(LOG_EXIT, "createProxyObject", proxyObject);
 
