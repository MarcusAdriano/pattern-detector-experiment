diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index ac870991..38b1bdd2 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -74,6 +74,7 @@
     private static InetAddress thriftAddress;
     private static String clusterName = "Test";
     private static long rpcTimeoutInMillis = 2000;
+    private static int phiConvictThreshold = 8;
     private static Set<InetAddress> seeds = new HashSet<InetAddress>();
     /* Keeps the list of data file directories */
     private static String[] dataFileDirectories;
@@ -288,6 +289,16 @@ else if (diskAccessMode == DiskAccessMode.mmap_index_only)
             if ( rpcTimeout != null )
                 rpcTimeoutInMillis = Integer.parseInt(rpcTimeout);
 
+            /* phi convict threshold for FailureDetector */
+            String phiThreshold = xmlUtils.getNodeValue("/Storage/PhiConvictThreshold");
+            if ( phiThreshold != null )
+                    phiConvictThreshold = Integer.parseInt(phiThreshold);
+
+            if (phiConvictThreshold < 5 || phiConvictThreshold > 16)
+            {
+                throw new ConfigurationException("PhiConvictThreshold must be between 5 and 16");
+            }
+            
             /* Thread per pool */
             String rawReaders = xmlUtils.getNodeValue("/Storage/ConcurrentReads");
             if (rawReaders != null)
@@ -1002,6 +1013,11 @@ public static long getRpcTimeout()
         return rpcTimeoutInMillis;
     }
 
+    public static int getPhiConvictThreshold()
+    {
+        return phiConvictThreshold;
+    }
+
     public static int getConsistencyThreads()
     {
         return consistencyThreads;
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetector.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetector.java
index 2804afdc..ca589336 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetector.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetector.java
@@ -33,6 +33,7 @@
 import java.net.InetAddress;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.BoundedStatsDeque;
+import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.log4j.Logger;
 
 /**
@@ -45,7 +46,7 @@
     public static final IFailureDetector instance = new FailureDetector();
     private static Logger logger_ = Logger.getLogger(FailureDetector.class);
     private static final int sampleSize_ = 1000;
-    private static final int phiConvictThreshold_ = 8;
+    private static int phiConvictThreshold_;
     /* The Failure Detector has to have been up for at least 1 min. */
     private static final long uptimeThreshold_ = 60000;
     /* The time when the module was instantiated. */
@@ -56,6 +57,7 @@
     
     public FailureDetector()
     {
+        phiConvictThreshold_ = DatabaseDescriptor.getPhiConvictThreshold();
         creationTime_ = System.currentTimeMillis();
         // Register this instance with JMX
         try
@@ -111,6 +113,16 @@ private void dumpInterArrivalTimes(InetAddress ep)
         }
     }
     
+    public void setPhiConvictThreshold(int phi)
+    {
+        phiConvictThreshold_ = phi;
+    }
+
+    public int getPhiConvictThreshold()
+    {
+        return phiConvictThreshold_;
+    }
+    
     public boolean isAlive(InetAddress ep)
     {
        /* If the endpoint in question is the local endpoint return true. */
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java
index 3c9f7e5a..d7411fc9 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java
@@ -21,4 +21,8 @@
 public interface FailureDetectorMBean
 {
     public void dumpInterArrivalTimes();
+
+    public void setPhiConvictThreshold(int phi);
+
+    public int getPhiConvictThreshold();
 }
