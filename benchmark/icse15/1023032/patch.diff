diff --git a/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest.java
index 55542b43..d4dc0df8 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest.java
@@ -362,13 +362,16 @@ public void testArabicPDF() throws Exception {
 
   SolrQueryResponse loadLocal(String filename, String... args) throws Exception {
     LocalSolrQueryRequest req = (LocalSolrQueryRequest) req(args);
-
+    try {
     // TODO: stop using locally defined streams once stream.file and
     // stream.body work everywhere
     List<ContentStream> cs = new ArrayList<ContentStream>();
     cs.add(new ContentStreamBase.FileStream(new File(filename)));
     req.setContentStreams(cs);
     return h.queryAndResponse("/update/extract", req);
+    } finally {
+      req.close();
+    }
   }
 
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java
index 242818d5..29cc19f5 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/CoreContainer.java
@@ -84,6 +84,7 @@
   
   public CoreContainer() {
     solrHome = SolrResourceLoader.locateSolrHome();
+    log.info("New CoreContainer: solrHome=" + solrHome + " instance="+System.identityHashCode(this));
   }
 
   public Properties getContainerProperties() {
@@ -365,7 +366,7 @@ public void shutdown() {
   protected void finalize() throws Throwable {
     try {
       if(!isShutDown){
-        log.error("CoreContainer was not shutdown prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!");
+        log.error("CoreContainer was not shutdown prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!  instance=" + System.identityHashCode(this));
         shutdown();
       }
     } finally {
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/util/TestHarness.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/util/TestHarness.java
index a28972eb..65b805ef 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/util/TestHarness.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/util/TestHarness.java
@@ -308,7 +308,7 @@ public String query(SolrQueryRequest req) throws IOException, Exception {
   }
 
   /**
-   * Processes a "query" using a user constructed SolrQueryRequest
+   * Processes a "query" using a user constructed SolrQueryRequest, and closes the request at the end.
    *
    * @param handler the name of the request handler to process the request
    * @param req the Query to process, will be closed.
@@ -318,6 +318,7 @@ public String query(SolrQueryRequest req) throws IOException, Exception {
    * @see LocalSolrQueryRequest
    */
   public String query(String handler, SolrQueryRequest req) throws IOException, Exception {
+    try {
     SolrQueryResponse rsp = queryAndResponse(handler, req);
 
     StringWriter sw = new StringWriter(32000);
@@ -327,8 +328,12 @@ public String query(String handler, SolrQueryRequest req) throws IOException, Ex
     req.close();
 
     return sw.toString();
+    } finally {
+      req.close();
+    }
   }
 
+  /** It is the users responsibility to close the request object when done with it */
   public SolrQueryResponse queryAndResponse(String handler, SolrQueryRequest req) throws Exception {
     SolrQueryResponse rsp = new SolrQueryResponse();
     core.execute(core.getRequestHandler(handler),req,rsp);
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java
index 38a8da9c..b28283f1 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java
@@ -635,6 +635,7 @@ public void testNotLazyField() throws IOException {
     // ensure field is not lazy
     assertTrue( d.getFieldable("test_hlt") instanceof Field );
     assertTrue( d.getFieldable("title") instanceof Field );
+    req.close();
   }
 
   @Test
@@ -657,6 +658,7 @@ public void testLazyField() throws IOException {
     // ensure field is lazy
     assertTrue( !( d.getFieldable("test_hlt") instanceof Field ) );
     assertTrue( d.getFieldable("title") instanceof Field );
+    req.close();
   } 
             
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
index 148b6622..bdfd4e78 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
@@ -328,14 +328,18 @@ public static void assertQ(String message, SolrQueryRequest req, String... tests
       String results = h.validateXPath(response, tests);
 
       if (null != results) {
-        fail(m + "query failed XPath: " + results +
-             "\n xml response was: " + response +
-             "\n request was: " + req.getParamString());
+        String msg = "REQUEST FAILED: xpath=" + results
+            + "\n\txml response was: " + response
+            + "\n\trequest was:" + req.getParamString();
+
+        log.error(msg);
+        throw new RuntimeException(msg);
       }
 
     } catch (XPathExpressionException e1) {
       throw new RuntimeException("XPath is invalid", e1);
     } catch (Exception e2) {
+      log.error("REQUEST FAILED: " + req.getParamString());
       throw new RuntimeException("Exception during query", e2);
     }
   }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestArbitraryIndexDir.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
index 0509c8f4..b4610a4d 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
@@ -48,15 +48,16 @@
 
   public void setUp() throws Exception {
     super.setUp();
+
     dataDir = new File(TEMP_DIR,
         getClass().getName() + "-" + System.currentTimeMillis() + System.getProperty("file.separator") + "solr"
         + System.getProperty("file.separator") + "data");
     dataDir.mkdirs();
 
-    solrConfig = h.createConfig(getSolrConfigFile());
+    solrConfig = h.createConfig("solrconfig.xml");
     h = new TestHarness( dataDir.getAbsolutePath(),
         solrConfig,
-        getSchemaFile());
+        "schema12.xml");
     lrf = h.getRequestFactory
     ("standard",0,20,"version","2.2");
   }
@@ -68,12 +69,12 @@ public void tearDown() throws Exception {
 
   @Override
   public String getSchemaFile() {
-    return "schema12.xml";
+    return null;
   }
 
   @Override
   public String getSolrConfigFile() {
-    return "solrconfig.xml";
+    return null;  // prevent superclass from creating it's own TestHarness
   }
 
   @Test
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
index 2c42fa7e..efc9dcfc 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
@@ -20,6 +20,7 @@
 import org.apache.lucene.index.IndexWriter;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.handler.admin.ShowFileRequestHandler;
+import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.search.SolrIndexReader;
 import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.update.DirectUpdateHandler2;
@@ -140,9 +141,9 @@ public void testTermIndexDivisor() throws Exception {
     IndexReaderFactory irf = h.getCore().getIndexReaderFactory();
     StandardIndexReaderFactory sirf = (StandardIndexReaderFactory) irf;
     assertEquals(12, sirf.termInfosIndexDivisor);
-    RefCounted<SolrIndexSearcher> refCounted = h.getCore().getSearcher();
-    SolrIndexReader solrReader = refCounted.get().getReader();
-    assertEquals(12, solrReader.getTermInfosIndexDivisor());
+    SolrQueryRequest req = req();
+    assertEquals(12, req.getSearcher().getReader().getTermInfosIndexDivisor());
+    req.close();
   }
 
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java
index 346f39dd..db17c3fc 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java
@@ -50,14 +50,6 @@ public static void beforeClass() throws Exception {
     initCore("solrconfig-elevate.xml","schema12.xml");
   }
   
-  @Before
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-    clearIndex();
-    assertU(commit());
-  }
-  
   @Test
   public void testInterface() throws Exception
   {
@@ -71,8 +63,11 @@ public void testInterface() throws Exception
     comp.init( args );
     comp.inform( core );
     
-    IndexReader reader = core.getSearcher().get().getReader();
+    SolrQueryRequest req = req();
+    IndexReader reader = req.getSearcher().getReader();
     Map<String, ElevationObj> map = comp.getElevationMap( reader, core );
+    req.close();
+
     // Make sure the boosts loaded properly
     assertEquals( 3, map.size() );
     assertEquals( 1, map.get( "XXXX" ).priority.size() );
@@ -101,29 +96,15 @@ public void testInterface() throws Exception
     
     assertEquals( "xxxx", comp.getAnalyzedQuery( "XXXX" ) );
     assertEquals( "xxxxyyyy", comp.getAnalyzedQuery( "XXXX YYYY" ) );
-  }
 
-  @Test
-  public void testEmptyQuery() throws Exception {
-    SolrCore core = h.getCore();
-
-    //String query = "title:ipod";
-
-    Map<String,String> args = new HashMap<String, String>();
-    args.put( "q.alt", "*:*" );
-    args.put( "defType", "dismax");
-    args.put( CommonParams.QT, "/elevate" );
-    //args.put( CommonParams.FL, "id,title,score" );
-    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );
-    assertQ("Make sure QEC handles null queries", req, "//*[@numFound='0']");
+    assertQ("Make sure QEC handles null queries", req("qt","/elevate", "q.alt","*:*", "defType","dismax"),
+        "//*[@numFound='0']");
 
   }
 
   @Test
   public void testSorting() throws IOException
   {
-    SolrCore core = h.getCore();
-    
     assertU(adoc("id", "a", "title", "ipod",           "str_s", "a" ));
     assertU(adoc("id", "b", "title", "ipod ipod",      "str_s", "b" ));
     assertU(adoc("id", "c", "title", "ipod ipod ipod", "str_s", "c" ));
@@ -141,7 +122,9 @@ public void testSorting() throws IOException
     args.put( CommonParams.FL, "id,score" );
     args.put( "indent", "true" );
     //args.put( CommonParams.FL, "id,title,score" );
-    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );
+    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );
+    IndexReader reader = req.getSearcher().getReader();
+    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( "elevate" );
     
     assertQ("Make sure standard sort works as expected", req
             ,"//*[@numFound='3']"
@@ -151,11 +134,10 @@ public void testSorting() throws IOException
             );
     
     // Explicitly set what gets boosted
-    IndexReader reader = core.getSearcher().get().getReader();
-    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( "elevate" );
     booster.elevationCache.clear();
     booster.setTopQueryResults( reader, query, new String[] { "x", "y", "z" }, null );
 
+
     assertQ("All six should make it", req
             ,"//*[@numFound='6']"
             ,"//result/doc[1]/str[@name='id'][.='x']"
@@ -229,6 +211,8 @@ public void testSorting() throws IOException
         ,"//result/doc[3]/str[@name='id'][.='c']"
         );
 
+
+    req.close();
   }
   
   // write a test file to boost some docs
@@ -252,31 +236,33 @@ private void writeFile( File file, String query, String ... ids ) throws Excepti
   @Test
   public void testElevationReloading() throws Exception
   {
-    SolrCore core = h.getCore();
-
     String testfile = "data-elevation.xml";
-    File f = new File( core.getDataDir(), testfile );
+    File f = new File( h.getCore().getDataDir(), testfile );
     writeFile( f, "aaa", "A" );
     
-    QueryElevationComponent comp = (QueryElevationComponent)core.getSearchComponent("elevate");
+    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent("elevate");
     NamedList<String> args = new NamedList<String>();
     args.add( QueryElevationComponent.CONFIG_FILE, testfile );
     comp.init( args );
-    comp.inform( core );
+    comp.inform( h.getCore() );
     
-    IndexReader reader = core.getSearcher().get().getReader();
-    Map<String, ElevationObj> map = comp.getElevationMap(reader, core);
+    SolrQueryRequest req = req();
+    IndexReader reader = req.getSearcher().getReader();
+    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());
     assertTrue( map.get( "aaa" ).priority.containsKey( "A" ) );
     assertNull( map.get( "bbb" ) );
+    req.close();
     
     // now change the file
     writeFile( f, "bbb", "B" );
     assertU(adoc("id", "10000")); // will get same reader if no index change
     assertU(commit());
     
-    reader = core.getSearcher().get().getReader();
-    map = comp.getElevationMap(reader, core);
+    req = req();
+    reader = req.getSearcher().getReader();
+    map = comp.getElevationMap(reader, h.getCore());
     assertNull( map.get( "aaa" ) );
     assertTrue( map.get( "bbb" ).priority.containsKey( "B" ) );
+    req.close();
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
index 4f6d51be..796e933d 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
@@ -21,363 +21,112 @@
 import java.util.*;
 
 import org.apache.solr.SolrTestCaseJ4;
-import org.apache.solr.common.params.CommonParams;
-import org.apache.solr.common.params.MapSolrParams;
-import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.SpellingParams;
 import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.core.SolrCore;
-import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.request.SolrRequestHandler;
 import org.apache.solr.response.SolrQueryResponse;
 import org.apache.solr.spelling.AbstractLuceneSpellChecker;
-import org.apache.solr.spelling.IndexBasedSpellChecker;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+
 import static org.junit.Assert.*;
 
 /**
  * @since solr 1.3
  */
 public class SpellCheckComponentTest extends SolrTestCaseJ4 {
+  static String rh = "spellCheckCompRH";
+
+
   @BeforeClass
   public static void beforeClass() throws Exception {
     initCore("solrconfig.xml","schema.xml");
-    assertNull(h.validateUpdate(adoc("id", "0", "lowerfilt", "This is a title")));
-    assertNull(h.validateUpdate(adoc("id", "1", "lowerfilt",
+    assertU(adoc("id", "0", "lowerfilt", "This is a title"));
+    assertU((adoc("id", "1", "lowerfilt",
             "The quick reb fox jumped over the lazy brown dogs.")));
-    assertNull(h.validateUpdate(adoc("id", "2", "lowerfilt", "This is a document")));
-    assertNull(h.validateUpdate(adoc("id", "3", "lowerfilt", "another document")));
+    assertU((adoc("id", "2", "lowerfilt", "This is a document")));
+    assertU((adoc("id", "3", "lowerfilt", "another document")));
     //bunch of docs that are variants on blue
-    assertNull(h.validateUpdate(adoc("id", "4", "lowerfilt", "blue")));
-    assertNull(h.validateUpdate(adoc("id", "5", "lowerfilt", "blud")));
-    assertNull(h.validateUpdate(adoc("id", "6", "lowerfilt", "boue")));
-    assertNull(h.validateUpdate(adoc("id", "7", "lowerfilt", "glue")));
-    assertNull(h.validateUpdate(adoc("id", "8", "lowerfilt", "blee")));
-    assertNull(h.validateUpdate(adoc("id", "9", "lowerfilt", "pixmaa")));
-    assertNull(h.validateUpdate(commit()));
+    assertU((adoc("id", "4", "lowerfilt", "blue")));
+    assertU((adoc("id", "5", "lowerfilt", "blud")));
+    assertU((adoc("id", "6", "lowerfilt", "boue")));
+    assertU((adoc("id", "7", "lowerfilt", "glue")));
+    assertU((adoc("id", "8", "lowerfilt", "blee")));
+    assertU((adoc("id", "9", "lowerfilt", "pixmaa")));
+    assertU((commit()));
   }
   
   @Test
   public void testExtendedResultsCount() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent speller = core.getSearchComponent("spellcheck");
-    assertTrue("speller is null and it shouldn't be", speller != null);
-
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.QT, "spellCheckCompRH");
-    params.add(SpellCheckComponent.SPELLCHECK_BUILD, "true");
-    params.add(CommonParams.Q, "bluo");
-    params.add(SpellCheckComponent.COMPONENT_NAME, "true");
-    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));
-    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));
-    SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
-    SolrQueryResponse rsp;
-    rsp = new SolrQueryResponse();
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-    String cmdExec = (String) values.get("command");
-    assertEquals("build",cmdExec);
-    NamedList spellCheck = (NamedList) values.get("spellcheck");
-    NamedList suggestions = (NamedList) spellCheck.get("suggestions");
-    NamedList blue = (NamedList) suggestions.get("bluo");
-    assertEquals(5,blue.get("numFound"));
-    Collection<String> theSuggestion = (Collection<String>) blue.get("suggestion");
-    assertEquals(5,theSuggestion.size());
-    //we know there are at least 5, but now only get 3
-
-    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);
-    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);
-    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);
-    params.add(SpellCheckComponent.SPELLCHECK_COUNT, "3");
-    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));
-    params.add(SpellCheckComponent.SPELLCHECK_BUILD, "false");
-    rsp = new SolrQueryResponse();
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    values = rsp.getValues();
-
-    spellCheck = (NamedList) values.get("spellcheck");
-    suggestions = (NamedList) spellCheck.get("suggestions");
-    blue = (NamedList) suggestions.get("bluo");
-    assertEquals(3, blue.get("numFound"));
-
-    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get("suggestion");
-    assertEquals(3, theSuggestions.size());
-
-    for (SimpleOrderedMap sug : theSuggestions) {
-      assertNotNull(sug.get("word"));
-      assertNotNull(sug.get("freq"));      
-    }
+    assertJQ(req("qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", SpellCheckComponent.SPELLCHECK_BUILD, "true", "q","bluo", SpellCheckComponent.SPELLCHECK_COUNT,"5", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,"false")
+       ,"/spellcheck/suggestions/[0]=='bluo'"
+       ,"/spellcheck/suggestions/[1]/numFound==5"
+    );
+
+    assertJQ(req("qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", "q","bluo", SpellCheckComponent.SPELLCHECK_COUNT,"3", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,"true")
+       ,"/spellcheck/suggestions/[1]/suggestion==[{'word':'blue','freq':1}, {'word':'blud','freq':1}, {'word':'boue','freq':1}]"
+    );
   }
 
   @Test
   public void test() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent speller = core.getSearchComponent("spellcheck");
-    assertTrue("speller is null and it shouldn't be", speller != null);
-
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.QT, "spellCheckCompRH");
-    params.add(SpellCheckComponent.SPELLCHECK_BUILD, "true");
-    params.add(CommonParams.Q, "documemt");
-    params.add(SpellCheckComponent.COMPONENT_NAME, "true");
-
-    SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
-    SolrQueryResponse rsp = new SolrQueryResponse();
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-    String cmdExec = (String) values.get("command");
-    assertTrue("command is null and it shouldn't be", cmdExec != null);
-    assertTrue(cmdExec + " is not equal to " + "build",
-            cmdExec.equals("build") == true);
-    NamedList spellCheck = (NamedList) values.get("spellcheck");
-    assertNotNull(spellCheck);
-    NamedList suggestions = (NamedList) spellCheck.get("suggestions");
-    assertNotNull(suggestions);
-    NamedList document = (NamedList) suggestions.get("documemt");
-    assertEquals(1, document.get("numFound"));
-    assertEquals(0, document.get("startOffset"));
-    assertEquals(document.get("endOffset"), "documemt".length());
-    Collection<String> theSuggestion = (Collection<String>) document.get("suggestion");
-    assertEquals(1, theSuggestion.size());
-    assertEquals("document", theSuggestion.iterator().next());
+    assertJQ(req("qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", "q","documemt")
+       ,"/spellcheck=={'suggestions':['documemt',{'numFound':1,'startOffset':0,'endOffset':8,'suggestion':['document']}]}"
+    );
   }
 
 
   @Test
   public void testPerDictionary() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent speller = core.getSearchComponent("spellcheck");
-    assertTrue("speller is null and it shouldn't be", speller != null);
-
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.QT, "spellCheckCompRH");
-    params.add(SpellCheckComponent.SPELLCHECK_BUILD, "true");
-    params.add(CommonParams.Q, "documemt");
-    params.add(SpellCheckComponent.COMPONENT_NAME, "true");
-    params.add(SpellingParams.SPELLCHECK_DICT, "perDict");
-
-    params.add(SpellingParams.SPELLCHECK_PREFIX + ".perDict.foo", "bar");
-    params.add(SpellingParams.SPELLCHECK_PREFIX + ".perDict.bar", "foo");
-
-    SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
-    SolrQueryResponse rsp = new SolrQueryResponse();
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-
-    NamedList spellCheck = (NamedList) values.get("spellcheck");
-    NamedList suggestions = (NamedList) spellCheck.get("suggestions");
-    assertNotNull("suggestions", suggestions);
-    NamedList suggestion;
-    Collection<String> theSuggestion;
-    suggestion = (NamedList) suggestions.get("foo");
-    assertEquals(1, suggestion.get("numFound"));
-    assertEquals(0, suggestion.get("startOffset"));
-    assertEquals(suggestion.get("endOffset"), 1);
-    theSuggestion = (Collection<String>) suggestion.get("suggestion");
-    assertEquals(1, theSuggestion.size());
-    assertEquals("bar", theSuggestion.iterator().next());
-
-    suggestion = (NamedList) suggestions.get("bar");
-    assertEquals(1, suggestion.get("numFound"));
-    assertEquals(2, suggestion.get("startOffset"));
-    assertEquals(3, suggestion.get("endOffset"));
-    theSuggestion = (Collection<String>) suggestion.get("suggestion");
-    assertEquals(1, theSuggestion.size());
-    assertEquals("foo", theSuggestion.iterator().next());
+    assertJQ(req("json.nl","map", "qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", SpellCheckComponent.SPELLCHECK_BUILD, "true", "q","documemt"
+        , SpellingParams.SPELLCHECK_DICT, "perDict", SpellingParams.SPELLCHECK_PREFIX + ".perDict.foo", "bar", SpellingParams.SPELLCHECK_PREFIX + ".perDict.bar", "foo")
+       ,"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}"
+       ,"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}"        
+    );
   }
 
   @Test
   public void testCollate() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent speller = core.getSearchComponent("spellcheck");
-    assertTrue("speller is null and it shouldn't be", speller != null);
-
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.QT, "spellCheckCompRH");
-    params.add(SpellCheckComponent.SPELLCHECK_BUILD, "true");
-    params.add(CommonParams.Q, "documemt");
-    params.add(SpellCheckComponent.COMPONENT_NAME, "true");
-    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, "true");
-
-    SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
-    SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-    NamedList spellCheck = (NamedList) values.get("spellcheck");
-    NamedList suggestions = (NamedList) spellCheck.get("suggestions");
-    String collation = (String) suggestions.get("collation");
-    assertEquals("document", collation);
-    params.remove(CommonParams.Q);
-    params.add(CommonParams.Q, "documemt lowerfilt:broen^4");
-    handler = core.getRequestHandler("spellCheckCompRH");
-    rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    values = rsp.getValues();
-    spellCheck = (NamedList) values.get("spellcheck");
-    suggestions = (NamedList) spellCheck.get("suggestions");
-    collation = (String) suggestions.get("collation");
-    assertEquals("document lowerfilt:brown^4", collation);
-
-    params.remove(CommonParams.Q);
-    params.add(CommonParams.Q, "documemtsss broens");
-    handler = core.getRequestHandler("spellCheckCompRH");
-    rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    values = rsp.getValues();
-    spellCheck = (NamedList) values.get("spellcheck");
-    suggestions = (NamedList) spellCheck.get("suggestions");
-    collation = (String) suggestions.get("collation");
-    assertEquals("document brown",collation);
+    assertJQ(req("json.nl","map", "qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", SpellCheckComponent.SPELLCHECK_BUILD, "true", "q","documemt", SpellCheckComponent.SPELLCHECK_COLLATE, "true")
+       ,"/spellcheck/suggestions/collation=='document'"
+    );
+    assertJQ(req("json.nl","map", "qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", "q","documemt lowerfilt:broen^4", SpellCheckComponent.SPELLCHECK_COLLATE, "true")
+       ,"/spellcheck/suggestions/collation=='document lowerfilt:brown^4'"
+    );
+    assertJQ(req("json.nl","map", "qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", "q","documemtsss broens", SpellCheckComponent.SPELLCHECK_COLLATE, "true")
+       ,"/spellcheck/suggestions/collation=='document brown'"
+    );
+    assertJQ(req("json.nl","map", "qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", "q","pixma-a-b-c-d-e-f-g", SpellCheckComponent.SPELLCHECK_COLLATE, "true")
+       ,"/spellcheck/suggestions/collation=='pixmaa'"
+    );
   }
   
-  @Test
-  public void testCollate2() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent speller = core.getSearchComponent("spellcheck");
-    assertTrue("speller is null and it shouldn't be", speller != null);
-
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.QT, "spellCheckCompRH");
-    params.add(SpellCheckComponent.SPELLCHECK_BUILD, "true");
-    params.add(CommonParams.Q, "pixma-a-b-c-d-e-f-g");
-    params.add(SpellCheckComponent.COMPONENT_NAME, "true");
-    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, "true");
-
-    SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
-    SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-    NamedList spellCheck = (NamedList) values.get("spellcheck");
-    NamedList suggestions = (NamedList) spellCheck.get("suggestions");
-    String collation = (String) suggestions.get("collation");
-    assertEquals("pixmaa", collation);
-  }
 
   @Test
   public void testCorrectSpelling() throws Exception {
-    SolrCore core = h.getCore();
-    Map<String, String> args = new HashMap<String, String>();
-
-    args.put(CommonParams.Q, "lowerfilt:lazy lowerfilt:brown");
-    args.put(CommonParams.QT, "spellCheckCompRH");
-    args.put(SpellCheckComponent.SPELLCHECK_BUILD, "true");
-    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, "true");
-    args.put(SpellCheckComponent.COMPONENT_NAME, "true");
-    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(
-            args));
-
-    assertQ("Make sure correct spellings are signalled in the response", req, 
-            "//*[@numFound='1']", "//result/doc[1]/int[@name='id'][.='1']",
-            "//*/lst[@name='suggestions']");
-    
-    
-    args = new HashMap<String, String>();
-
-    args.put(CommonParams.Q, "lakkle");
-    args.put(CommonParams.QT, "spellCheckCompRH");
-    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, "true");
-    args.put(SpellCheckComponent.COMPONENT_NAME, "true");
-    req = new LocalSolrQueryRequest(core, new MapSolrParams(
-            args));
-    
-    assertQ("Make sure correct spellings are signalled in the response", req, 
-        "//*[@numFound='0']", "//*/lst[@name='suggestions']", "//*/bool[@name='correctlySpelled'][.='false']");
-    
-    
-    args = new HashMap<String, String>();
-
-    args.put(CommonParams.Q, "lowerfilt:lazy");
-    args.put(CommonParams.QT, "spellCheckCompRH");
-    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, "true");
-    args.put(SpellCheckComponent.COMPONENT_NAME, "true");
-    req = new LocalSolrQueryRequest(core, new MapSolrParams(
-            args));
-    
-    assertQ("Make sure correct spellings are signalled in the response", req, 
-        "//*[@numFound='1']", "//*/lst[@name='suggestions']", "//*/bool[@name='correctlySpelled'][.='true']");
-  }
-
-  @Test
-  public void testInit() throws Exception {
-    SolrCore core = h.getCore();
-    SpellCheckComponent scc = new SpellCheckComponent();
-    NamedList args = new NamedList();
-    NamedList spellchecker = new NamedList();
-    spellchecker.add("classname", IndexBasedSpellChecker.class.getName());
-    spellchecker.add("name", "default");
-    spellchecker.add("field", "lowerfilt");
-    spellchecker.add("spellcheckIndexDir", "./spellchecker");
-
-    args.add("spellchecker", spellchecker);
-    NamedList altSC = new NamedList();
-    altSC.add("classname", IndexBasedSpellChecker.class.getName());
-    altSC.add("name", "alternate");
-    altSC.add("field", "lowerfilt");
-    altSC.add("spellcheckIndexDir", "./spellchecker");
-
-    args.add("spellchecker", altSC);
-    args.add("queryAnalyzerFieldType", "lowerfilt");
-    NamedList defaults = new NamedList();
-    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);
-    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);
-    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);
-    args.add("defaults", defaults);
-    scc.init(args);
-    scc.inform(core);
-    //hmm, not sure what to assert here...
-
-    //add the sc again and then init again, we should get an exception
-    args.add("spellchecker", spellchecker);
-    scc = new SpellCheckComponent();
-    scc.init(args);
-    try {
-      scc.inform(core);
-      assertTrue(false);
-    } catch (Exception e) {
-
-    }
-
-
+    // Make sure correct spellings are signaled in the response
+    assertJQ(req("json.nl","map", "qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", "q","lowerfilt:lazy lowerfilt:brown", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, "true")
+       ,"/spellcheck/suggestions=={'correctlySpelled':true}"
+    );
+    assertJQ(req("json.nl","map", "qt",rh, SpellCheckComponent.COMPONENT_NAME, "true", "q","lakkle", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, "true")
+       ,"/spellcheck/suggestions/correctlySpelled==false"
+    );
   }
   
   @SuppressWarnings("unchecked")
   @Test
   public void testRelativeIndexDirLocation() throws Exception {
     SolrCore core = h.getCore();
-    Map<String, String> args = new HashMap<String, String>();
-
-    args.put(CommonParams.Q, "test");
-    args.put(CommonParams.QT, "spellCheckCompRH");
-    args.put(SpellCheckComponent.SPELLCHECK_BUILD, "true");
-    args.put(SpellCheckComponent.COMPONENT_NAME, "true");
-    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(
-        args));
-
-    File indexDir = new File(core.getDataDir() + File.separator
-        + "spellchecker1");
-    assertTrue(
-        "spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml",
-        indexDir.exists());
+    File indexDir = new File(core.getDataDir() + File.separator + "spellchecker1");
+    assertTrue(indexDir.exists());
     
-    indexDir = new File(core.getDataDir() + File.separator
-        + "spellchecker2");
-    assertTrue(
-        "spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml",
-        indexDir.exists());
-    
-    indexDir = new File(core.getDataDir() + File.separator
-        + "spellchecker3");
-    assertTrue(
-        "spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml",
-        indexDir.exists());
+    indexDir = new File(core.getDataDir() + File.separator + "spellchecker2");
+    assertTrue(indexDir.exists());
+
+    indexDir = new File(core.getDataDir() + File.separator + "spellchecker3");
+    assertTrue(indexDir.exists());
   }
 
   @Test
@@ -396,6 +145,7 @@ public void testReloadOnStart() throws Exception {
     spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, "spellchecker1");
     args.add("spellchecker", spellchecker);
 
+    // TODO: this is really fragile and error prone - find a higher level way to test this.
     SpellCheckComponent checker = new SpellCheckComponent();
     checker.init(args);
     checker.inform(h.getCore());
@@ -414,6 +164,8 @@ public void testReloadOnStart() throws Exception {
     } catch (NullPointerException e) {
       fail("NullPointerException due to reload not initializing analyzers");
     }
+
+    rb.req.close();
   }
   
     @SuppressWarnings("unchecked")
@@ -428,7 +180,4 @@ public void testRebuildOnCommit() throws Exception {
     
     assertQ(req, "//arr[@name='suggestion'][.='lucenejava']");
   }
-  
-  // TODO: add more tests for various spelling options
-
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java
index 8395af56..bcf8bee0 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest.java
@@ -46,299 +46,124 @@
   public static void beforeClass() throws Exception {
     initCore("solrconfig.xml","schema.xml");
 
-    assertNull(h.validateUpdate(adoc("id", "0",
+    assertU(adoc("id", "0",
             "test_posofftv", "This is a title and another title",
             "test_basictv", "This is a title and another title",
             "test_notv", "This is a title and another title",
             "test_postv", "This is a title and another title",
             "test_offtv", "This is a title and another title"
-    )));
-    assertNull(h.validateUpdate(adoc("id", "1",
+    ));
+    assertU(adoc("id", "1",
             "test_posofftv", "The quick reb fox jumped over the lazy brown dogs.",
             "test_basictv", "The quick reb fox jumped over the lazy brown dogs.",
             "test_notv", "The quick reb fox jumped over the lazy brown dogs.",
             "test_postv", "The quick reb fox jumped over the lazy brown dogs.",
             "test_offtv", "The quick reb fox jumped over the lazy brown dogs."
-    )));
-    assertNull(h.validateUpdate(adoc("id", "2",
+    ));
+    assertU(adoc("id", "2",
             "test_posofftv", "This is a document",
             "test_basictv", "This is a document",
             "test_notv", "This is a document",
             "test_postv", "This is a document",
             "test_offtv", "This is a document"
-    )));
-    assertNull(h.validateUpdate(adoc("id", "3",
+    ));
+    assertU(adoc("id", "3",
             "test_posofftv", "another document",
             "test_basictv", "another document",
             "test_notv", "another document",
             "test_postv", "another document",
             "test_offtv", "another document"
-    )));
+    ));
     //bunch of docs that are variants on blue
-    assertNull(h.validateUpdate(adoc("id", "4",
+    assertU(adoc("id", "4",
             "test_posofftv", "blue",
             "test_basictv", "blue",
             "test_notv", "blue",
             "test_postv", "blue",
             "test_offtv", "blue"
-    )));
-    assertNull(h.validateUpdate(adoc("id", "5",
+    ));
+    assertU(adoc("id", "5",
             "test_posofftv", "blud",
             "test_basictv", "blud",
             "test_notv", "blud",
             "test_postv", "blud",
             "test_offtv", "blud"
-    )));
-    assertNull(h.validateUpdate(adoc("id", "6",
+    ));
+    assertU(adoc("id", "6",
             "test_posofftv", "boue",
             "test_basictv", "boue",
             "test_notv", "boue",
             "test_postv", "boue",
             "test_offtv", "boue"
-    )));
-    assertNull(h.validateUpdate(adoc("id", "7",
+    ));
+    assertU(adoc("id", "7",
             "test_posofftv", "glue",
             "test_basictv", "glue",
             "test_notv", "glue",
             "test_postv", "glue",
             "test_offtv", "glue"
-    )));
-    assertNull(h.validateUpdate(adoc("id", "8",
+    ));
+    assertU(adoc("id", "8",
             "test_posofftv", "blee",
             "test_basictv", "blee",
             "test_notv", "blee",
             "test_postv", "blee",
             "test_offtv", "blee"
-    )));
-    assertNull(h.validateUpdate(adoc("id", "9",
+    ));
+    assertU(adoc("id", "9",
             "test_posofftv", "blah",
             "test_basictv", "blah",
             "test_notv", "blah",
             "test_postv", "blah",
             "test_offtv", "blah"
-    )));
+    ));
 
     assertNull(h.validateUpdate(commit()));
   }
 
+  static String tv = "tvrh";
+
   @Test
   public void testBasics() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent tvComp = core.getSearchComponent("tvComponent");
-    assertTrue("tvComp is null and it shouldn't be", tvComp != null);
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.Q, "id:0");
-    params.add(CommonParams.QT, "tvrh");
-    params.add(TermVectorParams.TF, "true");
-    params.add(TermVectorComponent.COMPONENT_NAME, "true");
-    SolrRequestHandler handler = core.getRequestHandler("tvrh");
-    SolrQueryResponse rsp;
-    rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);
-    assertTrue("termVectors is null and it shouldn't be", termVectors != null);
-    if (VERBOSE) System.out.println("TVs:" + termVectors);
-    NamedList doc = (NamedList) termVectors.getVal(0);
-    assertTrue("doc is null and it shouldn't be", doc != null);
-    assertEquals(doc.size(), 5);
-    NamedList field = (NamedList) doc.get("test_posofftv");
-    assertTrue("field is null and it shouldn't be", field != null);
-    assertTrue(field.size() + " does not equal: " + 2, field.size() == 2);
-    NamedList titl = (NamedList) field.get("titl");
-    assertTrue("titl is null and it shouldn't be", titl != null);
-    assertTrue(titl.get("tf") + " does not equal: " + 2, ((Integer) titl.get("tf")) == 2);
-    //there should not be any positions or offsets
-    NamedList positions = (NamedList) titl.get("positions");
-    assertTrue("positions is not null and it should be", positions == null);
-    NamedList offsets = (NamedList) titl.get("offsets");
-    assertTrue("offsets is not null and it should be", offsets == null);
-    String uniqueKeyFieldName = (String) termVectors.getVal(1);
-    assertTrue("uniqueKeyFieldName is null and it shouldn't be", uniqueKeyFieldName != null);
-    assertTrue(uniqueKeyFieldName + " is not equal to " + "id", uniqueKeyFieldName.equals("id") == true);
-
+    assertJQ(req("json.nl","map", "qt",tv, "q", "id:0", TermVectorComponent.COMPONENT_NAME, "true", TermVectorParams.TF, "true")
+       ,"/termVectors=={'doc-0':{'uniqueKey':'0'," +
+            " 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
+            " 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
+            " 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
+            " 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}," +
+            " 'uniqueKeyFieldName':'id'}"
+    );
   }
 
   @Test
   public void testOptions() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent tvComp = core.getSearchComponent("tvComponent");
-    assertTrue("tvComp is null and it shouldn't be", tvComp != null);
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.Q, "id:0");
-    params.add(CommonParams.QT, "tvrh");
-    params.add(TermVectorParams.TF, "true");
-    params.add(TermVectorParams.DF, "true");
-    params.add(TermVectorParams.OFFSETS, "true");
-    params.add(TermVectorParams.POSITIONS, "true");
-    params.add(TermVectorParams.TF_IDF, "true");
-    params.add(TermVectorComponent.COMPONENT_NAME, "true");
-
-    SolrRequestHandler handler = core.getRequestHandler("tvrh");
-    SolrQueryResponse rsp;
-    rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);
-    assertTrue("termVectors is null and it shouldn't be", termVectors != null);
-    // System.out.println("TVs: " + termVectors);
-    NamedList doc = (NamedList) termVectors.getVal(0);
-    assertTrue("doc is null and it shouldn't be", doc != null);
-    assertEquals(doc.size(), 5);
-    NamedList offtv = (NamedList) doc.get("test_posofftv");
-    assertTrue("offtv is null and it shouldn't be", offtv != null);
-    assertTrue("offtv Size: " + offtv.size() + " is not: " + 2, offtv.size() == 2);
-    NamedList another = (NamedList) offtv.get("anoth");
-    NamedList offsets = (NamedList) another.get("offsets");
-    assertTrue("offsets is null and it shouldn't be", offsets != null);
-    assertTrue("offsets Size: " + offsets.size() + " is not greater than: " + 0, offsets.size() > 0);
-    NamedList pos = (NamedList) another.get("positions");
-    assertTrue("pos is null and it shouldn't be", pos != null);
-    assertTrue("pos Size: " + pos.size() + " is not greater than: " + 0, pos.size() > 0);
-    Integer df = (Integer) another.get("df");
-    assertTrue("df is null and it shouldn't be", df != null);
-    assertTrue(df + " does not equal: " + 2, df == 2);
-    Double tfIdf = (Double) another.get("tf-idf");
-    assertTrue("tfIdf is null and it shouldn't be", tfIdf != null);
-    assertTrue(tfIdf + " does not equal: " + 0.5, tfIdf == 0.5);
+    assertJQ(req("json.nl","map", "qt",tv, "q", "id:0", TermVectorComponent.COMPONENT_NAME, "true"
+       , TermVectorParams.TF, "true", TermVectorParams.DF, "true", TermVectorParams.OFFSETS, "true", TermVectorParams.POSITIONS, "true", TermVectorParams.TF_IDF, "true")
+       ,"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}"
+    );    
   }
 
-  /*
-<field name="test_basictv" type="text" termVectors="true"/>
-   <field name="test_notv" type="text" termVectors="false"/>
-   <field name="test_postv" type="text" termVectors="true" termPositions="true"/>
-   <field name="test_offtv" type="text" termVectors="true" termOffsets="true"/>
-   <field name="test_posofftv" type="text" termVectors="true"
-     termPositions="true" termOffsets="true"/>
-   */
   @Test
   public void testPerField() throws Exception {
-    SolrCore core = h.getCore();
-    SearchComponent tvComp = core.getSearchComponent("tvComponent");
-    assertTrue("tvComp is null and it shouldn't be", tvComp != null);
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.Q, "id:0");
-    params.add(CommonParams.QT, "tvrh");
-    params.add(TermVectorParams.FIELDS, "test_basictv,test_notv,test_postv,test_offtv,test_posofftv");
-    params.add(TermVectorParams.TF, "true");
-    params.add(TermVectorParams.DF, "true");
-    params.add(TermVectorParams.OFFSETS, "true");
-    params.add(TermVectorParams.POSITIONS, "true");
-    params.add(TermVectorParams.TF_IDF, "true");
-    params.add(TermVectorComponent.COMPONENT_NAME, "true");
-    //per field
-    params.add("f.test_posofftv." + TermVectorParams.POSITIONS, "false");
-    params.add("f.test_offtv." + TermVectorParams.OFFSETS, "false");
-    params.add("f.test_basictv." + TermVectorParams.DF, "false");
-    params.add("f.test_basictv." + TermVectorParams.TF, "false");
-    params.add("f.test_basictv." + TermVectorParams.TF_IDF, "false");
-    SolrRequestHandler handler = core.getRequestHandler("tvrh");
-    SolrQueryResponse rsp;
-    rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    NamedList values = rsp.getValues();
-    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);
-    assertTrue("termVectors is null and it shouldn't be", termVectors != null);
-    if (VERBOSE) System.out.println("TVs: " + termVectors);
-    NamedList doc = (NamedList) termVectors.get("doc-0");
-    assertTrue("doc is null and it shouldn't be", doc != null);
-    assertEquals(doc.size(), 5);
-    NamedList vec;
-    NamedList another;
-    NamedList offsets;
-    NamedList pos;
-    Integer df;
-    Double val;
-    vec = (NamedList) doc.get("test_posofftv");
-    assertNotNull(vec);
-    assertEquals(vec.size(), 2);
-    another = (NamedList) vec.get("anoth");
-    offsets = (NamedList) another.get("offsets");
-    assertNotNull(offsets);
-    assertTrue(offsets.size() > 0);
-    pos = (NamedList) another.get("positions");
-    //positions should be null, since we turned them off
-    assertNull(pos);
-    df = (Integer) another.get("df");
-    assertNotNull(df);
-    assertTrue(df == 2);
-    val = (Double) another.get("tf-idf");
-    assertTrue("tfIdf is null and it shouldn't be", val != null);
-    assertTrue(val + " does not equal: " + 0.5, val == 0.5);
-    //Try out the other fields, too
-    vec = (NamedList) doc.get("test_offtv");
-    assertNotNull(vec);
-    assertEquals(vec.size(), 2);
-    another = (NamedList) vec.get("anoth");
-    offsets = (NamedList) another.get("offsets");
-    assertNull(offsets);
-    pos = (NamedList) another.get("positions");
-    //positions should be null, since we turned them off
-    assertNull(vec.toString(), pos);
-    df = (Integer) another.get("df");
-    assertNotNull(df);
-    assertTrue(df == 2);
-    val = (Double) another.get("tf-idf");
-    assertTrue("tfIdf is null and it shouldn't be", val != null);
-    assertTrue(val + " does not equal: " + 0.5, val == 0.5);
-    vec = (NamedList) doc.get("test_basictv");
-    assertNotNull(vec);
-    assertEquals(vec.size(), 2);
-    another = (NamedList) vec.get("anoth");
-    offsets = (NamedList) another.get("offsets");
-    assertNull(offsets);
-    pos = (NamedList) another.get("positions");
-    assertNull(pos);
-    df = (Integer) another.get("df");
-    assertNull(df);
-    val = (Double) another.get("tf-idf");
-    assertNull(val);
-    val = (Double) another.get("tf");
-    assertNull(val);
-    //Now validate we have error messages
-    NamedList warnings = (NamedList) termVectors.get("warnings");
-    assertNotNull(warnings);
-    List<String> theList;
-    theList = (List<String>) warnings.get("noTermVectors");
-    assertNotNull(theList);
-    assertEquals(theList.size(), 1);
-    theList = (List<String>) warnings.get("noPositions");
-    assertNotNull(theList);
-    assertEquals(theList.size(), 2);
-    theList = (List<String>) warnings.get("noOffsets");
-    assertNotNull(theList);
-    assertEquals(theList.size(), 2);
-  }
-
-  @Test
-  public void testNoFields() throws Exception {
-    ignoreException("undefined field: foo");
-    SolrCore core = h.getCore();
-    SearchComponent tvComp = core.getSearchComponent("tvComponent");
-    assertTrue("tvComp is null and it shouldn't be", tvComp != null);
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add(CommonParams.Q, "id:0");
-    params.add(CommonParams.QT, "tvrh");
-    params.add(TermVectorParams.TF, "true");
-    //Pass in a field that doesn't exist on the doc, thus, no vectors should be returned
-    params.add(TermVectorParams.FIELDS, "foo");
-    params.add(TermVectorComponent.COMPONENT_NAME, "true");
-    SolrRequestHandler handler = core.getRequestHandler("tvrh");
-    SolrQueryResponse rsp;
-    rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
-    Exception exception = rsp.getException();
-    assertNotNull(exception);
-    resetExceptionIgnores();
+    assertJQ(req("json.nl","map", "qt",tv, "q", "id:0", TermVectorComponent.COMPONENT_NAME, "true"
+        ,TermVectorParams.TF, "true", TermVectorParams.DF, "true", TermVectorParams.OFFSETS, "true", TermVectorParams.POSITIONS, "true", TermVectorParams.TF_IDF, "true"
+        ,TermVectorParams.FIELDS, "test_basictv,test_notv,test_postv,test_offtv,test_posofftv"
+        ,"f.test_posofftv." + TermVectorParams.POSITIONS, "false"
+        ,"f.test_offtv." + TermVectorParams.OFFSETS, "false"
+        ,"f.test_basictv." + TermVectorParams.DF, "false"
+        ,"f.test_basictv." + TermVectorParams.TF, "false"
+        ,"f.test_basictv." + TermVectorParams.TF_IDF, "false"
+        )
+    ,"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}"
+    ,"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}"
+    ,"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}"
+    ,"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}"
+    );
   }
 
 
-
-
+  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.
+  // it should be rewritten to use the real distributed interface
   @Test
   public void testDistributed() throws Exception {
     SolrCore core = h.getCore();
@@ -379,14 +204,13 @@ public void testDistributed() throws Exception {
       ModifiableSolrParams solrParams = request.params;
       log.info("Shard: " + Arrays.asList(request.shards) + " Params: " + solrParams);
     }
+
+    rb.req.close();
   }
 
 }
 
 
-
-
-
 /*
 * <field name="test_basictv" type="text" termVectors="true"/>
    <field name="test_notv" type="text" termVectors="false"/>
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/TestBinaryResponseWriter.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/TestBinaryResponseWriter.java
index f72c63b9..029ebd63 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/TestBinaryResponseWriter.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/TestBinaryResponseWriter.java
@@ -73,5 +73,7 @@ public void testUUID() throws Exception {
       assertEquals("Returned object must be a string", "java.lang.String", document.getFieldValue("uuid").getClass().getName());
       assertEquals("Wrong UUID string returned", s, document.getFieldValue("uuid"));
     }
+
+    req.close();
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/FunctionQParserTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/FunctionQParserTest.java
index b7640b5a..e69de29b 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/FunctionQParserTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/FunctionQParserTest.java
@@ -1,47 +0,0 @@
-package org.apache.solr.search;
-
-import org.apache.lucene.search.Query;
-import org.apache.solr.common.params.ModifiableSolrParams;
-import org.apache.solr.request.LocalSolrQueryRequest;
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.search.function.ConstValueSource;
-import org.apache.solr.search.function.FunctionQuery;
-import org.apache.solr.search.function.LiteralValueSource;
-import org.apache.solr.util.AbstractSolrTestCase;
-
-import java.util.HashMap;
-
-
-/**
- *
- *
- **/
-public class FunctionQParserTest extends AbstractSolrTestCase {
-  public String getSchemaFile() {
-    return "schema11.xml";
-  }
-
-  public String getSolrConfigFile() {
-    return "solrconfig-functionquery.xml";
-  }
-
-  public String getCoreName() {
-    return "basic";
-  }
-
-
-  public void testFunctionQParser() throws Exception {
-    ModifiableSolrParams local = new ModifiableSolrParams();
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), "_val_:'foo'", "", 0, 10, new HashMap());
-    FunctionQParser parser;
-    Query query;
-    FunctionQuery fq;
-    parser = new FunctionQParser("'foo'", local, params, req);
-    query = parser.parse();
-    assertTrue("query is not a FunctionQuery", query instanceof FunctionQuery);
-    fq = (FunctionQuery) query;
-    assertTrue("ValueSource is not a LiteralValueSource", fq.getValueSource() instanceof LiteralValueSource);
-  }
-
-}
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestRangeQuery.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestRangeQuery.java
index 723bc8c6..b345fbb4 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestRangeQuery.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestRangeQuery.java
@@ -18,6 +18,7 @@
 
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.SolrInputDocument;
+import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.response.SolrQueryResponse;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -261,11 +262,13 @@ public void process(SolrInputDocument doc) {
       SolrQueryResponse last=null;
       for (String q : qs) {
         // System.out.println("QUERY="+q);
+        SolrQueryRequest req = req("q",q,"rows","1000");
         SolrQueryResponse qr = h.queryAndResponse(handler, req("q",q,"rows","1000"));
         if (last != null) {
           // we only test if the same docs matched since some queries will include factors like idf, etc.
           sameDocs((DocSet)qr.getValues().get("response"), (DocSet)last.getValues().get("response"));
         }
+        req.close();
         last = qr;
       }
     }
