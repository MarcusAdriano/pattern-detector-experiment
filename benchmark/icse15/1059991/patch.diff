diff --git a/cassandra/branches/cassandra-0.7/contrib/javautils/src/main/java/org/apache/cassandra/contrib/utils/service/CassandraServiceDataCleaner.java b/cassandra/branches/cassandra-0.7/contrib/javautils/src/main/java/org/apache/cassandra/contrib/utils/service/CassandraServiceDataCleaner.java
index 88d1ac8c..984e62cc 100644
--- a/cassandra/branches/cassandra-0.7/contrib/javautils/src/main/java/org/apache/cassandra/contrib/utils/service/CassandraServiceDataCleaner.java
+++ b/cassandra/branches/cassandra-0.7/contrib/javautils/src/main/java/org/apache/cassandra/contrib/utils/service/CassandraServiceDataCleaner.java
@@ -25,6 +25,7 @@
 import java.util.Set;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.db.commitlog.CommitLog;
 import org.apache.cassandra.io.util.FileUtils;
 
 /**
@@ -42,6 +43,7 @@
     public void prepare() throws IOException {
         makeDirsIfNotExist();
         cleanupDataDirectories();
+        CommitLog.instance.resetUnsafe();
     }
 
     /**
@@ -58,9 +60,7 @@ public void cleanupDataDirectories() throws IOException {
      * @throws IOException if directories cannot be created (permissions etc).
      */
     public void makeDirsIfNotExist() throws IOException {
-        for (String s: getDataDirs()) {
-            mkdir(s);
-        }
+        DatabaseDescriptor.createAllDirectories();
     }
 
     /**
@@ -76,15 +76,6 @@ public void makeDirsIfNotExist() throws IOException {
         dirs.add(DatabaseDescriptor.getCommitLogLocation());
         return dirs;
     }
-    /**
-     * Creates a directory
-     *
-     * @param dir
-     * @throws IOException
-     */
-    private void mkdir(String dir) throws IOException {
-        FileUtils.createDirectory(dir);
-    }
 
     /**
      * Removes all directory content from the file system
diff --git a/cassandra/branches/cassandra-0.7/contrib/javautils/src/test/java/org/apache/cassandra/contrib/utils/service/CassandraServiceTest.java b/cassandra/branches/cassandra-0.7/contrib/javautils/src/test/java/org/apache/cassandra/contrib/utils/service/CassandraServiceTest.java
index b7c4f397..90650681 100644
--- a/cassandra/branches/cassandra-0.7/contrib/javautils/src/test/java/org/apache/cassandra/contrib/utils/service/CassandraServiceTest.java
+++ b/cassandra/branches/cassandra-0.7/contrib/javautils/src/test/java/org/apache/cassandra/contrib/utils/service/CassandraServiceTest.java
@@ -24,7 +24,12 @@
 
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.nio.ByteBuffer;
 
+import org.apache.cassandra.config.CFMetaData;
+import org.apache.cassandra.config.ConfigurationException;
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.config.KSMetaData;
 import org.apache.cassandra.service.EmbeddedCassandraService;
 import org.apache.cassandra.thrift.AuthenticationException;
 import org.apache.cassandra.thrift.AuthorizationException;
@@ -38,9 +43,11 @@
 import org.apache.cassandra.thrift.NotFoundException;
 import org.apache.cassandra.thrift.TimedOutException;
 import org.apache.cassandra.thrift.UnavailableException;
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.protocol.TProtocol;
+import org.apache.thrift.transport.TFramedTransport;
 import org.apache.thrift.transport.TSocket;
 import org.apache.thrift.transport.TTransport;
 import org.apache.thrift.transport.TTransportException;
@@ -56,6 +63,8 @@
 public class CassandraServiceTest {
 
     private static EmbeddedCassandraService cassandra;
+    private static Thread cassandraRunner;
+    private static CassandraServiceDataCleaner cleaner;
 
     /**
      * Set embedded cassandra up and spawn it in a new thread.
@@ -66,18 +75,40 @@
      */
     @BeforeClass
     public static void setup() throws TTransportException, IOException,
-            InterruptedException {
+            InterruptedException, ConfigurationException {
         // Tell cassandra where the configuration files are.
         // Use the test configuration file.
-        System.setProperty("storage-config", "../../test/conf");
+        System.setProperty("cassandra.config", "file:../../test/conf/cassandra.yaml");
+        System.setProperty("log4j.configuration", "file:../../test/conf/log4j-junit.properties");
+        //String configUrl = System.getProperty("cassandra.config");
+        loadYamlTables();
+        initCleaner();
+    }
 
-        CassandraServiceDataCleaner cleaner = new CassandraServiceDataCleaner();
+    private static void initCleaner() throws IOException, TTransportException, ConfigurationException {
+        cleaner = new CassandraServiceDataCleaner();
         cleaner.prepare();
+        
         cassandra = new EmbeddedCassandraService();
         cassandra.init();
-        Thread t = new Thread(cassandra);
-        t.setDaemon(true);
-        t.start();
+        
+        if ( cassandraRunner == null ) {
+            cassandraRunner = new Thread(cassandra);
+            cassandraRunner.setDaemon(true);
+            cassandraRunner.start();
+        }
+    }
+    
+
+    /** Manually load tables from the test configuration file.
+     * @throws ConfigurationException */
+    private static void loadYamlTables() throws ConfigurationException {
+      for (KSMetaData table : DatabaseDescriptor.readTablesFromYaml()) {
+        for (CFMetaData cfm : table.cfMetaData().values()) {
+          CFMetaData.map(cfm);
+        }
+        DatabaseDescriptor.setTableDefinition(table, DatabaseDescriptor.getDefsVersion());
+      }
     }
 
 
@@ -88,22 +119,24 @@ public void testInProcessCassandraServer()
             NotFoundException, AuthenticationException, AuthorizationException {
         Cassandra.Client client = getClient();
 
-        client.login(null);
+        client.set_keyspace("Keyspace1");        
 
         String key_user_id = "1";
+        
         long timestamp = System.currentTimeMillis();   
 
         // insert
         ColumnParent colParent = new ColumnParent("Standard1");
-        Column column = new Column("name".getBytes("utf-8"), "Ran".getBytes("UTF-8"), timestamp);
+        Column column = new Column(ByteBufferUtil.bytes("name"), 
+                ByteBufferUtil.bytes("Ran"), timestamp);
         
-        client.insert(key_user_id.getBytes(), colParent, column, ConsistencyLevel.ONE);
+        client.insert(ByteBufferUtil.bytes(key_user_id), colParent, column, ConsistencyLevel.ONE);
 
         // read
         ColumnPath cp = new ColumnPath("Standard1");
-        cp.setColumn("name".getBytes("utf-8"));
+        cp.setColumn(ByteBufferUtil.bytes("name"));
 
-        ColumnOrSuperColumn got = client.get(key_user_id.getBytes(), cp,
+        ColumnOrSuperColumn got = client.get(ByteBufferUtil.bytes(key_user_id), cp,
                 ConsistencyLevel.ONE);
 
         // assert
@@ -111,6 +144,7 @@ public void testInProcessCassandraServer()
         assertEquals("Ran", new String(got.getColumn().getValue(), "utf-8"));
     }
 
+    
     /**
      * Gets a connection to the localhost client
      *
@@ -118,7 +152,7 @@ public void testInProcessCassandraServer()
      * @throws TTransportException
      */
     private Cassandra.Client getClient() throws TTransportException {
-        TTransport tr = new TSocket("localhost", 9170);
+        TTransport tr = new TFramedTransport(new TSocket("localhost", 9170));
         TProtocol proto = new TBinaryProtocol(tr);
         Cassandra.Client client = new Cassandra.Client(proto);
         tr.open();
