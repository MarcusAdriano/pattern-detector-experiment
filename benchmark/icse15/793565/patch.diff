diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
index c162abcc..a55b02f9 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
@@ -144,4 +144,18 @@ public int clearLimit() {
 	public void setInput(InputStream in) {
 		this.in = in;
 	}
+
+    /**
+     * This stream doesn't support mark/reset, independent of whether the
+     * underlying stream does so or not.
+     * <p>
+     * The reason for not supporting mark/reset, is that it is hard to combine
+     * with the limit functionality without always keeping track of the number
+     * of bytes read.
+     *
+     * @return {@code false}
+     */
+    public boolean markSupported() {
+        return false;
+    }
 }
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLClob.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLClob.java
index e0e69d7c..c77c6c88 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLClob.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLClob.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.jdbc.CharacterStreamDescriptor;
 
 import org.apache.derby.iapi.services.io.ArrayInputStream;
+import org.apache.derby.iapi.services.io.FormatIdInputStream;
 import org.apache.derby.iapi.services.io.InputStreamUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
@@ -38,6 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
+import java.io.PushbackInputStream;
 import java.sql.Clob;
 import java.sql.Date;
 import java.sql.SQLException;
@@ -242,11 +244,11 @@ public int getLength() throws StandardException {
         long charLength = 0;
         try {
             if (repositionStream) {
-                rewindStream(csd.getDataOffset());
+                rewindStream(stream, csd.getDataOffset());
             }
             charLength = UTF8Util.skipUntilEOF(stream);
             // We just drained the whole stream. Reset it.
-            rewindStream(0);
+            rewindStream(stream, 0);
         } catch (IOException ioe) {
             throwStreamingIOException(ioe);
         }
@@ -348,7 +350,7 @@ public CharacterStreamDescriptor getStreamWithDescriptor()
                 if (read > hdrInfo.headerLength()) {
                     // We have read too much. Reset the stream.
                     read = hdrInfo.headerLength();
-                    rewindStream(read);
+                    rewindStream(stream, read);
                 }
                 csd = new CharacterStreamDescriptor.Builder().stream(stream).
                     bufferable(false).positionAware(false).
@@ -692,11 +694,12 @@ public void readExternal(ObjectInput in)
                                             : (int)csd.getByteLength();
             hdrInfo = new HeaderInfo(hdrLen, valueLength);
             // Make sure the stream is correctly positioned.
-            rewindStream(hdrLen);
+            rewindStream((InputStream)in, hdrLen);
         } else {
-            final boolean markSet = stream.markSupported();
+            final InputStream srcIn = (InputStream)in;
+            final boolean markSet = srcIn.markSupported();
             if (markSet) {
-                stream.mark(MAX_STREAM_HEADER_LENGTH);
+                srcIn.mark(MAX_STREAM_HEADER_LENGTH);
             }
             byte[] header = new byte[MAX_STREAM_HEADER_LENGTH];
             int read = in.read(header);
@@ -706,18 +709,31 @@ public void readExternal(ObjectInput in)
             }
             hdrInfo = investigateHeader(header, read);
             if (read > hdrInfo.headerLength()) {
-                // We read too much data, reset and position on the first byte
-                // of the user data.
-                // First see if we set a mark on the stream and can reset it.
-                // If not, try using the Resetable interface.
+                // We read too much data. To "unread" the bytes, the following
+                // mechanisms will be attempted:
+                //  1) See if we set a mark on the stream, if so reset it.
+                //  2) If we have a FormatIdInputStream, use a
+                //     PushBackInputStream and use it as the source.
+                //  3) Try using the Resetable interface.
+                // To avoid silent data truncation / data corruption, we fail
+                // in step three if the stream isn't resetable.
                 if (markSet) {
-                    // Stream is not a store Resetable one, use mark/reset
-                    // functionality instead.
-                    stream.reset();
-                    InputStreamUtil.skipFully(stream, hdrInfo.headerLength());
-                } else if (stream instanceof Resetable) {
-                    // We have a store stream.
-                    rewindStream(hdrInfo.headerLength());
+                    // 1) Reset the stream to the previously set mark.
+                    srcIn.reset();
+                    InputStreamUtil.skipFully(srcIn, hdrInfo.headerLength());
+                } else if (in instanceof FormatIdInputStream) {
+                    // 2) Add a push back stream on top of the underlying
+                    // source, and unread the surplus bytes we read. Set the
+                    // push back stream to be the source of the data input obj.
+                    final int surplus = read - hdrInfo.headerLength();
+                    FormatIdInputStream formatIn = (FormatIdInputStream)in;
+                    PushbackInputStream pushbackIn = new PushbackInputStream(
+                            formatIn.getInputStream(), surplus);
+                    pushbackIn.unread(header, hdrInfo.headerLength(), surplus);
+                    formatIn.setInput(pushbackIn);
+                } else {
+                    // 3) Assume we have a store stream.
+                    rewindStream(srcIn, hdrInfo.headerLength());
                 }
             }
         }
@@ -769,14 +785,15 @@ public void readExternalFromArray(ArrayInputStream in)
      * Rewinds the stream to the beginning and then skips the specified number
      * of bytes.
      *
-     * @param pos number of bytes to skip
+     * @param in input stream to rewind
+     * @param offset number of bytes to skip
      * @throws IOException if resetting or reading from the stream fails
      */
-    private void rewindStream(long pos)
+    private void rewindStream(InputStream in, long offset)
             throws IOException {
         try {
-            ((Resetable)stream).resetStream();
-            InputStreamUtil.skipFully(stream, pos);
+            ((Resetable)in).resetStream();
+            InputStreamUtil.skipFully(in, offset);
         } catch (StandardException se) {
             IOException ioe = new IOException(se.getMessage());
             ioe.initCause(se);
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java
index e69de29b..752a0983 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java
@@ -0,0 +1,276 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.LobSortTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.jdbc4;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Properties;
+import java.util.Random;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
+import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
+import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
+
+/**
+ * Executes sorting of LOB values based on the length of the LOB or a random
+ * value. The intention is to test code determining the length of the LOBs and
+ * also the code materializing the LOB values. The tests don't verify that the
+ * sort order is actually correct. This test is a good candidate for being run
+ * with hard or soft upgraded databases.
+ * <p>
+ * Note that the seed used for the random number generator is included in the
+ * name of the test methods. Knowing the seed enables debugging by being able
+ * to rerun a specific test sequence that failed. The random number generator
+ * is only used during data insertion.
+ * <p>
+ * See DERBY-4245.
+ * <p>
+ * <em>NOTE</em>: This test is sensitive to the JVM heap size, which is one of
+ * the factors determining whether the sort is done internally or externally.
+ * The bug for a clean database would only occur with the external sort.
+ */
+public class LobSortTest
+        extends BaseJDBCTestCase {
+
+    /** The seed used for the random number generator. */
+    private static final long SEED = System.currentTimeMillis();
+
+    public LobSortTest(String name) {
+        super(name);
+    }
+
+    /**
+     * Overridden naming method which includes the seed used for the random
+     * generator.
+     * <p>
+     * The seed is required if one wants to replay a specific sequence for
+     * debugging purposes.
+     *
+     * @return The name of the test.
+     */
+    public String getName() {
+        return (super.getName() + "-" + SEED);
+    }
+
+    public void testBlobMixed()
+            throws SQLException {
+        fetchIterateGetLengthBlob(
+                "select blen, b from MIXED_LOBS order by length(b)");
+    }
+
+    public void testBlobSmall()
+            throws SQLException {
+        fetchIterateGetLengthBlob("select blen, b from MIXED_LOBS " +
+                                  "where blen < 2000 order by length(b)");
+    }
+
+    public void testBlobLarge()
+            throws SQLException {
+        fetchIterateGetLengthBlob("select blen, b from MIXED_LOBS " +
+                    "where blen > 34000 order by length(b)");
+    }
+
+    public void testBlobClob()
+            throws SQLException {
+        fetchIterateGetLengthBlob(
+                "select blen, b from MIXED_LOBS order by length(c), length(b)");
+    }
+
+    public void testBlobRandom()
+            throws SQLException {
+        fetchIterateGetLengthBlob(
+                "select blen, b from MIXED_LOBS order by rnd");
+    }
+
+    public void testClobMixed()
+            throws SQLException {
+        fetchIterateGetLengthClob(
+                "select clen, c from MIXED_LOBS order by length(c)");
+    }
+
+    public void testClobSmall()
+            throws SQLException {
+        fetchIterateGetLengthClob("select clen, c from MIXED_LOBS " +
+                                  "where clen < 2000 order by length(c)");
+    }
+
+    public void testClobLarge()
+            throws SQLException {
+        fetchIterateGetLengthClob("select clen, c from MIXED_LOBS " +
+                    "where clen > 34000 order by length(c)");
+    }
+
+    public void testClobBlob()
+            throws SQLException {
+        fetchIterateGetLengthClob(
+                "select clen, c from MIXED_LOBS order by length(b), length(c)");
+    }
+
+    public void testClobRandom()
+            throws SQLException {
+        fetchIterateGetLengthClob(
+                "select clen, c from MIXED_LOBS order by rnd");
+    }
+
+    /**
+     * Executes the specified query two times, materializes the Blob on the
+     * first run and gets the length through {@code Blob.length} on the second.
+     * <p>
+     * Note that the query must select a Blob column at index one and the length
+     * at index two.
+     *
+     * @param sql query to execute
+     * @throws SQLException if the test fails for some reason
+     */
+    private void fetchIterateGetLengthBlob(String sql)
+            throws SQLException {
+        Statement stmt = createStatement();
+        ResultSet rs = stmt.executeQuery(sql);
+        // Materialize the BLOB value.
+        while (rs.next()) {
+            assertEquals(rs.getInt(1), rs.getBytes(2).length);
+        }
+        rs.close();
+        rs = stmt.executeQuery(sql);
+        // Get the BLOB value length through Blob.length
+        while (rs.next()) {
+            assertEquals(rs.getInt(1), (int)rs.getBlob(2).length());
+        }
+        rs.close();
+        stmt.close();
+    }
+
+    /**
+     * Executes the specified query two times, materializes the Clob on the
+     * first run and gets the length through {@code Clob.length} on the second.
+     * <p>
+     * Note that the query must select a Clob column at index one and the length
+     * at index two.
+     *
+     * @param sql query to execute
+     * @throws SQLException if the test fails for some reason
+     */
+    private void fetchIterateGetLengthClob(String sql)
+            throws SQLException {
+        Statement stmt = createStatement();
+        ResultSet rs = stmt.executeQuery(sql);
+        // Materialize the CLOB value.
+        while (rs.next()) {
+            assertEquals(rs.getInt(1), rs.getString(2).length());
+        }
+        rs.close();
+        rs = stmt.executeQuery(sql);
+        // Get the CLOB value length through Clob.length
+        while (rs.next()) {
+            assertEquals(rs.getInt(1), (int)rs.getClob(2).length());
+        }
+        rs.close();
+        stmt.close();
+    }
+
+    public static Test suite() {
+        Properties props = new Properties();
+        // Adjust sort buffer size to trigger the bug situation with less data.
+        props.setProperty("derby.storage.sortBufferMax", "4");
+        TestSuite suite = new TestSuite(LobSortTest.class,
+                                        "LobSortTestEmbedded");
+        return new CleanDatabaseTestSetup(
+                new SystemPropertyTestSetup(suite, props, true)) {
+            /**
+             * Generates a table with Blob and Clobs of mixed size.
+             */
+            protected void decorateSQL(Statement s)
+                    throws SQLException {
+                Random rnd = new Random(SEED);
+                Connection con = s.getConnection();
+                con.setAutoCommit(false);
+                s.executeUpdate("create table MIXED_LOBS (" +
+                        "c clob, clen int, b blob, blen int, rnd int)");
+                PreparedStatement ps = con.prepareStatement(
+                        "insert into MIXED_LOBS values (?,?,?,?,?)");
+                // Make sure we get at least one zero-length CLOB and BLOB.
+                ps.setString(1, "");
+                ps.setInt(2, 0);
+                ps.setBytes(3, new byte[0]);
+                ps.setInt(4, 0);
+                ps.setInt(5, rnd.nextInt());
+                ps.executeUpdate();
+                for (int i=0; i < 100; i++) {
+                    CharAlphabet ca = getCharAlphabet(1 + rnd.nextInt(3));
+                    int length = (int)(rnd.nextDouble() * 64.0 * 1024.0);
+                    if (rnd.nextInt(1000) < 500) {
+                        // Specify the length.
+                        ps.setCharacterStream( 1,
+                                new LoopingAlphabetReader(length, ca), length);
+                    } else {
+                        // Don't specify the length.
+                        ps.setCharacterStream(1,
+                                new LoopingAlphabetReader(length, ca));
+                    }
+                    ps.setInt(2, length);
+                    length = (int)(rnd.nextDouble() * 64.0 * 1024.0);
+                    if (rnd.nextInt(1000) < 500) {
+                        // Specify the length.
+                        ps.setBinaryStream(3,
+                                new LoopingAlphabetStream(length), length);
+                    } else {
+                        // Don't specify the length.
+                        ps.setBinaryStream(3,
+                                new LoopingAlphabetStream(length));
+                    }
+                    ps.setInt(4, length);
+                    ps.setInt(5, rnd.nextInt());
+                    ps.executeUpdate();
+                }
+                con.commit();
+                ps.close();
+            }
+
+            /**
+             * Returns a character alphabet.
+             */
+            private CharAlphabet getCharAlphabet(int i) {
+                switch (i) {
+                    case 1:
+                        return CharAlphabet.modernLatinLowercase();
+                    case 2:
+                        return CharAlphabet.tamil();
+                    case 3:
+                        return CharAlphabet.cjkSubset();
+                    default:
+                        fail("Unknown alphabet identifier: " + i);
+                }
+                // Will never be reached.
+                return null;
+            }
+        };
+    }
+}
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
index 78e32cbb..b005ac72 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
@@ -71,6 +71,7 @@ public static Test suite() throws SQLException {
 		suite.addTest(ConnectionMethodsTest.suite());
         suite.addTest(VerifySignatures.suite());
         suite.addTest (LobStreamTest.suite());
+        suite.addTest(LobSortTest.suite());
         suite.addTest (BlobSetMethodsTest.suite());
         suite.addTest (JDBC4FromJDBC3DataSourceTest.suite());
 		
