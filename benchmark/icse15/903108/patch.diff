diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java
index 70bc1112..d9338a7a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java
@@ -59,7 +59,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     CallStatementResultSet(
 				GeneratedMethod methodCall,
 				Activation a) 
-			throws StandardException
     {
 		super(a);
 		this.methodCall = methodCall;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
index 456ec1fd..05f708a2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
@@ -200,9 +200,6 @@ void  setup() throws StandardException
 		activation.checkStatementValidity();
 
 		/* Get or re-use the row changer.
-		 * NOTE: We need to set ourself as the top result set
-		 * if this is not the 1st execution.  (Done in constructor
-		 * for 1st execution.)
 		 */
 		if (firstExecute)
 		{
@@ -223,10 +220,7 @@ void  setup() throws StandardException
 								constants.getStreamStorableHeapColIds(),
 								activation);
 		}
-		else
-		{
-			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
-		}
+
 		/* decode the lock mode for the execution isolation level */
 		lockMode = decodeLockMode(constants.lockMode);
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
index f5bca1bc..9cdf682a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
@@ -75,8 +75,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	*/
 	protected void openCore() throws StandardException
 	{
-		lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
-
 		ExecRow row = getNextRowCore(sourceResultSet);
 
 		if (row != null)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index dda38ece..2ea00ba6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -885,9 +885,6 @@ private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecut
                 long user_autoinc=0;
                         
 		/* Get or re-use the row changer.
-		 * NOTE: We need to set ourself as the top result set
-		 * if this is not the 1st execution.  (Done in constructor
-		 * for 1st execution.)
 		 */
 		if (firstExecute)
 		{
@@ -908,10 +905,6 @@ private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecut
 							       );
 			rowChanger.setIndexNames(constants.indexNames);
 		}
-		else
-		{
-			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
-		}
 
 		/* decode lock mode for the execution isolation level */
 		int lockMode = decodeLockMode(constants.lockMode);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
index 085243af..47a568a0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
@@ -107,16 +107,6 @@ protected void openCore() throws StandardException
 			throw StandardException.unexpectedUserException(t);
 		}
 
-		/* Get or re-use the row changer.
-		 * NOTE: We need to set ourself as the top result set
-		 * if this is not the 1st execution.  (Done in constructor
-		 * for 1st execution.)
-		 */
-		if (! firstExecute)
-		{
-			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
-		}
-
 		/* The source does not know whether or not we are doing a
 		 * deferred mode insert.  If we are, then we must clear the
 		 * index scan info from the activation so that the row changer
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java
index 88e2f6c8..90361fa9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java
@@ -43,11 +43,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * Construct a MiscResultSet
 	 *
 	 *  @param activation		Describes run-time environment.
-	 *
-	 *  @exception StandardException Standard Derby error policy.
      */
     MiscResultSet(Activation activation)
-		 throws StandardException
     {
 		super(activation);
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
index 0ec91fab..27aa0d72 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
@@ -62,7 +62,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 abstract class NoRowsResultSetImpl implements ResultSet
 {
 	final Activation    activation;
-	NoPutResultSet[]	subqueryTrackingArray;
+    private NoPutResultSet[] subqueryTrackingArray;
 
 	private final boolean statisticsTimingOn;
 	/** True if the result set has been opened, and not yet closed. */
@@ -84,7 +84,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private DataValueDescriptor[]  normalizedGeneratedValues;
 
 	NoRowsResultSetImpl(Activation activation)
-		throws StandardException
 	{
 		this.activation = activation;
 
@@ -102,12 +101,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		 */
 		beginTime = getCurrentTimeMillis();
 		beginExecutionTime = beginTime;
-
-		StatementContext sc = lcc.getStatementContext();
-		sc.setTopResultSet(this, (NoPutResultSet[]) null);
-
-		// Pick up any materialized subqueries
-		subqueryTrackingArray = sc.getSubqueryTrackingArray();
 	}
 
 	/**
@@ -118,6 +111,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	void setup() throws StandardException {
 		isOpen = true;
+
+        StatementContext sc = lcc.getStatementContext();
+        sc.setTopResultSet(this, subqueryTrackingArray);
+
+        // Pick up any materialized subqueries
+        if (subqueryTrackingArray == null) {
+            subqueryTrackingArray = sc.getSubqueryTrackingArray();
+        }
 	}
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java
index a8ec0ad7..1c49e911 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java
@@ -40,11 +40,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * Construct a SetTransactionResultSet
 	 *
 	 *  @param activation		Describes run-time environment.
-	 *
-	 *  @exception StandardException Standard Derby error policy.
      */
     SetTransactionResultSet(Activation activation)
-		 throws StandardException
     {
 		super(activation);
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
index 9d8d50eb..e9b8b8f5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
@@ -301,9 +301,6 @@ void setup() throws StandardException
 		}
 
 		/* Get or re-use the row changer.
-		 * NOTE: We need to set ourself as the top result set
-		 * if this is not the 1st execution.  (Done in constructor
-		 * for 1st execution.)
 		 */
 		if (firstOpen)
 		{
@@ -324,10 +321,6 @@ void setup() throws StandardException
 										 activation);
 			rowChanger.setIndexNames(constants.indexNames);
 		}
-		else
-		{
-			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
-		}
 
 
 		/* Open the RowChanger before the source ResultSet so that
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
index 276903ec..adb27542 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
@@ -76,8 +76,6 @@ protected void openCore() throws StandardException
 
         if( null != row)
             rowLocationColumn = row.nColumns();
-		if (!firstExecute)
-			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
 
 		/* The source does not know whether or not we are doing a
 		 * deferred mode insert.  If we are, then we must clear the
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java
index 4c07a8fd..4429afed 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java
@@ -174,6 +174,8 @@ public static String ref(String table) {
 
     private static final long DERBY_DEFAULT_TIMEOUT = 60;
 
+    private static final String SQLSTATE_NULL_INTO_NON_NULL = "23502";
+
     /**
      * Creates a String containing an insert statement for the
      * specified table containing the specified number of '?'
@@ -2633,4 +2635,30 @@ private void setSchema(String schema) throws SQLException {
         stm.execute("SET SCHEMA " + schema);
         stm.close();
     }
+
+    /**
+     * Test case for DERBY-4488, where the third execution of a statement
+     * that attempted to insert a NULL into a non-nullable column failed with
+     * a NullPointerException.
+     */
+    public void testInsertNullIntoNonNullableColumn() throws SQLException {
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.execute("create table d4488_t1 (pk int primary key)");
+        s.execute("insert into d4488_t1 values 1");
+        s.execute("create table d4488_t2 (c1 int, c2 int not null)");
+        commit();
+
+        PreparedStatement ps = prepareStatement(
+                "insert into d4488_t2(c1) select 1 from d4488_t1");
+        for (int i = 0; i < 5; i++) {
+            // Expect this to fail, but not with NullPointerException.
+            assertStatementError(SQLSTATE_NULL_INTO_NON_NULL, ps);
+            // Need a rollback here in order to close the index scan on
+            // D4488_T1, otherwise the NPE won't reproduce. Alternatively,
+            // run with auto-commit enabled.
+            rollback();
+        }
+    }
 }
