diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 7a32e0c8..6ffb5b6c 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -232,11 +232,18 @@ public StringIndex getStringIndex (IndexReader reader, String field)
     Object ret = lookup (reader, field, STRING_INDEX);
     if (ret == null) {
       final int[] retArray = new int[reader.maxDoc()];
-      String[] mterms = new String[reader.maxDoc()];
+      String[] mterms = new String[reader.maxDoc()+1];
       if (retArray.length > 0) {
         TermDocs termDocs = reader.termDocs();
         TermEnum termEnum = reader.terms (new Term (field, ""));
         int t = 0;  // current term number
+
+        // an entry for documents that have no terms in this field
+        // should a document with no terms be at top or bottom?
+        // this puts them at the top - if it is changed, FieldDocSortedHitQueue
+        // needs to change as well.
+        mterms[t++] = null;
+
         try {
           if (termEnum.term() == null) {
             throw new RuntimeException ("no terms in field " + field);
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldDocSortedHitQueue.java b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldDocSortedHitQueue.java
index 6890d646..e835ca28 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldDocSortedHitQueue.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldDocSortedHitQueue.java
@@ -21,6 +21,8 @@
 import org.apache.lucene.util.PriorityQueue;
 
 import java.io.IOException;
+import java.text.Collator;
+import java.util.Locale;
 
 /**
  * Expert: Collects sorted results from Searchable's and collates them.
@@ -39,6 +41,10 @@
 	// have been resolved by the time this class is used.
 	volatile SortField[] fields;
 
+	// used in the case where the fields are sorted by locale
+	// based strings
+	volatile Collator[] collators;
+
 
 	/**
 	 * Creates a hit queue sorted by the given list of fields.
@@ -49,6 +55,7 @@
 	FieldDocSortedHitQueue (SortField[] fields, int size)
 	throws IOException {
 		this.fields = fields;
+		this.collators = hasCollators (fields);
 		initialize (size);
 	}
 
@@ -62,7 +69,10 @@
 	 * @param fields
 	 */
 	synchronized void setFields (SortField[] fields) {
-		if (this.fields == null) this.fields = fields;
+		if (this.fields == null) {
+			this.fields = fields;
+			this.collators = hasCollators (fields);
+		}
 	}
 
 
@@ -72,6 +82,23 @@ synchronized void setFields (SortField[] fields) {
 	}
 
 
+	/** Returns an array of collators, possibly <code>null</code>.  The collators
+	 * correspond to any SortFields which were given a specific locale.
+	 * @param fields Array of sort fields.
+	 * @return Array, possibly <code>null</code>.
+	 */
+	private Collator[] hasCollators (final SortField[] fields) {
+		if (fields == null) return null;
+		Collator[] ret = new Collator[fields.length];
+		for (int i=0; i<fields.length; ++i) {
+			Locale locale = fields[i].getLocale();
+			if (locale != null)
+				ret[i] = Collator.getInstance (locale);
+		}
+		return ret;
+	}
+
+
 	/**
 	 * Returns whether <code>a</code> is less relevant than <code>b</code>.
 	 * @param a ScoreDoc
@@ -105,7 +132,11 @@ protected final boolean lessThan (final Object a, final Object b) {
 						String s2 = (String) docB.fields[i];
 						if (s2 == null) c = -1;      // could be null if there are
 						else if (s1 == null) c = 1;  // no terms in the given field
-						else c = s2.compareTo(s1);
+						else if (fields[i].getLocale() == null) {
+							c = s2.compareTo(s1);
+						} else {
+							c = collators[i].compare (s2, s1);
+						}
 						break;
 					case SortField.FLOAT:
 						float f1 = ((Float)docA.fields[i]).floatValue();
@@ -143,9 +174,16 @@ protected final boolean lessThan (final Object a, final Object b) {
 					case SortField.STRING:
 						String s1 = (String) docA.fields[i];
 						String s2 = (String) docB.fields[i];
+						// null values need to be sorted first, because of how FieldCache.getStringIndex()
+						// works - in that routine, any documents without a value in the given field are
+						// put first.
 						if (s1 == null) c = -1;      // could be null if there are
 						else if (s2 == null) c = 1;  // no terms in the given field
-						else c = s1.compareTo(s2);
+						else if (fields[i].getLocale() == null) {
+							c = s1.compareTo(s2);
+						} else {
+							c = collators[i].compare (s1, s2);
+						}
 						break;
 					case SortField.FLOAT:
 						float f1 = ((Float)docA.fields[i]).floatValue();
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldSortedHitQueue.java b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldSortedHitQueue.java
index ea106661..55e85b54 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/FieldSortedHitQueue.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/FieldSortedHitQueue.java
@@ -24,6 +24,8 @@
 import java.io.IOException;
 import java.util.WeakHashMap;
 import java.util.Map;
+import java.util.Locale;
+import java.text.Collator;
 
 /**
  * Expert: A hit queue for sorting by hits by terms in more than one field.
@@ -54,7 +56,7 @@
     this.fields = new SortField[n];
     for (int i=0; i<n; ++i) {
       String fieldname = fields[i].getField();
-      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getFactory());
+      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());
       this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());
     }
     initialize (size);
@@ -146,7 +148,7 @@ static Object store (IndexReader reader, String field, int type, Object factory,
     }
   }
 
-  static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldname, int type, SortComparatorSource factory)
+  static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldname, int type, Locale locale, SortComparatorSource factory)
   throws IOException {
     if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;
     if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;
@@ -163,7 +165,8 @@ static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldn
           comparator = comparatorFloat (reader, fieldname);
           break;
         case SortField.STRING:
-          comparator = comparatorString (reader, fieldname);
+          if (locale != null) comparator = comparatorStringLocale (reader, fieldname, locale);
+          else comparator = comparatorString (reader, fieldname);
           break;
         case SortField.CUSTOM:
           comparator = factory.newComparator (reader, fieldname);
@@ -271,6 +274,34 @@ public int sortType() {
     };
   }
 
+  /**
+   * Returns a comparator for sorting hits according to a field containing strings.
+   * @param reader  Index to use.
+   * @param fieldname  Field containg string values.
+   * @return  Comparator for sorting hits.
+   * @throws IOException If an error occurs reading the index.
+   */
+  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)
+  throws IOException {
+    final Collator collator = Collator.getInstance (locale);
+    final String field = fieldname.intern();
+    return new ScoreDocComparator() {
+      final String[] index = FieldCache.DEFAULT.getStrings (reader, field);
+
+      public final int compare (final ScoreDoc i, final ScoreDoc j) {
+        return collator.compare (index[i.doc], index[j.doc]);
+      }
+
+      public Comparable sortValue (final ScoreDoc i) {
+        return index[i.doc];
+      }
+
+      public int sortType() {
+        return SortField.STRING;
+      }
+    };
+  }
+
   /**
    * Returns a comparator for sorting hits according to values in the given field.
    * The terms in the field are looked at to determine whether they contain integers,
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/SortField.java b/lucene/java/trunk/src/java/org/apache/lucene/search/SortField.java
index 0c41aa17..8840f7be 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/SortField.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/SortField.java
@@ -19,6 +19,7 @@
  */
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /**
  * Stores information about how to sort documents by terms in an individual
@@ -78,6 +79,7 @@
 
   private String field;
   private int type = AUTO;  // defaults to determining type dynamically
+  private Locale locale;    // defaults to "natural order" (no Locale)
   boolean reverse = false;  // defaults to natural order
   private SortComparatorSource factory;
 
@@ -123,6 +125,29 @@ public SortField (String field, int type, boolean reverse) {
     this.reverse = reverse;
   }
 
+  /** Creates a sort by terms in the given field sorted
+   * according to the given locale.
+   * @param field  Name of field to sort by, cannot be <code>null</code>.
+   * @param locale Locale of values in the field.
+   */
+  public SortField (String field, Locale locale) {
+    this.field = field.intern();
+    this.type = STRING;
+    this.locale = locale;
+  }
+
+  /** Creates a sort, possibly in reverse, by terms in the given field sorted
+   * according to the given locale.
+   * @param field  Name of field to sort by, cannot be <code>null</code>.
+   * @param locale Locale of values in the field.
+   */
+  public SortField (String field, Locale locale, boolean reverse) {
+    this.field = field.intern();
+    this.type = STRING;
+    this.locale = locale;
+    this.reverse = reverse;
+  }
+
   /** Creates a sort with a custom comparison function.
    * @param field Name of field to sort by; cannot be <code>null</code>.
    * @param comparator Returns a comparator for sorting hits.
@@ -160,6 +185,14 @@ public int getType() {
     return type;
   }
 
+  /** Returns the Locale by which term values are interpreted.
+   * May return <code>null</code> if no Locale was specified.
+   * @return Locale, or <code>null</code>.
+   */
+  public Locale getLocale() {
+    return locale;
+  }
+
   /** Returns whether the sort should be reversed.
    * @return  True if natural order should be reversed.
    */
@@ -188,8 +221,8 @@ public String toString() {
                break;
     }
 
-    if (reverse)
-      buffer.append('!');
+    if (locale != null) buffer.append ("("+locale+")");
+    if (reverse) buffer.append('!');
 
     return buffer.toString();
   }
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestSort.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestSort.java
index bb647d05..1c3ec138 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestSort.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestSort.java
@@ -30,6 +30,7 @@
 import java.util.regex.Pattern;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Locale;
 
 import junit.framework.TestCase;
 import junit.framework.Test;
@@ -56,6 +57,7 @@
 	private Query queryX;
 	private Query queryY;
 	private Query queryA;
+	private Query queryF;
 	private Sort sort;
 
 
@@ -101,6 +103,7 @@ public static Test suite() {
 	{   "H",   "y a b c d",     "0",           "1.4E-45",      "e",     "C-88"  },
 	{   "I",   "x a b c d e f", "-2147483648", "1.0e+0",       "d",     "A-10"  },
 	{   "J",   "y a b c d e f", "4",           ".5",           "b",     "C-7"   },
+	{   "Z",   "f",             null,          null,           null,    null    }
 	};
 
 	// create an index of all the documents, or just the x, or just the y documents
@@ -113,10 +116,10 @@ private Searcher getIndex (boolean even, boolean odd)
 				Document doc = new Document();          // store, index, token
 				doc.add (new Field ("tracer",   data[i][0], true, false, false));
 				doc.add (new Field ("contents", data[i][1], false, true, true));
-				doc.add (new Field ("int",      data[i][2], false, true, false));
-				doc.add (new Field ("float",    data[i][3], false, true, false));
-				doc.add (new Field ("string",   data[i][4], false, true, false));
-				doc.add (new Field ("custom",   data[i][5], false, true, false));
+				if (data[i][2] != null) doc.add (new Field ("int",      data[i][2], false, true, false));
+				if (data[i][3] != null) doc.add (new Field ("float",    data[i][3], false, true, false));
+				if (data[i][4] != null) doc.add (new Field ("string",   data[i][4], false, true, false));
+				if (data[i][5] != null) doc.add (new Field ("custom",   data[i][5], false, true, false));
 				writer.addDocument (doc);
 			}
 		}
@@ -152,6 +155,7 @@ public void setUp() throws Exception {
 		queryX = new TermQuery (new Term ("contents", "x"));
 		queryY = new TermQuery (new Term ("contents", "y"));
 		queryA = new TermQuery (new Term ("contents", "a"));
+		queryF = new TermQuery (new Term ("contents", "f"));
 		sort = new Sort();
 	}
 
@@ -239,6 +243,27 @@ public void testReverseSort() throws Exception {
 		assertMatches (full, queryY, sort, "BFHJD");
 	}
 
+	// test sorting when the sort field is empty (undefined) for some of the documents
+	public void testEmptyFieldSort() throws Exception {
+		sort.setSort ("string");
+		assertMatches (full, queryF, sort, "ZJI");
+
+		sort.setSort ("string", true);
+		assertMatches (full, queryF, sort, "IJZ");
+
+		sort.setSort ("int");
+		assertMatches (full, queryF, sort, "IZJ");
+
+		sort.setSort ("int", true);
+		assertMatches (full, queryF, sort, "JZI");
+
+		sort.setSort ("float");
+		assertMatches (full, queryF, sort, "ZJI");
+
+		sort.setSort ("float", true);
+		assertMatches (full, queryF, sort, "IJZ");
+	}
+
 	// test sorts using a series of fields
 	public void testSortCombos() throws Exception {
 		sort.setSort (new String[] {"int","float"});
@@ -251,7 +276,18 @@ public void testSortCombos() throws Exception {
 		assertMatches (full, queryX, sort, "GICEA");
 	}
 
+	// test using a Locale for sorting strings
+	public void testLocaleSort() throws Exception {
+		sort.setSort (new SortField[] { new SortField ("string", Locale.US) });
+		assertMatches (full, queryX, sort, "AIGEC");
+		assertMatches (full, queryY, sort, "DJHFB");
 
+		sort.setSort (new SortField[] { new SortField ("string", Locale.US, true) });
+		assertMatches (full, queryX, sort, "CEGIA");
+		assertMatches (full, queryY, sort, "BFHJD");
+	}
+
+	// test a custom sort function
 	public void testCustomSorts() throws Exception {
 		sort.setSort (new SortField ("custom", SampleComparable.getComparatorSource()));
 		assertMatches (full, queryX, sort, "CAIEG");
@@ -283,6 +319,7 @@ public void testRemoteSort() throws Exception {
 		runMultiSorts (multi);
 	}
 
+	// test custom search when remote
 	public void testRemoteCustomSort() throws Exception {
 		Searchable searcher = getRemote();
 		MultiSearcher multi = new MultiSearcher (new Searchable[] { searcher });
@@ -438,11 +475,32 @@ private void runMultiSorts (Searcher multi) throws Exception {
 		sort.setSort ("string", true);
 		assertMatches (multi, queryA, sort, "CBEFGHIAJD");
 
+		sort.setSort (new SortField[] { new SortField ("string", Locale.US) });
+		assertMatches (multi, queryA, sort, "DJAIHGFEBC");
+
+		sort.setSort (new SortField[] { new SortField ("string", Locale.US, true) });
+		assertMatches (multi, queryA, sort, "CBEFGHIAJD");
+
 		sort.setSort (new String[] {"int","float"});
-		assertMatches (full, queryA, sort, "IDHFGJEABC");
+		assertMatches (multi, queryA, sort, "IDHFGJEABC");
 
 		sort.setSort (new String[] {"float","string"});
-		assertMatches (full, queryA, sort, "GDHJICEFAB");
+		assertMatches (multi, queryA, sort, "GDHJICEFAB");
+
+		sort.setSort ("int");
+		assertMatches (multi, queryF, sort, "IZJ");
+
+		sort.setSort ("int", true);
+		assertMatches (multi, queryF, sort, "JZI");
+
+		sort.setSort ("float");
+		assertMatches (multi, queryF, sort, "ZJI");
+
+		sort.setSort ("string");
+		assertMatches (multi, queryF, sort, "ZJI");
+
+		sort.setSort ("string", true);
+		assertMatches (multi, queryF, sort, "IJZ");
 	}
 
 	// make sure the documents returned by the search match the expected list
