diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java
index 09b959fc..5fc8fe31 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java
@@ -150,9 +150,13 @@ public static EXTDTAInputStream getEXTDTAStream(CallableStatement cs, int column
         switch ( ndrdaType )
         {
         case DRDAConstants.DRDA_TYPE_NLOBBYTES:
-            return new EXTDTAInputStream( cs.getBlob( column ), ndrdaType );
+            Blob    blob = cs.getBlob( column );
+            if ( blob ==  null ) { return null; }
+            return new EXTDTAInputStream( blob, ndrdaType );
         case DRDAConstants.DRDA_TYPE_NLOBCMIXED:
-            return new EXTDTAInputStream( cs.getClob( column ), ndrdaType );
+            Clob    clob = cs.getClob( column );
+            if ( clob == null ) { return null; }
+            return new EXTDTAInputStream( clob, ndrdaType );
         default:
             badDRDAType( ndrdaType );
 			return null;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
index 2c5aab21..270d0d7d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
@@ -669,6 +669,73 @@ private void    vetDataTypeCount( Connection conn ) throws Exception
         assertEquals( 22, actualTypeCount );
     }
     
+    /**
+     * <p>
+     * Regression test for https://issues.apache.org/jira/browse/DERBY-4959, an NPE
+     * trying to return null LOBs as procedure output args.
+     * </p>
+     */
+    public  void    test_4959() throws Exception
+    {
+        Connection  conn = getConnection();
+
+        PreparedStatement   ps = prepareStatement
+            (
+             conn,
+             "create procedure blobProc\n" +
+             "(\n" +
+             "    out blobCol blob\n" +
+             ")\n" +
+             "language java\n" +
+             "parameter style java\n" +
+             "no sql\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.blobProc'\n"
+             );
+        ps.execute();
+        ps.close();
+        ps = prepareStatement
+            (
+             conn,
+             "create procedure clobProc\n" +
+             "(\n" +
+             "    out clobCol clob\n" +
+             ")\n" +
+             "language java\n" +
+             "parameter style java\n" +
+             "no sql\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.clobProc'\n"
+             );
+        ps.execute();
+        ps.close();
+
+        CallableStatement cs = prepareCall
+            (
+             conn,
+             "call blobProc(  ? )"
+             );
+        cs.registerOutParameter( 1, Types.BLOB );
+        cs.execute();
+        assertNull( cs.getBlob( 1 ) );
+        cs.close();
+        
+        cs = prepareCall
+            (
+             conn,
+             "call clobProc(  ? )"
+             );
+        cs.registerOutParameter( 1, Types.CLOB );
+        cs.execute();
+        assertNull( cs.getClob( 1 ) );
+        cs.close();
+
+        ps = prepareStatement( conn, "drop procedure blobProc" );
+        ps.execute();
+        ps.close();
+        ps = prepareStatement( conn, "drop procedure clobProc" );
+        ps.execute();
+        ps.close();
+    }
+    
     /**
      * <p>
      * Procedure used by jdbc 4.1 tests.
@@ -724,6 +791,24 @@ private void    vetDataTypeCount( Connection conn ) throws Exception
         varcharforbitdataarg[0] = BINARY_VALUE;
     }
 
+    public  static  void    blobProc
+        (
+         Blob[] blobarg
+         )
+        throws Exception
+    {
+        blobarg[0] = null;
+    }
+
+    public  static  void    clobProc
+        (
+         Clob[] clobarg
+         )
+        throws Exception
+    {
+        clobarg[0] = null;
+    }
+
     /**
      * Return suite with all tests of the class.
      */
