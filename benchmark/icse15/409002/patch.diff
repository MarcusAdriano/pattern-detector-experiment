diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java
index 6c23549a..ee09c934 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java
@@ -631,6 +631,21 @@ public final synchronized void start(Xid xid,
                         if (!con.realConnection.transactionIsIdle())
                             throw new XAException(XAException.XAER_OUTSIDE);
                         
+                        // We need to get the isolation level up to date same 
+                        // way as it is done at start of a transaction. Before
+                        // joining the transaction, it is possible that the 
+                        // isolation level was updated using SQL. We need to 
+                        // get this state and store in the connection handle so 
+                        // that we can restore the isolation when we are in the 
+                        // local mode.
+                        try {
+	                    	if (con.currentConnectionHandle != null) {
+	                    		con.currentConnectionHandle.getIsolationUptoDate();
+	                    	}
+                    	} catch (SQLException sqle) {
+                            throw wrapInXAException(sqle);
+                        }
+                        
                         closeUnusedConnection(con.realConnection);
                     }
                     con.realConnection = tranState.conn;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index c518921e..cff918d8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -731,6 +731,15 @@ private void testSetIsolationWithStatement(Statement s, XAResource xar, Connecti
 			s.executeUpdate("set current isolation = RS");
 			printState("SQL to change isolation in local", conn);
 
+			// DERBY-1325 - Isolation level of local connection does not get reset after ending 
+			// a global transaction that was joined/resumed if the isolation level was changed 
+			// using SQL 
+			xar.start(xid, XAResource.TMJOIN);
+			printState("1st global(existing)", conn);
+			xar.end(xid, XAResource.TMSUCCESS);
+			printState("local", conn);
+			// DERBY-1325 end test 
+			
 			Xid xid2 = new cdsXid(1, (byte) 93, (byte) 103);
 			xar.start(xid2, XAResource.TMNOFLAGS);
 			printState("2nd global(new)", conn);
