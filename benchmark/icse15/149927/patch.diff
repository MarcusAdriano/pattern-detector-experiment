diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
index 1fd8c149..7d8976c9 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -137,13 +137,6 @@ public void normalize(float norm) {
     }
 
     public Scorer scorer(IndexReader reader) throws IOException {
-      if (weights.size() == 1) {                  // optimize 1-clause queries
-        BooleanClause c = (BooleanClause)clauses.elementAt(0);
-        Weight w = (Weight)weights.elementAt(0);
-        if (!c.prohibited)			  // just return clause scorer
-          return w.scorer(reader);
-      }
-
       BooleanScorer result = new BooleanScorer(searcher.getSimilarity());
 
       for (int i = 0 ; i < weights.size(); i++) {
@@ -169,6 +162,11 @@ public Explanation explain() throws IOException {
   }
 
   protected Weight createWeight(Searcher searcher) {
+    if (clauses.size() == 1) {                    // optimize 1-clause queries
+      BooleanClause c = (BooleanClause)clauses.elementAt(0);
+      if (!c.prohibited)			  // just return clause weight
+        return c.query.createWeight(searcher);
+    }
     return new BooleanWeight(searcher);
   }
 
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
index c3ac33d2..2f7a59b2 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
@@ -157,20 +157,6 @@ public Scorer scorer(IndexReader reader) throws IOException {
       if (termArrays.size() == 0)                  // optimize zero-term case
         return null;
     
-      if (termArrays.size() == 1) {                // optimize one-term case
-        Term[] terms = (Term[])termArrays.get(0);
-      
-        BooleanScorer bos = new BooleanScorer(searcher.getSimilarity());
-        for (int i=0; i<terms.length; i++) {
-          TermDocs docs = reader.termDocs(terms[i]);
-          if (docs != null)
-            bos.add(new TermScorer(this, docs, searcher.getSimilarity(),
-                                   reader.norms(field)), false, false);
-        }
-      
-        return bos;
-      }
-
       TermPositions[] tps = new TermPositions[termArrays.size()];
       for (int i=0; i<tps.length; i++) {
         Term[] terms = (Term[])termArrays.get(i);
@@ -220,6 +206,14 @@ public Explanation explain() throws IOException {
   }
 
   protected Weight createWeight(Searcher searcher) {
+    if (termArrays.size() == 1) {                 // optimize one-term case
+      Term[] terms = (Term[])termArrays.get(0);
+      BooleanQuery boq = new BooleanQuery();
+      for (int i=0; i<terms.length; i++) {
+        boq.add(new TermQuery(terms[i]), false, false);
+      }
+      return boq.createWeight(searcher);
+    }
     return new PhrasePrefixWeight(searcher);
   }
 
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
index 2c81f70a..390a0a77 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -137,14 +137,6 @@ public void normalize(float norm) {
     public Scorer scorer(IndexReader reader) throws IOException {
       if (terms.size() == 0)			  // optimize zero-term case
         return null;
-      if (terms.size() == 1) {			  // optimize one-term case
-        Term term = (Term)terms.elementAt(0);
-        TermDocs docs = reader.termDocs(term);
-        if (docs == null)
-          return null;
-        return new TermScorer(this, docs, searcher.getSimilarity(),
-                              reader.norms(term.field()));
-      }
 
       TermPositions[] tps = new TermPositions[terms.size()];
       for (int i = 0; i < terms.size(); i++) {
@@ -197,6 +189,10 @@ public Explanation explain() throws IOException {
   }
 
   protected Weight createWeight(Searcher searcher) {
+    if (terms.size() == 1) {			  // optimize one-term case
+      Term term = (Term)terms.elementAt(0);
+      return new TermQuery(term).createWeight(searcher);
+    }
     return new PhraseWeight(searcher);
   }
 
