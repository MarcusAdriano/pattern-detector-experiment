diff --git a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestCrash.java b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestCrash.java
index 34fd0b80..13e86437 100644
--- a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestCrash.java
+++ b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestCrash.java
@@ -176,6 +176,7 @@ public void testCrashReaderDeletes() throws IOException {
     reader = IndexReader.open(dir, false);
     assertEquals(157, reader.numDocs());
     reader.close();
+    dir.clearCrash();
     dir.close();
   }
 
diff --git a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestIndexReader.java b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestIndexReader.java
index 7f7fa8bf..058abd83 100644
--- a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestIndexReader.java
+++ b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/index/TestIndexReader.java
@@ -1688,6 +1688,7 @@ public void testFieldCacheReuseAfterReopen() throws Exception {
     r2.close();
     assertTrue(ints == ints2);
 
+    writer.close();
     dir.close();
   }
 
@@ -1735,6 +1736,7 @@ public void testReopenChangeReadonly() throws Exception {
     assertTrue(((SegmentReader) subs[1]).readOnly);
     assertTrue(ints == ints2);
 
+    writer.close();
     dir.close();
   }
 
diff --git a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/search/TestFieldCache.java b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/search/TestFieldCache.java
index a56cc366..4a869b38 100644
--- a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/search/TestFieldCache.java
+++ b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/search/TestFieldCache.java
@@ -217,6 +217,7 @@ public void testEmptyIndex() throws Exception {
     IndexReader r = IndexReader.open(writer, true);
     FieldCache.DocTerms terms = FieldCache.DEFAULT.getTerms(r, "foobar");
     FieldCache.DocTermsIndex termsIndex = FieldCache.DEFAULT.getTermsIndex(r, "foobar");
+    writer.close();
     r.close();
     dir.close();
   }
diff --git a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/store/TestLockFactory.java b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/store/TestLockFactory.java
index bddbccce..1f721608 100644
--- a/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/store/TestLockFactory.java
+++ b/lucene/dev/branches/leaky3147/lucene/src/test/org/apache/lucene/store/TestLockFactory.java
@@ -255,15 +255,21 @@ public void testNativeFSLockFactoryPrefix() throws IOException {
     // write.lock is stored in index):
     public void testDefaultFSLockFactoryPrefix() throws IOException {
 
-      // Make sure we get null prefix:
+      // Make sure we get null prefix, which wont happen if setLockFactory is ever called.
       File dirName = _TestUtil.getTempDir("TestLockFactory.10");
-      Directory dir = newFSDirectory(dirName);
 
-      String prefix = dir.getLockFactory().getLockPrefix();
+      Directory dir = new SimpleFSDirectory(dirName);
+      assertNull("Default lock prefix should be null", dir.getLockFactory().getLockPrefix());
+      dir.close();
 
-      assertTrue("Default lock prefix should be null", null == prefix);
+      dir = new MMapDirectory(dirName);
+      assertNull("Default lock prefix should be null", dir.getLockFactory().getLockPrefix());
+      dir.close();
 
+      dir = new NIOFSDirectory(dirName);
+      assertNull("Default lock prefix should be null", dir.getLockFactory().getLockPrefix());
       dir.close();
+ 
       _TestUtil.rmDir(dirName);
     }
 
diff --git a/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java b/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java
index ec6e2048..0ea45bc6 100644
--- a/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java
+++ b/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java
@@ -70,6 +70,7 @@
   private Set<String> unSyncedFiles;
   private Set<String> createdFiles;
   private Set<String> openFilesForWrite = new HashSet<String>();
+  Set<String> openLocks = Collections.synchronizedSet(new HashSet<String>());
   volatile boolean crashed;
   private ThrottledIndexOutput throttledOutput;
   private Throttling throttling = Throttling.SOMETIMES;
@@ -108,6 +109,12 @@ public MockDirectoryWrapper(Random random, Directory delegate) {
     this.randomState = new Random(random.nextInt());
     this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput
         .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);
+    // force wrapping of lockfactory
+    try {
+      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
     init();
   }
 
@@ -209,6 +216,7 @@ public synchronized void crash() throws IOException {
 
   public synchronized void clearCrash() throws IOException {
     crashed = false;
+    openLocks.clear();
   }
 
   public void setMaxSizeInBytes(long maxSize) {
@@ -453,6 +461,9 @@ public synchronized void close() throws IOException {
       // super() does not throw IOException currently:
       throw new RuntimeException("MockDirectoryWrapper: cannot close: there are still open files: " + openFiles, cause);
     }
+    if (noDeleteOpenFile && openLocks.size() > 0) {
+      throw new RuntimeException("MockDirectoryWrapper: cannot close: there are still open locks: " + openLocks);
+    }
     open = false;
     if (checkIndexOnClose) {
       if (LuceneTestCase.VERBOSE) {
diff --git a/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockLockFactoryWrapper.java b/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockLockFactoryWrapper.java
index e69de29b..63a85667 100644
--- a/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockLockFactoryWrapper.java
+++ b/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/store/MockLockFactoryWrapper.java
@@ -0,0 +1,87 @@
+package org.apache.lucene.store;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+public class MockLockFactoryWrapper extends LockFactory {
+  MockDirectoryWrapper dir;
+  LockFactory delegate;
+  
+  public MockLockFactoryWrapper(MockDirectoryWrapper dir, LockFactory delegate) {
+    this.dir = dir;
+    this.delegate = delegate;
+  }
+  
+  @Override
+  public void setLockPrefix(String lockPrefix) {
+    delegate.setLockPrefix(lockPrefix);
+  }
+
+  @Override
+  public String getLockPrefix() {
+    return delegate.getLockPrefix();
+  }
+
+  @Override
+  public Lock makeLock(String lockName) {
+    return new MockLock(delegate.makeLock(lockName), lockName);
+  }
+
+  @Override
+  public void clearLock(String lockName) throws IOException {
+    delegate.clearLock(lockName);
+    dir.openLocks.remove(lockName);
+  }
+  
+  @Override
+  public String toString() {
+    return "MockLockFactoryWrapper(" + delegate.toString() + ")";
+  }
+
+  private class MockLock extends Lock {
+    private Lock delegate;
+    private String name;
+    
+    MockLock(Lock delegate, String name) {
+      this.delegate = delegate;
+      this.name = name;
+    }
+
+    @Override
+    public boolean obtain() throws IOException {
+      if (delegate.obtain()) {
+        dir.openLocks.add(name);
+        return true;
+      } else {
+        return false;
+      }
+    }
+
+    @Override
+    public void release() throws IOException {
+      delegate.release();
+      dir.openLocks.remove(name);
+    }
+
+    @Override
+    public boolean isLocked() throws IOException {
+      return delegate.isLocked();
+    }
+  }
+}
diff --git a/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
index 141e97c1..29fe6f90 100644
--- a/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/branches/leaky3147/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
@@ -972,7 +972,10 @@ public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws
 
         clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);
       }
-      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));
+      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));
+      if (lf != null) {
+        dir.setLockFactory(lf);
+      }
       stores.put(dir, Thread.currentThread().getStackTrace());
       return dir;
     } catch (Exception e) {
@@ -1106,7 +1109,7 @@ public static String randomDirectory(Random random) {
   }
 
   private static Directory newFSDirectoryImpl(
-      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)
+      Class<? extends FSDirectory> clazz, File file)
       throws IOException {
     FSDirectory d = null;
     try {
@@ -1117,9 +1120,6 @@ private static Directory newFSDirectoryImpl(
     } catch (Exception e) {
       d = FSDirectory.open(file);
     }
-    if (lockFactory != null) {
-      d.setLockFactory(lockFactory);
-    }
     return d;
   }
 
@@ -1141,7 +1141,7 @@ static Directory newDirectoryImpl(Random random, String clazzName) {
         tmpFile.delete();
         tmpFile.mkdir();
         registerTempFile(tmpFile);
-        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);
+        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile);
       }
 
       // try empty ctor
