diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java
index 68b83b05..99a5902b 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/ConstantScoreQuery.java
@@ -42,12 +42,12 @@ public Query rewrite(IndexReader reader) throws IOException {
   }
 
   protected class ConstantWeight implements Weight {
-    private Searcher searcher;
+    private Similarity similarity;
     private float queryNorm;
     private float queryWeight;
 
     public ConstantWeight(Searcher searcher) {
-      this.searcher = searcher;
+      this.similarity = getSimilarity(searcher);
     }
 
     public Query getQuery() {
@@ -69,7 +69,7 @@ public void normalize(float norm) {
     }
 
     public Scorer scorer(IndexReader reader) throws IOException {
-      return new ConstantScorer(getSimilarity(searcher), reader, this);
+      return new ConstantScorer(similarity, reader, this);
     }
 
     public Explanation explain(IndexReader reader, int doc) throws IOException {
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestRemoteSearchable.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestRemoteSearchable.java
index 018a9ad6..42a8545d 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestRemoteSearchable.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestRemoteSearchable.java
@@ -107,4 +107,14 @@ public void testQueryFilter() throws Exception {
           new QueryFilter(new TermQuery(new Term("test", "non-existent-term"))));
     assertEquals(0, nohits.length());
   }
+
+  public void testConstantScoreQuery() throws Exception {
+    // try to search the published index
+    Searchable[] searchables = { getRemote() };
+    Searcher searcher = new MultiSearcher(searchables);
+    Hits hits = searcher.search(
+          new ConstantScoreQuery(new QueryFilter(
+                                   new TermQuery(new Term("test", "test")))));
+    assertEquals(1, hits.length());
+  }
 }
