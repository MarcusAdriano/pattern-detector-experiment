diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java
index 5556e2e8..ffe36a11 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java
@@ -193,12 +193,18 @@ public static void vectorToCSVString(Vector vector,
    */
   public static String[] loadTermDictionary(Configuration conf, String filePattern) {
     OpenObjectIntHashMap<String> dict = new OpenObjectIntHashMap<String>();
+    int maxIndexValue = 0;
     for (Pair<Text, IntWritable> record
         : new SequenceFileDirIterable<Text, IntWritable>(new Path(filePattern), PathType.GLOB, null, null, true,
                                                          conf)) {
       dict.put(record.getFirst().toString(), record.getSecond().get());
+      if (record.getSecond().get() > maxIndexValue) {
+        maxIndexValue = record.getSecond().get();
     }
-    String[] dictionary = new String[dict.size()];
+    }
+    // Set dictionary size to greater of (maxIndexValue + 1, dict.size())
+    int maxDictionarySize = maxIndexValue + 1 > dict.size() ? maxIndexValue + 1 : dict.size();
+    String[] dictionary = new String[maxDictionarySize];
     for (String feature : dict.keys()) {
       dictionary[dict.get(feature)] = feature;
     }
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java
index 1857b169..3fcfbf8e 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java
@@ -19,13 +19,64 @@
 
 import com.google.common.collect.Iterables;
 
+import com.google.common.io.Closeables;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.io.IntWritable;
+import org.apache.hadoop.io.SequenceFile;
+import org.apache.hadoop.io.Text;
 import org.apache.mahout.common.MahoutTestCase;
+import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.SequentialAccessSparseVector;
 import org.apache.mahout.math.Vector;
+import org.junit.Before;
 import org.junit.Test;
 
+import java.util.Random;
+
 public final class VectorHelperTest extends MahoutTestCase {
 
+  private static final int NUM_DOCS = 100;
+
+  private Path inputPathOne;
+  private Path inputPathTwo;
+
+  private Configuration conf;
+
+  @Override
+  @Before
+  public void setUp() throws Exception {
+    super.setUp();
+    conf = getConfiguration();
+
+    inputPathOne = getTestTempFilePath("documents/docs-one.file");
+    FileSystem fs = FileSystem.get(inputPathOne.toUri(), conf);
+    SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, inputPathOne, Text.class, IntWritable.class);
+    try {
+      Random rd = RandomUtils.getRandom();
+      for (int i = 0; i < NUM_DOCS; i++) {
+        // Make all indices higher than dictionary size
+        writer.append(new Text("Document::ID::" + i), new IntWritable(NUM_DOCS + rd.nextInt(NUM_DOCS)));
+      }
+    } finally {
+      Closeables.close(writer, false);
+    }
+
+    inputPathTwo = getTestTempFilePath("documents/docs-two.file");
+    fs = FileSystem.get(inputPathTwo.toUri(), conf);
+    writer = new SequenceFile.Writer(fs, conf, inputPathTwo, Text.class, IntWritable.class);
+    try {
+      Random rd = RandomUtils.getRandom();
+      for (int i = 0; i < NUM_DOCS; i++) {
+        // Keep indices within number of documents
+        writer.append(new Text("Document::ID::" + i), new IntWritable(rd.nextInt(NUM_DOCS)));
+      }
+    } finally {
+      Closeables.close(writer, false);
+    }
+  }
+
   @Test
   public void testJsonFormatting() throws Exception {
     Vector v = new SequentialAccessSparseVector(10);
@@ -85,4 +136,12 @@ public void testTopEntriesWhenAllZeros() throws Exception {
     v.set(8, 0.0);
     assertEquals(0, VectorHelper.topEntries(v, 6).size());
   }
+
+  @Test
+  public void testLoadTermDictionary() throws Exception {
+    // With indices higher than dictionary size
+    VectorHelper.loadTermDictionary(conf, inputPathOne.toString());
+    // With dictionary size higher than indices
+    VectorHelper.loadTermDictionary(conf, inputPathTwo.toString());
+  }
 }
