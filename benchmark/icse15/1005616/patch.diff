diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
index 9029e762..bf295d1e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
@@ -124,7 +124,6 @@ public static KSMetaData inflate(org.apache.cassandra.avro.KsDef ks)
     public static String convertOldStrategyName(String name)
     {
         return name.replace("RackUnawareStrategy", "SimpleStrategy")
-                   .replace("RackAwareStrategy", "OldNetworkTopologyStrategy")
-                   .replace("DatacenterShardStrategy", "NetworkTopologyStrategy");
+                   .replace("RackAwareStrategy", "OldNetworkTopologyStrategy");
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
index fb4ba269..cf520c0e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
@@ -69,59 +69,51 @@ public NetworkTopologyStrategy(String table, TokenMetadata tokenMetadata, IEndpo
 
     public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata)
     {
-        int totalReplicas = getReplicationFactor();
-        Map<String, Integer> remainingReplicas = new HashMap<String, Integer>(datacenters);
-        Map<String, Set<String>> dcUsedRacks = new HashMap<String, Set<String>>();
-        List<InetAddress> endpoints = new ArrayList<InetAddress>(totalReplicas);
-
-        // first pass: only collect replicas on unique racks
-        for (Iterator<Token> iter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken);
-             endpoints.size() < totalReplicas && iter.hasNext();)
-        {
-            Token token = iter.next();
-            InetAddress endpoint = tokenMetadata.getEndpoint(token);
-            String datacenter = snitch.getDatacenter(endpoint);
-            int remaining = remainingReplicas.containsKey(datacenter) ? remainingReplicas.get(datacenter) : 0;
-            if (remaining > 0)
+        List<InetAddress> endpoints = new ArrayList<InetAddress>(getReplicationFactor());
+
+        for (Entry<String, Integer> dcEntry : datacenters.entrySet())
             {
-                Set<String> usedRacks = dcUsedRacks.get(datacenter);
-                if (usedRacks == null)
+            String dcName = dcEntry.getKey();
+            int dcReplicas = dcEntry.getValue();
+
+            // collect endpoints in this DC
+            TokenMetadata dcTokens = new TokenMetadata();
+            for (Entry<Token, InetAddress> tokenEntry : tokenMetadata.entrySet())
                 {
-                    usedRacks = new HashSet<String>();
-                    dcUsedRacks.put(datacenter, usedRacks);
+                if (snitch.getDatacenter(tokenEntry.getValue()).equals(dcName))
+                    dcTokens.updateNormalToken(tokenEntry.getKey(), tokenEntry.getValue());
                 }
+
+            List<InetAddress> dcEndpoints = new ArrayList<InetAddress>(dcReplicas);
+            Set<String> racks = new HashSet<String>();
+            // first pass: only collect replicas on unique racks
+            for (Iterator<Token> iter = TokenMetadata.ringIterator(dcTokens.sortedTokens(), searchToken);
+                 dcEndpoints.size() < dcReplicas && iter.hasNext(); )
+            {
+                Token token = iter.next();
+                InetAddress endpoint = dcTokens.getEndpoint(token);
                 String rack = snitch.getRack(endpoint);
-                if (!usedRacks.contains(rack))
+                if (!racks.contains(rack))
                 {
-                    endpoints.add(endpoint);
-                    usedRacks.add(rack);
-                    remainingReplicas.put(datacenter, remaining - 1);
-                }
+                    dcEndpoints.add(endpoint);
+                    racks.add(rack);
             }
         }
 
-        // second pass: if replica count has not been achieved from unique racks, add nodes from the same racks
-        for (Iterator<Token> iter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken);
-             endpoints.size() < totalReplicas && iter.hasNext();)
+            // second pass: if replica count has not been achieved from unique racks, add nodes from duplicate racks
+            for (Iterator<Token> iter = TokenMetadata.ringIterator(dcTokens.sortedTokens(), searchToken);
+                 dcEndpoints.size() < dcReplicas && iter.hasNext(); )
         {
             Token token = iter.next();
-            InetAddress endpoint = tokenMetadata.getEndpoint(token);
-            if (endpoints.contains(endpoint))
-                continue;
-
-            String datacenter = snitch.getDatacenter(endpoint);
-            int remaining = remainingReplicas.containsKey(datacenter) ? remainingReplicas.get(datacenter) : 0;
-            if (remaining > 0)
-            {
-                endpoints.add(endpoint);
-                remainingReplicas.put(datacenter, remaining - 1);
-            }
+                InetAddress endpoint = dcTokens.getEndpoint(token);
+                if (!dcEndpoints.contains(endpoint))
+                    dcEndpoints.add(endpoint);
         }
 
-        for (Map.Entry<String, Integer> entry : remainingReplicas.entrySet())
-        {
-            if (entry.getValue() > 0)
-                throw new IllegalStateException(String.format("datacenter (%s) has no more endpoints, (%s) replicas still needed", entry.getKey(), entry.getValue()));
+            if (dcEndpoints.size() < dcReplicas)
+                throw new IllegalStateException(String.format("datacenter (%s) has no more endpoints, (%s) replicas still needed",
+                                                              dcName, dcReplicas - dcEndpoints.size()));
+            endpoints.addAll(dcEndpoints);
         }
 
         return endpoints;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
index 28d62743..35d4b4b9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/TokenMetadata.java
@@ -287,6 +287,11 @@ public TokenMetadata cloneAfterAllLeft()
         }
     }
 
+    public Set<Map.Entry<Token,InetAddress>> entrySet()
+    {
+        return tokenToEndpointMap.entrySet();
+    }
+
     public InetAddress getEndpoint(Token token)
     {
         lock.readLock().lock();
