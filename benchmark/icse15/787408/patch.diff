diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
index feb8acec..840e03f5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
@@ -52,7 +52,7 @@ public void doVerb(Message message)
 	    {
             RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(rowMutationCtx.buffer_);
             RowMutation rm = rmMsg.getRowMutation();            	                
-            rowMutationCtx.row_.key(rm.key());
+            rowMutationCtx.row_.setKey(rm.key());
             rm.applyBinary(rowMutationCtx.row_);
 	
 	    }        
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
index eae7a678..2baf00bf 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
@@ -38,42 +38,45 @@
 {
     private static Logger logger_ = Logger.getLogger(Row.class);
     private String table_;
+    private static RowSerializer serializer = new RowSerializer();
 
-    public Row(String table_, String key) {
-        this.table_ = table_;
-        this.key_ = key;
+    static RowSerializer serializer()
+    {
+        return serializer;
     }
 
-    public String getTable() {
-        return table_;
+    public Row(String table, String key) {
+        assert table != null;
+        this.table_ = table;
+        this.key_ = key;
     }
 
-    static RowSerializer serializer()
+    // only for use by RMVH
+    Row()
     {
-        return new RowSerializer();
+    }
+
+    public String getTable() {
+        return table_;
     }
 
     private String key_;
 
     private Map<String, ColumnFamily> columnFamilies_ = new HashMap<String, ColumnFamily>();
 
-    protected Row()
+    public String key()
     {
+        return key_;
     }
 
-    public Row(String key)
+    void setKey(String key)
     {
         key_ = key;
     }
 
-    public String key()
+    public void setTable(String table)
     {
-        return key_;
-    }
-
-    void key(String key)
-    {
-        key_ = key;
+        table_ = table;
     }
 
     public Set<String> getColumnFamilyNames()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index b36f84d5..98a6ea17 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -18,21 +18,15 @@
 
 package org.apache.cassandra.db;
 
-import java.util.*;
-import java.util.concurrent.atomic.AtomicInteger;
 import java.io.*;
 
-import org.apache.cassandra.concurrent.StageManager;
 import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.net.EndPoint;
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
-import org.apache.cassandra.service.StorageService;
-import org.apache.cassandra.utils.LogUtil;
+
 import org.apache.log4j.Logger;
-import org.apache.cassandra.service.*;
-import org.apache.cassandra.utils.*;
-import org.apache.cassandra.concurrent.*;
+
 import org.apache.cassandra.net.*;
 
 /**
@@ -82,7 +76,8 @@ public void doVerb(Message message)
             }
 
             rowMutationCtx.row_.clear();
-            rowMutationCtx.row_.key(rm.key());
+            rowMutationCtx.row_.setTable(rm.table());
+            rowMutationCtx.row_.setKey(rm.key());
             rm.apply(rowMutationCtx.row_);
 
             WriteResponse response = new WriteResponse(rm.table(), rm.key(), true);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 074b08ac..0924ba57 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -659,7 +659,7 @@ public Row getRow(String key, String cf, List<String> columns) throws IOExceptio
     */
     public Row getSliceFrom(String key, String cf, boolean isAscending, int count) throws IOException
     {
-        Row row = new Row(key);
+        Row row = new Row(table_, key);
         String[] values = RowMutation.getColumnAndColumnFamily(cf);
         String cfName = values[0];
         String startWith = values.length > 1 ? values[1] : "";
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 9b6ac545..2e482336 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -227,7 +227,7 @@ public column_t get_column(String tablename, String key, String columnPath) thro
         {
             throw new InvalidRequestException("get_column requires non-empty columnfamily");
         }
-        if (DatabaseDescriptor.getColumnFamilyType(null, values[0]).equals("Standard"))
+        if (DatabaseDescriptor.getColumnFamilyType(tablename, values[0]).equals("Standard"))
         {
             if (values.length != 2)
             {
