diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
index 87bb19db..89de1f5a 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java
@@ -209,13 +209,20 @@ public void tearDown() throws IOException {
             sendPingSemaphore.notify();
         }
 
+        // socketConn.tearDown() may fail if the master has crashed. We still
+        // want to close the server socket if an exception is thrown, so that
+        // we don't prevent starting a new slave listening to the same port.
+        // Therefore, use try/finally. DERBY-3878
+        try {
         if (socketConn != null) {
             socketConn.tearDown();
         }
+        } finally {
         if (serverSocket != null) {
             serverSocket.close();
         }
     }
+    }
     
     /**
      * Used to parse the initiator message from the master and check if the
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/SocketConnection.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/SocketConnection.java
index 69c1cb77..86c180f6 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/SocketConnection.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/net/SocketConnection.java
@@ -110,8 +110,15 @@ public void writeMessage(Object message) throws IOException {
      *                     the socket or the streams.
      */
     public void tearDown() throws IOException {
+        // If the other party has crashed, closing the streams may fail (at
+        // least the output stream since its close() method calls flush()).
+        // In any case, we want the socket to be closed, so close it in a
+        // finally clause. DERBY-3878
+        try {
         objInputStream.close();
         objOutputStream.close();
+        } finally {
         socket.close();
     }
+    }
 }
