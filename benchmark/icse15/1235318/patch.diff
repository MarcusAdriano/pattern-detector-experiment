diff --git a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
index c04b5bd0..4060fc5e 100644
--- a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
+++ b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
@@ -257,7 +257,7 @@ public void refreshBundles(long[] bundleIdentifiers) throws IOException {
      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundlesAndWait(long[])
      */
     public CompositeData refreshBundlesAndWait(long[] bundleIdentifiers) throws IOException {
-        Bundle [] bundles = new Bundle[bundleIdentifiers.length];
+        Bundle [] bundles = bundleIdentifiers != null ? new Bundle[bundleIdentifiers.length] : null;
         boolean result = refreshBundlesAndWait(bundleIdentifiers, bundles);
         return constructResolveResult(bundles, result);
     }
@@ -274,9 +274,11 @@ public void frameworkEvent(FrameworkEvent event) {
         try {
             context.addFrameworkListener(listener);
             try {
+                if (bundles != null) {
                 for (int i=0; i < bundleIdentifiers.length; i++) {
                     bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
                 }
+                }
                 packageAdmin.refreshPackages(bundles);
                 return latch.await(30, TimeUnit.SECONDS);
             } catch (InterruptedException e) {
diff --git a/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java b/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
index 4b23eb96..277a8b8d 100644
--- a/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
+++ b/aries/trunk/sandbox/jmx-next/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
@@ -38,6 +38,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.List;
 import java.util.Map;
@@ -283,6 +284,64 @@ public void testRefreshBundlesAndWait() throws Exception {
         assertEquals(Arrays.asList("org.apache.aries.jmx.test.bundlea.api", "org.apache.aries.jmx.test.bundlea.impl"), imported);
     }
 
+    @Test
+    public void testRefreshBundlesAndWait2() throws Exception {
+        Bundle bundleA = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
+        Bundle bundleB = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
+
+        BundleWiring bw = bundleB.adapt(BundleWiring.class);
+
+        List<BundleWire> initialRequiredWires = bw.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE);
+        assertEquals(1, initialRequiredWires.size());
+        BundleWire wire = initialRequiredWires.get(0);
+        Map<String, Object> capabilityAttributes = wire.getCapability().getAttributes();
+        assertEquals("Precondition", bundleA.getSymbolicName(), capabilityAttributes.get(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE));
+        assertEquals("Precondition", new Version("1.0"), capabilityAttributes.get(Constants.BUNDLE_VERSION_ATTRIBUTE));
+        assertEquals("Precondition", "org.apache.aries.jmx.test.bundlea.api", capabilityAttributes.get(BundleRevision.PACKAGE_NAMESPACE));
+
+        // Create an updated version of Bundle A, which an extra export and version 1.1
+        Manifest manifest = new Manifest();
+        manifest.getMainAttributes().putValue("Manifest-Version", "1.0");
+        manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea");
+        manifest.getMainAttributes().putValue(Constants.BUNDLE_VERSION, "1.1");
+        manifest.getMainAttributes().putValue(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.bundlea.api,org.apache.aries.jmx.test.bundlea.impl");
+
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        JarOutputStream jos = new JarOutputStream(baos, manifest);
+        addResourceToJar("org/apache/aries/jmx/test/bundlea/api/InterfaceA.class", jos, bundleA);
+        addResourceToJar("org/apache/aries/jmx/test/bundlea/impl/A2.class", jos, bundleA);
+        jos.close();
+
+        assertEquals("Precondition", 1, bundleA.adapt(BundleRevisions.class).getRevisions().size());
+        bundleA.update(new ByteArrayInputStream(baos.toByteArray()));
+        assertEquals("There should be 2 revisions now", 2, bundleA.adapt(BundleRevisions.class).getRevisions().size());
+        assertEquals("No refresh called, the bundle wiring for B should still be the old one",
+                bw, bundleB.adapt(BundleWiring.class));
+
+        FrameworkMBean framework = getMBean(FrameworkMBean.OBJECTNAME, FrameworkMBean.class);
+        CompositeData result = framework.refreshBundlesAndWait(null);
+        assertTrue((Boolean) result.get(FrameworkMBean.SUCCESS));
+        Set<Long> completed = new HashSet<Long>(Arrays.asList((Long []) result.get(FrameworkMBean.COMPLETED)));
+        assertTrue(completed.contains(bundleA.getBundleId()));
+        assertTrue(completed.contains(bundleB.getBundleId()));
+
+        List<BundleWire> requiredWires = bundleB.adapt(BundleWiring.class).getRequiredWires(BundleRevision.PACKAGE_NAMESPACE);
+        assertEquals(2, requiredWires.size());
+        List<String> imported = new ArrayList<String>();
+        for (BundleWire w : requiredWires) {
+            Map<String, Object> ca = w.getCapability().getAttributes();
+            assertEquals(bundleA.getSymbolicName(), ca.get(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE));
+            imported.add(ca.get(BundleRevision.PACKAGE_NAMESPACE).toString());
+
+            if ("org.apache.aries.jmx.test.bundlea.impl".equals(ca.get(BundleRevision.PACKAGE_NAMESPACE))) {
+                // Came across an issue where equinox was reporting the other package as still coming from from the 1.0 bundle
+                // not sure if this is a bug or not...
+                assertEquals(new Version("1.1"), ca.get(Constants.BUNDLE_VERSION_ATTRIBUTE));
+            }
+        }
+        assertEquals(Arrays.asList("org.apache.aries.jmx.test.bundlea.api", "org.apache.aries.jmx.test.bundlea.impl"), imported);
+    }
+
     private void addResourceToJar(String resourceName, JarOutputStream jos, Bundle bundle) throws IOException {
         InputStream intfIs = bundle.getResource("/" + resourceName).openStream();
         JarEntry entry = new JarEntry(resourceName);
