diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 51328830..bcae24ea 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -1261,7 +1261,7 @@ private int getConnFromDatabaseName() throws DRDAProtocolException
         if ((database.securityMechanism == CodePoint.SECMEC_USRSSBPWD) &&
             (database.dbName.indexOf(Attribute.PASSWORD_ATTR) == -1))
         {
-            p.put(Attribute.CLIENT_SECURITY_MECHANISM,
+            p.put(Attribute.DRDA_SECMEC,
                   String.valueOf(database.securityMechanism));
             p.put(Attribute.DRDA_SECTKN_IN,
                   DecryptionManager.toHexString(database.secTokenIn, 0,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java
index 2ed1c657..f9ed5d93 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Attribute.java
@@ -237,6 +237,15 @@ List of all connection (JDBC) attributes by the system.
      */
     String DRDA_SECTKN_IN = "drdaSecTokenIn";
     String DRDA_SECTKN_OUT = "drdaSecTokenOut";
+    /**
+     * Internal attribute which holds the value of the securityMechanism
+     * attribute specified by the client. Used for passing information about
+     * which security mechanism to use from the network server to the embedded
+     * driver. Use another name than "securityMechanism" in order to prevent
+     * confusion if an attempt is made to establish an embedded connection with
+     * securityMechanism specified (see DERBY-3025).
+     */
+    String DRDA_SECMEC = "drdaSecMec";
 
 	/**
 	 * Internal attribute. Used to always allow soft upgrade for
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java
index 25236ddf..e9b4d509 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java
@@ -176,7 +176,7 @@ public boolean	authenticateUser(String userName,
         // assess the substitute password to be legitimate for Derby's
         // BUILTIN authentication scheme/provider.
         if ((clientSecurityMechanism =
-                info.getProperty(Attribute.CLIENT_SECURITY_MECHANISM)) != null)
+                info.getProperty(Attribute.DRDA_SECMEC)) != null)
         {
             secMec = Integer.parseInt(clientSecurityMechanism);
         }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
index 9b0e0642..19d41e42 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.drda.NetworkServerControl;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
 import org.apache.derbyTesting.junit.J2EEDataSource;
 import org.apache.derbyTesting.junit.JDBCDataSource;
 import org.apache.derbyTesting.junit.NetworkServerTestSetup;
@@ -173,9 +174,20 @@ public NSSecurityMechanismTest(String name)
     public static Test suite() 
     {
         TestSuite suite = new TestSuite("NSSecurityMechanismTest");
-        suite.addTest(new NSSecurityMechanismTest(
+
+        TestSuite clientSuite =
+            new TestSuite("NSSecurityMechanismTest - client");
+        clientSuite.addTest(new NSSecurityMechanismTest(
             "testNetworkServerSecurityMechanism"));
-        return TestConfiguration.clientServerDecorator((suite));
+        suite.addTest(TestConfiguration.clientServerDecorator(clientSuite));
+
+        // Test case for embedded mode. Enable builtin authentication.
+        suite.addTest(
+            DatabasePropertyTestSetup.builtinAuthentication(
+                new NSSecurityMechanismTest("testSecurityMechanismOnEmbedded"),
+                new String[] { "calvin" }, "pw"));
+
+        return suite;
     }
     
     public void tearDown() throws Exception {
@@ -369,6 +381,21 @@ else if (derby_drda_securityMechanism.equals(
         }
     }
     
+    /**
+     * Test that securityMechanism=8 is ignored by the embedded driver
+     * (DERBY-3025).
+     */
+    public void testSecurityMechanismOnEmbedded() throws SQLException {
+        DataSource ds = JDBCDataSource.getDataSource();
+        JDBCDataSource.setBeanProperty(
+            ds, "connectionAttributes", "securityMechanism=8");
+
+        // DERBY-3025: NullPointerException or AssertFailure was thrown here
+        Connection c = ds.getConnection("calvin", "calvinpw");
+
+        c.close();
+    }
+
     // returns a boolean true if the security mechanism is not supported
     // so the loop in which this is called can be continued without
     // causing unnecessary/impossible tests to be run
