diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
index d0d98814..c57afd16 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
@@ -73,6 +73,17 @@
         Object convert(ReifiedType type) throws Exception;
     }
 
+    private static class ConversionResult {
+
+        public final Converter converter;
+        public final Object value;
+
+        public ConversionResult(Converter converter, Object value) {
+            this.converter = converter;
+            this.value = value;
+        }
+    }
+
     private ExtendedBlueprintContainer blueprintContainer;
     private List<Converter> converters = new ArrayList<Converter>();
 
@@ -133,18 +144,18 @@ public Object convert(final Object fromValue, final ReifiedType type) throws Exc
         if (isAssignable(fromValue, type)) {
             return fromValue;
         }
-        Object value = null;
+        ConversionResult result = null;
         AccessControlContext acc = blueprintContainer.getAccessControlContext();
         if (acc == null) {
-            value = convertWithConverters(fromValue, type);
+            result = convertWithConverters(fromValue, type);
         } else {
-            value = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
-                public Object run() throws Exception {
+            result = AccessController.doPrivileged(new PrivilegedExceptionAction<ConversionResult>() {
+                public ConversionResult run() throws Exception {
                     return convertWithConverters(fromValue, type);
                 }            
             }, acc);
         }
-        if (value == null) {
+        if (result == null) {
             if (fromValue instanceof Number && Number.class.isAssignableFrom(unwrap(toClass(type)))) {
                 return convertToNumber((Number) fromValue, toClass(type));
             } else if (fromValue instanceof String) {
@@ -161,29 +172,30 @@ public Object run() throws Exception {
                 throw new Exception("Unable to convert value " + fromValue + " to type " + type);
             }
         }
-        return value;
+        return result.value;
     }
 
-    private boolean canConvertWithConverters(Object source, ReifiedType type) {
+    private Converter selectMatchingConverter(Object source, ReifiedType type) {
         for (Converter converter : converters) {
             if (converter.canConvert(source, type)) {
-                return true;
+                return converter;
             }
         }
-        return false;
+        return null;
     }
     
-    private Object convertWithConverters(Object source, ReifiedType type) throws Exception {
-        Object value = null;
-        for (Converter converter : converters) {
-            if (converter.canConvert(source, type)) {
-                value = converter.convert(source, type);
-                if (value != null) {
-                    return value;
-                }
-            }
+    private boolean canConvertWithConverters(Object source, ReifiedType type) {
+        return selectMatchingConverter(source,type) != null;
         }
-        return value;
+    
+    private ConversionResult convertWithConverters(Object source, ReifiedType type) throws Exception {
+
+        Converter converter = selectMatchingConverter(source,type);
+
+        if (converter == null)  return null;
+
+        Object value = converter.convert(source, type);
+        return new ConversionResult(converter,value);
     }
 
     public Object convertToNumber(Number value, Class toType) throws Exception {
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AggregateConverterTest.java b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AggregateConverterTest.java
index 4ba25189..1adef96f 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AggregateConverterTest.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AggregateConverterTest.java
@@ -180,10 +180,13 @@ public void testCustom() throws Exception {
         s = new AggregateConverter(new TestBlueprintContainer(null));
         s.registerConverter(new AsianRegionConverter());
         s.registerConverter(new EuRegionConverter());
+        s.registerConverter(new NullMarkerConverter());
         
         result = s.convert(new Object(), Region.class);
         // TODO: check with the spec about the result
         //assertTrue(result instanceof AsianRegion || result instanceof EuRegion);
+        result = s.convert(new Object(), NullMarker.class);
+        assertNull(result);
     }
     
     private interface Region {} 
@@ -192,6 +195,8 @@ public void testCustom() throws Exception {
     
     private interface AsianRegion extends Region {}
     
+    private interface NullMarker {}
+    
     private static class RegionConverter implements Converter {
         public boolean canConvert(Object fromValue, ReifiedType toType) {
             return Region.class == toType.getRawClass();
@@ -219,4 +224,13 @@ public Object convert(Object source, ReifiedType toType) throws Exception {
         }
     }
 
+    private static class NullMarkerConverter implements Converter {
+        public boolean canConvert(Object fromValue, ReifiedType toType) {
+            return toType.getRawClass().isAssignableFrom(NullMarker.class);
+        }
+        public Object convert(Object source, ReifiedType toType) throws Exception {
+            return null;
+        }
+    }
+
 }
