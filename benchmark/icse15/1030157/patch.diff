diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
index 646de29f..c73c46eb 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
@@ -23,6 +23,7 @@
 import java.util.*;
 import java.util.concurrent.ExecutorService;
 
+import com.sun.jna.LastErrorException;
 import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
 
 import org.apache.log4j.Logger;
@@ -202,25 +203,25 @@ public static void deleteDir(File dir) throws IOException
      */
     public static void createHardLink(File sourceFile, File destinationFile) throws IOException
     {
-        int errno = Integer.MIN_VALUE;
         try
         {
             int result = CLibrary.link(sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());
-            if (result != 0)
-                errno = Native.getLastError();
+            assert result == 0; // success is always zero
         }
         catch (UnsatisfiedLinkError e)
         {
             createHardLinkWithExec(sourceFile, destinationFile);
-            return;
         }
-
-        if (errno != Integer.MIN_VALUE)
+        catch (RuntimeException e)
+        {
+            if (e instanceof LastErrorException)
         {
             // there are 17 different error codes listed on the man page.  punt until/unless we find which
             // ones actually turn up in practice.
             throw new IOException(String.format("Unable to create hard link from %s to %s (errno %d)", 
-                                                sourceFile, destinationFile, errno));
+                                                    sourceFile, destinationFile, CLibrary.errno(e)));
+            }
+            throw e;
         }
     }
 
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
index ee85a9a5..f3155b67 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
@@ -21,6 +21,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.sun.jna.LastErrorException;
 import com.sun.jna.Native;
 
 public final class CLibrary
@@ -48,10 +49,24 @@
         }
     }
 
-    public static native int mlockall(int flags);
-    public static native int munlockall();
+    public static native int mlockall(int flags) throws LastErrorException;
+    public static native int munlockall() throws LastErrorException;
 
-    public static native int link(String from, String to);
+    public static native int link(String from, String to) throws LastErrorException;
+
+    public static int errno(RuntimeException e)
+    {
+        assert e instanceof LastErrorException;
+        try
+        {
+            return ((LastErrorException) e).getErrorCode();
+        }
+        catch (NoSuchMethodError x)
+        {
+            logger.warn("Obsolete version of JNA present; unable to read errno. Upgrade to JNA 3.2.7 or later");
+            return 0;
+        }
+    }
 
     private CLibrary() {}
 }
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
index b3c425c0..695060fb 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -37,6 +37,7 @@
 
 import org.apache.commons.collections.iterators.CollatingIterator;
 
+import com.sun.jna.LastErrorException;
 import com.sun.jna.Native;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.DecoratedKey;
@@ -553,22 +554,20 @@ public static AbstractType getComparator(String compareWith)
 
     public static void tryMlockall()
     {
-        int errno = Integer.MIN_VALUE;
         try
         {
             int result = CLibrary.mlockall(CLibrary.MCL_CURRENT);
-            if (result != 0)
-                errno = Native.getLastError();
+            assert result == 0; // mlockall should always be zero on success
         }
         catch (UnsatisfiedLinkError e)
         {
             // this will have already been logged by CLibrary, no need to repeat it
-            return;
         }
-
-        if (errno != Integer.MIN_VALUE)
+        catch (RuntimeException e)
+        {
+            if (e instanceof LastErrorException)
         {
-            if (errno == CLibrary.ENOMEM && System.getProperty("os.name").toLowerCase().contains("linux"))
+                if (CLibrary.errno(e) == CLibrary.ENOMEM && System.getProperty("os.name").toLowerCase().contains("linux"))
             {
                 logger_.warn("Unable to lock JVM memory (ENOMEM)."
                              + " This can result in part of the JVM being swapped out, especially with mmapped I/O enabled."
@@ -577,8 +576,10 @@ public static void tryMlockall()
             else if (!System.getProperty("os.name").toLowerCase().contains("mac"))
             {
                 // OS X allows mlockall to be called, but always returns an error
-                logger_.warn("Unknown mlockall error " + errno);
+                    logger_.warn("Unknown mlockall error " + CLibrary.errno(e));
+                }
             }
+            throw e;
         }
     }
 }
