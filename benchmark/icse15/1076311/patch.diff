diff --git a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
index e8236993..284ddeda 100644
--- a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
@@ -24,6 +24,7 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexWriter; // javadoc
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.Version;
diff --git a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/codecs/mocksep/MockSingleIntIndexInput.java b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/codecs/mocksep/MockSingleIntIndexInput.java
index 242c244c..d5d45bf1 100644
--- a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/codecs/mocksep/MockSingleIntIndexInput.java
+++ b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/index/codecs/mocksep/MockSingleIntIndexInput.java
@@ -26,7 +26,7 @@
 import org.apache.lucene.util.CodecUtil;
 
 /** Reads IndexInputs written with {@link
- *  SingleIntIndexOutput}.  NOTE: this class is just for
+ *  MockSingleIntIndexOutput}.  NOTE: this class is just for
  *  demonstration puprposes (it is a very slow way to read a
  *  block of ints).
  *
diff --git a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java
index fd6a8f8a..b250ac12 100644
--- a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java
+++ b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java
@@ -268,7 +268,7 @@ public static String topdocsString(TopDocs docs, int start, int end) {
    * query corresponds with the true score. 
    *
    * @see ExplanationAsserter
-   * @see #checkExplanations(Query, String, Searcher, boolean) for a
+   * @see #checkExplanations(Query, String, IndexSearcher, boolean) for a
    * "deep" testing of the explanation details.
    *   
    * @param query the query to test
diff --git a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
index 65359b34..b8bfbf79 100644
--- a/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/trunk/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
@@ -83,9 +83,9 @@
  * <code>super.tearDown()</code>
  * </p>
  *
- * @After - replaces setup
- * @Before - replaces teardown
- * @Test - any public method with this annotation is a test case, regardless
+ * <code>@After</code> - replaces setup
+ * <code>@Before</code> - replaces teardown
+ * <code>@Test</code> - any public method with this annotation is a test case, regardless
  * of its name
  * <p>
  * <p>
@@ -612,7 +612,7 @@ private static int threadCleanup(String context) {
    * directly in the same scope as the IndexReader.
    * </p>
    *
-   * @see FieldCacheSanityChecker
+   * @see org.apache.lucene.util.FieldCacheSanityChecker
    */
   protected void assertSaneFieldCaches(final String msg) {
     final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();
@@ -910,13 +910,13 @@ public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IO
   }
   
   /** Returns a new field instance. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(String name, String value, Index index) {
     return newField(random, name, value, index);
   }
   
   /** Returns a new field instance. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(String name, String value, Store store, Index index) {
     return newField(random, name, value, store, index);
   }
@@ -935,19 +935,19 @@ public static Field newField(String name, String value, Store store, Index index
   }
   
   /** Returns a new field instance, using the specified random. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(Random random, String name, String value, Index index) {
     return newField(random, name, value, Store.NO, index);
   }
   
   /** Returns a new field instance, using the specified random. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(Random random, String name, String value, Store store, Index index) {
     return newField(random, name, value, store, index, TermVector.NO);
   }
   
   /** Returns a new field instance, using the specified random. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(Random random, String name, String value, Store store, Index index, TermVector tv) {
     if (!index.isIndexed())
       return new Field(name, value, store, index);
