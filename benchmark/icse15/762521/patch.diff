diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java
index 430a7c1f..4ae077b6 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java
@@ -411,7 +411,7 @@ public void bindStatement() throws StandardException
 			 * the check constraints and generation clauses.
 			 */
 			if  (numGenerationClauses > 0)
-            { tableElementList.bindAndValidateGenerationClauses( schemaDescriptor, fromList, generatedColumns ); }
+            { tableElementList.bindAndValidateGenerationClauses( schemaDescriptor, fromList, generatedColumns, baseTable ); }
 			if  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }
             if ( numReferenceConstraints > 0) { tableElementList.validateForeignKeysOnGenerationClauses( fromList, generatedColumns ); }
 		}
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
index b9300574..19de529b 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
@@ -438,7 +438,7 @@ public void bindStatement() throws StandardException
 			/* Now that we've finally goobered stuff up, bind and validate
 			 * the check constraints and generation clauses.
 			 */
-			if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses( sd, fromList, generatedColumns ); }
+			if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses( sd, fromList, generatedColumns, null ); }
 			if  (numCheckConstraints > 0) { tableElementList.bindAndValidateCheckConstraints(fromList); }
             if ( numReferenceConstraints > 0) { tableElementList.validateForeignKeysOnGenerationClauses( fromList, generatedColumns ); }
 		}
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java
index 9131470f..ee4725d4 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java
@@ -144,6 +144,25 @@ protected boolean isEquivalent(ValueNode other)
         return this._generationExpression.isEquivalent( that._generationExpression );
     }
     
+	/**
+	 * Return a vector of columns referenced in the generation expression.
+	 *
+	 * @exception StandardException		Thrown on error
+	 */
+    public Vector findReferencedColumns()
+        throws StandardException
+    {
+        CollectNodesVisitor visitor = new CollectNodesVisitor( ColumnReference.class );
+
+        _generationExpression.accept( visitor );
+
+        Vector result = visitor.getList();
+
+        if ( result == null ) { result = new Vector(); }
+
+        return result;
+    }
+
 	/*
 		Stringify.
 	 */
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
index 469badcd..07b1f5fb 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.catalog.types.DefaultInfoImpl;
 
+import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -57,7 +58,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.catalog.UUID;
 
+import java.util.ArrayList;
 import java.util.Hashtable;
+import java.util.HashSet;
 import java.util.Vector;
 
 /**
@@ -741,10 +744,11 @@ void bindAndValidateCheckConstraints(FromList fromList)
 	 * @param sd			Schema where the table lives.
 	 * @param fromList		The FromList in question.
 	 * @param generatedColumns Bitmap of generated columns in the table. Vacuous for CREATE TABLE, but may be non-trivial for ALTER TABLE. This routine may set bits for new generated columns.
+	 * @param baseTable  Table descriptor if this is an ALTER TABLE statement.
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, FormatableBitSet generatedColumns )
+	void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, FormatableBitSet generatedColumns, TableDescriptor baseTable )
 		throws StandardException
 	{
 		CompilerContext cc;
@@ -753,6 +757,9 @@ void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, F
         int                                 columnCount = table.getResultColumns().size();
 		int						  size = size();
 
+        // complain if a generation clause references another generated column
+        findIllegalGenerationReferences( fromList, baseTable );
+
         generatedColumns.grow( columnCount + 1 );
         
 		cc = getCompilerContext();
@@ -892,11 +899,36 @@ void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, F
 			rcl.clearColumnReferences();
 		}
 
-        //
-        // Now verify that none of the generated columns reference other
-        // generated columns.
-        //
-        ResultColumnList rcl = table.getResultColumns();
+        
+	}
+
+	/**
+	 * Complain if a generation clause references other generated columns. This
+	 * is required by the SQL Standard, part 2, section 4.14.8.
+	 *
+	 * @param fromList		The FromList in question.
+	 * @param baseTable  Table descriptor if this is an ALTER TABLE statement.
+	 * @exception StandardException		Thrown on error
+	 */
+	void findIllegalGenerationReferences( FromList fromList, TableDescriptor baseTable )
+		throws StandardException
+	{
+        ArrayList   generatedColumns = new ArrayList();
+        HashSet     names = new HashSet();
+		int         size = size();
+
+        // add in existing generated columns if this is an ALTER TABLE statement
+        if ( baseTable != null )
+        {
+            ColumnDescriptorList cdl = baseTable.getGeneratedColumns();
+            int                  count = cdl.size();
+            for ( int i = 0; i < count; i++ )
+            {
+                names.add( cdl.elementAt( i ).getColumnName() );
+            }
+        }
+        
+        // find all of the generated columns
 		for (int index = 0; index < size; index++)
 		{
 			ColumnDefinitionNode cdn;
@@ -908,21 +940,32 @@ void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, F
 
 			if (!cdn.hasGenerationClause()) { continue; }
 
-            String[]   referencedColumnNames = cdn.getDefaultInfo().getReferencedColumnNames();
-            int     count = referencedColumnNames.length;
+            generatedColumns.add( cdn );
+            names.add( cdn.getColumnName() );
+        }
 
+        // now look at their generation clauses to see if they reference one
+        // another
+        int    count = generatedColumns.size();
             for ( int i = 0; i < count; i++ )
             {
-                String      name = referencedColumnNames[ i ];
-                int         referencedColumnID = rcl.getPosition( name, 1 );
+            ColumnDefinitionNode    cdn = (ColumnDefinitionNode) generatedColumns.get( i );
+            GenerationClauseNode    generationClauseNode = cdn.getGenerationClauseNode();
+            Vector                  referencedColumns = generationClauseNode.findReferencedColumns();
+            int                     refCount = referencedColumns.size();
+            for ( int j = 0; j < refCount; j++ )
+            {
+                String  name = ((ColumnReference) referencedColumns.elementAt( j ) ).getColumnName();
 
-                if ( generatedColumns.isSet( referencedColumnID ) )
+                if ( name != null )
+                {
+                    if ( names.contains( name ) )
                 {
                     throw StandardException.newException(SQLState.LANG_CANT_REFERENCE_GENERATED_COLUMN, cdn.getColumnName());
                 }
-           }   // end of loop through referenced columns
-
-        }       // end of loop through generated columns
+                }
+            }
+        }
         
 	}
 
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index 9fd1d6c0..0f020e8d 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -5101,6 +5101,23 @@ public  void    test_028_bulkImport()
              );
     }
 
+    /**
+     * <p>
+     * Test that we don't get a null pointer exception when generation clauses
+     * have forward references to other generated columns.
+     * </p>
+     */
+    public  void    test_029_derby_4145()
+        throws Exception
+    {
+        expectCompilationError
+            (
+             CANT_REFERENCE_GENERATED_COLUMN,
+             "create table t_4145(c1 int, c2 int, c3 generated always as (c1 + c4), c4 generated always as (-c1))"
+             );
+    }
+    
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
