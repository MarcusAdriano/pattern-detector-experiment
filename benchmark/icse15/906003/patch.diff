diff --git a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java
index bd2b0f87..4247331c 100644
--- a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java
+++ b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java
@@ -64,13 +64,14 @@ public EntityManager getCurrentPersistenceContext(EntityManagerFactory persisten
   {
     //There will only ever be one thread associated with a transaction at a given time
     //As a result, it is only the outer map that needs to be thread safe.
+    
     Object transactionKey = tranRegistry.getTransactionKey();
     
     //TODO Globalize and log this problem
     //Throw the error on to the client
-    if(transactionKey == null)
+    if(transactionKey == null) {
       throw new TransactionRequiredException();
-    
+    }
     //Get hold of the Map. If there is no Map already registered then add one.
     //We don't need to worry about a race condition, as no other thread will
     //share our transaction
@@ -80,7 +81,13 @@ public EntityManager getCurrentPersistenceContext(EntityManagerFactory persisten
     if(contextsForTransaction == null) {
       contextsForTransaction = new IdentityHashMap<EntityManagerFactory, EntityManager>();
       persistenceContextRegistry.put(transactionKey, contextsForTransaction);
+      try {
       tranRegistry.registerInterposedSynchronization(new EntityManagerClearUp(transactionKey));
+      } catch (IllegalStateException e) {
+        persistenceContextRegistry.remove(transactionKey);
+        //TODO add a message
+        throw new TransactionRequiredException();
+      }
     }
     
     //Still only one thread for this transaction, so don't worry about any race conditions
@@ -89,6 +96,8 @@ public EntityManager getCurrentPersistenceContext(EntityManagerFactory persisten
     if(toReturn == null) {
       toReturn = (properties == null) ? persistenceUnit.createEntityManager() : persistenceUnit.createEntityManager(properties);
       contextsForTransaction.put(persistenceUnit, toReturn);
+    } else {
+      //TODO maybe add debug
     }
     
     return toReturn;
@@ -113,6 +122,7 @@ public EntityManager getCurrentOrDetachedPersistenceContext(EntityManagerFactory
       return persistenceUnit.createEntityManager(properties);
   }
 
+  
   /**
    * Get the persistence context for the current transaction if a transaction is active. 
    * {@link getCurrentPersistenceContext}
@@ -153,15 +163,20 @@ public EntityManagerClearUp(Object transactionKey) {
     }
     
     public void afterCompletion(int arg0) {
+      //This is a no-op;
+    }
+
+    public void beforeCompletion() {
       Map<EntityManagerFactory, EntityManager> tidyUp = persistenceContextRegistry.remove(key);
       if(tidyUp != null) {
-        for(EntityManager em : tidyUp.values())
+        for(EntityManager em : tidyUp.values()) {
+          try {
           em.close();
+          } catch (Exception e) {
+            //TODO Log this, but continue
+          }
       }
     }
-
-    public void beforeCompletion() {
-      //This is a no-op;
     }
   }
 }
diff --git a/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistryTest.java b/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistryTest.java
index f3094992..64ed4b4f 100644
--- a/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistryTest.java
+++ b/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistryTest.java
@@ -18,15 +18,14 @@
  */
 package org.apache.aries.jpa.container.context.transaction.impl;
 
-import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertSame;
 
 import java.util.HashMap;
 import java.util.Map;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityManagerFactory;
-import javax.transaction.Status;
 import javax.transaction.Synchronization;
 import javax.transaction.TransactionSynchronizationRegistry;
 
@@ -55,9 +54,9 @@ public void registerInterposedSynchronization(Synchronization arg0) {
       syncs.put(key, arg0);
     }
     
-    public void afterCompletion(String s)
+    public void beforeCompletion(String s)
     {
-      syncs.get(s).afterCompletion(Status.STATUS_COMMITTED);
+      syncs.get(s).beforeCompletion();
     }
   }
   
@@ -75,10 +74,26 @@ public void setup()
   {
     reg = new TranSyncRegistryMock();
     
-    emf1 = Skeleton.newMock(EntityManagerFactory.class);
     props1 = new HashMap<Object, Object>();
-    emf2 = Skeleton.newMock(EntityManagerFactory.class);
+    props1.put("prop1", "value1");
+    
     props2 = new HashMap<Object, Object>();
+    props2.put("prop2", "value2");
+    
+    emf1 = Skeleton.newMock(EntityManagerFactory.class);
+    
+    Skeleton.getSkeleton(emf1).setReturnValue(new MethodCall(EntityManagerFactory.class, 
+        "createEntityManager", props1), Skeleton.newMock(EntityManager.class));
+    Skeleton.getSkeleton(emf1).setReturnValue(new MethodCall(EntityManagerFactory.class, 
+        "createEntityManager", props2), Skeleton.newMock(EntityManager.class));
+    
+    emf2 = Skeleton.newMock(EntityManagerFactory.class);
+
+    Skeleton.getSkeleton(emf2).setReturnValue(new MethodCall(EntityManagerFactory.class, 
+        "createEntityManager", props1), Skeleton.newMock(EntityManager.class));
+    Skeleton.getSkeleton(emf2).setReturnValue(new MethodCall(EntityManagerFactory.class, 
+        "createEntityManager", props2), Skeleton.newMock(EntityManager.class));
+
     
     contexts = new JTAPersistenceContextRegistry();
     contexts.setTranRegistry(Skeleton.newMock(reg, TransactionSynchronizationRegistry.class));
@@ -105,12 +120,13 @@ public void testMultiGetsOneTran()
     Skeleton.getSkeleton(em2a).assertNotCalled(new MethodCall(EntityManager.class, "close"));
     assertSame("We should get the same delegate!", em2a, em2b);
     
-    reg.afterCompletion("");
+    reg.beforeCompletion("");
     
     Skeleton.getSkeleton(em1a).assertCalledExactNumberOfTimes(new MethodCall(EntityManager.class, "close"),1);
     Skeleton.getSkeleton(em2a).assertCalledExactNumberOfTimes(new MethodCall(EntityManager.class, "close"),1);
   }
   
+  @Test
   public void testMultiGetsMultiTrans()
   {
     reg.setTransactionKey("a");
@@ -121,7 +137,7 @@ public void testMultiGetsMultiTrans()
     Skeleton.getSkeleton(emf1).assertCalledExactNumberOfTimes(new MethodCall(EntityManagerFactory.class, "createEntityManager", props1), 1);
     Skeleton.getSkeleton(emf1).assertCalledExactNumberOfTimes(new MethodCall(EntityManagerFactory.class, "createEntityManager", props2), 1);
    
-    assertNotSame("We should get the same delegate!", em1a, em1b);
+    assertNotSame("We should not get the same delegate!", em1a, em1b);
     
     Skeleton.getSkeleton(em1a).assertNotCalled(new MethodCall(EntityManager.class, "close"));
     Skeleton.getSkeleton(em1b).assertNotCalled(new MethodCall(EntityManager.class, "close"));
@@ -140,14 +156,14 @@ public void testMultiGetsMultiTrans()
     Skeleton.getSkeleton(em2b).assertNotCalled(new MethodCall(EntityManager.class, "close"));
     
     
-    reg.afterCompletion("b");
+    reg.beforeCompletion("b");
     
     Skeleton.getSkeleton(em1a).assertNotCalled(new MethodCall(EntityManager.class, "close"));
     Skeleton.getSkeleton(em1b).assertCalledExactNumberOfTimes(new MethodCall(EntityManager.class, "close"), 1);
     Skeleton.getSkeleton(em2a).assertNotCalled(new MethodCall(EntityManager.class, "close"));
     Skeleton.getSkeleton(em2b).assertCalledExactNumberOfTimes(new MethodCall(EntityManager.class, "close"), 1);
 
-    reg.afterCompletion("a");
+    reg.beforeCompletion("a");
     
     Skeleton.getSkeleton(em1a).assertCalledExactNumberOfTimes(new MethodCall(EntityManager.class, "close"), 1);
     Skeleton.getSkeleton(em1b).assertCalledExactNumberOfTimes(new MethodCall(EntityManager.class, "close"), 1);
