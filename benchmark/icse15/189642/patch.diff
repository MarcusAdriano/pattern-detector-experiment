diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java
index 7829d3c8..66142e8e 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java
@@ -59,12 +59,14 @@ public long getLong() throws StandardException
 		
 		BigInteger bi = new BigInteger(data2c);
 		
+		// If at any time we see that the value to be scaled down
+		// is within the range for a long, then we are guaranteed
+		// that the scaled down value is within the range for long.
 		boolean rangeOk = false;
 		if ((bi.compareTo(BigIntegerDecimal.MAXLONG_PLUS_ONE) < 0)
 			&& (bi.compareTo(BigIntegerDecimal.MINLONG_MINUS_ONE) > 0))
 			rangeOk = true;
 			
-		
 		for (int i = 0; i < sqlScale; i++)
 		{
 			bi = bi.divide(BigIntegerDecimal.TEN);
@@ -87,16 +89,13 @@ public float getFloat() throws StandardException
     {
 		if (isNull())
 			return 0.0f;
-		return Float.parseFloat(getString());
-
-		// TODO - correct implementation
+		return NumberDataType.normalizeREAL(Float.parseFloat(getString()));
 	}
 	public double getDouble() throws StandardException
     {
 		if (isNull())
 			return 0.0;
-		return Double.parseDouble(getString());
-		// TODO - correct implementation
+		return NumberDataType.normalizeDOUBLE(Double.parseDouble(getString()));
 	}	
 	
 
@@ -154,8 +153,6 @@ public void setValue(String theValue) throws StandardException
 				
 				String exponent = theValue.substring(expOffset);
 				
-				
-				//	TODO Need to handle a + sign in the exponent
 				scale = -1 * Integer.parseInt(exponent);
 				theValue = theValue.substring(0, ePosition);
 			}
@@ -196,7 +193,6 @@ public String getString() {
 		if (isNull())
 			return null;
 		
-		// TODO - correct impl
 		String unscaled = new BigInteger(data2c).toString();
 				
 		if (sqlScale == 0)
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
index 47484baf..7e7d4405 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
@@ -695,7 +695,7 @@ public int hashCode()
 			return 0;
 
 		try {
-			return (int) Double.doubleToLongBits(getDouble());
+			return (int) getLong();
 		} catch (StandardException se)
 		{
 			return 0;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CDCDataValueFactory.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CDCDataValueFactory.java
index f6dd1c00..e209a366 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CDCDataValueFactory.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/CDCDataValueFactory.java
@@ -43,12 +43,6 @@
 	public CDCDataValueFactory() {
 	}
 	
-   	public void boot(boolean create, Properties properties) throws StandardException {
-   		System.out.println("WARNING - Experimental J2ME/CDC/Foundation/JSR 169 Derby implementation");
-   		System.out.println("WARNING - NOT FOR USE IN PRODUCTION");
-    	super.boot(create, properties);
-   	}
-	
 	/* (non-Javadoc)
 	 * @see org.apache.derby.iapi.services.monitor.ModuleSupportable#canSupport(java.util.Properties)
 	 */
