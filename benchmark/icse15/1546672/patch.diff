diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
index 1fa6850d..e53d8bc1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
@@ -101,24 +101,22 @@ private void doRetriesIfNeeded() {
           }
           
           // if its a connect exception, lets try again
-          if (err.e instanceof ConnectException) {
-            doRetry = true;
-          } else if (err.e instanceof SolrServerException) {
+          if (err.e instanceof SolrServerException) {
             if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {
               doRetry = true;
             }
-          } else if (err.e instanceof RemoteSolrException) {
-            Exception cause = (RemoteSolrException) err.e.getCause();
-            if (cause != null && cause instanceof ConnectException) {
-              doRetry = true;
             }
+          
+          if (err.e instanceof ConnectException) {
+            doRetry = true;
           }
+          
           if (err.req.retries < maxRetriesOnForward && doRetry) {
             err.req.retries++;
             
             SolrException.log(SolrCmdDistributor.log, "forwarding update to "
                 + oldNodeUrl + " failed - retrying ... retries: "
-                + err.req.retries + " " + err.req.cmdString, err.e);
+                + err.req.retries + " " + err.req.cmdString + " rsp:" + rspCode, err.e);
             try {
               Thread.sleep(retryPause);
             } catch (InterruptedException e) {
@@ -360,14 +358,12 @@ public ZkCoreNodeProps getNodeProps() {
     private ZkStateReader zkStateReader;
     private String collection;
     private String shardId;
-    private String fromAddress;
     
-    public RetryNode(ZkCoreNodeProps nodeProps, ZkStateReader zkStateReader, String collection, String shardId, String fromCoreUrl) {
+    public RetryNode(ZkCoreNodeProps nodeProps, ZkStateReader zkStateReader, String collection, String shardId) {
       super(nodeProps);
       this.zkStateReader = zkStateReader;
       this.collection = collection;
       this.shardId = shardId;
-      this.fromAddress = fromCoreUrl;
     }
 
     @Override
@@ -385,10 +381,6 @@ public boolean checkRetry() {
         return true;
       }
      
-      if (fromAddress.equals(leaderProps.getCoreUrl())) {
-        // we became the leader
-        return false;
-      }
       this.nodeProps = leaderProps;
       
       return true;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
index 4bc4e92c..e2db6812 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
@@ -298,8 +298,7 @@ public DistributedUpdateProcessor(SolrQueryRequest req,
         } else {
           // I need to forward onto the leader...
           nodes = new ArrayList<Node>(1);
-          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, ZkCoreNodeProps.getCoreUrl(
-              zkController.getBaseUrl(), req.getCore().getName())));
+          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));
           forwardToLeader = true;
         }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/MockStreamingSolrServers.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/MockStreamingSolrServers.java
index d95958e9..bd49e000 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/MockStreamingSolrServers.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/MockStreamingSolrServers.java
@@ -21,6 +21,7 @@
 import java.net.ConnectException;
 import java.net.SocketException;
 
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
@@ -74,7 +75,11 @@ public MockSolrServer(SolrServer solrServer) {
     public NamedList<Object> request(SolrRequest request)
         throws SolrServerException, IOException {
       if (exp != null) {
+        if (LuceneTestCase.random().nextBoolean()) {
         throw exception();
+        } else {
+          throw new SolrServerException(exception());
+        }
       }
       
       return solrServer.request(request);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
index a7a4cf8e..3b1ef9bf 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
@@ -331,7 +331,7 @@ private void testMaxRetries() throws IOException {
     
     final AtomicInteger retries = new AtomicInteger();
     ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, "");
-    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1", "locahost") {
+    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1") {
       @Override
       public boolean checkRetry() {
         retries.incrementAndGet();
@@ -367,7 +367,7 @@ private void testOneRetry() throws Exception {
 
     final AtomicInteger retries = new AtomicInteger();
     nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, "");
-    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1", "locahost") {
+    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1") {
       @Override
       public boolean checkRetry() {
         ss.setExp(null);
@@ -413,7 +413,7 @@ private void testRetryNodeWontRetrySocketError() throws Exception {
 
     final AtomicInteger retries = new AtomicInteger();
     nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, "");
-    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1", "locahost") {
+    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1") {
       @Override
       public boolean checkRetry() {
         retries.incrementAndGet();
@@ -457,7 +457,7 @@ private void testRetryNodeAgainstBadAddress() throws SolrServerException, IOExce
     ArrayList<Node> nodes = new ArrayList<Node>();
 
     ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, "[ff01::114]:33332" + context, ZkStateReader.CORE_NAME_PROP, "");
-    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1", "locahost") {
+    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, "collection1", "shard1") {
       @Override
       public boolean checkRetry() {
         ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),
