diff --git a/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/advanced/features/itest/JPAWeavingAndAnnotationScanningTest.java b/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/advanced/features/itest/JPAWeavingAndAnnotationScanningTest.java
index d4308a63..3e59148c 100644
--- a/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/advanced/features/itest/JPAWeavingAndAnnotationScanningTest.java
+++ b/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/advanced/features/itest/JPAWeavingAndAnnotationScanningTest.java
@@ -155,7 +155,7 @@ public void testClassIsWoven() throws Exception {
 
         //vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
         //waitForFrameworkStartup(),
-        org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),        
+        
        
 //        mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa"),
 //        mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.core"),
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
index 6b614428..8b35f782 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
@@ -27,6 +27,8 @@
 import org.apache.aries.proxy.impl.NLS;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.commons.JSRInlinerAdapter;
 /**
  * We need to override ASM's default behaviour in {@link #getCommonSuperClass(String, String)}
  * so that it doesn't load classes (which it was doing on the wrong {@link ClassLoader}
@@ -38,14 +40,17 @@
   private final ClassLoader loader;
   private String currentClassInternalName;
   private String currentSuperClassInternalName;
+  private final boolean inlineJSR;
   
   public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
     super(arg0, arg1);
+    inlineJSR = arg1 == COMPUTE_FRAMES;
     this.loader = loader;
   }
   
   public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
     super(arg0);
+    inlineJSR = arg0 == COMPUTE_FRAMES;
     this.loader = loader;
   }
 
@@ -136,4 +141,15 @@ public final void visit(int arg0, int arg1, String arg2, String arg3, String arg
     super.visit(arg0, arg1, arg2, arg3, arg4, arg5);
   }
 
+  @Override
+  public MethodVisitor visitMethod(int arg0, String arg1, String arg2,
+      String arg3, String[] arg4) {
+    MethodVisitor mv =  super.visitMethod(arg0, arg1, arg2, arg3, arg4);
+    
+    if(inlineJSR)
+      mv = new JSRInlinerAdapter(mv, arg0, arg1, arg2, arg3, arg4);
+    
+    return mv;
+  }
+
 }
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyMethodAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyMethodAdapter.java
index ab31e9ab..84402957 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyMethodAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyMethodAdapter.java
@@ -21,13 +21,11 @@
 import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.DISPATCHER_FIELD;
 import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.DISPATCHER_TYPE;
 import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.OBJECT_TYPE;
-import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6;
 
 import org.apache.aries.proxy.impl.common.AbstractWovenProxyMethodAdapter;
 import org.objectweb.asm.Label;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Type;
-import org.objectweb.asm.commons.JSRInlinerAdapter;
 import org.objectweb.asm.commons.Method;
 
 final class WovenProxyMethodAdapter extends AbstractWovenProxyMethodAdapter {
@@ -40,8 +38,7 @@ public WovenProxyMethodAdapter(MethodVisitor mv, int access, String name,
       Type typeBeingWoven) {
     //If we're running on Java 6+ We need to inline any JSR instructions because we're computing stack frames.
     //otherwise we can save the overhead
-    super((IS_AT_LEAST_JAVA_6) ? new JSRInlinerAdapter(mv, access, name, desc, null, exceptions) :
-             mv, access, name, desc, methodStaticFieldName, currentTransformMethod, typeBeingWoven);
+    super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod, typeBeingWoven);
   }
 
   /**
