diff --git a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
index c84a6eab..5e141e36 100644
--- a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
+++ b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
@@ -32,9 +32,9 @@
 import org.apache.aries.blueprint.BeanProcessor;
 import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
 import org.apache.aries.blueprint.ServiceProcessor;
-import org.apache.aries.blueprint.container.ServiceListener;
 import org.apache.aries.blueprint.utils.JavaUtils;
 import org.apache.aries.blueprint.utils.ReflectionUtils;
+import org.apache.aries.blueprint.utils.ServiceListener;
 import org.apache.aries.util.AriesFrameworkUtil;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.Constants;
diff --git a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
index e522e335..f66fe75c 100644
--- a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
+++ b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
@@ -36,11 +36,6 @@
 import org.apache.aries.blueprint.ComponentDefinitionRegistry;
 import org.apache.aries.blueprint.NamespaceHandler;
 import org.apache.aries.blueprint.ParserContext;
-import org.apache.aries.blueprint.parser.Parser;
-import org.apache.aries.blueprint.parser.ParserContextImpl;
-import org.apache.aries.blueprint.container.ServiceListener;
-import org.apache.aries.blueprint.ext.ExtNamespaceHandler;
-import org.apache.aries.blueprint.ext.PlaceholdersUtils;
 import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
 import org.apache.aries.blueprint.mutable.MutableCollectionMetadata;
 import org.apache.aries.blueprint.mutable.MutableComponentMetadata;
@@ -48,6 +43,8 @@
 import org.apache.aries.blueprint.mutable.MutableMapMetadata;
 import org.apache.aries.blueprint.mutable.MutableRefMetadata;
 import org.apache.aries.blueprint.mutable.MutableValueMetadata;
+import org.apache.aries.blueprint.utils.PlaceholdersUtils;
+import org.apache.aries.blueprint.utils.ServiceListener;
 import org.osgi.service.blueprint.container.ComponentDefinitionException;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
 import org.osgi.service.blueprint.reflect.BeanProperty;
@@ -81,6 +78,9 @@
     public static final String BLUEPRINT_NAMESPACE = "http://www.osgi.org/xmlns/blueprint/v1.0.0";
     public static final String BLUEPRINT_CM_NAMESPACE_1_0 = "http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0";
     public static final String BLUEPRINT_CM_NAMESPACE_1_1 = "http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0";
+    public static final String BLUEPRINT_EXT_NAMESPACE_V1_0 = "http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0";
+    public static final String BLUEPRINT_EXT_NAMESPACE_V1_1 = "http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0";
+    public static final String BLUEPRINT_EXT_NAMESPACE_V1_2 = "http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0";
 
     public static final String PROPERTY_PLACEHOLDER_ELEMENT = "property-placeholder";
     public static final String MANAGED_PROPERTIES_ELEMENT = "managed-properties";
@@ -91,8 +91,12 @@
     public static final String INTERFACES_ELEMENT = "interfaces";
     public static final String VALUE_ELEMENT = "value";
     public static final String MANAGED_COMPONENT_ELEMENT = "managed-component";
+    public static final String LOCATION_ELEMENT = "location";
+    public static final String SERVICE_PROPERTIES_ELEMENT = "service-properties";
+    public static final String REGISTRATION_LISTENER_ELEMENT = "registration-listener";
 
     public static final String ID_ATTRIBUTE = "id";
+    public static final String SYSTEM_PROPERTIES_NEVER = "never";
     public static final String PERSISTENT_ID_ATTRIBUTE = "persistent-id";
     public static final String PLACEHOLDER_PREFIX_ATTRIBUTE = "placeholder-prefix";
     public static final String PLACEHOLDER_SUFFIX_ATTRIBUTE = "placeholder-suffix";
@@ -104,6 +108,8 @@
     public static final String RANKING_ATTRIBUTE = "ranking";
     public static final String INTERFACE_ATTRIBUTE = "interface";
     public static final String UPDATE_ATTRIBUTE = "update";
+    public static final String SYSTEM_PROPERTIES_ATTRIBUTE = "system-properties";
+    public static final String IGNORE_MISSING_LOCATIONS_ATTRIBUTE = "ignore-missing-locations";
 
     public static final String AUTO_EXPORT_DISABLED = "disabled";
     public static final String AUTO_EXPORT_INTERFACES = "interfaces";
@@ -216,7 +222,7 @@ private ComponentMetadata parsePropertyPlaceholder(ParserContext context, Elemen
         }
         String systemProperties = extractSystemPropertiesAttribute(element);
         if (systemProperties == null) {
-            systemProperties = ExtNamespaceHandler.SYSTEM_PROPERTIES_NEVER;
+            systemProperties = SYSTEM_PROPERTIES_NEVER;
         }
         metadata.addProperty("systemProperties", createValue(context, systemProperties));
         String updateStrategy = element.getAttribute(UPDATE_STRATEGY_ATTRIBUTE);
@@ -240,12 +246,10 @@ private ComponentMetadata parsePropertyPlaceholder(ParserContext context, Elemen
                         Metadata props = parseDefaultProperties(context, metadata, e);
                         metadata.addProperty("defaultProperties", props);
                     }
-                } else if (ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_0.equals(e.getNamespaceURI())) {
-                    if (nodeNameEquals(e, ExtNamespaceHandler.LOCATION_ELEMENT)) {
-                        locations.add(getTextValue(e));
-                    }
-                } else if (ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_1.equals(e.getNamespaceURI())) {
-                    if (nodeNameEquals(e, ExtNamespaceHandler.LOCATION_ELEMENT)) {
+                } else if (BLUEPRINT_EXT_NAMESPACE_V1_0.equals(e.getNamespaceURI())
+                    || BLUEPRINT_EXT_NAMESPACE_V1_1.equals(e.getNamespaceURI())
+                    || BLUEPRINT_EXT_NAMESPACE_V1_2.equals(e.getNamespaceURI())) {
+                    if (nodeNameEquals(e, LOCATION_ELEMENT)) {
                         locations.add(getTextValue(e));
                     }
                 }
@@ -263,20 +267,24 @@ private ComponentMetadata parsePropertyPlaceholder(ParserContext context, Elemen
     private String extractSystemPropertiesAttribute(Element element) {
       String systemProperties = null;
       
-      if (element.hasAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_0, ExtNamespaceHandler.SYSTEM_PROPERTIES_ATTRIBUTE)) {
-        systemProperties =  element.getAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_0, ExtNamespaceHandler.SYSTEM_PROPERTIES_ATTRIBUTE);
-      } else if (element.hasAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_1, ExtNamespaceHandler.SYSTEM_PROPERTIES_ATTRIBUTE)) {
-        systemProperties =  element.getAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_1, ExtNamespaceHandler.SYSTEM_PROPERTIES_ATTRIBUTE);
+      if (element.hasAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_0, SYSTEM_PROPERTIES_ATTRIBUTE)) {
+        systemProperties =  element.getAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_0, SYSTEM_PROPERTIES_ATTRIBUTE);
+      } else if (element.hasAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_1, SYSTEM_PROPERTIES_ATTRIBUTE)) {
+        systemProperties =  element.getAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_1, SYSTEM_PROPERTIES_ATTRIBUTE);
+      } else if (element.hasAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_2, SYSTEM_PROPERTIES_ATTRIBUTE)) {
+        systemProperties =  element.getAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_2, SYSTEM_PROPERTIES_ATTRIBUTE);
       }
       return systemProperties;
     }
 
     private String extractIgnoreMissingLocations(Element element) {
       String ignoreMissingLocations = null;
-      if (element.hasAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_0, ExtNamespaceHandler.IGNORE_MISSING_LOCATIONS_ATTRIBUTE)) {
-        ignoreMissingLocations = element.getAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_0, ExtNamespaceHandler.IGNORE_MISSING_LOCATIONS_ATTRIBUTE);
-      } else if (element.hasAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_1, ExtNamespaceHandler.IGNORE_MISSING_LOCATIONS_ATTRIBUTE)) {
-        ignoreMissingLocations = element.getAttributeNS(ExtNamespaceHandler.BLUEPRINT_EXT_NAMESPACE_V1_1, ExtNamespaceHandler.IGNORE_MISSING_LOCATIONS_ATTRIBUTE);
+      if (element.hasAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_0, IGNORE_MISSING_LOCATIONS_ATTRIBUTE)) {
+        ignoreMissingLocations = element.getAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_0, IGNORE_MISSING_LOCATIONS_ATTRIBUTE);
+      } else if (element.hasAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_1, IGNORE_MISSING_LOCATIONS_ATTRIBUTE)) {
+        ignoreMissingLocations = element.getAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_1, IGNORE_MISSING_LOCATIONS_ATTRIBUTE);
+      } else if (element.hasAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_2, IGNORE_MISSING_LOCATIONS_ATTRIBUTE)) {
+        ignoreMissingLocations = element.getAttributeNS(BLUEPRINT_EXT_NAMESPACE_V1_1, IGNORE_MISSING_LOCATIONS_ATTRIBUTE);
       }
       return ignoreMissingLocations;
     }
@@ -335,8 +343,6 @@ private ComponentMetadata parseManagedServiceFactory(ParserContext context, Elem
             factoryMetadata.addProperty("interfaces", createList(context, interfaces));
         }
 
-        Parser parser = getParser(context);
-        
         // Parse elements
         List<RegistrationListener> listeners = new ArrayList<RegistrationListener>();
         NodeList nl = element.getChildNodes();
@@ -347,15 +353,17 @@ private ComponentMetadata parseManagedServiceFactory(ParserContext context, Elem
                 if (isBlueprintNamespace(e.getNamespaceURI())) {
                     if (nodeNameEquals(e, INTERFACES_ELEMENT)) {
                         if (interfaces != null) {
-                            throw new ComponentDefinitionException("Only one of " + Parser.INTERFACE_ATTRIBUTE + " attribute or " + INTERFACES_ELEMENT + " element must be used");
+                            throw new ComponentDefinitionException("Only one of " + INTERFACE_ATTRIBUTE + " attribute or " + INTERFACES_ELEMENT + " element must be used");
                         }
                         interfaces = parseInterfaceNames(e);
                         factoryMetadata.addProperty("interfaces", createList(context, interfaces));                    
-                    } else if (nodeNameEquals(e, Parser.SERVICE_PROPERTIES_ELEMENT)) { 
-                        MapMetadata map = parser.parseServiceProperties(e, factoryMetadata);
+                    } else if (nodeNameEquals(e, SERVICE_PROPERTIES_ELEMENT)) { 
+                        MapMetadata map = context.parseElement(MapMetadata.class,
+                            factoryMetadata, e);
                         factoryMetadata.addProperty("serviceProperties", map);
-                    } else if (nodeNameEquals(e, Parser.REGISTRATION_LISTENER_ELEMENT)) {
-                        listeners.add(parser.parseRegistrationListener(e, factoryMetadata));
+                    } else if (nodeNameEquals(e, REGISTRATION_LISTENER_ELEMENT)) {
+                        listeners.add(context.parseElement(RegistrationListener.class,
+                            factoryMetadata, e));
                     }
                 } else if (BLUEPRINT_CM_NAMESPACE_1_0.equals(e.getNamespaceURI())
                         || BLUEPRINT_CM_NAMESPACE_1_1.equals(e.getNamespaceURI())) {
@@ -561,13 +569,6 @@ private String generateId(ParserContext context) {
         return id;
     }
     
-    private Parser getParser(ParserContext ctx) {
-        if (ctx instanceof ParserContextImpl) {
-            return ((ParserContextImpl) ctx).getParser();
-        }
-        throw new RuntimeException("Unable to get parser");
-    }
-
     public List<String> parseInterfaceNames(Element element) {
         List<String> interfaceNames = new ArrayList<String>();
         NodeList nl = element.getChildNodes();
diff --git a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
index 703bcf04..f7b4b56b 100644
--- a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
+++ b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
@@ -18,16 +18,14 @@
  */
 package org.apache.aries.blueprint.compendium.cm;
 
-import java.io.IOException;
-import java.util.*;
+import java.util.Dictionary;
+import java.util.Enumeration;
+import java.util.Properties;
 
 import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
-import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
-import org.apache.aries.blueprint.ext.PropertyPlaceholder;
+import org.apache.aries.blueprint.utils.PropertyPlaceholder;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.Constants;
-import org.osgi.service.blueprint.container.BlueprintContainer;
-import org.osgi.service.blueprint.container.ComponentDefinitionException;
 import org.osgi.service.cm.Configuration;
 import org.osgi.service.cm.ConfigurationAdmin;
 import org.slf4j.Logger;
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
index 10e43cf7..32eb8395 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
@@ -29,6 +29,7 @@
 import org.apache.aries.blueprint.ComponentDefinitionRegistry;
 import org.apache.aries.blueprint.ExtendedBeanMetadata;
 import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
+import org.apache.aries.blueprint.utils.ServiceListener;
 import org.apache.aries.blueprint.PassThroughMetadata;
 import org.apache.aries.blueprint.di.ArrayRecipe;
 import org.apache.aries.blueprint.di.CollectionRecipe;
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceListener.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceListener.java
index ba8a09ed..e69de29b 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceListener.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceListener.java
@@ -1,107 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.aries.blueprint.container;
-
-import java.lang.reflect.Method;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
-import org.apache.aries.blueprint.utils.ReflectionUtils;
-import org.osgi.service.blueprint.container.ComponentDefinitionException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class ServiceListener {
-
-    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceListener.class);
-    
-    private Object listener;
-    private String registerMethod;
-    private String unregisterMethod;
-    private ExtendedBlueprintContainer blueprintContainer;
-
-    private List<Method> registerMethods;
-    private List<Method> unregisterMethods;
-    private boolean initialized = false;
-
-    public void setListener(Object listener) {
-        this.listener = listener;
-    }
-
-    public void setRegisterMethod(String method) {
-        this.registerMethod = method;
-    }
-    
-    public void setUnregisterMethod(String method) {
-        this.unregisterMethod = method;
-    }
-    
-    public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
-        this.blueprintContainer = blueprintContainer;
-    }
-    
-    public void register(Object service, Map properties) {
-        init(service);
-        invokeMethod(registerMethods, service, properties);
-    }
-
-    public void unregister(Object service, Map properties) {
-        init(service);
-        invokeMethod(unregisterMethods, service, properties);
-    }
-
-    private synchronized void init(Object service) {
-        if (initialized) {
-            return;
-        }
-        Class[] paramTypes = new Class[] { service != null ? service.getClass() : null, Map.class };
-        Class listenerClass = listener.getClass();
-
-        if (registerMethod != null) {
-            registerMethods = ReflectionUtils.findCompatibleMethods(listenerClass, registerMethod, paramTypes);
-            if (registerMethods.size() == 0) {
-                throw new ComponentDefinitionException("No matching methods found for listener registration method: " + registerMethod);
-            }
-            LOGGER.debug("Found register methods: {}", registerMethods);
-        }
-        if (unregisterMethod != null) {
-            unregisterMethods = ReflectionUtils.findCompatibleMethods(listenerClass, unregisterMethod, paramTypes);
-            if (unregisterMethods.size() == 0) {
-                throw new ComponentDefinitionException("No matching methods found for listener unregistration method: " + unregisterMethod);
-            }
-            LOGGER.debug("Found unregister methods: {}", unregisterMethods);
-        }
-        initialized = true;
-    }
-
-    private void invokeMethod(List<Method> methods, Object service, Map properties) {
-        if (methods == null || methods.isEmpty()) {
-            return;
-        }
-        for (Method method : methods) {
-            try {
-                ReflectionUtils.invoke(blueprintContainer.getAccessControlContext(), 
-                                       method, listener, service, properties);
-            } catch (Exception e) {
-                LOGGER.error("Error calling listener method " + method, e);
-            }
-        }
-    }
-
-}
-
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
index 6f66d20e..cb040041 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
@@ -43,6 +43,7 @@
 import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
 import org.apache.aries.blueprint.utils.JavaUtils;
 import org.apache.aries.blueprint.utils.ReflectionUtils;
+import org.apache.aries.blueprint.utils.ServiceListener;
 import org.apache.aries.proxy.InvocationListener;
 import org.apache.aries.proxy.UnableToProxyException;
 import org.apache.aries.util.AriesFrameworkUtil;
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/ExtNamespaceHandler.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/ExtNamespaceHandler.java
index 2bb9921c..a9667777 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/ExtNamespaceHandler.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/ExtNamespaceHandler.java
@@ -37,6 +37,8 @@
 import org.apache.aries.blueprint.mutable.MutableReferenceMetadata;
 import org.apache.aries.blueprint.mutable.MutableServiceReferenceMetadata;
 import org.apache.aries.blueprint.mutable.MutableValueMetadata;
+import org.apache.aries.blueprint.utils.PlaceholdersUtils;
+import org.apache.aries.blueprint.utils.PropertyPlaceholder;
 import org.osgi.framework.BundleContext;
 import org.osgi.service.blueprint.container.ComponentDefinitionException;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java
index 1236a11d..e69de29b 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java
@@ -1,65 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.aries.blueprint.ext;
-
-import org.apache.aries.blueprint.ComponentDefinitionRegistry;
-import org.apache.aries.blueprint.ExtendedBeanMetadata;
-import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
-import org.osgi.service.blueprint.container.ComponentDefinitionException;
-import org.osgi.service.blueprint.reflect.BeanMetadata;
-import org.osgi.service.blueprint.reflect.BeanProperty;
-import org.osgi.service.blueprint.reflect.ComponentMetadata;
-import org.osgi.service.blueprint.reflect.ValueMetadata;
-
-/**
- * Utility for placeholders parsing / validation
- *
- * @version $Rev$, $Date$
- */
-public class PlaceholdersUtils {
-
-    public static void validatePlaceholder(MutableBeanMetadata metadata, ComponentDefinitionRegistry registry) {
-        String prefix = getPlaceholderProperty(metadata, "placeholderPrefix");
-        String suffix = getPlaceholderProperty(metadata, "placeholderSuffix");
-        for (String id : registry.getComponentDefinitionNames()) {
-            ComponentMetadata component = registry.getComponentDefinition(id);
-            if (component instanceof ExtendedBeanMetadata) {
-                ExtendedBeanMetadata bean = (ExtendedBeanMetadata) component;
-                if (bean.getRuntimeClass() != null && AbstractPropertyPlaceholder.class.isAssignableFrom(bean.getRuntimeClass())) {
-                    String otherPrefix = getPlaceholderProperty(bean, "placeholderPrefix");
-                    String otherSuffix = getPlaceholderProperty(bean, "placeholderSuffix");
-                    if (prefix.equals(otherPrefix) && suffix.equals(otherSuffix)) {
-                        throw new ComponentDefinitionException("Multiple placeholders with the same prefix and suffix are not allowed");
-                    }
-                }
-            }
-        }
-    }
-
-    private static String getPlaceholderProperty(BeanMetadata bean, String name) {
-        for (BeanProperty property : bean.getProperties()) {
-            if (name.equals(property.getName())) {
-                ValueMetadata value = (ValueMetadata) property.getValue();
-                return value.getStringValue();
-            }
-        }
-        return null;
-    }
-
-}
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
index 19909868..e69de29b 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
@@ -1,204 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.aries.blueprint.ext;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.util.Dictionary;
-import java.util.Enumeration;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-
-import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Property placeholder that looks for properties in the System properties.
- *
- * @version $Rev$, $Date$
- */
-public class PropertyPlaceholder extends AbstractPropertyPlaceholder {
-
-    public enum SystemProperties {
-        never,
-        fallback,
-        override
-    }
-
-    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyPlaceholder.class);
-
-    private Map defaultProperties;
-    private Properties properties;
-    private List<URL> locations;
-    private boolean ignoreMissingLocations;
-    private SystemProperties systemProperties = SystemProperties.fallback;
-    private PropertyEvaluator evaluator = null;
-
-    public Map getDefaultProperties() {
-        return defaultProperties;
-    }
-
-    public void setDefaultProperties(Map defaultProperties) {
-        this.defaultProperties = defaultProperties;
-    }
-
-    public List<URL> getLocations() {
-        return locations;
-    }
-
-    public void setLocations(List<URL> locations) {
-        this.locations = locations;
-    }
-
-    public boolean isIgnoreMissingLocations() {
-        return ignoreMissingLocations;
-    }
-
-    public void setIgnoreMissingLocations(boolean ignoreMissingLocations) {
-        this.ignoreMissingLocations = ignoreMissingLocations;
-    }
-
-    public SystemProperties getSystemProperties() {
-        return systemProperties;
-    }
-
-    public void setSystemProperties(SystemProperties systemProperties) {
-        this.systemProperties = systemProperties;
-    }
-
-    public PropertyEvaluator getEvaluator() {
-        return evaluator;
-    }
-
-    public void setEvaluator(PropertyEvaluator evaluator) {
-        this.evaluator = evaluator;
-    }
-
-    public void init() throws Exception {
-        properties = new Properties();
-        if (locations != null) {
-            for (URL url : locations) {
-                InputStream is = null;
-                try {
-                    is = url.openStream();
-                } catch (IOException e) {
-                    if (ignoreMissingLocations) {
-                        LOGGER.debug("Unable to load properties from url " + url + " while ignoreMissingLocations is set to true");
-                    } else {
-                        throw e;
-                    }
-                }
-                if (is != null) {
-                    try {
-                        properties.load(is);
-                    } finally {
-                        is.close();
-                    }
-                }
-            }
-        }
-    }
-
-    protected String getProperty(String val) {
-        LOGGER.debug("Retrieving property {}", val);
-        Object v = null;
-        if (v == null && systemProperties == SystemProperties.override) {
-            v = System.getProperty(val);
-            if (v != null) {
-                LOGGER.debug("Found system property {} with value {}", val, v);
-            }
-        }
-        if (v == null && properties != null) {
-            v = properties.getProperty(val);
-            if (v != null) {
-                LOGGER.debug("Found property {} from locations with value {}", val, v);
-            }
-        }
-        if (v == null && systemProperties == SystemProperties.fallback) {
-            v = System.getProperty(val);
-            if (v != null) {
-                LOGGER.debug("Found system property {} with value {}", val, v);
-            }
-        }
-        if (v == null && defaultProperties != null) {
-            v = defaultProperties.get(val);
-            if (v != null) {
-                LOGGER.debug("Retrieved property {} value from defaults {}", val, v);
-            }
-        }
-        if (v == null) {
-            LOGGER.debug("Property {} not found", val);
-        }
-        return v != null ? v.toString() : null;
-    }
-
-    @Override
-    protected String retrieveValue(String expression) {
-        LOGGER.debug("Retrieving Value from expression: {}", expression);
-        
-        if (evaluator == null) {
-            return super.retrieveValue(expression);
-        } else {
-            return evaluator.evaluate(expression, new Dictionary<String, String>(){
-                @Override
-                public String get(Object key) {
-                    return getProperty((String) key);
-                }
-
-                // following are not important
-                @Override
-                public String put(String key, String value) {
-                    throw new UnsupportedOperationException();
-                }
-                
-                @Override
-                public Enumeration<String> elements() {
-                    throw new UnsupportedOperationException();
-                }
-                
-                @Override
-                public boolean isEmpty() {
-                    throw new UnsupportedOperationException();
-                }
-
-                @Override
-                public Enumeration<String> keys() {
-                    throw new UnsupportedOperationException();
-                }
-
-                @Override
-                public String remove(Object key) {
-                    throw new UnsupportedOperationException();
-                }
-
-                @Override
-                public int size() {
-                    throw new UnsupportedOperationException();
-                }
-                
-            });
-        }
-
-    }
-    
-   
-}
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PlaceholdersUtils.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PlaceholdersUtils.java
index e69de29b..c647de8f 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PlaceholdersUtils.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PlaceholdersUtils.java
@@ -0,0 +1,66 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.utils;
+
+import org.apache.aries.blueprint.ComponentDefinitionRegistry;
+import org.apache.aries.blueprint.ExtendedBeanMetadata;
+import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
+import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
+import org.osgi.service.blueprint.container.ComponentDefinitionException;
+import org.osgi.service.blueprint.reflect.BeanMetadata;
+import org.osgi.service.blueprint.reflect.BeanProperty;
+import org.osgi.service.blueprint.reflect.ComponentMetadata;
+import org.osgi.service.blueprint.reflect.ValueMetadata;
+
+/**
+ * Utility for placeholders parsing / validation
+ *
+ * @version $Rev$, $Date$
+ */
+public class PlaceholdersUtils {
+
+    public static void validatePlaceholder(MutableBeanMetadata metadata, ComponentDefinitionRegistry registry) {
+        String prefix = getPlaceholderProperty(metadata, "placeholderPrefix");
+        String suffix = getPlaceholderProperty(metadata, "placeholderSuffix");
+        for (String id : registry.getComponentDefinitionNames()) {
+            ComponentMetadata component = registry.getComponentDefinition(id);
+            if (component instanceof ExtendedBeanMetadata) {
+                ExtendedBeanMetadata bean = (ExtendedBeanMetadata) component;
+                if (bean.getRuntimeClass() != null && AbstractPropertyPlaceholder.class.isAssignableFrom(bean.getRuntimeClass())) {
+                    String otherPrefix = getPlaceholderProperty(bean, "placeholderPrefix");
+                    String otherSuffix = getPlaceholderProperty(bean, "placeholderSuffix");
+                    if (prefix.equals(otherPrefix) && suffix.equals(otherSuffix)) {
+                        throw new ComponentDefinitionException("Multiple placeholders with the same prefix and suffix are not allowed");
+                    }
+                }
+            }
+        }
+    }
+
+    private static String getPlaceholderProperty(BeanMetadata bean, String name) {
+        for (BeanProperty property : bean.getProperties()) {
+            if (name.equals(property.getName())) {
+                ValueMetadata value = (ValueMetadata) property.getValue();
+                return value.getStringValue();
+            }
+        }
+        return null;
+    }
+
+}
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PropertyPlaceholder.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PropertyPlaceholder.java
index ada1bb9a..fed6aece 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PropertyPlaceholder.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/PropertyPlaceholder.java
@@ -1,3 +1,208 @@
   + text/plain
   + Date Revision
   + native
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.utils;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.util.Dictionary;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+
+import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
+import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Property placeholder that looks for properties in the System properties.
+ *
+ * @version $Rev$, $Date$
+ */
+public class PropertyPlaceholder extends AbstractPropertyPlaceholder {
+
+    public enum SystemProperties {
+        never,
+        fallback,
+        override
+    }
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyPlaceholder.class);
+
+    private Map defaultProperties;
+    private Properties properties;
+    private List<URL> locations;
+    private boolean ignoreMissingLocations;
+    private SystemProperties systemProperties = SystemProperties.fallback;
+    private PropertyEvaluator evaluator = null;
+
+    public Map getDefaultProperties() {
+        return defaultProperties;
+    }
+
+    public void setDefaultProperties(Map defaultProperties) {
+        this.defaultProperties = defaultProperties;
+    }
+
+    public List<URL> getLocations() {
+        return locations;
+    }
+
+    public void setLocations(List<URL> locations) {
+        this.locations = locations;
+    }
+
+    public boolean isIgnoreMissingLocations() {
+        return ignoreMissingLocations;
+    }
+
+    public void setIgnoreMissingLocations(boolean ignoreMissingLocations) {
+        this.ignoreMissingLocations = ignoreMissingLocations;
+    }
+
+    public SystemProperties getSystemProperties() {
+        return systemProperties;
+    }
+
+    public void setSystemProperties(SystemProperties systemProperties) {
+        this.systemProperties = systemProperties;
+    }
+
+    public PropertyEvaluator getEvaluator() {
+        return evaluator;
+    }
+
+    public void setEvaluator(PropertyEvaluator evaluator) {
+        this.evaluator = evaluator;
+    }
+
+    public void init() throws Exception {
+        properties = new Properties();
+        if (locations != null) {
+            for (URL url : locations) {
+                InputStream is = null;
+                try {
+                    is = url.openStream();
+                } catch (IOException e) {
+                    if (ignoreMissingLocations) {
+                        LOGGER.debug("Unable to load properties from url " + url + " while ignoreMissingLocations is set to true");
+                    } else {
+                        throw e;
+                    }
+                }
+                if (is != null) {
+                    try {
+                        properties.load(is);
+                    } finally {
+                        is.close();
+                    }
+                }
+            }
+        }
+    }
+
+    protected String getProperty(String val) {
+        LOGGER.debug("Retrieving property {}", val);
+        Object v = null;
+        if (v == null && systemProperties == SystemProperties.override) {
+            v = System.getProperty(val);
+            if (v != null) {
+                LOGGER.debug("Found system property {} with value {}", val, v);
+            }
+        }
+        if (v == null && properties != null) {
+            v = properties.getProperty(val);
+            if (v != null) {
+                LOGGER.debug("Found property {} from locations with value {}", val, v);
+            }
+        }
+        if (v == null && systemProperties == SystemProperties.fallback) {
+            v = System.getProperty(val);
+            if (v != null) {
+                LOGGER.debug("Found system property {} with value {}", val, v);
+            }
+        }
+        if (v == null && defaultProperties != null) {
+            v = defaultProperties.get(val);
+            if (v != null) {
+                LOGGER.debug("Retrieved property {} value from defaults {}", val, v);
+            }
+        }
+        if (v == null) {
+            LOGGER.debug("Property {} not found", val);
+        }
+        return v != null ? v.toString() : null;
+    }
+
+    @Override
+    protected String retrieveValue(String expression) {
+        LOGGER.debug("Retrieving Value from expression: {}", expression);
+        
+        if (evaluator == null) {
+            return super.retrieveValue(expression);
+        } else {
+            return evaluator.evaluate(expression, new Dictionary<String, String>(){
+                @Override
+                public String get(Object key) {
+                    return getProperty((String) key);
+                }
+
+                // following are not important
+                @Override
+                public String put(String key, String value) {
+                    throw new UnsupportedOperationException();
+                }
+                
+                @Override
+                public Enumeration<String> elements() {
+                    throw new UnsupportedOperationException();
+                }
+                
+                @Override
+                public boolean isEmpty() {
+                    throw new UnsupportedOperationException();
+                }
+
+                @Override
+                public Enumeration<String> keys() {
+                    throw new UnsupportedOperationException();
+                }
+
+                @Override
+                public String remove(Object key) {
+                    throw new UnsupportedOperationException();
+                }
+
+                @Override
+                public int size() {
+                    throw new UnsupportedOperationException();
+                }
+                
+            });
+        }
+
+    }
+    
+   
+}
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceListener.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceListener.java
index e934ea14..0094c950 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceListener.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceListener.java
@@ -1,3 +1,109 @@
   + native
   + text/plain
   + Date Revision
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.aries.blueprint.utils;
+
+import java.lang.reflect.Method;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
+import org.osgi.service.blueprint.container.ComponentDefinitionException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ServiceListener {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceListener.class);
+    
+    private Object listener;
+    private String registerMethod;
+    private String unregisterMethod;
+    private ExtendedBlueprintContainer blueprintContainer;
+
+    private List<Method> registerMethods;
+    private List<Method> unregisterMethods;
+    private boolean initialized = false;
+
+    public void setListener(Object listener) {
+        this.listener = listener;
+    }
+
+    public void setRegisterMethod(String method) {
+        this.registerMethod = method;
+    }
+    
+    public void setUnregisterMethod(String method) {
+        this.unregisterMethod = method;
+    }
+    
+    public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
+        this.blueprintContainer = blueprintContainer;
+    }
+    
+    public void register(Object service, Map properties) {
+        init(service);
+        invokeMethod(registerMethods, service, properties);
+    }
+
+    public void unregister(Object service, Map properties) {
+        init(service);
+        invokeMethod(unregisterMethods, service, properties);
+    }
+
+    private synchronized void init(Object service) {
+        if (initialized) {
+            return;
+        }
+        Class[] paramTypes = new Class[] { service != null ? service.getClass() : null, Map.class };
+        Class listenerClass = listener.getClass();
+
+        if (registerMethod != null) {
+            registerMethods = ReflectionUtils.findCompatibleMethods(listenerClass, registerMethod, paramTypes);
+            if (registerMethods.size() == 0) {
+                throw new ComponentDefinitionException("No matching methods found for listener registration method: " + registerMethod);
+            }
+            LOGGER.debug("Found register methods: {}", registerMethods);
+        }
+        if (unregisterMethod != null) {
+            unregisterMethods = ReflectionUtils.findCompatibleMethods(listenerClass, unregisterMethod, paramTypes);
+            if (unregisterMethods.size() == 0) {
+                throw new ComponentDefinitionException("No matching methods found for listener unregistration method: " + unregisterMethod);
+            }
+            LOGGER.debug("Found unregister methods: {}", unregisterMethods);
+        }
+        initialized = true;
+    }
+
+    private void invokeMethod(List<Method> methods, Object service, Map properties) {
+        if (methods == null || methods.isEmpty()) {
+            return;
+        }
+        for (Method method : methods) {
+            try {
+                ReflectionUtils.invoke(blueprintContainer.getAccessControlContext(), 
+                                       method, listener, service, properties);
+            } catch (Exception e) {
+                LOGGER.error("Error calling listener method " + method, e);
+            }
+        }
+    }
+
+}
+
diff --git a/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/ext/PropertyPlaceholderTest.java b/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/ext/PropertyPlaceholderTest.java
index 12b79f31..fea3f397 100644
--- a/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/ext/PropertyPlaceholderTest.java
+++ b/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/ext/PropertyPlaceholderTest.java
@@ -23,6 +23,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.aries.blueprint.utils.PropertyPlaceholder;
 import org.junit.Before;
 import org.junit.Test;
 import org.osgi.service.blueprint.reflect.ValueMetadata;
