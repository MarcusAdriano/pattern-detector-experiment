diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 209be1db..daace697 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -818,7 +818,6 @@ public Object run() throws Exception
             }
         }
 
-        
         AccessController.doPrivileged(
                 new PrivilegedAction() {
                     public Object run()  {
@@ -861,9 +860,6 @@ public Object run() {
  			threadList.clear();
 		}
 	   
- 
-
-	
 	    // close the listener socket
 	    try{
 	       serverSocket.close();
@@ -996,6 +992,11 @@ protected void startNetworkServer() throws Exception
 	public void shutdown()
 		throws Exception
 	{
+		// Wait up to 10 seconds for things to really shut down
+		// need a quiet ping so temporarily disable the logwriter
+		PrintWriter savWriter;
+		int ntry;
+        try {
 		setUpSocket();
 		writeCommandHeader(COMMAND_SHUTDOWN);
 		// DERBY-2109: transmit user credentials for System Privileges check
@@ -1003,32 +1004,33 @@ public void shutdown()
 		writeLDString(passwordArg);
 		send();
 		readResult();
-		// Wait up to 10 seconds for things to really shut down
-		// need a quiet ping so temporarily disable the logwriter
-		PrintWriter savWriter = logWriter;
+            savWriter = logWriter;
 		// DERBY-1571: If logWriter is null, stack traces are printed to
 		// System.err. Set logWriter to a silent stream to suppress stack
 		// traces too.
 		FilterOutputStream silentStream = new FilterOutputStream(null) {
-				public void write(int b) { }
-				public void flush() { }
-				public void close() { }
+                public void write(int b) {
+                }
+
+                public void flush() {
+                }
+
+                public void close() {
+                }
 			};
 		setLogWriter(new PrintWriter(silentStream));
-		int ntry;
-		for (ntry = 0; ntry < SHUTDOWN_CHECK_ATTEMPTS; ntry++)
-		{
+            for (ntry = 0; ntry < SHUTDOWN_CHECK_ATTEMPTS; ntry++) {
 			Thread.sleep(SHUTDOWN_CHECK_INTERVAL);
 			try {
                 pingWithNoOpen();
-			} catch (Exception e) 
-			{
+                } catch (Exception e) {
                 // as soon as we can't ping return
 				break;
 			}
 		}
+        } finally {
         closeSocket();
-        
+        }		
         
         if (ntry == SHUTDOWN_CHECK_ATTEMPTS)
             consolePropertyMessage("DRDA_ShutdownError.S", new String [] {
@@ -1152,10 +1154,13 @@ public boolean isServerStarted() throws Exception
      */
 	public void ping() throws Exception
 	{
+        try {
         setUpSocket();
         pingWithNoOpen();
+        } finally {
         closeSocket();
     }
+    }
     
     /**
      * Ping the server using the client socket that is already open.
@@ -1204,6 +1209,7 @@ public void trace(boolean on)
 	public void trace(int connNum, boolean on)
 		throws Exception
 	{
+        try {
 		setUpSocket();
 		writeCommandHeader(COMMAND_TRACE);
 		commandOs.writeInt(connNum);
@@ -1211,9 +1217,12 @@ public void trace(int connNum, boolean on)
 		send();
 		readResult();
 		consoleTraceMessage(connNum, on);
+        } finally {
         closeSocket();
 	}
 
+	}
+
 	/**
 	 * Print trace change message to console
 	 *
@@ -1246,13 +1255,16 @@ private void consoleTraceMessage(int connNum, boolean on)
 	public void logConnections(boolean on)
 		throws Exception
 	{
+        try {
 		setUpSocket();
 		writeCommandHeader(COMMAND_LOGCONNECTIONS);
 		writeByte(on ? 1 : 0);
 		send();
 		readResult();
+        } finally {
         closeSocket();
 	}
+	}
 
 	/**
 	 *@see NetworkServerControl#setTraceDirectory
@@ -1260,14 +1272,18 @@ public void logConnections(boolean on)
 	public void sendSetTraceDirectory(String traceDirectory)
 		throws Exception
 	{
+        try {
 		setUpSocket();
 		writeCommandHeader(COMMAND_TRACEDIRECTORY);
 		writeLDString(traceDirectory);
 		send();
 		readResult();
+        } finally {
         closeSocket();
 	}
 
+	}
+
 	/**
 	 *@see NetworkServerControl#getSysinfo
 	 */
@@ -1323,17 +1339,21 @@ public void usage()
 	 */
 	public void netSetMaxThreads(int max) throws Exception
 	{
+        try {
 		setUpSocket();
 		writeCommandHeader(COMMAND_MAXTHREADS);
 		commandOs.writeInt(max);
 		send();
 		readResult();
 		int newval = readInt();
-		consolePropertyMessage("DRDA_MaxThreadsChange.I", 
- 					new Integer(newval).toString());
+            consolePropertyMessage("DRDA_MaxThreadsChange.I", new Integer(
+                    newval).toString());
+        } finally {
         closeSocket();
 	}
 
+	}
+
 	/**
 	 * Set network server connection timeslice parameter
 	 *
@@ -1345,6 +1365,7 @@ public void netSetMaxThreads(int max) throws Exception
 	public void netSetTimeSlice(int timeslice)
 		throws Exception
 	{
+        try {
 		setUpSocket();
 		writeCommandHeader(COMMAND_TIMESLICE);
 		commandOs.writeInt(timeslice);
@@ -1353,8 +1374,10 @@ public void netSetTimeSlice(int timeslice)
 		int newval = readInt();
 		consolePropertyMessage("DRDA_TimeSliceChange.I", 
 									   new Integer(newval).toString());
+        } finally {
         closeSocket();
 	}
+	}
 
 	/**
 	 * Get current properties
@@ -1365,20 +1388,23 @@ public void netSetTimeSlice(int timeslice)
 	public Properties getCurrentProperties() 
 		throws Exception
 	{
+        try {
 		setUpSocket();
 		writeCommandHeader(COMMAND_PROPERTIES);
 		send();
-		byte [] val = readBytesReply("DRDA_PropertyError.S");
-        closeSocket();
+            byte[] val = readBytesReply("DRDA_PropertyError.S");
+            
 		Properties p = new Properties();
 		try {
 			ByteArrayInputStream bs = new ByteArrayInputStream(val);
 			p.load(bs);
 		} catch (IOException io) {
-			consolePropertyMessage("DRDA_IOException.S", 
-						io.getMessage());
+                consolePropertyMessage("DRDA_IOException.S", io.getMessage());
 		}
 		return p;
+        } finally {
+            closeSocket();
+        }		
 	}
 
 	/**
