diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/AnyResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/AnyResultSet.java
index 371783e4..417f9384 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/AnyResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/AnyResultSet.java
@@ -155,6 +155,9 @@ public void	finish() throws StandardException
 	 */
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow candidateRow = null;
 		ExecRow secondRow = null;
 	    ExecRow result = null;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
index 885742a3..d276892c 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
@@ -137,6 +137,13 @@ public final Activation getActivation()
 		return activation;
 	}
 
+	protected final boolean isXplainOnlyMode()
+	{
+		LanguageConnectionContext lcc = getLanguageConnectionContext();
+		return
+		  (lcc.getRunTimeStatisticsMode() && lcc.getXplainOnlyMode());
+	}
+
 	// NoPutResultSet interface
 
 	/**
@@ -248,12 +255,7 @@ public final void	open() throws StandardException
 		attachStatementContext();
 
 		try {
-			LanguageConnectionContext lcc = getLanguageConnectionContext();
-			if(lcc.getRunTimeStatisticsMode() && lcc.getXplainOnlyMode()) {
-				// do nothing
-			} else {
 				openCore();
-			}
 
 		} catch (StandardException se) {
 			activation.checkStatementValidity();
@@ -455,8 +457,8 @@ public ExecRow	getFirstRow()
 	 */
 	public final ExecRow	getNextRow() throws StandardException 
 	{
-		LanguageConnectionContext lcc = getLanguageConnectionContext();
-		if(lcc.getRunTimeStatisticsMode() && lcc.getXplainOnlyMode()){
+		if( isXplainOnlyMode() )
+		{
 			// return null to indicate no results available and 
 			// to bypass the execution
 			return null;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BulkTableScanResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BulkTableScanResultSet.java
index 694391b0..6fc94efd 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BulkTableScanResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/BulkTableScanResultSet.java
@@ -286,6 +286,9 @@ public void reopenCore() throws StandardException
 	 */
 	public ExecRow getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
             
         checkCancellationFlag();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
index 697efd77..a0f1d0a9 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java
@@ -100,6 +100,9 @@ public void	openCore() throws StandardException {
      */
 	public ExecRow	getNextRowCore() throws StandardException {
 
+		if( isXplainOnlyMode() )
+			return null;
+
 		if ( isOpen ) {
 	        if ( ! next ) {
 	            next = true;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java
index 564f4b27..3a259c3f 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java
@@ -338,6 +338,9 @@ private ExecRow fetchBaseRow()
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
 		
+		if( isXplainOnlyMode() )
+			return null;
+
 		beginTime = getCurrentTimeMillis();
 		if (searchRow == null)
 		{
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java
index 1f4ababc..9351840c 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java
@@ -170,6 +170,9 @@ public void	openCore() throws StandardException
 	 */
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecIndexRow execIndexRow = null;
 	    ExecIndexRow aggResult = null;
 		boolean	cloneArg = true;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScanResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScanResultSet.java
index d7e56762..bc28a98c 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScanResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/DistinctScanResultSet.java
@@ -96,6 +96,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	public ExecRow getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
 
 		beginTime = getCurrentTimeMillis();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
index 45d872bd..4240b1e6 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
@@ -352,6 +352,9 @@ private ScanController loadSorter()
 	 */
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		if (!isOpen)
 		{
 			return null;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java
index 8dee7b46..dd64a401 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java
@@ -362,6 +362,9 @@ private void resetProbeVariables() throws StandardException
 	 */
 	public ExecRow getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
 		DataValueDescriptor[] columns = null;
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashTableResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashTableResultSet.java
index d38518a4..7ff21d27 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashTableResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/HashTableResultSet.java
@@ -298,6 +298,9 @@ private void resetProbeVariables() throws StandardException
 	 * @return the next row in the result
 	 */
 	public ExecRow	getNextRowCore() throws StandardException {
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
 		DataValueDescriptor[] columns = null;
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java
index 0827dcb1..93d10d97 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java
@@ -297,6 +297,8 @@ public void	reopenCore() throws StandardException {
 	 * @return the next row in the result
 	 */
 	public ExecRow	getNextRowCore() throws StandardException {
+		if( isXplainOnlyMode() )
+			return null;
 
 	    ExecRow sourceRow = null;
 		ExecRow retval = null;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/LastIndexKeyResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/LastIndexKeyResultSet.java
index bc789330..5da1c7d2 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/LastIndexKeyResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/LastIndexKeyResultSet.java
@@ -203,6 +203,9 @@ public void	openCore() throws StandardException
 	 */
 	public ExecRow getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		if (returnedRow || !isOpen)
 		{
 		    clearCurrentRow();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MaterializedResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MaterializedResultSet.java
index da8979ec..7a4427b9 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MaterializedResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MaterializedResultSet.java
@@ -176,6 +176,9 @@ public void	reopenCore() throws StandardException
 	 */
 	public ExecRow	getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		ExecRow result = null;
 
 		beginTime = getCurrentTimeMillis();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java
index 34cd51f2..b1cc3d44 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java
@@ -116,6 +116,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	public ExecRow	getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		beginTime = getCurrentTimeMillis();
 		if (! isOpen)
 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java
index 0071ed98..9fff0acc 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java
@@ -416,6 +416,9 @@ protected boolean skipScan(
      */
     public ExecRow getNextRowCore() throws StandardException
     {
+		if( isXplainOnlyMode() )
+			return null;
+
         checkCancellationFlag();
 
         // Step 1.
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java
index 4dca3e31..2305d0cc 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java
@@ -74,6 +74,9 @@ void clearScanState()
 	 */
 	public ExecRow	getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
 		boolean haveRow = false;
 	    boolean restrict = false;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java
index d7a29104..fd378bdd 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java
@@ -68,6 +68,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	public ExecRow	getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
 		boolean haveRow = false;
 	    boolean restrict = false;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java
index 14526b80..eb028454 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java
@@ -175,6 +175,9 @@ public void	reopenCore() throws StandardException
 	 */
 	public ExecRow	getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		ExecRow		sourceRow = null;
 		ExecRow		result = null;
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/OnceResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/OnceResultSet.java
index e2d5adca..30ab97d3 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/OnceResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/OnceResultSet.java
@@ -161,6 +161,9 @@ public void	reopenCore() throws StandardException
 	 */
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow candidateRow = null;
 		ExecRow secondRow = null;
 	    ExecRow result = null;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java
index 3c8239d5..0894c24e 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java
@@ -242,6 +242,8 @@ public void	reopenCore() throws StandardException
 	 * @return the next row in the result
 	 */
 	public ExecRow	getNextRowCore() throws StandardException {
+		if( isXplainOnlyMode() )
+			return null;
 
 	    ExecRow candidateRow = null;
 	    ExecRow result = null;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java
index 19637f37..cea00aa4 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java
@@ -180,6 +180,8 @@ public void reopenCore() throws StandardException {
      * @return the next row in the result
      */
     public ExecRow  getNextRowCore() throws StandardException {
+	if( isXplainOnlyMode() )
+		return null;
 
         ExecRow result = null;
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowResultSet.java
index 86da6468..2ea39e28 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/RowResultSet.java
@@ -131,6 +131,8 @@ public void	openCore() throws StandardException
 	 * @exception StandardException thrown on failure.
      */
 	public ExecRow	getNextRowCore() throws StandardException {
+		if( isXplainOnlyMode() )
+			return null;
 
 		currentRow = null;
 		beginTime = getCurrentTimeMillis();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java
index d8b2e166..db412348 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java
@@ -152,6 +152,9 @@ public void	openCore() throws StandardException
 	 */
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		if (nextSatisfied)
 		{
 			clearCurrentRow();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
index 3574eb4c..71cb3fc9 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
@@ -499,6 +499,9 @@ public ExecRow	getFirstRow()
 	 */
 	public ExecRow	getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		ExecRow result = null;
 
 		beginTime = getCurrentTimeMillis();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java
index 81b7aaa5..b9b578b8 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java
@@ -135,6 +135,9 @@ public void	openCore() throws StandardException
 	 */
 	public ExecRow	getNextRowCore() throws StandardException
     {
+		if( isXplainOnlyMode() )
+			return null;
+
 		beginTime = getCurrentTimeMillis();
 	    if ( isOpen )
         {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java
index f6852f30..166018f2 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java
@@ -332,6 +332,9 @@ private ScanController loadSorter()
 	 */
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 		if (!isOpen)
 		{
 			return null;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java
index 1ddaffc6..2a89d1f6 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java
@@ -455,6 +455,9 @@ public void	reopenCore() throws StandardException
 	 */
 	public ExecRow getNextRowCore() throws StandardException
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
         checkCancellationFlag();
             
 		if (currentRow == null || scanRepositioned)
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java
index 82d32c62..f3305550 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java
@@ -115,6 +115,9 @@ public void	openCore() throws StandardException
  	 *	@exception StandardException thrown on failure
 	 */
 	public ExecRow	getNextRowCore() throws StandardException {
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
 
 		beginTime = getCurrentTimeMillis();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
index b90a6464..dfd4f4e1 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
@@ -394,6 +394,9 @@ public void reopenCore() throws StandardException
      */
 	public ExecRow	getNextRowCore() throws StandardException 
 	{
+		if( isXplainOnlyMode() )
+			return null;
+
 	    ExecRow result = null;
 
 		beginTime = getCurrentTimeMillis();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/WindowResultSet.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/WindowResultSet.java
index c0e7fc9a..f728d54f 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/WindowResultSet.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/WindowResultSet.java
@@ -175,6 +175,9 @@ public void reopenCore() throws StandardException {
      */
     public ExecRow getNextRowCore() throws StandardException
     {
+		if( isXplainOnlyMode() )
+			return null;
+
         ExecRow sourceRow = null;
         ExecRow retval = null;
         boolean restrict = false;
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java
index e8859131..46cb6a34 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java
@@ -92,6 +92,7 @@
         "union",
         "update",
         "valuesclause",
+        "xplain",
         };
     
     /**
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
index 651206ea..bb7ed879 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
@@ -72,7 +72,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  *
  * FIXME -- some general to-do items that I don't want to forget:
  * - should resultSetNumber be its own column in sysxplain_resultsets?
- * - need tests of xplain-only mode
+ * - need MORE tests of xplain-only mode
  * - need a test of external sorting/merging
  * - need to cross-check the result set types, and verify that they're
  *   all tested at least once
@@ -521,6 +521,18 @@ private static void enableXplainStyleWithTiming(Statement s)
         s.execute("call syscs_util.syscs_set_statistics_timing(1)");
     }
     
+    private static void enableXplainOnlyMode(Statement s)
+            throws SQLException
+    {
+        s.execute("call syscs_util.syscs_set_xplain_mode(1)");
+    }
+    
+    private static void clearXplainOnlyMode(Statement s)
+            throws SQLException
+    {
+        s.execute("call syscs_util.syscs_set_xplain_mode(0)");
+    }
+    
     /**
      * 
      * @param s
@@ -560,6 +572,7 @@ private static void disableXplainStyle(Statement s)
     					null);
     		}
     	} 
+        s.execute("call syscs_util.syscs_set_xplain_schema('')");
     }
 
     private static void verifyXplainUnset(Statement s)
@@ -625,6 +638,32 @@ private void dumpResultSets(Statement s)
         rs.close();
     }
     
+    private void dumpStatements(Statement s)
+        throws SQLException
+    {
+        ResultSet rs;
+        rs = s.executeQuery("select * from xpltest.sysxplain_statements");
+        while (rs.next())
+        {
+            System.out.println(
+                    rs.getString("stmt_id")+","+
+                    rs.getString("stmt_name")+","+
+                    rs.getString("stmt_type")+","+
+                    rs.getString("stmt_text")+","+
+                    rs.getString("jvm_id")+","+
+                    rs.getString("os_identifier")+","+
+                    rs.getString("xplain_mode")+","+
+                    rs.getString("xplain_time")+","+
+                    rs.getString("xplain_thread_id")+","+
+                    rs.getString("transaction_id")+","+
+                    rs.getString("session_id")+","+
+                    rs.getString("database_name")+","+
+                    rs.getString("drda_id")+","+
+                    rs.getString("timing_id"));
+        }
+        rs.close();
+    }
+    
     /**
      * Added by DERBY-4587
      * Returns the stmt_id for this particular statement
@@ -1046,6 +1085,300 @@ public void testSimpleQuery() throws Exception
         }
     }
     
+    private String getStmtIDByName(Statement s, String sName)
+			throws SQLException
+    {
+    	ResultSet rs;
+        String stmt_id = "?";
+        rs = s.executeQuery( 
+    		"select stmt_id from XPLTEST.sysxplain_statements "+
+		"where stmt_name='"+sName+"'"); 
+        if( rs.next() )
+	{
+            stmt_id = rs.getString(1); 
+	    //System.out.println("Found statemnt id " + stmt_id);
+	}
+        rs.close();
+        return stmt_id;
+    }
+    public void testSimpleXplainOnly() throws Exception
+    {
+        Statement s = createStatement();
+
+        enableXplainStyle(s);
+        enableXplainOnlyMode(s);
+	s.setCursorName("1");
+        JDBC.assertEmpty(s.executeQuery(
+        	"SELECT country from countries "+
+	         "WHERE region = 'Central America'" ));
+        clearXplainOnlyMode(s);
+        disableXplainStyle(s);
+
+	// dumpStatements(s);
+        // dumpResultSets(s);
+	// There should be 1 statement captured with stmt_id='1'.
+	// It should have a PROJECTION and a TABLESCAN; the TABLESCAN should be
+	// on the COUNTRIES table.
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_statements"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_statements "+
+	    "where stmt_name='1'"), "1");
+	String stmt_id = getStmtIDByName( s, "1" );
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets "+
+	    "where stmt_id='"+stmt_id+"'"), "2");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets "+
+	    "where stmt_id='"+stmt_id+"' and op_identifier='PROJECTION'"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets "+
+	    "where stmt_id='"+stmt_id+"' and op_identifier='TABLESCAN'"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select op_details from xpltest.sysxplain_resultsets "+
+	    "where stmt_id='"+stmt_id+"' and op_identifier='TABLESCAN'"),
+	    "T: COUNTRIES");
+
+        enableXplainStyle(s);
+        enableXplainOnlyMode(s);
+	s.setCursorName("2");
+        JDBC.assertEmpty(s.executeQuery(
+            "select sql_text from syscs_diag.transaction_table " +
+	    "where status != 'IDLE'" ));
+        clearXplainOnlyMode(s);
+        disableXplainStyle(s);
+
+	//dumpStatements(s);
+        //dumpResultSets(s);
+
+	// This statement should have three result sets:
+	// - PROJECTION (select sql_text)
+	// - PROJECT-FILTER (where status != IDLE)
+	// - VTI (syscs_diag.transaction_table)
+	//
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_statements"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_statements "+
+	    "where stmt_name='2'"), "1");
+	stmt_id = getStmtIDByName( s, "2" );
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets "+
+	    "where stmt_id='"+stmt_id+"' and op_identifier='PROJECTION'"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets "+
+	    "where stmt_id='"+stmt_id+"' and "+
+	    "      op_identifier='PROJECT-FILTER'"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets "+
+	    "where stmt_id='"+stmt_id+"' and op_identifier='VTI'"), "1");
+
+        String selectStatement = 
+            "select region, count(country) from app.countries group by region";
+        enableXplainStyle(s);
+        enableXplainOnlyMode(s);
+	s.setCursorName("3");
+        JDBC.assertEmpty(s.executeQuery(selectStatement));
+
+        clearXplainOnlyMode(s);
+        disableXplainStyle(s);
+	//dumpStatements(s);
+        //dumpResultSets(s);
+
+        // This statement is executed as a PROJECTION with a child GROUPBY
+        // with a child PROJECTION with a child TABLESCAN. The TABLESCAN
+        // has a corresponding SCAN_PROPS row, the GROUPBY has a
+        // corresponding SORT_PROPS row. But since we're XPLAIN-ONLY, none
+	// of the actual processing did anything.
+        //
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets"), "4");
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select op_identifier from xpltest.sysxplain_resultsets " +
+                    "order by op_identifier"),
+            new String[][] {
+                {"GROUPBY"},{"PROJECTION"},{"PROJECTION"},{"TABLESCAN"} } );
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets " +
+            "where scan_rs_id is not null"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets " +
+            "where sort_rs_id is not null"), "1");
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select s.stmt_text, rs.op_identifier," +
+                    " srt.no_input_rows, srt.no_output_rows " +
+                    " from xpltest.sysxplain_sort_props srt, " +
+                    " xpltest.sysxplain_resultsets rs, " +
+                    " xpltest.sysxplain_statements s " +
+                    " where rs.stmt_id = s.stmt_id and " +
+                    " rs.sort_rs_id = srt.sort_rs_id"),
+            new String[][] {
+                {selectStatement, "GROUPBY", "0", "0"} } );
+
+        JDBC.assertUnorderedResultSet(s.executeQuery(
+                    "select srt.sort_type, srt.no_input_rows, " +
+                    " srt.no_output_rows, srt.no_merge_runs, " +
+                    " srt.merge_run_details, srt.eliminate_duplicates, " +
+                    " srt.in_sort_order, srt.distinct_aggregate " +
+                    "from xpltest.sysxplain_sort_props srt " +
+                    "join xpltest.sysxplain_resultsets rs " +
+                    "on srt.sort_rs_id = rs.sort_rs_id " +
+                    "where rs.op_identifier='GROUPBY'"),
+                new String[][] {
+                    {"IN","0","0",null, null, null,"N","N"} } );
+    }
+
+    public void testXplainOnlyExecutePrepared() throws Exception
+    {
+        Statement s = createStatement();
+
+        String selectStatement = 
+            "select region, count(country) from app.countries group by region";
+        PreparedStatement ps = prepareStatement( selectStatement );
+        enableXplainStyle(s);
+        enableXplainOnlyMode(s);
+        JDBC.assertEmpty(ps.executeQuery());
+        clearXplainOnlyMode(s);
+        disableXplainStyle(s);
+	//dumpStatements(s);
+        //dumpResultSets(s);
+
+        // This statement is executed as a PROJECTION with a child GROUPBY
+        // with a child PROJECTION with a child TABLESCAN. The TABLESCAN
+        // has a corresponding SCAN_PROPS row, the GROUPBY has a
+        // corresponding SORT_PROPS row. But since we're XPLAIN-ONLY, none
+	// of the actual processing did anything.
+        //
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets"), "4");
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select op_identifier from xpltest.sysxplain_resultsets " +
+                    "order by op_identifier"),
+            new String[][] {
+                {"GROUPBY"},{"PROJECTION"},{"PROJECTION"},{"TABLESCAN"} } );
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets " +
+            "where scan_rs_id is not null"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets " +
+            "where sort_rs_id is not null"), "1");
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select s.stmt_text, rs.op_identifier," +
+                    " srt.no_input_rows, srt.no_output_rows " +
+                    " from xpltest.sysxplain_sort_props srt, " +
+                    " xpltest.sysxplain_resultsets rs, " +
+                    " xpltest.sysxplain_statements s " +
+                    " where rs.stmt_id = s.stmt_id and " +
+                    " rs.sort_rs_id = srt.sort_rs_id"),
+            new String[][] {
+                {selectStatement, "GROUPBY", "0", "0"} } );
+
+        JDBC.assertUnorderedResultSet(s.executeQuery(
+                    "select srt.sort_type, srt.no_input_rows, " +
+                    " srt.no_output_rows, srt.no_merge_runs, " +
+                    " srt.merge_run_details, srt.eliminate_duplicates, " +
+                    " srt.in_sort_order, srt.distinct_aggregate " +
+                    "from xpltest.sysxplain_sort_props srt " +
+                    "join xpltest.sysxplain_resultsets rs " +
+                    "on srt.sort_rs_id = rs.sort_rs_id " +
+                    "where rs.op_identifier='GROUPBY'"),
+                new String[][] {
+                    {"IN","0","0",null, null, null,"N","N"} } );
+
+	
+	// Since now we're not in XplainOnly mode, the prepared statement
+	// returns the expected normal result set.
+
+        JDBC.assertUnorderedResultSet(ps.executeQuery(),
+            new String[][] { 
+                {"Africa", "19"}, {"Asia", "15"},
+                {"Australia and New Zealand", "2"}, {"Caribbean", "10"},
+                {"Central America", "6"}, {"Central Asia", "4"},
+                {"Europe", "29"}, {"Middle East", "7"},
+                {"North Africa", "5"}, {"North America", "3"},
+                {"Pacific Islands", "3"}, {"South America", "11"} } );
+
+	// And then back to empty again:
+        enableXplainStyle(s);
+        enableXplainOnlyMode(s);
+        JDBC.assertEmpty(ps.executeQuery());
+        clearXplainOnlyMode(s);
+        disableXplainStyle(s);
+        
+        // Verify that statistics were collected.
+        JDBC.assertDrainResults(
+                s.executeQuery("select * from xpltest.sysxplain_statements"),
+                1);
+    }
+    
+    public void testXplainOnlyPrepared() throws Exception
+    {
+        Statement s = createStatement();
+
+        String selectStatement = 
+            "select region, count(country) from app.countries group by region";
+
+        // Try preparing the statement while we're in xplain-only mode, then
+        // execute it normally.
+
+        enableXplainStyle(s);
+        enableXplainOnlyMode(s);
+        PreparedStatement ps2 = prepareStatement( selectStatement );
+        clearXplainOnlyMode(s);
+        JDBC.assertUnorderedResultSet(ps2.executeQuery(),
+            new String[][] { 
+                {"Africa", "19"}, {"Asia", "15"},
+                {"Australia and New Zealand", "2"}, {"Caribbean", "10"},
+                {"Central America", "6"}, {"Central Asia", "4"},
+                {"Europe", "29"}, {"Middle East", "7"},
+                {"North Africa", "5"}, {"North America", "3"},
+                {"Pacific Islands", "3"}, {"South America", "11"} } );
+        disableXplainStyle(s);
+	//dumpStatements(s);
+        //dumpResultSets(s);
+
+        // This statement is executed as a PROJECTION with a child GROUPBY
+        // with a child PROJECTION with a child TABLESCAN. The TABLESCAN
+        // has a corresponding SCAN_PROPS row, the GROUPBY has a
+        // corresponding SORT_PROPS row. But since we're XPLAIN-ONLY, none
+	// of the actual processing did anything.
+        //
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets"), "4");
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select op_identifier from xpltest.sysxplain_resultsets " +
+                    "order by op_identifier"),
+            new String[][] {
+                {"GROUPBY"},{"PROJECTION"},{"PROJECTION"},{"TABLESCAN"} } );
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets " +
+            "where scan_rs_id is not null"), "1");
+        JDBC.assertSingleValueResultSet(s.executeQuery(
+            "select count(*) from xpltest.sysxplain_resultsets " +
+            "where sort_rs_id is not null"), "1");
+        JDBC.assertFullResultSet(s.executeQuery(
+                    "select s.stmt_text, rs.op_identifier," +
+                    " srt.no_input_rows, srt.no_output_rows " +
+                    " from xpltest.sysxplain_sort_props srt, " +
+                    " xpltest.sysxplain_resultsets rs, " +
+                    " xpltest.sysxplain_statements s " +
+                    " where rs.stmt_id = s.stmt_id and " +
+                    " rs.sort_rs_id = srt.sort_rs_id"),
+            new String[][] {
+                {selectStatement, "GROUPBY", "114", "12"} } );
+
+        JDBC.assertUnorderedResultSet(s.executeQuery(
+                    "select srt.sort_type, srt.no_input_rows, " +
+                    " srt.no_output_rows, srt.no_merge_runs, " +
+                    " srt.merge_run_details, srt.eliminate_duplicates, " +
+                    " srt.in_sort_order, srt.distinct_aggregate " +
+                    "from xpltest.sysxplain_sort_props srt " +
+                    "join xpltest.sysxplain_resultsets rs " +
+                    "on srt.sort_rs_id = rs.sort_rs_id " +
+                    "where rs.op_identifier='GROUPBY'"),
+                new String[][] {
+                    {"IN","114","12",null, null, null,"N","N"} } );
+    }
     
     
     /**
