diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
index d3f3baff..e019a51e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
@@ -287,13 +287,11 @@ public ValueNode bindExpression(
 		/* Add ourselves to the aggregateVector before we do anything else */
 		aggregateVector.addElement(this);
 
-		super.bindExpression(
-				fromList, subqueryList,
-				aggregateVector);
-
         // operand being null means a count(*)
 		if (operand != null)
 		{
+            bindOperand(fromList, subqueryList, aggregateVector);
+            
 			/*
 			** Make sure that we don't have an aggregate 
 			** IMMEDIATELY below us.  Don't search below
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java
index 470a07aa..1dc95d7a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java
@@ -81,7 +81,7 @@ public ValueNode bindExpression(
 		Vector	aggregateVector)
 			throws StandardException
 	{
-        ValueNode boundExpression = super.bindExpression( fromList, subqueryList, aggregateVector);
+        bindOperand( fromList, subqueryList, aggregateVector);
 
         // This operator is not allowed on XML types.
         TypeId operandType = operand.getTypeId();
@@ -93,7 +93,7 @@ public ValueNode bindExpression(
 
         setType( new DataTypeDescriptor( TypeId.getBuiltInTypeId( Types.INTEGER),
                                          operand.getTypeServices().isNullable()));
-        return boundExpression;
+        return this;
     }
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExtractOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExtractOperatorNode.java
index 15c8218e..c1711f67 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExtractOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExtractOperatorNode.java
@@ -90,7 +90,7 @@ public ValueNode bindExpression(
 		int	operandType;
 		TypeId opTypeId;
 
-		super.bindExpression(fromList, subqueryList,
+		bindOperand(fromList, subqueryList,
 				aggregateVector);
 
 		opTypeId = operand.getTypeId();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java
index 765d3751..2c51112e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LengthOperatorNode.java
@@ -94,7 +94,7 @@ public ValueNode bindExpression(
 	{
 		TypeId	operandType;
 
-		super.bindExpression(fromList, subqueryList,
+		bindOperand(fromList, subqueryList,
 				aggregateVector);
 
 		/*
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
index 393deb03..16ead255 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
@@ -77,7 +77,7 @@ public ValueNode bindExpression(
 	{
 		TypeId	operandType;
 
-		super.bindExpression(fromList, subqueryList, 
+		bindOperand(fromList, subqueryList, 
 				aggregateVector);
 
 		/*
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java
index 9c38177a..dd8a7d10 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java
@@ -89,14 +89,13 @@ public ValueNode bindExpression(
 		Vector	aggregateVector)
 			throws StandardException
 	{
-		bindUnaryOperator(fromList, subqueryList, aggregateVector);
+		bindOperand(fromList, subqueryList, aggregateVector);
 
 		/*
 		** If the operand is not boolean, cast it.
 		*/
 
-		if ( ! operand.getTypeServices().getTypeId().getSQLTypeName().equals(
-														TypeId.BOOLEAN_NAME))
+		if (!operand.getTypeServices().getTypeId().isBooleanTypeId())
 		{
 			operand = (ValueNode)
 				getNodeFactory().getNode(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java
index f25662ef..188da434 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java
@@ -154,7 +154,7 @@ public ValueNode bindExpression(
 				&& operand.getTypeServices() == null)
 				return this;
 
-		super.bindExpression(fromList, subqueryList,
+		bindOperand(fromList, subqueryList,
 				aggregateVector);
 
 		if (operatorType == SQRT || operatorType == ABSOLUTE)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java
index b4f10e23..ba85db95 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java
@@ -74,7 +74,7 @@ public ValueNode bindExpression(
 		Vector	aggregateVector)
 			throws StandardException
 	{
-		super.bindExpression(fromList, subqueryList, 
+		bindOperand(fromList, subqueryList, 
 							 aggregateVector);
 
 		/* Set type info for this node */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java
index 5dac515e..342fa648 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java
@@ -97,7 +97,7 @@ public void init( Object operand, Object targetType)
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	protected ValueNode bindUnaryOperator(
+	public ValueNode bindExpression (
 					FromList fromList, SubqueryList subqueryList,
 					Vector aggregateVector)
 				throws StandardException
@@ -105,7 +105,7 @@ protected ValueNode bindUnaryOperator(
         boolean isIdentity = false; // Is this function the identity operator?
         boolean operandIsNumber = false;
         
-        super.bindUnaryOperator( fromList, subqueryList, aggregateVector);
+        bindOperand( fromList, subqueryList, aggregateVector);
         DataTypeDescriptor operandType = operand.getTypeServices();
         switch( operandType.getJDBCTypeId())
         {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryLogicalOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryLogicalOperatorNode.java
index da7925ae..37adcab5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryLogicalOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryLogicalOperatorNode.java
@@ -71,7 +71,7 @@ public ValueNode bindExpression(
 		Vector	aggregateVector)
 			throws StandardException
 	{
-		super.bindExpression(fromList, subqueryList,
+		bindOperand(fromList, subqueryList,
 							 aggregateVector);
 
 		/*
@@ -84,9 +84,8 @@ public ValueNode bindExpression(
 		** the grammar, so this test will become useful.
 		*/
 
-		if ( ! operand.getTypeServices().getTypeId().equals(TypeId.BOOLEAN_ID))
+		if ( ! operand.getTypeServices().getTypeId().isBooleanTypeId())
 		{
-operand.treePrint();
 			throw StandardException.newException(SQLState.LANG_UNARY_LOGICAL_NON_BOOLEAN);
 		}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
index 37e9a69e..714a1f14 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
@@ -62,7 +62,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 {
 	String	operator;
 	String	methodName;
-	int operatorType;
+    
+    /**
+     * Operator type, only valid for XMLPARSE and XMLSERIALIZE.
+     */
+	private int operatorType;
 
 	String		resultInterfaceType;
 	String		receiverInterfaceType;
@@ -84,6 +88,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	// TernarnyOperatorNode. Subsequent unary operators (whether
 	// XML-related or not) should follow this example when
 	// possible.
+    //
+    // This has lead to this class having somewhat of
+    // a confused personality. In one mode it is really
+    // a parent (abstract) class for various unary operator
+    // node implementations, in its other mode it is a concrete
+    // class for XMLPARSE and XMLSERIALIZE.
 
 	public final static int XMLPARSE_OP = 0;
 	public final static int XMLSERIALIZE_OP = 1;
@@ -286,6 +296,9 @@ public ParameterNode getParameterOperand() throws StandardException
 	/**
 	 * Bind this expression.  This means binding the sub-expressions,
 	 * as well as figuring out what the return type is for this expression.
+     * This method is the implementation for XMLPARSE and XMLSERIALIZE.
+     * Sub-classes need to implement their own bindExpression() method
+     * for their own specific rules.
 	 *
 	 * @param fromList		The FROM list for the query this
 	 *				expression is in, for binding columns.
@@ -302,30 +315,29 @@ public ValueNode bindExpression(
 					Vector	aggregateVector)
 				throws StandardException
 	{
-		return bindUnaryOperator(fromList, subqueryList, aggregateVector);
+		bindOperand(fromList, subqueryList, aggregateVector);
+        if (operatorType == XMLPARSE_OP)
+            bindXMLParse();
+        else if (operatorType == XMLSERIALIZE_OP)
+            bindXMLSerialize();
+        return this;
 	}
 
 	/**
-	 * Workhorse for bindExpression. This exists so it can be called
-	 * by child classes.
+	 * Bind the operand for this unary operator.
+     * Binding the operator may change the operand node.
+     * Sub-classes bindExpression() methods need to call this
+     * method to bind the operand.
 	 */
-	protected ValueNode bindUnaryOperator(
+	protected void bindOperand(
 					FromList fromList, SubqueryList subqueryList,
 					Vector	aggregateVector)
 				throws StandardException
 	{
-		/*
-		** Operand can be null for COUNT(*) which
-		** is treated like a normal aggregate.
-		*/
-		if (operand == null)
-		{
-			return this;
-		}
 
 		//Return with no binding, if the type of unary minus/plus parameter is not set yet.
 		if (operand.requiresTypeFromContext() && ((operator.equals("-") || operator.equals("+"))) && operand.getTypeServices() == null)
-			return this;
+			return;
 
 		operand = operand.bindExpression(fromList, subqueryList,
 								aggregateVector);
@@ -342,13 +354,6 @@ protected ValueNode bindUnaryOperator(
 		{
 			operand = operand.genSQLJavaSQLTree();
 		}
-
-		if (operatorType == XMLPARSE_OP)
-			bindXMLParse();
-		else if (operatorType == XMLSERIALIZE_OP)
-			bindXMLSerialize();
-
-		return this;
 	}
 
     /**
