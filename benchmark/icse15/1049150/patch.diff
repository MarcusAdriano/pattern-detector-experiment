diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
index af709e8a..9187365e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
@@ -68,10 +68,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * also. Use lcc if available, else thread local variable.
      */
     public static void setInterrupted() {
-        LanguageConnectionContext lcc =
-            (LanguageConnectionContext)ContextService.getContextOrNull(
+        LanguageConnectionContext lcc = null;
+        try {
+            lcc = (LanguageConnectionContext)ContextService.getContextOrNull(
                 LanguageConnectionContext.CONTEXT_ID);
 
+        } catch (ShutdownException e) {
+            // Ignore. Can happen when: a) background thread (RawStoreDaemon)
+            // is performing checkpointing and b) a user thread starts shutdown
+            // and interrupts the background thread. During recovery of the
+            // container we get here. DERBY-4920.
+        }
+
+
         Thread.interrupted();
 
         StandardException e =
@@ -204,13 +213,18 @@ public static void restoreIntrFlagIfSeen() {
     public static void restoreIntrFlagIfSeen(LanguageConnectionContext lcc) {
 
         if (SanityManager.DEBUG) {
-            LanguageConnectionContext ctxLcc =
-                (LanguageConnectionContext)ContextService.
+            LanguageConnectionContext ctxLcc = null;
+            try {
+                ctxLcc = (LanguageConnectionContext)ContextService.
                 getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
 
             SanityManager.ASSERT(
                 lcc == ctxLcc,
                 "lcc=" + lcc + " getContextOrNull=" + ctxLcc);
+
+            } catch (ShutdownException e) {
+                // ignore
+            }
         }
 
         if (lcc.getInterruptedException() != null) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
index ebd2a892..57b41ddd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
@@ -104,9 +104,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private volatile boolean restoreChannelInProgress = false;
 
 
-    // In case the recovering thread can't successfully recover the container,
-    // it will throw, so other waiting threads need to give up as well.  This
-    // can happen at shutdown time when interrupts are used to stop threads.
+    // In case the recovering thread can't successfully recover the container
+    // for some reason, it will throw, so other waiting threads need to give up
+    // as well.
     private boolean giveUpIO = false;
     private final Object giveUpIOm = new Object(); // its monitor
 
@@ -530,6 +530,8 @@ protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
         }
 
         boolean success = false;
+        int retries = MAX_INTERRUPT_RETRIES;
+
         while (!success) {
             try {
                 if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
@@ -591,6 +593,10 @@ protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
                 // had seen ClosedChannelException.
 
                 awaitRestoreChannel(e, stealthMode);
+                if (retries-- == 0) {
+                    throw StandardException.newException(
+                        SQLState.FILE_IO_INTERRUPTED);
+                }
             }
         }
 
@@ -702,7 +708,7 @@ private void awaitRestoreChannel (Exception e,
                 }
 
                 // Since the channel is presumably ok (lest giveUpIO is set,
-                // see below), we put ourselveds back in the IO set of threads:
+                // see below), we put ourselves back in the IO set of threads:
 
                 threadsInPageIO++;
                 break;
