diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
index a8d0b8a0..e6fc2922 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
@@ -18,9 +18,11 @@
 
 package org.apache.cassandra.db;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
-import org.apache.cassandra.io.DataInputBuffer;
 
 import org.apache.log4j.Logger;
 
@@ -31,12 +33,11 @@
     public void doVerb(Message message)
     { 
         byte[] bytes = message.getMessageBody();
-        DataInputBuffer buffer = new DataInputBuffer();
-        buffer.reset(bytes, bytes.length);
+        ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);
 
         try
         {
-            RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(buffer);
+            RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(new DataInputStream(buffer));
             RowMutation rm = rmMsg.getRowMutation();
             rm.applyBinary();
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
index b7461efa..f60a77be 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLog.java
@@ -20,7 +20,6 @@
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.io.BufferedRandomAccessFile;
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.FileUtils;
@@ -285,8 +284,6 @@ void recover(File[] clogs) throws IOException
         Set<Table> tablesRecovered = new HashSet<Table>();
         assert StageManager.getStage(StageManager.mutationStage_).getCompletedTasks() == 0;
         int rows = 0;
-
-        DataInputBuffer bufIn = new DataInputBuffer();
         for (File file : clogs)
         {
             int bufferSize = (int)Math.min(file.length(), 32 * 1024 * 1024);
@@ -320,7 +317,8 @@ void recover(File[] clogs) throws IOException
                     // last CL entry didn't get completely written.  that's ok.
                     break;
                 }
-                bufIn.reset(bytes, bytes.length);
+
+                ByteArrayInputStream bufIn = new ByteArrayInputStream(bytes);
                 Checksum checksum = new CRC32();
                 checksum.update(bytes, 0, bytes.length);
                 if (claimedCRC32 != checksum.getValue())
@@ -331,7 +329,7 @@ void recover(File[] clogs) throws IOException
                 }
 
                 /* deserialize the commit log entry */
-                final RowMutation rm = RowMutation.serializer().deserialize(bufIn);
+                final RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(bufIn));
                 if (logger_.isDebugEnabled())
                     logger_.debug(String.format("replaying mutation for %s.%s: %s",
                                                 rm.getTable(),
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogHeader.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogHeader.java
index 3832e9a7..89e5ebe9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogHeader.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogHeader.java
@@ -23,9 +23,7 @@
 import java.util.Arrays;
 
 import org.apache.cassandra.io.ICompactSerializer;
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.utils.BitSetSerializer;
-import org.apache.cassandra.config.DatabaseDescriptor;
 
 class CommitLogHeader
 {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
index 86386882..f459df98 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
@@ -18,6 +18,7 @@
 */
 package org.apache.cassandra.db;
 
+import java.io.ByteArrayInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.DataInputStream;
@@ -25,7 +26,6 @@
 
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.io.DataOutputBuffer;
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
@@ -63,9 +63,8 @@ public Message getMessage() throws IOException
     public static RangeCommand read(Message message) throws IOException
     {
         byte[] bytes = message.getMessageBody();
-        DataInputBuffer dib = new DataInputBuffer();
-        dib.reset(bytes, bytes.length);
-        return serializer.deserialize(new DataInputStream(dib));
+        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
+        return serializer.deserialize(new DataInputStream(bis));
     }
 
     public String toString()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeReply.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeReply.java
index bd7e1ca7..dc5db59e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeReply.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeReply.java
@@ -19,11 +19,12 @@
 package org.apache.cassandra.db;
 
 import java.util.*;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 
 import org.apache.commons.lang.StringUtils;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.utils.FBUtilities;
@@ -63,15 +64,15 @@ public String toString()
 
     public static RangeReply read(byte[] body) throws IOException
     {
-        DataInputBuffer bufIn = new DataInputBuffer();
+        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
         boolean rangeCompletedLocally;        
-        bufIn.reset(body, body.length);
-        rangeCompletedLocally = bufIn.readBoolean();
+        DataInputStream dis = new DataInputStream(bufIn);
+        rangeCompletedLocally = dis.readBoolean();
 
         List<String> keys = new ArrayList<String>();
-        while (bufIn.getPosition() < body.length)
+        while (dis.available() > 0)
         {
-            keys.add(bufIn.readUTF());
+            keys.add(dis.readUTF());
         }
         
         return new RangeReply(keys, rangeCompletedLocally);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
index 3a9b564c..df0275f1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
@@ -37,7 +37,6 @@
 package org.apache.cassandra.db;
 
 import org.apache.cassandra.concurrent.StageManager;
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.net.Message;
@@ -50,6 +49,7 @@
 import org.apache.thrift.TSerializer;
 import org.apache.thrift.protocol.TBinaryProtocol;
 
+import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -105,9 +105,8 @@ public Message getMessage() throws IOException
     public static RangeSliceCommand read(Message message) throws IOException
     {
         byte[] bytes = message.getMessageBody();
-        DataInputBuffer dib = new DataInputBuffer();
-        dib.reset(bytes, bytes.length);
-        return serializer.deserialize(new DataInputStream(dib));
+        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
+        return serializer.deserialize(new DataInputStream(bis));
     }
 }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
index 65d3d58d..a3f27c2a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
@@ -20,13 +20,14 @@
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.marshal.AbstractType;
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.commons.lang.StringUtils;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.io.ByteArrayOutputStream;
 import java.io.DataOutputStream;
@@ -67,14 +68,14 @@ public String toString()
 
     public static RangeSliceReply read(byte[] body) throws IOException
     {
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(body, body.length);
-        boolean completed = bufIn.readBoolean();
-        int rowCount = bufIn.readInt();
+        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
+        DataInputStream dis = new DataInputStream(bufIn);
+        boolean completed = dis.readBoolean();
+        int rowCount = dis.readInt();
         List<Row> rows = new ArrayList<Row>(rowCount);
         for (int i = 0; i < rowCount; i++)
         {
-            rows.add(Row.serializer().deserialize(bufIn));
+            rows.add(Row.serializer().deserialize(dis));
         }
         return new RangeSliceReply(rows, completed);
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
index 77e6762a..4683eafb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
@@ -20,7 +20,6 @@
 
 import java.io.*;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 
@@ -33,12 +32,11 @@
     public void doVerb(Message message)
     {          
         byte[] body = message.getMessageBody();
-        DataInputBuffer buffer = new DataInputBuffer();
-        buffer.reset(body, body.length);        
+        ByteArrayInputStream buffer = new ByteArrayInputStream(body);
         
         try
         {
-            RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(buffer);
+            RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(new DataInputStream(buffer));
             RowMutation rm = rmMsg.getRowMutation();
             rm.apply();                                   
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
index 858e813a..8cf9939c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
@@ -18,11 +18,12 @@
 
 package org.apache.cassandra.db;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.util.List;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import java.net.InetAddress;
 import org.apache.cassandra.net.IVerbHandler;
@@ -37,7 +38,7 @@
 {
     protected static class ReadContext
     {
-        protected DataInputBuffer bufIn_ = new DataInputBuffer();
+        protected ByteArrayInputStream bufIn_;
         protected DataOutputBuffer bufOut_ = new DataOutputBuffer();
     }
 
@@ -65,7 +66,7 @@ public void doVerb(Message message)
             readCtx = new ReadContext();
             tls_.set(readCtx);
         }
-        readCtx.bufIn_.reset(body, body.length);
+        readCtx.bufIn_ = new ByteArrayInputStream(body);
 
         try
         {
@@ -74,7 +75,7 @@ public void doVerb(Message message)
                 /* Don't service reads! */
                 throw new RuntimeException("Cannot service reads while bootstrapping!");
             }
-            ReadCommand command = ReadCommand.serializer().deserialize(readCtx.bufIn_);
+            ReadCommand command = ReadCommand.serializer().deserialize(new DataInputStream(readCtx.bufIn_));
             Table table = Table.open(command.table);
             Row row = command.getRow(table);
             ReadResponse readResponse;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 8ca849d4..46d409f9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -20,7 +20,6 @@
 
 import java.io.*;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import java.net.InetAddress;
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
@@ -36,12 +35,11 @@
     public void doVerb(Message message)
     {
         byte[] bytes = message.getMessageBody();
-        DataInputBuffer buffer = new DataInputBuffer();
-        buffer.reset(bytes, bytes.length);
+        ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);
 
         try
         {
-            RowMutation rm = RowMutation.serializer().deserialize(buffer);
+            RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(buffer));
             if (logger_.isDebugEnabled())
               logger_.debug("Applying " + rm);
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/DataInputBuffer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/DataInputBuffer.java
index 0c54f22d..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/DataInputBuffer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/DataInputBuffer.java
@@ -1,98 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.io;
-
-import java.io.*;
-
-
-/**
- * An implementation of the DataInputStream interface. This instance is completely thread 
- * unsafe.
- */
-
-public final class DataInputBuffer extends DataInputStream
-{
-    private static class Buffer extends ByteArrayInputStream
-    {        
-        public Buffer()
-        {
-            super(new byte[] {});
-        }
-
-        public void reset(byte[] input, int start, int length)
-        {
-            this.buf = input;
-            this.count = start + length;
-            this.mark = start;
-            this.pos = start;
-        }
-        
-        public int getPosition()
-        {
-            return pos;
-        }
-        
-        public void setPosition(int position)
-        {
-            pos = position;
-        }        
-
-        public int getLength()
-        {
-            return count;
-        }
-    }
-
-    private Buffer buffer_;
-
-    /** Constructs a new empty buffer. */
-    public DataInputBuffer()
-    {
-        this(new Buffer());
-    }
-
-    private DataInputBuffer(Buffer buffer)
-    {
-        super(buffer);
-        this.buffer_ = buffer;
-    }
-   
-    /** Resets the data that the buffer reads. */
-    public void reset(byte[] input, int length)
-    {
-        buffer_.reset(input, 0, length);
-    }
-
-    /** Resets the data that the buffer reads. */
-    public void reset(byte[] input, int start, int length)
-    {
-        buffer_.reset(input, start, length);
-    }
-
-    /** Returns the length of the input. */
-    public int getLength()
-    {
-        return buffer_.getLength();
-    }
-
-    public int getPosition()
-    {
-        return buffer_.getPosition();
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java
index 7cd2ab44..57dab2a0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java
@@ -92,9 +92,9 @@ public static BloomFilter defreezeBloomFilter(RandomAccessFile file) throws IOEx
         int size = file.readInt();
         byte[] bytes = new byte[size];
         file.readFully(bytes);
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(bytes, bytes.length);
-        return BloomFilter.serializer().deserialize(bufIn);
+        
+        ByteArrayInputStream bufIn = new ByteArrayInputStream(bytes);
+        return BloomFilter.serializer().deserialize(new DataInputStream(bufIn));
     }
 
     /**
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java
index 5a4a9549..a5eb5ce8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/StreamRequestVerbHandler.java
@@ -18,6 +18,8 @@
 
 package org.apache.cassandra.io;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.File;
 import java.io.IOException;
 import java.io.IOError;
@@ -53,11 +55,10 @@ public void doVerb(Message message)
             logger_.debug("Received a StreamRequestMessage from " + message.getFrom());
         
         byte[] body = message.getMessageBody();
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(body, body.length);
+        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
         try
         {
-            StreamRequestMessage streamRequestMessage = StreamRequestMessage.serializer().deserialize(bufIn);
+            StreamRequestMessage streamRequestMessage = StreamRequestMessage.serializer().deserialize(new DataInputStream(bufIn));
             StreamRequestMetadata[] streamRequestMetadata = streamRequestMessage.streamRequestMetadata_;
 
             for (StreamRequestMetadata srm : streamRequestMetadata)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
index 7938c365..735d5eaf 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
@@ -23,6 +23,8 @@
 
 import java.net.InetAddress;
 import java.util.*;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.io.File;
 import java.io.IOError;
@@ -147,12 +149,11 @@ public static void requestRanges(InetAddress source, Collection<Range> ranges)
         public void doVerb(Message message)
         {
             byte[] body = message.getMessageBody();
-            DataInputBuffer bufIn = new DataInputBuffer();
-            bufIn.reset(body, body.length);
+            ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
 
             try
             {
-                StreamInitiateMessage biMsg = StreamInitiateMessage.serializer().deserialize(bufIn);
+                StreamInitiateMessage biMsg = StreamInitiateMessage.serializer().deserialize(new DataInputStream(bufIn));
                 StreamContextManager.StreamContext[] streamContexts = biMsg.getStreamContext();
 
                 if (streamContexts.length == 0 && StorageService.instance().isBootstrapMode())
@@ -311,12 +312,11 @@ public void onStreamCompletion(InetAddress host, StreamContextManager.StreamCont
         public void doVerb(Message message)
         {
             byte[] body = message.getMessageBody();
-            DataInputBuffer bufIn = new DataInputBuffer();
-            bufIn.reset(body, body.length);
+            ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
 
             try
             {
-                StreamContextManager.StreamStatusMessage streamStatusMessage = StreamContextManager.StreamStatusMessage.serializer().deserialize(bufIn);
+                StreamContextManager.StreamStatusMessage streamStatusMessage = StreamContextManager.StreamStatusMessage.serializer().deserialize(new DataInputStream(bufIn));
                 StreamContextManager.StreamStatus streamStatus = streamStatusMessage.getStreamStatus();
 
                 switch (streamStatus.getAction())
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/FastSerializer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/FastSerializer.java
index d092116f..33588c55 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/FastSerializer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/FastSerializer.java
@@ -18,9 +18,10 @@
 
 package org.apache.cassandra.net.io;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.net.Message;
 
@@ -35,8 +36,7 @@
     
     public Message deserialize(byte[] bytes) throws IOException
     {
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(bytes, bytes.length);
-        return Message.serializer().deserialize(bufIn);
+        ByteArrayInputStream bufIn = new ByteArrayInputStream(bytes);
+        return Message.serializer().deserialize(new DataInputStream(bufIn));
     }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 45d7aae5..102d3136 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -33,7 +33,6 @@
 import org.apache.cassandra.dht.Range;
 import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.io.CompactionIterator.CompactedRow;
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.io.SSTable;
 import org.apache.cassandra.io.SSTableReader;
@@ -707,12 +706,11 @@ public CFPair deserialize(DataInputStream dis) throws IOException
         public void doVerb(Message message)
         { 
             byte[] bytes = message.getMessageBody();
-            DataInputBuffer buffer = new DataInputBuffer();
-            buffer.reset(bytes, bytes.length);
 
+            ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);
             try
             {
-                CFPair request = this.deserialize(buffer);
+                CFPair request = this.deserialize(new DataInputStream(buffer));
 
                 // trigger readonly-compaction
                 logger.debug("Queueing readonly compaction for request from " + message.getFrom() + " for " + request);
@@ -775,13 +773,12 @@ public Validator deserialize(DataInputStream dis) throws IOException
         public void doVerb(Message message)
         { 
             byte[] bytes = message.getMessageBody();
-            DataInputBuffer buffer = new DataInputBuffer();
-            buffer.reset(bytes, bytes.length);
+            ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);
 
             try
             {
                 // deserialize the remote tree, and register it
-                Validator rvalidator = this.deserialize(buffer);
+                Validator rvalidator = this.deserialize(new DataInputStream(buffer));
                 AntiEntropyService.instance().rendezvous(rvalidator.cf, message.getFrom(), rvalidator.tree);
             }
             catch (IOException e)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
index 192835a1..851f1748 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
@@ -18,6 +18,8 @@
 
 package org.apache.cassandra.service;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -27,7 +29,6 @@
 import org.apache.cassandra.db.ReadResponse;
 import org.apache.cassandra.db.Row;
 import org.apache.cassandra.db.ColumnFamily;
-import org.apache.cassandra.io.DataInputBuffer;
 import java.net.InetAddress;
 import org.apache.cassandra.net.IAsyncCallback;
 import org.apache.cassandra.net.Message;
@@ -56,14 +57,13 @@ public void response(Message msg)
 		
 		private void handleDigestResponses()
 		{
-            DataInputBuffer bufIn = new DataInputBuffer();
             for (Message response : responses_)
             {
                 try
                 {
                     byte[] body = response.getMessageBody();
-                    bufIn.reset(body, body.length);
-                    ReadResponse result = ReadResponse.serializer().deserialize(bufIn);
+                    ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
+                    ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));
                     byte[] digest = result.digest();
                     if (!Arrays.equals(ColumnFamily.digest(row_.cf), digest))
                     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
index bdf56535..0c6d8815 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
@@ -18,6 +18,8 @@
 
 package org.apache.cassandra.service;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -28,7 +30,6 @@
 import org.apache.cassandra.db.Row;
 import org.apache.cassandra.db.RowMutation;
 import org.apache.cassandra.db.RowMutationMessage;
-import org.apache.cassandra.io.DataInputBuffer;
 import java.net.InetAddress;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.utils.FBUtilities;
@@ -77,12 +78,11 @@ public Row resolve(List<Message> responses) throws DigestMismatchException, IOEx
          * query exists then we need to compare the digest with 
          * the digest of the data that is received.
         */
-        DataInputBuffer bufIn = new DataInputBuffer();
 		for (Message response : responses)
 		{					            
             byte[] body = response.getMessageBody();
-            bufIn.reset(body, body.length);
-            ReadResponse result = ReadResponse.serializer().deserialize(bufIn);
+            ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
+            ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));
             if (result.isDigestQuery())
             {
                 digest = result.digest();
@@ -168,11 +168,10 @@ public boolean isDataPresent(List<Message> responses)
         for (Message response : responses)
         {
             byte[] body = response.getMessageBody();
-            DataInputBuffer bufIn = new DataInputBuffer();
-            bufIn.reset(body, body.length);
+            ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
             try
             {
-                ReadResponse result = ReadResponse.serializer().deserialize(bufIn);
+                ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));
                 if (!result.isDigestQuery())
                 {
                     isDataPresent = true;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index 9deba632..5a185f3a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -17,6 +17,8 @@
  */
 package org.apache.cassandra.service;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOError;
 import java.io.IOException;
 import java.util.*;
@@ -31,7 +33,6 @@
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.*;
-import org.apache.cassandra.io.DataInputBuffer;
 import java.net.InetAddress;
 import org.apache.cassandra.net.IAsyncResult;
 import org.apache.cassandra.net.Message;
@@ -346,9 +347,8 @@ else if (consistency_level == ConsistencyLevel.ALL)
         {
             byte[] body;
             body = iar.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
-            DataInputBuffer bufIn = new DataInputBuffer();
-            bufIn.reset(body, body.length);
-            ReadResponse response = ReadResponse.serializer().deserialize(bufIn);
+            ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
+            ReadResponse response = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));
             if (response.row() != null)
                 rows.add(response.row());
         }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
index f7c47181..e5e5b151 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
@@ -18,13 +18,14 @@
 */
 package org.apache.cassandra.db;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.TreeMap;
 
 import org.junit.Test;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.db.filter.QueryPath;
 import static org.apache.cassandra.Util.column;
@@ -43,9 +44,8 @@ public void testSingleColumn() throws IOException
         DataOutputBuffer bufOut = new DataOutputBuffer();
         ColumnFamily.serializer().serialize(cf, bufOut);
 
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(bufOut.getData(), bufOut.getLength());
-        cf = ColumnFamily.serializer().deserialize(bufIn);
+        ByteArrayInputStream bufIn = new ByteArrayInputStream(bufOut.getData(), 0, bufOut.getLength());
+        cf = ColumnFamily.serializer().deserialize(new DataInputStream(bufIn));
         assert cf != null;
         assert cf.name().equals("Standard1");
         assert cf.getSortedColumns().size() == 1;
@@ -72,9 +72,8 @@ public void testManyColumns() throws IOException
         ColumnFamily.serializer().serialize(cf, bufOut);
 
         // verify
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(bufOut.getData(), bufOut.getLength());
-        cf = ColumnFamily.serializer().deserialize(bufIn);
+        ByteArrayInputStream bufIn = new ByteArrayInputStream(bufOut.getData(), 0, bufOut.getLength());
+        cf = ColumnFamily.serializer().deserialize(new DataInputStream(bufIn));
         for (String cName : map.navigableKeySet())
         {
             assert new String(cf.getColumn(cName.getBytes()).value()).equals(map.get(cName));
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
index 9d63a238..35eaec4b 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
@@ -20,6 +20,8 @@
 
 import static org.junit.Assert.*;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -28,7 +30,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.marshal.AsciiType;
@@ -61,11 +62,11 @@ private ReadCommand serializeAndDeserializeReadMessage(ReadCommand rm) throws IO
     {
         ReadCommandSerializer rms = ReadCommand.serializer();
         DataOutputBuffer dos = new DataOutputBuffer();
-        DataInputBuffer dis = new DataInputBuffer();
+        ByteArrayInputStream bis;
 
         rms.serialize(rm, dos);
-        dis.reset(dos.getData(), dos.getLength());
-        return rms.deserialize(dis);
+        bis = new ByteArrayInputStream(dos.getData(), 0, dos.getLength());
+        return rms.deserialize(new DataInputStream(bis));
     }
     
     @Test
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java
index 4db17e80..1b7f08a4 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java
@@ -23,9 +23,10 @@
 
 import static org.junit.Assert.*;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 import java.net.InetAddress;
 import org.junit.Test;
@@ -49,9 +50,8 @@ public void test() throws IOException
         DataOutputBuffer output = new DataOutputBuffer();
         GossipDigest.serializer().serialize(expected, output);
         
-        DataInputBuffer input = new DataInputBuffer();
-        input.reset(output.getData(), output.getLength());
-        GossipDigest actual = GossipDigest.serializer().deserialize(input);
+        ByteArrayInputStream input = new ByteArrayInputStream(output.getData(), 0, output.getLength());
+        GossipDigest actual = GossipDigest.serializer().deserialize(new DataInputStream(input));
         assertEquals(0, expected.compareTo(actual));
     }
 
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/DataInputBufferTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/DataInputBufferTest.java
index da41d028..e69de29b 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/DataInputBufferTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/DataInputBufferTest.java
@@ -1,37 +0,0 @@
-/*
-* Licensed to the Apache Software Foundation (ASF) under one
-* or more contributor license agreements.  See the NOTICE file
-* distributed with this work for additional information
-* regarding copyright ownership.  The ASF licenses this file
-* to you under the Apache License, Version 2.0 (the
-* "License"); you may not use this file except in compliance
-* with the License.  You may obtain a copy of the License at
-*
-*    http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing,
-* software distributed under the License is distributed on an
-* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-* KIND, either express or implied.  See the License for the
-* specific language governing permissions and limitations
-* under the License.
-*/
-package org.apache.cassandra.io;
-
-import java.io.IOException;
-
-import org.junit.Test;
-
-public class DataInputBufferTest {
-    @Test
-    public void testSmall() throws IOException {
-        DataOutputBuffer bufOut = new DataOutputBuffer();
-        bufOut.writeUTF("Avinash");
-        bufOut.writeInt(41*1024*1024);
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(bufOut.getData(), bufOut.getLength());
-        assert bufIn.readUTF().equals("Avinash");
-        assert bufIn.readInt() == 41 * 1024 * 1024;
-    }
-
-}
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/FilterTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/FilterTest.java
index cc9214b9..6644e173 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/FilterTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/FilterTest.java
@@ -18,6 +18,8 @@
 */
 package org.apache.cassandra.utils;
 
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
 import java.io.IOException;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -25,7 +27,6 @@
 
 import org.junit.Test;
 
-import org.apache.cassandra.io.DataInputBuffer;
 import org.apache.cassandra.io.DataOutputBuffer;
 
 public class FilterTest
@@ -102,9 +103,8 @@ public static Filter testSerialize(Filter f) throws IOException
         DataOutputBuffer out = new DataOutputBuffer();
         f.getSerializer().serialize(f, out);
 
-        DataInputBuffer in = new DataInputBuffer();
-        in.reset(out.getData(), out.getLength());
-        Filter f2 = f.getSerializer().deserialize(in);
+        ByteArrayInputStream in = new ByteArrayInputStream(out.getData(), 0, out.getLength());
+        Filter f2 = f.getSerializer().deserialize(new DataInputStream(in));
 
         assert f2.isPresent("a");
         assert !f2.isPresent("b");
