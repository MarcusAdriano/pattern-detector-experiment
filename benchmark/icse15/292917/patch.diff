diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
index 25cc6aae..98f20947 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
@@ -129,6 +129,13 @@
     // stored the password for deferred reset only.
     private transient char[] deferredResetPassword_ = null;
 
+    //If Network Server gets null connection from the embedded driver, 
+    //it sends RDBAFLRM followed by SQLCARD with null SQLException.
+    //Client will parse the SQLCARD and set connectionNull to true if the
+    //SQLCARD is empty. If connectionNull=true, connect method in 
+    //ClientDriver will in turn return null connection.
+    private boolean connectionNull = false;
+
     private void setDeferredResetPassword(String password) {
         deferredResetPassword_ = (password == null) ? null : flipBits(password.toCharArray());
     }
@@ -186,6 +193,7 @@ public NetConnection(NetLogWriter netLogWriter,
         String password = ClientDataSource.getPassword(properties);
         securityMechanism_ = ClientDataSource.getSecurityMechanism(properties);
         flowConnect(password, securityMechanism_);
+        if(!isConnectionNull())
         completeConnect();
     }
 
@@ -1502,5 +1510,18 @@ public void doResetNow() throws SqlException {
         agent_.flowOutsideUOW();
         agent_.endReadChain();
     }
+    
+	/**
+	 * @return Returns the connectionNull.
+	 */
+	public boolean isConnectionNull() {
+		return connectionNull;
+	}
+	/**
+	 * @param connectionNull The connectionNull to set.
+	 */
+	public void setConnectionNull(boolean connectionNull) {
+		this.connectionNull = connectionNull;
+	}
 }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
index 5abdf7ca..08ba8043 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
@@ -485,6 +485,11 @@ void parseRdbAccessFailed(NetConnection netConnection) throws DisconnectExceptio
         }
 
         NetSqlca netSqlca = parseSQLCARD(null);
+        
+        //Check if the SQLCARD has null SQLException
+        if(netSqlca.getSqlErrmc() == null)
+        	netConnection.setConnectionNull(true);
+        else
         netConnection.completeSqlca(netSqlca);
     }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java
index a6d8d014..3480b287 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDriver.java
@@ -129,6 +129,10 @@ public ClientDriver() {
                         port,
                         database,
                         augmentedProperties);
+        
+        if(conn.isConnectionNull())
+        	return null;
+        
         return conn;
     }
 
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 83439142..2c1245b4 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -973,6 +973,13 @@ private boolean parseDRDAConnection() throws DRDAProtocolException
 		verifyRequiredObject(codePoint,CodePoint.ACCRDB);
 		int svrcod = parseACCRDB();
 
+		//If network server gets a null connection form InternalDriver, reply with
+		//RDBAFLRM and SQLCARD with null SQLException 
+		if(database.getConnection() == null && databaseAccessException == null){
+			writeRDBfailure(CodePoint.RDBAFLRM);
+			return false;
+		}		
+		
 		//if earlier we couldn't access the database
 		if (databaseAccessException != null)
 		{
@@ -983,43 +990,16 @@ private boolean parseDRDAConnection() throws DRDAProtocolException
 				|| failureType == CodePoint.RDBATHRM)
 			{
 				writeRDBfailure(failureType);
-				writeSQLCARD(databaseAccessException,
-					CodePoint.SVRCOD_ERROR,0,0);
 			}
 			else
 			{
 				writeRDBfailure(CodePoint.RDBAFLRM);
-
-				// RDBAFLRM requires TYPDEFNAM and TYPDEFOVR
-				writer.createDssObject();
-				writer.writeScalarString(CodePoint.TYPDEFNAM,
-										 CodePoint.TYPDEFNAM_QTDSQLASC);
-				writeTYPDEFOVR();
-				writer.endDss();
-
-				// Finally, per DDM spec, "an SQLCARD always follows
-				// the RDBAFLRM".
-				writeSQLCARD(databaseAccessException,
-							 CodePoint.SVRCOD_ERROR,0,0);
 			}
-
-			// Ignore anything that was chained to the ACCRDB.
-			skipRemainder(false);
-
-			// Finalize chain state for whatever we wrote in
-			// response to ACCRDB.
-			finalizeChain();
 			return false;
 		}
 		else if (database.accessCount > 1 )	// already in conversation with database
 		{
 			writeRDBfailure(CodePoint.RDBACCRM);
-
-			// Ignore anything that was chained to the ACCRDB.
-			skipRemainder(false);
-
-			// Finalize chain state for RDBACCRM
-			finalizeChain();
 			return false;
 		}
 		else // everything is fine 
@@ -1050,6 +1030,27 @@ private void writeRDBfailure(int codePoint) throws DRDAProtocolException
 		writeRDBNAM(database.dbName);
     	writer.endDdmAndDss();
 
+    	switch(codePoint){
+    		case CodePoint.RDBAFLRM:
+    			//RDBAFLRM requires TYPDEFNAM and TYPDEFOVR
+    			writer.createDssObject();
+    			writer.writeScalarString(CodePoint.TYPDEFNAM,
+    									 CodePoint.TYPDEFNAM_QTDSQLASC);
+    			writeTYPDEFOVR();
+    			writer.endDss();
+    		case CodePoint.RDBNFNRM:
+    		case CodePoint.RDBATHRM:
+    			writeSQLCARD(databaseAccessException,CodePoint.SVRCOD_ERROR,0,0);
+    		case CodePoint.RDBACCRM:
+    			//Ignore anything that was chained to the ACCRDB.
+    			skipRemainder(false);
+
+    			// Finalize chain state for whatever we wrote in
+    			// response to ACCRDB.
+    			finalizeChain();
+    			break;
+    	}
+    	
 	}
 
 	/* Check the database access exception and return the appropriate
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
index 86469ce0..2c5bd55e 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
@@ -116,6 +116,7 @@ protected void setConnection(Connection conn)
 		throws SQLException
 	{
 		this.conn = conn;
+		if(conn != null)
 		defaultStatement.setStatement(conn);
 	}
 	/**
@@ -246,8 +247,10 @@ protected Connection makeConnection(Properties p) throws SQLException
                 if(password != null) 
 		    p.put(Attribute.PASSWORD_ATTR, password);
 		Connection conn = NetworkServerControlImpl.getDriver().connect(Attribute.PROTOCOL
-							 + dbName + attrString, p);
+							 + shortDbName + attrString, p);
+		if(conn != null){
 		conn.setAutoCommit(false);
+		}
 		setConnection(conn);
 		return conn;
 	}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
index 1430402a..8e529cf0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
@@ -49,6 +49,19 @@
 	
 	private static String DERBY_SYSTEM_HOME = System.getProperty("derby.system.home");
 	
+	private static String CLIENT_URL_WITH_COLON1 = 
+		"jdbc:derby://localhost:1527/wombat:create=true";
+	private static String CLIENT_URL_WITH_COLON2 = 
+		"jdbc:derby://localhost:1527/"+ DERBY_SYSTEM_HOME + File.separator +"wombat:create=true";
+	private static String CLIENT_URL_WITH_DOUBLE_QUOTES1 = 
+		"jdbc:derby://localhost:1527/\"wombat\";create=true"; 
+	private static String CLIENT_URL_WITH_DOUBLE_QUOTES2 = 
+		"jdbc:derby://localhost:1527/\"" + DERBY_SYSTEM_HOME + File.separator + "wombat\";create=true";
+	private static String CLIENT_URL_WITH_SINGLE_QUOTES1 = 
+		"jdbc:derby://localhost:1527/'" + DERBY_SYSTEM_HOME + File.separator + "wombat';create=true";
+	private static String CLIENT_URL_WITH_SINGLE_QUOTES2 = 
+		"jdbc:derby://localhost:1527/'wombat';create=true";
+	
 	// URLS to check.  New urls need to also be added to the acceptsUrl table
 	private static String[] urls = new String[]
 	{
@@ -58,6 +71,16 @@
 		INVALID_URL,
 	};
 	
+	//Client URLS
+	private static String[] clientUrls = new String[]
+	{
+		CLIENT_URL_WITH_COLON1,
+		CLIENT_URL_WITH_COLON2,
+		CLIENT_URL_WITH_DOUBLE_QUOTES1,
+		CLIENT_URL_WITH_DOUBLE_QUOTES2,
+		CLIENT_URL_WITH_SINGLE_QUOTES1,
+		CLIENT_URL_WITH_SINGLE_QUOTES2
+	};
 	
 	/**
 	 * url prefix for this framework
@@ -102,6 +125,7 @@ public static void main(String[] args) {
 			checkAcceptsURL(driver);
 			testEmbeddedAttributes(driver);
 			testClientAttributes(driver);
+			doClientURLTest(driver);
 		}
 		catch (SQLException se)
 		{
@@ -320,6 +344,34 @@ private static void assertExpectedURLAcceptance(String url, boolean expectedAcce
 
 	}
 	
+	/**
+	 * Tests client URLs to see connection is successful or the correct exception is thrown.
+	 * 
+	 * @param driver
+	 * @throws SQLException
+	 */
+	private static void doClientURLTest(Driver driver){
+		if (!TestUtil.isDerbyNetClientFramework())
+			return;
+		
+		System.out.println("doClientURLTest()");
+		Properties info = null;		//test with null Properties object
+
+		for (int i = 0; i < clientUrls.length;i++)
+		{
+			String url = clientUrls[i];
+			System.out.println("doClientURLTest with url: " + replaceSystemHome(url));
+			try{
+				Connection conn = testConnect(driver,url,info);
+				if(conn != null)
+					System.out.println("PASSED:Connection Successful with url: " + replaceSystemHome(url) );
+			}
+			catch(SQLException se){
+				System.out.println("EXPECTED EXCEPTION:"+replaceSystemHome(se.getMessage()));
+			}
+		}
+	}	
+	
 	/**
 	 * Make  java.sql.Driver.connect(String url, Properties info call) and print the status of
 	 * the connection.
@@ -330,7 +382,7 @@ private static void assertExpectedURLAcceptance(String url, boolean expectedAcce
 	 * 
 	 * @throws SQLException on error.
 	 */
-	private static void testConnect(Driver driver, String url, Properties info) throws SQLException
+	private static Connection testConnect(Driver driver, String url, Properties info) throws SQLException
 	{
 		String infoString = null;
 		if (info != null)
@@ -338,6 +390,11 @@ private static void testConnect(Driver driver, String url, Properties info) thro
 		String urlString = replaceSystemHome(url);
 		Connection conn = driver.connect(url,info);
 		
+		if(conn == null){
+			System.out.println("Null connection returned for url "+urlString);
+			return conn;
+		}
+		
 		System.out.println("\nConnection info for connect(" + urlString + ", " + infoString +")");
 		String getUrlValue = conn.getMetaData().getURL();
 		// URL may include path of DERBY_SYSTEM_HOME for traceFile
@@ -350,7 +407,7 @@ private static void testConnect(Driver driver, String url, Properties info) thro
 		rs.next();
 		System.out.println("CURRENT SCHEMA = " + rs.getString(1));
 		conn.close();
-
+		return conn;
 	}
 
 
