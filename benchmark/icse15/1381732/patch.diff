diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
index 5c76c9fc..cf24b2f0 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
@@ -70,7 +70,8 @@ private static synchronized void checkInstance() {
 	private volatile RegionDigraph regionDigraph;
 	private volatile Resolver resolver;
 	private ServiceTracker<?,?> serviceTracker;
-	private volatile Subsystems subsystems;
+	// @GuardedBy("this")
+	private Subsystems subsystems;
 	
 	private final Collection<ServiceRegistration<?>> registrations = new HashSet<ServiceRegistration<?>>();
 	private final Collection<Repository> repositories = Collections.synchronizedSet(new HashSet<Repository>());
@@ -95,7 +96,12 @@ public Resolver getResolver() {
 		return resolver;
 	}
 	
-	public Subsystems getSubsystems() {
+	/* Synchronization was introduced here to prevent conflicts between the
+	 * BundleEventHook and the activation process. The activation process
+	 * must complete the initialization of the root subsystem in order to
+	 * fully initialize the Subsystems object.
+	 */
+	public synchronized Subsystems getSubsystems() {
 		return subsystems;
 	}
 	
@@ -107,7 +113,7 @@ public SubsystemServiceRegistrar getSubsystemServiceRegistrar() {
 	}
 	
 	public Repository getSystemRepository() {
-		return new SystemRepository(subsystems.getRootSubsystem());
+		return new SystemRepository(getSubsystems().getRootSubsystem());
 	}
 
 	@Override
@@ -201,7 +207,7 @@ private boolean hasRequiredServices() {
 	
 	private boolean isActive() {
 		synchronized (Activator.class) {
-			return instance != null && subsystems != null;
+			return instance != null && getSubsystems() != null;
 		}
 	}
 	
