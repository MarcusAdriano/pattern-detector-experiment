diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
index ab3b2a6e..c069e916 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
@@ -138,6 +138,7 @@
     private final AtomicBoolean running = new AtomicBoolean();
     private List<ServiceRecipe> services;
     private AccessControlContext accessControlContext;
+    private final IdSpace tempRecipeIdSpace = new IdSpace();
 
     public BlueprintContainerImpl(BundleContext bundleContext, Bundle extenderBundle, BlueprintListener eventDispatcher, NamespaceHandlerRegistry handlers, ScheduledExecutorService executors, List<Object> pathList) {
         this.bundleContext = bundleContext;
@@ -427,7 +428,7 @@ public AccessControlContext getAccessControlContext() {
     
     public BlueprintRepository getRepository() {
         if (repository == null) {
-            repository = new RecipeBuilder(this).createRepository();
+            repository = new RecipeBuilder(this, tempRecipeIdSpace).createRepository();
         }
         return repository;
     }
@@ -484,15 +485,31 @@ private void processProcessors() throws Exception {
             }
             // Update repository with recipes processed by the processors
             untrackServiceReferences();
-            Repository tmpRepo = new RecipeBuilder(this).createRepository();
+            Repository tmpRepo = new RecipeBuilder(this, tempRecipeIdSpace).createRepository();
+            
+            LOGGER.debug("Updating blueprint repository");
+            
+            for (String name : repository.getNames()) {
+                if (repository.getInstance(name) == null) {
+                    LOGGER.debug("Removing uninstantiated recipe {}", new Object[] { name });
+                    repository.removeRecipe(name);
+                } else {
+                    LOGGER.debug("Recipe {} is already instantiated", new Object[] { name });
+                }
+            }
+            
             for (String name : tmpRepo.getNames()) {
                 if (repository.getInstance(name) == null) {
+                    LOGGER.debug("Adding new recipe {}", new Object[] { name });
                     Recipe r = tmpRepo.getRecipe(name);
                     if (r != null) {
                         repository.putRecipe(name, r);
                     }
+                } else {
+                    LOGGER.debug("Recipe {} is already instantiated and cannot be updated", new Object[] { name });
                 }
             }
+            
             getSatisfiableDependenciesMap(true);
             trackServiceReferences();
         }
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
index 8b921f97..1fce0e92 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
@@ -115,6 +115,13 @@ public void putRecipe(String name, Recipe recipe) {
         recipes.put(name, recipe);
     }
 
+    public void removeRecipe(String name) {
+        if (instances.get(name) != null)
+            throw new ComponentDefinitionException("Name " + name + " is already instanciated as " + instances.get(name) + " and cannot be removed.");
+
+        recipes.remove(name);
+    }
+
     private Object convert(String name, Object instance) throws ComponentDefinitionException {
         try {
             // Make sure to go through the conversion step in case we have a Convertible object
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/IdSpace.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/IdSpace.java
index e69de29b..cef5a221 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/IdSpace.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/IdSpace.java
@@ -0,0 +1,11 @@
+package org.apache.aries.blueprint.container;
+
+import java.util.concurrent.atomic.AtomicLong;
+
+public class IdSpace {
+    private AtomicLong currentId = new AtomicLong(0);
+    
+    public long nextId() {
+        return currentId.getAndIncrement();
+    }
+}
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
index 5ea3117e..ef69ed2c 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
@@ -70,12 +70,13 @@
  */
 public class RecipeBuilder {
 
-    private Set<String> names = new HashSet<String>();
-    private int nameCounter;
-    private ExtendedBlueprintContainer blueprintContainer;
-    private ComponentDefinitionRegistry registry;
+    private final Set<String> names = new HashSet<String>();
+    private final ExtendedBlueprintContainer blueprintContainer;
+    private final ComponentDefinitionRegistry registry;
+    private final IdSpace recipeIdSpace;
 
-    public RecipeBuilder(ExtendedBlueprintContainer blueprintContainer) {
+    public RecipeBuilder(ExtendedBlueprintContainer blueprintContainer, IdSpace recipeIdSpace) {
+        this.recipeIdSpace = recipeIdSpace;
         this.blueprintContainer = blueprintContainer;
         this.registry = blueprintContainer.getComponentDefinitionRegistry();
     }
@@ -349,7 +350,7 @@ private MapRecipe createMapRecipe(MapMetadata mapValue) {
     private String getName(String name) {
         if (name == null) {
             do {
-                name = "#recipe-" + ++nameCounter;
+                name = "#recipe-" + recipeIdSpace.nextId();
             } while (names.contains(name) || registry.containsComponentDefinition(name));
         }
         names.add(name);
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
index 5463ac1c..55fa45b5 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
@@ -51,6 +51,13 @@
 
     void putRecipe(String name, Recipe recipe);
 
+    /**
+     * Remove an uninstantiated recipe
+     * @param name
+     * @throws ComponentDefinitionException if the recipe is already instantiated
+     */
+    void removeRecipe(String name);
+
     Object create(String name) throws ComponentDefinitionException;
 
     Map<String, Object> createAll(Collection<String> names) throws ComponentDefinitionException;
