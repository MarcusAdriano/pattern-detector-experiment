diff --git a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/ClientDataSourceFactory.java b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/ClientDataSourceFactory.java
index 55b66a93..073a92ef 100644
--- a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/ClientDataSourceFactory.java
+++ b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/ClientDataSourceFactory.java
@@ -26,11 +26,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import javax.naming.RefAddr;
 import javax.naming.Reference;
-import org.apache.derby.jdbc.ClientBaseDataSource;
-
-import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
-import org.apache.derby.jdbc.ClientDataSource;
-import org.apache.derby.jdbc.ClientXADataSource;
 
 /**
  * The data source factory currrently for ClientDataSource only. This factory will support XA and pooling-enabled data
@@ -78,23 +73,22 @@ public Object getObjectInstance(Object refObj,
                                     javax.naming.Name name,
                                     javax.naming.Context nameContext,
                                     java.util.Hashtable environment) throws java.lang.Exception {
+        Object ds = null;
+        if (refObj instanceof javax.naming.Reference) {
         javax.naming.Reference ref = (javax.naming.Reference) refObj;
 
+            // See if this object belongs to Derby.
+            String className = ref.getClassName();
+            if (className != null &&
+                    className.startsWith("org.apache.derby.jdbc.Client")) {
         // Create the proper data source object shell.
-        ClientBaseDataSource ds = null;
-        if (ref.getClassName().equals(ClientDataSource.className__)) {
-            ds = new ClientDataSource();
-        } else if (ref.getClassName().equals(ClientXADataSource.className__)) {
-            ds = new ClientXADataSource();
-        } else if (ref.getClassName().equals(ClientConnectionPoolDataSource.className__)) {
-            ds = new ClientConnectionPoolDataSource();
-        } else {
-            return null;
-        }
+                ds = Class.forName(className).newInstance();
 
-        // Fill in the data source object shell with values from the jndi reference.
+                // Fill in the data source object shell with values from the
+                // jndi reference.
         ClientDataSourceFactory.setBeanProperties(ds, ref);
-
+            }
+        }
         return ds;
     }
     
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java
index 08d2f891..abc0ffe4 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java
@@ -189,11 +189,6 @@ public static void assertDataSourceReference(
         Object recreatedDS = 
             factory.getObjectInstance(dsAsReference, null, null, null);
         
-        // DERBY-2559 - with jdk16, this recreatedDS will be null.
-        // bailing out
-        if (JDBC.vmSupportsJDBC4())
-            return;
-        
         println(" empty DataSource recreated using Reference as " +
             recreatedDS.getClass().getName());
         // empty DataSource recreated using Reference should not be 
