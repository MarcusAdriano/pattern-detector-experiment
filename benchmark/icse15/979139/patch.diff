diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
index 69543dd8..8d5bbcd7 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
@@ -308,15 +308,15 @@ public void read(TProtocol iprot) throws TException {
         case 1: // CREDENTIALS
           if (field.type == TType.MAP) {
             {
-              TMap _map28 = iprot.readMapBegin();
-              this.credentials = new HashMap<String,String>(2*_map28.size);
-              for (int _i29 = 0; _i29 < _map28.size; ++_i29)
+              TMap _map24 = iprot.readMapBegin();
+              this.credentials = new HashMap<String,String>(2*_map24.size);
+              for (int _i25 = 0; _i25 < _map24.size; ++_i25)
               {
-                String _key30;
-                String _val31;
-                _key30 = iprot.readString();
-                _val31 = iprot.readString();
-                this.credentials.put(_key30, _val31);
+                String _key26;
+                String _val27;
+                _key26 = iprot.readString();
+                _val27 = iprot.readString();
+                this.credentials.put(_key26, _val27);
               }
               iprot.readMapEnd();
             }
@@ -343,10 +343,10 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
       {
         oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.credentials.size()));
-        for (Map.Entry<String, String> _iter32 : this.credentials.entrySet())
+        for (Map.Entry<String, String> _iter28 : this.credentials.entrySet())
         {
-          oprot.writeString(_iter32.getKey());
-          oprot.writeString(_iter32.getValue());
+          oprot.writeString(_iter28.getKey());
+          oprot.writeString(_iter28.getValue());
         }
         oprot.writeMapEnd();
       }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
index 85207054..a86b9891 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
@@ -7057,14 +7057,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list41 = iprot.readListBegin();
-                this.success = new ArrayList<ColumnOrSuperColumn>(_list41.size);
-                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
+                TList _list37 = iprot.readListBegin();
+                this.success = new ArrayList<ColumnOrSuperColumn>(_list37.size);
+                for (int _i38 = 0; _i38 < _list37.size; ++_i38)
                 {
-                  ColumnOrSuperColumn _elem43;
-                  _elem43 = new ColumnOrSuperColumn();
-                  _elem43.read(iprot);
-                  this.success.add(_elem43);
+                  ColumnOrSuperColumn _elem39;
+                  _elem39 = new ColumnOrSuperColumn();
+                  _elem39.read(iprot);
+                  this.success.add(_elem39);
                 }
                 iprot.readListEnd();
               }
@@ -7114,9 +7114,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (ColumnOrSuperColumn _iter44 : this.success)
+          for (ColumnOrSuperColumn _iter40 : this.success)
           {
-            _iter44.write(oprot);
+            _iter40.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -7659,13 +7659,13 @@ public void read(TProtocol iprot) throws TException {
           case 1: // KEYS
             if (field.type == TType.LIST) {
               {
-                TList _list45 = iprot.readListBegin();
-                this.keys = new ArrayList<byte[]>(_list45.size);
-                for (int _i46 = 0; _i46 < _list45.size; ++_i46)
+                TList _list41 = iprot.readListBegin();
+                this.keys = new ArrayList<byte[]>(_list41.size);
+                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                 {
-                  byte[] _elem47;
-                  _elem47 = iprot.readBinary();
-                  this.keys.add(_elem47);
+                  byte[] _elem43;
+                  _elem43 = iprot.readBinary();
+                  this.keys.add(_elem43);
                 }
                 iprot.readListEnd();
               }
@@ -7715,9 +7715,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(KEYS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.keys.size()));
-          for (byte[] _iter48 : this.keys)
+          for (byte[] _iter44 : this.keys)
           {
-            oprot.writeBinary(_iter48);
+            oprot.writeBinary(_iter44);
           }
           oprot.writeListEnd();
         }
@@ -8265,26 +8265,26 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.MAP) {
               {
-                TMap _map49 = iprot.readMapBegin();
-                this.success = new HashMap<byte[],List<ColumnOrSuperColumn>>(2*_map49.size);
-                for (int _i50 = 0; _i50 < _map49.size; ++_i50)
+                TMap _map45 = iprot.readMapBegin();
+                this.success = new HashMap<byte[],List<ColumnOrSuperColumn>>(2*_map45.size);
+                for (int _i46 = 0; _i46 < _map45.size; ++_i46)
                 {
-                  byte[] _key51;
-                  List<ColumnOrSuperColumn> _val52;
-                  _key51 = iprot.readBinary();
+                  byte[] _key47;
+                  List<ColumnOrSuperColumn> _val48;
+                  _key47 = iprot.readBinary();
                   {
-                    TList _list53 = iprot.readListBegin();
-                    _val52 = new ArrayList<ColumnOrSuperColumn>(_list53.size);
-                    for (int _i54 = 0; _i54 < _list53.size; ++_i54)
+                    TList _list49 = iprot.readListBegin();
+                    _val48 = new ArrayList<ColumnOrSuperColumn>(_list49.size);
+                    for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                     {
-                      ColumnOrSuperColumn _elem55;
-                      _elem55 = new ColumnOrSuperColumn();
-                      _elem55.read(iprot);
-                      _val52.add(_elem55);
+                      ColumnOrSuperColumn _elem51;
+                      _elem51 = new ColumnOrSuperColumn();
+                      _elem51.read(iprot);
+                      _val48.add(_elem51);
                     }
                     iprot.readListEnd();
                   }
-                  this.success.put(_key51, _val52);
+                  this.success.put(_key47, _val48);
                 }
                 iprot.readMapEnd();
               }
@@ -8334,14 +8334,14 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.success.size()));
-          for (Map.Entry<byte[], List<ColumnOrSuperColumn>> _iter56 : this.success.entrySet())
+          for (Map.Entry<byte[], List<ColumnOrSuperColumn>> _iter52 : this.success.entrySet())
           {
-            oprot.writeBinary(_iter56.getKey());
+            oprot.writeBinary(_iter52.getKey());
             {
-              oprot.writeListBegin(new TList(TType.STRUCT, _iter56.getValue().size()));
-              for (ColumnOrSuperColumn _iter57 : _iter56.getValue())
+              oprot.writeListBegin(new TList(TType.STRUCT, _iter52.getValue().size()));
+              for (ColumnOrSuperColumn _iter53 : _iter52.getValue())
               {
-                _iter57.write(oprot);
+                _iter53.write(oprot);
               }
               oprot.writeListEnd();
             }
@@ -10087,13 +10087,13 @@ public void read(TProtocol iprot) throws TException {
           case 2: // KEYS
             if (field.type == TType.LIST) {
               {
-                TList _list58 = iprot.readListBegin();
-                this.keys = new ArrayList<byte[]>(_list58.size);
-                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
+                TList _list54 = iprot.readListBegin();
+                this.keys = new ArrayList<byte[]>(_list54.size);
+                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                 {
-                  byte[] _elem60;
-                  _elem60 = iprot.readBinary();
-                  this.keys.add(_elem60);
+                  byte[] _elem56;
+                  _elem56 = iprot.readBinary();
+                  this.keys.add(_elem56);
                 }
                 iprot.readListEnd();
               }
@@ -10148,9 +10148,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(KEYS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.keys.size()));
-          for (byte[] _iter61 : this.keys)
+          for (byte[] _iter57 : this.keys)
           {
-            oprot.writeBinary(_iter61);
+            oprot.writeBinary(_iter57);
           }
           oprot.writeListEnd();
         }
@@ -10705,15 +10705,15 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.MAP) {
               {
-                TMap _map62 = iprot.readMapBegin();
-                this.success = new HashMap<byte[],Integer>(2*_map62.size);
-                for (int _i63 = 0; _i63 < _map62.size; ++_i63)
+                TMap _map58 = iprot.readMapBegin();
+                this.success = new HashMap<byte[],Integer>(2*_map58.size);
+                for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                 {
-                  byte[] _key64;
-                  int _val65;
-                  _key64 = iprot.readBinary();
-                  _val65 = iprot.readI32();
-                  this.success.put(_key64, _val65);
+                  byte[] _key60;
+                  int _val61;
+                  _key60 = iprot.readBinary();
+                  _val61 = iprot.readI32();
+                  this.success.put(_key60, _val61);
                 }
                 iprot.readMapEnd();
               }
@@ -10763,10 +10763,10 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.success.size()));
-          for (Map.Entry<byte[], Integer> _iter66 : this.success.entrySet())
+          for (Map.Entry<byte[], Integer> _iter62 : this.success.entrySet())
           {
-            oprot.writeBinary(_iter66.getKey());
-            oprot.writeI32(_iter66.getValue());
+            oprot.writeBinary(_iter62.getKey());
+            oprot.writeI32(_iter62.getValue());
           }
           oprot.writeMapEnd();
         }
@@ -11867,14 +11867,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list67 = iprot.readListBegin();
-                this.success = new ArrayList<KeySlice>(_list67.size);
-                for (int _i68 = 0; _i68 < _list67.size; ++_i68)
+                TList _list63 = iprot.readListBegin();
+                this.success = new ArrayList<KeySlice>(_list63.size);
+                for (int _i64 = 0; _i64 < _list63.size; ++_i64)
                 {
-                  KeySlice _elem69;
-                  _elem69 = new KeySlice();
-                  _elem69.read(iprot);
-                  this.success.add(_elem69);
+                  KeySlice _elem65;
+                  _elem65 = new KeySlice();
+                  _elem65.read(iprot);
+                  this.success.add(_elem65);
                 }
                 iprot.readListEnd();
               }
@@ -11924,9 +11924,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (KeySlice _iter70 : this.success)
+          for (KeySlice _iter66 : this.success)
           {
-            _iter70.write(oprot);
+            _iter66.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -13027,14 +13027,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list71 = iprot.readListBegin();
-                this.success = new ArrayList<KeySlice>(_list71.size);
-                for (int _i72 = 0; _i72 < _list71.size; ++_i72)
+                TList _list67 = iprot.readListBegin();
+                this.success = new ArrayList<KeySlice>(_list67.size);
+                for (int _i68 = 0; _i68 < _list67.size; ++_i68)
                 {
-                  KeySlice _elem73;
-                  _elem73 = new KeySlice();
-                  _elem73.read(iprot);
-                  this.success.add(_elem73);
+                  KeySlice _elem69;
+                  _elem69 = new KeySlice();
+                  _elem69.read(iprot);
+                  this.success.add(_elem69);
                 }
                 iprot.readListEnd();
               }
@@ -13084,9 +13084,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (KeySlice _iter74 : this.success)
+          for (KeySlice _iter70 : this.success)
           {
-            _iter74.write(oprot);
+            _iter70.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -14187,14 +14187,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list75 = iprot.readListBegin();
-                this.success = new ArrayList<KeyCount>(_list75.size);
-                for (int _i76 = 0; _i76 < _list75.size; ++_i76)
+                TList _list71 = iprot.readListBegin();
+                this.success = new ArrayList<KeyCount>(_list71.size);
+                for (int _i72 = 0; _i72 < _list71.size; ++_i72)
                 {
-                  KeyCount _elem77;
-                  _elem77 = new KeyCount();
-                  _elem77.read(iprot);
-                  this.success.add(_elem77);
+                  KeyCount _elem73;
+                  _elem73 = new KeyCount();
+                  _elem73.read(iprot);
+                  this.success.add(_elem73);
                 }
                 iprot.readListEnd();
               }
@@ -14244,9 +14244,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (KeyCount _iter78 : this.success)
+          for (KeyCount _iter74 : this.success)
           {
-            _iter78.write(oprot);
+            _iter74.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -16755,38 +16755,38 @@ public void read(TProtocol iprot) throws TException {
           case 1: // MUTATION_MAP
             if (field.type == TType.MAP) {
               {
+                TMap _map75 = iprot.readMapBegin();
+                this.mutation_map = new HashMap<byte[],Map<String,List<Mutation>>>(2*_map75.size);
+                for (int _i76 = 0; _i76 < _map75.size; ++_i76)
+                {
+                  byte[] _key77;
+                  Map<String,List<Mutation>> _val78;
+                  _key77 = iprot.readBinary();
+                  {
                 TMap _map79 = iprot.readMapBegin();
-                this.mutation_map = new HashMap<byte[],Map<String,List<Mutation>>>(2*_map79.size);
+                    _val78 = new HashMap<String,List<Mutation>>(2*_map79.size);
                 for (int _i80 = 0; _i80 < _map79.size; ++_i80)
                 {
-                  byte[] _key81;
-                  Map<String,List<Mutation>> _val82;
-                  _key81 = iprot.readBinary();
-                  {
-                    TMap _map83 = iprot.readMapBegin();
-                    _val82 = new HashMap<String,List<Mutation>>(2*_map83.size);
-                    for (int _i84 = 0; _i84 < _map83.size; ++_i84)
-                    {
-                      String _key85;
-                      List<Mutation> _val86;
-                      _key85 = iprot.readString();
+                      String _key81;
+                      List<Mutation> _val82;
+                      _key81 = iprot.readString();
                       {
-                        TList _list87 = iprot.readListBegin();
-                        _val86 = new ArrayList<Mutation>(_list87.size);
-                        for (int _i88 = 0; _i88 < _list87.size; ++_i88)
+                        TList _list83 = iprot.readListBegin();
+                        _val82 = new ArrayList<Mutation>(_list83.size);
+                        for (int _i84 = 0; _i84 < _list83.size; ++_i84)
                         {
-                          Mutation _elem89;
-                          _elem89 = new Mutation();
-                          _elem89.read(iprot);
-                          _val86.add(_elem89);
+                          Mutation _elem85;
+                          _elem85 = new Mutation();
+                          _elem85.read(iprot);
+                          _val82.add(_elem85);
                         }
                         iprot.readListEnd();
                       }
-                      _val82.put(_key85, _val86);
+                      _val78.put(_key81, _val82);
                     }
                     iprot.readMapEnd();
                   }
-                  this.mutation_map.put(_key81, _val82);
+                  this.mutation_map.put(_key77, _val78);
                 }
                 iprot.readMapEnd();
               }
@@ -16820,19 +16820,19 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(MUTATION_MAP_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.mutation_map.size()));
-          for (Map.Entry<byte[], Map<String,List<Mutation>>> _iter90 : this.mutation_map.entrySet())
+          for (Map.Entry<byte[], Map<String,List<Mutation>>> _iter86 : this.mutation_map.entrySet())
           {
-            oprot.writeBinary(_iter90.getKey());
+            oprot.writeBinary(_iter86.getKey());
             {
-              oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter90.getValue().size()));
-              for (Map.Entry<String, List<Mutation>> _iter91 : _iter90.getValue().entrySet())
+              oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter86.getValue().size()));
+              for (Map.Entry<String, List<Mutation>> _iter87 : _iter86.getValue().entrySet())
               {
-                oprot.writeString(_iter91.getKey());
+                oprot.writeString(_iter87.getKey());
                 {
-                  oprot.writeListBegin(new TList(TType.STRUCT, _iter91.getValue().size()));
-                  for (Mutation _iter92 : _iter91.getValue())
+                  oprot.writeListBegin(new TList(TType.STRUCT, _iter87.getValue().size()));
+                  for (Mutation _iter88 : _iter87.getValue())
                   {
-                    _iter92.write(oprot);
+                    _iter88.write(oprot);
                   }
                   oprot.writeListEnd();
                 }
@@ -18526,25 +18526,25 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.MAP) {
               {
-                TMap _map93 = iprot.readMapBegin();
-                this.success = new HashMap<String,List<String>>(2*_map93.size);
-                for (int _i94 = 0; _i94 < _map93.size; ++_i94)
+                TMap _map89 = iprot.readMapBegin();
+                this.success = new HashMap<String,List<String>>(2*_map89.size);
+                for (int _i90 = 0; _i90 < _map89.size; ++_i90)
                 {
-                  String _key95;
-                  List<String> _val96;
-                  _key95 = iprot.readString();
+                  String _key91;
+                  List<String> _val92;
+                  _key91 = iprot.readString();
                   {
-                    TList _list97 = iprot.readListBegin();
-                    _val96 = new ArrayList<String>(_list97.size);
-                    for (int _i98 = 0; _i98 < _list97.size; ++_i98)
+                    TList _list93 = iprot.readListBegin();
+                    _val92 = new ArrayList<String>(_list93.size);
+                    for (int _i94 = 0; _i94 < _list93.size; ++_i94)
                     {
-                      String _elem99;
-                      _elem99 = iprot.readString();
-                      _val96.add(_elem99);
+                      String _elem95;
+                      _elem95 = iprot.readString();
+                      _val92.add(_elem95);
                     }
                     iprot.readListEnd();
                   }
-                  this.success.put(_key95, _val96);
+                  this.success.put(_key91, _val92);
                 }
                 iprot.readMapEnd();
               }
@@ -18578,14 +18578,14 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.success.size()));
-          for (Map.Entry<String, List<String>> _iter100 : this.success.entrySet())
+          for (Map.Entry<String, List<String>> _iter96 : this.success.entrySet())
           {
-            oprot.writeString(_iter100.getKey());
+            oprot.writeString(_iter96.getKey());
             {
-              oprot.writeListBegin(new TList(TType.STRING, _iter100.getValue().size()));
-              for (String _iter101 : _iter100.getValue())
+              oprot.writeListBegin(new TList(TType.STRING, _iter96.getValue().size()));
+              for (String _iter97 : _iter96.getValue())
               {
-                oprot.writeString(_iter101);
+                oprot.writeString(_iter97);
               }
               oprot.writeListEnd();
             }
@@ -19077,13 +19077,13 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.SET) {
               {
-                TSet _set102 = iprot.readSetBegin();
-                this.success = new HashSet<String>(2*_set102.size);
-                for (int _i103 = 0; _i103 < _set102.size; ++_i103)
+                TSet _set98 = iprot.readSetBegin();
+                this.success = new HashSet<String>(2*_set98.size);
+                for (int _i99 = 0; _i99 < _set98.size; ++_i99)
                 {
-                  String _elem104;
-                  _elem104 = iprot.readString();
-                  this.success.add(_elem104);
+                  String _elem100;
+                  _elem100 = iprot.readString();
+                  this.success.add(_elem100);
                 }
                 iprot.readSetEnd();
               }
@@ -19109,9 +19109,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeSetBegin(new TSet(TType.STRING, this.success.size()));
-          for (String _iter105 : this.success)
+          for (String _iter101 : this.success)
           {
-            oprot.writeString(_iter105);
+            oprot.writeString(_iter101);
           }
           oprot.writeSetEnd();
         }
@@ -20699,14 +20699,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list106 = iprot.readListBegin();
-                this.success = new ArrayList<TokenRange>(_list106.size);
-                for (int _i107 = 0; _i107 < _list106.size; ++_i107)
+                TList _list102 = iprot.readListBegin();
+                this.success = new ArrayList<TokenRange>(_list102.size);
+                for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                 {
-                  TokenRange _elem108;
-                  _elem108 = new TokenRange();
-                  _elem108.read(iprot);
-                  this.success.add(_elem108);
+                  TokenRange _elem104;
+                  _elem104 = new TokenRange();
+                  _elem104.read(iprot);
+                  this.success.add(_elem104);
                 }
                 iprot.readListEnd();
               }
@@ -20740,9 +20740,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (TokenRange _iter109 : this.success)
+          for (TokenRange _iter105 : this.success)
           {
-            _iter109.write(oprot);
+            _iter105.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -21412,27 +21412,27 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.MAP) {
               {
+                TMap _map106 = iprot.readMapBegin();
+                this.success = new HashMap<String,Map<String,String>>(2*_map106.size);
+                for (int _i107 = 0; _i107 < _map106.size; ++_i107)
+                {
+                  String _key108;
+                  Map<String,String> _val109;
+                  _key108 = iprot.readString();
+                  {
                 TMap _map110 = iprot.readMapBegin();
-                this.success = new HashMap<String,Map<String,String>>(2*_map110.size);
+                    _val109 = new HashMap<String,String>(2*_map110.size);
                 for (int _i111 = 0; _i111 < _map110.size; ++_i111)
                 {
                   String _key112;
-                  Map<String,String> _val113;
+                      String _val113;
                   _key112 = iprot.readString();
-                  {
-                    TMap _map114 = iprot.readMapBegin();
-                    _val113 = new HashMap<String,String>(2*_map114.size);
-                    for (int _i115 = 0; _i115 < _map114.size; ++_i115)
-                    {
-                      String _key116;
-                      String _val117;
-                      _key116 = iprot.readString();
-                      _val117 = iprot.readString();
-                      _val113.put(_key116, _val117);
+                      _val113 = iprot.readString();
+                      _val109.put(_key112, _val113);
                     }
                     iprot.readMapEnd();
                   }
-                  this.success.put(_key112, _val113);
+                  this.success.put(_key108, _val109);
                 }
                 iprot.readMapEnd();
               }
@@ -21466,15 +21466,15 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.success.size()));
-          for (Map.Entry<String, Map<String,String>> _iter118 : this.success.entrySet())
+          for (Map.Entry<String, Map<String,String>> _iter114 : this.success.entrySet())
           {
-            oprot.writeString(_iter118.getKey());
+            oprot.writeString(_iter114.getKey());
             {
-              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter118.getValue().size()));
-              for (Map.Entry<String, String> _iter119 : _iter118.getValue().entrySet())
+              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter114.getValue().size()));
+              for (Map.Entry<String, String> _iter115 : _iter114.getValue().entrySet())
               {
-                oprot.writeString(_iter119.getKey());
-                oprot.writeString(_iter119.getValue());
+                oprot.writeString(_iter115.getKey());
+                oprot.writeString(_iter115.getValue());
               }
               oprot.writeMapEnd();
             }
@@ -22420,13 +22420,13 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list120 = iprot.readListBegin();
-                this.success = new ArrayList<String>(_list120.size);
-                for (int _i121 = 0; _i121 < _list120.size; ++_i121)
+                TList _list116 = iprot.readListBegin();
+                this.success = new ArrayList<String>(_list116.size);
+                for (int _i117 = 0; _i117 < _list116.size; ++_i117)
                 {
-                  String _elem122;
-                  _elem122 = iprot.readString();
-                  this.success.add(_elem122);
+                  String _elem118;
+                  _elem118 = iprot.readString();
+                  this.success.add(_elem118);
                 }
                 iprot.readListEnd();
               }
@@ -22452,9 +22452,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
-          for (String _iter123 : this.success)
+          for (String _iter119 : this.success)
           {
-            oprot.writeString(_iter123);
+            oprot.writeString(_iter119);
           }
           oprot.writeListEnd();
         }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
index bf729524..66b7f3a7 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
@@ -1248,14 +1248,14 @@ public void read(TProtocol iprot) throws TException {
         case 13: // COLUMN_METADATA
           if (field.type == TType.LIST) {
             {
-              TList _list33 = iprot.readListBegin();
-              this.column_metadata = new ArrayList<ColumnDef>(_list33.size);
-              for (int _i34 = 0; _i34 < _list33.size; ++_i34)
+              TList _list29 = iprot.readListBegin();
+              this.column_metadata = new ArrayList<ColumnDef>(_list29.size);
+              for (int _i30 = 0; _i30 < _list29.size; ++_i30)
               {
-                ColumnDef _elem35;
-                _elem35 = new ColumnDef();
-                _elem35.read(iprot);
-                this.column_metadata.add(_elem35);
+                ColumnDef _elem31;
+                _elem31 = new ColumnDef();
+                _elem31.read(iprot);
+                this.column_metadata.add(_elem31);
               }
               iprot.readListEnd();
             }
@@ -1363,9 +1363,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(COLUMN_METADATA_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.column_metadata.size()));
-          for (ColumnDef _iter36 : this.column_metadata)
+          for (ColumnDef _iter32 : this.column_metadata)
           {
-            _iter36.write(oprot);
+            _iter32.write(oprot);
           }
           oprot.writeListEnd();
         }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
index 9eadd91d..b1b608a5 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
@@ -42,6 +42,6 @@
 
 public class Constants {
 
-  public static final String VERSION = "8.5.0";
+  public static final String VERSION = "9.0.0";
 
 }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java
index 1ea5f563..f46a618f 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java
@@ -437,14 +437,14 @@ public void read(TProtocol iprot) throws TException {
         case 1: // EXPRESSIONS
           if (field.type == TType.LIST) {
             {
-              TList _list12 = iprot.readListBegin();
-              this.expressions = new ArrayList<IndexExpression>(_list12.size);
-              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
+              TList _list8 = iprot.readListBegin();
+              this.expressions = new ArrayList<IndexExpression>(_list8.size);
+              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
               {
-                IndexExpression _elem14;
-                _elem14 = new IndexExpression();
-                _elem14.read(iprot);
-                this.expressions.add(_elem14);
+                IndexExpression _elem10;
+                _elem10 = new IndexExpression();
+                _elem10.read(iprot);
+                this.expressions.add(_elem10);
               }
               iprot.readListEnd();
             }
@@ -489,9 +489,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
       {
         oprot.writeListBegin(new TList(TType.STRUCT, this.expressions.size()));
-        for (IndexExpression _iter15 : this.expressions)
+        for (IndexExpression _iter11 : this.expressions)
         {
-          _iter15.write(oprot);
+          _iter11.write(oprot);
         }
         oprot.writeListEnd();
       }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
index 9611bd1e..ed9fe3be 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
@@ -382,14 +382,14 @@ public void read(TProtocol iprot) throws TException {
         case 2: // COLUMNS
           if (field.type == TType.LIST) {
             {
-              TList _list20 = iprot.readListBegin();
-              this.columns = new ArrayList<ColumnOrSuperColumn>(_list20.size);
-              for (int _i21 = 0; _i21 < _list20.size; ++_i21)
+              TList _list16 = iprot.readListBegin();
+              this.columns = new ArrayList<ColumnOrSuperColumn>(_list16.size);
+              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
               {
-                ColumnOrSuperColumn _elem22;
-                _elem22 = new ColumnOrSuperColumn();
-                _elem22.read(iprot);
-                this.columns.add(_elem22);
+                ColumnOrSuperColumn _elem18;
+                _elem18 = new ColumnOrSuperColumn();
+                _elem18.read(iprot);
+                this.columns.add(_elem18);
               }
               iprot.readListEnd();
             }
@@ -421,9 +421,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
       {
         oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
-        for (ColumnOrSuperColumn _iter23 : this.columns)
+        for (ColumnOrSuperColumn _iter19 : this.columns)
         {
-          _iter23.write(oprot);
+          _iter19.write(oprot);
         }
         oprot.writeListEnd();
       }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java
index 4a12251b..39c6e537 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java
@@ -525,14 +525,14 @@ public void read(TProtocol iprot) throws TException {
         case 5: // CF_DEFS
           if (field.type == TType.LIST) {
             {
-              TList _list37 = iprot.readListBegin();
-              this.cf_defs = new ArrayList<CfDef>(_list37.size);
-              for (int _i38 = 0; _i38 < _list37.size; ++_i38)
+              TList _list33 = iprot.readListBegin();
+              this.cf_defs = new ArrayList<CfDef>(_list33.size);
+              for (int _i34 = 0; _i34 < _list33.size; ++_i34)
               {
-                CfDef _elem39;
-                _elem39 = new CfDef();
-                _elem39.read(iprot);
-                this.cf_defs.add(_elem39);
+                CfDef _elem35;
+                _elem35 = new CfDef();
+                _elem35.read(iprot);
+                this.cf_defs.add(_elem35);
               }
               iprot.readListEnd();
             }
@@ -575,9 +575,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(CF_DEFS_FIELD_DESC);
       {
         oprot.writeListBegin(new TList(TType.STRUCT, this.cf_defs.size()));
-        for (CfDef _iter40 : this.cf_defs)
+        for (CfDef _iter36 : this.cf_defs)
         {
-          _iter40.write(oprot);
+          _iter36.write(oprot);
         }
         oprot.writeListEnd();
       }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/RowPredicate.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/RowPredicate.java
index cab740ba..2635ebe4 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/RowPredicate.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/RowPredicate.java
@@ -425,13 +425,13 @@ public void read(TProtocol iprot) throws TException {
         case 1: // KEYS
           if (field.type == TType.LIST) {
             {
-              TList _list16 = iprot.readListBegin();
-              this.keys = new ArrayList<byte[]>(_list16.size);
-              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
+              TList _list12 = iprot.readListBegin();
+              this.keys = new ArrayList<byte[]>(_list12.size);
+              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
               {
-                byte[] _elem18;
-                _elem18 = iprot.readBinary();
-                this.keys.add(_elem18);
+                byte[] _elem14;
+                _elem14 = iprot.readBinary();
+                this.keys.add(_elem14);
               }
               iprot.readListEnd();
             }
@@ -475,9 +475,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(KEYS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.keys.size()));
-          for (byte[] _iter19 : this.keys)
+          for (byte[] _iter15 : this.keys)
           {
-            oprot.writeBinary(_iter19);
+            oprot.writeBinary(_iter15);
           }
           oprot.writeListEnd();
         }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
index 914d023a..b5e3cad3 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
@@ -372,13 +372,13 @@ public void read(TProtocol iprot) throws TException {
         case 1: // COLUMN_NAMES
           if (field.type == TType.LIST) {
             {
-              TList _list8 = iprot.readListBegin();
-              this.column_names = new ArrayList<byte[]>(_list8.size);
-              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
+              TList _list4 = iprot.readListBegin();
+              this.column_names = new ArrayList<byte[]>(_list4.size);
+              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
               {
-                byte[] _elem10;
-                _elem10 = iprot.readBinary();
-                this.column_names.add(_elem10);
+                byte[] _elem6;
+                _elem6 = iprot.readBinary();
+                this.column_names.add(_elem6);
               }
               iprot.readListEnd();
             }
@@ -414,9 +414,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.column_names.size()));
-          for (byte[] _iter11 : this.column_names)
+          for (byte[] _iter7 : this.column_names)
           {
-            oprot.writeBinary(_iter11);
+            oprot.writeBinary(_iter7);
           }
           oprot.writeListEnd();
         }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
index 54947307..d7aea8ea 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
@@ -57,11 +57,10 @@
  *                and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
  *                must also be a valid value to the ColumnFamily Comparator.
  * @param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
- * @param count. How many keys to return. Similar to LIMIT 100 in SQL. May be arbitrarily large, but Thrift will
+ * @param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will
  *               materialize the whole result into memory before returning it to the client, so be aware that you may
  *               be better served by iterating through slices by passing the last value of one call in as the 'start'
  *               of the next instead of increasing 'count' arbitrarily large.
- * @param bitmasks. A list of OR-ed binary AND masks applied to the result set.
  */
 public class SliceRange implements TBase<SliceRange, SliceRange._Fields>, java.io.Serializable, Cloneable {
   private static final TStruct STRUCT_DESC = new TStruct("SliceRange");
@@ -70,21 +69,18 @@
   private static final TField FINISH_FIELD_DESC = new TField("finish", TType.STRING, (short)2);
   private static final TField REVERSED_FIELD_DESC = new TField("reversed", TType.BOOL, (short)3);
   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)4);
-  private static final TField BITMASKS_FIELD_DESC = new TField("bitmasks", TType.LIST, (short)5);
 
   public byte[] start;
   public byte[] finish;
   public boolean reversed;
   public int count;
-  public List<byte[]> bitmasks;
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements TFieldIdEnum {
     START((short)1, "start"),
     FINISH((short)2, "finish"),
     REVERSED((short)3, "reversed"),
-    COUNT((short)4, "count"),
-    BITMASKS((short)5, "bitmasks");
+    COUNT((short)4, "count");
 
     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -107,8 +103,6 @@ public static _Fields findByThriftId(int fieldId) {
           return REVERSED;
         case 4: // COUNT
           return COUNT;
-        case 5: // BITMASKS
-          return BITMASKS;
         default:
           return null;
       }
@@ -164,9 +158,6 @@ public String getFieldName() {
         new FieldValueMetaData(TType.BOOL)));
     tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
         new FieldValueMetaData(TType.I32)));
-    tmpMap.put(_Fields.BITMASKS, new FieldMetaData("bitmasks", TFieldRequirementType.OPTIONAL, 
-        new ListMetaData(TType.LIST, 
-            new FieldValueMetaData(TType.STRING))));
     metaDataMap = Collections.unmodifiableMap(tmpMap);
     FieldMetaData.addStructMetaDataMap(SliceRange.class, metaDataMap);
   }
@@ -209,15 +200,6 @@ public SliceRange(SliceRange other) {
     }
     this.reversed = other.reversed;
     this.count = other.count;
-    if (other.isSetBitmasks()) {
-      List<byte[]> __this__bitmasks = new ArrayList<byte[]>();
-      for (byte[] other_element : other.bitmasks) {
-        byte[] temp_binary_element = new byte[other_element.length];
-        System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
-        __this__bitmasks.add(temp_binary_element);
-      }
-      this.bitmasks = __this__bitmasks;
-    }
   }
 
   public SliceRange deepCopy() {
@@ -323,45 +305,6 @@ public void setCountIsSet(boolean value) {
     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
   }
 
-  public int getBitmasksSize() {
-    return (this.bitmasks == null) ? 0 : this.bitmasks.size();
-  }
-
-  public java.util.Iterator<byte[]> getBitmasksIterator() {
-    return (this.bitmasks == null) ? null : this.bitmasks.iterator();
-  }
-
-  public void addToBitmasks(byte[] elem) {
-    if (this.bitmasks == null) {
-      this.bitmasks = new ArrayList<byte[]>();
-    }
-    this.bitmasks.add(elem);
-  }
-
-  public List<byte[]> getBitmasks() {
-    return this.bitmasks;
-  }
-
-  public SliceRange setBitmasks(List<byte[]> bitmasks) {
-    this.bitmasks = bitmasks;
-    return this;
-  }
-
-  public void unsetBitmasks() {
-    this.bitmasks = null;
-  }
-
-  /** Returns true if field bitmasks is set (has been asigned a value) and false otherwise */
-  public boolean isSetBitmasks() {
-    return this.bitmasks != null;
-  }
-
-  public void setBitmasksIsSet(boolean value) {
-    if (!value) {
-      this.bitmasks = null;
-    }
-  }
-
   public void setFieldValue(_Fields field, Object value) {
     switch (field) {
     case START:
@@ -396,14 +339,6 @@ public void setFieldValue(_Fields field, Object value) {
       }
       break;
 
-    case BITMASKS:
-      if (value == null) {
-        unsetBitmasks();
-      } else {
-        setBitmasks((List<byte[]>)value);
-      }
-      break;
-
     }
   }
 
@@ -425,9 +360,6 @@ public Object getFieldValue(_Fields field) {
     case COUNT:
       return new Integer(getCount());
 
-    case BITMASKS:
-      return getBitmasks();
-
     }
     throw new IllegalStateException();
   }
@@ -447,8 +379,6 @@ public boolean isSet(_Fields field) {
       return isSetReversed();
     case COUNT:
       return isSetCount();
-    case BITMASKS:
-      return isSetBitmasks();
     }
     throw new IllegalStateException();
   }
@@ -506,15 +436,6 @@ public boolean equals(SliceRange that) {
         return false;
     }
 
-    boolean this_present_bitmasks = true && this.isSetBitmasks();
-    boolean that_present_bitmasks = true && that.isSetBitmasks();
-    if (this_present_bitmasks || that_present_bitmasks) {
-      if (!(this_present_bitmasks && that_present_bitmasks))
-        return false;
-      if (!this.bitmasks.equals(that.bitmasks))
-        return false;
-    }
-
     return true;
   }
 
@@ -567,15 +488,6 @@ public int compareTo(SliceRange other) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetBitmasks()).compareTo(typedOther.isSetBitmasks());
-    if (lastComparison != 0) {
-      return lastComparison;
-    }
-    if (isSetBitmasks()) {      lastComparison = TBaseHelper.compareTo(this.bitmasks, typedOther.bitmasks);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-    }
     return 0;
   }
 
@@ -619,23 +531,6 @@ public void read(TProtocol iprot) throws TException {
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
-        case 5: // BITMASKS
-          if (field.type == TType.LIST) {
-            {
-              TList _list4 = iprot.readListBegin();
-              this.bitmasks = new ArrayList<byte[]>(_list4.size);
-              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
-              {
-                byte[] _elem6;
-                _elem6 = iprot.readBinary();
-                this.bitmasks.add(_elem6);
-              }
-              iprot.readListEnd();
-            }
-          } else { 
-            TProtocolUtil.skip(iprot, field.type);
-          }
-          break;
         default:
           TProtocolUtil.skip(iprot, field.type);
       }
@@ -673,20 +568,6 @@ public void write(TProtocol oprot) throws TException {
     oprot.writeFieldBegin(COUNT_FIELD_DESC);
     oprot.writeI32(this.count);
     oprot.writeFieldEnd();
-    if (this.bitmasks != null) {
-      if (isSetBitmasks()) {
-        oprot.writeFieldBegin(BITMASKS_FIELD_DESC);
-        {
-          oprot.writeListBegin(new TList(TType.STRING, this.bitmasks.size()));
-          for (byte[] _iter7 : this.bitmasks)
-          {
-            oprot.writeBinary(_iter7);
-          }
-          oprot.writeListEnd();
-        }
-        oprot.writeFieldEnd();
-      }
-    }
     oprot.writeFieldStop();
     oprot.writeStructEnd();
   }
@@ -729,16 +610,6 @@ public String toString() {
     sb.append("count:");
     sb.append(this.count);
     first = false;
-    if (isSetBitmasks()) {
-      if (!first) sb.append(", ");
-      sb.append("bitmasks:");
-      if (this.bitmasks == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.bitmasks);
-      }
-      first = false;
-    }
     sb.append(")");
     return sb.toString();
   }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
index 7124c5b3..76de6631 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
@@ -448,13 +448,13 @@ public void read(TProtocol iprot) throws TException {
         case 3: // ENDPOINTS
           if (field.type == TType.LIST) {
             {
-              TList _list24 = iprot.readListBegin();
-              this.endpoints = new ArrayList<String>(_list24.size);
-              for (int _i25 = 0; _i25 < _list24.size; ++_i25)
+              TList _list20 = iprot.readListBegin();
+              this.endpoints = new ArrayList<String>(_list20.size);
+              for (int _i21 = 0; _i21 < _list20.size; ++_i21)
               {
-                String _elem26;
-                _elem26 = iprot.readString();
-                this.endpoints.add(_elem26);
+                String _elem22;
+                _elem22 = iprot.readString();
+                this.endpoints.add(_elem22);
               }
               iprot.readListEnd();
             }
@@ -491,9 +491,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(ENDPOINTS_FIELD_DESC);
       {
         oprot.writeListBegin(new TList(TType.STRING, this.endpoints.size()));
-        for (String _iter27 : this.endpoints)
+        for (String _iter23 : this.endpoints)
         {
-          oprot.writeString(_iter27);
+          oprot.writeString(_iter23);
         }
         oprot.writeListEnd();
       }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
index 08711e58..97c0b5c5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
@@ -202,7 +202,7 @@ public static IColumnIterator getSliceIterator(final DecoratedKey key, final Col
     {
         assert cf != null;
         final boolean isSuper = cf.isSuper();
-        final Collection<IColumn> filteredColumns = filter.reversed ? filter.applyPredicate(cf.getReverseSortedColumns()) : filter.applyPredicate(cf.getSortedColumns());
+        final Collection<IColumn> filteredColumns = filter.reversed ? cf.getReverseSortedColumns() : cf.getSortedColumns();
 
         // ok to not have subcolumnComparator since we won't be adding columns to this object
         IColumn startColumn = isSuper ? new SuperColumn(filter.start, null, cf.getClockType(), cf.getReconciler()) :  new Column(filter.start);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java
index 45088d2f..8aac3c79 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/IdentityQueryFilter.java
@@ -32,7 +32,7 @@
      */
     public IdentityQueryFilter()
     {
-        super(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, null, false, Integer.MAX_VALUE);
+        super(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, Integer.MAX_VALUE);
     }
 
     public SuperColumn filterSuperColumn(SuperColumn superColumn, int gcBefore)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
index eae3f991..479fde11 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
@@ -161,7 +161,7 @@ public static boolean isRelevant(IColumn column, IColumnContainer container, int
      */
     public static QueryFilter getSliceFilter(DecoratedKey key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int limit)
     {
-        return new QueryFilter(key, path, new SliceQueryFilter(start, finish, bitmasks, reversed, limit));
+        return new QueryFilter(key, path, new SliceQueryFilter(start, finish, reversed, limit));
     }
 
     /**
@@ -194,7 +194,7 @@ public static IFilter getFilter(SlicePredicate predicate, AbstractType comparato
         }
 
         SliceRange range = predicate.slice_range;
-        return new SliceQueryFilter(range.start, range.finish, range.bitmasks, range.reversed, range.count);
+        return new SliceQueryFilter(range.start, range.finish, range.reversed, range.count);
     }
 
     /**
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
index b591d16d..a29cda04 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
@@ -35,7 +35,6 @@
 import org.apache.cassandra.io.util.FileDataInput;
 import org.apache.cassandra.io.util.FileMark;
 
-import com.google.common.base.Predicate;
 import com.google.common.collect.AbstractIterator;
 import org.apache.cassandra.utils.FBUtilities;
 
@@ -44,7 +43,6 @@
  */
 class SSTableSliceIterator extends AbstractIterator<IColumn> implements IColumnIterator
 {
-    private final Predicate<IColumn> predicate;
     private final boolean reversed;
     private final byte[] startColumn;
     private final byte[] finishColumn;
@@ -53,9 +51,9 @@
     private boolean closeFileWhenDone = false;
     private DecoratedKey decoratedKey;
 
-    public SSTableSliceIterator(SSTableReader ssTable, DecoratedKey key, byte[] startColumn, byte[] finishColumn, Predicate<IColumn> predicate, boolean reversed)
+    public SSTableSliceIterator(SSTableReader ssTable, DecoratedKey key, byte[] startColumn, byte[] finishColumn, boolean reversed)
     {
-        this(ssTable, null, key, startColumn, finishColumn, predicate, reversed); 
+        this(ssTable, null, key, startColumn, finishColumn, reversed);
     }
 
     /**
@@ -68,13 +66,11 @@ public SSTableSliceIterator(SSTableReader ssTable, DecoratedKey key, byte[] star
      * @param key The key the requested slice resides under
      * @param startColumn The start of the slice
      * @param finishColumn The end of the slice
-     * @param predicate The predicate used for filtering columns
      * @param reversed Results are returned in reverse order iff reversed is true.
      */
-    public SSTableSliceIterator(SSTableReader ssTable, FileDataInput file, DecoratedKey key, byte[] startColumn, byte[] finishColumn, Predicate<IColumn> predicate, boolean reversed) 
+    public SSTableSliceIterator(SSTableReader ssTable, FileDataInput file, DecoratedKey key, byte[] startColumn, byte[] finishColumn, boolean reversed)
     {
         this.reversed = reversed;
-        this.predicate = predicate;
         this.comparator = ssTable.getColumnComparator();
         this.startColumn = startColumn;
         this.finishColumn = finishColumn;
@@ -110,14 +106,6 @@ public DecoratedKey getKey()
     }
 
     private boolean isColumnNeeded(IColumn column)
-    {
-        if (!isColumnNeededByRange(column))
-            return false;
-
-        return predicate.apply(column);
-    }
-
-    private boolean isColumnNeededByRange(IColumn column)
     {
         if (startColumn.length == 0 && finishColumn.length == 0)
             return true;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
index bd28403f..a11b64d0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
@@ -46,17 +46,15 @@
 
     public final byte[] start;
     public final byte[] finish;
-    public final List<byte[]> bitmasks;
     public final boolean reversed;
     public final int count;
 
-    public SliceQueryFilter(byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int count)
+    public SliceQueryFilter(byte[] start, byte[] finish, boolean reversed, int count)
     {
         this.start = start;
         this.finish = finish;
         this.reversed = reversed;
         this.count = count;
-        this.bitmasks = bitmasks;
     }
 
     public IColumnIterator getMemtableColumnIterator(ColumnFamily cf, DecoratedKey key, AbstractType comparator)
@@ -66,19 +64,12 @@ public IColumnIterator getMemtableColumnIterator(ColumnFamily cf, DecoratedKey k
 
     public IColumnIterator getSSTableColumnIterator(SSTableReader sstable, DecoratedKey key)
     {
-        return new SSTableSliceIterator(sstable, key, start, finish, getPredicate(), reversed);
+        return new SSTableSliceIterator(sstable, key, start, finish, reversed);
     }
     
     public IColumnIterator getSSTableColumnIterator(SSTableReader sstable, FileDataInput file, DecoratedKey key, long dataStart)
     {
-        return new SSTableSliceIterator(sstable, file, key, start, finish, getPredicate(), reversed);
-    }
-    
-    private Predicate<IColumn> getPredicate()
-    {
-        return (bitmasks == null || bitmasks.isEmpty())
-               ? Predicates.<IColumn>alwaysTrue()
-               : getBitmaskMatchColumnPredicate();
+        return new SSTableSliceIterator(sstable, file, key, start, finish, reversed);
     }
 
     public SuperColumn filterSuperColumn(SuperColumn superColumn, int gcBefore)
@@ -97,12 +88,6 @@ public SuperColumn filterSuperColumn(SuperColumn superColumn, int gcBefore)
             subcolumns = superColumn.getSubColumns().iterator();
         }
 
-        // now apply the predicate
-        if (bitmasks != null && !bitmasks.isEmpty())
-        {
-            subcolumns = Iterators.filter(subcolumns, getBitmaskMatchColumnPredicate());
-        }
-
         // iterate until we get to the "real" start column
         Comparator<byte[]> comparator = reversed ? superColumn.getComparator().getReverseComparator() : superColumn.getComparator();
         while (subcolumns.hasNext())
@@ -157,48 +142,4 @@ public void collectReducedColumns(IColumnContainer container, Iterator<IColumn>
                 container.addColumn(column);
         }
     }
-
-    public Collection<IColumn> applyPredicate(Collection<IColumn> columns)
-    {
-        if (bitmasks == null || bitmasks.isEmpty())
-            return columns;
-
-        return Collections2.filter(columns, getBitmaskMatchColumnPredicate());
-    }
-
-    @SuppressWarnings("unchecked")
-    private Predicate<IColumn> getBitmaskMatchColumnPredicate()
-    {
-        Predicate<IColumn>[] predicates = new Predicate[bitmasks.size()];
-        for (int i = 0; i < bitmasks.size(); i++)
-        {
-            final byte[] bitmask = bitmasks.get(i);
-            predicates[i] = new Predicate<IColumn>()
-            {
-                public boolean apply(IColumn col)
-                {
-                    return matchesBitmask(bitmask, col.name());
-                }
-            };
-        }
-        return Predicates.or(predicates);
-    }
-
-    public static boolean matchesBitmask(byte[] bitmask, byte[] name)
-    {
-        assert name != null;
-        assert bitmask != null;
-
-        int len = Math.min(bitmask.length, name.length);
-
-        for (int i = 0; i < len; i++)
-        {
-            if ((bitmask[i] & name[i]) == 0)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
 }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
index c9d0c1b6..3c5f0a28 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
@@ -39,12 +39,10 @@
 import static org.apache.cassandra.Util.column;
 import static org.apache.cassandra.Util.getBytes;
 import org.apache.cassandra.Util;
-import org.apache.cassandra.db.filter.NamesQueryFilter;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.filter.SliceQueryFilter;
 import org.apache.cassandra.db.marshal.LongType;
 import org.apache.cassandra.io.sstable.IndexHelper;
-import org.apache.cassandra.io.sstable.SSTable;
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.io.util.BufferedRandomAccessFile;
 import org.apache.cassandra.utils.FBUtilities;
@@ -230,70 +228,6 @@ public void runMayThrow() throws Exception
         reTest(table.getColumnFamilyStore("Standard1"), verify);
     }
 
-    @Test
-    public void testGetSliceWithBitmasks() throws Throwable
-    {
-        // tests slicing against data from one row in a memtable and then flushed to an sstable
-        final Table table = Table.open("Keyspace1");
-        final ColumnFamilyStore cfStore = table.getColumnFamilyStore("Standard1");
-        final DecoratedKey ROW = Util.dk("row-bitmasktest");
-        final NumberFormat fmt = new DecimalFormat("000");
-
-        RowMutation rm = new RowMutation("Keyspace1", ROW.key);
-        ColumnFamily cf = ColumnFamily.create("Keyspace1", "Standard1");
-        // at this rate, we're getting 78-79 cos/block, assuming the blocks are set to be about 4k.
-        // so if we go to 300, we'll get at least 4 blocks, which is plenty for testing.
-        for (int i = 0; i < 300; i++)
-            cf.addColumn(column("col" + fmt.format(i), "omg!thisisthevalue!"+i, new TimestampClock(1L)));
-        rm.add(cf);
-        rm.apply();
-
-        Runnable verify = new WrappedRunnable()
-        {
-            public void runMayThrow() throws Exception
-            {
-                ColumnFamily cf;
-
-                // blocks are partitioned like this: 000-097, 098-193, 194-289, 290-299, assuming a 4k column index size.
-                assert DatabaseDescriptor.getColumnIndexSize() == 4096 : "Unexpected column index size, block boundaries won't be where tests expect them.";
-
-                for (String[] bitmaskTests: new String[][] { {}, {"test one", "test two" }, { new String(new byte[] { 0, 1, 0x20, (byte) 0xff }) } })
-                {
-                    ArrayList<byte[]> bitmasks = new ArrayList<byte[]>(bitmaskTests.length);
-
-                    // test forward, spanning a segment.
-                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col096".getBytes(), "col099".getBytes(), bitmasks, false, 4);
-                    assertBitmaskedColumns(cf, bitmasks, "col096", "col097", "col098", "col099");
-
-                    // test reversed, spanning a segment.
-                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col099".getBytes(), "col096".getBytes(), bitmasks, true, 4);
-                    assertBitmaskedColumns(cf, bitmasks, "col096", "col097", "col098", "col099");
-
-                    // test forward, within a segment.
-                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col100".getBytes(), "col103".getBytes(), bitmasks, false, 4);
-                    assertBitmaskedColumns(cf, bitmasks, "col100", "col101", "col102", "col103");
-
-                    // test reversed, within a segment.
-                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col103".getBytes(), "col100".getBytes(), bitmasks, true, 4);
-                    assertBitmaskedColumns(cf, bitmasks, "col100", "col101", "col102", "col103");
-
-                    // test forward from beginning, spanning a segment.
-                    String[] strCols = new String[100]; // col000-col099
-                    for (int i = 0; i < 100; i++)
-                        strCols[i] = "col" + fmt.format(i);
-                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "".getBytes(), "col099".getBytes(), bitmasks, false, 100);
-                    assertBitmaskedColumns(cf, bitmasks, strCols);
-
-                    // test reversed, from end, spanning a segment.
-                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "".getBytes(), "col288".getBytes(), bitmasks, true, 12);
-                    assertBitmaskedColumns(cf, bitmasks, "col288", "col289", "col290", "col291", "col292", "col293", "col294", "col295", "col296", "col297", "col298", "col299");
-                }
-            }
-        };
-
-        reTest(table.getColumnFamilyStore("Standard1"), verify);
-    }
-
     private void validateGetSliceNoMatch(Table table) throws IOException
     {
         ColumnFamilyStore cfStore = table.getColumnFamilyStore("Standard2");
@@ -517,16 +451,6 @@ public void runMayThrow() throws Exception
     }
 
     public static void assertColumns(ColumnFamily cf, String... columnNames)
-    {
-        assertBitmaskedColumnsNameArray(cf, null, columnNames);
-    }
-
-    public static void assertBitmaskedColumns(ColumnFamily cf, List<byte[]> bitmasks, String... unfilteredColumnNames)
-    {
-        assertBitmaskedColumnsNameArray(cf, bitmasks, unfilteredColumnNames);
-    }
-
-    public static void assertBitmaskedColumnsNameArray(ColumnFamily cf, List<byte[]> bitmasks, String[] unfilteredColumnNames)
     {
         Collection<IColumn> columns = cf == null ? new TreeSet<IColumn>() : cf.getSortedColumns();
         List<String> L = new ArrayList<String>();
@@ -535,35 +459,11 @@ public static void assertBitmaskedColumnsNameArray(ColumnFamily cf, List<byte[]>
             L.add(new String(column.name()));
         }
 
-        List<String> names = new ArrayList<String>(unfilteredColumnNames.length);
+        List<String> names = new ArrayList<String>(columnNames.length);
 
-        names.addAll(Arrays.asList(unfilteredColumnNames));
+        names.addAll(Arrays.asList(columnNames));
 
-        if (bitmasks != null && bitmasks.size() > 0)
-        {
-            List<Predicate> predicates = new ArrayList<Predicate>(bitmasks.size());
-            for (final byte[] bitmask: bitmasks)
-            {
-                predicates.add(new Predicate()
-                {
-                    public boolean evaluate(Object o)
-                    {
-                        try
-                        {
-                            return SliceQueryFilter.matchesBitmask(bitmask, o.toString().getBytes("UTF-8"));
-                        }
-                        catch (UnsupportedEncodingException e)
-                        {
-                            return false;
-                        }
-                    }
-                });
-            }
-
-            CollectionUtils.filter(names, PredicateUtils.anyPredicate(predicates));
-        }
-
-        String[] columnNames = names.toArray(new String[0]);
+        String[] columnNames1 = names.toArray(new String[0]);
         String[] la = L.toArray(new String[columns.size()]);
         StringBuffer lasb = new StringBuffer();
         for (String l: la)
@@ -572,12 +472,13 @@ public boolean evaluate(Object o)
             lasb.append(", ");
         }
 
-        assert Arrays.equals(la, columnNames)
+        assert Arrays.equals(la, columnNames1)
                 : String.format("Columns [%s(as string: %s)])] is not expected [%s] (bitmasks %s)",
                                 ((cf == null) ? "" : cf.getComparator().getColumnsString(columns)),
                                 lasb.toString(),
-                                StringUtils.join(columnNames, ","),
-                                SliceFromReadCommand.getBitmaskDescription(bitmasks));
+                                StringUtils.join(columnNames1, ","),
+                                SliceFromReadCommand.getBitmaskDescription(null));
                                 
     }
+
 }
