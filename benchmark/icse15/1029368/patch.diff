diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
index ad46bfef..33c420bb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
@@ -68,7 +68,7 @@ static void validateKeyspace(String keyspace) throws KeyspaceNotDefinedException
     }
     
     // FIXME: could use method in ThriftValidation
-    static ColumnFamilyType validateColumnFamily(String keyspace, String columnFamily) throws InvalidRequestException
+    public static ColumnFamilyType validateColumnFamily(String keyspace, String columnFamily) throws InvalidRequestException
     {
         if (columnFamily.isEmpty())
             throw newInvalidRequestException("non-empty columnfamily is required");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/CQLStatement.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/CQLStatement.java
index e0c715dd..a131fff3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/CQLStatement.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/CQLStatement.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,7 +18,7 @@
  * under the License.
  * 
  */
-
+package org.apache.cassandra.cql;
 
 public class CQLStatement
 {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/Column.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/Column.java
index 2e52328e..bcfc9132 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/Column.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/Column.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,8 +18,12 @@
  * under the License.
  * 
  */
+package org.apache.cassandra.cql;
 
-
+/**
+ * Represents a column definition parsed from CQL query statement.
+ *
+ */
 public class Column
 {
     private final Term name;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java
index ff9eef4c..9fabff3e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java
@@ -59,6 +59,7 @@
 import org.slf4j.LoggerFactory;
 
 import static org.apache.cassandra.avro.AvroValidation.validateKey;
+import static org.apache.cassandra.avro.AvroValidation.validateColumnFamily;
 
 public class QueryProcessor
 {
@@ -185,10 +186,11 @@
     public static CqlResult process(String queryString, ClientState clientState)
     throws RecognitionException, UnavailableException, InvalidRequestException, TimedOutException
     {
-        logger.debug("CQL QUERY: {}", queryString);
+        logger.trace("CQL QUERY: {}", queryString);
         
         CqlParser parser = getParser(queryString);
         CQLStatement statement = parser.query();
+        parser.throwLastRecognitionError();
         String keyspace = clientState.getKeyspace();
         
         CqlResult avroResult = new CqlResult();
@@ -221,6 +223,7 @@ public static CqlResult process(String queryString, ClientState clientState)
                         Column avroColumn = new Column();
                         avroColumn.name = column.name();
                         avroColumn.value = column.value();
+                        avroColumn.timestamp = column.timestamp();
                         avroColumns.add(avroColumn);
                     }
                     
@@ -236,12 +239,15 @@ public static CqlResult process(String queryString, ClientState clientState)
                 
             case UPDATE:
                 UpdateStatement update = (UpdateStatement)statement.statement;
+                validateColumnFamily(keyspace, update.getColumnFamily());
+                
                 avroResult.type = CqlResultType.VOID;
                 
                 List<RowMutation> rowMutations = new ArrayList<RowMutation>();
                 
                 for (Row row : update.getRows())
                 {
+                    validateKey(row.getKey().getByteBuffer());
                     RowMutation rm = new RowMutation(keyspace, row.getKey().getByteBuffer());
                     
                     for (org.apache.cassandra.cql.Column col : row.getColumns())
@@ -249,8 +255,9 @@ public static CqlResult process(String queryString, ClientState clientState)
                         rm.add(new QueryPath(update.getColumnFamily(), null, col.getName().getByteBuffer()),
                                col.getValue().getByteBuffer(),
                                System.currentTimeMillis());
-                        rowMutations.add(rm);
                     }
+                    
+                    rowMutations.add(rm);
                 }
                 
                 try
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/Relation.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/Relation.java
index 01679d3c..cd3d234c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/Relation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/Relation.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,13 +18,11 @@
  * under the License.
  * 
  */
-
+package org.apache.cassandra.cql;
 
 /**
- * Relations encapsulate the relationship between an entity and a value. For
- * example, KEY > 'start' or COLUMN = 'somecolumn'.
- * 
- * @author eevans
+ * Relations encapsulate the relationship between an entity of some kind, and
+ * a value (term). For example, KEY > 'start' or COLUMN = 1000L.
  *
  */
 public class Relation
@@ -37,9 +34,9 @@
     /**
      * Creates a new relation.
      * 
-     * @param entity the kind of relation this is; what the value is compared to.
-     * @param type the type of relation; how how this entity relates to the value.
-     * @param value the value being compared to the entity.
+     * @param entity the kind of relation this is; what the term is being compared to.
+     * @param type the type that describes how this entity relates to the value.
+     * @param value the value being compared.
      */
     public Relation(String entity, String type, Term value)
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/Row.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/Row.java
index a7f8e8b3..1ab73905 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/Row.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/Row.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,11 +18,15 @@
  * under the License.
  * 
  */
-
+package org.apache.cassandra.cql;
 
 import java.util.ArrayList;
 import java.util.List;
 
+/**
+ * Represents a row parsed from a CQL statement.
+ *
+ */
 public class Row
 {
     private final Term key;
@@ -35,6 +38,11 @@ public Row(Term key, Column firstColumn)
         columns.add(firstColumn);
     }
     
+    /**
+     * Add a new column definition to this row.
+     * 
+     * @param col the CQL column to add.
+     */
     public void and(Column col)
     {
         columns.add(col);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java
index 6124c1af..4861425a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,7 +18,7 @@
  * under the License.
  * 
  */
-
+package org.apache.cassandra.cql;
 
 import org.apache.cassandra.thrift.ConsistencyLevel;
 
@@ -27,8 +26,6 @@
  * Encapsulates a completely parsed SELECT query, including the target
  * column family, expression, result count, and ordering clause.
  * 
- * @author eevans
- *
  */
 public class SelectStatement
 {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/StatementType.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/StatementType.java
index 1637c381..80d4164b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/StatementType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/StatementType.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,7 +18,7 @@
  * under the License.
  * 
  */
-
+package org.apache.cassandra.cql;
 
 public enum StatementType
 {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java
index 3f4b8efc..926b5be6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,17 +18,13 @@
  * under the License.
  * 
  */
-
+package org.apache.cassandra.cql;
 
 import java.nio.ByteBuffer;
-
 import org.apache.cassandra.utils.FBUtilities;
 
 /**
- * Represents a term processed from a CQL query statement.  Terms are things
- * like strings, numbers, UUIDs, etc.
- * 
- * @author eevans
+ * A term parsed from a CQL statement.
  *
  */
 public class Term
@@ -57,9 +52,9 @@ protected Term()
     }
 
     /**
-     * Get the text that was parsed to create this term.
+     * Returns the text parsed to create this term.
      * 
-     * @return the string term as parsed from a CQL statement.
+     * @return the string term acquired from a CQL statement.
      */
     public String getText()
     {
@@ -67,9 +62,9 @@ public String getText()
     }
     
     /**
-     * Get the typed value, serialized to a ByteBuffer.
+     * Returns the typed value, serialized to a ByteBuffer.
      * 
-     * @return
+     * @return a ByteBuffer of the value.
      */
     public ByteBuffer getByteBuffer()
     {
@@ -86,7 +81,7 @@ public ByteBuffer getByteBuffer()
     }
 
     /**
-     * Get the term's type.
+     * Obtain the term's type.
      * 
      * @return the type
      */
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/UpdateStatement.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/UpdateStatement.java
index 00daadcc..64eef3ff 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/UpdateStatement.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/UpdateStatement.java
@@ -1,4 +1,3 @@
-package org.apache.cassandra.cql;
 /*
  * 
  * Licensed to the Apache Software Foundation (ASF) under one
@@ -19,19 +18,30 @@
  * under the License.
  * 
  */
-
+package org.apache.cassandra.cql;
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.cassandra.thrift.ConsistencyLevel;
 
+/**
+ * An <code>UPDATE</code> statement parsed from a CQL query statement.
+ *
+ */
 public class UpdateStatement
 {
     private String columnFamily;
     private List<Row> rows = new ArrayList<Row>();
     private ConsistencyLevel cLevel;
     
+    /**
+     * Creates a new UpdateStatement from a column family name, a row definition,
+     * and a consistency level.
+     * 
+     * @param columnFamily column family name
+     * @param first a row definition instance
+     * @param cLevel the thrift consistency level
+     */
     public UpdateStatement(String columnFamily, Row first, ConsistencyLevel cLevel)
     {
         this.columnFamily = columnFamily;
@@ -39,6 +49,11 @@ public UpdateStatement(String columnFamily, Row first, ConsistencyLevel cLevel)
         and(first);
     }
     
+    /**
+     * Adds a new row definition to this <code>UPDATE</code>.
+     * 
+     * @param row the row definition to add.
+     */
     public void and(Row row)
     {
         rows.add(row);
@@ -58,4 +73,10 @@ public String getColumnFamily()
     {
         return columnFamily;
     }
+    
+    public String toString()
+    {
+        return "UpdateStatement(columnFamily=" + columnFamily + ", " +
+            "row=" + rows + ", " + "consistency=" + cLevel + ")";
+    }
 }
