diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessageDeliveryTask.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessageDeliveryTask.java
index d54a753b..56d43412 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessageDeliveryTask.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessageDeliveryTask.java
@@ -37,13 +37,14 @@ public MessageDeliveryTask(Message message)
     
     public void run()
     { 
+        StorageService.Verb verb = message_.getVerb();
+
         if (System.currentTimeMillis() >  constructionTime_ + DatabaseDescriptor.getRpcTimeout())
         {
-            MessagingService.incrementDroppedMessages();
+            MessagingService.incrementDroppedMessages(verb);
             return;
         }
 
-        StorageService.Verb verb = message_.getVerb();
         IVerbHandler verbHandler = MessagingService.instance.getVerbHandler(verb);
         assert verbHandler != null : "unknown verb " + verb;
         verbHandler.doVerb(message_);
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
index 3847a6e4..48e885d9 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
@@ -28,10 +28,7 @@
 import java.nio.channels.AsynchronousCloseException;
 import java.nio.channels.ServerSocketChannel;
 import java.security.MessageDigest;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Timer;
-import java.util.TimerTask;
+import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -81,7 +78,12 @@
 
     private SocketThread socketThread;
     private SimpleCondition listenGate;
-    private static AtomicInteger droppedMessages = new AtomicInteger();
+    private static final Map<StorageService.Verb, AtomicInteger> droppedMessages = new EnumMap<StorageService.Verb, AtomicInteger>(StorageService.Verb.class);
+    static
+    {
+        for (StorageService.Verb verb : StorageService.Verb.values())
+            droppedMessages.put(verb, new AtomicInteger());
+    }
 
     public Object clone() throws CloneNotSupportedException
     {
@@ -490,16 +492,23 @@ public static ByteBuffer constructStreamHeader(boolean compress)
         return buffer;
     }
 
-    public static int incrementDroppedMessages()
+    public static int incrementDroppedMessages(StorageService.Verb verb)
     {
-        return droppedMessages.incrementAndGet();
+        return droppedMessages.get(verb).incrementAndGet();
     }
                
     private static void logDroppedMessages()
     {
-        if (droppedMessages.get() > 0)
-            logger_.warn("Dropped " + droppedMessages + " messages in the last " + LOG_DROPPED_INTERVAL_IN_MS + "ms");
-        droppedMessages.set(0);
+        for (Map.Entry<StorageService.Verb, AtomicInteger> entry : droppedMessages.entrySet())
+        {
+            AtomicInteger dropped = entry.getValue();
+            if (dropped.get() > 0)
+            {
+                logger_.warn(String.format("Dropped %s %s messages in the last %sms",
+                                           dropped, entry.getKey(), LOG_DROPPED_INTERVAL_IN_MS));
+            }
+            dropped.set(0);
+        }
     }
 
     private class SocketThread extends Thread
