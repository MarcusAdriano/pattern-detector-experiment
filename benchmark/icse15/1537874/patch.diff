diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java
index 8b474b9c..0b814a08 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java
@@ -2259,6 +2259,7 @@ private void flowExecute(int executeType, String sql) throws SqlException {
 
         clearWarningsX(); // Per jdbc spec 0.7, and getWarnings() javadoc
         sql = escape(sql);
+        sqlMode_ = executeType==executeQueryMethod__?isQuery__:isUpdate__;
         parseSqlAndSetSqlModes(sql);
         checkAutoGeneratedKeysParameters();
         if (sqlMode_ == isUpdate__) {
@@ -2629,9 +2630,8 @@ void parseSqlAndSetSqlModes(String sql) throws SqlException {
         String firstToken = getStatementToken(sql);
 
         if (firstToken == null) {
-            // entire statement was just one or more comments; pass it as a
-            // query to the server and let the server deal with it.
-            sqlMode_ = isQuery__;
+            // entire statement was just one or more comments; pass it to the 
+            // server and let it deal with it.
             return;
         }
 
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 2142e732..5ec40280 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -5920,7 +5920,9 @@ private String parseCcsidMBC(int length) throws DRDAProtocolException
         String ccsidMBCEncoding = currentStatement.ccsidMBCEncoding;
 
         if (length == 0) {
-            return null;
+            // Can't return null here as that will indicate that the cp is 
+            // missing, when it in fact was present, but contained an empty string
+            return ""; 
         }
         byte [] byteStr = reader.readBytes(length);
         if (ccsidMBCEncoding != null)
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
index c7121ea3..557bbe36 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
@@ -1413,6 +1413,9 @@ private boolean isCallableSQL(String sql)
     {
         java.util.StringTokenizer tokenizer = new java.util.StringTokenizer
             (sql, "\t\n\r\f=? (");
+        if (!tokenizer.hasMoreTokens()) {
+            return false;
+        }
          String firstToken = tokenizer.nextToken();
          if (StringUtil.SQLEqualsIgnoreCase(firstToken, 
                                             "call")) // captures CALL...and ?=CALL...
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/NullSQLTextTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/NullSQLTextTest.java
index 3a639c1e..41541009 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/NullSQLTextTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/NullSQLTextTest.java
@@ -319,4 +319,40 @@ private static void testCommentStmt(Statement st, String sql,
      */
     public static void zeroArg () {
     }
+    
+    private static String SQLSTATE_SYNTAX_ERROR = "42X01";
+    public void testExecuteEmptyString() throws SQLException {
+        try {
+            createStatement().execute("");
+            fail("Statement expected to fail");
+        } catch (SQLException sqle) {
+            assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
+        }
+    }
+    
+    public void testExecuteUpdateEmptyString() {
+        try {
+            createStatement().executeUpdate("");
+            fail("Statement expected to fail");
+        } catch (SQLException sqle) {
+            assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
+        }       
+    }
+    
+    public void testExecuteQueryEmptyString() {
+        try {
+            createStatement().executeQuery("");
+            fail("Statement expected to fail");
+        } catch (SQLException sqle) {
+            assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
+        }        
+    }
+    public void testPrepareEmptyString() {
+        try {
+            prepareStatement("");
+            fail("Statement expected to fail");
+        } catch (SQLException sqle) {
+            assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
+        }        
+    }
 }
