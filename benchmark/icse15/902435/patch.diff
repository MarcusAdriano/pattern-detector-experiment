diff --git a/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/QueryComponent.java b/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/QueryComponent.java
index de404971..b6d6b4ac 100644
--- a/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -39,10 +39,8 @@
 import org.apache.solr.schema.SchemaField;
 import org.apache.solr.search.*;
 import org.apache.solr.util.SolrPluginUtils;
-import org.apache.solr.cloud.CloudState;
-import org.apache.solr.cloud.Slice;
-import org.apache.solr.cloud.ZkNodeProps;
-import org.apache.solr.cloud.ZkController;
+import org.apache.solr.cloud.*;
+import org.apache.solr.core.CoreDescriptor;
 
 
 import java.io.IOException;
@@ -109,7 +107,16 @@ public void prepare(ResponseBuilder rb) throws IOException
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);
     }
 
-    // TODO: temporary... this should go in a different component, or in SearchHandler
+    checkDistributed(rb);
+  }
+
+
+  // TODO: this could go in a different component, or in SearchHandler
+  // check if this is a distributed request and set info on the response builder
+  void checkDistributed(ResponseBuilder rb) {
+    SolrQueryRequest req = rb.req;
+    SolrParams params = req.getParams();
+
     rb.isDistrib = params.getBool("distrib",false);
     String shards = params.get(ShardParams.SHARDS);
 
@@ -123,11 +130,18 @@ public void prepare(ResponseBuilder rb) throws IOException
       // if we need it.
       CloudState cloudState = null;
       Map<String,Slice> slices = null;
+      CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();
+      CloudDescriptor cloudDescriptor = coreDescriptor.getCloudDescriptor();
+      ZkController zkController = coreDescriptor.getCoreContainer().getZooKeeperController();
+
 
       if (shards != null) {
         List<String> lst = StrUtils.splitSmart(shards, ",", true);
         rb.shards = lst.toArray(new String[lst.size()]);
         rb.slices = new String[rb.shards.length];
+
+        if (zkController != null) {
+          // figure out which shards are slices
         for (int i=0; i<rb.shards.length; i++) {
           if (rb.shards[i].indexOf('/') < 0) {
             // this is a logical shard
@@ -135,16 +149,20 @@ public void prepare(ResponseBuilder rb) throws IOException
             rb.shards[i] = null;
           }
         }
-      } else {
+        }
+      } else if (zkController != null) {
         // we weren't provided with a list of slices to query, so find the list that will cover the complete index
 
-        cloudState =  req.getCore().getCoreDescriptor().getCoreContainer().getZooKeeperController().getCloudState();
+        cloudState =  zkController.getCloudState();
 
-        // TODO: check "collection" for which collection(s) to search.. but for now, just default to the URL.
+        // TODO: check "collection" for which collection(s) to search.. but for now, just default
+        // to the collection for this core.
         // This can be more efficient... we only record the name, even though we have the
         // shard info we need in the next step of mapping slice->shards
-        slices = cloudState.getSlices(req.getCore().getCoreDescriptor().getName());
+        slices = cloudState.getSlices(cloudDescriptor.getCollectionName());
         rb.slices = slices.keySet().toArray(new String[slices.size()]);
+        rb.shards = new String[rb.slices.length];
+        
         /***
         rb.slices = new String[slices.size()];
         for (int i=0; i<rb.slices.length; i++) {
@@ -156,11 +174,12 @@ public void prepare(ResponseBuilder rb) throws IOException
       //
       // Map slices to shards
       //
+      if (zkController != null) {
       for (int i=0; i<rb.shards.length; i++) {
         if (rb.shards[i] == null) {
           if (cloudState == null) {
-              cloudState =  req.getCore().getCoreDescriptor().getCoreContainer().getZooKeeperController().getCloudState();
-              slices = cloudState.getSlices(req.getCore().getCoreDescriptor().getName());
+              cloudState =  zkController.getCloudState();
+              slices = cloudState.getSlices(cloudDescriptor.getCollectionName());
           }
           String sliceName = rb.slices[i];
 
@@ -198,6 +217,7 @@ public void prepare(ResponseBuilder rb) throws IOException
         }
       }
     }
+    }
     
     
     String shards_rows = params.get(ShardParams.SHARDS_ROWS);
@@ -210,6 +230,8 @@ public void prepare(ResponseBuilder rb) throws IOException
     }
   }
 
+
+
   /**
    * Actually run the query
    */
diff --git a/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/SearchHandler.java b/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/SearchHandler.java
index 62154c7c..50a323b9 100644
--- a/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/SearchHandler.java
+++ b/lucene/solr/branches/cloud/src/java/org/apache/solr/handler/component/SearchHandler.java
@@ -256,6 +256,7 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw
             for (String shard : sreq.actualShards) {
               ModifiableSolrParams params = new ModifiableSolrParams(sreq.params);
               params.remove(ShardParams.SHARDS);      // not a top-level request
+              params.remove("distrib");               // not a top-level request
               params.remove("indent");
               params.remove(CommonParams.HEADER_ECHO_PARAMS);
               params.set(ShardParams.IS_SHARD, true);  // a sub (shard) request
