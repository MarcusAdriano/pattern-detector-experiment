diff --git a/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java b/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java
index 8db24d0a..d0e7abd7 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java
@@ -224,7 +224,7 @@ private boolean equals(char[] buffer, int len, CharSequence word) {
     public static IStemmer createStemmer() {
       try {
         return new LuceneStemmerAdapter();
-      } catch (Throwable e) {
+      } catch (Exception e) {
         return IdentityStemmer.INSTANCE;
       }
     }
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java b/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java
index 88c3b737..28fa893c 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java
@@ -82,6 +82,9 @@ public ITokenizer getTokenizer(LanguageCode language) {
             .warn("Could not instantiate Smart Chinese Analyzer, clustering quality "
                 + "of Chinese content may be degraded. For best quality clusters, "
                 + "make sure Lucene's Smart Chinese Analyzer JAR is in the classpath");
+        if (e instanceof Error) {
+          throw (Error) e;
+        }
       }
     }
 
@@ -89,6 +92,9 @@ static ITokenizer createTokenizer() {
       try {
         return new ChineseTokenizer();
       } catch (Throwable e) {
+        if (e instanceof OutOfMemoryError) {
+          throw (OutOfMemoryError) e;
+        }
         return new ExtendedWhitespaceTokenizer();
       }
     }
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java
index 61f9b3cc..4171bb69 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java
@@ -101,7 +101,7 @@ public void inform(SolrCore core) {
       }
       debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);
       importer = new DataImporter(core, myName);         
-    } catch (Throwable e) {
+    } catch (Exception e) {
       LOG.error( DataImporter.MSG.LOAD_EXP, e);
       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);
     }
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.java
index d7611945..9862ba4f 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.java
@@ -402,7 +402,7 @@ public boolean isBusy() {
   public void doFullImport(SolrWriter writer, RequestInfo requestParams) {
     LOG.info("Starting Full Import");
     setStatus(Status.RUNNING_FULL_DUMP);
-
+    boolean success = false;
     try {
       DIHProperties dihPropWriter = createPropertyWriter();
       setIndexStartTime(dihPropWriter.getCurrentTimestamp());
@@ -411,10 +411,14 @@ public void doFullImport(SolrWriter writer, RequestInfo requestParams) {
       docBuilder.execute();
       if (!requestParams.isDebug())
         cumulativeStatistics.add(docBuilder.importStatistics);
-    } catch (Throwable t) {
-      SolrException.log(LOG, "Full Import failed", t);
-      docBuilder.rollback();
+      success = true;
+    } catch (Exception e) {
+      SolrException.log(LOG, "Full Import failed", e);
     } finally {
+      if (!success) {
+        docBuilder.rollback();
+      }
+      
       setStatus(Status.IDLE);
       DocBuilder.INSTANCE.set(null);
     }
@@ -431,7 +435,7 @@ private void checkWritablePersistFile(SolrWriter writer, DIHProperties dihPropWr
   public void doDeltaImport(SolrWriter writer, RequestInfo requestParams) {
     LOG.info("Starting Delta Import");
     setStatus(Status.RUNNING_DELTA_DUMP);
-
+    boolean success = false;
     try {
       DIHProperties dihPropWriter = createPropertyWriter();
       setIndexStartTime(dihPropWriter.getCurrentTimestamp());
@@ -440,10 +444,13 @@ public void doDeltaImport(SolrWriter writer, RequestInfo requestParams) {
       docBuilder.execute();
       if (!requestParams.isDebug())
         cumulativeStatistics.add(docBuilder.importStatistics);
-    } catch (Throwable t) {
-      LOG.error("Delta Import Failed", t);
-      docBuilder.rollback();
+      success = true;
+    } catch (Exception e) {
+      LOG.error("Delta Import Failed", e);
     } finally {
+      if (!success) {
+        docBuilder.rollback();
+      }
       setStatus(Status.IDLE);
       DocBuilder.INSTANCE.set(null);
     }
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java
index dc33a31e..68efd9b1 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java
@@ -538,7 +538,7 @@ private void buildDocument(VariableResolver vr, DocWrapper doc,
               throw e;
           } else
             throw e;
-        } catch (Throwable t) {
+        } catch (Exception t) {
           if (verboseDebug) {
             getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);
           }
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java
index e9c7b2af..a87745e1 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java
@@ -105,8 +105,8 @@ public void commit(boolean optimize) {
     try {
       CommitUpdateCommand commit = new CommitUpdateCommand(req,optimize);
       processor.processCommit(commit);
-    } catch (Throwable t) {
-      log.error("Exception while solr commit.", t);
+    } catch (Exception e) {
+      log.error("Exception while solr commit.", e);
     }
   }
 
@@ -115,8 +115,8 @@ public void rollback() {
     try {
       RollbackUpdateCommand rollback = new RollbackUpdateCommand(req);
       processor.processRollback(rollback);
-    } catch (Throwable t) {
-      log.error("Exception while solr rollback.", t);
+    } catch (Exception e) {
+      log.error("Exception while solr rollback.", e);
     }
   }
 
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter.java
index 40285e3b..d839f277 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter.java
@@ -92,7 +92,7 @@ public void persist(Map<String, Object> propObjs) {
       if (data != null) {
         props.load(new StringReader(new String(data, "UTF-8")));
       }
-    } catch (Throwable e) {
+    } catch (Exception e) {
       log.warn(
           "Could not read DIH properties from " + path + " :" + e.getClass(), e);
     }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/SolrLogFormatter.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/SolrLogFormatter.java
index d6636e8a..55c01e1e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/SolrLogFormatter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/SolrLogFormatter.java
@@ -114,9 +114,9 @@ public void setShorterFormat() {
   public String format(LogRecord record) {
     try {
       return _format(record);
-    } catch (Throwable th) {
+    } catch (Exception e) {
       // logging swallows exceptions, so if we hit an exception we need to convert it to a string to see it
-      return "ERROR IN SolrLogFormatter! original message:" + record.getMessage() + "\n\tException: " + SolrException.toStr(th);
+      return "ERROR IN SolrLogFormatter! original message:" + record.getMessage() + "\n\tException: " + SolrException.toStr(e);
     }
   }
 
@@ -415,7 +415,7 @@ public static void main(String[] args) throws Exception {
       public void run() {
         try {
           go();
-        } catch (Throwable e) {
+        } catch (Exception e) {
           e.printStackTrace();
         }
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index 0bbc8db2..41cc137c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -209,8 +209,8 @@ void runLeaderProcess(boolean weAreReplacement) throws KeeperException,
       boolean success = false;
       try {
         success = syncStrategy.sync(zkController, core, leaderProps);
-      } catch (Throwable t) {
-        SolrException.log(log, "Exception while trying to sync", t);
+      } catch (Exception e) {
+        SolrException.log(log, "Exception while trying to sync", e);
         success = false;
       }
       
@@ -268,12 +268,13 @@ void runLeaderProcess(boolean weAreReplacement) throws KeeperException,
         core.close();
       }
     }
-    
+    boolean success = false;
     try {
       super.runLeaderProcess(weAreReplacement);
-    } catch (Throwable t) {
-      SolrException.log(log, "There was a problem trying to register as the leader", t);
-      cancelElection();
+      success = true;
+    } catch (Exception e) {
+      SolrException.log(log, "There was a problem trying to register as the leader", e);
+  
       try {
         core = cc.getCore(coreName);
         if (core == null) {
@@ -287,10 +288,17 @@ void runLeaderProcess(boolean weAreReplacement) throws KeeperException,
         // we could not publish ourselves as leader - rejoin election
         rejoinLeaderElection(leaderSeqPath, core);
       } finally {
+        try {
+          if (!success) {
+            cancelElection();
+          }
+        } finally {
         if (core != null) {
           core.close();
         }
       }
+        
+      }
     }
     
   }
@@ -386,11 +394,7 @@ private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)
     
     cancelElection();
     
-    try {
       core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());
-    } catch (Throwable t) {
-      SolrException.log(log, "Error trying to start recovery", t);
-    }
     
     leaderElector.joinElection(this, true);
   }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java
index f8b2f7a6..2a98a24d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java
@@ -963,6 +963,7 @@ public boolean isClosed() {
 
   private String adminPath;
   
+  // overseer not responsible for closing reader
   public Overseer(ShardHandler shardHandler, String adminPath, final ZkStateReader reader) throws KeeperException, InterruptedException {
     this.reader = reader;
     this.shardHandler = shardHandler;
@@ -992,20 +993,24 @@ public OverseerThread getUpdaterThread() {
   }
   
   public void close() {
+    try {
     if (updaterThread != null) {
       try {
         updaterThread.close();
         updaterThread.interrupt();
-      } catch (Throwable t) {
-        log.error("Error closing updaterThread", t);
+        } catch (Exception e) {
+          log.error("Error closing updaterThread", e);
       }
     }
+    } finally {
+      
     if (ccThread != null) {
       try {
         ccThread.close();
         ccThread.interrupt();
-      } catch (Throwable t) {
-        log.error("Error closing ccThread", t);
+        } catch (Exception e) {
+          log.error("Error closing ccThread", e);
+        }
       }
     }
     updaterThread = null;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index 66569d4a..f64946b7 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -189,7 +189,7 @@ else if (LeaderStatus.YES != isLeader) {
          } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return;
-         } catch (Throwable e) {
+         } catch (Exception e) {
            SolrException.log(log, "", e);
          }
        }
@@ -255,13 +255,13 @@ protected SolrResponse processMessage(ZkNodeProps message, String operation) {
             + operation);
       }
 
-    } catch (Throwable t) {
+    } catch (Exception e) {
       SolrException.log(log, "Collection " + operation + " of " + operation
-          + " failed", t);
-      results.add("Operation " + operation + " caused exception:", t);
+          + " failed", e);
+      results.add("Operation " + operation + " caused exception:", e);
       SimpleOrderedMap nl = new SimpleOrderedMap();
-      nl.add("msg", t.getMessage());
-      nl.add("rspCode", t instanceof SolrException ? ((SolrException)t).code() : -1);
+      nl.add("msg", e.getMessage());
+      nl.add("rspCode", e instanceof SolrException ? ((SolrException)e).code() : -1);
       results.add("exception", nl);
     } 
     
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
index 8b8f36de..2138ec5d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
@@ -250,10 +250,10 @@ public void run() {
         SolrException.log(log, "", e);
         throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, "",
             e);
-      } catch (Throwable t) {
-        log.error("", t);
+      } catch (Exception e) {
+        log.error("", e);
         throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,
-            "", t);
+            "", e);
       }
     } finally {
       if (core != null) core.close();
@@ -282,8 +282,8 @@ public void doRecovery(SolrCore core) throws KeeperException, InterruptedExcepti
     try {
       recentUpdates = ulog.getRecentUpdates();
       recentVersions = recentUpdates.getVersions(ulog.numRecordsToKeep);
-    } catch (Throwable t) {
-      SolrException.log(log, "Corrupt tlog - ignoring. core=" + coreName, t);
+    } catch (Exception e) {
+      SolrException.log(log, "Corrupt tlog - ignoring. core=" + coreName, e);
       recentVersions = new ArrayList<Long>(0);
     } finally {
       if (recentUpdates != null) {
@@ -311,8 +311,8 @@ public void doRecovery(SolrCore core) throws KeeperException, InterruptedExcepti
         }
         
         log.info("###### startupVersions=" + startingVersions);
-      } catch (Throwable t) {
-        SolrException.log(log, "Error getting recent versions. core=" + coreName, t);
+      } catch (Exception e) {
+        SolrException.log(log, "Error getting recent versions. core=" + coreName, e);
         recentVersions = new ArrayList<Long>(0);
       }
     }
@@ -331,9 +331,9 @@ public void doRecovery(SolrCore core) throws KeeperException, InterruptedExcepti
               + coreName);
           firstTime = false; // skip peersync
         }
-      } catch (Throwable t) {
+      } catch (Exception e) {
         SolrException.log(log, "Error trying to get ulog starting operation. core="
-            + coreName, t);
+            + coreName, e);
         firstTime = false; // skip peersync
       }
     }
@@ -449,21 +449,21 @@ public void doRecovery(SolrCore core) throws KeeperException, InterruptedExcepti
           Thread.currentThread().interrupt();
           log.warn("Recovery was interrupted", e);
           retries = INTERRUPTED;
-        } catch (Throwable t) {
-          SolrException.log(log, "Error while trying to recover", t);
+        } catch (Exception e) {
+          SolrException.log(log, "Error while trying to recover", e);
         } finally {
           if (!replayed) {
             try {
               ulog.dropBufferedUpdates();
-            } catch (Throwable t) {
-              SolrException.log(log, "", t);
+            } catch (Exception e) {
+              SolrException.log(log, "", e);
             }
           }
 
         }
 
-      } catch (Throwable t) {
-        SolrException.log(log, "Error while trying to recover. core=" + coreName, t);
+      } catch (Exception e) {
+        SolrException.log(log, "Error while trying to recover. core=" + coreName, e);
       }
 
       if (!successfulRecovery) {
@@ -486,9 +486,9 @@ public void doRecovery(SolrCore core) throws KeeperException, InterruptedExcepti
               try {
                 recoveryFailed(core, zkController, baseUrl, coreZkNodeName,
                     core.getCoreDescriptor());
-              } catch (Throwable t) {
+              } catch (Exception e) {
                 SolrException.log(log,
-                    "Could not publish that recovery failed", t);
+                    "Could not publish that recovery failed", e);
               }
             } else {
               SolrException.log(log,
@@ -496,15 +496,15 @@ public void doRecovery(SolrCore core) throws KeeperException, InterruptedExcepti
               try {
                 recoveryFailed(core, zkController, baseUrl, coreZkNodeName,
                     core.getCoreDescriptor());
-              } catch (Throwable t) {
+              } catch (Exception e) {
                 SolrException.log(log,
-                    "Could not publish that recovery failed", t);
+                    "Could not publish that recovery failed", e);
               }
             }
             break;
           }
 
-        } catch (Throwable e) {
+        } catch (Exception e) {
           SolrException.log(log, "core=" + coreName, e);
         }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java
index 248cbdc3..dc4e7613 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java
@@ -121,7 +121,7 @@ public void run() {
             zkServer.runFromConfig(sc);
           }
           log.info("ZooKeeper Server exited.");
-        } catch (Throwable e) {
+        } catch (Exception e) {
           log.error("ZooKeeper Server ERROR", e);
           throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);
         }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
index a3c04cfa..7eacf61f 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
@@ -211,8 +211,8 @@ private void syncToMe(ZkController zkController, String collection,
            } else {
              requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);
            }
-         } catch (Throwable t) {
-           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + ": Could not tell a replica to recover", t);
+         } catch (Exception e) {
+           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + ": Could not tell a replica to recover", e);
          }
       } else {
         log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + ": " + " sync completed with " + srsp.getShardAddress());
@@ -278,6 +278,9 @@ public void run() {
           server.request(recoverRequestCmd);
         } catch (Throwable t) {
           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + ": Could not tell a replica to recover", t);
+          if (t instanceof Error) {
+            throw (Error) t;
+          }
         } finally {
           server.shutdown();
         }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index bafe6503..a032a4c0 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -249,8 +249,8 @@ public void command() {
                   // with connection loss
                   try {
                     register(descriptor.getName(), descriptor, true, true);
-                  } catch (Throwable t) {
-                    SolrException.log(log, "Error registering SolrCore", t);
+                  } catch (Exception e) {
+                    SolrException.log(log, "Error registering SolrCore", e);
                   }
                 }
               }
@@ -385,31 +385,36 @@ private void markAllAsNotLeader(
    */
   public void close() {
     this.isClosed = true;
-    
+    try {
     for (ElectionContext context : electionContexts.values()) {
       try {
         context.close();
-      } catch (Throwable t) {
-        log.error("Error closing overseer", t);
+        } catch (Exception e) {
+          log.error("Error closing overseer", e);
       }
     }
-    
+    } finally {
+      try {
     try {
       overseer.close();
-    } catch(Throwable t) {
-      log.error("Error closing overseer", t);
+        } catch (Exception e) {
+          log.error("Error closing overseer", e);
     }
-    
+      } finally {
+        try {
     try {
       zkStateReader.close();
-    } catch(Throwable t) {
-      log.error("Error closing zkStateReader", t);
+          } catch (Exception e) {
+            log.error("Error closing zkStateReader", e);
     } 
-    
+        } finally {
     try {
-      zkClient.close();;
-    } catch(Throwable t) {
-      log.error("Error closing zkClient", t);
+            zkClient.close();
+          } catch (Exception e) {
+            log.error("Error closing zkClient", e);
+          }
+        }
+      }
     } 
     
   }
@@ -473,7 +478,7 @@ private String getHostAddress(String host) throws IOException {
               }
             }
           }
-        } catch (Throwable e) {
+        } catch (Exception e) {
           SolrException.log(log,
               "Error while looking for a better host name than 127.0.0.1", e);
         }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
index 60c4131a..5cbcdbe8 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
@@ -186,8 +186,8 @@ public void close() throws IOException {
             }
           }
           assert val.refCnt == 0 : val.refCnt;
-        } catch (Throwable t) {
-          SolrException.log(log, "Error closing directory", t);
+        } catch (Exception e) {
+          SolrException.log(log, "Error closing directory", e);
         }
       }
       
@@ -203,8 +203,8 @@ public void close() throws IOException {
               closedDirs.add(v);
             }
           }
-        } catch (Throwable t) {
-          SolrException.log(log, "Error closing directory", t);
+        } catch (Exception e) {
+          SolrException.log(log, "Error closing directory", e);
         }
       }
 
@@ -212,8 +212,8 @@ public void close() throws IOException {
         log.info("Removing directory after core close: " + val.path);
         try {
           removeDirectory(val);
-        } catch (Throwable t) {
-          SolrException.log(log, "Error removing directory", t);
+        } catch (Exception e) {
+          SolrException.log(log, "Error removing directory", e);
         }
       }
       
@@ -238,8 +238,8 @@ private boolean closeCacheValue(CacheValue cacheValue) {
       for (CloseListener listener : listeners) {
         try {
           listener.preClose();
-        } catch (Throwable t) {
-          SolrException.log(log, "Error executing preClose for directory", t);
+        } catch (Exception e) {
+          SolrException.log(log, "Error executing preClose for directory", e);
         }
       }
     }
@@ -279,8 +279,8 @@ private boolean closeCacheValue(CacheValue cacheValue) {
         log.info("Removing directory before core close: " + val.path);
         try {
           removeDirectory(val);
-        } catch (Throwable t) {
-          SolrException.log(log, "Error removing directory", t);
+        } catch (Exception e) {
+          SolrException.log(log, "Error removing directory", e);
         }
       } else {
         removeEntries.add(val);
@@ -291,8 +291,8 @@ private boolean closeCacheValue(CacheValue cacheValue) {
       for (CloseListener listener : listeners) {
         try {
           listener.postClose();
-        } catch (Throwable t) {
-          SolrException.log(log, "Error executing postClose for directory", t);
+        } catch (Exception e) {
+          SolrException.log(log, "Error executing postClose for directory", e);
         }
       }
     }
@@ -303,8 +303,8 @@ private void close(CacheValue val) {
     try {
       log.info("Closing directory: " + val.path);
       val.directory.close();
-    } catch (Throwable t) {
-      SolrException.log(log, "Error closing directory", t);
+    } catch (Exception e) {
+      SolrException.log(log, "Error closing directory", e);
     }
   }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java
index 82c044fa..2e79b315 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Config.java
@@ -260,7 +260,7 @@ public Node getNode(String path, Document doc, boolean errIfMissing) {
       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Error in xpath:" + xstr + " for " + name,e);
     } catch (SolrException e) {
       throw(e);
-    } catch (Throwable e) {
+    } catch (Exception e) {
       SolrException.log(log,"Error in xpath",e);
       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Error in xpath:" + xstr+ " for " + name,e);
     }
@@ -290,7 +290,7 @@ public NodeList getNodeList(String path, boolean errIfMissing) {
       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Error in xpath:" + xstr + " for " + name,e);
     } catch (SolrException e) {
       throw(e);
-    } catch (Throwable e) {
+    } catch (Exception e) {
       SolrException.log(log,"Error in xpath",e);
       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Error in xpath:" + xstr+ " for " + name,e);
     }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
index 28d3bd81..226d8f95 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
@@ -19,6 +19,7 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.io.ByteStreams;
+
 import org.apache.commons.io.IOUtils;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.logging.LogWatcherConfig;
@@ -33,6 +34,7 @@
 import javax.xml.xpath.XPath;
 import javax.xml.xpath.XPathConstants;
 import javax.xml.xpath.XPathExpressionException;
+
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -292,7 +294,7 @@ public Properties getSolrProperties(String path) {
     try {
       return readProperties(((NodeList) config.evaluate(
           path, XPathConstants.NODESET)).item(0));
-    } catch (Throwable e) {
+    } catch (Exception e) {
       SolrException.log(log, null, e);
     }
     return null;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index d4748510..e8dd0dc6 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -257,30 +257,33 @@ public SolrCore call() {
                   }
                   c = create(cd);
                   registerCore(cd.isTransient(), name, c, false, false);
-                } catch (Throwable t) {
+                } catch (Exception e) {
+                  SolrException.log(log, null, e);
+                  try {
               /*    if (isZooKeeperAware()) {
                     try {
                       zkSys.zkController.unregister(name, cd);
-                    } catch (InterruptedException e) {
+                    } catch (InterruptedException e2) {
                       Thread.currentThread().interrupt();
-                      SolrException.log(log, null, e);
-                    } catch (KeeperException e) {
-                      SolrException.log(log, null, e);
+                      SolrException.log(log, null, e2);
+                    } catch (KeeperException e3) {
+                      SolrException.log(log, null, e3);
                     }
                   }*/
-                  SolrException.log(log, null, t);
+                  } finally {
                   if (c != null) {
                     c.close();
                   }
                 }
+                }
                 return c;
               }
             };
             pending.add(completionService.submit(task));
 
           }
-        } catch (Throwable ex) {
-          SolrException.log(log, null, ex);
+        } catch (Exception e) {
+          SolrException.log(log, null, e);
         }
       }
 
@@ -416,8 +419,8 @@ public void cancelCoreRecoveries() {
     for (SolrCore core : cores) {
       try {
         core.getSolrCoreState().cancelRecovery();
-      } catch (Throwable t) {
-        SolrException.log(log, "Error canceling recovery for core", t);
+      } catch (Exception e) {
+        SolrException.log(log, "Error canceling recovery for core", e);
       }
     }
   }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Diagnostics.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Diagnostics.java
index 84c76e04..efa981fa 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Diagnostics.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/Diagnostics.java
@@ -33,8 +33,8 @@
   public static void call(Callable callable, Object... data) {
     try {
       callable.call(data);
-    } catch (Throwable th) {
-      log.error("TEST HOOK EXCEPTION", th);
+    } catch (Exception e) {
+      log.error("TEST HOOK EXCEPTION", e);
     }
   }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 6d98c509..fbee814b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -833,7 +833,11 @@ public DirectoryReader call() throws Exception {
     } catch (Throwable e) {
       latch.countDown();//release the latch, otherwise we block trying to do the close.  This should be fine, since counting down on a latch of 0 is still fine
       //close down the searcher and any other resources, if it exists, as this is not recoverable
+      if (e instanceof OutOfMemoryError) {
+        throw (OutOfMemoryError)e;
+      }
       close();
+      
       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, 
                               e.getMessage(), e);
     } finally {
@@ -1002,6 +1006,9 @@ public void close() {
            hook.preClose( this );
          } catch (Throwable e) {
            SolrException.log(log, e);           
+           if (e instanceof Error) {
+             throw (Error) e;
+           }
          }
       }
     }
@@ -1011,6 +1018,9 @@ public void close() {
       infoRegistry.clear();
     } catch (Throwable e) {
       SolrException.log(log, e);
+      if (e instanceof Error) {
+        throw (Error) e;
+      }
     }
 
     try {
@@ -1019,6 +1029,9 @@ public void close() {
       }
     } catch (Throwable e) {
       SolrException.log(log,e);
+      if (e instanceof Error) {
+        throw (Error) e;
+      }
     }
     
     boolean coreStateClosed = false;
@@ -1032,12 +1045,18 @@ public void close() {
       }
     } catch (Throwable e) {
       SolrException.log(log, e);
+      if (e instanceof Error) {
+        throw (Error) e;
+      }
     }
     
     try {
       ExecutorUtil.shutdownAndAwaitTermination(searcherExecutor);
     } catch (Throwable e) {
       SolrException.log(log, e);
+      if (e instanceof Error) {
+        throw (Error) e;
+      }
     }
 
     try {
@@ -1051,14 +1070,20 @@ public void close() {
       closeSearcher();
     } catch (Throwable e) {
       SolrException.log(log,e);
+      if (e instanceof Error) {
+        throw (Error) e;
+      }
     }
     
     if (coreStateClosed) {
       
       try {
         directoryFactory.close();
-      } catch (Throwable t) {
-        SolrException.log(log, t);
+      } catch (Throwable e) {
+        SolrException.log(log, e);
+        if (e instanceof Error) {
+          throw (Error) e;
+        }
       }
       
     }
@@ -1070,6 +1095,9 @@ public void close() {
            hook.postClose( this );
          } catch (Throwable e) {
            SolrException.log(log, e);
+           if (e instanceof Error) {
+             throw (Error) e;
+           }
          }
       }
     }
@@ -1644,6 +1672,9 @@ public Object call() throws Exception {
                   newSearcher.warm(currSearcher);
                 } catch (Throwable e) {
                   SolrException.log(log,e);
+                  if (e instanceof Error) {
+                    throw (Error) e;
+                  }
                 }
                 return null;
               }
@@ -1662,6 +1693,9 @@ public Object call() throws Exception {
                   }
                 } catch (Throwable e) {
                   SolrException.log(log,null,e);
+                  if (e instanceof Error) {
+                    throw (Error) e;
+                  }
                 }
                 return null;
               }
@@ -1680,6 +1714,9 @@ public Object call() throws Exception {
                   }
                 } catch (Throwable e) {
                   SolrException.log(log,null,e);
+                  if (e instanceof Error) {
+                    throw (Error) e;
+                  }
                 }
                 return null;
               }
@@ -1701,6 +1738,9 @@ public Object call() throws Exception {
                   registerSearcher(newSearchHolder);
                 } catch (Throwable e) {
                   SolrException.log(log, e);
+                  if (e instanceof Error) {
+                    throw (Error) e;
+                  }
                 } finally {
                   // we are all done with the old searcher we used
                   // for warming...
@@ -1776,7 +1816,7 @@ public void close() {
             searcherList.remove(this);
           }
           resource.close();
-        } catch (Throwable e) {
+        } catch (Exception e) {
           // do not allow decref() operations to fail since they are typically called in finally blocks
           // and throwing another exception would be very unexpected.
           SolrException.log(log, "Error closing searcher:" + this, e);
@@ -1824,7 +1864,7 @@ private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) {
         newSearcher.register(); // register subitems (caches)
         log.info(logid+"Registered new searcher " + newSearcher);
 
-      } catch (Throwable e) {
+      } catch (Exception e) {
         // an exception in register() shouldn't be fatal.
         log(e);
       } finally {
@@ -1869,8 +1909,8 @@ public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryR
     // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))
     //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"isShard is only acceptable with search handlers");
 
-    handler.handleRequest(req,rsp);
 
+    handler.handleRequest(req,rsp);
     postDecorateResponse(handler, req, rsp);
 
     if (log.isInfoEnabled() && rsp.getToLog().size() > 0) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java
index f4a4d317..a22c1c4f 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCores.java
@@ -118,8 +118,11 @@ protected void close() {
       for (SolrCore core : coreList) {
         try {
           core.close();
-        } catch (Throwable t) {
-          SolrException.log(CoreContainer.log, "Error shutting down core", t);
+        } catch (Throwable e) {
+          SolrException.log(CoreContainer.log, "Error shutting down core", e);
+          if (e instanceof Error) {
+            throw (Error) e;
+          }
         }
       }
     } while (coreList.size() > 0);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index 5e70e59f..7c386c20 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -675,8 +675,8 @@ public void inform(Map<String, SolrInfoMBean> infoRegistry) {
     for (SolrInfoMBean bean : arr) {
       try {
         infoRegistry.put(bean.getName(), bean);
-      } catch (Throwable t) {
-        log.warn("could not register MBean '" + bean.getName() + "'.", t);
+      } catch (Exception e) {
+        log.warn("could not register MBean '" + bean.getName() + "'.", e);
       }
     }
   }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java
index bf8eac65..b1bc0f2c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java
@@ -253,8 +253,8 @@ protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Ex
       core.execute(handler, req, pingrsp );
       ex = pingrsp.getException();
     }
-    catch( Throwable th ) {
-      ex = th;
+    catch( Exception e ) {
+      ex = e;
     }
     
     // Send an error or an 'OK' message (response code will be 200)
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 26934a3a..ecf02da2 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -1356,10 +1356,10 @@ FastInputStream getStream() throws IOException {
           is = new InflaterInputStream(is);
         }
         return new FastInputStream(is);
-      } catch (Throwable t) {
+      } catch (Exception e) {
         //close stream on error
         IOUtils.closeQuietly(is);
-        throw new IOException("Could not download file '" + fileName + "'", t);
+        throw new IOException("Could not download file '" + fileName + "'", e);
       } finally {
         s.shutdown();
       }
@@ -1620,10 +1620,10 @@ FastInputStream getStream() throws IOException {
           is = new InflaterInputStream(is);
         }
         return new FastInputStream(is);
-      } catch (Throwable t) {
+      } catch (Exception e) {
         //close stream on error
         IOUtils.closeQuietly(is);
-        throw new IOException("Could not download file '" + fileName + "'", t);
+        throw new IOException("Could not download file '" + fileName + "'", e);
       } finally {
         s.shutdown();
       }
@@ -1683,19 +1683,13 @@ static Integer readInterval(String interval) {
   public void destroy() {
     try {
       if (executorService != null) executorService.shutdown();
-    } catch (Throwable e) {
-      SolrException.log(LOG, e);
-    }
+    } finally {
     try {
       abortPull();
-    } catch (Throwable e) {
-      SolrException.log(LOG, e);
-    }
-    try {
+      } finally {
       if (executorService != null) ExecutorUtil
           .shutdownNowAndAwaitTermination(executorService);
-    } catch (Throwable e) {
-      SolrException.log(LOG, e);
+      }
     }
   }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 6350bce2..83a1fc2d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -766,8 +766,11 @@ public void run() {
             }  catch (InterruptedException e) {
               Thread.currentThread().interrupt();
               SolrException.log(log, "", e);
-            } catch (Throwable t) {
-              SolrException.log(log, "", t);
+            } catch (Throwable e) {
+              SolrException.log(log, "", e);
+              if (e instanceof Error) {
+                throw (Error) e;
+              }
             }
             
             core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());
@@ -1005,7 +1008,7 @@ private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResp
     } catch (InterruptedException e) {
       Thread.currentThread().interrupt();
       log.warn("Recovery was interrupted", e);
-    } catch (Throwable e) {
+    } catch (Exception e) {
       if (e instanceof SolrException)
         throw (SolrException)e;
       else
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java
index 2e36e5ee..929b3079 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java
@@ -177,7 +177,7 @@ private CoreContainer getCoreContainer(SolrQueryRequest req, SolrCore core) {
         info.add( "uptime", execute( "uptime" ) );
       }
     }
-    catch( Throwable ex ) {
+    catch( Exception ex ) {
       ex.printStackTrace();
     } 
     return info;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
index 429eb9bf..c345675e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
@@ -165,7 +165,7 @@ public ShardResponse call() throws Exception {
         }
         catch( ConnectException cex ) {
           srsp.setException(cex); //????
-        } catch (Throwable th) {
+        } catch (Exception th) {
           srsp.setException(th);
           if (th instanceof SolrException) {
             srsp.setResponseCode(((SolrException)th).code());
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
index a2432cd9..b25a4505 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
@@ -175,25 +175,18 @@ protected LBHttpSolrServer createLoadbalancer(HttpClient httpClient){
   public void close() {
     try {
       ExecutorUtil.shutdownNowAndAwaitTermination(commExecutor);
-    } catch (Throwable e) {
-      SolrException.log(log, e);
-    }
-    
+    } finally {
     try {
-      if(defaultClient != null) {
+        if (defaultClient != null) {
         defaultClient.getConnectionManager().shutdown();
       }
-    } catch (Throwable e) {
-      SolrException.log(log, e);
-    }
-    try {
-      if(loadbalancer != null) {
+      } finally {
+        
+        if (loadbalancer != null) {
         loadbalancer.shutdown();
       }
-    } catch (Throwable e) {
-      SolrException.log(log, e);
     }
-
+    }
   }
 
   /**
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/logging/LogWatcher.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/logging/LogWatcher.java
index 13a5c931..7800f6b5 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/logging/LogWatcher.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/logging/LogWatcher.java
@@ -161,6 +161,9 @@ private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoa
     }
     catch (Throwable e) {
       log.warn("Unable to read SLF4J version.  LogWatcher will be disabled: " + e);
+      if (e instanceof OutOfMemoryError) {
+        throw (OutOfMemoryError) e;
+      }
       return null;
     }
 
@@ -179,6 +182,9 @@ private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoa
     }
     catch (Throwable e) {
       log.warn("Unable to load LogWatcher {}: {}", fname, e);
+      if (e instanceof OutOfMemoryError) {
+        throw (OutOfMemoryError) e;
+      }
     }
 
     return null;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/request/SolrRequestInfo.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/request/SolrRequestInfo.java
index e371db65..bbea9b2f 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/request/SolrRequestInfo.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/request/SolrRequestInfo.java
@@ -64,8 +64,8 @@ public static void clearRequestInfo() {
         for (Closeable hook : info.closeHooks) {
           try {
             hook.close();
-          } catch (Throwable throwable) {
-            SolrException.log(SolrCore.log, "Exception during close hook", throwable);
+          } catch (Exception e) {
+            SolrException.log(SolrCore.log, "Exception during close hook", e);
           }
         }
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource.java
index ed7aecb0..705558a4 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource.java
@@ -134,6 +134,9 @@ public void doInit() throws ResourceException {
           }
         }
       } catch (Throwable t) {
+        if (t instanceof OutOfMemoryError) {
+          throw (OutOfMemoryError) t;
+        }
         setExisting(false);
         throw new ResourceException(t);
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FastLRUCache.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FastLRUCache.java
index 9072da88..d5314c31 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FastLRUCache.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/FastLRUCache.java
@@ -160,7 +160,7 @@ public void warm(SolrIndexSearcher searcher, SolrCache old) {
                   this, old, itemsArr[i].getKey(), itemsArr[i].getValue());
           if (!continueRegen) break;
         }
-        catch (Throwable e) {
+        catch (Exception e) {
           SolrException.log(log, "Error during auto-warming of key:" + itemsArr[i].getKey(), e);
         }
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LFUCache.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LFUCache.java
index 932459d2..6cf63349 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LFUCache.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LFUCache.java
@@ -182,7 +182,7 @@ public void warm(SolrIndexSearcher searcher, SolrCache old) {
           boolean continueRegen = regenerator.regenerateItem(searcher,
               this, old, itemsArr[i].getKey(), itemsArr[i].getValue());
           if (!continueRegen) break;
-        } catch (Throwable e) {
+        } catch (Exception e) {
           SolrException.log(log, "Error during auto-warming of key:" + itemsArr[i].getKey(), e);
         }
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LRUCache.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LRUCache.java
index d3f9fca0..ad1ae363 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LRUCache.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/LRUCache.java
@@ -188,7 +188,7 @@ public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {
           boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);
           if (!continueRegen) break;
         }
-        catch (Throwable e) {
+        catch (Exception e) {
           SolrException.log(log,"Error during auto-warming of key:" + keys[i], e);
         }
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index fc9c7e12..1443362e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -174,9 +174,9 @@ private static DirectoryReader getReader(SolrCore core, SolrIndexConfig config,
     Directory dir = directoryFactory.get(path, DirContext.DEFAULT, config.lockType);
     try {
       reader = core.getIndexReaderFactory().newReader(dir, core);
-    } catch (Throwable t) {
+    } catch (Exception e) {
       directoryFactory.release(dir);
-      throw new SolrException(ErrorCode.SERVER_ERROR, "Error opening Reader", t);
+      throw new SolrException(ErrorCode.SERVER_ERROR, "Error opening Reader", e);
     }
     return reader;
   }
@@ -346,8 +346,8 @@ public void close() throws IOException {
     long cpg = reader.getIndexCommit().getGeneration();
     try {
       if (closeReader) reader.decRef();
-    } catch (Throwable t) {
-      SolrException.log(log, "Problem dec ref'ing reader", t);
+    } catch (Exception e) {
+      SolrException.log(log, "Problem dec ref'ing reader", e);
     }
 
     if (directoryFactory.searchersReserveCommitPoints()) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
index 01b23eae..784ff372 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -136,6 +136,9 @@ public void init(FilterConfig config) throws ServletException
       // catch this so our filter still works
       log.error( "Could not start Solr. Check solr/home property and the logs");
       SolrCore.log( t );
+      if (t instanceof Error) {
+        throw (Error) t;
+      }
     }
 
     log.info("SolrDispatchFilter.init() done");
@@ -434,19 +437,27 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
       } 
       catch (Throwable ex) {
         sendError( core, solrReq, request, (HttpServletResponse)response, ex );
-        return;
+        if (ex instanceof Error) {
+          throw (Error) ex;
       } 
-      finally {
-        if( solrReq != null ) {
+        return;
+      } finally {
+        try {
+          if (solrReq != null) {
           log.debug("Closing out SolrRequest: {}", solrReq);
           solrReq.close();
         }
+        } finally {
+          try {
         if (core != null) {
           core.close();
         }
+          } finally {
         SolrRequestInfo.clearRequestInfo();        
       }
     }
+      }
+    }
 
     // Otherwise let the webapp handle the request
     chain.doFilter(request, response);
@@ -758,6 +769,7 @@ protected void sendError(SolrCore core,
       ServletRequest request, 
       HttpServletResponse response, 
       Throwable ex) throws IOException {
+    Exception exp = null;
     SolrCore localCore = null;
     try {
       SolrQueryResponse solrResp = new SolrQueryResponse();
@@ -786,16 +798,22 @@ protected void sendError(SolrCore core,
       QueryResponseWriter writer = core.getQueryResponseWriter(req);
       writeResponse(solrResp, response, writer, req, Method.GET);
     }
-    catch( Throwable t ) { // This error really does not matter
+    catch (Exception e) { // This error really does not matter
+         exp = e;
+    } finally {
+      try {
+        if (exp != null) {
       SimpleOrderedMap info = new SimpleOrderedMap();
       int code = ResponseUtils.getErrorInfo(ex, info, log);
-      response.sendError( code, info.toString() );
+          response.sendError(code, info.toString());
+        }
     } finally {
       if (core == null && localCore != null) {
         localCore.close();
       }
     }
   }
+  }
 
   //---------------------------------------------------------------------
   //---------------------------------------------------------------------
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
index ef0a2a98..9dd0d526 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
@@ -71,8 +71,8 @@ private void closeIndexWriter(IndexWriterCloser closer) {
         indexWriter.close();
       }
       indexWriter = null;
-    } catch (Throwable t) {
-      log.error("Error during shutdown of writer.", t);
+    } catch (Exception e) {
+      log.error("Error during shutdown of writer.", e);
     } 
   }
   
@@ -162,17 +162,17 @@ public synchronized void newIndexWriter(SolrCore core, boolean rollback) throws
             try {
               log.info("Closing old IndexWriter... core=" + coreName);
               indexWriter.close();
-            } catch (Throwable t) {
+            } catch (Exception e) {
               SolrException.log(log, "Error closing old IndexWriter. core="
-                  + coreName, t);
+                  + coreName, e);
             }
           } else {
             try {
               log.info("Rollback old IndexWriter... core=" + coreName);
               indexWriter.rollback();
-            } catch (Throwable t) {
+            } catch (Exception e) {
               SolrException.log(log, "Error rolling back old IndexWriter. core="
-                  + coreName, t);
+                  + coreName, e);
             }
           }
         }
@@ -220,17 +220,17 @@ public synchronized void closeIndexWriter(SolrCore core, boolean rollback)
           try {
             log.info("Closing old IndexWriter... core=" + coreName);
             indexWriter.close();
-          } catch (Throwable t) {
+          } catch (Exception e) {
             SolrException.log(log, "Error closing old IndexWriter. core="
-                + coreName, t);
+                + coreName, e);
           }
         } else {
           try {
             log.info("Rollback old IndexWriter... core=" + coreName);
             indexWriter.rollback();
-          } catch (Throwable t) {
+          } catch (Exception e) {
             SolrException.log(log, "Error rolling back old IndexWriter. core="
-                + coreName, t);
+                + coreName, e);
           }
         }
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
index ea9ea298..33684401 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
@@ -751,6 +751,9 @@ public void closeWriter(IndexWriter writer) throws IOException {
         }
       } catch (Throwable th) {
         log.error("Error in final commit", th);
+        if (th instanceof OutOfMemoryError) {
+          throw (OutOfMemoryError) th;
+        }
       }
 
       // we went through the normal process to commit, so we don't have to artificially
@@ -759,6 +762,9 @@ public void closeWriter(IndexWriter writer) throws IOException {
         if (ulog != null) ulog.close(false);
       }  catch (Throwable th) {
         log.error("Error closing log files", th);
+        if (th instanceof OutOfMemoryError) {
+          throw (OutOfMemoryError) th;
+        }
       }
 
       if (writer != null) writer.close();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCoreState.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCoreState.java
index 5464d289..649b1f65 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCoreState.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrCoreState.java
@@ -70,8 +70,8 @@ public boolean decrefSolrCoreState(IndexWriterCloser closer) {
       try {
         log.info("Closing SolrCoreState");
         close(closer);
-      } catch (Throwable t) {
-        log.error("Error closing SolrCoreState", t);
+      } catch (Exception e) {
+        log.error("Error closing SolrCoreState", e);
       }
     }
     return close;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexWriter.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexWriter.java
index 736893d7..a9948327 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexWriter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexWriter.java
@@ -134,14 +134,17 @@ public void close() throws IOException {
           // don't allow interruption
           continue;
         } catch (Throwable t) {
+          if (t instanceof OutOfMemoryError) {
+            throw (OutOfMemoryError) t;
+          }
           log.error("Error closing IndexWriter, trying rollback", t);
           super.rollback();
         }
         if (IndexWriter.isLocked(directory)) {
           try {
             IndexWriter.unlock(directory);
-          } catch (Throwable t) {
-            log.error("Coud not unlock directory after seemingly failed IndexWriter#close()", t);
+          } catch (Exception e) {
+            log.error("Coud not unlock directory after seemingly failed IndexWriter#close()", e);
           }
         }
         break;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
index edead5a0..7353bfa3 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -421,7 +421,7 @@ public void add(AddUpdateCommand cmd, boolean clearCaches) {
         try {
           RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);
           holder.decref();
-        } catch (Throwable e) {
+        } catch (Exception e) {
           SolrException.log(log, "Error opening realtime searcher for deleteByQuery", e);
         }
 
@@ -491,7 +491,7 @@ public void deleteByQuery(DeleteUpdateCommand cmd) {
         try {
           RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);
           holder.decref();
-        } catch (Throwable e) {
+        } catch (Exception e) {
           SolrException.log(log, "Error opening realtime searcher for deleteByQuery", e);
         }
 
@@ -512,7 +512,7 @@ public void deleteAll() {
       try {
         RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);
         holder.decref();
-      } catch (Throwable e) {
+      } catch (Exception e) {
         SolrException.log(log, "Error opening realtime searcher for deleteByQuery", e);
       }
 
@@ -859,7 +859,7 @@ public void close(boolean committed, boolean deleteOnClose) {
     synchronized (this) {
       try {
         ExecutorUtil.shutdownNowAndAwaitTermination(recoveryExecutor);
-      } catch (Throwable e) {
+      } catch (Exception e) {
         SolrException.log(log, e);
       }
 
@@ -1222,7 +1222,7 @@ public void run() {
           recoveryInfo.errors++;
           SolrException.log(log, e);
         }
-      } catch (Throwable e) {
+      } catch (Exception e) {
         recoveryInfo.errors++;
         SolrException.log(log, e);
       } finally {
@@ -1295,7 +1295,7 @@ public void doReplay(TransactionLog translog) {
             SolrException.log(log,e);
           } catch (IOException e) {
             SolrException.log(log,e);
-          } catch (Throwable e) {
+          } catch (Exception e) {
             SolrException.log(log,e);
           }
 
@@ -1381,7 +1381,7 @@ public void doReplay(TransactionLog translog) {
             recoveryInfo.errors++;
             loglog.warn("REYPLAY_ERR: IOException reading log", ex);
             // could be caused by an incomplete flush if recovering from log
-          } catch (Throwable ex) {
+          } catch (Exception ex) {
             recoveryInfo.errors++;
             loglog.warn("REPLAY_ERR: Exception replaying log", ex);
             // something wrong with the request?
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java
index c72bae38..ae5d5c8c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java
@@ -73,7 +73,7 @@ public ExecutorService getUpdateExecutor() {
   public void close() {
     try {
       ExecutorUtil.shutdownAndAwaitTermination(updateExecutor);
-    } catch (Throwable e) {
+    } catch (Exception e) {
       SolrException.log(log, e);
     } finally {
       clientConnectionManager.shutdown();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest.java
index d7f713c8..2c5bfeae 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest.java
@@ -185,23 +185,23 @@ public void run() {
               Thread.sleep(800);
               overseerClient.close();
               overseerClient = electNewOverseer(zkAddress);
-            } catch (Throwable e) {
+            } catch (Exception e) {
               // e.printStackTrace();
             }
           }
           try {
             Thread.sleep(100);
-          } catch (Throwable e) {
+          } catch (Exception e) {
             // e.printStackTrace();
           }
         }
-      } catch (Throwable t) {
+      } catch (Exception t) {
         // ignore
       } finally {
         if (overseerClient != null) {
           try {
             overseerClient.close();
-          } catch (Throwable t) {
+          } catch (Exception t) {
             // ignore
           }
         }
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java
index 91332488..86e44781 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java
@@ -250,6 +250,9 @@ public void writeTo(OutputStream out) throws IOException {
           }
         }
       } catch (Throwable e) {
+        if (e instanceof OutOfMemoryError) {
+          throw (OutOfMemoryError) e;
+        }
         handleError(e);
       } finally {
 
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
index 19425a05..4aa872b8 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
@@ -511,13 +511,16 @@ public boolean isRepeatable() {
       if (respBody != null && shouldClose) {
         try {
           respBody.close();
-        } catch (Throwable t) {} // ignore
+        } catch (IOException e) {
+          log.error("", e);
+        } finally {
         if (!success) {
           method.abort();
         }
       }
     }
   }
+  }
   
   // -------------------------------------------------------------------
   // -------------------------------------------------------------------
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java
index b68d3e6f..8495bbb5 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java
@@ -146,7 +146,7 @@ public void update(SolrZooKeeper keeper) {
                   Thread.currentThread().interrupt();
                   // we must have been asked to stop
                   throw new RuntimeException(e);
-                } catch (Throwable t) {
+                } catch (Exception t) {
                   closeKeeper(keeper);
                   throw new RuntimeException(t);
                 }
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
index 093809ba..fcd9be1c 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
@@ -123,7 +123,7 @@ public void update(SolrZooKeeper zooKeeper) {
               }
             }
           });
-    } catch (Throwable e) {
+    } catch (Exception e) {
       connManager.close();
       if (keeper != null) {
         try {
@@ -137,7 +137,7 @@ public void update(SolrZooKeeper zooKeeper) {
     
     try {
       connManager.waitForConnected(clientConnectTimeout);
-    } catch (Throwable e) {
+    } catch (Exception e) {
       connManager.close();
       try {
         keeper.close();
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkClientConnectionStrategy.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkClientConnectionStrategy.java
index 2a6eb37f..c1465b8e 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkClientConnectionStrategy.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkClientConnectionStrategy.java
@@ -43,8 +43,8 @@ public synchronized void disconnected() {
     for (DisconnectedListener listener : disconnectedListeners) {
       try {
         listener.disconnected();
-      } catch (Throwable t) {
-        SolrException.log(log, "", t);
+      } catch (Exception e) {
+        SolrException.log(log, "", e);
       }
     }
   }
@@ -53,8 +53,8 @@ public synchronized void connected() {
     for (ConnectedListener listener : connectedListeners) {
       try {
         listener.connected();
-      } catch (Throwable t) {
-        SolrException.log(log, "", t);
+      } catch (Exception e) {
+        SolrException.log(log, "", e);
       }
     }
   }
