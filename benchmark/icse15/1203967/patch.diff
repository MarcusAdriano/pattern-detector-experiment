diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
index 1b1d72b1..c729dc3a 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
@@ -22,6 +22,7 @@
 
 import org.apache.lucene.analysis.NumericTokenStream; // for javadocs
 import org.apache.lucene.document.NumericField; // for javadocs
+import org.apache.lucene.document.NumericField.DataType;
 import org.apache.lucene.util.NumericUtils;
 import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.util.StringHelper;
@@ -152,15 +153,14 @@
  **/
 public final class NumericRangeQuery<T extends Number> extends MultiTermQuery {
 
-  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,
+  private NumericRangeQuery(final String field, final int precisionStep, final DataType dataType,
     T min, T max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    assert (valSize == 32 || valSize == 64);
     if (precisionStep < 1)
       throw new IllegalArgumentException("precisionStep must be >=1");
     this.field = StringHelper.intern(field);
     this.precisionStep = precisionStep;
-    this.valSize = valSize;
+    this.dataType = dataType;
     this.min = min;
     this.max = max;
     this.minInclusive = minInclusive;
@@ -170,14 +170,16 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
     // hits too many terms, so set to CONSTANT_SCORE_FILTER right off
     // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it
     // creates new enums from IndexReader for each sub-range)
-    switch (valSize) {
-      case 64:
+    switch (dataType) {
+      case LONG:
+      case DOUBLE:
         setRewriteMethod( (precisionStep > 6) ?
           CONSTANT_SCORE_FILTER_REWRITE : 
           CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
         );
         break;
-      case 32:
+      case INT:
+      case FLOAT:
         setRewriteMethod( (precisionStep > 8) ?
           CONSTANT_SCORE_FILTER_REWRITE : 
           CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
@@ -185,7 +187,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
         break;
       default:
         // should never happen
-        throw new IllegalArgumentException("valSize must be 32 or 64");
+        throw new IllegalArgumentException("Invalid numeric DataType");
     }
     
     // shortcut if upper bound == lower bound
@@ -204,7 +206,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Long> newLongRange(final String field, final int precisionStep,
     Long min, Long max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Long>(field, precisionStep, 64, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Long>(field, precisionStep, DataType.LONG, min, max, minInclusive, maxInclusive);
   }
   
   /**
@@ -217,7 +219,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Long> newLongRange(final String field,
     Long min, Long max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Long>(field, NumericUtils.PRECISION_STEP_DEFAULT, 64, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Long>(field, NumericUtils.PRECISION_STEP_DEFAULT, DataType.LONG, min, max, minInclusive, maxInclusive);
   }
   
   /**
@@ -230,7 +232,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,
     Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Integer>(field, precisionStep, 32, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Integer>(field, precisionStep, DataType.INT, min, max, minInclusive, maxInclusive);
   }
   
   /**
@@ -243,7 +245,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Integer> newIntRange(final String field,
     Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Integer>(field, NumericUtils.PRECISION_STEP_DEFAULT, 32, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Integer>(field, NumericUtils.PRECISION_STEP_DEFAULT, DataType.INT, min, max, minInclusive, maxInclusive);
   }
   
   /**
@@ -256,7 +258,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,
     Double min, Double max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Double>(field, precisionStep, 64, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Double>(field, precisionStep, DataType.DOUBLE, min, max, minInclusive, maxInclusive);
   }
   
   /**
@@ -269,7 +271,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Double> newDoubleRange(final String field,
     Double min, Double max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Double>(field, NumericUtils.PRECISION_STEP_DEFAULT, 64, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Double>(field, NumericUtils.PRECISION_STEP_DEFAULT, DataType.DOUBLE, min, max, minInclusive, maxInclusive);
   }
   
   /**
@@ -282,7 +284,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Float> newFloatRange(final String field, final int precisionStep,
     Float min, Float max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Float>(field, precisionStep, 32, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Float>(field, precisionStep, DataType.FLOAT, min, max, minInclusive, maxInclusive);
   }
   
   /**
@@ -295,7 +297,7 @@ private NumericRangeQuery(final String field, final int precisionStep, final int
   public static NumericRangeQuery<Float> newFloatRange(final String field,
     Float min, Float max, final boolean minInclusive, final boolean maxInclusive
   ) {
-    return new NumericRangeQuery<Float>(field, NumericUtils.PRECISION_STEP_DEFAULT, 32, min, max, minInclusive, maxInclusive);
+    return new NumericRangeQuery<Float>(field, NumericUtils.PRECISION_STEP_DEFAULT, DataType.FLOAT, min, max, minInclusive, maxInclusive);
   }
   
   @Override
@@ -372,10 +374,21 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
 
   // members (package private, to be also fast accessible by NumericRangeTermEnum)
   String field;
-  final int precisionStep, valSize;
+  final int precisionStep;
+  final DataType dataType;
   final T min, max;
   final boolean minInclusive,maxInclusive;
 
+  // used to handle float/double infinity correcty
+  static final long LONG_NEGATIVE_INFINITY =
+    NumericUtils.doubleToSortableLong(Double.NEGATIVE_INFINITY);
+  static final long LONG_POSITIVE_INFINITY =
+    NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);
+  static final int INT_NEGATIVE_INFINITY =
+    NumericUtils.floatToSortableInt(Float.NEGATIVE_INFINITY);
+  static final int INT_POSITIVE_INFINITY =
+    NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);
+
   /**
    * Subclass of FilteredTermEnum for enumerating all terms that match the
    * sub-ranges for trie range queries.
@@ -396,14 +409,17 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
     NumericRangeTermEnum(final IndexReader reader) throws IOException {
       this.reader = reader;
       
-      switch (valSize) {
-        case 64: {
+      switch (dataType) {
+        case LONG:
+        case DOUBLE: {
           // lower
-          long minBound = Long.MIN_VALUE;
-          if (min instanceof Long) {
-            minBound = min.longValue();
-          } else if (min instanceof Double) {
-            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());
+          long minBound;
+          if (dataType == DataType.LONG) {
+            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();
+          } else {
+            assert dataType == DataType.DOUBLE;
+            minBound = (min == null) ? LONG_NEGATIVE_INFINITY
+              : NumericUtils.doubleToSortableLong(min.doubleValue());
           }
           if (!minInclusive && min != null) {
             if (minBound == Long.MAX_VALUE) break;
@@ -411,11 +427,13 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
           }
           
           // upper
-          long maxBound = Long.MAX_VALUE;
-          if (max instanceof Long) {
-            maxBound = max.longValue();
-          } else if (max instanceof Double) {
-            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());
+          long maxBound;
+          if (dataType == DataType.LONG) {
+            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();
+          } else {
+            assert dataType == DataType.DOUBLE;
+            maxBound = (max == null) ? LONG_POSITIVE_INFINITY
+              : NumericUtils.doubleToSortableLong(max.doubleValue());
           }
           if (!maxInclusive && max != null) {
             if (maxBound == Long.MIN_VALUE) break;
@@ -432,13 +450,16 @@ public final void addRange(String minPrefixCoded, String maxPrefixCoded) {
           break;
         }
           
-        case 32: {
+        case INT:
+        case FLOAT: {
           // lower
-          int minBound = Integer.MIN_VALUE;
-          if (min instanceof Integer) {
-            minBound = min.intValue();
-          } else if (min instanceof Float) {
-            minBound = NumericUtils.floatToSortableInt(min.floatValue());
+          int minBound;
+          if (dataType == DataType.INT) {
+            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();
+          } else {
+            assert dataType == DataType.FLOAT;
+            minBound = (min == null) ? INT_NEGATIVE_INFINITY
+              : NumericUtils.floatToSortableInt(min.floatValue());
           }
           if (!minInclusive && min != null) {
             if (minBound == Integer.MAX_VALUE) break;
@@ -446,11 +467,13 @@ public final void addRange(String minPrefixCoded, String maxPrefixCoded) {
           }
           
           // upper
-          int maxBound = Integer.MAX_VALUE;
-          if (max instanceof Integer) {
-            maxBound = max.intValue();
-          } else if (max instanceof Float) {
-            maxBound = NumericUtils.floatToSortableInt(max.floatValue());
+          int maxBound;
+          if (dataType == DataType.INT) {
+            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();
+          } else {
+            assert dataType == DataType.FLOAT;
+            maxBound = (max == null) ? INT_POSITIVE_INFINITY
+              : NumericUtils.floatToSortableInt(max.floatValue());
           }
           if (!maxInclusive && max != null) {
             if (maxBound == Integer.MIN_VALUE) break;
@@ -469,7 +492,7 @@ public final void addRange(String minPrefixCoded, String maxPrefixCoded) {
           
         default:
           // should never happen
-          throw new IllegalArgumentException("valSize must be 32 or 64");
+          throw new IllegalArgumentException("Invalid numeric DataType");
       }
       
       // seek to first term
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java
index c93868a2..7e3442a1 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/NumericUtils.java
@@ -253,7 +253,7 @@ public static int prefixCodedToInt(final String prefixCoded) {
    * @see #sortableLongToDouble
    */
   public static long doubleToSortableLong(double val) {
-    long f = Double.doubleToRawLongBits(val);
+    long f = Double.doubleToLongBits(val);
     if (f<0) f ^= 0x7fffffffffffffffL;
     return f;
   }
@@ -291,7 +291,7 @@ public static double prefixCodedToDouble(String val) {
    * @see #sortableIntToFloat
    */
   public static int floatToSortableInt(float val) {
-    int f = Float.floatToRawIntBits(val);
+    int f = Float.floatToIntBits(val);
     if (f<0) f ^= 0x7fffffff;
     return f;
   }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java
index 903c9bbd..bb549381 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java
@@ -22,12 +22,12 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericField;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.NumericUtils;
+import org.apache.lucene.util.TestNumericUtils; // NaN arrays
 import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util._TestUtil;
 
@@ -268,7 +268,8 @@ public void testRightOpenRange_2bit() throws Exception {
   @Test
   public void testInfiniteValues() throws Exception {
     Directory dir = newDirectory();
-    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));
+    RandomIndexWriter writer = new RandomIndexWriter(random, dir,
+      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));
     Document doc = new Document();
     doc.add(new NumericField("float").setFloatValue(Float.NEGATIVE_INFINITY));
     doc.add(new NumericField("int").setIntValue(Integer.MIN_VALUE));
@@ -283,6 +284,13 @@ public void testInfiniteValues() throws Exception {
     doc.add(new NumericField("float").setFloatValue(0.0f));
     doc.add(new NumericField("int").setIntValue(0));
     writer.addDocument(doc);
+    
+    for (float f : TestNumericUtils.FLOAT_NANs) {
+      doc = new Document();
+      doc.add(new NumericField("float").setFloatValue(f));
+      writer.addDocument(doc);
+    }
+    
     writer.close();
     
     IndexReader r = IndexReader.open(dir);
@@ -312,6 +320,18 @@ public void testInfiniteValues() throws Exception {
     topDocs = s.search(q, 10);
     assertEquals("Score doc count", 3,  topDocs.scoreDocs.length );
 
+    q=NumericRangeQuery.newFloatRange("float", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);
+    topDocs = s.search(q, 10);
+    assertEquals("Score doc count", 3,  topDocs.scoreDocs.length );
+
+    q=NumericRangeQuery.newFloatRange("float", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);
+    topDocs = s.search(q, 10);
+    assertEquals("Score doc count", 1,  topDocs.scoreDocs.length );
+
+    q=NumericRangeQuery.newFloatRange("float", Float.NaN, Float.NaN, true, true);
+    topDocs = s.search(q, 10);
+    assertEquals("Score doc count", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );
+
     s.close();
     r.close();
     dir.close();
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
index 2d8a3c1c..ef0e713b 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
@@ -22,12 +22,12 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericField;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.NumericUtils;
+import org.apache.lucene.util.TestNumericUtils; // NaN arrays
 import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util._TestUtil;
 
@@ -287,8 +287,8 @@ public void testRightOpenRange_2bit() throws Exception {
   @Test
   public void testInfiniteValues() throws Exception {
     Directory dir = newDirectory();
-    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer(random)));
+    RandomIndexWriter writer = new RandomIndexWriter(random, dir,
+      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));
     Document doc = new Document();
     doc.add(new NumericField("double").setDoubleValue(Double.NEGATIVE_INFINITY));
     doc.add(new NumericField("long").setLongValue(Long.MIN_VALUE));
@@ -303,6 +303,13 @@ public void testInfiniteValues() throws Exception {
     doc.add(new NumericField("double").setDoubleValue(0.0));
     doc.add(new NumericField("long").setLongValue(0L));
     writer.addDocument(doc);
+    
+    for (double d : TestNumericUtils.DOUBLE_NANs) {
+      doc = new Document();
+      doc.add(new NumericField("double").setDoubleValue(d));
+      writer.addDocument(doc);
+    }
+    
     writer.close();
     
     IndexReader r = IndexReader.open(dir);
@@ -332,6 +339,18 @@ public void testInfiniteValues() throws Exception {
     topDocs = s.search(q, 10);
     assertEquals("Score doc count", 3,  topDocs.scoreDocs.length );
 
+    q=NumericRangeQuery.newDoubleRange("double", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);
+    topDocs = s.search(q, 10);
+    assertEquals("Score doc count", 3,  topDocs.scoreDocs.length );
+
+    q=NumericRangeQuery.newDoubleRange("double", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);
+    topDocs = s.search(q, 10);
+    assertEquals("Score doc count", 1,  topDocs.scoreDocs.length );
+
+    q=NumericRangeQuery.newDoubleRange("double", Double.NaN, Double.NaN, true, true);
+    topDocs = s.search(q, 10);
+    assertEquals("Score doc count", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );
+
     s.close();
     r.close();
     dir.close();
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestNumericUtils.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestNumericUtils.java
index 6d250c89..4eb4ad8d 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestNumericUtils.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/util/TestNumericUtils.java
@@ -133,7 +133,7 @@ public void testIntSpecialValues() throws Exception {
   public void testDoubles() throws Exception {
     double[] vals=new double[]{
       Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, 
-      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY
+      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN
     };
     long[] longVals=new long[vals.length];
     
@@ -149,10 +149,28 @@ public void testDoubles() throws Exception {
     }
   }
 
+  public static final double[] DOUBLE_NANs = {
+    Double.NaN,
+    Double.longBitsToDouble(0x7ff0000000000001L),
+    Double.longBitsToDouble(0x7fffffffffffffffL),
+    Double.longBitsToDouble(0xfff0000000000001L),
+    Double.longBitsToDouble(0xffffffffffffffffL)
+  };
+
+  public void testSortableDoubleNaN() {
+    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);
+    for (double nan : DOUBLE_NANs) {
+      assertTrue(Double.isNaN(nan));
+      final long sortable = NumericUtils.doubleToSortableLong(nan);
+      assertTrue("Double not sorted correctly: " + nan + ", long repr: " 
+          + sortable + ", positive inf.: " + plusInf, sortable > plusInf);
+    }
+  }
+  
   public void testFloats() throws Exception {
     float[] vals=new float[]{
       Float.NEGATIVE_INFINITY, -2.3E25f, -1.0E15f, -1.0f, -1.0E-1f, -1.0E-2f, -0.0f, 
-      +0.0f, 1.0E-2f, 1.0E-1f, 1.0f, 1.0E15f, 2.3E25f, Float.POSITIVE_INFINITY
+      +0.0f, 1.0E-2f, 1.0E-1f, 1.0f, 1.0E15f, 2.3E25f, Float.POSITIVE_INFINITY, Float.NaN
     };
     int[] intVals=new int[vals.length];
     
@@ -168,6 +186,24 @@ public void testFloats() throws Exception {
     }
   }
   
+  public static final float[] FLOAT_NANs = {
+    Float.NaN,
+    Float.intBitsToFloat(0x7f800001),
+    Float.intBitsToFloat(0x7fffffff),
+    Float.intBitsToFloat(0xff800001),
+    Float.intBitsToFloat(0xffffffff)
+  };
+
+  public void testSortableFloatNaN() {
+    final int plusInf = NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);
+    for (float nan : FLOAT_NANs) {
+      assertTrue(Float.isNaN(nan));
+      final int sortable = NumericUtils.floatToSortableInt(nan);
+      assertTrue("Float not sorted correctly: " + nan + ", int repr: " 
+          + sortable + ", positive inf.: " + plusInf, sortable > plusInf);
+    }
+  }
+
   // INFO: Tests for trieCodeLong()/trieCodeInt() not needed because implicitely tested by range filter tests
   
   /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */
