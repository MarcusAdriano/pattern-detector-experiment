diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index d956715c..5aecba29 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -18,9 +18,6 @@
  */
 package org.apache.aries.blueprint.namespace;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.Reader;
 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
 import java.net.URI;
@@ -33,20 +30,25 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import javax.xml.XMLConstants;
-import javax.xml.transform.Source;
-import javax.xml.transform.stream.StreamSource;
+import java.util.HashSet;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.transform.Source;
+import javax.xml.XMLConstants;
+
+import org.w3c.dom.ls.LSInput;
+import org.w3c.dom.ls.LSResourceResolver;
 
 import org.apache.aries.blueprint.NamespaceHandler;
 import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
@@ -59,9 +61,9 @@
 import org.osgi.util.tracker.ServiceTrackerCustomizer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.w3c.dom.ls.LSInput;
-import org.w3c.dom.ls.LSResourceResolver;
+
 import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
 
 /**
  * Default implementation of the NamespaceHandlerRegistry.
@@ -85,7 +87,6 @@
     private final Map<Map<URI, NamespaceHandler>, Reference<Schema>> schemas = new LRUMap<Map<URI, NamespaceHandler>, Reference<Schema>>(10);
     private SchemaFactory schemaFactory;
     private List<NamespaceHandlerSetImpl> sets;
-    private final ReadWriteLock lock = new ReentrantReadWriteLock();
 
     public NamespaceHandlerRegistryImpl(BundleContext bundleContext) {
         this.bundleContext = bundleContext;
@@ -217,20 +218,18 @@ public synchronized NamespaceHandlerSet getNamespaceHandlers(Set<URI> uris, Bund
     public void destroy() {
         tracker.close();
     }
-    public Schema getSchema(Map<URI, NamespaceHandler> handlers)
+    public synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers)
             throws IOException, SAXException {
         return getSchema(handlers, null, new Properties());
     }
-
-    private Schema getSchema(Map<URI, NamespaceHandler> handlers,
+    private synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers, 
                              final Bundle bundle,
                              final Properties schemaMap) throws IOException, SAXException {
+        Schema schema = null;
         // Find a schema that can handle all the requested namespaces
         // If it contains additional namespaces, it should not be a problem since
         // they won't be used at all
         if (schemaMap == null || schemaMap.isEmpty()) {
-            try {
-                lock.readLock().lock();
                 for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
                     boolean found = true;
                     for (URI uri : handlers.keySet()) {
@@ -240,15 +239,12 @@ private Schema getSchema(Map<URI, NamespaceHandler> handlers,
                         }
                     }
                     if (found) {
-                        return schemas.get(key).get();
-                    }
+                    schema = schemas.get(key).get();
+                    break;
                 }
-            } finally {
-                lock.readLock().unlock();
             }
         }
-        try {
-            lock.writeLock().lock();
+        if (schema == null) {
             final List<StreamSource> schemaSources = new ArrayList<StreamSource>();
             try {
                 schemaSources.add(new StreamSource(getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd")));
@@ -331,7 +327,7 @@ public LSInput resolveResource(String type,
                     }
 
                 });
-                Schema schema = factory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
+                schema = factory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
                 // Remove schemas that are fully included
                 for (Iterator<Map<URI, NamespaceHandler>> iterator = schemas.keySet().iterator(); iterator.hasNext();) {
                     Map<URI, NamespaceHandler> key = iterator.next();
@@ -352,7 +348,6 @@ public LSInput resolveResource(String type,
                     //only cache non-custom schemas
                     schemas.put(handlers, new SoftReference<Schema>(schema));
                 }
-                return schema;
             } finally {
                 for (StreamSource s : schemaSources) {
                     try {
@@ -362,9 +357,8 @@ public LSInput resolveResource(String type,
                     }
                 }
             }
-        } finally {
-            lock.writeLock().unlock();
         }
+        return schema;
     }
 
     private class SourceLSInput implements LSInput {
