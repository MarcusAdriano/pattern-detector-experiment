diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java
index 402c779b..4f60c377 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTable.java
@@ -132,7 +132,8 @@ public String getFilename()
     /** @return full paths to all the files associated w/ this SSTable */
     public List<String> getAllFilenames()
     {
-        return Arrays.asList(getFilename(), indexFilename(), filterFilename());
+        // TODO streaming relies on the -Data (getFilename) file to be last, this is clunky
+        return Arrays.asList(indexFilename(), filterFilename(), getFilename());
     }
 
     public String getColumnFamilyName()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
index 3e165690..4ddb1a51 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
@@ -83,9 +83,9 @@ private static void transferOneTable(InetAddress target, List<String> fileList,
         {
             File file = new File(filename);
             streamContexts[i++] = new StreamContextManager.StreamContext(file.getAbsolutePath(), file.length(), table);
-            if (logger.isDebugEnabled())
-              logger.debug("Stream context metadata " + streamContexts[i]);
         }
+        if (logger.isDebugEnabled())
+          logger.debug("Stream context metadata " + StringUtils.join(streamContexts, ", "));
 
         StreamManager.instance(target).addFilesToStream(streamContexts);
         StreamInitiateMessage biMessage = new StreamInitiateMessage(streamContexts);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index f14ec185..fc7160dd 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -169,12 +169,18 @@ public synchronized void removeBootstrapSource(InetAddress s)
 
         if (bootstrapSet.isEmpty())
         {
+            finishBootstrapping();
+        }
+    }
+
+    private void finishBootstrapping()
+    {
             isBootstrapMode = false;
             SystemTable.setBootstrapped();
+        setToken(getLocalToken());
             Gossiper.instance().addApplicationState(StorageService.STATE_NORMAL, new ApplicationState(partitioner_.getTokenFactory().toString(getLocalToken())));
             logger_.info("Bootstrap completed! Now serving reads.");
         }
-    }
 
     private void updateForeignToken(Token token, InetAddress endpoint)
     {
@@ -276,9 +282,22 @@ public void start() throws IOException
             logger_.info("Starting in bootstrap mode (first, sleeping to get load information)");
             StorageLoadBalancer.instance().waitForLoadInfo();
             logger_.info("... got load info");
-            setToken(BootStrapper.getBootstrapToken(tokenMetadata_, StorageLoadBalancer.instance().getLoadInfo()));
+            Token token = BootStrapper.getBootstrapToken(tokenMetadata_, StorageLoadBalancer.instance().getLoadInfo());
+            SystemTable.updateToken(token); // DON'T use setToken, that makes us part of the ring locally which is incorrect until we are done bootstrapping
             Gossiper.instance().addApplicationState(StorageService.STATE_BOOTSTRAPPING, new ApplicationState(partitioner_.getTokenFactory().toString(getLocalToken())));
             new BootStrapper(replicationStrategy_, FBUtilities.getLocalAddress(), getLocalToken(), tokenMetadata_).startBootstrap(); // handles token update
+            // don't finish startup (enabling thrift) until after bootstrap is done
+            while (isBootstrapMode)
+            {
+                try
+                {
+                    Thread.sleep(100);
+                }
+                catch (InterruptedException e)
+                {
+                    throw new AssertionError(e);
+                }
+            }
         }
         else
         {
@@ -517,7 +536,7 @@ public final void deliverHints(InetAddress endpoint)
 
     public Token getLocalToken()
     {
-        return tokenMetadata_.getToken(FBUtilities.getLocalAddress());
+        return storageMetadata_.getToken();
     }
 
     /* This methods belong to the MBean interface */
