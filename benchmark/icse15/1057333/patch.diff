diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
index d3f58dd9..8f0bc38d 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
@@ -273,7 +273,7 @@ public void readExternal( ObjectInput in )
      * @param onDiskType The object read that represents the type.
      * @return A type descriptor.
      */
-    private static TypeDescriptor getStoredType(Object onDiskType)
+    public static TypeDescriptor getStoredType(Object onDiskType)
     {
         if (onDiskType instanceof OldRoutineType)
             return ((OldRoutineType) onDiskType).getCatalogType();
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
index c29f4c4e..1a153af2 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql;
 
+import org.apache.derby.catalog.types.RoutineAliasInfo;
 import org.apache.derby.iapi.sql.ResultColumnDescriptor;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 
@@ -216,7 +217,7 @@ public void readExternal(ObjectInput in)
 		tableName = (String)fh.get("tableName");
 		schemaName = (String)fh.get("schemaName");
 		columnPos = fh.getInt("columnPos");
-		type = (DataTypeDescriptor)fh.get("type");
+		type = getStoredDataTypeDescriptor(fh.get("type"));
 		isAutoincrement = fh.getBoolean("isAutoincrement");
 		updatableByCursor = fh.getBoolean("updatableByCursor");
 	}
@@ -242,4 +243,27 @@ public String toString()
 			return "";
 		}
 	}
+
+    /**
+     * When retrieving a DataTypeDescriptor, it might just be a regular
+     * DataTypeDescriptor or may be an OldRoutineType, as used for Routine
+     * parameters and return values prior to DERBY-2775. If it is not a regular
+     * DataTypeDescriptor, it must be an OldRoutineType, so convert it to a
+     * DataTypeDescriptor DERBY-4913
+     * 
+     * @param o
+     *            object as obtained by fh.get("type") in readExternal
+     * @return DataTypeDescriptor
+     */
+    private DataTypeDescriptor getStoredDataTypeDescriptor(Object o) {
+
+        if (o instanceof DataTypeDescriptor)
+            return (DataTypeDescriptor) o;
+        else
+            // Must be an OldRoutineType, so we will convert it to a
+            // DataTypeDescriptor for our purposes
+            return DataTypeDescriptor
+                    .getType(RoutineAliasInfo.getStoredType(o));
+    }
+
 }
