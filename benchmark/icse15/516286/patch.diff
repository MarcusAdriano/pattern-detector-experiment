diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CurrentOfTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CurrentOfTest.java
index 627408f0..118b602d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CurrentOfTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CurrentOfTest.java
@@ -174,14 +174,14 @@ public void testDelete() throws SQLException {
 		if (usingEmbedded())
 			assertStatementError("24000", delete);
 		else
-			assertStatementError("XCL07", delete);
+			assertStatementError("42X30", delete);
 		
 		
 		// TEST: delete off a closed cursor
 		// Once this is closed then the cursor no longer exists.
 		cursor.close();
 		if (usingEmbedded())
-			assertStatementError("XCL07", delete);
+			assertStatementError("42X30", delete);
 		else 
 			assertStatementError("XCL16", delete);
 		
@@ -282,7 +282,7 @@ public void testUpdate() throws SQLException {
 		// TEST: update off a closed cursor
 		cursor.close();
 		select.close();
-		assertStatementError("XCL07", update);
+		assertStatementError("42X30", update);
 		update.close();
 
 		// TEST: no cursor with that name exists
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java
index 1d3d324f..644b11cf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java
@@ -524,7 +524,7 @@ public void testUpdateDeleteRowNotOnRow() throws SQLException {
             fail("FAIL - deleteRow should have failed, positioned " +
                     "after last row");
         } catch (SQLException e) {
-            String sqlState = usingEmbedded() ? "24000" : "XCL07";
+            String sqlState = usingEmbedded() ? "24000" : "42X30";
             assertSQLState(sqlState, e);
         }
         
@@ -1858,14 +1858,14 @@ public void testDeleteRowWithTriggerChangingRS() throws SQLException {
         // this delete row will fire the delete trigger which will delete all
         // the rows from the table and from the resultset
         rs.deleteRow();
-        try {
             assertFalse("FAIL - row not found", rs.next());
+        try {           
             rs.deleteRow();
             fail("FAIL - there should have be no more rows in the resultset " +
                     "at this point because delete trigger deleted all the " +
                     "rows");
         } catch (SQLException e) {
-            String sqlState = usingEmbedded() ? "24000" : "XCL07";
+            String sqlState = usingEmbedded() ? "24000" : "42X30";
             assertSQLState(sqlState, e);
         }
         rs.close();
@@ -1942,13 +1942,13 @@ public void testDeleteRowSelfReferential() throws SQLException {
         // this delete row will cause the delete cascade constraint to delete
         // all the rows from the table and from the resultset
         rs.deleteRow();
-        try {
             assertFalse("FAIL - row not found", rs.next());
+        try {      
             rs.deleteRow();
             fail("FAIL - there should have be no more rows in the resultset " +
                     "at this point because of the delete cascade");
         } catch (SQLException e) {
-            String sqlState = usingEmbedded() ? "24000" : "XCL07";
+            String sqlState = usingEmbedded() ? "24000" : "42X30";
             assertSQLState(sqlState, e);
         }
         rs.close();
