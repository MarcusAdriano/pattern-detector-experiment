diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/document/Field.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/document/Field.java
index 93636542..f9b08e42 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/document/Field.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/document/Field.java
@@ -73,7 +73,7 @@
   // customize how it's tokenized:
   protected TokenStream tokenStream;
 
-  protected transient NumericTokenStream numericTokenStream;
+  protected transient TokenStream internalTokenStream;
 
   protected float boost = 1.0f;
 
@@ -283,9 +283,6 @@ public void setByteValue(byte value) {
     if (!(fieldsData instanceof Byte)) {
       throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Byte");
     }
-    if (numericTokenStream != null) {
-      numericTokenStream.setIntValue(value);
-    }
     fieldsData = Byte.valueOf(value);
   }
 
@@ -293,9 +290,6 @@ public void setShortValue(short value) {
     if (!(fieldsData instanceof Short)) {
       throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Short");
     }
-    if (numericTokenStream != null) {
-      numericTokenStream.setIntValue(value);
-    }
     fieldsData = Short.valueOf(value);
   }
 
@@ -303,9 +297,6 @@ public void setIntValue(int value) {
     if (!(fieldsData instanceof Integer)) {
       throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Integer");
     }
-    if (numericTokenStream != null) {
-      numericTokenStream.setIntValue(value);
-    }
     fieldsData = Integer.valueOf(value);
   }
 
@@ -313,9 +304,6 @@ public void setLongValue(long value) {
     if (!(fieldsData instanceof Long)) {
       throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Long");
     }
-    if (numericTokenStream != null) {
-      numericTokenStream.setLongValue(value);
-    }
     fieldsData = Long.valueOf(value);
   }
 
@@ -323,9 +311,6 @@ public void setFloatValue(float value) {
     if (!(fieldsData instanceof Float)) {
       throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Float");
     }
-    if (numericTokenStream != null) {
-      numericTokenStream.setFloatValue(value);
-    }
     fieldsData = Float.valueOf(value);
   }
 
@@ -333,9 +318,6 @@ public void setDoubleValue(double value) {
     if (!(fieldsData instanceof Double)) {
       throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Double");
     }
-    if (numericTokenStream != null) {
-      numericTokenStream.setDoubleValue(value);
-    }
     fieldsData = Double.valueOf(value);
   }
 
@@ -433,73 +415,97 @@ public TokenStream tokenStream(Analyzer analyzer) throws IOException {
 
     final NumericType numericType = fieldType().numericType();
     if (numericType != null) {
-      if (numericTokenStream == null) {
+      if (!(internalTokenStream instanceof NumericTokenStream)) {
         // lazy init the TokenStream as it is heavy to instantiate
         // (attributes,...) if not needed (stored field loading)
-        numericTokenStream = new NumericTokenStream(type.numericPrecisionStep());
+        internalTokenStream = new NumericTokenStream(type.numericPrecisionStep());
+      }
+      final NumericTokenStream nts = (NumericTokenStream) internalTokenStream;
         // initialize value in TokenStream
         final Number val = (Number) fieldsData;
         switch (numericType) {
         case INT:
-          numericTokenStream.setIntValue(val.intValue());
+        nts.setIntValue(val.intValue());
           break;
         case LONG:
-          numericTokenStream.setLongValue(val.longValue());
+        nts.setLongValue(val.longValue());
           break;
         case FLOAT:
-          numericTokenStream.setFloatValue(val.floatValue());
+        nts.setFloatValue(val.floatValue());
           break;
         case DOUBLE:
-          numericTokenStream.setDoubleValue(val.doubleValue());
+        nts.setDoubleValue(val.doubleValue());
           break;
         default:
           assert false : "Should never get here";
         }
-      } else {
-        // OK -- previously cached and we already updated if
-        // setters were called.
-      }
-
-      return numericTokenStream;
+      return internalTokenStream;
     }
 
     if (!fieldType().tokenized()) {
       if (stringValue() == null) {
         throw new IllegalArgumentException("Non-Tokenized Fields must have a String value");
       }
+      if (!(internalTokenStream instanceof StringTokenStream)) {
+        // lazy init the TokenStream as it is heavy to instantiate
+        // (attributes,...) if not needed (stored field loading)
+        internalTokenStream = new StringTokenStream();
+      }
+      ((StringTokenStream) internalTokenStream).setValue(stringValue());
+      return internalTokenStream;
+    }
+
+    if (tokenStream != null) {
+      return tokenStream;
+    } else if (readerValue() != null) {
+      return analyzer.tokenStream(name(), readerValue());
+    } else if (stringValue() != null) {
+      return analyzer.tokenStream(name(), new StringReader(stringValue()));
+    }
+
+    throw new IllegalArgumentException("Field must have either TokenStream, String, Reader or Number value");
+  }
 
-      return new TokenStream() {
-        CharTermAttribute termAttribute = addAttribute(CharTermAttribute.class);
-        OffsetAttribute offsetAttribute = addAttribute(OffsetAttribute.class);
-        boolean used;
+  static final class StringTokenStream extends TokenStream {
+    private final CharTermAttribute termAttribute = addAttribute(CharTermAttribute.class);
+    private final OffsetAttribute offsetAttribute = addAttribute(OffsetAttribute.class);
+    private boolean used = false;
+    private String value = null;
+    
+    /** Creates a new TokenStream that returns a String as single token.
+     * <p>Warning: Does not initialize the value, you must call
+     * {@link #setValue()} afterwards!
+     */
+    StringTokenStream() {
+    }
+    
+    /** Sets the string value. */
+    void setValue(String value) {
+      this.value = value;
+    }
 
         @Override
         public boolean incrementToken() {
           if (used) {
             return false;
           }
-          termAttribute.setEmpty().append(stringValue());
-          offsetAttribute.setOffset(0, stringValue().length());
+      clearAttributes();
+      termAttribute.append(value);
+      offsetAttribute.setOffset(0, value.length());
           used = true;
           return true;
         }
 
         @Override
-        public void reset() {
-          used = false;
-        }
-      };
+    public void end() {
+      final int finalOffset = value.length();
+      offsetAttribute.setOffset(finalOffset, finalOffset);
     }
 
-    if (tokenStream != null) {
-      return tokenStream;
-    } else if (readerValue() != null) {
-      return analyzer.tokenStream(name(), readerValue());
-    } else if (stringValue() != null) {
-      return analyzer.tokenStream(name(), new StringReader(stringValue()));
+    @Override
+    public void reset() {
+      used = false;
     }
-
-    throw new IllegalArgumentException("Field must have either TokenStream, String, Reader or Number value");
   }
 
   /** Specifies whether and how a field should be stored. */
