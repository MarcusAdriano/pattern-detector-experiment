diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
index 7eb427e5..0e571566 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
@@ -1332,5 +1332,73 @@ public void writeExternal( ObjectOutput out )
 	 *	@return	the formatID of this class
 	 */
 	public	int	getTypeFormatId()	{ return StoredFormatIds.DATA_TYPE_SERVICES_IMPL_V01_ID; }
+
+    /**
+     * Check to make sure that this type id is something a user can create
+     * him/herself directly through an SQL CREATE TABLE statement.
+     * 
+     * This method is used for CREATE TABLE AS ... WITH [NO] DATA binding
+     * because it's possible for the query to return types which are not
+     * actually creatable for a user.  DERBY-2605.
+     *
+     * Three examples are:
+     *
+     *  BOOLEAN: A user can select boolean columns from system tables, but
+     *   s/he is not allowed to create such a column him/herself.
+     *
+     *  JAVA_OBJECT: A user can select columns of various java object types
+     *   from system tables, but s/he is not allowed to create such a column
+     *   him/herself.
+     *  
+     *  DECIMAL: A user can specify a VALUES clause with a constant that
+     *   has a precision of greater than 31.  Derby can apparently handle
+     *   such a value internally, but the user is not supposed to be able
+     *   create such a column him/herself.
+     * 
+     * @return True if the type associated with this DTD can be created via
+     *  the CREATE TABLE syntax; false otherwise.
+     */
+    public boolean isUserCreatableType() throws StandardException
+    {
+        switch (typeId.getJDBCTypeId())
+        {
+            case Types.BOOLEAN:
+            case Types.JAVA_OBJECT:
+            	return false;
+            case Types.DECIMAL:
+                return
+                (getPrecision() <= typeId.getMaximumPrecision()) &&
+                (getScale() <= typeId.getMaximumScale()) &&
+                (getMaximumWidth() <= typeId.getMaximumMaximumWidth());
+            default: break;
+        }
+        return true;
+    }
+
+    /**
+     * Return the SQL type name and, if applicable, scale/precision/length
+     * for this DataTypeDescriptor.  Note that we want the values from *this*
+     * object specifically, not the max values defined on this.typeId.
+     */
+    public String getFullSQLTypeName()
+    {
+        StringBuffer sbuf = new StringBuffer(typeId.getSQLTypeName());
+        if (typeId.isDecimalTypeId() || typeId.isNumericTypeId())
+        {
+            sbuf.append("(");
+            sbuf.append(getPrecision());
+            sbuf.append(", ");
+            sbuf.append(getScale());
+            sbuf.append(")");
+        }
+        else if (typeId.variableLength())
+        {
+            sbuf.append("(");
+            sbuf.append(getMaximumWidth());
+            sbuf.append(")");
+        }
+
+        return sbuf.toString();
+    }
 }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
index 88105780..aa7d91ff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
@@ -306,6 +306,16 @@ public void bindStatement() throws StandardException
 					throw StandardException.newException(
 							SQLState.LANG_TABLE_REQUIRES_COLUMN_NAMES);
 				}
+
+				DataTypeDescriptor dtd = rc.getExpressionType();
+				if ((dtd != null) && !dtd.isUserCreatableType())
+				{
+					throw StandardException.newException(
+							SQLState.LANG_INVALID_COLUMN_TYPE_CREATE_TABLE,
+							dtd.getFullSQLTypeName(),
+							rc.getName());
+				}
+
 				ColumnDefinitionNode column = new ColumnDefinitionNode();
 				column.init(rc.getName(), null, rc.getType(), null);
 				tableElementList.addTableElement(column);
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 4d99a504..2ae163ee 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -845,6 +845,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_NO_FIELD_FOUND                                         = "42X68";
 	String LANG_PRIMITIVE_REFERENCING_EXPRESSION                       = "42X69";
 	String LANG_TABLE_DEFINITION_R_C_L_MISMATCH                        = "42X70";
+	String LANG_INVALID_COLUMN_TYPE_CREATE_TABLE                       = "42X71";
 	String LANG_NO_STATIC_FIELD_FOUND                                  = "42X72";
 	String LANG_AMBIGUOUS_METHOD_INVOCATION                            = "42X73";
 	String LANG_INVALID_CALL_STATEMENT                                 = "42X74";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java
index a0800b4a..ba9373e1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java
@@ -234,6 +234,24 @@ public void testUnimplementedWithDataClause() throws Exception
             "create table t3 as select * from t1 with data");
     }
    
+    /**
+     * Test error for creating table where the data type is invalid.
+     */
+    public void testInvalidDataType() throws Exception
+    {
+        // BOOLEAN
+        assertStatementError("42X71", stmt,
+            "create table t as select systemalias from sys.sysaliases with no data");
+
+        // USER (Java Object)
+        assertStatementError("42X71", stmt,
+            "create table t as select aliasinfo from sys.sysaliases with no data");
+        
+        // DECIMAL(44,0)
+        assertStatementError("42X71", stmt,
+        	"create table t(x) as values 12345678901234567890123456789012345678901234 with no data");
+    }
+   
     private void positiveTest(String sql, String [] columnNames,
             String [] nullability, String [] types) throws Exception
     {
