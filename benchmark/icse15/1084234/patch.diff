diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java
index 2742c50a..f3a6b0d1 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java
@@ -21,7 +21,7 @@
 
 import com.google.common.base.Preconditions;
 
-public final class WeightedRunningAverage implements RunningAverage, Serializable {
+public class WeightedRunningAverage implements RunningAverage, Serializable {
   
   private double totalWeight;
   private double average;
@@ -42,7 +42,7 @@ public synchronized void addDatum(double datum, double weight) {
     if (oldTotalWeight <= 0.0) {
       average = datum * weight;
     } else {
-      average = average * oldTotalWeight / totalWeight + datum / totalWeight;
+      average = average * oldTotalWeight / totalWeight + datum * weight / totalWeight;
     }
   }
   
@@ -58,7 +58,7 @@ public synchronized void removeDatum(double datum, double weight) {
       average = Double.NaN;
       totalWeight = 0.0;
     } else {
-      average = average * oldTotalWeight / totalWeight - datum / totalWeight;
+      average = average * oldTotalWeight / totalWeight - datum * weight / totalWeight;
     }
   }
   
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java
index e69de29b..87f66bc2 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageAndStdDev.java
@@ -0,0 +1,84 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.cf.taste.impl.common;
+
+/**
+ * This subclass also provides for a weighted estimate of the sample standard deviation.
+ * See <a href="http://en.wikipedia.org/wiki/Mean_square_weighted_deviation">estimate formulae here</a>.
+ */
+public final class WeightedRunningAverageAndStdDev extends WeightedRunningAverage implements RunningAverageAndStdDev {
+
+  private double totalSquaredWeight;
+  private double totalWeightedData;
+  private double totalWeightedSquaredData;
+
+  public WeightedRunningAverageAndStdDev() {
+    totalSquaredWeight = 0.0;
+    totalWeightedData = 0.0;
+    totalWeightedSquaredData = 0.0;
+  }
+  
+  @Override
+  public synchronized void addDatum(double datum, double weight) {
+    super.addDatum(datum, weight);
+    totalSquaredWeight += weight * weight;
+    double weightedData = datum * weight;
+    totalWeightedData += weightedData;
+    totalWeightedSquaredData += weightedData * datum;
+  }
+  
+  @Override
+  public synchronized void removeDatum(double datum, double weight) {
+    super.removeDatum(datum, weight);
+    totalSquaredWeight -= weight * weight;
+    if (totalSquaredWeight <= 0.0) {
+      totalSquaredWeight = 0.0;
+    }
+    double weightedData = datum * weight;
+    totalWeightedData -= weightedData;
+    if (totalWeightedData <= 0.0) {
+      totalWeightedData = 0.0;
+    }
+    totalWeightedSquaredData -= weightedData * datum;
+    if (totalWeightedSquaredData <= 0.0) {
+      totalWeightedSquaredData = 0.0;
+    }
+  }
+
+  /**
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public synchronized void changeDatum(double delta, double weight) {
+    throw new UnsupportedOperationException();
+  }
+  
+
+  @Override
+  public synchronized double getStandardDeviation() {
+    double totalWeight = getTotalWeight();
+    return Math.sqrt((totalWeightedSquaredData * totalWeight - totalWeightedData * totalWeightedData) /
+        (totalWeight * totalWeight - totalSquaredWeight));
+  }
+  
+  @Override
+  public synchronized String toString() {
+    return String.valueOf(String.valueOf(getAverage()) + ',' + getStandardDeviation());
+  }
+
+}
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageTest.java
index e69de29b..d13f08a3 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverageTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.cf.taste.impl.common;
+
+import org.apache.mahout.cf.taste.impl.TasteTestCase;
+import org.junit.Test;
+
+/**
+ * <p>Tests {@link WeightedRunningAverage} and {@link WeightedRunningAverageAndStdDev}.</p>
+ */
+public final class WeightedRunningAverageTest extends TasteTestCase {
+
+  @Test
+  public void testWeighted() {
+
+    WeightedRunningAverage runningAverage = new WeightedRunningAverage();
+
+    assertEquals(0, runningAverage.getCount());
+    assertTrue(Double.isNaN(runningAverage.getAverage()));
+    runningAverage.addDatum(1.0);
+    assertEquals(1.0, runningAverage.getAverage(), EPSILON);
+    runningAverage.addDatum(1.0, 2.0);
+    assertEquals(1.0, runningAverage.getAverage(), EPSILON);
+    runningAverage.addDatum(8.0, 0.5);
+    assertEquals(2.0, runningAverage.getAverage(), EPSILON);
+    runningAverage.addDatum(-4.0);
+    assertEquals(2.0/3.0, runningAverage.getAverage(), EPSILON);
+
+    runningAverage.removeDatum(-4.0);
+    assertEquals(2.0, runningAverage.getAverage(), EPSILON);
+    runningAverage.removeDatum(2.0, 2.0);
+    assertEquals(2.0, runningAverage.getAverage(), EPSILON);
+
+    runningAverage.changeDatum(0.0);
+    assertEquals(2.0, runningAverage.getAverage(), EPSILON);
+    runningAverage.changeDatum(4.0, 0.5);
+    assertEquals(5.0/1.5, runningAverage.getAverage(), EPSILON);
+  }
+
+  @Test
+  public void testWeightedAndStdDev() {
+
+    WeightedRunningAverageAndStdDev runningAverage = new WeightedRunningAverageAndStdDev();
+
+    assertEquals(0, runningAverage.getCount());
+    assertTrue(Double.isNaN(runningAverage.getAverage()));
+    assertTrue(Double.isNaN(runningAverage.getStandardDeviation()));
+
+    runningAverage.addDatum(1.0);
+    assertEquals(1.0, runningAverage.getAverage(), EPSILON);
+    assertTrue(Double.isNaN(runningAverage.getStandardDeviation()));
+    runningAverage.addDatum(1.0, 2.0);
+    assertEquals(1.0, runningAverage.getAverage(), EPSILON);
+    assertEquals(0.0, runningAverage.getStandardDeviation(), EPSILON);
+    runningAverage.addDatum(8.0, 0.5);
+    assertEquals(2.0, runningAverage.getAverage(), EPSILON);
+    assertEquals(Math.sqrt(10.5), runningAverage.getStandardDeviation(), EPSILON);
+    runningAverage.addDatum(-4.0);
+    assertEquals(2.0/3.0, runningAverage.getAverage(), EPSILON);
+    assertEquals(Math.sqrt(15.75), runningAverage.getStandardDeviation(), EPSILON);
+
+    runningAverage.removeDatum(-4.0);
+    assertEquals(2.0, runningAverage.getAverage(), EPSILON);
+    assertEquals(Math.sqrt(10.5), runningAverage.getStandardDeviation(), EPSILON);
+    runningAverage.removeDatum(2.0, 2.0);
+    assertEquals(2.0, runningAverage.getAverage(), EPSILON);
+    assertEquals(Math.sqrt(31.5), runningAverage.getStandardDeviation(), EPSILON);
+  }
+
+}
