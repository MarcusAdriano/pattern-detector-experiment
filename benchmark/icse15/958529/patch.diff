diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
index c111ef93..dec76e40 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
@@ -70,10 +70,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * then we will not be able to recompile the statement.
 	 *
 	 * @param lcc			The LanguageConnectionContext.
-	 * @return the re-prepared statement (may be a new PreparedStatement)
+	 *
 	 * @exception StandardException thrown if unable to perform
 	 */
-	PreparedStatement rePrepare(LanguageConnectionContext lcc)
+	void rePrepare(LanguageConnectionContext lcc) 
 		throws StandardException;
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
index 43bbba18..d38d700e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java
@@ -258,13 +258,13 @@ public ResultSet execute() throws StandardException
 		** the statement at the same time we're trying to execute it.
 		*/
 		// synchronized (ps)
-
+		{
 		/* Has the activation class changed or has the activation been
 		 * invalidated? */
 		if (gc != ps.getActivationClass() || !ac.isValid())
 		{
+
 	        GeneratedClass newGC;
-	        ExecPreparedStatement newPS;
 
 			if (gc != ps.getActivationClass()) {
 				// ensure the statement is valid by rePreparing it.
@@ -275,16 +275,16 @@ public ResultSet execute() throws StandardException
 				// NullPointerException being thrown later. Therefore,
 				// synchronize on ps to close the window.
 				synchronized (ps) {
-					newPS = (ExecPreparedStatement) ps.rePrepare(getLanguageConnectionContext());
-					newGC = newPS.getActivationClass();
-				}
+						ps.rePrepare(getLanguageConnectionContext());
+						newGC = ps.getActivationClass();
 			}
-			else
-			{
+				} else {
+					// Reuse the generated class, we just want a new activation
+					// since the old is no longer valid.
 				newGC = gc;
-				newPS = ps;
 			}
 
+
 			/*
 			** If we get here, it means the Activation has been invalidated
 			** or the PreparedStatement has been recompiled.  Get a new
@@ -295,15 +295,16 @@ public ResultSet execute() throws StandardException
 			*/
 			BaseActivation newAC = (BaseActivation) newGC.newInstance(lcc);
 
-			DataTypeDescriptor[] newParamTypes = newPS.getParameterTypes();
+				DataTypeDescriptor[]	newParamTypes = ps.getParameterTypes();
 
 			/*
 			** Link the new activation to the prepared statement.
 			*/
-			newAC.setupActivation(newPS, ac.getScrollable());
+				newAC.setupActivation(ps, ac.getScrollable());
 
 			newAC.setParameters(ac.getParameterValueSet(), paramTypes);
 
+
 			/*
 			** IMPORTANT
 			**
@@ -331,9 +332,9 @@ public ResultSet execute() throws StandardException
 			/* Remember the new class information */
 			ac = newAC;
 			gc = newGC;
-			ps = newPS;
 			paramTypes = newParamTypes;
 		}
+		}
 
 		String cursorName = ac.getCursorName();
 		if (cursorName != null)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index d71a0aeb..eb0e225a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -223,14 +223,14 @@ private boolean isUpToDate() {
         return isValid && (activationClass != null) && !compilingStatement;
     }
 
-	public PreparedStatement rePrepare(LanguageConnectionContext lcc)
+	public void rePrepare(LanguageConnectionContext lcc) 
 		throws StandardException {
 		if (!upToDate()) {
 			PreparedStatement ps = statement.prepare(lcc);
-			return ps;
-		}
 
-		return this;
+			if (SanityManager.DEBUG)
+				SanityManager.ASSERT(ps == this, "ps != this");
+		}
 	}
 
 	/**
@@ -247,10 +247,7 @@ public Activation getActivation(LanguageConnectionContext lcc,
 			GeneratedClass gc = getActivationClass();
 
 			if (gc == null) {
-				PreparedStatement ps = rePrepare(lcc);
-
-				if (SanityManager.DEBUG)
-					SanityManager.ASSERT(ps == this, "ps != this");
+				rePrepare(lcc);
 				gc = getActivationClass();
 			}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index 3583bde8..18928734 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -171,18 +171,11 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 		// cache of prepared statement objects...
 		synchronized (preparedStmt) 
 		{
-			for (;;)
-			{
-				if (preparedStmt.compilingStatement)
-				{
-					preparedStmt = new GenericPreparedStatement(this);
-					break;
-				}
 
-				if (foundInCache)
-				{
-					if (preparedStmt.referencesSessionSchema())
-					{
+			for (;;) {
+
+				if (foundInCache) {
+					if (preparedStmt.referencesSessionSchema()) {
 						// cannot use this state since it is private to a connection.
 						// switch to a new statement.
 						foundInCache = false;
@@ -196,9 +189,17 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 					return preparedStmt;
 				}
 
+				if (!preparedStmt.compilingStatement) {
 				break;
 			}
 
+				try {
+					preparedStmt.wait();
+				} catch (InterruptedException ie) {
+					throw StandardException.interrupt(ie);
+				}
+			}
+
 			preparedStmt.compilingStatement = true;
 			preparedStmt.setActivationClass(null);
 		}
@@ -541,6 +542,7 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 		{
 			synchronized (preparedStmt) {
 				preparedStmt.compilingStatement = false;
+				preparedStmt.notifyAll();
 			}
 		}
 
