diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java
index a9237021..039e42b2 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java
@@ -86,7 +86,7 @@ public ColumnDecoder(List<KsDef> defs)
         try
         {
             if (ByteBufferUtil.string(name).equalsIgnoreCase(ByteBufferUtil.string(cf.keyAlias)))
-                return AsciiTerm.instance;
+                return JdbcAscii.instance;
         }
         catch (CharacterCodingException e)
         {
diff --git a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java
index b9e64a0c..553a2cda 100644
--- a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java
+++ b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java
@@ -31,10 +31,10 @@
 import java.util.List;
 
 import org.apache.cassandra.cql.jdbc.CassandraResultSet;
-import org.apache.cassandra.cql.jdbc.AsciiTerm;
+import org.apache.cassandra.cql.jdbc.JdbcAscii;
 import org.apache.cassandra.cql.jdbc.JdbcBytes;
 import org.apache.cassandra.cql.jdbc.JdbcInteger;
-import org.apache.cassandra.cql.jdbc.LongTerm;
+import org.apache.cassandra.cql.jdbc.JdbcLong;
 import org.apache.cassandra.cql.jdbc.JdbcUTF8;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -177,11 +177,11 @@ public void testLongMetadata() throws SQLException
         
         ResultSetMetaData md = rs.getMetaData();
         assert md.getColumnCount() == 2;
-        expectedMetaData(md, 1, Long.class.getName(), "JdbcLong", "Keyspace1", "1", Types.INTEGER, LongTerm.class.getSimpleName(), true, false);
-        expectedMetaData(md, 2, Long.class.getName(), "JdbcLong", "Keyspace1", "2", Types.INTEGER, LongTerm.class.getSimpleName(), true, false);
+        expectedMetaData(md, 1, Long.class.getName(), "JdbcLong", "Keyspace1", "1", Types.INTEGER, JdbcLong.class.getSimpleName(), true, false);
+        expectedMetaData(md, 2, Long.class.getName(), "JdbcLong", "Keyspace1", "2", Types.INTEGER, JdbcLong.class.getSimpleName(), true, false);
         
         for (int i = 0; i < md.getColumnCount(); i++)
-            expectedMetaData(md, i + 1, Long.class.getName(), Types.INTEGER, LongTerm.class.getSimpleName(), true, false);
+            expectedMetaData(md, i + 1, Long.class.getName(), Types.INTEGER, JdbcLong.class.getSimpleName(), true, false);
     }
 
     @Test
@@ -203,8 +203,8 @@ public void testStringMetadata() throws SQLException
         
         ResultSetMetaData md = rs0.getMetaData();
         assert md.getColumnCount() == 2;
-        expectedMetaData(md, 1, String.class.getName(), "JdbcAscii", "Keyspace1", "a", Types.VARCHAR, AsciiTerm.class.getSimpleName(), false, true);
-        expectedMetaData(md, 2, String.class.getName(), "JdbcAscii", "Keyspace1", "b", Types.VARCHAR, AsciiTerm.class.getSimpleName(), false, true);
+        expectedMetaData(md, 1, String.class.getName(), "JdbcAscii", "Keyspace1", "a", Types.VARCHAR, JdbcAscii.class.getSimpleName(), false, true);
+        expectedMetaData(md, 2, String.class.getName(), "JdbcAscii", "Keyspace1", "b", Types.VARCHAR, JdbcAscii.class.getSimpleName(), false, true);
         md = rs1.getMetaData();
         assert md.getColumnCount() == 2;
         expectedMetaData(md, 1, String.class.getName(), "JdbcUtf8", "Keyspace1", "a", Types.VARCHAR, JdbcUTF8.class.getSimpleName(), false, true);
@@ -216,7 +216,7 @@ public void testStringMetadata() throws SQLException
                              i + 1,
                              String.class.getName(),
                              Types.VARCHAR,
-                             AsciiTerm.class.getSimpleName(),
+                             JdbcAscii.class.getSimpleName(),
                              false,
                              true);
             expectedMetaData(rs1.getMetaData(),
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AbstractJdbcUUID.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AbstractJdbcUUID.java
index e69de29b..67567dd2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AbstractJdbcUUID.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AbstractJdbcUUID.java
@@ -0,0 +1,73 @@
+package org.apache.cassandra.cql.jdbc;
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
+
+import java.sql.Types;
+import java.util.UUID;
+
+public abstract class AbstractJdbcUUID extends AbstractJdbcType<UUID>
+{
+    public String toString(UUID obj)
+    {
+        return obj.toString();
+    }
+    
+    public boolean isCaseSensitive()
+    {
+        return false;
+    }
+
+    public int getScale(UUID obj)
+    {
+        return -1;
+    }
+
+    public int getPrecision(UUID obj)
+    {
+        return -1;
+    }
+
+    public boolean isCurrency()
+    {
+        return false;
+    }
+
+    public boolean isSigned()
+    {
+        return false;
+    }
+
+    public boolean needsQuotes()
+    {
+        return false;
+    }
+
+    public Class<UUID> getType()
+    {
+        return UUID.class;
+    }
+
+    public int getJdbcType()
+    {
+        return Types.OTHER;
+    }
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AsciiTerm.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AsciiTerm.java
index 9a74fa7f..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AsciiTerm.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/AsciiTerm.java
@@ -1,100 +0,0 @@
-package org.apache.cassandra.cql.jdbc;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-import java.nio.ByteBuffer;
-import java.nio.charset.CharacterCodingException;
-import java.sql.Types;
-
-import org.apache.cassandra.utils.ByteBufferUtil;
-
-import com.google.common.base.Charsets;
-
-public class AsciiTerm extends AbstractJdbcType<String>
-{
-    public static final AsciiTerm instance = new AsciiTerm();
-    
-    AsciiTerm() {}
-    
-    public boolean isCaseSensitive()
-    {
-        return true;
-    }
-
-    public int getScale(String obj)
-    {
-        return -1;
-    }
-
-    public int getPrecision(String obj)
-    {
-        return -1;
-    }
-
-    public boolean isCurrency()
-    {
-        return false;
-    }
-
-    public boolean isSigned()
-    {
-        return false;
-    }
-
-    public String toString(String obj)
-    {
-        return obj;
-    }
-
-    public boolean needsQuotes()
-    {
-        return true;
-    }
-
-    public String getString(ByteBuffer bytes)
-    {
-        try
-        {
-            return ByteBufferUtil.string(bytes, Charsets.US_ASCII);
-        }
-        catch (CharacterCodingException e)
-        {
-            throw new MarshalException("Invalid ascii bytes " + ByteBufferUtil.bytesToHex(bytes));
-        }
-    }
-
-    public Class<String> getType()
-    {
-        return String.class;
-    }
-
-    public int getJdbcType()
-    {
-        return Types.VARCHAR;
-    }
-
-    public String compose(ByteBuffer bytes)
-    {
-        return getString(bytes);
-    }
-
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcAscii.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcAscii.java
index e69de29b..f4fd325f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcAscii.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcAscii.java
@@ -0,0 +1,100 @@
+package org.apache.cassandra.cql.jdbc;
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
+
+import java.nio.ByteBuffer;
+import java.nio.charset.CharacterCodingException;
+import java.sql.Types;
+
+import com.google.common.base.Charsets;
+
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+public class JdbcAscii extends AbstractJdbcType<String>
+{
+    public static final JdbcAscii instance = new JdbcAscii();
+    
+    JdbcAscii() {}
+    
+    public boolean isCaseSensitive()
+    {
+        return true;
+    }
+
+    public int getScale(String obj)
+    {
+        return -1;
+    }
+
+    public int getPrecision(String obj)
+    {
+        return -1;
+    }
+
+    public boolean isCurrency()
+    {
+        return false;
+    }
+
+    public boolean isSigned()
+    {
+        return false;
+    }
+
+    public String toString(String obj)
+    {
+        return obj;
+    }
+
+    public boolean needsQuotes()
+    {
+        return true;
+    }
+
+    public String getString(ByteBuffer bytes)
+    {
+        try
+        {
+            return ByteBufferUtil.string(bytes, Charsets.US_ASCII);
+        }
+        catch (CharacterCodingException e)
+        {
+            throw new MarshalException("Invalid ascii bytes " + ByteBufferUtil.bytesToHex(bytes));
+        }
+    }
+
+    public Class<String> getType()
+    {
+        return String.class;
+    }
+
+    public int getJdbcType()
+    {
+        return Types.VARCHAR;
+    }
+
+    public String compose(ByteBuffer bytes)
+    {
+        return getString(bytes);
+    }
+
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcCounterColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcCounterColumn.java
index 0030c81d..46108543 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcCounterColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcCounterColumn.java
@@ -1,6 +1,6 @@
 package org.apache.cassandra.cql.jdbc;
 
-public class JdbcCounterColumn extends LongTerm
+public class JdbcCounterColumn extends JdbcLong
 {
     public static final JdbcCounterColumn instance = new JdbcCounterColumn();
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLexicalUUID.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLexicalUUID.java
index 0d21371f..ea392324 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLexicalUUID.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLexicalUUID.java
@@ -26,7 +26,7 @@
 
 import org.apache.cassandra.utils.UUIDGen;
 
-public class JdbcLexicalUUID extends JdbcLong
+public class JdbcLexicalUUID extends AbstractJdbcUUID
 {
     public static final JdbcLexicalUUID instance = new JdbcLexicalUUID();
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLong.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLong.java
index a14456e0..c920441b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLong.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcLong.java
@@ -21,14 +21,17 @@
  */
 
 
+import java.nio.ByteBuffer;
 import java.sql.Types;
-import java.util.UUID;
 
-public abstract class JdbcLong extends AbstractJdbcType<UUID>
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+public class JdbcLong extends AbstractJdbcType<Long>
 {
-    public String toString(UUID obj)
+    public static final JdbcLong instance = new JdbcLong();
+
+    JdbcLong()
     {
-        return obj.toString();
     }
     
     public boolean isCaseSensitive()
@@ -36,14 +39,14 @@ public boolean isCaseSensitive()
         return false;
     }
 
-    public int getScale(UUID obj)
+    public int getScale(Long obj)
     {
-        return -1;
+        return 0;
     }
 
-    public int getPrecision(UUID obj)
+    public int getPrecision(Long obj)
     {
-        return -1;
+        return obj.toString().length();
     }
 
     public boolean isCurrency()
@@ -53,7 +56,12 @@ public boolean isCurrency()
 
     public boolean isSigned()
     {
-        return false;
+        return true;
+    }
+
+    public String toString(Long obj)
+    {
+        return obj.toString();
     }
 
     public boolean needsQuotes()
@@ -61,13 +69,32 @@ public boolean needsQuotes()
         return false;
     }
 
-    public Class<UUID> getType()
+    public String getString(ByteBuffer bytes)
     {
-        return UUID.class;
+        if (bytes.remaining() == 0)
+        {
+            return "";
+        }
+        if (bytes.remaining() != 8)
+        {
+            throw new MarshalException("A long is exactly 8 bytes: " + bytes.remaining());
+        }
+
+        return String.valueOf(bytes.getLong(bytes.position()));
+    }
+
+    public Class<Long> getType()
+    {
+        return Long.class;
     }
 
     public int getJdbcType()
     {
-        return Types.OTHER;
+        return Types.INTEGER;
+    }
+
+    public Long compose(ByteBuffer bytes)
+    {
+        return ByteBufferUtil.toLong(bytes);
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcTimeUUID.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcTimeUUID.java
index 248b94c6..3fc7db47 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcTimeUUID.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcTimeUUID.java
@@ -26,7 +26,7 @@
 
 import org.apache.cassandra.utils.UUIDGen;
 
-public class JdbcTimeUUID extends JdbcLong
+public class JdbcTimeUUID extends AbstractJdbcUUID
 {
     public static final JdbcTimeUUID instance = new JdbcTimeUUID();
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcUUID.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcUUID.java
index 667366f1..a375c810 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcUUID.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/JdbcUUID.java
@@ -24,7 +24,7 @@
 import java.nio.ByteBuffer;
 import java.util.UUID;
 
-public class JdbcUUID extends JdbcLong
+public class JdbcUUID extends AbstractJdbcUUID
 {
     public static final JdbcUUID instance = new JdbcUUID();
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/TypesMap.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/TypesMap.java
index 67e7e992..96294db0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/TypesMap.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/jdbc/TypesMap.java
@@ -9,7 +9,7 @@
     
     static
     {
-        map.put("org.apache.cassandra.db.marshal.AsciiType", AsciiTerm.instance);
+        map.put("org.apache.cassandra.db.marshal.AsciiType", JdbcAscii.instance);
         map.put("org.apache.cassandra.db.marshal.BooleanType", JdbcBoolean.instance);
         map.put("org.apache.cassandra.db.marshal.BytesType", JdbcBytes.instance);
         map.put("org.apache.cassandra.db.marshal.ColumnCounterType", JdbcCounterColumn.instance);
@@ -18,7 +18,7 @@
         map.put("org.apache.cassandra.db.marshal.FloatType", JdbcFloat.instance);
         map.put("org.apache.cassandra.db.marshal.IntegerType", JdbcInteger.instance);
         map.put("org.apache.cassandra.db.marshal.LexicalUUIDType", JdbcLexicalUUID.instance);
-        map.put("org.apache.cassandra.db.marshal.LongType", LongTerm.instance);
+        map.put("org.apache.cassandra.db.marshal.LongType", JdbcLong.instance);
         map.put("org.apache.cassandra.db.marshal.TimeUUIDType", JdbcTimeUUID.instance);
         map.put("org.apache.cassandra.db.marshal.UTF8Type", JdbcUTF8.instance);
         map.put("org.apache.cassandra.db.marshal.UUIDType", JdbcUUID.instance);
@@ -28,7 +28,7 @@
     {
         // If not fully qualified, assume it's the short name for a built-in.
         if ((comparator != null) && (!comparator.contains(".")))
-            return map.get("org.apache.cassandra.db." + comparator);
+            return map.get("org.apache.cassandra.db.marshal." + comparator);
         return map.get(comparator);
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java
index 2ebc3dd1..b759f7fa 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java
@@ -25,7 +25,7 @@
 
 import com.google.common.base.Charsets;
 
-import org.apache.cassandra.cql.jdbc.AsciiTerm;
+import org.apache.cassandra.cql.jdbc.JdbcAscii;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class AsciiType extends AbstractType<String>
@@ -38,7 +38,7 @@ public String getString(ByteBuffer bytes)
     {
         try
         {
-            return AsciiTerm.instance.getString(bytes);
+            return JdbcAscii.instance.getString(bytes);
         }
         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
         {
@@ -53,7 +53,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)
 
     public String compose(ByteBuffer bytes)
     {
-        return AsciiTerm.instance.getString(bytes);
+        return JdbcAscii.instance.getString(bytes);
     }
 
     public ByteBuffer decompose(String value)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
index b37f1284..1cecb726 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
@@ -23,7 +23,7 @@
 
 import java.nio.ByteBuffer;
 
-import org.apache.cassandra.cql.jdbc.LongTerm;
+import org.apache.cassandra.cql.jdbc.JdbcLong;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class LongType extends AbstractType<Long>
@@ -34,7 +34,7 @@
 
     public Long compose(ByteBuffer bytes)
     {
-        return LongTerm.instance.compose(bytes);
+        return ByteBufferUtil.toLong(bytes);
     }
 
     public ByteBuffer decompose(Long value)
@@ -65,7 +65,7 @@ public String getString(ByteBuffer bytes)
     {
         try
         {
-            return LongTerm.instance.getString(bytes);
+            return JdbcLong.instance.getString(bytes);
         }
         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
         {
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java
index 5403e3ff..135a0aff 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java
@@ -56,7 +56,7 @@ public void testLong()
         assert LongType.instance.fromString(LongType.instance.getString(ByteBuffer.wrap(v)))
                 .equals(ByteBuffer.wrap(v));
         assert LongType.instance.compose(ByteBuffer.wrap(v)) == 1L;
-        assert LongTerm.instance.toString(1L).equals("1");
+        assert JdbcLong.instance.toString(1L).equals("1");
     }
     
     @Test
@@ -67,7 +67,7 @@ public void testAscii() throws Exception
         assert AsciiType.instance.fromString(AsciiType.instance.getString(ByteBuffer.wrap(abc)))
                 .equals(ByteBuffer.wrap(abc));
         assert AsciiType.instance.compose(ByteBuffer.wrap(abc)).equals("abc");
-        assert AsciiTerm.instance.toString("abc").equals("abc");
+        assert JdbcAscii.instance.toString("abc").equals("abc");
     }
     
     @Test
