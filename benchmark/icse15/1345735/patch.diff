diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java
index c3f68a0a..0da2917c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java
@@ -55,9 +55,7 @@ public int numCategories() {
 
   @Override
   public Vector classifyFull(Vector instance) {
-    System.out.println(1);
     Vector score = model.createScoringVector();
-    System.out.println(score.size());
     for (int label = 0; label < model.numLabels(); label++) {
       score.set(label, getScoreForLabelInstance(label, instance));
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java
index c7dfc385..88836292 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java
@@ -116,7 +116,7 @@ public static int writeLabelIndex(Configuration conf, Path indexPath,
     int i = 0;
     try {
       for (Object label : labels) {
-        String theLabel = ((Pair<?,?>) label).getFirst().toString();
+        String theLabel = ((Pair<?,?>) label).getFirst().toString().split("/")[1];
         if (!seen.contains(theLabel)) {
           writer.append(new Text(theLabel), new IntWritable(i++));
           seen.add(theLabel);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java
index 9b5a3601..f02a8c90 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java
@@ -36,5 +36,4 @@ public double getScoreForLabelFeature(int label, int feature) {
 
     return Math.log(numerator / denominator);
   }
-
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/BayesTestMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/BayesTestMapper.java
index 975940c3..8eb66f82 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/BayesTestMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/BayesTestMapper.java
@@ -59,6 +59,6 @@ protected void setup(Context context) throws IOException, InterruptedException {
   protected void map(Text key, VectorWritable value, Context context) throws IOException, InterruptedException {
     Vector result = classifier.classifyFull(value.get());
     //the key is the expected value
-    context.write(key, new VectorWritable(result));
+    context.write(new Text(key.toString().split("/")[1]), new VectorWritable(result));
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/TestNaiveBayesDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/TestNaiveBayesDriver.java
index 6870a1ff..c82c4987 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/TestNaiveBayesDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/TestNaiveBayesDriver.java
@@ -99,7 +99,8 @@ public int run(String[] args) throws Exception {
       Text key = new Text();
       VectorWritable vw = new VectorWritable();
       while (reader.next(key, vw)) {
-        writer.append(key, new VectorWritable(classifier.classifyFull(vw.get())));
+        writer.append(new Text(key.toString().split("/")[1]),
+            new VectorWritable(classifier.classifyFull(vw.get())));
       }
       writer.close();
       reader.close();
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/IndexInstancesMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/IndexInstancesMapper.java
index 08e455de..272deb28 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/IndexInstancesMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/IndexInstancesMapper.java
@@ -40,7 +40,7 @@ protected void setup(Context ctx) throws IOException, InterruptedException {
 
   @Override
   protected void map(Text labelText, VectorWritable instance, Context ctx) throws IOException, InterruptedException {
-    String label = labelText.toString();
+    String label = labelText.toString().split("/")[1]; 
     if (labelIndex.containsKey(label)) {
       ctx.write(new IntWritable(labelIndex.get(label)), instance);
     } else {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ThetaMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ThetaMapper.java
index 344c12bc..7e92e98f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ThetaMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ThetaMapper.java
@@ -41,7 +41,7 @@ protected void setup(Context ctx) throws IOException, InterruptedException {
     Configuration conf = ctx.getConfiguration();
 
     float alphaI = conf.getFloat(ALPHA_I, 1.0f);
-    Map<String,Vector> scores = BayesUtils.readScoresFromCache(conf);
+    Map<String, Vector> scores = BayesUtils.readScoresFromCache(conf);
 
     if (conf.getBoolean(TRAIN_COMPLEMENTARY, false)) {
       trainer = new ComplementaryThetaTrainer(scores.get(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE),
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java
index 4da64269..27ef1f41 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java
@@ -112,8 +112,10 @@ public int run(String[] args) throws Exception {
     if (!succeeded) {
       return -1;
     }
+    
     //put the per label and per feature vectors into the cache
     HadoopUtil.cacheFiles(getTempPath(WEIGHTS), getConf());
+    
     //calculate the Thetas, write out to LABEL_THETA_NORMALIZER vectors -- TODO: add reference here to the part of the Rennie paper that discusses this
     Job thetaSummer = prepareJob(getTempPath(SUMMED_OBSERVATIONS), getTempPath(THETAS),
             SequenceFileInputFormat.class, ThetaMapper.class, Text.class, VectorWritable.class, VectorSumReducer.class,
@@ -125,6 +127,7 @@ public int run(String[] args) throws Exception {
     if (!succeeded) {
       return -1;
     }
+    
     //validate our model and then write it out to the official output
     NaiveBayesModel naiveBayesModel = BayesUtils.readModelFromDir(getTempPath(), getConf());
     naiveBayesModel.validate();
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/WeightsMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/WeightsMapper.java
index dba5b4a3..31547371 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/WeightsMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/WeightsMapper.java
@@ -51,7 +51,6 @@ protected void map(IntWritable index, VectorWritable value, Context ctx) throws
     }
 
     int label = index.get();
-//    instance.addTo(weightsPerFeature);
     weightsPerFeature.assign(instance, Functions.PLUS);
     weightsPerLabel.set(label, weightsPerLabel.get(label) + instance.zSum());
   }
