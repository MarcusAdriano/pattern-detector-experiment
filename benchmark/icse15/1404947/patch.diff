diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index 4eba113a..514e2041 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -251,6 +251,13 @@ public EmbedConnection(InternalDriver driver, String url, Properties info)
 			// see if database is already booted
 			Database database = (Database) Monitor.findService(Property.DATABASE_MODULE, tr.getDBName());
 
+            // encryption, re-encryption and decryption are not allowed on an already booted database.
+            // see DERBY-5969.
+            if ( (database != null) && isCryptoBoot( info ) )
+            {
+                addWarning( SQLWarningFactory.newSQLWarning( SQLState.AUTH_ENCRYPT_ALREADY_BOOTED ) );
+            }
+
 			// See if user wants to create a new database.
 			boolean	createBoot = createBoot(info);	
 
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 2dff421f..9ed3994a 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1730,6 +1730,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String SQL_AUTHORIZATION_WITH_NO_AUTHENTICATION = "01J14";
 	String PASSWORD_EXPIRES_SOON = "01J15";
 	String DBO_PASSWORD_EXPIRES_SOON = "01J16";
+    String AUTH_ENCRYPT_ALREADY_BOOTED = "01J17";
 
     String CURSOR_OPERATION_CONFLICT = "01001";
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java
index edc0ffac..62a395f3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/DecryptDatabaseTest.java
@@ -51,6 +51,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     private static final String TABLE = "DECRYPTTABLE";
     private static final String BOOTPW = "Thursday";
+    private static final String ALREADY_BOOTED = "01J17";
     /** Current encryption algorithm, used when re-encrypting during set up. */
     private static String encryptionAlgorithm;
 
@@ -207,6 +208,15 @@ public void testDecryptDatabase()
     public void testDecryptOnBootedDatabase()
             throws SQLException {
         getConnection();
+
+        // These connection attempts should succeed but raise a warning
+        // that encryption change is not possible while the database is booted.
+        println( "Test warning " + ALREADY_BOOTED );
+        vetChangeWarning( connect( false, BOOTPW, "dataEncryption=true" ) );
+        vetChangeWarning( connect( false, BOOTPW, "newBootPassword=foo" ) );
+        vetChangeWarning( connect( false, BOOTPW, "newEncryptionKey=foo" ) );
+        vetChangeWarning( connect( false, BOOTPW, "decryptDatabase=true" ) );
+        
         // Connect to decrypt the database. We expect this to fail since the
         // database is already booted. In this case fail means ignored...
         connect(true, BOOTPW, null).close();
@@ -218,6 +228,13 @@ public void testDecryptOnBootedDatabase()
             assertSQLState("XBM06", sqle);
         }
     }
+    private void    vetChangeWarning( Connection conn )
+        throws SQLException
+    {
+        assertWarning( conn, ALREADY_BOOTED );
+        conn.close();
+    }
+
 
     /**
      * Tests that asking to decrypt an un-encrypted doesn't fail.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
index 88aa477e..7a15e551 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
@@ -886,6 +886,27 @@ public static void assertSQLState(String message,
         }
     }
 
+    /**
+     * Assert that a warning is chained to the connection.
+     *
+     * @param conn  the connection
+     * @param expected the expected SQLState of the warning
+     */
+    public static void assertWarning( Connection conn, String expected )
+        throws SQLException
+    {
+        SQLWarning  firstWarning = conn.getWarnings();
+        assertNotNull( firstWarning );
+
+        for ( SQLWarning warning = firstWarning; warning != null; warning = warning.getNextWarning() )
+        {
+            if ( expected.equals( warning.getSQLState() ) ) { return; }
+        }
+
+        fail( "Expected to see a SQLWarning with the SQLState " + expected );
+    }
+
+
     /**
      * Assert that SQLState is as expected.
      *
