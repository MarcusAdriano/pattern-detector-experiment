diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
index 76127b36..f2fe573f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
@@ -101,8 +101,6 @@ void rePrepare(LanguageConnectionContext lcc)
 	 *
 	 * @param activation The activation containing all the local state
 	 *		to execute the plan.
-	 * @param executeQuery		Whether or not called from a Statement.executeQuery()
-	 * @param executeUpdate	Whether or not called from a Statement.executeUpdate()
  	 * @param rollbackParentContext True if 1) the statement context is
 	 *  NOT a top-level context, AND 2) in the event of a statement-level
 	 *	 exception, the parent context needs to be rolled back, too.
@@ -116,8 +114,6 @@ void rePrepare(LanguageConnectionContext lcc)
 	 * @exception StandardException		Thrown on failure
 	 */
     ResultSet execute(Activation activation,
-                      boolean executeQuery,
-                      boolean executeUpdate,
                       boolean rollbackParentContext,
                       long timeoutMillis)
         throws StandardException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index bf62d52e..19c4bb68 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -3485,7 +3485,7 @@ public void insertRow() throws SQLException {
                 // Don't see any timeout when inserting rows (use 0)
                 //execute the insert
                 org.apache.derby.iapi.sql.ResultSet rs = 
-                        ps.execute(act, false, true, true, 0L); 
+                        ps.execute(act, true, 0L); 
                 rs.close();
                 rs.finish();
 
@@ -3556,7 +3556,8 @@ public void updateRow() throws SQLException {
                     act.getParameterValueSet().getParameterForSet(paramPosition++).setValue(updateRow.getColumn(i));
             }
             // Don't set any timeout when updating rows (use 0)
-            org.apache.derby.iapi.sql.ResultSet rs = ps.execute(act, false, true, true, 0L); //execute the update where current of sql
+            // Execute the update where current of sql.
+            org.apache.derby.iapi.sql.ResultSet rs = ps.execute(act, true, 0L);
             SQLWarning w = act.getWarnings();
             if (w != null) {
                 addWarning(w);
@@ -3616,7 +3617,7 @@ public void deleteRow() throws SQLException {
                 // Don't set any timeout when deleting rows (use 0)
                 //execute delete where current of sql
                 org.apache.derby.iapi.sql.ResultSet rs = 
-                        ps.execute(act, false, true, true, 0L);
+                        ps.execute(act, true, 0L);
                 SQLWarning w = act.getWarnings();
                 if (w != null) {
                     addWarning(w);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index cbc6931b..762a546e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -1179,14 +1179,20 @@ boolean executeStatement(Activation a,
 				a.setMaxRows(maxRows);
                 long timeoutMillis = (long)timeoutSeconds * 1000L;
                 ResultSet resultsToWrap = ps.execute(a,
-                                                     executeQuery,
-                                                     executeUpdate,
                                                      false,
                                                      timeoutMillis);
 				addWarning(a.getWarnings());
 
 
 				if (resultsToWrap.returnsRows()) {
+
+                    // The statement returns rows, so calling it with
+                    // executeUpdate() is not allowed.
+                    if (executeUpdate) {
+                        throw StandardException.newException(
+                                SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE);
+                    }
+
 					EmbedResultSet lresults = factory.newEmbedResultSet(getEmbedConnection(), resultsToWrap, forMetaData, this, ps.isAtomic());
 					results = lresults;
 
@@ -1217,12 +1223,28 @@ boolean executeStatement(Activation a,
 					resultsToWrap.finish();	// Don't need the result set any more
 					results = null; // note that we have none.
 
-					boolean haveDynamicResults = false;
+                    int dynamicResultCount = 0;
 					if (a.getDynamicResults() != null) {
-						haveDynamicResults = processDynamicResults(a.getDynamicResults(), a.getMaxDynamicResults());
+                        dynamicResultCount =
+                            processDynamicResults(a.getDynamicResults(),
+                                                  a.getMaxDynamicResults());
+					}
+
+                    // executeQuery() is not allowed if the statement
+                    // doesn't return exactly one ResultSet.
+                    if (executeQuery && dynamicResultCount != 1) {
+                        throw StandardException.newException(
+                                SQLState.LANG_INVALID_CALL_TO_EXECUTE_QUERY);
+                    }
+
+                    // executeUpdate() is not allowed if the statement
+                    // returns ResultSets.
+                    if (executeUpdate && dynamicResultCount > 0) {
+                        throw StandardException.newException(
+                                SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE);
 					}
 					
-					if (!haveDynamicResults) {
+                    if (dynamicResultCount == 0) {
 						if (a.isSingleExecution()) {
 							a.close();
 						}
@@ -1240,7 +1262,7 @@ boolean executeStatement(Activation a,
 						}
 					}
 
-					retval = haveDynamicResults;
+                    retval = (dynamicResultCount > 0);
 				}
 	        } catch (Throwable t) {
 				if (a.isSingleExecution()) {
@@ -1446,7 +1468,22 @@ public final void setApplicationStatement(EngineStatement s) {
 
 	private EmbedResultSet[] dynamicResults;
 	private int currentDynamicResultSet;
-	private boolean processDynamicResults(java.sql.ResultSet[][] holder, int maxDynamicResultSets) throws SQLException {
+
+    /**
+     * Go through a holder of dynamic result sets, remove those that
+     * should not be returned, and sort the result sets according to
+     * their creation.
+     *
+     * @param holder a holder of dynamic result sets
+     * @param maxDynamicResultSets the maximum number of result sets
+     * to be returned
+     * @return the actual number of result sets
+     * @exception SQLException if an error occurs
+     */
+    private int processDynamicResults(java.sql.ResultSet[][] holder,
+                                      int maxDynamicResultSets)
+        throws SQLException
+    {
 
 		EmbedResultSet[] sorted = new EmbedResultSet[holder.length];
 
@@ -1505,12 +1542,10 @@ private boolean processDynamicResults(java.sql.ResultSet[][] holder, int maxDyna
 
 			// 0100C is not returned for procedures written in Java, from the SQL2003 spec.
 			// getWarnings(StandardException.newWarning(SQLState.LANG_DYNAMIC_RESULTS_RETURNED));
-
-			return true;
 		}
 
 
-		return false;
+		return actualCount;
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index f6ab99a8..53caf66c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -237,15 +237,13 @@ public ResultSet execute(LanguageConnectionContext lcc,
 	{
 		Activation a = getActivation(lcc, false);
 		a.setSingleExecution();
-		return execute(a, false, false, rollbackParentContext, timeoutMillis);
+		return execute(a, rollbackParentContext, timeoutMillis);
 	}
 
 	/**
 	  *	The guts of execution.
 	  *
 	  *	@param	activation					the activation to run.
-	  * @param	executeQuery				Called via executeQuery
-	  * @param	executeUpdate				Called via executeUpdate
 	  * @param rollbackParentContext True if 1) the statement context is
 	  *  NOT a top-level context, AND 2) in the event of a statement-level
 	  *	 exception, the parent context needs to be rolled back, too.
@@ -256,8 +254,6 @@ public ResultSet execute(LanguageConnectionContext lcc,
 	  */
 
     public ResultSet execute(Activation activation,
-                             boolean executeQuery,
-                             boolean executeUpdate,
                              boolean rollbackParentContext,
                              long timeoutMillis)
         throws
@@ -388,24 +384,6 @@ public ResultSet execute(Activation activation,
 				activation.close();
 			}
 
-
-			/* executeQuery() not allowed on statements
-			 * that return a row count,
-			 * executeUpdate() not allowed on statements
-			 * that return a ResultSet.
-			 * We need to do the test here so that any
-			 * exeception will rollback to the statement
-			 * savepoint.
-			 */
-			if ( (! resultSet.returnsRows()) && executeQuery)
-			{
-				throw StandardException.newException(SQLState.LANG_INVALID_CALL_TO_EXECUTE_QUERY);
-			}
-
-			if ( resultSet.returnsRows() && executeUpdate)
-			{
-				throw StandardException.newException(SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE);
-			}
 			return resultSet;
 			
 		}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
index c02b75b9..c677a679 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
@@ -166,7 +166,7 @@ protected void executeSPS(SPSDescriptor sps) throws StandardException
                 // This is a substatement; for now, we do not set any timeout
                 // for it. We might change this behaviour later, by linking
                 // timeout to its parent statement's timeout settings.
-				ResultSet rs = ps.execute(spsActivation, false, false, false, 0L);
+                ResultSet rs = ps.execute(spsActivation, false, 0L);
                 if( rs.returnsRows())
                 {
                     // Fetch all the data to ensure that functions in the select list or values statement will
