diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java
index 923fd7e6..15defa28 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.shared.common.i18n.MessageUtil;
 import org.apache.derby.shared.common.error.ExceptionUtil;
+import org.apache.derby.shared.common.reference.MessageId;
 import org.apache.derby.shared.common.reference.SQLState;
 
 
@@ -89,10 +90,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public static String CLIENT_MESSAGE_RESOURCE_NAME =
         "org.apache.derby.loc.clientmessages";
     
-    // Constants for message ids used in text we print out -- not used
-    // in SqlExceptions
-    public static final String BATCH_POSITION_ID                = "J107";
-    
     //SQLException factory initialised with default factory
     //It will be over written by the SQLException factory of the 
     //supported jdbc version    
@@ -378,7 +375,7 @@ public SQLException getSQLException()
     // when getMessage() is called.
     // Called by the Agent.
     void setBatchPositionLabel(int index) {
-        batchPositionLabel_ = getMessageUtil().getTextMessage(BATCH_POSITION_ID) + 
+        batchPositionLabel_ = getMessageUtil().getTextMessage(MessageId.BATCH_POSITION_ID) + 
             index + ": ";
     }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Version.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Version.java
index 471e3ba6..0e259a96 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Version.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Version.java
@@ -22,16 +22,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.client.am;
 
 import org.apache.derby.shared.common.i18n.MessageUtil;
+import org.apache.derby.shared.common.reference.MessageId;
 
 
 
 public abstract class Version {
     static MessageUtil msgutil = SqlException.getMessageUtil();
     
-    // Constants for internationalized message ids
-    private static String SECURITY_MANAGER_NO_ACCESS_ID             = "J108";
-    private static String UNKNOWN_HOST_ID                           = "J109";
-    
     // Same as java.sql.DatabaseMetaData.getDriverName()
     public static String getDriverName() {
         return Configuration.dncDriverName;
@@ -152,7 +149,7 @@ private static void printSystemProperty(java.lang.SecurityManager security,
                 printWriter.flush();
             } catch (SecurityException e) {
                 printWriter.println(header + 
-                    msgutil.getTextMessage(SECURITY_MANAGER_NO_ACCESS_ID, property));
+                    msgutil.getTextMessage(MessageId.SECURITY_MANAGER_NO_ACCESS_ID, property));
                 printWriter.flush();
             }
         }
@@ -169,7 +166,7 @@ private static void detectLocalHost(java.lang.SecurityManager security, java.io.
                 printWriter.flush();
             } catch (java.net.UnknownHostException e) {
                 printWriter.println(header + 
-                    msgutil.getTextMessage(UNKNOWN_HOST_ID, e.getMessage()));
+                    msgutil.getTextMessage(MessageId.UNKNOWN_HOST_ID, e.getMessage()));
                 printWriter.flush();
             }
         }
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
index 01bced49..09a66f2f 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
@@ -129,6 +129,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     String CONN_NETWORK_SERVER_SHUTDOWN_EXCEPTION = "J103";
     String CONN_ALREADY_CLOSED                              = "J104";
     String CONN_PRECISION_TOO_LARGE                         = "J105";
+    //  following only used in text we print out - see client.am.SqlException:
+    String BATCH_POSITION_ID                                = "J107";
+    // following two only used in client.am.Version
+    String SECURITY_MANAGER_NO_ACCESS_ID                    = "J108";
+    String UNKNOWN_HOST_ID                                  = "J109";
     String CONN_SECMECH_NOT_SUPPORTED                       = "J110";
     String CONN_PASSWORD_MISSING                            = "J111";
     String CONN_USERID_MISSING                              = "J112";
