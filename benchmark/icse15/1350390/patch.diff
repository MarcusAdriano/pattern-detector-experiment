diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
index 9a89d4f3..4f96642f 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
@@ -19,7 +19,9 @@
 package org.apache.aries.proxy.impl.gen;
 
 import java.io.IOException;
+import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Modifier;
 
 import org.apache.aries.proxy.impl.ProxyUtils;
 import org.objectweb.asm.AnnotationVisitor;
@@ -139,9 +141,21 @@ public void visit(int version, int access, String name, String signature, String
       methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>",
           Type.VOID_TYPE, NO_ARGS));
     }
-    // otherwise invoke the java.lang.Object no args constructor
     else {
+        try {
+            //if the superclass has a no-arg constructor that we can call, we need to call it
+            // otherwise invoke the java.lang.Object no args constructor.  However, that will fail 
+            // on the most recent versions of the JDK (1.6.0_u34 and 1.7.0_u5 and newer).  For the
+            // newer JDK's, there is NOTHING we can do and the proxy will fail.
+            Constructor<?> cons = superclassClass.getDeclaredConstructor();
+            if (!Modifier.isPrivate(cons.getModifiers())) {
+                methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>", Type.VOID_TYPE, NO_ARGS));
+            } else {
       methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
+    }
+        } catch (Exception e) {
+            methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
+        }
     }
     // call from the constructor to setInvocationHandler
     Method setter = new Method("setInvocationHandler", Type.VOID_TYPE, new Type[] { IH_TYPE });
