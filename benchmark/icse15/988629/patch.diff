diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/WildcardTermEnum.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/WildcardTermEnum.java
index 82d60fda..22868a7c 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/WildcardTermEnum.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/WildcardTermEnum.java
@@ -168,7 +168,8 @@ public static final boolean wildcardEquals(String pattern, int patternIdx,
         //
         if (pattern.charAt(p) == WILDCARD_STRING)
         {
-          // Look at the character beyond the '*'.
+          // Look at the character beyond the '*' characters.
+          while (p < pattern.length() && pattern.charAt(p) == WILDCARD_STRING)
           ++p;
           // Examine the string, starting at the last character.
           for (int i = string.length(); i >= s; --i)
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestWildcard.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestWildcard.java
index 0bd184fc..24c3854d 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestWildcard.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestWildcard.java
@@ -199,6 +199,26 @@ public void testAsterisk()
     indexStore.close();
   }
 
+  /**
+   * LUCENE-2620
+   */
+  public void testLotsOfAsterisks()
+      throws IOException {
+    Directory indexStore = getIndexStore("body", new String[]
+    {"metal", "metals"});
+    IndexSearcher searcher = new IndexSearcher(indexStore, true);
+    StringBuilder term = new StringBuilder();
+    term.append("m");
+    for (int i = 0; i < 512; i++)
+      term.append("*");
+    term.append("tal");
+    Query query3 = new WildcardQuery(new Term("body", term.toString()));
+
+    assertMatches(searcher, query3, 1);
+    searcher.close();
+    indexStore.close();
+  }
+  
   /**
    * Tests Wildcard queries with a question mark.
    *
