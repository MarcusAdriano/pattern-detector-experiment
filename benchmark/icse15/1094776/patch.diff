diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step0Job.java b/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step0Job.java
index 2de1651f..6b158647 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step0Job.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step0Job.java
@@ -28,7 +28,6 @@
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.filecache.DistributedCache;
-import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.LongWritable;
@@ -42,8 +41,9 @@
 import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
 import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
 import org.apache.mahout.common.Pair;
-import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
-import org.apache.mahout.df.DFUtils;
+import org.apache.mahout.common.iterator.sequencefile.PathFilters;
+import org.apache.mahout.common.iterator.sequencefile.PathType;
+import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -130,20 +130,18 @@ public Step0Job(Path base, Path dataPath, Path datasetPath) {
     
     log.info("mapred.map.tasks = {}", conf.getInt("mapred.map.tasks", -1));
     
-    FileSystem fs = outputPath.getFileSystem(conf);
-    
-    Path[] outfiles = DFUtils.listOutputFiles(fs, outputPath);
-    
     List<Integer> keys = new ArrayList<Integer>();
     List<Step0Output> values = new ArrayList<Step0Output>();
     
     // read all the outputs
-    for (Path path : outfiles) {
-      for (Pair<IntWritable,Step0Output> record : new SequenceFileIterable<IntWritable,Step0Output>(path, conf)) {
+    for (Pair<IntWritable,Step0Output> record
+         : new SequenceFileDirIterable<IntWritable,Step0Output>(outputPath,
+                                                                PathType.LIST,
+                                                                PathFilters.logsCRCFilter(), 
+                                                                conf)) {
         keys.add(record.getFirst().get());
         values.add(record.getSecond());
       }
-    }
     
     return processOutput(keys, values);
   }
