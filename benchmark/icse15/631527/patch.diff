diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/database/Database.java b/db/derby/code/trunk/java/engine/org/apache/derby/database/Database.java
index 6a03577b..6faf4fef 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/database/Database.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/database/Database.java
@@ -101,32 +101,6 @@ public void backupAndEnableLogArchiveMode(
         throws SQLException;
     
     /**
-     * Start failover for the given database.
-     * 
-     * @param dbname the replication database that is being failed over.
-     *
-     * @exception SQLException   1) If the failover succeeds, an exception is
-     *                              thrown to indicate that the master database
-     *                              was shutdown after a successful failover
-     *                           2) If a failure occurs during network 
-     *                              communication with slave.
-     */
-    public void failover(String dbname) throws SQLException;
-
-    /**
-     * Returns true if this database is in replication slave mode,
-     * false otherwise
-     */
-    public boolean isInSlaveMode();
-
-    /**
-     * Stop the replication slave role for the given database.
-     * 
-     * @exception SQLException Thrown on error
-     */
-    public void stopReplicationSlave() throws SQLException;
-
-	/**
 	 * Disables the log archival process, i.e No old log files
 	 * will be kept around for a roll-forward recovery. Only restore that can 
 	 * be performed after disabling log archive mode is version recovery.
@@ -142,27 +116,6 @@ public void disableLogArchiveMode(boolean deleteOnlineArchivedLogFiles)
 		throws SQLException;
 
     /**
-     * Start the replication master role for this database
-     * @param dbmaster The master database that is being replicated.
-     * @param host The hostname for the slave
-     * @param port The port the slave is listening on
-     * @param replicationMode The type of replication contract.
-     * Currently only asynchronous replication is supported, but
-     * 1-safe/2-safe/very-safe modes may be added later.
-     * @exception SQLException Thrown on error
-     */
-    public void startReplicationMaster(String dbmaster, String host, int port, 
-                                       String replicationMode)
-        throws SQLException;
-    
-    /**
-     * Stop the replication master role for the given database.
-     * 
-     * @exception SQLException Thrown on error
-     */
-    public void stopReplicationMaster() throws SQLException;
-
-	/**
 	  * Freeze the database temporarily so a backup can be taken.
 	  * <P>Please see the Derby documentation on backup and restore.
 	  *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
index 11949843..8171d894 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
@@ -31,6 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.sql.Date;
+import java.sql.SQLException;
 import java.util.Hashtable;
 import java.util.Locale;
 
@@ -127,4 +128,53 @@ public AuthenticationService getAuthenticationService()
      */
     public DataDictionary getDataDictionary();
 
+    /**
+     * Start failover for the given database.
+     * 
+     * @param dbname the replication database that is being failed over.
+     *
+     * @exception SQLException   1) If the failover succeeds, an exception is
+     *                              thrown to indicate that the master database
+     *                              was shutdown after a successful failover
+     *                           2) If a failure occurs during network 
+     *                              communication with slave.
+     */
+    public void failover(String dbname) throws SQLException;
+
+    /**
+     * Used to indicated whether the database is in the replication
+     * slave mode.
+     *
+     * @return true if this database is in replication slave mode,
+     *         false otherwise.
+     */
+    public boolean isInSlaveMode();
+
+    /**
+     * Stop the replication slave role for the given database.
+     * 
+     * @exception SQLException Thrown on error
+     */
+    public void stopReplicationSlave() throws SQLException;
+    
+    /**
+     * Start the replication master role for this database
+     * @param dbmaster The master database that is being replicated.
+     * @param host The hostname for the slave
+     * @param port The port the slave is listening on
+     * @param replicationMode The type of replication contract.
+     * Currently only asynchronous replication is supported, but
+     * 1-safe/2-safe/very-safe modes may be added later.
+     * @exception SQLException Thrown on error
+     */
+    public void startReplicationMaster(String dbmaster, String host, int port, 
+                                       String replicationMode)
+        throws SQLException;
+    
+    /**
+     * Stop the replication master role for the given database.
+     * 
+     * @exception SQLException Thrown on error
+     */
+    public void stopReplicationMaster() throws SQLException;
 }
