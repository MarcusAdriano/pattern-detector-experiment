diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java
index 43f128be..b733112a 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java
@@ -67,7 +67,6 @@ public boolean isIgnored() {
     }
     
     private static Attribute fromString(String from) {
-      
       Attribute toReturn = LABEL;
       if (NUMERICAL.toString().equalsIgnoreCase(from)) {
         toReturn = NUMERICAL;
@@ -238,13 +237,11 @@ public int valueOf(int attr, String token) {
    */
   private static int countAttributes(Attribute[] attrs) {
     int nbattrs = 0;
-
     for (Attribute attr : attrs) {
       if (!attr.isIgnored()) {
         nbattrs++;
       }
     }
-
     return nbattrs;
   }
 
@@ -320,7 +317,6 @@ public int hashCode() {
    * @throws java.io.IOException
    */
   public static Dataset load(Configuration conf, Path path) throws IOException {
-
     FileSystem fs = path.getFileSystem(conf);
     long bytesToRead = fs.getFileStatus(path).getLen();
     byte[] buff = new byte[Long.valueOf(bytesToRead).intValue()];
@@ -340,12 +336,11 @@ public static Dataset load(Configuration conf, Path path) throws IOException {
    * @return some JSON
    */
   public String toJSON() {
-
     List<Map<String, Object>> toWrite = Lists.newLinkedList();
     // attributes does not include ignored columns and it does include the class label
     int ignoredCount = 0;
     for (int i = 0; i < attributes.length + ignored.length; i++) {
-      Map<String, Object> attribute = null;
+      Map<String, Object> attribute;
       int attributesIndex = i - ignoredCount;
       if (ignoredCount < ignored.length && i == ignored[ignoredCount]) {
         // fill in ignored atttribute
@@ -370,10 +365,9 @@ public String toJSON() {
   /**
    * De-serialize an instance from a string
    * @param json From which an instance is created
-   * @return A shinny new Dataset
+   * @return A shiny new Dataset
    */
   public static Dataset fromJSON(String json) {
-
     List<Map<String, Object>> fromJSON;
     try {
       fromJSON = OBJECT_MAPPER.readValue(json, new TypeReference<List<Map<String, Object>>>() {});
@@ -397,7 +391,7 @@ public static Dataset fromJSON(String json) {
         if (attribute.get(VALUES) != null) {
           List<String> get = (List<String>) attribute.get(VALUES);
           String[] array = get.toArray(new String[get.size()]);
-          nominalValues[i] = array;
+          nominalValues[i - ignored.size()] = array;
         }
       }
     }
@@ -413,17 +407,15 @@ public static Dataset fromJSON(String json) {
   /**
    * Generate a map to describe an attribute
    * @param type The type
-   * @param values
-   * @param isLabel
-   * @return 
+   * @param values - values
+   * @param isLabel - is a label
+   * @return map of (AttributeTypes, Values)
    */
   private Map<String, Object> getMap(Attribute type, String[] values, boolean isLabel) {
-
     Map<String, Object> attribute = Maps.newHashMap();
     attribute.put(TYPE, type.toString().toLowerCase(Locale.getDefault()));
     attribute.put(VALUES, values);
     attribute.put(LABEL, isLabel);
     return attribute;
   }
-
 }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/data/DatasetTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/data/DatasetTest.java
index 8f69b208..1a3cfb20 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/data/DatasetTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/data/DatasetTest.java
@@ -16,7 +16,6 @@
  */
 package org.apache.mahout.classifier.df.data;
 
-
 import org.apache.mahout.common.MahoutTestCase;
 import org.junit.Test;
 
@@ -24,7 +23,6 @@
 
   @Test
   public void jsonEncoding() throws DescriptorException {
-
     String json = "["
             + "{\"values\":null,\"label\":false,\"type\":\"numerical\"},"
             + "{\"values\":[\"foo\",\"bar\"],\"label\":false,\"type\":\"categorical\"},"
@@ -42,7 +40,7 @@ public void jsonEncoding() throws DescriptorException {
     assertTrue(to.isNumerical(0));
 
     // from JSON
-    Dataset fromJson = new Dataset().fromJSON(json);
+    Dataset fromJson = Dataset.fromJSON(json);
     assertEquals(3, fromJson.nbAttributes());
     assertEquals(1, fromJson.getIgnored().length);
     assertEquals(2, fromJson.getIgnored()[0]);
@@ -50,6 +48,37 @@ public void jsonEncoding() throws DescriptorException {
     
     // read values for a nominal
     assertEquals(0, fromJson.valueOf(1, "foo"));
+  }
+
+  @Test
+  public void jsonEncodingIgnoreFeatures() throws DescriptorException {
+    String json = "["
+        + "{\"values\":null,\"label\":false,\"type\":\"numerical\"},"
+        + "{\"values\":[\"foo\",\"bar\"],\"label\":false,\"type\":\"categorical\"},"
+        + "{\"values\":null,\"label\":false,\"type\":\"ignored\"},"
+        + "{\"values\":[\"Blue\",\"Red\"],\"label\":true,\"type\":\"categorical\"}"
+        + "]";
+    Dataset to = DataLoader.generateDataset("N C I L", false, new String[]{"1 foo 2 Red", "4 bar 5 Blue"});
 
+    // to JSON
+    assertEquals(json, to.toJSON());
+    assertEquals(3, to.nbAttributes());
+    assertEquals(1, to.getIgnored().length);
+    assertEquals(2, to.getIgnored()[0]);
+    assertEquals(2, to.getLabelId());
+    assertTrue(to.isNumerical(0));
+    assertEquals(0, to.valueOf(1, "foo"));
+    assertEquals(0, to.valueOf(2, "Blue"));
+
+    // from JSON
+    Dataset fromJson = Dataset.fromJSON(json);
+    assertEquals(3, fromJson.nbAttributes());
+    assertEquals(1, fromJson.getIgnored().length);
+    assertEquals(2, fromJson.getIgnored()[0]);
+    assertTrue(fromJson.isNumerical(0));
+
+    // read values for a nominal, one before and one after the ignore feature
+    assertEquals(0, fromJson.valueOf(1, "foo"));
+    assertEquals(0, fromJson.valueOf(2, "Blue"));
   }
 }
