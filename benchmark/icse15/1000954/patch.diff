diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
index 318175ab..adcfa8ea 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java
@@ -246,17 +246,17 @@ public Vector minus(Vector that) {
     private final NonDefaultElement element = new NonDefaultElement();
 
     public boolean hasNext() {
-      return element.getNextOffset() < values.getNumMappings();
+      int numMappings = values.getNumMappings();
+      return numMappings > 0 && element.getNextOffset() < numMappings;
     }
 
     public Element next() {
-      if (element.getNextOffset() >= values.getNumMappings()) {
+      if (!hasNext()) {
         throw new NoSuchElementException();
-      } else {
+      }
         element.advanceOffset();
         return element;
       }
-    }
 
     public void remove() {
       throw new UnsupportedOperationException();
@@ -268,17 +268,17 @@ public void remove() {
     private final AllElement element = new AllElement();
 
     public boolean hasNext() {
-      return element.getNextIndex() < values.getIndices()[values.getNumMappings() - 1];
+      int numMappings = values.getNumMappings();
+      return numMappings > 0 && element.getNextIndex() <= values.getIndices()[numMappings - 1];
     }
 
     public Element next() {
-      if (element.getNextIndex() >= values.getIndices()[values.getNumMappings() - 1]) {
+      if (!hasNext()) {
         throw new NoSuchElementException();
-      } else {
+      }
         element.advanceIndex();
         return element;
       }
-    }
 
     public void remove() {
       throw new UnsupportedOperationException();
@@ -339,6 +339,7 @@ public int index() {
     }
 
     public void set(double value) {
+      lengthSquared = -1;      
       if (index == values.getIndices()[nextOffset]) {
         values.getValues()[nextOffset] = value;
       } else {
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
index 578d7c0b..a44b46cb 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
@@ -33,6 +33,64 @@ public void testSparseVector()  {
     doTestVectors(vec1, vec2);
   }
 
+  @Test
+  public void testSparseVectorFullIteration() {
+    int[] index = {0, 1, 2, 3, 4, 5};
+    double[] values = {1, 2, 3, 4, 5, 6};
+
+    assertEquals(index.length, values.length);
+
+    int n = index.length;
+
+    Vector vector = new SequentialAccessSparseVector(n);
+    for (int i = 0; i < n; i++) {
+      vector.set(index[i], values[i]);
+    }
+
+    for (int i = 0; i < n; i++) {
+      assertEquals(vector.get(i), values[i], EPSILON);
+    }
+
+    int elements = 0;
+    for (Vector.Element e : vector) {
+      elements++;
+    }
+    assertEquals(n, elements);
+
+    Vector empty = new SequentialAccessSparseVector(0);
+    assertFalse(empty.iterator().hasNext());
+  }
+
+  @Test
+  public void testSparseVectorSparseIteration() {
+    int[] index = {0, 1, 2, 3, 4, 5};
+    double[] values = {1, 2, 3, 4, 5, 6};
+
+    assertEquals(index.length, values.length);
+
+    int n = index.length;
+
+    Vector vector = new SequentialAccessSparseVector(n);
+    for (int i = 0; i < n; i++) {
+      vector.set(index[i], values[i]);
+    }
+
+    for (int i = 0; i < n; i++) {
+      assertEquals(vector.get(i), values[i], EPSILON);
+    }
+
+    int elements = 0;
+    Iterator<Vector.Element> it = vector.iterateNonZero();
+    while (it.hasNext()) {
+      it.next();
+      elements++;
+    }
+    assertEquals(n, elements);
+
+    Vector empty = new SequentialAccessSparseVector(0);
+    assertFalse(empty.iterateNonZero().hasNext());
+  }
+
   @Test
   public void testEquivalent()  {
     //names are not used for equivalent
@@ -200,9 +258,9 @@ private static void doTestGetLengthSquared(Vector v) {
     assertEquals("mutation via setQuick() fails to change lengthSquared", expected, v.getLengthSquared(), EPSILON);
 
     Iterator<Vector.Element> it = v.iterator();
-    while(it.hasNext()) {
+    while (it.hasNext()) {
       Vector.Element e = it.next();
-      if(e.index() == v.size() - 2) {
+      if (e.index() == v.size() - 2) {
         e.set(e.get() - 5.0);
       }
     }
