diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetNewServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetNewServerTest.java
index 213f2520..824eb3a9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetNewServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/DerbyNetNewServerTest.java
@@ -31,6 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.drda.NetworkServerControl;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.Derby;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.NetworkServerTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
@@ -52,7 +53,7 @@ public DerbyNetNewServerTest(String name) {
 
     public static Test suite() {
         // Test does not run on J2ME
-        if (JDBC.vmSupportsJDBC3()) {
+        if (JDBC.vmSupportsJDBC3() && Derby.hasServer()) {
             return new TestSuite(DerbyNetNewServerTest.class);
         } else {
             return new TestSuite("DerbyNetNewServerTest.empty");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
index 93d3d1dc..b546545f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
@@ -353,17 +353,9 @@ public void testSecurityMechanismOnEmbedded() throws SQLException {
     private boolean setSecurityMechanism(String derby_security_mechanism) 
     throws Exception {
         try {
-            // getting a networkservercontrol to shutdown the currently running
+            // shut down the currently running
             // server, before setting the next security mechanism
-            final TestConfiguration config = TestConfiguration.getCurrent();
-            NetworkServerControl server = new NetworkServerControl(
-                InetAddress.getByName(config.getHostName()),
-                config.getPort(),
-                config.getUserName(),
-                config.getUserPassword());
-
-            // shut down the server
-            server.shutdown();
+            NetworkServerTestSetup.getNetworkServerControl().shutdown();
         } catch (Exception e) {
             if (!(e.getMessage().substring(0,17).equals("DRDA_InvalidValue")))
             {
@@ -381,16 +373,12 @@ private boolean setSecurityMechanism(String derby_security_mechanism)
             
             // if the security mechanism isn't supported or invalid, getting a
             // networkservercontrol will fail.
-            NetworkServerControl server2 = new NetworkServerControl(
-                InetAddress.getByName(
-                    TestConfiguration.getCurrent().getHostName()),
-                    TestConfiguration.getCurrent().getPort());
-
-            // For debugging, to make output come to console uncomment:
-            //server2.start(new PrintWriter(System.out, true));
-            // and comment out:
-            server2.start(null);
-            NetworkServerTestSetup.waitForServerStart(server2);
+
+            // For debugging, to make output come to console call start() with
+            // new PrintWriter(System.out, true) instead of null.
+            NetworkServerTestSetup.getNetworkServerControl().start(null);
+            NetworkServerTestSetup.waitForServerStart(
+                    NetworkServerTestSetup.getNetworkServerControl());
             
             if (derby_drda_securityMechanism.equals("") ||
                 derby_drda_securityMechanism.equals("INVALID_VALUE"))
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java
index 13932bf0..ceaaf6f6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java
@@ -53,6 +53,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.NetworkServerTestSetup;
 import org.apache.derbyTesting.junit.SupportFilesSetup;
 import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
+import org.apache.derbyTesting.junit.*;
 
 /**
  * Tests related to use of restrictive file permissions (DERBY-5363).
@@ -132,7 +133,7 @@ public static Test suite() throws Exception {
 
         // For server started from command line, we should still get secure
         // permissions.
-
+        if (Derby.hasServer()) {
         totalSuite.addTest(
             new NetworkServerTestSetup(
                 new RestrictiveFilePermissionsTest(
@@ -140,6 +141,7 @@ public static Test suite() throws Exception {
                 new String[]{}, // system properties
                 new String[]{}, // non-default start up arguments
                 true));
+        }
 
         // For server started from API, we should see lax permissions.
         //
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
index 83ded66f..2b1e8355 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 
 import junit.framework.Test; 
 import junit.framework.TestSuite;
+import org.apache.derbyTesting.junit.Derby;
 import org.apache.derbyTesting.junit.JDBC;
 
 /**
@@ -49,8 +50,9 @@ public static Test suite() throws SQLException {
 
         // The tests require both DriverManager and ClientDataSource. None
         // of those classes are available in JSR-169, so only run the test
-        // on platforms that support JDBC3 and higher.
-        if (JDBC.vmSupportsJDBC3()) {
+        // on platforms that support JDBC3 and higher. The tests also require
+        // a network server.
+        if (JDBC.vmSupportsJDBC3() && Derby.hasServer()) {
 
             suite.addTest(ReplicationRun_Local.suite());
             suite.addTest(ReplicationRun_Local.localAuthenticationSuite());
