diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
index 8ee287fd..a5504f57 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
@@ -515,7 +515,7 @@ The offset from the base format number (0 based) gives the offset in the array.
         /* 451 */   "org.apache.derby.catalog.types.RoutineAliasInfo",
 		/* 452 */   null,
 		/* 453 */   "org.apache.derby.impl.store.raw.log.ChecksumOperation",
-		/* 454 */   "org.apache.derby.impl.store.raw.data.CompressSpacePageOperation",
+		/* 454 */   "org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2",
 		/* 455 */   "org.apache.derby.catalog.types.SynonymAliasInfo",
         /* 456 */   "org.apache.derby.iapi.types.DTSClassInfo", //InstanceGetter, XML_TYPE_ID
         /* 457 */   "org.apache.derby.catalog.types.TypesImplInstanceGetter", // XML_TYPE_ID_IMPL
@@ -526,5 +526,6 @@ The offset from the base format number (0 based) gives the offset in the array.
         /* 462 */   "org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo",
         /* 463 */   "org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo",
         /* 464 */   "org.apache.derby.iapi.types.SqlXmlUtil",        
+	/* 465 */   "org.apache.derby.impl.store.raw.data.CompressSpacePageOperation",
 };
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
index bb216caf..60a90bd8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
@@ -1728,9 +1728,13 @@ and another may restore (read) the object. The implication of this
         public static final int LOGOP_CHECKSUM =
                 (MIN_ID_2 + 453);
 
+		/* org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2 */
+        public static final int LOGOP_COMPRESS10_2_SPACE =
+                (MIN_ID_2 + 454);
+
 		/* org.apache.derby.impl.store.raw.data.CompressSpacePageOperation */
         public static final int LOGOP_COMPRESS_SPACE =
-                (MIN_ID_2 + 454);
+                (MIN_ID_2 + 465);
 
    		/* org.apache.derby.impl.store.raw.data.EncryptContainerOperation */
         public static final int LOGOP_ENCRYPT_CONTAINER =
@@ -1859,7 +1863,7 @@ and another may restore (read) the object. The implication of this
          * Make sure this is updated when a new module is added
          */
         public static final int MAX_ID_2 =
-                (MIN_ID_2 + 464);
+                (MIN_ID_2 + 465);
 
         // DO NOT USE 4 BYTE IDS ANYMORE
         static public final int MAX_ID_4 =
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
index a8a0e971..2aa6699d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
@@ -105,6 +105,9 @@ and the log factory hands out logger (or log buffers) for transactions to
     /** Derby Store Minor Version (2) **/
 	public static final int DERBY_STORE_MINOR_VERSION_2    = 2;
 
+	/** Derby Store Minor Version (3) **/
+	public static final int DERBY_STORE_MINOR_VERSION_3    = 3;
+
 	/** Derby 10 Store Major version */
 	public static final int DERBY_STORE_MAJOR_VERSION_10   = 10;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
index 759f304a..59e389d8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.raw.Transaction;
 import org.apache.derby.iapi.store.raw.GlobalTransactionId;
 import org.apache.derby.iapi.store.raw.log.LogInstant;
+import org.apache.derby.iapi.store.raw.log.LogFactory;
 import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
 import org.apache.derby.iapi.error.StandardException;
 
@@ -84,6 +85,11 @@ to the update() method of the Observer's will be one of
 	*/
 	public abstract DataFactory getDataFactory();
 
+	/**
+		Get the log factory to be used during this transaction.
+	*/
+	public abstract LogFactory getLogFactory();
+
 	/**
 		Get cache statistics for the specified cache
 	*/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
index 721734e7..7f76768a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
@@ -909,7 +909,9 @@ protected void compressSpace(
         {
 			SanityManager.ASSERT(isLatched(), "page is not latched");
             SanityManager.ASSERT(isLast(), "compress on non last alloc page.");
-            SanityManager.ASSERT(new_highest_page >= 0, "negative new high page.");
+	    //Derby-606. newHighestPage = -1, is a valid case as it means that 
+	    //all the pages in this extent can be compressed.
+            SanityManager.ASSERT(new_highest_page >= -1, "negative new high page.");
         }
 
 		logAction(instant);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java
index f8b688e5..73d2aa38 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java
@@ -50,7 +50,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 **/
 
-public final class CompressSpacePageOperation extends PhysicalPageOperation
+public class CompressSpacePageOperation extends PhysicalPageOperation
 {
     /**************************************************************************
      * Fields of the class
@@ -100,9 +100,12 @@ public CompressSpacePageOperation(
 	public void writeExternal(ObjectOutput out) throws IOException 
 	{
 		super.writeExternal(out);
-		CompressedNumber.writeInt(out, newHighestPage);
+		if( !(this instanceof CompressSpacePageOperation10_2) )
+		{
+			out.writeInt(newHighestPage);
 		CompressedNumber.writeInt(out, num_pages_truncated);
 	}
+	}
 
 	/**
 		@exception IOException error reading from log stream
@@ -112,9 +115,12 @@ public void readExternal(ObjectInput in)
 		 throws IOException, ClassNotFoundException
 	{
 		super.readExternal(in);
-		newHighestPage      = CompressedNumber.readInt(in);
+		if( !(this instanceof CompressSpacePageOperation10_2) )
+		{
+			newHighestPage      = in.readInt();
 		num_pages_truncated = CompressedNumber.readInt(in);
 	}
+	}
 
 	/**
 		Return my format identifier.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java
index e69de29b..7e8c9287 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java
@@ -0,0 +1,94 @@
+/*
+
+   Derby - Class org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.impl.store.raw.data;
+
+import org.apache.derby.impl.store.raw.data.CompressSpacePageOperation;
+import org.apache.derby.impl.store.raw.data.BasePage;
+
+import org.apache.derby.iapi.services.io.FormatIdUtil;
+import org.apache.derby.iapi.services.io.StoredFormatIds;
+
+import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.services.io.CompressedNumber;
+
+import java.io.OutputStream;
+import java.io.ObjectOutput;
+import java.io.IOException;
+import java.io.ObjectInput;
+import org.apache.derby.iapi.services.sanity.SanityManager;
+
+/**
+ * This class overrides the CompressSpacePageOperation class to write
+ * CompressSpaceOperation Log Records that do not support negative values
+ * for new_highest_page. No other changes are added to the superclass behavior.
+ * This class ensures backword compatibility for Soft upgrades. 
+ */
+public final class CompressSpacePageOperation10_2 extends CompressSpacePageOperation {
+    
+	/**************************************************************************
+	* Constructors for This class:
+	**************************************************************************
+	*/
+	public CompressSpacePageOperation10_2(
+		AllocPage   allocPage, 
+		int         highest_page, 
+		int         num_truncated)
+			throws StandardException
+	{
+		super(allocPage, highest_page, num_truncated);
+	}
+
+	// no-arg constructor, required by Formatable 
+	public CompressSpacePageOperation10_2() { super(); }
+
+	/**************************************************************************
+	* Public Methods of Formatable interface.
+	**************************************************************************
+	*/
+
+	public void writeExternal(ObjectOutput out) throws IOException 
+	{
+		super.writeExternal(out);
+		CompressedNumber.writeInt(out, newHighestPage);
+		CompressedNumber.writeInt(out, num_pages_truncated);
+	}
+
+	/**
+		@exception IOException error reading from log stream
+		@exception ClassNotFoundException cannot read object from input
+	*/
+	public void readExternal(ObjectInput in)
+		 throws IOException, ClassNotFoundException
+	{
+		super.readExternal(in);
+		newHighestPage      = CompressedNumber.readInt(in);
+		num_pages_truncated = CompressedNumber.readInt(in);
+	}
+
+	/**
+		Return my format identifier.
+	*/
+	public int getTypeFormatId() {
+		return StoredFormatIds.LOGOP_COMPRESS10_2_SPACE;
+	}
+
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java
index 30ef7da4..00c88ffd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.impl.store.raw.data.AllocationActions;
 import org.apache.derby.impl.store.raw.data.BasePage;
 
+import org.apache.derby.iapi.store.raw.RawStoreFactory;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.io.FormatIdUtil;
 
@@ -119,9 +120,22 @@ public void actionCompressSpaceOperation(
     int             num_pages_truncated)
         throws StandardException
     {
-		Loggable lop = 
-            new CompressSpacePageOperation(
+	Loggable lop = null;
+	
+	// Derby-606. As part of the fix for Derby-606, negative values can be written to
+	// CompressSpace operation Log Records. In order for this fix to be backword 
+	// compatible, we make sure that the implementation behaves the old way in soft
+	// upgrade mode, here. This is achieved by passing null to feature argument.
+	if( t.getLogFactory().checkVersion(RawStoreFactory.DERBY_STORE_MAJOR_VERSION_10,
+					RawStoreFactory.DERBY_STORE_MINOR_VERSION_3,
+					null) )
+	{
+		lop = new CompressSpacePageOperation(
                 (AllocPage)allocPage, new_highest_page, num_pages_truncated);
+	} else {
+		lop = new CompressSpacePageOperation10_2(
+				(AllocPage)allocPage, new_highest_page, num_pages_truncated);
+	}
         allocPage.preDirty();
 
         t.logAndDo(lop);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
index 888879e3..bd2be7af 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
@@ -310,6 +310,15 @@ public final DataFactory getDataFactory() {
 		return dataFactory;
 	}
 
+	/**
+	 * JIRA-606. As a part of this fix, it was required that
+	 * LogFactory.checkVersion method to be exposed for any possible Version 
+	 * checks in the Transaction processing module.  
+	 */
+	public final LogFactory getLogFactory() {
+		return logFactory;
+	}
+
 	/**
 		Get cache statistics for the specified cache
 	*/
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java
index 3945fd0a..8fcaf8cb 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java
@@ -169,6 +169,147 @@ protected void createAndLoadTable(
         conn.commit();
     }
 
+    /**
+     * Create and load a table with large columns.
+     * <p>
+     * If create_table is set creates a test data table with indexes.
+     * Loads num_rows into the table.  This table defaults to 32k page size.
+     * <p>
+     *
+     *
+     * @param conn          Connection to use for sql execution.
+     * @param create_table  If true, create new table - otherwise load into
+     *                      existing table.
+     * @param tblname       table to use.
+     * @param num_rows      number of rows to add to the table.
+     * @param start_value   Starting number from which num_rows are inserted
+     * @exception  StandardException  Standard exception policy.
+     **/
+    protected void createAndLoadLargeTable(
+    Connection  conn,
+    boolean     create_table,
+    String      tblname,
+    int         num_rows,
+    int         start_value)
+        throws SQLException
+    {
+        if (create_table)
+        {
+            Statement s = conn.createStatement();
+
+	    // Derby-606. Note that this table is currently only used by Test6.
+	    // Test6 needs data be to spread over 2 AllocExtents
+	    // and this table schema is chosen so that the required scenario
+	    // is exposed in minimum test execution time.
+            s.execute(
+                "create table " + tblname + 
+                    "(keycol int, indcol1 int, indcol2 int, data1 char(24), data2 char(24), data3 char(24)," +
+			    "data4 char(24), data5 char(24), data6 char(24), data7 char(24), data8 char(24)," + 
+			    "data9 char(24), data10 char(24), inddec1 decimal(8), indcol3 int, indcol4 int, data11 varchar(50))");
+            s.close();
+        }
+
+        PreparedStatement insert_stmt = 
+            conn.prepareStatement(
+                "insert into " + tblname + " values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
+
+        char[]  data1_data = new char[24];
+        char[]  data2_data = new char[24];
+        char[]  data3_data = new char[24];
+        char[]  data4_data = new char[24];
+        char[]  data5_data = new char[24];
+        char[]  data6_data = new char[24];
+        char[]  data7_data = new char[24];
+        char[]  data8_data = new char[24];
+        char[]  data9_data = new char[24];
+        char[]  data10_data = new char[24];
+        char[]  data11_data = new char[50];
+
+        for (int i = 0; i < data1_data.length; i++) 
+	{
+            data1_data[i] = 'a';
+            data2_data[i] = 'b';
+            data3_data[i] = 'c';
+            data4_data[i] = 'd';
+            data5_data[i] = 'e';
+            data6_data[i] = 'f';
+            data7_data[i] = 'g';
+            data8_data[i] = 'h';
+            data9_data[i] = 'i';
+            data10_data[i] = 'j';
+	}
+	for( int i=0; i < data11_data.length; i++) 
+	{
+	    data11_data[i] = 'z';
+        }
+
+        String  data1_str = new String(data1_data);
+        String  data2_str = new String(data2_data);
+        String  data3_str = new String(data3_data);
+        String  data4_str = new String(data4_data);
+        String  data5_str = new String(data5_data);
+        String  data6_str = new String(data6_data);
+        String  data7_str = new String(data7_data);
+        String  data8_str = new String(data8_data);
+        String  data9_str = new String(data9_data);
+        String  data10_str = new String(data10_data);
+        String  data11_str = new String(data11_data);
+
+        int row_count = 0;
+        try
+        {
+            for (int i = start_value; row_count < num_rows; row_count++, i++)
+            {
+                insert_stmt.setInt(1, i);               // keycol
+                insert_stmt.setInt(2, i * 10);          // indcol1
+                insert_stmt.setInt(3, i * 100);         // indcol2
+                insert_stmt.setString(4, data1_str);    // data1_data
+                insert_stmt.setString(5, data2_str);    // data2_data
+                insert_stmt.setString(6, data3_str);    // data3_data
+                insert_stmt.setString(7, data4_str);    // data4_data
+                insert_stmt.setString(8, data5_str);    // data5_data
+                insert_stmt.setString(9, data6_str);    // data6_data
+                insert_stmt.setString(10, data7_str);    // data7_data
+                insert_stmt.setString(11, data8_str);    // data8_data
+                insert_stmt.setString(12, data9_str);    // data9_data
+                insert_stmt.setString(13, data10_str);    // data10_data
+                insert_stmt.setInt(14, i * 20);          // indcol3
+                insert_stmt.setInt(15, i * 200);         // indcol4
+		insert_stmt.setInt(16, i * 50);
+                insert_stmt.setString(17, data11_str);    // data11_data
+
+                insert_stmt.execute();
+            }
+        }
+        catch (SQLException sqle)
+        {
+            System.out.println(
+                "Exception while trying to insert row number: " + row_count);
+            throw sqle;
+        }
+
+        if (create_table)
+        {
+            Statement s = conn.createStatement();
+
+            s.execute(
+                "create index " + tblname + "_idx_keycol on " + tblname +
+                    "(keycol)");
+            s.execute(
+                "create index " + tblname + "_idx_indcol1 on " + tblname +
+                    "(indcol1)");
+            s.execute(
+                "create index " + tblname + "_idx_indcol2 on " + tblname +
+                    "(indcol2)");
+            s.execute(
+                "create unique index " + tblname + "_idx_indcol3 on " + tblname +
+                    "(indcol3)");
+            s.close();
+        }
+
+        conn.commit();
+    }
+
     /**
      * Create and load a table with long columns and long rows.
      * <p>
@@ -1219,6 +1360,82 @@ private void test5(
         endTest(conn, test_name);
     }
 
+    /**
+     * Test 6 - Online compress test for table that spans more than 1 AllocExtent.
+     * <p>
+     * Create dataset with Data spread over more than 1 AllcExtent and then:
+     * delete enough rows so that the last AllocExtent is empty.
+     * Try OnlineCompress with Purge, Defragment and Truncate
+     * <p>
+     * run test with at least 103000 rows.
+     *
+     **/
+    private void test6(
+    Connection  conn,
+    String      test_name,
+    String      table_name)
+        throws SQLException 
+    {
+        beginTest(conn, test_name);
+
+        int[] noRows = {104000};
+
+        for (int i = 0; i < noRows.length; i++)
+        {
+            // first create new table and run the tests.
+            createAndLoadLargeTable(conn, true, table_name, noRows[i], 0);
+
+        if (verbose)
+            testProgress("Calling compress.");
+
+        // compress with no deletes should not affect size
+        int[] ret_before = getSpaceInfo(conn, "APP", table_name, true);
+        callCompress(conn, "APP", table_name, true, true, true, true);
+        int[] ret_after  = getSpaceInfo(conn, "APP", table_name, true);
+
+        if (ret_after[SPACE_INFO_NUM_ALLOC] != ret_before[SPACE_INFO_NUM_ALLOC])
+        {
+            log_wrong_count(
+                "Expected no alloc page change.", 
+                table_name, noRows[i], 
+                ret_before[SPACE_INFO_NUM_ALLOC], 
+                ret_after[SPACE_INFO_NUM_ALLOC],
+                ret_before, ret_after);
+        }
+
+        testProgress("no delete case complete.");
+
+        // delete all the rows.
+        ret_before = getSpaceInfo(conn, "APP", table_name, true);
+        executeQuery(conn, "delete from " + table_name, true);
+	conn.commit();
+
+        if (verbose)
+            testProgress("deleted all rows, now calling compress.");
+
+        callCompress(conn, "APP", table_name, true, true, true, true);
+        ret_after  = getSpaceInfo(conn, "APP", table_name, true);
+
+        // An empty table has 2 pages, one allocation page and the 1st page
+        // which will have a system row in it.  The space vti only reports
+        // a count of the user pages so the count is 1.
+        if (ret_after[SPACE_INFO_NUM_ALLOC] != 1)
+        {
+            log_wrong_count(
+                "Expected all pages to be truncated.",
+                table_name, noRows[i], 1, ret_after[SPACE_INFO_NUM_ALLOC],
+                ret_before, ret_after);
+        }
+
+        testProgress("delete all rows case succeeded.");
+
+        testProgress("end simple deleteAllRows," + noRows[i] + " row test.");
+
+            executeQuery(conn, "drop table " + table_name, true);
+        }
+
+        endTest(conn, test_name);
+    }
 
 
     public void testList(Connection conn)
@@ -1229,6 +1446,7 @@ public void testList(Connection conn)
         test3(conn, "test3", "TEST3");
         // test4(conn, "test4", "TEST4");
         test5(conn, "test5", "TEST5");
+	test6(conn, "test6", "TEST6");
     }
 
     public static void main(String[] argv) 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java
index 42d9af9a..ce3d7e84 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java
@@ -78,7 +78,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     <LI> Grant/Revoke tests
     </UL>
 	
+    <BR>
+	10.3 Upgrade tests
 	
+	<UL>
+	<LI> Log Record Format change to support negative value (DERBY-606)
+	</UL>
 	
  */
 public class UpgradeTester {
@@ -369,6 +374,7 @@ private void runPhase(int version, int phase)
 			passed = caseCompilationSchema(phase, conn) && passed;
             passed = caseGrantRevoke(conn, phase, classLoader, false) && passed;
             // Test grant/revoke feature with sql authorization
+			passed = caseNegValueSupportedLogRecord(conn, phase) && passed;
             if(phase == PH_HARD_UPGRADE) {
             	setSQLAuthorization(conn, true);
             	conn = restartDatabase(classLoader);
@@ -1002,6 +1008,120 @@ private boolean checkGrantRevokeException(SQLException sqle, int phase,
     	return passed;
     }
     
+    /**
+	 * In 10.3: We will write a LogRecord with a different format 
+	 * that can also write negative values.
+	 * 
+	 * Verify here that a 10.2 Database does not malfunction from this and
+	 * 10.2 Databases will work with the old LogRecord format.
+	 */
+	private boolean caseNegValueSupportedLogRecord(Connection conn, int phase)
+		throws SQLException
+	{
+		boolean passed;
+		switch(phase) {
+		case PH_CREATE: {
+			// This case is derived from OnlineCompressTest.test6.
+			passed = false;
+			Statement s = conn.createStatement();
+			s.execute("create table case606(keycol int, indcol1 int,"+
+			    "indcol2 int, data1 char(24), data2 char(24), data3 char(24)," +
+			    "data4 char(24), data5 char(24), data6 char(24),"+
+			    "data7 char(24), data8 char(24), data9 char(24)," + 
+			    "data10 char(24), inddec1 decimal(8), indcol3 int,"+
+			    "indcol4 int, data11 varchar(50))");
+			passed = true;
+			break;
+		}
+		case PH_SOFT_UPGRADE:
+			passed = false;
+			// Ensure that the old Log Record format is written
+			// by Newer release without throwing any exceptions.
+			checkDataToCase606(conn, 0, 2000);
+			passed = true;
+			break;
+		case PH_POST_SOFT_UPGRADE: {
+			// We are now back to Old release
+			passed = false;
+			checkDataToCase606(conn, 0, 1000);
+			passed = true;
+			break;
+		}
+		case PH_HARD_UPGRADE:
+			// Create the Derby606 bug scenario and test that
+			// the error does not occur in Hard Upgrade
+			checkDataToCase606(conn, 0, 94000);
+			// passed If no exception thrown.
+			passed = true;
+			break;
+		default:
+			passed = false;
+			break;
+		}
+		System.out.println("complete caseNegValueSupportedLogRecord - passed " + passed);
+		return passed;
+	}
+
+	private void checkDataToCase606(Connection conn, int start_value, int end_value)
+		throws SQLException {
+		Statement s = conn.createStatement();
+		PreparedStatement insert_stmt = conn.prepareStatement(
+			"insert into case606 values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
+		char[] data_dt = new char[24];
+		char[] data_dt2 = new char[50];
+		for( int i=0; i < data_dt.length; i++)
+			data_dt[i] = 'a';
+		for( int i=0; i < data_dt2.length; i++)
+			data_dt2[i] = 'z';
+		String data1_str = new String(data_dt);
+		String data2_str = new String(data_dt2);
+		try
+		{
+		    for (int i = start_value; i < end_value; i++)
+		    {
+			insert_stmt.setInt(1, i);               // keycol
+			insert_stmt.setInt(2, i * 10);          // indcol1
+			insert_stmt.setInt(3, i * 100);         // indcol2
+			insert_stmt.setString(4, data1_str);    // data1_data
+			insert_stmt.setString(5, data1_str);    // data2_data
+			insert_stmt.setString(6, data1_str);    // data3_data
+			insert_stmt.setString(7, data1_str);    // data4_data
+			insert_stmt.setString(8, data1_str);    // data5_data
+			insert_stmt.setString(9, data1_str);    // data6_data
+			insert_stmt.setString(10, data1_str);    // data7_data
+			insert_stmt.setString(11, data1_str);    // data8_data
+			insert_stmt.setString(12, data1_str);    // data9_data
+			insert_stmt.setString(13, data1_str);    // data10_data
+			insert_stmt.setInt(14, i * 20);          // indcol3
+			insert_stmt.setInt(15, i * 200);         // indcol4
+			insert_stmt.setInt(16, i * 50);
+			insert_stmt.setString(17, data2_str);    // data11_data
+
+			insert_stmt.execute();
+		    }
+		    conn.commit();
+
+		    s.execute("delete from case606 where case606.keycol > 10000");
+		    conn.commit();
+		}
+		catch (SQLException sqle)
+		{
+		    System.out.println(
+			"Exception while trying to update the database!");
+		    throw sqle;
+		}
+
+		try {
+			s.execute("call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('APP','CASE606',1,1,1)");
+			conn.commit();
+		}
+		catch (SQLException sqle)
+		{
+			System.out.println("Exception while CompressSpace Operation!");
+			throw sqle;
+		}
+	}
+   
     /**
      * Set derby.database.sqlAuthorization as a database property.
      * 
