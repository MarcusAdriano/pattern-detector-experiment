diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
index a85db047..5d7945a5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
@@ -39,9 +39,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
+import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.logging.Logger;
@@ -94,8 +95,26 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private static boolean deregister = true;
 
+    /**
+     * <p>
+     * An executor service used for executing connection attempts when a
+     * login timeout has been specified.
+     * </p>
+     *
+     * <p>
+     * DERBY-6107: Core pool size and keep alive timeout should be zero so
+     * that no threads are cached. By creating a fresh thread each time a
+     * task is submitted, we make sure that the task will run in a thread
+     * with the same context class loader as the thread that submitted the
+     * task. This is important for example when connecting to a database
+     * using the classpath subsubprotocol, and the database lives in the
+     * context class loader. If threads are cached, a task may execute in
+     * a thread that has a different context class loader.
+     * </p>
+     */
     private static final ExecutorService _executorPool =
-            Executors.newCachedThreadPool(new DaemonThreadFactory());
+            new ThreadPoolExecutor(0, Integer.MAX_VALUE, 0L, TimeUnit.SECONDS,
+                new SynchronousQueue<Runnable>(), new DaemonThreadFactory());
 
 	public static final InternalDriver activeDriver()
 	{
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index 60629d9c..b59480b7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -50,6 +50,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.JDBCDataSource;
+import org.apache.derbyTesting.junit.LoginTimeoutTestSetup;
 import org.apache.derbyTesting.junit.SupportFilesSetup;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 
@@ -132,6 +133,9 @@ public static Test suite() throws Exception
            suite.addTest(SecurityManagerSetup.noSecurityManager(
                    new DatabaseClassLoadingTest("testClassLoadOrdering")));
            
+           // Add test cases accessing a classpath database when a login
+           // timeout has been specified.
+           suite.addTest(loginTimeoutSuite());
 
            test = new SupportFilesSetup(suite,
                    new String[] {
@@ -186,6 +190,45 @@ protected void decorateSQL(Statement s) throws SQLException
         };
     }
     
+    /**
+     * Create a test suite that verifies the fix for DERBY-6107. Connection
+     * attempts used to fail when trying to access a classpath database that
+     * lived in the context class loader, if a login timeout was used and a
+     * previous connection attempt had been made from a thread that did not
+     * have the database in its context class loader.
+     */
+    private static Test loginTimeoutSuite() throws Exception {
+        TestSuite suite = new TestSuite("Class loading with login timeout");
+
+        // First run a test when the database is not in the classpath.
+        // Expect the connection attempt to fail.
+        suite.addTest(
+            new DatabaseClassLoadingTest("testLoginTimeoutNotInClasspath"));
+
+        // Then try again with the database in the classpath. Should succeed.
+        // Failed before DERBY-6107.
+        //
+        // Only add this test case if we can close the URLClassLoader when
+        // we're done. Otherwise, we won't be able to delete the jar file
+        // afterwards. (DERBY-2162)
+        if (ClasspathSetup.supportsClose()) {
+            suite.addTest(
+                new ClasspathSetup(
+                    new DatabaseClassLoadingTest("testLoginTimeoutInClasspath"),
+                    SupportFilesSetup.getReadOnlyURL("dclt.jar")));
+        }
+
+        // Finally, check that the database cannot be found anymore after
+        // it has been removed from the classpath.
+        suite.addTest(
+            new DatabaseClassLoadingTest("testLoginTimeoutNotInClasspath"));
+
+        // All of this should be done with a login timeout. Set the timeout
+        // to a high value, so that the connection attempts don't actually
+        // time out.
+        return new LoginTimeoutTestSetup(suite, 100);
+    }
+
     /**
      * Test the routines fail before the jars that contain their
      * code have been installed and/or set in the classpath.
@@ -1188,7 +1231,56 @@ public void test_5352() throws SQLException, MalformedURLException
         s.close();
     }
     
+    /**
+     * Test that a classpath database is not found when it's not in the
+     * classpath and there is a login timeout.
+     * @see #loginTimeoutSuite()
+     */
+    public void testLoginTimeoutNotInClasspath() throws SQLException {
+        checkConnectionToClasspathDB(false);
+    }
             
+    /**
+     * Test that a classpath database is found when it's in the
+     * classpath and there is a login timeout.
+     * @see #loginTimeoutSuite()
+     */
+    public void testLoginTimeoutInClasspath() throws SQLException {
+        checkConnectionToClasspathDB(true);
+    }
+
+    /**
+     * Check if it is possible to connect to a classpath database.
+     *
+     * @param databaseInClasspath if {@code true}, expect that the database
+     * can be connected to; otherwise, expect that the database cannot be
+     * found.
+     */
+    private void checkConnectionToClasspathDB(boolean databaseInClasspath) {
+        String dbName = "classpath:dbro";
+        DataSource ds = JDBCDataSource.getDataSource(dbName);
+        try {
+            ds.getConnection().close();
+            // We should only be able to get a connection if the database is
+            // in the classpath.
+            assertTrue(
+                "Could connect to database when it was not in the classpath",
+                databaseInClasspath);
+        } catch (SQLException sqle) {
+            // If the database is not in the classpath, we expect
+            // ERROR XJ004: Database 'classpath:dbro' not found.
+            if (databaseInClasspath) {
+                fail("Could not connect to the database", sqle);
+            } else {
+                assertSQLState("XJ004", sqle);
+            }
+        }
+
+        // If we managed to boot the database, shut it down again.
+        if (databaseInClasspath) {
+            JDBCDataSource.shutdownDatabase(ds);
+        }
+    }
   
     private void installJar(String resource, String jarName) throws SQLException, MalformedURLException
     {        
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/LoginTimeoutTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/LoginTimeoutTestSetup.java
index e69de29b..a6afcc6b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/LoginTimeoutTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/LoginTimeoutTestSetup.java
@@ -0,0 +1,57 @@
+/*
+ * Derby - Class org.apache.derbyTesting.junit.LoginTimeoutTestSetup
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ */
+
+package org.apache.derbyTesting.junit;
+
+import junit.framework.Test;
+
+/**
+ * A decorator that changes the login timeout for the current configuration
+ * and resets it afterwards.
+ */
+public class LoginTimeoutTestSetup extends BaseJDBCTestSetup {
+
+    private int originalLoginTimeout;
+    private final int newLoginTimeout;
+
+    /**
+     * Create a decorator that makes {@code test} run with a login timeout.
+     *
+     * @param test the test to decorate
+     * @param timeout the login timeout in seconds
+     */
+    public LoginTimeoutTestSetup(Test test, int timeout) {
+        super(test);
+        newLoginTimeout = timeout;
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        TestConfiguration config = getTestConfiguration();
+        originalLoginTimeout = config.getLoginTimeout();
+        config.setLoginTimeout(newLoginTimeout);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        getTestConfiguration().setLoginTimeout(originalLoginTimeout);
+        super.tearDown();
+    }
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 1f83c9c4..9a42f63a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -1824,6 +1824,15 @@ public  int getLoginTimeout() throws SQLException
         return connector.getLoginTimeout();
     }
 
+    /**
+     * Set the login timeout for the connector.
+     * @param seconds the login timeout in seconds
+     * @throws SQLException if the timeout cannot be set
+     */
+    public void setLoginTimeout(int seconds) throws SQLException {
+        connector.setLoginTimeout(seconds);
+    }
+
     public void waitForShutdownComplete(String physicalDatabaseName) {
         String path = getDatabasePath(physicalDatabaseName);
         boolean lockfilepresent = true;
