diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
index d8d69bcc..5f41c200 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
@@ -158,6 +158,7 @@ public boolean isAlive(EndPoint ep)
     
     public void report(EndPoint ep)
     {
+        if (logger_.isTraceEnabled())
         logger_.trace("reporting " + ep);
         long now = System.currentTimeMillis();
         ArrivalWindow heartbeatWindow = arrivalSamples_.get(ep);
@@ -180,6 +181,7 @@ public void interpret(EndPoint ep)
         /* We need this so that we do not suspect a convict. */
         boolean isConvicted = false;
         double phi = hbWnd.phi(now);
+        if (logger_.isTraceEnabled())
         logger_.trace("PHI for " + ep + " : " + phi);
         
         /*
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index 12d361f5..039cdbc1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -73,6 +73,7 @@ public void run()
                         if ( !bVal )
                             doGossipToSeed(message);
 
+                        if (logger_.isTraceEnabled())
                         logger_.trace("Performing status check ...");
                         doStatusCheck();
                     }
@@ -336,6 +337,7 @@ void makeRandomGossipDigest(List<GossipDigest> gDigests)
             sb.append(gDigest);
             sb.append(" ");
         }
+        if (logger_.isTraceEnabled())
         logger_.trace("Gossip Digests are : " + sb.toString());
     }
 
@@ -359,6 +361,7 @@ Message makeGossipDigestAckMessage(GossipDigestAckMessage gDigestAckMessage) thr
         ByteArrayOutputStream bos = new ByteArrayOutputStream(Gossiper.MAX_GOSSIP_PACKET_SIZE);
         DataOutputStream dos = new DataOutputStream(bos);
         GossipDigestAckMessage.serializer().serialize(gDigestAckMessage, dos);
+        if (logger_.isTraceEnabled())
         logger_.trace("@@@@ Size of GossipDigestAckMessage is " + bos.toByteArray().length);
         Message message = new Message(localEndPoint_, Gossiper.GOSSIP_STAGE, GOSSIP_DIGEST_ACK_VERB, bos.toByteArray());
         return message;
@@ -384,6 +387,7 @@ boolean sendGossipToLiveNode(Message message)
         }
 
         EndPoint to = eps.get(++rrIndex_);
+        if (logger_.isTraceEnabled())
         logger_.trace("Sending a GossipDigestSynMessage to " + to + " ...");
         MessagingService.getMessagingInstance().sendUdpOneWay(message, to);
         return seeds_.contains(to);
@@ -403,6 +407,7 @@ boolean sendGossip(Message message, Set<EndPoint> epSet)
         List<EndPoint> liveEndPoints = new ArrayList<EndPoint>(epSet);
         int index = (size == 1) ? 0 : random_.nextInt(size);
         EndPoint to = liveEndPoints.get(index);
+        if (logger_.isTraceEnabled())
         logger_.trace("Sending a GossipDigestSynMessage to " + to + " ...");
         MessagingService.getMessagingInstance().sendUdpOneWay(message, to);
         return seeds_.contains(to);
@@ -613,6 +618,7 @@ void notifyFailureDetector(Map<EndPoint, EndPointState> remoteEpStateMap)
 
     void markAlive(EndPoint addr, EndPointState localState)
     {
+        if (logger_.isTraceEnabled())
         logger_.trace("marking as alive " + addr);
         if ( !localState.isAlive() )
         {
@@ -691,6 +697,7 @@ void applyHeartBeatStateLocally(EndPoint addr, EndPointState localState, EndPoin
             {
                 int oldVersion = localHbState.getHeartBeatVersion();
                 localState.setHeartBeatState(remoteHbState);
+                if (logger_.isTraceEnabled())
                 logger_.trace("Updating heartbeat state version to " + localState.getHeartBeatState().getHeartBeatVersion() + " from " + oldVersion + " for " + addr + " ...");
             }
         }
@@ -956,6 +963,7 @@ public void doVerb(Message message)
     public void doVerb(Message message)
     {
         EndPoint from = message.getFrom();
+        if (logger_.isTraceEnabled())
         logger_.trace("Received a GossipDigestSynMessage from " + from);
 
         byte[] bytes = message.getMessageBody();
@@ -980,6 +988,7 @@ public void doVerb(Message message)
 
             GossipDigestAckMessage gDigestAck = new GossipDigestAckMessage(deltaGossipDigestList, deltaEpStateMap);
             Message gDigestAckMessage = Gossiper.instance().makeGossipDigestAckMessage(gDigestAck);
+            if (logger_.isTraceEnabled())
             logger_.trace("Sending a GossipDigestAckMessage to " + from);
             MessagingService.getMessagingInstance().sendUdpOneWay(gDigestAckMessage, from);
         }
@@ -1040,6 +1049,7 @@ private void doSort(List<GossipDigest> gDigestList)
     public void doVerb(Message message)
     {
         EndPoint from = message.getFrom();
+        if (logger_.isTraceEnabled())
         logger_.trace("Received a GossipDigestAckMessage from " + from);
 
         byte[] bytes = message.getMessageBody();
@@ -1070,6 +1080,7 @@ public void doVerb(Message message)
 
             GossipDigestAck2Message gDigestAck2 = new GossipDigestAck2Message(deltaEpStateMap);
             Message gDigestAck2Message = Gossiper.instance().makeGossipDigestAck2Message(gDigestAck2);
+            if (logger_.isTraceEnabled())
             logger_.trace("Sending a GossipDigestAck2Message to " + from);
             MessagingService.getMessagingInstance().sendUdpOneWay(gDigestAck2Message, from);
         }
@@ -1087,6 +1098,7 @@ public void doVerb(Message message)
     public void doVerb(Message message)
     {
         EndPoint from = message.getFrom();
+        if (logger_.isTraceEnabled())
         logger_.trace("Received a GossipDigestAck2Message from " + from);
 
         byte[] bytes = message.getMessageBody();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableWriter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableWriter.java
index 4a39c979..13f759f9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableWriter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableWriter.java
@@ -55,6 +55,7 @@ private void afterAppend(String decoratedKey, long position) throws IOException
         long indexPosition = indexRAF.getFilePointer();
         indexRAF.writeUTF(decoratedKey);
         indexRAF.writeLong(position);
+        if (logger.isTraceEnabled())
         logger.trace("wrote " + decoratedKey + " at " + position);
 
         if (keysWritten++ % INDEX_INTERVAL != 0)
@@ -64,6 +65,7 @@ private void afterAppend(String decoratedKey, long position) throws IOException
             indexPositions = new ArrayList<KeyPosition>();
         }
         indexPositions.add(new KeyPosition(decoratedKey, indexPosition));
+        if (logger.isTraceEnabled())
         logger.trace("wrote index of " + decoratedKey + " at " + indexPosition);
     }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java
index 8cbfb87a..74b8b8e2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/UdpConnection.java
@@ -78,6 +78,7 @@ public boolean write(Message message, EndPoint to) throws IOException
         byte[] data = bos.toByteArray();
         if ( data.length > 0 )
         {  
+            if (logger_.isTraceEnabled())
             logger_.trace("Size of Gossip packet " + data.length);
             byte[] protocol = BasicUtilities.intToByteArray(protocol_);
             ByteBuffer buffer = ByteBuffer.allocate(data.length + protocol.length);
