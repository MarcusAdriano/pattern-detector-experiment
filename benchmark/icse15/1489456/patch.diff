diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/VectorWritable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/VectorWritable.java
index 858da343..31f19130 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/VectorWritable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/VectorWritable.java
@@ -1,34 +1,31 @@
 /**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
  */
 
 package org.apache.mahout.math;
 
-import org.apache.hadoop.conf.Configured;
-import org.apache.hadoop.io.Writable;
-
-import com.google.common.base.Preconditions;
-
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
 import java.util.Iterator;
 
+import org.apache.hadoop.conf.Configured;
+import org.apache.hadoop.io.Writable;
 import org.apache.mahout.math.Vector.Element;
 
+import com.google.common.base.Preconditions;
+
 public final class VectorWritable extends Configured implements Writable {
 
   public static final int FLAG_DENSE = 0x01;
@@ -40,8 +37,7 @@
   private Vector vector;
   private boolean writesLaxPrecision;
 
-  public VectorWritable() {
-  }
+  public VectorWritable() {}
 
   public VectorWritable(boolean writesLaxPrecision) {
     setWritesLaxPrecision(writesLaxPrecision);
@@ -163,6 +159,9 @@ public static void writeVector(DataOutput out, Vector vector, boolean laxPrecisi
         int lastIndex = 0;
         while (iter.hasNext()) {
           Vector.Element element = iter.next();
+          if (element.get() == 0) {
+            continue;
+          }
           int thisIndex = element.index();
           // Delta-code indices:
           Varint.writeUnsignedVarInt(thisIndex - lastIndex, out);
@@ -176,6 +175,10 @@ public static void writeVector(DataOutput out, Vector vector, boolean laxPrecisi
       } else {
         while (iter.hasNext()) {
           Vector.Element element = iter.next();
+          if (element.get() == 0) {
+            // TODO(robinanil): Fix the damn iterator for the zero element.
+            continue;
+          }
           Varint.writeUnsignedVarInt(element.index(), out);
           if (laxPrecision) {
             out.writeFloat((float) element.get());
@@ -226,5 +229,4 @@ public int hashCode() {
   public String toString() {
     return vector.toString();
   }
-
 }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java
index a68c14b0..b4050ea9 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/VectorWritableTest.java
@@ -1,73 +1,93 @@
 /**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
  */
 
 package org.apache.mahout.math;
 
-import com.google.common.io.Closeables;
-import org.apache.hadoop.io.Writable;
-import org.junit.Test;
-
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.util.Random;
+
+import org.apache.hadoop.io.Writable;
+import org.apache.mahout.common.RandomUtils;
+import org.apache.mahout.math.Vector.Element;
+import org.junit.Test;
+
+import com.carrotsearch.randomizedtesting.RandomizedTest;
+import com.carrotsearch.randomizedtesting.annotations.Repeat;
+import com.google.common.io.Closeables;
+
+public final class VectorWritableTest extends RandomizedTest {
+  private static final int MAX_VECTOR_SIZE = 100;
+  private final Random r = RandomUtils.getRandom();
+
+  public void createRandom(Vector v) {
+    int size = r.nextInt(v.size());
+    for (int i = 0; i < size; ++i) {
+      v.set(r.nextInt(v.size()), r.nextDouble());
+    }
 
-public final class VectorWritableTest extends MahoutTestCase {
+    int zeros = Math.max(2, size / 4);
+    for (Element e : v.nonZeroes()) {
+      if (e.index() % zeros == 0) {
+        e.set(0.0);
+      }
+    }
+  }
 
   @Test
+  @Repeat(iterations = 20)
   public void testViewSequentialAccessSparseVectorWritable() throws Exception {
-    Vector v = new SequentialAccessSparseVector(5);
-    v.set(1, 3.0);
-    v.set(3, 5.0);
-    Vector view = new VectorView(v,0,v.size());
+    Vector v = new SequentialAccessSparseVector(MAX_VECTOR_SIZE);
+    createRandom(v);
+    Vector view = new VectorView(v, 0, v.size());
     doTestVectorWritableEquals(view);
   }
 
   @Test
+  @Repeat(iterations = 20)
   public void testSequentialAccessSparseVectorWritable() throws Exception {
-    Vector v = new SequentialAccessSparseVector(5);
-    v.set(1, 3.0);
-    v.set(3, 5.0);
+    Vector v = new SequentialAccessSparseVector(MAX_VECTOR_SIZE);
+    createRandom(v);
     doTestVectorWritableEquals(v);
   }
 
   @Test
+  @Repeat(iterations = 20)
   public void testRandomAccessSparseVectorWritable() throws Exception {
-    Vector v = new RandomAccessSparseVector(5);
-    v.set(1, 3.0);
-    v.set(3, 5.0);
+    Vector v = new RandomAccessSparseVector(MAX_VECTOR_SIZE);
+    createRandom(v);
     doTestVectorWritableEquals(v);
   }
 
   @Test
+  @Repeat(iterations = 20)
   public void testDenseVectorWritable() throws Exception {
-    Vector v = new DenseVector(5);
-    v.set(1, 3.0);
-    v.set(3, 5.0);
+    Vector v = new DenseVector(MAX_VECTOR_SIZE);
+    createRandom(v);
     doTestVectorWritableEquals(v);
   }
 
   @Test
+  @Repeat(iterations = 20)
   public void testNamedVectorWritable() throws Exception {
-    Vector v = new DenseVector(5);
+    Vector v = new DenseVector(MAX_VECTOR_SIZE);
     v = new NamedVector(v, "Victor");
-    v.set(1, 3.0);
-    v.set(3, 5.0);
+    createRandom(v);
     doTestVectorWritableEquals(v);
   }
 
@@ -92,7 +112,7 @@ private static void writeAndRead(Writable toWrite, Writable toRead) throws IOExc
     try {
       toWrite.write(dos);
     } finally {
-      Closeables.closeQuietly(dos);
+      Closeables.close(dos, true);
     }
 
     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
@@ -100,9 +120,7 @@ private static void writeAndRead(Writable toWrite, Writable toRead) throws IOExc
     try {
       toRead.readFields(dis);
     } finally {
-      Closeables.closeQuietly(dis);
+      Closeables.close(dos, true);
     }
   }
-
-
 }
