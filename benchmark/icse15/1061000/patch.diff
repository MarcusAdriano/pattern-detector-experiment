diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
index 5a3d4304..a298dde0 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
@@ -18,6 +18,7 @@
 package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.NumericTokenStream;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.schema.DateField;
@@ -58,6 +59,9 @@ public TrieTokenizer create(Reader input) {
   protected final TrieTypes type;
   protected final NumericTokenStream ts;
 
+  protected final OffsetAttribute ofsAtt = addAttribute(OffsetAttribute.class);
+  protected int startOfs, endOfs;
+
   static NumericTokenStream getNumericTokenStream(int precisionStep) {
     return new NumericTokenStream(precisionStep);
   }
@@ -83,6 +87,8 @@ public void reset(Reader input) throws IOException {
       input = super.input;
       char[] buf = new char[32];
       int len = input.read(buf);
+      this.startOfs = correctOffset(0);
+      this.endOfs = correctOffset(len);
       String v = new String(buf, 0, len);
       switch (type) {
         case INTEGER:
@@ -106,13 +112,32 @@ public void reset(Reader input) throws IOException {
     } catch (IOException e) {
       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unable to create TrieIndexTokenizer", e);
     }
+  }
 
-    ts.reset();
+  @Override
+  public void close() throws IOException {
+    super.close();
+    ts.close();
   }
 
+  @Override
+  public void reset() throws IOException {
+    super.reset();
+    ts.reset();
+  }
 
   @Override
   public boolean incrementToken() throws IOException {
-    return ts.incrementToken();
+    if (ts.incrementToken()) {
+      ofsAtt.setOffset(startOfs, endOfs);
+      return true;
+    }
+    return false;
+  }
+
+  @Override
+  public void end() throws IOException {
+    ts.end();
+    ofsAtt.setOffset(endOfs, endOfs);
   }
 }
