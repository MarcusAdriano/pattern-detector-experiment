diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
index 06218f79..1e5a15b7 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
@@ -173,9 +173,10 @@ private void rehash() {
         if (totalFieldCount >= fieldHash.length/2)
           rehash();
       } else {
-        fieldInfos.addOrUpdate(fp.fieldInfo.name, field.isIndexed(), field.isTermVectorStored(),
+        FieldInfo fi = fieldInfos.addOrUpdate(fp.fieldInfo.name, field.isIndexed(), field.isTermVectorStored(),
                             field.isStorePositionWithTermVector(), field.isStoreOffsetWithTermVector(),
                             field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());
+        assert !fi.omitTermFreqAndPositions || !fi.storePayloads;
       }
       if (thisFieldGen != fp.lastGen) {
 
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfo.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfo.java
index 84aff1a9..6ee2592e 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfo.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfo.java
@@ -58,6 +58,7 @@
       this.omitNorms = false;
       this.omitTermFreqAndPositions = false;
     }
+    assert !omitTermFreqAndPositions || !storePayloads;
   }
 
   void setCodecId(int codecId) {
@@ -80,6 +81,7 @@ public Object clone() {
   // should only be called by FieldInfos#addOrUpdate
   void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, 
               boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {
+
     if (this.isIndexed != isIndexed) {
       this.isIndexed = true;                      // once indexed, always index
     }
@@ -101,7 +103,9 @@ void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWit
       }
       if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {
         this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life
+        this.storePayloads = false;
       }
     }
+    assert !this.omitTermFreqAndPositions || !this.storePayloads;
   }
 }
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfos.java
index e8ed8ae1..d4ee822d 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FieldInfos.java
@@ -567,6 +567,7 @@ public void write(IndexOutput output) throws IOException {
     output.writeVInt(FORMAT_CURRENT);
     output.writeVInt(size());
     for (FieldInfo fi : this) {
+      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;
       byte bits = 0x0;
       if (fi.isIndexed) bits |= IS_INDEXED;
       if (fi.storeTermVector) bits |= STORE_TERMVECTOR;
@@ -607,6 +608,14 @@ private void read(IndexInput input, String fileName) throws IOException {
       boolean omitNorms = (bits & OMIT_NORMS) != 0;
       boolean storePayloads = (bits & STORE_PAYLOADS) != 0;
       boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;
+
+      // LUCENE-3027: past indices were able to write
+      // storePayloads=true when omitTFAP is also true,
+      // which is invalid.  We correct that, here:
+      if (omitTermFreqAndPositions) {
+        storePayloads = false;
+      }
+
       final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);
       addInternal.setCodecId(codecId);
     }
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
index d342cb47..94404d32 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
@@ -104,8 +104,10 @@ public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPer
 
         // Aggregate the storePayload as seen by the same
         // field across multiple threads
+        if (!fieldInfo.omitTermFreqAndPositions) {
         fieldInfo.storePayloads |= fields[i-start].hasPayloads;
       }
+      }
 
       // If this field has postings then add them to the
       // segment
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader.java
index 1803401d..8c8e2a57 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader.java
@@ -177,6 +177,7 @@ protected void setLastSkipData(int level) {
   @Override
   protected int readSkipData(int level, IndexInput skipStream) throws IOException {
     int delta;
+    assert !omitTF || !currentFieldStoresPayloads;
     if (currentFieldStoresPayloads) {
       // the current field stores payloads.
       // if the doc delta is odd then we have
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestOmitTf.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestOmitTf.java
index ce2c4cb3..7c76a303 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestOmitTf.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestOmitTf.java
@@ -119,6 +119,7 @@ public void testMixedMerge() throws Exception {
             setMaxBufferedDocs(3).
             setMergePolicy(newLogMergePolicy(2))
     );
+    writer.setInfoStream(VERBOSE ? System.out : null);
     Document d = new Document();
         
     // this field will have Tf
