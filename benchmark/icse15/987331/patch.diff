diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/EncodedInputStream.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/EncodedInputStream.java
index a8bfe60b..3a082391 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/EncodedInputStream.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/EncodedInputStream.java
@@ -212,11 +212,6 @@ public int read()
     }
     
     
-    protected void finalize() throws IOException {
-		close();
-    }
-    
-    
     static class PublicBufferOutputStream extends ByteArrayOutputStream{
 	
 		PublicBufferOutputStream(int size){
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StreamTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StreamTest.java
index b72addfa..958b8397 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StreamTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StreamTest.java
@@ -167,4 +167,62 @@ public void runGetReaderTwiceTest() throws SQLException, IOException {
     
     private static final String LANG_STREAM_RETRIEVED_ALREADY = "XCL18";
 
+    private boolean didclose = false;
+
+    /**
+     * DERBY-4531: Test that JDBC driver doesn't close a stream handed in to
+     * PreparedStatement.setCharacterStream when the prepared statement is
+     * garbage collected. Prior to thus fix, the client driver did call close
+     * on the stream in its finalizer. After fix to DERBY-4531, both embedded
+     * and client driver leaves the stream open after having read the number of
+     * characters specified.
+     */
+    public void testDerby4531() throws SQLException {
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.executeUpdate("create table tDerby4531(c clob(200))");
+        s.close();
+
+        // Don't use plain prepareStatement, we want ps to be gc'ed below and
+        // BaseJDBCTestCase#prepareStatement saves away a reference to it
+        // thwarting that.
+        PreparedStatement ps = getConnection().
+            prepareStatement("insert into tDerby4531 values (?)");
+        Reader r = new MyLoopingAlphabetReader(200);
+        ps.setCharacterStream(1, r, 200);
+        ps.execute();
+        ps.close();
+        ps = null;
+
+        // Prior to fix for this issue, with client driver, gc of ps causes
+        // close to be called on reader, cf. code in
+        // org.apache.derby.client.net.EncodedInputStream#finalize.
+        System.gc();
+
+        // Sleep so gc thread can do its thing
+        try {
+            Thread.sleep(1000);
+        } catch (Exception e) {
+        }
+
+        synchronized(r) {
+            assertFalse(didclose);
+        }
+
+        rollback();
+    }
+
+    private class MyLoopingAlphabetReader extends LoopingAlphabetReader {
+        public MyLoopingAlphabetReader(int i) {
+            super(i);
+        }
+
+        // Override this so we can detect that it happened.
+        public void close() {
+            synchronized(this) {
+                didclose = true;
+            }
+        }
+    }
 }
