diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
index 4ac0f2d4..97282621 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
@@ -91,7 +91,7 @@
   /**
    * This remove is special in that it may be called even after
    * the factory has been closed. Remove only makes sense for
-   * peristent directory factories.
+   * persistent directory factories.
    * 
    * @param path to remove
    * @throws IOException If there is a low-level I/O error.
@@ -140,6 +140,12 @@ public abstract Directory get(String path, String rawLockType,
    */
   public abstract void incRef(Directory directory);
   
+  
+  /**
+   * @return true if data is kept after close.
+   */
+  public abstract boolean isPersistent();
+  
   /**
    * Releases the Directory so that it may be closed when it is no longer
    * referenced.
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
index 1924e877..eb8610e7 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/EphemeralDirectoryFactory.java
@@ -44,6 +44,10 @@ public boolean exists(String path) {
     }
   }
   
+  public boolean isPersistent() {
+    return false;
+  }
+  
   @Override
   public void remove(Directory dir) throws IOException {
     // ram dir does not persist its dir anywhere
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
index c5c07cc7..45a1d5d1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
@@ -44,6 +44,10 @@ public String normalize(String path) throws IOException {
     return new File(path).getCanonicalPath();
   }
   
+  public boolean isPersistent() {
+    return true;
+  }
+  
   @Override
   public void remove(Directory dir) throws IOException {
     CacheValue val = byDirectoryCache.get(dir);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
index d79ef9b9..2d5d01f3 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
@@ -83,6 +83,7 @@
 import java.io.IOException;
 import java.util.Vector;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.solr.core.PluginInfo;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.core.SolrEventListener;
@@ -115,7 +116,7 @@
   protected Vector<SolrEventListener> softCommitCallbacks = new Vector<SolrEventListener>();
   protected Vector<SolrEventListener> optimizeCallbacks = new Vector<SolrEventListener>();
 
-  protected UpdateLog ulog;
+  protected volatile UpdateLog ulog;
 
   private void parseEventListeners() {
     final Class<SolrEventListener> clazz = SolrEventListener.class;
@@ -145,6 +146,14 @@ private void initLog() {
     }
   }
 
+  // not thread safe - for startup
+  protected void clearLog() throws IOException {
+    if (ulog != null) {
+      ulog.close(false);
+      FileUtils.deleteDirectory(ulog.getLogDir());
+      initLog();
+    }
+  }
 
   protected void callPostCommitCallbacks() {
     for (SolrEventListener listener : commitCallbacks) {
@@ -171,6 +180,13 @@ public UpdateHandler(SolrCore core)  {
     idFieldType = idField!=null ? idField.getType() : null;
     parseEventListeners();
     initLog();
+    if (!core.getDirectoryFactory().isPersistent()) {
+      try {
+        clearLog();
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      }
+    }
   }
 
   /**
