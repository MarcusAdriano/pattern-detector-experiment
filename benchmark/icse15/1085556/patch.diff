diff --git a/lucene/dev/branches/lucene_solr_3_1/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/branches/lucene_solr_3_1/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
index 15010016..6f2cc7c0 100644
--- a/lucene/dev/branches/lucene_solr_3_1/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/branches/lucene_solr_3_1/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
@@ -147,6 +147,8 @@
   public static final boolean TEST_NIGHTLY = Boolean.parseBoolean(System.getProperty("tests.nightly", "false"));
   /** the line file used by LineFileDocs */
   public static final String TEST_LINE_DOCS_FILE = System.getProperty("tests.linedocsfile", "europarl.lines.txt.gz");
+  /** whether or not to clean threads between test invocations: "false", "perMethod", "perClass" */
+  public static final String TEST_CLEAN_THREADS = System.getProperty("tests.cleanthreads", "perClass");
   
   /**
    * A random multiplier which you should use when writing random tests:
@@ -226,11 +228,13 @@ public static void beforeClassLuceneTestCaseJ4() {
   
   @AfterClass
   public static void afterClassLuceneTestCaseJ4() {
+    if (! "false".equals(TEST_CLEAN_THREADS)) {
     int rogueThreads = threadCleanup("test class");
     if (rogueThreads > 0) {
       // TODO: fail here once the leaks are fixed.
       System.err.println("RESOURCE LEAK: test class left " + rogueThreads + " thread(s) running");
     }
+    }
     Locale.setDefault(savedLocale);
     TimeZone.setDefault(savedTimeZone);
     System.clearProperty("solr.solr.home");
@@ -359,7 +363,7 @@ public void tearDown() throws Exception {
     assertTrue("ensure your setUp() calls super.setUp()!!!", setup);
     setup = false;
     BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);
-    if (!getClass().getName().startsWith("org.apache.solr")) {
+    if ("perMethod".equals(TEST_CLEAN_THREADS)) {
       int rogueThreads = threadCleanup("test method: '" + getName() + "'");
       if (rogueThreads > 0) {
         System.err.println("RESOURCE LEAK: test method: '" + getName() 
@@ -403,7 +407,7 @@ public void tearDown() throws Exception {
     }
   }
 
-  private final static int THREAD_STOP_GRACE_MSEC = 1000;
+  private final static int THREAD_STOP_GRACE_MSEC = 50;
   // jvm-wide list of 'rogue threads' we found, so they only get reported once.
   private final static IdentityHashMap<Thread,Boolean> rogueThreads = new IdentityHashMap<Thread,Boolean>();
   
@@ -458,9 +462,6 @@ private static int threadCleanup(String context) {
           t.setUncaughtExceptionHandler(null);
           Thread.setDefaultUncaughtExceptionHandler(null);
           t.interrupt();
-          try {
-            t.join(THREAD_STOP_GRACE_MSEC);
-          } catch (InterruptedException e) { e.printStackTrace(); }
         }
       }
     }
