diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java
index 1385a9f7..5ecbe1f0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java
@@ -38,10 +38,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     ///////////////////////////////////////////////////////////////////////////////////
 
     /**
-     * Default number of values to pre-allocate. This is the size of the preallocation range
-     * used by other databases. See DERBY-4437.
+     * Default number of values to pre-allocate. Other databases use a preallocation size
+     * of 20 (see DERBY-4437). We boosted this to 100 in order to get better concurrency,
+     * after fixing correctness problems in pre-allocation (see DERBY-5493).
      */
-    private static final int DEFAULT_PREALLOCATION_COUNT = 20;
+    private static final int DEFAULT_PREALLOCATION_COUNT = 100;
 
     ///////////////////////////////////////////////////////////////////////////////////
     //
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java
index 3bc7ba4b..6b9f2357 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java
@@ -61,7 +61,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     ///////////////////////////////////////////////////////////////////////////////////
 
     // number of pre-allocated values in a sequence generator
-    private static final long ALLOCATION_COUNT = 20L;
+    private static final long ALLOCATION_COUNT = 100L;
     private static final int TWEAKED_ALLOCATION_COUNT = 7;
 
     private static  final   String      TEST_DBO = "TEST_DBO";
@@ -217,13 +217,20 @@ public void test_02_boundary() throws Exception
          )
         throws Exception
     {
-        long biggestStep = 2 * ALLOCATION_COUNT;
-        
-        for ( long i = 1L; i <= biggestStep; i++ )
-        {
-            vetUpperBoundary( maxValue, minValue, i );
-            vetLowerBoundary( maxValue, minValue, i );
+        vetBoundaries( maxValue, minValue, 1L );
+        vetBoundaries( maxValue, minValue, ALLOCATION_COUNT );
+        vetBoundaries( maxValue, minValue, 2 * ALLOCATION_COUNT );
         }
+    private void vetBoundaries
+        (
+         long maxValue,
+         long minValue,
+         long stepSize
+         )
+        throws Exception
+    {
+        vetUpperBoundary( maxValue, minValue, stepSize );
+        vetLowerBoundary( maxValue, minValue, stepSize );
     }
     private void vetUpperBoundary
         (
@@ -237,12 +244,12 @@ public void test_02_boundary() throws Exception
         long firstValue;
 
         long initValue = maxValue - (ALLOCATION_COUNT * stepSize);
+        long finalValue = maxValue;
+        long midpoint = (finalValue - initValue) / 2;
 
-        for ( long i = initValue; (i > 0) && (i <= maxValue); i++ )
-        {
-            firstValue = i;
-            vetBoundaries( maxValue, minValue, stepSize, firstValue, restartValue );
-        }
+        if ( initValue > 0 ) { vetBoundaries( maxValue, minValue, stepSize, initValue, restartValue ); }
+        if ( midpoint > 0 ) { vetBoundaries( maxValue, minValue, stepSize, midpoint, restartValue ); }
+        if ( finalValue > 0 ) { vetBoundaries( maxValue, minValue, stepSize, finalValue, restartValue ); }
     }
     private void vetLowerBoundary
         (
@@ -256,12 +263,12 @@ public void test_02_boundary() throws Exception
         long firstValue;
 
         long initValue = minValue + (ALLOCATION_COUNT * stepSize);
+        long finalValue = minValue;
+        long midpoint = (finalValue - initValue) / 2;
 
-        for ( long i = initValue; (i < 0) && (i >= minValue); i-- )
-        {
-            firstValue = i;
-            vetBoundaries( maxValue, minValue, -stepSize, firstValue, restartValue );
-        }
+        if ( initValue < 0 ) { vetBoundaries( maxValue, minValue, -stepSize, initValue, restartValue ); }
+        if ( midpoint < 0 ) { vetBoundaries( maxValue, minValue, -stepSize, midpoint, restartValue ); }
+        if ( finalValue < 0 ) { vetBoundaries( maxValue, minValue, -stepSize, finalValue, restartValue ); }
     }
     private void vetBoundaries
         (
