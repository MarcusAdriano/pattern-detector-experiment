diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
index 0cfec80f..5b9dbbf9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
@@ -61,11 +61,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private	static	boolean	_engineForcedDown = false;
 	
 
-    //This is the driver that memorizes the autoloadeddriver (DERBY-2905)
+    // This is the driver that memorizes the autoloadeddriver (DERBY-2905)
     private static Driver _autoloadedDriver;
 
-    //This flag is set is deregister attribute is set by user, 
-    //default is true (DERBY-2905)
+    // This flag is true unless the deregister attribute has been set to
+    // false by the user (DERBY-2905)
     private static boolean deregister = true;
 	//
 	// This is the driver that's specific to the JDBC level we're running at.
@@ -228,7 +228,8 @@ static	void	registerDriverModule( Driver driver )
 		
         try {
             if (_autoloadedDriver == null) {
-                _autoloadedDriver = new AutoloadedDriver();
+                //Support JDBC 4 or higher (DERBY-2905)
+                _autoloadedDriver = makeAutoloadedDriver();
                 DriverManager.registerDriver(_autoloadedDriver);
             }
         } catch (SQLException e) {
@@ -283,5 +284,20 @@ public static boolean getDeregister() {
         return deregister;
     }
 
+    /**
+     * load slightly more capable driver if possible.
+     * But if the vm level doesn't support it, then we fall
+     * back on the JDBC3 level driver.
+     * @return AutoloadedDriver 
+     */
+    private static AutoloadedDriver makeAutoloadedDriver() 
+    { 
+        try { 
+            return (AutoloadedDriver) Class.forName( "org.apache.derby.jdbc.AutoloadedDriver40" ).newInstance(); 
+        } 
+        catch (Throwable t) {} 
+
+        return new AutoloadedDriver(); 
+    } 
 }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
index 5d82eaeb..52af63b8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
@@ -224,7 +224,8 @@ public Connection connect(String url, Properties info)
 					}
 
                     // DERBY-2905, allow users to provide deregister attribute to 
-                    // left AutoloadedDriver in DriverManager, default value is true
+                    // leave AutoloadedDriver registered in DriverManager, default
+                    // value is true
                     if (finfo.getProperty(Attribute.DEREGISTER_ATTR) != null) {
                         boolean deregister = Boolean.valueOf(
                                 finfo.getProperty(Attribute.DEREGISTER_ATTR))
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
index 26ee4adf..0cf591fa 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
@@ -186,7 +186,7 @@ private static Test baseAutoLoadSuite(String which)
 
     /**
      * Test DERBY-2905:Shutting down embedded Derby does remove all code,
-     * the AutoloadDriver is dergistered from DriverManager.
+     * the AutoloadDriver is deregistered from DriverManager.
      * 
      * @throws Exception
      */
@@ -224,8 +224,6 @@ public void testAutoloadDriverUnregister() throws Exception {
             user = getTestConfiguration().getUserName();
             password = getTestConfiguration().getUserPassword();
             DriverManager.getConnection(url, user, password);
-            //newInstance is gettin AutoloadedDriver
-            AutoloadedDriver = "org.apache.derby.jdbc.AutoloadedDriver";
             assertTrue(getRegisteredDrivers(AutoloadedDriver));
 
             // shut down engine
@@ -510,7 +508,7 @@ public void testAssertShutdownOK() throws SQLException {
             //Case 2: Test with deregister=false, AutoloadedDriver should
             //still be in DriverManager
             JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
-                    "shutdown=tru e;deregister=false");
+                    "shutdown=true;deregister=false");
             try {
                 ds.getConnection();
                 fail("expected shutdown to fail");
