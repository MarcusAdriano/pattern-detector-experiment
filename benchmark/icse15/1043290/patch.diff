diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ExceptionUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ExceptionUtil.java
index e69de29b..9ecae6b0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ExceptionUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ExceptionUtil.java
@@ -0,0 +1,195 @@
+/*
+   Derby - Class org.apache.derby.iapi.error.ExceptionUtil
+ 
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+ 
+      http://www.apache.org/licenses/LICENSE-2.0
+ 
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ 
+ */
+package org.apache.derby.iapi.error;
+/* Until DERBY-289 related issue settle for shared code
+ * Engine have similar code as client code even though some of 
+ * code is potentially sharable. If you fix a bug in ExceptionUtil for engine, 
+ * please also change the code in 
+ * java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java for 
+ * client if necessary.
+ */
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.security.AccessControlException;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+
+import org.apache.derby.shared.common.error.ExceptionSeverity;
+
+/**
+ * This class provides utility routines for exceptions 
+ */
+public class ExceptionUtil
+{
+
+
+    /**
+     *  Convert a message identifier from 
+     *  org.apache.derby.shared.common.reference.SQLState to
+     *  a SQLState five character string.
+     *
+     *	@param messageID - the sql state id of the message from Derby
+     *	@return String 	 - the 5 character code of the SQLState ID to returned to the user 
+     */
+    public static String getSQLStateFromIdentifier(String messageID) {
+
+        if (messageID.length() == 5)
+            return messageID;
+        return messageID.substring(0, 5);
+    }
+    
+    /**
+     * Get the severity given a message identifier from SQLState.
+     */
+    public static int getSeverityFromIdentifier(String messageID) {
+
+        int lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
+
+        switch (messageID.length()) {
+        case 5:
+            switch (messageID.charAt(0)) {
+            case '0':
+                switch (messageID.charAt(1)) {
+                case '1':
+                    lseverity = ExceptionSeverity.WARNING_SEVERITY;
+                    break;
+                case 'A':
+                case '7':
+                    lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
+                    break;
+                case '8':
+                    lseverity = ExceptionSeverity.SESSION_SEVERITY;
+                    break;
+                }
+                break;	
+            case '2':
+            case '3':
+                lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
+                break;
+            case '4':
+                switch (messageID.charAt(1)) {
+                case '0':
+                    lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
+                    break;
+                case '2':
+                    lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
+                    break;
+                }
+                break;	
+            }
+            break;
+
+        default:
+            switch (messageID.charAt(6)) {
+            case 'M':
+                lseverity = ExceptionSeverity.SYSTEM_SEVERITY;
+                break;
+            case 'D':
+                lseverity = ExceptionSeverity.DATABASE_SEVERITY;
+                break;
+            case 'C':
+                lseverity = ExceptionSeverity.SESSION_SEVERITY;
+                break;
+            case 'T':
+                lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
+                break;
+            case 'S':
+                lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
+                break;
+            case 'U':
+                lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
+                break;
+            }
+            break;
+        }
+
+        return lseverity;
+    }
+
+    /**
+     * Dumps stack traces for all the threads if the JVM supports it.
+     * The result is returned as a string, ready to print.
+     *
+     * If the JVM doesn't have the method Thread.getAllStackTraces
+     * i.e, we are on a JVM < 1.5, or  if we don't have the permissions:
+     * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
+     * a message saying so is returned instead.
+     *
+     * @return stack traces for all live threads as a string or an error message.
+     */
+    public static String dumpThreads() {
+
+        StringWriter out = new StringWriter();
+        PrintWriter p = new PrintWriter(out, true);
+
+        //Try to get a thread dump and deal with various situations.
+        try {
+            //This checks that we are on a jvm >= 1.5 where we
+            //can actually do threaddumps.
+            Thread.class.getMethod("getAllStackTraces", new Class[] {});
+
+            //Then get the thread dump.
+            Class c = Class.forName("org.apache.derby.iapi.error.ThreadDump");
+            final Method m = c.getMethod("getStackDumpString",new Class[] {});
+
+            String dump;
+
+            dump = (String) AccessController.doPrivileged
+            (new PrivilegedExceptionAction(){
+                public Object run() throws
+                IllegalArgumentException,
+                IllegalAccessException,
+                InvocationTargetException{
+                    return m.invoke(null, null);
+                }
+            }
+            );
+
+            //Print the dump to the message string. That went OK.
+            p.print("---------------\nStack traces for all " +
+            "live threads:");
+            p.println("\n" + dump);
+            p.println("---------------");
+        } catch (NoSuchMethodException e) {
+            p.println("(Skipping thread dump because it is not " +
+            "supported on JVM 1.4)");
+
+        } catch (Exception e) {
+            if (e instanceof PrivilegedActionException &&
+                e.getCause() instanceof InvocationTargetException &&
+                e.getCause().getCause() instanceof AccessControlException){
+
+                p.println("(Skipping thread dump "
+                        + "because of insufficient permissions:\n"
+                        + e.getCause().getCause() + ")\n");
+            } else {
+                p.println("\nAssertFailure tried to do a thread dump, but "
+                        + "there was an error:");
+                e.getCause().printStackTrace(p);
+            }
+        }
+        return out.toString();
+    }
+
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ThreadDump.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ThreadDump.java
index e69de29b..21b7b2bd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ThreadDump.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/ThreadDump.java
@@ -0,0 +1,58 @@
+/*
+
+   Derby - Class org.apache.derby.iapi.error.ThreadDump
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.iapi.error;
+
+/* Until DERBY-289 related issue settle for shared code
+ * Engine have similar code as client code even though some of 
+ * code is potentially sharable. If you fix a bug in ThreadDump for engine, 
+ * please also change the code in 
+ * java/shared/org/apache/derby/shared/common/sanity/ThreadDump.java for 
+ * client if necessary.
+ */
+
+import java.util.Map;
+
+public class ThreadDump {
+
+    /**
+     * 
+     * @return A string representation of a full thread dump
+     */
+    public static String getStackDumpString() {
+        StringBuffer sb = new StringBuffer();
+        Map<Thread, StackTraceElement[]> st = Thread.getAllStackTraces();
+        for (Map.Entry<Thread, StackTraceElement[]> e : st.entrySet()) {
+            StackTraceElement[] lines = e.getValue();
+            Thread t = e.getKey();
+            sb.append("Thread name=" + t.getName() + " id=" + t.getId()
+                    + " priority=" + t.getPriority() + " state=" + t.getState()
+                    + " isdaemon=" + t.isDaemon() + "\n");
+            for (int i = 0; i < lines.length; i++) {
+                sb.append("\t" + lines[i] + "\n");
+
+            }
+            sb.append("\n");
+        }
+        return sb.toString();
+    }
+
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextManager.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextManager.java
index b7cd4a4a..9beb2111 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextManager.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextManager.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.ShutdownException;
 
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.error.ExceptionUtil;
 import org.apache.derby.iapi.services.monitor.Monitor;
 
 import org.apache.derby.iapi.reference.Property;
@@ -37,6 +38,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.ExceptionSeverity;
 import org.apache.derby.iapi.services.i18n.LocaleFinder;
 
+import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.ArrayList;
 import java.util.List;
@@ -302,9 +304,7 @@ public boolean cleanupOnError(Throwable error)
 
 forever: for (;;) {
 
-			int errorSeverity = error instanceof StandardException ?
-				((StandardException) error).getSeverity() :
-				ExceptionSeverity.NO_APPLICABLE_SEVERITY;
+            int errorSeverity = getErrorSeverity(error);
  			if (reportError) {
 				errorStringBuilder.stackTrace(error);
 				flushErrorString();
@@ -331,6 +331,12 @@ public boolean cleanupOnError(Throwable error)
 					lastHandler = ctx.isLastHandler(errorSeverity);
 
 					ctx.cleanupOnError(error);
+                    if (reportError
+                            && errorSeverity >= ExceptionSeverity.SESSION_SEVERITY) {
+                        threadDump = ExceptionUtil.dumpThreads();
+                    } else {
+                        threadDump = null;
+                    }
 				}
 				catch (StandardException se) {
 	
@@ -401,6 +407,8 @@ public boolean cleanupOnError(Throwable error)
 				}
 			}
 
+            if (threadDump != null)
+                errorStream.println(threadDump);
 			if (reportError) {
 				errorStream.println("Cleanup action completed");
 				errorStream.flush();
@@ -505,6 +513,29 @@ private boolean reportError(Throwable t) {
 
 	}
 
+	/**
+     * return the severity of the exception. Currently, this method 
+     * does not determine a severity that is not StandardException 
+     * or SQLException.
+     * @param error - Throwable error
+     * 
+     * @return int vendorcode/severity for the Throwable error
+     *            - error/exception to extract vendorcode/severity. 
+     *            For error that we can not get severity, 
+     *            NO_APPLICABLE_SEVERITY will return.
+     */
+    public int getErrorSeverity(Throwable error) {
+        
+        if (error instanceof StandardException) {
+            return ((StandardException) error).getErrorCode();
+        }
+        
+        if (error instanceof SQLException) {
+            return ((SQLException) error).getErrorCode();
+        }
+        return ExceptionSeverity.NO_APPLICABLE_SEVERITY;
+    }
+
 	/**
 	 * Constructs a new instance. No CtxStacks are inserted into the
 	 * hashMap as they will be allocated on demand.
@@ -526,6 +557,8 @@ private boolean reportError(Throwable t) {
 
 	private HeaderPrintWriter errorStream;
 	private ErrorStringBuilder errorStringBuilder;
+    // DERBY-4856 add thread dump information.
+    private String threadDump;
 
 	private boolean shutdown;
 	private LocaleFinder finder;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java
index 141d9f3d..bcd0fcb6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java
@@ -30,7 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 import org.apache.derby.iapi.services.i18n.MessageService;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.types.PositionedStream;
-import org.apache.derby.shared.common.error.ExceptionUtil;
+import org.apache.derby.iapi.error.ExceptionUtil;
 
 /**
  * This input stream is built on top of {@link LOBStreamControl}.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java
index 1a793a47..cd2128a0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java
@@ -27,7 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.i18n.MessageService;
-import org.apache.derby.shared.common.error.ExceptionUtil;
+import org.apache.derby.iapi.error.ExceptionUtil;
 
 /**
  * This is an output stream built on top of LOBStreamControl.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
index 13542de8..7aaf2be5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
@@ -37,7 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.store.raw.data.DataFactory;
 import org.apache.derby.io.StorageFile;
-import org.apache.derby.shared.common.error.ExceptionUtil;
+import org.apache.derby.iapi.error.ExceptionUtil;
 import org.apache.derby.shared.common.reference.MessageId;
 
 /**
