diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java
index 4e9ae0ea..26a44678 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java
@@ -34,8 +34,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import junit.framework.Test;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
-import org.apache.derbyTesting.junit.NetworkServerTestSetup;
-import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 
@@ -126,18 +124,18 @@ public void testDefault() throws IOException, SQLException {
         assertNotDirectory(derbyLog);
         assertNotEmpty(derbyLog);
 
-        boolean deleted = deleteFile(derbyLog);
-        assertTrue("File " + derbyLog + " could not be deleted", deleted);
-
         println("Shutdown engine");
         getTestConfiguration().shutdownEngine();
+
+        boolean deleted = deleteFile(derbyLog);
+        assertTrue("File " + derbyLog + " could not be deleted", deleted);
     }
 
     /**
      * Test the derby.stream.error.file property.
      */
     public void testFile() throws IOException, SQLException {
-        setSystemProperty(FILE_PROP, fileStreamFile.getCanonicalPath());
+        setSystemProperty(FILE_PROP, getCanonicalPath(fileStreamFile));
 
         bootDerby();
         getTestConfiguration().shutdownEngine();
@@ -154,9 +152,9 @@ public void testFile() throws IOException, SQLException {
      * Test the derby.stream.error.file property with wrong input.
      */
     public void testWrongFile() throws IOException, SQLException {
-        setSystemProperty(FILE_PROP,
-              new File(new File(getSystemProperty("derby.system.home"), "foo"),
-              makeStreamFilename("file")).getCanonicalPath()); // erroneous path
+        setSystemProperty(FILE_PROP, getCanonicalPath(new File(
+              new File(getSystemProperty("derby.system.home"), "foo"),
+              makeStreamFilename("file")))); // erroneous path
 
         bootDerby();
         getTestConfiguration().shutdownEngine();
@@ -250,7 +248,7 @@ public void testWrongField() throws IOException, SQLException {
      * derby.stream.error.method property.
      */
     public void testFileOverMethod() throws IOException, SQLException {
-        setSystemProperty(FILE_PROP, fileStreamFile.getCanonicalPath());
+        setSystemProperty(FILE_PROP, getCanonicalPath(fileStreamFile));
         setSystemProperty(METHOD_PROP,
               "org.apache.derbyTesting.functionTests.tests.engine."+
               "ErrorStreamTest.getStream");
@@ -271,7 +269,7 @@ public void testFileOverMethod() throws IOException, SQLException {
      * derby.stream.error.field property.
      */
     public void testFileOverField() throws IOException, SQLException {
-        setSystemProperty(FILE_PROP, fileStreamFile.getCanonicalPath());
+        setSystemProperty(FILE_PROP, getCanonicalPath(fileStreamFile));
         setSystemProperty(FIELD_PROP,
               "org.apache.derbyTesting.functionTests.tests.engine."+
               "ErrorStreamTest.fieldStream");
@@ -292,7 +290,7 @@ public void testFileOverField() throws IOException, SQLException {
      * derby.stream.error.method and the derby.stream.error.field property.
      */
     public void testFileOverMethodAndField() throws IOException, SQLException {
-        setSystemProperty(FILE_PROP, fileStreamFile.getCanonicalPath());
+        setSystemProperty(FILE_PROP, getCanonicalPath(fileStreamFile));
         setSystemProperty(METHOD_PROP,
               "org.apache.derbyTesting.functionTests.tests.engine."+
               "ErrorStreamTest.getStream");
@@ -485,6 +483,22 @@ public Object run() {
         return deleted.booleanValue();
     }
 
+    private static String getCanonicalPath(final File f) throws IOException {
+        String path = null;
+        try {
+            path = (String) AccessController.doPrivileged(
+                  new PrivilegedExceptionAction() {
+                public Object run() throws IOException {
+                    return f.getCanonicalPath();
+                }
+            });
+        } catch (PrivilegedActionException e) {
+            // e.getException() should be an instance of IOException.
+            throw (IOException) e.getException();
+        }
+        return path;
+    }
+
     private static void makeDirIfNotExisting(final String filename) {
         AccessController.doPrivileged(new PrivilegedAction() {
             public Object run() {
@@ -517,7 +531,7 @@ public Object run() throws FileNotFoundException {
                 }
             });
             } catch (PrivilegedActionException e) {
-                // e.getException() should be an instance of IOException.
+                // e.getException() should be a FileNotFoundException.
                 throw (FileNotFoundException) e.getException();
             }
         return outStream;
