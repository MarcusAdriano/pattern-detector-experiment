diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
index da53e0c2..53cbcac4 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
@@ -19,6 +19,12 @@
 package org.apache.aries.blueprint.container;
 
 import java.lang.reflect.Method;
+import java.security.AccessControlContext;
+import java.security.AccessController;
+import java.security.DomainCombiner;
+import java.security.Permission;
+import java.security.PrivilegedAction;
+import java.security.ProtectionDomain;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -81,6 +87,8 @@
     private final AtomicBoolean satisfied = new AtomicBoolean();
     private SatisfactionListener satisfactionListener;
 
+	private final AccessControlContext accessControlContext;
+
     protected AbstractServiceReferenceRecipe(String name,
                                              ExtendedBlueprintContainer blueprintContainer,
                                              ServiceReferenceMetadata metadata,
@@ -96,6 +104,14 @@ protected AbstractServiceReferenceRecipe(String name,
         
         this.optional = (metadata.getAvailability() == ReferenceMetadata.AVAILABILITY_OPTIONAL);
         this.filter = createOsgiFilter(metadata);
+        
+        if (System.getSecurityManager() != null) {
+            accessControlContext = createAccessControlContext();
+        } else
+        {
+        	accessControlContext = null;
+        }
+
     }
 
 
@@ -178,6 +194,46 @@ public String getOsgiFilter() {
         return filter;
     }
 
+	protected Object getServiceSecurely(final ServiceReference serviceReference) {
+		if (accessControlContext == null) {
+			return getBundleContextForServiceLookup().getService(
+					serviceReference);
+
+		} else {
+			// If we're operating with security, use the privileges of the bundle
+			// we're managing to do the lookup
+			return AccessController.doPrivileged(
+					new PrivilegedAction<Object>() {
+						public Object run() {
+							return getBundleContextForServiceLookup()
+									.getService(serviceReference);
+						}
+					}, accessControlContext);
+		}
+	}
+    
+
+	/**
+	 * We may need to execute code within a doPrivileged block, and if so, it should be the 
+	 * privileges of the bundle with the blueprint file that get used, not the privileges 
+	 * of blueprint-core. To achieve this we use an access context. 
+	 * @return
+	 */
+    private AccessControlContext createAccessControlContext() {
+        return new AccessControlContext(AccessController.getContext(),
+                new DomainCombiner() {               
+                    public ProtectionDomain[] combine(ProtectionDomain[] arg0,
+                                                      ProtectionDomain[] arg1) {                    
+                        return new ProtectionDomain[] { new ProtectionDomain(null, null) {                        
+                            public boolean implies(Permission permission) {                                                           
+                                return getBundleContextForServiceLookup().getBundle().hasPermission(permission);
+                            }
+                        } 
+                    };
+                }
+        });
+    }
+
     protected void createListeners() {
             if (listenersRecipe != null) {
                 List<Listener> listeners = (List<Listener>) listenersRecipe.create();
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
index fd0ebed3..f365d574 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
@@ -209,7 +209,7 @@ public synchronized Object call() throws Exception {
                 throw new ServiceUnavailableException("Service is unavailable", getOsgiFilter());
             }
             if (service == null) {
-                service = getBundleContextForServiceLookup().getService(reference);
+                service = getServiceSecurely(reference);
             }
             return service;
         }
diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
index 8a0baee9..f30e1c5b 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
@@ -234,11 +234,7 @@ private Object getService() throws InterruptedException {
             } else {
             
               if (trackedService == null) {
-            	  trackedService = AccessController.doPrivileged(new PrivilegedAction<Object>() {
-            	    public Object run() {
-            		  return getBundleContextForServiceLookup().getService(trackedServiceReference);
-            		}
-            	  });
+            	  trackedService = getServiceSecurely(trackedServiceReference);
               }
               
               if (trackedService == null) {
