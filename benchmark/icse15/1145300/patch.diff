diff --git a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/analysis/NumericTokenStream.java b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/analysis/NumericTokenStream.java
index 9caee459..5b4a4b1a 100644
--- a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/analysis/NumericTokenStream.java
+++ b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/analysis/NumericTokenStream.java
@@ -49,7 +49,7 @@
  * <pre>
  *  Field field = new Field(name, new NumericTokenStream(precisionStep).setIntValue(value));
  *  field.setOmitNorms(true);
- *  field.setOmitTermFreqAndPositions(true);
+ *  field.setIndexOptions(IndexOptions.DOCS_ONLY);
  *  document.add(field);
  * </pre>
  *
@@ -60,7 +60,7 @@
  *  NumericTokenStream stream = new NumericTokenStream(precisionStep);
  *  Field field = new Field(name, stream);
  *  field.setOmitNorms(true);
- *  field.setOmitTermFreqAndPositions(true);
+ *  field.setIndexOptions(IndexOptions.DOCS_ONLY);
  *  Document document = new Document();
  *  document.add(field);
  *
diff --git a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/CheckIndex.java
index 4b0164f5..3bfe5dca 100644
--- a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/CheckIndex.java
@@ -186,8 +186,8 @@
       int numFields;
 
       /** True if at least one of the fields in this segment
-       *  does not omitTermFreqAndPositions.
-       *  @see AbstractField#setOmitTermFreqAndPositions */
+       *  has position data
+       *  @see AbstractField#setIndexOptions(org.apache.lucene.index.FieldInfo.IndexOptions) */
       public boolean hasProx;
 
       /** Map that includes certain
diff --git a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
index 7c445b5b..409becaf 100644
--- a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
+++ b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
@@ -367,8 +367,7 @@ void flush(String fieldName, FieldsConsumer consumer,  final SegmentWriteState s
         // format.
 
         if (currentFieldIndexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {
-          // omitTermFreqAndPositions == false so we do write positions &
-          // payload
+          // we do write positions & payload
           int position = 0;
           for(int j=0;j<termDocFreq;j++) {
             final int code = prox.readVInt();
diff --git a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/SegmentInfo.java b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
index f2180b01..3d91b75d 100644
--- a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
+++ b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
@@ -91,7 +91,7 @@
   //TODO: remove when we don't have to support old indexes anymore that had this field
   private int hasVectors = CHECK_FIELDINFO;
   //TODO: remove when we don't have to support old indexes anymore that had this field
-  private int hasProx = CHECK_FIELDINFO;     // True if this segment has any fields with omitTermFreqAndPositions==false
+  private int hasProx = CHECK_FIELDINFO;     // True if this segment has any fields with positional information
 
   
   private FieldInfos fieldInfos;
diff --git a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java
index bed29c78..944f4c4a 100644
--- a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java
+++ b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java
@@ -195,7 +195,7 @@ public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) t
           if (postingsEnum == null) {
             if (reader.termDocsEnum(liveDocs, term.field(), term.bytes()) != null) {
               // term does exist, but has no positions
-              throw new IllegalStateException("field \"" + term.field() + "\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=" + term.text() + ")");
+              throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run PhraseQuery (term=" + term.text() + ")");
             } else {
               // term does not exist
               return null;
@@ -443,7 +443,7 @@ public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws I
       } else {
         if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {
           // term does exist, but has no positions
-          throw new IllegalStateException("field \"" + terms[i].field() + "\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=" + terms[i].text() + ")");
+          throw new IllegalStateException("field \"" + terms[i].field() + "\" was indexed without position data; cannot run PhraseQuery (term=" + terms[i].text() + ")");
         }
       }
     }
diff --git a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/PhraseQuery.java
index 470cc665..696d6d37 100644
--- a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -229,7 +229,7 @@ public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) t
         if (postingsEnum == null) {
           assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : "termstate found but no term exists in reader";
           // term does exist, but has no positions
-          throw new IllegalStateException("field \"" + t.field() + "\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=" + t.text() + ")");
+          throw new IllegalStateException("field \"" + t.field() + "\" was indexed without position data; cannot run PhraseQuery (term=" + t.text() + ")");
         }
         // get the docFreq without seeking
         TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();
diff --git a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery.java b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
index 8543627c..8a542f2f 100644
--- a/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
+++ b/lucene/dev/branches/omitp/lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
@@ -92,7 +92,7 @@ public Spans getSpans(final AtomicReaderContext context) throws IOException {
     } else {
       if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {
         // term does exist, but has no positions
-        throw new IllegalStateException("field \"" + term.field() + "\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=" + term.text() + ")");
+        throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run SpanTermQuery (term=" + term.text() + ")");
       } else {
         // term does not exist
         return TermSpans.EMPTY_TERM_SPANS;
