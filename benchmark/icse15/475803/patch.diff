diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java
index 67a5da79..a20afb49 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java
@@ -59,6 +59,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 {
 	ValueNode	value;
 
+    /**
+     * If set then this SQL value is being passed into a SQL function
+     * declared RETURNS NULL ON NULL input. In this case this node
+     * performs NULL checking logic in addition simple translation
+     * from the SQL domain to the Java domain. Thus if this
+     * is set then this node can not be removed when it
+     * is paired with a JavaToSQLValueNode.
+     * This field is set at generate time of the
+     * enclosing StaticMethodCallNode.
+     */
 	LocalField	returnsNullOnNullState;
 
 	/**
@@ -344,7 +354,7 @@ public void generateExpression(ExpressionClassBuilder acb,
 	 * @exception StandardException		Thrown on error
 	 */
 
-	public void generateSQLValue(ExpressionClassBuilder acb,
+	private void generateSQLValue(ExpressionClassBuilder acb,
 											MethodBuilder mb)
 									throws StandardException
 	{
@@ -362,7 +372,7 @@ public void generateSQLValue(ExpressionClassBuilder acb,
 	 * @exception StandardException		Thrown on error
 	 */
 
-	public void generateJavaValue
+	private void generateJavaValue
 	(
 		ExpressionClassBuilder	acb,
 		MethodBuilder mbex
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
index 122f0616..6701e4ca 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
@@ -120,6 +120,13 @@ For a application call like CALL MYPROC(?) the logically Java method call is
 	private boolean		isSystemCode;
 	private boolean		alreadyBound;
 
+    /**
+     * Generated boolean field to hold the indicator
+     * for if any of the parameters to a
+     * RETURNS NULL ON NULL INPUT function are NULL.
+     * Only set if this node is calling such a function.
+     * Set at generation time.
+     */
 	private LocalField	returnsNullOnNullState;
 
 
