diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool.java
index cf2a1653..77f71c25 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool.java
@@ -186,13 +186,41 @@ public synchronized ThreadState newThreadState() {
     if (numThreadStatesActive < perThreads.length) {
       final ThreadState threadState = perThreads[numThreadStatesActive];
       threadState.lock(); // lock so nobody else will get this ThreadState
+      boolean unlock = true;
+      try {
+        if (threadState.isActive()) {
+          // unreleased thread states are deactivated during DW#close()
       numThreadStatesActive++; // increment will publish the ThreadState
+          assert threadState.perThread != null;
       threadState.perThread.initialize();
+          unlock = false;
       return threadState;
+    }
+        // unlock since the threadstate is not active anymore - we are closed!
+        assert assertUnreleasedThreadStatesInactive();
+        return null;
+      } finally {
+        if (unlock) {
+          // in any case make sure we unlock if we fail 
+          threadState.unlock();
+        }
+      }
     }
     return null;
   }
   
+  private synchronized boolean assertUnreleasedThreadStatesInactive() {
+    for (int i = numThreadStatesActive; i < perThreads.length; i++) {
+      assert perThreads[i].tryLock() : "unreleased threadstate should not be locked";
+      try {
+        assert !perThreads[i].isActive() : "expected unreleased thread state to be inactive";
+      } finally {
+        perThreads[i].unlock();
+      }
+    }
+    return true;
+  }
+  
   /**
    * Deactivate all unreleased threadstates 
    */
