diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 7a779422..b9aed4c4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -59,7 +59,10 @@
 import org.apache.cassandra.thrift.IndexClause;
 import org.apache.cassandra.thrift.IndexExpression;
 import org.apache.cassandra.thrift.IndexOperator;
-import org.apache.cassandra.utils.*;
+import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.LatencyTracker;
+import org.apache.cassandra.utils.Pair;
+import org.apache.cassandra.utils.WrappedRunnable;
 
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean
 {
@@ -275,8 +278,8 @@ public long getMinRowSize()
         long min = 0;
         for (SSTableReader sstable : ssTables)
         {
-            if (min == 0 || sstable.estimatedRowSize.min() < min)
-                min = sstable.estimatedRowSize.min();
+            if (min == 0 || sstable.getEstimatedRowSize().min() < min)
+                min = sstable.getEstimatedRowSize().min();
         }
         return min;
     }
@@ -286,8 +289,8 @@ public long getMaxRowSize()
         long max = 0;
         for (SSTableReader sstable : ssTables)
         {
-            if (sstable.estimatedRowSize.max() > max)
-                max = sstable.estimatedRowSize.max();
+            if (sstable.getEstimatedRowSize().max() > max)
+                max = sstable.getEstimatedRowSize().max();
         }
         return max;
     }
@@ -298,7 +301,7 @@ public long getMeanRowSize()
         long count = 0;
         for (SSTableReader sstable : ssTables)
         {
-            sum += sstable.estimatedRowSize.median();
+            sum += sstable.getEstimatedRowSize().median();
             count++;
         }
         return count > 0 ? sum / count : 0;
@@ -310,7 +313,7 @@ public int getMeanColumns()
         int count = 0;
         for (SSTableReader sstable : ssTables)
         {
-            sum += sstable.estimatedColumnCount.median();
+            sum += sstable.getEstimatedColumnCount().median();
             count++;
         }
         return count > 0 ? (int) (sum / count) : 0;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
index 1127e2cd..079497e3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
@@ -66,8 +66,8 @@
     public final CFMetaData metadata;
     public final IPartitioner partitioner;
 
-    public final EstimatedHistogram estimatedRowSize = new EstimatedHistogram(150);
-    public final EstimatedHistogram estimatedColumnCount = new EstimatedHistogram(114);
+    protected EstimatedHistogram estimatedRowSize = new EstimatedHistogram(150);
+    protected EstimatedHistogram estimatedColumnCount = new EstimatedHistogram(114);
 
     protected SSTable(Descriptor descriptor, CFMetaData metadata, IPartitioner partitioner)
     {
@@ -82,6 +82,16 @@ protected SSTable(Descriptor descriptor, Set<Component> components, CFMetaData m
         this.partitioner = partitioner;
     }
 
+    public EstimatedHistogram getEstimatedRowSize()
+    {
+        return estimatedRowSize;
+    }
+
+    public EstimatedHistogram getEstimatedColumnCount()
+    {
+        return estimatedColumnCount;
+    }
+
     /**
      * We use a ReferenceQueue to manage deleting files that have been compacted
      * and for which no more SSTable references exist.  But this is not guaranteed
