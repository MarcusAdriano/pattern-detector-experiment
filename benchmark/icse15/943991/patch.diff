diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
index ebc61714..a13aa14f 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
@@ -58,26 +58,30 @@
  *   the BundleContext for the bundle should be used to obtain the service.
  * </p>
  */
-public final class ServiceHelper
-{
-  public static class StackFinder extends SecurityManager
-  {
-    public Class<?>[] getClassContext()
-    {
+public final class ServiceHelper {
+    
+    public static class StackFinder extends SecurityManager {
+        public Class<?>[] getClassContext() {
       return super.getClassContext();
     }
   }
 
-  private static class JNDIServiceDamper implements InvocationHandler
-  {
+    private static class JNDIServiceDamper implements InvocationHandler {
     private BundleContext ctx;
+
     private ServicePair pair;
+
     private String interfaceName;
+
     private String filter;
+
     private boolean dynamic;
     
-    public JNDIServiceDamper(BundleContext context, String i, String f, ServicePair service, boolean d)
-    {
+        public JNDIServiceDamper(BundleContext context,
+                                 String i,
+                                 String f,
+                                 ServicePair service,
+                                 boolean d) {
       ctx = context;
       pair = service;
       interfaceName = i;
@@ -85,8 +89,7 @@ public JNDIServiceDamper(BundleContext context, String i, String f, ServicePair
       dynamic = d;
     }
     
-    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
-    {
+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
       if (pair == null || pair.ref.getBundle() == null) {
         if (dynamic) {
             pair = findService(ctx, interfaceName, filter);
@@ -107,8 +110,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
     }
   }
   
-  private static class ServicePair
-  {
+    private static class ServicePair {
     private ServiceReference ref;
     private Object service;
   }
@@ -118,17 +120,16 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
    * @return the bundle context for the caller.
    * @throws NamingException 
    */
-  public static BundleContext getBundleContext(Map<String, Object> env) throws NamingException
-  {
+    public static BundleContext getBundleContext(Map<String, Object> env) throws NamingException {
     BundleContext result = null;
     
     Object bc = env.get(JNDIConstants.BUNDLE_CONTEXT);
     
-    if (bc != null && bc instanceof BundleContext) result = (BundleContext) bc;
-    else {
+        if (bc != null && bc instanceof BundleContext) {
+            result = (BundleContext) bc;
+        } else {
       ClassLoader cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
-        public ClassLoader run()
-        {
+                public ClassLoader run() {
           return Thread.currentThread().getContextClassLoader();
         }
       });
@@ -146,18 +147,21 @@ public ClassLoader run()
       boolean foundLookup = false;
       int i = 0;
       for (; i < stackTrace.length && !!!found; i++) {
-        if (!!!foundLookup && ("lookup".equals(stackTrace[i].getMethodName()) ||
-                               "list".equals(stackTrace[i].getMethodName()) ||
-                               "listBindings".equals(stackTrace[i].getMethodName()))) {
+                if (!!!foundLookup
+                    && ("lookup".equals(stackTrace[i].getMethodName())
+                        || "list".equals(stackTrace[i].getMethodName()) 
+                        || "listBindings".equals(stackTrace[i].getMethodName()))) {
           foundLookup = true;
-        } else if (foundLookup && !!!(stackTrace[i].getClassName().startsWith("org.apache.aries.jndi") ||
-                                stackTrace[i].getClassName().startsWith("javax.naming"))) {
+                } else if (foundLookup
+                           && !!!(stackTrace[i].getClassName().startsWith("org.apache.aries.jndi") 
+                                   || stackTrace[i].getClassName().startsWith("javax.naming"))) {
           found = true;
         }
       }
       
       if (found) {
-        i--; // we need to move back an item because the previous loop leaves us one after where we wanted to be
+                i--; // we need to move back an item because the previous loop
+                     // leaves us one after where we wanted to be
         Set<Integer> classLoadersChecked = new HashSet<Integer>();
         for (; i < classStack.length && result == null; i++) {
           ClassLoader cl = classStack[i].getClassLoader();
@@ -171,21 +175,21 @@ public ClassLoader run()
       }
     }
     
-    if (result == null) throw new NamingException("Unable to find BundleContext");
+        if (result == null) {
+            throw new NamingException("Unable to find BundleContext");
+        }
     
     return result;
   }
 
-  private static BundleContext getBundleContext(final ClassLoader cl2)
-  {
+    private static BundleContext getBundleContext(final ClassLoader cl2) {
     return AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
-      public BundleContext run()
-      {
+            public BundleContext run() {
         ClassLoader cl = cl2;
         BundleContext result = null;
         while (result == null && cl != null) {
           if (cl instanceof BundleReference) {
-            result = ((BundleReference)cl).getBundle().getBundleContext();
+                        result = ((BundleReference) cl).getBundle().getBundleContext();
           } else if (cl != null) {
             cl = cl.getParent();
           }
@@ -196,8 +200,10 @@ public BundleContext run()
     });
   }
 
-  public static Object getService(OsgiName lookupName, String id, boolean dynamicRebind, Map<String, Object> env) throws NamingException
-  {
+    public static Object getService(OsgiName lookupName,
+                                    String id,
+                                    boolean dynamicRebind,
+                                    Map<String, Object> env) throws NamingException {
     Object result = null;
     
     String interfaceName = lookupName.getInterface();
@@ -206,15 +212,19 @@ public static Object getService(OsgiName lookupName, String id, boolean dynamicR
     
     BundleContext ctx = getBundleContext(env);
     
-    if (id != null && filter == null) {
+        if (id != null) {
+            if (filter == null) {
       filter = '(' + Constants.SERVICE_ID + '=' + id + ')';
-    } else if (id != null && filter != null) {
+            } else {
       filter = "(&(" + Constants.SERVICE_ID + '=' + id + ')' + filter + ')'; 
     }
+        }
     
     ServicePair pair = null;
     
-    if (!!!lookupName.isServiceNameBased()) pair = findService(ctx, interfaceName, filter);
+        if (!!!lookupName.isServiceNameBased()) {
+            pair = findService(ctx, interfaceName, filter);
+        }
     
     if (pair == null) {
       interfaceName = null;
@@ -233,36 +243,52 @@ public static Object getService(OsgiName lookupName, String id, boolean dynamicR
     return result;
   }
   
-  private static Object proxy(final String interface1, final String filter, final boolean rebind, 
-                              final BundleContext ctx, final ServicePair pair)
-  {
+    private static Object proxy(final String interface1,
+                                final String filter,
+                                final boolean rebind,
+                                final BundleContext ctx,
+                                final ServicePair pair) {
     return AccessController.doPrivileged(new PrivilegedAction<Object>() {
-      public Object run()
-      {
+            public Object run() {
         return proxyPriviledged(interface1, filter, rebind, ctx, pair);
       }
     });
   }
 
-  private static Object proxyPriviledged(String interface1, String filter, boolean dynamicRebind,
-      BundleContext ctx, ServicePair pair)
-  {
-    Object result;
-    String[] interfaces = (String[]) pair.ref.getProperty(Constants.OBJECTCLASS);
+    private static Object proxyPriviledged(String interface1,
+                                           String filter,
+                                           boolean dynamicRebind,
+                                           BundleContext ctx,
+                                           ServicePair pair) {
+        String[] interfaces = null;   
+        if (interface1 != null) {
+            interfaces = new String [] { interface1 };
+        } else {
+            interfaces = (String[]) pair.ref.getProperty(Constants.OBJECTCLASS);
+        }
     
     List<Class<?>> clazz = new ArrayList<Class<?>>(interfaces.length);
     
-    // We load the interface classes the service is registered under using the defining
-    // bundle. This is ok because the service must be able to see the classes to be 
-    // registered using them. We then check to see if isAssignableTo on the reference
-    // works for the owning bundle and the interface name and only use the interface if
+        // We load the interface classes the service is registered under using
+        // the defining
+        // bundle. This is ok because the service must be able to see the
+        // classes to be
+        // registered using them. We then check to see if isAssignableTo on the
+        // reference
+        // works for the owning bundle and the interface name and only use the
+        // interface if
     // true is returned there.
     
-    // This might seem odd, but equinox and felix return true for isAssignableTo if the
-    // Bundle provided does not import the package. This is under the assumption the
-    // caller will then use reflection. The upshot of doing it this way is that a utility
-    // bundle can be created which centralizes JNDI lookups, but the service will be used
-    // by another bundle. It is true that class space consistency is less safe, but we
+        // This might seem odd, but equinox and felix return true for
+        // isAssignableTo if the
+        // Bundle provided does not import the package. This is under the
+        // assumption the
+        // caller will then use reflection. The upshot of doing it this way is
+        // that a utility
+        // bundle can be created which centralizes JNDI lookups, but the service
+        // will be used
+        // by another bundle. It is true that class space consistency is less
+        // safe, but we
     // are enabling a slightly odd use case anyway.
     
     Bundle serviceProviderBundle = pair.ref.getBundle();
@@ -272,7 +298,9 @@ private static Object proxyPriviledged(String interface1, String filter, boolean
       try {
         Class<?> potentialClass = serviceProviderBundle.loadClass(interfaceName);
         
-        if (pair.ref.isAssignableTo(owningBundle, interfaceName)) clazz.add(potentialClass);
+                if (pair.ref.isAssignableTo(owningBundle, interfaceName)) {
+                    clazz.add(potentialClass);
+                }
       } catch (ClassNotFoundException e) {
       }
     }
@@ -283,15 +311,18 @@ private static Object proxyPriviledged(String interface1, String filter, boolean
     
     InvocationHandler ih = new JNDIServiceDamper(ctx, interface1, filter, pair, dynamicRebind);
     
-    // The ClassLoader needs to be able to load the service interface classes so it needs to be
-    // wrapping the service provider bundle. The class is actually defined on this adapter.
-    
-    result = Proxy.newProxyInstance(new BundleToClassLoaderAdapter(serviceProviderBundle), clazz.toArray(new Class<?>[clazz.size()]), ih);
-    return result;
+        // The ClassLoader needs to be able to load the service interface
+        // classes so it needs to be
+        // wrapping the service provider bundle. The class is actually defined
+        // on this adapter.
+
+        return Proxy.newProxyInstance(new BundleToClassLoaderAdapter(serviceProviderBundle),
+                                      clazz.toArray(new Class<?>[clazz.size()]), 
+                                      ih);
   }
 
-  private static ServicePair findService(BundleContext ctx, String interface1, String filter) throws NamingException
-  {
+    private static ServicePair findService(BundleContext ctx, String interface1, String filter)
+            throws NamingException {
     ServicePair p = null;
     
     try {
@@ -300,8 +331,7 @@ private static ServicePair findService(BundleContext ctx, String interface1, Str
       if (refs != null) {
         // natural order is the exact opposite of the order we desire.
         Arrays.sort(refs, new Comparator<ServiceReference>() {
-          public int compare(ServiceReference o1, ServiceReference o2)
-          {
+                    public int compare(ServiceReference o1, ServiceReference o2) {
             return o2.compareTo(o1);
           }
         });
@@ -319,16 +349,20 @@ public int compare(ServiceReference o1, ServiceReference o2)
       }
       
     } catch (InvalidSyntaxException e) {
-      // If we get an invalid syntax exception we just ignore it. Null will be returned which
-      // is valid and that may result in a NameNotFoundException if that is the right thing to do
+            // If we get an invalid syntax exception we just ignore it. Null
+            // will be returned which
+            // is valid and that may result in a NameNotFoundException if that
+            // is the right thing to do
     }
     
     return p;
   }
 
-  public static ServiceReference[] getServiceReferences(String interface1, String filter,
-      String serviceName, Map<String, Object> env) throws NamingException
-  {
+    public static ServiceReference[] getServiceReferences(String interface1,
+                                                          String filter,
+                                                          String serviceName,
+                                                          Map<String, Object> env)
+            throws NamingException {
     BundleContext ctx = getBundleContext(env);
     ServiceReference[] refs = null;
 
@@ -345,8 +379,7 @@ public int compare(ServiceReference o1, ServiceReference o2)
     if (refs != null) {
       // natural order is the exact opposite of the order we desire.
       Arrays.sort(refs, new Comparator<ServiceReference>() {
-        public int compare(ServiceReference o1, ServiceReference o2)
-        {
+                public int compare(ServiceReference o1, ServiceReference o2) {
           return o2.compareTo(o1);
         }
       });
@@ -355,8 +388,7 @@ public int compare(ServiceReference o1, ServiceReference o2)
     return refs;
   }
 
-  public static Object getService(BundleContext ctx, ServiceReference ref)
-  {
+    public static Object getService(BundleContext ctx, ServiceReference ref) {
     Object service = ctx.getService(ref);
     
     Object result = null;
