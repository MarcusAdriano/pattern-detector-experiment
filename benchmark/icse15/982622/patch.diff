diff --git a/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java b/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java
index 2a0d191c..38c09eb6 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java
@@ -44,6 +44,8 @@
 import org.apache.xml.serialize.TextSerializer;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
+import org.apache.tika.mime.MediaType;
+
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -136,7 +138,8 @@ public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stre
     String streamType = req.getParams().get(ExtractingParams.STREAM_TYPE, null);
     if (streamType != null) {
       //Cache?  Parsers are lightweight to construct and thread-safe, so I'm told
-      parser = config.getParser(streamType.trim().toLowerCase(Locale.ENGLISH));
+      MediaType mt = MediaType.parse(streamType.trim().toLowerCase());
+      parser = config.getParser(mt);
     } else {
       parser = autoDetectParser;
     }
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java b/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java
index 14cfc7ef..7b5f0a68 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java
@@ -16,7 +16,6 @@
  */
 package org.apache.solr.handler.extraction;
 
-
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
 import org.apache.solr.common.util.DateUtil;
@@ -29,16 +28,19 @@
 import org.apache.solr.handler.ContentStreamLoader;
 import org.apache.tika.config.TikaConfig;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.mime.MimeTypeException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 
 
+
 /**
  * Handler for rich documents like PDF or Word or any other file format that Tika handles that need the text to be extracted
  * first from the document.
@@ -49,14 +51,14 @@
   private transient static Logger log = LoggerFactory.getLogger(ExtractingRequestHandler.class);
 
   public static final String CONFIG_LOCATION = "tika.config";
+
   public static final String DATE_FORMATS = "date.formats";
 
   protected TikaConfig config;
 
-
   protected Collection<String> dateFormats = DateUtil.DEFAULT_DATE_FORMATS;
-  protected SolrContentHandlerFactory factory;
 
+  protected SolrContentHandlerFactory factory;
 
   @Override
   public void init(NamedList args) {
@@ -77,8 +79,6 @@ public void inform(SolrCore core) {
         } catch (Exception e) {
           throw new SolrException(ErrorCode.SERVER_ERROR, e);
         }
-      } else {
-        config = TikaConfig.getDefaultConfig();
       }
       NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);
       if (configDateFormats != null && configDateFormats.size() > 0) {
@@ -90,8 +90,15 @@ public void inform(SolrCore core) {
           dateFormats.add(format);
         }
       }
-    } else {
-      config = TikaConfig.getDefaultConfig();
+    }
+    if (config == null) {
+      try {
+        config = getDefaultConfig(core.getResourceLoader().getClassLoader());
+      } catch (MimeTypeException e) {
+        throw new SolrException(ErrorCode.SERVER_ERROR, e);
+      } catch (IOException e) {
+        throw new SolrException(ErrorCode.SERVER_ERROR, e);
+      }
     }
     factory = createFactory();
   }
@@ -100,7 +107,6 @@ protected SolrContentHandlerFactory createFactory() {
     return new SolrContentHandlerFactory(dateFormats);
   }
 
-
   protected ContentStreamLoader newLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {
     return new ExtractingDocumentLoader(req, processor, config, factory);
   }
@@ -125,6 +131,9 @@ public String getSourceId() {
   public String getSource() {
     return "$URL:$";
   }
-}
 
+  private TikaConfig getDefaultConfig(ClassLoader classLoader) throws MimeTypeException, IOException {
+    return new TikaConfig(classLoader);
+  }
 
+}
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/SolrResourceLoader.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/SolrResourceLoader.java
index cea06d44..572e5280 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -672,4 +672,13 @@ void assertAwareCompatibility( Class aware, Object obj )
     }
     throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );
   }
+  /**
+  +   * EXPERT
+  +   * <p/>
+  +   * The underlying class loader.  Most applications will not need to use this.
+  +   * @return The {@link ClassLoader}
+  +   */
+  public ClassLoader getClassLoader() {
+      return classLoader;
+    }
 }
