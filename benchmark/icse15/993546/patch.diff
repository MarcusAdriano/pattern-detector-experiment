diff --git a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
index 08a94cfe..b236bfbc 100644
--- a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
+++ b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
@@ -103,7 +103,7 @@
     private Collection<HoldingDataBeanImpl> holdings;
     
     @OneToOne(fetch=FetchType.LAZY)
-    @JoinColumn(name="PROFILE_USERID", columnDefinition="VARCHAR(250)")
+    @JoinColumn(name="PROFILE_USERID", columnDefinition="VARCHAR(255)")
     private AccountProfileDataBeanImpl profile;
 
     /* Accessor methods for relationship fields are only included for the AccountProfile profileID */
diff --git a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
index 8e1f2e7b..bbcd78ca 100644
--- a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
+++ b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
@@ -43,22 +43,22 @@
 public class AccountProfileDataBeanImpl implements AccountProfileDataBean, java.io.Serializable {
 
 	@Id
-    @Column(name = "USERID", nullable = false, length = 250)
+    @Column(name = "USERID", nullable = false, length = 255)
     private String userID;              /* userID */
     
-	@Column(name = "PASSWD", length = 250)
+	@Column(name = "PASSWD", length = 255)
     private String passwd;              /* password */
     
-	@Column(name = "FULLNAME", length = 250)
+	@Column(name = "FULLNAME", length = 255)
     private String fullName;            /* fullName */
     
-	@Column(name = "ADDRESS", length = 250)
+	@Column(name = "ADDRESS", length = 255)
     private String address;             /* address */
     
-	@Column(name = "email", length = 250)
+	@Column(name = "email", length = 255)
     private String email;               /* email */
     
-	@Column(name = "creditcard", length = 250)
+	@Column(name = "creditcard", length = 255)
 	//why was it credit?
     private String creditCard;          /* creditCard */
     
diff --git a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
index 010126fb..aedd4262 100644
--- a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
+++ b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
@@ -74,7 +74,7 @@
 	private AccountDataBeanImpl account;
 
 	@ManyToOne(fetch = FetchType.EAGER)
-	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(250)")
+	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(255)")
 	private QuoteDataBeanImpl quote;
 
 	public HoldingDataBeanImpl() {
diff --git a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
index 4f54f244..196713e0 100644
--- a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
+++ b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
@@ -70,10 +70,10 @@
 	@Column(name = "ORDERID", nullable = false)
 	private Integer orderID; /* orderID */
 
-	@Column(name = "ORDERTYPE", length = 250)
+	@Column(name = "ORDERTYPE", length = 255)
 	private String orderType; /* orderType (buy, sell, etc.) */
 
-	@Column(name = "ORDERSTATUS", length = 250)
+	@Column(name = "ORDERSTATUS", length = 255)
 	private String orderStatus; /*
 								 * orderStatus (open, processing, completed,
 								 * closed, canceled)
@@ -100,7 +100,7 @@
     private AccountDataBeanImpl account;
 
 	@ManyToOne(fetch = FetchType.EAGER)
-	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(250)")
+	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(255)")
     private QuoteDataBeanImpl quote;
 
 	@OneToOne(fetch = FetchType.LAZY)
diff --git a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
index 3783a8e4..7f30ad64 100644
--- a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
+++ b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
@@ -58,10 +58,10 @@
 	private static final long serialVersionUID = 8476917690278143517L;
 	
 	@Id
-    @Column(name = "SYMBOL", nullable = false, length = 250)
+    @Column(name = "SYMBOL", nullable = false, length = 255)
 	private String symbol;          /* symbol */
     
-	@Column(name = "COMPANYNAME", length = 250)
+	@Column(name = "COMPANYNAME", length = 255)
     private String companyName;     /* companyName */
     
 	@Column(name = "VOLUME", nullable = false)
diff --git a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
index 0544cccd..7a77d571 100644
--- a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
+++ b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
@@ -18,9 +18,10 @@
 
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileReader;
+import java.io.InputStreamReader;
 import java.io.IOException;
 import java.math.BigDecimal;
+import java.net.URL;
 import java.util.ArrayList;
 
 import org.apache.aries.samples.ariestrader.api.TradeDBManager;
@@ -48,14 +49,14 @@
      * Populate a Trade DB using standard out as a log
      */
     public TradeBuildDB() throws Exception {
-        this(new java.io.PrintWriter(System.out), null);
+        this(new java.io.PrintWriter(System.out), false);
     }
 
     /**
      * Re-create the AriesTrader db tables and populate them OR just populate a 
      * AriesTrader DB, logging to the provided output stream
      */
-    public TradeBuildDB(java.io.PrintWriter out, String warPath)
+    public TradeBuildDB(java.io.PrintWriter out, boolean createTables)
         throws Exception {
         String symbol, companyName;
         int errorCount = 0; // Give up gracefully after 10 errors
@@ -73,10 +74,11 @@ public TradeBuildDB(java.io.PrintWriter out, String warPath)
             + "This operation will take several minutes. Please wait...</HEAD>");
         out.println("<BODY>");
 
-        if (warPath != null) {
+        if (createTables) {
             boolean success = false;
             String dbProductName = null;
-            File ddlFile = null;
+            String fileLocation = null;
+            URL ddlFile = null;
             Object[] sqlBuffer = null;
 
             // Find out the Database being used
@@ -95,37 +97,20 @@ public TradeBuildDB(java.io.PrintWriter out, String warPath)
             try {
                 out.println("<BR>TradeBuildDB: **** Database Product detected: "
                     + dbProductName + " ****</BR>");
-                if (warPath.equals("")) { // if empty warPath provided assume this is Aries under the Equinox test harness
-                    ddlFile = new File("tradeDB.sql");                    
-                } else if (dbProductName.startsWith("DB2/")) { // if db is DB2
-                    ddlFile = new File(warPath + File.separatorChar + "dbscripts"
-                        + File.separatorChar + "db2" + File.separatorChar + "Table.ddl");
+                if (dbProductName.startsWith("DB2/")) { // if db is DB2
+                    fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "db2" + File.separatorChar + "Table.ddl";
                 } else if (dbProductName.startsWith("Apache Derby")) { // if db is Derby
-                    ddlFile = new File(warPath + File.separatorChar + "dbscripts"
-                        + File.separatorChar + "derby" + File.separatorChar + "Table.ddl");
+                    fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "derby" + File.separatorChar + "Table.ddl";
                 } else if (dbProductName.startsWith("Oracle")) { // if the Db is Oracle
-                    ddlFile = new File(warPath + File.separatorChar + "dbscripts"
-                        + File.separatorChar + "oracle" + File.separatorChar + "Table.ddl");
+                    fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "oracle" + File.separatorChar + "Table.ddl";
                 } else { // Unsupported "Other" Database
-                    ddlFile = new File(warPath + File.separatorChar + "dbscripts"
-                        + File.separatorChar + "other" + File.separatorChar + "Table.ddl");
+                    fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "other" + File.separatorChar + "Table.ddl";
                     out.println("<BR>TradeBuildDB: **** This Database is "
                         + "unsupported/untested use at your own risk ****</BR>");
                 }
 
-                if (!ddlFile.exists()) {
-                    Log.error("TradeBuildDB: DDL file doesnt exist at path "
-                        + ddlFile.getCanonicalPath()
-                        + " , please provide the file and retry");
-                    out.println("<BR>TradeBuildDB: DDL file doesnt exist at path <I>"
-                        + ddlFile.getCanonicalPath() +
-                        "</I> , please provide the file and retry ****</BR></BODY>");
-                    return;
-                }
-                out.println("<BR>TradeBuildDB: **** The DDL file at path <I>"
-                    + ddlFile.getCanonicalPath()
-                    + "</I> will be used ****</BR>");
-                out.flush();
+                ddlFile = this.getClass().getResource(fileLocation);                
+
             } catch (Exception e) {
                 Log.error(e,
                     "TradeBuildDB: Unable to locate DDL file for the specified database");
@@ -259,15 +244,17 @@ public TradeBuildDB(java.io.PrintWriter out, String warPath)
         out.println("</BODY>");
     }
 
-    public Object[] parseDDLToBuffer(File ddlFile) throws Exception {
+    public Object[] parseDDLToBuffer(URL ddlFile) throws Exception {
         BufferedReader br = null;
+        InputStreamReader ir = null;
         ArrayList sqlBuffer = new ArrayList(30); // initial capacity 30 assuming we have 30 ddl-sql statements to read
 
         try {
             if (Log.doTrace())
                 Log.traceEnter("TradeBuildDB:parseDDLToBuffer - " + ddlFile);
 
-            br = new BufferedReader(new FileReader(ddlFile));
+            ir = new InputStreamReader(ddlFile.openStream());
+            br = new BufferedReader(ir);
             String s;
             String sql = new String();
             while ((s = br.readLine()) != null) {
diff --git a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
index cbb00e62..fedece3d 100644
--- a/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
+++ b/incubator/aries/trunk/samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
@@ -409,15 +409,13 @@ else if (action.equals("resetTrade"))
 			else if (action.equals("buildDB"))
 			{
 				resp.setContentType("text/html");
-                new TradeBuildDB(resp.getWriter(), null);
+                new TradeBuildDB(resp.getWriter(), false);
 				result = "AriesTrader Database Built - " + TradeConfig.getMAX_USERS() + "users created";
 			}
             else if (action.equals("buildDBTables"))
             {
                 resp.setContentType("text/html");
-                String path = getServletConfig().getServletContext().getRealPath("/");
-                if (path == null) path="";  // if there is no real path assume this is Apache Aries in Equinox test harness
-                new TradeBuildDB(resp.getWriter(), path);
+                new TradeBuildDB(resp.getWriter(), true);
             }
 			doConfigDisplay(req, resp, result + "Current AriesTrader Configuration:");
 		}
