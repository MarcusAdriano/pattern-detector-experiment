diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
index 4e87b6c3..bed7b270 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
@@ -191,36 +191,41 @@ void handleDeleteCommand() throws IOException {
       }
     }
 
-    void handleSingleDelete(int ev) throws IOException {
-      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);
-      cmd.commitWithin = commitWithin;
-
-      String id = null;
+    // returns the string value for a primitive value, or null for the null value
+    String getString(int ev) throws IOException {
       switch (ev) {
         case JSONParser.STRING:
-          id = parser.getString();
-          break;
+          return parser.getString();
         case JSONParser.BIGNUMBER:
         case JSONParser.NUMBER:
         case JSONParser.LONG:
-          id = parser.getNumberChars().toString();
-          break;
-        case JSONParser.OBJECT_START:
-          handleDeleteMap(ev);
-          return;
+          return parser.getNumberChars().toString();
+        case JSONParser.BOOLEAN:
+          return Boolean.toString(parser.getBoolean());
+        case JSONParser.NULL:
+          return null;
         default:
           throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
-              "Got: "+JSONParser.getEventString( ev  )
+              "Expected primitive JSON value but got: "+JSONParser.getEventString( ev  )
                   +" at ["+parser.getPosition()+"]" );
       }
+    }
+
 
+    void handleSingleDelete(int ev) throws IOException {
+      if (ev == JSONParser.OBJECT_START) {
+        handleDeleteMap(ev);
+      } else {
+        DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);
+        cmd.commitWithin = commitWithin;
+        String id = getString(ev);
       cmd.setId(id);
       processor.processDelete(cmd);
     }
+    }
 
     void handleDeleteArray(int ev) throws IOException {
       assert ev == JSONParser.ARRAY_START;
-
       for (;;) {
         ev = parser.nextEvent();
         if (ev == JSONParser.ARRAY_END) return;
@@ -240,13 +245,13 @@ void handleDeleteMap(int ev) throws IOException {
           String key = parser.getString();
           if( parser.wasKey() ) {
             if( "id".equals( key ) ) {
-              cmd.setId(parser.getString());
-            }
-            else if( "query".equals(key) ) {
+              cmd.setId(getString(parser.nextEvent()));
+            } else if( "query".equals(key) ) {
               cmd.setQuery(parser.getString());
-            }
-            else if( "commitWithin".equals(key) ) {
-              cmd.commitWithin = Integer.parseInt(parser.getString());
+            } else if( "commitWithin".equals(key) ) {
+              cmd.commitWithin = (int)parser.getLong();
+            } else if( "_version_".equals(key) ) {
+              cmd.setVersion(parser.getLong());
             } else {
               throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown key: "+key+" ["+parser.getPosition()+"]" );
             }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
index aa23e98c..1732869d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
@@ -106,9 +106,9 @@ public static void beforeTests() throws Exception {
       "'optimize': { 'waitSearcher':false, 'openSearcher':false },\n" +
       "\n" +
       "'delete': { 'id':'ID' },\n" +
-      "'delete': { 'id':'ID', 'commitWithin':'500' },\n" +
+      "'delete': { 'id':'ID', 'commitWithin':500 },\n" +
       "'delete': { 'query':'QUERY' },\n" +
-      "'delete': { 'query':'QUERY', 'commitWithin':'500' },\n" +
+      "'delete': { 'query':'QUERY', 'commitWithin':500 },\n" +
       "'rollback': {}\n" +
       "\n" +
       "}\n" +
@@ -278,6 +278,8 @@ public void testDeleteSyntax() throws Exception {
     String str = "{'delete':10"
         +"\n ,'delete':'20'"
         +"\n ,'delete':['30','40']"
+        +"\n ,'delete':{'id':50, '_version_':12345}"
+        +"\n ,'delete':[{'id':60, '_version_':67890}, {'id':70, '_version_':77777}, {'query':'id:80', '_version_':88888}]"
         + "\n}\n";
     str = str.replace('\'', '"');
     SolrQueryRequest req = req();
@@ -287,7 +289,7 @@ public void testDeleteSyntax() throws Exception {
     loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);
 
     // DELETE COMMANDS
-    assertEquals( 4, p.deleteCommands.size() );
+    assertEquals( 8, p.deleteCommands.size() );
     DeleteUpdateCommand delete = p.deleteCommands.get( 0 );
     assertEquals( delete.id, "10" );
     assertEquals( delete.query, null );
@@ -308,6 +310,26 @@ public void testDeleteSyntax() throws Exception {
     assertEquals( delete.query, null );
     assertEquals( delete.commitWithin, -1);
 
+    delete = p.deleteCommands.get( 4 );
+    assertEquals( delete.id, "50" );
+    assertEquals( delete.query, null );
+    assertEquals( delete.getVersion(), 12345L);
+
+    delete = p.deleteCommands.get( 5 );
+    assertEquals( delete.id, "60" );
+    assertEquals( delete.query, null );
+    assertEquals( delete.getVersion(), 67890L);
+
+    delete = p.deleteCommands.get( 6 );
+    assertEquals( delete.id, "70" );
+    assertEquals( delete.query, null );
+    assertEquals( delete.getVersion(), 77777L);
+
+    delete = p.deleteCommands.get( 7 );
+    assertEquals( delete.id, null );
+    assertEquals( delete.query, "id:80" );
+    assertEquals( delete.getVersion(), 88888L);
+
     req.close();
   }
 
