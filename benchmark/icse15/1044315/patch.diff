diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
index 913d5ca9..ff2d062c 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
@@ -986,7 +986,7 @@ private String reproduceWithExtraParams() {
       if (testMethods != null)
         return testMethods;
       testClassesRun.add(getTestClass().getJavaClass().getSimpleName());
-      testMethods = getTestClass().getAnnotatedMethods(Test.class);
+      testMethods = new ArrayList<FrameworkMethod>();
       for (Method m : getTestClass().getJavaClass().getMethods()) {
         // check if the current test's class has methods annotated with @Ignore
         final Ignore ignored = m.getAnnotation(Ignore.class);
@@ -995,11 +995,11 @@ private String reproduceWithExtraParams() {
         }
         // add methods starting with "test"
         final int mod = m.getModifiers();
-        if (m.getName().startsWith("test") &&
-            m.getAnnotation(Test.class) == null &&
+        if (m.getAnnotation(Test.class) != null ||
+            (m.getName().startsWith("test") &&
             !Modifier.isAbstract(mod) &&
             m.getParameterTypes().length == 0 &&
-            m.getReturnType() == Void.TYPE)
+            m.getReturnType() == Void.TYPE))
         {
           if (Modifier.isStatic(mod))
             throw new RuntimeException("Test methods must not be static.");
