diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
index cd99d30a..ae305dd7 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -944,28 +944,27 @@ public void setAsciiStream(int parameterIndex,
         setAsciiStream(parameterIndex,x,(long)length);
     }
 
+    /**
+     * Sets the specified parameter to the given input stream. Deprecated
+     * in JDBC 3.0 and this method will always just throw a feature not
+     * implemented exception.
+     *
+     * @param parameterIndex the first parameter is 1, the second is 2, ...
+     * @param x the java input stream which contains the UNICODE parameter
+     * value
+     * @param length the number of bytes in the stream
+     * @exception SQLException throws feature not implemented.
+     */
     public void setUnicodeStream(int parameterIndex,
                                  java.io.InputStream x,
                                  int length) throws SQLException {
-        try
-        {
-            synchronized (connection_) {
                 if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceDeprecatedEntry(this, "setUnicodeStream", parameterIndex, "<input stream>", length);
-                }
-                parameterIndex = checkSetterPreconditions(parameterIndex);
-                parameterMetaData_.clientParamtertype_[parameterIndex - 1] = java.sql.Types.CLOB;
-                if (x == null) {
-                    setNull(parameterIndex, java.sql.Types.CLOB);
-                    return;
-                }
-                setInput(parameterIndex, new Clob(agent_, x, "UnicodeBigUnmarked", length));
-            }
-        }
-        catch ( SqlException se )
-        {
-            throw se.getSQLException();
+            agent_.logWriter_.traceDeprecatedEntry(this, "setUnicodeStream",
+                                                   parameterIndex,
+                                                   "<input stream>", length);
         }
+
+        throw SQLExceptionFactory.notImplemented ("setUnicodeStream");
     }
 
      /**
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 7d4c6e3d..d9b45551 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -1161,43 +1161,21 @@ public String getString(int column) throws SQLException {
         }
     }
 
-    // Live life on the edge and run unsynchronized
+    /**
+     * Retrieve the value of the specified column as a stream of two-byte
+     * Unicode characters. Deprecated in JDBC 2.0 and this method will just
+     * throw a feature not implemented exception.
+     *
+     * @param column the column to retrieve as a Unicode stream
+     * @exception SQLException throws feature not implemented
+     */
     public java.io.InputStream getUnicodeStream(int column) throws SQLException {
-        try
-        {
-            closeCloseFilterInputStream();
-
             if (agent_.loggingEnabled()) {
-                agent_.logWriter_.traceDeprecatedEntry(this, "getUnicodeStream", column);
+            agent_.logWriter_.traceDeprecatedEntry(this, "getUnicodeStream",
+                                                   column);
             }
 
-            checkGetterPreconditions(column);
-        useStream(column);
-
-            java.io.InputStream result = null;
-            if (wasNonNullSensitiveUpdate(column)) {
-                try {
-                    result = new java.io.ByteArrayInputStream
-                            (((String) agent_.crossConverters_.setObject(java.sql.Types.CHAR,
-                                    updatedColumns_[column - 1])).getBytes("UTF-8"));
-                } catch (java.io.UnsupportedEncodingException e) {
-                    throw new SqlException(agent_.logWriter_, 
-                        new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),
-                        "String", "java.io.ByteArrayInputStream(UTF-8)", e);
-                }
-            } else {
-                result = isNull(column) ? null : cursor_.getUnicodeStream(column);
-            }
-            if (agent_.loggingEnabled()) {
-                agent_.logWriter_.traceDeprecatedExit(this, "getUnicodeStream", result);
-            }
-            setWasNull(column);  // Placed close to the return to minimize risk of thread interference
-            return createCloseFilterInputStream(result);
-        }
-        catch ( SqlException se )
-        {
-            throw se.getSQLException();
-        }
+        throw SQLExceptionFactory.notImplemented ("getUnicodeStream");
     }
 
     // Live life on the edge and run unsynchronized
