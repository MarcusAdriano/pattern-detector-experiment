diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
index 2552f743..c2e53816 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
@@ -953,6 +953,14 @@ protected boolean classConvertableFromTo(Class fromClass, Class toClass, boolean
         //
         if ( fromClass.getName().equals( toClass.getName() ) ) { return true; }
 
+        //
+        // OUT and INOUT args are arrays. Compare the cell types rather than the array types.
+        //
+        if ( fromClass.isArray() && toClass.isArray() )
+        {
+            return classConvertableFromTo( fromClass.getComponentType(), toClass.getComponentType(), mixTypes );
+        }
+
 		// When comparing two candidate methods to see which one is closer,
 		// we want to mix object type and primitive type, because they could
 		// both be chosen in the second pass.  But when deciding if a method
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
index f9f24fa3..d81894dd 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
@@ -1377,4 +1377,29 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public  static  String  varchar_Clob_Clob( String a ) { return "-1"; }
     public  static  String  varchar_Clob_Clob( Object a ) { return "-1"; }
 
+
+    //
+    // Procedure with OUT parameters of wrapper type
+    //
+    public  static  void    wrapperProc
+        (
+         Long[] bigintarg,
+         Boolean[] booleanarg,
+         Double[] doublearg,
+         Double[] floatarg,
+         Integer[] intarg,
+         Float[] realarg,
+         Integer[] smallintarg
+         )
+    {
+        bigintarg[ 0 ] = new Long( 1L );
+        booleanarg[ 0 ] = Boolean.TRUE;
+        doublearg[ 0 ] = new Double( 1.0 );
+        floatarg[ 0 ] = new Double( 1.0 );
+        intarg[ 0 ] = new Integer( 1 );
+        realarg[ 0 ] = new Float( 1.0F );
+        smallintarg[ 0 ] = new Integer( 1 );
+    }
+
+        
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
index f4c578da..2f9124f4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
@@ -24,12 +24,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import java.sql.SQLWarning;
 import java.sql.Blob;
+import java.sql.CallableStatement;
 import java.sql.Clob;
 import java.sql.Connection;
 import java.sql.Statement;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.DriverManager;
+import java.sql.Types;
 import junit.framework.Test;
 import junit.framework.TestSuite;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
@@ -728,6 +730,60 @@ public  void    test_double_unres_Double()
     }
 
         
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // PRODEDURES
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    public  void    test_wrapperOutputArgs()
+        throws Exception
+    {
+        Connection  conn = getConnection();
+        PreparedStatement   ps = conn.prepareStatement
+            (
+             "create procedure wrapperProc\n" +
+             "(\n" +
+             "    out bigintCol bigint,\n" +
+             "    out booleanCol boolean,\n" +
+             "    out doubleCol double,\n" +
+             "    out floatCol float,\n" +
+             "    out intCol int,\n" +
+             "    out realCol real,\n" +
+             "    out smallintCol smallint\n" +
+             ")\n" +
+             "language java\n" +
+             "parameter style java\n" +
+             "no sql\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.wrapperProc'\n"
+             );
+        ps.execute();
+        ps.close();
+
+        CallableStatement cs = conn.prepareCall
+            (
+             "call wrapperProc(  ?, ?, ?, ?, ?, ?, ? )"
+             );
+        int param = 1;
+        cs.registerOutParameter( param++, Types.BIGINT );
+        cs.registerOutParameter( param++, Types.BOOLEAN );
+        cs.registerOutParameter( param++, Types.DOUBLE );
+        cs.registerOutParameter( param++, Types.FLOAT );
+        cs.registerOutParameter( param++, Types.INTEGER );
+        cs.registerOutParameter( param++, Types.REAL );
+        cs.registerOutParameter( param++, Types.SMALLINT );
+
+        cs.execute();
+        param = 1;
+        assertEquals( 1L, cs.getLong( param++ ) );
+        assertEquals( true, cs.getBoolean( param++ ) );
+        assertEquals( 1.0, cs.getDouble( param++ ), 0.0 );
+        assertEquals( 1.0, cs.getDouble( param++ ), 0.0 );
+        assertEquals( 1, cs.getInt( param++ ) );
+        assertEquals( 1.0F, cs.getFloat( param++ ), 0.0F );
+        assertEquals( (short) 1, cs.getShort( param++ ) );
+    }
+    
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
