diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index b57474ed..3c244f0e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -84,6 +84,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.types.RowLocation;
 import org.apache.derby.iapi.util.IdUtil;
+import org.apache.derby.iapi.util.StringUtil;
 import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
 import org.apache.derby.impl.sql.compile.CollectNodesVisitor;
 import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;
@@ -3181,9 +3182,10 @@ private void updateNewColumnToDefault(ColumnDescriptor columnDescriptor)
 		/* Need to use delimited identifiers for all object names
 		 * to ensure correctness.
 		 */
-		String updateStmt = "UPDATE \"" + td.getSchemaName() + "\".\"" +
-							td.getName() + "\" SET \"" +
-							 columnName + "\" = " + defaultText;
+        String updateStmt = "UPDATE " +
+                IdUtil.mkQualifiedName(td.getSchemaName(), td.getName()) +
+                " SET " + IdUtil.normalToDelimited(columnName) + "=" +
+                defaultText;
 
 
 		AlterTableConstantAction.executeUpdate(lcc, updateStmt);
@@ -3207,8 +3209,9 @@ private long getColumnMax(TableDescriptor td, String columnName,
                               long increment)
             throws StandardException {
 		String maxStr = (increment > 0) ? "MAX" : "MIN";
-		String maxStmt = "SELECT " + maxStr + "(\"" + columnName + "\")"  +
-				"FROM \"" + td.getSchemaName() + "\".\"" + td.getName() + "\"";
+        String maxStmt = "SELECT  " + maxStr + "(" +
+                IdUtil.normalToDelimited(columnName) + ") FROM " +
+                IdUtil.mkQualifiedName(td.getSchemaName(), td.getName());
 
 		PreparedStatement ps = lcc.prepareInternalStatement(maxStmt);
 
@@ -3278,13 +3281,14 @@ private void updateNewAutoincrementColumn(String columnName, long initial,
 		//  set ai_column = ConnectionInfo.nextAutoincrementValue(
 		//							schemaName, tableName, 
 		//							columnName)
-		String updateStmt = "UPDATE \"" + td.getSchemaName() + "\".\"" +
-			td.getName() + "\" SET \"" + columnName + "\" = " + 
+        String updateStmt = "UPDATE " +
+            IdUtil.mkQualifiedName(td.getSchemaName(), td.getName()) +
+            " SET " + IdUtil.normalToDelimited(columnName) + "=" +
 			"org.apache.derby.iapi.db.ConnectionInfo::" + 
 			"nextAutoincrementValue(" + 
-			"'" + td.getSchemaName() + "'" + "," +
-			"'" + td.getName() +  "'" + "," +
-			"'" + columnName + "'" + ")";
+            StringUtil.quoteStringLiteral(td.getSchemaName()) + "," +
+            StringUtil.quoteStringLiteral(td.getName()) + "," +
+            StringUtil.quoteStringLiteral(columnName) + ")";
 
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java
index 0c1e2cfb..2f46156e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java
@@ -3435,4 +3435,37 @@ public void testJira4256() throws SQLException{
         
         conn.rollback();
     }
+
+    /**
+     * Test that an ALTER TABLE statement that adds a new column with a
+     * default value, doesn't fail if the schema name, table name or column
+     * name contains a double quote character.
+     */
+    public void testDerby5157_addColumnWithDefaultValue() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.execute("create schema \"\"\"\"");
+        s.execute("create table \"\"\"\".\"\"\"\" (x int)");
+
+        // The following statement used to fail with a syntax error.
+        s.execute("alter table \"\"\"\".\"\"\"\" " +
+                  "add column \"\"\"\" int default 42");
+    }
+
+    /**
+     * Test that an ALTER TABLE statement that changes the increment value of
+     * an identity column, doesn't fail if the schema name, table name or
+     * column name contains a double quote character.
+     */
+    public void testDerby5157_changeIncrement() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.execute("create schema \"\"\"\"");
+        s.execute("create table \"\"\"\".\"\"\"\"" +
+                  "(\"\"\"\" int generated always as identity)");
+
+        // The following statement used to fail with a syntax error.
+        s.execute("alter table \"\"\"\".\"\"\"\" " +
+                  "alter column \"\"\"\" set increment by 2");
+    }
 }
