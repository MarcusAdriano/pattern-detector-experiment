diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index 31962e66..033ffbe8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -1609,6 +1609,16 @@ public void expandAllsAndNameColumns(FromList fromList)
 					insertElementAt(allExpansion.elementAt(inner), index + inner);
 				}
 
+				// Move the index position to account for the removals and the
+				// insertions. Should be positioned on the last column in the
+				// expansion to prevent double processing of the columns.
+				// DERBY-4410: If the expansion is empty, this will move the
+				// position one step back because the * was removed and nothing
+				// was inserted, so all columns to the right of the current
+				// position have been moved one position to the left. If we
+				// don't adjust the position, we end up skipping columns.
+				index += (allExpansion.size() - 1);
+
 				// If the rc was a "*", we need to set the initial list size
 				// to the number of columns that are actually returned to
 				// the user.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
index 520f4e9d..1f22b2f6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
@@ -652,5 +652,11 @@ public void testUsingClause() throws SQLException {
                 "select x.* from t1 x left join t1 y using (a,b,c)");
         assertStatementError(NO_COLUMNS, s,
                 "select x.* from t1 x right join t1 y using (a,b,c)");
+
+        // DERBY-4410: If X.* expanded to no columns, the result column that
+        // immediately followed it (Y.*) would not be expanded, which eventually
+        // resulted in a NullPointerException.
+        assertStatementError(NO_COLUMNS, s,
+                "select x.*, y.* from t1 x inner join t1 y using (a, b, c)");
     }
 }
