diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/locks/LockSet.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/locks/LockSet.java
index d03edba7..f6d4d472 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/locks/LockSet.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/locks/LockSet.java
@@ -230,11 +230,18 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
 
 
 			// five posible cases
-			// i)   timeout -1, deadlock -1 -> just wait forever, no deadlock check
-			// ii)  timeout >= 0, deadlock -1 -> just wait for timeout, no deadlock check
-			// iii) timeout -1, deadlock >= 0 -> wait for deadlock, then deadlock check, then infinite timeout
-			// iv)  timeout >=0, deadlock < timeout -> wait for deadlock, then deadlock check, then wait for (timeout - deadlock)
-			// v)   timeout >=0, deadlock >= timeout -> just wait for timeout, no deadlock check
+			// i)   timeout -1, deadlock -1         -> 
+            //          just wait forever, no deadlock check
+			// ii)  timeout >= 0, deadlock -1       -> 
+            //          just wait for timeout, no deadlock check
+			// iii) timeout -1, deadlock >= 0       -> 
+            //          wait for deadlock, then deadlock check, 
+            //          then infinite timeout
+			// iv)  timeout >=0, deadlock < timeout -> 
+            //          wait for deadlock, then deadlock check, 
+            //          then wait for (timeout - deadlock)
+			// v)   timeout >=0, deadlock >= timeout -> 
+            //          just wait for timeout, no deadlock check
 
 
 			if (deadlockTimeout >= 0) {
@@ -274,7 +281,6 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
 		try {
 forever:	for (;;) {
 
-
 			byte wakeupReason = waitingLock.waitForGrant(actualTimeout);
 			
 			ActiveLock nextWaitingLock = null;
@@ -287,43 +293,55 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
 	
 				synchronized (this) {
 
-					if (control.isGrantable(control.firstWaiter() == waitingLock,
-							compatabilitySpace, qualifier)) {
+                        if (control.isGrantable(
+                                control.firstWaiter() == waitingLock,
+                                compatabilitySpace, 
+                                qualifier)) {
 
 						// Yes, we are granted, put us on the granted queue.
 						control.grant(waitingLock);
 
 						// Remove from the waiting queue & get next waiter
-						nextWaitingLock = control.getNextWaiter(waitingLock, true, this);
+                            nextWaitingLock = 
+                                control.getNextWaiter(waitingLock, true, this);
+
+                            // this is where we need to re-obtain the latch, 
+                            // it's safe to call this lockObject() which will 
+                            // get the synchronization we already hold, because
+                            // java allows nested synchronization and it will 
+                            // be released automatically if we have to wait
 
-						// this is where we need to re-obtain the latch, it's 
-						// safe to call this lockObject() which will get the 
-						// synchronization we already hold, because java allows
-						// nested synchronization and it will be released 
-						// automatically if we have to wait
 						if (latch != null) {
 							lockObject(
 								compatabilitySpace, latch.getLockable(), 
-								latch.getQualifier(), C_LockFactory.WAIT_FOREVER,
+                                    latch.getQualifier(), 
+                                    C_LockFactory.WAIT_FOREVER,
 								(Latch) null);
 						}
 						return waitingLock;
 					}
 
-					waitingLock.clearPotentiallyGranted(); // try again later
+                        // try again later
+                        waitingLock.clearPotentiallyGranted(); 
 
-					willQuitWait = (wakeupReason != Constants.WAITING_LOCK_GRANT);
+                        willQuitWait = 
+                            (wakeupReason != Constants.WAITING_LOCK_GRANT);
 
 					StandardException deadlockException = null;
 
-					if (((wakeupReason == Constants.WAITING_LOCK_IN_WAIT) && deadlockWait) ||
+                        if (((wakeupReason == Constants.WAITING_LOCK_IN_WAIT) &&
+                                    deadlockWait) ||
 						(wakeupReason == Constants.WAITING_LOCK_DEADLOCK))
 					{
 
-						// check for a deadlock, even if we were woken up to because
-						// we were selected as a victim we still check because the situation
-						// may have changed.
-						deadlockData = Deadlock.look(factory, this, control, waitingLock, wakeupReason);
+                            // check for a deadlock, even if we were woken up 
+                            // because we were selected as a victim we still 
+                            // check because the situation may have changed.
+                            deadlockData = 
+                                Deadlock.look(
+                                    factory, this, control, waitingLock, 
+                                    wakeupReason);
+
 						if (deadlockData == null) {
 							// we don't have a deadlock
 							deadlockWait = false;
@@ -336,22 +354,24 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
 						}
 					}
 
-					nextWaitingLock = control.getNextWaiter(waitingLock, willQuitWait, this);
+                        nextWaitingLock = 
+                            control.getNextWaiter(
+                                waitingLock, willQuitWait, this);
 
 
 					// If we were not woken by another then we have
 					// timed out. Either deadlock out or timeout
 					if (willQuitWait) {
 
-						// Even if we deadlocked trying to get the lock, still 
-                        // reget the latch so that client's need not know 
-                        // latch was released.
+                            // Even if we deadlocked trying to get the lock, 
+                            // still reget the latch so that client's need not
+                            // know latch was released.
 
 						if (latch != null) {
 							lockObject(
 								compatabilitySpace, latch.getLockable(), 
-								latch.getQualifier(), C_LockFactory.WAIT_FOREVER,
-								(Latch) null);
+                                    latch.getQualifier(), 
+                                    C_LockFactory.WAIT_FOREVER, (Latch) null);
 						}
 
                         if (SanityManager.DEBUG) 
@@ -372,21 +392,25 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
                             }
                         }
                         
-                        if(!deadlockWait)
+                            if (deadlockTrace && (deadlockData == null))
                         {
-                            if( deadlockTrace )
-                            {   // want a copy of the LockTable and the time
+                                // if ending lock request due to lock timeout
+                                // want a copy of the LockTable and the time,
+                                // in case of deadlock deadlockData has the
+                                // info we need.
                                 currentTime = System.currentTimeMillis(); 
-                                timeoutLockTable = factory.makeVirtualLockTable();
-                            }
+                                timeoutLockTable = 
+                                    factory.makeVirtualLockTable();
                         }
 					}
 
 				} // synchronized block
 
 				// need to do this outside of the synchronized block as the
-                // message text building (timeouts and deadlocks) may involve
-                // getting locks to look up table names from identifiers.
+                    // message text building (timeouts and deadlocks) may 
+                    // involve getting locks to look up table names from 
+                    // identifiers.
+
                 if (willQuitWait)
                 {
                     if (SanityManager.DEBUG)
@@ -394,20 +418,29 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
                         if (lockDebug != null)
                         {
                             String type = 
-                                (deadlockWait ? "deadlock:" : "timeout:"); 
+                                    ((deadlockData != null) ? 
+                                         "deadlock:" : "timeout:"); 
 
                             SanityManager.DEBUG_PRINT(
                                 type,
-                                "wait on lockitem caused " + type + lockDebug);
+                                    "wait on lockitem caused " + type + 
+                                    lockDebug);
                         }
 
                     }
 
-                    if(!deadlockWait)
+                        if (deadlockData == null)
                     {
-                        if( deadlockTrace )
-                        {   //Turn ON derby.locks.deadlockTrace to build the lockTable.
-                            throw Timeout.buildException(waitingLock, timeoutLockTable, currentTime);
+                            // ending wait because of lock timeout.
+
+                            if (deadlockTrace)
+                            {   
+                                // Turn ON derby.locks.deadlockTrace to build 
+                                // the lockTable.
+                                    
+                                
+                                throw Timeout.buildException(
+                                    waitingLock, timeoutLockTable, currentTime);
                         }
                         else
                         {
@@ -418,18 +451,19 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
 			                throw se;
                         }
                     }
-					if (deadlockData != null) {
-						throw Deadlock.buildException(factory, deadlockData);
+                        else 
+                        {
+                            // ending wait because of lock deadlock.
+
+                            throw Deadlock.buildException(
+                                    factory, deadlockData);
 					}
                 }
-                    
-
 			} finally {
 				if (nextWaitingLock != null) {
 					nextWaitingLock.wakeUp(Constants.WAITING_LOCK_GRANT);
 					nextWaitingLock = null;
 				}
-
 			}
 
 			if (actualTimeout != C_LockFactory.WAIT_FOREVER) {
@@ -457,9 +491,9 @@ public Lock lockObject(Object compatabilitySpace, Lockable ref, Object qualifier
 	} finally {
 		if (deadlockTrace)
 		{
-				// I am out of the wait state, either I got my lock or I am the
-				// one who is going to detect the deadlock, don't need the
-				// stack trace anymore.
+                    // I am out of the wait state, either I got my lock or I 
+                    // am the one who is going to detect the deadlock, don't 
+                    // need the stack trace anymore.
 				lockTraces.remove(waitingLock);
 		}
 	}
@@ -565,7 +599,9 @@ void setDeadlockTrace(boolean val)
 		deadlockTrace = val;
 
 		if (val && lockTraces == null)
+        {
 			lockTraces = new Hashtable();
+        }
 		else if (!val && lockTraces != null)
 		{
 			lockTraces = null;
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java
index 6ce3f42c..eaa9a200 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java
@@ -45,7 +45,7 @@
 {
     private static boolean debug_system_procedures_created = false;
 
-    abstract void testList(Connection conn) throws SQLException;
+    abstract public void testList(Connection conn) throws SQLException;
 
     void runTests(String[] argv)
         throws Throwable
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_derby715.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_derby715.java
index e69de29b..03de2a8d 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_derby715.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_derby715.java
@@ -0,0 +1,282 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
+
+   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.storetests;
+
+
+import org.apache.derby.iapi.services.sanity.SanityManager;
+
+import org.apache.derbyTesting.functionTests.tests.store.BaseTest;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.derby.tools.ij;
+
+
+/**
+
+The purpose of this test is to reproduce JIRA DERBY-715:
+
+Sometimes a deadlock would be incorrectly reported as a deadlock.  The
+bug seemed to always reproduce at least once if the following test
+was run (at least one of the iterations in the loop would get an
+incorrect timeout vs. a deadlock).
+
+**/
+
+public class st_derby715 extends BaseTest
+{
+    static boolean verbose = false;
+
+    public st_derby715()
+    {
+    }
+
+
+    /**
+     * Create the base table that the 2 threads will use.
+     **/
+    private static void setup()
+        throws Exception
+    {
+        Connection conn = ij.startJBMS();
+        Statement  stmt = conn.createStatement();
+
+        // drop table, ignore table does not exist error.
+
+        try
+        {
+            stmt.executeUpdate("drop table a");
+        }
+        catch (Exception e)
+        {
+            // ignore drop table errors.
+        }
+
+        try
+        {
+            stmt.executeUpdate("drop table b");
+        }
+        catch (Exception e)
+        {
+            // ignore drop table errors.
+        }
+
+        stmt.executeUpdate("create table a (a integer)");
+        stmt.executeUpdate("create table b (b integer)");
+        stmt.close();
+        conn.commit();
+        conn.close();
+    }
+
+    public static class t1 implements Runnable
+    {
+        String[] argv;
+
+        public t1(String[] argv)
+        {
+            argv = argv;
+        }
+        public void run()
+        {
+            try
+            {
+                ij.getPropertyArg(argv); 
+                Connection conn = ij.startJBMS();
+                conn.setAutoCommit(false);
+                conn.setTransactionIsolation(
+                        Connection.TRANSACTION_SERIALIZABLE);
+
+                Statement stmt = conn.createStatement();
+                if (verbose)
+                    System.out.println("Thread 1 before selecting from b");
+
+                // get row locks on all rows in b
+                ResultSet rs = stmt.executeQuery("select * from b");
+
+                if (verbose)
+                    System.out.println("Thread 1 before selecting next from b");
+
+                while (rs.next())
+                {
+                    if (verbose)
+                        System.out.println("Thread t1 got " + rs.getString(1));
+                }
+                if (verbose)
+                    System.out.println("Thread 1 after all next.");
+
+                // give thread 2 a chance to catch up.
+                Thread.sleep(500);
+
+                if (verbose)
+                    System.out.println("Thread 1 before inserting into a...");
+
+                // now wait on lock inserting row into table a - either 
+                // thread 1 or thread 2 should get a deadlock, NOT a timeout.
+                stmt.executeUpdate("insert into a values(1)");
+
+                if (verbose)
+                    System.out.println("Thread 1 after inserting into a...");
+
+                conn.rollback();
+            }
+            catch (SQLException sqle)
+            {
+                if (sqle.getSQLState().equals("40001"))
+                {
+                    // only expected exception is a deadlock, we should
+                    // get at least one deadlock, so print it to output.
+                    // Don't know which thread will get the deadlock, so
+                    // don't label it.
+                    System.out.println("Got a Deadlock.");
+                }
+                else
+                {
+                    org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
+                        System.out, sqle);
+                    sqle.printStackTrace(System.out);
+                }
+                if (verbose)
+                    System.out.println("Thread 1 got exception:\n");
+            }
+            catch (Exception ex)
+            {
+                System.out.println("got unexpected exception: " + ex);
+            }
+        }
+    }
+
+    public static class t2 implements Runnable
+    {
+        String[] argv;
+        public t2 (String[] argv)
+        {
+            argv = argv;
+        }
+        public void run()
+        {
+            try
+            {
+                ij.getPropertyArg(argv); 
+                Connection conn = ij.startJBMS();
+                conn.setAutoCommit(false);
+                conn.setTransactionIsolation(
+                        Connection.TRANSACTION_SERIALIZABLE);
+
+                Statement stmt = conn.createStatement();
+
+                if (verbose)
+                    System.out.println("Thread 2 before selecting from a");
+
+                ResultSet rs = stmt.executeQuery("select * from a");
+
+                if (verbose)
+                    System.out.println("Thread 2 before selecting next from a");
+
+                while (rs.next())
+                {
+                    if (verbose)
+                        System.out.println("Thread t2 got " + rs.getString(1));
+                }
+
+                if (verbose)
+                    System.out.println("Thread 2 after all next.");
+
+
+                Thread.sleep(500);
+                
+                if (verbose)
+                    System.out.println("Thread 2 before inserting into b");
+
+                stmt.executeUpdate("insert into b values(2)");
+
+                if (verbose)
+                    System.out.println("Thread 2 after inserting into b");
+
+                conn.rollback();
+            }
+            catch (SQLException sqle)
+            {
+                if (verbose)
+                    System.out.println("Thread 1 got exception:\n");
+
+                if (sqle.getSQLState().equals("40001"))
+                {
+                    // only expected exception is a deadlock, we should
+                    // get at least one deadlock, so print it to output.
+                    // Don't know which thread will get the deadlock, so
+                    // don't label it.
+                    System.out.println("Got a Deadlock.");
+                }
+                else
+                {
+                    org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
+                        System.out, sqle);
+                    sqle.printStackTrace(System.out);
+                }
+            }
+            catch (Exception ex)
+            {
+                System.out.println("got unexpected exception: " + ex);
+            }
+        }
+    }
+    
+
+    public void testList(Connection conn)
+        throws SQLException
+    {
+    }
+
+    public static void main(String[] argv) 
+        throws Throwable
+    {
+        ij.getPropertyArg(argv); 
+
+        st_derby715 setup_ddl = new st_derby715();
+        setup_ddl.setup();
+        setup_ddl = null;
+
+        {
+            for (int i = 0; i < 5; i++)
+            {
+                Thread test1 = new Thread(new t1(argv));
+                Thread test2 = new Thread(new t2(argv));
+                test1.start();
+                test2.start();
+                test1.join();
+                test2.join();
+            }
+        }
+        /*
+        catch (SQLException sqle)
+        {
+			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
+                System.out, sqle);
+			sqle.printStackTrace(System.out);
+		}
+        */
+    }
+}
