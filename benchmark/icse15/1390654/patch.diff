diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleRequirement.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleRequirement.java
index 5b0b0566..290e8070 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleRequirement.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleRequirement.java
@@ -25,11 +25,14 @@
 	public static final String DIRECTIVE_FILTER = BundleNamespace.REQUIREMENT_FILTER_DIRECTIVE;
 	public static final String NAMESPACE = BundleNamespace.BUNDLE_NAMESPACE;
 	
-	private final Map<String, String> directives = new HashMap<String, String>(1);
+	private final Map<String, String> directives;
 	private final Resource resource;
 	
 	public RequireBundleRequirement(
 			RequireBundleHeader.Clause clause, Resource resource) {
+		directives = new HashMap<String, String>(clause.getDirectives().size() + 1);
+		for (Directive directive : clause.getDirectives())
+			directives.put(directive.getName(), directive.getValue());
 		StringBuilder builder = new StringBuilder("(&(")
 				.append(NAMESPACE).append('=')
 				.append(clause.getSymbolicName()).append(')');
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
index bd133a4e..a9a699ac 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
@@ -24,15 +24,15 @@
 public class RequireCapabilityRequirement extends AbstractRequirement {
 	public static final String DIRECTIVE_FILTER = Namespace.REQUIREMENT_FILTER_DIRECTIVE;
 	
-	private final Map<String, String> directives = new HashMap<String, String>(1);
+	private final Map<String, String> directives;
 	private final String namespace;
 	private final Resource resource;
 	
 	public RequireCapabilityRequirement(RequireCapabilityHeader.Clause clause, Resource resource) {
 		namespace = clause.getNamespace();
-		Directive filter = clause.getDirective(RequireCapabilityHeader.Clause.DIRECTIVE_FILTER);
-		if (filter != null)
-			directives.put(DIRECTIVE_FILTER, filter.getValue());
+		directives = new HashMap<String, String>(clause.getDirectives().size());
+		for (Directive directive : clause.getDirectives())
+			directives.put(directive.getName(), directive.getValue());
 		this.resource = resource;
 	}
 
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/OptionalDependenciesTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/OptionalDependenciesTest.java
index e3f5e1d0..c7d53e2e 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/OptionalDependenciesTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/OptionalDependenciesTest.java
@@ -13,6 +13,8 @@
  */
 package org.apache.aries.subsystem.itests;
 
+import static org.junit.Assert.fail;
+
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
@@ -35,6 +37,8 @@
 	/*
 	 * Bundle-SymbolicName: bundle.a.jar
 	 * Import-Package: x;resolution:=optional
+	 * Require-Bundle: x;resolution:=optional
+	 * Require-Capability: x;resolution:=optional
 	 */
 	private static final String BUNDLE_A = "bundle.a.jar";
 	
@@ -53,6 +57,8 @@ private static void createApplicationAManifest() throws IOException {
 	private static void createBundleA() throws IOException {
 		Map<String, String> headers = new HashMap<String, String>();
 		headers.put(Constants.IMPORT_PACKAGE, "x;resolution:=optional");
+		headers.put(Constants.REQUIRE_BUNDLE, "x;resolution:=optional");
+		headers.put(Constants.REQUIRE_CAPABILITY, "x;resolution:=optional");
 		createBundle(BUNDLE_A, headers);
 	}
 	
@@ -66,20 +72,26 @@ public static void createTestFiles() throws Exception {
 		createdTestFiles = true;
 	}
 	
-	public void setUp() throws Exception {
-		super.setUp();
-		registerRepositoryService(BUNDLE_A);
-	}
-	
 	@Test
 	public void testOptionalImportPackage() throws Exception {
+		try {
 		Subsystem subsystem = installSubsystemFromFile(APPLICATION_A);
 		try {
+				try {
 			startSubsystem(subsystem);
-			stopSubsystem(subsystem);
+				}
+				catch (Exception e) {
+					e.printStackTrace();
+					fail("Missing optional requirements must not cause subsystem start failure");
+				}
 		}
 		finally {
-			uninstallSubsystemSilently(subsystem);
+				stopAndUninstallSubsystemSilently(subsystem);
+			}
+		}
+		catch (Exception e) {
+			e.printStackTrace();
+			fail("Missing optional requirements must not cause subsystem installation failure");
 		}
 	}
 }
