diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
index 5217d83a..eb7e3cf3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
@@ -63,6 +63,8 @@
     // map of column family id to mutations for that column family.
     protected Map<Integer, ColumnFamily> modifications_ = new HashMap<Integer, ColumnFamily>();
 
+    private byte[] preserializedBuffer = null;
+
     public RowMutation(String table, ByteBuffer key)
     {
         table_ = table;
@@ -212,10 +214,7 @@ public Message makeRowMutationMessage() throws IOException
 
     public Message makeRowMutationMessage(StorageService.Verb verb) throws IOException
     {
-        ByteArrayOutputStream bos = new ByteArrayOutputStream();
-        DataOutputStream dos = new DataOutputStream(bos);
-        serializer().serialize(this, dos);
-        return new Message(FBUtilities.getLocalAddress(), verb, bos.toByteArray());
+        return new Message(FBUtilities.getLocalAddress(), verb, getSerializedBuffer());
     }
 
     public static RowMutation getRowMutationFromMutations(String keyspace, ByteBuffer key, Map<String, List<Mutation>> cfmap)
@@ -239,37 +238,17 @@ public static RowMutation getRowMutationFromMutations(String keyspace, ByteBuffe
         return rm;
     }
     
-    public static RowMutation getRowMutation(String table, ByteBuffer key, Map<String, List<ColumnOrSuperColumn>> cfmap)
-    {
-        RowMutation rm = new RowMutation(table, key);
-        for (Map.Entry<String, List<ColumnOrSuperColumn>> entry : cfmap.entrySet())
-        {
-            String cfName = entry.getKey();
-            for (ColumnOrSuperColumn cosc : entry.getValue())
-            {
-                if (cosc.column == null)
+    private synchronized byte[] getSerializedBuffer() throws IOException
                 {
-                    assert cosc.super_column != null;
-                    for (org.apache.cassandra.thrift.Column column : cosc.super_column.columns)
+        if (preserializedBuffer == null)
                     {
-                        rm.add(new QueryPath(cfName, cosc.super_column.name, column.name), column.value, column.timestamp, column.ttl);
+            ByteArrayOutputStream bout = new ByteArrayOutputStream();
+            DataOutputStream dout = new DataOutputStream(bout);
+            RowMutation.serializer().serialize(this, dout);
+            dout.close();
+            preserializedBuffer = bout.toByteArray();
                     }
-                }
-                else
-                {
-                    assert cosc.super_column == null;
-                    rm.add(new QueryPath(cfName, null, cosc.column.name), cosc.column.value, cosc.column.timestamp, cosc.column.ttl);
-                }
-            }
-        }
-        return rm;
-    }
-    
-    public DataOutputBuffer getSerializedBuffer() throws IOException
-    {
-        DataOutputBuffer buffer = new DataOutputBuffer();
-        RowMutation.serializer().serialize(this, buffer);
-        return buffer;
+        return preserializedBuffer;
     }
 
     public String toString()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 7cc81bc2..a915e876 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -379,7 +379,7 @@ public Row getRow(QueryFilter filter) throws IOException
      * Once this happens the data associated with the individual column families
      * is also written to the column family store's memtable.
     */
-    public void apply(RowMutation mutation, Object serializedMutation, boolean writeCommitLog) throws IOException
+    public void apply(RowMutation mutation, byte[] serializedMutation, boolean writeCommitLog) throws IOException
     {
         List<Memtable> memtablesToFlush = Collections.emptyList();
         if (logger.isDebugEnabled())
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
index 553c10eb..27b6f84b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
@@ -392,7 +392,7 @@ private CommitLogSegment currentSegment()
      * of any problems. This way we can assume that the subsequent commit log
      * entry will override the garbage left over by the previous write.
     */
-    public void add(RowMutation rowMutation, Object serializedRow) throws IOException
+    public void add(RowMutation rowMutation, byte[] serializedRow) throws IOException
     {
         executor.add(new LogRecordAdder(rowMutation, serializedRow));
     }
@@ -494,9 +494,9 @@ void sync() throws IOException
     class LogRecordAdder implements Callable, Runnable
     {
         final RowMutation rowMutation;
-        final Object serializedRow;
+        final byte[] serializedRow;
 
-        LogRecordAdder(RowMutation rm, Object serializedRow)
+        LogRecordAdder(RowMutation rm, byte[] serializedRow)
         {
             this.rowMutation = rm;
             this.serializedRow = serializedRow;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
index 1f0b212f..ee80e674 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
@@ -75,7 +75,7 @@ private static BufferedRandomAccessFile createWriter(String file) throws IOExcep
         return new BufferedRandomAccessFile(file, "rw", 128 * 1024);
     }
 
-    public CommitLogSegment.CommitLogContext write(RowMutation rowMutation, Object serializedRow) throws IOException
+    public CommitLogSegment.CommitLogContext write(RowMutation rowMutation, byte[] serializedRow) throws IOException
     {
         long currentPosition = -1L;
         try
@@ -106,23 +106,13 @@ private static BufferedRandomAccessFile createWriter(String file) throws IOExcep
             }
 
             // write mutation, w/ checksum on the size and data
-            byte[] bytes;
             Checksum checksum = new CRC32();
-            if (serializedRow instanceof DataOutputBuffer)
-            {
-                bytes = ((DataOutputBuffer) serializedRow).getData();
-            }
-            else
-            {
-                assert serializedRow instanceof byte[];
-                bytes = (byte[]) serializedRow;
-            }
 
-            checksum.update(bytes.length);
-            logWriter.writeInt(bytes.length);
+            checksum.update(serializedRow.length);
+            logWriter.writeInt(serializedRow.length);
             logWriter.writeLong(checksum.getValue());
-            logWriter.write(bytes);
-            checksum.update(bytes, 0, bytes.length);
+            logWriter.write(serializedRow);
+            checksum.update(serializedRow, 0, serializedRow.length);
             logWriter.writeLong(checksum.getValue());
 
             return cLogCtx;
