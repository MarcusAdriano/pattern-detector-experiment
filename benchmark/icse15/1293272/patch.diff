diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
index 35df24fb..2df57c64 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
@@ -17,16 +17,16 @@
 
 package org.apache.solr.handler.component;
 
-import java.text.ParseException;
-import java.util.Date;
-import java.util.Map;
-import java.util.HashMap;
-
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.schema.*;
 
+import java.text.ParseException;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Factory class for creating instance of {@link org.apache.solr.handler.component.StatsValues}
  */
@@ -64,7 +64,7 @@ public static StatsValues createStatsValues(FieldType fieldType) {
 /**
  * Abstract implementation of {@link org.apache.solr.handler.component.StatsValues} that provides the default behavior
  * for most StatsValues implementations.
- *
+ * <p/>
  * There are very few requirements placed on what statistics concrete implementations should collect, with the only required
  * statistics being the minimum and maximum values.
  */
@@ -230,7 +230,7 @@ public void addFacet(String facetName, Map<String, StatsValues> facetValues) {
   protected abstract void addTypeSpecificStats(NamedList<Object> res);
 }
 
- /**
+/**
  * Implementation of StatsValues that supports Double values
  */
 class NumericStatsValues extends AbstractStatsValues<Number> {
@@ -248,8 +248,8 @@ public NumericStatsValues(FieldType fieldType) {
    * {@inheritDoc}
    */
   public void updateTypeSpecificStats(NamedList stv) {
-    sum += ((Number)stv.get("sum")).doubleValue();
-    sumOfSquares += ((Number)stv.get("sumOfSquares")).doubleValue();
+    sum += ((Number) stv.get("sum")).doubleValue();
+    sumOfSquares += ((Number) stv.get("sumOfSquares")).doubleValue();
   }
 
   /**
@@ -351,10 +351,10 @@ public void updateTypeSpecificStats(Date value, int count) {
    * {@inheritDoc}
    */
   protected void updateMinMax(Date min, Date max) {
-    if(this.min==null || this.min.after(min)) {
+    if (this.min == null || this.min.after(min)) {
       this.min = min;
     }
-    if(this.max==null || this.max.before(min)) {
+    if (this.max == null || this.max.before(min)) {
       this.max = max;
     }
   }
@@ -381,8 +381,10 @@ protected Date toTypedValue(String value) {
    */
   protected void addTypeSpecificStats(NamedList<Object> res) {
     res.add("sum", new Date(sum));
+    if (count > 0) {
     res.add("mean", new Date(sum / count));
   }
+  }
 }
 
 /**
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
index 9132d274..bf773acc 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
@@ -16,14 +16,6 @@
  * limitations under the License.
  */
 
-import java.util.Date;
-import java.util.Locale;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.TimeZone;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.MapSolrParams;
 import org.apache.solr.common.params.StatsParams;
@@ -32,6 +24,10 @@
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.util.AbstractSolrTestCase;
 
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.*;
+
 
 /**
  * Statistics Component Test
@@ -55,9 +51,9 @@ public void setUp() throws Exception {
   }
 
   public void testStats() throws Exception {
-    for (String f : new String[] {
-            "stats_i","stats_l","stats_f","stats_d",
-            "stats_ti","stats_tl","stats_tf","stats_td"
+    for (String f : new String[]{
+        "stats_i", "stats_l", "stats_f", "stats_d",
+        "stats_ti", "stats_tl", "stats_tf", "stats_td"
     }) {
       doTestFieldStatisticsResult(f);
       doTestFieldStatisticsMissingResult(f);
@@ -65,9 +61,9 @@ public void testStats() throws Exception {
       doTestFacetStatisticsMissingResult(f);
     }
 
-    for (String f : new String[] {"stats_ii", // plain int
+    for (String f : new String[]{"stats_ii", // plain int
             "stats_is",    // sortable int
-            "stats_tis","stats_tfs","stats_tls","stats_tds"  // trie fields
+        "stats_tis", "stats_tfs", "stats_tls", "stats_tds"  // trie fields
                                   }) {
       doTestMVFieldStatisticsResult(f);
     }
@@ -81,7 +77,7 @@ public void doTestFieldStatisticsResult(String f) throws Exception {
     assertU(adoc("id", "4", f, "-40"));
     assertU(commit());
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f)
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f)
             , "//double[@name='min'][.='-40.0']"
             , "//double[@name='max'][.='-10.0']"
             , "//double[@name='sum'][.='-100.0']"
@@ -102,7 +98,7 @@ public void doTestMVFieldStatisticsResult(String f) throws Exception {
     assertU(adoc("id", "5", "active_s", "false"));
     assertU(commit());
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f)
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f)
             , "//double[@name='min'][.='-100.0']"
             , "//double[@name='max'][.='200.0']"
             , "//double[@name='sum'][.='9.0']"
@@ -113,7 +109,7 @@ public void doTestMVFieldStatisticsResult(String f) throws Exception {
             , "//double[@name='stddev'][.='87.08852228787508']"
     );
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s")
             , "//double[@name='min'][.='-100.0']"
             , "//double[@name='max'][.='200.0']"
             , "//double[@name='sum'][.='9.0']"
@@ -124,7 +120,7 @@ public void doTestMVFieldStatisticsResult(String f) throws Exception {
             , "//double[@name='stddev'][.='87.08852228787508']"
     );
 
-    assertQ("test value for active_s=true", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=true", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s")
             , "//lst[@name='true']/double[@name='min'][.='-100.0']"
             , "//lst[@name='true']/double[@name='max'][.='200.0']"
             , "//lst[@name='true']/double[@name='sum'][.='70.0']"
@@ -135,7 +131,7 @@ public void doTestMVFieldStatisticsResult(String f) throws Exception {
             , "//lst[@name='true']/double[@name='stddev'][.='128.16005617976296']"
     );
 
-    assertQ("test value for active_s=false", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s", "indent","true")
+    assertQ("test value for active_s=false", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "indent", "true")
             , "//lst[@name='false']/double[@name='min'][.='-40.0']"
             , "//lst[@name='false']/double[@name='max'][.='10.0']"
             , "//lst[@name='false']/double[@name='sum'][.='-61.0']"
@@ -203,7 +199,6 @@ public void testFieldStatisticsResultsDateField() throws Exception {
   }
 
 
-
   public void doTestFieldStatisticsMissingResult(String f) throws Exception {
     assertU(adoc("id", "1", f, "-10"));
     assertU(adoc("id", "2", f, "-20"));
@@ -211,7 +206,7 @@ public void doTestFieldStatisticsMissingResult(String f) throws Exception {
     assertU(adoc("id", "4", f, "-40"));
     assertU(commit());
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f)
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f)
             , "//double[@name='min'][.='-40.0']"
             , "//double[@name='max'][.='-10.0']"
             , "//double[@name='sum'][.='-70.0']"
@@ -230,7 +225,7 @@ public void doTestFacetStatisticsResult(String f) throws Exception {
     assertU(adoc("id", "4", f, "40", "active_s", "false"));
     assertU(commit());
 
-    assertQ("test value for active_s=true", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s","indent","true")
+    assertQ("test value for active_s=true", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "indent", "true")
             , "//lst[@name='true']/double[@name='min'][.='10.0']"
             , "//lst[@name='true']/double[@name='max'][.='20.0']"
             , "//lst[@name='true']/double[@name='sum'][.='30.0']"
@@ -241,7 +236,7 @@ public void doTestFacetStatisticsResult(String f) throws Exception {
             , "//lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
     );
 
-    assertQ("test value for active_s=false", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=false", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s")
             , "//lst[@name='false']/double[@name='min'][.='30.0']"
             , "//lst[@name='false']/double[@name='max'][.='40.0']"
             , "//lst[@name='false']/double[@name='sum'][.='70.0']"
@@ -260,7 +255,7 @@ public void doTestFacetStatisticsMissingResult(String f) throws Exception {
 	    assertU(adoc("id", "4", f, "40", "active_s", "false"));
 	    assertU(commit());
 
-	    assertQ("test value for active_s=true", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=true", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s")
 	            , "//lst[@name='true']/double[@name='min'][.='10.0']"
 	            , "//lst[@name='true']/double[@name='max'][.='20.0']"
 	            , "//lst[@name='true']/double[@name='sum'][.='30.0']"
@@ -271,7 +266,7 @@ public void doTestFacetStatisticsMissingResult(String f) throws Exception {
 	            , "//lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
 	    );
 
-	    assertQ("test value for active_s=false", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=false", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s")
 	            , "//lst[@name='false']/double[@name='min'][.='40.0']"
 	            , "//lst[@name='false']/double[@name='max'][.='40.0']"
 	            , "//lst[@name='false']/double[@name='sum'][.='40.0']"
@@ -282,4 +277,62 @@ public void doTestFacetStatisticsMissingResult(String f) throws Exception {
 	            , "//lst[@name='false']/double[@name='stddev'][.='0.0']"
 	    );
 	  }
+
+  public void testFieldStatisticsResultsNumericFieldAlwaysMissing() throws Exception {
+    SolrCore core = h.getCore();
+    assertU(adoc("id", "1"));
+    assertU(adoc("id", "2"));
+    assertU(adoc("id", "3"));
+    assertU(adoc("id", "4"));
+    assertU(commit());
+
+    Map<String, String> args = new HashMap<String, String>();
+    args.put(CommonParams.Q, "*:*");
+    args.put(StatsParams.STATS, "true");
+    args.put(StatsParams.STATS_FIELD, "active_i");
+    args.put("indent", "true");
+    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));
+
+    assertQ("test string statistics values", req,
+        "//null[@name='active_i'][.='']");
+  }
+
+  public void testFieldStatisticsResultsStringFieldAlwaysMissing() throws Exception {
+    SolrCore core = h.getCore();
+    assertU(adoc("id", "1"));
+    assertU(adoc("id", "2"));
+    assertU(adoc("id", "3"));
+    assertU(adoc("id", "4"));
+    assertU(commit());
+
+    Map<String, String> args = new HashMap<String, String>();
+    args.put(CommonParams.Q, "*:*");
+    args.put(StatsParams.STATS, "true");
+    args.put(StatsParams.STATS_FIELD, "active_s");
+    args.put("indent", "true");
+    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));
+
+    assertQ("test string statistics values", req,
+        "//null[@name='active_s'][.='']");
+  }
+
+  //SOLR-3160
+  public void testFieldStatisticsResultsDateFieldAlwaysMissing() throws Exception {
+    SolrCore core = h.getCore();
+
+    assertU(adoc("id", "1"));
+    assertU(adoc("id", "2"));
+    assertU(adoc("id", "3"));
+    assertU(commit());
+
+    Map<String, String> args = new HashMap<String, String>();
+    args.put(CommonParams.Q, "*:*");
+    args.put(StatsParams.STATS, "true");
+    args.put(StatsParams.STATS_FIELD, "active_dt");
+    args.put("indent", "true");
+    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));
+
+    assertQ("test string statistics values", req,
+        "//null[@name='active_dt'][.='']");
+  }
 }
