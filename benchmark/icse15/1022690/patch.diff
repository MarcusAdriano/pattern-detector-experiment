diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
index 203bb905..11b578a5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
@@ -21,8 +21,10 @@
 import java.io.FileReader;
 import java.io.IOException;
 import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Properties;
-import java.util.StringTokenizer;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -35,24 +37,21 @@
 /**
  * Used to determine if two IP's are in the same datacenter or on the same rack.
  * <p/>
- * Based on a properties file configuration.
+ * Based on a properties file in the following format:
+ *
+ * 10.0.0.13=DC1:RAC2
+ * 10.21.119.14=DC3:RAC2
+ * 10.20.114.15=DC2:RAC2
+ * default=DC1:r1
  */
 public class PropertyFileSnitch extends AbstractNetworkTopologySnitch
 {
-    /**
-     * A list of properties with keys being host:port and values being datacenter:rack
-     */
-    private volatile Properties hostProperties;
+    private static final Logger logger = LoggerFactory.getLogger(PropertyFileSnitch.class);
 
-    /**
-     * The default rack property file to be read.
-     */
-    private static String RACK_PROPERTY_FILENAME = "cassandra-rack.properties";
+    private static final String RACK_PROPERTY_FILENAME = "cassandra-topology.properties";
 
-    /**
-     * Reference to the logger.
-     */
-    private static Logger logger_ = LoggerFactory.getLogger(PropertyFileSnitch.class);
+    private static volatile Map<InetAddress, String[]> endpointMap;
+    private static volatile String[] defaultDCRack;
 
     public PropertyFileSnitch() throws ConfigurationException
     {
@@ -75,20 +74,13 @@ protected void runMayThrow() throws ConfigurationException
      */
     public String[] getEndpointInfo(InetAddress endpoint)
     {
-        String key = endpoint.getHostAddress();
-        String value = hostProperties.getProperty(key);
+        String[] value = endpointMap.get(endpoint);
         if (value == null)
         {
-            logger_.error("Could not find end point information for {}, will use default.", key);
-            value = hostProperties.getProperty("default");
-        }
-        StringTokenizer st = new StringTokenizer(value, ":");
-        if (st.countTokens() < 2)
-        {
-            logger_.error("Value for " + key + " is invalid: " + value);
-            return new String[] { "default", "default" };
+            logger.debug("Could not find end point information for {}, will use default", endpoint);
+            return defaultDCRack;
         }
-        return new String[] { st.nextToken(), st.nextToken() };
+        return value;
     }
 
     /**
@@ -115,24 +107,51 @@ public String getRack(InetAddress endpoint)
 
     public void reloadConfiguration() throws ConfigurationException
     {
-        hostProperties = resourceToProperties(RACK_PROPERTY_FILENAME);
-        clearEndpointCache();
+        HashMap<InetAddress, String[]> reloadedMap = new HashMap<InetAddress, String[]>();
+
+        String rackPropertyFilename = FBUtilities.resourceToFile(RACK_PROPERTY_FILENAME);
+        Properties properties = new Properties();
+        try
+        {
+            properties.load(new FileReader(rackPropertyFilename));
+        }
+        catch (IOException e)
+        {
+            throw new ConfigurationException("Unable to read " + RACK_PROPERTY_FILENAME, e);
     }
 
-    public static Properties resourceToProperties(String filename) throws ConfigurationException
+        for (Map.Entry<Object, Object> entry : properties.entrySet())
     {
-        String rackPropertyFilename = FBUtilities.resourceToFile(filename);
+            String key = (String) entry.getKey();
+            String value = (String) entry.getValue();
 
-        Properties localHostProperties;
+            if (key.equals("default"))
+            {
+                defaultDCRack = value.split(":");
+                if (defaultDCRack.length < 2)
+                    defaultDCRack = new String[] { "default", "default" };
+            }
+            else
+            {
+                InetAddress host;
+                String hostString = key.replace("/", "");
         try
         {
-            localHostProperties = new Properties();
-            localHostProperties.load(new FileReader(rackPropertyFilename));
+                    host = InetAddress.getByName(hostString);
         }
-        catch (IOException e)
+                catch (UnknownHostException e)
         {
-            throw new ConfigurationException("Unable to load " + rackPropertyFilename, e);
+                    throw new ConfigurationException("Unknown host " + hostString, e);
+                }
+                String[] token = value.split(":");
+                if (token.length < 2)
+                    token = new String[] { "default", "default" };
+                reloadedMap.put(host, token);
+        }
         }
-        return localHostProperties;
+
+        logger.debug("loaded network topology {}", FBUtilities.toString(reloadedMap));
+        endpointMap = reloadedMap;
+        clearEndpointCache();
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index feba5b37..c8f79e57 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -676,9 +676,15 @@ public static String toString(Map<?,?> map)
         StringBuilder sb = new StringBuilder("{");
         for (Map.Entry<?,?> entry : map.entrySet())
         {
-            sb.append(entry.getKey()).append(": ").append(entry.getValue()).append(", ");
+            sb.append(toString(entry.getKey())).append(": ").append(toString(entry.getValue())).append(", ");
         }
         sb.append("}");
         return sb.toString();
     }
+
+    /** slow! */
+    private static Object toString(Object o)
+    {
+        return o.getClass().isArray() ? Arrays.toString((Object[]) o) : o.toString();
+    }
 }
