diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/ErrorLogReader.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/ErrorLogReader.java
index 13d5023c..e7445ed0 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/ErrorLogReader.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/ErrorLogReader.java
@@ -89,7 +89,7 @@ find the timestamp (timestampConstant) of interest in the error log.
 
 	// Variables for current row
 	private String line;
-	private int gmtIndex;
+	private int endTimestampIndex;
 	private int threadIndex;
 	private int xidIndex;
 	private int lccidIndex;
@@ -97,7 +97,7 @@ find the timestamp (timestampConstant) of interest in the error log.
 	private int drdaidIndex;
 
 
-	private static final String GMT_STRING = " GMT";
+	private static final String END_TIMESTAMP = " Thread";
 	private static final String PARAMETERS_STRING = "Parameters:";
 	private static final String BEGIN_THREAD_STRING = "[";
 	private static final String END_THREAD_STRING = "]";
@@ -178,7 +178,7 @@ public boolean next() throws SQLException
 				return false;
 			}
 
-			gmtIndex = line.indexOf(GMT_STRING);
+            endTimestampIndex = line.indexOf( END_TIMESTAMP );
 			threadIndex = line.indexOf(BEGIN_THREAD_STRING);
 			xidIndex = line.indexOf(BEGIN_XID_STRING);
 			lccidIndex = line.indexOf(BEGIN_XID_STRING, xidIndex + 1);
@@ -191,7 +191,7 @@ public boolean next() throws SQLException
 				continue;
 			}
 
-			if (gmtIndex != -1 && threadIndex != -1  && xidIndex != -1 && 
+			if (endTimestampIndex != -1 && threadIndex != -1  && xidIndex != -1 && 
 				databaseIndex != -1)
 			{
 				return true;
@@ -234,7 +234,7 @@ public String getString(int columnNumber)
 		switch (columnNumber)
 		{
 			case 1:
-				return line.substring(0, gmtIndex);
+				return line.substring(0, endTimestampIndex);
 
 			case 2:
 				return line.substring(threadIndex + 1, line.indexOf(END_THREAD_STRING));
@@ -316,7 +316,7 @@ public boolean wasNull()
 	/* MetaData
 	 */
 	
-	// column1: TS varchar(26) not null
+	// column1: TS varchar(29) not null
 	// column2: THREADID varchar(40) not null
 	// column3: XID  varchar(15) not null
 	// column4: LCCID  varchar(15) not null
@@ -324,7 +324,7 @@ public boolean wasNull()
 	// column6: DRDAID varchar(50) nullable
 	// column5: LOGTEXT VARCHAR(max) not null
 	private static final ResultColumnDescriptor[] columnInfo = {
-		EmbedResultSetMetaData.getResultColumnDescriptor("TS", Types.VARCHAR, false, 26),
+		EmbedResultSetMetaData.getResultColumnDescriptor("TS", Types.VARCHAR, false, 29),
 		EmbedResultSetMetaData.getResultColumnDescriptor("THREADID", Types.VARCHAR, false, 40),
 		EmbedResultSetMetaData.getResultColumnDescriptor("XID", Types.VARCHAR, false, 15),
 		EmbedResultSetMetaData.getResultColumnDescriptor("LCCID", Types.VARCHAR, false, 15),
diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/StatementDuration.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/StatementDuration.java
index 11e0c0e3..c3947916 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/StatementDuration.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/diag/StatementDuration.java
@@ -26,7 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.FileInputStream;
-
+import java.text.SimpleDateFormat;
 import java.util.Hashtable;
 import java.util.Enumeration;
 import java.util.Properties;
@@ -86,13 +86,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	// Variables for current row
 	private String line;
-	private int gmtIndex;
+	private int endTimestampIndex;
 	private int threadIndex;
 	private int xidIndex;
 	private int lccidIndex;
 	private String[] currentRow;
 
-	private static final String GMT_STRING = " GMT";
+	private static final String END_TIMESTAMP = " Thread";
 	private static final String BEGIN_THREAD_STRING = "[";
 	private static final String END_THREAD_STRING = "]";
 	private static final String BEGIN_XID_STRING = "= ";
@@ -170,12 +170,12 @@ public boolean next() throws SQLException
 				return false;
 			}
 
-			gmtIndex = line.indexOf(GMT_STRING);
+            endTimestampIndex = line.indexOf( END_TIMESTAMP );
 			threadIndex = line.indexOf(BEGIN_THREAD_STRING);
 			xidIndex = line.indexOf(BEGIN_XID_STRING);
 			lccidIndex = line.indexOf(BEGIN_XID_STRING, xidIndex + 1);
 
-			if (gmtIndex != -1 && threadIndex != -1)
+			if (endTimestampIndex != -1 && threadIndex != -1 && xidIndex != -1)
 			{
 				/* Build a row */
 				String[] newRow = new String[6];
@@ -198,9 +198,9 @@ public boolean next() throws SQLException
 				currentRow = (String[]) previousRow;
 				
 				/* Figure out the duration. */
-				Timestamp endTs = Timestamp.valueOf(newRow[0]);
+				Timestamp endTs = stringToTimestamp( newRow[0] );
 				long end = endTs.getTime() + endTs.getNanos() / 1000000;
-				Timestamp startTs = Timestamp.valueOf(currentRow[0]);
+				Timestamp startTs = stringToTimestamp( currentRow[0] );
 				long start = startTs.getTime() + startTs.getNanos() / 1000000;
 				currentRow[5] = Long.toString(end - start);
 
@@ -208,6 +208,47 @@ public boolean next() throws SQLException
 			}
 		}
 	}
+    // Turn a string into a Timestamp
+    private Timestamp   stringToTimestamp( String raw ) throws SQLException
+    {
+        //
+        // We have to handle two timestamp formats.
+        //
+        // 1) Logged timestamps look like this before 10.7 and the fix introduced by DERBY-4752:
+        //
+        //     2006-12-15 16:14:58.280 GMT
+        //
+        // 2) From 10.7 onward, logged timestamps look like this:
+        //
+        //     Fri Aug 26 09:28:00 PDT 2011
+        //
+        String  trimmed = raw.trim();
+
+        // if we're dealing with a pre-10.7 timestamp
+        if ( !Character.isDigit( trimmed.charAt( trimmed.length() -1 ) ) )
+        {
+            // strip off the trailing timezone, which Timestamp does not expect
+
+            trimmed = trimmed.substring( 0, trimmed.length() - 4 );
+            
+            return Timestamp.valueOf( trimmed );
+        }
+        else
+        {
+            //
+            // From 10.7 onward, the logged timestamp was formatted by Date.toString().
+            //
+            SimpleDateFormat    sdf = new SimpleDateFormat( "EEE MMM dd HH:mm:ss zzz yyyy" );
+
+            try {
+                return new Timestamp( sdf.parse( trimmed ).getTime() );
+            }
+            catch (Exception e)
+            {
+                throw new SQLException( e.getMessage() );
+            }
+        }
+    }
 
 	/**
 		@see java.sql.ResultSet#close
@@ -250,7 +291,7 @@ private String setupColumn(int columnNumber)
 		switch (columnNumber)
 		{
 			case 1:
-				return line.substring(0, gmtIndex);
+				return line.substring(0, endTimestampIndex);
 
 			case 2:
 				return line.substring(threadIndex + 1, line.indexOf(END_THREAD_STRING));
@@ -331,7 +372,7 @@ public boolean wasNull()
 	*/
 	private static final ResultColumnDescriptor[] columnInfo = {
 
-		EmbedResultSetMetaData.getResultColumnDescriptor("TS",        Types.VARCHAR, false, 26),
+		EmbedResultSetMetaData.getResultColumnDescriptor("TS",        Types.VARCHAR, false, 29),
 		EmbedResultSetMetaData.getResultColumnDescriptor("THREADID",  Types.VARCHAR, false, 80),
 		EmbedResultSetMetaData.getResultColumnDescriptor("XID",       Types.VARCHAR, false, 15),
 		EmbedResultSetMetaData.getResultColumnDescriptor("LCCID",     Types.VARCHAR, false, 10),
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
index 9413e94b..5d39fbbf 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
@@ -26,6 +26,7 @@
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.SupportFilesSetup;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 import java.sql.ResultSet;
@@ -33,6 +34,9 @@
 import java.sql.CallableStatement;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
+import java.sql.Timestamp;
+import java.text.SimpleDateFormat;
+import java.util.Properties;
 
 public final class SysDiagVTIMappingTest extends BaseJDBCTestCase {
 
@@ -50,8 +54,16 @@ public SysDiagVTIMappingTest(String name)
     public static Test suite()
     {
         TestSuite suite = new TestSuite("Diagnostic VTI Table Mappings");
-        suite.addTest(TestConfiguration.
-            defaultSuite(SysDiagVTIMappingTest.class));
+
+        Test    defaultSetup = TestConfiguration.defaultSuite( SysDiagVTIMappingTest.class );
+
+        // turn on statement logging so there will be something in the error log
+        // to run these vtis against
+        Properties sysprops = new Properties();
+        sysprops.put( "derby.language.logStatementText", "true" );
+        Test    verboseTest = new SystemPropertyTestSetup ( defaultSetup, sysprops );
+
+        suite.addTest( verboseTest );
 
         /* Some of the VTIs that are tested in this class require a derby.log
          * file.  We have a test log file stored in the tests/lang directory,
@@ -393,7 +405,7 @@ public void testStatementDuration() throws Exception
         JDBC.assertColumnNames(rs, expColNames);
         String [][] expRS = new String [][]
         {
-            {"2006-12-15 16:14:58.280", "main,5,main", "1111", "0",
+            {"2006-12-15 16:14:58.280 GMT", "main,5,main", "1111", "0",
                 "(DATABASE = ugh), (DRDAID = null), Cleanup action starting",
                 "0"}
         };
@@ -413,7 +425,7 @@ public void testStatementDuration() throws Exception
         JDBC.assertColumnNames(rs, expColNames);
         expRS = new String [][]
         {
-            {"2006-12-15 16:14:58.280", "main,5,main", "1111", "0",
+            {"2006-12-15 16:14:58.280 GMT", "main,5,main", "1111", "0",
                 "(DATABASE = ugh), (DRDAID = null), Cleanup action starting",
                 "0"}
         };
@@ -450,9 +462,9 @@ public void testErrorLogReader() throws Exception
         JDBC.assertColumnNames(rs, expColNames);
         String [][] expRS = new String [][]
         {
-            {"2006-12-15 16:14:58.280", "main,5,main", "1111", "0", "ugh",
+            {"2006-12-15 16:14:58.280 GMT", "main,5,main", "1111", "0", "ugh",
                 "null", "Cleanup action starting"},
-            {"2006-12-15 16:14:58.280", "main,5,main", "1111", "0", "ugh",
+            {"2006-12-15 16:14:58.280 GMT", "main,5,main", "1111", "0", "ugh",
                 "null", "Failed Statement is: select * from oops"}
         };
         
@@ -471,9 +483,9 @@ public void testErrorLogReader() throws Exception
         JDBC.assertColumnNames(rs, expColNames);
         expRS = new String [][]
         {
-            {"2006-12-15 16:14:58.280", "main,5,main", "1111", "0", "ugh",
+            {"2006-12-15 16:14:58.280 GMT", "main,5,main", "1111", "0", "ugh",
                 "null", "Cleanup action starting"},
-            {"2006-12-15 16:14:58.280", "main,5,main", "1111", "0", "ugh",
+            {"2006-12-15 16:14:58.280 GMT", "main,5,main", "1111", "0", "ugh",
                 "null", "Failed Statement is: select * from oops"}
         };
 
@@ -703,6 +715,37 @@ public void testContainedRoles() throws SQLException
         st.close();
     }
 
+    /**
+     * Test date formatting in the vtis which read the error log. This attempts
+     * to keep us from breaking these vtis if the format of logged timestamps
+     * changes. See DERBY-5391.
+     */
+    public  void    test_5391() throws Exception
+    {
+        Statement   st = createStatement();
+
+        ResultSet   rs1 = st.executeQuery( "select * from table (syscs_diag.error_log_reader( )) as t1" );
+        vetTimestamp( rs1 );
+        rs1.close();
+
+        ResultSet   rs2 = st.executeQuery( "select * from table (syscs_diag.statement_duration()) as t1" );
+        vetTimestamp( rs2 );
+        rs2.close();
+
+        st.close();
+    }
+    private void    vetTimestamp( ResultSet rs ) throws Exception
+    {
+        assertTrue( rs.next() );
+
+        String  timestampString = rs.getString( 1 ).trim();
+
+        SimpleDateFormat    sdf = new SimpleDateFormat( "EEE MMM dd HH:mm:ss zzz yyyy" );
+        Timestamp   timestamp = new Timestamp( sdf.parse( timestampString ).getTime() );
+
+        println( timestamp.toString() );
+    }
+
     /* All statements in this method should fail because a VTI table-
      * mapping that takes arguments can only be used as part of the TABLE 
      * constructor.  Any other uses of, or attempts to modify, such a
