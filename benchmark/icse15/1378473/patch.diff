diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index 092650fa..e445017a 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -44,8 +44,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CopyOnWriteArraySet;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.xml.XMLConstants;
 import javax.xml.transform.Source;
 import javax.xml.transform.stream.StreamSource;
@@ -92,13 +90,10 @@
     private final ConcurrentHashMap<URI, CopyOnWriteArraySet<NamespaceHandler>> handlers =
                         new ConcurrentHashMap<URI, CopyOnWriteArraySet<NamespaceHandler>>();
 
-    // Access to the LRU schemas map is synchronized on the lock object
-    private final Map<Map<URI, NamespaceHandler>, Reference<Schema>> schemas =
+    // Access to the LRU schemas map is synchronized on itself
+    private final LRUMap<Map<URI, NamespaceHandler>, Reference<Schema>> schemas =
                         new LRUMap<Map<URI, NamespaceHandler>, Reference<Schema>>(10);
 
-    // Lock to protect access to the schema list
-    private final ReadWriteLock lock = new ReentrantReadWriteLock();
-
     // Access to this factory is synchronized on itself
     private final SchemaFactory schemaFactory =
                         SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
@@ -249,30 +244,17 @@ private Schema getSchema(Map<URI, NamespaceHandler> handlers,
         // Find a schema that can handle all the requested namespaces
         // If it contains additional namespaces, it should not be a problem since
         // they won't be used at all
-        lock.readLock().lock();
-        try {
-            Schema schema = getExistingSchema(handlers);
-            if (schema != null) {
-                return schema;
-            }
-        } finally {
-            lock.readLock().unlock();
-        }
-        // Create schema
-        lock.writeLock().lock();
-        try {
             Schema schema = getExistingSchema(handlers);
             if (schema == null) {
+            // Create schema
                 schema = createSchema(handlers, bundle, schemaMap);
                 cacheSchema(handlers, schema);
             }
             return schema;
-        } finally {
-            lock.writeLock().unlock();
-        }
     }
 
     private Schema getExistingSchema(Map<URI, NamespaceHandler> handlers) {
+        synchronized (schemas) {
         for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
             boolean found = true;
             for (URI uri : handlers.keySet()) {
@@ -287,32 +269,24 @@ private Schema getExistingSchema(Map<URI, NamespaceHandler> handlers) {
         }
         return null;
     }
+    }
 
     private void removeSchemasFor(NamespaceHandler handler) {
+        synchronized (schemas) {
         List<Map<URI, NamespaceHandler>> keys = new ArrayList<Map<URI, NamespaceHandler>>();
-        lock.readLock().lock();
-        try {
             for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
                 if (key.values().contains(handler)) {
                     keys.add(key);
                 }
             }
-        } finally {
-            lock.readLock().unlock();
-        }
-        if (!keys.isEmpty()) {
-            lock.writeLock().lock();
-            try {
                 for (Map<URI, NamespaceHandler> key : keys) {
                     schemas.remove(key);
                 }
-            } finally {
-                lock.writeLock().unlock();
-            }
         }
     }
 
     private void cacheSchema(Map<URI, NamespaceHandler> handlers, Schema schema) {
+        synchronized (schemas) {
         // Remove schemas that are fully included
         for (Iterator<Map<URI, NamespaceHandler>> iterator = schemas.keySet().iterator(); iterator.hasNext();) {
             Map<URI, NamespaceHandler> key = iterator.next();
@@ -331,6 +305,7 @@ private void cacheSchema(Map<URI, NamespaceHandler> handlers, Schema schema) {
         // Add our new schema
         schemas.put(handlers, new SoftReference<Schema>(schema));
     }
+    }
 
     private Schema createSchema(Map<URI, NamespaceHandler> handlers,
                                 Bundle bundle,
