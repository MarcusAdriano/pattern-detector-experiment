diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index fe6515c2..67e5c1cb 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -189,6 +189,8 @@
     // do not affect the resultSet after it has been created
     private int maxRows_;
 
+    private boolean[] streamUsedFlags_;
+    
     //---------------------constructors/finalizer---------------------------------
 
     protected ResultSet(Agent agent,
@@ -263,6 +265,8 @@ boolean nextX() throws SqlException {
         // discard all previous updates when moving the cursor
         resetUpdatedColumns();
 
+	unuseStreams();
+
         // for TYPE_FORWARD_ONLY ResultSet, just call cursor.next()
         if (resultSetType_ == java.sql.ResultSet.TYPE_FORWARD_ONLY) {
             // cursor is null for singleton selects that do not return data.
@@ -919,7 +923,10 @@ public String getString(int column) throws SqlException {
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getBinaryStream", column);
         }
+	
         checkGetterPreconditions(column);
+	useStream(column);
+
         java.io.InputStream result = null;
         if (wasNonNullSensitiveUpdate(column)) {
             result = new java.io.ByteArrayInputStream((byte[]) agent_.crossConverters_.setObject(java.sql.Types.BINARY, updatedColumns_[column - 1]));
@@ -941,7 +948,10 @@ public String getString(int column) throws SqlException {
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getAsciiStream", column);
         }
+	
         checkGetterPreconditions(column);
+	useStream(column);
+
         java.io.InputStream result = null;
         if (wasNonNullSensitiveUpdate(column)) {
 		
@@ -965,7 +975,10 @@ public String getString(int column) throws SqlException {
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceDeprecatedEntry(this, "getUnicodeStream", column);
         }
+	
         checkGetterPreconditions(column);
+	useStream(column);
+	
         java.io.InputStream result = null;
         if (wasNonNullSensitiveUpdate(column)) {
             try {
@@ -993,7 +1006,10 @@ public String getString(int column) throws SqlException {
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getCharacterStream", column);
         }
+	
         checkGetterPreconditions(column);
+	useStream(column);
+	
         java.io.Reader result = null;
         if (wasNonNullSensitiveUpdate(column)) {
             result = new java.io.StringReader
@@ -1571,7 +1587,9 @@ public void beforeFirst() throws SqlException {
     }
 
     private void beforeFirstX() throws SqlException {
+        
         resetRowsetFlags();
+	unuseStreams();
 
         // this method has no effect if the result set has no rows.
         // only send cntqry to position the cursor before first if
@@ -1602,6 +1620,7 @@ public void afterLast() throws SqlException {
 
     private void afterLastX() throws SqlException {
         resetRowsetFlags();
+	unuseStreams();
 
         // this method has no effect if the result set has no rows.
         // only send cntqry to position the cursor after last if
@@ -1642,6 +1661,7 @@ private boolean firstX() throws SqlException {
         resetUpdatedColumns();
 
         resetRowsetFlags();
+	unuseStreams();
 
         // if first row is not in the current rowset, fetch the first rowset from the server.
         // rowIsInCurrentRowset with orientation first will always return false for dynamic cursors.
@@ -1687,6 +1707,7 @@ private boolean lastX() throws SqlException {
         resetUpdatedColumns();
 
         resetRowsetFlags();
+	unuseStreams();
 
         // only get the rowCount for static cursors.
         if (rowCountIsUnknown()) {
@@ -1785,6 +1806,7 @@ public boolean absoluteX(int row) throws SqlException {
         resetUpdatedColumns();
 
         resetRowsetFlags();
+	unuseStreams();
 
         if (maxRows_ > 0) {
             // if "row" is positive and > maxRows, fetch afterLast
@@ -1858,6 +1880,8 @@ private boolean relativeX(int rows) throws SqlException {
         // discard all previous updates when moving the cursor.
         resetUpdatedColumns();
 
+	unuseStreams();
+
         // this method may not be called when the cursor on the insert row
         if (isOnInsertRow_) {
             throw new SqlException(agent_.logWriter_, "Cursor is Not on a Valid Row");
@@ -1971,6 +1995,8 @@ private boolean previousX() throws SqlException {
         // discard all previous updates when moving the cursor.
         resetUpdatedColumns();
 
+	unuseStreams();
+
         isBeforeFirst_ = false;
         isFirst_ = false;
 
@@ -2617,10 +2643,14 @@ private void refreshRowX() throws SqlException {
                     "object has a concurrency of CONCUR_READ_ONLY.");
         }
 
+	
         // this method does nothing if ResultSet is TYPE_SCROLL_INSENSITIVE
         if (resultSetType_ == java.sql.ResultSet.TYPE_SCROLL_SENSITIVE) {
             isValidCursorPosition_ = getRefreshRowset();
             cancelRowUpdates();
+	    
+	    unuseStreams();
+	    
         }
     }
 
@@ -4036,4 +4066,34 @@ private void closeCloseFilterInputStream() throws SqlException {
 	}
 	
 	
+    void useStream(int columnIndex) throws SqlException {
+	
+	if(streamUsedFlags_[columnIndex - 1]){
+	    throw new SqlException(agent_.logWriter_,
+				   "Stream of column value in result cannot be retrieved twice");
+	}
+
+	streamUsedFlags_[columnIndex - 1] = true;
+
+    }
+
+
+    private void unuseStreams(){
+	
+	if(streamUsedFlags_ == null){
+	    streamUsedFlags_ = new boolean[ resultSetMetaData_.columns_ ];
+	    return;
+	}
+
+	for(int i = 0;
+	    i < streamUsedFlags_.length;
+	    i ++){
+	    
+	    streamUsedFlags_[i] = false;
+	    
+	}
+	
+    }
+    
+    
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java
index 0af38b3a..b1207a6e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java
@@ -1268,6 +1268,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_INVALID_COLUMN_POSITION                                 = "XCL14.S";
 	String LANG_INVALID_COMPARE_TO                                     = "XCL15.S";
 	String LANG_RESULT_SET_NOT_OPEN                                    = "XCL16.S";
+    String LANG_STREAM_RETRIEVED_ALREADY = "XCL18.S";
 	String LANG_MISSING_ROW                                            = "XCL19.S";
 	String LANG_CANT_UPGRADE_CATALOGS                                  = "XCL20.S";
 	String LANG_DDL_IN_BIND                                            = "XCL21.S";
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 81da1224..ea3a1b3a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -157,6 +157,8 @@
     private int fetchDirection;
     private int fetchSize;
 
+    private boolean[] streamUsedFlags;
+
 	/**
 	 * This class provides the glue between the Cloudscape
 	 * resultset and the JDBC resultset, mapping calls-to-calls.
@@ -206,6 +208,8 @@ else if (stmt.getResultSetConcurrency() == JDBC20Translation.CONCUR_READ_ONLY)
 		columnGotUpdated = new boolean[getMetaData().getColumnCount()];
 		copyOfDatabaseRow = new DataValueDescriptor[columnGotUpdated.length];
 
+		initStreamUseFlags(getMetaData().getColumnCount());
+
         // assign the max rows and maxfiled size limit for this result set
         if (stmt != null)
         {
@@ -442,6 +446,8 @@ to scrolling actions (like FIRST or LAST) it would close
 
 			rowData = onRow ? currentRow.getRowArray() : null;
 
+			unuseStreams();
+			
 			return onRow;
 			} finally {
 			    restoreContextStack();
@@ -1043,6 +1049,8 @@ public final Timestamp getTimestamp(int columnIndex) throws SQLException {
 		boolean pushStack = false;
 		try {
 
+		    useStream(columnIndex);
+
 			DataValueDescriptor dvd = getColumn(columnIndex);
 
 			if (wasNull = dvd.isNull()) { return null; }
@@ -1151,6 +1159,8 @@ public final InputStream getBinaryStream(int columnIndex) throws SQLException {
 		boolean pushStack = false;
 		try {
 
+		    useStream(columnIndex);
+
 			DataValueDescriptor dvd = getColumn(columnIndex);
 
 			if (wasNull = dvd.isNull()) { return null; }
@@ -3965,5 +3975,42 @@ protected final SQLException dataTypeConversion(int column, String targetType) {
 		return newSQLException(SQLState.LANG_DATA_TYPE_GET_MISMATCH,
 			resultDescription.getColumnDescriptor(column).getType().getTypeId().getSQLTypeName(), targetType);
 	}
+    
+    
+    private void initStreamUseFlags(int numOfCol){
+	
+	streamUsedFlags = new boolean[numOfCol];
+	
+	// Next code is not neccesary because initial value is false, which is default initial value for boolean.
+	/*
+	  clearStreamUsedFlags();
+	*/
+    }
+    
+    
+    void useStream(int columnIndex) throws SQLException {
+	
+	if(streamUsedFlags[columnIndex - 1]){
+	    throw newSQLException(SQLState.LANG_STREAM_RETRIEVED_ALREADY);
+	}
+
+	streamUsedFlags[columnIndex - 1] = true;
+
+    }
+
+
+    private void unuseStreams(){
+	
+	for(int i = 0;
+	    i < streamUsedFlags.length;
+	    i ++){
+	    
+	    streamUsedFlags[i] = false;
+	    
+	}
+	
+    }
+    
+    
 }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java
index 88d56ca0..856c3bd9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LOBTest.java
@@ -354,12 +354,38 @@ static public String prettyType(Object o) {
     public void testGetters() throws SQLException {
         for(int i=0; i<columns; i++) {
             System.out.println("\n\n=== Columntype "+colTypes[i]);
-            String s = "select "+colNames[i]+" from "+table;
+	    
+            String s = 
+		"select "+
+		colNames[i] + " as " + colNames[i] + "_1, " +
+		colNames[i] + " as " + colNames[i] + "_2, " +
+		colNames[i] + " as " + colNames[i] + "_3, " +
+		colNames[i] + " as " + colNames[i] + "_4, " +
+		colNames[i] + " as " + colNames[i] + "_5, " +
+		colNames[i] + " as " + colNames[i] + "_6, " +
+		colNames[i] + " as " + colNames[i] + "_7, " +
+		colNames[i] + " as " + colNames[i] + "_8, " +
+		colNames[i] + " as " + colNames[i] + "_9, " +
+		colNames[i] + " as " + colNames[i] + "_10, " +
+		colNames[i] + " as " + colNames[i] + "_11, " +
+		colNames[i] + " as " + colNames[i] + "_12, " +
+		colNames[i] + " as " + colNames[i] + "_13, " +
+		colNames[i] + " as " + colNames[i] + "_14, " +
+		colNames[i] + " as " + colNames[i] + "_15, " +
+		colNames[i] + " as " + colNames[i] + "_16, " +
+		colNames[i] + " as " + colNames[i] + "_17, " +
+		colNames[i] + " as " + colNames[i] + "_18, " +
+		colNames[i] + " as " + colNames[i] + "_19, " +
+		colNames[i] + " as " + colNames[i] + "_20, " +
+		colNames[i] + " as " + colNames[i] + "_21 " +
+		"from "+
+		table;
+	    
             ResultSet rs = X(s);
             rs.next(); // goto first
             int getno = 0;
             String r;
-            while(null!=(r = getter(rs, getno, 1))) {
+            while(null!=(r = getter(rs, getno, getno + 1 ))) {
                 System.out.println("\t"+i+" "+r);
                 getno++;
             }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java
index e69de29b..d8b7cb1f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Stream.java
@@ -0,0 +1,465 @@
+/*
+
+Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Stream
+
+Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+
+import java.io.InputStream;
+import java.io.Reader;
+import java.sql.Connection;
+import java.sql.Statement;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+
+import java.io.IOException;
+import java.sql.SQLException;
+
+import org.apache.derby.tools.ij;
+
+
+public class Stream {
+    
+    public static void main(String[] args){
+	
+	Connection conn = null;
+
+	try{
+	    ij.getPropertyArg(args);
+	    conn = ij.startJBMS();
+	    
+	    createTestTables(conn);
+	    executeTests(conn);
+	    dropTestTables(conn);
+	    
+	}catch(Throwable t){
+	    t.printStackTrace();
+	    
+	}finally{
+	    if(conn != null){
+		try{
+		    conn.close();
+		    
+		}catch(SQLException e){
+		    e.printStackTrace();
+		}
+		
+	    }
+	}
+	
+    }
+
+    
+    private static void createTestTables(Connection conn) 
+	throws SQLException,IOException {
+	
+	createTable(conn);
+	createTestData(conn);
+	
+    }
+    
+    
+    private static void createTable(Connection conn) throws SQLException {
+	
+	Statement st = null;
+	
+	try{
+	    
+	    st = conn.createStatement();
+	    st.execute("create table SMALL_BLOB_TABLE( SMALL_BLOB blob( 512 ))");
+	    st.execute("create table LARGE_BLOB_TABLE( LARGE_BLOB blob( 512k ))");
+	    st.execute("create table SMALL_CLOB_TABLE( SMALL_CLOB clob( 512 ))");
+	    st.execute("create table LARGE_CLOB_TABLE( LARGE_CLOB clob( 512k ))");
+
+	}finally{
+	    if(st != null)
+		st.close();
+	}
+	
+    }
+
+    
+    private static void createTestData(Connection conn) 
+	throws SQLException,IOException {
+
+	createSmallBlobTestData( conn );
+	createLargeBlobTestData( conn );
+	createSmallClobTestData( conn );
+	createLargeClobTestData( conn );
+	
+    }
+    
+    
+    private static void createSmallBlobTestData(Connection conn) 
+	throws SQLException,IOException {
+	
+	PreparedStatement st = null;
+	TestDataStream stream = null;
+
+	try{
+	    st = conn.prepareStatement("insert into SMALL_BLOB_TABLE(SMALL_BLOB) values(?)");
+	    stream = new TestDataStream(512);
+	    st.setBinaryStream(1, stream, 512);
+	    st.executeUpdate();
+	    
+	}finally{
+	    if(st != null){
+		st.close();
+	    }
+
+	    if(stream != null){
+		stream.close();
+	    }
+	    
+	}
+
+    }
+    
+    
+    private static void createLargeBlobTestData(Connection conn) 
+	throws SQLException,IOException {
+	
+	PreparedStatement st = null;
+	TestDataStream stream = null;
+	
+	try{
+	    st = conn.prepareStatement("insert into LARGE_BLOB_TABLE(LARGE_BLOB) values(?)");
+	    stream = new TestDataStream( 512 * 1024);
+	    st.setBinaryStream(1,stream, 512 * 1024);
+
+	    st.executeUpdate();
+	    
+	}finally{
+	    if(st != null){
+		st.close();
+	    }
+
+	    if(stream != null){
+		stream.close();
+	    }
+	}
+    }
+    
+    
+    private static void createSmallClobTestData(Connection conn)
+	throws SQLException,IOException {
+	
+	PreparedStatement st = null;
+	TestDataReader reader = null;
+	
+	try{
+	    st = conn.prepareStatement("insert into SMALL_CLOB_TABLE( SMALL_CLOB ) values(?)");
+
+	    reader = new TestDataReader( 512 );
+	    st.setCharacterStream(1,
+				  reader, 
+				  512);
+	    
+	    st.executeUpdate();
+	    
+	    
+	}finally{
+	    if(st != null)
+		st.close();
+	    
+	    if(reader != null)
+		reader.close();
+	    
+	}
+	
+    }   
+    
+
+    private static void createLargeClobTestData(Connection conn)
+	throws SQLException, IOException {
+	
+	PreparedStatement st = null;
+	TestDataReader reader = null;
+
+	try{
+	    st = conn.prepareStatement("insert into LARGE_CLOB_TABLE( LARGE_CLOB ) values(?)");
+	    
+	    reader = new TestDataReader( 512 * 1024 );
+	    st.setCharacterStream(1,
+				  reader,
+				  512 * 1024 );
+	    
+	    st.executeUpdate();
+	    
+	    
+	} finally {
+	    if(st != null)
+		st.close();
+	    
+	    if(reader != null)
+		reader.close();
+	}
+    }
+
+    private static void executeTests(Connection conn) 
+	throws SQLException, IOException {
+	
+	executeTestOnSmallBlob( conn );
+	executeTestOnLargeBlob( conn );
+	executeTestOnSmallClob( conn );
+	executeTestOnLargeClob( conn );
+	
+    }
+    
+    
+    private static void executeTestOnSmallBlob( Connection conn ) 
+	throws SQLException, IOException {
+	
+	BlobTester tester = new BlobTester( "SMALL_BLOB_TABLE", 
+					    "SMALL_BLOB" );
+	tester.testGetStreamTwice( conn );
+	
+    }
+
+
+    private static void executeTestOnLargeBlob( Connection conn ) 
+	throws SQLException, IOException {
+	
+	BlobTester tester = new BlobTester( "LARGE_BLOB_TABLE", 
+					    "LARGE_BLOB" );
+	tester.testGetStreamTwice( conn );
+	
+    }
+    
+    
+    private static void executeTestOnSmallClob( Connection conn ) 
+	throws SQLException, IOException {
+	
+	ClobTester tester = new ClobTester( "SMALL_CLOB_TABLE",
+					    "SMALL_CLOB" );
+	tester.testGetReaderTwice( conn );
+
+    }
+
+
+    private static void executeTestOnLargeClob( Connection conn ) 
+	throws SQLException, IOException {
+	
+	ClobTester tester = new ClobTester( "LARGE_CLOB_TABLE",
+					    "LARGE_CLOB" );
+	tester.testGetReaderTwice( conn );
+
+    }
+    
+
+    private static void dropTestTables( Connection conn ) throws SQLException {
+	
+	Statement st = null;
+	
+	try{
+	    st = conn.createStatement();
+	    st.execute("drop table SMALL_BLOB_TABLE");
+	    st.execute("drop table LARGE_BLOB_TABLE");
+
+	}finally{
+	    if(st != null)
+		st.close();
+	}
+	
+    }
+    
+    
+    static class TestDataStream extends InputStream {
+	
+	private long streamedLength = 0;
+	private final long total;
+	
+	
+	public TestDataStream(long length){
+	    total = length;
+	}
+	
+	
+	public int read(){
+	    
+	    if(streamedLength >= total){
+		return -1;
+	    }
+
+	    return (int) ((streamedLength ++) % 256L);
+	    
+	}
+	
+	
+	public void close(){
+	    streamedLength = total;
+	}
+	
+    }
+    
+
+    static class TestDataReader extends Reader {
+	
+	private long wroteLength = 0;
+	private final long total;
+
+	
+	public TestDataReader(long length){
+	    total = length;
+	}
+
+	
+	public void close(){
+	    wroteLength = total;
+	}
+
+	
+	public int read( char[] cbuf,
+			 int off,
+			 int len ){
+	    
+	    if(wroteLength >= total)
+		return -1;
+	    
+	    int i;
+	    for(i = off ;
+		i < off + len &&
+		    wroteLength <= total ;
+		i++, wroteLength ++){
+		
+		cbuf[i] = (char) (wroteLength % 0x10000L);
+		
+	    }
+
+	    return i - off;
+	}
+	
+    }
+    
+    
+    static class BlobTester {
+	
+	final String tableName;
+	final String colName;
+	
+	
+	BlobTester(String tableName,
+		   String colName){
+	    
+	    this.tableName  = tableName;
+	    this.colName = colName;
+	    
+	}
+	
+	
+	public void testGetStreamTwice(Connection conn) 
+	    throws SQLException, IOException {
+	    
+	    Statement st = null;
+	    ResultSet rs = null;
+	    InputStream is = null;
+
+	    try{
+		st = conn.createStatement();
+		
+		rs = st.executeQuery("select " + 
+				     colName + " "+ 
+				     "from " + 
+				     tableName);
+		rs.next();
+		
+		System.out.println("get stream from " + tableName + "." + colName + " ...");
+		is = rs.getBinaryStream(1);
+		is.close();
+		
+		System.out.println("get stream from " + tableName + "." + colName + " again ...");
+		is = rs.getBinaryStream(1);
+		
+		System.out.println("Expected exception did not happen.");
+		
+	    }catch(SQLException e){
+		System.out.println("Expected exception may happen.");
+		e.printStackTrace(System.out);
+		
+	    }finally{
+		if( st != null )
+		    st.close();
+		
+		if( rs != null )
+		    rs.close();
+		
+		if( is != null )
+		    is.close();
+		
+	    }
+	}
+    }
+
+
+    static class ClobTester {
+	
+	final String tableName;
+	final String colName;
+
+	public ClobTester( String tableName ,
+			   String colName ){
+	    
+	    this.tableName = tableName;
+	    this.colName = colName;
+	    
+	}
+	
+	
+	public void testGetReaderTwice( Connection conn ) 
+	    throws SQLException, IOException {
+	    
+	    Statement st = null;
+	    ResultSet rs = null;
+	    Reader reader = null;
+
+	    try{
+		st = conn.createStatement();
+		
+		rs = st.executeQuery( "select " + 
+				      colName + " " + 
+				      "from " + 
+				      tableName );
+		rs.next();
+		
+		System.out.println("get reader from " + tableName + "." + colName + " ...");
+		reader = rs.getCharacterStream(1);
+		reader.close();
+		
+		System.out.println("get reader from " + tableName + "." + colName + "again ...");
+		reader = rs.getCharacterStream(1);
+		
+		System.out.println("Expected exception did not happen.");
+		
+	    }catch(SQLException e){
+		System.out.println("Expected exception may happen.");
+		e.printStackTrace(System.out);
+
+	    }finally{
+		if(st != null)
+		    st.close();
+		
+		if(rs != null)
+		    rs.close();
+
+		if(reader != null)
+		    reader.close();
+
+	    }
+	}
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java
index 79579f05..5ccb2632 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/connectionJdbc20.java
@@ -77,7 +77,17 @@ public static void main(String[] args) {
             load_data(connreturn);
             
 			// read the data   of each type with all the possible functions
-			ResultSet rs = stmt.executeQuery("select * from tab1");
+			ResultSet rs = stmt.executeQuery("select " + 
+							 "c1," + 
+							 "c2," + 
+							 "c3," + 
+							 "c4," + 
+							 "c5," + 
+							 "c6," + 
+							 "c1 as c1_spare," + 
+							 "c2 as c2_spare,"  +
+							 "c3 as c3_spare "  +
+							 "from tab1");
             int loop = 0;
             while(loop < 2 )
             {
@@ -87,11 +97,13 @@ public static void main(String[] args) {
                     {
                         get_using_object(rs, i);
                         get_using_string(rs, i);
+			
 						get_using_ascii_stream(rs, i);
+
                         if(i < 4 ) // only c1 , c2, c3
                         {
-                            get_using_binary_stream(rs, i);
-                            get_using_bytes(rs, i);
+                            get_using_binary_stream(rs, i + 6);
+                            get_using_bytes(rs, i + 6);
                         }
                     } 
                 }
@@ -103,7 +115,17 @@ public static void main(String[] args) {
                     System.out.println("Got Different Statement Object");
                 
                 rs.close();
-			    rs = stmt.executeQuery("select * from tab1");
+		rs = stmt.executeQuery("select " + 
+				       "c1," + 
+				       "c2," + 
+				       "c3," + 
+				       "c4," + 
+				       "c5," + 
+				       "c6," + 
+				       "c1 as c1_spare," + 
+				       "c2 as c2_spare,"  +
+				       "c3 as c3_spare "  +
+				       "from tab1");
                 loop++;
             }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
index 59cc36f7..f562c33f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
@@ -379,7 +379,11 @@ static private void printTestData(Connection conn) throws SQLException {
 			ResultSet rs = null;
 			
 			try{
-				st = conn.prepareStatement("select text_data from t3");
+				st = conn.prepareStatement("select " + 
+							   "text_data as text_data_col1," + 
+							   "text_data as text_data_col2 " + 
+							   "from " + 
+							   "t3");
 				rs = st.executeQuery();
 				
 				while(rs.next()){
@@ -435,7 +439,7 @@ static private void printTestDataInARowViaReader(ResultSet rs) throws SQLExcepti
 			Reader reader = null;
 			
 			try{
-				reader = rs.getCharacterStream(1);
+				reader = rs.getCharacterStream(2);
 
 				for(int c = reader.read();
 				    c > -1;
