diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
index 2a04741d..4c739878 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -442,8 +442,6 @@ public IColumn deserialize(DataInputStream dis, String name, IFilter filter) thr
         }
 
         SuperColumn superColumn = defreezeSuperColumn(dis);
-        if ( !superColumn.isMarkedForDelete() )
-        {
             int size = dis.readInt();
             /* skip the size of the columns */
             dis.readInt();
@@ -459,7 +457,7 @@ public IColumn deserialize(DataInputStream dis, String name, IFilter filter) thr
                     }
                 }
             }
-        }
+
         return superColumn;
     }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SequenceFile.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SequenceFile.java
index 2d362ef8..2a07936a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SequenceFile.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SequenceFile.java
@@ -493,7 +493,6 @@ private int handleColumnTimeIndexes(String cfName, List<IndexHelper.ColumnIndexI
          */
         public long next(String key, DataOutputBuffer bufOut, String columnFamilyName, List<String> columnNames, IndexHelper.TimeRange timeRange, long position) throws IOException
         {
-            assert !columnFamilyName.contains(":");
             assert timeRange == null || columnNames == null; // at most one may be non-null
 
             long bytesRead = -1L;
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java
index 32b0dcbb..485db714 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RemoveSuperColumnTest.java
@@ -20,20 +20,22 @@
 
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
 import java.util.List;
 import java.util.Collection;
+import java.util.Arrays;
 
 import org.apache.commons.lang.StringUtils;
 import org.junit.Test;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertEquals;
 
 public class RemoveSuperColumnTest
 {
     @Test
     public void testRemoveSuperColumn() throws IOException, ExecutionException, InterruptedException
     {
-        Table table = Table.open("Table1");
-        ColumnFamilyStore store = table.getColumnFamilyStore("Super1");
+        ColumnFamilyStore store = Table.open("Table1").getColumnFamilyStore("Super1");
         RowMutation rm;
 
         // add data
@@ -47,6 +49,20 @@ public void testRemoveSuperColumn() throws IOException, ExecutionException, Inte
         rm.delete("Super1:SC1", 1);
         rm.apply();
 
+        validateRemoveTwoSources();
+
+        store.forceBlockingFlush();
+        validateRemoveTwoSources();
+
+        Future<Integer> ft = MinorCompactionManager.instance().submit(store, 2);
+        ft.get();
+        assertEquals(1, store.getSSTables().size());
+        validateRemoveCompacted();
+    }
+
+    private void validateRemoveTwoSources() throws IOException
+    {
+        ColumnFamilyStore store = Table.open("Table1").getColumnFamilyStore("Super1");
         List<ColumnFamily> families = store.getColumnFamilies("key1", "Super1", new IdentityFilter());
         assert families.size() == 2 : StringUtils.join(families, ", ");
         assert families.get(0).getAllColumns().first().getMarkedForDeleteAt() == 1; // delete marker, just added
@@ -58,4 +74,69 @@ public void testRemoveSuperColumn() throws IOException, ExecutionException, Inte
         assert subColumns.iterator().next().timestamp() == 0;
         assertNull(ColumnFamilyStore.removeDeleted(resolved, Integer.MAX_VALUE));
     }
+
+    private void validateRemoveCompacted() throws IOException
+    {
+        ColumnFamilyStore store = Table.open("Table1").getColumnFamilyStore("Super1");
+        List<ColumnFamily> families = store.getColumnFamilies("key1", "Super1", new IdentityFilter());
+        assert families.size() == 1 : StringUtils.join(families, ", ");
+        ColumnFamily resolved = families.get(0);
+        assert resolved.getAllColumns().first().getMarkedForDeleteAt() == 1;
+        Collection<IColumn> subColumns = resolved.getAllColumns().first().getSubColumns();
+        assert subColumns.size() == 0;
+    }
+
+    @Test
+    public void testRemoveSuperColumnWithNewData() throws IOException, ExecutionException, InterruptedException
+    {
+        ColumnFamilyStore store = Table.open("Table1").getColumnFamilyStore("Super2");
+        RowMutation rm;
+
+        // add data
+        rm = new RowMutation("Table1", "key1");
+        rm.add("Super2:SC1:Column1", "asdf".getBytes(), 0);
+        rm.apply();
+        store.forceBlockingFlush();
+
+        // remove
+        rm = new RowMutation("Table1", "key1");
+        rm.delete("Super2:SC1", 1);
+        rm.apply();
+
+        // new data
+        rm = new RowMutation("Table1", "key1");
+        rm.add("Super2:SC1:Column2", "asdf".getBytes(), 2);
+        rm.apply();
+
+        validateRemoveWithNewData();
+
+        store.forceBlockingFlush();
+        validateRemoveWithNewData();
+
+        Future<Integer> ft = MinorCompactionManager.instance().submit(store, 2);
+        ft.get();
+        assertEquals(1, store.getSSTables().size());
+        validateRemoveWithNewData();
+    }
+
+    private void validateRemoveWithNewData() throws IOException
+    {
+        ColumnFamilyStore store = Table.open("Table1").getColumnFamilyStore("Super2");
+        List<ColumnFamily> families;
+        ColumnFamily resolved;
+
+        families = store.getColumnFamilies("key1", "Super2:SC1", new NamesFilter(Arrays.asList("Column2")));
+        resolved = ColumnFamilyStore.removeDeleted(ColumnFamily.resolve(families));
+        validateNewDataFamily(resolved);
+
+        resolved = store.getColumnFamily("key1", "Super2:SC1:Column2", new IdentityFilter());
+        validateNewDataFamily(resolved);
+    }
+
+    private void validateNewDataFamily(ColumnFamily resolved)
+    {
+        Collection<IColumn> subColumns = resolved.getAllColumns().first().getSubColumns();
+        assert subColumns.size() == 1;
+        assert subColumns.iterator().next().timestamp() == 2;
+    }
 }
