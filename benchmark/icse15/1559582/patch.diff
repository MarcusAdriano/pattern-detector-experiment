diff --git a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/core/SolrConfig.java b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/core/SolrConfig.java
index 2fe2e3c5..394005be 100644
--- a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/core/SolrConfig.java
+++ b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/core/SolrConfig.java
@@ -80,6 +80,16 @@
     NOOP
     }
   
+  private int multipartUploadLimitKB;
+
+  private int formUploadLimitKB;
+
+  private boolean enableRemoteStreams;
+
+  private boolean handleSelect;
+
+  private boolean addHttpRequestToContext;
+  
   /** Creates a default instance from the solrconfig.xml. */
   public SolrConfig()
   throws ParserConfigurationException, IOException, SAXException {
@@ -259,6 +269,22 @@ public SolrConfig(SolrResourceLoader loader, String name, InputSource is)
 
      updateHandlerInfo = loadUpdatehandlerInfo();
 
+     multipartUploadLimitKB = getInt( 
+         "requestDispatcher/requestParsers/@multipartUploadLimitInKB", 2048 );
+     
+     formUploadLimitKB = getInt( 
+         "requestDispatcher/requestParsers/@formdataUploadLimitInKB", 2048 );
+     
+     enableRemoteStreams = getBool( 
+         "requestDispatcher/requestParsers/@enableRemoteStreaming", false ); 
+ 
+     // Let this filter take care of /select?xxx format
+     handleSelect = getBool( 
+         "requestDispatcher/@handleSelect", true ); 
+     
+     addHttpRequestToContext = getBool( 
+         "requestDispatcher/requestParsers/@addHttpRequestToContext", false ); 
+
     Config.log.info("Loaded SolrConfig: " + name);
   }
 
@@ -531,4 +557,24 @@ public boolean accept(File pathname) {
       loader.reloadLuceneSPI();
     }
   }
+  
+  public int getMultipartUploadLimitKB() {
+    return multipartUploadLimitKB;
+  }
+
+  public int getFormUploadLimitKB() {
+    return formUploadLimitKB;
+  }
+
+  public boolean isHandleSelect() {
+    return handleSelect;
+  }
+
+  public boolean isAddHttpRequestToContext() {
+    return addHttpRequestToContext;
+  }
+
+  public boolean isEnableRemoteStreams() {
+    return enableRemoteStreams;
+  }
 }
diff --git a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
index f0d9bca2..c260f6fa 100644
--- a/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
+++ b/lucene/dev/branches/lucene_solr_4_6/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
@@ -17,16 +17,16 @@
 
 package org.apache.solr.servlet;
 
+import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.ByteArrayOutputStream;
+import java.net.URL;
 import java.nio.ByteBuffer;
 import java.nio.charset.CharacterCodingException;
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CodingErrorAction;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -36,8 +36,6 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.servlet.http.HttpServletRequest;
 
@@ -54,9 +52,12 @@
 import org.apache.solr.common.util.ContentStreamBase;
 import org.apache.solr.common.util.FastInputStream;
 import org.apache.solr.core.Config;
+import org.apache.solr.core.SolrConfig;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequestBase;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 public class SolrRequestParsers 
@@ -96,6 +97,17 @@ public SolrRequestParsers( Config globalConfig ) {
       enableRemoteStreams = true;
       handleSelect = true;
       addHttpRequestToContext = false;
+    } else if (globalConfig instanceof SolrConfig) {
+      multipartUploadLimitKB = ((SolrConfig) globalConfig).getMultipartUploadLimitKB();
+      
+      formUploadLimitKB = ((SolrConfig) globalConfig).getFormUploadLimitKB();
+      
+      enableRemoteStreams = ((SolrConfig) globalConfig).isEnableRemoteStreams();
+  
+      // Let this filter take care of /select?xxx format
+      handleSelect = ((SolrConfig) globalConfig).isHandleSelect();
+      
+      addHttpRequestToContext = ((SolrConfig) globalConfig).isAddHttpRequestToContext();
     } else {
       multipartUploadLimitKB = globalConfig.getInt( 
           "requestDispatcher/requestParsers/@multipartUploadLimitInKB", 2048 );
