diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java b/lucene/dev/branches/branch_3x/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
index ce7d4687..bfd5f0e6 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
@@ -270,32 +270,6 @@ protected void doClose() throws IOException {
    */
   @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
-    return document(n);
-  }
-
-  /**
-   * Returns the stored fields of the <code>n</code><sup>th</sup>
-   * <code>Document</code> in this index.
-   * <p>
-   * <b>Warning!</b>
-   * The resulting document is the actual stored document instance
-   * and not a deserialized clone as retuned by an IndexReader
-   * over a {@link org.apache.lucene.store.Directory}.
-   * I.e., if you need to touch the document, clone it first!
-   * <p>
-   * This can also be seen as a feature for live changes of stored values,
-   * but be careful! Adding a field with an name unknown to the index
-   * or to a field with previously no stored values will make
-   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}
-   * out of sync, causing problems for instance when merging the
-   * instantiated index to another index.
-   *
-   * @throws CorruptIndexException if the index is corrupt
-   * @throws IOException if there is a low-level IO error
-   */
-
-  @Override
-  public Document document(int n) throws IOException {
     return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();
   }
 
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index 511eeb1e..4a38cc6a 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -1148,12 +1148,6 @@ public int maxDoc() {
       return 1;
     }
   
-    @Override
-    public Document document(int n) {
-      if (DEBUG) System.err.println("MemoryIndexReader.document");
-      return new Document(); // there are no stored fields
-    }
-
     //When we convert to JDK 1.5 make this Set<String>
     @Override
     public Document document(int n, FieldSelector fieldSelector) throws IOException {
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/index/IndexSorter.java b/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/index/IndexSorter.java
index c0c4ea9c..aa8a1daf 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/index/IndexSorter.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/java/org/apache/lucene/index/IndexSorter.java
@@ -194,11 +194,6 @@ public SortingReader(IndexReader oldReader, int[] oldToNew) {
       return null;
     }
 
-    @Override
-    public Document document(int n) throws IOException {
-      return document(n, null);
-    }
-
     @Override
     public Document document(int n, FieldSelector fieldSelector)
         throws CorruptIndexException, IOException {
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
index 3382a23e..47ac1f2d 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
@@ -123,6 +123,18 @@ public Directory directory() {
     return in.directory();
   }
   
+  @Override
+  public IndexCommit getIndexCommit() throws IOException {
+    ensureOpen();
+    return in.getIndexCommit();
+  }
+  
+  @Override
+  public int getTermInfosIndexDivisor() {
+    ensureOpen();
+    return in.getTermInfosIndexDivisor();
+  }
+  
   @Override
   public TermFreqVector[] getTermFreqVectors(int docNumber)
           throws IOException {
@@ -137,7 +149,6 @@ public TermFreqVector getTermFreqVector(int docNumber, String field)
     return in.getTermFreqVector(docNumber, field);
   }
 
-
   @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     ensureOpen();
@@ -150,6 +161,12 @@ public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOE
     in.getTermFreqVector(docNumber, mapper);
   }
 
+  @Override
+  public long getUniqueTermCount() throws IOException {
+    ensureOpen();
+    return in.getUniqueTermCount();
+  }
+  
   @Override
   public int numDocs() {
     // Don't call ensureOpen() here (it could affect performance)
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexReader.java
index 0f058688..2c2af43f 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexReader.java
@@ -32,7 +32,6 @@
 import org.apache.lucene.search.SearcherManager; // javadocs
 import org.apache.lucene.store.*;
 import org.apache.lucene.util.ArrayUtil;
-import org.apache.lucene.util.ReaderUtil;         // for javadocs
 import org.apache.lucene.util.VirtualMethod;
 
 /** IndexReader is an abstract class, providing an interface for accessing an
@@ -177,7 +176,7 @@ protected void readerFinished() {
   static int DEFAULT_TERMS_INDEX_DIVISOR = 1;
 
   /** Expert: returns the current refCount for this reader */
-  public int getRefCount() {
+  public final int getRefCount() {
     return refCount.get();
   }
   
@@ -196,7 +195,7 @@ public int getRefCount() {
    * @see #decRef
    * @see #tryIncRef
    */
-  public void incRef() {
+  public final void incRef() {
     ensureOpen();
     refCount.incrementAndGet();
   }
@@ -224,7 +223,7 @@ public void incRef() {
    * @see #decRef
    * @see #incRef
    */
-  public boolean tryIncRef() {
+  public final boolean tryIncRef() {
     int count;
     while ((count = refCount.get()) > 0) {
       if (refCount.compareAndSet(count, count+1)) {
@@ -265,7 +264,7 @@ public String toString() {
    *
    * @see #incRef
    */
-  public void decRef() throws IOException {
+  public final void decRef() throws IOException {
     ensureOpen();
     final int rc = refCount.getAndDecrement();
     if (rc == 1) {
@@ -1090,7 +1089,7 @@ public static boolean indexExists(Directory directory) throws IOException {
   public abstract int maxDoc();
 
   /** Returns the number of deleted documents. */
-  public int numDeletedDocs() {
+  public final int numDeletedDocs() {
     return maxDoc() - numDocs();
   }
 
@@ -1107,7 +1106,7 @@ public int numDeletedDocs() {
    * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error
    */
-  public Document document(int n) throws CorruptIndexException, IOException {
+  public final Document document(int n) throws CorruptIndexException, IOException {
     ensureOpen();
     if (n < 0 || n >= maxDoc()) {
       throw new IllegalArgumentException("docID must be >= 0 and < maxDoc=" + maxDoc() + " (got docID=" + n + ")");
@@ -1198,7 +1197,7 @@ public abstract void norms(String field, byte[] bytes, int offset)
    * @throws IOException if there is a low-level IO error
    * @throws IllegalStateException if the field does not index norms
    */
-  public synchronized  void setNorm(int doc, String field, byte value)
+  public final synchronized  void setNorm(int doc, String field, byte value)
           throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
     ensureOpen();
     acquireWriteLock();
@@ -1228,7 +1227,7 @@ protected abstract void doSetNorm(int doc, String field, byte value)
    * This method will be removed in Lucene 4.0
    */
   @Deprecated
-  public void setNorm(int doc, String field, float value)
+  public final void setNorm(int doc, String field, float value)
           throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
     ensureOpen();
     setNorm(doc, field, Similarity.getDefault().encodeNormValue(value));
@@ -1305,7 +1304,7 @@ public TermDocs termDocs(Term term) throws IOException {
    * greater than all that precede it in the enumeration.
    * @throws IOException if there is a low-level IO error
    */
-  public TermPositions termPositions(Term term) throws IOException {
+  public final TermPositions termPositions(Term term) throws IOException {
     ensureOpen();
     TermPositions termPositions = termPositions();
     termPositions.seek(term);
@@ -1334,7 +1333,7 @@ public TermPositions termPositions(Term term) throws IOException {
    *  be obtained)
    * @throws IOException if there is a low-level IO error
    */
-  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
+  public final synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
     ensureOpen();
     acquireWriteLock();
     hasChanges = true;
@@ -1365,7 +1364,7 @@ public synchronized void deleteDocument(int docNum) throws StaleReaderException,
    *  be obtained)
    * @throws IOException if there is a low-level IO error
    */
-  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
+  public final int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
     ensureOpen();
     TermDocs docs = termDocs(term);
     if (docs == null) return 0;
@@ -1400,7 +1399,7 @@ public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexE
    * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error
    */
-  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
+  public final synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
     ensureOpen();
     acquireWriteLock();
     hasChanges = true;
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java
index bf7e0a91..f311a4e8 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java
@@ -420,12 +420,6 @@ public TermDocs termDocs() throws IOException {
     return new ParallelTermDocs();
   }
 
-  @Override
-  public TermPositions termPositions(Term term) throws IOException {
-    ensureOpen();
-    return new ParallelTermPositions(term);
-  }
-
   @Override
   public TermPositions termPositions() throws IOException {
     ensureOpen();
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFilterIndexReader.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFilterIndexReader.java
index 96096893..0c857088 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFilterIndexReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFilterIndexReader.java
@@ -18,16 +18,19 @@
  */
 
 
-import org.apache.lucene.util.LuceneTestCase;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashSet;
+
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
 import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.store.Directory;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-
-import java.io.IOException;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
 
 public class TestFilterIndexReader extends LuceneTestCase {
 
@@ -136,4 +139,29 @@ public void testFilterIndexReader() throws Exception {
     reader.close();
     directory.close();
   }
+
+  public void testOverrideMethods() throws Exception {
+    HashSet<String> methodsThatShouldNotBeOverridden = new HashSet<String>();
+    methodsThatShouldNotBeOverridden.add("reopen");
+    methodsThatShouldNotBeOverridden.add("doOpenIfChanged");
+    methodsThatShouldNotBeOverridden.add("clone");
+    boolean fail = false;
+    for (Method m : FilterIndexReader.class.getMethods()) {
+      int mods = m.getModifiers();
+      if (Modifier.isStatic(mods) || Modifier.isFinal(mods)) {
+        continue;
+      }
+      Class< ? > declaringClass = m.getDeclaringClass();
+      String name = m.getName();
+      if (declaringClass != FilterIndexReader.class && declaringClass != Object.class && !methodsThatShouldNotBeOverridden.contains(name)) {
+        System.err.println("method is not overridden by FilterIndexReader: " + name);
+        fail = true;
+      } else if (declaringClass == FilterIndexReader.class && methodsThatShouldNotBeOverridden.contains(name)) {
+        System.err.println("method should not be overridden by FilterIndexReader: " + name);
+        fail = true;
+      }
+    }
+    assertFalse("FilterIndexReader overrides (or not) some problematic methods; see log above", fail);
+  }
+
 }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexReader.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexReader.java
index 68c60334..900d7e38 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexReader.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexReader.java
@@ -377,11 +377,6 @@ public boolean equals(Object o) {
     return in.equals(o);
   }
 
-  @Override
-  public int getRefCount() {
-    return in.getRefCount();
-  }
-
   @Override
   public IndexReader reopen(IndexCommit commit) throws CorruptIndexException, IOException {
     return in.reopen(commit);
@@ -425,66 +420,11 @@ public SolrIndexReader reopen() throws CorruptIndexException, IOException {
     return reopen(true);
   }
 
-  @Override
-  public void decRef() throws IOException {
-    in.decRef();
-  }
-
-  @Override
-  public void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
-    in.deleteDocument(docNum);
-  }
-
-  @Override
-  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
-    return in.deleteDocuments(term);
-  }
-
-  @Override
-  public Document document(int n) throws CorruptIndexException, IOException {
-    return in.document(n);
-  }
-
-//  @Override
-//  public String getCommitUserData() {
-//    return in.getCommitUserData();
-//  }
-
   @Override
   public IndexCommit getIndexCommit() throws IOException {
     return in.getIndexCommit();
   }
 
-  @Override
-  public void incRef() {
-    in.incRef();
-  }
-
-  @Override
-  public int numDeletedDocs() {
-    return in.numDeletedDocs();
-  }
-
-  @Override
-  public void setNorm(int doc, String field, byte value) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
-    in.setNorm(doc, field, value);
-  }
-
-  @Override
-  public void setNorm(int doc, String field, float value) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
-    in.setNorm(doc, field, value);
-  }
-
-  @Override
-  public TermPositions termPositions(Term term) throws IOException {
-    return in.termPositions(term);
-  }
-
-  @Override
-  public void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
-    in.undeleteAll();
-  }
-
   @Override
   public Object getCoreCacheKey() {
     return in.getCoreCacheKey();
