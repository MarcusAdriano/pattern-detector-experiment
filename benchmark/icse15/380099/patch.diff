diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
index 70933f45..0f527254 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
@@ -63,6 +63,14 @@
 	private static String hostName;
 	private static NetworkServerControl networkServer = null;
 
+    private SwitchablePrintStream consoleLogStream_;
+    private PrintStream originalStream_;
+    private FileOutputStream shutdownLogStream_;
+
+    private SwitchablePrintStream consoleErrLogStream_;
+    private PrintStream originalErrStream_;
+    private FileOutputStream shutdownErrLogStream_;
+    
 	public static void main(String[] args) throws Exception {
 
 		hostName = TestUtil.getHostName();
@@ -86,6 +94,24 @@ public static void main(String[] args) throws Exception {
 			e.printStackTrace();
 		}
 
+		PrintStream originalStream = System.out;
+		FileOutputStream shutdownLogStream = 
+		    new FileOutputStream("dataSourcePermissions_net." + 
+					 System.getProperty("framework","") + "." + 
+					 "shutdown.std.log");
+		SwitchablePrintStream consoleLogStream = 
+		    new SwitchablePrintStream( originalStream );
+
+		PrintStream originalErrStream = System.err;
+		FileOutputStream shutdownErrLogStream = 
+		    new FileOutputStream("dataSourcePermissions_net." + 
+					 System.getProperty("framework","") + "." + 
+					 "shutdown.err.log");
+		SwitchablePrintStream consoleErrLogStream = 
+		    new SwitchablePrintStream( originalErrStream );
+		
+		System.setOut( consoleLogStream );
+		System.setErr( consoleErrLogStream );
 
 		if (hostName.equals("localhost"))
 		{
@@ -98,14 +124,26 @@ public static void main(String[] args) throws Exception {
 				System.exit(-1);
 		}
 
+		
 		// Now, go ahead and run the test.
 		try {
-			dataSourcePermissions_net tester = new dataSourcePermissions_net();
+		    dataSourcePermissions_net tester = 
+			new dataSourcePermissions_net( consoleLogStream ,
+						       originalStream ,
+						       shutdownLogStream ,
+						       consoleErrLogStream ,
+						       originalErrStream,
+						       shutdownErrLogStream);
 			tester.setProperties();
 			tester.runTest();
 			if (TestUtil.isDerbyNetClientFramework())
 				tester.testClientDataSourceProperties();
-			new dataSourcePermissions_net().cleanUp();
+			new dataSourcePermissions_net( consoleLogStream , 
+						       originalStream ,
+						       shutdownLogStream ,
+						       consoleErrLogStream ,
+						       originalErrStream ,
+						       shutdownErrLogStream ).cleanUp();
 
 		} catch (Exception e) {
 		// if we catch an exception of some sort, we need to make sure to
@@ -120,22 +158,49 @@ public static void main(String[] args) throws Exception {
 		// Shutdown the server.
 		if (hostName.equals("localhost"))
 		{
+		    
+			consoleLogStream.switchOutput( shutdownLogStream );
+			consoleErrLogStream.switchOutput( shutdownErrLogStream );
+			
 			networkServer.shutdown();
+			consoleLogStream.flush();
+			
+			consoleLogStream.switchOutput( originalStream );
+			consoleErrLogStream.switchOutput( originalErrStream );
+			
 			// how do we do this with the new api?
 			//networkServer.join();
 			Thread.sleep(5000);
 		}
 		System.out.println("Completed dataSourcePermissions_net");
 
-		System.out.close();
-		System.err.close();
+		originalStream.close();
+		shutdownLogStream.close();
+
+		originalErrStream.close();
+		shutdownErrLogStream.close();
 
 	}
 
 
-	public dataSourcePermissions_net() {
+	public dataSourcePermissions_net( SwitchablePrintStream consoleLogStream,
+					  PrintStream originalStream,
+					  FileOutputStream shutdownLogStream,
+					  SwitchablePrintStream consoleErrLogStream,
+					  PrintStream originalErrStream, 
+					  FileOutputStream shutdownErrLogStream ) {
+	    
+	    consoleLogStream_ = consoleLogStream;
+	    originalStream_ = originalStream;
+	    shutdownLogStream_ = shutdownLogStream;
+
+	    consoleErrLogStream_ = consoleErrLogStream;
+	    originalErrStream_ = originalErrStream;
+	    shutdownErrLogStream_ = shutdownErrLogStream;
+	    
 	}
 
+
 	public void setProperties() {
 		// Set required server properties.
 		System.setProperty("database",
@@ -241,16 +306,34 @@ public void start() {
 	}
 
 	public void shutdown() {
+	    
+	    try{
 		try {
+
+		    consoleLogStream_.switchOutput( shutdownLogStream_ );
+		    consoleErrLogStream_.switchOutput( shutdownErrLogStream_ );
+		    
 			DriverManager.getConnection(TestUtil.getJdbcUrlPrefix(hostName,
 															  NETWORKSERVER_PORT) +
 										"wombat;shutdown=true",
 				"EDWARD", "noodle");
+		    
+		    consoleLogStream_.switchOutput( originalStream_ );
+		    consoleErrLogStream_.switchOutput( originalErrStream_);
+		    
 			System.out.println("FAIL - Shutdown returned connection");
 
 		} catch (SQLException sqle) {
+		    consoleLogStream_.switchOutput( originalStream_ );
+		    consoleErrLogStream_.switchOutput( originalErrStream_ );
+		    
 			System.out.println("EXPECTED SHUTDOWN " + sqle.getMessage());
 		}
+		
+	    } catch (IOException ioe){
+		originalStream_.println("Switching stream was failed. Could not complete test ... ");
+	    }
+		
 	}
 
 	protected static boolean isServerStarted(NetworkServerControl server, int ntries)
@@ -525,6 +608,21 @@ public void testDataSourceConnection(String testType, String username, String pa
 }
 
 
+class SwitchablePrintStream extends PrintStream {
+    
+    public SwitchablePrintStream( OutputStream firstStream ){
+	super( firstStream );
+    }
+    
+    
+    public void switchOutput( OutputStream newStream ) throws IOException{
+	
+	out.flush();
+	out = newStream ;
+	
+    }
+    
+}
 
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
index 1379daae..c3c38cf3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
@@ -57,6 +57,22 @@
 
 	private static NetworkServerControl networkServer = null;
 
+    private testSecMec(SwitchablePrintStream consoleLogStream,
+		       PrintStream originalStream,
+		       FileOutputStream shutdownLogStream,
+		       SwitchablePrintStream consoleErrLogStream, 
+		       PrintStream originalErrStream,
+		       FileOutputStream shutdownErrLogStream){
+	
+	super(consoleLogStream,
+	      originalStream,
+	      shutdownLogStream,
+	      consoleErrLogStream,
+	      originalErrStream,
+	      shutdownErrLogStream);
+	
+    }
+
 	public static void main(String[] args) throws Exception {
 
 		// Load harness properties.
@@ -78,6 +94,25 @@ public static void main(String[] args) throws Exception {
 			e.printStackTrace();
 		}
 
+		PrintStream originalStream = System.out;
+		FileOutputStream shutdownLogStream = 
+		    new FileOutputStream("testSecMec." + 
+					 System.getProperty("framework","") + "." + 
+					 "shutdown.std.log");
+		SwitchablePrintStream consoleLogStream = 
+		    new SwitchablePrintStream( originalStream );
+		
+		PrintStream originalErrStream = System.err;
+		FileOutputStream shutdownErrLogStream = 
+		    new FileOutputStream("testSecMec." + 
+					 System.getProperty("framework","") + "." + 
+					 "shutdown.err.log");
+		SwitchablePrintStream consoleErrLogStream = 
+		    new SwitchablePrintStream( originalErrStream );
+
+		System.setOut( consoleLogStream );
+		System.setErr( consoleErrLogStream );
+
 		// Start the NetworkServer on another thread, unless it's a remote host
 		if (hostName.equals("localhost"))
 		{
@@ -91,7 +126,13 @@ public static void main(String[] args) throws Exception {
 
 		// Now, go ahead and run the test.
 		try {
-			testSecMec tester = new testSecMec();
+			testSecMec tester = 
+			    new testSecMec(consoleLogStream,
+					   originalStream,
+					   shutdownLogStream,
+					   consoleErrLogStream,
+					   originalErrStream,
+					   shutdownErrLogStream);
 			tester.runTest();
 
 		} catch (Exception e) {
@@ -107,15 +148,25 @@ public static void main(String[] args) throws Exception {
 		// Shutdown the server.
 		if (hostName.equals("localhost"))
 		{
+			consoleLogStream.switchOutput( shutdownLogStream );
+			consoleErrLogStream.switchOutput( shutdownErrLogStream );
+
 			networkServer.shutdown();
 			// how do we do this with the new api?
 			//networkServer.join();
 			Thread.sleep(5000);
+
+			consoleLogStream.switchOutput( originalStream );
+			consoleErrLogStream.switchOutput( originalErrStream );
+
 		}
 		System.out.println("Completed testSecMec");
 
-		System.out.close();
-		System.err.close();
+		originalStream.close();
+		shutdownLogStream.close();
+
+		originalErrStream.close();
+		shutdownErrLogStream.close();
 
 	}
 
