diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index c0f878c8..28bee9a3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -708,9 +708,13 @@ public void testGetURL() throws SQLException
         assertFalse("getURL is supported!", JDBC.vmSupportsJSR169());
         assertTrue("getURL is supported!", JDBC.vmSupportsJDBC3());
         
-        assertEquals("getURL match",
-                getTestConfiguration().getJDBCUrl(),
-                url);              
+        // DERBY-4886: Embedded returns the URL without connection attributes,
+        // client returns the URL with connection attributes.
+        TestConfiguration config = getTestConfiguration();
+        String expectedURL = usingEmbedded() ?
+            config.getJDBCUrl() : config.getJDBCUrlWithAttributes();
+
+        assertEquals("getURL match", expectedURL, url);
     }
     
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java
index 56ebd920..b9f7e799 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Decorator.java
@@ -20,11 +20,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 package org.apache.derbyTesting.junit;
 
-import java.sql.SQLException;
+import java.util.Properties;
 import java.util.Random;
 
-import javax.sql.DataSource;
-
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
@@ -43,7 +41,7 @@ private Decorator() {
     /**
      * Decorate a set of tests to use an encrypted
      * single use database. This is to run tests
-     * using encrpyption as a general test and
+     * using encryption as a general test and
      * not specific tests of how encryption is handled.
      * E.g. tests of setting various URL attributes
      * would be handled in a specific test.
@@ -53,8 +51,6 @@ private Decorator() {
      * <BR>
      * A boot password (phrase) is used with a random
      * set of characters and digits 16 characters long.
-     * <BR>
-     * The database is created during the setUp of the decorator.
      * 
      * @param test test to decorate
      * @return decorated tests
@@ -64,35 +60,17 @@ public static Test encryptedDatabase(Test test)
         if (JDBC.vmSupportsJSR169())
             return new TestSuite("no encryption support");
         
-        test = new BaseTestSetup(test) {
-            
-            /**
-             * Create an encrypted database using a
-             * JDBC data source.
-             */
-            protected void setUp() throws SQLException
-            {
-                String bootPhrase = getBootPhrase(16);
-
-                DataSource ds = JDBCDataSource.getDataSource();
+        Properties attributes = new Properties();
+        attributes.setProperty("dataEncryption", "true");
+        attributes.setProperty("bootPassword", getBootPhrase(16));
                                
-                JDBCDataSource.setBeanProperty(ds,
-                        "createDatabase", "create");
-                JDBCDataSource.setBeanProperty(ds,
-                        "connectionAttributes",
-                        "dataEncryption=true;bootPassword=" + bootPhrase);
-                
-                ds.getConnection().close();
-            }
-        };
-        
-        return TestConfiguration.singleUseDatabaseDecorator(test);
+        return attributesDatabase(attributes, test);
     }
     
     /**
      * Decorate a set of tests to use an encrypted
      * single use database. This is to run tests
-     * using encrpyption as a general test and
+     * using encryption as a general test and
      * not specific tests of how encryption is handled.
      * E.g. tests of setting various URL attributes
      * would be handled in a specific test.
@@ -102,23 +80,18 @@ protected void setUp() throws SQLException
      * <BR>
      * A boot password (phrase) is used with a random
      * set of characters and digits 64 characters long.
-     * <BR>
-     * The database is created during the setUp of the decorator.
-
      * 
      * @param test test to decorate
      * @return decorated tests
      */
     public static Test encryptedDatabase(Test test, final String algorithm)
     {
-        String bootPhrase = getBootPhrase(64);
-        
-        String attributes =
-            "dataEncryption=true;bootPassword=" + bootPhrase +
-             ";encryptionAlgorithm=" + algorithm;
+        Properties attributes = new Properties();
+        attributes.setProperty("dataEncryption", "true");
+        attributes.setProperty("bootPassword", getBootPhrase(64));
+        attributes.setProperty("encryptionAlgorithm", algorithm);
 
         return attributesDatabase(attributes, test);
-        
     }
     
     private static String getBootPhrase(int length)
@@ -140,18 +113,17 @@ private static String getBootPhrase(int length)
     /**
      * Decorate a set of tests to use an single
      * use database with TERRITORY_BASED collation
-     * set to the passed in locale. Database is created
-     * by the setUp method of the decorator.
+     * set to the passed in locale.
      * @param locale Locale used to set territory JDBC attribute. If null
      * then only collation=TERRITORY_BASED will be set.
      */
     public static Test territoryCollatedDatabase(Test test, final String locale)
     {
-        
-        String attributes = "collation=TERRITORY_BASED";
+        Properties attributes = new Properties();
+        attributes.setProperty("collation", "TERRITORY_BASED");
         
         if (locale != null)
-            attributes = attributes.concat(";territory=" + locale);
+            attributes.setProperty("territory", locale);
         
         return attributesDatabase(attributes, test);
     }
@@ -159,53 +131,36 @@ public static Test territoryCollatedDatabase(Test test, final String locale)
     /**
      * Decorate a set of tests to use an single
      * use database with TERRITORY_BASED:SECONDARY collation
-     * set to the passed in locale. Database is created
-     * by the setUp method of the decorator.
+     * set to the passed in locale.
      * @param locale Locale used to set territory JDBC attribute. If null
      * then only collation=TERRITORY_BASED:SECONDARY will be set.
      */
     public static Test territoryCollatedCaseInsensitiveDatabase(Test test, final String locale)
     {
-
-        String attributes = "collation=TERRITORY_BASED:SECONDARY";
+        Properties attributes = new Properties();
+        attributes.setProperty("collation", "TERRITORY_BASED:SECONDARY");
 
         if (locale != null)
-            attributes = attributes.concat(";territory=" + locale);
+            attributes.setProperty("territory", locale);
 
         return attributesDatabase(attributes, test);
     }
 
     /**
      * Decorate a test (or suite of tests) to use a single use database
-     * as the default database. The database is created by the setUp
-     * method of the decorator. The database will be created using
-     * a JDBC data source with createDatabase set to create and
-     * connectionAttributes set to the passed in attributes.
-     * 
+     * as the default database with a specified set connection attributes.
      * 
-     * @param attributes Value to set connectionAttributes to when creating
-     * the database.
+     * @param attributes properties to set in the connection URL or in the
+     * connectionAttributes of a data source when connecting to the database
      * @param test Test to decorate
      * @return Decorated test
      */
-    private static Test attributesDatabase(final String attributes, Test test)
+    private static Test attributesDatabase(
+            final Properties attributes, Test test)
     {
-        test = new BaseTestSetup(test) {
-            
-            /**
-             * Create a  database
-             * using a JDBC data source with connectionAttributes set.
-             */
-            protected void setUp() throws SQLException
-            {
-                DataSource ds = JDBCDataSource.getDataSource();
-                               
-                JDBCDataSource.setBeanProperty(ds,
-                        "createDatabase", "create");
-                JDBCDataSource.setBeanProperty(ds,
-                        "connectionAttributes", attributes);
-                                
-                ds.getConnection().close();
+        test = new ChangeConfigurationSetup(test) {
+            TestConfiguration getNewConfiguration(TestConfiguration old) {
+                return old.addConnectionAttributes(attributes);
             }
         };
         
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
index 16296b8d..e639a323 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
@@ -72,8 +72,13 @@ public Connection openConnection(String databaseName, String user, String passwo
             loadJDBCDriver();
         }
 
+        Properties connectionAttributes =
+                new Properties(config.getConnectionAttributes());
+        connectionAttributes.setProperty("user", user);
+        connectionAttributes.setProperty("password", password);
+
         try {
-            return DriverManager.getConnection(url, user, password);
+            return DriverManager.getConnection(url, connectionAttributes);
         } catch (SQLException e) {
             
             // Expected state for database not found.
@@ -88,9 +93,7 @@ public Connection openConnection(String databaseName, String user, String passwo
             if (!expectedState.equals(e.getSQLState()))
                 throw e;
             
-            Properties attributes = new Properties();
-            attributes.setProperty("user", user);
-            attributes.setProperty("password", password);
+            Properties attributes = new Properties(connectionAttributes);
             attributes.setProperty("create", "true");
             return DriverManager.getConnection(url, attributes);
         }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
index 82e58754..e8c3db5f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
@@ -126,6 +126,10 @@ static HashMap getDataSourceProperties(TestConfiguration config)
         beanProperties.put("user", config.getUserName());
         beanProperties.put("password", config.getUserPassword());
 
+        String attributes = config.getConnectionAttributesString();
+        if (attributes != null) {
+            beanProperties.put("connectionAttributes", attributes);
+        }
         
         return beanProperties;
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 9f7ad6ae..74a38f84 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -28,6 +28,7 @@
 import java.sql.SQLException;
 import java.util.Properties;
 import java.util.ArrayList;
+import java.util.Enumeration;
 import java.util.Hashtable;
 
 import junit.extensions.TestSetup;
@@ -1037,6 +1038,7 @@ private TestConfiguration() {
         logicalDbMapping.putAll(copy.logicalDbMapping);
         this.userName = copy.userName;
         this.userPassword = copy.userPassword;
+        this.connectionAttributes = new Properties(copy.connectionAttributes);
 
         this.isVerbose = copy.isVerbose;
         this.doTrace = copy.doTrace;
@@ -1060,6 +1062,7 @@ private TestConfiguration() {
         logicalDbMapping.putAll(copy.logicalDbMapping);
         this.userName = copy.userName;
         this.userPassword = copy.userPassword;
+        this.connectionAttributes = new Properties(copy.connectionAttributes);
 
         this.isVerbose = copy.isVerbose;
         this.doTrace = copy.doTrace;
@@ -1087,6 +1090,7 @@ private TestConfiguration() {
         logicalDbMapping.putAll(copy.logicalDbMapping);
         this.userName = copy.userName;
         this.userPassword = copy.userPassword;
+        this.connectionAttributes = new Properties(copy.connectionAttributes);
 
         this.isVerbose = copy.isVerbose;
         this.doTrace = copy.doTrace;
@@ -1123,6 +1127,7 @@ private TestConfiguration() {
         this.userPassword = password;
         this.passwordToken = passwordToken == null ?
                 copy.passwordToken : passwordToken;
+        this.connectionAttributes = new Properties(copy.connectionAttributes);
 
         this.isVerbose = copy.isVerbose;
         this.doTrace = copy.doTrace;
@@ -1186,6 +1191,7 @@ private TestConfiguration() {
         
         this.userName = copy.userName;
         this.userPassword = copy.userPassword;
+        this.connectionAttributes = new Properties(copy.connectionAttributes);
 
         this.isVerbose = copy.isVerbose;
         this.doTrace = copy.doTrace;
@@ -1238,6 +1244,25 @@ private TestConfiguration(Properties props)
         initConnector(null);
     }
 
+    /**
+     * Create a copy of this configuration with some additional connection
+     * attributes.
+     *
+     * @param attrs the extra connection attributes
+     * @return a copy of the configuration with extra attributes
+     */
+    TestConfiguration addConnectionAttributes(Properties attrs) {
+        TestConfiguration copy = new TestConfiguration(this);
+        Enumeration e = attrs.propertyNames();
+        while (e.hasMoreElements()) {
+            String key = (String) e.nextElement();
+            String val = attrs.getProperty(key);
+            copy.connectionAttributes.setProperty(key, val);
+        }
+        copy.initConnector(connector);
+        return copy;
+    }
+
     /**
      * Get the system properties in a privileged block.
      *
@@ -1321,7 +1346,15 @@ public JDBCClient getJDBCClient() {
     
     
     /**
+     * <p>
      * Return the jdbc url for connecting to the default database.
+     * </p>
+     *
+     * <p>
+     * The returned URL does not include the connection attributes. These must
+     * either be appended to the URL when connecting, or they must be passed
+     * as a {@code Properties} object to {@code DriverManager.getConnection()}.
+     * </p>
      *
      * @return JDBC url.
      */
@@ -1329,6 +1362,21 @@ public String getJDBCUrl() {
         return url;
     }
 
+    /**
+     * Return the JDBC URL for connecting to the default database, including
+     * any connection attributes.
+     *
+     * @return JDBC URL with connection attributes
+     */
+    public String getJDBCUrlWithAttributes() {
+        String attrs = getConnectionAttributesString();
+        if (attrs == null) {
+            return url;
+        } else {
+            return url + ';' + attrs;
+        }
+    }
+
     /**
      * Return the jdbc url for a connecting to the database.
      * 
@@ -1376,6 +1424,52 @@ public String getUserPassword() {
         return userPassword;
     }
 
+    /**
+     * Return the connection attributes to use in this configuration. The
+     * attributes won't contain user name or password. Use
+     * {@link #getUserName()} or {@link #getUserPassword()} instead to
+     * retrieve those attributes.
+     *
+     * @return connection attributes (can be {@code null})
+     */
+    Properties getConnectionAttributes() {
+        return connectionAttributes;
+    }
+
+    /**
+     * Get a flat string representation of the connection attributes. To
+     * be used in the connectionAttributes property of a data source.
+     *
+     * @return all connection attributes concatenated ({@code null} if there
+     * are no attributes)
+     */
+    String getConnectionAttributesString() {
+        if (connectionAttributes == null) {
+            return null;
+        }
+
+        StringBuffer sb = new StringBuffer();
+        Enumeration e = connectionAttributes.propertyNames();
+        boolean first = true;
+        while (e.hasMoreElements()) {
+            if (!first) {
+                sb.append(';');
+            }
+            String key = (String) e.nextElement();
+            sb.append(key);
+            sb.append('=');
+            sb.append(connectionAttributes.getProperty(key));
+            first = false;
+        }
+
+        if (first) {
+            // No connection attributes.
+            return null;
+        }
+
+        return sb.toString();
+    }
+
     /**
      * Return the host name for the network server.
      *
@@ -1744,6 +1838,12 @@ public Object run(){
     private boolean doTrace;
     private String ssl;
     
+    /**
+     * Extra connection attributes. Not for user name and password, use the
+     * fields {@link #userName} and {@link #userPassword} for those attributes.
+     */
+    private Properties connectionAttributes;
+
     /**
      * Password token used by the builtin authentication decorators.
      * Default simple scheme is the password is a function
