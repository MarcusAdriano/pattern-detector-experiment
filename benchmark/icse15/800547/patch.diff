diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
index 47317f9b..3d11a431 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
@@ -59,7 +59,7 @@ static BinaryMemtableManager instance()
         return instance_;
     }
     
-    class BinaryMemtableFlusher implements Runnable
+    static class BinaryMemtableFlusher implements Runnable
     {
         private BinaryMemtable memtable_;
         
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 0fb643f3..1b95e33a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -650,12 +650,11 @@ void storeLocation(SSTableReader sstable)
         }
     }
 
-    private PriorityQueue<FileStruct> initializePriorityQueue(List<String> files, List<Range> ranges, int minBufferSize) throws IOException
+    private PriorityQueue<FileStruct> initializePriorityQueue(List<String> files, List<Range> ranges) throws IOException
     {
         PriorityQueue<FileStruct> pq = new PriorityQueue<FileStruct>();
         if (files.size() > 1 || (ranges != null && files.size() > 0))
         {
-            int bufferSize = Math.min((ColumnFamilyStore.COMPACTION_MEMORY_THRESHOLD / files.size()), minBufferSize);
             FileStruct fs = null;
             for (String file : files)
             {
@@ -916,7 +915,7 @@ boolean doFileAntiCompaction(List<String> files, List<Range> ranges, EndPoint ta
                           + expectedRangeFileSize + "   is greater than the safe limit of the disk space available.");
             return result;
         }
-        PriorityQueue<FileStruct> pq = initializePriorityQueue(files, ranges, ColumnFamilyStore.BUFSIZE);
+        PriorityQueue<FileStruct> pq = initializePriorityQueue(files, ranges);
         if (pq.isEmpty())
         {
             return result;
@@ -1080,7 +1079,7 @@ private int doFileCompaction(List<String> files, int minBufferSize) throws IOExc
         long totalBytesWritten = 0;
         long totalkeysRead = 0;
         long totalkeysWritten = 0;
-        PriorityQueue<FileStruct> pq = initializePriorityQueue(files, null, minBufferSize);
+        PriorityQueue<FileStruct> pq = initializePriorityQueue(files, null);
 
         if (pq.isEmpty())
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java
index f6ef4bb5..5eb53831 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/MinorCompactionManager.java
@@ -66,7 +66,7 @@ public static MinorCompactionManager instance()
         return instance_;
     }
 
-    class FileCompactor2 implements Callable<Boolean>
+    static class FileCompactor2 implements Callable<Boolean>
     {
         private ColumnFamilyStore columnFamilyStore_;
         private List<Range> ranges_;
@@ -100,7 +100,7 @@ public Boolean call()
         }
     }
 
-    class OnDemandCompactor implements Runnable
+    static class OnDemandCompactor implements Runnable
     {
         private ColumnFamilyStore columnFamilyStore_;
         private long skip_ = 0L;
@@ -128,7 +128,7 @@ public void run()
         }
     }
 
-    class CleanupCompactor implements Runnable
+    static class CleanupCompactor implements Runnable
     {
         private ColumnFamilyStore columnFamilyStore_;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
index 7908705e..dcea6213 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
@@ -22,7 +22,6 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.io.Serializable;
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
@@ -36,7 +35,7 @@
  * The table name is needed so that we can use it to create repairs.
  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
  */
-public class ReadResponse implements Serializable 
+public class ReadResponse
 {
 private static ICompactSerializer<ReadResponse> serializer_;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
index ee32eba7..103dd054 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
@@ -102,7 +102,6 @@ void addColumnFamily(ColumnFamily columnFamily)
     void removeColumnFamily(ColumnFamily columnFamily)
     {
         columnFamilies_.remove(columnFamily.name());
-        int delta = (-1) * columnFamily.size();
     }
 
     public boolean isEmpty()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index a3ff064f..25ee1f38 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -457,7 +457,7 @@ void doGossipToSeed(Message message)
             else
             {
                 /* Gossip with the seed with some probability. */
-                double probability = seeds_.size() / ( liveEndpoints_.size() + unreachableEndpoints_.size() );
+                double probability = seeds_.size() / (double)( liveEndpoints_.size() + unreachableEndpoints_.size() );
                 double randDbl = random_.nextDouble();
                 if ( randDbl <= probability )
                     sendGossip(message, seeds_);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractStrategy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractStrategy.java
index b05d11ed..bcce35cf 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractStrategy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractStrategy.java
@@ -39,7 +39,7 @@
 */
 public abstract class AbstractStrategy implements IReplicaPlacementStrategy
 {
-    protected static Logger logger_ = Logger.getLogger(AbstractStrategy.class);
+    protected static final Logger logger_ = Logger.getLogger(AbstractStrategy.class);
 
     protected TokenMetadata tokenMetadata_;
     protected IPartitioner partitioner_;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/EndPoint.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/EndPoint.java
index fe7905ff..ab6dbf6b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/EndPoint.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/EndPoint.java
@@ -44,7 +44,7 @@
 
     // use as a kind of magic number to send ourselves a message indicating listening state
     protected static final int sentinelPort_ = 5555;
-    public static EndPoint sentinelLocalEndPoint_;
+    protected static EndPoint sentinelLocalEndPoint_;
     
     static
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index 8c021e14..706f4381 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -456,7 +456,6 @@ public IAsyncResult sendRR(Message message, EndPoint to)
     
     public void sendUdpOneWay(Message message, EndPoint to)
     {
-        EndPoint from = message.getFrom();              
         if (message.getFrom().equals(to)) {
             MessagingService.receive(message);
             return;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java
index 13606cbf..1b8b82a1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StreamContextManager.java
@@ -128,7 +128,7 @@ public void serialize(StreamContextManager.StreamContext sc, DataOutputStream do
         }
     }
     
-    public static class StreamStatus
+    public static class StreamStatus implements Serializable
     {
         private static ICompactSerializer<StreamStatus> serializer_;
         
@@ -253,11 +253,11 @@ public StreamStatusMessage deserialize(DataInputStream dis) throws IOException
     }
         
     /* Maintain a stream context per host that is the source of the stream */
-    public static Map<String, List<StreamContext>> ctxBag_ = new Hashtable<String, List<StreamContext>>();  
+    public static final Map<String, List<StreamContext>> ctxBag_ = new Hashtable<String, List<StreamContext>>();  
     /* Maintain in this map the status of the streams that need to be sent back to the source */
-    public static Map<String, List<StreamStatus>> streamStatusBag_ = new Hashtable<String, List<StreamStatus>>();
+    public static final Map<String, List<StreamStatus>> streamStatusBag_ = new Hashtable<String, List<StreamStatus>>();
     /* Maintains a callback handler per endpoint to notify the app that a stream from a given endpoint has been handled */
-    public static Map<String, IStreamComplete> streamNotificationHandlers_ = new HashMap<String, IStreamComplete>();
+    public static final Map<String, IStreamComplete> streamNotificationHandlers_ = new HashMap<String, IStreamComplete>();
     
     public synchronized static StreamContext getStreamContext(String key)
     {        
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index 24306813..85450cad 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -658,7 +658,7 @@ private static Row weakReadLocal(ReadCommand command) throws IOException
                     allKeys.remove(allKeys.size() - 1);
                     allKeys.addAll(rangeKeys);
                 }
-                else if (rangeKeys.size() > 0)
+                else if (rangeKeys != null && rangeKeys.size() > 0)
                 {
                     allKeys.addAll(rangeKeys);
                 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index dc69b670..8f9adff4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -76,7 +76,7 @@
     public final static String mbrshipCleanerVerbHandler_ = "MBRSHIP-CLEANER-VERB-HANDLER";
     public final static String bsMetadataVerbHandler_ = "BS-METADATA-VERB-HANDLER";
     public final static String calloutDeployVerbHandler_ = "CALLOUT-DEPLOY-VERB-HANDLER";
-    public static String rangeVerbHandler_ = "RANGE-VERB-HANDLER";
+    public final static String rangeVerbHandler_ = "RANGE-VERB-HANDLER";
 
     public static enum ConsistencyLevel
     {
