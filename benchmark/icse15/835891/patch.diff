diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
index c3b00f04..764e0849 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/Streaming.java
@@ -69,9 +69,6 @@ public static void transferRanges(InetAddress target, Collection<Range> ranges,
 
     private static void transferOneTable(InetAddress target, List<SSTableReader> sstables, String table) throws IOException
     {
-        if (sstables.isEmpty())
-            return;
-
         StreamContextManager.StreamContext[] streamContexts = new StreamContextManager.StreamContext[SSTable.FILES_ON_DISK * sstables.size()];
         int i = 0;
         for (SSTableReader sstable : sstables)
@@ -91,6 +88,9 @@ private static void transferOneTable(InetAddress target, List<SSTableReader> sst
         if (logger.isDebugEnabled())
           logger.debug("Sending a stream initiate message to " + target + " ...");
         MessagingService.instance().sendOneWay(message, target);
+
+        if (streamContexts.length > 0)
+        {
         if (logger.isDebugEnabled())
           logger.debug("Waiting for transfer to " + target + " to complete");
         StreamManager.instance(target).waitForStreamCompletion();
@@ -98,6 +98,7 @@ private static void transferOneTable(InetAddress target, List<SSTableReader> sst
         if (logger.isDebugEnabled())
             logger.debug("Done with transfer to " + target + " of " + StringUtils.join(sstables, ", "));
     }
+    }
 
     public static class StreamInitiateVerbHandler implements IVerbHandler
     {
@@ -119,6 +120,14 @@ public void doVerb(Message message)
                 StreamInitiateMessage biMsg = StreamInitiateMessage.serializer().deserialize(bufIn);
                 StreamContextManager.StreamContext[] streamContexts = biMsg.getStreamContext();
 
+                if (streamContexts.length == 0 && StorageService.instance().isBootstrapMode())
+                {
+                    if (logger.isDebugEnabled())
+                        logger.debug("no data needed from " + message.getFrom());
+                    StorageService.instance().removeBootstrapSource(message.getFrom());
+                    return;
+                }
+
                 Map<String, String> fileNames = getNewNames(streamContexts);
                 /*
                  * For each of stream context's in the incoming message
@@ -142,9 +151,9 @@ public void doVerb(Message message)
                 Message doneMessage = new Message(FBUtilities.getLocalAddress(), "", StorageService.streamInitiateDoneVerbHandler_, new byte[0] );
                 MessagingService.instance().sendOneWay(doneMessage, message.getFrom());
             }
-            catch ( IOException ex )
+            catch (IOException ex)
             {
-                logger.info(LogUtil.throwableToString(ex));
+                throw new IOError(ex);
             }
         }
 
