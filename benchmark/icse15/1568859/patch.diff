diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
index af47197d..0daef2b6 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
@@ -200,7 +200,7 @@ public void doTest() throws Exception {
       // we expect full throttle fails, but cloud client should not easily fail
       for (StopableThread indexThread : threads) {
         if (indexThread instanceof StopableIndexingThread && !(indexThread instanceof FullThrottleStopableIndexingThread)) {
-          assertFalse("There were too many update fails - we expect it can happen, but shouldn't easily", ((StopableIndexingThread) indexThread).getFails() > 1);
+          assertFalse("There were too many update fails - we expect it can happen, but shouldn't easily", ((StopableIndexingThread) indexThread).getFails() > 10);
         }
       }
       
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
index 67d15043..931e5110 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
@@ -19,6 +19,7 @@
 
 import org.apache.http.client.HttpClient;
 import org.apache.solr.client.solrj.*;
+import org.apache.solr.client.solrj.request.IsUpdateRequest;
 import org.apache.solr.client.solrj.request.RequestWriter;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.params.ModifiableSolrParams;
@@ -28,6 +29,7 @@
 
 import java.io.IOException;
 import java.lang.ref.WeakReference;
+import java.net.ConnectException;
 import java.net.MalformedURLException;
 import java.net.SocketException;
 import java.net.SocketTimeoutException;
@@ -75,7 +77,14 @@
  * @since solr 1.4
  */
 public class LBHttpSolrServer extends SolrServer {
+  private static Set<Integer> RETRY_CODES = new HashSet<Integer>(4);
 
+  static {
+    RETRY_CODES.add(404);
+    RETRY_CODES.add(403);
+    RETRY_CODES.add(503);
+    RETRY_CODES.add(500);
+  }
 
   // keys to the maps are currently of the form "http://localhost:8983/solr"
   // which should be equivalent to CommonsHttpSolrServer.getBaseURL()
@@ -274,7 +283,7 @@ protected HttpSolrServer makeServer(String server) {
   public Rsp request(Req req) throws SolrServerException, IOException {
     Rsp rsp = new Rsp();
     Exception ex = null;
-
+    boolean isUpdate = req.request instanceof IsUpdateRequest;
     List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());
 
     for (String serverStr : req.getServers()) {
@@ -294,25 +303,31 @@ public Rsp request(Req req) throws SolrServerException, IOException {
         rsp.rsp = server.request(req.getRequest());
         return rsp; // SUCCESS
       } catch (SolrException e) {
-        // we retry on 404 or 403 or 503 - you can see this on solr shutdown
-        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {
+        // we retry on 404 or 403 or 503 or 500
+        // unless it's an update - then we only retry on connect exceptions
+        if (!isUpdate && RETRY_CODES.contains(e.code())) {
           ex = addZombie(server, e);
         } else {
           // Server is alive but the request was likely malformed or invalid
           throw e;
         }
-       
-       // TODO: consider using below above - currently does cause a problem with distrib updates:
-       // seems to match up against a failed forward to leader exception as well...
-       //     || e.getMessage().contains("java.net.SocketException")
-       //     || e.getMessage().contains("java.net.ConnectException")
       } catch (SocketException e) {
+        if (!isUpdate || e instanceof ConnectException) {
         ex = addZombie(server, e);
+        } else {
+          throw e;
+        }
       } catch (SocketTimeoutException e) {
+        if (!isUpdate) {
         ex = addZombie(server, e);
+        } else {
+          throw e;
+        }
       } catch (SolrServerException e) {
         Throwable rootCause = e.getRootCause();
-        if (rootCause instanceof IOException) {
+        if (!isUpdate && rootCause instanceof IOException) {
+          ex = addZombie(server, e);
+        } else if (isUpdate && rootCause instanceof ConnectException) {
           ex = addZombie(server, e);
         } else {
           throw e;
@@ -329,8 +344,9 @@ public Rsp request(Req req) throws SolrServerException, IOException {
         zombieServers.remove(wrapper.getKey());
         return rsp; // SUCCESS
       } catch (SolrException e) {
-        // we retry on 404 or 403 or 503 - you can see this on solr shutdown
-        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {
+        // we retry on 404 or 403 or 503 or 500
+        // unless it's an update - then we only retry on connect exceptions
+        if (!isUpdate && RETRY_CODES.contains(e.code())) {
           ex = e;
           // already a zombie, no need to re-add
         } else {
@@ -340,14 +356,23 @@ public Rsp request(Req req) throws SolrServerException, IOException {
         }
 
       } catch (SocketException e) {
+        if (!isUpdate || e instanceof ConnectException) {
         ex = e;
+        } else {
+          throw e;
+        }
       } catch (SocketTimeoutException e) {
+        if (!isUpdate) {
         ex = e;
+        } else {
+          throw e;
+        }
       } catch (SolrServerException e) {
         Throwable rootCause = e.getRootCause();
-        if (rootCause instanceof IOException) {
+        if (!isUpdate && rootCause instanceof IOException) {
+          ex = e;
+        } else if (isUpdate && rootCause instanceof ConnectException) {
           ex = e;
-          // already a zombie, no need to re-add
         } else {
           throw e;
         }
