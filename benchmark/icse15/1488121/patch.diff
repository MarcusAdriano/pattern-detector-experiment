diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java
index b3488c1c..4045d29e 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java
@@ -21,12 +21,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.lang;
 
-import java.io.InputStreamReader;
-
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
-import java.sql.Statement;
 import java.sql.Types;
 
 import junit.framework.Test;
@@ -37,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
 import org.apache.derbyTesting.junit.SupportFilesSetup;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 /**
@@ -78,18 +76,27 @@ public static Test suite()
              * database before the embedded and client suites.  This ensures
              * that we do not remove the objects created by XBindTestSetup.
              */
-            suite.addTest(
-                TestConfiguration.defaultSuite(XMLBindingTest.class, false));
+            Test test =
+                TestConfiguration.defaultSuite(XMLBindingTest.class, false);
 
-            XBindTestSetup wrapper = new XBindTestSetup(suite);
+            test = new XBindTestSetup(test);
 
             /* XML parser needs to read "personal.dtd" for schema-based
              * insertion, so copy it to user directory.
              */
-            return new SupportFilesSetup(wrapper,
+            test = new SupportFilesSetup(test,
                 new String [] {
                     "functionTests/tests/lang/xmlTestFiles/personal.dtd"
                 });
+
+            // JEP 185 (http://openjdk.java.net/jeps/185) in Java SE 8 added
+            // restrictions on access to external resources. This system
+            // property loosens the restriction so that the XML parser is
+            // allowed to read the DTD.
+            test = SystemPropertyTestSetup.singleProperty(
+                    test, "javax.xml.accessExternalDTD", "file");
+
+            suite.addTest(test);
         }
 
         return suite;
@@ -266,8 +273,8 @@ private void existsQuery(String xPath, int expectedRows)
      */
     private static class XBindTestSetup extends BaseJDBCTestSetup
     {
-        public XBindTestSetup(TestSuite tSuite) {
-            super(tSuite);
+        public XBindTestSetup(Test test) {
+            super(test);
         }
 
         /**
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
index 7d09349b..27d065ae 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
@@ -68,6 +68,31 @@ public SystemPropertyTestSetup(Test test,
 		this.newValues = newValues;
 		this.staticProperties = false;
 	}
+
+    /**
+     * Decorate a test so that it sets a single system property in
+     * {@code setUp()} and resets it in {@code tearDown()}. The engine is
+     * not shut down after the property is set.
+     */
+    public static Test singleProperty(Test test, String property, String value)
+    {
+        return singleProperty(test, property, value, false);
+    }
+
+    /**
+     * Decorate a test so that it sets a single system property in
+     * {@code setUp()} and resets it in {@code tearDown()}. The engine is
+     * shut down after the property is set if {@code staticProperty} is
+     * {@code true}.
+     */
+    public static Test singleProperty(Test test, String property, String value,
+            boolean staticProperty)
+    {
+        Properties properties = new Properties();
+        properties.setProperty(property, value);
+        return new SystemPropertyTestSetup(test, properties, staticProperty);
+    }
+
 	/**
 	 * For each property store the current value and
 	 * replace it with the new value, unless there is no change.
