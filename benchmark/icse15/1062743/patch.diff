diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
index f386a49e..7db6b40b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
@@ -99,9 +99,41 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     // Convert from boolean source to target type.
     // In support of PS.setBoolean().
-    // See differences.html for DNC setBoolean() semantics.
     final Object setObject(int targetType, boolean source) throws SqlException {
-        return setObject(targetType, (short) (source ? 1 : 0));
+        short numVal = source ? (short) 1 : 0;
+        switch (targetType) {
+        case Types.BIT:
+        case Types.BOOLEAN:
+            return Boolean.valueOf(source);
+
+        case Types.SMALLINT:
+            return new Short(numVal);
+
+        case Types.INTEGER:
+            return new Integer(numVal);
+
+        case Types.BIGINT:
+            return new Long(numVal);
+
+        case Types.REAL:
+            return new Float(numVal);
+
+        case Types.DOUBLE:
+            return new Double(numVal);
+
+        case Types.DECIMAL:
+            return java.math.BigDecimal.valueOf(numVal);
+
+        case Types.CHAR:
+        case Types.VARCHAR:
+        case Types.LONGVARCHAR:
+            return String.valueOf(source);
+
+        default:
+            throw new SqlException(agent_.logWriter_,
+                new ClientMessageId (SQLState.LANG_DATA_TYPE_SET_MISMATCH),
+                "boolean", Types.getTypeString(targetType));
+        }
     }
 
     // Convert from byte source to target type
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
index f34af335..4ed176a7 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/DatabaseMetaData.java
@@ -96,6 +96,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /** True if the server supports boolean values */
     private boolean supportsBooleanValues_;
 
+    /**
+     * True if the server supports transport of boolean parameter values as
+     * booleans. If false, boolean values used as parameters in prepared
+     * statements will be transported as smallints to preserve backwards
+     * compatibility. See DERBY-4965.
+     */
+    private boolean supportsBooleanParameterTransport_;
+
     //---------------------constructors/finalizer---------------------------------
 
     protected DatabaseMetaData(Agent agent, Connection connection, ProductLevel productLevel) {
@@ -2332,6 +2340,9 @@ protected void computeFeatureSet_() {
 
         supportsBooleanValues_ =
                 productLevel_.greaterThanOrEqualTo(10, 7, 0);
+
+        supportsBooleanParameterTransport_ =
+                productLevel_.greaterThanOrEqualTo(10, 8, 0);
     }
 
     /**
@@ -2388,6 +2399,14 @@ final public boolean serverSupportsBooleanValues() {
         return supportsBooleanValues_;
     }
 
+    /**
+     * Check if the server accepts receiving booleans as parameter values.
+     * @return true if the server supports this
+     */
+    final public boolean serverSupportsBooleanParameterTransport() {
+        return supportsBooleanParameterTransport_;
+    }
+
     //------------helper methods for meta data info call methods------------------
 
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
index cbc23c8f..c44ab443 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
@@ -721,6 +721,9 @@ private void buildFDODTA(int numVars,
                         }
                         break;
 
+                    case DRDAConstants.DRDA_TYPE_NBOOLEAN:
+                        write1Byte(((Short) inputs[i]).shortValue());
+                        break;
                     case DRDAConstants.DRDA_TYPE_NINTEGER:
                         writeIntFdocaData(((Integer) inputs[i]).intValue());
                         break;
@@ -1217,8 +1220,10 @@ private int calculateColumnsInSQLDTAGRPtriplet(int numVars) {
                     lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NINTEGER;
                     lidAndLengths[i][1] = 4;
                     break;
+                case java.sql.Types.BIT:
                 case java.sql.Types.BOOLEAN:
-                    if ( netAgent_.netConnection_.serverSupportsBooleanValues() )
+                    if ( netAgent_.netConnection_.databaseMetaData_.
+                            serverSupportsBooleanParameterTransport() )
                     {
                         lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NBOOLEAN;
                         lidAndLengths[i][1] = 1;
@@ -1231,7 +1236,6 @@ private int calculateColumnsInSQLDTAGRPtriplet(int numVars) {
                     break;
                 case java.sql.Types.SMALLINT:
                 case java.sql.Types.TINYINT:
-                case java.sql.Types.BIT:
                     // lid: PROTOCOL_TYPE_NSMALL,  length override: 2
                     // dataFormat: Short
                     lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NSMALL;
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index e822396c..675e6c1e 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -4635,6 +4635,14 @@ private void readAndSetParams(int i,
 
 		switch (drdaType)
 		{
+            case DRDAConstants.DRDA_TYPE_NBOOLEAN:
+            {
+                boolean paramVal = (reader.readByte() == 1);
+                if (SanityManager.DEBUG)
+                    trace("boolean parameter value is: " + paramVal);
+                ps.setBoolean(i+1, paramVal);
+                break;
+            }
 			case DRDAConstants.DRDA_TYPE_NSMALL:
 			{
 				short paramVal = (short) reader.readShort(getByteOrder());
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index 1ee5cf65..794531a9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -1420,8 +1420,7 @@ public void setValue(String theValue)
 
     public void setValue(boolean theValue) throws StandardException
     {
-        // match JCC.
-        setValue(theValue ? "1" : "0");
+        setValue(Boolean.toString(theValue));
     }
 
     public void setValue(int theValue)  throws StandardException
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
index 70438d43..01763939 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
@@ -3564,9 +3564,8 @@ else if ("setObject(java.lang.Clob)".equals(method))
 
     private static void checkValidStringValue(String method, String s) {
         s = s.trim();
-        if ("setBoolean".equals(method) ||
-                "setObject(java.lang.Boolean)".equals(method) )
-            assertEquals("1",s);
+        if (isBooleanMethod(method))
+            assertEquals("true", s);
         else if ("setBytes".equals(method) ||
                 ("setObject(byte[])".equals(method)))
             assertEquals("EncodedString: > 1027 ",s.substring(0,22));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
index 1daafb42..504d1f02 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
@@ -1752,6 +1752,72 @@ private void test_4964_minion(
         }
     }
 
+    /**
+     * Verify fix for DERBY-4965 - conversion from boolean to char results
+     * in 1/0 instead of true/false.
+     */
+    public void test_4965() throws SQLException {
+        String[] stringTypes = { "CHAR(10)", "VARCHAR(10)", "LONG VARCHAR" };
+        for (int i = 0; i < stringTypes.length; i++) {
+            PreparedStatement ps = prepareStatement(
+                    "values cast(? as " + stringTypes[i] + ")");
+
+            // Test setBoolean()
+            ps.setBoolean(1, true);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "true");
+            ps.setBoolean(1, false);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "false");
+
+            // Test setObject(int, Object)
+            ps.setObject(1, Boolean.TRUE);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "true");
+            ps.setObject(1, Boolean.FALSE);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "false");
+
+            // Test setObject(int, Object, int)
+            int[] targetTypes = {
+                Types.BIT, Types.BOOLEAN,
+                Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR,
+            };
+            for (int j = 0; j < targetTypes.length; j++) {
+                ps.setObject(1, Boolean.TRUE, targetTypes[j]);
+                JDBC.assertSingleValueResultSet(ps.executeQuery(), "true");
+                ps.setObject(1, Boolean.FALSE, targetTypes[j]);
+                JDBC.assertSingleValueResultSet(ps.executeQuery(), "false");
+            }
+        }
+
+        String[] intTypes = { "SMALLINT", "INTEGER", "BIGINT" };
+        for (int i = 0; i < intTypes.length; i++) {
+            PreparedStatement ps = prepareStatement(
+                    "values cast(? as " + intTypes[i] + ")");
+
+            // Test setBoolean()
+            ps.setBoolean(1, true);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
+            ps.setBoolean(1, false);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "0");
+
+            // Test setObject(int, Object)
+            ps.setObject(1, Boolean.TRUE);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
+            ps.setObject(1, Boolean.FALSE);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), "0");
+
+            // Test setObject(int, Object, int)
+            int[] targetTypes = {
+                Types.BIT, Types.BOOLEAN,
+                Types.SMALLINT, Types.INTEGER, Types.BIGINT,
+            };
+            for (int j = 0; j < targetTypes.length; j++) {
+                ps.setObject(1, Boolean.TRUE, targetTypes[j]);
+                JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
+                ps.setObject(1, Boolean.FALSE, targetTypes[j]);
+                JDBC.assertSingleValueResultSet(ps.executeQuery(), "0");
+            }
+        }
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // SQL ROUTINES
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullIfTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullIfTest.java
index 86ec2caa..2464725e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullIfTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullIfTest.java
@@ -88,8 +88,8 @@
             /*DECIMAL(10,5)*/ {"1","1",null,"1"},
             /*REAL*/ {"1.0","1.0",null,"1.0"},
             /*DOUBLE*/ {"1.0","1.0",null,"1.0"},
-            /*CHAR(60)*/ {"1","1","1","1"},
-            /*VARCHAR(60)*/ {"1","1","1","1"},
+            /*CHAR(60)*/ {"true","true","true","true"},
+            /*VARCHAR(60)*/ {"true","true","true","true"},
             /*LONG VARCHAR*/ {"Exception","Exception","Exception","Exception"},
             /*CHAR(60) FOR BIT DATA*/ {null,null,null,null},
             /*VARCHAR(60) FOR BIT DATA*/ {null,null,null,null},
@@ -109,8 +109,8 @@
             /*DECIMAL(10,5)*/ {"1.00000","1.00000",null,"1.00000"},
             /*REAL*/ {"1.0","1.0",null,"1.0"},
             /*DOUBLE*/ {"1.0","1.0",null,"1.0"},
-            /*CHAR(60)*/ {"1","1","1","1"},
-            /*VARCHAR(60)*/ {"1","1","1","1"},
+            /*CHAR(60)*/ {"true","true","true","true"},
+            /*VARCHAR(60)*/ {"true","true","true","true"},
             /*LONG VARCHAR*/ {"Exception","Exception","Exception","Exception"},
             /*CHAR(60) FOR BIT DATA*/ {null,null,null,null},
             /*VARCHAR(60) FOR BIT DATA*/ {null,null,null,null},
