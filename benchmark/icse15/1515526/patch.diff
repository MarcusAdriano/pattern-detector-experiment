diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/join/BJQParserTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/join/BJQParserTest.java
index 5e689c8e..7257dcb5 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/join/BJQParserTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/join/BJQParserTest.java
@@ -42,6 +42,7 @@
 import org.apache.solr.search.SyntaxError;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.Ignore;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -66,13 +67,21 @@ public static void createIndex() throws IOException, Exception {
     int i = 0;
     List<List<String[]>> blocks = createBlocks();
     for (List<String[]> block : blocks) {
+      List<XmlDoc> updBlock = new ArrayList<XmlDoc>();
+      
       for (String[] doc : block) {
         String[] idDoc = Arrays.copyOf(doc,doc.length+2);
         idDoc[doc.length]="id";
         idDoc[doc.length+1]=Integer.toString(i);
-        assertU(add(doc(idDoc)));
+        updBlock.add(doc(idDoc));
         i++;
       }
+      //got xmls for every doc. now nest all into the last one
+      XmlDoc parentDoc = updBlock.get(updBlock.size()-1);
+      parentDoc.xml = parentDoc.xml.replace("</doc>", 
+          updBlock.subList(0, updBlock.size()-1).toString().replaceAll("[\\[\\]]","")+"</doc>");
+      assertU(add(parentDoc));
+      
       if (random().nextBoolean()) {
         assertU(commit());
         // force empty segment (actually, this will no longer create an empty segment, only a new segments_n)
@@ -201,6 +210,7 @@ public void testIntersectParentBqChildBq() throws IOException {
   }
   
   @Test
+  @Ignore("SOLR-5168")
   public void testGrandChildren() throws IOException {
     assertQ(
         req("q", "{!parent which=$parentfilter v=$children}", "children",
