diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
index 0a34637c..13d9e148 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
@@ -46,6 +46,7 @@
 import java.io.IOException;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.PreparedStatement;
 
 /**
  * SQLBlob satisfies the DataValueDescriptor,
@@ -186,4 +187,9 @@ public int typePrecedence()
 			return TypeId.BLOB_PRECEDENCE; // not really used
 		}
 
+    public void setInto(PreparedStatement ps, int position) throws SQLException, StandardException {
+        ps.setBlob(position,null);    
 	}
+}
+
+
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java
index e60d13dc..d340fcb6 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTimestamp.java
@@ -46,12 +46,15 @@
 import org.apache.derby.iapi.types.SQLDouble;
 import org.apache.derby.iapi.types.SQLTime;
 
+
+
 import java.sql.Date;
 import java.sql.Time;
 import java.sql.Timestamp;
 import java.sql.Types;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.PreparedStatement;
 
 import java.util.Calendar;
 import java.util.GregorianCalendar;
@@ -990,5 +993,12 @@ private static int computeEncodedTime(java.util.Date value, Calendar currentCal)
 		currentCal.setTime(value);
 		return SQLTime.computeEncodedTime(currentCal);
 	}
+
+    
+    public void setInto(PreparedStatement ps, int position) throws SQLException, StandardException {
+
+                  ps.setTimestamp(position, getTimestamp((Calendar) null));
+     }
 }
 
+
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
index 3f24d583..ee247725 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
@@ -1 +1,120 @@
   + native
+package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+
+
+import java.sql.*;
+
+import org.apache.derby.tools.ij;
+import org.apache.derby.tools.JDBCDisplayUtil;
+
+public class prepStmtNull {
+
+    public static void main(String[] args) {
+        test1(args);
+        test2(args);
+    }
+    
+        public static void test1(String []args) {   
+                Connection con;
+                ResultSet rs;
+                PreparedStatement stmt = null;
+                PreparedStatement pStmt = null;
+                Statement stmt1 = null;
+
+                System.out.println("Test prepStmtNull starting");
+
+                try
+                {
+                        // use the ij utility to read the property file and
+                        // make the initial connection.
+                        ij.getPropertyArg(args);
+                        con = ij.startJBMS();
+					
+			con.setAutoCommit(false);                        			              
+                        
+                        stmt = con.prepareStatement("create table nullTS(name varchar(10), ts timestamp)");
+   			stmt.executeUpdate();
+   			con.commit();
+   			
+   			pStmt = con.prepareStatement("insert into nullTS values (?,?)");
+   			   			
+   			pStmt.setString(1,"work");
+			pStmt.setNull(2,java.sql.Types.TIMESTAMP);
+			pStmt.addBatch();
+
+		
+			pStmt.executeBatch();
+			con.commit();
+
+			stmt1 = con.createStatement();
+		        rs = stmt1.executeQuery("select * from nullTS");
+			while(rs.next()) {
+			   System.out.println("ResultSet is: "+rs.getObject(1));
+			   System.out.println("ResultSet is: "+rs.getObject(2));
+			}
+ 		} catch(SQLException sqle) {
+ 		   dumpSQLExceptions(sqle);
+ 		   sqle.printStackTrace();
+ 		} catch(Throwable e) {
+ 		   System.out.println("FAIL -- unexpected exception: "+e);
+                   e.printStackTrace();
+
+ 		}
+     }
+     
+     public static void test2(String []args) {   
+                Connection con;
+                ResultSet rs;
+                PreparedStatement stmt = null;
+                PreparedStatement pStmt = null;
+                Statement stmt1 = null;
+
+                System.out.println("Test prepStmtNull starting");
+
+                try
+                {
+                        // use the ij utility to read the property file and
+                        // make the initial connection.
+                        ij.getPropertyArg(args);
+                        con = ij.startJBMS();
+					
+			con.setAutoCommit(false);                        			              
+                        
+                        stmt = con.prepareStatement("create table nullBlob(name varchar(10), bval blob(16K))");
+   			stmt.executeUpdate();
+   			con.commit();
+   			
+   			pStmt = con.prepareStatement("insert into nullBlob values (?,?)");
+   			   			
+   			pStmt.setString(1,"blob");
+			pStmt.setNull(2,java.sql.Types.BLOB);
+			pStmt.addBatch();
+
+		
+			pStmt.executeBatch();
+			con.commit();
+
+			stmt1 = con.createStatement();
+		        rs = stmt1.executeQuery("select * from nullBlob");
+			while(rs.next()) {
+			   System.out.println("ResultSet is: "+rs.getObject(1));
+			   System.out.println("ResultSet is: "+rs.getObject(2));
+			}
+ 		} catch(SQLException sqle) {
+ 		   dumpSQLExceptions(sqle);
+ 		   sqle.printStackTrace();
+ 		} catch(Throwable e) {
+ 		   System.out.println("FAIL -- unexpected exception: "+e);
+                   e.printStackTrace();
+
+ 		}
+     }
+     
+     static private void dumpSQLExceptions (SQLException se) {
+                System.out.println("FAIL -- unexpected exception");
+                while (se != null) {
+                        System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
+                        se = se.getNextException();
+                }
+        }
+}     
