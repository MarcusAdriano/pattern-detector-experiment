diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/CacheingMessageProducer.java b/cassandra/trunk/src/java/org/apache/cassandra/net/CacheingMessageProducer.java
index f844a0c1..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/CacheingMessageProducer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/CacheingMessageProducer.java
@@ -1,27 +0,0 @@
-package org.apache.cassandra.net;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
-
-public class CacheingMessageProducer implements MessageProducer
-{
-    private final MessageProducer prod;
-    private final Map<Integer, Message> messages = new HashMap<Integer, Message>();
-
-    public CacheingMessageProducer(MessageProducer prod)
-    {
-        this.prod = prod;    
-    }
-
-    public synchronized Message getMessage(int version) throws IOException
-    {
-        Message msg = messages.get(version);
-        if (msg == null)
-        {
-            msg = prod.getMessage(version);
-            messages.put(version, msg);
-        }
-        return msg;
-    }
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/CachingMessageProducer.java b/cassandra/trunk/src/java/org/apache/cassandra/net/CachingMessageProducer.java
index e69de29b..88fc2d08 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/CachingMessageProducer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/CachingMessageProducer.java
@@ -0,0 +1,27 @@
+package org.apache.cassandra.net;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class CachingMessageProducer implements MessageProducer
+{
+    private final MessageProducer prod;
+    private final Map<Integer, Message> messages = new HashMap<Integer, Message>();
+
+    public CachingMessageProducer(MessageProducer prod)
+    {
+        this.prod = prod;    
+    }
+
+    public synchronized Message getMessage(int version) throws IOException
+    {
+        Message msg = messages.get(version);
+        if (msg == null)
+        {
+            msg = prod.getMessage(version);
+            messages.put(version, msg);
+        }
+        return msg;
+    }
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java b/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java
index 0da3af09..9d1c0e5d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java
@@ -25,7 +25,7 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
-import org.apache.cassandra.net.CacheingMessageProducer;
+import org.apache.cassandra.net.CachingMessageProducer;
 import org.apache.cassandra.net.MessageProducer;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.slf4j.Logger;
@@ -94,7 +94,7 @@ else if (theirVersion.timestamp() > myVersion.timestamp())
     /** actively announce my version to a set of hosts via rpc.  They may culminate with them sending me migrations. */
     public static void announce(final UUID version, Set<InetAddress> hosts)
     {
-        MessageProducer prod = new CacheingMessageProducer(new MessageProducer() {
+        MessageProducer prod = new CachingMessageProducer(new MessageProducer() {
             public Message getMessage(int protocolVersion) throws IOException
             {
                 return makeVersionMessage(version, protocolVersion);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index af2baf27..61920909 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -30,7 +30,7 @@
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimap;
-import org.apache.cassandra.net.CacheingMessageProducer;
+import org.apache.cassandra.net.CachingMessageProducer;
 import org.apache.cassandra.net.MessageProducer;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
@@ -208,7 +208,7 @@ private static void sendToHintedEndpoints(final RowMutation rm, Multimap<InetAdd
     {
         // Multimap that holds onto all the messages and addresses meant for a specific datacenter
         Map<String, Multimap<Message, InetAddress>> dcMessages = new HashMap<String, Multimap<Message, InetAddress>>(hintedEndpoints.size());
-        MessageProducer prod = new CacheingMessageProducer(rm);
+        MessageProducer prod = new CachingMessageProducer(rm);
 
         for (Map.Entry<InetAddress, Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet())
         {
@@ -558,7 +558,7 @@ public void runMayThrow() throws IOException
 
             // We lazy-construct the digest Message object since it may not be necessary if we
             // are doing a local digest read, or no digest reads at all.
-            MessageProducer prod = new CacheingMessageProducer(digestCommand);
+            MessageProducer prod = new CachingMessageProducer(digestCommand);
             for (InetAddress digestPoint : endpoints.subList(1, endpoints.size()))
             {
                 if (digestPoint.equals(FBUtilities.getLocalAddress()))
@@ -670,7 +670,7 @@ protected void runMayThrow() throws IOException
     {
         ReadResponseResolver resolver = new ReadResponseResolver(command.table, command.key);
         RepairCallback<Row> handler = new RepairCallback<Row>(resolver, endpoints);
-        MessageProducer prod = new CacheingMessageProducer(command);
+        MessageProducer prod = new CachingMessageProducer(command);
         for (InetAddress endpoint : endpoints)
             MessagingService.instance().sendRR(prod, endpoint, handler);
         return handler;
@@ -725,7 +725,7 @@ protected void runMayThrow() throws IOException
                     // collect replies and resolve according to consistency level
                     RangeSliceResponseResolver resolver = new RangeSliceResponseResolver(command.keyspace, liveEndpoints);
                     ReadCallback<List<Row>> handler = getReadCallback(resolver, command.keyspace, consistency_level);
-                    MessageProducer prod = new CacheingMessageProducer(c2);
+                    MessageProducer prod = new CachingMessageProducer(c2);
                     // TODO bail early if live endpoints can't satisfy requested consistency level
                     for (InetAddress endpoint : liveEndpoints)
                     {
@@ -1011,7 +1011,7 @@ public double getRecentCounterWriteLatencyMicros()
                 throw new UnavailableException();
 
             IndexScanCommand command = new IndexScanCommand(keyspace, column_family, index_clause, column_predicate, range);
-            MessageProducer prod = new CacheingMessageProducer(command);
+            MessageProducer prod = new CachingMessageProducer(command);
             for (InetAddress endpoint : liveEndpoints)
             {
                 MessagingService.instance().sendRR(prod, endpoint, handler);
@@ -1099,7 +1099,7 @@ public static void truncateBlocking(String keyspace, String cfname) throws Unava
         // Send out the truncate calls and track the responses with the callbacks.
         logger.debug("Starting to send truncate messages to hosts {}", allEndpoints);
         final Truncation truncation = new Truncation(keyspace, cfname);
-        MessageProducer prod = new CacheingMessageProducer(truncation);
+        MessageProducer prod = new CachingMessageProducer(truncation);
         for (InetAddress endpoint : allEndpoints)
         {
             MessagingService.instance().sendRR(prod, endpoint, responseHandler);
