diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java
index e4f9353e..95c3ca52 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java
@@ -34,7 +34,6 @@
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.List;
 
 /**
  * Update handler which uses the JavaBin format
@@ -104,11 +103,8 @@ public void update(SolrInputDocument document, UpdateRequest updateRequest) {
         log.error("Exception while processing update request", e);
         break;
       }
-      if (update.getDeleteById() != null) {
-        delete(update.getDeleteById(), processor, true);
-      }
-      if (update.getDeleteQuery() != null) {
-        delete(update.getDeleteQuery(), processor, false);
+      if (update.getDeleteById() != null || update.getDeleteQuery() != null) {
+        delete(update, processor);
       }
     }
   }
@@ -117,39 +113,39 @@ private AddUpdateCommand getAddCommand(SolrParams params) {
     AddUpdateCommand addCmd = new AddUpdateCommand();
     boolean overwrite = true;  // the default
 
-    Boolean overwritePending = null;
-    Boolean overwriteCommitted = null;
-
-
     overwrite = params.getBool(UpdateParams.OVERWRITE, overwrite);
     addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);
     // check if these flags are set
-    if (overwritePending != null && overwriteCommitted != null) {
-      if (overwritePending != overwriteCommitted) {
-        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
-                "can't have different values for 'overwritePending' and 'overwriteCommitted'");
-      }
-      overwrite = overwritePending;
-    }
     addCmd.overwriteCommitted = overwrite;
     addCmd.overwritePending = overwrite;
     addCmd.allowDups = !overwrite;
     return addCmd;
   }
 
-  private void delete(List<String> l, UpdateRequestProcessor processor, boolean isId) throws IOException {
-    for (String s : l) {
+  private void delete(UpdateRequest update, UpdateRequestProcessor processor) throws IOException {
+    SolrParams params = update.getParams();
       DeleteUpdateCommand delcmd = new DeleteUpdateCommand();
-      if (isId) {
-        delcmd.id = s;
-      } else {
-        delcmd.query = s;
-      }
       delcmd.fromCommitted = true;
       delcmd.fromPending = true;
+    if(params != null) {
+      delcmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);
+    }
+    
+    if(update.getDeleteById() != null) {
+      for (String s : update.getDeleteById()) {
+        delcmd.id = s;
+        processor.processDelete(delcmd);
+      }
+      delcmd.id = null;
+    }
+    
+    if(update.getDeleteQuery() != null) {
+      for (String s : update.getDeleteQuery()) {
+        delcmd.query = s;
       processor.processDelete(delcmd);
     }
   }
+  }
 
   @Override
   public String getDescription() {
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/JsonLoader.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/JsonLoader.java
index f722c53a..7143b6bd 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/JsonLoader.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/JsonLoader.java
@@ -156,6 +156,7 @@ DeleteUpdateCommand parseDelete() throws IOException {
 
     DeleteUpdateCommand cmd = new DeleteUpdateCommand();
     cmd.fromCommitted = cmd.fromPending = true;
+    cmd.commitWithin = commitWithin;
 
     while( true ) {
       int ev = parser.nextEvent();
@@ -168,7 +169,9 @@ DeleteUpdateCommand parseDelete() throws IOException {
           else if( "query".equals(key) ) {
             cmd.query = parser.getString();
           }
-          else {
+          else if( "commitWithin".equals(key) ) { 
+            cmd.commitWithin = Integer.parseInt(parser.getString());
+          } else {
             throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown key: "+key+" ["+parser.getPosition()+"]" );
           }
         }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XMLLoader.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XMLLoader.java
index a5388a3e..d522657b 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XMLLoader.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XMLLoader.java
@@ -198,28 +198,43 @@ else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {
           } // end rollback
           else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {
             XmlUpdateRequestHandler.log.trace("parsing delete");
-            processDelete(processor, parser);
+            processDelete(req, processor, parser);
           } // end delete
           break;
       }
     }
   }
 
+  /*
+   * Signature for backward compat
+   */
+  void processDelete(UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {
+    processDelete(null, processor, parser);
+  }
+
   /**
    * @since solr 1.3
    */
-  void processDelete(UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {
+  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {
     // Parse the command
     DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand();
     deleteCmd.fromPending = true;
     deleteCmd.fromCommitted = true;
+
+    // Need to instansiate a SolrParams, even if req is null, for backward compat with legacyUpdate
+    SolrParams params = (req != null) ? req.getParams() : new ModifiableSolrParams();
+
+    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s
+    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);
     for (int i = 0; i < parser.getAttributeCount(); i++) {
       String attrName = parser.getAttributeLocalName(i);
       String attrVal = parser.getAttributeValue(i);
-      if ("fromPending".equals(attrName)) {
+      if (XmlUpdateRequestHandler.FROM_PENDING.equals(attrName)) {
         deleteCmd.fromPending = StrUtils.parseBoolean(attrVal);
-      } else if ("fromCommitted".equals(attrName)) {
+      } else if (XmlUpdateRequestHandler.FROM_COMMITTED.equals(attrName)) {
         deleteCmd.fromCommitted = StrUtils.parseBoolean(attrVal);
+      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {
+        deleteCmd.commitWithin = Integer.parseInt(attrVal);
       } else {
         XmlUpdateRequestHandler.log.warn("unexpected attribute delete/@" + attrName);
       }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
index 21baf464..aa154aab 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
@@ -60,6 +60,9 @@
   //NOTE: This constant is for use with the <add> XML tag, not the HTTP param with same name
   public static final String COMMIT_WITHIN = "commitWithin";
   
+  public static final String FROM_COMMITTED = "fromCommitted";
+  public static final String FROM_PENDING = "fromPending";
+  
   /**
    * @deprecated use {@link #OVERWRITE}
    */
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/CommitTracker.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/CommitTracker.java
index 7d43fa51..850197fa 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/CommitTracker.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/CommitTracker.java
@@ -92,6 +92,14 @@ public void scheduleCommitWithin(long commitMaxTime) {
     _scheduleCommitWithin(commitMaxTime);
   }
 
+  private void _scheduleCommitWithinIfNeeded(long commitWithin) {
+    long ctime = (commitWithin > 0) ? commitWithin : timeUpperBound;
+
+    if (ctime > 0) {
+      _scheduleCommitWithin(ctime);
+    }
+  }
+
   private void _scheduleCommitWithin(long commitMaxTime) {
     if (commitMaxTime <= 0) return;
     synchronized (this) {
@@ -139,11 +147,14 @@ public void addedDocument(int commitWithin) {
     }
     
     // maxTime-triggered autoCommit
-    long ctime = (commitWithin > 0) ? commitWithin : timeUpperBound;
-
-    if (ctime > 0) {
-      _scheduleCommitWithin(ctime);
+    _scheduleCommitWithinIfNeeded(commitWithin);
     }
+  
+  /** 
+   * Indicate that documents have been deleted
+   */
+  public void deletedDocument( int commitWithin ) {
+    _scheduleCommitWithinIfNeeded(commitWithin);
   }
   
   /** Inform tracker that a commit has occurred */
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java
index 96c1eee6..68a439c8 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DeleteUpdateCommand.java
@@ -24,6 +24,7 @@
   public String query; // query string for delete-by-query
   public boolean fromPending;
   public boolean fromCommitted;
+  public int commitWithin = -1;
 
   public DeleteUpdateCommand() {
     super("delete");
@@ -37,6 +38,7 @@ public String toString() {
     else sb.append("query=`").append(query).append('`');
     sb.append(",fromPending=").append(fromPending);
     sb.append(",fromCommitted=").append(fromCommitted);
+    sb.append(",commitWithin=").append(commitWithin);
     return sb.toString();
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
index dbc90df7..11e1334a 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
@@ -284,6 +284,7 @@ public void delete(DeleteUpdateCommand cmd) throws IOException {
     iwCommit.lock();
     try {
       openWriter();
+      commitTracker.deletedDocument( cmd.commitWithin );
       writer.deleteDocuments(idTerm.createTerm(idFieldType.toInternal(cmd.id)));
     } finally {
       iwCommit.unlock();
@@ -318,6 +319,7 @@ public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {
 
      iwCommit.lock();
      try {
+       commitTracker.deletedDocument(cmd.commitWithin);
        if (delAll) {
          deleteAll();
        } else {
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
index 3447010b..d071fa69 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/JsonLoaderTest.java
@@ -68,7 +68,9 @@ public static void beforeTests() throws Exception {
       "'optimize': { 'waitFlush':false, 'waitSearcher':false },\n" +
       "\n" +
       "'delete': { 'id':'ID' },\n" +
+      "'delete': { 'id':'ID', 'commitWithin':'500' },\n" +
       "'delete': { 'query':'QUERY' },\n" +
+      "'delete': { 'query':'QUERY', 'commitWithin':'500' },\n" +
       "'rollback': {}\n" +
       "\n" +
       "}\n" +
@@ -115,16 +117,30 @@ public void testParsing() throws Exception
     
 
     // DELETE COMMANDS
-    assertEquals( 2, p.deleteCommands.size() );
+    assertEquals( 4, p.deleteCommands.size() );
     DeleteUpdateCommand delete = p.deleteCommands.get( 0 );
     assertEquals( delete.id, "ID" );
     assertEquals( delete.query, null );
     assertTrue(delete.fromPending && delete.fromCommitted);
+    assertEquals( delete.commitWithin, -1);
 
     delete = p.deleteCommands.get( 1 );
+    assertEquals( delete.id, "ID" );
+    assertEquals( delete.query, null );
+    assertTrue(delete.fromPending && delete.fromCommitted);
+    assertEquals( delete.commitWithin, 500);
+    
+    delete = p.deleteCommands.get( 2 );
+    assertEquals( delete.id, null );
+    assertEquals( delete.query, "QUERY" );
+    assertTrue(delete.fromPending && delete.fromCommitted);
+    assertEquals( delete.commitWithin, -1);
+    
+    delete = p.deleteCommands.get( 3 );
     assertEquals( delete.id, null );
     assertEquals( delete.query, "QUERY" );
     assertTrue(delete.fromPending && delete.fromCommitted);
+    assertEquals( delete.commitWithin, 500);
 
     // ROLLBACK COMMANDS
     assertEquals( 1, p.rollbackCommands.size() );
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java
index 2a21f1aa..3da45bd0 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java
@@ -16,13 +16,20 @@
  */
 package org.apache.solr.handler;
 
+import org.apache.commons.lang.ObjectUtils;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.response.SolrQueryResponse;
 import org.apache.solr.update.AddUpdateCommand;
+import org.apache.solr.update.DeleteUpdateCommand;
 import org.apache.solr.update.processor.BufferingRequestProcessor;
+import org.apache.solr.update.processor.UpdateRequestProcessor;
 import org.apache.solr.util.AbstractSolrTestCase;
+
+import java.io.IOException;
 import java.io.StringReader;
 import java.util.Collection;
+import java.util.LinkedList;
+import java.util.Queue;
 
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamReader;
@@ -110,4 +117,75 @@ public void testRequestParams() throws Exception
     req.close();
   }
 
+  @Test
+  public void testReadDelete() throws Exception {
+	    String xml =
+	      "<update>" +
+	      " <delete>" +
+	      "   <query>id:150</query>" +
+	      "   <id>150</id>" +
+	      "   <id>200</id>" +
+	      "   <query>id:200</query>" +
+	      " </delete>" +
+	      " <delete commitWithin=\"500\">" +
+	      "   <query>id:150</query>" +
+	      " </delete>" +
+	      " <delete fromPending=\"false\">" +
+	      "   <id>150</id>" +
+	      " </delete>" +
+	      " <delete fromCommitted=\"false\">" +
+	      "   <id>150</id>" +
+	      " </delete>" +
+	      "</update>";
+	    
+	    MockUpdateRequestProcessor p = new MockUpdateRequestProcessor(null);
+	    p.expectDelete(null, "id:150", true, true, -1);
+	    p.expectDelete("150", null, true, true, -1);
+	    p.expectDelete("200", null, true, true, -1);
+	    p.expectDelete(null, "id:200", true, true, -1);
+	    p.expectDelete(null, "id:150", true, true, 500);
+	    p.expectDelete("150", null, false, true, -1);
+	    p.expectDelete("150", null, true, false, -1);
+
+	    XMLLoader loader = new XMLLoader(p, inputFactory);
+	    loader.load(req(), new SolrQueryResponse(), new ContentStreamBase.StringStream(xml));
+	    
+	    p.assertNoCommandsPending();
+	  }
+	  
+	  private class MockUpdateRequestProcessor extends UpdateRequestProcessor {
+	    
+	    private Queue<DeleteUpdateCommand> deleteCommands = new LinkedList<DeleteUpdateCommand>();
+	    
+	    public MockUpdateRequestProcessor(UpdateRequestProcessor next) {
+	      super(next);
+	    }
+	    
+	    public void expectDelete(String id, String query, boolean fromPending, boolean fromCommitted, int commitWithin) {
+	      DeleteUpdateCommand cmd = new DeleteUpdateCommand();
+	      cmd.id = id;
+	      cmd.query = query;
+	      cmd.fromCommitted = fromCommitted;
+	      cmd.fromPending = fromPending;
+	      cmd.commitWithin = commitWithin;
+	      deleteCommands.add(cmd);
+	    }
+	    
+	    public void assertNoCommandsPending() {
+	      assertTrue(deleteCommands.isEmpty());
+	    }
+	    
+	    @Override
+	    public void processDelete(DeleteUpdateCommand cmd) throws IOException {
+	      DeleteUpdateCommand expected = deleteCommands.poll();
+	      assertNotNull("Unexpected delete command: [" + cmd + "]", expected);
+	      assertTrue("Expected [" + expected + "] but found [" + cmd + "]",
+	          ObjectUtils.equals(expected.id, cmd.id) &&
+	          ObjectUtils.equals(expected.query, cmd.query) &&
+	          expected.fromPending==cmd.fromPending &&
+	          expected.fromCommitted==cmd.fromCommitted &&
+	          expected.commitWithin==cmd.commitWithin);
+	    }
+	  }
+
 }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/AutoCommitTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/AutoCommitTest.java
index aeb9cff8..5fd9abff 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/AutoCommitTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/AutoCommitTest.java
@@ -255,4 +255,84 @@ public void testMaxTime() throws Exception {
     assertQ("now it should", req("id:500") ,"//result[@numFound=1]" );
   }
 
+  public void testCommitWithin() throws Exception {
+    SolrCore core = h.getCore();
+    NewSearcherListener trigger = new NewSearcherListener();    
+    core.registerNewSearcherListener(trigger);
+    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();
+    CommitTracker tracker = updater.commitTracker;
+    tracker.setTimeUpperBound(0);
+    tracker.setDocsUpperBound(-1);
+    
+    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();
+    handler.init( null );
+    
+    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );
+    
+    // Add a single document with commitWithin == 1 second
+    SolrQueryResponse rsp = new SolrQueryResponse();
+    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};
+    req.setContentStreams( toContentStreams(
+      adoc(1000, "id", "529", "field_t", "what's inside?", "subject", "info"), null ) );
+    trigger.reset();
+    handler.handleRequest( req, rsp );
+
+    // Check it isn't in the index
+    assertQ("shouldn't find any", req("id:529") ,"//result[@numFound=0]" );
+    
+    // Wait longer than the commitWithin time
+    assertTrue("commitWithin failed to commit", trigger.waitForNewSearcher(30000));
+
+    // Add one document without commitWithin
+    req.setContentStreams( toContentStreams(
+        adoc("id", "530", "field_t", "what's inside?", "subject", "info"), null ) );
+      trigger.reset();
+      handler.handleRequest( req, rsp );
+      
+    // Check it isn't in the index
+    assertQ("shouldn't find any", req("id:530") ,"//result[@numFound=0]" );
+    
+    // Delete one document with commitWithin
+    req.setContentStreams( toContentStreams(
+      delI("529", "commitWithin", "1000"), null ) );
+    trigger.reset();
+    handler.handleRequest( req, rsp );
+      
+    // Now make sure we can find it
+    assertQ("should find one", req("id:529") ,"//result[@numFound=1]" );
+    
+    // Wait for the commit to happen
+    assertTrue("commitWithin failed to commit", trigger.waitForNewSearcher(30000));
+    
+    // Now we shouldn't find it
+    assertQ("should find none", req("id:529") ,"//result[@numFound=0]" );
+    // ... but we should find the new one
+    assertQ("should find one", req("id:530") ,"//result[@numFound=1]" );
+    
+    trigger.reset();
+    
+    // now make the call 10 times really fast and make sure it 
+    // only commits once
+    req.setContentStreams( toContentStreams(
+        adoc(1000, "id", "500" ), null ) );
+    for( int i=0;i<10; i++ ) {
+      handler.handleRequest( req, rsp );
+    }
+    assertQ("should not be there yet", req("id:500") ,"//result[@numFound=0]" );
+    
+    // the same for the delete
+    req.setContentStreams( toContentStreams(
+        delI("530", "commitWithin", "1000"), null ) );
+    for( int i=0;i<10; i++ ) {
+      handler.handleRequest( req, rsp );
+    }
+    assertQ("should be there", req("id:530") ,"//result[@numFound=1]" );
+    
+    assertTrue("commitWithin failed to commit", trigger.waitForNewSearcher(30000));
+    assertQ("should be there", req("id:500") ,"//result[@numFound=1]" );
+    assertQ("should not be there", req("id:530") ,"//result[@numFound=0]" );
+    
+    assertEquals(3, tracker.getCommitCount());
+  }
+
 }
diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
index 287b21af..ee4d805f 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
@@ -225,7 +225,22 @@ public UpdateResponse rollback() throws SolrServerException, IOException {
    * @throws IOException
    */
   public UpdateResponse deleteById(String id) throws SolrServerException, IOException {
-    return new UpdateRequest().deleteById( id ).process( this );
+    return deleteById(id, -1);
+  }
+
+  /**
+   * Deletes a single document by unique ID, specifying max time before commit
+   * @param id  the ID of the document to delete
+   * @param commitWithinMs  max time (in ms) before a commit will happen 
+   * @throws SolrServerException
+   * @throws IOException
+   * @since 3.6
+   */
+  public UpdateResponse deleteById(String id, int commitWithinMs) throws SolrServerException, IOException {
+    UpdateRequest req = new UpdateRequest();
+    req.deleteById(id);
+    req.setCommitWithin(commitWithinMs);
+    return req.process(this);
   }
 
   /**
@@ -235,7 +250,22 @@ public UpdateResponse deleteById(String id) throws SolrServerException, IOExcept
    * @throws IOException
    */
   public UpdateResponse deleteById(List<String> ids) throws SolrServerException, IOException {
-    return new UpdateRequest().deleteById( ids ).process( this );
+    return deleteById(ids, -1);
+  }
+
+  /**
+   * Deletes a list of documents by unique ID, specifying max time before commit
+   * @param ids  the list of document IDs to delete 
+   * @param commitWithinMs  max time (in ms) before a commit will happen 
+   * @throws SolrServerException
+   * @throws IOException
+   * @since 3.6
+   */
+  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {
+    UpdateRequest req = new UpdateRequest();
+    req.deleteById(ids);
+    req.setCommitWithin(commitWithinMs);
+    return req.process(this);
   }
 
   /**
@@ -245,7 +275,22 @@ public UpdateResponse deleteById(List<String> ids) throws SolrServerException, I
    * @throws IOException
    */
   public UpdateResponse deleteByQuery(String query) throws SolrServerException, IOException {
-    return new UpdateRequest().deleteByQuery( query ).process( this );
+    return deleteByQuery(query, -1);
+  }
+
+  /**
+   * Deletes documents from the index based on a query, specifying max time before commit
+   * @param query  the query expressing what documents to delete
+   * @param commitWithinMs  max time (in ms) before a commit will happen 
+   * @throws SolrServerException
+   * @throws IOException
+   * @since 3.6
+   */
+  public UpdateResponse deleteByQuery(String query, int commitWithinMs) throws SolrServerException, IOException {
+    UpdateRequest req = new UpdateRequest();
+    req.deleteByQuery(query);
+    req.setCommitWithin(commitWithinMs);
+    return req.process(this);
   }
 
   /**
diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
index 9758ed98..97e15dc8 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
@@ -148,6 +148,15 @@ private List readOuterMostDocIterator(FastInputStream fis) throws IOException {
       }
     };
     codec.unmarshal(is);
+    
+    // NOTE: if the update request contains only delete commands the params
+    // must be loaded now
+    if(updateRequest.getParams()==null) {
+      NamedList params = (NamedList) namedList[0].get("params");
+      if(params!=null) {
+        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));
+      }
+    }
     delById = (List<String>) namedList[0].get("delById");
     delByQ = (List<String>) namedList[0].get("delByQ");
     doclist = (List<List<NamedList>>) namedList[0].get("docs");
diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java
index 8038dcc2..656fb046 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java
@@ -229,7 +229,11 @@ public void writeXML( Writer writer ) throws IOException {
     boolean deleteI = deleteById != null && deleteById.size() > 0;
     boolean deleteQ = deleteQuery != null && deleteQuery.size() > 0;
     if( deleteI || deleteQ ) {
+      if(commitWithin>0) {
+        writer.append( "<delete commitWithin=\"" + commitWithin + "\">" );
+      } else {
       writer.append( "<delete>" );
+      }
       if( deleteI ) {
         for( String id : deleteById ) {
           writer.append( "<id>" );
diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
index 9a810148..e51b5e1a 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
@@ -304,7 +304,7 @@ public void testUnicode() throws Exception {
    * query the example
    */
  @Test
- public void testCommitWithin() throws Exception
+ public void testCommitWithinOnAdd() throws Exception
   {    
     // make sure it is empty...
     SolrServer server = getSolrServer();
@@ -340,7 +340,6 @@ public void testCommitWithin() throws Exception
     
     Assert.assertEquals( 1, rsp.getResults().getNumFound() );
     
-
     // Now test the new convenience parameter on the add() for commitWithin
     SolrInputDocument doc4 = new SolrInputDocument();
     doc4.addField( "id", "id4", 1.0f );
@@ -361,7 +360,52 @@ public void testCommitWithin() throws Exception
     }
     
     Assert.assertEquals( 1, rsp.getResults().getNumFound() );
+  }
+ 
+ @Test
+ public void testCommitWithinOnDelete() throws Exception
+  {    
+    // make sure it is empty...
+    SolrServer server = getSolrServer();
+    server.deleteByQuery( "*:*" );// delete everything!
+    server.commit();
+    QueryResponse rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 0, rsp.getResults().getNumFound() );
+
+    // Now add one document...
+    SolrInputDocument doc3 = new SolrInputDocument();
+    doc3.addField( "id", "id3", 1.0f );
+    doc3.addField( "name", "doc3", 1.0f );
+    doc3.addField( "price", 10 );
+    server.add(doc3);
+    server.commit();
+
+    // now check that it comes out...
+    rsp = server.query( new SolrQuery( "id:id3") );    
+    Assert.assertEquals( 1, rsp.getResults().getNumFound() );
+    
+    // now test commitWithin on a delete
+    UpdateRequest up = new UpdateRequest();
+    up.setCommitWithin(1000);
+    up.deleteById("id3");
+    up.process( server );
+    
+    // the document should still be there
+    rsp = server.query( new SolrQuery( "id:id3") );
+    Assert.assertEquals( 1, rsp.getResults().getNumFound() );
+    
+    // check if the doc has been deleted every 250 ms for 30 seconds
+    long timeout = System.currentTimeMillis() + 30000;
+    do {
+      Thread.sleep( 250 ); // wait 250 ms
+      
+      rsp = server.query( new SolrQuery( "id:id3") );
+      if(rsp.getResults().getNumFound()==0) {
+        return;
+      }
+    } while(System.currentTimeMillis()<timeout);
 
+    Assert.fail("commitWithin failed to commit");
   }
 
 
diff --git a/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java b/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java
index 9bdfd40c..88b2e514 100644
--- a/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java
+++ b/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java
@@ -317,6 +317,20 @@ public String adoc(String... fieldsAndValues) {
     return add(d);
   }
 
+  /**
+   * Generates a simple &lt;add&gt;&lt;doc&gt;... XML String with the
+   * commitWithin attribute.
+   *
+   * @param commitWithin the value of the commitWithin attribute 
+   * @param fieldsAndValues 0th and Even numbered args are fields names odds are field values.
+   * @see #add
+   * @see #doc
+   */
+  public String adoc(int commitWithin, String... fieldsAndValues) {
+    Doc d = doc(fieldsAndValues);
+    return add(d, "commitWithin", String.valueOf(commitWithin));
+  }
+
   /**
    * Generates a simple &lt;add&gt;&lt;doc&gt;... XML String with no options
    */
@@ -366,16 +380,17 @@ public String add(Doc doc, String... args) {
    *
    * @see TestHarness#deleteById
    */
-  public String delI(String id) {
-    return h.deleteById(id);
+  public String delI(String id, String... args) {
+    return h.deleteById(id, args);
   }
+  
   /**
    * Generates a &lt;delete&gt;... XML string for an query
    *
    * @see TestHarness#deleteByQuery
    */
-  public String delQ(String q) {
-    return h.deleteByQuery(q);
+  public String delQ(String q, String... args) {
+    return h.deleteByQuery(q, args);
   }
   
   /**
diff --git a/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java b/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java
index 0ae5e8f7..831cb781 100644
--- a/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java
+++ b/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java
@@ -451,32 +451,46 @@ public static StringBuffer makeSimpleDoc(String... fieldsAndValues) {
   /**
    * Generates a delete by query xml string
    * @param q Query that has not already been xml escaped
+   * @param args The attributes of the delete tag
    */
-  public static String deleteByQuery(String q) {
-    return delete("query", q);
+  public static String deleteByQuery(String q, String... args) {
+    try {
+      StringWriter r = new StringWriter();
+      XML.writeXML(r, "query", q);
+      return delete(r.getBuffer().toString(), args);
+    } catch(IOException e) {
+      throw new RuntimeException
+        ("this should never happen with a StringWriter", e);
   }
+  }
+  
   /**
    * Generates a delete by id xml string
    * @param id ID that has not already been xml escaped
+   * @param args The attributes of the delete tag
    */
-  public static String deleteById(String id) {
-    return delete("id", id);
+  public static String deleteById(String id, String... args) {
+    try {
+      StringWriter r = new StringWriter();
+      XML.writeXML(r, "id", id);
+      return delete(r.getBuffer().toString(), args);
+    } catch(IOException e) {
+      throw new RuntimeException
+        ("this should never happen with a StringWriter", e);
+    }
   }
         
   /**
    * Generates a delete xml string
    * @param val text that has not already been xml escaped
+   * @param args 0 and Even numbered args are params, Odd numbered args are XML escaped values.
    */
-  private static String delete(String deltype, String val) {
+  private static String delete(String val, String... args) {
     try {
       StringWriter r = new StringWriter();
-            
-      r.write("<delete>");
-      XML.writeXML(r, deltype, val);
-      r.write("</delete>");
-            
+      XML.writeUnescapedXML(r, "delete", val, (Object[])args);
       return r.getBuffer().toString();
-    } catch (IOException e) {
+    } catch(IOException e) {
       throw new RuntimeException
         ("this should never happen with a StringWriter", e);
     }
