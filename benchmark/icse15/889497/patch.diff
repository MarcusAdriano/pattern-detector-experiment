diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/BinaryMemtable.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/BinaryMemtable.java
index 7b522be9..b413e0b4 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/BinaryMemtable.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/BinaryMemtable.java
@@ -132,7 +132,7 @@ private void resolve(String key, byte[] buffer)
         assert !columnFamilies_.isEmpty();
         logger_.info("Sorting " + this);
         List<DecoratedKey> keys = new ArrayList<DecoratedKey>(columnFamilies_.keySet());
-        Collections.sort(keys, partitioner_.getDecoratedKeyComparator());
+        Collections.sort(keys);
         return keys;
     }
 
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 00a6b14c..19e9e134 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1264,8 +1264,6 @@ public RangeReply getKeyRange(final String startWith, final String stopAt, int m
     {
         final DecoratedKey startWithDK = partitioner.decorateKey(startWith);
         final DecoratedKey stopAtDK = partitioner.decorateKey(stopAt);
-        // (OPP key decoration is a no-op so using the "decorated" comparator against raw keys is fine)
-        final Comparator<DecoratedKey> comparator = partitioner.getDecoratedKeyComparator();
 
         // create a CollatedIterator that will return unique keys from different sources
         // (current memtable, historical memtables, and SSTables) in the correct order.
@@ -1277,8 +1275,8 @@ public RangeReply getKeyRange(final String startWith, final String stopAt, int m
         {
             public boolean apply(DecoratedKey key)
             {
-                return comparator.compare(startWithDK, key) <= 0
-                       && (stopAt.isEmpty() || comparator.compare(key, stopAtDK) <= 0);
+                return startWithDK.compareTo(key) <= 0
+                       && (stopAt.isEmpty() || key.compareTo(stopAtDK) <= 0);
             }
         };
 
@@ -1318,7 +1316,7 @@ public void close() throws IOException
             iterators.add(iter);
         }
 
-        Iterator<DecoratedKey> collated = IteratorUtils.collatedIterator(comparator, iterators);
+        Iterator<DecoratedKey> collated = IteratorUtils.collatedIterator(DecoratedKey.comparator, iterators);
         Iterable<DecoratedKey> reduced = new ReducingIterator<DecoratedKey, DecoratedKey>(collated) {
             DecoratedKey current;
 
@@ -1341,7 +1339,7 @@ protected DecoratedKey getReduced()
             boolean rangeCompletedLocally = false;
             for (DecoratedKey current : reduced)
             {
-                if (!stopAt.isEmpty() && comparator.compare(stopAtDK, current) < 0)
+                if (!stopAt.isEmpty() && stopAtDK.compareTo(current) < 0)
                 {
                     rangeCompletedLocally = true;
                     break;
@@ -1386,9 +1384,6 @@ protected DecoratedKey getReduced()
     public RangeReply getKeyRangeRaw(final DecoratedKey startWith, final DecoratedKey stopAt, int maxResults)
     throws IOException, ExecutionException, InterruptedException
     {
-        // (OPP key decoration is a no-op so using the "decorated" comparator against raw keys is fine)
-        final Comparator<DecoratedKey> comparator = partitioner.getDecoratedKeyComparator();
-
         // create a CollatedIterator that will return unique keys from different sources
         // (current memtable, historical memtables, and SSTables) in the correct order.
         List<Iterator<DecoratedKey>> iterators = new ArrayList<Iterator<DecoratedKey>>();
@@ -1399,8 +1394,8 @@ public RangeReply getKeyRangeRaw(final DecoratedKey startWith, final DecoratedKe
         {
             public boolean apply(DecoratedKey key)
             {
-                return comparator.compare(startWith, key) <= 0
-                       && (stopAt.isEmpty() || comparator.compare(key,  stopAt) <= 0);
+                return startWith.compareTo(key) <= 0
+                       && (stopAt.isEmpty() || key.compareTo(stopAt) <= 0);
             }
         };
 
@@ -1440,7 +1435,7 @@ public void close() throws IOException
             iterators.add(iter);
         }
 
-        Iterator<DecoratedKey> collated = IteratorUtils.collatedIterator(comparator, iterators);
+        Iterator<DecoratedKey> collated = IteratorUtils.collatedIterator(DecoratedKey.comparator, iterators);
         Iterable<DecoratedKey> reduced = new ReducingIterator<DecoratedKey, DecoratedKey>(collated) {
             DecoratedKey current;
 
@@ -1462,7 +1457,7 @@ protected DecoratedKey getReduced()
             boolean rangeCompletedLocally = false;
             for (DecoratedKey current : reduced)
             {
-                if (!stopAt.isEmpty() && comparator.compare( stopAt, current) < 0)
+                if (!stopAt.isEmpty() && stopAt.compareTo(current) < 0)
                 {
                     rangeCompletedLocally = true;
                     break;
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/DecoratedKey.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/DecoratedKey.java
index 9d64cc66..d622f09f 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/DecoratedKey.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/DecoratedKey.java
@@ -21,6 +21,7 @@
 import java.io.DataOutput;
 import java.io.IOException;
 import java.io.DataInput;
+import java.util.Comparator;
 
 import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.io.ICompactSerializer2;
@@ -44,6 +45,14 @@ public static DecoratedKeySerializer serializer()
         return serializer;
     }
 
+    public static final Comparator<DecoratedKey> comparator = new Comparator<DecoratedKey>()
+    {
+        public int compare(DecoratedKey o1, DecoratedKey o2)
+        {
+            return o1.compareTo(o2);
+        }
+    };
+
     public final T token;
     public final String key;
 
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/Memtable.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/Memtable.java
index 399e37a7..aca6950f 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/Memtable.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/Memtable.java
@@ -182,9 +182,8 @@ public String contents()
     {
         logger_.info("Sorting " + this);
         // sort keys in the order they would be in when decorated
-        Comparator<DecoratedKey> dc = partitioner_.getDecoratedKeyComparator();
         ArrayList<DecoratedKey> orderedKeys = new ArrayList<DecoratedKey>(columnFamilies_.keySet());
-        Collections.sort(orderedKeys, dc);
+        Collections.sort(orderedKeys);
         return orderedKeys;
     }
 
@@ -225,7 +224,7 @@ public String toString()
             // cannot create a PQ of size zero (wtf?)
             return Arrays.asList(new DecoratedKey[0]).iterator();
         }
-        PriorityQueue<DecoratedKey> pq = new PriorityQueue<DecoratedKey>(columnFamilies_.size(), partitioner_.getDecoratedKeyComparator());
+        PriorityQueue<DecoratedKey> pq = new PriorityQueue<DecoratedKey>(columnFamilies_.size());
         pq.addAll(columnFamilies_.keySet());
         return new DestructivePQIterator<DecoratedKey>(pq);
     }
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
index 9b4ad565..b214196b 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
@@ -37,16 +37,6 @@
     
     public static final BigInteger BYTE_MASK = new BigInteger("255");
 
-    /**
-     * Comparators for decorated keys.
-     */
-    private static final Comparator<DecoratedKey<BytesToken>> comparator = new Comparator<DecoratedKey<BytesToken>>() {
-        public int compare(DecoratedKey<BytesToken> o1, DecoratedKey<BytesToken> o2)
-        {
-            return FBUtilities.compareByteArrays(o1.token.token, o2.token.token);
-        }
-    };
-
     public DecoratedKey<BytesToken> decorateKey(String key)
     {
         return new DecoratedKey<BytesToken>(getToken(key), key);
@@ -62,11 +52,6 @@ public String convertToDiskFormat(DecoratedKey<BytesToken> key)
         return key.key;
     }
 
-    public Comparator<DecoratedKey<BytesToken>> getDecoratedKeyComparator()
-    {
-        return comparator;
-    }
-
     public BytesToken midpoint(BytesToken ltoken, BytesToken rtoken)
     {
         int sigbytes = Math.max(ltoken.token.length, rtoken.token.length);
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/IPartitioner.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/IPartitioner.java
index d1417584..02fd665c 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/IPartitioner.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/IPartitioner.java
@@ -48,11 +48,6 @@
      */
     public DecoratedKey<T> decorateKey(String key);
 
-    /**
-     * @return a comparator for decorated key objects, not strings
-     */
-    public Comparator<DecoratedKey<T>> getDecoratedKeyComparator();
-
     /**
      * Calculate a Token representing the approximate "middle" of the given
      * range.
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
index e50b5765..9f13b956 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
@@ -35,17 +35,6 @@
 
     public static final BigInteger CHAR_MASK = new BigInteger("65535");
 
-    /**
-     * Comparators for decorated keys.
-     */
-    private static final Comparator<DecoratedKey<StringToken>> comparator =
-        new Comparator<DecoratedKey<StringToken>>() {
-        public int compare(DecoratedKey<StringToken> o1, DecoratedKey<StringToken> o2)
-        {
-            return o1.key.compareTo(o2.key);
-        }
-    };
-
     public DecoratedKey<StringToken> decorateKey(String key)
     {
         return new DecoratedKey<StringToken>(new StringToken(key), key);
@@ -61,11 +50,6 @@ public String convertToDiskFormat(DecoratedKey<StringToken> key)
         return key.key;
     }
 
-    public Comparator<DecoratedKey<StringToken>> getDecoratedKeyComparator()
-    {
-        return comparator;
-    }
-
     public StringToken midpoint(StringToken ltoken, StringToken rtoken)
     {
         int sigchars = Math.max(ltoken.token.length(), rtoken.token.length());
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/RandomPartitioner.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/RandomPartitioner.java
index 129d1edf..f742be5a 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/RandomPartitioner.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/dht/RandomPartitioner.java
@@ -39,21 +39,6 @@
 
     private static final String DELIMITER = ":";
     
-    private static final Comparator<DecoratedKey<BigIntegerToken>> comparator =
-        new Comparator<DecoratedKey<BigIntegerToken>>() {
-        public int compare(DecoratedKey<BigIntegerToken> o1, DecoratedKey<BigIntegerToken> o2)
-        {
-            // first, compare on the bigint hash "decoration".  usually this will be enough.
-            int v = o1.token.compareTo(o2.token);
-            if (v != 0) {
-                return v;
-            }
-
-            // if the hashes are equal, compare the strings
-            return o1.key.compareTo(o2.key);
-        }
-    };
-
     public DecoratedKey<BigIntegerToken> decorateKey(String key)
     {
         return new DecoratedKey<BigIntegerToken>(getToken(key), key);
@@ -73,11 +58,6 @@ public String convertToDiskFormat(DecoratedKey<BigIntegerToken> key)
         return key.token + DELIMITER + key.key;
     }
 
-    public Comparator<DecoratedKey<BigIntegerToken>> getDecoratedKeyComparator()
-    {
-        return comparator;
-    }
-
     public BigIntegerToken midpoint(BigIntegerToken ltoken, BigIntegerToken rtoken)
     {
         Pair<BigInteger,Boolean> midpair = FBUtilities.midpoint(ltoken.token, rtoken.token, 127);
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/IteratingRow.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/IteratingRow.java
index 53ff86ce..7962c79b 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/IteratingRow.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/IteratingRow.java
@@ -109,6 +109,6 @@ protected IColumn computeNext()
 
     public int compareTo(IteratingRow o)
     {
-        return partitioner.getDecoratedKeyComparator().compare(key, o.key);
+        return key.compareTo(o.key);
     }
 }
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTable.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTable.java
index 58224deb..ab836795 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTable.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTable.java
@@ -179,7 +179,7 @@ public KeyPosition(DecoratedKey key, long position)
 
         public int compareTo(KeyPosition kp)
         {
-            return partitioner.getDecoratedKeyComparator().compare(key, kp.key);
+            return key.compareTo(kp.key);
         }
 
         public String toString()
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableReader.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableReader.java
index 33b990bf..329826fe 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableReader.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableReader.java
@@ -310,7 +310,7 @@ public long getPosition(DecoratedKey decoratedKey) throws IOException
                     return -1;
                 }
                 long position = input.readLong();
-                int v = partitioner.getDecoratedKeyComparator().compare(indexDecoratedKey, decoratedKey);
+                int v = indexDecoratedKey.compareTo(decoratedKey);
                 if (v == 0)
                 {
                     if (keyCache != null)
@@ -352,7 +352,7 @@ public long getNearestPosition(DecoratedKey decoratedKey) throws IOException
                     return -1;
                 }
                 long position = input.readLong();
-                int v = partitioner.getDecoratedKeyComparator().compare(indexDecoratedKey, decoratedKey);
+                int v = indexDecoratedKey.compareTo(decoratedKey);
                 if (v >= 0)
                     return position;
             }
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java
index 8562461a..db336c1e 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/io/SSTableWriter.java
@@ -61,8 +61,7 @@ private long beforeAppend(DecoratedKey decoratedKey) throws IOException
         {
             throw new IOException("Keys must not be null.");
         }
-        Comparator<DecoratedKey> c = partitioner.getDecoratedKeyComparator();
-        if (lastWrittenKey != null && c.compare(lastWrittenKey, decoratedKey) > 0)
+        if (lastWrittenKey != null && lastWrittenKey.compareTo(decoratedKey) > 0)
         {
             logger.info("Last written key : " + lastWrittenKey);
             logger.info("Current key : " + decoratedKey);
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
index bf62cf17..2543c903 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -78,7 +78,7 @@ private StorageProxy() {}
         public int compare(String o1, String o2)
         {
             IPartitioner p = StorageService.getPartitioner();
-            return p.getDecoratedKeyComparator().compare(p.decorateKey(o1), p.decorateKey(o2));
+            return p.decorateKey(o1).compareTo(p.decorateKey(o2));
         }
     };
 
