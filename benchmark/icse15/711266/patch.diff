diff --git a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
index e9222899..52c76b11 100644
--- a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
+++ b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
@@ -118,6 +118,7 @@ static void initClientMessageIds()
         clientMessageIds.add(SQLState.NET_VCM_VCS_LENGTHS_INVALID);
         clientMessageIds.add(SQLState.LANG_STRING_TOO_LONG);
         clientMessageIds.add(SQLState.INVALID_COLUMN_ARRAY_LENGTH);
+        clientMessageIds.add(SQLState.PROPERTY_INVALID_VALUE);
     }
 
 	public static void main(String[] args) throws Exception {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
index 53ecf04c..0178f39f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.shared.common.i18n.MessageUtil;
 import org.apache.derby.client.am.Statement;
 import org.apache.derby.client.am.Utils;
+import org.apache.derby.iapi.reference.Attribute;
 import org.apache.derby.jdbc.ClientBaseDataSource;
 import org.apache.derby.jdbc.ClientDriver;
 import org.apache.derby.client.ClientPooledConnection;
@@ -299,8 +300,19 @@ private void initialize(String password,
         this.rmId_ = rmId;
         this.isXAConnection_ = isXAConn;
         flowConnect(password, securityMechanism_);
+        // it's possible that the internal Driver.connect() calls returned null,
+        // thus, a null connection, e.g. when the databasename has a : in it
+        // (which the InternalDriver assumes means there's a subsubprotocol)  
+        // and it's not a subsubprotocol recognized by our drivers.
+        // If so, bail out here.
+        if(!isConnectionNull())
         completeConnect();
-
+        else
+        {
+            agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,
+                    new ClientMessageId(SQLState.PROPERTY_INVALID_VALUE),
+                    Attribute.DBNAME_ATTR,databaseName_));
+        }
     }
 
     // preferably without password in the method signature.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
index d3179aff..312186a7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
@@ -103,6 +103,7 @@ private static Test baseSuite(String postfix) {
         suite.addTest(new DataSourceTest("testBadConnectionAttributeSyntax"));
         suite.addTest(new DataSourceTest("testDescriptionProperty"));
         suite.addTest(new DataSourceTest("testAllDataSources"));
+        suite.addTest(new DataSourceTest("testJira95ds"));
         return suite;
     }
 
@@ -130,8 +131,6 @@ private static Test getClientSuite() {
     private static Test getEmbeddedSuite(String postfix) {
         TestSuite suite = new TestSuite("Embedded" + postfix);
         suite.addTest(new DataSourceTest("testDSRequestAuthentication"));
-        // when DERBY-2498 gets fixed, move this one to baseSuite
-        suite.addTest(new DataSourceTest("testJira95ds"));
         return suite;
     }
     
@@ -231,14 +230,8 @@ public void testJira95ds() throws SQLException {
             ds.getConnection();
             fail ("expected an SQLException!");
         } catch (SQLException sqle) {
-            // DERBY-2498: with client, getting a NullPointerException.
-            // Note also: the NPE does not occur with XADataSource - see
-            // testJira95xads().
-            if (usingEmbedded())
                 assertSQLState("XCY00", sqle);
         } catch (Exception e) {
-            // DERBY-2498, when fixed, remove 'if'
-            if (usingEmbedded())
                 fail ("unexpected exception: " + e.toString());
         }
     } 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
index c48aff8c..5f985388 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
@@ -134,6 +134,7 @@ private static Test baseSuite(String postfix) {
         TestSuite suite = new TestSuite("ClientAndEmbedded" + postfix);
         suite.addTest(new J2EEDataSourceTest("testGlobalLocalInterleaf"));
         suite.addTest(new J2EEDataSourceTest("testSetIsolationWithStatement"));
+        suite.addTest(new J2EEDataSourceTest("testJira95pds"));
         suite.addTest(new J2EEDataSourceTest("testJira95xads"));
         suite.addTest(new J2EEDataSourceTest("testBadConnectionAttributeSyntax"));
         suite.addTest(new J2EEDataSourceTest("testCloseActiveConnection_DS"));
@@ -183,8 +184,6 @@ private static Test getClientSuite() {
     private static Test getEmbeddedSuite(String postfix) {
         TestSuite suite = new TestSuite("Embedded" + postfix);
         suite.addTest(new J2EEDataSourceTest("testDSRequestAuthentication"));
-        // when DERBY-2498 gets fixed, move this one to baseSuite
-        suite.addTest(new J2EEDataSourceTest("testJira95pds"));
         // Following cannot run with client because of DERBY-2533; it hangs
         // when fixed, this can be moved to baseSuite.
         suite.addTest(new J2EEDataSourceTest("testReuseAcrossGlobalLocal"));
@@ -2203,12 +2202,8 @@ public void testJira95pds() throws Exception {
             pds.getPooledConnection();
             fail ("expected an SQLException!");
         } catch (SQLException sqle) {
-            // DERBY-2498 - when fixed, remove if
-            if (usingEmbedded())
                 assertSQLState("XCY00", sqle);
         } catch (Exception e) {
-            // DERBY-2498 - when fixed, remove if
-            if (usingEmbedded())
                 throw e;
         }
     }
