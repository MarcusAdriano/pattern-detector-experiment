diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
index 31632926..eee0eb60 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
@@ -505,6 +505,10 @@ public Visitable accept(Visitor v)
 	}
 	/**
 	 * Bind trim expression. 
+	 * The variable receiver is the string that needs to be trimmed.
+	 * The variable leftOperand is the character that needs to be trimmed from
+	 *     receiver.
+	 *     
 	 * @return	The new top of the expression tree.
 	 *
 	 * @exception StandardException		Thrown on error
@@ -528,19 +532,34 @@ private ValueNode trimBind()
 			*/
 	
 			receiver.setType(getVarcharDescriptor());
-			//collation of ? operand should be same as the compilation schema
+            //check if this parameter can pick up it's collation from the 
+			//character that will be used for trimming. If not(meaning the
+			//character to be trimmed is also a parameter), then it will take 
+			//it's collation from the compilation schema.
+            if (!leftOperand.requiresTypeFromContext()) {
+            	receiver.getTypeServices().setCollationDerivation(
+            			leftOperand.getTypeServices().getCollationDerivation());
+            	receiver.getTypeServices().setCollationType(
+            			leftOperand.getTypeServices().getCollationType());
+            } else {
 			receiver.setCollationUsingCompilationSchema(
 					StringDataValue.COLLATION_DERIVATION_IMPLICIT);
 		}
+		}
 
 		/* Is there a ? parameter on the left? */
 		if (leftOperand.requiresTypeFromContext())
 		{
 			/* Set the left operand type to varchar. */
 			leftOperand.setType(getVarcharDescriptor());
-			//collation of ? operand should be same as the compilation schema
-			leftOperand.setCollationUsingCompilationSchema(
-					StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+			//collation of ? operand should be picked up from the context.
+            //By the time we come here, receiver will have correct collation
+            //set on it and hence we can rely on it to get correct collation
+            //for the ? for the character that needs to be used for trimming.
+			leftOperand.getTypeServices().setCollationDerivation(
+					receiver.getTypeServices().getCollationDerivation());
+			leftOperand.getTypeServices().setCollationType(
+        			receiver.getTypeServices().getCollationType());            	
 		}
 
 		bindToBuiltIn();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 65c56d16..ba2530ef 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -830,6 +830,34 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     rs = ps.executeQuery();
     JDBC.assertFullResultSet(rs,new String[][] {{"SYSCOLUMNS"}});
 
+    //Similar testing for TRIM
+    //Following won't work because the character string constant 'a' is 
+    //picking up the collation of the current schema which is territory based.
+    //And the ? in TRIM will pick up it's collation from 'a' and hence the
+    //comparison between territory based character string returned from TRIM
+    //function will fail against UCS_BASIC based TABLENAME on the right
+    checkPreparedStatementError(conn, "SELECT TABLENAME FROM SYS.SYSTABLES WHERE " +
+    		" TRIM('a' FROM ?) = TABLENAME", "42818");
+    //The problem can be fixed by using CAST on TABLENAME so the resultant of
+    //CAST string will compare fine with the output of TRIM. Note CAST always
+    //picks up the collation of the compilation schema.
+    ps = conn.prepareStatement("SELECT TABLENAME FROM SYS.SYSTABLES WHERE " +
+    		" TRIM('a' FROM ?) = CAST(TABLENAME AS CHAR(10))");
+    ps.setString(1, "aSYSCOLUMNS");
+    rs = ps.executeQuery();
+    JDBC.assertFullResultSet(rs,new String[][] {{"SYSCOLUMNS"}});
+    //Another test for TRIM
+    //Following will not fail because the ? in TRIM will pick up collation
+    //from it's first parameter which is a SUBSTR on TABLENAME and hence the 
+    //result of TRIM will have UCS_BASIC collation which matches the collation
+    //on the right.
+    ps = conn.prepareStatement("SELECT TABLENAME FROM SYS.SYSTABLES WHERE " +
+    		" TRIM(LEADING SUBSTR(TABLENAME, LENGTH(TABLENAME)) FROM ?) = TABLENAME");
+    ps.setString(1, "SYSCOLUMNS");
+    rs = ps.executeQuery();
+    //No rows returned because the result of TRIM is going to be 'YSCOLUMNS'
+    JDBC.assertEmpty(rs);
+    
     //Do parameter testing with IN and subquery
     //Following will work just fine because ? will take it's collation from the
     //context which in this case will be collation of TABLENAME which has 
