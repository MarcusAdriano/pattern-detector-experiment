diff --git a/lucene/dev/branches/branch_4x/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java b/lucene/dev/branches/branch_4x/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
index dc547776..8218cbb5 100644
--- a/lucene/dev/branches/branch_4x/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
+++ b/lucene/dev/branches/branch_4x/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
@@ -132,7 +132,7 @@ static XMLReader createParser() {
     }
   }
 
-  protected String readToken(StringBuffer chars) {
+  protected String readToken(StringBuilder chars) {
     String word;
     boolean space = false;
     int i;
@@ -345,7 +345,7 @@ public void endElement(String uri, String local, String raw) {
   @SuppressWarnings("unchecked")
   @Override
   public void characters(char ch[], int start, int length) {
-    StringBuffer chars = new StringBuffer(length);
+    StringBuilder chars = new StringBuilder(length);
     chars.append(ch, start, length);
     String word = readToken(chars);
     while (word != null) {
diff --git a/lucene/dev/branches/branch_4x/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java b/lucene/dev/branches/branch_4x/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java
index 4df3812f..6ac7044b 100644
--- a/lucene/dev/branches/branch_4x/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java
+++ b/lucene/dev/branches/branch_4x/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java
@@ -209,7 +209,7 @@ private void assertCharFilterEquals(CharFilter filter, String expected) throws I
   }
 
   private String readFully(Reader stream) throws IOException {
-    StringBuffer buffer = new StringBuffer();
+    StringBuilder buffer = new StringBuilder();
     int ch;
     while ((ch = stream.read()) != -1) {
       buffer.append((char) ch);
diff --git a/lucene/dev/branches/branch_4x/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java b/lucene/dev/branches/branch_4x/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java
index 0a0d13af..fe50449b 100644
--- a/lucene/dev/branches/branch_4x/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java
+++ b/lucene/dev/branches/branch_4x/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java
@@ -231,7 +231,7 @@ public synchronized String exec(String a, String b) {
     }
     
     // read the patch string
-    StringBuffer result = new StringBuffer();
+    StringBuilder result = new StringBuilder();
     final char base = 'a' - 1;
     char deletes = base;
     char equals = base;
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearch.java b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearch.java
index 83da145b..b77b4d50 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearch.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearch.java
@@ -93,7 +93,7 @@ public void testSearch() throws Exception {
       doTestSearch(random(), pw, false);
       pw.close();
       sw.close();
-      String multiFileOutput = sw.getBuffer().toString();
+      String multiFileOutput = sw.toString();
       //System.out.println(multiFileOutput);
 
       sw = new StringWriter();
@@ -101,7 +101,7 @@ public void testSearch() throws Exception {
       doTestSearch(random(), pw, true);
       pw.close();
       sw.close();
-      String singleFileOutput = sw.getBuffer().toString();
+      String singleFileOutput = sw.toString();
 
       assertEquals(multiFileOutput, singleFileOutput);
     }
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java
index f76fd83b..5952dcdf 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java
@@ -53,7 +53,7 @@ public void testRun() throws Exception {
       doTest(random(), pw, false, MAX_DOCS);
       pw.close();
       sw.close();
-      String multiFileOutput = sw.getBuffer().toString();
+      String multiFileOutput = sw.toString();
       //System.out.println(multiFileOutput);
 
       sw = new StringWriter();
@@ -61,7 +61,7 @@ public void testRun() throws Exception {
       doTest(random(), pw, true, MAX_DOCS);
       pw.close();
       sw.close();
-      String singleFileOutput = sw.getBuffer().toString();
+      String singleFileOutput = sw.toString();
 
       assertEquals(multiFileOutput, singleFileOutput);
   }
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDoc.java b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDoc.java
index b470d987..990c7272 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDoc.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/index/TestDoc.java
@@ -149,7 +149,7 @@ public void testIndexAndMerge() throws Exception {
       out.close();
       sw.close();
 
-      String multiFileOutput = sw.getBuffer().toString();
+      String multiFileOutput = sw.toString();
       //System.out.println(multiFileOutput);
 
       sw = new StringWriter();
@@ -190,7 +190,7 @@ public void testIndexAndMerge() throws Exception {
       directory.close();
       out.close();
       sw.close();
-      String singleFileOutput = sw.getBuffer().toString();
+      String singleFileOutput = sw.toString();
 
       assertEquals(multiFileOutput, singleFileOutput);
    }
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java
index 2c5fcbab..85b14614 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java
@@ -112,4 +112,4 @@
   void Done();
 
 }
-/* JavaCC - OriginalChecksum=30b94cad7b10d0d81e3a59a1083939d0 (do not edit this line) */
+/* JavaCC - OriginalChecksum=c847dd1920bf7901125a7244125682ad (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java
index 7ba0d3c8..a0ddab2d 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java
@@ -89,7 +89,7 @@ private static String initialise(Token currentToken,
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -139,7 +139,7 @@ private static String initialise(Token currentToken,
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
@@ -184,4 +184,4 @@ static String add_escapes(String str) {
    }
 
 }
-/* JavaCC - OriginalChecksum=b187d97d5bb75c3fc63d642c1c26ac6e (do not edit this line) */
+/* JavaCC - OriginalChecksum=61602edcb3a15810cbc58f5593eba40d (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java
index 0e52ec21..aa57487f 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java
@@ -128,4 +128,4 @@ public static Token newToken(int ofKind)
   }
 
 }
-/* JavaCC - OriginalChecksum=405bb5d2fcd84e94ac1c8f0b12c1f914 (do not edit this line) */
+/* JavaCC - OriginalChecksum=c1e1418b35aa9e47ef8dc98b87423d70 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
index 51712a76..7101f098 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
@@ -48,7 +48,7 @@
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
@@ -144,4 +144,4 @@ public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColu
     this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
   }
 }
-/* JavaCC - OriginalChecksum=f433e1a52b8eadbf12f3fbbbf87fd140 (do not edit this line) */
+/* JavaCC - OriginalChecksum=0c275864a1972d9a01601ab81426872d (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java
index 15b8245a..ab149a69 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java
@@ -112,4 +112,4 @@
   void Done();
 
 }
-/* JavaCC - OriginalChecksum=53b2ec7502d50e2290e86187a6c01270 (do not edit this line) */
+/* JavaCC - OriginalChecksum=c95f1720d9b38046dc5d294b741c44cb (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java
index 4d87b831..c3511a17 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java
@@ -92,7 +92,7 @@ private static String initialise(Token currentToken,
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -142,7 +142,7 @@ private static String initialise(Token currentToken,
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
@@ -187,4 +187,4 @@ static String add_escapes(String str) {
    }
 
 }
-/* JavaCC - OriginalChecksum=4263a02db9988d7a863aa97ad2f6dc67 (do not edit this line) */
+/* JavaCC - OriginalChecksum=81401c29cf6f9909761c636b4778ccc0 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java
index 95e66bbb..fd334020 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java
@@ -128,4 +128,4 @@ public static Token newToken(int ofKind)
   }
 
 }
-/* JavaCC - OriginalChecksum=ea8b1e55950603be28e2f63dcd544ab4 (do not edit this line) */
+/* JavaCC - OriginalChecksum=30bbd23e0dec26f141130dc62a4f6e9d (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
index 9207c0fa..f2ef4a57 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
@@ -48,7 +48,7 @@
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
@@ -144,4 +144,4 @@ public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColu
     this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
   }
 }
-/* JavaCC - OriginalChecksum=be88283d82a985d82a34dda46bcf42d5 (do not edit this line) */
+/* JavaCC - OriginalChecksum=3ca7fbf7de9f2424b131a5499b0a78d0 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/CharStream.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/CharStream.java
index 31f3ad79..1756f862 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/CharStream.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/CharStream.java
@@ -112,4 +112,4 @@
   void Done();
 
 }
-/* JavaCC - OriginalChecksum=242ae59b965491e225a44534cbc73b42 (do not edit this line) */
+/* JavaCC - OriginalChecksum=5ca20c9145f29a0f8909470a7f949fe4 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java
index a1631114..4059bda6 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java
@@ -89,7 +89,7 @@ private static String initialise(Token currentToken,
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -139,7 +139,7 @@ private static String initialise(Token currentToken,
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
@@ -184,4 +184,4 @@ static String add_escapes(String str) {
    }
 
 }
-/* JavaCC - OriginalChecksum=bd8163f41bf2fd1bb00f025fce3dcaaf (do not edit this line) */
+/* JavaCC - OriginalChecksum=be6f55e3bf157e8c96b4c06cca5ec81b (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java
index d6736f8a..fd715506 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java
@@ -128,4 +128,4 @@ public static Token newToken(int ofKind)
   }
 
 }
-/* JavaCC - OriginalChecksum=f2df701e24da1cf2d025118ce6efdd2f (do not edit this line) */
+/* JavaCC - OriginalChecksum=db38f23b3674db52ff034369707a0ac3 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
index c79fc217..77e740f3 100644
--- a/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
+++ b/lucene/dev/branches/branch_4x/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
@@ -48,7 +48,7 @@
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
@@ -144,4 +144,4 @@ public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColu
     this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
   }
 }
-/* JavaCC - OriginalChecksum=8c69a370d9a9893140562c8bb911678c (do not edit this line) */
+/* JavaCC - OriginalChecksum=dcdd5ccde13b91bcd8f76a86ca618852 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java b/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java
index c61d3442..3ec84fe2 100644
--- a/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java
+++ b/lucene/dev/branches/branch_4x/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java
@@ -419,7 +419,7 @@ public Float getAndIncrement(String key) {
    *@return The <code>String</code> that indexes the node argument.
    */
   protected String getKey(TSTNode node) {
-    StringBuffer getKeyBuffer = new StringBuffer();
+    StringBuilder getKeyBuffer = new StringBuilder();
     getKeyBuffer.setLength(0);
     getKeyBuffer.append("" + node.splitchar);
     TSTNode currentNode;
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
index 99806bb4..1c4d0213 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
@@ -293,7 +293,7 @@ private void createFilters() {
 
   private void logConfig() {
     if (!LOG.isInfoEnabled()) return;
-    StringBuffer config = new StringBuffer();
+    StringBuilder config = new StringBuilder();
     config.append("user : ").append(user).append(System.getProperty("line.separator"));
     config.append("pwd : ").append(password).append(System.getProperty("line.separator"));
     config.append("protocol : ").append(protocol).append(System.getProperty("line.separator"));
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java b/lucene/dev/branches/branch_4x/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java
index 8a5051fb..95784f75 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java
@@ -288,7 +288,7 @@ private String getFallbackLang(SolrInputDocument doc, String[] fallbackFields, S
    * Concatenates content from multiple fields
    */
   protected String concatFields(SolrInputDocument doc, String[] fields) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (String fieldName : inputFields) {
       log.debug("Appending field "+fieldName);
       if (doc.containsKey(fieldName)) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 12ca0ddc..26934a3a 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -574,7 +574,7 @@ private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modi
       if (props.containsKey(TIMES_INDEX_REPLICATED)) {
         indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;
       }
-      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));
+      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));
       props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());
       props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));
       props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));
@@ -596,7 +596,7 @@ private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modi
         }
         props.setProperty(TIMES_FAILED, String.valueOf(numFailures));
         props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));
-        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));
+        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));
         props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());
       }
 
@@ -639,8 +639,8 @@ static long getTotalBytesDownloaded(SnapPuller snappuller) {
     return bytesDownloaded;
   }
 
-  private StringBuffer readToStringBuffer(long replicationTime, String str) {
-    StringBuffer sb = new StringBuffer();
+  private StringBuilder readToStringBuilder(long replicationTime, String str) {
+    StringBuilder sb = new StringBuilder();
     List<String> l = new ArrayList<String>();
     if (str != null && str.length() != 0) {
       String[] ss = str.split(",");
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
index f8f1f9c8..deccaff3 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
@@ -187,16 +187,6 @@ public char charAt(int pos) {
       return c[pos];
    }
 
-    /**
-     * Converts the contents of the buffer into a StringBuffer.
-     * This method involves copying the new data once!
-     */
-    public StringBuffer toStringBuffer() {
-        StringBuffer sb = new StringBuffer(length);
-        sb.append(c, 0, length);
-        return sb;
-    }
-    
     /**
      * Converts the contents of the buffer into a StringBuffer.
      * This method involves copying the new data once!
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java
index f252def1..2bb2a4e5 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java
@@ -46,7 +46,7 @@ public CSVWriter(CSVConfig config) {
     public void writeRecord(Map map) {
         CSVField[] fields = config.getFields();
         try {
-            StringBuffer sb = new StringBuffer();
+            StringBuilder sb = new StringBuilder();
             for (int i = 0; i < fields.length; i++) {
                 Object o = map.get(fields[i].getName());
                 if (o != null) {
@@ -83,7 +83,7 @@ protected String writeValue(CSVField field, String value) throws Exception {
                 if (field.overrideFill()) {
                     fillPattern = field.getFill();
                 }
-                StringBuffer sb = new StringBuffer();
+                StringBuilder sb = new StringBuilder();
                 int fillSize = (field.getSize() - value.length());
                 char[] fill = new char[fillSize];
                 Arrays.fill(fill, config.getFillChar());
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/CharStream.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/CharStream.java
index 0400af47..d45c1940 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/CharStream.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/CharStream.java
@@ -112,4 +112,4 @@
   void Done();
 
 }
-/* JavaCC - OriginalChecksum=48b70e7c01825c8f301c7362bf1028d8 (do not edit this line) */
+/* JavaCC - OriginalChecksum=a81c9280a3ec4578458c607a9d95acb4 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/ParseException.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/ParseException.java
index df191044..9dc5cc49 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/ParseException.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/ParseException.java
@@ -89,7 +89,7 @@ private static String initialise(Token currentToken,
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -139,7 +139,7 @@ private static String initialise(Token currentToken,
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
@@ -184,4 +184,4 @@ static String add_escapes(String str) {
    }
 
 }
-/* JavaCC - OriginalChecksum=25e1ae9ad9614c4ce31c4b83f8a7397b (do not edit this line) */
+/* JavaCC - OriginalChecksum=d7aa203ee92ebbb23011a23311e60537 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/QueryParser.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/QueryParser.java
index 12f516dc..709ad00d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/QueryParser.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/QueryParser.java
@@ -91,7 +91,6 @@ final public int Modifiers() throws ParseException {
   }
 
 // This makes sure that there is no garbage after the query string
-  @Override
   final public Query TopLevelQuery(String field) throws ParseException, SyntaxError {
   Query q;
     q = Query(field);
@@ -479,7 +478,6 @@ protected QueryParser(CharStream stream) {
   }
 
   /** Reinitialise. */
-  @Override
   public void ReInit(CharStream stream) {
     token_source.ReInit(stream);
     token = new Token();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/Token.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/Token.java
index af8e0310..b62daef8 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/Token.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/Token.java
@@ -97,7 +97,6 @@ public Token(int kind, String image)
   /**
    * Returns the image.
    */
-  @Override
   public String toString()
   {
     return image;
@@ -129,4 +128,4 @@ public static Token newToken(int ofKind)
   }
 
 }
-/* JavaCC - OriginalChecksum=f463ad6fd3205ca07166de02ee86b907 (do not edit this line) */
+/* JavaCC - OriginalChecksum=9036cc9068ac33d9c79403fe5349f705 (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
index f1640954..ca885ad6 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
@@ -48,7 +48,7 @@
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
@@ -121,7 +121,6 @@ protected static String LexicalError(boolean EOFSeen, int lexState, int errorLin
    *
    * from this method for such cases in the release version of your parser.
    */
-  @Override
   public String getMessage() {
     return super.getMessage();
   }
@@ -145,4 +144,4 @@ public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColu
     this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
   }
 }
-/* JavaCC - OriginalChecksum=200a46f65c1a0f71a7f037b35f4e934e (do not edit this line) */
+/* JavaCC - OriginalChecksum=59744072870f5c27fc8796947fc3b06f (do not edit this line) */
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/util/SimplePostTool.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
index f27aac30..edfe9c73 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
@@ -947,7 +947,7 @@ public static NodeList getNodesFromXP(Node n, String xpath) throws XPathExpressi
   public static String getXP(Node n, String xpath, boolean concatAll)
       throws XPathExpressionException {
     NodeList nodes = getNodesFromXP(n, xpath);
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     if (nodes.getLength() > 0) {
       for(int i = 0; i < nodes.getLength() ; i++) {
         sb.append(nodes.item(i).getNodeValue() + " ");
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java
index d7c65863..f0d39477 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java
@@ -96,7 +96,7 @@ void deleteSomeDocs() {
     }
     if (ids.size() == 0) return;
 
-    StringBuffer sb = new StringBuffer("id:(");
+    StringBuilder sb = new StringBuilder("id:(");
     for (String id : ids) {
       sb.append(id).append(' ');
       model.remove(id);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomFaceting.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomFaceting.java
index 2f06b470..04307a77 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomFaceting.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestRandomFaceting.java
@@ -95,7 +95,7 @@ void deleteSomeDocs() {
     }
     if (ids.size() == 0) return;
 
-    StringBuffer sb = new StringBuffer("id:(");
+    StringBuilder sb = new StringBuilder("id:(");
     for (String id : ids) {
       sb.append(id).append(' ');
       model.remove(id);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java
index 195e0c64..dd7bc026 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java
@@ -156,11 +156,11 @@ public static boolean equals(String[][] a, String[][] b) {
   }
 
   public static String printable(String s) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (int i=0; i<s.length(); i++) {
       char ch = s.charAt(i);
       if (ch<=' ' || ch>=128) {
-        sb.append("(" + (int)ch + ")");
+        sb.append("(").append((int)ch).append(")");
       } else {
         sb.append(ch);
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java
index ad188350..3e856474 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java
@@ -56,7 +56,7 @@ public void testConfigGuess1() throws Exception {
         field.setSize(4);
         expected.addField(field);
         expected.addField(field);
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("1234;abcd;1234\n");
         sb.append("abcd;1234;abcd");
         ByteArrayInputStream in = new ByteArrayInputStream(sb.toString().getBytes("UTF-8"));
@@ -79,7 +79,7 @@ public void testConfigGuess2() throws Exception {
         expected.setFill(CSVConfig.FILLRIGHT);
         expected.setIgnoreValueDelimiter(false);
 //        expected.setFixedWidth(false);
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("1,2,3,4\n");
         sb.append("abcd,1234,abcd,1234");
         ByteArrayInputStream in = new ByteArrayInputStream(sb.toString().getBytes("UTF-8"));
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/Base64.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/Base64.java
index f49fa275..8cffb31b 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/Base64.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/Base64.java
@@ -58,7 +58,7 @@ public static String byteArrayToBase64(byte[] a, int offset, int len) {
     int numFullGroups = aLen / 3;
     int numBytesInPartialGroup = aLen - 3 * numFullGroups;
     int resultLen = 4 * ((aLen + 2) / 3);
-    StringBuffer result = new StringBuffer(resultLen);
+    StringBuilder result = new StringBuilder(resultLen);
     char[] intToAlpha = intToBase64;
 
     // Translate all full groups from byte array elements to Base64
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
index f4d48e4c..3b944410 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
@@ -871,7 +871,7 @@ public static String delQ(String q) {
    */
   public static XmlDoc doc(String... fieldsAndValues) {
     XmlDoc d = new XmlDoc();
-    d.xml = TestHarness.makeSimpleDoc(fieldsAndValues).toString();
+    d.xml = TestHarness.makeSimpleDoc(fieldsAndValues);
     return d;
   }
 
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness.java
index ffca06e5..73a75817 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness.java
@@ -104,7 +104,7 @@ public static String validateXPath(String xml, String... tests)
    *
    * @param fieldsAndValues 0 and Even numbered args are fields names odds are field values.
    */
-  public static StringBuffer makeSimpleDoc(String... fieldsAndValues) {
+  public static String makeSimpleDoc(String... fieldsAndValues) {
 
     try {
       StringWriter w = new StringWriter();
@@ -114,7 +114,7 @@ public static StringBuffer makeSimpleDoc(String... fieldsAndValues) {
             fieldsAndValues[i]);
       }
       w.append("</doc>");
-      return w.getBuffer();
+      return w.toString();
     } catch (IOException e) {
       throw new RuntimeException
           ("this should never happen with a StringWriter", e);
