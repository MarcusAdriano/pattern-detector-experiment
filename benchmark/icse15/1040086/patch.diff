diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
index 0a720c19..a01412d0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
@@ -898,18 +898,30 @@ private boolean privRemoveFile(StorageFile file)
 		return true;
     } // end of privRemoveFile
 
+    protected ContainerKey idAPriori = null;
+
 	synchronized boolean openContainer(ContainerKey newIdentity)
         throws StandardException
     {
         actionCode = OPEN_CONTAINER_ACTION;
         actionIdentity = newIdentity;
+        boolean success = false;
+        idAPriori = currentIdentity;
+
         try
         {
-            boolean success = AccessController.doPrivileged(this) != null;
-            if (success) {
                 currentIdentity = newIdentity;
-            }
+            // NIO: We need to set currentIdentity before we try to open, in
+            // case we need its value to perform a recovery in the case of an
+            // interrupt during readEmbryonicPage as part of
+            // OPEN_CONTAINER_ACTION.  Note that this gives a recursive call to
+            // openContainer.
+            //
+            // If we don't succeed in opening, we reset currentIdentity to its
+            // a priori value.
 
+            success = AccessController.doPrivileged(this) != null;
+            idAPriori = currentIdentity;
             return success;
         }
         catch( PrivilegedActionException pae) { 
@@ -922,6 +934,10 @@ synchronized boolean openContainer(ContainerKey newIdentity)
         }
         finally
         { 
+            if (!success) {
+                currentIdentity = idAPriori;
+            }
+
             actionIdentity = null; 
         }
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
index fd222d5e..6ac78a14 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
@@ -637,6 +637,10 @@ private void awaitRestoreChannel (Exception e,
         }
 
         synchronized (channelCleanupMonitor) {
+            // Pave way for the thread that received the interrupt that caused
+            // the channel close to clean up, by signaling we are waiting (no
+            // longer doing IO):
+
             threadsInPageIO--;
         }
 
@@ -671,6 +675,9 @@ private void awaitRestoreChannel (Exception e,
                     }
                 }
 
+                // Since the channel is presumably ok (lest giveUpIO is set,
+                // see below), we put ourselveds back in the IO set of threads:
+
                 threadsInPageIO++;
                 break;
             }
@@ -685,6 +692,7 @@ private void awaitRestoreChannel (Exception e,
                         "resurrecting container ");
                 }
 
+                threadsInPageIO--;
                 throw StandardException.newException(
                     SQLState.FILE_IO_INTERRUPTED);
             }
@@ -715,7 +723,7 @@ private boolean recoverContainerAfterInterrupt(
         boolean stealthMode) throws StandardException {
 
         if (stealthMode && restoreChannelInProgress) {
-            // Another interrupted thread got to do the cleanup before us, so
+            // 1) Another interrupted thread got to do the cleanup before us, so
             // yield.
             // This should not happen, but since
             // we had to "fix" NIO, cf. the code marked (**), we could
@@ -734,6 +742,11 @@ private boolean recoverContainerAfterInterrupt(
             // Not safe for Java 1.4 (only volatile protection for
             // restoreChannelInProgress here), compare safe test below (not
             // stealthMode).
+            //
+            // 2) The other way to end up here is if we get interrupted during
+            // getEmbryonicPage called during container recovery from the same
+            // thread (restoreChannelInProgress is set then, and
+            // getEmbryonicPage is stealthMode)
 
             InterruptStatus.noteAndClearInterrupt(
                 whence,
@@ -808,15 +821,12 @@ private boolean recoverContainerAfterInterrupt(
                         try {
                             closeContainer();
                             openContainer(currentIdentity);
-                        } catch (Exception newE) {
+                        } catch (InterruptDetectedException e) {
                             // Interrupted again?
-
-                            if (InterruptStatus.noteAndClearInterrupt(
-                                        "RAF: isInterrupted during recovery",
-                                        threadsInPageIO,
-                                        hashCode())) {
+                            debugTrace("interrupted during recovery's " +
+                                       "readEmbryonicPage");
                                 continue;
-                            } else {
+                        } catch (Exception newE) {
                                 // Something else failed - shutdown happening?
                                 synchronized(giveUpIOm) {
                                     // Make sure other threads will give up and
@@ -828,7 +838,6 @@ private boolean recoverContainerAfterInterrupt(
                                             "can't resurrect container: " +
                                             newE);
                                     }
-                                }
 
                                 throw StandardException.newException(
                                     SQLState.FILE_IO_INTERRUPTED, newE);
@@ -838,7 +847,12 @@ private boolean recoverContainerAfterInterrupt(
                     }
                 }
 
+                if (stealthMode) {
+                    // don't touch threadsInPageIO
+                } else {
                 threadsInPageIO++;
+                }
+
                 // retry IO
             } finally {
                 // Recovery work done (or failed), now set other threads free
