diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
index eb496cba..fa0611af 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
@@ -82,7 +82,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 
 	/**
-		Committed Drop state of the container.  If a post comit action
+		Committed Drop state of the container.  If a post commit action
 		determined that the drop container operation is committed, the whole
 		container may be removed and space reclaimed.
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
index 61120f4d..fb8347bf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
@@ -94,6 +94,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * closed by the interrupt.
      */
     protected ContainerKey currentIdentity;
+    private boolean reopen;
 
     private boolean actionStub;
     private boolean actionErrorOK;
@@ -901,9 +902,21 @@ private boolean privRemoveFile(StorageFile file)
     protected ContainerKey idAPriori = null;
 
     synchronized boolean openContainer(ContainerKey newIdentity)
-        throws StandardException
+            throws StandardException {
+        return openContainerMinion(newIdentity, false);
+    }
+
+    synchronized boolean reopenContainer(ContainerKey newIdentity)
+            throws StandardException {
+        return openContainerMinion(newIdentity, true);
+    }
+
+    private boolean openContainerMinion(
+        ContainerKey newIdentity,
+        boolean doReopen) throws StandardException
     {
         actionCode = OPEN_CONTAINER_ACTION;
+        reopen = doReopen;
         actionIdentity = newIdentity;
         boolean success = false;
         idAPriori = currentIdentity;
@@ -1485,8 +1498,15 @@ public Object run() throws StandardException, IOException
              try {
 
                  fileData = file.getRandomAccessFile(canUpdate ? "rw" : "r");
+
+                 if (!reopen) {
+                     // under reopen: can give race condition or if we
+                     // synchronize access, deadlock, so skip, we know
+                     // what's there anyway.
                  readHeader(getEmbryonicPage(fileData,
                                              FIRST_ALLOC_PAGE_OFFSET));
+                 }
+
 
                  if (SanityManager.DEBUG)
                  {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
index 57b41ddd..9b86c71b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
@@ -857,7 +857,7 @@ private boolean recoverContainerAfterInterrupt(
                     synchronized(this) {
                         try {
                             closeContainer();
-                            openContainer(currentIdentity);
+                            reopenContainer(currentIdentity);
                         } catch (InterruptDetectedException e) {
                             // Interrupted again?
                             debugTrace("interrupted during recovery's " +
@@ -1097,7 +1097,7 @@ void writeAtOffset(StorageRandomAccessFile file, byte[] bytes, long offset)
      * @throws IOException if an I/O error occurs while reading
      * @throws StandardException If thread is interrupted.
      */
-    private final void readFull(ByteBuffer dstBuffer,
+    private void readFull(ByteBuffer dstBuffer,
                                 FileChannel srcChannel,
                                 long position)
             throws IOException, StandardException
@@ -1134,7 +1134,7 @@ private final void readFull(ByteBuffer dstBuffer,
      * @throws IOException if an I/O error occurs while writing
      * @throws StandardException If thread is interrupted.
      */
-    private final void writeFull(ByteBuffer srcBuffer,
+    private void writeFull(ByteBuffer srcBuffer,
                                  FileChannel dstChannel,
                                  long position)
             throws IOException
