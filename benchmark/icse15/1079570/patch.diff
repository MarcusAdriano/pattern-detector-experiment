diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index b265e3d5..d8f66750 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -22,13 +22,31 @@
 
 
 import java.nio.ByteBuffer;
+import java.text.ParseException;
 import java.util.UUID;
+import java.util.regex.Pattern;
 
+import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.UUIDGen;
+import org.apache.commons.lang.time.DateUtils;
 
 public class TimeUUIDType extends AbstractType<UUID>
 {
+    
     public static final TimeUUIDType instance = new TimeUUIDType();
+    private Pattern regexPattern = Pattern.compile("[A-Fa-f0-9]{8}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{12}");
+    private static String[] iso8601Patterns = new String[] {
+        "yyyy-MM-dd HH:mm",
+        "yyyy-MM-dd HH:mm:ss",
+        "yyyy-MM-dd HH:mmZ",
+        "yyyy-MM-dd HH:mm:ssZ",
+        "yyyy-MM-dd'T'HH:mm",
+        "yyyy-MM-dd'T'HH:mmZ",
+        "yyyy-MM-dd'T'HH:mm:ss",
+        "yyyy-MM-dd'T'HH:mm:ssZ",
+        "yyyy-MM-dd",
+        "yyyy-MM-ddZ"
+    };
 
     TimeUUIDType() {} // singleton
 
@@ -102,10 +120,16 @@ public String getString(ByteBuffer bytes)
 
     public ByteBuffer fromString(String source) throws MarshalException
     {
+        ByteBuffer idBytes = null;
+        
+        // ffffffff-ffff-ffff-ffff-ffffffffff
+        if (regexPattern.matcher(source).matches())
+        {
         UUID uuid = null;
         try
         {
             uuid = UUID.fromString(source);
+                idBytes = ByteBuffer.wrap(UUIDGen.decompose(uuid));
         }
         catch (IllegalArgumentException e)
         {
@@ -114,8 +138,38 @@ public ByteBuffer fromString(String source) throws MarshalException
 
         if (uuid.version() != 1)
             throw new MarshalException("TimeUUID supports only version 1 UUIDs");
+        }
+        else if (source.equals("") || source.toLowerCase().equals("now"))
+        {
+            idBytes = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress())));
+        }
+        // Milliseconds since epoch?
+        else if (source.matches("^\\d+$"))
+        {
+            try
+            {
+                idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(Long.parseLong(source)));
+            }
+            catch (NumberFormatException e)
+            {
+                throw new MarshalException(String.format("unable to make version 1 UUID from '%s'"), e);
+            }
+        }
+        // Last chance, attempt to parse as date-time string
+        else
+        {
+            try
+            {
+                long timestamp = DateUtils.parseDate(source, iso8601Patterns).getTime();
+                idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timestamp));
+            }
+            catch (ParseException e1)
+            {
+                throw new MarshalException(String.format("unable to coherce '%s' to version 1 UUID"), e1);
+            }
+        }
 
-        return ByteBuffer.wrap(UUIDGen.decompose(uuid));
+        return idBytes;
     }
 
     public void validate(ByteBuffer bytes) throws MarshalException
