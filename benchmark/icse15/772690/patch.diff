diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index 7383495d..be14e640 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -32,6 +32,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.ArrayUtils;
 import org.apache.log4j.Logger;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
@@ -399,10 +400,10 @@ public String toString()
     public byte[] digest()
     {
     	Set<IColumn> columns = columns_.getSortedColumns();
-    	byte[] xorHash = null;
+    	byte[] xorHash = ArrayUtils.EMPTY_BYTE_ARRAY;
     	for(IColumn column : columns)
     	{
-    		if(xorHash == null)
+    		if(xorHash.length == 0)
     		{
     			xorHash = column.digest();
     		}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
index 811c492b..99fdaca5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
@@ -27,6 +27,7 @@
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.StorageService;
+import org.apache.commons.lang.ArrayUtils;
 
 
 /*
@@ -60,11 +61,12 @@ public static Message makeReadResponseMessage(ReadResponse readResponse) throws
 	
 	private String table_;
 	private Row row_;
-	private byte[] digest_ = new byte[0];
+	private byte[] digest_ = ArrayUtils.EMPTY_BYTE_ARRAY;
     private boolean isDigestQuery_ = false;
 
 	public ReadResponse(String table, byte[] digest )
     {
+        assert digest != null;
 		table_ = table;
 		digest_= digest;
 	}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
index b5c47627..8e0579fa 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
@@ -77,7 +77,7 @@ public void doVerb(Message message)
             Row row = null;
             row = readCommand.getRow(table);
             ReadResponse readResponse = null;
-            if(readCommand.isDigestQuery())
+            if (readCommand.isDigestQuery())
             {
                 readResponse = new ReadResponse(table.getTableName(), row.digest());
             }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
index b84dee9f..2b6f35be 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
@@ -178,12 +178,10 @@ public Row cloneMe()
             }
             else
             {
-                byte[] tmpHash = columnFamilies_.get(cFamily).digest();
-                xorHash = FBUtilities.xor(xorHash, tmpHash);
+                xorHash = FBUtilities.xor(xorHash, columnFamilies_.get(cFamily).digest());
             }
         }
-        logger_.info("DIGEST TIME: " + (System.currentTimeMillis() - start)
-                     + " ms.");
+        logger_.info("DIGEST TIME: " + (System.currentTimeMillis() - start) + " ms.");
         return xorHash;
     }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index ce67bd16..894d91ff 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -331,8 +331,10 @@ public static void compressToStream(byte[] input, ByteArrayOutputStream bos) thr
 
      public static byte[] xor(byte[] b1, byte[] b2)
      {
-    	 byte[] bLess = null;
-    	 byte[] bMore = null;
+         assert b1 != null;
+         assert b2 != null;
+    	 byte[] bLess;
+    	 byte[] bMore;
 
     	 if(b1.length > b2.length)
     	 {
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
index c57b97bd..75ec58bb 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
@@ -15,7 +15,8 @@
     // TODO test SuperColumns
 
     @Test
-    public void testSingleColumn() throws IOException {
+    public void testSingleColumn() throws IOException
+    {
         Random random = new Random();
         byte[] bytes = new byte[1024];
         random.nextBytes(bytes);
@@ -35,11 +36,12 @@ public void testSingleColumn() throws IOException {
     }
 
     @Test
-    public void testManyColumns() throws IOException {
+    public void testManyColumns() throws IOException
+    {
         ColumnFamily cf;
 
-        TreeMap<String, byte[]> map = new TreeMap<String,byte[]>();
-        for ( int i = 100; i < 1000; ++i )
+        TreeMap<String, byte[]> map = new TreeMap<String, byte[]>();
+        for (int i = 100; i < 1000; ++i)
         {
             map.put(Integer.toString(i), ("Avinash Lakshman is a good man: " + i).getBytes());
         }
@@ -47,7 +49,7 @@ public void testManyColumns() throws IOException {
         // write
         cf = new ColumnFamily("Standard1", "Standard");
         DataOutputBuffer bufOut = new DataOutputBuffer();
-        for (String cName: map.navigableKeySet())
+        for (String cName : map.navigableKeySet())
         {
             cf.addColumn(cName, map.get(cName), 314);
         }
@@ -57,7 +59,7 @@ public void testManyColumns() throws IOException {
         DataInputBuffer bufIn = new DataInputBuffer();
         bufIn.reset(bufOut.getData(), bufOut.getLength());
         cf = ColumnFamily.serializer().deserialize(bufIn);
-        for (String cName: map.navigableKeySet())
+        for (String cName : map.navigableKeySet())
         {
             assert Arrays.equals(cf.getColumn(cName).value(), map.get(cName));
 
@@ -66,7 +68,8 @@ public void testManyColumns() throws IOException {
     }
     
     @Test
-	public void testGetColumnCount() {
+    public void testGetColumnCount()
+    {
     	ColumnFamily cf = new ColumnFamily("Standard1", "Standard");
 		byte val[] = "sample value".getBytes();
 		
@@ -79,7 +82,8 @@ public void testGetColumnCount() {
 	}
     
     @Test
-    public void testTimestamp() {
+    public void testTimestamp()
+    {
     	ColumnFamily cf = new ColumnFamily("Standard1", "Standard");
     	byte val1[] = "sample 1".getBytes();
         byte val2[] = "sample 2".getBytes();
@@ -93,7 +97,8 @@ public void testTimestamp() {
     }
     
     @Test
-    public void testMergeAndAdd(){
+    public void testMergeAndAdd()
+    {
     	ColumnFamily cf_new = new ColumnFamily("Standard1", "Standard");
     	ColumnFamily cf_old = new ColumnFamily("Standard1", "Standard");
     	ColumnFamily cf_result = new ColumnFamily("Standard1", "Standard");
@@ -113,4 +118,11 @@ public void testMergeAndAdd(){
     	//addcolumns will only add if timestamp >= old timestamp
         assert Arrays.equals(val, cf_result.getColumn("col2").value());
     }
+
+    @Test
+    public void testEmptyDigest()
+    {
+        ColumnFamily cf = new ColumnFamily("Standard1", "Standard");
+        assert cf.digest().length == 0;
+    }
 }
