diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/db/SlaveDatabase.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
index 9d78315d..b0247d48 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
@@ -38,6 +38,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.DriverManager;
 import java.sql.SQLException;
 import java.util.Properties;
+import org.apache.derby.iapi.reference.MessageId;
+import org.apache.derby.impl.store.replication.ReplicationLogger;
 
 /**
  * SlaveDatabase is an instance of Database, and is booted instead of
@@ -322,10 +324,21 @@ public void run() {
                         resetCurrentContextManager(bootThreadCm);
                     bootThreadCm = null;
                 }
-            } catch (StandardException se) {
-                // We get here when SlaveController#stopSlave has been
-                // called, or if a fatal exception has been thrown.
-                handleShutdown(se);
+            } catch (Exception e) {
+                // We get here when SlaveController#stopSlave has been called,
+                // a fatal Derby exception has been thrown, or if a run-time
+                // error is thrown.  Log the error unconditionally to make sure
+                // it can be observed, since if this happens during or after
+                // recovery on a failover, there will be no connection attempt
+                // failing with the error. New connection attempts will just
+                // hang...
+
+                ReplicationLogger rl = new ReplicationLogger(dbname);
+                rl.logError(MessageId.REPLICATION_FATAL_ERROR, e);
+                
+                if (e instanceof StandardException) {
+                    handleShutdown((StandardException)e);
+                }
             }
         }
     }
