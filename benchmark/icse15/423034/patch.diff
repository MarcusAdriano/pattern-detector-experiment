diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java
index d806d69a..3ac10b17 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java
@@ -280,15 +280,7 @@ public BackingStoreHashtable(
                     hash_table = new Hashtable((int)(max_inmemory_size / rowUsage));
                 }
 
-                if (needsToClone)
-                {
-                    row = cloneRow(row);
-                }
-
-                Object key = 
-                    KeyHasher.buildHashKey(row, key_column_numbers);
-
-                add_row_to_hash_table(hash_table, key, row);
+                add_row_to_hash_table(hash_table, row, needsToClone);
             }
         }
 
@@ -378,24 +370,53 @@ public BackingStoreHashtable(
         return(new_row);
     }
 
+    /**
+     * Return a shallow cloned row
+     *
+     * @return The cloned row row to use.
+     *
+     * @exception  StandardException  Standard exception policy.
+     **/
+    static DataValueDescriptor[] shallowCloneRow(DataValueDescriptor[] old_row)
+        throws StandardException
+    {
+        DataValueDescriptor[] new_row = new DataValueDescriptor[old_row.length];
+        // the only difference between getClone and cloneObject is cloneObject does
+        // not objectify a stream.  We use cloneObject here.  DERBY-802
+        for (int i = 0; i < old_row.length; i++)
+        {
+            if( old_row[i] != null)
+                new_row[i] = (DataValueDescriptor) 
+                    ((CloneableObject) old_row[i]).cloneObject();
+        }
+
+        return(new_row);
+    }
+
     /**
      * Do the work to add one row to the hash table.
      * <p>
      *
      * @param row               Row to add to the hash table.
      * @param hash_table        The java HashTable to load into.
+     * @param needsToClone      If the row needs to be cloned
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
     private void add_row_to_hash_table(
     Hashtable   hash_table,
-    Object      key,
-    Object[]    row)
+    Object[]    row,
+    boolean needsToClone )
 		throws StandardException
     {
-        if( spillToDisk( hash_table, key, row))
+        if( spillToDisk( hash_table, row))
             return;
         
+        if (needsToClone)
+        {
+            row = cloneRow(row);
+        }
+        Object key = KeyHasher.buildHashKey(row, key_column_numbers);
         Object  duplicate_value = null;
 
         if ((duplicate_value = hash_table.put(key, row)) == null)
@@ -451,7 +472,6 @@ private void doSpaceAccounting( Object[] row,
      * Determine whether a new row should be spilled to disk and, if so, do it.
      *
      * @param hash_table The in-memory hash table
-     * @param key The row's key
      * @param row
      *
      * @return true if the row was spilled to disk, false if not
@@ -459,7 +479,6 @@ private void doSpaceAccounting( Object[] row,
      * @exception  StandardException  Standard exception policy.
      */
     private boolean spillToDisk( Hashtable   hash_table,
-                                 Object      key,
                                  Object[]    row)
 		throws StandardException
     {
@@ -472,7 +491,8 @@ private boolean spillToDisk( Hashtable   hash_table,
                 if( inmemory_rowcnt < max_inmemory_rowcnt)
                     return false; // Do not spill
             }
-            else if( max_inmemory_size > 0)
+            else if( max_inmemory_size > getEstimatedMemUsage(row))
+                
                 return false;
             // Want to start spilling
             if( ! (row instanceof DataValueDescriptor[]))
@@ -488,7 +508,7 @@ else if( max_inmemory_size > 0)
                                                remove_duplicates,
                                                keepAfterCommit);
         }
-        
+        Object key = KeyHasher.buildHashKey(row, key_column_numbers);
         Object duplicateValue = hash_table.get( key);
         if( duplicateValue != null)
         {
@@ -727,11 +747,6 @@ public boolean put(
 			}
 		}
 
-        if (needsToClone)
-        {
-            row = cloneRow(row);
-        }
-
         Object key = KeyHasher.buildHashKey(row, key_column_numbers);
 
         if ((remove_duplicates) && (get(key) != null))
@@ -740,7 +755,7 @@ public boolean put(
         }
         else
         {
-            add_row_to_hash_table(hash_table, key, row);
+            add_row_to_hash_table(hash_table, row, needsToClone);
             return(true);
         }
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
index 5ea3950d..ae0727b4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java
@@ -207,7 +207,9 @@ private Object getRemove( Object key, boolean remove, boolean existenceOnly)
 
                     rowCount++;
                     if( rowCount == 1)
-                        retValue = BackingStoreHashtable.cloneRow( row);
+                    {
+                        retValue = BackingStoreHashtable.shallowCloneRow( row);                        
+                    } 
                     else 
                     {
                         Vector v;
@@ -218,8 +220,10 @@ private Object getRemove( Object key, boolean remove, boolean existenceOnly)
                             retValue = v;
                         }
                         else
+                        {
                             v = (Vector) retValue;
-                        v.add( BackingStoreHashtable.cloneRow( row));
+                        }
+                        v.add( BackingStoreHashtable.shallowCloneRow( row));
                     }
                     if( remove)
                     {
@@ -348,7 +352,7 @@ public Object nextElement()
             try
             {
                 scan.fetch( row);
-                Object retValue =  BackingStoreHashtable.cloneRow( row);
+                Object retValue =  BackingStoreHashtable.shallowCloneRow( row);
                 hasMore = scan.next();
                 if( ! hasMore)
                 {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
index 8ff60c28..c8094479 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
@@ -109,13 +109,22 @@ When the value was written from a stream (e.g. PreparedStatement.setBinaryStream
 
     public int estimateMemoryUsage()
     {
-        int sz = BASE_MEMORY_USAGE;
-        if( null != dataValue)
-            sz += dataValue.length;
-        return sz;
+        if (dataValue == null) {
+            if (streamValueLength>=0) {
+                return BASE_MEMORY_USAGE + streamValueLength;
+            } else {
+                return getMaxMemoryUsage();
+            }
+        } else {
+            return BASE_MEMORY_USAGE + dataValue.length;
+        }
     } // end of estimateMemoryUsage
 
 	  
+	/**
+	 * Return max memory usage for a SQL Binary
+	 */
+	abstract int getMaxMemoryUsage();
 	  
 	 /*
 	 * object state
@@ -502,7 +511,7 @@ public final Object cloneObject()
 		if (stream == null)
 			return getClone();
 		SQLBinary self = (SQLBinary) getNewNull();
-		self.setStream(stream);
+		self.setValue(stream, streamValueLength);
 		return self;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java
index befb598e..fa7abfe9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java
@@ -21,6 +21,7 @@
 package org.apache.derby.iapi.types;
 
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.reference.Limits;
 
 import org.apache.derby.iapi.services.io.ArrayInputStream;
 
@@ -79,6 +80,14 @@ public String getTypeName()
 		return TypeId.BIT_NAME;
 	}
 
+	/**
+	 * Return max memory usage for a SQL Bit
+	 */
+	int getMaxMemoryUsage()
+	{
+		return Limits.DB2_CHAR_MAXWIDTH;
+	}
+
 	/*
 	 * Storable interface, implies Externalizable, TypedFormat
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
index 07bb2e77..1a3221ef 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
@@ -26,6 +26,7 @@
 import org.apache.derby.iapi.types.BitDataValue;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.reference.Limits;
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.types.Orderable;
@@ -81,6 +82,14 @@ public String getTypeName()
 			return TypeId.BLOB_NAME;
         }
 
+    /**
+	 * Return max memory usage for a SQL Blob
+	 */
+	int getMaxMemoryUsage()
+	{
+		return Limits.DB2_LOB_MAXWIDTH;
+	}
+
     /**
      * @see DataValueDescriptor#getNewNull
      */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java
index 48054354..2d7eea85 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java
@@ -26,6 +26,7 @@
 import org.apache.derby.iapi.types.BitDataValue;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.reference.Limits;
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.types.Orderable;
@@ -58,6 +59,14 @@ public String getTypeName()
 		return TypeId.LONGVARBIT_NAME;
 	}
 
+	/**
+	 * Return max memory usage for a SQL LongVarbit
+	 */
+	int getMaxMemoryUsage()
+	{
+		return Limits.DB2_LONGVARCHAR_MAXWIDTH;
+	}
+
 	/**
 	 * @see DataValueDescriptor#getNewNull
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java
index 5f844a71..3866ea19 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java
@@ -26,6 +26,7 @@
 import org.apache.derby.iapi.types.BitDataValue;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.reference.Limits;
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.types.Orderable;
@@ -60,6 +61,14 @@ public String getTypeName()
 		return TypeId.VARBIT_NAME;
 	}
 
+	/**
+	 * Return max memory usage for a SQL Varbit
+	 */
+	int getMaxMemoryUsage()
+	{
+		return Limits.DB2_VARCHAR_MAXWIDTH;
+	}
+
 	/**
 	 * @see DataValueDescriptor#getNewNull
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java
index 80f4507e..d3538214 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java
@@ -532,16 +532,41 @@ private ExecRow doProjection(ExecRow sourceRow)
 	public ExecRow doBaseRowProjection(ExecRow sourceRow)
 		throws StandardException
 	{
-		ExecRow result = null;
+		final ExecRow result;
 		if (source instanceof ProjectRestrictResultSet) {
 			ProjectRestrictResultSet prs = (ProjectRestrictResultSet) source;
 			result = prs.doBaseRowProjection(sourceRow);
 		} else {
-			result = sourceRow.getClone();
+			result = sourceRow.getNewNullRow();
+			result.setRowArray(sourceRow.getRowArray());
 		}
 		return doProjection(result);
 	}
 	
+	/**
+	 * Get projection mapping array. The array consist of indexes which
+	 * maps the column in a row array to another position in the row array.
+	 * If the value is projected out of the row, the value is negative.
+	 * @return projection mapping array.
+	 */
+	public int[] getBaseProjectMapping() 
+	{
+		final int[] result;
+		if (source instanceof ProjectRestrictResultSet) {
+			result = new int[projectMapping.length];
+			final ProjectRestrictResultSet prs = (ProjectRestrictResultSet) source;
+			final int[] sourceMap = prs.getBaseProjectMapping();
+			for (int i=0; i<projectMapping.length; i++) {
+				if (projectMapping[i] > 0) {
+					result[i] = sourceMap[projectMapping[i] - 1];
+				}
+			}
+		} else {
+			result = projectMapping;
+		}
+		return result;
+	} 
+	
 	/**
 	 * Is this ResultSet or it's source result set for update
 	 * 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
index d462fe9b..b89693e1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
@@ -229,8 +229,7 @@ public void	openCore() throws StandardException
 		 * The 1st column, the position in the
 		 * scan, will be the key column.
 		 */
-		int[] keyCols = new int[1];
-		// keyCols[0] = 0; // not req. arrays initialized to zero
+		final int[] keyCols = new int[] { 0 };
 
 		/* We don't use the optimizer row count for this because it could be
 		 * wildly pessimistic.  We only use Hash tables when the optimizer row count
@@ -992,12 +991,12 @@ private void addRowToHashTable(ExecRow sourceRow, int position,
 		 * and we do our own cloning since the 1st column
 		 * is not a wrapper.
 		 */
-		DataValueDescriptor[] sourceRowArray = sourceRow.getRowArrayClone();
+		DataValueDescriptor[] sourceRowArray = sourceRow.getRowArray();
 
 		System.arraycopy(sourceRowArray, 0, hashRowArray, extraColumns, 
 				sourceRowArray.length);
 
-		ht.put(false, hashRowArray);
+		ht.put(true, hashRowArray);
 
 		numToHashTable++;
 	}
@@ -1059,6 +1058,31 @@ private ExecRow getRowFromHashTable(int position)
 		return resultRow;
 	}
 
+	/**
+	 * Get the row data at the specified position 
+	 * from the hash table.
+	 *
+	 * @param position	The specified position.
+	 *
+	 * @return	The row data at that position.
+	 *
+ 	 * @exception StandardException thrown on failure 
+	 */
+	private DataValueDescriptor[] getRowArrayFromHashTable(int position)
+		throws StandardException
+	{
+		positionInHashTable.setValue(position);
+		final DataValueDescriptor[] hashRowArray = (DataValueDescriptor[]) 
+			ht.get(positionInHashTable);
+		
+		// Copy out the Object[] without the position.
+		final DataValueDescriptor[] resultRowArray = new 
+			DataValueDescriptor[hashRowArray.length - extraColumns];
+		System.arraycopy(hashRowArray, extraColumns, resultRowArray, 0, 
+						 resultRowArray.length);
+		return resultRowArray;
+	}
+
 	/**
 	 * Positions the cursor in the last fetched row. This is done before
 	 * navigating to a row that has not previously been fetched, so that
@@ -1082,10 +1106,13 @@ private void positionInLastFetchedRow() throws StandardException {
 	 * in the hash table with the new values for the row.
 	 */
 	public void updateRow(ExecRow row) throws StandardException {
-		ExecRow newRow = row.getClone();
+		ExecRow newRow = row;
+		boolean undoProjection = false;
+		
 		if (source instanceof ProjectRestrictResultSet) {
 			newRow = ((ProjectRestrictResultSet)source).
-					doBaseRowProjection(newRow);
+				doBaseRowProjection(row);
+			undoProjection = true;
 		}
 		positionInHashTable.setValue(currentPosition);
 		DataValueDescriptor[] hashRowArray = (DataValueDescriptor[]) 
@@ -1093,6 +1120,32 @@ public void updateRow(ExecRow row) throws StandardException {
 		RowLocation rowLoc = (RowLocation) hashRowArray[POS_ROWLOCATION];
 		ht.remove(new SQLInteger(currentPosition));
 		addRowToHashTable(newRow, currentPosition, rowLoc, true);
+		
+		// Modify row to refer to data in the BackingStoreHashtable.
+		// This allows reading of data which goes over multiple pages
+		// when doing the actual update (LOBs). Putting columns of
+		// type SQLBinary to disk, has destructive effect on the columns,
+		// and they need to be re-read. That is the reason this is needed.
+		if (undoProjection) {
+			
+			final DataValueDescriptor[] newRowData = newRow.getRowArray();
+			
+			// Array of original position in row
+			final int[] origPos =((ProjectRestrictResultSet)source).
+				getBaseProjectMapping(); 
+			
+			// We want the row to contain data backed in BackingStoreHashtable
+			final DataValueDescriptor[] backedData = 
+				getRowArrayFromHashTable(currentPosition);
+			
+			for (int i=0; i<origPos.length; i++) {
+				if (origPos[i]>=0) {
+					row.setColumn(origPos[i], backedData[i]);
+				}
+			}
+		} else {
+			row.setRowArray(getRowArrayFromHashTable(currentPosition));
+		}
 	}
 
 	/**
@@ -1112,7 +1165,7 @@ public void markRowAsDeleted() throws StandardException  {
 			hashRowArray[i].setToNull();
 		}
 
-		ht.put(false, hashRowArray);
+		ht.put(true, hashRowArray);
 	}
 
 	/**
