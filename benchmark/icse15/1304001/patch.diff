diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
index 9d4050e5..d61a1314 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
@@ -359,17 +359,12 @@ public static Document toDocument( SolrInputDocument doc, IndexSchema schema )
     return out;
   }
 
-  
   /**
-   * Add fields from the solr document
-   * 
-   * TODO: /!\ NOTE /!\ This semantics of this function are still in flux.  
-   * Something somewhere needs to be able to fill up a SolrDocument from
-   * a lucene document - this is one place that may happen.  It may also be
-   * moved to an independent function
-   * 
-   * @since solr 1.3
+   * Deprecated, do not use: The semantics of this method make no sense, and have never made sense, this method will be removed in Solr 4.0
+   * @deprecated Do Not Use, see SolrPluginUtils.docListToSolrDocumentList instead
+   * @see org.apache.solr.util.SolrPluginUtils#docListToSolrDocumentList
    */
+  @Deprecated
   public SolrDocument loadStoredFields( SolrDocument doc, Document luceneDoc  )
   {
     for( Object f : luceneDoc.getFields() ) {
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
index 862e4386..b547df68 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -18,6 +18,7 @@
 package org.apache.solr.util;
 
 import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.queryParser.ParseException;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.search.*;
@@ -980,7 +981,8 @@ public static SolrDocumentList docListToSolrDocumentList(
       Set<String> fields, 
       Map<SolrDocument, Integer> ids ) throws IOException
   {
-    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());
+    IndexSchema schema = searcher.getSchema();
+
     SolrDocumentList list = new SolrDocumentList();
     list.setNumFound(docs.matches());
     list.setMaxScore(docs.maxScore());
@@ -993,14 +995,15 @@ public static SolrDocumentList docListToSolrDocumentList(
 
       Document luceneDoc = searcher.doc(docid, fields);
       SolrDocument doc = new SolrDocument();
-      db.loadStoredFields(doc, luceneDoc);
 
-      // this may be removed if XMLWriter gets patched to
-      // include score from doc iterator in solrdoclist
-      if (docs.hasScores()) {
+      for( Fieldable field : luceneDoc.getFields()) {
+        if (null == fields || fields.contains(field.name())) {
+          SchemaField sf = schema.getField( field.name() );
+          doc.addField( field.name(), sf.getType().toObject( field ) );
+        }
+      }
+      if (docs.hasScores() && (null == fields || fields.contains("score"))) {
         doc.addField("score", dit.score());
-      } else {
-        doc.addField("score", 0.0f);
       }
 
       list.add( doc );
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
index 006fb21e..f860f879 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
@@ -56,28 +56,48 @@ public static void beforeClass() throws Exception {
 
   @Test
   public void testDocListConversion() throws Exception {
-    assertU("", adoc("id", "3234", "val_t", "quick red fox"));
-    assertU("", adoc("id", "3235", "val_t", "quick green fox"));
-    assertU("", adoc("id", "3236", "val_t", "quick brown fox"));
-    commit();
+    assertU("", adoc("id", "3234", "val_i", "1", 
+                     "val_dynamic", "quick red fox"));
+    assertU("", adoc("id", "3235", "val_i", "1", 
+                     "val_dynamic", "quick green fox"));
+    assertU("", adoc("id", "3236", "val_i", "1", 
+                     "val_dynamic", "quick brown fox"));
+    assertU("", commit());
+
     RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();
+    try {
     SolrIndexSearcher srchr = holder.get();
     SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();
     SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();
     cmd.setQuery(new MatchAllDocsQuery());
+      cmd.setLen(10);
     qr = srchr.search(qr, cmd);
 
     DocList docs = qr.getDocList();
+      assertEquals("wrong docs size", 3, docs.size());
     Set<String> fields = new HashSet<String>();
-    fields.add("val_t");
-
+      fields.add("val_dynamic");
+      fields.add("dynamic_val");
+      fields.add("range_facet_l"); // copied from id
 
     SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);
-    assertTrue("list Size: " + list.size() + " is not: " + docs.size(), list.size() == docs.size());
+      assertEquals("wrong list Size", docs.size(), list.size());
     for (SolrDocument document : list) {
-      assertNotNull(document.get("val_t"));
+        
+        assertTrue("unexpected field", ! document.containsKey("val_i"));
+        assertTrue("unexpected id field", ! document.containsKey("id"));
+
+        assertTrue("original field", document.containsKey("val_dynamic"));
+        assertTrue("dyn copy field", document.containsKey("dynamic_val"));
+        assertTrue("copy field", document.containsKey("range_facet_l"));
+        
+        assertNotNull("original field null", document.get("val_dynamic"));
+        assertNotNull("dyn copy field null", document.get("dynamic_val"));
+        assertNotNull("copy field null", document.get("range_facet_l"));
+      }
+    } finally {
+      if (null != holder) holder.decref();
     }
-    holder.decref();
   }
 
   @Test
