diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java
index fed221fc..62bef27b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java
@@ -460,12 +460,18 @@ public Lock lockObject(CompatibilitySpace compatibilitySpace, Lockable ref,
 
 forever:	for (;;) {
 
-                byte wakeupReason = waitingLock.waitForGrant(actualTimeout);
-                
+                byte wakeupReason = 0;
                 ActiveLock nextWaitingLock = null;
                 Object[] deadlockData = null;
 
                 try {
+                    try {
+                        wakeupReason = waitingLock.waitForGrant(actualTimeout);
+                    } catch(StandardException e) {
+                        nextWaitingLock = control.getNextWaiter(waitingLock, true, this);
+                        throw e;
+                    }
+
                     boolean willQuitWait;
                     Enumeration timeoutLockTable = null;
                     long currentTime = 0;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java
index 1ec8308b..526ac825 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java
@@ -273,12 +273,18 @@ public Lock lockObject(CompatibilitySpace compatibilitySpace, Lockable ref,
 
 forever:	for (;;) {
 
-                byte wakeupReason = waitingLock.waitForGrant(actualTimeout);
-                
+                byte wakeupReason = 0;
                 ActiveLock nextWaitingLock = null;
                 Object[] deadlockData = null;
 
                 try {
+                    try {
+                        wakeupReason = waitingLock.waitForGrant(actualTimeout);
+                    } catch(StandardException e) {
+                        nextWaitingLock = control.getNextWaiter(waitingLock, true, this);
+                        throw e;
+                    }
+
                     boolean willQuitWait;
                     Enumeration timeoutLockTable = null;
                     long currentTime = 0;
