diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java
index 617104af..c4aa9be1 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java
@@ -264,10 +264,10 @@ public int run(String[] args) throws Exception {
       boolean shouldPrune = maxDFSigma >=0.0;
       String tfDirName = shouldPrune ? DictionaryVectorizer.DOCUMENT_VECTOR_OUTPUT_FOLDER+"-toprune" : DictionaryVectorizer.DOCUMENT_VECTOR_OUTPUT_FOLDER;
 
-      if (!processIdf && !shouldPrune) {
+      if (!processIdf) {
         DictionaryVectorizer.createTermFrequencyVectors(tokenizedPath, outputDir, tfDirName, conf, minSupport, maxNGramSize,
           minLLRValue, norm, logNormalize, reduceTasks, chunkSize, sequentialAccessOutput, namedVectors);
-      } else if (processIdf) {
+      } else {
         DictionaryVectorizer.createTermFrequencyVectors(tokenizedPath, outputDir, tfDirName, conf, minSupport, maxNGramSize,
           minLLRValue, -1.0f, false, reduceTasks, chunkSize, sequentialAccessOutput, namedVectors);
       }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFilesTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFilesTest.java
index 84640cb2..66dfa2da 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFilesTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFilesTest.java
@@ -64,25 +64,25 @@ private void setupDocs() throws IOException {
   @Test
   public void testCreateTermFrequencyVectors() throws Exception {
     setupDocs();
-    runTest(false, false, -1, NUM_DOCS);
+    runTest(false, false, false, -1, NUM_DOCS);
   }
 
   @Test
   public void testCreateTermFrequencyVectorsNam() throws Exception {
     setupDocs();
-    runTest(false, true, -1, NUM_DOCS);
+    runTest(false, false, true, -1, NUM_DOCS);
   }
   
   @Test
   public void testCreateTermFrequencyVectorsSeq() throws Exception {
     setupDocs();
-    runTest(true, false, -1, NUM_DOCS);
+    runTest(false, true, false, -1, NUM_DOCS);
   }
   
   @Test
   public void testCreateTermFrequencyVectorsSeqNam() throws Exception {
     setupDocs();
-    runTest(true, true, -1, NUM_DOCS);
+    runTest(false, true, true, -1, NUM_DOCS);
   }
 
   @Test
@@ -102,7 +102,7 @@ public void testPruning() throws Exception {
     } finally {
       Closeables.closeQuietly(writer);
     }
-    Path outPath = runTest(false, false, 2, docs.length);
+    Path outPath = runTest(false, false, false, 2, docs.length);
     Path tfidfVectors = new Path(outPath, "tfidf-vectors");
     int count = 0;
     Vector [] res = new Vector[docs.length];
@@ -122,7 +122,44 @@ public void testPruning() throws Exception {
     assertEquals(1, res[2].getNumNondefaultElements());
   }
 
-  private Path runTest(boolean sequential, boolean named, double maxDFSigma, int numDocs) throws Exception {
+  @Test
+  public void testPruningTF() throws Exception {
+    conf = new Configuration();
+    FileSystem fs = FileSystem.get(conf);
+
+    inputPath = getTestTempFilePath("documents/docs.file");
+    SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, inputPath, Text.class, Text.class);
+
+    String [] docs = {"a b c", "a a a a a b", "a a a a a c"};
+
+    try {
+      for (int i = 0; i < docs.length; i++) {
+        writer.append(new Text("Document::ID::" + i), new Text(docs[i]));
+      }
+    } finally {
+      Closeables.closeQuietly(writer);
+    }
+    Path outPath = runTest(true, false, false, 2, docs.length);
+    Path tfVectors = new Path(outPath, "tf-vectors");
+    int count = 0;
+    Vector [] res = new Vector[docs.length];
+    for (VectorWritable value :
+         new SequenceFileDirValueIterable<VectorWritable>(
+             tfVectors, PathType.LIST, PathFilters.partFilter(), null, true, conf)) {
+      Vector v = value.get();
+      System.out.println(v);
+      assertEquals(2, v.size());
+      res[count] = v;
+      count++;
+    }
+    assertEquals(docs.length, count);
+    //the first doc should have two values, the second and third should have 1, since the a gets removed
+    assertEquals(2, res[0].getNumNondefaultElements());
+    assertEquals(1, res[1].getNumNondefaultElements());
+    assertEquals(1, res[2].getNumNondefaultElements());
+  }
+
+  private Path runTest(boolean tfWeighting, boolean sequential, boolean named, double maxDFSigma, int numDocs) throws Exception {
     Path outputPath = getTestTempFilePath("output");
 
     
@@ -143,6 +180,10 @@ private Path runTest(boolean sequential, boolean named, double maxDFSigma, int n
       argList.add("--maxDFSigma");
       argList.add(String.valueOf(maxDFSigma));
     }
+    if (tfWeighting){
+      argList.add("--weight");
+      argList.add("tf");
+    }
     String[] args = argList.toArray(new String[argList.size()]);
     
     SparseVectorsFromSequenceFiles.main(args);
@@ -151,7 +192,9 @@ private Path runTest(boolean sequential, boolean named, double maxDFSigma, int n
     Path tfidfVectors = new Path(outputPath, "tfidf-vectors");
     
     DictionaryVectorizerTest.validateVectors(conf, numDocs, tfVectors, sequential, named);
+    if (tfWeighting == false) {
     DictionaryVectorizerTest.validateVectors(conf, numDocs, tfidfVectors, sequential, named);
+    }
     return outputPath;
   }  
 }
