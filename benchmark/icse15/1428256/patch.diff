diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
index fbfaf58b..06ce9868 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -2422,7 +2422,14 @@ void checkForValidParameterIndex(int parameterIndex) throws SqlException {
     private void checkThatAllParametersAreSet() throws SqlException {
         if (parameterMetaData_ != null) {
             for (int i = 0; i < parameterMetaData_.columns_; i++) {
-                if (!parameterSet_[i] && !parameterRegistered_[i]) {
+                // Raise an exception if at least one of the parameters isn't
+                // set. It is OK that a parameter isn't set if it is registered
+                // as an output parameter. However, if it's an INOUT parameter,
+                // it must be set even if it has been registered (DERBY-2516).
+                if (!parameterSet_[i] &&
+                        (!parameterRegistered_[i] ||
+                         parameterMetaData_.sqlxParmmode_[i] ==
+                            java.sql.ParameterMetaData.parameterModeInOut)) {
                     throw new SqlException(agent_.logWriter_, 
                         new ClientMessageId(SQLState.LANG_MISSING_PARMS));
                 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
index 9a3fa2c5..bd6c73a3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
@@ -815,6 +815,51 @@ private AllTypesTuple   getActualReturnArgs( CallableStatement cs )
              );
     }
 
+    /**
+     * Regression test case for DERBY-2516. If an INOUT parameter had been
+     * registered as an output parameter, but no input value had been assigned
+     * to it, the client driver would go ahead and execute the statement
+     * using null as input.
+     */
+    public void testInOutParamNotSet() throws SQLException {
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.execute("create procedure proc_2516 (inout i int) " +
+                  "language java parameter style java external name '" +
+                  getClass().getName() + ".proc_2516' no sql");
+
+        // Register an INOUT parameter, but don't set it. Expect failure.
+        // Client used to execute without error.
+        CallableStatement cs = prepareCall("call proc_2516(?)");
+        cs.registerOutParameter(1, Types.INTEGER);
+        assertStatementError("07000", cs);
+
+        // Should work if the parameter has been set.
+        cs.setInt(1, 0);
+        cs.execute();
+        assertEquals(10, cs.getInt(1));
+
+        // After clearing the parameters, execution should fail. Client used
+        // to succeed.
+        cs.clearParameters();
+        assertStatementError("07000", cs);
+
+        // Setting the parameter again should make it work.
+        cs.setInt(1, 1);
+        cs.execute();
+        assertEquals(10, cs.getInt(1));
+    }
+
+    /**
+     * Stored procedure used by the regression test case for DERBY-2516.
+     *
+     * @param i INOUT parameter that gets set to 10 by the procedure
+     */
+    public static void proc_2516(Integer[] i) {
+        i[0] = new Integer(10);
+    }
+
     // UTILITY METHODS
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java
index e18c1e04..b9ed0044 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java
@@ -1748,8 +1748,6 @@ public void testOutparams() throws SQLException {
         } catch (SQLException sqle) {
             assertSQLState("07000", sqle);
         }
-        if (usingEmbedded()) {
-            // Do not run for client until DERBY-2516 is fixed
             op.clearParameters();
             op.setString(2, "2");
             try {
@@ -1759,7 +1757,6 @@ public void testOutparams() throws SQLException {
             } catch (SQLException sqle) {
                 assertSQLState("07000", sqle);
             }
-        }
         op.clearParameters();
         op.setBigDecimal(1, new BigDecimal("33"));
         try {
