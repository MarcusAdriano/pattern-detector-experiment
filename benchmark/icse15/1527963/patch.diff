diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
index 9429a3c8..4dbd01f8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
@@ -140,6 +140,11 @@ void printSubNodes(int depth)
 		}
 	}
 
+    @Override
+    public boolean referencesSessionSchema() throws StandardException {
+        return subquerys != null && subquerys.referencesSessionSchema();
+    }
+
 	/**
 	 * Modify the RCL of this node to match the target of the insert.
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
index 30efe055..d8835491 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
@@ -151,7 +151,7 @@ public boolean referencesSessionSchema()
 	{
         for (SubqueryNode sqn : this)
 		{
-            if (sqn.getResultSet().referencesSessionSchema())
+            if (sqn.referencesSessionSchema())
 			{
 				return true;
 			}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
index bb0e7db6..89efbf75 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
@@ -395,6 +395,11 @@ void setParentComparisonOperator(BinaryComparisonOperatorNode parent)
   		parentComparisonOperator = parent;
   	}
 
+    @Override
+    public boolean referencesSessionSchema() throws StandardException {
+        return resultSet.referencesSessionSchema();
+    }
+
 	/**
 	 * Remap all ColumnReferences in this tree to be clones of the
 	 * underlying expression.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
index 9fb16132..47d8585b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
@@ -1798,4 +1798,48 @@ public void testDerby6351TransitionTableCorrelation() throws SQLException {
                     { "tr6", "1" },
                 });
     }
+
+    /**
+     * Verify that CREATE TRIGGER fails if a temporary table is referenced.
+     * Regression test case for DERBY-6357.
+     */
+    public void testDerby6357TempTable() throws SQLException {
+        Statement s = createStatement();
+        s.execute("declare global temporary table temptable(x int) not logged");
+        s.execute("create table t1(x int)");
+        s.execute("create table t2(i int, b boolean)");
+
+        assertCompileError("XCL51",
+                "create trigger tr1 after insert on session.temptable "
+                + "referencing new table as new "
+                + "insert into t1(i) select x from new");
+
+        assertCompileError("XCL51",
+                "create trigger tr2 after insert on t1 "
+                + "insert into t2(i) select x from session.temptable");
+
+        assertCompileError("XCL51",
+                "create trigger tr3 after insert on t1 "
+                + "insert into session.temptable values 1");
+
+        // Used to fail
+        assertCompileError("XCL51",
+                "create trigger tr4 after insert on t1 "
+                + "insert into t2(b) values exists("
+                + "select * from session.temptable)");
+
+        // Used to fail
+        assertCompileError("XCL51",
+                "create trigger tr5 after insert on t1 "
+                + "insert into t2(i) values case when "
+                + "exists(select * from session.temptable) then 1 else 2 end");
+
+        // Used to fail
+        assertCompileError("XCL51",
+                "create trigger tr6 after insert on t1 "
+                + "insert into t2(b) values "
+                + "(select count(*) from session.temptable) = "
+                + "(select count(*) from sysibm.sysdummy1)");
+
+    }
 }
