diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java
index 0b4f7b11..7e115d2a 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java
@@ -54,14 +54,20 @@ public GenericItemPreferenceArray(int size) {
   public GenericItemPreferenceArray(List<Preference> prefs) {
     this(prefs.size());
     int size = prefs.size();
+    long itemID = Long.MIN_VALUE;
     for (int i = 0; i < size; i++) {
       Preference pref = prefs.get(i);
       ids[i] = pref.getUserID();
-      values[i] = pref.getValue();
+      if (i == 0) {
+        itemID = pref.getItemID();
+      } else {
+        if (itemID != pref.getItemID()) {
+          throw new IllegalArgumentException("Not all item IDs are the same");
+    }
     }
-    if (size > 0) {
-      id = prefs.get(0).getItemID();
+      values[i] = pref.getValue();
     }
+    id = itemID;
   }
   
   /**
@@ -240,6 +246,9 @@ public boolean equals(Object other) {
 
   @Override
   public String toString() {
+    if (ids == null || ids.length == 0) {
+      return "GenericItemPreferenceArray[{}]";
+    }
     StringBuilder result = new StringBuilder(20 * ids.length);
     result.append("GenericItemPreferenceArray[itemID:");
     result.append(id);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java
index e2fa510e..c62660ee 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java
@@ -26,6 +26,11 @@
 import org.apache.mahout.cf.taste.model.PreferenceArray;
 
 /**
+ * <p>
+ * Like {@link GenericItemPreferenceArray} but stores preferences for one user (all user IDs the same) rather
+ * than one item.
+ * </p>
+ *
  * <p>
  * This implementation maintains two parallel arrays, of user IDs and values. The idea is to save allocating
  * {@link Preference} objects themselves. This saves the overhead of {@link Preference} objects but also
@@ -55,14 +60,20 @@ public GenericUserPreferenceArray(int size) {
   public GenericUserPreferenceArray(List<Preference> prefs) {
     this(prefs.size());
     int size = prefs.size();
+    long userID = Long.MIN_VALUE;
     for (int i = 0; i < size; i++) {
       Preference pref = prefs.get(i);
+      if (i == 0) {
+        userID = pref.getUserID();
+      } else {
+        if (userID != pref.getUserID()) {
+          throw new IllegalArgumentException("Not all user IDs are the same");
+        }
+      }
       ids[i] = pref.getItemID();
       values[i] = pref.getValue();
     }
-    if (size > 0) {
-      id = prefs.get(0).getUserID();
-    }
+    id = userID;
   }
   
   /**
@@ -241,6 +252,9 @@ public boolean equals(Object other) {
 
   @Override
   public String toString() {
+    if (ids == null || ids.length == 0) {
+      return "GenericUserPreferenceArray[{}]";
+    }
     StringBuilder result = new StringBuilder(20 * ids.length);
     result.append("GenericUserPreferenceArray[userID:");
     result.append(id);
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategyTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategyTest.java
index d7e2c105..adf6e1ce 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategyTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategyTest.java
@@ -48,8 +48,8 @@ public void testStrategy() throws TasteException {
     prefsOfUser456.add(new GenericPreference(456L, 2L, 1.0f));
 
     List<Preference> prefsOfUser789 = new ArrayList<Preference>();
-    prefsOfUser456.add(new GenericPreference(789L, 1L, 0.5f));
-    prefsOfUser456.add(new GenericPreference(789L, 3L, 1.0f));
+    prefsOfUser789.add(new GenericPreference(789L, 1L, 0.5f));
+    prefsOfUser789.add(new GenericPreference(789L, 3L, 1.0f));
 
     FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
     userData.put(123L, new GenericUserPreferenceArray(prefsOfUser123));
