diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java
index 664b4f59..82d5fa37 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java
@@ -17,7 +17,7 @@
 package org.apache.mahout.clustering.minhash;
 
 import org.apache.mahout.common.RandomUtils;
-import org.apache.mahout.vectorizer.encoders.MurmurHash;
+import org.apache.mahout.math.MurmurHash;
 
 import java.util.Random;
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/CachingValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/CachingValueEncoder.java
index 39ad449a..08d3d3e4 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/CachingValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/CachingValueEncoder.java
@@ -17,6 +17,8 @@
 
 package org.apache.mahout.vectorizer.encoders;
 
+import org.apache.mahout.math.MurmurHash;
+
 /**
  * Provides basic hashing semantics for encoders where the probe locations
  * depend only on the name of the variable.
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/FeatureVectorEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/FeatureVectorEncoder.java
index 7f3595c2..2b0072cb 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/FeatureVectorEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/FeatureVectorEncoder.java
@@ -19,6 +19,7 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.collect.Sets;
+import org.apache.mahout.math.MurmurHash;
 import org.apache.mahout.math.Vector;
 
 import java.util.Collections;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/MurmurHash.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/MurmurHash.java
index 399ab568..e69de29b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/MurmurHash.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/encoders/MurmurHash.java
@@ -1,147 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.vectorizer.encoders;
-
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-
-/**
- * This is a very fast, non-cryptographic hash suitable for general hash-based
- * lookup.  See http://murmurhash.googlepages.com/ for more details.
- * <p/>
- * <p>The C version of MurmurHash 2.0 found at that site was ported
- * to Java by Andrzej Bialecki (ab at getopt org).</p>
- */
-public final class MurmurHash {
-
-  private MurmurHash() {
-  }
-
-  /**
-   * Hashes bytes in an array.
-   * @param data The bytes to hash.
-   * @param seed The seed for the hash.
-   * @return The 32 bit hash of the bytes in question.
-   */
-  public static int hash(byte[] data, int seed) {
-    return hash(ByteBuffer.wrap(data), seed);
-  }
-
-  /**
-   * Hashes bytes in part of an array.
-   * @param data    The data to hash.
-   * @param offset  Where to start munging.
-   * @param length  How many bytes to process.
-   * @param seed    The seed to start with.
-   * @return        The 32-bit hash of the data in question.
-   */
-  public static int hash(byte[] data, int offset, int length, int seed) {
-    return hash(ByteBuffer.wrap(data, offset, length), seed);
-  }
-
-  /**
-   * Hashes the bytes in a buffer from the current position to the limit.
-   * @param buf    The bytes to hash.
-   * @param seed   The seed for the hash.
-   * @return       The 32 bit murmur hash of the bytes in the buffer.
-   */
-  public static int hash(ByteBuffer buf, int seed) {
-    // save byte order for later restoration
-    ByteOrder byteOrder = buf.order();
-    buf.order(ByteOrder.LITTLE_ENDIAN);
-
-    int m = 0x5bd1e995;
-    int r = 24;
-
-    int h = seed ^ buf.remaining();
-
-    while (buf.remaining() >= 4) {
-      int k = buf.getInt();
-
-      k *= m;
-      k ^= k >>> r;
-      k *= m;
-
-      h *= m;
-      h ^= k;
-    }
-
-    if (buf.remaining() > 0) {
-      ByteBuffer finish = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN);
-      // for big-endian version, use this first:
-      // finish.position(4-buf.remaining());
-      finish.put(buf).rewind();
-      h ^= finish.getInt();
-      h *= m;
-    }
-
-    h ^= h >>> 13;
-    h *= m;
-    h ^= h >>> 15;
-
-    buf.order(byteOrder);
-    return h;
-  }
-
-
-  public static long hash64A(byte[] data, int seed) {
-    return hash64A(ByteBuffer.wrap(data), seed);
-  }
-
-  public static long hash64A(byte[] data, int offset, int length, int seed) {
-    return hash64A(ByteBuffer.wrap(data, offset, length), seed);
-  }
-
-  public static long hash64A(ByteBuffer buf, int seed) {
-    ByteOrder byteOrder = buf.order();
-    buf.order(ByteOrder.LITTLE_ENDIAN);
-
-    long m = 0xc6a4a7935bd1e995L;
-    int r = 47;
-
-    long h = seed ^ (buf.remaining() * m);
-
-    while (buf.remaining() >= 8) {
-      long k = buf.getLong();
-
-      k *= m;
-      k ^= k >>> r;
-      k *= m;
-
-      h ^= k;
-      h *= m;
-    }
-
-    if (buf.remaining() > 0) {
-      ByteBuffer finish = ByteBuffer.allocate(8).order(ByteOrder.LITTLE_ENDIAN);
-      // for big-endian version, do this first:
-      // finish.position(8-buf.remaining());
-      finish.put(buf).rewind();
-      h ^= finish.getLong();
-      h *= m;
-    }
-
-    h ^= h >>> r;
-    h *= m;
-    h ^= h >>> r;
-
-    buf.order(byteOrder);
-    return h;
-  }
-
-}
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/encoders/MurmurHashTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/encoders/MurmurHashTest.java
index 71039d6a..e69de29b 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/encoders/MurmurHashTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/encoders/MurmurHashTest.java
@@ -1,119 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.vectorizer.encoders;
-
-import com.google.common.base.Charsets;
-import org.apache.mahout.common.MahoutTestCase;
-import org.junit.Test;
-
-import java.io.UnsupportedEncodingException;
-
-public class MurmurHashTest extends MahoutTestCase {
-  @Test
-  public void testForLotsOfChange64() throws UnsupportedEncodingException {
-    long h1 = MurmurHash.hash64A("abc".getBytes(Charsets.UTF_8), 0);
-    long h2 = MurmurHash.hash64A("abc ".getBytes(Charsets.UTF_8), 0);
-    int flipCount = Long.bitCount(h1 ^ h2);
-    assertTrue("Small changes should result in lots of bit flips, only found " + flipCount, flipCount > 25);
-  }
-
-  @Test
-  public void testHash64() {
-    // test data generated by running MurmurHash2_64.cpp
-    assertEquals(0x9cc9c33498a95efbL, MurmurHash.hash64A("abc".getBytes(Charsets.UTF_8), 0));
-    assertEquals(0xd2c8c9b470122bddL, MurmurHash.hash64A("abc def ghi jkl ".getBytes(Charsets.UTF_8), 0));
-    assertEquals(0xcd37895736a81cbcL, MurmurHash.hash64A("abc def ghi jkl moreGoo".getBytes(Charsets.UTF_8), 0));
-  }
-
-  @Test
-  public void testForLotsOfChange32() throws UnsupportedEncodingException {
-    int h1 = MurmurHash.hash("abc".getBytes(Charsets.UTF_8), 0);
-    int h2 = MurmurHash.hash("abc ".getBytes(Charsets.UTF_8), 0);
-    int flipCount = Integer.bitCount(h1 ^ h2);
-    assertTrue("Small changes should result in lots of bit flips, only found " + flipCount, flipCount > 14);
-  }
-
-  // tests lifted from http://dmy999.com/article/50/murmurhash-2-java-port
-  // code was marked with this notice:
-  // released to the public domain - dmy999@gmail.com
-
-  // expected values are generated from the output of a C driver that
-  // ran against the same input
-
-  @Test
-  public void testChangingSeed() {
-    // use a fixed key
-    byte[] key = {0x4E, (byte) 0xE3, (byte) 0x91, 0x00, 0x10, (byte) 0x8F, (byte) 0xFF};
-
-    int[] expected = {0xeef8be32, 0x8109dec6, 0x9aaf4192, 0xc1bcaf1c,
-      0x821d2ce4, 0xd45ed1df, 0x6c0357a7, 0x21d4e845,
-      0xfa97db50, 0x2f1985c8, 0x5d69782a, 0x0d6e4b85,
-      0xe7d9cf6b, 0x337e6b49, 0xe1606944, 0xccc18ae8};
-
-    for (int i = 0; i < expected.length; i++) {
-      int expectedHash = expected[i];
-      int hash = MurmurHash.hash(key, i);
-      assertEquals("i = " + i, expectedHash, hash);
-    }
-  }
-
-  @Test
-  public void testChangingKey() {
-    byte[] key = new byte[133];
-
-    int[] expected = {0xd743ae0b, 0xf1b461c6, 0xa45a6ceb, 0xdb15e003,
-      0x877721a4, 0xc30465f1, 0xfb658ba4, 0x1adf93b2,
-      0xe40a7931, 0x3da52db0, 0xbf523511, 0x1efaf273,
-      0xe628c1dd, 0x9a0344df, 0x901c99fc, 0x5ae1aa44};
-    for (int i = 0; i < 16; i++) {
-      // keep seed constant, generate a known key pattern
-      setKey(key, i);
-      int expectedHash = expected[i];
-      int hash = MurmurHash.hash(key, 0x1234ABCD);
-      assertEquals("i = " + i, expectedHash, hash);
-    }
-  }
-
-  @Test
-  public void testChangingKeyLength() {
-    int[] expected = {0xa0c72f8e, 0x29c2f97e, 0x00ca8bba, 0x88387876,
-      0xe203ce49, 0x58d75952, 0xab84febe, 0x98153c65,
-      0xcbb38375, 0x6ea1a28b, 0x9afa8f55, 0xfb890eb6,
-      0x9516cc49, 0x6408a8eb, 0xbb12d3e6, 0x00fb7519};
-    // vary the key and the length
-    for (int i = 0; i < 16; i++) {
-      byte[] key = new byte[i];
-      setKey(key, i);
-      int expectedHash = expected[i];
-      int hash = MurmurHash.hash(key, 0x7870AAFF);
-      assertEquals("i = " + i, expectedHash, hash);
-    }
-  }
-
-  /**
-   * Fill a key with a known pattern (incrementing numbers)
-   */
-  private static void setKey(byte[] key, int start) {
-    for (int i = 0; i < key.length; i++) {
-      key[i] = (byte) ((start + i) & 0xFF);
-    }
-  }
-
-
-}
-
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash.java
index e69de29b..0b3fab06 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash.java
@@ -0,0 +1,147 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.math;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+/**
+ * This is a very fast, non-cryptographic hash suitable for general hash-based
+ * lookup.  See http://murmurhash.googlepages.com/ for more details.
+ * <p/>
+ * <p>The C version of MurmurHash 2.0 found at that site was ported
+ * to Java by Andrzej Bialecki (ab at getopt org).</p>
+ */
+public final class MurmurHash {
+
+  private MurmurHash() {
+  }
+
+  /**
+   * Hashes bytes in an array.
+   * @param data The bytes to hash.
+   * @param seed The seed for the hash.
+   * @return The 32 bit hash of the bytes in question.
+   */
+  public static int hash(byte[] data, int seed) {
+    return hash(ByteBuffer.wrap(data), seed);
+  }
+
+  /**
+   * Hashes bytes in part of an array.
+   * @param data    The data to hash.
+   * @param offset  Where to start munging.
+   * @param length  How many bytes to process.
+   * @param seed    The seed to start with.
+   * @return        The 32-bit hash of the data in question.
+   */
+  public static int hash(byte[] data, int offset, int length, int seed) {
+    return hash(ByteBuffer.wrap(data, offset, length), seed);
+  }
+
+  /**
+   * Hashes the bytes in a buffer from the current position to the limit.
+   * @param buf    The bytes to hash.
+   * @param seed   The seed for the hash.
+   * @return       The 32 bit murmur hash of the bytes in the buffer.
+   */
+  public static int hash(ByteBuffer buf, int seed) {
+    // save byte order for later restoration
+    ByteOrder byteOrder = buf.order();
+    buf.order(ByteOrder.LITTLE_ENDIAN);
+
+    int m = 0x5bd1e995;
+    int r = 24;
+
+    int h = seed ^ buf.remaining();
+
+    while (buf.remaining() >= 4) {
+      int k = buf.getInt();
+
+      k *= m;
+      k ^= k >>> r;
+      k *= m;
+
+      h *= m;
+      h ^= k;
+    }
+
+    if (buf.remaining() > 0) {
+      ByteBuffer finish = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN);
+      // for big-endian version, use this first:
+      // finish.position(4-buf.remaining());
+      finish.put(buf).rewind();
+      h ^= finish.getInt();
+      h *= m;
+    }
+
+    h ^= h >>> 13;
+    h *= m;
+    h ^= h >>> 15;
+
+    buf.order(byteOrder);
+    return h;
+  }
+
+
+  public static long hash64A(byte[] data, int seed) {
+    return hash64A(ByteBuffer.wrap(data), seed);
+  }
+
+  public static long hash64A(byte[] data, int offset, int length, int seed) {
+    return hash64A(ByteBuffer.wrap(data, offset, length), seed);
+  }
+
+  public static long hash64A(ByteBuffer buf, int seed) {
+    ByteOrder byteOrder = buf.order();
+    buf.order(ByteOrder.LITTLE_ENDIAN);
+
+    long m = 0xc6a4a7935bd1e995L;
+    int r = 47;
+
+    long h = seed ^ (buf.remaining() * m);
+
+    while (buf.remaining() >= 8) {
+      long k = buf.getLong();
+
+      k *= m;
+      k ^= k >>> r;
+      k *= m;
+
+      h ^= k;
+      h *= m;
+    }
+
+    if (buf.remaining() > 0) {
+      ByteBuffer finish = ByteBuffer.allocate(8).order(ByteOrder.LITTLE_ENDIAN);
+      // for big-endian version, do this first:
+      // finish.position(8-buf.remaining());
+      finish.put(buf).rewind();
+      h ^= finish.getLong();
+      h *= m;
+    }
+
+    h ^= h >>> r;
+    h *= m;
+    h ^= h >>> r;
+
+    buf.order(byteOrder);
+    return h;
+  }
+
+}
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/MurmurHashTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/MurmurHashTest.java
index e69de29b..e758f8ae 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/MurmurHashTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/MurmurHashTest.java
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.math;
+
+import com.google.common.base.Charsets;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.io.UnsupportedEncodingException;
+
+public class MurmurHashTest extends org.apache.mahout.math.MahoutTestCase {
+
+  @Test
+  public void testForLotsOfChange64() throws UnsupportedEncodingException {
+    long h1 = MurmurHash.hash64A("abc".getBytes(Charsets.UTF_8), 0);
+    long h2 = MurmurHash.hash64A("abc ".getBytes(Charsets.UTF_8), 0);
+    int flipCount = Long.bitCount(h1 ^ h2);
+    Assert.assertTrue("Small changes should result in lots of bit flips, only found " + flipCount, flipCount > 25);
+  }
+
+  @Test
+  public void testHash64() {
+    // test data generated by running MurmurHash2_64.cpp
+    Assert.assertEquals(0x9cc9c33498a95efbL, MurmurHash.hash64A("abc".getBytes(Charsets.UTF_8), 0));
+    Assert.assertEquals(0xd2c8c9b470122bddL, MurmurHash.hash64A("abc def ghi jkl ".getBytes(Charsets.UTF_8), 0));
+    Assert.assertEquals(0xcd37895736a81cbcL, MurmurHash.hash64A("abc def ghi jkl moreGoo".getBytes(Charsets.UTF_8), 0));
+  }
+
+  @Test
+  public void testForLotsOfChange32() throws UnsupportedEncodingException {
+    int h1 = MurmurHash.hash("abc".getBytes(Charsets.UTF_8), 0);
+    int h2 = MurmurHash.hash("abc ".getBytes(Charsets.UTF_8), 0);
+    int flipCount = Integer.bitCount(h1 ^ h2);
+    Assert.assertTrue("Small changes should result in lots of bit flips, only found " + flipCount, flipCount > 14);
+  }
+
+  // tests lifted from http://dmy999.com/article/50/murmurhash-2-java-port
+  // code was marked with this notice:
+  // released to the public domain - dmy999@gmail.com
+
+  // expected values are generated from the output of a C driver that
+  // ran against the same input
+
+  @Test
+  public void testChangingSeed() {
+    // use a fixed key
+    byte[] key = {0x4E, (byte) 0xE3, (byte) 0x91, 0x00, 0x10, (byte) 0x8F, (byte) 0xFF};
+
+    int[] expected = {0xeef8be32, 0x8109dec6, 0x9aaf4192, 0xc1bcaf1c,
+      0x821d2ce4, 0xd45ed1df, 0x6c0357a7, 0x21d4e845,
+      0xfa97db50, 0x2f1985c8, 0x5d69782a, 0x0d6e4b85,
+      0xe7d9cf6b, 0x337e6b49, 0xe1606944, 0xccc18ae8};
+
+    for (int i = 0; i < expected.length; i++) {
+      int expectedHash = expected[i];
+      int hash = MurmurHash.hash(key, i);
+      Assert.assertEquals("i = " + i, expectedHash, hash);
+    }
+  }
+
+  @Test
+  public void testChangingKey() {
+    byte[] key = new byte[133];
+
+    int[] expected = {0xd743ae0b, 0xf1b461c6, 0xa45a6ceb, 0xdb15e003,
+      0x877721a4, 0xc30465f1, 0xfb658ba4, 0x1adf93b2,
+      0xe40a7931, 0x3da52db0, 0xbf523511, 0x1efaf273,
+      0xe628c1dd, 0x9a0344df, 0x901c99fc, 0x5ae1aa44};
+    for (int i = 0; i < 16; i++) {
+      // keep seed constant, generate a known key pattern
+      setKey(key, i);
+      int expectedHash = expected[i];
+      int hash = MurmurHash.hash(key, 0x1234ABCD);
+      Assert.assertEquals("i = " + i, expectedHash, hash);
+    }
+  }
+
+  @Test
+  public void testChangingKeyLength() {
+    int[] expected = {0xa0c72f8e, 0x29c2f97e, 0x00ca8bba, 0x88387876,
+      0xe203ce49, 0x58d75952, 0xab84febe, 0x98153c65,
+      0xcbb38375, 0x6ea1a28b, 0x9afa8f55, 0xfb890eb6,
+      0x9516cc49, 0x6408a8eb, 0xbb12d3e6, 0x00fb7519};
+    // vary the key and the length
+    for (int i = 0; i < 16; i++) {
+      byte[] key = new byte[i];
+      setKey(key, i);
+      int expectedHash = expected[i];
+      int hash = MurmurHash.hash(key, 0x7870AAFF);
+      Assert.assertEquals("i = " + i, expectedHash, hash);
+    }
+  }
+
+  /**
+   * Fill a key with a known pattern (incrementing numbers)
+   */
+  private static void setKey(byte[] key, int start) {
+    for (int i = 0; i < key.length; i++) {
+      key[i] = (byte) ((start + i) & 0xFF);
+    }
+  }
+
+
+}
+
