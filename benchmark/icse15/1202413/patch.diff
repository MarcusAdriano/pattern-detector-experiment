diff --git a/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java b/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
index ada2d33c..9162a936 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
@@ -901,6 +901,7 @@ public void testExceptionsDuringCommit() throws Throwable {
     
     for (FailOnlyInCommit failure : failures) {
       MockDirectoryWrapper dir = newDirectory();
+      dir.setFailOnCreateOutput(false);
       IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(
           TEST_VERSION_CURRENT, new MockAnalyzer(random)));
       Document doc = new Document();
@@ -1302,20 +1303,17 @@ public FailOnTermVectors(String stage) {
 
     @Override
     public void eval(MockDirectoryWrapper dir)  throws IOException {
+
       StackTraceElement[] trace = new Exception().getStackTrace();
-      boolean failOnInit = false;
-      boolean failOnfinish = false;
+      boolean fail = false;
       for (int i = 0; i < trace.length; i++) {
-        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))
-          failOnInit = true;
-        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))
-          failOnfinish = true;
+        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {
+          fail = true;
+        }
       }
       
-      if (failOnInit) {
-        throw new RuntimeException(EXC_MSG + " fail on init");
-      } else if (failOnfinish) {
-        throw new RuntimeException(EXC_MSG + " fail on finishDoc");
+      if (fail) {
+        throw new RuntimeException(EXC_MSG);
       }
     }
   }
diff --git a/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestTransactions.java b/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestTransactions.java
index 0be1cb7d..5f848200 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestTransactions.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/test/org/apache/lucene/index/TestTransactions.java
@@ -211,6 +211,8 @@ public void testTransactions() throws Throwable {
     dir2.setPreventDoubleWrite(false);
     dir1.failOn(new RandomFailure());
     dir2.failOn(new RandomFailure());
+    dir1.setFailOnOpenInput(false);
+    dir2.setFailOnOpenInput(false);
 
     initIndex(dir1);
     initIndex(dir2);
diff --git a/lucene/dev/branches/lucene2621/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java b/lucene/dev/branches/lucene2621/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java
index 55b67249..fab1000e 100644
--- a/lucene/dev/branches/lucene2621/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java
+++ b/lucene/dev/branches/lucene2621/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java
@@ -149,7 +149,6 @@ public void setThrottling(Throttling throttling) {
   @Override
   public synchronized void sync(Collection<String> names) throws IOException {
     maybeYield();
-    for (String name : names)
       maybeThrowDeterministicException();
     if (crashed)
       throw new IOException("cannot sync after crash");
@@ -349,9 +348,18 @@ private synchronized void deleteFile(String name, boolean forced) throws IOExcep
     return new HashSet<String>(openFilesDeleted);
   }
 
+  private boolean failOnCreateOutput = true;
+
+  public void setFailOnCreateOutput(boolean v) {
+    failOnCreateOutput = v;
+  }
+  
   @Override
   public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {
     maybeYield();
+    if (failOnCreateOutput) {
+      maybeThrowDeterministicException();
+    }
     if (crashed)
       throw new IOException("cannot createOutput after crash");
     init();
@@ -417,9 +425,18 @@ synchronized void addFileHandle(Closeable c, String name, Handle handle) {
     openFileHandles.put(c, new RuntimeException("unclosed Index" + handle.name() + ": " + name));
   }
   
+  private boolean failOnOpenInput = true;
+
+  public void setFailOnOpenInput(boolean v) {
+    failOnOpenInput = v;
+  }
+
   @Override
   public synchronized IndexInput openInput(String name, IOContext context) throws IOException {
     maybeYield();
+    if (failOnOpenInput) {
+      maybeThrowDeterministicException();
+    }
     if (!delegate.fileExists(name))
       throw new FileNotFoundException(name);
 
