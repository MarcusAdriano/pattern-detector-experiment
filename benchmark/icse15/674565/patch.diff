diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index b272a90a..d16ad169 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -72,14 +72,44 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Locale;
 import java.util.Calendar;
 
+
+
+
 /**
- * SQLChar represents a CHAR value with UCS_BASIC collation.
- * SQLChar may be used directly by any code when it is guaranteed
- * that the required collation is UCS_BASIC, e.g. system columns.
- */
+
+The SQLChar represents a CHAR value with UCS_BASIC collation.
+SQLChar may be used directly by any code when it is guaranteed
+that the required collation is UCS_BASIC, e.g. system columns.
+<p>
+The state may be in char[], a String, or an unread stream, depending
+on how the datatype was created.  
+<p>
+Stream notes:
+<p>
+When the datatype comes from the database layer and the length of the bytes
+necessary to store the datatype on disk exceeds the size of a page of the
+container holding the data then the store returns a stream rather than reading
+all the bytes into a char[] or String.  The hope is that the usual usage case
+is that data never need be expanded in the derby layer, and that client can
+just be given a stream that can be read a char at a time through the jdbc
+layer.  Even though SQLchar's can't ever be this big, this code is shared
+by all the various character datatypes including SQLClob which is expected
+to usually larger than a page.
+<p>
+The state can also be a stream in the case of insert/update where the client
+has used a jdbc interface to set the value as a stream rather than char[].  
+In this case the hope is that the usual usage case is that stream never need
+be read until it is passed to store, read once, and inserted into the database.
+
+**/
+
 public class SQLChar
 	extends DataType implements StringDataValue, StreamStorable
 {
+    /**************************************************************************
+     * static fields of the class
+     **************************************************************************
+     */
 
     /**
      * threshold, that decides when we return space back to the VM
@@ -93,6 +123,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * instead this amount is used to provide a reasonable growby size.
      */
     private final static int GROWBY_FOR_CHAR = 64;
+
+
+    private static final int BASE_MEMORY_USAGE = 
+        ClassSize.estimateBaseFromCatalog( SQLChar.class);
+
 	/**
 		Static array that can be used for blank padding.
 	*/
@@ -103,9 +138,66 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		}
 	}
 
-	private static void appendBlanks(char[] ca, int offset, int howMany) {
-		while (howMany > 0) {
+    /**************************************************************************
+     * Fields of the class
+     **************************************************************************
+     */
+
+    /*
+     * object state
+     */
+
+    // Don't use value directly in most situations. Use getString()
+    // OR use the rawData array if rawLength != -1.
+    private     String  value;
+
+    // rawData holds the reusable array for reading in SQLChars. It contains a
+    // valid value if rawLength is greater than or equal to 0. See getString() 
+    // to see how it is converted to a String. Even when converted to a String
+    // object the rawData array remains for potential future use, unless 
+    // rawLength is > 4096. In this case the rawData is set to null to avoid
+    // huge memory use.
+    private     char[]  rawData;
+    private     int     rawLength = -1;
+
+    // For null strings, cKey = null.
+    private CollationKey cKey; 
+
+    /**
+     * The value as a stream in the on-disk format.
+     */
+    InputStream stream;
+
+    /* Locale info (for International support) */
+    private LocaleFinder localeFinder;
+
+
+    /**************************************************************************
+     * Constructors for This class:
+     **************************************************************************
+     */
+
+    /**
+     * no-arg constructor, required by Formattable.
+     **/
+    public SQLChar()
+    {
+    }
+
+    public SQLChar(String val)
+    {
+        value = val;
+    }
 
+    /**************************************************************************
+     * Private/Protected methods of This class:
+     **************************************************************************
+     */
+
+    private static void appendBlanks(char[] ca, int offset, int howMany) 
+    {
+        while (howMany > 0) 
+        {
 			int count = howMany > BLANKS.length ? BLANKS.length : howMany;
 
 			System.arraycopy(BLANKS, 0, ca, offset, count);
@@ -113,25 +205,40 @@ private static void appendBlanks(char[] ca, int offset, int howMany) {
 			offset += count;
 		}
 	}
-	/*
-	 * DataValueDescriptor interface
-	 * (mostly implemented in DataType)
-	 * casts to the
-	 * numeric and date/time types as well, "for valid strings"
+
+    /**************************************************************************
+     * Public Methods of This class:
+     **************************************************************************
+     */
+
+    /**************************************************************************
+     * Public Methods of DataValueDescriptor interface:
+     *     Mostly implemented in Datatype.
+     **************************************************************************
 	 */
 
 	/**
+     * Get Boolean from a SQLChar.
+     *
+     * <p>
+     * Return false for only "0" or "false" for false. No case insensitivity. 
+     * Everything else is true.
+     * <p>
+     * The above matches JCC.
+     *
+     *
 	 * @see DataValueDescriptor#getBoolean
 	 *
 	 * @exception StandardException		Thrown on error
-	 */
+     **/
 	public boolean getBoolean()
 		throws StandardException
 	{
-		if (isNull()) return false;
+        if (isNull()) 
+            return false;
 
-		// match JCC, match only "0" or "false" for false. No case insensitivity.
-		// everything else is true.
+        // match JCC, match only "0" or "false" for false. No case 
+        // insensitivity. everything else is true.
 
 		String cleanedValue = getString().trim();
 
@@ -139,126 +246,221 @@ public boolean getBoolean()
 	}
 
 	/**
+     * Get Byte from a SQLChar.
+     *
+     * <p>
+     * Uses java standard Byte.parseByte() to perform coercion.
+     *
 	 * @see DataValueDescriptor#getByte
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public byte	getByte() throws StandardException
 	{
-		if (isNull()) return (byte)0;
-		try {
+        if (isNull()) 
+            return (byte)0;
+
+        try 
+        {
 			return Byte.parseByte(getString().trim());
-		} catch (NumberFormatException nfe) {
-			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, "byte");
+        } 
+        catch (NumberFormatException nfe) 
+        {
+            throw StandardException.newException(
+                    SQLState.LANG_FORMAT_EXCEPTION, "byte");
 		}
 	}
 
 	/**
+     * Get Short from a SQLChar.
+     *
+     * <p>
+     * Uses java standard Short.parseShort() to perform coercion.
+     *
 	 * @see DataValueDescriptor#getShort
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public short	getShort() throws StandardException
 	{
-		if (isNull()) return (short)0;
-		try {
+        if (isNull()) 
+            return (short)0;
+
+        try 
+        {
 			return Short.parseShort(getString().trim());
-		} catch (NumberFormatException nfe) {
-			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, "short");
+
+        } 
+        catch (NumberFormatException nfe) 
+        {
+            throw StandardException.newException(
+                    SQLState.LANG_FORMAT_EXCEPTION, "short");
 		}
 	}
 
 	/**
+     * Get int from a SQLChar.
+     *
+     * <p>
+     * Uses java standard Short.parseInt() to perform coercion.
+     *
 	 * @see DataValueDescriptor#getInt
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public int	getInt() throws StandardException
 	{
-		if (isNull()) return 0;
-		try {
+        if (isNull()) 
+            return 0;
+
+        try 
+        {
 			return Integer.parseInt(getString().trim());
-		} catch (NumberFormatException nfe) {
-			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, "int");
+        } 
+        catch (NumberFormatException nfe) 
+        {
+            throw StandardException.newException(
+                    SQLState.LANG_FORMAT_EXCEPTION, "int");
 		}
 	}
 
 	/**
+     * Get long from a SQLChar.
+     *
+     * <p>
+     * Uses java standard Short.parseLong() to perform coercion.
+     *
 	 * @see DataValueDescriptor#getLong
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public long	getLong() throws StandardException
 	{
-		if (isNull()) return 0;
-		try {
+        if (isNull()) 
+            return 0;
+
+        try 
+        {
 			return Long.parseLong(getString().trim());
-		} catch (NumberFormatException nfe) {
-			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, "long");
+
+        } 
+        catch (NumberFormatException nfe) 
+        {
+            throw StandardException.newException(
+                    SQLState.LANG_FORMAT_EXCEPTION, "long");
 		}
 	}
 
 	/**
+     * Get float from a SQLChar.
+     *
+     * <p>
+     * Uses java standard Float.floatValue() to perform coercion.
+     *
 	 * @see DataValueDescriptor#getFloat
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public float	getFloat() throws StandardException
 	{
-		if (isNull()) return 0;
-		try {
+        if (isNull()) 
+            return 0;
+
+        try 
+        {
 			return new Float(getString().trim()).floatValue();
-		} catch (NumberFormatException nfe) {
-			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, "float");
+        } 
+        catch (NumberFormatException nfe) 
+        {
+            throw StandardException.newException(
+                    SQLState.LANG_FORMAT_EXCEPTION, "float");
 		}
 	}
 
 	/**
+     * Get double from a SQLChar.
+     *
+     * <p>
+     * Uses java standard Double.doubleValue() to perform coercion.
+     *
 	 * @see DataValueDescriptor#getDouble
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public double	getDouble() throws StandardException
 	{
-		if (isNull()) return 0;
-		try {
+        if (isNull()) 
+            return 0;
+
+        try 
+        {
 			return new Double(getString().trim()).doubleValue();
-		} catch (NumberFormatException nfe) {
-			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, "double");
-		}
 	}
-
-	/**
-	 * CHAR/VARCHAR/LONG VARCHAR implementation. Convert to a BigDecimal using getString.
-	 */
-	public int typeToBigDecimal()  throws StandardException
+        catch (NumberFormatException nfe) 
 	{
-		return java.sql.Types.CHAR;
+            throw StandardException.newException(
+                    SQLState.LANG_FORMAT_EXCEPTION, "double");
+        }
 	}
+
 	/**
+     * Get date from a SQLChar.
+     *
 	 * @see DataValueDescriptor#getDate
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
-	public Date	getDate( Calendar cal) throws StandardException
+     **/
+    public Date getDate(Calendar cal) 
+        throws StandardException
 	{
-        return getDate( cal, getString(), getLocaleFinder());
+        return getDate(cal, getString(), getLocaleFinder());
 	}
 
-    public static Date getDate(java.util.Calendar cal, String str, LocaleFinder localeFinder) throws StandardException
+    /**
+     * Static function to Get date from a string.
+     *
+     * @see DataValueDescriptor#getDate
+     *
+     * @exception StandardException thrown on failure to convert
+     **/
+    public static Date getDate(
+    java.util.Calendar  cal, 
+    String              str, 
+    LocaleFinder        localeFinder) 
+        throws StandardException
     {
         if( str == null)
             return null;
-        SQLDate internalDate = new SQLDate( str, false, localeFinder);
-        return internalDate.getDate( cal);
+
+        SQLDate internalDate = new SQLDate(str, false, localeFinder);
+
+        return internalDate.getDate(cal);
     }
 
 	/**
+     * Get time from a SQLChar.
+     *
 	 * @see DataValueDescriptor#getTime
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public Time	getTime(Calendar cal) throws StandardException
 	{
 		return getTime( cal, getString(), getLocaleFinder());
 	}
 
 	/**
+     * Static function to Get Time from a string.
+     *
+     * @see DataValueDescriptor#getTime
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
-	public static Time getTime( Calendar cal, String str, LocaleFinder localeFinder) throws StandardException
+     **/
+    public static Time getTime(
+    Calendar        cal, 
+    String          str, 
+    LocaleFinder    localeFinder) 
+        throws StandardException
 	{
         if( str == null)
             return null;
@@ -267,27 +469,65 @@ public static Time getTime( Calendar cal, String str, LocaleFinder localeFinder)
 	}
 
 	/**
+     * Get Timestamp from a SQLChar.
+     *
 	 * @see DataValueDescriptor#getTimestamp
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
+     **/
 	public Timestamp getTimestamp( Calendar cal) throws StandardException
 	{
 		return getTimestamp( cal, getString(), getLocaleFinder());
 	}
 
 	/**
+     * Static function to Get Timestamp from a string.
+     *
 	 * @see DataValueDescriptor#getTimestamp
+     *
 	 * @exception StandardException thrown on failure to convert
-	 */
-	public static Timestamp	getTimestamp(java.util.Calendar cal, String str, LocaleFinder localeFinder)
+     **/
+    public static Timestamp getTimestamp(
+    java.util.Calendar  cal, 
+    String              str, 
+    LocaleFinder        localeFinder)
         throws StandardException
 	{
         if( str == null)
             return null;
-        SQLTimestamp internalTimestamp = new SQLTimestamp( str, false, localeFinder, cal);
+
+        SQLTimestamp internalTimestamp = 
+            new SQLTimestamp( str, false, localeFinder, cal);
+
         return internalTimestamp.getTimestamp( cal);
 	}
 
+    /**************************************************************************
+     * Public Methods of StreamStorable interface:
+     **************************************************************************
+     */
+    public InputStream returnStream()
+    {
+        return stream;
+    }
+
+    /**
+     * Set this value to the on-disk format stream.
+     */
+    public final void setStream(InputStream newStream)
+    {
+        this.value = null;
+        this.rawLength = -1;
+        this.stream = newStream;
+        cKey = null;
+    }
+
+    public void loadStream() throws StandardException
+    {
+        getString();
+    }
+
+
 	/**
 	 * @exception StandardException		Thrown on error
 	 */
@@ -303,6 +543,14 @@ public InputStream	getStream() throws StandardException
 	{
 		return stream;
 	}
+    /**
+     * CHAR/VARCHAR/LONG VARCHAR implementation. 
+     * Convert to a BigDecimal using getString.
+     */
+    public int typeToBigDecimal()  throws StandardException
+    {
+        return java.sql.Types.CHAR;
+    }
 
 	/**
 	 * @exception StandardException		Thrown on error
@@ -414,29 +662,6 @@ else if (rawLength != -1)
 		}
 	}
 
-	/*
-	 * StreamStorable interface : 
-	 */
-	public InputStream returnStream()
-	{
-		return stream;
-	}
-
-    /**
-     * Set this value to the on-disk format stream.
-     */
-	public final void setStream(InputStream newStream)
-	{
-		this.value = null;
-		this.rawLength = -1;
-		this.stream = newStream;
-		cKey = null;
-	}
-
-	public void loadStream() throws StandardException
-	{
-		getString();
-	}
 
 	/*
 	 * Storable interface, implies Externalizable, TypedFormat
@@ -889,9 +1114,10 @@ public int compare(DataValueDescriptor other) throws StandardException
 	 */
 
 	/** From CloneableObject
-	 *	Shallow clone a StreamStorable without objectifying.  This is used to avoid
-	 *	unnecessary objectifying of a stream object.  The only difference of this method
-	 *  from getClone is this method does not objectify a stream.  beetle 4896
+     *  Shallow clone a StreamStorable without objectifying.  This is used to 
+     *  avoid unnecessary objectifying of a stream object.  The only 
+     *  difference of this method from getClone is this method does not 
+     *  objectify a stream.
 	 */
 	public Object cloneObject()
 	{
@@ -960,31 +1186,15 @@ public final void setValueFromResultSet(ResultSet resultSet, int colNumber,
 	/**
 		Set the value into a PreparedStatement.
 	*/
-	public final void setInto(PreparedStatement ps, int position) throws SQLException, StandardException {
-
+    public final void setInto(
+    PreparedStatement   ps, 
+    int                 position) 
+        throws SQLException, StandardException 
+    {
 		ps.setString(position, getString());
 	}
 
 
-	/*
-	 * class interface
-	 */
-
-	/*
-	 * constructors
-	 */
-
-	/**
-		no-arg constructor, required by Formattable.
-	*/
-	public SQLChar()
-	{
-	}
-
-	public SQLChar(String val)
-	{
-		value = val;
-	}
 
 	public void setValue(String theValue)
 	{
@@ -1123,7 +1333,10 @@ public void setValue(Time theValue, Calendar cal) throws StandardException
 	}
 
 	/** @exception StandardException		Thrown on error */
-	public void setValue(Timestamp theValue, Calendar cal) throws StandardException
+    public void setValue(
+    Timestamp   theValue, 
+    Calendar    cal) 
+        throws StandardException
 	{
         String strValue = null;
         if( theValue != null)
@@ -1137,17 +1350,28 @@ public void setValue(Timestamp theValue, Calendar cal) throws StandardException
                 formatJDBCDate( cal, sb);
                 sb.append( ' ');
                 formatJDBCTime( cal, sb);
-                int micros = (theValue.getNanos() + SQLTimestamp.FRACTION_TO_NANO/2)/SQLTimestamp.FRACTION_TO_NANO;
+                int micros = 
+                    (theValue.getNanos() + SQLTimestamp.FRACTION_TO_NANO/2) / 
+                        SQLTimestamp.FRACTION_TO_NANO;
+
                 if( micros > 0)
                 {
                     sb.append( '.');
                     String microsStr = Integer.toString( micros);
-                    if( microsStr.length() > SQLTimestamp.MAX_FRACTION_DIGITS)
-                        sb.append( microsStr.substring( 0, SQLTimestamp.MAX_FRACTION_DIGITS));
+                    if(microsStr.length() > SQLTimestamp.MAX_FRACTION_DIGITS)
+                    {
+                        sb.append(
+                            microsStr.substring(
+                                0, SQLTimestamp.MAX_FRACTION_DIGITS));
+                    }
                     else
                     {
-                        for( int i = microsStr.length(); i < SQLTimestamp.MAX_FRACTION_DIGITS ; i++)
+                        for(int i = microsStr.length(); 
+                            i < SQLTimestamp.MAX_FRACTION_DIGITS ; i++)
+                        {
                             sb.append( '0');
+                        }
+
                         sb.append( microsStr);
                     }
                 }
@@ -1167,7 +1391,11 @@ private void formatJDBCDate( Calendar cal, StringBuffer sb)
 
     private void formatJDBCTime( Calendar cal, StringBuffer sb)
     {
-        SQLTime.timeToString( cal.get( Calendar.HOUR), cal.get( Calendar.MINUTE), cal.get( Calendar.SECOND), sb);
+        SQLTime.timeToString(
+            cal.get(Calendar.HOUR), 
+            cal.get(Calendar.MINUTE), 
+            cal.get(Calendar.SECOND), 
+            sb);
     }
 
     /**
@@ -1188,9 +1416,12 @@ public final void setValue(InputStream theStream, int valueLength)
 	 * @exception StandardException
 	 *                thrown on failure
 	 */
-	public void setObjectForCast(Object theValue, boolean instanceOfResultType,
-			String resultTypeClassName) throws StandardException {
-		
+    public void setObjectForCast(
+    Object  theValue, 
+    boolean instanceOfResultType,
+    String  resultTypeClassName) 
+        throws StandardException 
+    {
 		if (theValue == null)
 		{
 			setToNull();
@@ -1200,11 +1431,13 @@ public void setObjectForCast(Object theValue, boolean instanceOfResultType,
 		if ("java.lang.String".equals(resultTypeClassName))
 		    setValue(theValue.toString());
 		else
-			super.setObjectForCast(theValue, instanceOfResultType, resultTypeClassName);
+            super.setObjectForCast(
+                theValue, instanceOfResultType, resultTypeClassName);
 	}
 	
-	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
-
+    protected void setFrom(DataValueDescriptor theValue) 
+        throws StandardException 
+    {
 		setValue(theValue.getString());
 	}
 
@@ -1300,7 +1533,11 @@ protected final void hasNonBlankChars(String source, int start, int end)
 		{
 			if (source.charAt(posn) != ' ')
 			{
-				throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, getTypeName(), StringUtil.formatForPrint(source), String.valueOf(start));
+                throw StandardException.newException(
+                    SQLState.LANG_STRING_TRUNCATION, 
+                    getTypeName(), 
+                    StringUtil.formatForPrint(source), 
+                    String.valueOf(start));
 			}
 		}
 	}
@@ -1639,7 +1876,9 @@ public StringDataValue concatenate(
 			return result;
 		}
 
-		result.setValue(leftOperand.getString().concat(rightOperand.getString()));
+        result.setValue(
+                leftOperand.getString().concat(rightOperand.getString()));
+
 		return result;
 	}
 
@@ -1721,7 +1960,8 @@ public BooleanDataValue like(
 
 		if (escapeCharArray != null && escapeLength != 1 )
 		{
-			throw StandardException.newException(SQLState.LANG_INVALID_ESCAPE_CHARACTER,
+            throw StandardException.newException(
+                    SQLState.LANG_INVALID_ESCAPE_CHARACTER,
 					new String(escapeCharArray));
 		}
 		likeResult = Like.like(evalCharArray, 
@@ -1829,11 +2069,13 @@ public ConcatableDataValue substring(
 
 		stringResult = (StringDataValue) result;
 
-		/* The result is null if the receiver (this) is null or if the length is negative.
+        /* The result is null if the receiver (this) is null or if the length 
+         * is negative.
 		 * We will return null, which is the only sensible thing to do.
-		 * (If the user did not specify a length then length is not a user null.)
+         * (If user did not specify a length then length is not a user null.)
 		 */
-		if (this.isNull() || start.isNull() || (length != null && length.isNull()))
+        if (this.isNull() || start.isNull() || 
+                (length != null && length.isNull()))
 		{
 			stringResult.setToNull();
 			return stringResult;
@@ -1848,13 +2090,17 @@ public ConcatableDataValue substring(
 		}
 		else lengthInt = maxLen - startInt + 1;
 
-		/* DB2 Compatibility: Added these checks to match DB2. We currently enforce these
-		 * limits in both modes. We could do these checks in DB2 mode only, if needed, so
-		 * leaving earlier code for out of range in for now, though will not be exercised
+        /* DB2 Compatibility: Added these checks to match DB2. We currently 
+         * enforce these limits in both modes. We could do these checks in DB2 
+         * mode only, if needed, so leaving earlier code for out of range in 
+         * for now, though will not be exercised
 		 */
 		if ((startInt <= 0 || lengthInt < 0 || startInt > maxLen ||
 				lengthInt > maxLen - startInt + 1))
-			throw StandardException.newException(SQLState.LANG_SUBSTR_START_OR_LEN_OUT_OF_RANGE);
+        {
+            throw StandardException.newException(
+                    SQLState.LANG_SUBSTR_START_OR_LEN_OUT_OF_RANGE);
+        }
 			
 		// Return null if length is non-positive
 		if (lengthInt < 0)
@@ -1907,7 +2153,8 @@ else if (startInt > 0)
 		}
 		else
 		{
-			stringResult.setValue(getString().substring(startInt, startInt + lengthInt));
+            stringResult.setValue(
+                getString().substring(startInt, startInt + lengthInt));
 		}
 
 		return stringResult;
@@ -1961,8 +2208,12 @@ private String trimInternal(int trimType, char trimChar, String source)
 	 *
 	 * @return A StringDataValue containing the result of the trim.
 	 */
-	public StringDataValue ansiTrim(int trimType, StringDataValue trimChar, StringDataValue result)
-			throws StandardException {
+    public StringDataValue ansiTrim(
+    int             trimType, 
+    StringDataValue trimChar, 
+    StringDataValue result)
+            throws StandardException 
+    {
 
 		if (result == null)
 		{
@@ -1978,7 +2229,8 @@ public StringDataValue ansiTrim(int trimType, StringDataValue trimChar, StringDa
 
 		if (trimChar.getString().length() != 1)
 		{
-			throw StandardException.newException(SQLState.LANG_INVALID_TRIM_CHARACTER, trimChar.getString());			
+            throw StandardException.newException(
+                    SQLState.LANG_INVALID_TRIM_CHARACTER, trimChar.getString());           
 		}
 
 		char trimCharacter = trimChar.getString().charAt(0);
@@ -2121,7 +2373,8 @@ protected static int stringCompare(String op1, String op2)
 			** Remaining characters are on the left.
 			*/
 
-			/* If a remaining character is less than a space, return -1 (op1 < op2) */
+            /* If a remaining character is less than a space, 
+             * return -1 (op1 < op2) */
 			retvalIfLTSpace = -1;
 			remainingString = op1;
 			posn = rightlen;
@@ -2133,7 +2386,8 @@ protected static int stringCompare(String op1, String op2)
 			** Remaining characters are on the right.
 			*/
 
-			/* If a remaining character is less than a space, return 1 (op1 > op2) */
+            /* If a remaining character is less than a space, 
+             * return 1 (op1 > op2) */
 			retvalIfLTSpace = 1;
 			remainingString = op2;
 			posn = leftlen;
@@ -2186,7 +2440,11 @@ protected int stringCompare(SQLChar char1, SQLChar char2)
 	 * 			 0 - op1 == op2
 	 *			 1 - op1 > op2
 	 */
-	protected static int stringCompare(char[] op1, int leftlen, char[] op2, int rightlen)
+    protected static int stringCompare(
+    char[]  op1, 
+    int     leftlen, 
+    char[]  op2, 
+    int     rightlen)
 	{
 		int			posn;
 		char		leftchar;
@@ -2244,7 +2502,8 @@ protected static int stringCompare(char[] op1, int leftlen, char[] op2, int righ
 			** Remaining characters are on the left.
 			*/
 
-			/* If a remaining character is less than a space, return -1 (op1 < op2) */
+            /* If a remaining character is less than a space, 
+             * return -1 (op1 < op2) */
 			retvalIfLTSpace = -1;
 			remainingString = op1;
 			posn = rightlen;
@@ -2256,7 +2515,8 @@ protected static int stringCompare(char[] op1, int leftlen, char[] op2, int righ
 			** Remaining characters are on the right.
 			*/
 
-			/* If a remaining character is less than a space, return 1 (op1 > op2) */
+            /* If a remaining character is less than a space, 
+             * return 1 (op1 > op2) */
 			retvalIfLTSpace = 1;
 			remainingString = op2;
 			posn = leftlen;
@@ -2369,7 +2629,8 @@ public int hashCode()
 		}
 
 
-		/* value.hashCode() doesn't work because of the SQL blank padding behavior
+        /* value.hashCode() doesn't work because of the SQL blank padding 
+         * behavior.
 		 * We want the hash code to be based on the value after the 
 		 * trailing blanks have been trimmed.  Calling trim() is too expensive
 		 * since it will create a new object, so here's what we do:
@@ -2424,7 +2685,8 @@ private Locale getLocale() throws StandardException
 		return getLocaleFinder().getCurrentLocale();
 	}
 
-	protected RuleBasedCollator getCollatorForCollation() throws StandardException
+    protected RuleBasedCollator getCollatorForCollation() 
+        throws StandardException
 	{
 		return getLocaleFinder().getCollator();
 	}
@@ -2436,7 +2698,8 @@ protected LocaleFinder getLocaleFinder()
 		// though.  -  Jeff
 		if (localeFinder == null)
 		{
-			DatabaseContext dc = (DatabaseContext) ContextService.getContext(DatabaseContext.CONTEXT_ID);
+            DatabaseContext dc = (DatabaseContext) 
+                ContextService.getContext(DatabaseContext.CONTEXT_ID);
             if( dc != null)
                 localeFinder = dc.getDatabase();
 		}
@@ -2454,66 +2717,41 @@ protected DateFormat getTimestampFormat() throws StandardException {
 		return getLocaleFinder().getTimestampFormat();
 	}
 
-	protected DateFormat getDateFormat( Calendar cal) throws StandardException {
+    protected DateFormat getDateFormat( Calendar cal) 
+        throws StandardException {
 		return setDateFormatCalendar( getLocaleFinder().getDateFormat(), cal);
 	}
-	protected DateFormat getTimeFormat( Calendar cal) throws StandardException {
+    protected DateFormat getTimeFormat( Calendar cal) 
+        throws StandardException {
 		return setDateFormatCalendar( getLocaleFinder().getTimeFormat(), cal);
 	}
-	protected DateFormat getTimestampFormat( Calendar cal) throws StandardException {
-		return setDateFormatCalendar( getLocaleFinder().getTimestampFormat(), cal);
+    protected DateFormat getTimestampFormat( Calendar cal) 
+        throws StandardException {
+        return setDateFormatCalendar(
+                getLocaleFinder().getTimestampFormat(), cal);
 	}
 
     private DateFormat setDateFormatCalendar( DateFormat df, Calendar cal)
     {
         if( cal != null && df.getTimeZone() != cal.getTimeZone())
         {
-            // The DateFormat returned by getDateFormat may be cached and used by other threads.
-            // Therefore we cannot change its calendar.
+            // The DateFormat returned by getDateFormat may be cached and used
+            // by other threads.  Therefore we cannot change its calendar.
             df = (DateFormat) df.clone();
             df.setCalendar( cal);
         }
         return df;
     }
 
-	/*
-	 * object state
-	 */
-
-	// Don't use value directly in most situations. Use getString()
-	// OR use the rawData array if rawLength != -1.
-	private		String	value;
-
-	// rawData holds the reusable array for reading in
-	// SQLChars. It contains a valid value if rawLength
-	// is greater than or equal to 0. See getString() to see how it is
-	// converted to a String. Even when converted to a String
-	// object the rawData array remains for potential future
-	// use, unless  rawLength is > 4096. In this case the
-	// rawData is set to null to avoid huge memory use.
-	private		char[]	rawData;
-	private		int		rawLength = -1;
-
-	// For null strings, cKey = null.
-	private CollationKey cKey; 
-
-    /**
-	 * The value as a stream in the on-disk format.
-	 */
-	InputStream stream;
-
-	/* Locale info (for International support) */
-	private LocaleFinder localeFinder;
-
-    private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLChar.class);
-
     public int estimateMemoryUsage()
     {
         int sz = BASE_MEMORY_USAGE + ClassSize.estimateMemoryUsage( value);
         if( null != rawData)
             sz += 2*rawData.length;
-        // Assume that cKey, stream, and localFinder are shared, so do not count their memory usage
+        // Assume that cKey, stream, and localFinder are shared, 
+        // so do not count their memory usage
         return sz;
+
     } // end of estimateMemoryUsage
 
 	protected void copyState(SQLChar other) {
@@ -2539,5 +2777,4 @@ public String getTraceString() throws StandardException {
 
         return (toString());
     }
-
 }
