diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java
index b1207a6e..158a21c2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/SQLState.java
@@ -197,6 +197,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String GENERATED_CLASS_LINKAGE_ERROR	= "XBCM1.S";
 	String GENERATED_CLASS_INSTANCE_ERROR	= "XBCM2.S";
 	String GENERATED_CLASS_NO_SUCH_METHOD	= "XBCM3.S";
+	String GENERATED_CLASS_LIMIT_EXCEEDED	= "XBCM4.S";
 
 	/*
 	** Cryptography
@@ -986,6 +987,7 @@ The message identifier (ie. the value that matches a field in this class)
     String LANG_EXPLICIT_NULLS_IN_DB2_MODE                              = "42Z9C";
 	String LANG_UNSUPPORTED_TRIGGER_STMT		   					   = "42Z9D";
     String LANG_DROP_CONSTRAINT_TYPE                                   = "42Z9E";
+    String LANG_QUERY_TOO_COMPLEX                                      = "42ZA0";
 
 	//following 3 matches the DB2 sql states
 	String LANG_DECLARED_GLOBAL_TEMP_TABLE_ONLY_IN_SESSION_SCHEMA = "428EK";
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
index 71a153c8..4e57db42 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCClass.java
@@ -80,6 +80,13 @@
  *
  */
 class BCClass extends GClass {
+	
+	/**
+	 * Simple text indicating any limits execeeded while generating
+	 * the class file.
+	 */
+	private String limitMsg;
+	
 	//
 	// ClassBuilder interface
 	//
@@ -153,6 +160,10 @@ public ByteArray getClassBytecode() throws StandardException {
 				"GEN complete for class "+name);
 		  }
 		}
+		
+		if (limitMsg != null)
+			throw StandardException.newException(
+					SQLState.GENERATED_CLASS_LIMIT_EXCEEDED, getFullName(), limitMsg);
 		return bytecode;
 	}
 
@@ -376,7 +387,7 @@ public void newFieldWithAccessors(String getter, String setter,
 		chunk.addInstr(CodeChunk.RETURN_OPCODE[vmTypeId]);
 
 		int typeWidth = Type.width(vmTypeId);
-		chunk.complete(classHold, method, typeWidth, 1);
+		chunk.complete(null, classHold, method, typeWidth, 1);
 
 		/*
 		** add the set method
@@ -398,7 +409,38 @@ public void newFieldWithAccessors(String getter, String setter,
 
 		chunk.addInstr(VMOpcode.RETURN);
 
-		chunk.complete(classHold, method, typeWidth + (staticField ? 0 : 1), 1 + typeWidth);
+		chunk.complete(null, classHold, method, typeWidth + (staticField ? 0 : 1), 1 + typeWidth);
+	}
+	
+	/**
+	 * Add the fact that some class limit was exceeded while generating
+	 * the class. We create a set ofg them and report at the end, this
+	 * allows the generated class file to still be dumped.
+	 * @param mb
+	 * @param limitName
+	 * @param limit
+	 * @param value
+	 */
+	void addLimitExceeded(BCMethod mb, String limitName, int limit, int value)
+	{
+		StringBuffer sb = new StringBuffer();
+		if (limitMsg != null)
+		{
+			sb.append(limitMsg);
+			sb.append(", ");
+		}
+		
+		sb.append("method:");
+		sb.append(mb.getName());
+		sb.append(" ");
+		sb.append(limitName);
+		sb.append(" (");
+		sb.append(value);
+		sb.append(" > ");
+		sb.append(limit);
+		sb.append(")");
+		
+		limitMsg = sb.toString();
 	}
 
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java
index df882963..5fe2248e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java
@@ -205,7 +205,7 @@ public void complete() {
 		
 		// get the code attribute to put itself into the class
 		// provide the final header information needed
-		myCode.complete(modClass, myEntry, maxStack, currentVarNum);
+		myCode.complete(this, modClass, myEntry, maxStack, currentVarNum);
 	}
 
 	/*
@@ -918,7 +918,7 @@ private void conditionalIf(short opcode) {
 	public void startElseCode() {
 		
 		// start the else code
-		Type[] entryStack = condition.startElse(myCode, copyStack());
+		Type[] entryStack = condition.startElse(this, myCode, copyStack());
 		
 		for (int i = stackDepth = 0; i  < entryStack.length; i++)
 		{
@@ -928,7 +928,7 @@ public void startElseCode() {
 
 	}
 	public void completeConditional() {
-		condition = condition.end(myCode, stackTypes, stackTypeOffset);
+		condition = condition.end(this, myCode, stackTypes, stackTypeOffset);
 	}
 	
 	public void pop() {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/CodeChunk.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/CodeChunk.java
index 98865555..bbcd4656 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/CodeChunk.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/CodeChunk.java
@@ -350,25 +350,36 @@ public int getRelativePC() {
 	/**
 	 * now that we have codeBytes, fix the lengths fields in it
 	 * to reflect what was stored.
+	 * Limits checked here are from these sections of the JVM spec.
+	 * <UL>
+	 * <LI> 4.7.3 The Code Attribute
+	 * <LI> 4.10 Limitations of the Java Virtual Machine 
+	 * </UL>
 	 */
-	void fixLengths(int maxStack, int maxLocals, int codeLength) {
+	private void fixLengths(BCMethod mb, int maxStack, int maxLocals, int codeLength) {
 
 		byte[] codeBytes = cout.getData();
 
 		// max_stack is in bytes 0-1
+		if (mb != null && maxStack > 65535)
+			mb.cb.addLimitExceeded(mb, "max_stack", 65535, maxStack);
+			
 		codeBytes[0] = (byte)(maxStack >> 8 );
 		codeBytes[1] = (byte)(maxStack );
 
 		// max_locals is in bytes 2-3
+		if (mb != null && maxLocals > 65535)
+			mb.cb.addLimitExceeded(mb, "max_locals", 65535, maxLocals);
 		codeBytes[2] = (byte)(maxLocals >> 8 );
 		codeBytes[3] = (byte)(maxLocals );
 
 		// code_length is in bytes 4-7
+		if (mb != null && codeLength > 65536)
+			mb.cb.addLimitExceeded(mb, "code_length", 65536, codeLength);
 		codeBytes[4] = (byte)(codeLength >> 24 );
 		codeBytes[5] = (byte)(codeLength >> 16 );
 		codeBytes[6] = (byte)(codeLength >> 8 );
 		codeBytes[7] = (byte)(codeLength );
-
 	}
 
 	/**
@@ -376,7 +387,8 @@ void fixLengths(int maxStack, int maxLocals, int codeLength) {
 	 * now that it holds all of the instructions and
 	 * the exception table.
 	 */
-	void complete(ClassHolder ch, ClassMember method, int maxStack, int maxLocals) {
+	void complete(BCMethod mb, ClassHolder ch,
+			ClassMember method, int maxStack, int maxLocals) {
 
 		int codeLength = getRelativePC();
 
@@ -412,7 +424,7 @@ void complete(ClassHolder ch, ClassMember method, int maxStack, int maxLocals) {
 		} catch (IOException ioe) {
 		}
 
-		fixLengths(maxStack, maxLocals, codeLength);
+		fixLengths(mb, maxStack, maxLocals, codeLength);
 		method.addAttribute("Code", out);
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/Conditional.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/Conditional.java
index 3f36bbb8..36f00ba2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/Conditional.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/Conditional.java
@@ -43,6 +43,9 @@
 class Conditional {
 
 	private final Conditional parent;
+	/**
+	 * Offset in the code stream of the 'if' opcode.
+	 */
 	private final int   ifOffset;
 	private Type[]	stack;
 	private int thenGotoOffset;
@@ -70,7 +73,7 @@
 	 * @param thenStack Type stack on completing the conditional then block.
 	 * @return the type stack on entering the then block
 	 */
-	Type[] startElse(CodeChunk chunk, Type[] thenStack) {
+	Type[] startElse(BCMethod mb, CodeChunk chunk, Type[] thenStack) {
 
 		thenGotoOffset = chunk.getRelativePC();
 
@@ -78,7 +81,7 @@
 		chunk.addInstrU2(VMOpcode.GOTO, 0);
 
 		// fill in the branch opcode
-		fillIn(chunk, ifOffset);
+		fillIn(mb, chunk, ifOffset);
 		
 		Type[] entryStack = stack;
 		stack = thenStack;
@@ -94,13 +97,13 @@
 	 * @param stackNumber Current number of valid elements in elseStack
 	 * @return The conditional this conditional was nested in, if any.
 	 */
-	Conditional end(CodeChunk chunk, Type[] elseStack, int stackNumber) {
+	Conditional end(BCMethod mb, CodeChunk chunk, Type[] elseStack, int stackNumber) {
 
 		if (thenGotoOffset == 0) {
 			// no else condition
-			fillIn(chunk, ifOffset);
+			fillIn(mb, chunk, ifOffset);
 		} else {
-			fillIn(chunk, thenGotoOffset);
+			fillIn(mb, chunk, thenGotoOffset);
 		}
 		
 		if (SanityManager.DEBUG)
@@ -121,16 +124,28 @@ Conditional end(CodeChunk chunk, Type[] elseStack, int stackNumber) {
 		return parent;
 	}
 
-	private void fillIn(CodeChunk chunk, int where) {
+	/**
+	 * 
+	 * @param chunk Our code chunk
+	 * @param whereFrom Offset of the branch opcode in the code stream
+	 */
+	private void fillIn(BCMethod mb, CodeChunk chunk, int whereFrom) {
 
 		byte[] codeBytes = chunk.getCout().getData();
 
-		int offset = chunk.getRelativePC() - where;
+		int offset = chunk.getRelativePC() - whereFrom;
+
+		// branch offsets are a 16bit signed value, this implementation
+		// currently only generates forward branches
+		if (offset > 32767)
+			mb.cb.addLimitExceeded(mb, "branch_offset", 32767, offset);
 
-		where += 8;
+		// Skip the eight byte header at the start of the
+		// byte array, the eight bytes are the CodeAttribute header.
+		whereFrom += 8;
 
-		codeBytes[where + 1] = (byte)(offset >> 8 );
-		codeBytes[where + 2] = (byte)(offset);
+		codeBytes[whereFrom + 1] = (byte)(offset >> 8 );
+		codeBytes[whereFrom + 2] = (byte)(offset);
 	}
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StatementNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StatementNode.java
index 63b4c91b..c87b7bc6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StatementNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StatementNode.java
@@ -262,10 +262,24 @@ public GeneratedClass generate(ByteArray byteCode) throws StandardException
 		// wrap up the constructor by putting a return at the end of it
 		generatingClass.finishConstructor();
 
+		try {
 		// cook the completed class into a real class
 		// and stuff it into activationClass
 		GeneratedClass activationClass = generatingClass.getGeneratedClass(byteCode);
 
 		return activationClass;
+		} catch (StandardException e) {
+			
+			String msgId = e.getMessageId();
+
+			if (SQLState.GENERATED_CLASS_LIMIT_EXCEEDED.equals(msgId)
+					|| SQLState.GENERATED_CLASS_LINKAGE_ERROR.equals(msgId))
+			{
+				throw StandardException.newException(
+						SQLState.LANG_QUERY_TOO_COMPLEX, e);
+			}
+	
+			throw e;
+		}
 	 }
 }
