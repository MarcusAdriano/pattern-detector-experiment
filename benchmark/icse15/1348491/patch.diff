diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java
index 3ae476b1..484b7e81 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java
@@ -40,12 +40,8 @@
   private final String[] dictionary;
   private final int numTopFeatures;
 
-  public ClusterDumperWriter(Writer writer,
-                             Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
-                             DistanceMeasure measure,
-                             int numTopFeatures,
-                             String[] dictionary,
-                             int subString) {
+  public ClusterDumperWriter(Writer writer, Map<Integer,List<WeightedVectorWritable>> clusterIdToPoints,
+      DistanceMeasure measure, int numTopFeatures, String[] dictionary, int subString) {
     super(writer, clusterIdToPoints, measure);
     this.numTopFeatures = numTopFeatures;
     this.dictionary = dictionary;
@@ -73,18 +69,20 @@ public void write(ClusterWritable clusterWritable) throws IOException {
       writer.write('\n');
     }
 
-    Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
+    Map<Integer,List<WeightedVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
     List<WeightedVectorWritable> points = clusterIdToPoints.get(clusterWritable.getValue().getId());
     if (points != null) {
       writer.write("\tWeight : [props - optional]:  Point:\n\t");
-      for (Iterator<WeightedVectorWritable> iterator = points.iterator(); iterator.hasNext(); ) {
+      for (Iterator<WeightedVectorWritable> iterator = points.iterator(); iterator.hasNext();) {
         WeightedVectorWritable point = iterator.next();
         writer.write(String.valueOf(point.getWeight()));
         if (point instanceof WeightedPropertyVectorWritable) {
           WeightedPropertyVectorWritable tmp = (WeightedPropertyVectorWritable) point;
-          Map<Text, Text> map = tmp.getProperties();
+          Map<Text,Text> map = tmp.getProperties();
+          // map can be null since empty maps when written are returned as null
+          if (map == null) break;
           writer.write(" : [");
-          for (Map.Entry<Text, Text> entry : map.entrySet()) {
+          for (Map.Entry<Text,Text> entry : map.entrySet()) {
             writer.write(entry.getKey().toString());
             writer.write("=");
             writer.write(entry.getValue().toString());
