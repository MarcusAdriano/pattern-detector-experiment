diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java
index 433eb3bc..635c5f8b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java
@@ -30,8 +30,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.RowId;
 import java.sql.SQLException;
 import java.sql.SQLXML;
-import org.apache.derby.iapi.reference.SQLState;
-import org.apache.derby.impl.jdbc.Util;
 
 public class BrokeredCallableStatement40 extends BrokeredCallableStatement30
         implements EngineCallableStatement40 {
@@ -299,8 +297,7 @@ public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException{
         try {
             return interfaces.cast(this);
         } catch (ClassCastException cce) {
-            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
-                    interfaces);
+            throw unableToUnwrap(interfaces);
         }
     }
     /** 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
index 0f71bdfb..af86e818 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
@@ -30,8 +30,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import java.sql.SQLWarning;
 
-import org.apache.derby.impl.jdbc.Util;
-
 import org.apache.derby.iapi.error.SQLWarningFactory;
 import org.apache.derby.shared.common.reference.SQLState;
 
@@ -49,6 +47,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	protected boolean isClosed;
         private String connString;
 
+    /** Exception factory for the underlying connection. */
+    private final ExceptionFactory exceptionFactory;
+
 	/**
 		Maintain state as seen by this Connection handle, not the state
 		of the underlying Connection it is attached to.
@@ -64,8 +65,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/////////////////////////////////////////////////////////////////////////
 
 	public	BrokeredConnection(BrokeredConnectionControl control)
+            throws SQLException
 	{
 		this.control = control;
+        this.exceptionFactory =
+                control.getRealConnection().getExceptionFactory();
 	}
 
 	public final void setAutoCommit(boolean autoCommit) throws SQLException 
@@ -364,6 +368,15 @@ public final void setTypeMap(java.util.Map map) throws SQLException
 	//
 	/////////////////////////////////////////////////////////////////////////
 
+	/**
+     * Generate an exception reporting that there is no current connection.
+     * @return a no-current-connection exception
+     */
+    final SQLException noCurrentConnection() {
+        return exceptionFactory.getSQLException(
+                SQLState.NO_CURRENT_CONNECTION, null, null, null);
+    }
+
 	/**
 	  *	A little indirection for getting the real connection. 
 	  *
@@ -371,7 +384,7 @@ public final void setTypeMap(java.util.Map map) throws SQLException
 	  */
 	final EngineConnection getRealConnection() throws SQLException {
 		if (isClosed)
-			throw Util.noCurrentConnection();
+			throw noCurrentConnection();
 
 		return control.getRealConnection();
 	}
@@ -497,18 +510,6 @@ public final void addWarning(SQLWarning w) throws SQLException
         getRealConnection().addWarning(w);
     }
             
-    /**
-     * Checks if the connection is closed and throws an exception if
-     * it is.
-     *
-     * @exception SQLException if the connection is closed
-     */
-    protected final void checkIfClosed() throws SQLException {
-        if (isClosed()) {
-            throw Util.noCurrentConnection();
-        }
-    }
-
     /**
      * Get the string representation for this connection.  Return
      * the class name/hash code and various debug information.
@@ -651,6 +652,13 @@ public void resetFromPool()
         getRealConnection().resetFromPool();
     }
     
+    /**
+     * Return the exception factory for the underlying connection.
+     */
+    public final ExceptionFactory getExceptionFactory() {
+        return exceptionFactory;
+    }
+    
     ////////////////////////////////////////////////////////////////////
     //
     // INTRODUCED BY JDBC 4.1 IN JAVA 7
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java
index 43554be8..4e342402 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java
@@ -26,7 +26,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.CallableStatement;
 import java.sql.SQLException;
 import java.sql.Savepoint;
-import org.apache.derby.iapi.reference.JDBC30Translation;
 
 /**
 	Extends BrokeredConnection to provide the JDBC 3.0 connection methods.
@@ -35,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 {
 
 	public	BrokeredConnection30(BrokeredConnectionControl control)
+            throws SQLException
 	{
 		super(control);
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
index 4b6c447d..c4c3d901 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
@@ -31,7 +31,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Struct;
 import java.util.Properties;
 import java.util.concurrent.Executor;
-import org.apache.derby.impl.jdbc.Util;
 import org.apache.derby.iapi.reference.SQLState;
 
 
@@ -39,7 +38,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         extends BrokeredConnection30 implements EngineConnection40 {
     
     /** Creates a new instance of BrokeredConnection40 */
-    public BrokeredConnection40(BrokeredConnectionControl control) {
+    public BrokeredConnection40(BrokeredConnectionControl control)
+            throws SQLException {
         super(control);
     }
     
@@ -309,7 +309,7 @@ public final BrokeredCallableStatement newBrokeredStatement(BrokeredStatementCon
     public final boolean isWrapperFor(Class<?> interfaces) throws SQLException {
         try {
             if (getRealConnection().isClosed())
-                throw Util.noCurrentConnection();
+                throw noCurrentConnection();
             return interfaces.isInstance(this);
         } catch (SQLException sqle) {
             notifyException(sqle);
@@ -329,14 +329,15 @@ public final boolean isWrapperFor(Class<?> interfaces) throws SQLException {
                             throws SQLException{
         try {
             if (getRealConnection().isClosed())
-                throw Util.noCurrentConnection();
+                throw noCurrentConnection();
             //Derby does not implement non-standard methods on 
             //JDBC objects
             try {
                 return interfaces.cast(this);
             } catch (ClassCastException cce) {
-                throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
-                        interfaces);
+                throw getExceptionFactory().getSQLException(
+                        SQLState.UNABLE_TO_UNWRAP, null, null,
+                        new Object[]{ interfaces });
             }
         } catch (SQLException sqle) {
             notifyException(sqle);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java
index 81fb61e3..6e7622c1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java
@@ -27,8 +27,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.RowId;
 import java.sql.SQLException;
 import java.sql.SQLXML;
-import org.apache.derby.impl.jdbc.Util;
-import org.apache.derby.iapi.reference.SQLState;
 
 public class BrokeredPreparedStatement40 extends BrokeredPreparedStatement30{
     
@@ -97,8 +95,7 @@ public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException{
         try {
             return interfaces.cast(this);
         } catch (ClassCastException cce) {
-            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
-                    interfaces);
+            throw unableToUnwrap(interfaces);
         }
     }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
index d64bde97..1d91c1ee 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
@@ -23,8 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.reference.SQLState;
 
-import org.apache.derby.impl.jdbc.Util;
-
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -62,7 +60,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		// underlying statement is open.
 		resultSetType = getResultSetType();
 		resultSetConcurrency = getResultSetConcurrency();
-
 		resultSetHoldability = getResultSetHoldability();
     }
 
@@ -558,8 +555,7 @@ public final boolean isClosed() throws SQLException {
 
     /**
      * Checks if the statement is closed and throws an exception if it
-     * is. This method relies on the <code>isClosed()</code> method
-     * and therefore only works with JDBC 4.0.
+     * is.
      *
      * @exception SQLException if the statement is closed
      */
@@ -567,11 +563,25 @@ protected final void checkIfClosed()
         throws SQLException
     {
         if (isClosed()) {
-            throw Util.generateCsSQLException(SQLState.ALREADY_CLOSED,
-                                              "Statement");
+            throw control.getExceptionFactory().getSQLException(
+                    SQLState.ALREADY_CLOSED, null, null,
+                    new Object[]{ "Statement" });
         }
     }
     
+    /**
+     * Return an exception that reports that an unwrap operation has failed
+     * because the object couldn't be cast to the specified interface.
+     *
+     * @param iface the class or interface passed in to the failed unwrap call
+     * @return an exception indicating that unwrap failed
+     */
+    final SQLException unableToUnwrap(Class iface) {
+        return control.getExceptionFactory().getSQLException(
+                SQLState.UNABLE_TO_UNWRAP, null, null,
+                new Object[]{ iface });
+    }
+    
     ////////////////////////////////////////////////////////////////////
     //
     // INTRODUCED BY JDBC 4.1 IN JAVA 7
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java
index df45d889..beba2305 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java
@@ -21,9 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.iapi.jdbc;
 
 import java.sql.SQLException;
-import org.apache.derby.impl.jdbc.Util;
-import org.apache.derby.iapi.reference.SQLState;
-
 
 public class BrokeredStatement40 extends BrokeredStatement {
     
@@ -56,8 +53,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         try {
             return interfaces.cast(this);
         } catch (ClassCastException cce) {
-            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
-                    interfaces);
+            throw unableToUnwrap(interfaces);
         }
     }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
index 80388ba6..c20c46e3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
@@ -80,4 +80,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         @param s Statement that created the ResultSet.
 	*/
 	public ResultSet	wrapResultSet(Statement s, ResultSet rs);
+
+    /**
+     * Return the exception factory for the underlying connection.
+     * @return an exception factory instance
+     */
+    public ExceptionFactory getExceptionFactory();
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
index 61499cc2..ef8ce751 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
@@ -117,6 +117,14 @@ public void addWarning(SQLWarning newWarning)
      */
     public void resetFromPool() throws SQLException;
     
+    /**
+     * Return an exception factory that could be used to generate
+     * {@code SQLException}s raised by this connection.
+     *
+     * @return an exception factory instance
+     */
+    public ExceptionFactory getExceptionFactory();
+
     ////////////////////////////////////////////////////////////////////
     //
     // INTRODUCED BY JDBC 4.1 IN JAVA 7
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java
index e69de29b..21cc2cd0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java
@@ -0,0 +1,72 @@
+/*
+
+   Derby - Class org.apache.derby.iapi.jdbc.ExceptionFactory
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.iapi.jdbc;
+
+import java.sql.SQLException;
+
+/**
+ * An exception factory is used to create SQLExceptions of the correct type.
+ */
+public interface ExceptionFactory {
+
+    /**
+     * Unpack a SQL exception, looking for an EmbedSQLException which carries
+     * the Derby messageID and args which we will serialize across DRDA so
+     * that the client can reconstitute a SQLException with appropriate text.
+     * If we are running JDBC 3, then we hope that the passed-in
+     * exception is already an EmbedSQLException, which carries all the
+     * information we need.
+     *
+     * @param se the exception to unpack
+     * @return the argument ferry for the exception
+     */
+    SQLException getArgumentFerry(SQLException se);
+
+    /**
+     * Construct an SQLException whose message and severity are specified
+     * explicitly.
+     *
+     * @param message the exception message
+     * @param messageId the message id
+     * @param next the next SQLException
+     * @param severity the severity of the exception
+     * @param cause the cause of the exception
+     * @param args the message arguments
+     * @return an SQLException
+     */
+    SQLException getSQLException(String message, String messageId,
+            SQLException next, int severity, Throwable cause, Object[] args);
+
+    /**
+     * Construct an SQLException whose message and severity are derived from
+     * the message id.
+     *
+     * @param messageId the message id
+     * @param next the next SQLException
+     * @param cause the cause of the exception
+     * @param args the message arguments
+     * @return an SQLException
+     */
+    SQLException getSQLException(String messageId, SQLException next,
+            Throwable cause, Object[] args);
+
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index ebcf8547..3d268be0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -21,7 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.jdbc;
 
-import org.apache.derby.iapi.error.ExceptionSeverity;
 import org.apache.derby.jdbc.InternalDriver;
 
 import org.apache.derby.iapi.reference.Attribute;
@@ -54,8 +53,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.replication.master.MasterFactory;
 import org.apache.derby.iapi.store.replication.slave.SlaveFactory;
 
-import org.apache.derby.iapi.util.IdUtil;
-
 import java.io.IOException;
 
 import java.security.Permission;
@@ -83,6 +80,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Iterator;
 
 import org.apache.derby.iapi.jdbc.EngineLOB;
+import org.apache.derby.iapi.jdbc.ExceptionFactory;
 import org.apache.derby.iapi.util.InterruptStatus;
 import org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl;
 
@@ -3078,6 +3076,11 @@ final int getResultSetOrderId() {
 		}
 	}
 
+    /** Get the exception factory for this connection. */
+    public ExceptionFactory getExceptionFactory() {
+        return Util.getExceptionFactory();
+    }
+
 	protected SQLException newSQLException(String messageId) {
 		return Util.generateCsSQLException(messageId);
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java
index 068a4912..b8620659 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java
@@ -21,12 +21,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.jdbc;
 
-import java.io.IOException;
-import org.apache.derby.iapi.error.ExceptionSeverity;
-import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.jdbc.ExceptionFactory;
 import org.apache.derby.iapi.services.i18n.MessageService;
-import org.apache.derby.iapi.reference.MessageId;
 
 import java.sql.SQLException;
 
@@ -34,7 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  *Class to create SQLException
  *
  */
-public class SQLExceptionFactory {
+public class SQLExceptionFactory implements ExceptionFactory {
     /**
      * method to construct SQLException
      * version specific drivers can overload this method to create
@@ -47,6 +44,17 @@ public SQLException getSQLException(String message, String messageId,
     }
 
 	/**
+     * Construct an SQLException whose message and severity are derived from
+     * the message id.
+     */
+    public final SQLException getSQLException(String messageId,
+            SQLException next, Throwable cause, Object[] args) {
+        String message = MessageService.getCompleteMessage(messageId, args);
+        int severity = StandardException.getSeverityFromIdentifier(messageId);
+        return getSQLException(message, messageId, next, severity, cause, args);
+    }
+
+	/**
 	 * Unpack a SQL exception, looking for an EmbedSQLException which carries
 	 * the Derby messageID and args which we will serialize across DRDA so
 	 * that the client can reconstitute a SQLException with appropriate text.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
index 67567392..2796fb31 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
@@ -24,11 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.Attribute;
 import org.apache.derby.iapi.reference.MessageId;
 import org.apache.derby.iapi.reference.Property;
-import org.apache.derby.iapi.reference.SQLState;
 
-import org.apache.derby.impl.jdbc.EmbedConnection;
-
-import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.ResultSet;
 import org.apache.derby.iapi.jdbc.BrokeredConnection;
@@ -40,10 +36,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.impl.jdbc.*;
 
-import java.sql.Connection;
 import java.sql.SQLException;
 import java.sql.Driver;
-import java.sql.DriverManager;
 import java.sql.DriverPropertyInfo;
 
 import java.security.Permission;
@@ -94,7 +88,10 @@ public void stop() {
 		return new EmbedResultSet20(conn, results, forMetaData, statement,
 								 isAtomic); 
 	}
-	public abstract BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control);
+
+    public abstract BrokeredConnection newBrokeredConnection(
+            BrokeredConnectionControl control) throws SQLException;
+
     /**
      * <p>The getPropertyInfo method is intended to allow a generic GUI tool to 
      * discover what properties it should prompt a human for in order to get 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java
index f8446170..aaebff37 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver30.java
@@ -125,7 +125,10 @@ protected EmbedConnection getNewEmbedConnection(String url, Properties info)
 								resultSetConcurrency,
 								resultSetHoldability);
 	}
-	public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
+	public BrokeredConnection newBrokeredConnection(
+            BrokeredConnectionControl control)
+        throws SQLException
+    {
 
 		return new BrokeredConnection30(control);
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java
index 49141d65..fac9be6d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver40.java
@@ -129,8 +129,9 @@ public CallableStatement newEmbedCallableStatement(
             resultSetConcurrency,
             resultSetHoldability);
     }
-    public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
         
+    public BrokeredConnection newBrokeredConnection(
+            BrokeredConnectionControl control) throws SQLException {
         return new BrokeredConnection40(control);
     }
     
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
index e96026d2..b2e9a707 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
@@ -184,7 +184,7 @@ final void openRealConnection() throws SQLException {
 			realConnection.setApplicationConnection(currentConnectionHandle);
 	}
 
-	final Connection getNewCurrentConnectionHandle() {
+	final Connection getNewCurrentConnectionHandle() throws SQLException {
 		Connection applicationConnection = currentConnectionHandle =
 			((org.apache.derby.jdbc.Driver20) (realConnection.getLocalDriver())).newBrokeredConnection(this);
 		realConnection.setApplicationConnection(applicationConnection);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/XAStatementControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/XAStatementControl.java
index 78449808..c665cb44 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/XAStatementControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/XAStatementControl.java
@@ -26,7 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.jdbc.BrokeredStatement;
 import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
 import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
-import org.apache.derby.iapi.jdbc.EngineStatement;
+import org.apache.derby.iapi.jdbc.ExceptionFactory;
 import org.apache.derby.impl.jdbc.EmbedConnection;
 import org.apache.derby.impl.jdbc.EmbedResultSet;
 import org.apache.derby.impl.jdbc.EmbedStatement;
@@ -241,4 +241,11 @@ public ResultSet wrapResultSet(Statement s, ResultSet rs) {
 	public int checkHoldCursors(int holdability) throws SQLException {
 		return xaConnection.checkHoldCursors(holdability, true);
  	}
+
+    /**
+     * Return the exception factory for the underlying connection.
+     */
+    public ExceptionFactory getExceptionFactory() {
+        return applicationConnection.getExceptionFactory();
+    }
 }
