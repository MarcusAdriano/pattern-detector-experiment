diff --git a/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java b/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java
index 49f683f9..60098b2d 100644
--- a/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java
+++ b/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java
@@ -33,9 +33,13 @@
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.VectorWritable;
 import org.apache.mahout.math.function.SquareRootFunction;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class CDbwEvaluator {
 
+  private static final Logger log = LoggerFactory.getLogger(CDbwEvaluator.class);
+
   private final Map<Integer, List<VectorWritable>> representativePoints;
 
   private final Map<Integer, Double> stDevs = new HashMap<Integer, Double>();
@@ -73,11 +77,10 @@ public CDbwEvaluator(Map<Integer, List<VectorWritable>> representativePoints,
    * @param clustersIn
    *            a String path to the input clusters directory
    */
-  public CDbwEvaluator(Configuration conf, Path clustersIn)
-      throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+  public CDbwEvaluator(Configuration conf, Path clustersIn) throws ClassNotFoundException, InstantiationException,
+      IllegalAccessException, IOException {
     ClassLoader ccl = Thread.currentThread().getContextClassLoader();
-    measure = ccl.loadClass(conf.get(CDbwDriver.DISTANCE_MEASURE_KEY))
-        .asSubclass(DistanceMeasure.class).newInstance();
+    measure = ccl.loadClass(conf.get(CDbwDriver.DISTANCE_MEASURE_KEY)).asSubclass(DistanceMeasure.class).newInstance();
     representativePoints = CDbwMapper.getRepresentativePoints(conf);
     clusters = loadClusters(conf, clustersIn);
     for (Integer cId : representativePoints.keySet()) {
@@ -92,7 +95,7 @@ public double getCDbw() {
   public double intraClusterDensity() {
     double avgStd = 0.0;
     for (Integer cId : representativePoints.keySet()) {
-      avgStd += stDevs.get(cId);
+      avgStd += getStdev(cId);
     }
     avgStd /= representativePoints.size();
   
@@ -103,13 +106,15 @@ public double intraClusterDensity() {
       double cSum = 0.0;
       for (VectorWritable aRepI : repI) {
         double inDensity = intraDensity(clusters.get(cId).getCenter(), aRepI.get(), avgStd);
-        double std = stDevs.get(cId);
+        double std = getStdev(cId);
         if (std > 0.0) {
           cSum += inDensity / std;
         }
       }
+      if (repI.size() > 0) {
       sum += cSum / repI.size();
     }
+    }
     return sum / representativePoints.size();
   }
 
@@ -118,7 +123,7 @@ public double interClusterDensity() {
     for (Map.Entry<Integer, List<VectorWritable>> entry1 : representativePoints.entrySet()) {
       Integer cI = entry1.getKey();
       List<VectorWritable> repI = entry1.getValue();
-      double stDevI = stDevs.get(cI);      
+      double stDevI = getStdev(cI);
       for (Map.Entry<Integer, List<VectorWritable>> entry2 : representativePoints.entrySet()) {
         Integer cJ = entry2.getKey();
         if (cI.equals(cJ)) {
@@ -138,23 +143,20 @@ public double interClusterDensity() {
             }
           }
         }
-        double stDevJ = stDevs.get(cJ);
-        double interDensity = interDensity(uIJ, cI, cJ);
+        double stDevJ = getStdev(cJ);
+        double interDensity = uIJ == null ? 0 : interDensity(uIJ, cI, cJ);
         double stdSum = stDevI + stDevJ;
         double density = 0.0;
         if (stdSum > 0.0) {
           density = minDistance * interDensity / stdSum;
         }
   
-        // Use a logger
-        //if (false) {
-        //  System.out.println("minDistance[" + cI + "," + cJ + "]=" + minDistance);
-        //  System.out.println("stDev[" + cI + "]=" + stDevI);
-        //  System.out.println("stDev[" + cJ + "]=" + stDevJ);
-        //  System.out.println("interDensity[" + cI + "," + cJ + "]=" + interDensity);
-        //  System.out.println("density[" + cI + "," + cJ + "]=" + density);
-        //  System.out.println();
-        //}
+        log.debug("minDistance[" + cI + "," + cJ + "]=" + minDistance);
+        log.debug("stDev[" + cI + "]=" + stDevI);
+        log.debug("stDev[" + cJ + "]=" + stDevJ);
+        log.debug("interDensity[" + cI + "," + cJ + "]=" + interDensity);
+        log.debug("density[" + cI + "," + cJ + "]=" + density);
+
         sum += density;
       }
     }
@@ -162,6 +164,20 @@ public double interClusterDensity() {
     return sum;
   }
 
+  /**
+   * Handle missing stDevs when clusters are empty by returning 0
+   * @param cI
+   * @return
+   */
+  private Double getStdev(Integer cI) {
+    Double result = stDevs.get(cI);
+    if (result == null) {
+      return new Double(0);
+    } else {
+      return result;
+    }
+  }
+
   public double separation() {
     double minDistance = Double.MAX_VALUE;
     for (Map.Entry<Integer, List<VectorWritable>> entry1 : representativePoints.entrySet()) {
@@ -192,8 +208,8 @@ public double separation() {
    *            a String pathname to the directory containing input cluster files
    * @return a List<Cluster> of the clusters
    */
-  private static Map<Integer, Cluster> loadClusters(Configuration conf, Path clustersIn)
-      throws InstantiationException, IllegalAccessException, IOException {
+  private static Map<Integer, Cluster> loadClusters(Configuration conf, Path clustersIn) throws InstantiationException,
+      IllegalAccessException, IOException {
     Map<Integer, Cluster> clusters = new HashMap<Integer, Cluster>();
     FileSystem fs = clustersIn.getFileSystem(conf);
     for (FileStatus part : fs.listStatus(clustersIn)) {
@@ -217,7 +233,7 @@ public double separation() {
     List<VectorWritable> repI = representativePoints.get(cI);
     List<VectorWritable> repJ = representativePoints.get(cJ);
     double density = 0.0;
-    double std = (stDevs.get(cI) + stDevs.get(cJ)) / 2.0;
+    double std = (getStdev(cI) + getStdev(cJ)) / 2.0;
     for (VectorWritable vwI : repI) {
       if (measure.distance(uIJ, vwI.get()) <= std) {
         density++;
@@ -245,11 +261,13 @@ private void setStDev(int cI) {
       s1 = s1 == null ? v.clone() : s1.plus(v);
       s2 = s2 == null ? v.times(v) : s2.plus(v.times(v));
     }
+    if (s0 > 1) {
     Vector std = s2.times(s0).minus(s1.times(s1)).assign(new SquareRootFunction()).divide(s0);
     double d = std.zSum() / std.size();
     //System.out.println("stDev[" + cI + "]=" + d);
     stDevs.put(cI, d);
   }
+  }
 
   /*
   double minRpDistance(Iterable<VectorWritable> repI, Iterable<VectorWritable> repJ) {
diff --git a/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwReducer.java b/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwReducer.java
index 1df367e8..af2eef94 100644
--- a/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwReducer.java
+++ b/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwReducer.java
@@ -29,11 +29,11 @@
 
 public class CDbwReducer extends Reducer<IntWritable, WeightedVectorWritable, IntWritable, VectorWritable> {
 
-  private Map<Integer, List<VectorWritable>> referencePoints;
+  private Map<Integer, List<VectorWritable>> representativePoints;
 
   @Override
   protected void cleanup(Context context) throws IOException, InterruptedException {
-    for (Map.Entry<Integer, List<VectorWritable>> entry : referencePoints.entrySet()) {
+    for (Map.Entry<Integer, List<VectorWritable>> entry : representativePoints.entrySet()) {
       IntWritable iw = new IntWritable(entry.getKey());
       for (VectorWritable vw : entry.getValue()) {
         context.write(iw, vw);
@@ -60,7 +60,7 @@ protected void setup(Context context) throws IOException, InterruptedException {
     super.setup(context);
     Configuration conf = context.getConfiguration();
     try {
-      referencePoints = CDbwMapper.getRepresentativePoints(conf);
+      representativePoints = CDbwMapper.getRepresentativePoints(conf);
     } catch (NumberFormatException e) {
       throw new IllegalStateException(e);
     } catch (SecurityException e) {
@@ -70,8 +70,8 @@ protected void setup(Context context) throws IOException, InterruptedException {
     }
   }
 
-  public void configure(Map<Integer, List<VectorWritable>> referencePoints) {
-    this.referencePoints = referencePoints;
+  public void configure(Map<Integer, List<VectorWritable>> representativePoints) {
+    this.representativePoints = representativePoints;
   }
 
 }
diff --git a/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java b/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
index 50c2cb2e..0a91919a 100644
--- a/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
+++ b/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
@@ -95,7 +95,7 @@ private void checkRefPoints(int numIterations) throws IOException {
    * Initialize synthetic data using 4 clusters dC units from origin having 4 representative points dP from each center
    * @param dC a double cluster center offset
    * @param dP a double representative point offset
-   * @param measure TODO
+   * @param measure the DistanceMeasure
    */
   private void initData(double dC, double dP, DistanceMeasure measure) {
     clusters = new HashMap<Integer, Cluster>();
@@ -240,4 +240,35 @@ public void testDirichlet() throws Exception {
     checkRefPoints(numIterations);
   }
 
+  @Test
+  public void testEmptyCluster() {
+    DistanceMeasure measure = new EuclideanDistanceMeasure();
+    initData(1, 0.25, measure);
+    Canopy cluster = new Canopy(new DenseVector(new double[] { 10, 10 }), 19, measure);
+    clusters.put(cluster.getId(), cluster);
+    List<VectorWritable> points = new ArrayList<VectorWritable>();
+    representativePoints.put(cluster.getId(), points);
+    CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
+    assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
+    assertEquals("separation", 1.5, evaluator.separation(), EPSILON);
+    assertEquals("intra cluster density", 0.7155417527999326, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 1.073312629199899, evaluator.getCDbw(), EPSILON);
+  }
+
+  @Test
+  public void testSingleValueCluster() {
+    DistanceMeasure measure = new EuclideanDistanceMeasure();
+    initData(1, 0.25, measure);
+    Canopy cluster = new Canopy(new DenseVector(new double[] { 0, 0 }), 19, measure);
+    clusters.put(cluster.getId(), cluster);
+    List<VectorWritable> points = new ArrayList<VectorWritable>();
+    points.add(new VectorWritable(cluster.getCenter().plus(new DenseVector(new double[] { 1, 1 }))));
+    representativePoints.put(cluster.getId(), points);
+    CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
+    assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
+    assertEquals("separation", 0.0, evaluator.separation(), EPSILON);
+    assertEquals("intra cluster density", 0.7155417527999326, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 0.0, evaluator.getCDbw(), EPSILON);
+  }
+
 }
