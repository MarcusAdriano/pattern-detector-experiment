diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java
index 0424e8af..8dd1f965 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java
@@ -155,7 +155,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	//// Implementation
 	private final String			name;
 	private UUID			oid;
-	private final String			aid;
+	private String			aid;
 
     private final boolean isSystem;
     private final boolean isSYSIBM;
@@ -218,6 +218,17 @@ public String getAuthorizationId()
 		return aid;
 	}
 
+	/**
+	 * Sets the authorization id of the schema. This is only used by the DataDictionary
+     * during boot in order to patch up the authorization ids on system schemas.
+	 *
+	 * @param newAuthorizationID What is is
+	 */
+	public void setAuthorizationId( String newAuthorizationID )
+	{
+		aid = newAuthorizationID;
+	}
+
 	/**
 	 * Gets the oid of the schema 
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 53267aa9..e185167f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -7097,6 +7097,10 @@ public void resetDatabaseOwner( TransactionController tc )
         SchemaDescriptor sd = locateSchemaRow
             (SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME, tc );
         authorizationDatabaseOwner = sd.getAuthorizationId();
+
+        systemSchemaDesc.setAuthorizationId( authorizationDatabaseOwner );
+        sysIBMSchemaDesc.setAuthorizationId( authorizationDatabaseOwner );
+        systemUtilSchemaDesc.setAuthorizationId( authorizationDatabaseOwner );
     }
     
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/PermissionsCacheable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/PermissionsCacheable.java
index f511cfb0..921d0f90 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/PermissionsCacheable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/PermissionsCacheable.java
@@ -75,6 +75,7 @@ public Cacheable setIdentity(Object key) throws StandardException
 				TableDescriptor td = dd.getTableDescriptor( tablePermsKey.getTableUUID());
 				SchemaDescriptor sd = td.getSchemaDescriptor();
 				if( sd.isSystemSchema())
+                {
 					// RESOLVE The access to system tables is hard coded to SELECT only to everyone.
 					// Is this the way we want Derby to work? Should we allow revocation of read access
 					// to system tables? If so we must explicitly add a row to the SYS.SYSTABLEPERMISSIONS
@@ -84,13 +85,19 @@ public Cacheable setIdentity(Object key) throws StandardException
 															(String) null,
 															tablePermsKey.getTableUUID(),
 															"Y", "N", "N", "N", "N", "N");
+                    // give the permission the same UUID as the system table
+                    ((TablePermsDescriptor) permissions).setUUID( tablePermsKey.getTableUUID() );
+                }
 				else if( tablePermsKey.getGrantee().equals( sd.getAuthorizationId()))
+                {
 					permissions = new TablePermsDescriptor( dd,
 															tablePermsKey.getGrantee(),
 															Authorizer.SYSTEM_AUTHORIZATION_ID,
 															tablePermsKey.getTableUUID(),
 															"Y", "Y", "Y", "Y", "Y", "Y");
+                }
 				else
+                {
 					permissions = new TablePermsDescriptor( dd,
 															tablePermsKey.getGrantee(),
 															(String) null,
@@ -98,6 +105,7 @@ else if( tablePermsKey.getGrantee().equals( sd.getAuthorizationId()))
 															"N", "N", "N", "N", "N", "N");
 			}
 		}
+		}
 		else if( key instanceof ColPermsDescriptor)
 		{
 			ColPermsDescriptor colPermsKey = (ColPermsDescriptor) key;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
index b3570c82..0568873b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
@@ -10151,4 +10151,19 @@ public void testGlobalTempTables() throws SQLException {
         george.close();
         monica.close();
     }
+    
+    /**
+     * DERBY-4502
+     *
+     * Allow creation of views against system tables when authorization is enabled.
+     */
+    public void test_derby_4502() throws Exception
+    {
+        Connection mamta1 = openUserConnection("mamta1");
+        Statement st_mamta1 = mamta1.createStatement();
+
+        st_mamta1.execute(
+            "create view v_4502( a ) as select tablename from sys.systables");
+    }
+    
 }
