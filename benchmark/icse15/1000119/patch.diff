diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
index f131ccda..cdcca003 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
@@ -33,7 +33,6 @@
  * on-line.
  */
 public class OnlineAuc {
-
   enum ReplacementPolicy {
     FIFO, FAIR, RANDOM
   }
@@ -43,6 +42,9 @@
   // for the FIFO policy
   public static final int HISTORY = 10;
 
+  // defines the exponential averaging window for results
+  private int windowSize=Integer.MAX_VALUE;
+
   // FIFO has distinctly the best properties as a policy.  See OnlineAucTest for details
   private ReplacementPolicy policy = ReplacementPolicy.FIFO;
   private transient Random random = org.apache.mahout.common.RandomUtils.getRandom();
@@ -102,7 +104,7 @@ public double addSample(int category, double score) {
           m += 0.5;
         }
       }
-      averages.set(category, averages.get(category) + (m / count - averages.get(category)) / samples.get(category));
+      averages.set(category, averages.get(category) + (m / count - averages.get(category)) / Math.min(windowSize, samples.get(category)));
     }
     return auc();
   }
@@ -115,4 +117,8 @@ public double auc() {
   public void setPolicy(ReplacementPolicy policy) {
     this.policy = policy;
   }
+
+  public void setWindowSize(int windowSize) {
+    this.windowSize = windowSize;
+  }
 }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
index fd6a723f..550ed33a 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
@@ -81,8 +81,8 @@ public void testBinaryCase() {
 
     // FAIR policy isn't so accurate
     assertEquals(0.7603, stats[0].getMean(), 0.03);
-    assertEquals(0.7603, stats[0].getQuartile(1), 0.025);
-    assertEquals(0.7603, stats[0].getQuartile(3), 0.025);
+    assertEquals(0.7603, stats[0].getQuartile(1), 0.03);
+    assertEquals(0.7603, stats[0].getQuartile(3), 0.03);
 
     // FIFO policy seems best
     assertEquals(0.7603, stats[1].getMean(), 0.001);
