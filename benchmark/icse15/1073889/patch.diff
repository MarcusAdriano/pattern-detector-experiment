diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/BinaryMemtable.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/BinaryMemtable.java
index 4b4e2ff1..09dc1f53 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/BinaryMemtable.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/BinaryMemtable.java
@@ -125,7 +125,8 @@ private void resolve(DecoratedKey key, ByteBuffer buffer)
     private SSTableReader writeSortedContents(List<DecoratedKey> sortedKeys) throws IOException
     {
         logger.info("Writing " + this);
-        SSTableWriter writer = cfs.createFlushWriter(sortedKeys.size());
+        String path = cfs.getFlushPath();
+        SSTableWriter writer = new SSTableWriter(path, sortedKeys.size(), cfs.metadata, cfs.partitioner);
 
         for (DecoratedKey key : sortedKeys)
         {
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index e5819678..a5d33eb7 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -2063,14 +2063,4 @@ public void reduceCacheSizes()
             ssTables.getKeyCache().setCapacity(newCapacity);
         }
     }
-
-    public SSTableWriter createFlushWriter(long estimatedRows) throws IOException
-    {
-        return new SSTableWriter(getFlushPath(), estimatedRows, metadata, partitioner);
-    }
-
-    public SSTableWriter createCompactionWriter(long estimatedRows, String location) throws IOException
-    {
-        return new SSTableWriter(getTempSSTablePath(location), estimatedRows, metadata, partitioner);
-    }
 }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/CompactionManager.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/CompactionManager.java
index 682d8f79..dd357ee8 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -444,7 +444,8 @@ int doCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int
                 return 0;
             }
 
-            writer = cfs.createCompactionWriter(expectedBloomFilterSize, compactionFileLocation);
+            String newFilename = new File(cfs.getTempSSTablePath(compactionFileLocation)).getAbsolutePath();
+            writer = new SSTableWriter(newFilename, expectedBloomFilterSize, cfs.metadata, cfs.partitioner);
             while (nni.hasNext())
             {
                 AbstractCompactedRow row = nni.next();
@@ -705,7 +706,8 @@ private SSTableWriter maybeCreateWriter(ColumnFamilyStore cfs, String compaction
         if (writer == null)
         {
             FileUtils.createDirectory(compactionFileLocation);
-            writer = cfs.createCompactionWriter(expectedBloomFilterSize, compactionFileLocation);
+            String newFilename = new File(cfs.getTempSSTablePath(compactionFileLocation)).getAbsolutePath();
+            writer = new SSTableWriter(newFilename, expectedBloomFilterSize, cfs.metadata, cfs.partitioner);
         }
         return writer;
     }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Memtable.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Memtable.java
index 0050591c..1e6b2d6c 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Memtable.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Memtable.java
@@ -155,7 +155,7 @@ public String contents()
     private SSTableReader writeSortedContents() throws IOException
     {
         logger.info("Writing " + this);
-        SSTableWriter writer = cfs.createFlushWriter(columnFamilies.size());
+        SSTableWriter writer = new SSTableWriter(cfs.getFlushPath(), columnFamilies.size(), cfs.metadata, cfs.partitioner);
 
         for (Map.Entry<DecoratedKey, ColumnFamily> entry : columnFamilies.entrySet())
             writer.append(entry.getKey(), entry.getValue());
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java
index 5f8e7127..3e52ad7f 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java
@@ -57,6 +57,11 @@
     private DecoratedKey lastWrittenKey;
     private FileMark dataMark;
 
+    public SSTableWriter(String filename, long keyCount) throws IOException
+    {
+        this(filename, keyCount, DatabaseDescriptor.getCFMetaData(Descriptor.fromFilename(filename)), StorageService.getPartitioner());
+    }
+
     public SSTableWriter(String filename, long keyCount, CFMetaData metadata, IPartitioner partitioner) throws IOException
     {
         super(Descriptor.fromFilename(filename),
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableImport.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableImport.java
index ee24203f..c5954bfd 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableImport.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableImport.java
@@ -31,7 +31,6 @@
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.dht.IPartitioner;
-import org.apache.cassandra.io.sstable.Descriptor;
 import org.apache.cassandra.io.sstable.SSTableWriter;
 import org.codehaus.jackson.type.TypeReference;
 
@@ -209,7 +208,7 @@ private static int importUnsorted(JsonParser parser, ColumnFamily columnFamily,
         Map<?, ?> data = parser.readValueAs(new TypeReference<Map<?, ?>>() {});
 
         keyCountToImport = (keyCountToImport == null) ? data.size() : keyCountToImport;
-        SSTableWriter writer = new SSTableWriter(ssTablePath, keyCountToImport, DatabaseDescriptor.getCFMetaData(Descriptor.fromFilename(ssTablePath)), partitioner);
+        SSTableWriter writer = new SSTableWriter(ssTablePath, keyCountToImport);
 
         System.out.printf("Importing %s keys...%n", keyCountToImport);
 
@@ -281,7 +280,7 @@ public static int importSorted(String jsonFile, ColumnFamily columnFamily, Strin
         System.out.printf("Importing %s keys...%n", keyCountToImport);
 
         parser = getParser(jsonFile); // renewing parser
-        SSTableWriter writer = new SSTableWriter(ssTablePath, keyCountToImport, DatabaseDescriptor.getCFMetaData(Descriptor.fromFilename(ssTablePath)), partitioner);
+        SSTableWriter writer = new SSTableWriter(ssTablePath, keyCountToImport);
 
         int lineNumber = 1;
         DecoratedKey prevStoredKey = null;
