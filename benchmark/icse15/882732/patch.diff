diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index 16ea3473..6d0f3407 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -1604,14 +1604,24 @@ public ResultSetNode genProjectRestrict(int origFromListSize)
 			// select c1 from t group by c1, c2
 			// we would have added c2 to the projection list which will have to be 
 			// projected out.
+			//
+
+			// Keep the same RCL on top, since there may be
+			// references to its result columns above us, e.g. in this query:
+			//
+			// select sum(j),i from t group by i having i
+			//             in (select i from t group by i,j )
+			//
+			ResultColumnList topList = prnRSN.getResultColumns();
+			ResultColumnList newSelectList = topList.copyListAndObjects();
+			prnRSN.setResultColumns(newSelectList);
 			
-			ResultColumnList newSelectList = prnRSN.getResultColumns().copyListAndObjects(); 
-			newSelectList.removeGeneratedGroupingColumns();
-			newSelectList.genVirtualColumnNodes(prnRSN, prnRSN.getResultColumns());
+			topList.removeGeneratedGroupingColumns();
+			topList.genVirtualColumnNodes(prnRSN, newSelectList);
 			prnRSN = (ResultSetNode) getNodeFactory().getNode(
 						C_NodeTypes.PROJECT_RESTRICT_NODE,
 						prnRSN,
-						newSelectList,
+						topList,
 						null,
 						null,
 						null,
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
index 03895745..5a35a9d1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
@@ -2243,4 +2243,31 @@ public void testDerby4071AggregateOnGroupByColumnInHaving() throws SQLException
          
          JDBC.assertFullResultSet(rs, new String[][] {{"4","2"},{"5","2"}});
     }
+
+    /**
+     * GROUP BY in an IN-subquery inside HAVING clause whose select list is
+     * subset of group by columns.
+     *
+     * @throws SQLException
+     */
+    public void testDerby4450() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        ResultSet rs;
+
+        s.executeUpdate(
+            "create table tt(i int not null," +
+            "               j int, k int)");
+        s.executeUpdate(
+            "insert into tt values " +
+            "    (1,10,1), (1,40,1),(3,45,1),(4,46,1),(5,90,1)");
+
+        rs = s.executeQuery(
+            "select sum(j) from tt group by i having i " +
+            "                     in (select i from tt group by i,j )");
+
+        JDBC.assertFullResultSet(rs, new String[][] {
+                {"50"},{"45"},{"46"},{"90"}});
+        rollback();
+    }
 }
