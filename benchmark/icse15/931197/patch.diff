diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
index 6f11715c..e70973c1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
@@ -55,11 +55,6 @@
         epStateMap_ = epStateMap;
     }
     
-    void addGossipDigest(InetAddress ep, int generation, int version)
-    {
-        gDigestList_.add( new GossipDigest(ep, generation, version) );
-    }
-    
     List<GossipDigest> getGossipDigestList()
     {
         return gDigestList_;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index cedf1c03..ce339bf8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -177,7 +177,7 @@ public void convict(InetAddress endpoint)
         EndPointState epState = endPointStateMap_.get(endpoint);
         if (epState.isAlive())
         {
-            logger_.info("InetAddress {} is now dead.", endpoint);;
+            logger_.info("InetAddress {} is now dead.", endpoint);
             isAlive(endpoint, epState, false);
         }
     }
@@ -318,7 +318,7 @@ boolean sendGossip(Message message, Set<InetAddress> epSet)
         int index = (size == 1) ? 0 : random_.nextInt(size);
         InetAddress to = liveEndPoints.get(index);
         if (logger_.isTraceEnabled())
-            logger_.trace("Sending a GossipDigestSynMessage to {} ...", to);;
+            logger_.trace("Sending a GossipDigestSynMessage to {} ...", to);
         MessagingService.instance.sendOneWay(message, to);
         return seeds_.contains(to);
     }
@@ -474,21 +474,6 @@ synchronized EndPointState getStateForVersionBiggerThan(InetAddress forEndpoint,
         return reqdEndPointState;
     }
 
-    /*
-     * This method is called only from the JoinVerbHandler. This happens
-     * when a new node coming up multicasts the JoinMessage. Here we need
-     * to add the endPoint to the list of live endpoints.
-    */
-    synchronized void join(InetAddress from)
-    {
-        if ( !from.equals( localEndPoint_ ) )
-        {
-            /* Mark this endpoint as "live" */
-        	liveEndpoints_.add(from);
-            unreachableEndpoints_.remove(from);
-        }
-    }
-
     void notifyFailureDetector(List<GossipDigest> gDigests)
     {
         IFailureDetector fd = FailureDetector.instance;
@@ -566,7 +551,7 @@ void markAlive(InetAddress addr, EndPointState localState)
         if ( !localState.isAlive() )
         {
             isAlive(addr, localState, true);
-            logger_.info("InetAddress {} is now UP", addr);;
+            logger_.info("InetAddress {} is now UP", addr);
         }
     }
 
@@ -574,13 +559,13 @@ private void handleNewJoin(InetAddress ep, EndPointState epState)
     {
         if (justRemovedEndPoints_.containsKey(ep))
             return;
-    	logger_.info("Node {} is now part of the cluster", ep);;
+    	logger_.info("Node {} is now part of the cluster", ep);
         handleMajorStateChange(ep, epState, false);
     }
 
     private void handleGenerationChange(InetAddress ep, EndPointState epState)
     {
-        logger_.info("Node {} has restarted, now UP again", ep);;
+        logger_.info("Node {} has restarted, now UP again", ep);
         handleMajorStateChange(ep, epState, true);
     }
 
@@ -866,39 +851,6 @@ public void stop()
         gossipTimer_ = new Timer(false); // makes the Gossiper reentrant.
     }
 
-    public static class JoinVerbHandler implements IVerbHandler
-    {
-        private static Logger logger_ = LoggerFactory.getLogger( JoinVerbHandler.class);
-
-        public void doVerb(Message message)
-        {
-            InetAddress from = message.getFrom();
-            if (logger_.isDebugEnabled())
-              logger_.debug("Received a JoinMessage from {}", from);
-
-            byte[] bytes = message.getMessageBody();
-            DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
-
-            JoinMessage joinMessage;
-            try
-            {
-                joinMessage = JoinMessage.serializer().deserialize(dis);
-            }
-            catch (IOException e)
-            {
-                throw new RuntimeException(e);
-            }
-            if ( joinMessage.clusterId_.equals( DatabaseDescriptor.getClusterName() ) )
-            {
-                Gossiper.instance.join(from);
-            }
-            else
-            {
-                logger_.warn("ClusterName mismatch from " + from + " " + joinMessage.clusterId_  + "!=" + DatabaseDescriptor.getClusterName());
-            }
-        }
-    }
-
     public static class GossipDigestSynVerbHandler implements IVerbHandler
     {
         private static Logger logger_ = LoggerFactory.getLogger( GossipDigestSynVerbHandler.class);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/JoinMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/JoinMessage.java
index e33bd9ed..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/JoinMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/JoinMessage.java
@@ -1,61 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.gms;
-
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.util.List;
-
-import org.apache.cassandra.io.ICompactSerializer;
-
-class JoinMessage
-{
-    private static ICompactSerializer<JoinMessage> serializer_;
-    static
-    {
-        serializer_ = new JoinMessageSerializer();
-    }
-    
-    static ICompactSerializer<JoinMessage> serializer()
-    {
-        return serializer_;
-    }
-    
-    String clusterId_;
-    
-    JoinMessage(String clusterId)
-    {
-        clusterId_ = clusterId;
-    }
-}
-
-class JoinMessageSerializer implements ICompactSerializer<JoinMessage>
-{
-    public void serialize(JoinMessage joinMessage, DataOutputStream dos) throws IOException
-    {    
-        dos.writeUTF(joinMessage.clusterId_);         
-    }
-
-    public JoinMessage deserialize(DataInputStream dis) throws IOException
-    {
-        String clusterId = dis.readUTF();
-        return new JoinMessage(clusterId);
-    }
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 85051a99..7fe657ee 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -103,7 +103,6 @@
         BOOTSTRAP_TOKEN,
         TREE_REQUEST,
         TREE_RESPONSE,
-        JOIN,
         GOSSIP_DIGEST_SYN,
         GOSSIP_DIGEST_ACK,
         GOSSIP_DIGEST_ACK2,
@@ -224,7 +223,6 @@ public StorageService()
         MessagingService.instance.registerVerbHandlers(Verb.TREE_REQUEST, new TreeRequestVerbHandler());
         MessagingService.instance.registerVerbHandlers(Verb.TREE_RESPONSE, new AntiEntropyService.TreeResponseVerbHandler());
 
-        MessagingService.instance.registerVerbHandlers(Verb.JOIN, new Gossiper.JoinVerbHandler());
         MessagingService.instance.registerVerbHandlers(Verb.GOSSIP_DIGEST_SYN, new Gossiper.GossipDigestSynVerbHandler());
         MessagingService.instance.registerVerbHandlers(Verb.GOSSIP_DIGEST_ACK, new Gossiper.GossipDigestAckVerbHandler());
         MessagingService.instance.registerVerbHandlers(Verb.GOSSIP_DIGEST_ACK2, new Gossiper.GossipDigestAck2VerbHandler());
