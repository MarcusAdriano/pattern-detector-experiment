diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index c3eac4b6..a62813df 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -143,7 +143,7 @@ protected void runTest(String[] args) throws Exception {
 		pc.close();
 		pc = null;
 
-
+		testPoolReset("EmbeddedConnectionPoolDataSource", dsp.getPooledConnection());
 
 
 		EmbeddedXADataSource dscsx = new EmbeddedXADataSource();
@@ -183,6 +183,9 @@ protected void runTest(String[] args) throws Exception {
 		xac.close();
 		xac = null;
 
+		testPoolReset("EmbeddedXADataSource", dsx.getXAConnection());
+
+
 
 		try {
 			DriverManager.getConnection("jdbc:derby:;shutdown=true");
@@ -1214,6 +1217,57 @@ public static String translateIso(int iso)
 		return "unknown";
 	}
 
+	/**
+		When a connection is being pooled, the underlying JDBC embedded
+		connection object is re-used. As each application gets a new
+		Connection object, that is really a wrapper around the old connection
+		it should reset any connection spoecific state on the embedded connection
+		object.
+	*/
+	private static void testPoolReset(String type, PooledConnection pc) throws SQLException
+	{
+		System.out.println("Start testPoolReset " + type);
+		testPoolResetWork("C", pc.getConnection());
+		testPoolResetWork("", pc.getConnection());
+		testPoolResetWork("D", pc.getConnection());
+
+		pc.close();
+		System.out.println("End testPoolReset " + type);
+	}
+
+	private static void testPoolResetWork(String tableAction, Connection conn) throws SQLException
+	{
+		Statement s = conn.createStatement();
+		if (tableAction.equals("C"))
+		{
+			s.execute("CREATE TABLE testPoolResetWork (id int generated always as identity, name varchar(25))");
+		}
+
+		ResultSet rs = s.executeQuery("VALUES IDENTITY_VAL_LOCAL()");
+		rs.next();
+		String val = rs.getString(1);
+		if (!rs.wasNull() || (val != null))
+			System.out.println("FAIL - initial call to IDENTITY_VAL_LOCAL is not NULL!" + val);
+		rs.close();
+
+		s.executeUpdate("INSERT INTO testPoolResetWork(name) values ('derby-222')");
+
+		rs = s.executeQuery("VALUES IDENTITY_VAL_LOCAL()");
+		rs.next();
+		val = rs.getString(1);
+		System.out.println("IDENTITY_VAL_LOCAL=" + val);
+		rs.close();
+
+		if (tableAction.equals("D"))
+		{
+			s.execute("DROP TABLE testPoolResetWork");
+		}
+
+
+		s.close();
+		conn.close();
+
+	}
 
 }
 class cdsXid implements Xid, Serializable
