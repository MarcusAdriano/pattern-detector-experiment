diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 2992fb0e..7e413e27 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -91,6 +91,8 @@
 
     static Map<String, KSMetaData> tables = new HashMap<String, KSMetaData>();
     private static int bmtThreshold = 256;
+    /* if this a row exceeds this threshold, we issue warnings during compaction */
+    private static long rowWarningThreshold = 512 * 1024 * 1024;
 
     /* Hashing strategy Random or OPHF */
     private static IPartitioner partitioner;
@@ -436,6 +438,13 @@ else if (diskAccessMode == DiskAccessMode.mmap_index_only)
                 columnIndexSizeInKB = Integer.parseInt(columnIndexSize);
             }
 
+            String rowWarning = xmlUtils.getNodeValue("/Storage/RowWarningThresholdInMB");
+            if (rowWarning != null)
+            {
+                rowWarningThreshold = Integer.parseInt(rowWarning) * 1024 * 1024;
+                if (rowWarningThreshold <= 0)
+                    throw new ConfigurationException("Row warning threshold must be a positive integer");
+            }
             /* data file and commit log directories. they get created later, when they're needed. */
             dataFileDirectories = xmlUtils.getNodeValues("/Storage/DataFileDirectories/DataFileDirectory");
             logFileDirectory = xmlUtils.getNodeValue("/Storage/CommitLogDirectory");
@@ -982,6 +991,11 @@ public static int getConcurrentWriters()
         return concurrentWriters;
     }
 
+    public static long getRowWarningThreshold()
+    {
+        return rowWarningThreshold;
+    }
+    
     public static String[] getAllDataFileLocations()
     {
         return dataFileDirectories;
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
index b1677e41..23fb4ed9 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -299,9 +299,15 @@ int doCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int
             while (nni.hasNext())
             {
                 CompactionIterator.CompactedRow row = nni.next();
+                long prevpos = writer.getFilePointer();
+
                 writer.append(row.key, row.buffer);
                 validator.add(row);
                 totalkeysWritten++;
+
+                long rowsize = writer.getFilePointer() - prevpos;
+                if (rowsize > DatabaseDescriptor.getRowWarningThreshold())
+                    logger.warn("Large row " + row.key.key + " in " + cfs.getColumnFamilyName() + " " + rowsize + " bytes");
             }
             validator.complete();
         }
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableWriter.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableWriter.java
index 12db4484..13c55402 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableWriter.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableWriter.java
@@ -170,6 +170,11 @@ static String rename(String tmpFilename)
         return filename;
     }
 
+    public long getFilePointer()
+    {
+        return dataFile.getFilePointer();
+    }
+    
     public static SSTableReader renameAndOpen(String dataFileName) throws IOException
     {
         SSTableWriter.rename(indexFilename(dataFileName));
