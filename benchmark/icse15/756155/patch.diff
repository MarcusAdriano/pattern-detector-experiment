diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/io/AIORandomAccessFile.java b/incubator/cassandra/trunk/src/org/apache/cassandra/io/AIORandomAccessFile.java
index e8a38459..3114af76 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/io/AIORandomAccessFile.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/io/AIORandomAccessFile.java
@@ -656,50 +656,6 @@ private int writeAtMost(byte[] b, int off, int len) throws IOException
         this.curr_ += len;
         return len;
     }
-    
-    public static void main(String[] args) throws Throwable
-    {  
-        /*
-        int i = 0;
-        try
-        {
-            RandomAccessFile aRaf2 = new AIORandomAccessFile( new File("/var/cassandra/test.dat"), 64*1024);        
-            aRaf2.seek(0L);
-            while ( i < 10000 )
-            {
-                aRaf2.writeInt(32);
-                aRaf2.writeUTF("Avinash Lakshman");
-                ++i;
-            }
-            aRaf2.close();
-        }
-        catch( IOException ex )
-        {
-            ex.printStackTrace();
-        }
-        */
-        /*
-        int j = 0;
-        try
-        {
-            RandomAccessFile aRaf2 = new AIORandomAccessFile( new File("/var/cassandra/test.dat") );                    
-            while ( j < 10 )
-            {
-                System.out.println( aRaf2.readInt() );
-                System.out.println( aRaf2.readUTF() );
-                ++j;
-            }
-            aRaf2.close();
-        }
-        catch( IOException ex )
-        {
-            ex.printStackTrace();
-        }
-        */
-                
-        ExecutorService es = new ContinuationsExecutor(1, 1, Integer.MAX_VALUE, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>() );
-        es.execute(new ReadImpl());               
-    }
 }
 
 class ReadImpl implements Runnable
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java b/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java
index ae19c9b0..ab48ca04 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java
@@ -338,9 +338,9 @@ public void write(byte[] b, int off, int len) throws IOException
             int n = this.writeAtMost(b, off, len);
             off += n;
             len -= n;
-        }
         this.dirty_ = true;
     }
+    }
     
     /*
      * Write at most "len" bytes to "b" starting at position "off", and return
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/io/ChecksumRandomAccessFile.java b/incubator/cassandra/trunk/src/org/apache/cassandra/io/ChecksumRandomAccessFile.java
index 586d39ef..56ed9591 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/io/ChecksumRandomAccessFile.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/io/ChecksumRandomAccessFile.java
@@ -391,9 +391,9 @@ public void write(byte[] b, int off, int len) throws IOException
             int n = this.writeAtMost(b, off, len);
             off += n;
             len -= n;
-        }
         this.dirty_ = true;
     }
+    }
     
     /*
      * Write at most "len" bytes to "b" starting at position "off", and return
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/io/SSTable.java b/incubator/cassandra/trunk/src/org/apache/cassandra/io/SSTable.java
index 7e19eb5e..459982db 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/io/SSTable.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/io/SSTable.java
@@ -433,6 +433,7 @@ private void initBlockIndex(PartitionerType pType)
     public SSTable(String directory, String filename, PartitionerType pType) throws IOException
     {        
         dataFile_ = directory + System.getProperty("file.separator") + filename + "-Data.db";  
+        // dataWriter_ = SequenceFile.writer(dataFile_);
         dataWriter_ = SequenceFile.bufferedWriter(dataFile_, 4*1024*1024);    
         // dataWriter_ = SequenceFile.chksumWriter(dataFile_, 4*1024*1024);
         SSTable.positionAfterFirstBlockIndex_ = dataWriter_.getCurrentPosition(); 
@@ -748,21 +749,6 @@ private void dumpBlockIndex( SortedMap<String, BlockMetadata> blockIndex) throws
         }
         
         keyPositionInfos.add(new KeyPositionInfo(blockIndex.firstKey(), position));
-        /*
-        try
-        {
-            keyPositionInfos.add(new KeyPositionInfo(blockIndex.firstKey(), position));
-        }
-        catch(Exception ex)
-        {
-            Set<String> keysInBlock = blockIndex.keySet();
-            for( String keyInBlock : keysInBlock )
-            {
-                logger_.warn("BLOCK KEY: " + keyInBlock);
-            }
-            logger_.warn(LogUtil.throwableToString(ex));
-        }
-        */
         blockIndex.clear();        
     }
 
@@ -1088,9 +1074,8 @@ public void close(BloomFilter bf) throws IOException
     	/* reset the buffer and serialize the Bloom Filter. */
         DataOutputBuffer bufOut = new DataOutputBuffer();
         BloomFilter.serializer().serialize(bf, bufOut);
-        bufOut.close();
-
         close(bufOut.getData(), bufOut.getLength());
+        bufOut.close();
         // byte[] bytes = new byte[bufOut.getLength()];        
         // System.arraycopy(bufOut.getData(), 0, bytes, 0, bufOut.getLength());
         // close(bytes, bytes.length);             
