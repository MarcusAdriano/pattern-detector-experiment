diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java
index dae91b90..752a650d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java
@@ -217,15 +217,6 @@ public void bindStatement() throws StandardException {
                     SQLState.LANG_SEQ_INCREMENT_ZERO);
         }
 
-        if (_stepValue.longValue() > _maxValue.longValue()
-                || _stepValue.longValue() < _minValue.longValue()) {
-            throw StandardException.newException(
-                    SQLState.LANG_SEQ_INCREMENT_OUT_OF_RANGE,
-                    _stepValue.toString(),
-                    _minValue.toString(),
-                    _maxValue.toString());
-        }
-
     }
 
     public String statementToString() {
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index c07771de..c1cef28f 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -913,12 +913,12 @@ The message identifier (ie. the value that matches a field in this class)
     String LANG_GEN_COL_BEFORE_TRIG                                             = "42XAA";
     String LANG_NOT_NULL_NEEDS_DATATYPE                                    = "42XAB";
     String LANG_SEQ_INCREMENT_ZERO                                     = "42XAC";
-    String LANG_SEQ_INCREMENT_OUT_OF_RANGE                             = "42XAD";
     String LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE                          = "42XAE";
     String LANG_SEQ_MIN_EXCEEDS_MAX                                    = "42XAF";
     String LANG_SEQ_INVALID_START                                      = "42XAG";    
     String LANG_NEXT_VALUE_FOR_ILLEGAL                                      = "42XAH";    
     String LANG_SEQUENCE_REFERENCED_TWICE                                      = "42XAI";    
+    String LANG_DUPLICATE_CS_CLAUSE                                      = "42XAJ";    
     String LANG_INVALID_USER_AGGREGATE_DEFINITION2                     = "42Y00";
 	String LANG_INVALID_CHECK_CONSTRAINT                               = "42Y01";
 	// String LANG_NO_ALTER_TABLE_COMPRESS_ON_TARGET_TABLE                = "42Y02";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
index 2d594862..8ba8ffd4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
@@ -104,6 +104,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     protected static  final   String  ILLEGAL_COMPARISON = "42818";
     protected static  final   String  ILLEGAL_STORAGE = "42821";
     protected static  final   String  BAD_CAST = "42846";
+    protected static  final   String  DUPLICATE_CLAUSE = "42XAJ";
 
     ///////////////////////////////////////////////////////////////////////////////////
     //
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
index 1c7df892..f2d29cb0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.lang;
 
 import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
 
@@ -195,7 +197,7 @@ public void test_09_CreateOtherSchemaSequence() throws SQLException {
         adminCon.close();
     }
 
-    public void testCreateSequenceWithArguments() throws Exception {
+    public void test_09a_createSequenceWithArguments() throws Exception {
         Connection alphaCon = openUserConnection(ALPHA);
 
         goodStatement(alphaCon,
@@ -243,21 +245,11 @@ public void testCreateSequenceWithArguments() throws Exception {
                         + " MAXVALUE " + Short.MAX_VALUE
                         + " MINVALUE " + Long.MIN_VALUE);
 
-        // increment out of range
-        expectCompilationError(alphaCon,
-                SQLState.LANG_SEQ_INCREMENT_OUT_OF_RANGE,
-                "CREATE SEQUENCE int5 AS INTEGER INCREMENT BY " + Long.MAX_VALUE);
-
         // increment 0
         expectCompilationError(alphaCon,
                 SQLState.LANG_SEQ_INCREMENT_ZERO,
                 "CREATE SEQUENCE int5 AS INTEGER INCREMENT BY 0");
 
-       // increment too big
-        expectCompilationError(alphaCon,
-                SQLState.LANG_SEQ_INCREMENT_OUT_OF_RANGE,
-                "CREATE SEQUENCE int6 AS INTEGER INCREMENT BY " + Long.MAX_VALUE);
-
         goodStatement(alphaCon,
                 "CREATE SEQUENCE long1 AS BIGINT START WITH " + Long.MIN_VALUE + " INCREMENT BY -100 NO CYCLE");
 
@@ -361,5 +353,122 @@ public void test_11_forbiddenContexts() throws Exception
         goodStatement( conn, "select next value for seq_11_a, next value for seq_11_b from sys.systables where 1=2\n" );
     }
 
+    /**
+     * Verify that optional clauses can appear in any order and redundant clauses
+     * are forbidden.
+     */
+    public void test_12_clauseOrder() throws Exception
+    {
+        Connection conn = openUserConnection(ALPHA);
+
+        goodSequence
+            (
+             conn,
+             "seq_12_a", // name
+             "", // clauses
+             "INTEGER", // datatype
+             Integer.MIN_VALUE, // initial
+             Integer.MIN_VALUE, // min
+             Integer.MAX_VALUE, // max
+             1L, // step
+             false // cycle
+             );
+
+        goodSequence
+            (
+             conn,
+             "seq_12_b", // name
+             "minvalue 5 increment by 3 cycle start with 100 maxvalue 1000000 as bigint", // clauses
+             "BIGINT", // datatype
+             100L, // initial
+             5L, // min
+             1000000L, // max
+             3L, // step
+             true // cycle
+             );
+
+        goodSequence
+            (
+             conn,
+             "seq_12_c", // name
+             "increment by 3 as smallint no cycle no maxvalue", // clauses
+             "SMALLINT", // datatype
+             Short.MIN_VALUE, // initial
+             Short.MIN_VALUE, // min
+             Short.MAX_VALUE, // max
+             3L, // step
+             false // cycle
+             );
+
+        goodSequence
+            (
+             conn,
+             "seq_12_d", // name
+             "maxvalue 1000000000 start with -50 increment by -3 cycle no minvalue", // clauses
+             "INTEGER", // datatype
+             -50L, // initial
+             Integer.MIN_VALUE, // min
+             1000000000, // max
+             -3L, // step
+             true // cycle
+             );
+
+        expectCompilationError
+            ( conn, DUPLICATE_CLAUSE, "create sequence bad_12 as smallint as bigint\n" );
+        expectCompilationError
+            ( conn, DUPLICATE_CLAUSE, "create sequence bad_12 start with 3 start with 7\n" );
+        expectCompilationError
+            ( conn, DUPLICATE_CLAUSE, "create sequence bad_12 minvalue 5 no minvalue\n" );
+        expectCompilationError
+            ( conn, DUPLICATE_CLAUSE, "create sequence bad_12 maxvalue 5 no maxvalue\n" );
+        expectCompilationError
+            ( conn, DUPLICATE_CLAUSE, "create sequence bad_12 increment by 7 increment by -7\n" );
+        expectCompilationError
+            ( conn, DUPLICATE_CLAUSE, "create sequence bad_12 no cycle cycle\n" );
+    }
+
+    private void goodSequence
+        (
+         Connection conn,
+         String sequenceName,
+         String clauses,
+         String datatype,
+         long initialValue,
+         long minValue,
+         long maxValue,
+         long stepValue,
+         boolean cycle
+         )
+        throws Exception
+    {
+        String statement = "create sequence " + sequenceName + " " + clauses;
+    
+        goodStatement( conn, statement );
+
+        PreparedStatement ps = chattyPrepare
+            (
+             conn,
+             "select sequencedatatype, startvalue, minimumvalue, maximumvalue, increment, cycleoption\n" +
+             "from sys.syssequences\n" +
+             "where sequencename = ?"
+             );
+        ps.setString( 1, sequenceName.toUpperCase() );
+
+        ResultSet rs = ps.executeQuery();
+
+        rs.next();
+        int col = 1;
+
+        assertEquals( datatype, rs.getString( col++ ) );
+        assertEquals( initialValue, rs.getLong( col++ ) );
+        assertEquals( minValue, rs.getLong( col++ ) );
+        assertEquals( maxValue, rs.getLong( col++ ) );
+        assertEquals( stepValue, rs.getLong( col++ ) );
+        assertEquals( cycle, rs.getString( col++ ).equals( "Y" ) );
+
+        rs.close();
+        ps.close();
+    }
+
 
 }
