diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java
index 9fe198ce..fdb88a57 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java
@@ -731,16 +731,24 @@ private void writeColumn(Object column)
 		if (column instanceof InputStream) 
         {
 			InputStream inColumn = (InputStream) column;
-			int bufferLen = inColumn.available();
+            // Set a reasonable buffer size.
+            // To avoid extremely inefficient reads, and an infinite loop when
+            // InputStream.available() returns zero, a lower limit is set on
+            // the buffer size. To avoid using too much memory (especially in
+            // multi-user environments) an upper limit is set as well.
+            // The limits can be tuned, but note that using a too high default
+            // or lower limit can put unnecessary pressure on the memory sub-
+            // system and the GC process.
+            int bufferLen = Math.min(Math.max(inColumn.available(), 64), 8192);
 			byte[] bufData = new byte[bufferLen];
 
 			do 
             {
-				int lenRead = inColumn.read(bufData, bufferLen, 0);
+                int lenRead = inColumn.read(bufData);
 				if (lenRead != -1) 
                 {
 					fieldDataLength += lenRead;
-					out.write(bufData, lenRead, 0);
+                    out.write(bufData, 0, lenRead);
 				} 
                 else
                 {
