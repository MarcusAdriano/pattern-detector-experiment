diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index d9df8eff..f12dd117 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -370,6 +370,9 @@ public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf)
             ColumnDefinition cd = ColumnDefinition.inflate(aColumn_metadata);
             column_metadata.put(cd.name, cd);
         }
+
+        Integer minct = cf.min_compaction_threshold == null ? DEFAULT_MIN_COMPACTION_THRESHOLD : cf.min_compaction_threshold;
+        Integer maxct = cf.max_compaction_threshold == null ? DEFAULT_MAX_COMPACTION_THRESHOLD : cf.max_compaction_threshold;
         return new CFMetaData(cf.keyspace.toString(),
                               cf.name.toString(),
                               ColumnFamilyType.create(cf.column_type.toString()),
@@ -384,8 +387,8 @@ public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf)
                               cf.read_repair_chance,
                               cf.gc_grace_seconds,
                               validator,
-                              cf.min_compaction_threshold,
-                              cf.max_compaction_threshold,
+                              minct,
+                              maxct,
                               cf.id,
                               column_metadata);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index c393f7f5..92464b7b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -505,9 +505,8 @@ public boolean accept(File pathname)
             {
                 throw new ConfigurationException("Missing replica_placement_strategy directive for " + keyspace.name);
             }
-            String strategyClassName = keyspace.replica_placement_strategy.replace("RackUnawareStrategy", "SimpleStrategy")
-                                                                          .replace("RackAwareStrategy", "OldNetworkTopologyStrategy");
-            Class<AbstractReplicationStrategy> strategyClass = FBUtilities.<AbstractReplicationStrategy>classForName(strategyClassName, "replication-strategy");
+            String strategyClassName = KSMetaData.convertOldStrategyName(keyspace.replica_placement_strategy);
+            Class<AbstractReplicationStrategy> strategyClass = FBUtilities.classForName(strategyClassName, "replication-strategy");
             
             /* Data replication factor */
             if (keyspace.replication_factor == null)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
index 88468a9d..178d400d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
@@ -96,7 +96,8 @@ public static KSMetaData inflate(org.apache.cassandra.config.avro.KsDef ks)
         Class<AbstractReplicationStrategy> repStratClass;
         try
         {
-            repStratClass = (Class<AbstractReplicationStrategy>)Class.forName(ks.strategy_class.toString());
+            String strategyClassName = convertOldStrategyName(ks.strategy_class.toString());
+            repStratClass = (Class<AbstractReplicationStrategy>)Class.forName(strategyClassName);
         }
         catch (Exception ex)
         {
@@ -119,4 +120,11 @@ public static KSMetaData inflate(org.apache.cassandra.config.avro.KsDef ks)
 
         return new KSMetaData(ks.name.toString(), repStratClass, strategyOptions, ks.replication_factor, cfMetaData);
     }
+
+    public static String convertOldStrategyName(String name)
+    {
+        return name.replace("RackUnawareStrategy", "SimpleStrategy")
+                   .replace("RackAwareStrategy", "OldNetworkTopologyStrategy")
+                   .replace("DatacenterShardStrategy", "NetworkTopologyStrategy");
+    }
 }
