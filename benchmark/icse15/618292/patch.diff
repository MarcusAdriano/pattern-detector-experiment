diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientDataSourceFactory.java b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientDataSourceFactory.java
index 614bcbca..e1357de4 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientDataSourceFactory.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientDataSourceFactory.java
@@ -43,7 +43,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * getObjectInstance, which is called by a JNDI service provider to reconstruct an object when that object is retrieved
  * from JNDI. A JDBC driver vendor should provide an object factory as part of their JDBC 2.0 product.
  *
- * @see ClientDataSource
+ * @see org.apache.derby.jdbc.ClientDataSource
  */
 public class ClientDataSourceFactory implements javax.naming.spi.ObjectFactory {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
index 6502cb5d..dec83601 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
@@ -349,7 +349,7 @@ public static TypeDescriptor getCatalogType(TypeDescriptor catalogType,
 	 * Get a catalog type that corresponds to a SQL Row Multiset
 	 *
 	 * @param columnNames   Names of the columns in the Row Muliset
-	 * @param types                 Types of the columns in the Row Muliset
+	 * @param catalogTypes  Types of the columns in the Row Muliset
 	 *
 	 * @return	A new DataTypeDescriptor describing the SQL Row Multiset
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 477fe122..ab210ae7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -997,7 +997,7 @@ boolean isMaterialized () {
     /**
      * Return locator for this lob.
      * 
-     * @return
+     * @return The locator identifying this lob.
      */
     public int getLocator() {
         return locator;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java
index a8273e2a..069379b4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java
@@ -2057,11 +2057,11 @@ public void testAnyResultSet() throws Exception {
      * @param generatedType BY DEFAULT or ALWAYS
      * @throws Exception all errors passed on to JUnit
      */
-    private void testGeneratedIdentity(String dataType, String generateType) 
+    private void testGeneratedIdentity(String dataType, String generatedType) 
         throws Exception {
         Statement s = createStatement();
         s.execute("CREATE TABLE T(GI "+dataType+" PRIMARY KEY GENERATED "+
-                  generateType+
+                  generatedType+
                   " AS IDENTITY (START WITH 5, INCREMENT BY 10), "+
                   "L VARCHAR(8))");
         PreparedStatement implicit = 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
index 4afe4e97..ba566dfb 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
@@ -993,7 +993,7 @@ private static void assertRowInResultSet(ResultSet rs, int rowNum,
     /**
      * See assertRowInResultSet(...) above.
      *
-     * @param BitSet colsToCheck If non-null then for every bit b
+     * @param colsToCheck If non-null then for every bit b
      *   that is set in colsToCheck, we'll compare the (b+1)-th column
      *   of the received result set's current row to the i-th column
      *   of expectedRow, where 0 <= i < # bits set in colsToCheck.
