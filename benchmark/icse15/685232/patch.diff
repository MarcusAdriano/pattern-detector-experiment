diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
index 41b95698..a3eaa294 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java
@@ -106,10 +106,41 @@ static SchemaDescriptor getSchemaDescriptorForCreate(
 
 			if (activation.getLanguageConnectionContext().
 					isInitialDefaultSchema(schemaName)) {
-				// DERBY-48: This operation creates the user's initial default
-				// schema and we don't want to hold a lock for SYSSCHEMAS for
-				// the duration of the user transaction, so we perform the
-				// creation in a nested transaction if possible.
+				// DERBY-48: This operation creates the user's initial
+				// default schema and we don't want to hold a lock for
+				// SYSSCHEMAS for the duration of the user transaction
+				// since connection attempts may block, so we perform
+				// the creation in a nested transaction (if possible)
+				// so we can commit at once and release locks.
+				executeCAPreferSubTrans(csca, tc, activation);
+			} else {
+				// create the schema in the user transaction
+				try {
+					csca.executeConstantAction(activation);
+				} catch (StandardException se) {
+					if (se.getMessageId()
+							.equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
+						// Ignore "Schema already exists". Another thread has
+						// probably created it after we checked for it
+					} else {
+						throw se;
+					}
+				}
+			}
+
+
+			sd = dd.getSchemaDescriptor(schemaName, tc, true);
+		}
+
+		return sd;
+	}
+
+
+	private static void executeCAPreferSubTrans
+		(CreateSchemaConstantAction csca,
+		 TransactionController tc,
+		 Activation activation) throws StandardException {
+
 				TransactionController useTc    = null;
 				TransactionController nestedTc = null;
 
@@ -181,26 +212,6 @@ static SchemaDescriptor getSchemaDescriptorForCreate(
 					nestedTc.commit();
 					nestedTc.destroy();
 				}
-			} else {
-				// create the schema in the user transaction always
-				try {
-					csca.executeConstantAction(activation);
-				} catch (StandardException se) {
-					if (se.getMessageId()
-							.equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
-						// Ignore "Schema already exists". Another thread has
-						// probably created it after we checked for it
-					} else {
-						throw se;
-					}
-				}
-			}
-
-
-			sd = dd.getSchemaDescriptor(schemaName, tc, true);
-		}
-
-		return sd;
 	}
 
 
