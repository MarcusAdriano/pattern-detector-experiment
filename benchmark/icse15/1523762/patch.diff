diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/LogicalConnection40.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/LogicalConnection40.java
index 8273215a..3fae57aa 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/LogicalConnection40.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/LogicalConnection40.java
@@ -251,7 +251,7 @@ public void setClientInfo(Properties properties)
      *
      * @param name a property key <code>String</code>
      * @param value a property value <code>String</code>
-     * @exception SQLException if an error occurs
+     * @exception SQLClientInfoException if an error occurs
      */
     public void setClientInfo(String name, String value)
         throws SQLClientInfoException {
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetConnection40.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetConnection40.java
index 00ef6bbf..ea849490 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetConnection40.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetConnection40.java
@@ -233,7 +233,7 @@ synchronized public void close() throws SQLException {
      *
      * @param name a property key <code>String</code>
      * @param value a property value <code>String</code>
-     * @exception SQLException always.
+     * @exception SQLClientInfoException always.
      */
     public void setClientInfo(String name, String value)
     throws SQLClientInfoException{
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetResultSet40.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetResultSet40.java
index 4c86e722..1827b556 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetResultSet40.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetResultSet40.java
@@ -179,7 +179,7 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      *
      * @param  interfaces a Class defining an interface
      * @return an object that implements the interface
-     * @throws java.sql.SQLExption if no object if found that implements the 
+     * @throws SQLException if no object if found that implements the 
      * interface
      */
     public <T> T unwrap(java.lang.Class<T> interfaces)
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/catalog/SystemProcedures.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/catalog/SystemProcedures.java
index 96d50478..e894ab71 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/catalog/SystemProcedures.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/catalog/SystemProcedures.java
@@ -679,7 +679,7 @@ private static boolean isForODBC(String options) {
      * @param key       The property key.
      * @param value     The new value, if null the property is deleted.
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_SET_DATABASE_PROPERTY(
     String  key,
@@ -696,7 +696,7 @@ public static void SYSCS_SET_DATABASE_PROPERTY(
      *
      * @param key       The property key.
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
     public static String SYSCS_GET_DATABASE_PROPERTY(
     String  key)
@@ -881,7 +881,7 @@ private static String basicSchemaTableValidation(
      * @param sequential    if non-zero then rebuild indexes sequentially,
      *                      if 0 then rebuild all indexes in parallel.
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_COMPRESS_TABLE(
     String  schemaname,
@@ -909,7 +909,7 @@ public static void SYSCS_COMPRESS_TABLE(
      * Call internal routine to freeze the database so that a backup
      * can be made.
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_FREEZE_DATABASE()
 		throws SQLException
@@ -924,7 +924,7 @@ public static void SYSCS_FREEZE_DATABASE()
      * by calling SYSCS_FREEZE_DATABASE().
      * can be made.
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_UNFREEZE_DATABASE()
 		throws SQLException
@@ -953,7 +953,7 @@ public static void SYSCS_CHECKPOINT_DATABASE()
      * @param backupDir the name of the directory where the backup should be
      *                  stored. This directory will be created if it 
      *                  does not exist.
-     * @exception StandardException thrown on error
+     * @exception SQLException if a database error occurs
      */
     public static void SYSCS_BACKUP_DATABASE(String  backupDir)
 		throws SQLException
@@ -975,7 +975,7 @@ public static void SYSCS_BACKUP_DATABASE(String  backupDir)
      * @param backupDir the name of the directory where the backup should be
      *                  stored. This directory will be created if it 
      *                  does not exist.
-     * @exception StandardException thrown on error
+     * @exception SQLException if a database error occurs
      */
     public static void SYSCS_BACKUP_DATABASE_NOWAIT(String  backupDir)
         throws SQLException
@@ -1004,7 +1004,7 @@ public static void SYSCS_BACKUP_DATABASE_NOWAIT(String  backupDir)
      * @param deleteOnlineArchivedLogFiles  If <tt>non-zero</tt> deletes online 
      *                 archived log files that exist before this backup, delete 
      *                 will occur  only after the backup is  complete.
-     * @exception StandardException thrown on error.
+     * @exception SQLException if a database error occurs
      */
     public static void SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(
     String  backupDir,
@@ -1040,7 +1040,7 @@ public static void SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(
      *                  archived log files that exist before this backup, delete     
      *                  will occur  only after the backup is  complete.
      *
-     * @exception StandardException thrown on error.
+     * @exception SQLException if a database error occurs
      */
     public static void SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT(
     String  backupDir,
@@ -1062,7 +1062,7 @@ public static void SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT(
 	 * @param deleteOnlineArchivedLogFiles  If <tt>non-zero</tt> deletes all the
 	 *        online archived log files that exist before this call immediately.
      *
-	 * @exception StandardException Thrown on error
+	 * @exception SQLException if a database error occurs
 	 */
 
     public static void SYSCS_DISABLE_LOG_ARCHIVE_MODE(
@@ -1431,7 +1431,7 @@ private static void checkJarSQLName(String sqlName)
 	 * IN TABLENAME    VARCHAR(128),  IN FILENAME VARCHAR(32672) , 
 	 * IN COLUMNDELIMITER CHAR(1),  IN CHARACTERDELIMITER CHAR(1) ,  
 	 * IN CODESET VARCHAR(128))
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
 	public static void SYSCS_EXPORT_TABLE(
 	String  schemaName,
@@ -1460,7 +1460,7 @@ public static void SYSCS_EXPORT_TABLE(
      * IN TABLENAME    VARCHAR(128),  IN FILENAME VARCHAR(32672) , 
      * IN COLUMNDELIMITER CHAR(1),  IN CHARACTERDELIMITER CHAR(1) ,  
      * IN CODESET VARCHAR(128), IN LOBSFILENAME VARCHAR(32672))
-     * @exception  StandardException  Standard exception policy.
+     * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE(
     String  schemaName,
@@ -1492,7 +1492,7 @@ public static void SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE(
 	 * IN COLUMNDELIMITER CHAR(1),  IN CHARACTERDELIMITER CHAR(1) ,  
 	 * IN CODESET VARCHAR(128))
 	 *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
 	public static void SYSCS_EXPORT_QUERY(
     String  selectStatement,
@@ -1523,7 +1523,7 @@ public static void SYSCS_EXPORT_QUERY(
      * IN COLUMNDELIMITER CHAR(1),  IN CHARACTERDELIMITER CHAR(1) ,  
      * IN CODESET VARCHAR(128), IN LOBSFILENAME VARCHAR(32672))
      *
-     * @exception  StandardException  Standard exception policy.
+     * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_EXPORT_QUERY_LOBS_TO_EXTFILE(
     String  selectStatement,
@@ -1555,7 +1555,7 @@ public static void SYSCS_EXPORT_QUERY_LOBS_TO_EXTFILE(
 	 * IN TABLENAME    VARCHAR(128),  IN FILENAME VARCHAR(32672) , 
 	 * IN COLUMNDELIMITER CHAR(1),  IN CHARACTERDELIMITER CHAR(1) ,  
 	 * IN CODESET VARCHAR(128), IN  REPLACE SMALLINT)
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
 	public static void SYSCS_IMPORT_TABLE(
 	String  schemaName,
@@ -1605,7 +1605,7 @@ private static void rollBackAndThrowSQLException(Connection conn,
      * IN TABLENAME    VARCHAR(128),  IN FILENAME VARCHAR(32672) , 
      * IN COLUMNDELIMITER CHAR(1),  IN CHARACTERDELIMITER CHAR(1) ,  
      * IN CODESET VARCHAR(128), IN  REPLACE SMALLINT)
-     * @exception  StandardException  Standard exception policy.
+     * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(
     String  schemaName,
@@ -1645,7 +1645,7 @@ public static void SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(
 	 *                    IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128), 
 	 *                    IN REPLACE SMALLINT)
 	 *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
 	public static void SYSCS_IMPORT_DATA(
     String  schemaName,
@@ -1691,7 +1691,7 @@ public static void SYSCS_IMPORT_DATA(
      *               IN CHARACTERDELIMITER CHAR(1), IN CODESET VARCHAR(128), 
      *               IN REPLACE SMALLINT)
      *
-     * @exception  StandardException  Standard exception policy.
+     * @exception  SQLException  if a database error occurs
      **/
     public static void SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(
     String  schemaName,
@@ -1728,7 +1728,7 @@ public static void SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(
 	 * SYSCS_BULK_INSERT (IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), 
 	 *                    IN VTINAME VARCHAR(32672), IN VTIARG VARCHAR(32672))
 	 *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
 	public static void SYSCS_BULK_INSERT(
     String  schemaName,
@@ -2030,7 +2030,7 @@ public static void SYSCS_EMPTY_STATEMENT_CACHE()
 	 /**
      * this procedure switches between the different xplain modes 
      * @param mode either 0 for explain only, or 1 for explain & execute (default)
-     * @throws SQLException
+     * @throws SQLException, StandardException
      */
     public static void SYSCS_SET_XPLAIN_MODE(int mode)
                 throws SQLException, StandardException
@@ -2044,7 +2044,7 @@ public static void SYSCS_SET_XPLAIN_MODE(int mode)
      * are being XPLAIN'd only, not executed.
      *
      * @return 0 if XPLAIN mode is off, non-zero if on.
-     * @throws SQLException
+     * @throws SQLException, StandardException
      */
     public static int SYSCS_GET_XPLAIN_MODE()
                 throws SQLException, StandardException
@@ -2058,7 +2058,7 @@ public static int SYSCS_GET_XPLAIN_MODE()
      * textual stream printout. If it is set, statisitcs information is
      * stored in that schema in user tables.
      * @param schemaName May be an empty string.
-     * @throws SQLException
+     * @throws SQLException, StandardException
      */
     public static void SYSCS_SET_XPLAIN_SCHEMA(String schemaName)
                 throws SQLException, StandardException
@@ -2152,7 +2152,7 @@ private static void createXplainTable(
     /**
      * This procedure returns the current set XPLAIN_SCHEMA
      * @return schema name, may be blank if no schema currently set.
-     * @throws SQLException
+     * @throws SQLException, StandardException
      */
     public static String SYSCS_GET_XPLAIN_SCHEMA()
                 throws SQLException, StandardException
@@ -2404,7 +2404,7 @@ private static  String  normalizeUserName( String userName )
      * @param schemaName    The name of the schema holding the sequence.
      * @param sequenceName    The name of the sequence in that schema.
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  SQLException  if a database error occurs
      **/
     public static Long SYSCS_PEEK_AT_SEQUENCE( String schemaName, String sequenceName )
         throws SQLException
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/db/Database.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/db/Database.java
index d4fc22c8..424cd43e 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/db/Database.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/db/Database.java
@@ -103,7 +103,7 @@ Is the database active (open).
 	 * and at the system level.
 	 *
 	 * @return	The authentication service handle for the database
-	 * @exception Standard Derby exception policy
+	 * @exception StandardException Standard Derby exception policy
 	 */
 	public AuthenticationService getAuthenticationService()
 		throws StandardException;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
index c39ee43c..96066551 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java
@@ -307,7 +307,7 @@ public final boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      *
      * @param  interfaces a Class defining an interface
      * @return an object that implements the interface
-     * @throws java.sql.SQLExption if no object if found that implements the 
+     * @throws SQLException if no object if found that implements the 
      * interface
      */
     public final <T> T unwrap(java.lang.Class<T> interfaces) 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
index 6ebea33f..d4439f5e 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
@@ -101,8 +101,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * @param portNumber    portNumber to listen on
 	 * @param userName      the user name for actions requiring authorization
 	 * @param password      the password for actions requiring authorization
-     *
-	 * @throws Exception on error
 	 */
 	public void setStartInfo(InetAddress listenAddress, int portNumber,
                              String userName, String password,
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
index 7470427a..147c9b20 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
@@ -389,7 +389,7 @@ public final String readUTF() throws IOException {
      *                      one passed in.
      * @param utflen the byte length of the value, or {@code 0} if unknown
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  IOException  if an I/O error happens
      **/
     public final int readDerbyUTF(char[][] rawData_array, int utflen)
         throws IOException
@@ -558,7 +558,7 @@ else if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80))
      * 4 byte- 1xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx val > 16383 && <= MAX_INT
      * </PRE>
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  IOException  if an I/O error happens
      **/
     public final int readCompressedInt()
         throws IOException
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java
index 8d8982a5..7a8edce5 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/DataInputUtil.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.iapi.services.io;
 
 import java.io.DataInput;
+
 import java.io.IOException;
 
 /**
@@ -31,7 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     /**
      * Skips requested number of bytes,
-     * throws EOFException if there is too few bytes in the DataInput.
+     * throws java.io.EOFException if there is too few bytes in the DataInput.
      * @param in
      *      DataInput to be skipped.
      * @param skippedBytes
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/Limit.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/Limit.java
index 8a41436f..9aec5448 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/Limit.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/Limit.java
@@ -42,7 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		more beyond the limit will result in an EOFException
 
 		@exception IOException IOException from some underlying stream
-		@exception EOFException The set limit would exceed
+		@exception java.io.EOFException The set limit would exceed
 		the available data in the stream.
 	*/
 	public void setLimit(int length)
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
index a55b02f9..12a421c4 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
@@ -116,15 +116,10 @@ public int available() throws IOException {
 		call up to and including length bytes can be read from or skipped in
 		the stream. Any attempt to read more than length bytes will
 		result in an EOFException
-
-		@exception IOException IOException from some underlying stream
-		@exception EOFException The set limit would exceed
-		the available data in the stream.
 	*/
 	public void setLimit(int length) {
 		remainingBytes = length;
 		limitInPlace = true;
-		return;
 	}
 
 	/**
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitReader.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
index dfd13571..7ab58523 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
@@ -109,16 +109,11 @@ public void close()
         or skipped in the stream.
         Any attempt to read more than length characters will
 		result in an EOFException
-
-		@exception IOException IOException from some underlying stream
-		@exception EOFException The set limit would exceed
-		the available data in the stream.
 	*/
 	public void setLimit(int length) 
 	{
 		remainingCharacters = length;
 		limitInPlace = true;
-		return;
 	}
     
     /**
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/jmx/ManagementService.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/jmx/ManagementService.java
index 425b71be..b4b03cf3 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/jmx/ManagementService.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/jmx/ManagementService.java
@@ -71,7 +71,6 @@ public Object registerMBean(Object bean,
      * Unregister a mbean previously registered with registerMBean.
      * 
      * @param mbeanIdentifier An identifier returned by registerMBean.
-     * @throws StandardException Error unregistering bean.
      */
     public void unregisterMBean(Object mbeanIdentifier);
 }
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java
index 5f79d819..3cb7952d 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java
@@ -75,14 +75,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
 		could not be granted.
 
-		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
-		@exception org.apache.derby.iapi.error.StandardException The wait for the lock timed out (message id will be LockFactory.TimeOut).
-		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
-		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
-		(message id will be LockFactory.InterruptedExceptionId)
-		@exception StandardException Standard Derby error policy.
-
-	*/
+        @exception StandardException if a deadlock has occurred (message id
+            will be LockFactory.Deadlock), or if the wait for the lock timed
+            out (message id will be LockFactory.TimeOut), or if another thread
+            interrupted this thread while it was waiting for the lock (this will
+            be a StandardException with a nested InterruptedException, and the
+            message id will be LockFactory.InterruptedExceptionId), or if
+            any other error occurs when locking the object	*/
 	public boolean lockObject(CompatibilitySpace compatibilitySpace,
 							  Object group, Lockable ref, Object qualifier,
 							  int timeout)
@@ -170,13 +169,13 @@ public boolean areLocksHeld(CompatibilitySpace compatibilitySpace,
 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
 		could not be granted.
 
-		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
-		@exception org.apache.derby.iapi.error.StandardException The wait for the lock timed out (message id will be LockFactory.TimeOut).
-		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
-		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
-		(message id will be LockFactory.InterruptedExceptionId)
-		@exception StandardException Standard Derby error policy.
-
+        @exception StandardException if a deadlock has occurred (message id
+            will be LockFactory.Deadlock), or if the wait for the lock timed
+            out (message id will be LockFactory.TimeOut), or if another thread
+            interrupted this thread while it was waiting for the lock (this will
+            be a StandardException with a nested InterruptedException, and the
+            message id will be LockFactory.InterruptedExceptionId), or if
+            any other error occurs when locking the object
 	*/
 	public boolean zeroDurationlockObject(CompatibilitySpace compatibilitySpace,
 										  Lockable ref, Object qualifier,
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/monitor/PersistentService.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/monitor/PersistentService.java
index 3b9474d3..594ec4d4 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/monitor/PersistentService.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/services/monitor/PersistentService.java
@@ -178,7 +178,8 @@ public String createServiceRoot(String name, boolean deleteExisting)
 		Convert a service name into its canonical form. Returns null if the name
 		cannot be converted into a canonical form.
 		
-		@exception No canonical name, name probably invalid
+		@exception StandardException if an error happens when converting the
+        name (name probably invalid)
 	*/
 	public String getCanonicalServiceName(String name)
 		throws StandardException;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/ResultColumnDescriptor.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/ResultColumnDescriptor.java
index 171265cd..b3449255 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/ResultColumnDescriptor.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/ResultColumnDescriptor.java
@@ -68,7 +68,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * @return	A String containing the name of the base table of the Column
 	 *		is in. If the column is not in a table (i.e. is a
 	 * 		derived column), it returns NULL.
-	 * @return	The name of the Column's base table. If the column
+	 * The name of the Column's base table. If the column
 	 *		is not in a schema (i.e. is a derived column), it returns NULL.
 	 */
 	String	getSourceTableName();
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/compile/TypeCompilerFactory.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/compile/TypeCompilerFactory.java
index 3b18fe54..375ca95b 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/compile/TypeCompilerFactory.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/compile/TypeCompilerFactory.java
@@ -36,8 +36,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * Get a TypeCompiler corresponding to the given TypeId.
 	 *
 	 * @return	A TypeCompiler
-	 *
-	 * @exception StandardException		Thrown on failure
 	 */
 	public TypeCompiler getTypeCompiler(TypeId typeId);
 }
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/Authorizer.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/Authorizer.java
index 5e94d78a..e95b528e 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/Authorizer.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/Authorizer.java
@@ -142,7 +142,6 @@ public void setReadOnlyConnection(boolean on, boolean authorize)
 	 Refresh this authorizer to reflect a change in the database
 	 permissions.
 	 
-	 @exception AuthorizerSessionException Connect permission gone.
 	 @exception StandardException Oops.
 	 */
    public void refresh() throws StandardException;  
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 4864a8a7..06a2192b 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -565,8 +565,6 @@ public boolean verifyAllHeldResultSetsAreClosed()
 	 * which we compile against.
 	 *
 	 * @return the compiler context
-	 *
-	 * @exception StandardException thrown on failure
 	 */
 	public	CompilerContext pushCompilerContext();
 
@@ -578,8 +576,6 @@ public boolean verifyAllHeldResultSetsAreClosed()
 	 * @param sd the default schema 
 	 *
 	 * @return the compiler context
-	 *
-	 * @exception StandardException thrown on failure
 	 */
 	public	CompilerContext pushCompilerContext(SchemaDescriptor sd);
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index 2672f0e8..593bdc75 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -1776,7 +1776,7 @@ public void dropFileInfoDescriptor(FileInfoDescriptor fid)
 	 * 
 	 * @return  array of row locations, null if table has no autoinc columns.
 	 *
-	 * @exception standard exception on error.
+	 * @exception StandardException standard exception on error.
 	 */
 	public RowLocation[] computeAutoincRowLocations(TransactionController tc,
 											   TableDescriptor td)
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
index 34c796f8..b5554f74 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
@@ -1147,8 +1147,6 @@ public ColumnDescriptor	getColumnDescriptor(int columnNumber)
 	 * for the table.
 	 *
 	 * @return	A ConglomerateDescriptor[] for looping through the table's conglomerates
-	 *
-	 * @exception StandardException		Thrown on failure
 	 */
 	public ConglomerateDescriptor[]	getConglomerateDescriptors()
 	{
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/FileResource.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/FileResource.java
index b45b313a..d5a923d7 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/FileResource.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/FileResource.java
@@ -91,7 +91,7 @@ public void remove(String name, long currentGenerationId)
      * During hard upgrade to >= 10.9, remove a jar directory (at post-commit 
      * time) from the database.
      * @param f
-     * @exception standard error policy
+     * @exception StandardException standard error policy
      */
     public void removeJarDir(String f) throws StandardException;
     
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java
index b80dccaa..f423bfdd 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/access/conglomerate/Conglomerate.java
@@ -163,8 +163,6 @@ boolean fetchMaxOnBTree(
      * containerid.
      *
 	 * @return The containerid.
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
     long getContainerid();
 
@@ -176,8 +174,6 @@ boolean fetchMaxOnBTree(
      * and segment id.
      *
 	 * @return The ContainerKey.
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
     ContainerKey getId();
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java
index b76f8a2b..9741b3f4 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java
@@ -189,7 +189,6 @@ the container (other than the create) is ever logged.  The difference
 
 		@see Page#unlatch
 
-		@exception StandardException	Standard Derby error policy
 		@exception StandardException If a page could not be allocated.
 	*/
 	public Page addPage() throws StandardException;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/FetchDescriptor.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/FetchDescriptor.java
index 10338a86..c4a4bc2d 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/FetchDescriptor.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/FetchDescriptor.java
@@ -114,8 +114,6 @@ public FetchDescriptor(
      * parameters work together to describe a "row".
      *
 	 * @return The column list bit map.
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
     public final FormatableBitSet getValidColumns()
     {
@@ -158,8 +156,6 @@ public final void setValidColumns(
      * A null qualifier array means there are no qualifiers.
      *
 	 * @return The qualifier array, it may be null.
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
     public final Qualifier[][] getQualifierList()
     {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Page.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Page.java
index 47471e2a..e0e41004 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Page.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Page.java
@@ -133,8 +133,6 @@ page manager promises to call pageBeingEvicted() once before clearing
      * <p>
      *
 	 * @return an invalid record handle.
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
 	public RecordHandle getInvalidRecordHandle();
 
@@ -268,9 +266,8 @@ boolean spaceForInsert(
      *
      * @return A RecordHandle representing the new record.
      *
-     * @exception StandardException	Standard Derby error policy
-     * @exception StandardException The container was not opened in update mode.
-     * @exception StandardException Row cannot fit on the page or row is null.
+     * @exception StandardException	if the container was not opened in update
+     * mode, or if the row cannot fit on the page, or if the row is null
      **/
 	RecordHandle insert(
     Object[]            row, 
@@ -485,9 +482,8 @@ int getNextSlotNumber(RecordHandle handle)
      * @return A RecordHandle representing the new record, or null if the row 
      *         will not fit on a non-empty page.
      *
-     * @exception StandardException	Standard Derby error policy
-     * @exception StandardException The container was not opened in update mode.
-     * @exception StandardException The row cannot fit on the page
+     * @exception StandardException	if the container was not opened in update
+     * mode, or if the row cannot fit on the page, or if the row is null
      *
      * @see LogicalUndo
      * @see LogicalUndoable
@@ -723,7 +719,8 @@ passed to the openContainer() call before the record is updated.
 		                                the slot is not on the page, or if the 
                                         record is deleted, or if the fieldId 
                                         is not on the record and (fieldId - 1)
-                                        does not exist.
+                                        does not exist, or if the container was
+                                        not opened in update mode.
 
 		@exception StandardException 
 		The container was not opened in update mode.
@@ -787,14 +784,9 @@ public int fetchNumFieldsAtSlot(int slot)
      *                  the access code where the logical undo logic resides.
      *                  Null if logical undo is not necessary.
      * 
-     * @exception StandardException	Standard Derby error policy
-     * @exception StandardException The container was not opened in update mode.
-     * @exception StandardException A statement level exception is thrown when 
-     *                              trying to delete an already deleted record,
-     *                              or undelete a not deleted record.
-     *
-     * @exception StandardException A statement level exception is thrown if 
-     *                              the slot is not on the page.
+     * @exception StandardException if the container was not opened in update
+     * mode, or if an attempt was made to delete an already deleted record or
+     * undelete a not deleted record, or if the slot is not on the page     *
      *
      * @see LockingPolicy
      * @see LogicalUndo
@@ -947,9 +939,8 @@ passed to the openContainer() call before the record is undeleted.
 		@param validColumns a bit map of which columns in the row is valid.
 		ValidColumns will not be changed by RawStore.
 
-		@exception StandardException	Standard Derby error policy
-		@exception StandardException The container was not opened in update mode.
-		@exception StandardException if the slot is not on the page.
+		@exception StandardException the container was not opened in update
+		    mode, or the slot is not on the page
 
 	*/
 	RecordHandle updateAtSlot(
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Transaction.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
index 5843f406..973621c0 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
@@ -162,7 +162,7 @@ Obtain a locking policy for use in openContainer(). The mode
         transaction is then aborted and then an exception of Transaction
 		severity is thrown nesting the original exception.
 
-		@exception StandardException Any exception more severe than a
+		Any exception more severe than a
         Transaction exception is not caught and the transaction is not aborted.
         The transaction will be aborted by the standard context mechanism.
 
@@ -187,7 +187,7 @@ Everything else is identical to commit(), use this at your own risk.
         transaction is then aborted and then an exception of Transaction
 		severity is thrown nesting the original exception.
 
-		@exception StandardException Any exception more severe than a
+		Any exception more severe than a
         Transaction exception is not caught and the transaction is not aborted.
         The transaction will be aborted by the standard context mechanism.
 	*/
@@ -215,7 +215,6 @@ Everything else is identical to commit(), use this at your own risk.
 
 		@see RawStoreFactory#startTransaction
 
-		@exception StandardException Standard Derby error policy
 		@exception StandardException A transaction level exception is 
         thrown if the transaction is not idle.
 
@@ -228,7 +227,6 @@ Everything else is identical to commit(), use this at your own risk.
 
 		@see RawStoreFactory#startTransaction
 
-		@exception StandardException Standard Derby error policy
 		@exception StandardException A transaction level exception is 
         thrown if the transaction is not idle.
 
@@ -251,7 +249,6 @@ Everything else is identical to commit(), use this at your own risk.
                     A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
 
 		@return returns total number of savepoints in the stack.
-		@exception StandardException  Standard Derby exception policy
 		@exception StandardException
         A statement level exception is thrown if a savepoint already 
         exists in the current transaction with the same name.
@@ -272,7 +269,6 @@ in the setSavePoint() call.
                     A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
 
 		@return returns total number of savepoints in the stack.
-		@exception StandardException  Standard Derby exception policy
 		@exception StandardException
         A statement level exception is thrown if a savepoint already
         exists in the current transaction with the same name.
@@ -295,7 +291,6 @@ in the setSavePoint() call.
                     A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
 
 		@return returns total number of savepoints in the stack.
-		@exception StandardException  Standard Derby exception policy
 		@exception StandardException
         A statement level exception is thrown if no savepoint exists with 
         the given name.
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/HarmonySerialBlob.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/HarmonySerialBlob.java
index bbfa5aee..7ad633df 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/HarmonySerialBlob.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/HarmonySerialBlob.java
@@ -57,8 +57,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * @param blob
      *            the given blob
      * @throws SQLException
-     *             if an error is encountered during serialization
-     * @throws SQLException
+     *             if an error is encountered during serialization, or
      *             if <code>blob</code> is null
      */
     public HarmonySerialBlob(Blob blob) throws SQLException {
@@ -76,8 +75,7 @@ public HarmonySerialBlob(Blob blob) throws SQLException {
      * @param buf
      *            the given buffer
      * @throws SQLException
-     *             if an error is encountered during serialization
-     * @throws SQLException
+     *             if an error is encountered during serialization, or
      *             if a SQL error is encountered
      */
     public HarmonySerialBlob(byte[] buf) {
@@ -154,8 +152,7 @@ public long length() throws SQLException {
      * @return a long value with the position at which the pattern begins. -1 if
      *         the pattern is not found in this Blob.
      * @throws SQLException
-     *             if an error occurs accessing the Blob
-     * @throws SQLException
+     *             if an error occurs accessing the Blob, or
      *             if an error is encountered
      */
     public long position(Blob pattern, long start) throws SQLException {
@@ -176,8 +173,7 @@ public long position(Blob pattern, long start) throws SQLException {
      * @return a long value with the position at which the pattern begins. -1 if
      *         the pattern is not found in this Blob.
      * @throws SQLException
-     *             if an error is encountered
-     * @throws SQLException
+     *             if an error is encountered, or
      *             if an error occurs accessing the Blob
      */
     public long position(byte[] pattern, long start) throws SQLException {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/PositionedStream.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/PositionedStream.java
index f8f5b7ef..32f4cd9d 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/PositionedStream.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/PositionedStream.java
@@ -58,7 +58,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *
      * @param requestedPos requested byte position, first position is {@code 0}
      * @throws IOException if accessing the stream fails
-     * @throws EOFException if the requested position is equal to or larger
+     * @throws java.io.EOFException if the requested position is equal to or larger
      *      than the length of the stream
      * @throws StandardException if an error occurs in store
      */
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLChar.java
index f9ea7157..6fe04752 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -886,9 +886,6 @@ public boolean isNull()
         @exception  IOException  if an I/O error occurs.
         @since      JDK1.0
 
-
-      @exception IOException thrown by writeUTF
-
       @see java.io.DataInputStream
 
     */
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLDate.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLDate.java
index 12bb9a56..c307c1eb 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLDate.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLDate.java
@@ -377,7 +377,8 @@ private SQLDate(int encodedDate) {
      * @param isJdbcEscape if true then only the JDBC date escape syntax is allowed
      * @param localeFinder
      *
-     * @exception Standard exception if the syntax is invalid or the value is out of range.
+     * @exception StandardException if the syntax is invalid or the value 
+     *     is out of range.
      */
     public SQLDate( String dateStr, boolean isJdbcEscape, LocaleFinder localeFinder)
         throws StandardException
@@ -398,7 +399,8 @@ public SQLDate( String dateStr, boolean isJdbcEscape, LocaleFinder localeFinder)
      * @param isJdbcEscape if true then only the JDBC date escape syntax is allowed
      * @param localeFinder
      *
-     * @exception Standard exception if the syntax is invalid or the value is out of range.
+     * @exception StandardException if the syntax is invalid or the value 
+     *     is out of range.
      */
     public SQLDate( String dateStr, boolean isJdbcEscape, LocaleFinder localeFinder, Calendar cal)
         throws StandardException
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLLongint.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLLongint.java
index e834aeae..19373ad2 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLLongint.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLLongint.java
@@ -333,8 +333,6 @@ public void setValue(String theValue)
 
 	/**
 	 * @see NumberDataValue#setValue
-	 *
-	 * @exception StandardException		Thrown on error
 	 */
 	public final void setValue(Number theValue)
 	{
@@ -850,8 +848,6 @@ public NumberDataValue minus(NumberDataValue result)
      * This method implements the isNegative method.
      *
      * @return  A boolean.  if this.value is negative, return true.
-     *
-     * @exception StandException       Thrown on error
      */
     
     protected boolean isNegative()
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLTime.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLTime.java
index f1628417..efeb58e3 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLTime.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/SQLTime.java
@@ -384,7 +384,8 @@ private SQLTime(int encodedTime, int encodedTimeFraction) {
      *<li>JIS & current ISO: hh:mm[:ss]
      *</ol>
      * 
-     * @exception Standard exception if the syntax is invalid or the value is out of range.
+     * @exception StandardException if the syntax is invalid or the value is
+     *     out of range.
      */
     public SQLTime( String timeStr, boolean isJdbcEscape, LocaleFinder localeFinder)
         throws StandardException
@@ -400,7 +401,8 @@ public SQLTime( String timeStr, boolean isJdbcEscape, LocaleFinder localeFinder)
      *<li>JIS & current ISO: hh:mm[:ss]
      *</ol>
      * 
-     * @exception Standard exception if the syntax is invalid or the value is out of range.
+     * @exception StandardException if the syntax is invalid or the value is
+     *     out of range.
      */
     public SQLTime( String timeStr, boolean isJdbcEscape, LocaleFinder localeFinder, Calendar cal)
         throws StandardException
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XML.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XML.java
index 954a7db3..81b4360f 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XML.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XML.java
@@ -849,8 +849,7 @@ public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
      *  version of the results from evaluation of the query expression.
      *  Note: this XMLDataValue may not be storable into Derby XML
      *  columns.
-     * @exception Exception thrown on error (and turned into a
-     *  StandardException by the caller).
+     * @exception StandardException thrown on error
      */
     public XMLDataValue XMLQuery(SqlXmlUtil sqlxUtil, XMLDataValue result)
             throws StandardException
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XMLDataValue.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XMLDataValue.java
index 890438b8..80f931b4 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XMLDataValue.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/types/XMLDataValue.java
@@ -101,8 +101,7 @@ public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
      *  version of the results from evaluation of the query expression.
      *  Note: this XMLDataValue may not be storable into Derby XML
      *  columns.
-     * @exception Exception thrown on error (and turned into a
-     *  StandardException by the caller).
+     * @exception StandardException thrown on error
      */
     public XMLDataValue XMLQuery(SqlXmlUtil sqlxUtil, XMLDataValue result)
 		throws StandardException;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
index 1dfc1c22..f47b791b 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java
@@ -238,7 +238,7 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      *
      * @param  interfaces a Class defining an interface
      * @return an object that implements the interface
-     * @throws java.sql.SQLExption if no object if found that implements the 
+     * @throws SQLException if no object if found that implements the 
      * interface
      */
     public <T> T unwrap(java.lang.Class<T> interfaces) 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index 5ef5bf98..4459cee9 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -1019,13 +1019,8 @@ private final void checkBinaryStreamConditions(int parameterIndex)
      *  ignored if the parameter is not a user-defined type or REF
      * @exception SQLException if a database access error occurs or
      * this method is called on a closed <code>PreparedStatement</code>
-     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is
-     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
-     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
-     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
-     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
-     * or  <code>STRUCT</code> data type and the JDBC driver does not support
-     * this data type or if the JDBC driver does not support this method
+     * @exception SQLFeatureNotSupportedException if Derby does not
+     *   support the type specified in the {@code sqlType} parameter
      *
      */
     public void setNull(int paramIndex,
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement40.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement40.java
index 9de35808..ae3c338c 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement40.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement40.java
@@ -97,7 +97,7 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      *
      * @param  interfaces a Class defining an interface
      * @return an object that implements the interface
-     * @throws java.sql.SQLExption if no object if found that implements the 
+     * @throws SQLException if no object if found that implements the 
      * interface
      */
     public <T> T unwrap(java.lang.Class<T> interfaces) 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java
index 339b82e1..ca6b9b27 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java
@@ -184,7 +184,7 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      *
      * @param  interfaces a Class defining an interface
      * @return an object that implements the interface
-     * @throws java.sql.SQLExption if no object if found that implements the 
+     * @throws SQLException if no object if found that implements the 
      * interface
      */
     public <T> T unwrap(java.lang.Class<T> interfaces) 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData40.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData40.java
index c7833a5e..1fc398e2 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData40.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData40.java
@@ -60,7 +60,7 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      *
      * @param  interfaces a Class defining an interface
      * @return an object that implements the interface
-     * @throws java.sql.SQLExption if no object if found that implements the 
+     * @throws SQLException if no object if found that implements the 
      * interface
      */
    public <T> T unwrap(java.lang.Class<T> interfaces) 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement40.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement40.java
index 41f1d4af..da395641 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement40.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement40.java
@@ -65,7 +65,7 @@ public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
      *
      * @param  interfaces a Class defining an interface
      * @return an object that implements the interface
-     * @throws java.sql.SQLExption if no object if found that implements the 
+     * @throws SQLException if no object if found that implements the 
      * interface
      */
     public <T> T unwrap(java.lang.Class<T> interfaces)
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Export.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Export.java
index 30c11f52..ad7d91d4 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Export.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Export.java
@@ -174,7 +174,7 @@ public Object run() {
 	 * @param columnDelimeter  Delimiter that seperates columns in the output file
 	 * @param characterDelimeter  Delimiter that is used to quoate non-numeric types
 	 * @param codeset           Codeset that should be used to write  the data to  the file
- 	 * @exception SQL Exception on errors
+ 	 * @exception SQLException on errors
 	 */
 
 	public static void exportTable(Connection con, String schemaName, 
@@ -211,7 +211,7 @@ public static void exportTable(Connection con, String schemaName,
      *                           write the data to the file/
      * @param lobsFileName       Name of the file to which large object 
      *                           data has to be exported.
-     * @exception SQL Exception on errors
+     * @exception SQLException on errors
      */
 
     public static void exportTable(Connection con, String schemaName, 
@@ -238,7 +238,7 @@ public static void exportTable(Connection con, String schemaName,
 	 * @param columnDelimeter  Delimiter that seperates columns in the output file
 	 * @param characterDelimeter  Delimiter that is used to quiote non-numeric types
 	 * @param codeset           Codeset that should be used to write  the data to  the file
- 	 * @exception SQL Exception on errors
+ 	 * @exception SQLException on errors
 	 */
 	public static void exportQuery(Connection con, String selectStatement,
 							  String outputFileName, String columnDelimeter, 
@@ -270,7 +270,7 @@ public static void exportQuery(Connection con, String selectStatement,
      * @param codeset Codeset that should be used to write the data to the file
      * @param lobsFileName Name of the file to which 
      *                     large object data has to be exported.
-     * @exception SQL Exception on errors
+     * @exception SQLException on errors
      */
     public static void exportQuery(Connection con, String selectStatement,
                                    String outputFileName, String columnDelimeter, 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Import.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Import.java
index 216ecafa..4c7124ea 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Import.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/load/Import.java
@@ -58,7 +58,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/**
 	 * Constructior to Invoke Import from a select statement 
 	 * @param inputFileName	 The URL of the ASCII file from which import will happen
-	 * @exception Exception on error 
+	 * @exception SQLException on error 
 	 */
 	public Import(String inputFileName, String columnDelimiter,
                   String characterDelimiter,  String codeset, 
@@ -112,7 +112,7 @@ private void doImport() throws Exception
 	 *                         appended.(0 - append , > 0 Replace the data)
      * @param lobsInExtFile true, if the lobs data is stored in an external file,
      *                      and the reference to it is stored in the main import file.
- 	 * @exception SQL Exception on errors
+ 	 * @exception SQLException on errors
 	 */
 
 	public static void importTable(Connection connection, String schemaName, 
@@ -150,7 +150,7 @@ public static void importTable(Connection connection, String schemaName,
 	 *                         appended.(0 - append , > 0 Replace the data)
      * @param lobsInExtFile true, if the lobs data is stored in an external file,
      *                      and the reference is stored in the main import file.
- 	 * @exception SQL Exception on errors
+ 	 * @exception SQLException on errors
 	 */
 	public static void importData(Connection connection, String schemaName,
                                   String tableName, String insertColumnList, 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 327cf6ba..10b14502 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -2321,8 +2321,6 @@ public void setIdentityValue(long val)
      * which we compile against.
      *
      * @return the compiler context
-     *
-     * @exception StandardException thrown on failure
      */
     public  final CompilerContext pushCompilerContext()
     {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java
index 77e92166..b8ff6a59 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java
@@ -49,8 +49,6 @@ public int getColumnId() {
 
 	/**
 	 * Get the value that the column is to be compared to.
-	 *
-	 * @exception StandardException		Thrown on error
 	 */
 	public DataValueDescriptor getOrderable() {
 		return value;
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/btree/ControlRow.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/btree/ControlRow.java
index 2ab3f503..a75fbc3c 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/btree/ControlRow.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/btree/ControlRow.java
@@ -1218,8 +1218,6 @@ greater than the second (key).  The key may have fewer columns present
 	@param partialKeyOrder what to return on a partial key match.
 	@param ascOrDesc column sort order information
 	@throws StandardException if lower levels have a problem.
-
-    @exception StandardException Standard exception policy.
 	**/
 	public static int compareIndexRowFromPageToKey(
     ControlRow              indexpage,
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerateScratchSpace.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerateScratchSpace.java
index bd4a8144..eaedf25d 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerateScratchSpace.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerateScratchSpace.java
@@ -225,8 +225,6 @@ public OpenConglomerateScratchSpace(
      * <p>
      *
 	 * @return a scratch RowPosition.
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
     public RowPosition get_scratch_row_position()
     {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
index 01aae877..62813660 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
@@ -602,8 +602,6 @@ protected void compressPages(
      * 1) the truncate of pages greater than new_highest_page happened before
      *    the abort took place.  W
      * 2) 
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
     protected void undoCompressPages(
     int        new_highest_page,
@@ -766,8 +764,6 @@ protected long getLastPagenum()
      * <p>
      *
 	 * @return The page number of this "bit" in the extent map.
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
     protected long getPagenum(int bit_pos)
     {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java
index 83d0040b..25640edb 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredFieldHeader.java
@@ -396,7 +396,7 @@ public static final int readStatus(
      * @param offset    the offset in the array where the field begin, ie. 
      *                  the status byte is at data[offset].
      *
-	 * @exception  StandardException  Standard exception policy.
+	 * @exception  IOException  if an I/O error occurs
      **/
 	public static final int readTotalFieldLength(
     byte[]      data,
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
index 6567dcfd..3c73fa16 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
@@ -1374,8 +1374,6 @@ public boolean spaceForCopy(int num_rows, int[] spaceNeeded)
      *
      * @return true if the record will fit on this page, after being given a
      *         new record id as the next id on this page.
-     *
-     * @exception  StandardException  Standard exception policy.
      **/
     protected boolean spaceForCopy(
     int spaceNeeded, 
@@ -2538,8 +2536,6 @@ private void removeSlotEntry(int slot)
      * @return The record header for the specific slot.
      *
      * @param slot   return record header of this slot.
-     *
-     * @exception  StandardException  Standard exception policy.
      **/
     public StoredRecordHeader recordHeaderOnDemand(int slot)
     {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java
index d58dff50..e53a0092 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StoredRecordHeader.java
@@ -304,8 +304,6 @@ public final boolean isDeleted()
      * rows, so calls to CompressNumber have been hand inlined.
      *
      * @return The length of the record header.
-     *
-     * @exception  StandardException  Standard exception policy.
      **/
     public int size() 
     {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java
index 02eee93d..18121c8b 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java
@@ -311,8 +311,6 @@ protected StreamFileContainer open(boolean forUpdate)
      * <p>
      * Close this stream file, and all streams associated with it.
      * <p>
-     *
-	 * @exception  StandardException  Standard exception policy.
      **/
 	protected void close()
     {
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
index 83c498de..6b77617b 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
@@ -1125,7 +1125,6 @@ public void destroy() throws StandardException
     }
 
 	/**
-	    @exception StandardException  Standard Derby exception policy
 		@exception StandardException Thrown if the transaction is not idle, the
 		transaction remains open.
 		@see Transaction#close
@@ -2199,7 +2198,6 @@ private int getSavePointPosition(
 		otherwise it is left in the stack (at the top).
 
 		@return true if any work is rolled back, false if no work is rolled back
-		@exception StandardException	Standard Derby policy
 		@exception StandardException Thrown if a error of severity less than TransactionException#SEVERITY
 		is encountered during the rollback of this savepoint.
 	*/
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/io/StorageRandomAccessFile.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/io/StorageRandomAccessFile.java
index 73185017..de5db0a4 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/io/StorageRandomAccessFile.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/io/StorageRandomAccessFile.java
@@ -99,7 +99,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * does not survive a restart, then the sync method implementation need not do anything.
      *
      *
-     * @exception SyncFailedException if a possibly recoverable error occurs.
+     * @exception java.io.SyncFailedException if a possibly recoverable error occurs.
      * @exception IOException If an IO error occurs.
      */
     public void sync() throws IOException;
