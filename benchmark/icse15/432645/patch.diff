diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java
index 8a1eae09..3e939cda 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java
@@ -42,15 +42,20 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
 		    String timemin) throws IOException, InterruptedException
 	{
-		this(in, bos, timemin, null);
+		this(in, bos, timemin, null, null);
 	}
 	
 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
-	  String timemin, String encoding) throws IOException, InterruptedException
+	  String timemin, String inEncoding, String outEncoding)
+		throws IOException, InterruptedException
 	{
 		this.in = in;
+        if (outEncoding == null) {
 		this.outStream = new OutputStreamWriter(bos);
-		this.encoding = encoding;
+        } else {
+            this.outStream = new OutputStreamWriter(bos, outEncoding);
+        }
+        this.encoding = inEncoding;
         this.startTime = System.currentTimeMillis();
         if (timemin != null)
         {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index ecba53e4..9360e935 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -183,6 +183,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     static boolean lastTestFailed = false;
 
     static boolean isI18N = false;
+    /** The value of derby.ui.codeset if it has been specified in the
+     * properties file. */
+    static String codeset = null;
     static boolean junitXASingle = false;
     
     /**
@@ -262,6 +265,10 @@ public static void main(String[] args)
         // Setup the directories for the test and test output
         setDirectories(scriptName,sp);
 
+        if (testDirName.startsWith("i18n")) {
+            isI18N=true;
+        }
+
         // Check for properties files, including derby.properties
         // and if needed, build the -p string to pass to the test
         String propString = createPropString();
@@ -381,11 +388,6 @@ public static void main(String[] args)
 		
 		String outName = finalOutFile.getPath();
 
-        if (testDirName.startsWith("i18n"))
-        {
-            isI18N=true;
-        }
-        
         if (skipsed)
         {
             tmpOutFile.renameTo(finalOutFile);
@@ -1541,11 +1543,17 @@ else if (isClDef != null)
 			// For IBM14 the console encoding is different from the platform
 			// encoding on windows.  We want it to be the same for our
 			// test output like the other JDK's.
+			//
+			// For i18n test, we want UTF-8 encoding (DERBY-244).
 			String conEnc = System.getProperty("console.encoding");
 			String fileEnc = System.getProperty("file.encoding");
 		
-			if ((conEnc != null) &&  (fileEnc != null )  &&
-				(ap.getProperty("derby.ui.codeset") == null) &&
+			if (ap.getProperty("derby.ui.codeset") != null) {
+				// derby.ui.codeset is specified explicitly, don't override
+				codeset = ap.getProperty("derby.ui.codeset");
+			} else if (isI18N) {
+				ap.put("derby.ui.codeset", "UTF-8");
+			} else if ((conEnc != null) &&  (fileEnc != null )  &&
 				conEnc.startsWith("Cp850"))
 			{
 				ap.put("derby.ui.codeset",fileEnc);
@@ -2290,6 +2298,13 @@ else if ( (runDir != null) && (runDir.exists()) )
             jvmProps.addElement("file.encoding=" + testEncoding);
             jvmflags = (jvmflags==null?"":jvmflags+" ") 
                          + "-Dfile.encoding=" + testEncoding; 
+        } else if (isI18N) {
+            // The I18N tests should be run with UTF-8 encoding to avoid
+            // problems with characters that cannot be represented in the
+            // default encoding (DERBY-244).
+            jvmProps.addElement("file.encoding=UTF-8");
+            jvmflags = (jvmflags==null ? "" : jvmflags + " ") +
+                        "-Dfile.encoding=UTF-8";
         }
         
         if (upgradejarpath != null)
@@ -2340,8 +2355,13 @@ else if ( (runDir != null) && (runDir.exists()) )
             // force the console encoding to Cp1252 for ij tests - unless 
             // we're on non-ascii systems.
             String isNotAscii = System.getProperty("platform.notASCII");
-            if ( (isNotAscii == null) || (isNotAscii.equals("false"))) 
+            if (isI18N) {
+                // DERBY-244: Use UTF-8 console encoding for the i18n tests to
+                // avoid MalformedInputException with the IBM jvm.
+                v.addElement("-Dconsole.encoding=UTF-8");
+            } else if ((isNotAscii == null) || (isNotAscii.equals("false"))) {
                 v.addElement("-Dconsole.encoding=Cp1252" );
+            }
             v.addElement("org.apache.derby.tools." + ij);
             if (ij.equals("ij"))
             {
@@ -2505,25 +2525,42 @@ private static void execTestProcess(String[] testCmd)
             if (verbose) System.out.println(sb.toString());
             pr = Runtime.getRuntime().exec(testCmd);
 
+            String inEncoding = null;
+            String outEncoding = null;
+            if (isI18N) {
+                // DERBY-244: I18N tests are run with -Dfile.encoding=UTF-8, so
+                // we need to specify encoding to the streams as well.
+                inEncoding = "UTF-8";
+                outEncoding = inEncoding;
+            }
+
+            if (codeset != null) {
+                // The test explicitly specified a codeset, use that codeset
+                // when reading the test output.
+                inEncoding = codeset;
+            }
+
+            if (testEncoding != null) {
+                inEncoding = testEncoding;
+            }
+
             if (useOutput)
             {
                 fos = new FileOutputStream(tmpOutFile);
-                bos = new BufferedOutputStream(fos, 1024);
-                prout = 
-                    new ProcessStreamResult(pr.getInputStream(), bos, 
-                    					timeoutStr, testEncoding);
             }
             else
             {
                 fos = new FileOutputStream(stdOutFile);
+            }
                 bos = new BufferedOutputStream(fos, 1024);
                 prout = 
                     new ProcessStreamResult(pr.getInputStream(), bos, 
-                    					timeoutStr, testEncoding);
-            }
+                                        timeoutStr,
+                                        inEncoding, outEncoding);
             prerr =
                 new ProcessStreamResult(pr.getErrorStream(), bos, 
-                						timeoutStr, testEncoding);
+                                        timeoutStr,
+                                        inEncoding, outEncoding);
     
             if (framework != null && ! framework.equals(""))
                 if (verbose) System.out.println("The test should be running...");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
index 48944331..b84ce8b1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
@@ -372,10 +372,16 @@ else if (key.equals("delete"))
         matcher = new Perl5Matcher();
 
         // Define the input and output files based on args
-        if (is == null)
+        if (is == null && isI18N) {
+            // read UTF-8 encoded file
+            InputStream fs = new FileInputStream(srcFile);
+            inFile = new BufferedReader(new InputStreamReader(fs, "UTF-8"));
+        } else if (is == null) {
+            // read the file using the default encoding
             inFile = new BufferedReader(new FileReader(srcFile));
-        else
+        } else {
             inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+        }
         outFile = new PrintWriter
         ( new BufferedWriter(new FileWriter(dstFile), 10000), true );
 
