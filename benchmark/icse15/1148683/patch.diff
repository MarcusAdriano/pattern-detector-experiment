diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
index 499be895..d3328818 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
@@ -255,7 +255,9 @@ public MBeanInfo getMBeanInfo() {
     public Object getAttribute(String attribute)
             throws AttributeNotFoundException, MBeanException, ReflectionException {
       Object val;
-      if (staticStats.contains(attribute) && attribute != null
+      if ("coreHashCode".equals(attribute)) {
+        val = coreHashCode;
+      } else if (staticStats.contains(attribute) && attribute != null
               && attribute.length() > 0) {
         try {
           String getter = "get" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)
@@ -283,7 +285,7 @@ public AttributeList getAttributes(String[] attributes) {
         try {
           list.add(new Attribute(attribute, getAttribute(attribute)));
         } catch (Exception e) {
-          LOG.warn("Could not get attibute " + attribute);
+          LOG.warn("Could not get attribute " + attribute);
         }
       }
 
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/core/TestJmxIntegration.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/core/TestJmxIntegration.java
index dc06a515..8aa55025 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/core/TestJmxIntegration.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/core/TestJmxIntegration.java
@@ -119,8 +119,6 @@ public void testJmxUpdate() throws Exception {
   public void testJmxOnCoreReload() throws Exception {
     List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);
     MBeanServer mbeanServer = servers.get(0);
-    log.info("Servers in testJmxUpdate: " + servers);
-    log.info(h.getCore().getInfoRegistry().toString());
 
     String coreName = h.getCore().getName();
     if (coreName.length() == 0) {
@@ -128,13 +126,43 @@ public void testJmxOnCoreReload() throws Exception {
     }
 
     Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);
-    int oldNumberOfObjects = oldBeans.size();
+    int oldNumberOfObjects = 0;
+    for (ObjectInstance bean : oldBeans) {
+      try {
+        if (String.valueOf(h.getCore().hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), "coreHashCode"))) {
+          oldNumberOfObjects++;
+        }
+      } catch (AttributeNotFoundException e) {
+        // expected
+      }
+    }
+
+    log.info("Before Reload: Size of infoRegistry: " + h.getCore().getInfoRegistry().size() + " MBeans: " + oldNumberOfObjects);
+    assertEquals("Number of registered MBeans is not the same as info registry size", h.getCore().getInfoRegistry().size(), oldNumberOfObjects);
+
     h.getCoreContainer().reload(coreName);
 
     Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);
-    int newNumberOfObjects = newBeans.size();
+    int newNumberOfObjects = 0;
+    int registrySize = 0;
+    SolrCore core = h.getCoreContainer().getCore(coreName);
+    try {
+      registrySize = core.getInfoRegistry().size();
+      for (ObjectInstance bean : newBeans) {
+        try {
+          if (String.valueOf(core.hashCode()).equals(mbeanServer.getAttribute(bean.getObjectName(), "coreHashCode"))) {
+            newNumberOfObjects++;
+          }
+        } catch (AttributeNotFoundException e) {
+          // expected
+        }
+      }
+    } finally {
+      core.close();
+    }
 
-    assertEquals("Number of registered MBeans is not the same after Solr core reload", oldNumberOfObjects, newNumberOfObjects);
+    log.info("After Reload: Size of infoRegistry: " + registrySize + " MBeans: " + newNumberOfObjects);
+    assertEquals("Number of registered MBeans is not the same as info registry size", registrySize, newNumberOfObjects);
   }
 
   private ObjectName getObjectName(String key, SolrInfoMBean infoBean)
