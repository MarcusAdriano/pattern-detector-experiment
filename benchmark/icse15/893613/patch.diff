diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index 55c0d620..9de428b6 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -33,6 +33,8 @@
 import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.gms.FailureDetector;
+import org.apache.cassandra.gms.Gossiper;
+
 import java.net.InetAddress;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
@@ -77,7 +79,7 @@
     private static HintedHandOffManager instance_;
     private static Lock lock_ = new ReentrantLock();
     private static Logger logger_ = Logger.getLogger(HintedHandOffManager.class);
-    final static long INTERVAL_IN_MS = 3600 * 1000;
+    final static long INTERVAL_IN_MS = 3600 * 1000; // check for ability to deliver hints this often
     private ExecutorService executor_ = new DebuggableThreadPoolExecutor("HINTED-HANDOFF-POOL");
     Timer timer = new Timer("HINTED-HANDOFF-TIMER");
     public static final String HINTS_CF = "HintsColumnFamily";
@@ -103,6 +105,11 @@ public static HintedHandOffManager instance()
 
     private static boolean sendMessage(InetAddress endPoint, String tableName, String key) throws IOException
     {
+        if (!Gossiper.instance().isKnownEndpoint(endPoint))
+        {
+            logger_.warn("Hints found for endpoint " + endPoint + " which is not part of the gossip network.  discarding.");
+            return true;
+        }
         if (!FailureDetector.instance().isAlive(endPoint))
         {
             return false;
@@ -254,13 +261,14 @@ public void run()
                 }
             }
         };
-        timer.schedule(new TimerTask()
+        TimerTask task = new TimerTask()
         {
             public void run()
             {
                 executor_.execute(r);
             }
-        }, INTERVAL_IN_MS, INTERVAL_IN_MS);
+        };
+        timer.schedule(task, INTERVAL_IN_MS, INTERVAL_IN_MS);
     }
 
     /*
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/gms/Gossiper.java
index d0c97392..900b93d3 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -269,6 +269,11 @@ void makeRandomGossipDigest(List<GossipDigest> gDigests)
             logger_.trace("Gossip Digests are : " + sb.toString());
     }
 
+    public boolean isKnownEndpoint(InetAddress endpoint)
+    {
+        return endPointStateMap_.containsKey(endpoint);
+    }
+
     public int getCurrentGenerationNumber(InetAddress endpoint)
     {
     	return endPointStateMap_.get(endpoint).getHeartBeatState().getGeneration();
