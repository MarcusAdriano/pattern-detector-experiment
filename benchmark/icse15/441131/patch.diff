diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 556f25b3..8f3f2726 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -9968,7 +9968,7 @@ public TablePermsDescriptor getTablePermissions( UUID tablePermsUUID)
     throws StandardException
 	{
         TablePermsDescriptor key = new TablePermsDescriptor( this, tablePermsUUID);
-        return (TablePermsDescriptor) getPermissions( key);
+        return getUncachedTablePermsDescriptor( key );
 	}
 
     private Object getPermissions( PermissionsDescriptor key) throws StandardException
@@ -9987,7 +9987,7 @@ public ColPermsDescriptor getColumnPermissions( UUID colPermsUUID)
     throws StandardException
 	{
     	ColPermsDescriptor key = new ColPermsDescriptor( this, colPermsUUID);
-        return (ColPermsDescriptor) getPermissions( key);
+        return getUncachedColPermsDescriptor( key );
 	}
 
     /**
@@ -10092,7 +10092,7 @@ public RoutinePermsDescriptor getRoutinePermissions( UUID routinePermsUUID)
     throws StandardException
 	{
     	RoutinePermsDescriptor key = new RoutinePermsDescriptor( this, routinePermsUUID);
-        return (RoutinePermsDescriptor) getPermissions( key);    	
+        return getUncachedRoutinePermsDescriptor( key );   	
 	}
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GrantNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GrantNode.java
index 37d18299..6c21c663 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GrantNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GrantNode.java
@@ -94,7 +94,7 @@ public void init( Object privileges,
 	 */
 	public QueryTreeNode bind() throws StandardException
 	{
-		privileges = (PrivilegeNode) privileges.bind( new HashMap(), grantees);
+		privileges = (PrivilegeNode) privileges.bind( new HashMap(), grantees, true);
 		return this;
 	} // end of bind
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java
index 214173e3..e96ae10c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java
@@ -98,12 +98,12 @@ public void init( Object objectType, Object objectOfPrivilege, Object specificPr
      *               If the object of this privilege is not in the list then this statement is registered
      *               as dependent on the object.
      * @param grantees The list of grantees
-     *
+     * @param isGrant grant if true; revoke if false
      * @return the bound node
      *
      * @exception StandardException	Standard error policy.
      */
-	public QueryTreeNode bind( HashMap dependencies, List grantees ) throws StandardException
+	public QueryTreeNode bind( HashMap dependencies, List grantees, boolean isGrant ) throws StandardException
 	{
         Provider dependencyProvider = null;
         SchemaDescriptor sd = null;
@@ -134,7 +134,7 @@ public QueryTreeNode bind( HashMap dependencies, List grantees ) throws Standard
 				throw StandardException.newException(SQLState.AUTH_GRANT_REVOKE_NOT_ALLOWED,
 						 td.getQualifiedName());
 
-            specificPrivileges.bind( td);
+            specificPrivileges.bind( td, isGrant);
             dependencyProvider = td;
             break;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RevokeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RevokeNode.java
index 0d131241..c6cac12d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RevokeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RevokeNode.java
@@ -94,7 +94,7 @@ public void init( Object privileges,
      */
 	public QueryTreeNode bind() throws StandardException
 	{
-        privileges = (PrivilegeNode) privileges.bind( new HashMap(), grantees);
+        privileges = (PrivilegeNode) privileges.bind( new HashMap(), grantees, false);
         return this;
     } // end of bind
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java
index 9a5e8529..cca43788 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java
@@ -29,6 +29,21 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 
+import org.apache.derby.iapi.sql.depend.DependencyManager;
+import org.apache.derby.iapi.sql.depend.Provider;
+import org.apache.derby.iapi.sql.depend.ProviderInfo;
+import org.apache.derby.iapi.sql.depend.ProviderList;
+import org.apache.derby.iapi.sql.conn.ConnectionUtil;
+import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
+import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
+import org.apache.derby.iapi.sql.dictionary.DataDictionary;
+import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
+import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
+import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
+
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * This class represents a set of privileges on one table.
  */
@@ -38,6 +53,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private ResultColumnList[] columnLists = new ResultColumnList[ TablePrivilegeInfo.ACTION_COUNT];
 	private FormatableBitSet[] columnBitSets = new FormatableBitSet[ TablePrivilegeInfo.ACTION_COUNT];
 	private TableDescriptor td;
+	private List descriptorList; 
 
 	/**
 	 * Add all actions
@@ -74,8 +90,9 @@ else if( columnLists[ action] == null)
 	 * Bind.
 	 *
 	 * @param td The table descriptor
+	 * @param isGrant grant if true; revoke if false
 	 */
-	public void bind( TableDescriptor td) throws StandardException
+	public void bind( TableDescriptor td, boolean isGrant) throws StandardException
 	{
 		this.td = td;
 		
@@ -90,6 +107,11 @@ public void bind( TableDescriptor td) throws StandardException
 					throw StandardException.newException(SQLState.AUTH_GRANT_REVOKE_NOT_ALLOWED,
 									td.getQualifiedName());
 		}
+		
+		if (isGrant && td.getTableType() == TableDescriptor.VIEW_TYPE)
+		{
+			bindPrivilegesForView(td);
+		}
 	}
 	
 	/**
@@ -97,6 +119,61 @@ public void bind( TableDescriptor td) throws StandardException
 	 */
 	public PrivilegeInfo makePrivilegeInfo()
 	{
-		return new TablePrivilegeInfo( td, actionAllowed, columnBitSets);
+		return new TablePrivilegeInfo( td, actionAllowed, columnBitSets, 
+				descriptorList);
+	}
+	
+	/**
+	 *  Retrieve all the underlying stored dependencies such as table(s), 
+	 *  view(s) and routine(s) descriptors which the view depends on.
+	 *  This information is then passed to the runtime to determine if
+	 *  the privilege is grantable to the grantees by this grantor at
+	 *  execution time.
+	 *  
+	 *  Go through the providers regardless who the grantor is since 
+	 *  the statement cache may be in effect.
+	 *  
+	 * @param td the TableDescriptor to check
+	 *
+	 * @exception StandardException standard error policy.
+	 */
+	private void bindPrivilegesForView ( TableDescriptor td) 
+		throws StandardException
+	{
+		LanguageConnectionContext lcc = getLanguageConnectionContext();
+		DataDictionary dd = lcc.getDataDictionary();
+		ViewDescriptor vd = dd.getViewDescriptor(td);
+		DependencyManager dm = dd.getDependencyManager();
+		ProviderInfo[] pis = dm.getPersistentProviderInfos(vd);
+		this.descriptorList = new ArrayList();
+					
+		int siz = pis.length;
+		for (int i=0; i < siz; i++) 
+		{
+			try 
+			{
+				Provider provider = (Provider) pis[i].getDependableFinder().getDependable(pis[i].getObjectId());
+				if (provider == null)  
+				{
+					throw StandardException.newException(
+							SQLState.LANG_OBJECT_NOT_FOUND, 
+							"OBJECT", 
+							pis[i].getObjectId());
+				}
+							
+				if (provider instanceof TableDescriptor || 
+					provider instanceof ViewDescriptor ||
+					provider instanceof AliasDescriptor)
+				{
+					descriptorList.add(provider);
+				}
+			}
+			catch(java.sql.SQLException ex)
+			{
+				throw StandardException.plainWrapException(ex);
+			}		   
+	}
 	}
+	
 }
+	
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java
index 120f2664..2bb197f3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java
@@ -28,12 +28,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.store.access.TransactionController;
 import org.apache.derby.iapi.sql.depend.DependencyManager;
+import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
 import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
+import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
+import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
+import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
+import org.apache.derby.iapi.reference.SQLState;
 
 import java.util.List;
 import java.util.Iterator;
@@ -59,17 +64,123 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private TableDescriptor td;
 	private boolean[] actionAllowed;
 	private FormatableBitSet[] columnBitSets;
+	private List descriptorList;
 	
 	/**
 	 * @param actionAllowed actionAllowed[action] is true if action is in the privilege set.
 	 */
 	public TablePrivilegeInfo( TableDescriptor td,
 							   boolean[] actionAllowed,
-							   FormatableBitSet[] columnBitSets)
+							   FormatableBitSet[] columnBitSets,
+							   List descriptorList)
 	{
 		this.actionAllowed = actionAllowed;
 		this.columnBitSets = columnBitSets;
 		this.td = td;
+		this.descriptorList = descriptorList;
+	}
+	
+	/**
+	 * Determines whether a user is the owner of an object
+	 * (table, function, or procedure). Note that the database 
+	 * creator can access database objects without needing to be 
+	 * their owner.
+	 *
+	 * @param user					authorizationId of current user
+	 * @param td       		        table descriptor being checked against
+	 * @param sd					SchemaDescriptor
+	 * @param dd					DataDictionary
+	 * @param lcc                   LanguageConnectionContext
+	 * @param grant                 grant if true; revoke if false
+	 *
+	 * @exception StandardException if user does not own the object
+	 */
+	protected void checkOwnership( String user,
+								   TableDescriptor td,
+								   SchemaDescriptor sd,
+								   DataDictionary dd,
+								   LanguageConnectionContext lcc,
+								   boolean grant)
+		throws StandardException
+	{
+		super.checkOwnership(user, td, sd, dd);
+		
+		// additional check specific to this subclass
+		if (grant)
+		{
+			checkPrivileges(user, td, sd, dd, lcc);
+		}
+	}
+	
+	/**
+	 * Determines if the privilege is grantable by this grantor
+	 * for the given view.
+	 * 
+	 * Note that the database owner can access database objects 
+	 * without needing to be their owner.  This method should only 
+	 * be called if it is a GRANT.
+	 * 
+	 * @param user					authorizationId of current user
+	 * @param td		            TableDescriptor to be checked against
+	 * @param sd					SchemaDescriptor
+	 * @param dd					DataDictionary
+	 * @param lcc                   LanguageConnectionContext
+	 *
+	 * @exception StandardException if user does not have permission to grant
+	 */
+	private void checkPrivileges( String user,
+								   TableDescriptor td,
+								   SchemaDescriptor sd,
+								   DataDictionary dd,
+								   LanguageConnectionContext lcc)
+		throws StandardException
+	{
+		if (user.equals(dd.getAuthorizationDBA())) return;
+		
+		//  check view specific
+		if (td.getTableType() == TableDescriptor.VIEW_TYPE) 
+		{
+			if (descriptorList != null )
+			{			    		   
+				TransactionController tc = lcc.getTransactionExecute();
+				int siz = descriptorList.size();
+				for (int i=0; i < siz; i++)
+				{
+					TupleDescriptor p;
+					SchemaDescriptor s = null;
+
+					p = (TupleDescriptor)descriptorList.get(i);
+					if (p instanceof TableDescriptor)
+					{
+						TableDescriptor t = (TableDescriptor)p;
+						s = t.getSchemaDescriptor();
+			    	}
+					else if (p instanceof ViewDescriptor)
+					{
+						ViewDescriptor v = (ViewDescriptor)p;	
+						s = dd.getSchemaDescriptor(v.getCompSchemaId(), tc);
+					}
+			    	else if (p instanceof AliasDescriptor)
+			    	{
+			    		AliasDescriptor a = (AliasDescriptor)p;
+						s = dd.getSchemaDescriptor( a.getSchemaUUID(), tc);
+			    	}
+								
+					if (s != null && !user.equals(s.getAuthorizationId()) ) 
+					{
+						throw StandardException.newException(
+				    			   SQLState.AUTH_NO_OBJECT_PERMISSION,
+				    			   user,
+				    			   "grant",
+				    			   sd.getSchemaName(),
+								   td.getName());		  
+					}
+			    			   
+			    	// FUTURE: if object is not own by grantor then check if 
+			    	//         the grantor have grant option.
+				}
+			}
+		}
 	}
 	
 	/**
@@ -90,9 +201,10 @@ public void executeGrantRevoke( Activation activation,
 		DataDictionary dd = lcc.getDataDictionary();
 		String currentUser = lcc.getAuthorizationId();
 		TransactionController tc = lcc.getTransactionExecute();
+		SchemaDescriptor sd = td.getSchemaDescriptor();
 
 		// Check that the current user has permission to grant the privileges.
-		checkOwnership( currentUser, td, td.getSchemaDescriptor(), dd);
+		checkOwnership( currentUser, td, sd, dd, lcc, grant);
 		
 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
 
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 3d85bbec..10523e06 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1372,6 +1372,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String AUTH_NO_ACCESS_NOT_OWNER                                    = "2850D";
 	String AUTH_NOT_DATABASE_OWNER                                     = "2850E";
 	String AUTH_GRANT_REVOKE_NOT_ALLOWED                               = "2850F";
+	String AUTH_NO_OBJECT_PERMISSION                                   = "2850G";
 
 	/*
 	** Dependency manager
