diff --git a/lucene/dev/branches/lucene_solr_3_4/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete.java b/lucene/dev/branches/lucene_solr_3_4/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
index 1bfdffda..7707d9c7 100644
--- a/lucene/dev/branches/lucene_solr_3_4/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
+++ b/lucene/dev/branches/lucene_solr_3_4/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
@@ -846,22 +846,9 @@ public void eval(MockDirectoryWrapper dir)  throws IOException {
       }
     }
 
-    String[] startFiles = dir.listAll();
-    SegmentInfos infos = new SegmentInfos();
-    infos.read(dir);
-    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null);
-    String[] endFiles = dir.listAll();
     modifier.close();
+    TestIndexWriter.assertNoUnreferencedFiles(dir, "docswriter abort() failed to delete unreferenced files");    
     dir.close();
-
-    if (!Arrays.equals(startFiles, endFiles)) {
-      fail("docswriter abort() failed to delete unreferenced files:\n  before delete:\n    "
-           + arrayToString(startFiles) + "\n  after delete:\n    "
-           + arrayToString(endFiles));
-    }
-
-    modifier.close();
-
   }
 
   private String arrayToString(String[] l) {
diff --git a/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/DirectoryReader.java b/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
index 5c1a2583..44b3903c 100644
--- a/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
+++ b/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
@@ -795,7 +795,7 @@ protected void doCommit(Map<String,String> commitUserData) throws IOException {
       // KeepOnlyLastCommitDeleter:
       IndexFileDeleter deleter = new IndexFileDeleter(directory,
                                                       deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,
-                                                      segmentInfos, null);
+                                                      segmentInfos, null, null);
       segmentInfos.updateGeneration(deleter.getLastSegmentInfos());
       segmentInfos.changed();
 
diff --git a/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java b/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
index 938c46c7..15acaa04 100644
--- a/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
+++ b/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
@@ -101,6 +101,9 @@
    *  infoStream != null */
   public static boolean VERBOSE_REF_COUNTS = false;
 
+  // Used only for assert
+  private final IndexWriter writer;
+
   void setInfoStream(PrintStream infoStream) {
     this.infoStream = infoStream;
     if (infoStream != null) {
@@ -112,6 +115,11 @@ private void message(String message) {
     infoStream.println("IFD [" + new Date() + "; " + Thread.currentThread().getName() + "]: " + message);
   }
 
+  // called only from assert
+  private boolean locked() {
+    return writer == null || Thread.holdsLock(writer);
+  }
+
   /**
    * Initialize the deleter: find all previous commits in
    * the Directory, incref the files they reference, call
@@ -120,10 +128,11 @@ private void message(String message) {
    * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error
    */
-  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream)
+  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, IndexWriter writer)
     throws CorruptIndexException, IOException {
 
     this.infoStream = infoStream;
+    this.writer = writer;
 
     final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();
 
@@ -316,6 +325,8 @@ private void deleteCommits() throws IOException {
    * that segment.
    */
   public void refresh(String segmentName) throws IOException {
+    assert locked();
+
     String[] files = directory.listAll();
     IndexFileNameFilter filter = IndexFileNameFilter.getFilter();
     String segmentPrefix1;
@@ -347,12 +358,14 @@ public void refresh() throws IOException {
     // Set to null so that we regenerate the list of pending
     // files; else we can accumulate same file more than
     // once
+    assert locked();
     deletable = null;
     refresh(null);
   }
 
   public void close() throws IOException {
     // DecRef old files from the last checkpoint, if any:
+    assert locked();
     int size = lastFiles.size();
     if (size > 0) {
       for(int i=0;i<size;i++) {
@@ -374,6 +387,7 @@ public void close() throws IOException {
    * unused commits again.
    */
   void revisitPolicy() throws IOException {
+    assert locked();
     if (infoStream != null) {
       message("now revisitPolicy");
     }
@@ -385,6 +399,7 @@ void revisitPolicy() throws IOException {
   }
   
   public void deletePendingFiles() throws IOException {
+    assert locked();
     if (deletable != null) {
       List<String> oldDeletable = deletable;
       deletable = null;
@@ -419,6 +434,7 @@ public void deletePendingFiles() throws IOException {
    * removed, we decref their files as well.
    */
   public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {
+    assert locked();
 
     if (infoStream != null) {
       message("now checkpoint \"" + segmentInfos.getCurrentSegmentFileName() + "\" [" + segmentInfos.size() + " segments " + "; isCommit = " + isCommit + "]");
@@ -453,6 +469,7 @@ public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOExc
   }
 
   void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {
+    assert locked();
     // If this is a commit point, also incRef the
     // segments_N file:
     for( final String fileName: segmentInfos.files(directory, isCommit) ) {
@@ -461,12 +478,14 @@ void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {
   }
 
   void incRef(Collection<String> files) throws IOException {
+    assert locked();
     for(final String file : files) {
       incRef(file);
     }
   }
 
   void incRef(String fileName) throws IOException {
+    assert locked();
     RefCount rc = getRefCount(fileName);
     if (infoStream != null && VERBOSE_REF_COUNTS) {
       message("  IncRef \"" + fileName + "\": pre-incr count is " + rc.count);
@@ -475,12 +494,14 @@ void incRef(String fileName) throws IOException {
   }
 
   void decRef(Collection<String> files) throws IOException {
+    assert locked();
     for(final String file : files) {
       decRef(file);
     }
   }
 
   void decRef(String fileName) throws IOException {
+    assert locked();
     RefCount rc = getRefCount(fileName);
     if (infoStream != null && VERBOSE_REF_COUNTS) {
       message("  DecRef \"" + fileName + "\": pre-decr count is " + rc.count);
@@ -494,12 +515,14 @@ void decRef(String fileName) throws IOException {
   }
 
   void decRef(SegmentInfos segmentInfos) throws IOException {
+    assert locked();
     for (final String file : segmentInfos.files(directory, false)) {
       decRef(file);
     }
   }
 
   public boolean exists(String fileName) {
+    assert locked();
     if (!refCounts.containsKey(fileName)) {
       return false;
     } else {
@@ -508,6 +531,7 @@ public boolean exists(String fileName) {
   }
 
   private RefCount getRefCount(String fileName) {
+    assert locked();
     RefCount rc;
     if (!refCounts.containsKey(fileName)) {
       rc = new RefCount(fileName);
@@ -519,6 +543,7 @@ private RefCount getRefCount(String fileName) {
   }
 
   void deleteFiles(List<String> files) throws IOException {
+    assert locked();
     for(final String file: files) {
       deleteFile(file);
     }
@@ -527,6 +552,7 @@ void deleteFiles(List<String> files) throws IOException {
   /** Deletes the specified files, but only if they are new
    *  (have not yet been incref'd). */
   void deleteNewFiles(Collection<String> files) throws IOException {
+    assert locked();
     for (final String fileName: files) {
       if (!refCounts.containsKey(fileName)) {
         if (infoStream != null) {
@@ -539,6 +565,7 @@ void deleteNewFiles(Collection<String> files) throws IOException {
 
   void deleteFile(String fileName)
        throws IOException {
+    assert locked();
     try {
       if (infoStream != null) {
         message("delete \"" + fileName + "\"");
diff --git a/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index 840ff71a..c17274fa 100644
--- a/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/branches/lucene_solr_3_4/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -1178,9 +1178,12 @@ public IndexWriter(Directory d, IndexWriterConfig conf)
 
       // Default deleter (for backwards compatibility) is
       // KeepOnlyLastCommitDeleter:
+      synchronized(this) {
       deleter = new IndexFileDeleter(directory,
                                      conf.getIndexDeletionPolicy(),
-                                     segmentInfos, infoStream);
+                                       segmentInfos, infoStream,
+                                       this);
+      }
 
       if (deleter.startingCommitDeleted) {
         // Deletion policy deleted the "head" commit point.
@@ -3109,7 +3112,9 @@ public void addIndexes(IndexReader... readers) throws CorruptIndexException, IOE
 
         // delete new non cfs files directly: they were never
         // registered with IFD
+        synchronized(this) {
         deleter.deleteNewFiles(info.files());
+        }
         info.setUseCompoundFile(true);
       }
 
@@ -3380,16 +3385,14 @@ public final void prepareCommit(Map<String, String> commitUserData)
       message("prepareCommit: flush");
 
     ensureOpen(false);
-    final boolean anySegmentsFlushed;
-    final SegmentInfos toCommit;
+    boolean anySegmentsFlushed = false;
+    SegmentInfos toCommit = null;
+    boolean success = false;
+    try {
+      try {
     synchronized (this) {
       anySegmentsFlushed = doFlush(true);
       readerPool.commit(segmentInfos);
-      // Must clone the segmentInfos while we still
-      // hold fullFlushLock and while sync'd so that
-      // no partial changes (eg a delete w/o
-      // corresponding add from an updateDocument) can
-      // sneak into the commit point:
       toCommit = (SegmentInfos) segmentInfos.clone();
       pendingCommitChangeCount = changeCount;
       // This protects the segmentInfos we are now going
@@ -3399,7 +3402,18 @@ public final void prepareCommit(Map<String, String> commitUserData)
       // removed the files we are now syncing.
       deleter.incRef(toCommit, false);
     }
-    boolean success = false;
+        success = true;
+      } finally {
+        if (!success && infoStream != null) {
+          message("hit exception during prepareCommit");
+        }
+        doAfterFlush();
+      }
+    } catch (OutOfMemoryError oom) {
+      handleOOM(oom, "prepareCommit");
+    }
+
+    success = false;
     try {
       if (anySegmentsFlushed) {
         maybeMerge();
@@ -3407,9 +3421,11 @@ public final void prepareCommit(Map<String, String> commitUserData)
       success = true;
     } finally {
       if (!success) {
+        synchronized (this) {
         deleter.decRef(toCommit);
       }
     }
+    }
 
     startCommit(toCommit, commitUserData);
   }
diff --git a/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
index 1a48cc80..7dfe66cc 100644
--- a/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -1322,6 +1322,7 @@ public void run() {
             IndexWriterConfig conf = newIndexWriterConfig( 
                                                           TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2);
             w = new IndexWriter(dir, conf);
+            w.setInfoStream(VERBOSE ? System.out : null);
 
             Document doc = new Document();
             doc.add(newField("field", "some text contents", Field.Store.YES, Field.Index.ANALYZED));
diff --git a/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java b/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
index 84af3a5f..4c6153b0 100644
--- a/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
+++ b/lucene/dev/branches/lucene_solr_3_4/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
@@ -846,22 +846,9 @@ public void eval(MockDirectoryWrapper dir)  throws IOException {
       }
     }
 
-    String[] startFiles = dir.listAll();
-    SegmentInfos infos = new SegmentInfos();
-    infos.read(dir);
-    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null);
-    String[] endFiles = dir.listAll();
     modifier.close();
+    TestIndexWriter.assertNoUnreferencedFiles(dir, "docswriter abort() failed to delete unreferenced files");
     dir.close();
-
-    if (!Arrays.equals(startFiles, endFiles)) {
-      fail("docswriter abort() failed to delete unreferenced files:\n  before delete:\n    "
-           + arrayToString(startFiles) + "\n  after delete:\n    "
-           + arrayToString(endFiles));
-    }
-
-    modifier.close();
-
   }
 
   private String arrayToString(String[] l) {
