diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
index fc005c2b..0a33769e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
@@ -83,6 +83,22 @@
   private ExchangeRateProvider provider;
   public static Logger log = LoggerFactory.getLogger(CurrencyField.class);
 
+  /**
+   * A wrapper arround <code>Currency.getInstance</code> that returns null
+   * instead of throwing <code>IllegalArgumentException</code>
+   * if the specified Currency does not exist in this JVM.
+   *
+   * @see Currency#getInstance(String)
+   */
+  public static Currency getCurrency(final String code) {
+    try {
+      return Currency.getInstance(code);
+    } catch (IllegalArgumentException e) {
+      /* :NOOP: */
+    }
+    return null;
+  }
+
   @Override
   protected void init(IndexSchema schema, Map<String, String> args) {
     super.init(schema, args);
@@ -103,8 +119,8 @@ protected void init(IndexSchema schema, Map<String, String> args) {
       this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;
     }
 
-    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {
-      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Invalid currency code " + this.defaultCurrency);
+    if (null == getCurrency(this.defaultCurrency)) {
+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Default currency code is not supported by this JVM: " + this.defaultCurrency);
     }
 
     String precisionStepString = args.get(PARAM_PRECISION_STEP);
@@ -282,14 +298,17 @@ public ExchangeRateProvider getProvider() {
 
   class CurrencyValueSource extends ValueSource {
     private static final long serialVersionUID = 1L;
-    private String targetCurrencyCode;
+    private Currency targetCurrency;
     private ValueSource currencyValues;
     private ValueSource amountValues;
     private final SchemaField sf;
 
     public CurrencyValueSource(SchemaField sfield, String targetCurrencyCode, QParser parser) {
       this.sf = sfield;
-      this.targetCurrencyCode = targetCurrencyCode;
+      this.targetCurrency = getCurrency(targetCurrencyCode);
+      if (null == targetCurrency) {
+        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Currency code not supported by this JVM: " + targetCurrencyCode);
+      }
 
       SchemaField amountField = schema.getField(sf.getName() + POLY_FIELD_SEPARATOR + FIELD_SUFFIX_AMOUNT_RAW);
       SchemaField currencyField = schema.getField(sf.getName() + POLY_FIELD_SEPARATOR + FIELD_SUFFIX_CURRENCY);
@@ -324,7 +343,8 @@ private String getDocCurrencyCode(int doc, int currencyOrd) {
               currency = defaultCurrency;
             }
 
-            if (targetCurrencyOrd == -1 && currency.equals(targetCurrencyCode)) {
+            if (targetCurrencyOrd == -1 && 
+                currency.equals(targetCurrency.getCurrencyCode() )) {
               targetCurrencyOrd = currencyOrd;
             }
 
@@ -333,6 +353,17 @@ private String getDocCurrencyCode(int doc, int currencyOrd) {
             return currencies.strVal(doc);
           }
         }
+        /** throws a (Server Error) SolrException if the code is not valid */
+        private Currency getDocCurrency(int doc, int currencyOrd) {
+          String code = getDocCurrencyCode(doc, currencyOrd);
+          Currency c = getCurrency(code);
+          if (null == c) {
+            throw new SolrException
+              (SolrException.ErrorCode.SERVER_ERROR, 
+               "Currency code of document is not supported by this JVM: "+code);
+          }
+          return c;
+        }
 
         @Override
         public boolean exists(int doc) {
@@ -367,7 +398,7 @@ public long longVal(int doc) {
           int sourceFractionDigits;
 
           if (targetFractionDigits == -1) {
-            targetFractionDigits = Currency.getInstance(targetCurrencyCode).getDefaultFractionDigits();
+            targetFractionDigits = targetCurrency.getDefaultFractionDigits();
           }
 
           if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {
@@ -375,19 +406,18 @@ public long longVal(int doc) {
 
             if (exchangeRate <= 0.0) {
               String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);
-              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrencyCode);
+              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());
             }
 
             sourceFractionDigits = fractionDigitCache[currencyOrd];
 
             if (sourceFractionDigits == -1) {
-              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);
-              sourceFractionDigits = fractionDigitCache[currencyOrd] = Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();
+              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();
             }
           } else {
-            String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);
-            exchangeRate = provider.getExchangeRate(sourceCurrencyCode, targetCurrencyCode);
-            sourceFractionDigits = Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();
+            Currency source = getDocCurrency(doc, currencyOrd);
+            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());
+            sourceFractionDigits = source.getDefaultFractionDigits();
           }
 
           return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);
@@ -438,13 +468,13 @@ public boolean equals(Object o) {
 
       return !(amountValues != null ? !amountValues.equals(that.amountValues) : that.amountValues != null) &&
               !(currencyValues != null ? !currencyValues.equals(that.currencyValues) : that.currencyValues != null) &&
-              !(targetCurrencyCode != null ? !targetCurrencyCode.equals(that.targetCurrencyCode) : that.targetCurrencyCode != null);
+              !(targetCurrency != null ? !targetCurrency.equals(that.targetCurrency) : that.targetCurrency != null);
 
     }
 
     @Override
     public int hashCode() {
-      int result = targetCurrencyCode != null ? targetCurrencyCode.hashCode() : 0;
+      int result = targetCurrency != null ? targetCurrency.hashCode() : 0;
       result = 31 * result + (currencyValues != null ? currencyValues.hashCode() : 0);
       result = 31 * result + (amountValues != null ? amountValues.hashCode() : 0);
       return result;
@@ -600,37 +630,39 @@ public boolean reload() throws SolrException {
           Node rate = attributes.getNamedItem("rate");
           
           if (from == null || to == null || rate == null) {
-            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Exchange rate missing attributes (required: from, to, rate) " + rateNode);
+            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Exchange rate missing attributes (required: from, to, rate) " + rateNode);
           }
           
           String fromCurrency = from.getNodeValue();
           String toCurrency = to.getNodeValue();
           Double exchangeRate;
           
-          if (java.util.Currency.getInstance(fromCurrency) == null ||
-              java.util.Currency.getInstance(toCurrency) == null) {
-            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Could not find from currency specified in exchange rate: " + rateNode);
+          if (null == CurrencyField.getCurrency(fromCurrency)) {
+            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Specified 'from' currency not supported in this JVM: " + fromCurrency);
+          }
+          if (null == CurrencyField.getCurrency(toCurrency)) {
+            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Specified 'to' currency not supported in this JVM: " + toCurrency);
           }
           
           try {
             exchangeRate = Double.parseDouble(rate.getNodeValue());
           } catch (NumberFormatException e) {
-            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Could not parse exchange rate: " + rateNode, e);
+            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Could not parse exchange rate: " + rateNode, e);
           }
           
           addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);
         }
       } catch (SAXException e) {
-        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error parsing currency config.", e);
+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error parsing currency config.", e);
       } catch (IOException e) {
-        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error parsing currency config.", e);
+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error parsing currency config.", e);
       } catch (ParserConfigurationException e) {
-        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error parsing currency config.", e);
+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error parsing currency config.", e);
       } catch (XPathExpressionException e) {
-        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error parsing currency config.", e);
+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error parsing currency config.", e);
       }
     } catch (IOException e) {
-      throw new SolrException(ErrorCode.BAD_REQUEST, "Error while opening Currency configuration file "+currencyConfigFile, e);
+      throw new SolrException(ErrorCode.SERVER_ERROR, "Error while opening Currency configuration file "+currencyConfigFile, e);
     } finally {
       try {
         if (is != null) {
@@ -659,7 +691,7 @@ public void init(Map<String,String> params) throws SolrException {
   @Override
   public void inform(ResourceLoader loader) throws SolrException {
     if(loader == null) {
-      throw new SolrException(ErrorCode.BAD_REQUEST, "Needs ResourceLoader in order to load config file");
+      throw new SolrException(ErrorCode.SERVER_ERROR, "Needs ResourceLoader in order to load config file");
     }
     this.loader = loader;
     reload();
@@ -713,10 +745,10 @@ public static CurrencyValue parse(String externalVal, String defaultCurrency) {
       return null;
     }
     
-    Currency currency = java.util.Currency.getInstance(code);
+    Currency currency = CurrencyField.getCurrency(code);
 
     if (currency == null) {
-      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Invalid currency code " + code);
+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Currency code not supported by this JVM: " + code);
     }
 
     try {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest.java
index 5ea4e15a..ba8e3e73 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest.java
@@ -263,7 +263,18 @@ public void testCurrencyRangeSearch() throws Exception {
     assertQ(req("fl", "*,score", "q",
             field()+":[3 TO *]"),
             "//*[@numFound='8']");
-}
+  }
+
+  @Test
+  public void testBogusCurrency() throws Exception {
+    ignoreException("HOSS");
+
+    // bogus currency
+    assertQEx("Expected exception for invalid currency",
+              req("fl", "*,score", "q",
+                  field()+":[3,HOSS TO *]"),
+              400);
+  }
 
   @Test
   public void testCurrencyPointQuery() throws Exception {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
index f8ef4ca1..d631697e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
@@ -78,6 +78,13 @@ public void testCurrencyOERNoRates() throws Exception {
            "ratesFileLocation");
   }
 
+  public void testCurrencyBogusCode() throws Exception {
+    doTest("bad-schema-currency-ft-bogus-default-code.xml", 
+           "HOSS");
+    doTest("bad-schema-currency-ft-bogus-code-in-xml.xml", 
+           "HOSS");
+  }
+
   public void testPerFieldtypeSimButNoSchemaSimFactory() throws Exception {
     doTest("bad-schema-sim-global-vs-ft-mismatch.xml", "global similarity does not support it");
   }
