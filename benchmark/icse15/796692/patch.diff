diff --git a/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Lob.java b/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Lob.java
index 46a93400..d6ecc33b 100644
--- a/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Lob.java
+++ b/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Lob.java
@@ -400,7 +400,8 @@ protected void checkValidity() throws SQLException{
             throw se.getSQLException();
         }
 
-        if(!isValid_ || transactionID_ != agent_.connection_.getTransactionID())
+        if(!isValid_ || (isLocator()  && 
+        		(transactionID_ != agent_.connection_.getTransactionID())))
             throw new SqlException(null,new ClientMessageId(SQLState.LOB_OBJECT_INVALID))
                                                   .getSQLException();
     }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index ab9215bb..efac73c5 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -112,6 +112,8 @@ public void testUnconsumedParameter() throws SQLException
         
         PreparedStatement ps = prepareStatement( sql);
         ps.setBinaryStream( 1, is,data.length);
+        //DERBY-4312 Make sure commit() doesn't interfere here
+        commit();
         ps.executeUpdate();          
         // Make sure things still work ok when we have a parameter that does get consumed.
         // insert a matching row.
@@ -209,6 +211,8 @@ public void testSetCharacterStream() throws Exception {
         Reader streamReader = new LoopingAlphabetReader(
                 clobLength, CharAlphabet.tamil());
         ps.setCharacterStream(1, streamReader, clobLength);
+        //DERBY-4312 make sure commit() doesn't interfere
+        commit();
         ps.executeUpdate();
         streamReader.close();
         ps.close();
@@ -1302,6 +1306,8 @@ public void testLockingWithLongRowClob() throws Exception
         InputStream streamIn = new LoopingAlphabetStream(10000);
         ps.setAsciiStream(5, streamIn, 10000);
         ps.setInt(6, 1);
+        // DERBY-4312 make sure commit() doesn't interfere here.
+        commit();
         ps.executeUpdate();
         streamIn.close();
         ps.close();
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java
index e0ca3ee9..19d2da55 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java
@@ -1485,11 +1485,12 @@ public void testDerby500() throws Exception {
             fail("Attempting to reuse stream should have thrown an exception!");
         } catch (SQLException sqle) {
             if (usingDerbyNetClient()) {
-                assertSQLState("XJ215", sqle);
-                println("Expected Exception: You cannot invoke other "
-                        + "java.sql.Clob/java.sql.Blob methods after calling the "
-                        + "free() method or after the Blob/Clob's transaction has"
-                        + " been committed or rolled back.");
+            	// DERBY-4315.  This SQLState is wrong for client.
+            	// It should throw XJ001 like embedded.
+            	// Also client inserts bad data.
+            	// Remove special case when DERBY-4315
+            	// is fixed.
+                assertSQLState("XN017", sqle);                
             } else {
                 assertSQLState("XJ001", sqle);
                 println("EXPECTED EXCEPTION - streams cannot be re-used");
@@ -1554,11 +1555,16 @@ public void testDerby500_verifyVarcharStreams() throws Exception {
             rowCount += ps.executeUpdate();
         } catch (SQLException sqle) {
             if (usingDerbyNetClient()) {
-                assertSQLState("XJ215", sqle);
-                println("Expected Exception: You cannot invoke other "
-                        + "java.sql.Clob/java.sql.Blob methods after calling the "
-                        + "free() method or after the Blob/Clob's transaction has"
-                        + " been committed or rolled back.");
+            	// DERBY-4315.  This SQLState is wrong for client.
+            	// It should have the same behavior as embedded.
+            	// That may rquire some additional work in addition
+            	// to DERBY-4315. 
+            	// Remove special case when DERBY-4315
+            	// is fixed or at least throw XJ001 and
+            	// avoid bad data insert.
+                assertSQLState("XN017", sqle);
+                // rollback the bad insert.
+                rollback();
             } else {
                 println("UNEXPECTED EXCEPTION - streams cannot be "
                         + "re-used but in case of varchar, stream is materialized the"
