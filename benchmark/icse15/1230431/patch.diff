diff --git a/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java b/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java
index d52908ff..d05c9ff1 100644
--- a/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java
+++ b/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java
@@ -53,8 +53,8 @@
    * Get the bytes to be added to the category token payload for this
    * enhancement.
    * <p>
-   * <b>NOTE</b>: The returned array is copied, it is recommended to allocate
-   * a new one each time.
+   * <b>NOTE</b>: The returned array is copied, it is recommended to allocate a
+   * new one each time.
    * <p>
    * The bytes generated by this method are the input of
    * {@link #extractCategoryTokenData(byte[], int, int)}.
@@ -83,8 +83,8 @@
   Object extractCategoryTokenData(byte[] buffer, int offset, int length);
 
   /**
-   * Declarative method to indicate whether this enhancement generates
-   * separate category list.
+   * Declarative method to indicate whether this enhancement generates separate
+   * category list.
    * 
    * @return {@code true} if generates category list, else {@code false}.
    */
@@ -98,9 +98,9 @@
   String getCategoryListTermText();
 
   /**
-   * Get the {@link CategoryListTokenizer} which generates the category list
-   * for this enhancement. If {@link #generatesCategoryList()} returns
-   * {@code false} this method will not be called.
+   * Get the {@link CategoryListTokenizer} which generates the category list for
+   * this enhancement. If {@link #generatesCategoryList()} returns {@code false}
+   * this method will not be called.
    * 
    * @param tokenizer
    *            The input stream containing categories.
@@ -112,17 +112,22 @@
    *         this enhancement, with {@code tokenizer} as it's input.
    */
   CategoryListTokenizer getCategoryListTokenizer(TokenStream tokenizer,
-      EnhancementsIndexingParams indexingParams,
-      TaxonomyWriter taxonomyWriter);
+      EnhancementsIndexingParams indexingParams, TaxonomyWriter taxonomyWriter);
 
   /**
    * Get a {@link CategoryProperty} class to be retained when creating
    * {@link CategoryParentsStream}.
    * 
    * @return the {@link CategoryProperty} class to be retained when creating
-   *         {@link CategoryParentsStream}, or {@code null} if there is no
-   *         such property.
+   *         {@link CategoryParentsStream}, or {@code null} if there is no such
+   *         property.
    */
   Class<? extends CategoryProperty> getRetainableProperty();
 
+  /**
+   * Category enhancements must override {@link Object#equals(Object)}, as it is
+   * used in
+   * {@link EnhancementsPayloadIterator#getCategoryData(CategoryEnhancement)}.
+   */
+  public boolean equals(Object o);
 }
diff --git a/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java b/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java
index db965c10..8fc0d1be 100644
--- a/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java
+++ b/lucene/dev/trunk/modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java
@@ -150,4 +150,17 @@ public Object extractCategoryTokenData(byte[] buffer, int offset, int length) {
     return null;
   }
 
+  @Override
+  public boolean equals(Object o) {
+    if (o == this) {
+      return true;
+    }
+    return (o instanceof AssociationEnhancement);
+  }
+  
+  @Override
+  public int hashCode() {
+    return super.hashCode();
+  }
+  
 }
