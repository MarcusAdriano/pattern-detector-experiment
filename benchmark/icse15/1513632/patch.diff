diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java
index 7e0b4df6..05b4ac29 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java
@@ -288,7 +288,7 @@ protected void setup(Context ctx) throws IOException, InterruptedException {
     private Vector sampleDown(Vector rowVector, Context ctx) {
 
       int observationsPerRow = rowVector.getNumNondefaultElements();
-      double rowSampleRate = Math.min(maxObservationsPerRow, observationsPerRow) / observationsPerRow;
+      double rowSampleRate = (double) Math.min(maxObservationsPerRow, observationsPerRow) / (double) observationsPerRow;
 
       Vector downsampledRow = rowVector.like();
       long usedObservations = 0;
@@ -297,7 +297,7 @@ private Vector sampleDown(Vector rowVector, Context ctx) {
       for (Vector.Element elem : rowVector.nonZeroes()) {
 
         int columnCount = observationsPerColumn.get(elem.index());
-        double columnSampleRate = Math.min(maxObservationsPerColumn, columnCount) / columnCount;
+        double columnSampleRate = (double) Math.min(maxObservationsPerColumn, columnCount) / (double) columnCount;
 
         if (random.nextDouble() <= Math.min(rowSampleRate, columnSampleRate)) {
           downsampledRow.setQuick(elem.index(), elem.get());
