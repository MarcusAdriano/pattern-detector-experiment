diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
index 5e5cec60..f6125d3a 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
@@ -42,6 +42,6 @@
 
 public class Constants {
 
-  public static final String VERSION = "11.0.0";
+  public static final String VERSION = "11.1.0";
 
 }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexOperator.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexOperator.java
index 57f89c50..6f3f8cfa 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexOperator.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexOperator.java
@@ -32,7 +32,11 @@
 import org.apache.thrift.TEnum;
 
 public enum IndexOperator implements TEnum {
-  EQ(0);
+  EQ(0),
+  GTE(1),
+  GT(2),
+  LTE(3),
+  LT(4);
 
   private final int value;
 
@@ -55,6 +59,14 @@ public static IndexOperator findByValue(int value) {
     switch (value) {
       case 0:
         return EQ;
+      case 1:
+        return GTE;
+      case 2:
+        return GT;
+      case 3:
+        return LTE;
+      case 4:
+        return LT;
       default:
         return null;
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 78a407b1..6965c628 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -60,6 +60,7 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.IndexClause;
 import org.apache.cassandra.thrift.IndexExpression;
+import org.apache.cassandra.thrift.IndexOperator;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.LatencyTracker;
 import org.apache.cassandra.utils.WrappedRunnable;
@@ -1163,7 +1164,7 @@ private IndexExpression highestSelectivityPredicate(IndexClause clause)
         for (IndexExpression expression : clause.expressions)
         {
             ColumnFamilyStore cfs = getIndexedColumnFamilyStore(expression.column_name);
-            if (cfs == null)
+            if (cfs == null || !expression.op.equals(IndexOperator.EQ))
                 continue;
             int columns = cfs.getMeanColumns();
             if (columns < bestMeanCount)
@@ -1184,12 +1185,34 @@ private static boolean satisfies(ColumnFamily data, IndexClause clause, IndexExp
                 continue;
             // check column data vs expression
             IColumn column = data.getColumn(expression.column_name);
-            if (column != null && !Arrays.equals(column.value(), expression.value))
+            if (column == null)
+                continue;
+            int v = data.getComparator().compare(column.value(), expression.value);
+            if (!satisfies(v, expression.op))
                  return false;
         }
         return true;
     }
 
+    private static boolean satisfies(int comparison, IndexOperator op)
+    {
+        switch (op)
+        {
+            case EQ:
+                return comparison == 0;
+            case GTE:
+                return comparison >= 0;
+            case GT:
+                return comparison > 0;
+            case LTE:
+                return comparison <= 0;
+            case LT:
+                return comparison < 0;
+            default:
+                throw new IllegalStateException();
+        }
+    }
+
     public AbstractType getComparator()
     {
         return metadata.comparator;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
index 99014eb9..9d3e47df 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
@@ -379,9 +379,9 @@ public static void validateIndexClauses(String keyspace, String columnFamily, In
         Set<byte[]> indexedColumns = Table.open(keyspace).getColumnFamilyStore(columnFamily).getIndexedColumns();
         for (IndexExpression expression : index_clause.expressions)
         {
-            if (indexedColumns.contains(expression.column_name))
+            if (expression.op.equals(IndexOperator.EQ) && indexedColumns.contains(expression.column_name))
                 return;
         }
-        throw new InvalidRequestException("No indexed columns present in index clause");
+        throw new InvalidRequestException("No indexed columns present in index clause with operator EQ");
     }
 }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index 204ad15f..135b083b 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -170,7 +170,7 @@ public void testIndexScan() throws IOException
         rm.apply();
 
         rm = new RowMutation("Keyspace1", "k3".getBytes());
-        rm.add(new QueryPath("Indexed1", null, "notbirthdate".getBytes("UTF8")), FBUtilities.toByteArray(1L), new TimestampClock(0));
+        rm.add(new QueryPath("Indexed1", null, "notbirthdate".getBytes("UTF8")), FBUtilities.toByteArray(2L), new TimestampClock(0));
         rm.add(new QueryPath("Indexed1", null, "birthdate".getBytes("UTF8")), FBUtilities.toByteArray(1L), new TimestampClock(0));
         rm.apply();
         
@@ -192,6 +192,13 @@ public void testIndexScan() throws IOException
         assert Arrays.equals("k3".getBytes(), rows.get(1).key.key);
         assert Arrays.equals(FBUtilities.toByteArray(1L), rows.get(0).cf.getColumn("birthdate".getBytes("UTF8")).value());
         assert Arrays.equals(FBUtilities.toByteArray(1L), rows.get(1).cf.getColumn("birthdate".getBytes("UTF8")).value());
+
+        IndexExpression expr2 = new IndexExpression("notbirthdate".getBytes("UTF8"), IndexOperator.GTE, FBUtilities.toByteArray(2L));
+        clause = new IndexClause(Arrays.asList(expr, expr2), ArrayUtils.EMPTY_BYTE_ARRAY, 100);
+        rows = Table.open("Keyspace1").getColumnFamilyStore("Indexed1").scan(clause, range, filter);
+
+        assert rows.size() == 1 : StringUtils.join(rows, ",");
+        assert Arrays.equals("k3".getBytes(), rows.get(0).key.key);
     }
 
     @Test
