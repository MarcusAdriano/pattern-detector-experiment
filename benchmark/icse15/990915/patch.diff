diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java
index 26fb5e66..caf18d2e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/AdaptiveWordValueEncoder.java
@@ -48,13 +48,13 @@ public void addToVector(String originalForm, double weight, Vector data) {
   }
 
   @Override
-  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
-    return super.hashForProbe(originalForm, data, name, i);
+  protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
+    return super.hashForProbe(originalForm, dataSize, name, probe);
   }
 
   @Override
   protected double getWeight(String originalForm, double w) {
-    return w*weight(originalForm);
+    return w * weight(originalForm);
   }
 
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java
index 96d8b95a..a94648f0 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ConstantValueEncoder.java
@@ -32,7 +32,7 @@ public void addToVector(String originalForm, double weight, Vector data) {
     int probes = getProbes();
     String name = getName();
     for (int i = 0; i < probes; i++) {
-        int n = hashForProbe(originalForm, data, name, i);
+        int n = hashForProbe(originalForm, data.size(), name, i);
         trace(null, n);
       data.set(n, data.get(n) + getWeight(originalForm,weight));
     }
@@ -48,8 +48,8 @@ public String asString(String originalForm) {
     return getName();
   }
 
-  protected int hashForProbe(String originalForm, Vector data, String name, int i){
-    return hash(name, i, data.size());
+  protected int hashForProbe(String originalForm, int dataSize, String name, int probe){
+    return hash(name, probe, dataSize);
   }
 
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java
index 745d61a6..fc4182e5 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/ContinuousValueEncoder.java
@@ -39,15 +39,15 @@ public void addToVector(String originalForm, double weight, Vector data) {
     int probes = getProbes();
     String name = getName();
     for (int i = 0; i < probes; i++) {
-      int n = hashForProbe(originalForm, data, name, i);
+      int n = hashForProbe(originalForm, data.size(), name, i);
       trace(null, n);
       data.set(n, data.get(n) + getWeight(originalForm,weight));
     }
   }
 
   @Override
-  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
-    return hash(name, CONTINUOUS_VALUE_HASH_SEED + i, data.size());
+  protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
+    return hash(name, CONTINUOUS_VALUE_HASH_SEED + probe, dataSize);
   }
 
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
index 3a883b23..b893a0bc 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
@@ -21,7 +21,9 @@
 import org.apache.mahout.math.Vector;
 
 import java.nio.charset.Charset;
-import java.util.*;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * General interface for objects that record features into a feature vector.
@@ -70,10 +72,33 @@ public void addToVector(String originalForm, Vector data) {
    */
   public abstract void addToVector(String originalForm, double weight, Vector data);
 
-  protected abstract int hashForProbe(String originalForm, Vector data, String name, int i);
+  /**
+   * Provides the unique hash for a particular probe.  For all encoders except text, this
+   * is all that is needed and the default implementation of hashesForProbe will do the right
+   * thing.  For text and similar values, hashesForProbe should be over-ridden and this method
+   * should not be used.
+   *
+   * @param originalForm  The original string value
+   * @param dataSize      The length of hte vector being encoded
+   * @param name          The name of the variable being encoded
+   * @param probe             The probe number
+   * @return              The hash of the current probe
+   */
+  protected abstract int hashForProbe(String originalForm, int dataSize, String name, int probe);
 
-  protected Iterable<Integer> hashesForProbe(String originalForm, Vector data, String name, int i){
-    return Collections.singletonList(hashForProbe(originalForm,data,name,i));
+  /**
+   * Returns all of the hashes for this probe.  For most encoders, this is a singleton, but
+   * for text, many hashes are returned, one for each word (unique or not).  Most implementations
+   * should only implement hashForProbe for simplicity.
+   *
+   * @param originalForm The original string value.
+   * @param dataSize     The length of the vector being encoded
+   * @param name         The name of the variable being encoded
+   * @param probe        The probe number
+   * @return an Iterable of the hashes
+   */
+  protected Iterable<Integer> hashesForProbe(String originalForm, int dataSize, String name, int probe) {
+    return Collections.singletonList(hashForProbe(originalForm, dataSize, name, probe));
   }
 
   protected double getWeight(String originalForm, double w){
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
index e71d8afd..b8f19ec1 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
@@ -17,17 +17,11 @@
 
 package org.apache.mahout.vectors;
 
-import org.apache.mahout.common.iterator.ArrayIterator;
 import org.apache.mahout.math.Vector;
 
-import java.util.ArrayList;
-
 public class InteractionValueEncoder extends FeatureVectorEncoder {
-
-  protected static final int INTERACTION_VALUE_HASH_SEED_1 = 100;
-  protected static final int INTERACTION_VALUE_HASH_SEED_2 = 200;
-  protected static FeatureVectorEncoder firstEncoder;
-  protected static FeatureVectorEncoder secondEncoder;
+  private static FeatureVectorEncoder firstEncoder;
+  private static FeatureVectorEncoder secondEncoder;
 
   public InteractionValueEncoder(String name, FeatureVectorEncoder encoderOne, FeatureVectorEncoder encoderTwo) {
     super(name, 2);
@@ -50,15 +44,17 @@ public void addToVector(String originalForm, double w, Vector data) {
    *
    * @param originalForm1 The original form of the first value as a string.
    * @param originalForm2 The original form of the second value as a string.
+   * @param weight        How much to weight this interaction
    * @param data          The vector to which the value should be added.
    */
   public void addInteractionToVector(String originalForm1, String originalForm2, double weight, Vector data) {
     String name = getName();
     double w = getWeight(originalForm1, originalForm2, weight);
     for (int i = 0; i < probes(); i++) {
-      for(Integer k : firstEncoder.hashesForProbe(originalForm1, data, name, i)){
-        for(Integer j : secondEncoder.hashesForProbe(originalForm2, data, name, i)){
-          int n = linearDoubleHash(hash1(k,name,i,data),hash2(k,name,i,data),j,data.size());
+      Iterable<Integer> jValues = secondEncoder.hashesForProbe(originalForm2, data.size(), name, i);
+      for(Integer k : firstEncoder.hashesForProbe(originalForm1, data.size(), name, i)){
+        for(Integer j : jValues) {
+          int n = (k + j) % data.size();
           trace(String.format("%s:%s", originalForm1, originalForm2), n);
           data.set(n, data.get(n) + w);
         }
@@ -74,14 +70,6 @@ protected double getWeight(String originalForm1, String originalForm2, double w)
     return firstEncoder.getWeight(originalForm1, 1.0) * secondEncoder.getWeight(originalForm2, 1.0) * w;
   }
 
-  private int linearDoubleHash(int h1, int h2, int j, int modulus){
-   int n = (h1 + (j+1)*h2) % modulus;
-   if(n < 0){
-    n = n+modulus;
-   }
-   return n;
-  }
-
   /**
    * Converts a value into a form that would help a human understand the internals of how the value
    * is being interpreted.  For text-like things, this is likely to be a list of the terms found with
@@ -96,16 +84,8 @@ public String asString(String originalForm) {
   }
 
   @Override
-  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
-    return hash(name, i, data.size());
-  }
-
-  protected int hash1(int value, String name, int i, Vector data){
-    return hash(name, i+value+INTERACTION_VALUE_HASH_SEED_1, data.size());
-  }
-
-  protected int hash2(int value, String name, int i, Vector data){
-    return hash(name, i+value+INTERACTION_VALUE_HASH_SEED_2, data.size());
+  protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
+    return hash(name, probe, dataSize);
   }
 }
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
index a643c2e4..6dd1fa98 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
@@ -17,8 +17,6 @@
 
 package org.apache.mahout.vectors;
 
-import org.apache.mahout.math.Vector;
-
 import java.util.Collections;
 import java.util.Map;
 
@@ -40,8 +38,8 @@ public StaticWordValueEncoder(String name) {
   }
 
   @Override
-  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
-    return hash(name, originalForm, WORD_LIKE_VALUE_HASH_SEED + i, data.size());
+  protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
+    return hash(name, originalForm, WORD_LIKE_VALUE_HASH_SEED + probe, dataSize);
   }
 
    /**
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java
index 9878dfa2..aa0b5077 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/TextValueEncoder.java
@@ -18,6 +18,8 @@
 package org.apache.mahout.vectors;
 
 import com.google.common.base.Splitter;
+import com.google.common.collect.HashMultiset;
+import com.google.common.collect.Multiset;
 import org.apache.mahout.math.Vector;
 
 import java.util.ArrayList;
@@ -33,6 +35,7 @@
 
   private final Splitter onNonWord = Splitter.on(Pattern.compile("\\W+")).omitEmptyStrings();
   private FeatureVectorEncoder wordEncoder;
+  private static final double LOG_2 = Math.log(2);
 
   public TextValueEncoder(String name) {
     super(name, 2);
@@ -47,20 +50,24 @@ public TextValueEncoder(String name) {
    */
   @Override
   public void addToVector(String originalForm, double weight, Vector data) {
+    Multiset<String> counts = HashMultiset.create();
     for (String word : tokenize(originalForm)) {
-      wordEncoder.addToVector(word, weight, data);
+      counts.add(word);
+    }
+    for (String word : counts.elementSet()) {
+      wordEncoder.addToVector(word, weight * Math.log(1 + counts.count(word))/LOG_2, data);
     }
   }
 
   @Override
-  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
+  protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
     return 0;
   }
 
-  protected Iterable<Integer> hashesForProbe(String originalForm, Vector data, String name, int i){
+  protected Iterable<Integer> hashesForProbe(String originalForm, int dataSize, String name, int probe){
     List<Integer> hashes = new ArrayList<Integer>();
     for (String word : tokenize(originalForm)){
-      hashes.add(hashForProbe(word,data,name,i));
+      hashes.add(hashForProbe(word, dataSize, name, probe));
     }
     return hashes;
   }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
index 75a0abd2..692fac8c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
@@ -43,7 +43,7 @@ public void addToVector(String originalForm, double w, Vector data) {
     String name = getName();
     double weight = getWeight(originalForm,w);
     for (int i = 0; i < probes; i++) {
-      int n = hashForProbe(originalForm, data, name, i);
+      int n = hashForProbe(originalForm, data.size(), name, i);
       trace(originalForm, n);
       data.set(n, data.get(n) + weight);
     }
@@ -52,12 +52,12 @@ public void addToVector(String originalForm, double w, Vector data) {
 
   @Override
   protected double getWeight(String originalForm, double w) {
-    return w*weight(originalForm);    
+    return w * weight(originalForm);
   }
 
   @Override
-  protected int hashForProbe(String originalForm, Vector data, String name, int i) {
-    return hash(name, originalForm, WORD_LIKE_VALUE_HASH_SEED + i, data.size());
+  protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
+    return hash(name, originalForm, WORD_LIKE_VALUE_HASH_SEED + probe, dataSize);
   }
 
     /**
