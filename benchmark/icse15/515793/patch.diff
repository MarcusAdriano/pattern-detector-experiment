diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
index 9afbb12a..717f599f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientBaseDataSource.java
@@ -864,7 +864,7 @@ public short getSecurityMechanism(String password) {
      * settings in connectionAttributes and properties of the DataSource will lead to
      * unexpected behaviour. 
      *
-     * @param prop set to the list of Cloudscape connection attributes separated by semi-colons.   E.g., to specify an
+     * @param prop set to the list of Derby connection attributes separated by semi-colons.   E.g., to specify an
      *             encryption bootPassword of "x8hhk2adf", and set upgrade to true, do the following: <PRE>
      *             ds.setConnectionAttributes("bootPassword=x8hhk2adf;upgrade=true"); </PRE> See Derby documentation for
      *             complete list.
diff --git a/db/derby/code/trunk/java/demo/toursdb/insertMaps.java b/db/derby/code/trunk/java/demo/toursdb/insertMaps.java
index b03bb361..eb5951c9 100644
--- a/db/derby/code/trunk/java/demo/toursdb/insertMaps.java
+++ b/db/derby/code/trunk/java/demo/toursdb/insertMaps.java
@@ -42,12 +42,12 @@ public static void main(String[] args) throws Exception {
 		try {
 			Connection connCS = null;
 
-			System.out.println("Loading the Cloudscape jdbc driver...");
+			System.out.println("Loading the Derby jdbc driver...");
 			Class.forName(CSdriver).newInstance();
 	
-			System.out.println("Getting Cloudscape database connection...");
+			System.out.println("Getting Derby database connection...");
 			connCS = DriverManager.getConnection(dbURLCS);
-			System.out.println("Successfully got the Cloudscape database connection...");
+			System.out.println("Successfully got the Derby database connection...");
 
 			PreparedStatement ps = null;
 
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java b/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
index 1d51126b..02c22cb0 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
@@ -309,7 +309,7 @@ public static void main(String args[]) {
 	 * <P>
 	 *  Note: an alternate method to starting the Network Server with the API,
 	 *  is to use the derby.drda.startNetworkServer property in 
-	 *  cloudscape.properties.
+	 *  derby.properties.
 	 *  
 	 * 
 	 * @param consoleWriter   PrintWriter to which server console will be 
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 6c44be3d..98f52d1a 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -19,7 +19,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 */
 /**
  * This class translates DRDA protocol from an application requester to JDBC
- * for Cloudscape and then translates the results from Cloudscape to DRDA
+ * for Derby and then translates the results from Derby to DRDA
  * for return to the application requester.
  */
 package org.apache.derby.impl.drda;
@@ -1246,7 +1246,7 @@ private int getConnFromDatabaseName() throws DRDAProtocolException
 	  	} catch (SQLException se) {
 			String sqlState = se.getSQLState();
 			// need to set the security check code based on the reason the connection     
-			// was denied, Cloudscape doesn't say whether the userid or password caused
+			// was denied, Derby doesn't say whether the userid or password caused
 			// the problem, so we will just return userid invalid
 			databaseAccessException = se;
 			for (; se != null; se = se.getNextException())
@@ -1263,7 +1263,7 @@ private int getConnFromDatabaseName() throws DRDAProtocolException
 		}
 		catch (Exception e)
 		{
-			// If cloudscape has shut down for some reason,
+			// If Derby has shut down for some reason,
 			// we will send  an agent error and then try to 
 			// get the driver loaded again.  We have to get
 			// rid of the client first in case they are holding
@@ -1740,7 +1740,7 @@ private int parseACCSEC() throws  DRDAProtocolException
                         }
                     }
 					break;
-                //optional (currently required for Cloudscape - needed for
+                //optional (currently required for Derby - needed for
                 //          DERBY-528 as well)
 				case CodePoint.RDBNAM:
 					String dbname = parseRDBNAM();
@@ -3530,7 +3530,7 @@ protected void parseSQLATTR(DRDAStatement stmt) throws DRDAProtocolException
 		String attrs = parseEncodedString();
 		if (SanityManager.DEBUG)
 			trace("sqlattr = '" + attrs+"'");
-		//let Cloudscape handle any errors in the types it doesn't support
+		//let Derby handle any errors in the types it doesn't support
 		//just set the attributes
 
 		boolean validAttribute = false;
@@ -3626,7 +3626,7 @@ private boolean parseDSCSQLSTT() throws DRDAProtocolException,SQLException
 	 *  PKGNAMCSN - RDB Package Name, Consistency Token and Section Number - required
 	 *  OUTEXP - Output expected
 	 *  NBRROW - Number of rows to be inserted if it's an insert
-	 *  PRCNAM - procedure name if specified by host variable, not needed for Cloudscape
+	 *  PRCNAM - procedure name if specified by host variable, not needed for Derby
 	 *  QRYBLKSZ - query block size
 	 *  MAXRSLCNT - max resultset count
 	 *  MAXBLKEXT - Max number of extra blocks
@@ -4877,7 +4877,7 @@ private void parseEXCSQLSETobjects()
                         }
 
 						if (canIgnoreStmt(sqlStmt)) {
-						// We _know_ Cloudscape doesn't recognize this
+						// We _know_ Derby doesn't recognize this
 						// statement; don't bother trying to execute it.
 						// NOTE: at time of writing, this only applies
 						// to "SET CLIENT" commands, and it was decided
@@ -5477,7 +5477,7 @@ private void writeCMDCHKRM(int severity) throws DRDAProtocolException
 	}
 
 	/**
-	 * Translate from Cloudscape exception severity to SVRCOD
+	 * Translate from Derby exception severity to SVRCOD
 	 *
 	 * @param e SQLException
 	 */
@@ -8076,7 +8076,7 @@ private int validateSecMecUSRSSBPWD() throws  DRDAProtocolException
             // database level).
             // 
             // if monitor is never setup by any ModuleControl, getMonitor
-            // returns null and no cloudscape database has been booted. 
+            // returns null and no Derby database has been booted. 
             if (Monitor.getMonitor() != null)
                 databaseObj = (org.apache.derby.iapi.db.Database)
                     Monitor.findService(Property.DATABASE_MODULE, dbName);
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
index feaf14af..e70b8c15 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
@@ -710,16 +710,16 @@ protected void finishParams()
 	 * For dyamic packages The package name is encoded as follows
 	 * SYS(S/L)(H/N)xyy 
 	 * where 'S' represents Small package and 'L' large 
-	 *                      (ignored by cloudscape) 
+	 *                      (ignored by Derby) 
 	 * Where 'H' represents WITH HOLD, and 'N' represents NO WITH HOLD. 
 	 *                      (May be overridden by SQLATTR for WITH
 	 *                       HOLD")
 	 *
-	 * Where 'www' is the package iteration (ignored by cloudcape)
+	 * Where 'www' is the package iteration (ignored by Derby)
 	 * Where 'x' is the isolation level: 0=NC, 1=UR, 2=CS, 3=RS, 4=RR 
 	 * Where 'yy' is the package iteration 00 through FF 
 	 * Where 'zz' is unique for each platform
-	 * Happilly, these values correspond precisely to the internal cloudscape
+	 * Happilly, these values correspond precisely to the internal Derby
 	 * isolation levels  in ExecutionContext.java
 	 * x   Isolation Level                                           
 	 * --  ---------------------
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 900c85b5..35a9b564 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -561,7 +561,7 @@ public void consoleMessage(String msg)
 	/**
 	 * Start a network server.  Launches a separate thread with 
 	 * DRDAServerStarter.  Want to use Monitor.startModule,
-	 * so it can all get shutdown when cloudscape shuts down, but 
+	 * so it can all get shutdown when Derby shuts down, but 
 	 * can't get it working right now.
 	 *
 	 * @param consoleWriter   PrintWriter to which server console will be 
@@ -771,13 +771,13 @@ public Object run() throws Exception
 
 		if (shutdownDatabasesOnShutdown) {
 
-			// Shutdown Cloudscape
+			// Shutdown Derby
 			try {
 				if (cloudscapeDriver != null)
 					cloudscapeDriver.connect("jdbc:derby:;shutdown=true",
 											 (Properties) null);
 			} catch (SQLException sqle) {
-				// If we can't shutdown cloudscape. Perhaps authentication is
+				// If we can't shutdown Derby. Perhaps authentication is
 				// set to true or some other reason. We will just print a
 				// message to the console and proceed.
 				String expectedState =
@@ -798,7 +798,7 @@ public Object run() throws Exception
     }
 	
 	/** 
-	 * Load Cloudscape and save driver for future use.
+	 * Load Derby and save driver for future use.
 	 * We can't call Driver Manager when the client connects, 
 	 * because they might be holding the DriverManager lock.
 	 *
@@ -811,7 +811,7 @@ public Object run() throws Exception
 	protected void startNetworkServer() throws Exception
 	{
 
-		// we start the cloudscape server here.
+		// we start the Derby server here.
 		boolean restartCheck = this.restartFlag;
 		synchronized (serverStartSync) {
 
@@ -1702,7 +1702,7 @@ private void sendMessage(DDMWriter writer, int messageType, String message)
 	 * Send SQL Exception from server to client after processing a command
 	 *
 	 * @param writer	writer to use for sending message
-	 * @param se		Cloudscape exception
+	 * @param se		Derby exception
 	 * @param type		type of exception, SQLERROR or SQLWARNING
 	 *
 	 * @throws Exception if a problem occurs sending message
@@ -1840,9 +1840,9 @@ private String getRuntimeInfo()
 	}
 
 	/**
-	 * Get Cloudscape information
+	 * Get Derby information
 	 *
-	 * @return system information for Cloudscape
+	 * @return system information for Derby
 	 *
 	 * @throws IOException if a problem occurs encoding string
 	 */
@@ -3476,7 +3476,7 @@ private void connectToDatabase(DDMWriter writer, String database, String user,
 	/**
 	 * Wrap SQL Error - display to console and raise exception
 	 *
-	 * @param messageKey	Cloudscape SQL Exception message id
+	 * @param messageKey	Derby SQL Exception message id
 	 *
 	 * @exception Exception raises exception for message
 	 */
@@ -3489,7 +3489,7 @@ private void wrapSQLError(String messageKey)
 	/**
 	 * Wrap SQL Warning - display to console and raise exception
 	 *
-	 * @param messageKey	Cloudscape SQL Exception message id
+	 * @param messageKey	Derby SQL Exception message id
 	 *
 	 * @exception Exception raises exception for message
 	 */
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java
index 9cbbf505..afd74fa7 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java
@@ -31,7 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *  org.apache.derby.shared.common.reference.SQLState to
 	 *  a SQLState five character string.
      *
-	 *	@param messageID - the sql state id of the message from cloudscape
+	 *	@param messageID - the sql state id of the message from Derby
 	 *	@return String 	 - the 5 character code of the SQLState ID to returned to the user 
 	*/
 	public static String getSQLStateFromIdentifier(String messageID) {
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
index 58617ff1..bb43cfd0 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/MessageId.java
@@ -100,7 +100,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	** Connectivity
 	*/
 	String CONN_DATABASE_IDENTITY			= "J004"; // database identity
-	String CONN_SHUT_DOWN_CLOUDSCAPE		= "J005"; // shut down Cloudscape
+	String CONN_SHUT_DOWN_CLOUDSCAPE		= "J005"; // shut down Derby
 	String CONN_CREATE_DATABASE				= "J007"; // create database
 	String CONN_NO_DETAILS					= "J008"; // no details
     String CONN_DATA_ENCRYPTION             = "J010"; // encrypt database on disk
@@ -157,7 +157,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	String AUTH_INVALID					= "A020"; // authentication failed due to invalid password or whatever
 
 	/*
-	** cloudscape Interface in com.ibm.db2j.core.*
+	** Derby interface in org.apache.derby.iapi.*
 	** These messages are thrown in both the server and the client side.
 	*/
 	String CORE_JDBC_DRIVER_UNREGISTERED= "I015"; // JDBCDriver is not registered with the JDBC driver manager
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 26adfa8d..aacb5467 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1032,7 +1032,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_TRIGGER_RECURSION_EXCEEDED                             = "54038";
 	String LANG_TOO_MANY_PARAMETERS_FOR_STORED_PROC                    = "54023";
 
-	//following 1 does not match the DB2 sql state, it is a Cloudscape specific behavior which is not compatible with DB2
+	//following 1 does not match the DB2 sql state, it is a Derby specific behavior which is not compatible with DB2
 	String LANG_OPERATION_NOT_ALLOWED_ON_SESSION_SCHEMA_TABLES = "XCL51.S";
 
 	// org.apache.derby.impl.sql.execute.rts
@@ -1324,7 +1324,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_NO_TRUNCATE_ON_FK_REFERENCE_TABLE                      = "XCL48.S";
 	String LANG_NO_TRUNCATE_ON_ENABLED_DELETE_TRIGGERS                 = "XCL49.S";
 
-    // Initial release of DB2 Cloudscape does not support upgrade
+    // Initial release of Apache Derby did not support upgrade
 	String LANG_CANT_UPGRADE_DATABASE                                 = "XCL50.S";
 
     String LANG_STATEMENT_CANCELLED_OR_TIMED_OUT                       = "XCL52.S";
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
index 825ffc34..bfdecd5e 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
@@ -77,7 +77,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     java org.apache.derby.tools.sysinfo
   </PRE>
   Alternatively, you can use SysInfo within your program to display
-  Cloudscape information; a Cloudscape version string is returned by this Java code:
+  Derby information; a Derby version string is returned by this Java code:
   <PRE>
     new Main().toString();
   </PRE>
@@ -89,7 +89,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
   /**
     Application entry point for SysInfo.   This will print out
-    the Cloudscape product information as well as a snapshot of
+    the Derby product information as well as a snapshot of
     the System properties.
   */
   public static void main(String args[]) {
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/ZipInfoProperties.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/ZipInfoProperties.java
index 45476aa3..1ce72d9d 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/ZipInfoProperties.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/ZipInfoProperties.java
@@ -33,9 +33,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private final ProductVersionHolder	version;
     /**
         full path to zip (or expanded zip)
-        C:/cloudscape/lib/tools.zip
+        C:/derby/lib/tools.zip
             -or-
-        D:\myWorkDir\cloudscape\lib\ *expanded*
+        D:\myWorkDir\derby\lib\ *expanded*
 
         The base name (at the end) should be the same as the zipNameString
      */
