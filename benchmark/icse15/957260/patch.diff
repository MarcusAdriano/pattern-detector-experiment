diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
index 8bd2b216..e171ab93 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
@@ -887,7 +887,8 @@ public ValueNode remapColumnReferencesToExpressions()
                 // the wrong column. DERBY-4679.
                 ftRC = rcl.getResultColumn(
                     tableNumberBeforeFlattening,
-                    columnNumberBeforeFlattening);
+                    columnNumberBeforeFlattening,
+                    columnName);
 
                 if (ftRC == null) {
                     // The above lookup won't work for references to a base
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index b37347f3..98eadc47 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -321,11 +321,19 @@ public ResultColumn getResultColumn(String columnName, boolean markIfReferenced
      * table may appear multiple times in the queries with separate correlation
      * names, and/or column names from different tables may be the same (hence
      * looking up by column name will not always work), cf DERBY-4679.
+     * <p/>
+     * {@code columnName} is used to assert that we find the right column.
+     * If we found a match on (tn, cn) but columnName is wrong, return null.
+     * Once we trust table numbers and column numbers to always be correct,
+     * cf. DERBY-4695, we can remove this parameter.
      *
      * @param tableNumber the table number to look for
      * @param columnNumber the column number to look for
+     * @param columnName name of the desired column
      */
-    public ResultColumn getResultColumn(int tableNumber, int columnNumber)
+    public ResultColumn getResultColumn(int tableNumber,
+                                        int columnNumber,
+                                        String columnName)
     {
         int size = size();
 
@@ -347,10 +355,28 @@ public ResultColumn getResultColumn(int tableNumber, int columnNumber)
                         if (ft.getTableNumber() == tableNumber &&
                                 rc.getColumnPosition() == columnNumber) {
 
-                            // Found matching (t,c) within this top resultColumn
+                            // Found matching (t,c) within this top
+                            // resultColumn. Now do sanity check that column
+                            // name is correct. Remove when DERBY-4695 is
+                            // fixed.
+                            if (columnName.equals(
+                                        vcn.getSourceColumn().getName())) {
                             resultColumn.setReferenced();
                             return resultColumn;
-
+                            } else {
+                                if (SanityManager.DEBUG) {
+                                    SanityManager.ASSERT(
+                                        false,
+                                        "wrong (tn,cn) for column " +
+                                        columnName +
+                                        " found: this pair points to " +
+                                        vcn.getSourceColumn().getName());
+                                }
+                                // Fall back on column name based lookup,
+                                // cf. DERBY-4679. See ColumnReference#
+                                // remapColumnReferencesToExpressions
+                                return null;
+                            }
                         } else {
                             rc = vcn.getSourceColumn();
                         }
