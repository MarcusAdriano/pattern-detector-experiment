diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
index 8a40b320..4ce33c6d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -386,13 +386,9 @@ public int executeUpdate() throws SQLException {
         }
     }
 
-    // also used by Blob
-    int executeUpdateX() throws SqlException {
+    private int executeUpdateX() throws SqlException {
         flowExecute(executeUpdateMethod__);
-
-        if (sqlMode_ == isUpdate__) {
-            super.checkExecuteUpdatePostConditions("java.sql.PreparedStatement");
-        }
+        checkExecuteUpdatePostConditions("java.sql.PreparedStatement");
         return updateCount_;
     }
 
@@ -1799,6 +1795,12 @@ void flowExecute(int executeType) throws SqlException {
                 }
             }
 
+            // The JDBC spec says that executeUpdate() should return 0
+            // when no row count is returned.
+            if (executeType == executeUpdateMethod__ && updateCount_ < 0) {
+                updateCount_ = 0;
+            }
+
             // Throw an exception if holdability returned by the server is different from requested.
             if (resultSet_ != null && resultSet_.resultSetHoldability_ != resultSetHoldability_ && sqlMode_ != isCall__) {
                 throw new SqlException(agent_.logWriter_, 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
index f364b5b8..2427b2b9 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
@@ -2084,6 +2084,12 @@ else if (sqlUpdateMode_ == isInsertSql__ && generatedKeysColumnNames_ != null) {
                 connection_.flowAutoCommit();
             }
         }
+
+        // The JDBC spec says that executeUpdate() should return 0
+        // when no row count is returned.
+        if (executeType == executeUpdateMethod__ && updateCount_ < 0) {
+            updateCount_ = 0;
+        }
     }
 
     void flowExecuteBatch(int[] updateCounts) throws SqlException, BatchUpdateException {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
index 8138a4b4..e05cc3f8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
@@ -102,7 +102,7 @@ public void testExecuteQueryWithMoreThanOneDynamicResultSet()
      * Tests that <code>Statement.executeUpdate()</code> succeeds when
      * no result sets are returned.
      *
-     * <p>Currently, this test fails with the client driver and JCC.
+     * <p>Currently, this test fails with JCC.
      *
      * @exception SQLException if a database error occurs
      */
@@ -194,7 +194,7 @@ public void testExecuteQueryWithMoreThanOneDynamicResultSet_prepared()
      * Tests that <code>PreparedStatement.executeUpdate()</code>
      * succeeds when no result sets are returned.
      *
-     * <p>Currently, this test fails with the client driver and JCC.
+     * <p>Currently, this test fails with JCC.
      *
      * @exception SQLException if a database error occurs
      */
@@ -213,7 +213,7 @@ public void xtestExecuteUpdateWithNoDynamicResultSets_prepared()
      * Tests that <code>PreparedStatement.executeUpdate()</code> fails
      * when a result set is returned from a stored procedure.
      *
-     * <p>Currently, this test fails with the client driver and
+     * <p>Currently, this test fails with
      * JCC. However, the corresponding tests for
      * <code>Statement</code> and <code>CallableStatement</code>
      * succeed. Strange...
@@ -296,7 +296,7 @@ public void testExecuteQueryWithMoreThanOneDynamicResultSet_callable()
      * Tests that <code>CallableStatement.executeUpdate()</code>
      * succeeds when no result sets are returned.
      *
-     * <p>Currently, this test fails with the client driver and JCC.
+     * <p>Currently, this test fails with JCC.
      *
      * @exception SQLException if a database error occurs
      */
@@ -579,7 +579,7 @@ private static void assertResultsFromExecuteUpdate(SQLException sqle) {
      */
     public static Test suite() {
         TestSuite suite = new TestSuite(ProcedureTest.class);
-        if (usingEmbedded()) {
+        if (!usingDerbyNet()) {
             suite.addTest
                 (new ProcedureTest
                  ("xtestExecuteUpdateWithNoDynamicResultSets"));
@@ -592,6 +592,8 @@ public static Test suite() {
             suite.addTest
                 (new ProcedureTest
                  ("xtestExecuteUpdateWithNoDynamicResultSets_callable"));
+        }
+        if (usingEmbedded()) {
             suite.addTest
                 (new ProcedureTest
                  ("xtestRollbackStoredProcWhenExecuteQueryReturnsNothing"));
