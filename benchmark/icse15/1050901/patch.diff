diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
index a507d2b2..85132c70 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
@@ -46,7 +46,6 @@
 public class ConcurrentMergeScheduler extends MergeScheduler {
 
   private int mergeThreadPriority = -1;
-  private volatile boolean closed;
 
   protected List<MergeThread> mergeThreads = new ArrayList<MergeThread>();
 
@@ -66,6 +65,7 @@
 
   protected Directory dir;
 
+  private boolean closed;
   protected IndexWriter writer;
   protected int mergeThreadCount;
 
@@ -154,37 +154,18 @@ public int compare(MergeThread t1, MergeThread t2) {
    *  pause & unpause threads. */
   protected synchronized void updateMergeThreads() {
 
-    // Only look at threads that are alive & not in the
-    // process of stopping (ie have an active merge):
-    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();
-
-    int threadIdx = 0;
-    while (threadIdx < mergeThreads.size()) {
-      final MergeThread mergeThread = mergeThreads.get(threadIdx);
-      if (!mergeThread.isAlive()) {
-        // Prune any dead threads
-        mergeThreads.remove(threadIdx);
-        continue;
-      }
-      if (mergeThread.getCurrentMerge() != null) {
-        activeMerges.add(mergeThread);
-      }
-      threadIdx++;
-    }
-
-    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);
+    CollectionUtil.mergeSort(mergeThreads, compareByMergeDocCount);
     
+    final int count = mergeThreads.size();
     int pri = mergeThreadPriority;
-    final int activeMergeCount = activeMerges.size();
-    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {
-      final MergeThread mergeThread = activeMerges.get(threadIdx);
+    for(int i=0;i<count;i++) {
+      final MergeThread mergeThread = mergeThreads.get(i);
       final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();
       if (merge == null) { 
         continue;
       }
-
       final boolean doPause;
-      if (threadIdx < activeMergeCount-maxThreadCount) {
+      if (i < count-maxThreadCount) {
         doPause = true;
       } else {
         doPause = false;
@@ -235,30 +216,23 @@ private synchronized void initMergeThreadPriority() {
   @Override
   public void close() {
     closed = true;
-    sync();
   }
 
-  /** Wait for any running merge threads to finish */
-  public void sync() {
-    while(true) {
-      MergeThread toSync = null;
-      synchronized(this) {
-        for(MergeThread t : mergeThreads) {
-          if (t.isAlive()) {
-            toSync = t;
-            break;
-          }
-        }
+  public synchronized void sync() {
+    while(mergeThreadCount() > 0) {
+      if (verbose())
+        message("now wait for threads; currently " + mergeThreads.size() + " still running");
+      final int count = mergeThreads.size();
+      if (verbose()) {
+        for(int i=0;i<count;i++)
+          message("    " + i + ": " + mergeThreads.get(i));
       }
-      if (toSync != null) {
+      
         try {
-          toSync.join();
+        wait();
         } catch (InterruptedException ie) {
           throw new ThreadInterruptedException(ie);
         }
-      } else {
-        break;
-      }
     }
   }
 
@@ -344,17 +318,11 @@ public void merge(IndexWriter writer)
           // merge:
           merger = getMergeThread(writer, merge);
           mergeThreads.add(merger);
-          if (verbose()) {
+          updateMergeThreads();
+          if (verbose())
             message("    launch new thread [" + merger.getName() + "]");
-          }
 
           merger.start();
-
-          // Must call this after starting the thread else
-          // the new thread is removed from mergeThreads
-          // (since it's not alive yet):
-          updateMergeThreads();
-
           success = true;
         }
       } finally {
@@ -448,6 +416,7 @@ public void run() {
               message("  merge thread: do another merge " + merge.segString(dir));
           } else {
             done = true;
+            updateMergeThreads();
             break;
           }
         }
@@ -468,8 +437,10 @@ public void run() {
         }
       } finally {
         synchronized(ConcurrentMergeScheduler.this) {
-          updateMergeThreads();
           ConcurrentMergeScheduler.this.notifyAll();
+          boolean removed = mergeThreads.remove(this);
+          assert removed;
+          updateMergeThreads();
         }
       }
     }
