diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
index d18150cf..95db0f0f 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
@@ -24,7 +24,6 @@
 import javax.naming.InitialContext;
 import javax.naming.NamingException;
 import javax.naming.NoInitialContextException;
-import javax.naming.directory.InitialDirContext;
 import javax.naming.spi.InitialContextFactory;
 import javax.naming.spi.InitialContextFactoryBuilder;
 
@@ -42,15 +41,11 @@ public Context getInitialContext(Hashtable<?, ?> environment)
 	    
 	    Utils.augmentEnvironment(environment);
 	  
-	    BundleContext context = Utils.getBundleContext(environment, InitialContext.class.getName());	    
-	    if (context == null) {
-	        context = Utils.getBundleContext(environment, InitialDirContext.class.getName());
+	    BundleContext context = Utils.getBundleContext(environment, InitialContext.class);	    
 	        if (context == null) {
 	            throw new NoInitialContextException("Unable to determine caller's BundleContext");
 	        }
-	    }
 	    	    
 	    return ContextHelper.getInitialContext(context, environment);
 	}
-	
 }
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
index 10b8f7df..bcb04c1f 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
@@ -71,9 +71,9 @@ public Object getObjectInstance(Object obj,
     }
 
     private BundleContext getCallerBundleContext(Hashtable<?, ?> environment) throws NamingException {
-        BundleContext context = Utils.getBundleContext(environment, NamingManager.class.getName());        
+        BundleContext context = Utils.getBundleContext(environment, NamingManager.class);        
         if (context == null) {
-            context = Utils.getBundleContext(environment, DirectoryManager.class.getName());
+            context = Utils.getBundleContext(environment, DirectoryManager.class);
         }
         return context;
     }
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
index 271703b6..c1f1b2ab 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
@@ -59,7 +59,7 @@ private Utils() {
      * @throws NamingException
      */
     public static BundleContext getBundleContext(final Map<?, ?> env, 
-                                                 final String namingClass) {
+                                                 final Class<?> namingClass) {
         return AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
             public BundleContext run() {
                 return doGetBundleContext(env, namingClass);
@@ -67,7 +67,7 @@ public BundleContext run() {
         });
     }
     
-    private static BundleContext doGetBundleContext(Map<?, ?> env, String namingClass) {
+    private static BundleContext doGetBundleContext(Map<?, ?> env, Class<?> namingClass) {
         BundleContext result = null;
 
         Object bc = (env == null) ? null : env.get(JNDIConstants.BUNDLE_CONTEXT);
@@ -83,18 +83,17 @@ private static BundleContext doGetBundleContext(Map<?, ?> env, String namingClas
             StackFinder finder = new StackFinder();
             Class<?>[] classStack = finder.getClassContext();
 
-            // find constructor of given naming class
-            int indexOfConstructor = -1;
-            for (int i = 0 ; i < classStack.length; i++) {
-                if (classStack[i].getName().equals(namingClass)) {
-                    indexOfConstructor = i;
+            // working from the root of the stack look for the first instance in the stack of this class
+            int i = classStack.length - 1;
+            for (; i >= 0; i--) {
+              if (namingClass.isAssignableFrom(classStack[i])) {
+                break;
                 }
             }
             
-            // get the caller of the constructor
-            if (indexOfConstructor >= 0 && (indexOfConstructor + 1) < classStack.length) {
-                Class<?> callerClass = classStack[indexOfConstructor + 1];
-                result = getBundleContext(callerClass.getClassLoader());
+            // then go to the parent of the namingClass down the stack until we find a BundleContext
+            for (i++; i < classStack.length && result == null; i++) {
+              result = getBundleContext(classStack[i].getClassLoader());
             }
         }
 
