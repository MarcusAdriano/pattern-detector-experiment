diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/Interceptor.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/Interceptor.java
index 84d2896b..ad8a2816 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/Interceptor.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/Interceptor.java
@@ -50,11 +50,11 @@
      * The method is called after the method m is invoked and causes an exception.
      * @param cm : the component metadata
      * @param m : the method invoked
-     * @param ex : the exception thrown
+     * @param ex : the <code>Throwable</code> thrown
      * @param preCallToken token returned by preCall
      * @throws Throwable
      */
-    public void postCallWithException(ComponentMetadata cm, Method m, Exception ex, Object preCallToken) throws Throwable;
+    public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) throws Throwable;
     
     
     /**
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
index 290e142d..eaf4a22d 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
@@ -150,13 +150,13 @@ public Object invoke(Object proxy, Method method, Object[] args)
                 postCallInterceptorWithReturn(cm, method, toReturn,
                         calledInterceptors);
 
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 // log the exception e
                 LOGGER.error("invoke", e);
 
                 // if we catch an exception we decide carefully which one to
                 // throw onwards
-                Exception exceptionToRethrow = null;
+                Throwable exceptionToRethrow = null;
                 // if the exception came from a precall or postcall interceptor
                 // we will rethrow it
                 // after we cycle through the rest of the interceptors using
@@ -238,7 +238,7 @@ private void postCallInterceptorWithReturn(ComponentMetadata cm,
      *            : exception throwed
      */
     private void postCallInterceptorWithException(ComponentMetadata cm,
-            Method method, Exception exception,
+            Method method, Throwable exception,
             Stack<Collaborator.StackElement> calledInterceptors)
             throws Throwable {
         Throwable tobeRethrown = null;
diff --git a/incubator/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerTwo.java b/incubator/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerTwo.java
index f6d85e37..8a469523 100644
--- a/incubator/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerTwo.java
+++ b/incubator/aries/trunk/blueprint/blueprint-testbundlea/src/main/java/org/apache/aries/blueprint/testbundlea/NSHandlerTwo.java
@@ -89,7 +89,7 @@ public void postCallWithReturn(ComponentMetadata cm, Method m,
         }
         
         public void postCallWithException(ComponentMetadata cm, Method m,
-                Exception ex, Object preCallToken) throws Throwable {
+                Throwable ex, Object preCallToken) throws Throwable {
             
             if(!isIgnorableMethod(m))
                 interceptorLog.add("POSTCALLEXCEPTION["+ex.toString()+"]:"+preCallToken);
diff --git a/incubator/aries/trunk/transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java b/incubator/aries/trunk/transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
index 1276c486..590dc995 100644
--- a/incubator/aries/trunk/transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
+++ b/incubator/aries/trunk/transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
@@ -43,7 +43,7 @@ public int getRank()
     }
 
     public void postCallWithException(ComponentMetadata cm, Method m,
-        Exception ex, Object preCallToken)
+        Throwable ex, Object preCallToken)
      {
        if (preCallToken instanceof TransactionToken)
        {
@@ -51,20 +51,11 @@ public void postCallWithException(ComponentMetadata cm, Method m,
          try { 
              Transaction tran = token.getActiveTransaction();
              if (tran != null) {
-                 Class<?> exceptionClass = ex.getClass();
-                 boolean isAppException = false;
-
-                 if (!RuntimeException.class.isAssignableFrom(exceptionClass)) {
-                     for (Class<?> cls : m.getExceptionTypes()) {
-                         isAppException = cls.isAssignableFrom(exceptionClass);
-
-                         if (isAppException)
-                             break;
-                     }
-                 }
-
-                 if (!isAppException)
+                 if (ex instanceof RuntimeException || ex instanceof Error) {
                      tran.setRollbackOnly();
+                 } else {
+                     //declared exception, we don't set rollback
+                 }
              }
 
              token.getTransactionStrategy().finish(tm, token);
diff --git a/incubator/aries/trunk/transaction/transaction-blueprint/src/test/java/org/apache/aries/transaction/InterceptorTest.java b/incubator/aries/trunk/transaction/transaction-blueprint/src/test/java/org/apache/aries/transaction/InterceptorTest.java
index e69de29b..a92e5189 100644
--- a/incubator/aries/trunk/transaction/transaction-blueprint/src/test/java/org/apache/aries/transaction/InterceptorTest.java
+++ b/incubator/aries/trunk/transaction/transaction-blueprint/src/test/java/org/apache/aries/transaction/InterceptorTest.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.transaction;
+
+import static org.junit.Assert.*;
+
+import java.io.IOException;
+
+import javax.transaction.Transaction;
+import javax.transaction.TransactionManager;
+
+import org.junit.Test;
+
+import org.apache.aries.unittest.mocks.MethodCall;
+import org.apache.aries.unittest.mocks.Skeleton;
+
+public class InterceptorTest {
+    private Transaction t;
+    
+    @Test
+    public void testRollbackOnException() {
+        TxInterceptorImpl sut = new TxInterceptorImpl();
+        sut.setTransactionManager(Skeleton.newMock(TransactionManager.class));
+        
+        sut.postCallWithException(null, null, new IllegalStateException(), newTranToken());
+        assertRolledBack();
+        sut.postCallWithException(null, null, new Error(), newTranToken());
+        assertRolledBack();
+
+        sut.postCallWithException(null, null, new Exception(), newTranToken());
+        assertNotRolledBack();
+        sut.postCallWithException(null, null, new IOException(), newTranToken());
+        assertNotRolledBack();
+    }
+    
+    private void assertNotRolledBack() {
+        Skeleton.getSkeleton(t).assertNotCalled(new MethodCall(Transaction.class, "setRollbackOnly"));
+    }
+    
+    private void assertRolledBack() {
+        Skeleton.getSkeleton(t).assertCalled(new MethodCall(Transaction.class, "setRollbackOnly"));
+    }
+    
+    private TransactionToken newTranToken() {
+        t = Skeleton.newMock(Transaction.class);
+        return new TransactionToken(t, null, TransactionStrategy.REQUIRED);
+    }
+}
