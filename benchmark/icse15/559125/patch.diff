diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 8dab7888..d6859b45 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -3924,6 +3924,13 @@ public void moveToInsertRow() throws SQLException {
 
 		synchronized (getConnectionSynchronization()) {
 			try {
+				//we need to set the context because the getNull call below 
+				//(if dealing with territory based database) might need to 
+				//look up the current context to get the correct 
+				//RuleBasedCollator. This RuleBasedCollator will be used to
+				//construct a CollatorSQL... type rather than SQL...Char type 
+				//when dealing with character string datatypes.
+				setupContextStack();
 				// initialize state corresponding to insertRow/updateRow impl.
 				initializeUpdateRowModifiers();
  				isOnInsertRow = true;
@@ -3934,6 +3941,8 @@ public void moveToInsertRow() throws SQLException {
 				}
 			} catch (Throwable ex) {
 				handleException(ex);
+			} finally {
+				restoreContextStack(); 
 			}
 		}
 	}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index a2992bad..97e3a1e8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -976,6 +976,16 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     rs = s.executeQuery("SELECT SUBSTR(c||v, 1, 4), COUNT(*) FROM DERBY_2960" +
     		" GROUP BY SUBSTR(c||v, 1, 4)");
     JDBC.assertFullResultSet(rs,new String[][] {{"dupl","1"}});
+    
+    //DERBY-2966
+    //Moving to insert row in a territory based db should not cause exception
+    ps = conn.prepareStatement("SELECT * FROM CUSTOMER FOR UPDATE",
+    		ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
+    rs = ps.executeQuery();
+    rs.moveToInsertRow();
+    rs.close();
+    ps.close();
+
 }
 
 private void setUpTable(Statement s) throws SQLException {
