diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/CoveredIdxScan.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/CoveredIdxScan.java
index 8bea14df..9430dcb0 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/CoveredIdxScan.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/CoveredIdxScan.java
@@ -63,7 +63,7 @@ public CoveredIdxScan(String name,int iterations, int repeats)
      */
     public void setUp() throws Exception {
 
-        select = openDefaultConnection().prepareStatement("SELECT i1 FROM "+tableName +
+        select = prepareStatement("SELECT i1 FROM " + tableName +
         " WHERE i1 > ? and i1 <= ?");
     }
 
@@ -102,8 +102,8 @@ public void ScanCoveredIdxInt() throws Exception
             actualCount++;
         }
         assertEquals(rowcount,actualCount);
-        getConnection().commit();
         rs.close();
+        commit();
     }
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/HeapScan.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/HeapScan.java
index e5cfc196..ce527ff9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/HeapScan.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/perf/basic/jdbc/HeapScan.java
@@ -103,7 +103,7 @@ public HeapScan(String name, boolean binaryData,
      */
     public void setUp() throws Exception {
 
-        select = openDefaultConnection().prepareStatement("SELECT * FROM "+tableName);
+        select = prepareStatement("SELECT * FROM " + tableName);
 
         // Create a SELECT statement that uses predicates. Also initialize
         // the predicates with some data of the correct type for this test
@@ -147,7 +147,7 @@ public void Scan100() throws Exception
 
         assertEquals(actualCount,rowcount);
         rs.close();
-        getConnection().commit();
+        commit();
 
     }
 
@@ -177,8 +177,8 @@ public void Scan100GetData() throws Exception
             actualCount++;
         }
         assertEquals(actualCount,rowcount);
-        getConnection().commit();
         rs.close();
+        commit();
     }
 
     /**
@@ -197,10 +197,11 @@ public void Scan100WithPredicate() throws SQLException {
      * Cleanup - close resources opened in this test.
      **/
     public void tearDown() throws Exception {
-
-        select.close();
+        // The statements will be closed by BaseJDBCTestCase.tearDown(), but
+        // we need to set the fields to null to allow them to be garbage
+        // collected.
         select = null;
-        selectWithPred = null; // will be closed in super.tearDown()
+        selectWithPred = null;
         super.tearDown();
     }
 }
