diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index e081e21e..e634d5c9 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -132,6 +132,8 @@
     private static boolean snapshotBeforeCompaction;
     private static boolean autoBootstrap = false;
 
+    private static Map<String,Boolean> hintedHandOffByKS = new HashMap<String,Boolean>();
+
     private static IAuthenticator authenticator = new AllowAllAuthenticator();
 
     private final static String STORAGE_CONF_FILE = "storage-conf.xml";
@@ -619,6 +621,17 @@ private static void readTablesFromXml() throws ConfigurationException
                     throw new ConfigurationException("Invalid endpointsnitch class " + endPointSnitchClassName + " " + e.getMessage());
                 }
 
+                /* should Hinted Handoff be on? */
+                String hintedHandOffStr = xmlUtils.getNodeValue("/Storage/Keyspaces/Keyspace[@Name='" + ksName + "']/HintedHandoff");
+                if (hintedHandOffStr == null || hintedHandOffStr.equalsIgnoreCase("true"))
+                    hintedHandOffByKS.put(ksName, true);
+                else if (hintedHandOffStr.equalsIgnoreCase("false"))
+                    hintedHandOffByKS.put(ksName, false);
+                else
+                    throw new ConfigurationException("Unrecognized value for HintedHandoff.  Use 'true' or 'false'.");
+                if (logger.isDebugEnabled())
+                    logger.debug("setting hintedHandOff to " + hintedHandOffByKS.get(ksName).toString() + " for " + ksName);
+
                 String xqlTable = "/Storage/Keyspaces/Keyspace[@Name='" + ksName + "']/";
                 NodeList columnFamilies = xmlUtils.getRequestedNodeList(xqlTable + "ColumnFamily");
 
@@ -1208,4 +1221,9 @@ public static boolean isAutoBootstrap()
     {
         return autoBootstrap;
     }
+
+    public static boolean isHintedHandOff(String table)
+    {
+        return hintedHandOffByKS.get(table);
     }
+}
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
index 313b3722..e83e10f1 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
@@ -87,8 +87,9 @@ public WriteResponseHandler getWriteResponseHandler(int blockFor, ConsistencyLev
                 map.put(ep, ep);
         }
 
-        if (map.size() == targets.size())
-            return map; // everything was alive
+        // if everything was alive or we're not doing HH on this keyspace, stop with just the live nodes
+        if (map.size() == targets.size() || !DatabaseDescriptor.isHintedHandOff(table))
+            return map;
 
         // assign dead endpoints to be hinted to the closest live one, or to the local node
         // (since it is trivially the closest) if none are alive.  This way, the cost of doing
