diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourcePropertiesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourcePropertiesTest.java
index 09d99b04..38fb5c46 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourcePropertiesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourcePropertiesTest.java
@@ -31,6 +31,7 @@
 import junit.framework.TestSuite;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.J2EEDataSource;
 import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.JDBCDataSource;
@@ -80,39 +81,7 @@ public static Test suite() {
                 }
             }
         }
-        return suite;
-    }
-
-    // HELPER METHODS
-
-    /**
-     * Sets a property of a data source object.
-     *
-     * @param dataSource the data source
-     * @param name name of the property to set
-     * @param value property value
-     * @param type property type (useful for setting <code>null</code> or
-     * primitive types)
-     */
-    private void setDataSourceProperty(Object dataSource, String name,
-                                       Object value, Class type)
-        throws Exception
-    {
-        Method setter = dataSource.getClass().
-            getMethod(TestUtil.getSetterName(name), new Class[] { type });
-        setter.invoke(dataSource, new Object[] { value });
-    }
-
-    /**
-     * Sets a property of a data source object.
-     *
-     * @param dataSource the data source
-     * @param name name of the property to set
-     * @param value property value
-     */
-    private void setDataSourceProperty(Object dataSource, String name,
-                                       Object value) throws Exception {
-        setDataSourceProperty(dataSource, name, value, value.getClass());
+        return new CleanDatabaseTestSetup(suite);
     }
 
     // TEST METHODS
@@ -126,9 +95,8 @@ public void embeddedTestAttributesAsPasswordWithoutPassword_ds()
         throws Exception
     {
         DataSource ds = JDBCDataSource.getDataSource();
-        setDataSourceProperty(ds, "password", "mypassword");
-        setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
-                              Boolean.TYPE);
+        JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
+        JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
         Connection c = ds.getConnection();
         c.close();
     }
@@ -143,9 +111,8 @@ public void embeddedTestAttributesAsPasswordWithoutPassword_pooled()
     {
         ConnectionPoolDataSource ds =
             J2EEDataSource.getConnectionPoolDataSource();
-        setDataSourceProperty(ds, "password", "mypassword");
-        setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
-                              Boolean.TYPE);
+        JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
+        JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
         // DERBY-1586 caused a malformed url error here
         PooledConnection pc = ds.getPooledConnection();
         Connection c = pc.getConnection();
@@ -161,9 +128,8 @@ public void embeddedTestAttributesAsPasswordWithoutPassword_xa()
         throws Exception
     {
         XADataSource ds = J2EEDataSource.getXADataSource();
-        setDataSourceProperty(ds, "password", "mypassword");
-        setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
-                              Boolean.TYPE);
+        JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
+        JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
         XAConnection xa = ds.getXAConnection();
         Connection c = xa.getConnection();
         c.close();
@@ -178,8 +144,7 @@ public void embeddedTestAttributesAsPasswordWithPassword_ds()
         throws Exception
     {
         DataSource ds = JDBCDataSource.getDataSource();
-        setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
-                              Boolean.TYPE);
+        JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
         try {
             Connection c = ds.getConnection("username", "mypassword");
             fail("Expected getConnection to fail.");
@@ -199,8 +164,7 @@ public void embeddedTestAttributesAsPasswordWithPassword_pooled()
     {
         ConnectionPoolDataSource ds =
             J2EEDataSource.getConnectionPoolDataSource();
-        setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
-                              Boolean.TYPE);
+        JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
         try {
             PooledConnection pc =
                 ds.getPooledConnection("username", "mypassword");
@@ -220,8 +184,7 @@ public void embeddedTestAttributesAsPasswordWithPassword_xa()
         throws Exception
     {
         XADataSource ds = J2EEDataSource.getXADataSource();
-        setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
-                              Boolean.TYPE);
+        JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
         try {
             XAConnection xa = ds.getXAConnection("username", "mypassword");
             fail("Expected getXAConnection to fail.");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
index 7adb28d4..ecd31d21 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
@@ -107,7 +107,14 @@ static Object getDataSourceObject(String classname, HashMap beanProperties)
         }
     }
     
-    static void setBeanProperty(Object ds, String property, Object value)
+    /**
+     * Set a bean property for a data source. This code can be used
+     * on any data source type.
+     * @param ds DataSource to have property set
+     * @param property name of property.
+     * @param value Value, type is derived from value's class.
+     */
+    public static void setBeanProperty(Object ds, String property, Object value)
     {
         String setterName = getSetterName(property);
         
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 8ad2a3dd..bd9c7201 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -823,7 +823,7 @@ public static Properties getDefaultDataSourceProperties() {
      * @param connAttrs connection attributes
      * @return
      */
-    public static Properties getDataSourcePropertiesForDatabase
+    private static Properties getDataSourcePropertiesForDatabase
     	(String databaseName, String connAttrs) 
     {
         Properties attrs = new Properties();
