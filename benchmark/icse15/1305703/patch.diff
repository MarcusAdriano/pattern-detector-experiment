diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index 422b03ff..f28bab4a 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -78,15 +78,46 @@
   // default, said to abort on config error
   private int numCoresAbortOnConfigError = 0;
   
+  /**
+   * Deprecated
+   * @deprecated use the single arg constructure with locateSolrHome()
+   * @see SolrResourceLoader#locateSolrHome
+   */
+  @Deprecated
   public CoreContainer() {
-    solrHome = SolrResourceLoader.locateSolrHome();
+    this(SolrResourceLoader.locateSolrHome());
     log.info("New CoreContainer: solrHome=" + solrHome + " instance="+System.identityHashCode(this));
   }
 
+
   public Properties getContainerProperties() {
     return containerProperties;
   }
 
+  /**
+   * Initalize CoreContainer directly from the constructor
+   *
+   * @param dir
+   * @param configFile
+   * @throws ParserConfigurationException
+   * @throws IOException
+   * @throws SAXException
+   */
+  public CoreContainer(String dir, File configFile) throws ParserConfigurationException, IOException, SAXException
+  {
+    this(dir);
+    this.load(dir, configFile);
+  }
+
+  /**
+   * Minimal CoreContainer constructor.
+   * @param loader the CoreContainer resource loader
+   */
+  public CoreContainer(SolrResourceLoader loader) {
+    this(loader.getInstanceDir());
+    this.loader = loader;
+  }
+
   // Helper class to initialize the CoreContainer
   public static class Initializer {
     protected String solrConfigFilename = null;
@@ -122,7 +153,7 @@ public CoreContainer initialize() throws IOException,
       File fconf = new File(solrHome, solrConfigFilename == null ? "solr.xml"
           : solrConfigFilename);
       log.info("looking for solr.xml: " + fconf.getAbsolutePath());
-      cores = new CoreContainer();
+      cores = new CoreContainer(solrHome);
       cores.solrConfigFilenameOverride = solrConfigFilename;
       if (fconf.exists()) {
         // default abortOnConfigurationError ignored in multicore
@@ -167,29 +198,6 @@ private static Properties getCoreProps(String instanceDir, String file, Properti
     return p;
   }
 
-  /**
-   * Initalize CoreContainer directly from the constructor
-   * 
-   * @param dir
-   * @param configFile
-   * @throws ParserConfigurationException
-   * @throws IOException
-   * @throws SAXException
-   */
-  public CoreContainer(String dir, File configFile) throws ParserConfigurationException, IOException, SAXException 
-  {
-    this.load(dir, configFile);
-  }
-  
-  /**
-   * Minimal CoreContainer constructor. 
-   * @param loader the CoreContainer resource loader
-   */
-  public CoreContainer(SolrResourceLoader loader) {
-    this.loader = loader;
-    this.solrHome = loader.getInstanceDir();
-  }
-
   public CoreContainer(String solrHome) {
     this.solrHome = solrHome;
   }
@@ -222,6 +230,13 @@ public void load(String dir, File configFile ) throws ParserConfigurationExcepti
    */
   public void load(String dir, InputSource cfgis)
       throws ParserConfigurationException, IOException, SAXException {
+
+    if (null == dir) {
+      // don't rely on SolrResourceLoader(), determine explicitly first
+      dir = SolrResourceLoader.locateSolrHome();
+    }
+    log.info("Loading CoreContainer using Solr Home: '{}'", dir);
+
     this.loader = new SolrResourceLoader(dir);
     solrHome = loader.getInstanceDir();
     Config cfg = new Config(loader, null, cfgis, null);
@@ -433,7 +448,8 @@ public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationExceptio
       idir = new File(solrHome, dcore.getInstanceDir());
     }
     String instanceDir = idir.getPath();
-    
+    log.info("Creating SolrCore '{}' using instanceDir: {}", 
+             dcore.getName(), instanceDir);
     // Initialize the solr config
     SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));
     SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);
@@ -526,7 +542,10 @@ public void reload(String name) throws ParserConfigurationException, IOException
     if (core == null)
       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "No such core: " + name );
 
-    SolrCore newCore = create(core.getCoreDescriptor());
+    CoreDescriptor cd = core.getCoreDescriptor();
+    log.info("Reloading SolrCore '{}' using instanceDir: {}", 
+             cd.getName(), cd.getInstanceDir());
+    SolrCore newCore = create(cd);
     register(name, newCore, false);
   }
 
@@ -596,7 +615,8 @@ public SolrCore getCore(String name) {
    * @return a CoreAdminHandler
    */
   protected CoreAdminHandler createMultiCoreHandler(final String adminHandlerClass) {
-    SolrResourceLoader loader = new SolrResourceLoader(null, libLoader, null);
+    // :TODO: why create a new SolrResourceLoader? why not use this.loader ???
+    SolrResourceLoader loader = new SolrResourceLoader(solrHome, libLoader, null);
     Object obj = loader.newAdminHandlerInstance(CoreContainer.this, adminHandlerClass);
     if ( !(obj instanceof CoreAdminHandler))
     {
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index 1e60b31c..de3482f4 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -87,17 +87,22 @@
    * This loader will delegate to the context classloader when possible,
    * otherwise it will attempt to resolve resources using any jar files
    * found in the "lib/" directory in the specified instance directory.
-   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.
-   * <p>
+   * </p>
+   *
+   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.
+   * @see #locateSolrHome
    */
   public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )
   {
     if( instanceDir == null ) {
       this.instanceDir = SolrResourceLoader.locateSolrHome();
+      log.info("new SolrResourceLoader for deduced Solr Home: '{}'", 
+               this.instanceDir);
     } else{
       this.instanceDir = normalizeDir(instanceDir);
+      log.info("new SolrResourceLoader for directory: '{}'", 
+               this.instanceDir);
     }
-    log.info("Solr home set to '" + this.instanceDir + "'");
     
     this.classLoader = createClassLoader(null, parent);
     addToClassLoader("./lib/", null);
@@ -587,6 +592,7 @@ public void inform(Map<String, SolrInfoMBean> infoRegistry) {
    * @see #normalizeDir(String)
    */
   public static String locateSolrHome() {
+
     String home = null;
     // Try JNDI
     try {
