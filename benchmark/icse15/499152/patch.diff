diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java
index 5a9199ef..57fbb37f 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/MultiReader.java
@@ -262,6 +262,30 @@ public Collection getFieldNames (IndexReader.FieldOption fieldNames) {
     }
     return fieldSet;
   }
+  
+  /**
+   * Returns <code>true</code> if all readers are still up-to-date.
+   * 
+   * @throws IOException
+   */
+  public boolean isCurrent() throws IOException {
+    for (int i = 0; i < subReaders.length; i++) {
+      IndexReader reader = subReaders[i];
+      if (!reader.isCurrent())
+        return false;
+    }
+    return true;
+  }
+
+  /**
+   * Not implemented.
+   * @throws UnsupportedOperationException
+   */
+  public long getVersion() {
+    throw new UnsupportedOperationException("This method is only implemented in " +
+        "IndexReader, not in MultiReader");
+  }
+
 }
 
 class MultiTermEnum extends TermEnum {
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestMultiReader.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestMultiReader.java
index f8a5e02f..b7746c00 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestMultiReader.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestMultiReader.java
@@ -18,7 +18,10 @@
  */
 
 import junit.framework.TestCase;
+
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 
@@ -102,4 +105,34 @@ public void testTermVectors() {
     MultiReader reader = new MultiReader(dir, sis, false, readers);
     assertTrue(reader != null);
   }    
+  
+  public void testIsCurrent() throws IOException {
+    RAMDirectory ramDir1=new RAMDirectory();
+    addDoc(ramDir1, "test foo", true);
+    RAMDirectory ramDir2=new RAMDirectory();
+    addDoc(ramDir2, "test blah", true);
+    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};
+    MultiReader mr = new MultiReader(readers);
+    assertTrue(mr.isCurrent());   // just opened, must be current
+    addDoc(ramDir1, "more text", false);
+    assertFalse(mr.isCurrent());   // has been modified, not current anymore
+    addDoc(ramDir2, "even more text", false);
+    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore
+    try {
+      mr.getVersion();
+      fail();
+    } catch (UnsupportedOperationException e) {
+      // expected exception
+    }
+    mr.close();
+  }
+
+  private void addDoc(RAMDirectory ramDir1, String s, boolean create) throws IOException {
+    IndexWriter iw = new IndexWriter(ramDir1, new StandardAnalyzer(), create);
+    Document doc = new Document();
+    doc.add(new Field("body", s, Field.Store.YES, Field.Index.TOKENIZED));
+    iw.addDocument(doc);
+    iw.close();
+  }
+
 }
