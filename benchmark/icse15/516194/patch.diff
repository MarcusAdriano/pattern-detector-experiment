diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
index e7bbb4fe..417d6227 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
@@ -107,7 +107,7 @@ Is the database active (open).
 
 	/**
 	 * Get a Resource Adapter - only used by XA system.  There is one and only
-	 * one resource adapter per cloudscape database.
+	 * one resource adapter per Derby database.
 	 *
 	 * @return the resource Adapter for the database, null if no resource
 	 * adapter is available for this database. Returned as an Object
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Factory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Factory.java
index 6c47cab4..3f2a43be 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Factory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Factory.java
@@ -29,7 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 /**
  *  <P>
  *  Callers of these methods must be within the context of a
- *  Cloudscape statement execution otherwise a SQLException will be thrown.
+ *  Derby statement execution otherwise a SQLException will be thrown.
  *  <BR>
  *  There are two basic ways to call these methods.
  *  <OL>
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OptimizerTrace.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OptimizerTrace.java
index e1dc85fa..31edc0b9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OptimizerTrace.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OptimizerTrace.java
@@ -27,12 +27,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 /**
   <P>
   This  class provides static methods for controlling the
-  optimizer tracing in a Cloudscape database.
+  optimizer tracing in a Derby database.
   
-  <P>
-  <i>
-  Cloudscape reserves the right to change, rename, or remove this interface
-  at any time. </i>
   */
 public class OptimizerTrace
 {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
index c672dda1..7a881092 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
@@ -187,7 +187,7 @@ public final String getSQLState()
 	/**
 		Convert a message identifer from org.apache.derby.iapi.reference.SQLState to
 		a SQLState five character string.
-	 *	@param messageID - the sql state id of the message from cloudscape
+	 *	@param messageID - the sql state id of the message from Derby
 	 *	@return String 	 - the 5 character code of the SQLState ID to returned to the user 
 	*/
 	public static String getSQLStateFromIdentifier(String messageID) {
@@ -453,8 +453,8 @@ public static StandardException newPreLocalizedException( String MessageID,
 	public static StandardException unexpectedUserException(Throwable t)
 	{
 		/*
-		** If we have a SQLException that isn't a Util
-		** (i.e. it didn't come from cloudscape), then we check
+		** If we have a SQLException that isn't an EmbedSQLException
+		** (i.e. it didn't come from Derby), then we check
 		** to see if it is a valid user defined exception range 
 		** (38001-38XXX).  If so, then we convert it into a 
 		** StandardException without further ado.
@@ -503,7 +503,7 @@ public static StandardException unexpectedUserException(Throwable t)
 			**    standard java exception, e.g. NullPointerException
 			**    SQL Exception - from some server-side JDBC
 			**    3rd party exception - from some application
-			**    some cloudscape exception that is not a standard exception.
+			**    some Derby exception that is not a standard exception.
 			**    
 			**    
 			** We don't want to call t.toString() here, because the JVM is
@@ -517,21 +517,22 @@ public static StandardException unexpectedUserException(Throwable t)
 			** The above is because our test canons contain the text of
 			** error messages.
 			**
-			** In addition we don't want to place the class name in an
-			** exception when the class is from cloudscape because
-			** the class name changes in obfuscated builds. Thus for
-			** exceptions that are in a package below com.ibm.db2j
+			** In the past we didn't want to place the class name in
+			** an exception because Cloudscape builds were
+			** obfuscated, so the class name would change from build
+                        ** to build. This is no longer true for Derby, but for
+			** exceptions that are Derby's, i.e. EmbedSQLException,
 			** we use toString(). If this returns an empty or null
-			** then we use the class name to make tracking the problem
-			** down easier, though the lack of a message should be seen
-			** as a bug.
+			** then we use the class name to make tracking the 
+                        ** problem down easier, though the lack of a message 
+			** should be seen as a bug.
 			*/
 			String	detailMessage;
-			boolean cloudscapeException = false;
+			boolean derbyException = false;
 
 			if (t instanceof EmbedSQLException) {
 				detailMessage = ((EmbedSQLException) t).toString();
-				cloudscapeException = true;
+				derbyException = true;
 			}
 			else {
 				detailMessage = t.getMessage();
@@ -550,7 +551,7 @@ public static StandardException unexpectedUserException(Throwable t)
 			}
 			else {
 
-				if (!cloudscapeException) {
+				if (!derbyException) {
 					detailMessage = t.getClass().getName() + ": " + detailMessage;
 				}
 			}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
index 9c1ebaa9..78ff2608 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
@@ -136,7 +136,7 @@ public void boot(boolean create,
                 SanityManager.THROWASSERT( "Network server starter module booted twice.");
             return;
         }
-        // Load the server class indirectly so that Cloudscape does not require the network code
+        // Load the server class indirectly so that Derby does not require the network code
         try
         {
             serverClass = Class.forName( serverClassName);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/JDBCBoot.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/JDBCBoot.java
index 30fca4c5..7c603e1a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/JDBCBoot.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/JDBCBoot.java
@@ -32,7 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.PrintStream;
 
 /**
-	A class to boot a cloudscape system that includes a JDBC driver.
+	A class to boot a Derby system that includes a JDBC driver.
 	Should be used indirectly through JDBCDriver or JDBCServletBoot
 	or any other useful booting mechanism that comes along.
 */
@@ -71,7 +71,7 @@ public void boot(String protocol, PrintStream logging) {
             /* The network server starter module is started differently from other modules because
              * 1. its start is conditional, depending on a system property, and PropertyUtil.getSystemProperty
              *    does not work until the Monitor has started,
-             * 2. we do not want the server to try to field requests before Cloudscape has booted, and
+             * 2. we do not want the server to try to field requests before Derby has booted, and
              * 3. if the module fails to start we want to log a message to the error log and continue as
              *    an embedded database.
              */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ResourceAdapter.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ResourceAdapter.java
index a09bcee5..30de1759 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ResourceAdapter.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/ResourceAdapter.java
@@ -37,7 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	global transactions, i.e., it does not know of in-doubt global transactions
 	re-created by recovery.
 
-	<P>	The following is an overall design of the JTA implementation in cloudscape,
+	<P>	The following is an overall design of the JTA implementation in Derby,
 	most of it has little to do with the ResourceAdapter interface itself.
 	<P><B>Design Overview </B>
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Property.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Property.java
index 78433d23..96de0ac7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Property.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/reference/Property.java
@@ -154,25 +154,25 @@ Before creating this service delete any remenants (e.g. the directory)
 	/**
         derby.database.forceDatabaseLock
 		<BR>
-        Cloudscape attempts to prevent two instances of Cloudscape from booting
+        Derby attempts to prevent two instances of Derby from booting
         the same database with the use of a file called db.lck inside the 
         database directory.
 
-        On some platforms, Cloudscape can successfully prevent a second 
-        instance of Cloudscape from booting the database, and thus prevents 
+        On some platforms, Derby can successfully prevent a second 
+        instance of Derby from booting the database, and thus prevents 
         corruption. If this is the case, you will see an SQLException like the
         following:
 
         ERROR XJ040: Failed to start database 'toursDB', see the next exception
         for details.
-        ERROR XSDB6: Another instance of Cloudscape may have already booted the
+        ERROR XSDB6: Another instance of Derby may have already booted the
         database C:\databases\toursDB.
 
         The error is also written to the information log.
 
-        On other platforms, Cloudscape issues a warning message if an instance
-        of Cloudscape attempts to boot a database that may already have a
-        running instance of Cloudscape attached to it.
+        On other platforms, Derby issues a warning message if an instance
+        of Derby attempts to boot a database that may already have a
+        running instance of Derby attached to it.
         However, it does not prevent the second instance from booting, and thus
         potentially corrupting, the database.
 
@@ -180,15 +180,12 @@ Before creating this service delete any remenants (e.g. the directory)
         occurred.
 
 
-        NOTE: When you are using Cloudview, error messages appear in the 
-        console or operating system window from which Cloudview was started.
-
         The warning message looks like this:
 
-        WARNING: Cloudscape (instance 80000000-00d2-3265-de92-000a0a0a0200) is
+        WARNING: Derby (instance 80000000-00d2-3265-de92-000a0a0a0200) is
         attempting to boot the database /export/home/sky/wombat even though
-        Cloudscape (instance 80000000-00d2-3265-8abf-000a0a0a0200) may still be
-        active. Only one instance of Cloudscape
+        Derby (instance 80000000-00d2-3265-8abf-000a0a0a0200) may still be
+        active. Only one instance of Derby 
         should boot a database at a time. Severe and non-recoverable corruption
         can result and may have already occurred.
 
@@ -197,24 +194,24 @@ Before creating this service delete any remenants (e.g. the directory)
         This warning is primarily a Technical Support aid to determine the 
         cause of corruption. However, if you see this warning, your best 
         choice is to close the connection and exit the JVM. This minimizes the
-        risk of a corruption. Close all instances of Cloudscape, then restart
-        one instance of Cloudscape and shut down the database properly so that
+        risk of a corruption. Close all instances of Derby, then restart
+        one instance of Derby and shut down the database properly so that
         the db.lck file can be removed. The warning message continues to appear
-        until a proper shutdown of the Cloudscape system can delete the db.lck
+        until a proper shutdown of the Derby system can delete the db.lck
         file.
 
         If the "derby.database.forceDatabaseLock" property is set to true
-        then this default behavior is altered on systems where cloudscape cannot
+        then this default behavior is altered on systems where Derby cannot
         prevent this dual booting.  If the to true, then if the platform does
-        not provide the ability for cloudscape to guarantee no double boot, and
-        if cloudscape finds a db.lck file when it boots, it will throw an 
+        not provide the ability for Derby to guarantee no double boot, and
+        if Derby finds a db.lck file when it boots, it will throw an 
         exception (TODO - mikem - add what exception), leave the db.lck file
         in place and not boot the system.  At this point the system will not 
         boot until the db.lck file is removed by hand.  Note that this 
         situation can arise even when 2 VM's are not accessing the same
-        cloudscape system.  Also note that if the db.lck file is removed by 
+        Derby system.  Also note that if the db.lck file is removed by 
         hand while a VM is still accessing a derby.database, then there 
-        is no way for cloudscape to prevent a second VM from starting up and 
+        is no way for Derby to prevent a second VM from starting up and 
         possibly corrupting the database.  In this situation no warning 
         message will be logged to the error log.
 
@@ -369,8 +366,8 @@ Default value for wait timeouts (60 seconds)
     public static final int IDX_PAGE_SIZE_BUMP_THRESHOLD = 1024;
 
     /**
-     * In cloudscape products which support Row Level Locking (rll), use this 
-     * property to disable rll.  Application's which use rll will use more 
+     * Derby supports Row Level Locking (rll),  but you can use this 
+     * property to disable rll.  Applications which use rll will use more 
      * system resources, so if an application knows that it does not need rll 
      * then it can use this system property to force all locking in the system 
      * to lock at the table level.
@@ -657,10 +654,10 @@ Default value for wait timeouts (60 seconds)
 	public static final String AUTHENTICATION_PROVIDER_PARAMETER =
 								"derby.authentication.provider";
 
-	// This is the user property used by Cloudscape and LDAP schemes
+	// This is the user property used by Derby and LDAP schemes
 	public static final String USER_PROPERTY_PREFIX = "derby.user.";
 
-	// These are the different built-in providers Cloudscape supports
+	// These are the different built-in providers Derby supports
 
 	public static final String AUTHENTICATION_PROVIDER_BUILTIN =
 								"BUILTIN";
@@ -737,8 +734,8 @@ Default value for wait timeouts (60 seconds)
     /**
      * derby.drda.startNetworkServer
      *<BR>
-     * If true then we will attempt to start a DRDA network server when Cloudscape boots,
-     * turning the current JVM into a server.
+     * If true then we will attempt to start a DRDA network server when Derby 
+     * boots, turning the current JVM into a server.
      *<BR>
      * Default: false
      */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/CacheManager.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/CacheManager.java
index 2e8e015f..f6a89e60 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/CacheManager.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/CacheManager.java
@@ -40,7 +40,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *
      * @param newSize the new maximum cache size
      *
-     * @exception StandardException Cloudscape Standard error policy
+     * @exception StandardException Standard Derby error policy
      */
 	public void resize( long newSize) throws StandardException;
 
@@ -77,7 +77,7 @@ In all cases the setIdentity() method is called with forCreate set to false.
 
 		@return A reference to an object in the cache, or null if the object cannot be found.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 		@see Cacheable#setIdentity
 
@@ -106,7 +106,7 @@ Find an object in the cache that matches the key provided using the equals()
 			}
 			
 		</PRE>
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public Cacheable findCached(Object key) throws StandardException;
 
@@ -164,7 +164,7 @@ In all cases the setIdentity() method is called with the createParameter as the
 
 		@return A reference to an object in the cache.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 		@see Cacheable#createIdentity
 
@@ -193,7 +193,7 @@ to be removed state can still be found through find() and findCached()
 		<BR>
 		After this call the caller must throw away the reference to item.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public void remove(Cacheable entry) throws StandardException;
 
@@ -208,7 +208,7 @@ this call or objects that are dirtied during this call (by other
 		@see Cacheable#clean
 		@see Cacheable#isDirty
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public void cleanAll() throws StandardException;
 
@@ -221,7 +221,7 @@ Clean all objects that match the partialKey (or exact key).
         be able to handle a partial key, e.g. a page has PageKey but a clean 
         may pass a ContainerKey which will discard all pages in that container.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public void clean(Matchable partialKey) throws StandardException;
 
@@ -247,7 +247,7 @@ any more valid references on a find() or findCached() call,
 		and then cleanAll() and ageOut() are called. The cache remains
 		in existence until the last kept object has been unkept.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 	*/
 	public void shutdown() throws StandardException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/Cacheable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/Cacheable.java
index 6eddfee2..d854b3e0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/Cacheable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/cache/Cacheable.java
@@ -81,7 +81,7 @@ If the class of the object needs to change (e.g. to support a different format)
 
 		@return an object reference if the object can take on the identity, null otherwise.
 
-		@exception StandardException Standard Cloudscape Policy
+		@exception StandardException Standard Derby Policy
 
 		@see CacheManager#find
 
@@ -164,7 +164,7 @@ state of the isDirty()
 		responsibility of the object implementing Cacheable to ensure any users of the
 		object do not conflict with the clean call.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 	*/
 	public void clean(boolean forRemove) throws StandardException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java
index 8f677d16..743e556d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java
@@ -75,7 +75,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		Fully create the bytecode and load the
 		class using the ClassBuilder's ClassFactory.
 
-		@exception StandardException Standard Cloudscape policy
+		@exception StandardException Standard Derby policy
 	*/
 	GeneratedClass getGeneratedClass() throws StandardException;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java
index ecccf63c..1454fac5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/context/ContextService.java
@@ -76,7 +76,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		fast access to a list of candidate contexts. If one of the contexts has its activeThread
 		equal to the current thread then it is the current context manager.
 
-		If the thread has pushed multiple contexts (e.g. open a new non-nested Cloudscape connection
+		If the thread has pushed multiple contexts (e.g. open a new non-nested Derby connection
 		from a server side method) then threadContextList will contain a Stack. The value for each cm
 		will be a push order, with higher numbers being more recently pushed.
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherFactory.java
index 2fc176b3..f8d10380 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherFactory.java
@@ -67,7 +67,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@param mode is either ENCRYPT or DECRYPT.  The CipherProvider can only
 				do encryption or decryption but not both.
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	CipherProvider createNewCipher(int mode)
 		 throws StandardException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherProvider.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherProvider.java
index 545f044d..50f6ce6c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherProvider.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/crypto/CipherProvider.java
@@ -64,7 +64,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		If cleartext and ciphertext are the same array, caller must be careful
 		to not overwrite the cleartext before it is scrambled.
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	int encrypt(byte[] cleartext, int offset, int length,
 				byte[] ciphertext, int outputOffset)
@@ -86,7 +86,7 @@ int encrypt(byte[] cleartext, int offset, int length,
 		If cleartext and ciphertext are the same array, caller must be careful
 		to not overwrite the ciphertext before it is un-scrambled.
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	int decrypt(byte[] ciphertext, int offset, int length,
 				byte[] cleartext, int outputOffset)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/DaemonFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/DaemonFactory.java
index 27e41a05..83a334bb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/DaemonFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/DaemonFactory.java
@@ -59,7 +59,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/**
 		Create a new DaemonService with the default daemon timer delay.
 
-		@exception StandardException Standard cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public DaemonService createNewDaemon(String name) throws StandardException;
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/Serviceable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/Serviceable.java
index 3cd758f2..58d16c2f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/Serviceable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/daemon/Serviceable.java
@@ -72,7 +72,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		serviceASAP, although no harm is done if this still maintains that this
 		should be serviced ASAP ...
 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 
 		<P>MT - depends on the work.  Be wary of multiple DaemonService thread
 		calling at the same time if you subscribe or enqueue multiple times.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/DiagnosticUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/DiagnosticUtil.java
index e0db53cb..a8a09677 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/DiagnosticUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/DiagnosticUtil.java
@@ -24,7 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 /**
 
 The Diagnostic framework is meant to provide a way to include as much
-diagnostic capability within the distributed release of the cloudscape
+diagnostic capability within the distributed release of the Derby
 product without adversely affecting the runtime speed or foot print of
 a running configuration that needs not use this information.
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/Diagnosticable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/Diagnosticable.java
index 80d0e364..fec3acb3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/Diagnosticable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/diag/Diagnosticable.java
@@ -52,7 +52,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *
 	 * @return A string with diagnostic information about the object.
      *
-     * @exception StandardException  Standard cloudscape exception policy
+     * @exception StandardException  Standard Derby exception policy
      **/
     public String diag() throws StandardException;
 
@@ -86,7 +86,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * be provided by a real implementation.
      * <p>
      *
-     * @exception StandardException  Standard cloudscape exception policy
+     * @exception StandardException  Standard Derby exception policy
      **/
     public void diag_detail(Properties prop) throws StandardException;
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java
index ef4c04cb..065f503b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java
@@ -105,8 +105,7 @@ public static String getCompleteMessage(String messageId, Object[] arguments) {
 	}
 
 	/**
-	  Method used by Cloudscape Network Server to get localized message (original call
-	  from jcc.
+	  Method used by Derby Network Server to get localized message
 
 	  @param sqlcode	sqlcode, not used.
 	  @param errmcLen	sqlerrmc length
@@ -198,7 +197,7 @@ public static void getLocalizedMessage(int sqlcode, short errmcLen, String sqler
 	}
 	
 	/**
-	  Method used by Cloudscape Network Server to get localized message 
+	  Method used by Derby Network Server to get localized message 
 
 	  @param locale		locale
 	  @param messageId	message id
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductGenusNames.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductGenusNames.java
index 475b173c..5805d290 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductGenusNames.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductGenusNames.java
@@ -22,23 +22,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.iapi.services.info;
 
 /**
-  Holder class for cloudscape genus names.
+  Holder class for Derby genus names.
 
   <P>
-  A product genus defines a product's category (tools, DBMS etc). For
-  some categories, Cloudscape ships more than one product. Each product,
-  within the genus has a unique product species.
+  A product genus defines a product's category (tools, DBMS etc). 
+  Currently, Derby only ships one jar file per genus. The info file
+  defined in this file is used by sysinfo to determine version information.
 
   <P>
-  A correct run time environment should include at most one Cloudscape
-  product of a given genus. This helps avoid situations in which the
-  environment loads classes from more than one product. a user runs
-  with a mix of classes from different
+  A correct run time environment should include at most one Derby
+  jar file of a given genus. This helps avoid situations in which the
+  environment loads classes from more than one version. 
 
   <P>
-  Please not that the list provided here serves to document product
-  genus names and to facile consistent naming in code. Because the
-  list of supported Cloudscape genus names will change with time, the
+  Please note that the list provided here serves to document product
+  genus names and to facilitate consistent naming in code. Because the
+  list of supported Derby genus names may change with time, the
   code in this package does *NOT* restrict users to the product genus
   names listed here.
   */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductVersionHolder.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductVersionHolder.java
index 7788dfbe..559aa336 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductVersionHolder.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/info/ProductVersionHolder.java
@@ -27,7 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 
 /**
-  Class to hold a cloudscape Product version.
+  Class to hold a Derby Product version.
 
   This class includes the following product version features.
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
index 5dcc9301..7558daa1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayInputStream.java
@@ -365,7 +365,7 @@ public final String readUTF() throws IOException {
     }
 
     /**
-     * read in a cloudscape UTF formated string into a char[].
+     * read in a Derby UTF formated string into a char[].
      * <p>
      * This routine inline's the code to read a UTF format string from a
      * byte[] array (pageData), into a char[] array.  The string will
@@ -374,7 +374,7 @@ public final String readUTF() throws IOException {
      * a new char[] will be alocated and returned to the caller by putting
      * it into rawData_array[0].
      * <p>
-     * To see detailed description of the cloudscape UTF format see
+     * To see detailed description of the Derby UTF format see
      * the writeExternal() routine of SQLChar.
      * <p>
      * The routine returns the number of char's read into the returned
@@ -395,7 +395,7 @@ public final String readUTF() throws IOException {
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
-    public final int readCloudscapeUTF(char[][] rawData_array) 
+    public final int readDerbyUTF(char[][] rawData_array) 
         throws IOException
 	{
         // copy globals locally, to give compiler chance to optimize.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/Formatable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/Formatable.java
index c211c83d..d88f8a30 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/Formatable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/Formatable.java
@@ -24,7 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.Externalizable;
 
 /**
-  Cloudscape interface for creating a stored form for
+  Derby interface for creating a stored form for
   an object and re-constructing an equivalent object
   from this stored form. The object which creates the
   stored form and the re-constructed object need not be
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
index 160e04b3..9b2ef5bd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
@@ -48,7 +48,7 @@ and another may restore (read) the object. The implication of this
 
   <P>When you add a format id to this file, please include the list
   of interfaces an implementaion must support when it supports
-  the format id. When Cloudscape code reads a stored form it returns an 
+  the format id. When Derby code reads a stored form it returns an 
   object of a Class which supports the stored form. A reader may
   cast this object to any interface listed in this file. It is an error for
   the reader to cast the object to a class or interface not listed in this
@@ -58,7 +58,7 @@ and another may restore (read) the object. The implication of this
   states the name of the class. The first implementation of a format defines
   the stored form.
 
-  <P>This interface defines all the format ids for Cloudscape software.
+  <P>This interface defines all the format ids for Derby.
   If you define a format id please be sure to declare it in this
   file. If you remove support for a one please document that the
   format id is deprecated. Never remove or re-use a format id.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/TypedFormat.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/TypedFormat.java
index 9d528bec..afd2bac0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/TypedFormat.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/TypedFormat.java
@@ -21,7 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.services.io;
 /**
-  Cloudscape interface for identifying the format id for the
+  Derby interface for identifying the format id for the
   stored form of an object. Objects of different classes may
   have the same format id if:
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java
index d8202b29..94d46751 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java
@@ -38,7 +38,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/**
 		Add a generated class to the class manager's class repository.
 
-		@exception 	StandardException	Standard Cloudscape error policy
+		@exception 	StandardException	Standard Derby error policy
 
 	*/
 	public GeneratedClass loadGeneratedClass(String fullyQualifiedName, ByteArray classDump)
@@ -70,7 +70,7 @@ public Class loadApplicationClass(ObjectStreamClass classDescriptor)
 	/**
 		Was the passed in class loaded by a ClassManager.
 
-		@return true if the class was loaded by a Cloudscape class manager,
+		@return true if the class was loaded by a Derby class manager,
 		false it is was loaded by the system class loader, or another class loader.
 	*/
 	public boolean isApplicationClass(Class theClass);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedClass.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedClass.java
index 8cfa6da0..3bdcdb0d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedClass.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedClass.java
@@ -42,7 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		constructor of the represneted class.
 		(Similar to java.lang.Class.newInstance).
 
-		@exception 	StandardException	Standard Cloudscape error policy
+		@exception 	StandardException	Standard Derby error policy
 
 	*/
 	public Object newInstance(Context context)
@@ -52,7 +52,7 @@ public Object newInstance(Context context)
 		Obtain a handle to the method with the given name
 		that takes no arguments.
 
-		@exception 	StandardException	Standard Cloudscape error policy
+		@exception 	StandardException	Standard Derby error policy
 	*/
 	public GeneratedMethod getMethod(String simpleName)
 		throws StandardException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedMethod.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedMethod.java
index 9cfca57d..8de3f70d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedMethod.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/GeneratedMethod.java
@@ -38,7 +38,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 		Returns the value returned by the method.
 
-		@exception 	StandardException	Standard Cloudscape error policy
+		@exception 	StandardException	Standard Derby error policy
 	*/
 
 	public Object invoke(Object ref)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/Limit.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/Limit.java
index d445d47a..bc11423e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/Limit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/Limit.java
@@ -43,7 +43,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@param lockList the list of Lockable's in the group
 		@param lockCount the number of locks in the group
 
-        @exception StandardException Standard Cloudscape error policy.
+        @exception StandardException Standard Derby error policy.
 	*/
 	public void reached(CompatibilitySpace compatibilitySpace, Object group,
 						int limit, Enumeration lockList, int lockCount)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java
index c9bb93fb..cc7ae233 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/locks/LockFactory.java
@@ -80,7 +80,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
 		(message id will be LockFactory.InterruptedExceptionId)
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 	*/
 	public boolean lockObject(CompatibilitySpace compatibilitySpace,
@@ -175,7 +175,7 @@ public boolean areLocksHeld(CompatibilitySpace compatibilitySpace,
 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
 		(message id will be LockFactory.InterruptedExceptionId)
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 	*/
 	public boolean zeroDurationlockObject(CompatibilitySpace compatibilitySpace,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleControl.java
index 162d6fa3..d72e2771 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleControl.java
@@ -56,7 +56,7 @@ be found through a findModule(). In this case the module's stop() method
 		This attributes properties set has the second default properties set as
 		its default. This set (which could be null) contains the properties
 		that the user set on their DriverManager.getConnection() call, and are thus
-		not owned by cloudscape code, and thus must not be modified by cloudscape
+		not owned by Derby code, and thus must not be modified by Derby 
 		code.
 		<P>
 		When create is false the properties object contains all the properties
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java
index 9b0c8971..27d698aa 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java
@@ -85,7 +85,7 @@ public Locale setLocale(Object serviceModule, String userDefinedLocale)
 		Set the locale for the service at boot time. The passed-in
 		properties must be the one passed to the boot method.
 
-		@exception StandardException	Cloudscape error.
+		@exception StandardException	Derby error.
 	 */
 	public Locale setLocale(Properties serviceProperties,
 							String userDefinedLocale)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/Monitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/Monitor.java
index 7882c0de..70e3f02f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/Monitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/monitor/Monitor.java
@@ -171,7 +171,7 @@ by another service (or the monitor itself) but are not fundamentally part of the
 	<LI>The properties set of the service (i.e. that passed into Monitor.createPersistentService()
 	or Monitor.startService()).
 	<LI>The System (JVM) properties set (i.e. java.lang.System.getProperties()).
-	<LI>The application properties set (i.e. obtained from the cloudscape.properties file).
+	<LI>The application properties set (i.e. obtained from the derby.properties file).
 	<LI>The default implementation properties set (i.e. obtained from the
 	/org/apache/derby/modules.properties resource).
 	</OL>
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java
index dbe92609..77cc70fe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java
@@ -160,7 +160,7 @@ public static String getSystemProperty(String key) {
 		</OL>
 
 		<P>
-		This method can be used by a system that is not running Cloudscape,
+		This method can be used by a system that is not running Derby,
 		just to maintain the same lookup logic and security manager concerns
 		for finding derby.properties and reading system properties.
 
@@ -263,7 +263,7 @@ public static String getPropertyFromSet(boolean dbOnly, Properties set, String k
 	/**
 		Get a property only looking in the Persistent Transactional (database) set.
 
-		@exception StandardException Standard Cloudscape error handling. 
+		@exception StandardException Standard Derby error handling. 
 	*/
 	public static String getDatabaseProperty(PersistentSet set, String key) 
 		throws StandardException {
@@ -284,7 +284,7 @@ public static String getDatabaseProperty(PersistentSet set, String key)
 
 		@return the value of the property or defaultValue if it does not exist.
 
-		@exception StandardException Standard Cloudscape error handling. 
+		@exception StandardException Standard Derby error handling. 
 	*/
 	public static String getServiceProperty(PersistentSet set, String key, String defaultValue) 
 		throws StandardException {
@@ -324,7 +324,7 @@ public static String getServiceProperty(PersistentSet set, String key, String de
 
 		@return the value of the property or null if it does not exist.
 
-			@exception StandardException Standard Cloudscape error handling. 
+			@exception StandardException Standard Derby error handling. 
 	*/
 	public static String getServiceProperty(PersistentSet set, String key)
 		throws StandardException {
@@ -350,7 +350,7 @@ public static boolean getSystemBoolean(String key) {
 
 		@return true of the property is set to 'true, TRUE', false otherwise
 
-		@exception StandardException Standard Cloudscape error handling. 
+		@exception StandardException Standard Derby error handling. 
 	*/
 	public static boolean getServiceBoolean(PersistentSet set, String key, boolean defValue) 
 		throws StandardException {
@@ -376,7 +376,7 @@ public static int getSystemInt(String key, int min, int max, int defaultValue) {
 		@return value of the property if set subject to min and max, defaultValue if
 		it is not set or set to a non-integer value.
 
-		@exception StandardException Standard Cloudscape error handling. 
+		@exception StandardException Standard Derby error handling. 
 
 	*/
 	public static int getServiceInt(PersistentSet set, String key, int min, int max, int defaultValue)
@@ -392,7 +392,7 @@ public static int getServiceInt(PersistentSet set, String key, int min, int max,
 		@return value of the property if set subject to min and max, defaultValue if
 		it is not set or set to a non-integer value.
 
-		@exception StandardException Standard Cloudscape error handling. 
+		@exception StandardException Standard Derby error handling. 
 
 	*/
 	public static int getServiceInt(PersistentSet set, Properties props, String key, int min, int max, int defaultValue)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ParameterValueSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ParameterValueSet.java
index 4dca43eb..ebb5c4d4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ParameterValueSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ParameterValueSet.java
@@ -169,7 +169,7 @@ Setting via an unknown object type must use setParameterAsObject()
 	/**
 		Check that there are not output parameters defined
 		by the parameter set. If there are unknown parameter
-		types they are forced to input types. i.e. Cloudscape static method
+		types they are forced to input types. i.e. Derby static method
 		calls with parameters that are array.
 
 		@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 53c451e3..047eae96 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -237,7 +237,7 @@ public void resetFromPool()
 		 throws StandardException;
 
 	/**
-		Do a commit, as internally needed by Cloudscape.  E.g.
+		Do a commit, as internally needed by Derby.  E.g.
 	 	a commit for sync, or a commit for autocommit.  Skips
 		checks that a user isn't doing something bad like issuing
 		a commit in a nested xact.
@@ -279,7 +279,7 @@ Similar to internalCommit() but has logic for an unsynchronized commit
 
 
 	/**
-		Do a rollback, as internally needed by Cloudscape.  E.g.
+		Do a rollback, as internally needed by Derby.  E.g.
 	 	a rollback for sync, or a rollback for an internal error.  Skips
 		checks that a user isn't doing something bad like issuing
 		a rollback in a nested xact.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DDUtils.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DDUtils.java
index 793581e9..e9240e0d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DDUtils.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DDUtils.java
@@ -711,7 +711,7 @@ private static void checkForMultiplePathInvalidCases(int currentRefAction,
 	**   one path and tries to update  through another path. 
 	**   Nothing in standard that say whether we are suppose to delete the row
 	**   or update the row.  DB2UDB raises error when we try to create the
-	**   foreign key fkey4, cloudscape also does the same.
+	**   foreign key fkey4, Derby also does the same.
 	** 
 	**   How we catch the error case ?
 	**   Point to note here is the table(t4) we are  adding the foreign key does
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index 2111dda3..51af6ff6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -178,7 +178,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/**
 	 * Clear all of the DataDictionary caches.
 	 *
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void clearCaches() throws StandardException;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java
index 55fbce5e..1c777f8f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SchemaDescriptor.java
@@ -57,9 +57,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	*/
     /**
      * STD_SYSTEM_SCHEMA_NAME is the name of the system schema in databases that
-     * use ANSI standard identifier casing. In LSA and in Cloudscape target 
-     * databases the name will use the same case as the source database 
-     * identifiers.
+     * use ANSI standard identifier casing. 
      *
      * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getSystemSchemaName
      */
@@ -70,7 +68,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /*
      * Names of system schemas.
      * The following schemas exist in a standard empty DB2 database.  For
-     * now creating them in the cloudscape database but not actually putting
+     * now creating them in the Derby database but not actually putting
      * any objects in them.  Users should not be able to create any objects
      * in these schemas.
      **/
@@ -86,22 +84,20 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public static final	String	STD_SQLJ_SCHEMA_NAME      = "SQLJ";
      
     /**
-     * This schema is for cloudscape specific system diagnostic procedures and 
+     * This schema is for Derby specific system diagnostic procedures and 
      * functions which are not available in DB2.  
      **/
     public static final	String	STD_SYSTEM_DIAG_SCHEMA_NAME     = "SYSCS_DIAG";
 
     /**
-     * This schema is for cloudscape specific system diagnostic procedures and 
+     * This schema is for Derby specific system diagnostic procedures and 
      * functions which are not available in DB2.  
      **/
     public static final	String	STD_SYSTEM_UTIL_SCHEMA_NAME     = "SYSCS_UTIL";
 
     /**
      * STD_DEFAULT_SCHEMA_NAME is the name of the default schema in databases 
-     * that use ANSI standard identifier casing. In LSA and in Cloudscape 
-     * target databases the name will use the same case as the source database 
-     * identifiers.
+     * that use ANSI standard identifier casing. 
      *
      * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getDefaultSchemaName
      */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GlobalXact.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GlobalXact.java
index 86f2c86c..7ba5f18f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GlobalXact.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/GlobalXact.java
@@ -33,7 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 <LI> org.apache.derby.iapi.store.access.xa.XAXactId : 
 this class is a specific implementation of the JTA Xid interface
 <LI> org.apache.derby.impl.store.access.GlobalXactId : 
-this class represents internal cloudscape transaction ids
+this class represents internal Derby transaction ids
 </UL>
 <P>
 The main reason for this class is to ensure that equality etc. works in a
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowSource.java
index 93825682..61041c18 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowSource.java
@@ -68,7 +68,7 @@ of the RowSource (except that the input stream will be read, of course)
         nextRow call.  In this case the client should severe all references to 
         the row after returning it from getNextRowFromRowSource().
 
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public DataValueDescriptor[] getNextRowFromRowSource() 
         throws StandardException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
index a7a89f04..cea08618 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/TransactionController.java
@@ -407,7 +407,7 @@ temporary conglomerates are truncated on abort (or rollback
 
 	All temporary conglomerate is removed by store when the
 	conglomerate controller is destroyed, or if it is dropped by an explicit
-	dropConglomerate.  If cloudscape reboots, all temporary
+	dropConglomerate.  If Derby reboots, all temporary
 	conglomerates are removed.
 
 	@exception  StandardException  if the conglomerate could
@@ -1505,7 +1505,7 @@ public DynamicCompiledOpenConglomInfo getDynamicCompiledConglomInfo(
 
     @see org.apache.derby.iapi.store.raw.Loggable
     @see org.apache.derby.iapi.store.raw.Transaction#logAndDo
-    @exception StandardException  Standard cloudscape exception policy
+    @exception StandardException  Standard Derby exception policy
 	**/
 	public void logAndDo(Loggable operation) throws StandardException;
 
@@ -1874,7 +1874,7 @@ in the setSavePoint() call.
                     A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
     @return returns savepoint position in the stack.
 
-	@exception StandardException  Standard cloudscape exception policy.  A 
+	@exception StandardException  Standard Derby exception policy.  A 
                                   statement level exception is thrown if
                                   no savepoint exists with the given name.
 	**/
@@ -1907,7 +1907,7 @@ set since this named savepoint are released (and their changes rolled back).
 	  A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
     @return returns savepoint position in the stack.
 
-	@exception StandardException  Standard cloudscape exception policy.  A 
+	@exception StandardException  Standard Derby exception policy.  A 
                                   statement level exception is thrown if
                                   no savepoint exists with the given name.
 	**/
@@ -1931,7 +1931,7 @@ public int rollbackToSavePoint(
 	  A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
 	@return returns savepoint position in the stack.
 
-	@exception StandardException  Standard cloudscape exception policy.  A 
+	@exception StandardException  Standard Derby exception policy.  A 
                                   statement level exception is thrown if
                                   no savepoint exists with the given name.
 	**/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/LogicalUndo.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/LogicalUndo.java
index 36f1d723..3d25f648 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/LogicalUndo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/conglomerate/LogicalUndo.java
@@ -122,7 +122,7 @@ so that during undo time (both runtime undo and recovery undo), the
 		@param in data stored in the log stream that contains the record data
 				necessary to restore the row.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Method may read from InputStream		
 	*/
 	public Page findUndo(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java
index a6d7eca6..b76f8a2b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/ContainerHandle.java
@@ -189,7 +189,7 @@ the container (other than the create) is ever logged.  The difference
 
 		@see Page#unlatch
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception StandardException If a page could not be allocated.
 	*/
 	public Page addPage() throws StandardException;
@@ -202,7 +202,7 @@ the container (other than the create) is ever logged.  The difference
         will usually mean releasing any free pages located at the end of the
         file using the java truncate() interface.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void compressContainer() throws StandardException;
 
@@ -228,7 +228,7 @@ file using the java truncate() interface.
 
 		@see Page#unlatch
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception StandardException If a page could not be allocated.
 
 	*/
@@ -269,7 +269,7 @@ file using the java truncate() interface.
 		@see LockingPolicy
 		@see RecordHandle
 
-		@exception StandardException Standard Cloudscape error policy 
+		@exception StandardException Standard Derby error policy 
 	*/
 	public void removePage(Page page) throws StandardException;
 
@@ -288,7 +288,7 @@ caller until its unlatch() method is called.
         valid (i.e, it has been deallocated or freed or never initialized)
 		Note that an overflow page will be returned since it is a valid page.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public Page getPage(long pageNumber)
 		throws StandardException;
@@ -300,7 +300,7 @@ public Page getPage(long pageNumber)
 		@return the required Page or null if the page does not exist or the page
 		is already latched.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 	*/
 	public Page getPageNoWait(long pageNumber) throws StandardException;
@@ -324,7 +324,7 @@ caller until its unlatch() method is called.
         valid (i.e, it has been deallocated, freed, never initialized, or is
         an allocation page or overflow page)
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public Page getUserPageNoWait(long pageNumber) throws StandardException;
 	/**
@@ -346,7 +346,7 @@ caller until its unlatch() method is called.
         valid (i.e, it has been deallocated, freed, never initialized, or is
         an allocation page or overflow page)
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public Page getUserPageWait(long pageNumber) throws StandardException;
 
@@ -367,7 +367,7 @@ caller until its unlatch() method is called.
 		the pages.
 
 		@return latched page or null if there is no page in the container
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 		@see ContainerHandle#getPage
 	*/
@@ -410,7 +410,7 @@ via a page which was (or currently still is) latched, and the page
 		then the behavior of this routine is undefined.
 
 		@return latched page or null if there is no next page in the container
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 		@see ContainerHandle#getPage
 	*/
@@ -430,7 +430,7 @@ via a page which was (or currently still is) latched, and the page
 
 		@param flag a GET_PAGE_* flag.
 
-		@exception StandardException Standard Cloudscape error policy 
+		@exception StandardException Standard Derby error policy 
 	*/
 	public Page getPageForInsert(int flag) 
 		 throws StandardException;
@@ -513,7 +513,7 @@ void getContainerProperties(Properties prop)
 		overflow rows.  This number is a rough estimate and may be grossly off.
 
 		@param flag different flavors of row count (reserved for future use)
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	 */
 	public long getEstimatedRowCount(int flag) throws StandardException;
 
@@ -528,7 +528,7 @@ void getContainerProperties(Properties prop)
 		@param count the estimated number of rows in the container.
 		@param flag different flavors of row count (reserved for future use)
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	 */
 	public void setEstimatedRowCount(long count, int flag) throws StandardException;
 
@@ -539,7 +539,7 @@ Get the total estimated number of allocated (not freed, not
 
 		@param flag different flavors of page count (reserved for future use)
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	 */
 	public long getEstimatedPageCount(int flag) throws StandardException;
 
@@ -548,7 +548,7 @@ Get the total estimated number of allocated (not freed, not
 		Flush all dirty pages of the container to disk.  Used mainly for
 		UNLOGGED or CREATE_UNLOGGED operation.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void flushContainer() throws StandardException;
 
@@ -566,7 +566,7 @@ Get the total estimated number of allocated (not freed, not
 		Return a record handle that is initialized to the given segment id,
         container id, page number and record id.
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 
 		@param pageNumber   the page number of the RecordHandle.
 		@param recordId     the record id of the RecordHandle.
@@ -582,13 +582,13 @@ public RecordHandle makeRecordHandle(long pageNumber, int recordId)
 		or compact it.
 
 		@param record	The record handle, the record must have been locked execlusively already.
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	*/
 	public void compactRecord(RecordHandle record) throws StandardException;
 
 	/**
 		Return true if this containerHandle refers to a temporary container.
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	 */
 	public boolean isTemporaryContainer() throws StandardException;
 
@@ -599,7 +599,7 @@ public RecordHandle makeRecordHandle(long pageNumber, int recordId)
 
 	/**
 	   Backup the container to the specified path.
-	   @exception StandardException	Standard Cloudscape error policy
+	   @exception StandardException	Standard Derby error policy
 	*/
 	public void backupContainer(String backupContainerPath) throws StandardException;
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_ContainerLock.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_ContainerLock.java
index 12da93e6..0ba0b520 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_ContainerLock.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_ContainerLock.java
@@ -45,7 +45,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *
 	 * @return A string of the form: ContainerKey(segment_id, container_id)
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      **/
     public String diag()
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_RowLock.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_RowLock.java
index 93b651cc..b0432ecc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_RowLock.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/D_RowLock.java
@@ -42,7 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /**
 		Return the string for the qualifier.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      **/
     public String diag()
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java
index f6b916f0..fdb23fcb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LockingPolicy.java
@@ -87,7 +87,7 @@ This chain (group) of locks has the following defined behaviour
         False should only be returned if the waitForLock policy was set to
         "false," and the lock was unavailable.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 		@see ContainerHandle
 
@@ -120,7 +120,7 @@ public void unlockContainer(
         @param forUpdate    Should container be locked for update, or read?
 
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 		@see Page
 
@@ -145,7 +145,7 @@ public boolean lockRecordForRead(
         False should only be returned if the waitForLock argument was set to
         "false," and the lock was unavailable.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 		@see Page
 	*/
@@ -171,7 +171,7 @@ public boolean zeroDurationLockRecordForWrite(
         False should only be returned if the waitForLock argument was set to
         "false," and the lock was unavailable.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 		@see Page
 	*/
@@ -185,7 +185,7 @@ public boolean lockRecordForWrite(
 	/**
 		Called after a record has been fetched.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
   		@see Page
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java
index 0950326a..519da855 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Loggable.java
@@ -65,7 +65,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@param in			optional data
 
 		@exception IOException Can be thrown by any of the methods of in.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	*/
 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 		 throws StandardException, IOException;
@@ -81,7 +81,7 @@ or it can be prepared when getPreparedLog() is called.
 		which contains optional data that will be available in to doMe() 
         methods.
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	
 	*/
 	public ByteArray getPreparedLog() throws StandardException;
@@ -109,7 +109,7 @@ which contains optional data that will be available in to doMe()
 		@param xact		The transaction trying to redo this operation
 		@return true if operation needs redoing, false if not.
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 		@see Loggable#releaseResource
 	*/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LogicalUndoable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LogicalUndoable.java
index 4c4052a0..293150f7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LogicalUndoable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/LogicalUndoable.java
@@ -50,7 +50,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		method should only be called by LogicalUndo to extract information from
 		the log record.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public ContainerHandle getContainer() throws StandardException;
 
@@ -71,7 +71,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		the correct column number and type, the log operation will restore the
 		row with the optional data stored in the log record.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Method may read from in
 
 		@see LogicalUndo
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java
index 0260e7d9..27698313 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Page.java
@@ -268,7 +268,7 @@ boolean spaceForInsert(
      *
      * @return A RecordHandle representing the new record.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      * @exception StandardException The container was not opened in update mode.
      * @exception StandardException Row cannot fit on the page or row is null.
      **/
@@ -318,7 +318,7 @@ RecordHandle insert(
      *
      * @return the number of rows processed.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      *
      * @see LockingPolicy
      **/
@@ -343,7 +343,7 @@ public int moveRecordForCompressAtSlot(
      *
      * @return the number of fields in the record
      *
-     * @exception StandardException	Standard Cloudscape error policy, a 
+     * @exception StandardException	Standard Derby error policy, a 
      *                              statement level exception is thrown if the 
      *                              record handle does not match a record on 
      *                              the page.
@@ -375,7 +375,7 @@ public int fetchNumFields(RecordHandle handle)
      *
      * @return the slot number
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      **/
     int getSlotNumber(RecordHandle handle) 
         throws StandardException;
@@ -393,7 +393,7 @@ int getSlotNumber(RecordHandle handle)
      *
      * @return the record handle.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      **/
 	RecordHandle getRecordHandleAtSlot(int slot) 
         throws StandardException;
@@ -485,7 +485,7 @@ int getNextSlotNumber(RecordHandle handle)
      * @return A RecordHandle representing the new record, or null if the row 
      *         will not fit on a non-empty page.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      * @exception StandardException The container was not opened in update mode.
      * @exception StandardException The row cannot fit on the page
      *
@@ -619,7 +619,7 @@ RecordHandle insertAtSlot(
      *
      * @return A handle to the record.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      *
      * @see LockingPolicy
      **/
@@ -656,7 +656,7 @@ public RecordHandle fetchFromSlot(
 
 		@return the Handle to the record that is locked
 
-		@exception StandardException	Standard Cloudscape error policy, a 
+		@exception StandardException	Standard Derby error policy, a 
                                         statement level exception is thrown if
                                         the slot is not on the page.
 
@@ -683,7 +683,7 @@ public RecordHandle fetchFieldFromSlot(
      *
      * @param slot slot of record to be tested.
      *
-     * @exception StandardException	Standard Cloudscape error policy, a 
+     * @exception StandardException	Standard Derby error policy, a 
      *                              statement level exception is thrown if the 
      *                              slot is not on the page.
      **/
@@ -718,7 +718,7 @@ passed to the openContainer() call before the record is updated.
 
 		@return a Handle to the updated record.
 
-		@exception StandardException	Standard Cloudscape error policy, a
+		@exception StandardException	Standard Derby error policy, a
                                         statement level exception is thrown if
 		                                the slot is not on the page, or if the 
                                         record is deleted, or if the fieldId 
@@ -757,7 +757,7 @@ public RecordHandle updateFieldAtSlot(
      *
      * @return the number of fields in the record
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      **/
 	public int fetchNumFieldsAtSlot(int slot)
 		 throws StandardException;
@@ -787,7 +787,7 @@ public int fetchNumFieldsAtSlot(int slot)
      *                  the access code where the logical undo logic resides.
      *                  Null if logical undo is not necessary.
      * 
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      * @exception StandardException The container was not opened in update mode.
      * @exception StandardException A statement level exception is thrown when 
      *                              trying to delete an already deleted record,
@@ -860,7 +860,7 @@ public RecordHandle deleteAtSlot(
 	 * @param needDataLogged    if set to true data is logged for purges else 
      *                          only headers.
 	 *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      * @see LockingPolicy
      **/
 	public void purgeAtSlot(
@@ -920,7 +920,7 @@ public void purgeAtSlot(
      * @param num_rows copy and purge this many rows from this page
      * @param dest_slot copying into this slot of destPage
      *
-     * @exception StandardException Standard Cloudscape error policy
+     * @exception StandardException Standard Derby error policy
      **/
 	public void copyAndPurge(
     Page    destPage, 
@@ -947,7 +947,7 @@ passed to the openContainer() call before the record is undeleted.
 		@param validColumns a bit map of which columns in the row is valid.
 		ValidColumns will not be changed by RawStore.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception StandardException The container was not opened in update mode.
 		@exception StandardException if the slot is not on the page.
 
@@ -991,7 +991,7 @@ RecordHandle updateAtSlot(
 		<BR>
 		MT - latched
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 
 	public int recordCount() throws StandardException;
@@ -1002,7 +1002,7 @@ RecordHandle updateAtSlot(
 		 <BR>
 		MT - latched
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 
 	public int nonDeletedRecordCount() throws StandardException;
@@ -1082,7 +1082,7 @@ call auxObjectInvalidated() on the old aux objkect and replace it with aux.
 		Set the time stamp to what is on page at this instance.  No op if this
 		page does not support time stamp.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	void setTimeStamp(PageTimeStamp ts) throws StandardException;
 
@@ -1102,7 +1102,7 @@ call auxObjectInvalidated() on the old aux objkect and replace it with aux.
 		@param ts the time stamp gotten from an earlier call to this page's
 		getTimeStamp
 		@return true if timestamp is the same
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 		@see PageTimeStamp
 	*/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
index 84eeb4d8..ec0b8df1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java
@@ -410,7 +410,7 @@ The cleanupOnError() method of this context behaves as follows:
         @param transName is the name of the transaction. Thsi name will be displayed
         by the transactiontable VTI.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see Transaction
 		@see org.apache.derby.iapi.services.context.Context
@@ -471,7 +471,7 @@ The cleanupOnError() method of this context behaves as follows:
         @param local_id   The branch qualifier of the Xid - ie. 
                           Xid.getBranchQaulifier()
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see Transaction
 		@see org.apache.derby.iapi.services.context.Context
@@ -496,7 +496,7 @@ public Transaction startGlobalTransaction(
                           this name.
         The name is displayed in the transactiontable VTI.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see #startTransaction
 	*/
@@ -549,7 +549,7 @@ The cleanupOnError() method of this context behaves as follows:
         and the context is popped off the stack.
 		</UL>
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see Transaction
 		@see org.apache.derby.iapi.services.context.Context
@@ -604,7 +604,7 @@ The cleanupOnError() method of this context behaves as follows:
         @param transName is the name of the transaction. This name will be 
         displayed by the transactiontable VTI.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see Transaction
 		@see org.apache.derby.iapi.services.context.Context
@@ -663,7 +663,7 @@ The cleanupOnError() method of this context behaves as follows:
         @param transName is the name of the transaction. This name will be 
         displayed by the transactiontable VTI.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see Transaction
 		@see org.apache.derby.iapi.services.context.Context
@@ -683,7 +683,7 @@ public Transaction startNestedUpdateUserTransaction(
 
 	/**
 	  * Freeze the database temporarily so a backup can be taken.
-	  * <P>Please see cloudscape on line documentation on backup and restore.
+	  * <P>Please see Derby on line documentation on backup and restore.
 	  *
 	  * @exception StandardException Thrown on error
 	  */
@@ -691,7 +691,7 @@ public Transaction startNestedUpdateUserTransaction(
 
 	/**
 	  * Unfreeze the database after a backup has been taken.
-	  * <P>Please see cloudscape on line documentation on backup and restore.
+	  * <P>Please see Derby on line documentation on backup and restore.
 	  *
 	  * @exception StandardException Thrown on error
 	  */
@@ -699,7 +699,7 @@ public Transaction startNestedUpdateUserTransaction(
 
 	/**
 	  * Backup the database to backupDir.  
-	  * <P>Please see cloudscape on line documentation on backup and restore.
+	  * <P>Please see Derby on line documentation on backup and restore.
 	  *
 	  * @param backupDir the name of the directory where the backup should be
       *                  stored.
@@ -761,14 +761,14 @@ public void disableLogArchiveMode(boolean deleteOnlineArchivedLogFiles)
 		The raw store does not guarentee that a checkpoint will indeed have
 		happened by the time this routine returns.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void checkpoint() throws StandardException;
 
 
 	/**
 		Idle the raw store as much as possible. 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 	*/
 	public void idle() throws StandardException;
@@ -777,7 +777,7 @@ public void disableLogArchiveMode(boolean deleteOnlineArchivedLogFiles)
 	    Get a flushed scan.
 		@param start The instant for the beginning of the scan.
 		@param groupsIWant log record groups the caller wants to scan.
-		@exception StandardException StandardCloudscape error policy
+		@exception StandardException StandardDerby error policy
 		*/
 	ScanHandle openFlushedScan(DatabaseInstant start, int groupsIWant) 
 		 throws StandardException;
@@ -809,21 +809,21 @@ ScanHandle openFlushedScan(DatabaseInstant start, int groupsIWant)
 	 * Return the module providing XAresource interface to the transaction 
      * table. 
      *
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public /* XAResourceManager */ Object getXAResourceManager()
         throws StandardException;
 
 	/*
 	 * the database creation phase is finished
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public void createFinished() throws StandardException;
 
 	/**
 	 * Get JBMS properties relavent to raw store
 	 *
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public void getRawStoreProperties(PersistentSet tc) 
 		 throws StandardException; 
@@ -835,14 +835,14 @@ public void getRawStoreProperties(PersistentSet tc)
 	/**
 	 * Freeze the database from altering any persistent storage.
 	 *
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public void freezePersistentStore() throws StandardException;
 
 	/**
 	 * Unfreeze the database, persistent storage can now be altered.
 	 *
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public void unfreezePersistentStore() throws StandardException;
 
@@ -850,7 +850,7 @@ public void getRawStoreProperties(PersistentSet tc)
 		Encrypt cleartext into ciphertext.
 
 		@see org.apache.derby.iapi.services.crypto.CipherProvider#encrypt
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int encrypt(byte[] cleartext, int offset, int length, 
 					   byte[] ciphertext, int outputOffset,
@@ -861,7 +861,7 @@ public int encrypt(byte[] cleartext, int offset, int length,
 		Decrypt cleartext from ciphertext.
 
 		@see org.apache.derby.iapi.services.crypto.CipherProvider#decrypt
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int decrypt(byte[] ciphertext, int offset, int length, 
 					   byte[] cleartext, int outputOffset) 
@@ -882,7 +882,7 @@ public int decrypt(byte[] ciphertext, int offset, int length,
 		Change the boot password.  Return the encrypted form of the secret key.
 		The new value must be a String of the form: oldBootPassword, newBootPassword
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public Serializable changeBootPassword(Properties properties, Serializable changePassword)
 		 throws StandardException ;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/StreamContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/StreamContainerHandle.java
index 6e639ef0..d768fe86 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/StreamContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/StreamContainerHandle.java
@@ -85,7 +85,7 @@ void getContainerProperties(Properties prop)
 
 		@param row Row to be filled in with information from the record.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	boolean fetchNext(DataValueDescriptor[] row) throws StandardException;
 
@@ -105,7 +105,7 @@ void getContainerProperties(Properties prop)
 	/**
 		remove the stream container
 
-		@exception StandardException Standard Cloudscape error policy		
+		@exception StandardException Standard Derby error policy		
 	 */
 	public void removeContainer() throws StandardException;
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
index b9fca082..daa87ba4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Transaction.java
@@ -66,7 +66,7 @@ Purpose is to allow a transaction access to database (service) properties.
 
 		Will not be called for transactions early in the boot process, ie. before
 		the property conglomerate is set up.
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public void setup(PersistentSet set)
 		throws StandardException;
@@ -200,7 +200,7 @@ Everything else is identical to commit(), use this at your own risk.
 
 		@see RawStoreFactory#startTransaction
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception StandardException A transaction level exception is 
         thrown if the transaction is not idle.
 
@@ -213,7 +213,7 @@ Everything else is identical to commit(), use this at your own risk.
 
 		@see RawStoreFactory#startTransaction
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception StandardException A transaction level exception is 
         thrown if the transaction is not idle.
 
@@ -236,7 +236,7 @@ Everything else is identical to commit(), use this at your own risk.
                     A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
 
 		@return returns total number of savepoints in the stack.
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 		@exception StandardException
         A statement level exception is thrown if a savepoint already 
         exists in the current transaction with the same name.
@@ -257,7 +257,7 @@ in the setSavePoint() call.
                     A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
 
 		@return returns total number of savepoints in the stack.
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 		@exception StandardException
         A statement level exception is thrown if a savepoint already
         exists in the current transaction with the same name.
@@ -280,7 +280,7 @@ in the setSavePoint() call.
                     A JDBC Savepoint object value for kindOfSavepoint would mean it is JDBC savepoint
 
 		@return returns total number of savepoints in the stack.
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 		@exception StandardException
         A statement level exception is thrown if no savepoint exists with 
         the given name.
@@ -304,7 +304,7 @@ The release() method of ContainerHandle will be called when this
 
 		@return a valid ContainerHandle or null if the container does not exist.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 
 	*/
 	public ContainerHandle openContainer(ContainerKey containerId,  int mode)
@@ -326,7 +326,7 @@ as openContainer(int containerId,  boolean forUpdate).
 
 		@return a valid ContainerHandle or null if the container does not exist.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 
 	*/
 
@@ -373,7 +373,7 @@ SpareSpace indicates that percent (0% - 100%) of page space that will
 		This id is only valid within this RawStoreFactory.  Returns a negative 
         number if a container could not be allocated.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 	*/
 	public long addContainer(
@@ -397,7 +397,7 @@ be retrieved by any openContainer() call.
 		and all its pages deallocated. The container will be fully removed
 		at the commit time of the transaction.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 	*/
 	public void dropContainer(ContainerKey containerId)
@@ -420,7 +420,7 @@ be retrieved by any openContainer() call.
 		and all its pages deallocated. The container will be fully removed
 		at the commit time of the transaction.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 	*/
 	public long addAndLoadStreamContainer(
@@ -433,7 +433,7 @@ public long addAndLoadStreamContainer(
 
 		@return a valid StreamContainerHandle or null if the container does not exist.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 
 	*/
 	public StreamContainerHandle openStreamContainer(
@@ -449,7 +449,7 @@ public StreamContainerHandle openStreamContainer(
 		<P>
 		This call will remove the container.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 	*/
 	public abstract void dropStreamContainer(long segmentId, long containerId)
@@ -467,7 +467,7 @@ public abstract void dropStreamContainer(long segmentId, long containerId)
 
 		@see Loggable
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 
 	*/
 	public void logAndDo(Loggable operation) throws StandardException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Undoable.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Undoable.java
index 66a9b774..fb32005b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Undoable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/Undoable.java
@@ -95,7 +95,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		null if nothing to undo. 
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 		@see Loggable#releaseResource
 		@see Loggable#needsRedo
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/DataFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/DataFactory.java
index 3387c18e..b2945146 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/DataFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/DataFactory.java
@@ -80,7 +80,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		then will return a null handle if the container is dropped.
 
 		@return the handle to the opened container
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 	 */
 	public ContainerHandle openContainer(RawTransaction t,
@@ -94,7 +94,7 @@ public ContainerHandle openContainer(RawTransaction t,
 		Only internal raw store code should call this, e.g. recovery.
 
 		@see #openContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public RawContainerHandle openDroppedContainer(RawTransaction t,
 												   ContainerKey containerId,
@@ -115,7 +115,7 @@ public RawContainerHandle openDroppedContainer(RawTransaction t,
 
 		@return the containerId of the newly created container
 
-		@exception StandardException Standard Cloudscape Error policy
+		@exception StandardException Standard Derby Error policy
 
 	 */
 	public long addContainer(
@@ -138,7 +138,7 @@ public long addContainer(
 
 		@return the containerId of the newly created stream container
 
-		@exception StandardException Standard Cloudscape Error policy
+		@exception StandardException Standard Derby Error policy
 
 	 */
 	public long addAndLoadStreamContainer(RawTransaction t, long segmentId,
@@ -150,7 +150,7 @@ public long addAndLoadStreamContainer(RawTransaction t, long segmentId,
 
 		@return a valid StreamContainerHandle or null if the container does not exist.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 
 	*/
 	public StreamContainerHandle openStreamContainer(
@@ -163,7 +163,7 @@ public StreamContainerHandle openStreamContainer(
 	/**
 		Drop and remove a stream container.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public void dropStreamContainer(RawTransaction t, long segmentId, long containerId)
 		throws StandardException;
@@ -174,7 +174,7 @@ public void dropStreamContainer(RawTransaction t, long segmentId, long container
         Used if container is found to not exist during redo recovery of
         log records creating the container.
 
-		@exception StandardException Standard Cloudscape Error policy
+		@exception StandardException Standard Derby Error policy
 	 */
 	public void reCreateContainerForRedoRecovery(RawTransaction t,
 			long segmentId, long containerId, ByteArray containerInfo)
@@ -209,7 +209,7 @@ public void setRawStoreFactory(RawStoreFactory rsf, boolean create,
 		Return a record handle that is initialized to the given page number and
         record id.
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 
 		@param segmentId    segment where the RecordHandle belongs.
 		@param containerId  container where the RecordHandle belongs.
@@ -224,7 +224,7 @@ public void setRawStoreFactory(RawStoreFactory rsf, boolean create,
 	/**
 		Database creation finished
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	*/
 	public void createFinished() throws StandardException;
 
@@ -251,7 +251,7 @@ public void setRawStoreFactory(RawStoreFactory rsf, boolean create,
 
 	/**
 		Reclaim space used by this factory.  Called by post commit daemon.
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public int reclaimSpace(Serviceable work, ContextManager contextMgr)
 		 throws StandardException;
@@ -259,7 +259,7 @@ public int reclaimSpace(Serviceable work, ContextManager contextMgr)
 	/**
 		Called after recovery is performed.
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	*/
 	public void postRecovery() throws StandardException;
 
@@ -267,7 +267,7 @@ public int reclaimSpace(Serviceable work, ContextManager contextMgr)
 		Encrypt cleartext into ciphertext.
 
 		@see org.apache.derby.iapi.services.crypto.CipherProvider#encrypt
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int encrypt(byte[] cleartext, int offset, int length,
 					   byte[] ciphertext, int outputOffset, 
@@ -278,7 +278,7 @@ public int encrypt(byte[] cleartext, int offset, int length,
 		Decrypt cleartext from ciphertext.
 
 		@see org.apache.derby.iapi.services.crypto.CipherProvider#decrypt
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int decrypt(byte[] ciphertext, int offset, int length,
 					   byte[] cleartext, int outputOffset)
@@ -315,7 +315,7 @@ public void removeOldVersionOfContainers(boolean inRecovery)
 
 	/**
 	 * Backup restore - stop writing dirty pages or container to disk
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void freezePersistentStore() throws StandardException;
 
@@ -327,7 +327,7 @@ public void removeOldVersionOfContainers(boolean inRecovery)
 	/**
 	 * Backup restore - don't allow the persistent store to be frozen - or if
 	 * it is already frozen, block.   A write is about to commence.
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void writeInProgress() throws StandardException;
 
@@ -363,7 +363,7 @@ long getMaxContainerId()
 	 * during recovery. Crash recovery  uses these files to identify the dropped
 	 * containers.   Stub files(d*.dat) gets creates  when a
 	 * table/index(containers) dropped.
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 **/
     public void removeDroppedContainerFileStubs(LogInstant redoLWM) throws StandardException;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/RawContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/RawContainerHandle.java
index 59f52b8c..de008fad 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/RawContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/data/RawContainerHandle.java
@@ -54,27 +54,27 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	/** 
 		Return the status of the container - one of NORMAL, DROPPED, COMMITTED_DROP.
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public int getContainerStatus() throws StandardException;
 
 	/**
 		Remove the container.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public void removeContainer(LogInstant instant) throws StandardException;
 
 	/**
 		If drop is true, drop the container.  if drop is false, un-drop the
 		container
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public void dropContainer(LogInstant instant, boolean drop) throws StandardException;
 
 	/**
 		Get the logged container version
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public long getContainerVersion() throws StandardException;
 
@@ -82,7 +82,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		Return a Page that represents any page - alloc page, valid page, free page, 
 		dealloced page etc.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Page getAnyPage(long pageNumber) throws StandardException;
 
@@ -95,7 +95,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         Used during redo recovery while trying to apply log records which
         are creating the page.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public Page reCreatePageForRedoRecovery(
     int     pageFormat, 
@@ -107,7 +107,7 @@ public Page reCreatePageForRedoRecovery(
 		Log all information necessary to recreate the container during a load
 		tran.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public ByteArray logCreateContainerInfo() throws StandardException;
 
@@ -117,7 +117,7 @@ public Page reCreatePageForRedoRecovery(
 	   checkpoint is taken after any log record is sent to the log stream but
 	   before the container is actually dirtied.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public void preDirty(boolean preDirtyOn) throws StandardException;
 
@@ -126,7 +126,7 @@ public Page reCreatePageForRedoRecovery(
      * Create encrypted version of the container with the 
      * user specified encryption properties.  
      * @param newFilePath file to store the new encrypted version of the container
-	 * @exception StandardException	Standard Cloudscape error policy
+	 * @exception StandardException	Standard Derby error policy
      */
 	public void encryptContainer(String newFilePath) throws StandardException;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java
index 8098e651..0ead8d89 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java
@@ -128,7 +128,7 @@ public boolean checkpoint(RawStoreFactory rawStoreFactory,
 
 		@return the LogScan.
 
-		@exception StandardException StandardCloudscape error policy
+		@exception StandardException Standard Derby error policy
 	    NOTE: This will be removed after the LogSniffer Rewrite.
 	*/
 	LogScan openForwardsFlushedScan(LogInstant startAt)
@@ -144,7 +144,7 @@ LogScan openForwardsFlushedScan(LogInstant startAt)
 		if startAt is a LogInstant which is not in the log.
 		@param groupsIWant - log record groups the scanner wants.
 		@return the LogScan.
-		@exception StandardException StandardCloudscape error policy
+		@exception StandardException Standard Derby error policy
 		*/
 	ScanHandle openFlushedScan(DatabaseInstant startAt, int groupsIWant)
 		 throws StandardException;
@@ -162,7 +162,7 @@ ScanHandle openFlushedScan(DatabaseInstant startAt, int groupsIWant)
  		if stopAt is a LogInstant which is not in the log.
 		@return the LogScan.
 
-		@exception StandardException StandardCloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	LogScan openForwardsScan(LogInstant startAt,LogInstant stopAt)
 		 throws StandardException;
@@ -177,13 +177,13 @@ LogScan openForwardsScan(LogInstant startAt,LogInstant stopAt)
 
 	/**
 		Stop making any change to the persistent store
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	 */
 	public void freezePersistentStore() throws StandardException;
 		 
 	/**
 		Can start making change to the persistent store again
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	 */
 	public void unfreezePersistentStore() throws StandardException;
 
@@ -195,14 +195,14 @@ LogScan openForwardsScan(LogInstant startAt,LogInstant stopAt)
 
 	/**
 		Get JBMS properties relavent to the log factory
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public void getLogFactoryProperties(PersistentSet set) 
 		 throws StandardException;
 
 	 /**
 		Return the location of the log directory.
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	  */
 	public StorageFile getLogDirectory() throws StandardException;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/Logger.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/Logger.java
index 9cc557d9..8881d16f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/Logger.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/log/Logger.java
@@ -54,7 +54,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@param operation	the loggable operation that describes the change
 		@return LogInstant that is the LogInstant of the loggable operation 
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	   */ 
 	public LogInstant logAndDo(RawTransaction xact, Loggable operation)
 		 throws StandardException; 
@@ -79,7 +79,7 @@ public LogInstant logAndDo(RawTransaction xact, Loggable operation)
 
 		@return LogInstant that is the LogInstant of the compensation operation
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	   */ 
 	public LogInstant logAndUndo(RawTransaction xact,
 								 Compensation operation, LogInstant undoInstant,
@@ -145,7 +145,7 @@ public void reprepare(
 				to be rolled back.  
 				If null, then rollback starts from the end of the log.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	  */
 	public void undo(RawTransaction t,
 					 TransactionId undoId,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
index 3b683586..09a18f9c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java
@@ -120,7 +120,7 @@ to the update() method of the Observer's will be one of
 
 		@see Compensation
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public abstract void logAndUndo(Compensation compensation, LogInstant undoInstant, 
 									LimitObjectInput in) 
@@ -198,7 +198,7 @@ Set the transactionId (Global and internal) of this transaction using a
 		logical operations. Transactions that need to disallow logical 
         operations should hide this method.
 
-		@exception StandardException Standard Cloudscape error policy,
+		@exception StandardException Standard Derby error policy,
 	*/
 	public void checkLogicalOperationOk() throws StandardException {
 	}
@@ -249,7 +249,7 @@ and be committed independently of the user transaction (usually before
 		A nested top transaction conflicts on the logical locks of its "parent"
         transaction.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 
 	public abstract RawTransaction startNestedTopTransaction() throws StandardException;
@@ -267,7 +267,7 @@ and be committed independently of the user transaction (usually before
 		code always check for committed drop status.  Anybody else wanting to
 		use this interface must keep this in mind.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public abstract RawContainerHandle openDroppedContainer
 		(ContainerKey containerId, LockingPolicy locking)
@@ -279,7 +279,7 @@ and be committed independently of the user transaction (usually before
         Used during redo recovery when processing log records trying to 
         create a container, but no container is found in the db.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	 */
 	public abstract void reCreateContainerForRedoRecovery
 		(long segmentId, long containerId, ByteArray containerInfo)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
index 47d988ed..98070d99 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java
@@ -65,7 +65,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * Return the module providing XAresource interface to the transaction
      * table.
      *
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public /* XAResourceManager */ Object getXAResourceManager()
         throws StandardException;
@@ -82,7 +82,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 		@see RawStoreFactory#startTransaction
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public RawTransaction startTransaction(
     RawStoreFactory rsf,
@@ -103,7 +103,7 @@ public RawTransaction startTransaction(
 
 		@see RawStoreFactory#startNestedReadOnlyUserTransaction
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public RawTransaction startNestedReadOnlyUserTransaction(
     RawStoreFactory rsf,
@@ -124,7 +124,7 @@ public RawTransaction startNestedReadOnlyUserTransaction(
 
 		@see RawStoreFactory#startNestedUpdateUserTransaction
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public RawTransaction startNestedUpdateUserTransaction(
     RawStoreFactory rsf,
@@ -148,7 +148,7 @@ public RawTransaction startNestedUpdateUserTransaction(
 
 		@see RawStoreFactory#startGlobalTransaction
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public RawTransaction startGlobalTransaction(
     RawStoreFactory rsf,
@@ -167,7 +167,7 @@ public RawTransaction startGlobalTransaction(
 		@see RawStoreFactory#findUserTransaction
 		@see RawStoreFactory#startTransaction
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public RawTransaction findUserTransaction(
         RawStoreFactory rsf,
@@ -181,7 +181,7 @@ public RawTransaction findUserTransaction(
 
 		@see RawStoreFactory#startTransaction(ContextManager, String)
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public RawTransaction startNestedTopTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
 
@@ -193,7 +193,7 @@ public RawTransaction findUserTransaction(
 
 		@see RawStoreFactory#startTransaction
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public RawTransaction startInternalTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
 
@@ -208,7 +208,7 @@ public RawTransaction findUserTransaction(
 
 	/**
 		Reset any resettable transaction Id 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public void resetTranId() throws StandardException;
 
@@ -228,7 +228,7 @@ public RawTransaction findUserTransaction(
 
 		Used only in recovery.
 
-		@exception StandardException Cloudscape Standard Error policy
+		@exception StandardException Derby Standard Error policy
 	*/
 	public void handlePreparedXacts(
     RawStoreFactory rsf)
@@ -240,7 +240,7 @@ public void handlePreparedXacts(
 		passed in transaction.  Used only in recovery.
 
 		@param recoveryTransaction the transaction used to rollback
-		@exception StandardException Cloudscape Standard Error policy
+		@exception StandardException Derby Standard Error policy
 	*/
 	public void rollbackAllTransactions(RawTransaction recoveryTransaction, 
 										RawStoreFactory rsf)
@@ -284,7 +284,7 @@ public void rollbackAllTransactions(RawTransaction recoveryTransaction,
 	/**
 		Database creation finished
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	*/
 	public void createFinished() throws StandardException;
 
@@ -298,7 +298,7 @@ public void rollbackAllTransactions(RawTransaction recoveryTransaction,
 		Use this transaction table, which is gotten from a checkpoint
 		operation.  Use ONLY during recovery.
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	 */
 	public void useTransactionTable(Formatable transactionTable) 
 		 throws StandardException; 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
index 188fb35c..106ef25b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
@@ -912,7 +912,7 @@ public double estimatedMemoryUsage() {
 	 * SQL types. For example Types.NUMERIC and Types.DECIMAL are
 	 * equivalent
 	 *
-	 * @param existingType  JDBC type id of Cloudscape data type
+	 * @param existingType  JDBC type id of Derby data type
 	 * @param jdbcTypeId   JDBC type id passed in from application.
 	 *
 	 * @return boolean true if types are equivalent, false if not
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/JSQLType.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/JSQLType.java
index e4c0a418..30eb8c53 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/JSQLType.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/JSQLType.java
@@ -29,7 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.ObjectOutput;
 
 /**
- *	Type descriptor which wraps all 3 kinds of types supported in Cloudscape's
+ *	Type descriptor which wraps all 3 kinds of types supported in Derby's
  *	JSQL language: SQL types, Java primitives, Java classes.
  *
  *	This interface was originally added to support the serializing of WorkUnit
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index dddd440e..c986dad9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -633,7 +633,7 @@ public void readExternalFromArray(ArrayInputStream in)
     {
         arg_passer[0]        = rawData;
 
-        rawLength = in.readCloudscapeUTF(arg_passer);
+        rawLength = in.readDerbyUTF(arg_passer);
 
         rawData = arg_passer[0];
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
index fbda5e32..df6b1e8f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
@@ -110,7 +110,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         public static final int VARBIT_MAXWIDTH         = Limits.DB2_VARCHAR_MAXWIDTH;
         public static final int LONGVARBIT_MAXWIDTH = Limits.DB2_LONGVARCHAR_MAXWIDTH;
 
-        // not supposed to be limited! 4096G should be ok(?), if Cloudscape can handle...
+        // not supposed to be limited! 4096G should be ok(?), if Derby can handle...
         public static final int BLOB_MAXWIDTH = Integer.MAX_VALUE; // to change long
         public static final int CLOB_MAXWIDTH = Integer.MAX_VALUE; // to change long
         public static final int NCLOB_MAXWIDTH = Integer.MAX_VALUE; // to change long
@@ -610,7 +610,7 @@ public static TypeId getBuiltInTypeId(String SQLTypeName) {
 
                 TypeId ret = null;
 
-                // Types defined below here are SQL types and non-JDBC types that are supported by Cloudscape
+                // Types defined below here are SQL types and non-JDBC types that are supported by Derby
                 if (SQLTypeName.equals(TypeId.NCLOB_NAME)) {
                         ret = NCLOB_ID;
                         if (ret == null)
@@ -974,9 +974,9 @@ private void setTypeIdSpecificInstanceVariables()
         }
         /**
          * JDBC has its own idea of type identifiers which is different from
-         * the Cloudscape internal type ids.  The JDBC type ids are defined
+         * the Derby internal type ids.  The JDBC type ids are defined
          * as public final static ints in java.sql.Types.  This method translates
-         * a Cloudscape internal TypeId to a JDBC type id. For java objects this
+         * a Derby internal TypeId to a JDBC type id. For java objects this
          * returns JAVA_OBJECT in Java2 and OTHER in JDK 1.1. For Boolean datatypes,
          * this returns Type.BOOLEAN in JDK1.4 and Type.BIT for jdks prior to 1.4
          *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/StringUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/StringUtil.java
index ac62b2d1..1c94ba23 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/StringUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/StringUtil.java
@@ -322,7 +322,7 @@ public static String hexDump(byte[] data)
 	}
 
 	// The functions below are used for uppercasing SQL in a consistent manner.
-	// Cloudscape will uppercase Turkish to the English locale to avoid i
+	// Derby will uppercase Turkish to the English locale to avoid i
 	// uppercasing to an uppercase dotted i. In future versions, all 
 	// casing will be done in English.   The result will be that we will get
 	// only the 1:1 mappings  in 
