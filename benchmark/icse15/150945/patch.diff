diff --git a/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/LuceneMethods.java b/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/LuceneMethods.java
index a7630e2c..b7d665a9 100644
--- a/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/LuceneMethods.java
+++ b/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/LuceneMethods.java
@@ -92,6 +92,7 @@
  * Parts addapted from Lucene demo. Various methods that interact with
  * Lucene and provide info about the index, search, etc.
  */
+
 class LuceneMethods {
 
 	private int numDocs;
@@ -115,10 +116,10 @@ public void info() throws java.io.IOException {
 
 
 		getFieldInfo();
-		numDocs= indexReader.numDocs();
+    numDocs = indexReader.numDocs();
 		message("Index has " + numDocs + " documents ");
-		message ("All Fields:" + fields.toString());
-		message ("Indexed Fields:" + indexedFields.toString());
+    message("All Fields:" + fields.toString());
+    message("Indexed Fields:" + indexedFields.toString());
 
 		if (IndexReader.isLocked(indexName)) {
 			message("Index is locked");
@@ -134,19 +135,18 @@ public void search(String queryString, boolean explain, boolean showTokens) thro
 		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
 		Hits hits = initSearch(queryString);
 		System.out.println(hits.length() + " total matching documents");
-		Query explainQuery;
 		if (explain) {
 			query = explainQuery(queryString);
 		}
 
 
 		final int HITS_PER_PAGE = 10;
-		message ("--------------------------------------");
+    message("--------------------------------------");
 		for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {
 			int end = Math.min(hits.length(), start + HITS_PER_PAGE);
 			for (int ii = start; ii < end; ii++) {
 				Document doc = hits.doc(ii);
-				message ("---------------- " + ii + " score:" + hits.score(ii) + "---------------------");
+        message("---------------- " + (ii + 1) + " score:" + hits.score(ii) + "---------------------");
 				printHit(doc);
 				if (showTokens) {
 					invertDocument(doc);
@@ -156,7 +156,7 @@ public void search(String queryString, boolean explain, boolean showTokens) thro
 					message("Explanation:" + exp.toString());
 				}
 			}
-			message ("#################################################");
+      message("#################################################");
 
 			if (hits.length() > end) {
 				System.out.print("more (y/n) ? ");
@@ -168,16 +168,21 @@ public void search(String queryString, boolean explain, boolean showTokens) thro
 		searcher.close();
 	}
 
+  /**
+   * @todo Allow user to specify what field(s) to display
+   */
 	private void printHit(Document doc) {
-		for (int ii= 0; ii < fieldsArray.length; ii++) {
+    for (int ii = 0; ii < fieldsArray.length; ii++) {
 			String currField = fieldsArray[ii];
-			String result = doc.get(currField);
-			message(currField + ":" + result);
+      String[] result = doc.getValues(currField);
+      for (int i = 0; i < result.length; i++) {
+        message(currField + ":" + result[i]);
+      }
 		}
 		//another option is to just do message(doc);
 	}
 
-	public void optimize () throws IOException{
+  public void optimize() throws IOException {
 		//open the index writer. False: don't create a new one
 		IndexWriter indexWriter = new IndexWriter(indexName,  new StandardAnalyzer(), false);
 		message("Starting to optimize index.");
@@ -208,6 +213,10 @@ private Query explainQuery(String queryString) throws IOException, ParseExceptio
 		return (query);
 
 	}
+
+  /**
+   * @todo Allow user to specify analyzer
+   */
 	private Hits initSearch(String queryString) throws IOException, ParseException {
 
 		searcher = new IndexSearcher(indexName);
@@ -236,7 +245,7 @@ public void count(String queryString) throws java.io.IOException, ParseException
 		searcher.close();
 	}
 
-	static public void message (String s) {
+  static public void message(String s) {
 		System.out.println(s);
 	}
 
@@ -298,12 +307,12 @@ else if (field.stringValue() != null)
 							position += (t.getPositionIncrement() - 1);
 							position++;
 							String name = t.termText();
-							Integer Count = (Integer)tokenHash.get(name);
+              Integer Count = (Integer) tokenHash.get(name);
 							if (Count == null) { // not in there yet
 								tokenHash.put(name, new Integer(1)); //first one
 							} else {
 								int count = Count.intValue();
-								tokenHash.put(name, new Integer (count+1));
+                tokenHash.put(name, new Integer(count + 1));
 							}
 							if (position > maxFieldLength) break;
 						}
@@ -315,7 +324,7 @@ else if (field.stringValue() != null)
 			}
 		}
 		Entry[] sortedHash = getSortedHashtableEntries(tokenHash);
-		for (int ii = 0; ii < sortedHash.length && ii < 10; ii ++) {
+    for (int ii = 0; ii < sortedHash.length && ii < 10; ii++) {
 			Entry currentEntry = sortedHash[ii];
 			message((ii + 1) + ":" + currentEntry.getKey() + " " + currentEntry.getValue());
 		}
@@ -335,13 +344,13 @@ public void terms(String field) throws IOException {
 			//message(term.field() + ":" + term.text() + " freq:" + terms.docFreq());
 			//if we're either not looking by field or we're matching the specific field
 			if ((field == null) || field.equals(term.field()))
-				termMap.put(new Integer((0 - terms.docFreq())), term.field() + ":" + term.text());
+        termMap.put(term.field() + ":" + term.text(), new Integer((terms.docFreq())));
 		}
 
 		Iterator termIterator = termMap.keySet().iterator();
-		for (int ii=0; termIterator.hasNext() && ii < 100; ii++) {
-			Integer termFreq = (Integer) termIterator.next();
-			String termDetails = (String) termMap.get(termFreq);
+    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {
+      String termDetails = (String) termIterator.next();
+      Integer termFreq = (Integer) termMap.get(termDetails);
 			message(termDetails + ": " + termFreq);
 		}
 		indexReader.close();
@@ -355,14 +364,14 @@ public void terms(String field) throws IOException {
 	public static Entry[]
 		getSortedHashtableEntries(Hashtable h) {
 			Set set = h.entrySet();
-			Entry [] entries =
-				(Entry[])set.toArray(
+    Entry[] entries =
+      (Entry[]) set.toArray(
 																 new Entry[set.size()]);
 			Arrays.sort(entries, new Comparator() {
 				public int compare(Object o1, Object o2) {
-					Object v1 = ((Entry)o1).getValue();
-					Object v2 = ((Entry)o2).getValue();
-					return ((Comparable)v2).compareTo(v1); //descending order
+        Object v1 = ((Entry) o1).getValue();
+        Object v2 = ((Entry) o2).getValue();
+        return ((Comparable) v2).compareTo(v1); //descending order
 				}
 			});
 			return entries;
diff --git a/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/Lucli.java b/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/Lucli.java
index e9f346a6..ab3e6e81 100644
--- a/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/Lucli.java
+++ b/lucene/java/trunk/sandbox/contributions/lucli/src/lucli/Lucli.java
@@ -71,7 +71,7 @@
 public class Lucli {
 
 	final static String DEFAULT_INDEX = "index"; //directory "index" under the current directory
-	final static String HISTORYFILE = ".lucli"; //directory "index" under the current directory
+	final static String HISTORYFILE = ".lucli"; //history file in user's home directory
 	public final static int MAX_TERMS = 100; //Maximum number of terms we're going to show
 
 	// List of commands
@@ -354,7 +354,7 @@ private void parseArgs(String[] args) {
 	}
 
 	private void usage() {
-		message("Usage: lucli [-j]");
+		message("Usage: lucli [-r]");
 		message("Arguments:");
 		message("\t-r: Provide tab completion and history using the GNU readline shared library ");
 	}
