diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
index d3f58dd9..4883fe56 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
@@ -53,6 +53,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/** PARAMETER STYLE DERBY_JDBC_RESULT_SET */
 	public static final short PS_DERBY_JDBC_RESULT_SET = PS_JAVA + 1;
 
+    /** Masks for the sqlOptions field */
+    private static final short SQL_ALLOWED_MASK = (short) 0xF;
+    private static final short DETERMINISTIC_MASK = (short) 0x10;
+
 	private int parameterCount;
 
     /**
@@ -84,9 +88,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private short parameterStyle;
 
 	/**
-		What SQL is allowed by this procedure.
+		This field contains several pieces of information:
+
+        bits 0-3    sqlAllowed = MODIFIES_SQL_DATA, READS_SQL_DATA,CONTAINS_SQL, or NO_SQL
+
+        bit 4         on if function is DETERMINISTIC, off otherwise
 	*/
-	private short	sqlAllowed;
+	private short	sqlOptions;
 
 	/**
 		SQL Specific name (future)
@@ -109,10 +117,11 @@ public RoutineAliasInfo() {
 		Create a RoutineAliasInfo for an internal PROCEDURE.
 	*/
 	public RoutineAliasInfo(String methodName, int parameterCount, String[] parameterNames,
-		TypeDescriptor[]	parameterTypes, int[] parameterModes, int dynamicResultSets, short parameterStyle, short sqlAllowed) {
+                            TypeDescriptor[]	parameterTypes, int[] parameterModes, int dynamicResultSets, short parameterStyle, short sqlAllowed,
+                            boolean isDeterministic ) {
 
 		this(methodName, parameterCount, parameterNames, parameterTypes, parameterModes, 
-			dynamicResultSets, parameterStyle, sqlAllowed, true, (TypeDescriptor) null);
+             dynamicResultSets, parameterStyle, sqlAllowed, isDeterministic, true, (TypeDescriptor) null);
 	}
 
 	/**
@@ -120,7 +129,7 @@ public RoutineAliasInfo(String methodName, int parameterCount, String[] paramete
 	*/
 	public RoutineAliasInfo(String methodName, int parameterCount, String[] parameterNames,
 		TypeDescriptor[]	parameterTypes, int[] parameterModes, int dynamicResultSets, short parameterStyle, short sqlAllowed,
-		boolean calledOnNullInput, TypeDescriptor returnType)
+                            boolean isDeterministic, boolean calledOnNullInput, TypeDescriptor returnType)
 	{
 
 		super(methodName);
@@ -130,7 +139,8 @@ public RoutineAliasInfo(String methodName, int parameterCount, String[] paramete
 		this.parameterModes = parameterModes;
 		this.dynamicResultSets = dynamicResultSets;
 		this.parameterStyle = parameterStyle;
-		this.sqlAllowed = sqlAllowed;
+		this.sqlOptions = (short) (sqlAllowed & SQL_ALLOWED_MASK);
+        if ( isDeterministic ) { this.sqlOptions = (short) (sqlOptions | DETERMINISTIC_MASK); }
 		this.calledOnNullInput = calledOnNullInput;
 		this.returnType = returnType;
 
@@ -204,7 +214,12 @@ public short getParameterStyle() {
 	}
 
 	public short getSQLAllowed() {
-		return sqlAllowed;
+		return (short) (sqlOptions & SQL_ALLOWED_MASK);
+	}
+
+    public boolean isDeterministic()
+    {
+        return ( (sqlOptions & DETERMINISTIC_MASK) != 0 );
 	}
 
 	public boolean calledOnNullInput() {
@@ -239,7 +254,7 @@ public void readExternal( ObjectInput in )
 		dynamicResultSets = in.readInt();
 		parameterCount = in.readInt();
 		parameterStyle = in.readShort();
-		sqlAllowed = in.readShort();
+		sqlOptions = in.readShort();
 		returnType = getStoredType(in.readObject());
 		calledOnNullInput = in.readBoolean();
 		in.readInt(); // future expansion.
@@ -295,7 +310,7 @@ public void writeExternal( ObjectOutput out )
 		out.writeInt(dynamicResultSets);
 		out.writeInt(parameterCount);
 		out.writeShort(parameterStyle);
-		out.writeShort(sqlAllowed);
+		out.writeShort(sqlOptions);
 		out.writeObject(returnType);
 		out.writeBoolean(calledOnNullInput);
 		out.writeInt(0); // future expansion
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index a85e0075..f606bd9b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -212,42 +212,49 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     *[1]    = RETURNS type
     *[2]    = Java class
     *[3]    = method name and signature
-    *[4..N] = arguments (optional, if not present zero arguments is assumed)
+    *[4]    = "true" or "false" depending on whether the function is DETERMINSTIC
+    *[5..N] = arguments (optional, if not present zero arguments is assumed)
 	*
 	*/
 	private static final String[][] SYSFUN_FUNCTIONS = {
-			{"ACOS", "DOUBLE", "java.lang.StrictMath", "acos(double)", "DOUBLE"},
-			{"ASIN", "DOUBLE", "java.lang.StrictMath", "asin(double)", "DOUBLE"},
-			{"ATAN", "DOUBLE", "java.lang.StrictMath", "atan(double)", "DOUBLE"},
-            {"ATAN2", "DOUBLE", "java.lang.StrictMath", "atan2(double,double)", "DOUBLE", "DOUBLE"},
-			{"COS", "DOUBLE", "java.lang.StrictMath", "cos(double)", "DOUBLE"},
-			{"SIN", "DOUBLE", "java.lang.StrictMath", "sin(double)", "DOUBLE"},
-			{"TAN", "DOUBLE", "java.lang.StrictMath", "tan(double)", "DOUBLE"},
-            {"PI", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "PI()"},
-			{"DEGREES", "DOUBLE", "java.lang.StrictMath", "toDegrees(double)", "DOUBLE"},
-			{"RADIANS", "DOUBLE", "java.lang.StrictMath", "toRadians(double)", "DOUBLE"},
-			{"LN", "DOUBLE", "java.lang.StrictMath", "log(double)", "DOUBLE"},
-			{"LOG", "DOUBLE", "java.lang.StrictMath", "log(double)", "DOUBLE"}, // Same as LN
-			{"LOG10", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "LOG10(double)", "DOUBLE"},
-			{"EXP", "DOUBLE", "java.lang.StrictMath", "exp(double)", "DOUBLE"},
-			{"CEIL", "DOUBLE", "java.lang.StrictMath", "ceil(double)", "DOUBLE"},
-			{"CEILING", "DOUBLE", "java.lang.StrictMath", "ceil(double)", "DOUBLE"}, // Same as CEIL
-			{"FLOOR", "DOUBLE", "java.lang.StrictMath", "floor(double)", "DOUBLE"},
-			{"SIGN", "INTEGER", "org.apache.derby.catalog.SystemProcedures", "SIGN(double)", "DOUBLE"},
-            {"RANDOM", "DOUBLE", "java.lang.StrictMath", "random()"},
-			{"RAND", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "RAND(int)", "INTEGER"}, // Escape function spec.
-			{"COT", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "COT(double)", "DOUBLE"},
-			{"COSH", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "COSH(double)", "DOUBLE"},
-			{"SINH", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "SINH(double)", "DOUBLE"},
-			{"TANH", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "TANH(double)", "DOUBLE"}
+        {"ACOS", "DOUBLE", "java.lang.StrictMath", "acos(double)", "true", "DOUBLE"},
+			{"ASIN", "DOUBLE", "java.lang.StrictMath", "asin(double)",  "true", "DOUBLE"},
+			{"ATAN", "DOUBLE", "java.lang.StrictMath", "atan(double)",  "true", "DOUBLE"},
+            {"ATAN2", "DOUBLE", "java.lang.StrictMath", "atan2(double,double)",  "true", "DOUBLE", "DOUBLE"},
+			{"COS", "DOUBLE", "java.lang.StrictMath", "cos(double)",  "true", "DOUBLE"},
+			{"SIN", "DOUBLE", "java.lang.StrictMath", "sin(double)",  "true", "DOUBLE"},
+			{"TAN", "DOUBLE", "java.lang.StrictMath", "tan(double)",  "true", "DOUBLE"},
+            {"PI", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "PI()", "true"},
+            {"DEGREES", "DOUBLE", "java.lang.StrictMath", "toDegrees(double)", "true", "DOUBLE"},
+			{"RADIANS", "DOUBLE", "java.lang.StrictMath", "toRadians(double)",  "true", "DOUBLE"},
+			{"LN", "DOUBLE", "java.lang.StrictMath", "log(double)",  "true", "DOUBLE"},
+			{"LOG", "DOUBLE", "java.lang.StrictMath", "log(double)",  "true", "DOUBLE"}, // Same as LN
+			{"LOG10", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "LOG10(double)",  "true", "DOUBLE"},
+			{"EXP", "DOUBLE", "java.lang.StrictMath", "exp(double)",  "true", "DOUBLE"},
+			{"CEIL", "DOUBLE", "java.lang.StrictMath", "ceil(double)",  "true", "DOUBLE"},
+			{"CEILING", "DOUBLE", "java.lang.StrictMath", "ceil(double)",  "true", "DOUBLE"}, // Same as CEIL
+			{"FLOOR", "DOUBLE", "java.lang.StrictMath", "floor(double)",  "true", "DOUBLE"},
+			{"SIGN", "INTEGER", "org.apache.derby.catalog.SystemProcedures", "SIGN(double)",  "true", "DOUBLE"},
+            {"RANDOM", "DOUBLE", "java.lang.StrictMath", "random()",  "false" },
+			{"RAND", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "RAND(int)",  "false", "INTEGER"}, // Escape function spec.
+			{"COT", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "COT(double)",  "true", "DOUBLE"},
+			{"COSH", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "COSH(double)",  "true", "DOUBLE"},
+			{"SINH", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "SINH(double)",  "true", "DOUBLE"},
+			{"TANH", "DOUBLE", "org.apache.derby.catalog.SystemProcedures", "TANH(double)",  "true", "DOUBLE"}
 	};
 	
 
+    /**
+     * Index into SYSFUN_FUNCTIONS of the DETERMINISTIC indicator.
+     * Used to determine whether the system function is DETERMINISTIC
+     */
+    private static final int SYSFUN_DETERMINISTIC_INDEX =  4;
+
     /**
      * The index of the first parameter in entries in the SYSFUN_FUNCTIONS
      * table. Used to determine the parameter count (zero to many).
      */
-    private static final int SYSFUN_FIRST_PARAMETER_INDEX =  4;
+    private static final int SYSFUN_FIRST_PARAMETER_INDEX =  5;
 
 	/**
 	 * Runtime definition of the functions from SYSFUN_FUNCTIONS.
@@ -6788,6 +6795,8 @@ public AliasDescriptor getAliasDescriptor(String schemaId, String aliasName, cha
 					TypeDescriptor rt =
 						DataTypeDescriptor.getBuiltInDataTypeDescriptor(details[1]).getCatalogType();
 
+                    boolean isDeterministic = Boolean.valueOf( details[ SYSFUN_DETERMINISTIC_INDEX ] ).booleanValue();
+                    
                     // Determine the number of arguments (could be zero).
                     int paramCount = details.length - SYSFUN_FIRST_PARAMETER_INDEX;
 					TypeDescriptor[] pt = new TypeDescriptor[paramCount];
@@ -6805,7 +6814,7 @@ public AliasDescriptor getAliasDescriptor(String schemaId, String aliasName, cha
 					RoutineAliasInfo ai = new RoutineAliasInfo(details[3],
 							paramCount, paramNames,
 							pt, paramModes, 0,
-							RoutineAliasInfo.PS_JAVA, RoutineAliasInfo.NO_SQL,
+                            RoutineAliasInfo.PS_JAVA, RoutineAliasInfo.NO_SQL, isDeterministic,
 							false, rt);
 
 					// details[2] = class name
@@ -9376,6 +9385,8 @@ protected void createSPSSet(TransactionController tc, boolean net, UUID schemaID
      *                          CONTAINS_SQL
      *                          NO_SQL
      *
+     * @param isDeterministic True if the procedure/function is DETERMINISTIC
+     *
      * @param return_type   null for procedure.  For functions the return type
      *                      of the function.
      *
@@ -9396,6 +9407,7 @@ private final UUID createSystemProcedureOrFunction(
 	int						num_out_param,
 	int						num_result_sets,
     short                   routine_sql_control,
+    boolean               isDeterministic,
     TypeDescriptor          return_type,
     TransactionController   tc,
     String procClass)
@@ -9441,6 +9453,7 @@ private final UUID createSystemProcedureOrFunction(
                                                     //  READS_SQL_DATA
                                                     //  CONTAINS_SQL
                                                     //  NO_SQL
+                isDeterministic,             // whether the procedure/function is DETERMINISTIC
                 true,                               // true - calledOnNullInput
                 return_type);
 
@@ -9488,6 +9501,9 @@ private final UUID createSystemProcedureOrFunction(
      *                          CONTAINS_SQL
      *                          NO_SQL
      *
+     *
+     * @param isDeterministic True if the procedure/function is DETERMINISTIC
+     *
      * @param return_type   null for procedure.  For functions the return type
      *                      of the function.
      *
@@ -9505,13 +9521,14 @@ private final UUID createSystemProcedureOrFunction(
     int                     num_out_param,
     int                     num_result_sets,
     short                   routine_sql_control,
+    boolean               isDeterministic,
     TypeDescriptor          return_type,
     TransactionController   tc)
         throws StandardException
     {
         UUID routine_uuid = createSystemProcedureOrFunction(routine_name,
         schema_uuid, arg_names, arg_types,
-        num_out_param, num_result_sets, routine_sql_control,
+        num_out_param, num_result_sets, routine_sql_control, isDeterministic,
         return_type, tc, "org.apache.derby.catalog.SystemProcedures");
         return routine_uuid;
     }
@@ -9569,6 +9586,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9595,6 +9613,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
 
@@ -9611,6 +9630,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9625,6 +9645,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9639,6 +9660,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9662,6 +9684,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9687,6 +9710,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9707,6 +9731,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9727,6 +9752,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 (TypeDescriptor) null,
                 tc);
 
@@ -9749,6 +9775,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 (TypeDescriptor) null,
                 tc);
 
@@ -9780,6 +9807,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.VARCHAR, Limits.DB2_VARCHAR_MAXWIDTH),
                 tc);
@@ -9804,6 +9832,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 TypeDescriptor.INTEGER,
                 tc);
         }
@@ -9819,6 +9848,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.VARCHAR, Limits.DB2_VARCHAR_MAXWIDTH),
 
@@ -9861,6 +9891,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9883,6 +9914,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9904,6 +9936,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }	
@@ -9941,6 +9974,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
 				RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -9976,6 +10010,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
 				RoutineAliasInfo.READS_SQL_DATA,
+               false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10016,6 +10051,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
 				RoutineAliasInfo.MODIFIES_SQL_DATA,
+               false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10059,6 +10095,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
 				RoutineAliasInfo.MODIFIES_SQL_DATA,
+               false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10093,6 +10130,7 @@ private final void create_SYSCS_procedures(
 				0,
 				0,
 				RoutineAliasInfo.MODIFIES_SQL_DATA,
+               false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10183,6 +10221,7 @@ protected final void create_SYSIBM_procedures(
 				2,
 				0,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10212,6 +10251,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10241,6 +10281,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10270,6 +10311,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10301,6 +10343,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10333,6 +10376,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10364,6 +10408,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10395,6 +10440,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10426,6 +10472,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10462,6 +10509,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10498,6 +10546,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10523,6 +10572,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10557,6 +10607,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10571,6 +10622,7 @@ protected final void create_SYSIBM_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10732,6 +10784,7 @@ void create_10_1_system_procedures(
 				0,
 				0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
 
@@ -10779,6 +10832,7 @@ void create_10_2_system_procedures(
                 0,
                 0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10808,6 +10862,7 @@ void create_10_2_system_procedures(
                 0,
                 0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10838,6 +10893,7 @@ void create_10_2_system_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10870,6 +10926,7 @@ void create_10_2_system_procedures(
 				0,
 				1,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -10904,6 +10961,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 TypeDescriptor.INTEGER,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -10922,6 +10980,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 null,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -10946,6 +11005,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.BIGINT),
                 tc,
@@ -10970,6 +11030,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.BIGINT),
                 tc,
@@ -10989,6 +11050,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.BIGINT),
                 tc,
@@ -11013,6 +11075,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.VARCHAR,
                     LOBStoredProcedure.MAX_RETURN_LENGTH),
@@ -11040,6 +11103,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 null,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -11062,6 +11126,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 null,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -11082,6 +11147,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 TypeDescriptor.INTEGER,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -11100,6 +11166,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 null,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -11124,6 +11191,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.BIGINT),
                 tc,
@@ -11148,6 +11216,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.BIGINT),
                 tc,
@@ -11169,6 +11238,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.BIGINT),
                 tc,
@@ -11193,6 +11263,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 DataTypeDescriptor.getCatalogType(
                     Types.VARBINARY,
                     LOBStoredProcedure.MAX_RETURN_LENGTH),
@@ -11220,6 +11291,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 null,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -11242,6 +11314,7 @@ private void create_10_3_system_procedures_SYSIBM(
                 0,
                 0,
                 RoutineAliasInfo.CONTAINS_SQL,
+                false,
                 null,
                 tc,
                 "org.apache.derby.impl.jdbc.LOBStoredProcedure");
@@ -11281,6 +11354,7 @@ void create_10_5_system_procedures(TransactionController tc)
                 0,
                 0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
 
@@ -11353,6 +11427,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
 				0,
 				0,
 				RoutineAliasInfo.READS_SQL_DATA,
+               false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -11393,6 +11468,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
                 0,
                 0,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -11431,6 +11507,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
                0,
                0,
                RoutineAliasInfo.MODIFIES_SQL_DATA,
+               false,
                (TypeDescriptor) null,
                tc);
         }
@@ -11476,6 +11553,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
                 0,
                 0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -11491,6 +11569,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
                 0,
                 0,
                 RoutineAliasInfo.NO_SQL,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -11508,6 +11587,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
                 0,
                 0,
                 RoutineAliasInfo.MODIFIES_SQL_DATA,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
@@ -11524,6 +11604,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
                 0,
                 0,
                 RoutineAliasInfo.READS_SQL_DATA,
+                false,
                 CATALOG_TYPE_SYSTEM_IDENTIFIER,
                 tc);
         }
@@ -11538,6 +11619,7 @@ void create_10_3_system_procedures_SYSCS_UTIL(
                 0,
                 0,
                 RoutineAliasInfo.NO_SQL,
+                false,
                 (TypeDescriptor) null,
                 tc);
         }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
index 4cc1b736..153ce514 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
@@ -52,6 +52,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class CreateAliasNode extends DDLStatementNode
 {
+    // indexes into routineElements
+    public static final int PARAMETER_ARRAY = 0;
+    public static final int TABLE_NAME = PARAMETER_ARRAY + 1;
+    public static final int DYNAMIC_RESULT_SET_COUNT = TABLE_NAME + 1;
+    public static final int LANGUAGE = DYNAMIC_RESULT_SET_COUNT + 1;
+    public static final int EXTERNAL_NAME = LANGUAGE + 1;
+    public static final int PARAMETER_STYLE = EXTERNAL_NAME + 1;
+    public static final int SQL_CONTROL = PARAMETER_STYLE + 1;
+    public static final int DETERMINISTIC = SQL_CONTROL + 1;
+    public static final int NULL_ON_NULL_INPUT = DETERMINISTIC + 1;
+    public static final int RETURN_TYPE = NULL_ON_NULL_INPUT + 1;
+    public static final int ROUTINE_ELEMENT_COUNT = RETURN_TYPE + 1;
+    
 	private String				javaClassName;
 	private String				methodName;
 	private char				aliasType; 
@@ -106,11 +119,12 @@ public void init(
 				// 4 - String external name (also passed directly to create alias node - ignore
 				// 5 - Integer parameter style 
 				// 6 - Short - SQL control
-				// 7 - Boolean - CALLED ON NULL INPUT (always TRUE for procedures)
-				// 8 - TypeDescriptor - return type (always NULL for procedures)
+				// 7 - Boolean - whether the routine is DETERMINISTIC
+				// 8 - Boolean - CALLED ON NULL INPUT (always TRUE for procedures)
+				// 9 - TypeDescriptor - return type (always NULL for procedures)
 
 				Object[] routineElements = (Object[]) aliasSpecificInfo;
-				Object[] parameters = (Object[]) routineElements[0];
+				Object[] parameters = (Object[]) routineElements[PARAMETER_ARRAY];
 				int paramCount = ((Vector) parameters[0]).size();
 				
 				// Support for Java signatures in Derby was added in 10.1
@@ -162,18 +176,21 @@ public void init(
 					}
 				}
 
-				Integer drso = (Integer) routineElements[2];
+				Integer drso = (Integer) routineElements[DYNAMIC_RESULT_SET_COUNT];
 				int drs = drso == null ? 0 : drso.intValue();
 
 				short sqlAllowed;
-				Short sqlAllowedObject = (Short) routineElements[6];
+				Short sqlAllowedObject = (Short) routineElements[SQL_CONTROL];
 				if (sqlAllowedObject != null)
 					sqlAllowed = sqlAllowedObject.shortValue();
 				else
 					sqlAllowed = (this.aliasType == AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR ?
 					RoutineAliasInfo.MODIFIES_SQL_DATA : RoutineAliasInfo.READS_SQL_DATA);
 
-				Boolean calledOnNullInputO = (Boolean) routineElements[7];
+				Boolean isDeterministicO = (Boolean) routineElements[DETERMINISTIC];
+                boolean isDeterministic = (isDeterministicO == null) ? false : isDeterministicO.booleanValue();
+
+				Boolean calledOnNullInputO = (Boolean) routineElements[NULL_ON_NULL_INPUT];
 				boolean calledOnNullInput;
 				if (calledOnNullInputO == null)
 					calledOnNullInput = true;
@@ -181,8 +198,8 @@ public void init(
 					calledOnNullInput = calledOnNullInputO.booleanValue();
 
 				aliasInfo = new RoutineAliasInfo(this.methodName, paramCount, names, types, modes, drs,
-						((Short) routineElements[5]).shortValue(),	// parameter style
-						sqlAllowed, calledOnNullInput, (TypeDescriptor) routineElements[8]);
+						((Short) routineElements[PARAMETER_STYLE]).shortValue(),	// parameter style
+                        sqlAllowed, isDeterministic, calledOnNullInput, (TypeDescriptor) routineElements[RETURN_TYPE]);
 
 				implicitCreateSchema = true;
 				}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index e69de29b..12b3f6f2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -0,0 +1,174 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+import java.sql.Connection;
+import java.sql.Statement;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.DriverManager;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
+
+import org.apache.derby.catalog.types.RoutineAliasInfo;
+
+/**
+ * <p>
+ * Test generated columns. See DERBY-481.
+ * </p>
+ */
+public class GeneratedColumnsTest extends BaseJDBCTestCase
+{
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // CONSTANTS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // STATE
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // CONSTRUCTOR
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+
+    /**
+     * Create a new instance.
+     */
+
+    public GeneratedColumnsTest(String name)
+    {
+        super(name);
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // JUnit BEHAVIOR
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+
+    /**
+     * Construct top level suite in this JUnit test
+     */
+    public static Test suite()
+    {
+        TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(GeneratedColumnsTest.class);
+
+        return new CleanDatabaseTestSetup( suite );
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // SUCCESSFUL RESOLUTIONS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * <p>
+     * Test that the stored system procedures and functions are non-deterministic. If you want
+     * a particular procedure/function to be deterministic, add some logic here.
+     *
+     * Also test that, by default, user-defined routines are created as NOT DETERMINISTIC.
+     * </p>
+     */
+    public  void    test_001_determinism_of_stored_system_routines()
+        throws Exception
+    {
+        Connection  conn = getConnection();
+
+        //
+        // Create a user-defined function and procedure and verify
+        // that they too are NOT DETERMINISTIC.
+        // 
+        PreparedStatement functionCreate = conn.prepareStatement
+            (
+             "create function f1()\n" +
+             "returns int\n" +
+             "language java\n" +
+             "parameter style java\n" +
+             "no sql\n" +
+             "external name 'foo.bar.wibble'\n"
+             );
+        functionCreate.execute();
+        functionCreate.close();
+
+        PreparedStatement procedureCreate = conn.prepareStatement
+            (
+             "create procedure p1()\n" +
+             "language java\n" +
+             "parameter style java\n" +
+             "modifies sql data\n" +
+             "external name 'foo.bar.wibble'\n"
+             );
+        procedureCreate.execute();
+        procedureCreate.close();
+
+        //
+        // OK, now verify that all routines in the catalogs are NOT DETERMINISTIC 
+        //
+        PreparedStatement   ps = conn.prepareStatement
+            (
+             "select s.schemaname, a.alias, a.aliastype, a.systemalias, a.aliasinfo\n" +
+             "from sys.sysschemas s, sys.sysaliases a\n" +
+             "where s.schemaid = a.schemaid\n" +
+             "order by s.schemaname, a.alias\n"
+             );
+        ResultSet               rs = ps.executeQuery();
+
+        while ( rs.next() )
+        {
+            String    aliasName = rs.getString( 2 );
+            boolean isSystemAlias = rs.getBoolean( 4 );
+
+            RoutineAliasInfo    rai = (RoutineAliasInfo) rs.getObject( 5 );
+
+            assertFalse( aliasName, rai.isDeterministic() );
+        }
+
+        rs.close();
+        ps.close();
+    }
+
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // MINIONS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index d8ccb790..875558ad 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -178,6 +178,7 @@ public static Test suite() {
         suite.addTest(ConstantExpressionTest.suite());
         suite.addTest(OptimizerOverridesTest.suite());
         suite.addTest(PrecedenceTest.suite());
+        suite.addTest(GeneratedColumnsTest.suite());
 
         return suite;
 	}
