diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
index 0c4e9148..eb09967d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
@@ -22,7 +22,8 @@
 
 
 import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
+
+import org.apache.cassandra.utils.FBUtilities;
 
 public class LongType extends AbstractType
 {
@@ -41,9 +42,10 @@ public int compare(byte[] o1, byte[] o2)
             return 1;
         }
 
-        long L1 = ByteBuffer.wrap(o1).getLong();
-        long L2 = ByteBuffer.wrap(o2).getLong();
-        return Long.valueOf(L1).compareTo(Long.valueOf(L2));
+        int diff = o1[0] - o2[0];
+        if (diff != 0)
+            return diff;
+        return FBUtilities.compareByteArrays(o1, o2);
     }
 
     public String getString(byte[] bytes)
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java
index c5227882..4faab4ac 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java
@@ -23,6 +23,8 @@
 
 import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
+import java.util.Arrays;
+import java.util.Random;
 import java.util.UUID;
 
 import org.apache.commons.lang.ArrayUtils;
@@ -68,6 +70,27 @@ public void testUTF8() throws UnsupportedEncodingException
         assert comparator.compare("a".getBytes("UTF-8"), "z".getBytes("UTF-8")) < 0;
     }
 
+    @Test
+    public void testLong()
+    {
+        Random rng = new Random();
+        byte[][] data = new byte[1000][];
+        for (int i = 0; i < data.length; i++)
+        {
+            data[i] = new byte[8];
+            rng.nextBytes(data[i]);
+        }
+
+        Arrays.sort(data, LongType.instance);
+
+        for (int i = 1; i < data.length; i++)
+        {
+            long l0 = ByteBuffer.wrap(data[i - 1]).getLong();
+            long l1 = ByteBuffer.wrap(data[i]).getLong();
+            assert l0 <= l1;
+        }
+    }
+
     @Test
     public void testTimeUUID()
     {
