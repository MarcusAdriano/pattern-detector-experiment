diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java
index 7bbeb6e1..070bb5f0 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java
@@ -149,14 +149,13 @@ public BigIntegerToken getToken(ByteBuffer key)
             Token t; BigInteger tim1 = ti;                                                  // The last token and its value (after loop)
             while (i.hasNext()) {
                 t = (Token)i.next(); ti = ((BigIntegerToken)t).token;                       // The next token and its value
-                float x = new BigDecimal(ti.subtract(tim1)).divide(r).floatValue();         // %age = T(i) - T(i-1) / R
+                float x = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r).floatValue(); // %age = ((T(i) - T(i-1) + R) % R) / R
                 ownerships.put(t, x);                                                       // save (T(i) -> %age)
                 tim1 = ti;                                                                  // -> advance loop
             }
-            // The start token's range extends backward to the last token, which is why both were saved
-            //  above. The simple calculation for this is: T(start) - T(end) + r % r / r.
-            //  (In the 1-case, this produces 0% instead of 100%.)
-            ownerships.put(start, new BigDecimal(((BigIntegerToken)start).token.subtract(ti).add(ri).mod(ri)).divide(r).floatValue());
+            // The start token's range extends backward to the last token, which is why both were saved above.
+            float x = new BigDecimal(((BigIntegerToken)start).token.subtract(ti).add(ri).mod(ri)).divide(r).floatValue();
+            ownerships.put(start, x);
         }
         return ownerships;
     }
