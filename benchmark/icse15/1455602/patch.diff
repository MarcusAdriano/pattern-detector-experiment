diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
index 47ebe7c9..2a5c89f9 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
@@ -186,6 +186,7 @@ public void registerOutParameter(int parameterIndex, int jdbcType, int scale) th
 
     private void registerOutParameterX(int parameterIndex, int jdbcType, int scale) throws SqlException {
         super.checkForValidParameterIndex(parameterIndex);
+        agent_.checkForSupportedDataType( jdbcType );
         checkForValidScale(scale);
         outputRegistered_ = true; // this variable is only used by Batch
         //parameterSetOrRegistered_[parameterIndex - 1] = true;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java
index 0a043749..2fa44ff3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java
@@ -148,47 +148,6 @@ final void restoreContextStack() throws SQLException {
 		return cal;
 	}
 
-    /**
-     * Checks whether a data type is supported for
-     * <code>setObject(int, Object, int)</code> and
-     * <code>setObject(int, Object, int, int)</code>.
-     *
-     * @param dataType the data type to check
-     * @exception SQLException if the type is not supported
-     */
-    public void checkForSupportedDataType(int dataType) throws SQLException {
-
-        // JDBC 4.0 javadoc for setObject() says:
-        //
-        // Throws: (...) SQLFeatureNotSupportedException - if
-        // targetSqlType is a ARRAY, BLOB, CLOB, DATALINK,
-        // JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF,
-        // ROWID, SQLXML or STRUCT data type and the JDBC driver does
-        // not support this data type
-        //
-        // Of these types, we only support BLOB, CLOB and
-        // (sort of) JAVA_OBJECT.
-
-        switch (dataType) {
-        case Types.ARRAY:
-        case Types.DATALINK:
-        case Types.DISTINCT:
-        case JDBC40Translation.NCHAR:
-        case JDBC40Translation.NCLOB:
-        case JDBC40Translation.NVARCHAR:
-        case JDBC40Translation.LONGNVARCHAR:
-        case Types.NULL:
-        case Types.OTHER:
-        case Types.REF:
-        case JDBC40Translation.REF_CURSOR:
-        case JDBC40Translation.ROWID:
-        case JDBC40Translation.SQLXML:
-        case Types.STRUCT:
-            throw newSQLException(SQLState.DATA_TYPE_NOT_SUPPORTED,
-                                  Util.typeName(dataType));
-        }
-    }
-
 	SQLException newSQLException(String messageId) {
 		return localConn.newSQLException(messageId);
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement42.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement42.java
index 8af27636..1c076d54 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement42.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement42.java
@@ -40,42 +40,42 @@ public  void registerOutParameter( int parameterIndex, SQLType sqlType )
         throws SQLException
     {
         checkStatus();
-        registerOutParameter( parameterIndex, Util42.getTypeAsInt( this, sqlType ) );
+        registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ) );
     }
     
     public  void registerOutParameter( int parameterIndex, SQLType sqlType, int scale )
         throws SQLException
     {
         checkStatus();
-        registerOutParameter( parameterIndex, Util42.getTypeAsInt( this, sqlType ), scale );
+        registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ), scale );
     }
     
     public  void registerOutParameter( int parameterIndex, SQLType sqlType, String typeName )
         throws SQLException
     {
         checkStatus();
-        registerOutParameter( parameterIndex, Util42.getTypeAsInt( this, sqlType ), typeName );
+        registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ), typeName );
     }
     
     public  void registerOutParameter( String parameterName, SQLType sqlType )
         throws SQLException
     {
         checkStatus();
-        registerOutParameter( parameterName, Util42.getTypeAsInt( this, sqlType ) );
+        registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ) );
     }
     
     public  void registerOutParameter( String parameterName, SQLType sqlType, int scale )
         throws SQLException
     {
         checkStatus();
-        registerOutParameter( parameterName, Util42.getTypeAsInt( this, sqlType ), scale );
+        registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ), scale );
     }
     
     public  void registerOutParameter( String parameterName,  SQLType sqlType, String typeName )
         throws SQLException
     {
         checkStatus();
-        registerOutParameter( parameterName, Util42.getTypeAsInt( this, sqlType ), typeName );
+        registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ), typeName );
     }
 
     public  void setObject
@@ -83,7 +83,7 @@ public  void registerOutParameter( String parameterName,  SQLType sqlType, Strin
         throws SQLException
     {
         checkStatus();
-        setObject( parameterIndex, x, Util42.getTypeAsInt( this, targetSqlType ) );
+        setObject( parameterIndex, x, Util42.getTypeAsInt( targetSqlType ) );
     }
     
     public void setObject
@@ -93,21 +93,21 @@ public  void registerOutParameter( String parameterName,  SQLType sqlType, Strin
          )  throws SQLException
     {
         checkStatus();
-        setObject( parameterIndex, x, Util42.getTypeAsInt( this, targetSqlType ), scaleOrLength );
+        setObject( parameterIndex, x, Util42.getTypeAsInt( targetSqlType ), scaleOrLength );
     }
 
     public  void setObject( String parameterName, Object x, SQLType sqlType )
         throws SQLException
     {
         checkStatus();
-        setObject( parameterName, x, Util42.getTypeAsInt( this, sqlType ) );
+        setObject( parameterName, x, Util42.getTypeAsInt( sqlType ) );
     }
     
     public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )
         throws SQLException
     {
         checkStatus();
-        setObject( parameterName, x, Util42.getTypeAsInt( this, sqlType ), scaleOrLength );
+        setObject( parameterName, x, Util42.getTypeAsInt( sqlType ), scaleOrLength );
     }
     
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index 5b0975ce..5ef5bf98 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -335,7 +335,7 @@ public final long executeLargeUpdate() throws SQLException {
      */
     public void setNull(int parameterIndex, int sqlType) throws SQLException {
 
-		checkForSupportedDataType(sqlType);
+		Util.checkForSupportedDataType(sqlType);
 		checkStatus();
 
 		int jdbcTypeId = getParameterJDBCType(parameterIndex);
@@ -1196,7 +1196,7 @@ public final void setObject(int parameterIndex, Object x, int targetSqlType, int
 			return;
 		}
 
-		checkForSupportedDataType(targetSqlType);
+		Util.checkForSupportedDataType(targetSqlType);
 
 		int paramJDBCType = getParameterJDBCType(parameterIndex);
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement42.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement42.java
index fec8690d..734aefe7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement42.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement42.java
@@ -54,7 +54,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         setObject
             (
              parameterIndex, x,
-             Util42.getTypeAsInt( this, targetSqlType )
+             Util42.getTypeAsInt( targetSqlType )
              );
     }
     
@@ -68,7 +68,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         setObject
             (
              parameterIndex, x,
-             Util42.getTypeAsInt( this, targetSqlType ),
+             Util42.getTypeAsInt( targetSqlType ),
              scaleOrLength
              );
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java
index 118fabbe..d36a2520 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java
@@ -51,7 +51,7 @@ public EmbedResultSet42(org.apache.derby.impl.jdbc.EmbedConnection conn,
         throws SQLException
     {
         checkIfClosed("updateObject");
-        updateObject( columnIndex, x, Util42.getTypeAsInt( this, targetSqlType ) );
+        updateObject( columnIndex, x, Util42.getTypeAsInt( targetSqlType ) );
     }
 
     public void updateObject
@@ -59,7 +59,7 @@ public EmbedResultSet42(org.apache.derby.impl.jdbc.EmbedConnection conn,
         throws SQLException
     {
         checkIfClosed("updateObject");
-        updateObject( columnIndex, x, Util42.getTypeAsInt( this, targetSqlType ) );
+        updateObject( columnIndex, x, Util42.getTypeAsInt( targetSqlType ) );
         adjustScale( columnIndex, scaleOrLength );
     }
 
@@ -68,7 +68,7 @@ public EmbedResultSet42(org.apache.derby.impl.jdbc.EmbedConnection conn,
         throws SQLException
     {
         checkIfClosed("updateObject");
-        updateObject( columnName, x, Util42.getTypeAsInt( this, targetSqlType ) );
+        updateObject( columnName, x, Util42.getTypeAsInt( targetSqlType ) );
     }
 
     public void updateObject
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
index 9f3bd662..9cf1bf2e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
@@ -207,6 +207,71 @@ static void THROWASSERT(EmbedConnection conn, String msg) throws SQLException {
 		}
 	}
 
+    /**
+     * Checks whether a data type is supported and raises a SQLException
+     * if it isn't.
+     */
+    public static   void checkForSupportedDataType(int dataType) throws SQLException
+    {
+        if ( !isSupportedType( dataType ) )
+        {
+            throw generateCsSQLException( SQLState.DATA_TYPE_NOT_SUPPORTED, typeName( dataType ) );
+        }
+    }
+
+    /**
+     * Checks whether a data type is supported and raises a StandardException
+     * if it isn't.
+     */
+    public static   void checkSupportedRaiseStandard(int dataType) throws StandardException
+    {
+        if ( !isSupportedType( dataType ) )
+        {
+            throw StandardException.newException( SQLState.DATA_TYPE_NOT_SUPPORTED, typeName( dataType ) );
+        }
+    }
+
+    /**
+     * Returns false if a data type is not supported for:
+     * <code>setObject(int, Object, int)</code> and
+     * <code>setObject(int, Object, int, int)</code>.
+     *
+     * @param dataType the data type to check
+     */
+    private static   boolean isSupportedType(int dataType)
+    {
+        // JDBC 4.0 javadoc for setObject() says:
+        //
+        // Throws: (...) SQLFeatureNotSupportedException - if
+        // targetSqlType is a ARRAY, BLOB, CLOB, DATALINK,
+        // JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF,
+        // ROWID, SQLXML or STRUCT data type and the JDBC driver does
+        // not support this data type
+        //
+        // Of these types, we only support BLOB, CLOB and
+        // (sort of) JAVA_OBJECT.
+
+        switch (dataType) {
+        case Types.ARRAY:
+        case Types.DATALINK:
+        case Types.DISTINCT:
+        case JDBC40Translation.NCHAR:
+        case JDBC40Translation.NCLOB:
+        case JDBC40Translation.NVARCHAR:
+        case JDBC40Translation.LONGNVARCHAR:
+        case Types.NULL:
+        case Types.OTHER:
+        case Types.REF:
+        case JDBC40Translation.REF_CURSOR:
+        case JDBC40Translation.ROWID:
+        case JDBC40Translation.SQLXML:
+        case Types.STRUCT:
+            return false;
+        }
+
+        return true;
+    }
+
 	/*
 	** There is at least one static method for each message id.
 	** Its parameters are specific to its message.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java
index f957b69c..5e328514 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java
@@ -40,7 +40,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * Get the int type id from java.sql.Types which corresponds to the SQLType.
      * </p>
      */
-    public  static  int getTypeAsInt( ConnectionChild connChild, SQLType sqlType )
+    public  static  int getTypeAsInt( SQLType sqlType )
         throws SQLException
     {
         // must correspond to something in java.sql.Types
@@ -48,13 +48,12 @@ public  static  int getTypeAsInt( ConnectionChild connChild, SQLType sqlType )
         {
             int     jdbcType = ((JDBCType) sqlType).getVendorTypeNumber();
             
-            connChild.checkForSupportedDataType( jdbcType );
+            Util.checkForSupportedDataType( jdbcType );
         
             return jdbcType;
         }
 
-        throw connChild.newSQLException
-            ( SQLState.DATA_TYPE_NOT_SUPPORTED, sqlType );
+        throw Util.generateCsSQLException( SQLState.DATA_TYPE_NOT_SUPPORTED, sqlType );
     }
     
 }    
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java
index 4faaa51b..76aad3fd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.SQLBit;
 import org.apache.derby.iapi.types.SQLBlob;
 import org.apache.derby.iapi.types.SQLChar;
+import org.apache.derby.impl.jdbc.Util;
 
 import java.io.InputStream;
 import java.sql.Types;
@@ -341,16 +342,17 @@ public ParameterValueSet getClone()
 	 *
 	 * @param parameterIndex	The ordinal parameterIndex of a parameter to set
 	 *			to the given value.
-	 * @param sqlType	A type from java.sql.Types
+	 * @param jdbcType	A type from java.sql.Types
 	 * @param scale		the scale to use.  -1 means ignore scale
 	 *
 	 * @exception StandardException on error
 	 */
-	public void registerOutParameter(int parameterIndex, int sqlType, int scale)
+	public void registerOutParameter(int parameterIndex, int jdbcType, int scale)
 		throws StandardException
 	{
-		checkPosition(parameterIndex);
-		parms[parameterIndex].setOutParameter(sqlType, scale);
+		checkPosition( parameterIndex );
+        Util.checkSupportedRaiseStandard( jdbcType );
+		parms[ parameterIndex ].setOutParameter( jdbcType, scale );
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java
index 67a962c5..ab96fe15 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java
@@ -34,6 +34,7 @@
 import java.sql.Statement;
 import java.sql.Time;
 import java.sql.Timestamp;
+import java.sql.Types;
 
 import junit.framework.*;
 
@@ -80,6 +81,23 @@
         JDBCType.STRUCT,
     };
 
+    private static  final   int[]  ILLEGAL_SQL_TYPES = new int[]
+    {
+        Types.ARRAY,
+        Types.DATALINK,
+        Types.DISTINCT,
+        Types.LONGNVARCHAR,
+        Types.NCHAR,
+        Types.NCLOB,
+        Types.NVARCHAR,
+        Types.OTHER,
+        Types.REF,
+        Types.REF_CURSOR,
+        Types.ROWID,
+        Types.SQLXML,
+        Types.STRUCT,
+    };
+
     //////////////////////////////////////////////////////////
     //
     // STATE
@@ -551,6 +569,19 @@ private static void    vetProc( Connection conn ) throws Exception
             fail( "Expected unimplemented feature." );
         }
         catch (SQLException se) { assertUnimplemented( se ); }
+ 
+        // Make sure that the pre-JDBC4.2 overloads throw the correct exception too
+        valueIdx = 1;
+        param = 1;
+        cs.setInt( param++, valueIdx );
+        for ( int i = 0; i < ILLEGAL_SQL_TYPES.length; i++ )
+        {
+            int     type = ILLEGAL_SQL_TYPES[ i ];
+            try {
+                cs.registerOutParameter( param++, type, 0 );
+                fail( "Should not have been able to register parameter type " + type );
+            } catch (SQLException se) { assertUnimplemented( se ); }
+        }
     }
     private  static void    vetCS( CallableStatement cs, int valueIdx )
         throws Exception
