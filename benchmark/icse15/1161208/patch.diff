diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
index 2023a1a9..29a82c99 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
@@ -93,12 +93,6 @@ public BootLockTest(String name) {
      */
     public static Test suite() {
         TestSuite suite = new TestSuite("BootLockTest");
-
-        if (BaseTestCase.isJ9Platform()) {
-            // forking currently not working, cf. DERBY-4179.
-            return suite;
-        }
-
         suite.addTest(decorateTest());
         return suite;
     }
@@ -113,7 +107,8 @@ private static Test decorateTest() {
 
         Test test = new TestSuite(BootLockTest.class);
 
-        if (JDBC.vmSupportsJSR169()) {
+        if (JDBC.vmSupportsJSR169() && !isJ9Platform()) {
+            // PhoneME requires forceDatabaseLock
             Properties props = new Properties();
             props.setProperty("derby.database.forceDatabaseLock", "true");
             test = new SystemPropertyTestSetup(test, props, true);
@@ -140,7 +135,8 @@ public void testBootLock() throws Exception {
             Connection c = getConnection();
             fail("Dual boot not detected: check BootLockMinion.log");
         } catch (SQLException e) {
-            if (JDBC.vmSupportsJSR169()) {
+            if (JDBC.vmSupportsJSR169() && !isJ9Platform()) {
+                // For PhoneME force database lock required
                 assertSQLState(
                         "Dual boot not detected: check BootLockMinion.log",
                         DATA_MULTIPLE_JBMS_FORCE_LOCK,
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryTest.java
index 7d45c87d..d497f19d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/RecoveryTest.java
@@ -51,9 +51,6 @@ public static Test suite()
     {
         // Add the test case into the test suite
         TestSuite suite = new TestSuite("RecoveryTest");
-        //DERBY-4647 exec does not work on weme
-        if (BaseTestCase.isJ9Platform())
-            return suite;
         suite.addTest(decorateTest());
         return suite;
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 08c7be5e..c4c942c9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -46,6 +46,7 @@
 import java.security.PrivilegedExceptionAction;
 
 import java.security.PrivilegedActionException;
+import java.util.ArrayList;
 
 
 /**
@@ -537,15 +538,16 @@ public static void assertExecJavaCmdAsExpected(String[] expectedString,
 	 * @throws IOException
 	 */
 	public static Process execJavaCmd(String[] cmd) throws IOException {
-	    int totalSize = 3 + cmd.length;
-	    String[] tcmd = new String[totalSize];
-	    tcmd[0] = getJavaExecutableName();
-	    tcmd[1] = "-classpath";
-	    tcmd[2] = BaseTestCase.getSystemProperty("java.class.path");
-
-	    System.arraycopy(cmd, 0, tcmd, 3, cmd.length);
-
-	    final String[] command = tcmd;
+	    ArrayList cmdlist = new ArrayList();
+	    cmdlist.add(getJavaExecutableName());
+	    if (isJ9Platform())
+	        cmdlist.add("-jcl:foun11");
+	    cmdlist.add("-classpath");
+	    cmdlist.add(getSystemProperty("java.class.path"));
+	    for (int i =0; i < cmd.length;i++) {
+	        cmdlist.add(cmd[i]);
+	    }
+	    final String[] command = (String[]) cmdlist.toArray(cmd);
 	    println("execute java command:");
 	    for (int i = 0; i < command.length; i++) {
 	        println("command[" + i + "]" + command[i]);
