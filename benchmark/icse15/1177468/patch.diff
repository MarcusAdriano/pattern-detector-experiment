diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
index 7860692c..22399979 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/iapi/services/info/JVMInfo.java
@@ -56,6 +56,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public static final int J2SE_142 = 5;
 	public static final int J2SE_15 = 6; // aka J2SE 5.0
 	public static final int J2SE_16 = 7; // Java SE 6, not J2SE
+	public static final int J2SE_17 = 8;
 
 	public static final boolean J2ME;
 
@@ -131,6 +132,10 @@ else if (javaVersion.equals("1.6"))
 			{
 				id = J2SE_16;
 			}
+			else if (javaVersion.equals("1.7")) 
+			{
+			    id = J2SE_17;
+			}
 			else
 			{
 				// aussme our lowest support unless the java spec
@@ -161,6 +166,8 @@ private static boolean vmCheck(String vmVersion, String id)
 
 	/**
 		Return Derby's understanding of the virtual machine's environment.
+		Any changes here must also be made in sysinfo.Main() derbyVMLevel
+		due to the fix for DERBY-1046.
 	*/
 	public static String derbyVMLevel()
 	{
@@ -170,6 +177,7 @@ public static String derbyVMLevel()
 		case J2SE_142: return "J2SE 1.4.2 - JDBC 3.0";
 		case J2SE_15: return "J2SE 5.0 - JDBC 3.0";
 		case J2SE_16: return "Java SE 6 - JDBC 4.0";
+		case J2SE_17: return "Java SE 7 - JDBC 4.0";
 		default: return "?-?";
 		}
 	}
diff --git a/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java b/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
index 92321059..d167a37a 100644
--- a/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
+++ b/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/ij/xaHelper.java
@@ -510,11 +510,11 @@ private XADataSource getXADataSource() throws Exception
 		// if we new it directly, then it will the tools.jar file to bloat.
 		try
 		{
+		    
 			if (isJCC)
 				return (XADataSource) 
 					(Class.forName("com.ibm.db2.jcc.DB2XADataSource").newInstance());
 			else if (isNetClient){
-                            if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
                                 //running under jdk1.6 or higher 
                                 // try instantiating EmbeddedXADataSource40
                                 try {
@@ -524,15 +524,16 @@ else if (isNetClient){
                                 }
                                 catch (ClassNotFoundException e) {
                                     //probably it was not compiled with jdbc4.0
-                                    //support go ahead with EmbeddedXADataSource
+                    //support go ahead with ClientXADataSource
                                 }
+                catch (UnsupportedClassVersionError ue) { 
+                    // ClientXADataSource
                             }
                             return (XADataSource) (Class.forName(
                                     "org.apache.derby.jdbc.ClientXADataSource"
                                     ).newInstance());
                         }
 			else {
-                            if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
                                 //running under jdk1.6 or higher 
                                 // try instantiating EmbeddedXADataSource40
                                 try {
@@ -544,6 +545,9 @@ else if (isNetClient){
                                     //probably it was not compiled with jdbc4.0
                                     //support go ahead with EmbeddedXADataSource
                                 }
+                catch (UnsupportedClassVersionError ue) {
+                    // not jdk 16 or higher. Go ahead with
+                    // EmbeddedXADataSource
                             }
                             return (XADataSource)(Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource").newInstance());
                         }
diff --git a/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java b/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
index bbc29a58..03c041a6 100644
--- a/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
+++ b/db/derby/code/branches/10.8/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
@@ -220,7 +220,7 @@ private static void pause () {
 
   private static void reportDerby (java.io.PrintWriter localAW) {
 
-	  localAW.println("JRE - JDBC: " + org.apache.derby.iapi.services.info.JVMInfo.derbyVMLevel());
+	  localAW.println("JRE - JDBC: " + derbyVMLevel());
 
 	  String classpath = null;
 
@@ -261,7 +261,7 @@ public Object run()
 
   } // end of reportDerby
 
-  /**
+/**
     Writes out the relevant info about the Java environment to
     the specified AppStreamWriter.
 
@@ -1253,5 +1253,62 @@ private static String formatURL(URL loc)
         return result;
     }
 
+    /**
+     * Return VM and JDBC version for sysinfo This has to be in this class and
+     * NOT use org.apache.derby.iapi.services.info. ! Some code is repeated here
+     * to avoid JVMInfo being in multiple jars DERBY-1046 DERBY-5431. For now
+     * changes made here probably also be made in JVMInfo.
+     * 
+     * @return Derby's understanding of the virtual machine's environment.
+     */
+    private static String derbyVMLevel() {
+
+        // For sysinfo assuming java.specification.version is set because it
+        // was mandatory as of 1.4.2. This method is not as extensive as the
+        // initialization in JVMInfo and makes such assumptions. If any
+        // exception
+        // occurs we skip this line of sysinfo.
+        try {
+            String javaVersion =
+                System.getProperty("java.specification.version", "1.4");
+            String javaSpec =
+                System.getProperty("java.specification.name", "-");
+
+            boolean isJ2ME = javaSpec.startsWith("J2ME") || // recognize IBM
+            // WCTME
+            javaSpec.startsWith("CDC") || // Oracle Java ME Embedded
+            // Client
+            (
+                    (javaSpec.indexOf("Profile") > -1) && // recognize phoneME
+                    (javaSpec.indexOf("Specification") > -1)
+            );
+            
+            if (isJ2ME) {
+                return "J2ME - JDBC for CDC/FP 1.1";
+            }
+            else if (javaVersion.equals("1.4")) {
+                // 1.4.2 is the minimum we support so assume that
+                // if it is not J2ME it is 1.4.2
+                return "J2SE 1.4.2 - JDBC 3.0";
+            }
+            else if (javaVersion.equals("1.5")) {
+                return "J2SE 5.0 - JDBC 3.0";
+            }
+            else if (javaVersion.equals("1.6")) {
+                return "Java SE 6 - JDBC 4.0";
+            }
+            else if (javaVersion.equals("1.7")) {
+                // We don't have full JDBC 4.1 support yet, so still print JDBC
+                // 4.0
+                return "Java SE 7 - JDBC 4.0";
+            }
+            else
+                return "?-?";
+        } catch (Exception e) {
+            return "?-?: " + e.getMessage();
+        }
+    }
+
+
 } // end of class Main
 
