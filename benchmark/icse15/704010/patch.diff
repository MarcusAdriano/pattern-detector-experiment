diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBFile.java
index 3852b10e..38daf4f2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBFile.java
@@ -32,7 +32,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * in encrypted for without having to change code.
  */
 class LOBFile {
+    /** The temporary file where the contents of the LOB should be stored. */
+    private final StorageFile storageFile;
+
+    /** An object giving random access to {@link #storageFile}. */
     private final StorageRandomAccessFile randomAccessFile;
+
     /**
      * Constructs LOBFile.
      *
@@ -41,9 +46,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * cannot be opened
      */
     LOBFile(StorageFile lobFile) throws FileNotFoundException {
+        storageFile = lobFile;
         randomAccessFile = lobFile.getRandomAccessFile("rw");
     }
 
+    /**
+     * Get the {@code StorageFile} which represents the file where the
+     * contents of the LOB are stored.
+     * @return a {@code StorageFile} instance
+     */
+    StorageFile getStorageFile() {
+        return storageFile;
+    }
+
     /**
      * Returns length of the file.
      * @return length of the file
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
index b3b21256..5a1ca213 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
@@ -55,7 +55,6 @@ Licensed to the Apache Software Foundation (ASF) under one
 
 class LOBStreamControl {
     private LOBFile tmpFile;
-    private StorageFile lobFile;
     private byte [] dataBytes = new byte [0];
     private boolean isBytes = true;
     private final int bufferSize;
@@ -97,7 +96,7 @@ public Object run() throws IOException, StandardException {
                     DataFactory df =  (DataFactory) Monitor.findServiceModule(
                             monitor, DataFactory.MODULE);
                     //create a temporary file
-                    lobFile =
+                    StorageFile lobFile =
                         df.getStorageFactory().createTemporaryFile("lob", null);
                     if (df.databaseEncrypted()) {
                         tmpFile = new EncryptedLOBFile (lobFile, df);
@@ -352,8 +351,7 @@ synchronized void truncate(long size)
                 dataBytes = new byte [(int) size];
                 read(dataBytes, 0, dataBytes.length, 0);
                 isBytes = true;
-                tmpFile.close();
-                conn.removeLobFile(tmpFile);
+                releaseTempFile(tmpFile);
                 tmpFile = null;
             } else {
                 tmpFile.setLength(size);
@@ -436,13 +434,25 @@ public Object run() throws IOException {
     void free() throws IOException {
         dataBytes = null;
         if (tmpFile != null) {
-            tmpFile.close();
-            deleteFile(lobFile);
-            conn.removeLobFile(tmpFile);
+            releaseTempFile(tmpFile);
             tmpFile = null;
         }
     }
     
+    /**
+     * Close and release all resources held by a temporary file. The file will
+     * also be deleted from the file system and removed from the list of
+     * {@code LOBFile}s in {@code EmbedConnection}.
+     *
+     * @param file the temporary file
+     * @throws IOException if the file cannot be closed or deleted
+     */
+    private void releaseTempFile(LOBFile file) throws IOException {
+        file.close();
+        conn.removeLobFile(file);
+        deleteFile(file.getStorageFile());
+    }
+    
     /**
      * Replaces a block of bytes in the middle of the LOB with a another block
      * of bytes, which may be of a different size.
@@ -486,7 +496,6 @@ synchronized long replaceBytes (byte [] buf, long stPos, long endPos)
             
             byte tmp [] = new byte [0];
             LOBFile oldFile = tmpFile;
-            StorageFile oldStoreFile = lobFile;
             init (tmp, 0);
             byte [] tmpByte = new byte [1024];
             long sz = stPos;
@@ -510,9 +519,7 @@ synchronized long replaceBytes (byte [] buf, long stPos, long endPos)
                     tmpFile.write (tmpByte, 0, rdLen);
                 }while (true);
             }            
-            oldFile.close();
-            conn.removeLobFile(oldFile);
-            deleteFile(oldStoreFile);
+            releaseTempFile(oldFile);
         }
         updateCount++;
         return stPos + buf.length;
