diff --git a/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Agent.java b/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Agent.java
index d125011f..a3f0780b 100644
--- a/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Agent.java
+++ b/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/Agent.java
@@ -267,11 +267,9 @@ public final void endBatchedReadChain(int[] updateCounts, SqlException accumulat
             }
         }
         if (accumulatedExceptions != null) {
-            BatchUpdateException bue = new BatchUpdateException(logWriter_,
+            throw new BatchUpdateException(logWriter_,
                 new ClientMessageId(SQLState.BATCH_NON_ATOMIC_FAILURE),
-                updateCounts);
-            bue.setNextException(accumulatedExceptions.getSQLException());
-            throw bue;
+                null, updateCounts, accumulatedExceptions);
         }
     }
 }
diff --git a/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/BatchUpdateException.java b/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/BatchUpdateException.java
index 76e8a0c1..3b21b261 100644
--- a/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/BatchUpdateException.java
+++ b/db/derby/code/branches/10.5/java/client/org/apache/derby/client/am/BatchUpdateException.java
@@ -37,7 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         SqlException.getMessageUtil();
 
     public BatchUpdateException(LogWriter logWriter, ClientMessageId msgid,
-        Object[] args, int[] updateCounts)
+        Object[] args, int[] updateCounts, SqlException cause)
     {
         super(
             msgutil_.getCompleteMessage(
@@ -50,10 +50,20 @@ public BatchUpdateException(LogWriter logWriter, ClientMessageId msgid,
         if (logWriter != null) {
             logWriter.traceDiagnosable(this);
         }
+
+        if (cause != null) {
+            initCause(cause);
+            setNextException(cause.getSQLException());
+        }
     }
     
     // Syntactic sugar constructors to make it easier to create
     // a BatchUpdateException with substitution parameters
+    public BatchUpdateException(LogWriter logWriter, ClientMessageId msgid,
+        Object[] args, int[] updateCounts) {
+        this(logWriter, msgid, args, updateCounts, null);
+    }
+
     public BatchUpdateException(LogWriter logWriter, ClientMessageId msgid,
         int[] updateCounts)
     {
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java
index 275f8318..601b35f0 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java
@@ -22,6 +22,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
+import java.io.PrintWriter;
+import java.io.StringWriter;
 import java.sql.BatchUpdateException;
 import java.sql.CallableStatement;
 import java.sql.Connection;
@@ -1488,4 +1490,35 @@ else if (usingDerbyNetClient())
         conn2.rollback();
         conn2.close();
     }
+
+    /**
+     * Test that the underlying exception is included in the output when we
+     * call printStackTrace() on a BatchUpdateException. Earlier, with the
+     * client driver, the underlying cause of a BatchUpdateException could not
+     * be seen without calling getNextException().
+     */
+    public void testUnderlyingExceptionIsVisible() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.addBatch("create table t(x int unique not null)");
+        for (int i = 0; i < 3; i++) {
+            s.addBatch("insert into t values 1");
+        }
+
+        BatchUpdateException bue = null;
+        try {
+            s.executeBatch();
+        } catch (BatchUpdateException e) {
+            bue = e;
+        }
+        assertNotNull("Did not get duplicate key exception", bue);
+
+        StringWriter w = new StringWriter();
+        bue.printStackTrace(new PrintWriter(w, true));
+
+        String stackTrace = w.toString();
+        if (stackTrace.indexOf("duplicate key") == -1) {
+            fail("Could not see 'duplicate key' in printStackTrace()", bue);
+        }
+    }
 }
