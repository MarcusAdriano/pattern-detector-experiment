diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cache/FreeableMemory.java b/cassandra/trunk/src/java/org/apache/cassandra/cache/FreeableMemory.java
index d6620755..a97fafc4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cache/FreeableMemory.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cache/FreeableMemory.java
@@ -22,19 +22,40 @@
 
 
 import java.io.IOException;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import com.sun.jna.Memory;
 
 public class FreeableMemory extends Memory
 {
-	protected volatile boolean valid = true;
+    AtomicInteger references = new AtomicInteger(0);
 	
     public FreeableMemory(long size)
     {
         super(size);
     }
 
-    public void free()
+    /** @return true if we succeed in referencing before the reference count reaches zero */
+    public boolean reference()
+    {
+        while (true)
+        {
+            int n = references.get();
+            if (n <= 0)
+                return false;
+            if (references.compareAndSet(n, n + 1))
+                return true;
+        }
+    }
+
+    /** decrement reference count.  if count reaches zero, the object is freed. */
+    public void unreference()
+    {
+        if (references.decrementAndGet() == 0)
+            free();
+    }
+
+    private void free()
     {
         assert peer != 0;
         super.finalize(); // calls free and sets peer to zero
@@ -46,8 +67,8 @@ public void free()
     @Override
     protected void finalize()
     {
-        if (peer != 0)
-            super.finalize();
+        assert references.get() == 0;
+        assert peer == 0;
     }
     
     public byte getValidByte(long offset)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cache/SerializingCache.java b/cassandra/trunk/src/java/org/apache/cassandra/cache/SerializingCache.java
index a5054807..33d88193 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cache/SerializingCache.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cache/SerializingCache.java
@@ -55,7 +55,7 @@ public SerializingCache(int capacity, ICompactSerializer3<V> serializer, String
         {
             public void onEviction(K k, FreeableMemory mem)
             {
-                mem.free();
+                mem.unreference();
             }
         };
         this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()
@@ -137,8 +137,17 @@ public V get(Object key)
         FreeableMemory mem = map.get(key);
         if (mem == null)
             return null;
+        if (!mem.reference())
+            return null;
+        try
+        {
         return deserialize(mem);
     }
+        finally
+        {
+            mem.unreference();
+        }
+    }
 
     public void put(K key, V value)
     {
@@ -146,16 +155,17 @@ public void put(K key, V value)
         if (mem == null)
             return; // out of memory.  never mind.
 
+        mem.reference();
         FreeableMemory old = map.put(key, mem);
         if (old != null)
-            old.free();
+            old.unreference();
     }
 
     public void remove(K key)
     {
         FreeableMemory mem = map.remove(key);
         if (mem != null)
-            mem.free();
+            mem.unreference();
     }
 
     public Set<K> keySet()
