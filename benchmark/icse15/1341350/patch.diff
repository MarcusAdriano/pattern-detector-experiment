diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 53bef531..5c8a7a3e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -154,7 +154,7 @@ multiple threads and sucks data from the stream (returned from
       This constructor should only be called by EmbedResultSet.getBlob
     */
     protected EmbedBlob(DataValueDescriptor dvd, EmbedConnection con)
-        throws StandardException
+        throws StandardException, SQLException
     {
         super(con);
         // if the underlying column is null, ResultSet.getBlob will return null,
@@ -189,8 +189,7 @@ This is the case for small Blobs (less than 32 KB).
                 control = new LOBStreamControl (
                             getEmbedConnection(), dvdBytes);
             } catch (IOException e) {
-                throw StandardException.newException (
-                                        SQLState.SET_STREAM_FAILURE, e);
+                throw Util.setStreamFailure(e);
             }
         }
         //add entry in connection so it can be cleared 
@@ -210,7 +209,7 @@ This is the case for small Blobs (less than 32 KB).
      *      data to temporary storage fails
      */
     private int handleStreamValue(InputStream dvdStream, EmbedConnection con)
-            throws StandardException {
+            throws StandardException, SQLException {
         int offset = 0;
         // b) Resetable stream
         //    In this case the stream is coming from the Derby store.
@@ -283,8 +282,7 @@ implementing the getStream() method for dvd.getStream(), does not
                 }
                 tmpStream.close();
             } catch (IOException ioe) {
-                throw StandardException.newException (
-                                        SQLState.SET_STREAM_FAILURE, ioe);
+                throw Util.setStreamFailure(ioe);
             }
         }
         return offset;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index 35b84a04..3f7d5051 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -102,7 +102,7 @@ multiple threads and sucks data from the stream (returned from
      * @throws StandardException
      */
     protected EmbedClob(EmbedConnection con, StringDataValue dvd)
-        throws StandardException
+        throws StandardException, SQLException
     {
         super(con);
         // if the underlying column is null, ResultSet.getClob will return null,
@@ -144,12 +144,8 @@ the class implementing the getStream() method for dvd.getStream(),
                 clob = new TemporaryClob(dvd.getString(),
                         this);
             }
-            catch (SQLException sqle) {
-                throw StandardException.newException (sqle.getSQLState(), sqle);
-            }
             catch (IOException e) {
-                throw StandardException.newException (
-                                        SQLState.SET_STREAM_FAILURE, e);
+                throw Util.setStreamFailure(e);
             }
         }
         con.addLOBReference (this);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java
index 2c06c80c..0d4a8453 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java
@@ -179,7 +179,7 @@ public synchronized InputStream getRawByteStream()
      * @param conChild connection object used to obtain synchronization object
      */
     TemporaryClob (String data, ConnectionChild conChild)
-                          throws IOException, SQLException, StandardException {
+                          throws IOException, StandardException {
         if (conChild == null) {
             throw new NullPointerException("conChild cannot be <null>");
         }
