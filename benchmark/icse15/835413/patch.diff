diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
index fe94364d..61dbbdc6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
@@ -171,7 +171,7 @@ public static boolean isBootstrapped()
             table = Table.open(Table.SYSTEM_TABLE);
             QueryFilter filter = new NamesQueryFilter(BOOTSTRAP_KEY, new QueryPath(STATUS_CF), BOOTSTRAP);
             ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(filter);
-            return cf != null;
+            return cf != null && cf.getColumn(BOOTSTRAP).value()[0] == 1;
         }
         catch (IOException e)
         {
@@ -179,10 +179,10 @@ public static boolean isBootstrapped()
         }
     }
 
-    public static void setBootstrapped()
+    public static void setBootstrapped(boolean isBootstrapped)
     {
         ColumnFamily cf = ColumnFamily.create(Table.SYSTEM_TABLE, STATUS_CF);
-        cf.addColumn(new Column(BOOTSTRAP, new byte[] {1}, System.currentTimeMillis()));
+        cf.addColumn(new Column(BOOTSTRAP, new byte[] { (byte) (isBootstrapped ? 1 : 0) }, System.currentTimeMillis()));
         RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, BOOTSTRAP_KEY);
         rm.add(cf);
         try
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index b745b782..0345b0a0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -176,7 +176,7 @@ public synchronized void removeBootstrapSource(InetAddress s)
     private void finishBootstrapping()
     {
         isBootstrapMode = false;
-        SystemTable.setBootstrapped();
+        SystemTable.setBootstrapped(true);
         setToken(getLocalToken());
         Gossiper.instance().addApplicationState(StorageService.STATE_NORMAL, new ApplicationState(partitioner_.getTokenFactory().toString(getLocalToken())));
         logger_.info("Bootstrap completed! Now serving reads.");
@@ -301,7 +301,7 @@ public void start() throws IOException
         }
         else
         {
-            SystemTable.setBootstrapped();
+            SystemTable.setBootstrapped(true);
             Token token = storageMetadata_.getToken();
             setToken(token);
             Gossiper.instance().addApplicationState(StorageService.STATE_NORMAL, new ApplicationState(partitioner_.getTokenFactory().toString(token)));
@@ -395,8 +395,8 @@ else if (STATE_NORMAL.equals(stateName))
             Token token = getPartitioner().getTokenFactory().fromString(state.getValue());
             if (logger_.isDebugEnabled())
                 logger_.debug(endpoint + " state normal, token " + token);
-            replicationStrategy_.removeObsoletePendingRanges();
             updateForeignToken(token, endpoint);
+            replicationStrategy_.removeObsoletePendingRanges();
         }
         else if (STATE_LEAVING.equals(stateName))
         {
@@ -1000,6 +1000,7 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public void finishLeaving()
     {
+        SystemTable.setBootstrapped(false);
         Gossiper.instance().addApplicationState(STATE_LEFT, new ApplicationState(getLocalToken().toString()));
         try
         {
