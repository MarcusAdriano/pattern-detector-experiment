diff --git a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/PackageStateMBean.java b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/PackageStateMBean.java
index 29ffc018..9c8c52a4 100644
--- a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/PackageStateMBean.java
+++ b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/PackageStateMBean.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,8 @@
 /**
  * This MBean provides information about the package state of the framework.
  * 
- * @version $Rev$
+ * @version $Revision$
+ * @ThreadSafe
  */
 public interface PackageStateMBean {
 	/**
@@ -39,19 +40,19 @@
 													+ ":type=packageState,version=1.5";
 
 	/**
-	 * The key EXPORTING_BUNDLE, used in {@link #EXPORTING_BUNDLE_ITEM}.
+	 * The key EXPORTING_BUNDLE, used in {@link #EXPORTING_BUNDLES_ITEM}.
 	 */
-	String			EXPORTING_BUNDLE		= "ExportingBundle";
+	String			EXPORTING_BUNDLES		= "ExportingBundles";
+
 	/**
 	 * The item containing the bundle identifier in {@link #PACKAGE_TYPE}. The
-	 * key is {@link #EXPORTING_BUNDLE} and the type is {@link SimpleType#LONG}.
-	 * 
-	 * ### Is ExportingBundle not a better name?
+	 * key is {@link #EXPORTING_BUNDLES} and the type is
+	 * {@link JmxConstants#LONG_ARRAY_TYPE}.
 	 */
-	Item			EXPORTING_BUNDLE_ITEM	= new Item(
-													EXPORTING_BUNDLE,
-													"The bundle the package belongs to",
-													SimpleType.LONG);
+	Item			EXPORTING_BUNDLES_ITEM	= new Item(
+													EXPORTING_BUNDLES,
+													"The bundles the package belongs to",
+													JmxConstants.LONG_ARRAY_TYPE);
 
 	/**
 	 * The key IMPORTING_BUNDLES, used in {@link #IMPORTING_BUNDLES_ITEM}.
@@ -60,21 +61,22 @@
 
 	/**
 	 * The item containing the bundle identifier in {@link #PACKAGE_TYPE}. The
-	 * key is {@link #EXPORTING_BUNDLE} and the type is {@link SimpleType#LONG}.
+	 * key is {@link #IMPORTING_BUNDLES} and the type is {@link JmxConstants#LONG_ARRAY_TYPE}.
 	 */
 	Item			IMPORTING_BUNDLES_ITEM	= new Item(
 													IMPORTING_BUNDLES,
 													"The importing bundles of the package",
 													JmxConstants.LONG_ARRAY_TYPE);
 
+
 	/**
 	 * The key NAME, used in {@link #NAME_ITEM}.
 	 */
 	String			NAME					= "Name";
 
 	/**
-	 * The item containing the name of the package in {@link #PACKAGE_TYPE}. The
-	 * key is {@link #NAME} and the type is {@link SimpleType#LONG}.
+	 * The item containing the name of the package in {@link #PACKAGE_TYPE}.
+	 * The key is {@link #NAME} and the type is {@link SimpleType#LONG}.
 	 */
 	Item			NAME_ITEM				= new Item(NAME,
 													"The package name",
@@ -86,7 +88,8 @@
 	 */
 	String			REMOVAL_PENDING			= "RemovalPending";
 	/**
-	 * 
+	 * The item representing the removal pending status of a package. The key is
+	 * {@link #REMOVAL_PENDING} and the type is {@link SimpleType#BOOLEAN}.
 	 */
 	Item			REMOVAL_PENDING_ITEM	= new Item(
 													REMOVAL_PENDING,
@@ -109,22 +112,22 @@
 													SimpleType.STRING);
 
 	/**
-	 * The item names in the CompositeData representing the package. This type
+	 * The Composite Type for a CompositeData representing a package. This type
 	 * consists of:
 	 * <ul>
-	 * <li>{@link #EXPORTING_BUNDLE_ITEM}</li>
+	 * <li>{@link #EXPORTING_BUNDLES_ITEM}</li>
 	 * <li>{@link #IMPORTING_BUNDLES_ITEM}</li>
 	 * <li>{@link #NAME_ITEM}</li>
 	 * <li>{@link #REMOVAL_PENDING_ITEM}</li>
 	 * <li>{@link #VERSION_ITEM}</li>
 	 * </ul>
-	 * The key is defined as {@link #NAME} and {@link #EXPORTING_BUNDLE}
+	 * The key is defined as {@link #NAME} and {@link #EXPORTING_BUNDLES}
 	 */
 	CompositeType	PACKAGE_TYPE			= Item
 													.compositeType(
 															"PACKAGE",
 															"This type encapsulates an OSGi package",
-															EXPORTING_BUNDLE_ITEM,
+															EXPORTING_BUNDLES_ITEM,
 															IMPORTING_BUNDLES_ITEM,
 															NAME_ITEM,
 															REMOVAL_PENDING_ITEM,
@@ -132,39 +135,38 @@
 
 	/**
 	 * The Tabular Type used in {@link #listPackages()}. They key is
-	 * {@link #NAME}, {@link #VERSION}, and {@link #EXPORTING_BUNDLE}.
+	 * {@link #NAME}, {@link #VERSION}, and {@link #EXPORTING_BUNDLES}.
 	 */
 	TabularType		PACKAGES_TYPE			= Item.tabularType("PACKAGES",
 													"A table of packages",
 													PACKAGE_TYPE, NAME,
-													VERSION, EXPORTING_BUNDLE);
+													VERSION, EXPORTING_BUNDLES);
 
 	/**
 	 * Answer the identifier of the bundle exporting the package
 	 * 
 	 * @param packageName - the package name
 	 * @param version - the version of the package
-	 * @return the bundle identifier or -1 if there is no bundle
+	 * @return the bundle identifiers exporting such a package
 	 * @throws IOException if the operation fails
 	 * @throws IllegalArgumentException if the package indicated does not exist
 	 */
-	long getExportingBundle(String packageName, String version)
+	long[] getExportingBundles(String packageName, String version)
 			throws IOException;
 
 	/**
 	 * Answer the list of identifiers of the bundles importing the package
 	 * 
-	 * ### packageName and version is not unique
-	 * 
-	 * @param packageName - the package name
-	 * @param version - the version of the package
+	 * @param packageName The package name
+	 * @param version The version of the package
+	 * @param exportingBundle The exporting bundle for the given package
 	 * @return the list of bundle identifiers
 	 * @throws IOException if the operation fails
 	 * @throws IllegalArgumentException if the package indicated does not exist
 	 * 
 	 */
-	long[] getImportingBundles(String packageName, String version)
-			throws IOException;
+	long[] getImportingBundles(String packageName, String version,
+			long exportingBundle) throws IOException;
 
 	/**
 	 * Answer the package state of the system in tabular form
@@ -181,14 +183,15 @@ long getExportingBundle(String packageName, String version)
 	 * Answer if this package is exported by a bundle which has been updated or
 	 * uninstalled
 	 * 
-	 * @param packageName - the package name
-	 * @param version - the version of the package
+	 * @param packageName The package name
+	 * @param version The version of the package
+	 * @param exportingBundle The bundle exporting the package
 	 * @return true if this package is being exported by a bundle that has been
 	 *         updated or uninstalled.
 	 * @throws IOException if the operation fails
 	 * @throws IllegalArgumentException if the package indicated does not exist
 	 */
-	boolean isRemovalPending(String packageName, String version)
+	boolean isRemovalPending(String packageName, String version, long exportingBundle)
 			throws IOException;
 
 }
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
index 74481936..f27941bc 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
@@ -41,9 +41,9 @@
 public class PackageData {
 
     /**
-     * {@link PackageStateMBean#EXPORTING_BUNDLE}
+     * {@link PackageStateMBean#EXPORTING_BUNDLES}
      */
-    long exportingBundle;
+    long[] exportingBundles;
 
     /**
      * {@link PackageStateMBean#IMPORTING_BUNDLES}
@@ -70,7 +70,7 @@
      * @param exportedPackage @see {@link ExportedPackage}.
      */
     public PackageData(ExportedPackage exportedPackage) {
-        this(exportedPackage.getExportingBundle().getBundleId(), toBundleIds(exportedPackage.getImportingBundles()),
+        this(new long[]{exportedPackage.getExportingBundle().getBundleId()}, toBundleIds(exportedPackage.getImportingBundles()),
                 exportedPackage.getName(), exportedPackage.isRemovalPending(), exportedPackage.getVersion().toString());
 
     }
@@ -78,14 +78,14 @@ public PackageData(ExportedPackage exportedPackage) {
     /**
      * Constructs new PackageData.
      * 
-     * @param exportingBundle the bundle the package belongs to.
+     * @param exportingBundles the bundle the package belongs to.
      * @param importingBundles the importing bundles of the package.
      * @param name the package name.
      * @param removalPending whether the package is pending removal.
      * @param version package version.
      */
-    public PackageData(long exportingBundle, long[] importingBundles, String name, boolean removalPending, String version) {
-        this.exportingBundle = exportingBundle;
+    public PackageData(long[] exportingBundles, long[] importingBundles, String name, boolean removalPending, String version) {
+        this.exportingBundles = exportingBundles;
         this.importingBundles = importingBundles;
         this.name = name;
         this.removalPending = removalPending;
@@ -101,7 +101,7 @@ public PackageData(long exportingBundle, long[] importingBundles, String name, b
     public CompositeData toCompositeData() {
         try {
             Map<String, Object> items = new HashMap<String, Object>();
-            items.put(PackageStateMBean.EXPORTING_BUNDLE, exportingBundle);
+            items.put(PackageStateMBean.EXPORTING_BUNDLES, toLongArray(exportingBundles));
             items.put(PackageStateMBean.IMPORTING_BUNDLES, toLongArray(importingBundles));
             items.put(PackageStateMBean.NAME, name);
             items.put(PackageStateMBean.REMOVAL_PENDING, removalPending);
@@ -122,7 +122,7 @@ public static PackageData from(CompositeData data) {
         if(data == null){
             return null;
         }
-        long exportingBundle = (Long) data.get(PackageStateMBean.EXPORTING_BUNDLE);
+        long[] exportingBundle = toLongPrimitiveArray((Long[])data.get(PackageStateMBean.EXPORTING_BUNDLES));
         long[] importingBundles = toLongPrimitiveArray((Long[]) data.get(PackageStateMBean.IMPORTING_BUNDLES));
         String name = (String) data.get(PackageStateMBean.NAME);
         boolean removalPending = (Boolean) data.get(PackageStateMBean.REMOVAL_PENDING);
@@ -198,10 +198,10 @@ public static TabularData tableFrom(Set<PackageData> packages){
     }
 
     /**
-     * @return the exportingBundle
+     * @return the exportingBundles
      */
-    public long getExportingBundle() {
-        return exportingBundle;
+    public long[] getExportingBundles() {
+        return exportingBundles;
     }
 
     /**
@@ -239,7 +239,8 @@ public boolean equals(Object o) {
 
         PackageData that = (PackageData) o;
 
-        if (exportingBundle != that.exportingBundle) return false;
+        // exportingBundle must be always there
+        if (exportingBundles[0] != that.exportingBundles[0]) return false;
         if (!name.equals(that.name)) return false;
         if (!version.equals(that.version)) return false;
 
@@ -248,7 +249,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        int result = (int) (exportingBundle ^ (exportingBundle >>> 32));
+        int result = (int) (exportingBundles[0] ^ (exportingBundles[0] >>> 32));
         result = 31 * result + name.hashCode();
         result = 31 * result + version.hashCode();
         return result;
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
index 794ec507..d53ea03c 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
@@ -17,7 +17,9 @@
 package org.apache.aries.jmx.framework;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import javax.management.openmbean.TabularData;
@@ -59,30 +61,41 @@ public PackageState(BundleContext context, PackageAdmin packageAdmin) {
     }
 
     /**
-     * @see org.osgi.jmx.framework.PackageStateMBean#getExportingBundle(java.lang.String, java.lang.String)
+     * @see org.osgi.jmx.framework.PackageStateMBean#getExportingBundles(String, String)
      */
-    public long getExportingBundle(String packageName, String version) throws IOException {
+    public long[] getExportingBundles(String packageName, String version) throws IOException {
         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
         if (exportedPackages != null) {
             Version ver = Version.parseVersion(version);
+            List<Long> exportingBundles = new ArrayList<Long>();
             for (ExportedPackage exportedPackage : exportedPackages) {
                 if (exportedPackage.getVersion().equals(ver)) {
-                    return exportedPackage.getExportingBundle().getBundleId();
+                    long bundleId  = exportedPackage.getExportingBundle().getBundleId();
+                    exportingBundles.add(bundleId);
                 }
             }
+            
+            if(!exportingBundles.isEmpty()){
+                long[] convertedArray = new long[exportingBundles.size()];
+                for(int i=0; i < exportingBundles.size(); i++){
+                    convertedArray[i] = exportingBundles.get(i);
+                }
+                return convertedArray;
+        }
         }
-        return -1;
+        return null;
     }
 
     /**
-     * @see org.osgi.jmx.framework.PackageStateMBean#getImportingBundles(java.lang.String, java.lang.String)
+     * @see org.osgi.jmx.framework.PackageStateMBean#getImportingBundles(String, String, long)
      */
-    public long[] getImportingBundles(String packageName, String version) throws IOException {
+    public long[] getImportingBundles(String packageName, String version, long exportingBundle) throws IOException {
         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
         if (exportedPackages != null) {
             Version ver = Version.parseVersion(version);
             for (ExportedPackage exportedPackage : exportedPackages) {
-                if (exportedPackage.getVersion().equals(ver)) {
+                if (exportedPackage.getVersion().equals(ver)
+                        && exportedPackage.getExportingBundle().getBundleId() == exportingBundle) {
                     Bundle[] bundles = exportedPackage.getImportingBundles();
                     if (bundles != null) {
                         long[] importingBundles = new long[bundles.length];
@@ -98,14 +111,16 @@ public long getExportingBundle(String packageName, String version) throws IOExce
     }
 
     /**
-     * @see org.osgi.jmx.framework.PackageStateMBean#isRemovalPending(java.lang.String, java.lang.String)
+     * @see org.osgi.jmx.framework.PackageStateMBean#isRemovalPending(String, String, long)
      */
-    public boolean isRemovalPending(String packageName, String version) throws IOException {
+    public boolean isRemovalPending(String packageName, String version, long exportingBundle) throws IOException {
         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
         if (exportedPackages != null) {
             Version ver = Version.parseVersion(version);
             for (ExportedPackage exportedPackage : exportedPackages) {
-                if (exportedPackage.getVersion().equals(ver) && exportedPackage.isRemovalPending()) {
+                if (exportedPackage.getVersion().equals(ver)
+                        && exportedPackage.getExportingBundle().getBundleId() == exportingBundle
+                        && exportedPackage.isRemovalPending()) {
                     return true;
                 }
             }
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/PackageStateTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/PackageStateTest.java
index c659d73b..ced9f96f 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/PackageStateTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/framework/PackageStateTest.java
@@ -17,6 +17,7 @@
 package org.apache.aries.jmx.framework;
 
 import java.io.IOException;
+import java.util.Collection;
 
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.TabularData;
@@ -56,37 +57,48 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testGetExportingBundle() throws IOException {
+    public void testGetExportingBundles() throws IOException {
         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
         Bundle bundle = Mockito.mock(Bundle.class);
         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
         Mockito.when(exported.getExportingBundle()).thenReturn(bundle);
-        Mockito.when(bundle.getBundleId()).thenReturn(new Long(5));
-        Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported});
-        long id = mbean.getExportingBundle("test", "1.0.0");
-        Assert.assertEquals(5, id);
-        
+        Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(5));
+        ExportedPackage exported2 = Mockito.mock(ExportedPackage.class);
+        Bundle bundle2 = Mockito.mock(Bundle.class);
+        Mockito.when(exported2.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
+        Mockito.when(exported2.getExportingBundle()).thenReturn(bundle2);
+        Mockito.when(bundle2.getBundleId()).thenReturn(Long.valueOf(6));
+        Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported, exported2});
+        long[] ids = mbean.getExportingBundles("test", "1.0.0");
+        Assert.assertNotNull(ids);
+        Assert.assertArrayEquals(new long[]{5,6}, ids);
     }
 
     @Test
     public void testGetImportingBundles() throws IOException {
         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
         Bundle bundle = Mockito.mock(Bundle.class);
+        Bundle exportingBundle = Mockito.mock(Bundle.class);
         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
+        Mockito.when(exported.getExportingBundle()).thenReturn(exportingBundle);
+        Mockito.when(exportingBundle.getBundleId()).thenReturn(Long.valueOf(2));
         Mockito.when(exported.getImportingBundles()).thenReturn(new Bundle[]{bundle});
-        Mockito.when(bundle.getBundleId()).thenReturn(new Long(4));
+        Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(4));
         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported});
-        long[] ids = mbean.getImportingBundles("test", "1.0.0");
+        long[] ids = mbean.getImportingBundles("test", "1.0.0", 2);
         Assert.assertArrayEquals(new long[]{4}, ids);
     }
 
     @Test
     public void testIsRemovalPending() throws IOException {
         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
+        Bundle expBundle = Mockito.mock(Bundle.class);
         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
         Mockito.when(exported.isRemovalPending()).thenReturn(true);
+        Mockito.when(exported.getExportingBundle()).thenReturn(expBundle);
+        Mockito.when(expBundle.getBundleId()).thenReturn(Long.valueOf(2));
         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported});
-        boolean isRemoval = mbean.isRemovalPending("test", "1.0.0");
+        boolean isRemoval = mbean.isRemovalPending("test", "1.0.0", Long.valueOf(2));
         Assert.assertTrue(isRemoval);
     }
 
@@ -100,14 +112,20 @@ public void testListPackages() throws IOException {
         Mockito.when(exported.getImportingBundles()).thenReturn(new Bundle[]{impBundle});
         Mockito.when(exported.getName()).thenReturn("test");
         Mockito.when(exported.getExportingBundle()).thenReturn(bundle);
-        Mockito.when(bundle.getBundleId()).thenReturn(new Long(4));
-        Mockito.when(impBundle.getBundleId()).thenReturn(new Long(5));
+        Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(4));
+        Mockito.when(impBundle.getBundleId()).thenReturn(Long.valueOf(5));
         Mockito.when(admin.getExportedPackages(bundle)).thenReturn(new ExportedPackage[]{exported});
         TabularData table = mbean.listPackages();
         Assert.assertEquals(PackageStateMBean.PACKAGES_TYPE,table.getTabularType());
-        CompositeData data = table.get(new Object[]{"test", "1.0.0", new Long(4)});
-        Assert.assertNotNull(data);
-       
+        Collection<CompositeData> values = table.values();
+        Assert.assertEquals(1, values.size());
+        CompositeData data = values.iterator().next();
+        Long[] exportingBundles = (Long[])data.get(PackageStateMBean.EXPORTING_BUNDLES);
+        Assert.assertArrayEquals(new Long[]{Long.valueOf(4)}, exportingBundles);
+        String name = (String) data.get(PackageStateMBean.NAME);
+        Assert.assertEquals("test", name);
+        String version = (String) data.get(PackageStateMBean.VERSION);
+        Assert.assertEquals("1.0.0", version);
     }
 
 }
