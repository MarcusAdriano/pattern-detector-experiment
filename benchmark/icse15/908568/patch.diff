diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
index 96b2f98d..e263e589 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.lang.management.ManagementFactory;
 import java.util.*;
+import java.util.Map.Entry;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 import javax.management.*;
@@ -450,9 +451,10 @@ private void doReadonlyCompaction(ColumnFamilyStore cfs, InetAddress initiator)
             // look for a bucket containing similar-sized files:
             // group in the same bucket if it's w/in 50% of the average for this bucket,
             // or this file and the bucket are all considered "small" (less than `min`)
-            for (List<SSTableReader> bucket : buckets.keySet())
+            for (Entry<List<SSTableReader>, Long> entry : buckets.entrySet())
             {
-                long averageSize = buckets.get(bucket);
+                List<SSTableReader> bucket = entry.getKey();
+                long averageSize = entry.getValue();
                 if ((size > averageSize / 2 && size < 3 * averageSize / 2)
                     || (size < min && averageSize < min))
                 {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
index cd2150bf..17422fd0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
@@ -22,6 +22,7 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.util.*;
+import java.util.Map.Entry;
 
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.net.CompactEndPointSerializationHelper;
@@ -120,9 +121,9 @@ static boolean serialize(Map<InetAddress, EndPointState> epStateMap, DataOutputS
         int size = epStateMap.size();
         dos.writeInt(size);
     
-        Set<InetAddress> eps = epStateMap.keySet();
-        for( InetAddress ep : eps )
+        for (Entry<InetAddress, EndPointState> entry : epStateMap.entrySet())
         {
+            InetAddress ep = entry.getKey();
             if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
             {
                 logger_.info("@@@@ Breaking out to respect the MTU size in EPS. Estimate is " + estimate + " @@@@");
@@ -132,8 +133,7 @@ static boolean serialize(Map<InetAddress, EndPointState> epStateMap, DataOutputS
     
             int pre = dos.size();
             CompactEndPointSerializationHelper.serialize(ep, dos);
-            EndPointState epState = epStateMap.get(ep);            
-            EndPointState.serializer().serialize(epState, dos);
+            EndPointState.serializer().serialize(entry.getValue(), dos);
             int post = dos.size();
             estimate = post - pre;
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index 5be48f8f..0a9e451a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -20,6 +20,7 @@
 
 import java.io.*;
 import java.util.*;
+import java.util.Map.Entry;
 import java.net.InetAddress;
 
 import org.apache.cassandra.concurrent.StageManager;
@@ -186,10 +187,9 @@ int getMaxEndPointStateVersion(EndPointState epState)
         versions.add( epState.getHeartBeatState().getHeartBeatVersion() );
         Map<String, ApplicationState> appStateMap = epState.getApplicationStateMap();
 
-        Set<String> keys = appStateMap.keySet();
-        for ( String key : keys )
+        for (ApplicationState value : appStateMap.values())
         {
-            int stateVersion = appStateMap.get(key).getStateVersion();
+            int stateVersion = value.getStateVersion();
             versions.add( stateVersion );
         }
 
@@ -454,16 +454,16 @@ synchronized EndPointState getStateForVersionBiggerThan(InetAddress forEndpoint,
             }
             Map<String, ApplicationState> appStateMap = epState.getApplicationStateMap();
             /* Accumulate all application states whose versions are greater than "version" variable */
-            Set<String> keys = appStateMap.keySet();
-            for ( String key : keys )
+            for (Entry<String, ApplicationState> entry : appStateMap.entrySet())
             {
-                ApplicationState appState = appStateMap.get(key);
+                ApplicationState appState = entry.getValue();
                 if ( appState.getStateVersion() > version )
                 {
                     if ( reqdEndPointState == null )
                     {
                         reqdEndPointState = new EndPointState(epState.getHeartBeatState());
                     }
+                    final String key = entry.getKey();
                     if (logger_.isTraceEnabled())
                         logger_.trace("Adding state " + key + ": " + appState.getValue());
                     reqdEndPointState.addApplicationState(key, appState);
@@ -525,10 +525,10 @@ void notifyFailureDetector(List<GossipDigest> gDigests)
     void notifyFailureDetector(Map<InetAddress, EndPointState> remoteEpStateMap)
     {
         IFailureDetector fd = FailureDetector.instance;
-        Set<InetAddress> endpoints = remoteEpStateMap.keySet();
-        for ( InetAddress endpoint : endpoints )
+        for (Entry<InetAddress, EndPointState> entry : remoteEpStateMap.entrySet())
         {
-            EndPointState remoteEndPointState = remoteEpStateMap.get(endpoint);
+            InetAddress endpoint = entry.getKey();
+            EndPointState remoteEndPointState = entry.getValue();
             EndPointState localEndPointState = endPointStateMap_.get(endpoint);
             /*
              * If the local endpoint state exists then report to the FD only
@@ -604,14 +604,14 @@ private void handleMajorStateChange(InetAddress ep, EndPointState epState, boole
 
     synchronized void applyStateLocally(Map<InetAddress, EndPointState> epStateMap)
     {
-        Set<InetAddress> eps = epStateMap.keySet();
-        for( InetAddress ep : eps )
+        for (Entry<InetAddress, EndPointState> entry : epStateMap.entrySet())
         {
+            InetAddress ep = entry.getKey();
             if ( ep.equals( localEndPoint_ ) )
                 continue;
 
             EndPointState localEpStatePtr = endPointStateMap_.get(ep);
-            EndPointState remoteState = epStateMap.get(ep);
+            EndPointState remoteState = entry.getValue();
             /*
                 If state does not exist just add it. If it does then add it only if the version
                 of the remote copy is greater than the local copy.
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
index 457dbde6..142f21f7 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeCmd.java
@@ -10,6 +10,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.Map.Entry;
 
 import org.apache.cassandra.cache.JMXAggregatingCacheMBean;
 import org.apache.cassandra.cache.JMXInstrumentedCacheMBean;
@@ -199,9 +200,10 @@ public void printColumnFamilyStats(PrintStream outs)
         }
 
         // print out the table statistics
-        for (String tableName : cfstoreMap.keySet())
+        for (Entry<String, List<ColumnFamilyStoreMBean>> entry : cfstoreMap.entrySet())
         {
-            List<ColumnFamilyStoreMBean> columnFamilies = cfstoreMap.get(tableName);
+            String tableName = entry.getKey();
+            List<ColumnFamilyStoreMBean> columnFamilies = entry.getValue();
             int tableReadCount = 0;
             int tableWriteCount = 0;
             int tablePendingTasks = 0;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java
index 356943fe..34c74a10 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java
@@ -19,6 +19,7 @@
 package org.apache.cassandra.utils;
 
 import java.util.*;
+import java.util.Map.Entry;
 
 import org.apache.log4j.Logger;
 
@@ -93,10 +94,11 @@ public void run()
             }
 
             /* Calling the hooks on the keys that have been expunged */
-            Set<K> keys = expungedValues.keySet();
-            for (K key : keys)
+            for (Entry<K, V> entry : expungedValues.entrySet())
             {
-                V value = expungedValues.get(key);
+                K key = entry.getKey();
+                V value = entry.getValue();
+                
                 ICacheExpungeHook<K, V> hook = hooks_.remove(key);
                 if (hook != null)
                 {
