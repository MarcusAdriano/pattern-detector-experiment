diff --git a/lucene/solr/trunk/src/java/org/apache/solr/search/DisMaxQParserPlugin.java b/lucene/solr/trunk/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
index eab42929..abb6b504 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
@@ -142,6 +142,7 @@ public Query parse() throws ParseException {
     else {
       // There is a valid query string
       userQuery = U.partialEscape(U.stripUnbalancedQuotes(userQuery)).toString();
+      userQuery = U.stripIllegalOperators(userQuery).toString();
 
       String minShouldMatch = solrParams.get(DMP.MM, "100%");
       Query dis = up.parse(userQuery);
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/util/SolrPluginUtils.java b/lucene/solr/trunk/src/java/org/apache/solr/util/SolrPluginUtils.java
index 081fa161..c0b5b0bd 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -41,6 +41,7 @@
 import java.util.*;
 import java.util.logging.Level;
 import java.util.regex.Pattern;
+import java.util.regex.Matcher;
     
 /**
  * <p>Utilities that may be of use to RequestHandlers.</p>
@@ -673,6 +674,23 @@ public static CharSequence partialEscape(CharSequence s) {
     return sb;
   }
 
+  // Pattern to detect dangling operator(s) at end of query
+  // \s+[-+\s]+$
+  private final static Pattern DANGLING_OP_PATTERN = Pattern.compile( "\\s+[-+\\s]+$" );
+  // Pattern to detect consecutive + and/or - operators
+  // \s+[+-](?:\s*[+-]+)+
+  private final static Pattern CONSECUTIVE_OP_PATTERN = Pattern.compile( "\\s+[+-](?:\\s*[+-]+)+" );    
+
+  /**
+   * Strips operators that are used illegally, otherwise reuturns it's
+   * input.  Some examples of illegal user queries are: "chocolate +-
+   * chip", "chocolate - - chip", and "chocolate chip -".
+   */
+  public static CharSequence stripIllegalOperators(CharSequence s) {
+    String temp = CONSECUTIVE_OP_PATTERN.matcher( s ).replaceAll( " " );
+    return DANGLING_OP_PATTERN.matcher( temp ).replaceAll( "" );
+  }
+
   /**
    * Returns it's input if there is an even (ie: balanced) number of
    * '"' characters -- otherwise returns a String in which all '"'
diff --git a/lucene/solr/trunk/src/test/org/apache/solr/util/SolrPluginUtilsTest.java b/lucene/solr/trunk/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
index e9900cf6..4bbc2fde 100644
--- a/lucene/solr/trunk/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
+++ b/lucene/solr/trunk/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
@@ -66,6 +66,24 @@ public void testStripUnbalancedQuotes() {
         
   }
 
+  public void testStripIllegalOperators() {
+
+    assertEquals("",stripOp(""));
+    assertEquals("foo",stripOp("foo"));
+    assertEquals("foo -bar",stripOp("foo -bar"));
+    assertEquals("foo +bar",stripOp("foo +bar"));
+    assertEquals("foo + bar",stripOp("foo + bar"));
+    assertEquals("foo+ bar",stripOp("foo+ bar"));
+    assertEquals("foo+ bar",stripOp("foo+ bar"));
+    assertEquals("foo+",stripOp("foo+"));
+    assertEquals("foo bar",stripOp("foo bar -"));
+    assertEquals("foo bar ",stripOp("foo bar - + ++"));
+    assertEquals("foo bar",stripOp("foo --bar"));
+    assertEquals("foo bar ",stripOp("foo -------------------------------------------------------------------------------------------------------------------------bar --"));
+    assertEquals("foo bar ",stripOp("foo --bar -----------------------------------------------------------------------------------------------------------------------"));
+
+  }
+
   public void testParseFieldBoosts() throws Exception {
 
     Map<String,Float> e1 = new HashMap<String,Float>();
@@ -315,6 +333,11 @@ public String strip(CharSequence s) {
     return SolrPluginUtils.stripUnbalancedQuotes(s).toString();
   }
    
+  /** macro */
+  public String stripOp(CharSequence s) {
+    return SolrPluginUtils.stripIllegalOperators(s).toString();
+  }
+   
   /** macro */
   public int calcMSM(int clauses, String spec) {
     return SolrPluginUtils.calculateMinShouldMatch(clauses, spec);
