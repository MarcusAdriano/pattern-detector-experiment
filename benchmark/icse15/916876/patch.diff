diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
index 5a6f757c..5bc05c01 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
@@ -81,7 +81,9 @@ public long installBundle(String location) throws IOException {
             Bundle bundle = context.installBundle(location);
             return bundle.getBundleId();
         } catch (BundleException e) {
-            throw new IOException("Can't install bundle with location " + location, e);
+            IOException ioex = new IOException("Can't install bundle with location " + location);
+            ioex.initCause(e);
+            throw ioex;
         }
     }
 
@@ -102,7 +104,9 @@ public long installBundle(String location, String url) throws IOException {
 
                 }
             }
-            throw new IOException("Can't install bundle with location " + location, e);
+            IOException ioex = new IOException("Can't install bundle with location " + location);
+            ioex.initCause(e);
+            throw ioex;
         }
     }
 
@@ -142,7 +146,7 @@ public CompositeData installBundles(String[] locations, String[] urls) throws IO
             return new BatchInstallResult("Failed to install bundles arguments can't be null").toCompositeData(); 
         }
         
-        if(locations != null && locations.length != urls.length){
+        if(locations.length != urls.length){
             return new BatchInstallResult("Failed to install bundles size of arguments should be same").toCompositeData(); 
         }
         long[] ids = new long[locations.length];
@@ -218,7 +222,9 @@ public void restartFramework() throws IOException {
         try {
             bundle.update();
         } catch (BundleException be) {
-            throw new IOException("Failed to restart framework", be);
+            IOException ioex = new IOException("Failed to restart framework");
+            ioex.initCause(be);
+            throw ioex;
         }
 
     }
@@ -275,7 +281,9 @@ public void shutdownFramework() throws IOException {
         try {
             bundle.stop();
         } catch (BundleException be) {
-            throw new IOException("Failed to shutdown framework", be);
+            IOException ioex = new IOException("Failed to shutdown framework");
+            ioex.initCause(be);
+            throw ioex;
         }
 
     }
@@ -289,7 +297,9 @@ public void startBundle(long bundleIdentifier) throws IOException {
             try {
                 bundle.start();
             } catch (BundleException be) {
-                throw new IOException("Failed to start bundle with id " + bundleIdentifier, be);
+                IOException ioex = new IOException("Failed to start bundle with id " + bundleIdentifier);
+                ioex.initCause(be);
+                throw ioex;
             }
         }
     }
@@ -320,7 +330,9 @@ public void stopBundle(long bundleIdentifier) throws IOException {
             try {
                 bundle.stop();
             } catch (BundleException e) {
-                throw new IOException("Failed to stop bundle with id " + bundleIdentifier, e);
+                IOException ioex = new IOException("Failed to stop bundle with id " + bundleIdentifier);
+                ioex.initCause(e);
+                throw ioex;
             }
         }
     }
@@ -351,7 +363,9 @@ public void uninstallBundle(long bundleIdentifier) throws IOException {
             try {
                 bundle.uninstall();
             } catch (BundleException be) {
-                throw new IOException("Failed to uninstall bundle with id " + bundleIdentifier, be);
+                IOException ioex = new IOException("Failed to uninstall bundle with id " + bundleIdentifier);
+                ioex.initCause(be);
+                throw ioex;
             }
         }
 
@@ -383,7 +397,9 @@ public void updateBundle(long bundleIdentifier) throws IOException {
         try {
             bundle.update();
         } catch (BundleException be) {
-            throw new IOException("Failed to update bundle with id " + bundleIdentifier, be);
+            IOException ioex = new IOException("Failed to update bundle with id " + bundleIdentifier);
+            ioex.initCause(be);
+            throw ioex;
         }
 
     }
@@ -405,7 +421,9 @@ public void updateBundle(long bundleIdentifier, String url) throws IOException {
 
                 }
             }
-            throw new IOException("Can't update system bundle", be);
+            IOException ioex = new IOException("Can't update system bundle");
+            ioex.initCause(be);
+            throw ioex;
         }
 
     }
@@ -456,7 +474,9 @@ public void updateFramework() throws IOException {
         try {
             bundle.update();
         } catch (BundleException be) {
-            throw new IOException("Failed to update system bundle", be);
+            IOException ioex = new IOException("Failed to update system bundle");
+            ioex.initCause(be);
+            throw ioex;
         }
 
     }
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
index 00002354..32c959a4 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
@@ -255,7 +255,9 @@ public CompositeData getGroup(String groupname) throws IOException {
         try {
             roles = userAdmin.getRoles(filter);
         } catch (InvalidSyntaxException ise) {
-            throw new IOException("Operation fails illegal filter provided: " + filter, ise);
+            IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
+            ioex.initCause(ise);
+            throw ioex;
         }
 
         if (roles == null) {
@@ -358,7 +360,9 @@ public CompositeData getRole(String name) throws IOException {
         try {
             roles = userAdmin.getRoles(filter);
         } catch (InvalidSyntaxException ise) {
-            throw new IOException("Operation fails illegal filter provided: " + filter, ise);
+            IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
+            ioex.initCause(ise);
+            throw ioex;
         }
         if (roles == null) {
             return null;
@@ -397,7 +401,9 @@ public String getUser(String key, String value) throws IOException {
         try {
             roles = userAdmin.getRoles(filter);
         } catch (InvalidSyntaxException ise) {
-            throw new IOException("Operation fails illegal filter provided: " + filter, ise);
+            IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
+            ioex.initCause(ise);
+            throw ioex;
         }
         if (roles == null) {
             return null;
