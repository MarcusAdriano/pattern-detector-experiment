diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/mapreduce/SumReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/mapreduce/SumReducer.java
index b47dc467..e69de29b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/mapreduce/SumReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/mapreduce/SumReducer.java
@@ -1,36 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.common.mapreduce;
-
-import org.apache.hadoop.io.IntWritable;
-import org.apache.hadoop.io.WritableComparable;
-import org.apache.hadoop.mapreduce.Reducer;
-
-import java.io.IOException;
-
-public class SumReducer extends Reducer<WritableComparable<?>,IntWritable,WritableComparable<?>,IntWritable> {
-    @Override
-    protected void reduce(WritableComparable<?> key, Iterable<IntWritable> counts, Context ctx)
-        throws IOException, InterruptedException {
-      int sum = 0;
-      for (IntWritable count : counts) {
-        sum += count.get();
-      }
-      ctx.write(key, new IntWritable(sum));
-    }
-  }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/graph/common/DegreeDistributionJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/graph/common/DegreeDistributionJob.java
index a0982845..651721bb 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/graph/common/DegreeDistributionJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/graph/common/DegreeDistributionJob.java
@@ -25,9 +25,9 @@
 import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
 import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
 import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
+import org.apache.hadoop.mapreduce.lib.reduce.IntSumReducer;
 import org.apache.hadoop.util.ToolRunner;
 import org.apache.mahout.common.AbstractJob;
-import org.apache.mahout.common.mapreduce.SumReducer;
 import org.apache.mahout.graph.model.UndirectedEdge;
 import org.apache.mahout.graph.model.Vertex;
 
@@ -76,15 +76,15 @@ public int run(String[] args) throws Exception {
     Path degreesPerVertexPath = new Path(tempDirPath, "degreesPerVertex");
 
     Job degreesPerVertex = prepareJob(getInputPath(), degreesPerVertexPath, SequenceFileInputFormat.class,
-        DegreeOfVertexMapper.class, Vertex.class, IntWritable.class, SumReducer.class, Vertex.class, IntWritable.class,
-        SequenceFileOutputFormat.class);
-    degreesPerVertex.setCombinerClass(SumReducer.class);
+        DegreeOfVertexMapper.class, Vertex.class, IntWritable.class, IntSumReducer.class, Vertex.class,
+        IntWritable.class, SequenceFileOutputFormat.class);
+    degreesPerVertex.setCombinerClass(IntSumReducer.class);
     degreesPerVertex.waitForCompletion(true);
 
     Job degreeDistribution = prepareJob(degreesPerVertexPath, getOutputPath(), SequenceFileInputFormat.class,
-        DegreesMapper.class, IntWritable.class, IntWritable.class, SumReducer.class, IntWritable.class,
+        DegreesMapper.class, IntWritable.class, IntWritable.class, IntSumReducer.class, IntWritable.class,
         IntWritable.class, TextOutputFormat.class);
-    degreeDistribution.setCombinerClass(SumReducer.class);
+    degreeDistribution.setCombinerClass(IntSumReducer.class);
     degreeDistribution.waitForCompletion(true);
 
     return 0;
