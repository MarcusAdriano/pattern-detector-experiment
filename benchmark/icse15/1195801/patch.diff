diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index cbf2e880..26025a16 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -232,6 +232,7 @@ private static CFMetaData newSystemMetadata(String cfName, int cfId, String comm
     public static CFMetaData newIndexMetadata(CFMetaData parent, ColumnDefinition info, AbstractType columnComparator)
     {
         return new CFMetaData(parent.ksName, parent.indexColumnFamilyName(info), ColumnFamilyType.Standard, columnComparator, null)
+                             .keyValidator(info.getValidator())
                              .keyCacheSize(0.0)
                              .readRepairChance(0.0)
                              .gcGraceSeconds(parent.gcGraceSeconds)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 57410775..ac1b1ddc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1533,9 +1533,10 @@ public int getKeyCacheSize()
      * For testing.  no effort is made to clear historical memtables, nor for
      * thread safety
      */
-    void clearUnsafe()
+    public void clearUnsafe()
     {
-        data.init();
+        for (ColumnFamilyStore cfs : concatWithIndexes())
+            cfs.data.init();
     }
 
     /**
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 14b745b2..fa6a3480 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -512,7 +512,9 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static void indexRow(DecoratedKey<?> key, ColumnFamilyStore cfs, SortedSet<ByteBuffer> indexedColumns)
     {
-        logger.debug("Indexing row {} ", key);
+        if (logger.isDebugEnabled())
+            logger.debug("Indexing row {} ", cfs.metadata.getKeyValidator().getString(key.key));
+
         switchLock.readLock().lock();
         try
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java b/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java
index 9e0c8ba4..789f08be 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysIndex.java
@@ -56,7 +56,7 @@ public void init()
         assert baseCfs != null && columnDefs != null;
 
         ColumnDefinition columnDef = columnDefs.iterator().next();
-        CFMetaData indexedCfMetadata = CFMetaData.newIndexMetadata(baseCfs.metadata, columnDef,indexComparator());
+        CFMetaData indexedCfMetadata = CFMetaData.newIndexMetadata(baseCfs.metadata, columnDef, indexComparator());
         indexedCfs = ColumnFamilyStore.createColumnFamilyStore(baseCfs.table,
                                                                indexedCfMetadata.cfName,
                                                                new LocalPartitioner(columnDef.getValidator()),
@@ -99,7 +99,7 @@ public void insertColumn(DecoratedKey<?> valueKey, ByteBuffer rowKey, IColumn co
             cfi.addColumn(new Column(rowKey, ByteBufferUtil.EMPTY_BYTE_BUFFER, column.timestamp()));
         }
         if (logger.isDebugEnabled())
-            logger.debug("applying index row {}:{}", valueKey, cfi);
+            logger.debug("applying index row {} in {}", indexedCfs.metadata.getKeyValidator().getString(valueKey.key), cfi);
         
         indexedCfs.apply(valueKey, cfi);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java b/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java
index 35ab9148..a6a11795 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java
@@ -149,7 +149,7 @@ private static boolean isIdentityFilter(SliceQueryFilter filter)
              * should be pretty close to `start_key`. */
             if (logger.isDebugEnabled())
                 logger.debug(String.format("Scanning index %s starting with %s",
-                                           expressionString(primary), index.getUnderlyingCfs().getComparator().getString(startKey)));
+                                           expressionString(primary), index.getBaseCFStore().metadata.getKeyValidator().getString(startKey)));
 
             // We shouldn't fetch only 1 row as this provides buggy paging in case the first row doesn't satisfy all clauses
             int count = Math.max(clause.count, 2);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/SchemaLoader.java b/cassandra/trunk/test/unit/org/apache/cassandra/SchemaLoader.java
index 9518f0f2..fc39b871 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/SchemaLoader.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/SchemaLoader.java
@@ -276,6 +276,7 @@ private static CFMetaData superCFMD(String ksName, String cfName, AbstractType s
     private static CFMetaData indexCFMD(String ksName, String cfName, final Boolean withIdxType) throws ConfigurationException
     {
         return standardCFMD(ksName, cfName)
+               .keyValidator(AsciiType.instance)
                 .columnMetadata(new HashMap<ByteBuffer, ColumnDefinition>()
                     {{
                         ByteBuffer cName = ByteBuffer.wrap("birthdate".getBytes(Charsets.UTF_8));
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
index 21f5e09a..f8bf0346 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
@@ -47,10 +47,15 @@
 
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class StreamingTransferTest extends CleanupHelper
 {
+    private static final Logger logger = LoggerFactory.getLogger(StreamingTransferTest.class);
+
     public static final InetAddress LOCAL = FBUtilities.getBroadcastAddress();
 
     @BeforeClass
@@ -66,6 +71,7 @@ public static void setup() throws Exception
     private List<String> createAndTransfer(Table table, ColumnFamilyStore cfs, Mutator mutator) throws Exception
     {
         // write a temporary SSTable, and unregister it
+        logger.debug("Mutating " + cfs.columnFamily);
         long timestamp = 1234;
         for (int i = 1; i <= 3; i++)
             mutator.mutate("key" + i, "col" + i, timestamp);
@@ -78,6 +84,7 @@ public static void setup() throws Exception
         cfs.unreferenceSSTables();
 
         // transfer the first and last key
+        logger.debug("Transferring " + cfs.columnFamily);
         int[] offs = new int[]{1, 3};
         IPartitioner p = StorageService.getPartitioner();
         List<Range> ranges = new ArrayList<Range>();
@@ -109,6 +116,8 @@ public static void setup() throws Exception
         List<String> keys = new ArrayList<String>();
         for (int off : offs)
             keys.add("key" + off);
+
+        logger.debug("... everything looks good for " + cfs.columnFamily);
         return keys;
     }
 
@@ -128,6 +137,7 @@ public void mutate(String key, String col, long timestamp) throws Exception
                 cf.addColumn(column(col, "v", timestamp));
                 cf.addColumn(new Column(ByteBufferUtil.bytes("birthdate"), ByteBufferUtil.bytes(val), timestamp));
                 rm.add(cf);
+                logger.debug("Applying row to transfer " + rm);
                 rm.apply();
             }
         });
