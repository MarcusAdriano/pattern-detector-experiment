diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
index 25e1072c..e3a3291f 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
@@ -65,23 +65,35 @@ public DebuggableThreadPoolExecutor(int corePoolSize,
 
         if (maximumPoolSize > 1)
         {
+            // clearly strict serialization is not a requirement.  just make the calling thread execute.
             this.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
         }
         else
         {
             // preserve task serialization.  this is more complicated than it needs to be,
-            // since TPE rejects if queue.offer reports a full queue.
-            // the easiest option (since most of TPE.execute deals with private members)
-            // appears to be to wrap the given queue class with one whose offer
-            // simply delegates to put().  this would be ugly, since it violates both
-            // the spirit and letter of queue.offer, but effective.
-            // so far, though, all our serialized executors use unbounded queues,
-            // so actually implementing this has not been necessary.
+            // since TPE rejects if queue.offer reports a full queue.  we'll just
+            // override this with a handler that retries until it gets in.  ugly, but effective.
+            // (there is an extensive analysis of the options here at
+            //  http://today.java.net/pub/a/today/2008/10/23/creating-a-notifying-blocking-thread-pool-executor.html)
             this.setRejectedExecutionHandler(new RejectedExecutionHandler()
             {
-                public void rejectedExecution(Runnable r, ThreadPoolExecutor executor)
+                public void rejectedExecution(Runnable task, ThreadPoolExecutor executor)
                 {
-                    throw new AssertionError("Blocking serialized executor is not yet implemented");
+                    BlockingQueue<Runnable> queue = executor.getQueue();
+                    while (true)
+                    {
+                        if (executor.isShutdown())
+                            throw new RejectedExecutionException("ThreadPoolExecutor has shut down");
+                        try
+                        {
+                            if (queue.offer(task, 1000, TimeUnit.MILLISECONDS))
+                                break;
+                        }
+                        catch (InterruptedException e)
+                        {
+                            throw new AssertionError(e);    
+                        }
+                    }
                 }
             });
         }
diff --git a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutorTest.java b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutorTest.java
index e69de29b..4ad8caf5 100644
--- a/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutorTest.java
+++ b/incubator/cassandra/branches/cassandra-0.5/test/unit/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutorTest.java
@@ -0,0 +1,40 @@
+package org.apache.cassandra.concurrent;
+
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Test;
+
+import org.apache.cassandra.utils.WrappedRunnable;
+
+public class DebuggableThreadPoolExecutorTest
+{
+    @Test
+    public void testSerialization() throws InterruptedException
+    {
+        LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<Runnable>(1);
+        DebuggableThreadPoolExecutor executor = new DebuggableThreadPoolExecutor(1,
+                                                                                 1,
+                                                                                 Integer.MAX_VALUE,
+                                                                                 TimeUnit.MILLISECONDS,
+                                                                                 q,
+                                                                                 new NamedThreadFactory("TEST"));
+        WrappedRunnable runnable = new WrappedRunnable()
+        {
+            public void runMayThrow() throws InterruptedException
+            {
+                Thread.sleep(50);
+            }
+        };
+        long start = System.currentTimeMillis();
+        for (int i = 0; i < 10; i++)
+        {
+            executor.submit(runnable);
+        }
+        assert q.size() > 0 : q.size();
+        while (executor.getCompletedTaskCount() < 10)
+            continue;
+        long delta = System.currentTimeMillis() - start;
+        assert delta >= 9 * 50 : delta;
+    }
+}
