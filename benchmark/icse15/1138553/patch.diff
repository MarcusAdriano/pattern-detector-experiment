diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java
index e5c823f4..3084c8f2 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java
@@ -55,14 +55,14 @@ public double userSimilarity(long userID1, long userID2) throws TasteException {
     FastIDSet prefs1 = dataModel.getItemIDsFromUser(userID1);
     FastIDSet prefs2 = dataModel.getItemIDsFromUser(userID2);
     
-    int prefs1Size = prefs1.size();
-    int prefs2Size = prefs2.size();
-    int intersectionSize = prefs1Size < prefs2Size ? prefs2.intersectionSize(prefs1) : prefs1
-        .intersectionSize(prefs2);
+    long prefs1Size = prefs1.size();
+    long prefs2Size = prefs2.size();
+    long intersectionSize =
+        prefs1Size < prefs2Size ? prefs2.intersectionSize(prefs1) : prefs1.intersectionSize(prefs2);
     if (intersectionSize == 0) {
       return Double.NaN;
     }
-    int numItems = dataModel.getNumItems();
+    long numItems = dataModel.getNumItems();
     double logLikelihood =
         LogLikelihood.logLikelihoodRatio(intersectionSize,
                                          prefs2Size - intersectionSize,
@@ -74,16 +74,16 @@ public double userSimilarity(long userID1, long userID2) throws TasteException {
   @Override
   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
     DataModel dataModel = getDataModel();
-    int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
-    int numUsers = dataModel.getNumUsers();    
+    long preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
+    long numUsers = dataModel.getNumUsers();
     return doItemSimilarity(itemID1, itemID2, preferring1, numUsers);
   }
 
   @Override
   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
     DataModel dataModel = getDataModel();
-    int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
-    int numUsers = dataModel.getNumUsers();
+    long preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
+    long numUsers = dataModel.getNumUsers();
     int length = itemID2s.length;
     double[] result = new double[length];
     for (int i = 0; i < length; i++) {
@@ -92,13 +92,13 @@ public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
     return result;
   }
 
-  private double doItemSimilarity(long itemID1, long itemID2, int preferring1, int numUsers) throws TasteException {
+  private double doItemSimilarity(long itemID1, long itemID2, long preferring1, long numUsers) throws TasteException {
     DataModel dataModel = getDataModel();
-    int preferring1and2 = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2);
+    long preferring1and2 = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2);
     if (preferring1and2 == 0) {
       return Double.NaN;
     }
-    int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2);
+    long preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2);
     double logLikelihood =
         LogLikelihood.logLikelihoodRatio(preferring1and2,
                                          preferring2 - preferring1and2,
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java
index 2a2c5990..2d03fb94 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java
@@ -32,7 +32,7 @@
    */
   @Override
   public final double similarity(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-      double weightOfVectorB, int numberOfColumns) {
+      double weightOfVectorB, long numberOfColumns) {
 
     double result = doComputeResult(rowA, rowB, cooccurrences, weightOfVectorA, weightOfVectorB, numberOfColumns);
 
@@ -66,14 +66,14 @@ protected static int countElements(Iterator<?> iterator) {
   /**
    * do the actual similarity computation
    *
-   * @see DistributedVectorSimilarity#similarity(int, int, Iterable, double, double, int)
+   * @see DistributedVectorSimilarity#similarity(int, int, Iterable, double, double, long)
    */
   protected abstract double doComputeResult(int rowA,
                                             int rowB,
                                             Iterable<Cooccurrence> cooccurrences,
                                             double weightOfVectorA,
                                             double weightOfVectorB,
-                                            int numberOfColumns);
+                                            long numberOfColumns);
 
   /**
    * vectors have no weight (NaN) by default, subclasses may override this
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCityBlockVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCityBlockVectorSimilarity.java
index 53004977..d5bfe132 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCityBlockVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCityBlockVectorSimilarity.java
@@ -31,7 +31,7 @@ protected double doComputeResult(int rowA,
                                    Iterable<Cooccurrence> cooccurrences,
                                    double weightOfVectorA,
                                    double weightOfVectorB,
-                                   int numberOfColumns) {
+                                   long numberOfColumns) {
     int cooccurrenceCount = countElements(cooccurrences);
     if (cooccurrenceCount == 0) {
       return Double.NaN;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCooccurrenceVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCooccurrenceVectorSimilarity.java
index d6ccf02a..512ba832 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCooccurrenceVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCooccurrenceVectorSimilarity.java
@@ -36,7 +36,7 @@ public double similarity(int rowA,
                            Iterable<Cooccurrence> cooccurrences,
                            double weightOfVectorA,
                            double weightOfVectorB,
-                           int numberOfColumns) {
+                           long numberOfColumns) {
     return AbstractDistributedVectorSimilarity.countElements(cooccurrences);
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedEuclideanDistanceVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedEuclideanDistanceVectorSimilarity.java
index 0bd0eb52..108dc662 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedEuclideanDistanceVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedEuclideanDistanceVectorSimilarity.java
@@ -26,7 +26,7 @@
 
   @Override
   protected double doComputeResult(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-      double weightOfVectorB, int numberOfColumns) {
+      double weightOfVectorB, long numberOfColumns) {
 
     double n = 0.0;
     double sumXYdiff2 = 0.0;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java
index 8a2a4077..9705af9c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java
@@ -29,15 +29,15 @@
 
   @Override
   protected double doComputeResult(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-      double weightOfVectorB, int numberOfColumns) {
+      double weightOfVectorB, long numberOfColumns) {
 
-    int cooccurrenceCount = countElements(cooccurrences);
+    long cooccurrenceCount = countElements(cooccurrences);
     if (cooccurrenceCount == 0) {
       return Double.NaN;
     }
 
-    int occurrencesA = (int) weightOfVectorA;
-    int occurrencesB = (int) weightOfVectorB;
+    long occurrencesA = (long) weightOfVectorA;
+    long occurrencesB = (long) weightOfVectorB;
 
     double logLikelihood =
         LogLikelihood.logLikelihoodRatio(cooccurrenceCount,
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedPearsonCorrelationVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedPearsonCorrelationVectorSimilarity.java
index ba061b24..f86bd02e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedPearsonCorrelationVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedPearsonCorrelationVectorSimilarity.java
@@ -26,7 +26,7 @@
 
   @Override
   protected double doComputeResult(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-      double weightOfVectorB, int numberOfColumns) {
+      double weightOfVectorB, long numberOfColumns) {
 
     int count = 0;
     double sumX = 0.0;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedTanimotoCoefficientVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedTanimotoCoefficientVectorSimilarity.java
index 1e970c71..220d5b0f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedTanimotoCoefficientVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedTanimotoCoefficientVectorSimilarity.java
@@ -27,7 +27,7 @@
 
   @Override
   protected double doComputeResult(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-      double weightOfVectorB, int numberOfColumns) {
+      double weightOfVectorB, long numberOfColumns) {
     double cooccurrenceCount = countElements(cooccurrences);
     if (cooccurrenceCount == 0) {
       return Double.NaN;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredCosineVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredCosineVectorSimilarity.java
index 52017f3d..ef106c2c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredCosineVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredCosineVectorSimilarity.java
@@ -26,7 +26,7 @@
 
   @Override
   protected double doComputeResult(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-      double weightOfVectorB, int numberOfColumns) {
+      double weightOfVectorB, long numberOfColumns) {
 
     int n = 0;
     double sumXY = 0.0;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredZeroAssumingCosineVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredZeroAssumingCosineVectorSimilarity.java
index 1cff8adb..dab78047 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredZeroAssumingCosineVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredZeroAssumingCosineVectorSimilarity.java
@@ -29,7 +29,7 @@
 
   @Override
   protected double doComputeResult(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-      double weightOfVectorB, int numberOfColumns) {
+      double weightOfVectorB, long numberOfColumns) {
 
     double sumXY = 0.0;
     for (Cooccurrence cooccurrence : cooccurrences) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedVectorSimilarity.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedVectorSimilarity.java
index fc7cbfc0..9bb97392 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedVectorSimilarity.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedVectorSimilarity.java
@@ -50,5 +50,5 @@
                     Iterable<Cooccurrence> cooccurrences,
                     double weightOfVectorA,
                     double weightOfVectorB,
-                    int numberOfColumns);
+                    long numberOfColumns);
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java
index eb2a60c0..8a595cf1 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java
@@ -94,33 +94,31 @@ protected void reduce(Gram ngram, Iterable<Gram> values, Context context) throws
       log.warn("Missing head for {}, skipping.", ngram);
       context.getCounter(Skipped.MISSING_HEAD).increment(1);
       return;
-    } else if (gramFreq[1] == -1) {
+    }
+    if (gramFreq[1] == -1) {
       log.warn("Missing tail for {}, skipping", ngram);
       context.getCounter(Skipped.MISSING_TAIL).increment(1);
       return;
     }
 
-    int k11 = ngram.getFrequency(); /* a&b */
-    int k12 = gramFreq[0] - ngram.getFrequency(); /* a&!b */
-    int k21 = gramFreq[1] - ngram.getFrequency(); /* !b&a */
-    int k22 = (int) (ngramTotal - (gramFreq[0] + gramFreq[1] - ngram.getFrequency())); /* !a&!b */
+    long k11 = ngram.getFrequency(); /* a&b */
+    long k12 = gramFreq[0] - ngram.getFrequency(); /* a&!b */
+    long k21 = gramFreq[1] - ngram.getFrequency(); /* !b&a */
+    long k22 = ngramTotal - (gramFreq[0] + gramFreq[1] - ngram.getFrequency()); /* !a&!b */
 
+    double llr;
     try {
-      double llr = ll.logLikelihoodRatio(k11, k12, k21, k22);
-      if (llr < minLLRValue) {
-        context.getCounter(Skipped.LESS_THAN_MIN_LLR).increment(1);
-        return;
-      }
-      DoubleWritable dd = new DoubleWritable(llr);
-      Text t = new Text(ngram.getString());
-      context.write(t, dd);
+      llr = ll.logLikelihoodRatio(k11, k12, k21, k22);
     } catch (IllegalArgumentException ex) {
       context.getCounter(Skipped.LLR_CALCULATION_ERROR).increment(1);
-      log.error("Problem calculating LLR ratio: " + ex.getMessage());
-      log.error("NGram: " + ngram);
-      log.error("HEAD: " + gram[0] + ':' + gramFreq[0]);
-      log.error("TAIL: " + gram[1] + ':' + gramFreq[1]);
-      log.error("k11: " + k11 + " k12: " + k12 + " k21: " + k21 + " k22: " + k22);
+      log.warn("Problem calculating LLR ratio for ngram {}, HEAD {}:{}, TAIL {}:{}, k11/k12/k21/k22: {}/{}/{}/{}",
+          new Object[] {ngram, gram[0], gramFreq[0], gram[1], gramFreq[1], k11, k12, k21, k22}, ex);
+      return;
+    }
+    if (llr < minLLRValue) {
+      context.getCounter(Skipped.LESS_THAN_MIN_LLR).increment(1);
+    } else {
+      context.write(new Text(ngram.getString()), new DoubleWritable(llr));
     }
   }
 
@@ -133,11 +131,8 @@ protected void setup(Context context) throws IOException, InterruptedException {
 
     this.emitUnigrams = conf.getBoolean(CollocDriver.EMIT_UNIGRAMS, CollocDriver.DEFAULT_EMIT_UNIGRAMS);
 
-    if (log.isInfoEnabled()) {
-      log.info("NGram Total is {}", ngramTotal);
-      log.info("Min LLR value is {}", minLLRValue);
-      log.info("Emit Unitgrams is {}", emitUnigrams);
-    }
+    log.info("NGram Total: {}, Min LLR value: {}, Emit Unigrams: {}",
+             new Object[] {ngramTotal, minLLRValue, emitUnigrams});
 
     if (ngramTotal == -1) {
       throw new IllegalStateException("No NGRAM_TOTAL available in job config");
@@ -162,13 +157,13 @@ public LLRReducer() {
    * provide interface so the input to the llr calculation can be captured for validation in unit testing
    */
   public interface LLCallback {
-    double logLikelihoodRatio(int k11, int k12, int k21, int k22);
+    double logLikelihoodRatio(long k11, long k12, long k21, long k22);
   }
 
   /** concrete implementation delegates to LogLikelihood class */
   public static final class ConcreteLLCallback implements LLCallback {
     @Override
-    public double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
+    public double logLikelihoodRatio(long k11, long k12, long k21, long k22) {
       return LogLikelihood.logLikelihoodRatio(k11, k12, k21, k22);
     }
   }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/similarity/TestRowSimilarityJob.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/similarity/TestRowSimilarityJob.java
index fa654036..1829bf81 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/similarity/TestRowSimilarityJob.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/similarity/TestRowSimilarityJob.java
@@ -324,7 +324,7 @@ public void testSmallSampleMatrix() throws Exception {
 
     @Override
     public double similarity(int rowA, int rowB, Iterable<Cooccurrence> cooccurrences, double weightOfVectorA,
-        double weightOfVectorB, int numberOfRows) {
+        double weightOfVectorB, long numberOfRows) {
       if (rowA == rowB) {
         return Double.NaN;
       }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducerTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducerTest.java
index eb3f345f..05edfb43 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducerTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducerTest.java
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
     ll        = EasyMock.createMock(LLCallback.class);
     cl        = new LLCallback() {
       @Override
-      public double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
+      public double logLikelihoodRatio(long k11, long k12, long k21, long k22) {
         log.info("k11:{} k12:{} k21:{} k22:{}", new Object[] {k11, k12, k21, k22});
         return LogLikelihood.logLikelihoodRatio(k11, k12, k21, k22);
       }
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java
index 9634000b..b3a4eae1 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java
@@ -260,9 +260,9 @@ private static OpenBitSet getClusterDocBitset(IndexReader reader,
     return bitset;
   }
 
-  private static double scoreDocumentFrequencies(int inDF, int outDF, int clusterSize, int corpusSize) {
-    int k12 = clusterSize - inDF;
-    int k22 = corpusSize - clusterSize - outDF;
+  private static double scoreDocumentFrequencies(long inDF, long outDF, long clusterSize, long corpusSize) {
+    long k12 = clusterSize - inDF;
+    long k22 = corpusSize - clusterSize - outDF;
 
     return LogLikelihood.logLikelihoodRatio(inDF, k12, outDF, k22);
   }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java
index 0423cc33..04c8db80 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java
@@ -47,10 +47,10 @@ private LogLikelihood() {
    *
    * @return The entropy value for the elements
    */
-  public static double entropy(int... elements) {
+  public static double entropy(long... elements) {
     double sum = 0.0;
     double result = 0.0;
-    for (int element : elements) {
+    for (long element : elements) {
       if (element < 0) {
         throw new IllegalArgumentException("Should not have negative count for entropy computation: (" + element + ')');
       }
@@ -81,7 +81,7 @@ public static double entropy(int... elements) {
    * <p/>
    * Credit to http://tdunning.blogspot.com/2008/03/surprise-and-coincidence.html for the table and the descriptions.
    */
-  public static double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
+  public static double logLikelihoodRatio(long k11, long k12, long k21, long k22) {
     // note that we have counts here, not probabilities, and that the entropy is not normalized.
     double rowEntropy = entropy(k11, k12) + entropy(k21, k22);
     double columnEntropy = entropy(k11, k21) + entropy(k12, k22);
@@ -95,7 +95,7 @@ public static double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
   
   /** 
    * Calculates the root log-likelihood ratio for two events.
-   * See {@link #logLikelihoodRatio(int, int, int, int)}.
+   * See {@link #logLikelihoodRatio(long, long, long, long)}.
 
    * @param k11 The number of times the two events occurred together
    * @param k12 The number of times the second event occurred WITHOUT the first event
@@ -107,7 +107,7 @@ public static double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
    * See discussion of raw vs. root LLR at 
    * http://www.lucidimagination.com/search/document/6dc8709e65a7ced1/llr_scoring_question
    */
-  public static double rootLogLikelihoodRatio(int k11, int k12, int k21, int k22) {
+  public static double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22) {
     double llr = logLikelihoodRatio(k11, k12, k21, k22);
     double sqrt = Math.sqrt(llr);
     if ((double) k11 / (k11 + k12) < (double) k21 / (k21 + k22)) {
