diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
index b4d3d43b..00f048e3 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java
@@ -1812,9 +1812,6 @@ public void writeExternal( ObjectOutput out )
      *
      * Three examples are:
      *
-     *  BOOLEAN: A user can select boolean columns from system tables, but
-     *   s/he is not allowed to create such a column him/herself.
-     *
      *  JAVA_OBJECT: A user can select columns of various java object types
      *   from system tables, but s/he is not allowed to create such a column
      *   him/herself.
@@ -1831,8 +1828,6 @@ public boolean isUserCreatableType() throws StandardException
     {
         switch (typeId.getJDBCTypeId())
         {
-            case Types.BOOLEAN:
-                return false;
             case Types.JAVA_OBJECT:
             	return getTypeId().getBaseTypeId().isAnsiUDT();
             case Types.DECIMAL:
diff --git a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
index cf8ed15e..dc5af65d 100644
--- a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
+++ b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
@@ -1893,6 +1893,31 @@ public void test_5063_updateBytes() throws SQLException {
         rs.close();
     }
 
+    /**
+     * Verify that you can use CREATE TABLE AS SELECT to create
+     * empty tables with BOOLEAN columns.
+     */
+    public void test_5918() throws Exception
+    {
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.execute("create table derby5918_1(b boolean)");
+        s.execute("create table derby5918_2 as select * from derby5918_1 with no data");
+        s.executeUpdate("insert into derby5918_2 values ( true )");
+        
+        assertResults
+            (
+             getConnection(),
+             "select * from derby5918_2",
+             new String[][]
+             {
+                 { "true" },
+             },
+             false
+             );
+    }
+    
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // SQL ROUTINES
diff --git a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java
index 6fc0a75a..d3e08998 100644
--- a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java
+++ b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java
@@ -262,10 +262,6 @@ public void testInvalidDataType() throws Exception
     {
         Statement stmt = createStatement();
 
-        // BOOLEAN
-        assertStatementError("42X71", stmt,
-            "create table t as select systemalias from sys.sysaliases with no data");
-
         // USER (Java Object)
         assertStatementError("42X71", stmt,
             "create table t as select aliasinfo from sys.sysaliases with no data");
