diff --git a/lucene/solr/trunk/src/java/org/apache/solr/core/RequestHandlers.java b/lucene/solr/trunk/src/java/org/apache/solr/core/RequestHandlers.java
index 8ee8a990..fe9ca698 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/core/RequestHandlers.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/core/RequestHandlers.java
@@ -158,8 +158,10 @@ void initHandlersFromConfig( Config config )
           
           SolrRequestHandler old = register( name, handler );
           if( old != null ) {
-            // TODO: SOLR-179?
-            log.warning( "multiple handlers registered on the same path! ignoring: "+old );
+            String msg = "multiple handlers registered on the same path! ignoring: "+old;
+            Throwable t = new SolrException( 500, msg );
+            SolrConfig.severeErrors.add( t );
+            SolrException.logOnce(log,null,t);
           }
           names.put( name, args );
         } 
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/schema/IndexSchema.java b/lucene/solr/trunk/src/java/org/apache/solr/schema/IndexSchema.java
index 35841692..9c74fc32 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/schema/IndexSchema.java
@@ -339,7 +339,15 @@ private void readConfig() {
 
 
         ft.setArgs(this, DOMUtil.toMapExcept(attrs,"name","class"));
-        fieldTypes.put(ft.typeName,ft);
+        FieldType old = fieldTypes.put(ft.typeName,ft);
+        if( old != null ) {
+          String msg = "[schema.xml] Duplicate fieldType definition for '"
+            + ft.typeName + "' ignoring: "+old.toString();
+          
+          Throwable t = new SolrException( 500, msg );
+          SolrException.logOnce(log,null,t);
+          SolrConfig.severeErrors.add( t );
+        }
         log.finest("fieldtype defined: " + ft);
       }
 
@@ -373,7 +381,16 @@ private void readConfig() {
         SchemaField f = SchemaField.create(name,ft,args);
 
         if (node.getNodeName().equals("field")) {
-          fields.put(f.getName(),f);
+          SchemaField old = fields.put(f.getName(),f);
+          if( old != null ) {
+            String msg = "[schema.xml] Duplicate field definition for '"
+              + f.getName() + "' ignoring: "+old.toString();
+            
+            Throwable t = new SolrException( 500, msg );
+            SolrException.logOnce(log,null,t);
+            SolrConfig.severeErrors.add( t );
+          }
+          
           log.fine("field defined: " + f);
           if( f.getDefaultValue() != null ) {
             log.fine(name+" contains default value: " + f.getDefaultValue());
@@ -384,8 +401,24 @@ private void readConfig() {
             requiredFields.add(f);
           }
         } else if (node.getNodeName().equals("dynamicField")) {
+          // make sure nothing else has the same path
+          boolean dup = false;
+          for( DynamicField df : dFields ) {
+            if( df.regex.equals( f.name ) ) {
+              String msg = "[schema.xml] Duplicate DynamicField definition for '"
+                + f.getName() + "' ignoring: "+f.toString();
+              
+              Throwable t = new SolrException( 500, msg );
+              SolrException.logOnce(log,null,t);
+              SolrConfig.severeErrors.add( t );
+              dup = true;
+              break;
+            }
+          }
+          if( !dup ) {
           dFields.add(new DynamicField(f));
           log.fine("dynamic field defined: " + f);
+          }
         } else {
           // we should never get here
           throw new RuntimeException("Unknown field type");
diff --git a/lucene/solr/trunk/src/test/org/apache/solr/schema/BadIndexSchemaTest.java b/lucene/solr/trunk/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
index e69de29b..39a5b58d 100644
--- a/lucene/solr/trunk/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
+++ b/lucene/solr/trunk/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
@@ -0,0 +1,86 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.schema;
+
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.solr.core.SolrConfig;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.util.AbstractSolrTestCase;
+
+/**
+ * @author ryan
+ */
+public class BadIndexSchemaTest extends AbstractSolrTestCase {
+
+  @Override public String getSchemaFile() { return "bad-schema.xml"; }
+  @Override public String getSolrConfigFile() { return "solrconfig.xml"; }
+
+  @Override 
+  public void setUp() throws Exception {
+    super.setUp();
+  }
+  
+  @Override 
+  public void tearDown() throws Exception {
+    super.tearDown();
+  }
+
+  
+  private Throwable findErrorWithSubstring( List<Throwable> err, String v )
+  {
+    for( Throwable t : err ) {
+      if( t.getMessage().indexOf( v ) > 0 ) {
+        return t;
+      }
+    }
+    return null;
+  }
+  
+  
+  public void testSevereErrorsForDuplicateNames() 
+  {
+    SolrCore core = SolrCore.getSolrCore();
+    IndexSchema schema = core.getSchema();
+
+    for( Throwable t : SolrConfig.severeErrors ) {
+      System.out.println( "ERROR:"+t.getMessage() );
+    }
+    
+    assertEquals( 3, SolrConfig.severeErrors.size() );
+
+    List<Throwable> err = new LinkedList<Throwable>();
+    err.addAll( SolrConfig.severeErrors );
+    
+    Throwable t = findErrorWithSubstring( err, "*_twice" );
+    assertNotNull( t );
+    err.remove( t );
+    
+    t = findErrorWithSubstring( err, "ftAgain" );
+    assertNotNull( t );
+    err.remove( t );
+    
+    t = findErrorWithSubstring( err, "fAgain" );
+    assertNotNull( t );
+    err.remove( t );
+
+    // make sure thats all of them
+    assertTrue( err.isEmpty() );
+  }
+}
