diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java
index 5aa00330..a1464633 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java
@@ -141,8 +141,7 @@ protected static Test baseSuite(String name)
     {
         TestSuite suite = new TestSuite(name);
         suite.addTestSuite(Derby5624Test.class);
-        return new CleanDatabaseTestSetup(
-                DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
+        return new CleanDatabaseTestSetup(suite)
         {
             /**
              * Creates the tables used in the test cases.
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsClientTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsClientTest.java
index 04f9d134..5b2f8997 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsClientTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsClientTest.java
@@ -37,6 +37,6 @@ public LobLimitsClientTest(String name) {
     }
 
     public static Test suite() {
-        return TestConfiguration.clientServerDecorator(LobLimitsTest.suite());
+        return (TestConfiguration.clientServerDecorator(LobLimitsTest.suite()));
     }
 }
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsLiteTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsLiteTest.java
index cf503d2b..315d7dfd 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsLiteTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsLiteTest.java
@@ -21,9 +21,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.largedata;
 
+import java.util.Properties;
+
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
index 2d70f4ba..593c54e9 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
@@ -213,11 +213,11 @@ public void test_01_Blob() throws Exception {
         selectUpdateBlob2("BlobTest #6", selectBlob2, selectBlob,
                 BIG_LOB_SZ, 0, 1, DATAFILE);
 
-        deleteTable("BLOBTBL2", 1);
+        deleteAndTruncateTable("BLOBTBL2", 1);
 
         commit();
 
-        deleteTable("BLOBTBL", 3);
+        deleteAndTruncateTable("BLOBTBL", 3);
     }
 
     public void test_02_BlobNegative() throws SQLException {
@@ -384,7 +384,7 @@ public void test_05_ClobNegative() throws Exception {
             // stream length is one less than actual length of the stream
             assertSQLState("XSDA4", sqle);
         }
-        deleteTable("CLOBTBL2", 2);
+        deleteAndTruncateTable("CLOBTBL2", 2);
 
         try {
             // give -ve streamlength
@@ -397,7 +397,7 @@ public void test_05_ClobNegative() throws Exception {
 
         selectClob("ClobTest #12.2", selectClob, BIG_LOB_SZ, 4, 0);
 
-        deleteTable("CLOBTBL", 2);
+        deleteAndTruncateTable("CLOBTBL", 2);
 
         // Negative tests use the setClob API to insert a 4GB clob
 
@@ -422,10 +422,26 @@ public void test_05_ClobNegative() throws Exception {
                 assertSQLState("22003", sqle);
             }
         }
+        rollback();
 
         // ADD NEW TESTS HERE
     }
 
+    //DERBY-5638
+    // Following shutdown will ensure that all the logs are applied to the
+    // database and hence there are no unapplied log files left at the end 
+    // of the suite. 
+    //This test deals will large data objects which can cause us to have 
+    // large log files and if the database is not shutdown at the end of the 
+    // suite, the suite will finish successfully but will leave a database 
+    // directory with large number of big log files. Nightly machines which
+    // run this suite on a regular basis can eventually run out of disk space
+    // if those machines do not delete the database directories from multiple 
+    // runs.
+    public void test_06_shutdownDB() throws Exception {
+        TestConfiguration.getCurrent().shutdownDatabase();
+    }
+
     private void negativeSpaceTruncationTest(String msg)
             throws Exception {
         PreparedStatement insertClob2 =
@@ -824,10 +840,19 @@ private static void compareBlobToFile(InputStream lobstream, String filename)
         assertEquals(file, lobstream);
     }
 
-    private void deleteTable(String table,
+    private void deleteAndTruncateTable(String table,
             int expectedRows) throws SQLException {
-        int count = createStatement().executeUpdate(
+    	Statement s = createStatement();
+        //Keep the delete call to exercise delete of long blobs and clobs.
+    	// This is a separate code path through Derby compared to truncate
+    	// table code path.
+        int count = s.executeUpdate(
                 "DELETE FROM " + JDBC.escape(table));
+        //DERBY-5638
+        //Adding truncate call which will give back the disk space being 
+        // used by the table at commit time rather than wait for test 
+        // infrastructure to drop the table.
+        s.executeUpdate("TRUNCATE TABLE " + JDBC.escape(table));
         commit();
         verifyTest(count, expectedRows, "Rows deleted =");
     }
