diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
index 5d4f1981..1e4333de 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
@@ -171,13 +171,62 @@ public Optimizable modifyAccessPath(JBitSet outerTables,
 		ResultSetNode topNode = (ResultSetNode)modifyAccessPath(outerTables);
 
 		/* Now see if there are any left over predicates; if so, then we
-		 * have to generate a ProjectRestrictNode.  Note: we walk the
-		 * entire chain of UnionNodes (if there is a chain) and see if
-		 * any UnionNode at any level has un-pushed predicates; if so, then
-		 * we use a PRN to enforce the predicate at this, the top-most
-		 * UnionNode.
+		 * have to generate a ProjectRestrictNode.  Note: we want to check
+		 * all SetOpNodes that exist in the subtree rooted at this SetOpNode.
+		 * Since we just modified access paths on this node, it's possible
+		 * that the SetOperatorNode chain (if there was one) is now "broken"
+		 * as a result of the insertion of new nodes.  For example, prior
+		 * to modification of access paths we may have a chain such as:
+		 *
+		 *                          UnionNode (0)
+		 *                          /       \
+		 *                 UnionNode (1)    SelectNode (2)
+		 *                 /        \ 
+		 *      SelectNode (3)     SelectNode (4)
+		 *
+		 * Now if UnionNode(1) did not specify "ALL" then as part of the
+		 * above call to modifyAccessPaths() we will have inserted a
+		 * DistinctNode above it, thus giving:
+		 *
+		 *                          UnionNode (0)
+		 *                          /       \
+		 *                 DistinctNode (5)  SelectNode (2)
+		 *                      |
+		 *                 UnionNode (1)
+		 *                 /        \ 
+		 *      SelectNode (3)     SelectNode (4)
+		 *
+		 * So our chain of UnionNode's has now been "broken" by an intervening
+		 * DistinctNode.  For this reason we can't just walk the chain of
+		 * SetOperatorNodes looking for unpushed predicates (because the
+		 * chain might be broken and then we could miss some nodes). Instead,
+		 * we have to get a collection of all relevant nodes that exist beneath
+		 * this SetOpNode and call hasUnPushedPredicates() on each one.  For
+		 * now we only consider UnionNodes to be "relevant" because those are
+		 * the only ones that might actually have unpushed predicates.
+		 * 
+		 * If we find any UnionNodes that *do* have unpushed predicates then
+		 * we have to use a PRN to enforce the predicate at the level of
+		 * this, the top-most, SetOperatorNode.
 		 */
-		if (hasUnPushedPredicates())
+
+		// Find all UnionNodes in the subtree.
+		CollectNodesVisitor cnv = new CollectNodesVisitor(UnionNode.class);
+		this.accept(cnv);
+		java.util.Vector unions = cnv.getList();
+
+		// Now see if any of them have unpushed predicates.
+		boolean genPRN = false;
+		for (int i = unions.size() - 1; i >= 0; i--)
+		{
+			if (((UnionNode)unions.get(i)).hasUnPushedPredicates())
+			{
+				genPRN = true;
+				break;
+			}
+		}
+
+		if (genPRN)
 		{
 			// When we generate the project restrict node, we pass in the
 			// "pushedPredicates" list because that has the predicates in
@@ -451,34 +500,20 @@ public void pullOptPredicates(
 	 * children both satisfy the criteria for pushing a predicate
 	 * (namely, they reference base tables) but the children's
 	 * children do not (see modifyAccessPaths() above for an example
-	 * of how that can happen).  So this method will walk the chain
-	 * of nodes beneath this one and determine if any SetOperatorNode
-	 * at any level has predicates that were not successfully pushed
-	 * to both of its children (note: this currently only applies
-	 * to UnionNodes).
-	 *
-	 * @return True if any UnionNode (or actually, any SetOperatorNode)
-	 *  in the chain of SetOperatorNodes (starting with this one) has
-	 *  unpushed predicates; false otherwise.
+	 * of how that can happen).  So this method determines whether
+	 * or not this particular SetOperatorNode has predicates which
+	 * were *not* successfully pushed to both of its children (note:
+	 * this currently only applies to UnionNodes).
+	 *
+	 * @return True if this SetOperatorNode has unpushed predicates;
+	 *  false otherwise.
 	 */
 	protected boolean hasUnPushedPredicates()
 	{
 		// Check this node.
-		if (((leftOptPredicates != null) && (leftOptPredicates.size() > 0)) ||
-			((rightOptPredicates != null) && (rightOptPredicates.size() > 0)))
-		{
-			return true;
-		}
-
-		// Now check the children.
-		if ((leftResultSet instanceof SetOperatorNode) &&
-			((SetOperatorNode)leftResultSet).hasUnPushedPredicates())
-		{
-			return true;
-		}
-
-		return ((rightResultSet instanceof SetOperatorNode) &&
-			((SetOperatorNode)rightResultSet).hasUnPushedPredicates());
+		return
+			((leftOptPredicates != null) && (leftOptPredicates.size() > 0)) ||
+			((rightOptPredicates != null) && (rightOptPredicates.size() > 0));
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
index 65019860..5045bde6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
@@ -98,7 +98,27 @@ public Optimizable modifyAccessPath(JBitSet outerTables) throws StandardExceptio
 		if (leftResultSet instanceof FromTable)
 		{
 			if (leftOptimizer != null)
+			{
+				/* We know leftOptimizer's list of Optimizables consists of
+				 * exactly one Optimizable, and we know that the Optimizable
+				 * is actually leftResultSet (see optimizeSource() of this
+				 * class). That said, the following call to modifyAccessPaths()
+				 * will effectively replace leftResultSet as it exists in
+				 * leftOptimizer's list with a "modified" node that *may* be
+				 * different from the original leftResultSet--for example, it
+				 * could be a new DISTINCT node whose child is the original
+				 * leftResultSet.  So after we've modified the node's access
+				 * path(s) we have to explicitly set this.leftResulSet to
+				 * point to the modified node. Otherwise leftResultSet would
+				 * continue to point to the node as it existed *before* it was
+				 * modified, and that could lead to incorrect behavior for
+				 * certain queries.  DERBY-1852.
+				 */
 				leftOptimizer.modifyAccessPaths();
+				leftResultSet = (ResultSetNode)
+					((OptimizerImpl)leftOptimizer)
+						.optimizableList.getOptimizable(0);
+			}
 			else
 			{
 				leftResultSet = 
@@ -115,7 +135,17 @@ public Optimizable modifyAccessPath(JBitSet outerTables) throws StandardExceptio
 		if (rightResultSet instanceof FromTable)
 		{
 			if (rightOptimizer != null)
+			{
+				/* For the same reasons outlined above we need to make sure
+				 * we set rightResultSet to point to the *modified* right result
+				 * set node, which sits at position "0" in rightOptimizer's
+				 * list.
+				 */
 				rightOptimizer.modifyAccessPaths();
+				rightResultSet = (ResultSetNode)
+					((OptimizerImpl)rightOptimizer)
+						.optimizableList.getOptimizable(0);
+			}
 			else
 			{
 				rightResultSet = 
@@ -693,7 +723,27 @@ public ResultSetNode modifyAccessPaths() throws StandardException
 		if (!leftModifyAccessPathsDone)
 		{
 			if (leftOptimizer != null)
+			{
+				/* We know leftOptimizer's list of Optimizables consists of
+				 * exactly one Optimizable, and we know that the Optimizable
+				 * is actually leftResultSet (see optimizeSource() of this
+				 * class). That said, the following call to modifyAccessPaths()
+				 * will effectively replace leftResultSet as it exists in
+				 * leftOptimizer's list with a "modified" node that *may* be
+				 * different from the original leftResultSet--for example, it
+				 * could be a new DISTINCT node whose child is the original
+				 * leftResultSet.  So after we've modified the node's access
+				 * path(s) we have to explicitly set this.leftResulSet to
+				 * point to the modified node. Otherwise leftResultSet would
+				 * continue to point to the node as it existed *before* it was
+				 * modified, and that could lead to incorrect behavior for
+				 * certain queries.  DERBY-1852.
+				 */
 				leftOptimizer.modifyAccessPaths();
+				leftResultSet = (ResultSetNode)
+					((OptimizerImpl)leftOptimizer)
+						.optimizableList.getOptimizable(0);
+			}
 			else
 			{
 				// If this is a SetOperatorNode then we may have pushed
@@ -714,7 +764,17 @@ public ResultSetNode modifyAccessPaths() throws StandardException
 		if (!rightModifyAccessPathsDone)
 		{
 			if (rightOptimizer != null)
+			{
+				/* For the same reasons outlined above we need to make sure
+				 * we set rightResultSet to point to the *modified* right result
+				 * set node, which sits at position "0" in rightOptimizer's
+				 * list.
+				 */
 				rightOptimizer.modifyAccessPaths();
+				rightResultSet = (ResultSetNode)
+					((OptimizerImpl)rightOptimizer)
+						.optimizableList.getOptimizable(0);
+			}
 			else
 			{
 				if (this instanceof SetOperatorNode) {
