diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java
index f79b0fe3..1cb046ea 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java
@@ -17,6 +17,15 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+
 import org.apache.http.params.CoreConnectionPNames;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrRequest;
@@ -41,16 +50,6 @@
 import org.junit.After;
 import org.junit.Before;
 
-import java.io.IOException;
-import java.net.MalformedURLException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
-
 public class ShardSplitTest extends BasicDistributedZkTest {
 
   public static final String SHARD1_0 = SHARD1 + "_0";
@@ -159,7 +158,33 @@ public void run() {
     }
 
     commit();
+    
+    try {
     checkDocCountsAndShardStates(docCounts, numReplicas);
+    } catch (HttpSolrServer.RemoteSolrException e) {
+      if (e.code() != 500) {
+        throw e;
+      }
+      
+      // if we get a 500 error, the split should be retried ... let's wait and see if it works...
+      Slice slice1_0 = null, slice1_1 = null;
+      int i = 0;
+      for (i = 0; i < 60; i++) {
+        ZkStateReader zkStateReader = cloudClient.getZkStateReader();
+        zkStateReader.updateClusterState(true);
+        clusterState = zkStateReader.getClusterState();
+        slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, "shard1_0");
+        slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, "shard1_1");
+        if (slice1_0 != null  && slice1_1 != null) {
+          break;
+        }
+        Thread.sleep(500);
+      }
+
+      if (slice1_0 == null  || slice1_1 == null) {
+        throw e;
+      }
+    }
 
     // todo can't call waitForThingsToLevelOut because it looks for jettys of all shards
     // and the new sub-shards don't have any.
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
index f6dbed96..05f1ecb9 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
@@ -659,7 +659,7 @@ public void setUseMultiPartPost(boolean useMultiPartPost) {
    * status code that may have been returned by the remote server or a 
    * proxy along the way.
    */
-  protected static class RemoteSolrException extends SolrException {
+  public static class RemoteSolrException extends SolrException {
     /**
      * @param code Arbitrary HTTP status code
      * @param msg Exception Message
