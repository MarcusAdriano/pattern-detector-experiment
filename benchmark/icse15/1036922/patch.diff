diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
index 3c9973bd..db3d15b2 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
@@ -77,7 +77,7 @@ public void run()
         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
         try
         {
-            mbs.registerMBean(this, new ObjectName("org.apache.cassandra.db:type=DynamicEndpointSnitch"));
+            mbs.registerMBean(this, new ObjectName("org.apache.cassandra.db:type=DynamicEndpointSnitch,instance="+hashCode()));
         }
         catch (Exception e)
         {
@@ -178,6 +178,8 @@ public void receiveTiming(InetAddress host, Double latency) // this is cheap
 
     private void updateScores() // this is expensive
     {
+        if (!StorageService.instance.isInitialized()) 
+            return;
         if (!registered)
         {
        	    ILatencyPublisher handler = (ILatencyPublisher)MessagingService.instance.getVerbHandler(StorageService.Verb.REQUEST_RESPONSE);
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
index 8c28ad6d..feab8334 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
@@ -196,11 +196,11 @@
     }};
 
 
+    public static final RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor("ScheduledTasks");
+
     private static IPartitioner partitioner_ = DatabaseDescriptor.getPartitioner();
     public static VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner_);
 
-    public static RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor("ScheduledTasks");
-
     public static final StorageService instance = new StorageService();
 
     public static IPartitioner getPartitioner() {
@@ -310,6 +310,11 @@ public void stopClient()
         StageManager.shutdownNow();
     }
 
+    public boolean isInitialized() 
+    { 
+        return initialized; 
+    }
+
     public synchronized void initClient() throws IOException
     {
         if (initialized)
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java
index c7eb9824..daeacf92 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java
@@ -19,10 +19,11 @@
 
 package org.apache.cassandra.locator;
 
+import java.io.IOException;
 import java.net.InetAddress;
-import java.net.UnknownHostException;
 import java.util.ArrayList;
 
+import org.apache.cassandra.service.StorageService;
 import org.junit.Test;
 
 import org.apache.cassandra.utils.FBUtilities;
@@ -30,8 +31,10 @@
 public class DynamicEndpointSnitchTest
 {
     @Test
-    public void testSnitch() throws UnknownHostException, InterruptedException
+    public void testSnitch() throws InterruptedException, IOException
     {
+        // do this because SS needs to be initialized before DES can work properly.
+        StorageService.instance.initClient();
         int sleeptime = 150;
         DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch(new SimpleSnitch());
         InetAddress self = FBUtilities.getLocalAddress();
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/InitClientTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/InitClientTest.java
index e69de29b..025a775b 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/InitClientTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/InitClientTest.java
@@ -0,0 +1,37 @@
+package org.apache.cassandra.service;
+
+import org.junit.Test;
+
+import java.io.IOException;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+public class InitClientTest // extends CleanupHelper
+{
+    @Test
+    public void testInitClientStartup()
+    {
+        try {
+            StorageService.instance.initClient();
+        } catch (IOException ex) {
+            throw new AssertionError(ex.getMessage());
+        }
+    }
+}
