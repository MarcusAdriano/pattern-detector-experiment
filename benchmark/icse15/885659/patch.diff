diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java
index a7297e07..ffae1928 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java
@@ -168,12 +168,7 @@ public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize
 		{
 			// the only difference between getClone and cloneObject is cloneObject does
 			// not objectify a stream.  We use getClone here.  Beetle 4896.
-
-			// DERBY-4413 shows that the value for a generated column will be
-			// null as the result set is computed as part of an INSERT INTO, so
-			// accept a null also.
-			newArray[i] =
-				(origArray[i] != null ? origArray[i].getClone() : null);
+			newArray[i] = origArray[i].getClone();
 		}
 
 		return newArray;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java
index ec6e1b77..89f9ecf3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java
@@ -126,12 +126,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	**/
 	protected boolean columnOrderingNullsLowMap[];
 
-
-	/**
-    Determine whether a column is used for ordering or not.
-	**/
-	private boolean isOrderingColumn[];
-
 	/**
 	The sort observer.  May be null.  Used as a callback.
 	**/
@@ -461,18 +455,8 @@ void checkColumnTypes(DataValueDescriptor[] row)
                 Object col2 = template[colid];
                 if (col1 == null)
 				{
-					if (!isOrderingColumn[colid]) {
-
-						// DERBY-4413 shows that the value for a generated
-						// column will be null as the result set is computed as
-						// part of an INSERT INTO, so accept a null also.
-						// This column would not be part of the sort key.
-
-						continue;
-
-					} else {
-						SanityManager.THROWASSERT("col[" + colid + "] is null");
-					}
+					SanityManager.THROWASSERT(
+						"col[" + colid + "]  is null");
 				}
 						
                 if (!(col1 instanceof CloneableObject))
@@ -562,26 +546,12 @@ public void initialize(
         columnOrderingMap          = new int[columnOrdering.length];
         columnOrderingAscendingMap = new boolean[columnOrdering.length];
         columnOrderingNullsLowMap  = new boolean[columnOrdering.length];
-
-		if (SanityManager.DEBUG) {
-			isOrderingColumn = new boolean[template.length];
-
-			for (int i = 0; i < isOrderingColumn.length; i++) {
-				isOrderingColumn[i] = false;
-			}
-		}
-
 		for (int i = 0; i < columnOrdering.length; i++)
         {
             columnOrderingMap[i] = columnOrdering[i].getColumnId();
             columnOrderingAscendingMap[i] = columnOrdering[i].getIsAscending();
             columnOrderingNullsLowMap[i] = columnOrdering[i].getIsNullsOrderedLow();
-
-			if (SanityManager.DEBUG) {
-				isOrderingColumn[columnOrderingMap[i]] = true;
 			}
-        }
-
 
 		// No inserter or scan yet.
 		this.inserter = null;
