diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetServlet.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetServlet.java
index 3c310838..d17bd8fa 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetServlet.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/drda/NetServlet.java
@@ -518,7 +518,7 @@ private String getParam(HttpServletRequest request, String paramName) throws
 	 *	Start the network server and attempt to connect to it before
 	 *	returning
 	 *
-	 * @param localAppUI	AppUI to use to translate messages
+	 * @param localUtil LocalizedResource to use to translate messages
 	 * @param request HttpServetRequest for error forms
 	 * @param returnMessage	localized continue message for continue button on error form	
 	 * @exception ServletException throws an exception if error in starting the 
@@ -595,7 +595,7 @@ public Object run() throws Exception
 	/**
 	 *	Display an error form
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param request HttpServetRequest for error forms
 	 * @param e		Exception to be displayed
 	 * @param returnMessage	localized continue message for continue button on error form
@@ -612,7 +612,7 @@ private void printErrorForm(LocalizedResource localUtil, HttpServletRequest requ
 	/**
 	 *	Display an error form
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param request HttpServetRequest for error forms
 	 * @param msg	String to be displayed
 	 * @param returnMessage	localized continue message for continue button on error form
@@ -630,7 +630,7 @@ private void printErrorForm(LocalizedResource localUtil, HttpServletRequest requ
 	 *	Display the current Network server status
 	 *
 	 * @param request	HttpServetRequest for  forms
-	 * @param appUI		appUI to use for localizing messages
+	 * @param localUtil		LocalizedResource to use for localizing messages
 	 * @param returnMessage	localized continue message for continue button on error form	
 	 */
 	private void displayCurrentStatus(HttpServletRequest request,
@@ -680,7 +680,7 @@ private boolean getServerStatus()
 	/**
 	 *	Shutdown the network server
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param request HttpServetRequest for  forms
 	 * @param returnMessage	localized continue message for continue button on error form	
 	 * @return true if succeeded; false; otherwise
@@ -701,7 +701,7 @@ private boolean shutdownServer(LocalizedResource localUtil,
 	/**
 	 *	Turn logging of connections on
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param request HttpServetRequest for  forms
 	 * @param returnMessage	localized continue message for continue button on error form	
 	 * @return true if succeeded; false; otherwise
@@ -722,7 +722,7 @@ private boolean logging(LocalizedResource localUtil, boolean val,
 	/**
 	 *	Change tracing for all sessions 
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param val	if true, turn tracing on, if false turn it off
 	 * @param request HttpServetRequest for  forms
 	 * @param returnMessage	localized continue message for continue button on error form	
@@ -744,7 +744,7 @@ private boolean traceAll(LocalizedResource localUtil, boolean val,
 	/**
 	 *	Change tracing for a given session
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param val	if true, turn tracing on, if false turn it off
 	 * @param session	session to trace
 	 * @param request HttpServetRequest for  forms
@@ -768,7 +768,7 @@ private boolean traceSession(LocalizedResource localUtil, boolean val, int sessi
 	/**
 	 * Set trace directory
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param traceDirectory	directory for trace files
 	 * @param request 			HttpServetRequest for  forms
 	 * @param returnMessage		localized continue message for continue 
@@ -801,7 +801,7 @@ private boolean traceDirectory(LocalizedResource localUtil, String traceDirector
 	/**
 	 * Set Network server parameters
 	 *
-	 * @param appUI	AppUI to use to translate messages
+	 * @param localUtil	LocalizedResource to use to translate messages
 	 * @param max				maximum number of threads
 	 * @param slice				time slice for each connection
 	 * @param request 			HttpServetRequest for  forms
@@ -840,7 +840,7 @@ private void setDefaults()
 	 * @param request 			HttpServetRequest for  forms
 	 * @param name				parameter name
 	 * @param fieldKey			Key for the name of the field we're reading.
-	 * @param appUI				appUI to use in localizing messages
+	 * @param localUtil				LocalizedResource to use in localizing messages
 	 * @param returnMessage		localized continue message for continue 
 	 *							button on error form	
 	 */
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DB2jServerImpl.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DB2jServerImpl.java
index 8005aa39..37cbc505 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DB2jServerImpl.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DB2jServerImpl.java
@@ -310,10 +310,9 @@ public DB2jServerImpl() throws Exception
 
 	/**
 	 * Internal constructor for NetworkServerControl API. 
-	 * @ param address - InetAddress to listen on, May not be null. 
-	 * Throws NPE if null
-	 * @ portNumber - portNumber to listen on, -1 use propert or default.
-	 * @ throw Exception on error
+	 * @param address - InetAddress to listen on, May not be null.  Throws NPE if null
+	 * @param portNumber - portNumber to listen on, -1 use propert or default.
+	 * @exception throw Exception on error
 	 * @see NetworkServerControl
 	 */
 	public DB2jServerImpl(InetAddress address, int portNumber) throws Exception
@@ -402,7 +401,7 @@ protected static Driver getDriver()
 	 * Set the output stream for console messages
 	 * If this is set to null, no messages will be written to the console
 	 *
-	 * @param outStream	output stream for console messages
+	 * @param outWriter	output stream for console messages
 	 */
 	public void setLogWriter(PrintWriter outWriter)
 	{
@@ -733,10 +732,6 @@ protected void startDB2j() throws Exception
 	/**
 	 * Shutdown a network server
 	 *
-	 * @param host		machine network server is running on, if null, localhost is used
-	 * @param portNumber	port number server is to use, if <= 0, default port number
-	 *			is used
-	 *
 	 * @exception Exception	throws an exception if an error occurs
 	 */
 	public void shutdown()
@@ -821,9 +816,6 @@ public void ping() throws Exception
 	 * Turn tracing on or off for all sessions
 	 *
 	 * @param on			true to turn tracing on, false to turn tracing off
-	 * @param host		machine network server is running on, if null, localhost is used
-	 * @param portNumber	port number server is to use, if <= 0, default port number
-	 *			is used
 	 *
 	 * @exception Exception	throws an exception if an error occurs
 	 */
@@ -879,9 +871,6 @@ private void consoleTraceMessage(int connNum, boolean on)
 	 * written to DB2j.log each time a connection connects or disconnects.
 	 *
 	 * @param on			true to turn on, false to turn  off
-	 * @param host		machine network server is running on, if null, localhost is used
-	 * @param portNumber	port number server is to use, if <= 0, default port number
-	 *			is used
 	 *
 	 * @exception Exception	throws an exception if an error occurs
 	 */
@@ -1433,7 +1422,7 @@ protected AppRequester getAppRequester(AppRequester appRequester)
 	/**
 	 * Get the server manager level for a given manager
 	 *
-	 * @param manger codepoint for manager
+	 * @param manager codepoint for manager
 	 * @return manager level
 	 */
 	protected int getManagerLevel(int manager)
@@ -1448,7 +1437,7 @@ protected int getManagerLevel(int manager)
 	/**
 	 * Check whether a CCSID code page is supported
 	 *
-	 * @param CCSID to check
+	 * @param ccsid	CCSID to check
 	 * @return true if supported; false otherwise
 	 */
 	protected boolean supportsCCSID(int ccsid)
@@ -2047,7 +2036,7 @@ private int processDashArg(int pos, String[] args)
 	/**
 	 * Is string "on" or "off"
 	 *
-	 * @param string	string to check
+	 * @param arg	string to check
 	 *
 	 * @return  true if string is "on", false if string is "off"
 	 *
@@ -2792,7 +2781,7 @@ private void throwUnexpectedException(Exception e)
 	 * Localize a message given a particular AppUI 
 	 *
 	 * @param msgProp	message key
-	 * @param localAppUI	AppUI to use to localize message
+	 * @param localLangUtil LocalizedResource to use to localize message
 	 * @param args		arguments to message
 	 *
 	 */
@@ -3322,7 +3311,7 @@ public String getErrorLogLocation ()
 	/**
 	 * Add To Session Table - for use by ClientThread, add a new Session to the sessionTable.
 	 *
-	 * @param num	Connection number to register
+	 * @param i	Connection number to register
 	 * @param s	Session to add to the sessionTable
 	 */
 	protected void addToSessionTable(Integer i, Session s)
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
index c9ac2791..9297b874 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
@@ -1071,10 +1071,10 @@ private boolean isEXTDTANull () throws DRDAProtocolException
    /**
     * Convert a range of packed nybbles (up to 9 digits without overflow) to an int.
     * Note that for performance purpose, it does not do array-out-of-bound checking.
-	* @param	buffer to read from
-	* @param	offset in the buffer
-	* @param	start nybble
-	* @param	number of nybbles
+	* @param buffer			buffer to read from
+	* @param offset			offset in the buffer
+	* @param startNybble		start nybble
+	* @param numberOfNybbles	number of nybbles
 	* @return	an int value
     */
     private int packedNybblesToInt (byte[] buffer,
@@ -1108,10 +1108,10 @@ private int packedNybblesToInt (byte[] buffer,
     /**
      * Convert a range of packed nybbles (up to 18 digits without overflow) to a long.
      * Note that for performance purpose, it does not do array-out-of-bound checking.
-	 * @param	buffer to read from
-	 * @param	offset in the buffer
-	 * @param	start nybble
-	 * @param	number of nybbles
+	 * @param buffer		buffer to read from
+	 * @param offset		offset in the buffer
+	 * @param startNybble		start nybble
+	 * @param numberOfNybbles	number of nybbles
 	 * @return	an long value
      */
     private long packedNybblesToLong (byte[] buffer,
@@ -1184,7 +1184,7 @@ protected boolean readBoolean () throws DRDAProtocolException
 	/**
 	 * Read encrypted string
 	 * @param   decryptM  decryption manager
-	 * @param   security mechanism
+	 * @param   securityMechanism security mechanism
 	 * @param   initVector   initialization vector for cipher
 	 * @param   sourcePublicKey  public key (as in Deffie-Hellman algorithm)
 	 *                           from source (encryptor)
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
index c839a7b0..e76c0290 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
@@ -888,7 +888,6 @@ void writeLengthCodePoint (int length, int codePoint)
 	 *
 	 * @param 	codePoint - code point to write
 	 * @param	dataLength - length of object data
-	 * @param	length - number of bytes to write
 	 */
 	protected void writeScalarHeader (int codePoint, int dataLength)
 	{
@@ -1123,7 +1122,7 @@ protected void writeDouble (double v)
 	 *
 	 * @param v value to write
 	 * @param precision Precison of decimal or numeric type
-	 * @param declared scale
+	 * @param scale declared scale
 	 * @exception SQLException thrown if number of digits > 31
 	 */
 	protected void writeBigDecimal (java.math.BigDecimal v, int precision, int scale)
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 85b55f1a..f4a05c22 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -901,7 +901,7 @@ private void processCommands() throws DRDAProtocolException
 	 * a set of chained commands or received separately.  The chaining was originally
 	 * defined as a way to save network costs.
 	 *
- 	 * @param		the SQLException raised
+ 	 * @param e		the SQLException raised
 	 * @exception	DRDAProtocolException
 	 */
 	private void errorInChain(SQLException e) throws DRDAProtocolException
@@ -2364,7 +2364,7 @@ private void writeOPNQRYRM(boolean isDssObject, DRDAStatement stmt)
 	 * Write ENDQRYRM - query process has terminated in such a manner that the
 	 *	query or result set is now closed.  It cannot be resumed with the CNTQRY
 	 *  command or closed with the CLSQRY command
-	 * @param srvCod  Severity code - WARNING or ERROR
+	 * @param svrCod  Severity code - WARNING or ERROR
 	 * @exception DRDAProtocolException
 	 */
 	private void writeENDQRYRM(int svrCod) throws DRDAProtocolException
@@ -3612,7 +3612,7 @@ private void parseRDBCMTOK() throws DRDAProtocolException
 	 * the values sent in the ACCRDB are used.
 	 * Objects may follow in one DSS or in several DSS chained together.
 	 * 
-	 * @param the DRDAStatement to execute
+	 * @param stmt	the DRDAStatement to execute
 	 * @exception DRDAProtocolException, SQLException
 	 */
 	private void parseEXCSQLSTTobjects(DRDAStatement stmt) throws DRDAProtocolException, SQLException
@@ -3753,7 +3753,7 @@ private void writeRSLSETRM(DRDAStatement stmt) throws DRDAProtocolException,SQLE
 	/**
 	 * Parse SQLDTA - SQL program variable data 
 	 * and handle exception.
-	 * @see parseSQLDTA_work
+	 * @see #parseSQLDTA_work
 	 */
 
 	private void parseSQLDTA(DRDAStatement stmt) throws DRDAProtocolException,SQLException
@@ -4139,7 +4139,7 @@ private void readAndSetAllExtParams(DRDAStatement stmt)
 	/**
 	 * Read different types of input parameters and set them in PreparedStatement
 	 * @param i			index of the parameter
-	 * @param ps		associated ps
+	 * @param stmt			associated ps
 	 * @param drdaType	drda type of the parameter
 	 *
 	 * @exception DRDAProtocolException, SQLException
@@ -5184,8 +5184,8 @@ private void writeSQLCAGRP(SQLException e, int sqlcode, int updateCount,
 	 *   SQLRDBNAME; DRDA TYPE VCS; ENVLID 0x32; Length Override 255
 	 *   SQLERRMSG_m; DRDA TYPE VCM; ENVLID 0x3E; Length Override 70
 	 *   SQLERRMSG_s; DRDA TYPE VCS; ENVLID 0x32; Length Override 70
-	 * @param e 	SQLException encountered
-	 * @param sqlcode	sqlcode
+	 * @param nextException SQLException encountered
+	 * @param sqlerrmc sqlcode
 	 * 
 	 * @exception DRDAProtocolException
 	 */
@@ -5432,7 +5432,7 @@ private void writeSQLDIAGCN()
 	 *   SQLDHROW; ROW LID 0xE0; ELEMENT TAKEN 0(all); REP FACTOR 1
 	 *   SQLNUMROW; ROW LID 0x68; ELEMENT TAKEN 0(all); REP FACTOR 1
 	 *
-	 * @param ps prepared statement
+	 * @param stmt	prepared statement
 	 *
 	 * @exception DRDAProtocolException, SQLException
 	 */
@@ -5472,7 +5472,7 @@ else if ((! rtnOutput) && (pmeta != null))
 	/**
 	 * Write QRYDSC - Query Answer Set Description
 	 *
-	 * @param stmt			associated statement
+	 * @param stmt DRDAStatement we are working on
 	 * @param FDODSConly	simply the FDODSC, without the wrap
 	 *
 	 * Instance Variables
@@ -5482,7 +5482,7 @@ else if ((! rtnOutput) && (pmeta != null))
 	 * they must be sent in subsequent QRYDSC.
 	 * If the QRYDSC will not fit into the current block, as many columns as can
 	 * fit are sent and then the remaining are sent in the following blocks.
-	 * @param stmt DRDAStatement we are working on
+	 * 
 	 * @exception DRDAProtocolException, SQLException
 	 */
 	private void writeQRYDSC(DRDAStatement stmt, boolean FDODSConly)
@@ -6712,7 +6712,7 @@ private void verifyInOrderACCSEC_SECCHK(int codePoint, int reqCodePoint)
 	/**
 	 * Database name given under code point doesn't match previous database names
 	 *
-	 * @param codepoint codepoint where the mismatch occurred
+	 * @param codePoint codepoint where the mismatch occurred
  	 *
 	 * @exception DRDAProtocolException
 	 */
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAResultSet.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAResultSet.java
index 386ef5d1..d787e66d 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAResultSet.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAResultSet.java
@@ -150,7 +150,7 @@ protected ResultSet getResultSet()
 
 	/** 
 	 * Set ResultSet DRDA DataTypes
-	 * @param drddaTypes for columns.
+	 * @param value drdaTypes for columns.
 	 **/
 	protected void setRsDRDATypes(int [] value)
 	{
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
index 96050345..b5dafb2c 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAStatement.java
@@ -531,7 +531,7 @@ protected PreparedStatement getPreparedStatement()
 	 * resultSet and then calling getResultSet() or the other access 
 	 * methods to get resultset data.
 	 *
-	 * @ return true if the execution has resultSets
+	 * @return true if the execution has resultSets
 	 */
 	protected boolean execute() throws SQLException
 	{
@@ -691,7 +691,7 @@ protected ResultSet getResultSet()
 	 * Just get the resultset. Don't set it to current
 	 * Assumes resultSet rsnum exists.
 	 *
-	 * @param rsnum - resultSetNumber starting with 0
+	 * @param rsNum resultSetNumber starting with 0
 	 * @return  The result set in the order it was retrieved
 	 *         
 	 *          with getMoreResults()
@@ -738,7 +738,7 @@ protected void setCurrentDrdaResultSet(int rsNum)
 	/**
  	 * Set currentDrdaResultSet 
 	 *
-	 * @String pkgnamcsn  The pkgid section number and unique resultset
+	 * @param pkgnamcsn  The pkgid section number and unique resultset
 	 *                    consistency token
 	 *                 
 	 */
@@ -866,7 +866,7 @@ protected String getResultSetPkgcnstknStr(int rsNum)
 
 	/** 
 	 * Set ResultSet DRDA DataTypes
-	 * @param drddaTypes for columns.
+	 * @param value drdaTypes for columns.
 	 **/
 	protected void setRsDRDATypes(int [] value)
 	{
@@ -886,7 +886,7 @@ protected void setRsDRDATypes(int [] value)
 
 	/** 
 	 * Set ResultSet DRDA DataTypes Lengths
-	 * @param drddaTypes for columns.
+	 * @param value drdaTypes for columns.
 	 **/
 	protected void setRsLens(int [] value)
 	{
@@ -1182,7 +1182,7 @@ protected int getRsLen(int index)
 	/**
 	 * set resultset column data length
 	 * @param index starting with 1
-	 * @value length
+	 * @param value length
 	 */
 	protected void  setRsLen(int index, int value)
 	{
@@ -1483,7 +1483,7 @@ private  void parsePkgidToFindHoldability()
 	 *  BrokeredConnection prepareStatement() method.
 	 *  @param sqlStmt - SQL statement text
 	 *  @param scrollType - scroll type
-	 *  @param concurtype - concurrency type
+	 *  @param concurType - concurrency type
 	 *  @param withHoldCursor - holdability
 	 * 
 	 *  @throws SQLException
@@ -1550,7 +1550,7 @@ protected EmbedParameterSetMetaData getParameterMetaData() throws SQLException
 	 * @param current - flag to pass to Statement.getMoreResults(current)
 	 * @return true if there are more results.
 	 * @throws SQLException
-	 * @see java.sql.Statemen#getMoreResults
+	 * @see java.sql.Statement#getMoreResults
 	 *
 	 */
 	protected boolean getMoreResults(int current) throws SQLException
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java
index 183940e5..c28d662e 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java
@@ -594,8 +594,8 @@ private String syncTypeToString(int syncType)
 
 	/** 
 	 * printable xaflags
-	 * @param - xaflags
-	 * @return - printable xaflags for debug output
+	 * @param xaflags
+	 * @return printable xaflags for debug output
 	 */
 	private String xaflagsToString(int xaflags)
 	{
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
index bac1fd23..61febdee 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/Database.java
@@ -368,7 +368,7 @@ protected void setDrdaID(String drdaID)
 	/**
 	 *  Set the internal isolation level to use for preparing statements.
 	 *  Subsequent prepares will use this isoalation level
-	 * @param internal isolation level 
+	 * @param level internal isolation level 
 	 *
 	 * @throws SQLException
 	 * @see EmbedConnection#setPrepareIsolation
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DecryptionManager.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DecryptionManager.java
index 1feeef73..82992556 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DecryptionManager.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DecryptionManager.java
@@ -196,8 +196,8 @@ public DecryptionManager () throws SQLException
    * EUSRIDPWD - The middle 8 bytes of the server's connection key is used as
    * the token.  Decryption needs to use exactly the same token as encryption.
    *
-   * @param  int     securityMechanism
-   * @param  byte[]  userid or server(this side)'s connection key
+   * @param  securityMechanism security mechanism
+   * @param  initVector  userid or server(this side)'s connection key
    * @return byte[]  the decryption token
    */
   private byte[] calculateDecryptionToken (int securityMechanism, byte[] initVector)
@@ -234,7 +234,7 @@ else if (securityMechanism == 9) {
    * decrypted data in a byte array.
    *
    * @param cipherText        The byte array form userid/password to decrypt.
-   * @param security mechanism
+   * @param securityMechanism security mechanism
    * @param initVector        The byte array which is used to calculate the
    *                          decryption token for initializing the cipher
    * @param sourcePublicKey   application requester (encrypter)'s public key.
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
index aef59497..dfb74c97 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
@@ -92,7 +92,7 @@ protected void setXAResource (XAResource resource)
 	}
 
 	/** Set DRDA id for this connection
-	 * @param drdaId
+	 * @param drdaID
 	 */
 	protected void setDrdaID(String drdaID)
 	{
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java
index 8459d301..e60cd7ae 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java
@@ -77,7 +77,7 @@ public final PooledConnection getPooledConnection() throws SQLException {
 	/**
 		Attempt to establish a database connection.
 
-		@param user the database user on whose behalf the Connection is being made
+		@param username the database user on whose behalf the Connection is being made
 		@param password the user's password
 
 		@return a Connection to the database
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java
index c459e3c9..d51286cf 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java
@@ -418,7 +418,7 @@ public final Connection getConnection() throws SQLException
 	   connection attributes with the same format as the connectionAttributes property.
 
 	 *
-	 * @param user the database user on whose behalf the Connection is 
+	 * @param username the database user on whose behalf the Connection is 
 	 *  being made
 	 * @param password the user's password
 	 * @return  a Connection to the database
diff --git a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/util.java b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/util.java
index eb390fce..938ae0f2 100644
--- a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/util.java
+++ b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/util.java
@@ -195,7 +195,7 @@ static String qualifyResourceName(String resourceName, boolean absolute)
 	  resourceName is not absolute (does not begin with a "/") this qualifies
 	  the name with the "ij.defaultResourcePackage" name.
 
-	  @param String the name of the resource
+	  @param resourceName the name of the resource
 	  @return a buffered stream for the resource if it exists and null otherwise.
 	  */
 	static public InputStream getResourceAsStream(String resourceName) 
@@ -662,9 +662,9 @@ public final Object run() {
 	 * remaining characters on the line become part of the associated
 	 * element string."
 	 *
-	 * @param iStr: An input stream from which the new properties are to be
+	 * @param iStr An input stream from which the new properties are to be
 	 *  loaded (should already be initialized).
-	 * @param prop: A set of properties to which the properties from
+	 * @param prop A set of properties to which the properties from
 	 *  iStr will be added (should already be initialized).
 	 * @return A final properties set consisting of 'prop' plus all
 	 * properties loaded from 'iStr' (with the extra whitespace (if any)
@@ -745,7 +745,7 @@ public static void loadDriver(String driverClass) throws ClassNotFoundException,
 	 * frameworks. So, ulitmately  this function will look at the driver
 	 * rather than the framework.
 	 * 
-	 * @ return true if the framework contains Net or JCC.
+	 * @return true if the framework contains Net or JCC.
 	 */
 	private static boolean isNetFramework()
 	{
diff --git a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain14.java b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain14.java
index a322c1a6..141ae127 100644
--- a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain14.java
+++ b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain14.java
@@ -44,7 +44,6 @@
 	 *
 	 * @param numConnections	The number of connections/users to test.
 	 *
-	 * @return Nothing.
 	 */
 	public utilMain14(int numConnections, LocalizedOutput out)
 		throws ijFatalException
@@ -64,7 +63,6 @@ public utilMain14(int numConnections, LocalizedOutput out)
 	 *							thrown.  ignoreErrors is used for stress
 	 *							tests.
 	 *
-	 * @return Nothing.
 	 */
 	public utilMain14(int numConnections, LocalizedOutput out, Hashtable ignoreErrors)
 		throws ijFatalException
diff --git a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
index 93462747..254ebcb9 100644
--- a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
+++ b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
@@ -181,7 +181,7 @@ private static void pause () {
 
   /**
     prints out the jbms info to the specified AppStreamWriter.
-    @param aw the AppStreamWriter to use. If null, System.out is
+    @param localAW the AppStreamWriter to use. If null, System.out is
     used
   */
 
@@ -222,7 +222,7 @@ private static void reportCloudscape (java.io.PrintWriter localAW) {
     Writes out the relevant info about the Java environment to
     the specified AppStreamWriter.
 
-    @param aw The AppStreamWriter to write info out to. If this is
+    @param localAW The AppStreamWriter to write info out to. If this is
     null, the info is written to System.out
   */
 
@@ -325,7 +325,7 @@ private static void getClasspathInfo (String args[], java.io.PrintWriter aw) {
     Writes out information about the locales with the
     product.
 
-    @param aw the AppStreamWriter to which the info is written. If this
+    @param localAW the AppStreamWriter to which the info is written. If this
     value is null, the info is written to System.out
 
   */
