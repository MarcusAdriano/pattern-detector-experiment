diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java
index e0213380..1d30c559 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java
@@ -792,8 +792,7 @@ final boolean getBoolean(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getBooleanFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "boolean");
+            throw coercionError( "boolean", column );
         }
     }
 
@@ -821,8 +820,7 @@ final byte getByte(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getByteFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "byte");
+            throw coercionError( "byte", column );
         }
     }
 
@@ -849,8 +847,7 @@ final short getShort(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getShortFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "short");
+            throw coercionError( "short", column );
         }
     }
 
@@ -877,8 +874,7 @@ final int getInt(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getIntFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "int");
+            throw coercionError(  "int", column );
         }
     }
 
@@ -905,8 +901,7 @@ final long getLong(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getLongFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "long");
+            throw coercionError( "long", column );
         }
     }
 
@@ -933,8 +928,7 @@ final float getFloat(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getFloatFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "float");
+            throw coercionError( "float", column );
         }
     }
 
@@ -963,8 +957,7 @@ final double getDouble(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getDoubleFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "double");
+            throw coercionError( "double", column );
         }
     }
 
@@ -994,8 +987,7 @@ final double getDouble(int column) throws SqlException {
         case java.sql.Types.LONGVARCHAR:
             return agent_.crossConverters_.getBigDecimalFromString(getVARCHAR(column));
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "java.math.BigDecimal");
+            throw coercionError( "java.math.BigDecimal", column );
         }
     }
 
@@ -1013,8 +1005,7 @@ final double getDouble(int column) throws SqlException {
             return agent_.crossConverters_.
                     getDateFromString(getVARCHAR(column), cal);
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "java.sql.Date");
+            throw coercionError( "java.sql.Date", column );
         }
     }
 
@@ -1032,8 +1023,7 @@ final double getDouble(int column) throws SqlException {
             return agent_.crossConverters_.
                     getTimeFromString(getVARCHAR(column), cal);
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "java.sql.Time");
+            throw coercionError( "java.sql.Time", column );
         }
     }
 
@@ -1054,8 +1044,7 @@ final double getDouble(int column) throws SqlException {
             return agent_.crossConverters_.
                     getTimestampFromString(getVARCHAR(column), cal);
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "java.sql.Timestamp");
+            throw coercionError( "java.sql.Timestamp", column );
         }
     }
 
@@ -1117,8 +1106,7 @@ final String getString(int column) throws SqlException {
                 tempString = c.getSubString(1, (int) c.length());
                 return tempString;
             default:
-                throw new ColumnTypeConversionException(agent_.logWriter_,
-                    "java.sql.Types " + jdbcTypes_[column -1], "String");
+                throw coercionError( "String", column );
             }
         } catch ( SQLException se ) {
             throw new SqlException(se);
@@ -1138,8 +1126,7 @@ final String getString(int column) throws SqlException {
                 byte[] bytes = b.getBytes(1, (int) b.length());
                 return bytes;
             default:
-                throw new ColumnTypeConversionException(agent_.logWriter_,
-                    "java.sql.Types " + jdbcTypes_[column -1], "byte[]");
+                throw coercionError( "byte[]", column );
             }
         } catch ( SQLException se ) {
             throw new SqlException(se);
@@ -1165,8 +1152,7 @@ final String getString(int column) throws SqlException {
                     return b.getBinaryStreamX();
                 }
             default:
-                throw new ColumnTypeConversionException(agent_.logWriter_,
-                    "java.sql.Types " + jdbcTypes_[column -1], "java.io.InputStream");
+                throw coercionError( "java.io.InputStream", column );
         }
     }
 
@@ -1208,8 +1194,7 @@ final String getString(int column) throws SqlException {
             case java.sql.Types.BLOB:
                 return getBinaryStream(column);
             default:
-                throw new ColumnTypeConversionException(agent_.logWriter_,
-                    "java.sql.Types " + jdbcTypes_[column -1], "java.io.InputStream");
+                throw coercionError( "java.io.InputStream", column );
         }
     }
  
@@ -1255,8 +1240,7 @@ final String getString(int column) throws SqlException {
             case java.sql.Types.BLOB:
                 return getBinaryStream(column);
             default:
-                throw new ColumnTypeConversionException(agent_.logWriter_,
-                    "java.sql.Types " + jdbcTypes_[column -1], "UnicodeStream");
+                throw coercionError( "UnicodeStream", column );
             }
         } catch ( SQLException se ) {
             throw new SqlException(se);
@@ -1308,8 +1292,7 @@ final String getString(int column) throws SqlException {
                     		"BLOB", "java.io.Reader", e);
                 }
             default:
-                throw new ColumnTypeConversionException(agent_.logWriter_,
-                    "java.sql.Types " + jdbcTypes_[column -1], "java.io.Reader");
+                throw coercionError( "java.io.Reader", column );
             }
     }
 
@@ -1318,8 +1301,7 @@ final String getString(int column) throws SqlException {
         case Types.BLOB:
             return getBlobColumn_(column, agent_, true);
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "java.sql.Blob");
+            throw coercionError( "java.sql.Blob", column );
         }
     }
 
@@ -1328,8 +1310,7 @@ final String getString(int column) throws SqlException {
         case Types.CLOB:
             return getClobColumn_(column, agent_, true);
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "java.sql.Clob");
+            throw coercionError( "java.sql.Clob", column );
         }
     }
 
@@ -1383,8 +1364,7 @@ public final Object getObject(int column) throws SqlException {
         case java.sql.Types.CLOB:
             return getClobColumn_(column, agent_, true);
         default:
-            throw new ColumnTypeConversionException(agent_.logWriter_,
-                "java.sql.Types " + jdbcTypes_[column -1], "Object");
+            throw coercionError( "Object", column );
         }
     }
 
@@ -1419,6 +1399,13 @@ private final String getStringWithoutConvert(int position, int actualLength) thr
         return new String(charBuffer_, 0, charCount);
     }
 
+    private ColumnTypeConversionException coercionError
+        ( String targetType, int sourceColumn )
+    {
+        return new ColumnTypeConversionException
+                ( agent_.logWriter_, targetType, Types.getTypeString( jdbcTypes_[sourceColumn -1] ));
+    }
+
     public void nullDataForGC() {
         dataBuffer_ = null;
         dataBufferStream_ = null;
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java
index 7f83291c..37b0ddcf 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SqlException.java
@@ -519,11 +519,11 @@ public static void setExceptionFactory (SQLExceptionFactory factory) {
 // for common ResultSet data conversion exceptions.
 
 class ColumnTypeConversionException extends SqlException {
-    ColumnTypeConversionException(LogWriter logWriter, String sourceType,
-        String targetType) {
+    ColumnTypeConversionException(LogWriter logWriter, String targetType,
+        String sourceType) {
         super(logWriter,
             new ClientMessageId(SQLState.LANG_DATA_TYPE_GET_MISMATCH),
-            sourceType, targetType);
+            targetType, sourceType);
     }
 }
 
