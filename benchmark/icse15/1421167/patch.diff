diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
index 1cc64173..8c6289c3 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
@@ -66,7 +66,6 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.document.Document;
 import org.apache.lucene.document.DocumentStoredFieldVisitor;
 import org.apache.lucene.search.FieldDoc;
 import org.apache.lucene.search.ScoreDoc;
@@ -86,6 +85,8 @@
 import org.apache.solr.search.grouping.distributed.command.QueryCommand;
 import org.apache.solr.search.grouping.distributed.command.QueryCommandResult;
 import org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -101,6 +102,8 @@
 
   private final ResponseBuilder rb;
 
+  private static final Logger log = LoggerFactory.getLogger(TopGroupsResultTransformer.class);
+
   public TopGroupsResultTransformer(ResponseBuilder rb) {
     this.rb = rb;
   }
@@ -153,12 +156,24 @@ public NamedList transform(List<Command> data) throws IOException {
         ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];
         int j = 0;
         for (NamedList<Object> document : documents) {
-          Object uniqueId = document.get("id").toString();
+          Object docId = document.get("id");
+          Object uniqueId = null;
+          if (docId != null)
+            uniqueId = docId.toString();
+          else
+            log.warn("doc {} has null 'id'", document);
           Float score = (Float) document.get("score");
           if (score == null) {
             score = Float.NaN;
           }
-          Object[] sortValues = ((List) document.get("sortValues")).toArray();
+          Object[] sortValues = null;
+          Object sortValuesVal = document.get("sortValues");
+          if (sortValuesVal != null) {
+            sortValues = ((List) sortValuesVal).toArray();
+          }
+          else {
+            log.warn("doc {} has null 'sortValues'", document);
+          }
           scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);
         }
         result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));
