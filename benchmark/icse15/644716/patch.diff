diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
index f5abc685..4847d719 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
@@ -99,7 +99,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * true - stop shipping log records
      * false - shipping can continue without interruption.
      */
-    private boolean stopShipping = false;
+    private volatile boolean stopShipping = false;
     
     /**
      * The master controller that initialized this log shipper.
@@ -112,6 +112,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private Object objLSTSync = new Object(); // LST->Log Shippper Thread
     
+    /** Used to synchronize forceFlush calls */
+    private Object forceFlushSemaphore = new Object();
+
+    /** The number of millis a call to forceFlush will wait before giving
+     * up sending a chunk of log to the slave */
+    public static final int DEFAULT_FORCEFLUSH_TIMEOUT = 5000;
+    
     /**
      * Store the log chunk that failed during a previous shipping attempt
      * so that it can be re-shipped to the slave.
@@ -201,6 +208,10 @@ public void run() {
         while (!stopShipping) {
             try {
                 shipALogChunk();
+                synchronized (forceFlushSemaphore) {
+                    // Wake up a thread waiting for forceFlush, if any
+                    forceFlushSemaphore.notify();
+                }
                 //calculate the shipping interval (wait time) based on the
                 //fill information obtained from the log buffer.
                 shippingInterval = calculateSIfromFI();
@@ -310,16 +321,20 @@ public void flushBuffer() throws IOException, StandardException {
      * @throws StandardException If an exception occurs while trying to read
      *                           log records from the log buffer.
      */
-    public void forceFlush() throws IOException, StandardException {
-        if (!stopShipping) {
-            shipALogChunk();
+    public void forceFlush() throws IOException, StandardException 
+    {
+        if (stopShipping) return;
+        synchronized (forceFlushSemaphore) {
+            synchronized (objLSTSync) {
+                // Notify the log shipping thread that
+                // it is time for another send.
+                objLSTSync.notify();
         }
         
-        synchronized(objLSTSync) {
-            //There will still be more log to send after the forceFlush
-            //has sent one chunk.  Notify the log shipping thread that
-            //it is time for another send.
-            objLSTSync.notify();
+            try {
+                forceFlushSemaphore.wait(DEFAULT_FORCEFLUSH_TIMEOUT);
+            } catch (InterruptedException ex) {
+            }
         }
     }
     
@@ -348,7 +363,7 @@ public void flushedInstance(long latestInstanceFlushedToDisk) {
     /**
      * Stop shipping log records. If a ship is currently in progress
      * it will not be interrupted, shipping will stop only after the
-     * current shippment is done.
+     * current shipment is done.
      */
     public void stopLogShipment() {
         stopShipping = true;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java
index 645b2200..b738ec27 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/replication/master/MasterController.java
@@ -413,8 +413,14 @@ public void appendLog(long greatestInstant,
         } catch (LogBufferFullException lbfe) {
             try {
                 logShipper.forceFlush();
-                // There should now be room for this log chunk in the buffer
-                appendLog(greatestInstant, log, logOffset, logLength);
+                // Either the forceFlush succeeded in sending a chunk of log
+                // (making room for this log chunk in the buffer), or
+                // forceFlush did not succeed (in which case replication is
+                // stopped)
+                logBuffer.appendLog(greatestInstant, log,
+                                    logOffset, logLength);
+            } catch (LogBufferFullException lbfe2) {
+                printStackAndStopMaster(lbfe2);
             } catch (IOException ioe) {
                 printStackAndStopMaster(ioe);
             } catch (StandardException se) {
