diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java
index 12fafc29..32cb099c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java
@@ -154,7 +154,7 @@ public static void run(Configuration conf, Path input, Path output,
     Path clustersOut = buildClusters(conf, input, output, measure, t1, t2, t3,
         t4, clusterFilter, runSequential);
     if (runClustering) {
-      clusterData(input, clustersOut, output, clusterClassificationThreshold, runSequential);
+      clusterData(conf, input, clustersOut, output, clusterClassificationThreshold, runSequential);
     }
   }
 
@@ -363,14 +363,16 @@ private static Path buildClustersMR(Configuration conf, Path input,
     return canopyOutputDir;
   }
 
-  private static void clusterData(Path points,
+  private static void clusterData(Configuration conf,
+                                  Path points,
                                   Path canopies,
                                   Path output,
                                   double clusterClassificationThreshold,
                                   boolean runSequential)
     throws IOException, InterruptedException, ClassNotFoundException {
     ClusterClassifier.writePolicy(new CanopyClusteringPolicy(), canopies);
-    ClusterClassificationDriver.run(points,
+    ClusterClassificationDriver.run(conf,
+    		                        points,
                                     output,
                                     new Path(output, PathDirectory.CLUSTERED_POINTS_DIRECTORY),
                                     clusterClassificationThreshold, true, runSequential);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java
index e4237980..a7ad2c90 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java
@@ -86,7 +86,7 @@ public int run(String[] args) throws Exception {
       clusterClassificationThreshold = Double.parseDouble(getOption(DefaultOptionCreator.OUTLIER_THRESHOLD));
     }
     
-    run(input, clustersIn, output, clusterClassificationThreshold, true, runSequential);
+    run(getConf(), input, clustersIn, output, clusterClassificationThreshold, true, runSequential);
     
     return 0;
   }
@@ -125,6 +125,11 @@ public static void main(String[] args) throws Exception {
   public static void run(Path input, Path clusteringOutputPath, Path output, Double clusterClassificationThreshold,
       boolean emitMostLikely, boolean runSequential) throws IOException, InterruptedException, ClassNotFoundException {
     Configuration conf = new Configuration();
+	  run(conf, input, clusteringOutputPath, output, clusterClassificationThreshold, emitMostLikely, runSequential);
+  }
+
+  public static void run(Configuration conf, Path input, Path clusteringOutputPath, Path output, Double clusterClassificationThreshold,
+      boolean emitMostLikely, boolean runSequential) throws IOException, InterruptedException, ClassNotFoundException {
     if (runSequential) {
       classifyClusterSeq(conf, input, clusteringOutputPath, output, clusterClassificationThreshold, emitMostLikely);
     } else {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java
index 2a5cacde..7a83d52d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java
@@ -157,7 +157,8 @@ public static void run(Path input,
                          boolean emitMostLikely,
                          double threshold,
                          boolean runSequential) throws IOException, ClassNotFoundException, InterruptedException {
-    Path clustersOut = buildClusters(new Configuration(),
+	Configuration conf = new Configuration();
+    Path clustersOut = buildClusters(conf,
                                      input,
                                      clustersIn,
                                      output,
@@ -168,7 +169,7 @@ public static void run(Path input,
                                      runSequential);
     if (runClustering) {
       log.info("Clustering ");
-      clusterData(input,
+      clusterData(conf, input,
                   clustersOut,
                   output,
                   measure,
@@ -221,7 +222,8 @@ public static void run(Configuration conf,
         buildClusters(conf, input, clustersIn, output, measure, convergenceDelta, maxIterations, m, runSequential);
     if (runClustering) {
       log.info("Clustering");
-      clusterData(input,
+      clusterData(conf, 
+                  input,
                   clustersOut,
                   output,
                   measure,
@@ -308,7 +310,8 @@ public static Path buildClusters(Configuration conf,
    *          a double threshold value emits all clusters having greater pdf (emitMostLikely = false)
    * @param runSequential if true run in sequential execution mode
    */
-  public static void clusterData(Path input,
+  public static void clusterData(Configuration conf,
+                                 Path input,
                                  Path clustersIn,
                                  Path output,
                                  DistanceMeasure measure,
@@ -320,7 +323,7 @@ public static void clusterData(Path input,
     throws IOException, ClassNotFoundException, InterruptedException {
     
     ClusterClassifier.writePolicy(new FuzzyKMeansClusteringPolicy(m, convergenceDelta), clustersIn);
-    ClusterClassificationDriver.run(input, output, new Path(output, PathDirectory.CLUSTERED_POINTS_DIRECTORY),
+    ClusterClassificationDriver.run(conf, input, output, new Path(output, PathDirectory.CLUSTERED_POINTS_DIRECTORY),
         threshold, emitMostLikely, runSequential);
   }
 }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java
index 921cd382..fea4dd58 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java
@@ -256,7 +256,7 @@ public static void clusterData(Configuration conf, Path input, Path clustersIn,
       log.info("Input: {} Clusters In: {} Out: {} Distance: {}", input, clustersIn, output, measure);
     }
     ClusterClassifier.writePolicy(new KMeansClusteringPolicy(), clustersIn);
-    ClusterClassificationDriver.run(input, output, new Path(output, PathDirectory.CLUSTERED_POINTS_DIRECTORY),
+    ClusterClassificationDriver.run(conf, input, output, new Path(output, PathDirectory.CLUSTERED_POINTS_DIRECTORY),
         clusterClassificationThreshold, true, runSequential);
   }
   
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java
index 7fe128d0..fea7e900 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java
@@ -172,7 +172,7 @@ public static void run(Configuration conf, Path input, Path output,
         kernelProfile, t1, t2, convergenceDelta, maxIterations, runSequential,
         runClustering);
     if (runClustering) {
-      clusterData(inputIsCanopies ? input : new Path(output, Cluster.INITIAL_CLUSTERS_DIR), clustersOut,
+      clusterData(conf, inputIsCanopies ? input : new Path(output, Cluster.INITIAL_CLUSTERS_DIR), clustersOut,
           new Path(output, Cluster.CLUSTERED_POINTS_DIR), runSequential);
     }
   }
@@ -443,6 +443,8 @@ private static void runIterationMR(Configuration conf, Path input,
   /**
    * Run the job using supplied arguments
    * 
+   * @param conf
+   *          configuration for Hadoop job - set to null if running sequentially
    * @param input
    *          the directory pathname for input points
    * @param clustersIn
@@ -452,13 +454,13 @@ private static void runIterationMR(Configuration conf, Path input,
    * @param runSequential
    *          if true run in sequential execution mode
    */
-  public static void clusterData(Path input, Path clustersIn, Path output,
+  public static void clusterData(Configuration conf, Path input, Path clustersIn, Path output,
       boolean runSequential) throws IOException, InterruptedException,
       ClassNotFoundException {
     if (runSequential) {
       clusterDataSeq(input, clustersIn, output);
     } else {
-      clusterDataMR(input, clustersIn, output);
+      clusterDataMR(conf, input, clustersIn, output);
     }
   }
 
@@ -499,9 +501,8 @@ private static void clusterDataSeq(Path input, Path clustersIn, Path output) thr
   /**
    * Cluster the data using Hadoop
    */
-  private static void clusterDataMR(Path input, Path clustersIn, Path output)
+  private static void clusterDataMR(Configuration conf, Path input, Path clustersIn, Path output)
     throws IOException, InterruptedException, ClassNotFoundException {
-    Configuration conf = new Configuration();
     conf.set(STATE_IN_KEY, clustersIn.toString());
     Job job = new Job(conf,
         "Mean Shift Driver running clusterData over input: " + input);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
index d932331a..e9a7f940 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
@@ -160,6 +160,14 @@ protected Path getCombinedTempPath(String directory1, String directory2) {
     return new Path(new Path(tempPath, directory1) + "," + new Path(tempPath, directory2));
   }
 
+  @Override
+  public Configuration getConf() {
+    Configuration result = super.getConf();
+    if (result == null)
+      return new Configuration();
+    return result;
+  }
+
   /** Add an option with no argument whose presence can be checked for using
    *  {@code containsKey} method on the map returned by {@link #parseArguments(String[])};
    */
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java
index b1a330e1..b7304d92 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java
@@ -211,15 +211,18 @@ public static IntArrayList getGroupMembers(int groupId,
   }
   
   /**
+   * @throws ClassNotFoundException 
+ * @throws InterruptedException 
+ * @throws IOException 
+ * @params
+   *    input, output locations, additional parameters like minSupport(3), maxHeapSize(50), numGroups(1000)
+   * @conf
+   *    initial Hadoop configuration to use.
    * 
-   * @param params
-   *          params should contain input and output locations as a string value, the additional parameters
-   *          include minSupport(3), maxHeapSize(50), numGroups(1000)
-   */
-  public static void runPFPGrowth(Parameters params) throws IOException,
+   * */
+  public static void runPFPGrowth(Parameters params, Configuration conf) throws IOException,
                                                     InterruptedException,
                                                     ClassNotFoundException {
-    Configuration conf = new Configuration();
     conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
                                   + "org.apache.hadoop.io.serializer.WritableSerialization");
     startParallelCounting(params, conf);
@@ -240,6 +243,19 @@ public static void runPFPGrowth(Parameters params) throws IOException,
     startAggregating(params, conf);
   }
   
+  /**
+   * 
+   * @param params
+   *          params should contain input and output locations as a string value, the additional parameters
+   *          include minSupport(3), maxHeapSize(50), numGroups(1000)
+   */
+  public static void runPFPGrowth(Parameters params) throws IOException,
+                                                    InterruptedException,
+                                                    ClassNotFoundException {
+    Configuration conf = new Configuration();
+    runPFPGrowth(params, conf);
+  }
+  
   /**
    * Run the aggregation Job to aggregate the different TopK patterns and group each Pattern by the features
    * present in it and thus calculate the final Top K frequent Patterns for each feature
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/solver/DistributedConjugateGradientSolver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/solver/DistributedConjugateGradientSolver.java
index f056b6c0..015defd7 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/solver/DistributedConjugateGradientSolver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/solver/DistributedConjugateGradientSolver.java
@@ -162,7 +162,10 @@ public int run(String[] args) throws Exception {
       if (DistributedConjugateGradientSolver.this.parsedArgs == null) {
         return -1;
       } else {
-        DistributedConjugateGradientSolver.this.setConf(new Configuration());
+        Configuration conf = getConf();
+        if (conf == null)
+          conf = new Configuration();
+        DistributedConjugateGradientSolver.this.setConf(conf);
         return DistributedConjugateGradientSolver.this.run(args);
       }
     }    
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java
index 29c87f1f..e25e3f87 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java
@@ -89,7 +89,7 @@ private void calculateEntropy() throws Exception {
       "-s", "value",
       "--tempDir", getTempPath().toString(),
     };
-    ToolRunner.run(new Entropy(), args);
+    ToolRunner.run(getConf(), new Entropy(), args);
     entropy = readDoubleFromPath(entropyPath);
   }
 
@@ -99,7 +99,7 @@ private void calculateConditionalEntropy() throws Exception {
       "-o", conditionalEntropyPath.toString(),
       "--tempDir", getTempPath().toString(),
     };
-    ToolRunner.run(new ConditionalEntropy(), args);
+    ToolRunner.run(getConf(), new ConditionalEntropy(), args);
     conditionalEntropy = readDoubleFromPath(conditionalEntropyPath);
   }
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGainRatio.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGainRatio.java
index 77978a6f..ac950411 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGainRatio.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGainRatio.java
@@ -39,7 +39,7 @@ public static void main(String[] args) throws Exception {
   @Override
   public int run(String[] args) throws Exception {
     InformationGain job = new InformationGain();
-    ToolRunner.run(job, args);
+    ToolRunner.run(getConf(), job, args);
     informationGain = job.getInformationGain();
     entropy = job.getEntropy();
     informationGainRatio = informationGain / entropy;
