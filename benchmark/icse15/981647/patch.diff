diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index f4520b6a..5352af8c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -231,20 +231,21 @@ public String pretty()
         return cf;
     }
 
-    public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf) throws ConfigurationException
+    public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf)
     {
-        AbstractType comparator = DatabaseDescriptor.getComparator(cf.comparator_type.toString());
+        AbstractType comparator;
         AbstractType subcolumnComparator = null;
-        if (cf.subcomparator_type != null)
-            subcolumnComparator = DatabaseDescriptor.getComparator(cf.subcomparator_type.toString());
-        AbstractReconciler reconciler = null;
+        AbstractReconciler reconciler;
         try
         {
+            comparator = DatabaseDescriptor.getComparator(cf.comparator_type.toString());
+            if (cf.subcomparator_type != null)
+                subcolumnComparator = DatabaseDescriptor.getComparator(cf.subcomparator_type.toString());
             reconciler = (AbstractReconciler)Class.forName(cf.reconciler.toString()).newInstance();
         }
         catch (Exception ex)
         {
-            throw new ConfigurationException("Could not create Reconciler of type " + cf.reconciler, ex);
+            throw new RuntimeException("Could not inflate CFMetaData for " + cf, ex);
         }
         Map<byte[], ColumnDefinition> column_metadata = new TreeMap<byte[], ColumnDefinition>(FBUtilities.byteArrayComparator);
         Iterator<org.apache.cassandra.config.avro.ColumnDef> cditer = cf.column_metadata.iterator();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java
index e5e1b814..d73af7cd 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/ColumnDefinition.java
@@ -65,7 +65,7 @@ public int hashCode()
         return cd;
     }
 
-    public static ColumnDefinition inflate(org.apache.cassandra.config.avro.ColumnDef cd) throws ConfigurationException
+    public static ColumnDefinition inflate(org.apache.cassandra.config.avro.ColumnDef cd)
     {
         byte[] name = new byte[cd.name.remaining()];
         cd.name.get(name, 0, name.length);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
index 3a4267ae..7385d774 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/KSMetaData.java
@@ -92,7 +92,7 @@ public boolean equals(Object obj)
         return ks;
     }
 
-    public static KSMetaData inflate(org.apache.cassandra.config.avro.KsDef ks) throws ConfigurationException
+    public static KSMetaData inflate(org.apache.cassandra.config.avro.KsDef ks)
     {
         Class<AbstractReplicationStrategy> repStratClass;
         try
@@ -101,7 +101,7 @@ public static KSMetaData inflate(org.apache.cassandra.config.avro.KsDef ks) thro
         }
         catch (Exception ex)
         {
-            throw new ConfigurationException("Could not create ReplicationStrategy of type " + ks.strategy_class, ex);
+            throw new RuntimeException("Could not create ReplicationStrategy of type " + ks.strategy_class, ex);
         }
         Map<String, String> strategyOptions = null;
         if (ks.strategy_options != null)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
index 4227a7bd..12ed8b30 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
@@ -102,8 +102,6 @@ public static synchronized void dumpToStorage(UUID version) throws IOException
 
         // deserialize keyspaces using schema
         Collection<KSMetaData> keyspaces = new ArrayList<KSMetaData>();
-        try
-        {
             for (IColumn column : cf.getSortedColumns())
             {
                 if (Arrays.equals(column.name(), DEFINITION_SCHEMA_COLUMN_NAME))
@@ -111,11 +109,6 @@ public static synchronized void dumpToStorage(UUID version) throws IOException
                 org.apache.cassandra.config.avro.KsDef ks = SerDeUtils.<org.apache.cassandra.config.avro.KsDef>deserialize(schema, column.value());
                 keyspaces.add(KSMetaData.inflate(ks));
             }
-        }
-        catch (ConfigurationException e)
-        {
-            throw new IOException(e);
-        }
         return keyspaces;
     }
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
index 4979f7a8..601c8c8c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
@@ -50,15 +50,8 @@ private AddColumnFamily(DataInputStream din) throws IOException
         rm = RowMutation.serializer().deserialize(din);
 
         // deserialize cf
-        try
-        {
             cfm = CFMetaData.inflate(SerDeUtils.<org.apache.cassandra.config.avro.CfDef>deserializeWithSchema(FBUtilities.readShortByteArray(din)));
         }
-        catch (ConfigurationException e)
-        {
-            throw new IOException(e);
-        }
-    }
     
     public AddColumnFamily(CFMetaData cfm) throws ConfigurationException, IOException
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
index 61c36ac1..05b172a5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
@@ -48,15 +48,8 @@ private AddKeyspace(DataInputStream din) throws IOException
         rm = RowMutation.serializer().deserialize(din);
 
         // deserialize ks
-        try
-        {
             ksm = KSMetaData.inflate(SerDeUtils.<org.apache.cassandra.config.avro.KsDef>deserializeWithSchema(FBUtilities.readShortByteArray(din)));
         }
-        catch (ConfigurationException e)
-        {
-            throw new IOException(e);
-        }
-    }
     
     public AddKeyspace(KSMetaData ksm) throws ConfigurationException, IOException
     {
