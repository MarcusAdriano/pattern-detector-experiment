diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/MaterialStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/MaterialStatement.java
index e406394c..0f083dcb 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/MaterialStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/MaterialStatement.java
@@ -61,7 +61,7 @@ public abstract void writeExecuteCall_(boolean outputExpected,
 
     public abstract void markClosedOnServer_();
 
-    public abstract void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException;
+    public abstract void writeSetSpecialRegister_(Section section, java.util.ArrayList sqlsttList) throws SqlException;
 
     public abstract void readSetSpecialRegister_() throws SqlException;
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
index d7e5a506..8c49102b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.shared.common.reference.JDBC30Translation;
 import org.apache.derby.shared.common.reference.SQLState;
+import org.apache.derby.shared.common.sanity.SanityManager;
 
 public class Statement implements java.sql.Statement, StatementCallbackInterface{
 
@@ -225,6 +226,11 @@ private void initResetStatement() throws SqlException {
         if (section_ != null) {
             section_.free();
         }
+        if (setSpecialRegisterSection_ != null) {
+            setSpecialRegisterSection_.free();
+            setSpecialRegisterSection_ = null;
+        }
+
         sqlMode_ = 0;
         sqlUpdateMode_ = 0;
         resultSetMetaData_ = null;
@@ -1296,11 +1302,27 @@ public int getResultSetHoldability() throws SQLException {
     // ----------------------- box car and callback methods ---------------------
     // All callbacks must be client-side only operations.
     // Use of MaterialStatement interface is necessary to avoid multiple inheritance problem in Java.
-    public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException {
-        materialStatement_.writeSetSpecialRegister_(sqlsttList);
+    /**
+     * This variable keeps track of a Section dediacted to
+     * writeSpecialRegister. It gets initialized the first time a
+     * Section is needed, and freed when the Statement is closed.
+     */
+    private Section setSpecialRegisterSection_ = null;
+    public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) 
+        throws SqlException {
+        if (setSpecialRegisterSection_ == null) {
+            setSpecialRegisterSection_ = 
+                agent_.sectionManager_.getDynamicSection
+                (java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT);
+        }
+        materialStatement_.writeSetSpecialRegister_(setSpecialRegisterSection_,
+                                                    sqlsttList);
     }
 
     public void readSetSpecialRegister() throws SqlException {
+        if (SanityManager.DEBUG) {
+            SanityManager.ASSERT(setSpecialRegisterSection_ != null);
+        }
         materialStatement_.readSetSpecialRegister_();
     }
 
@@ -1780,6 +1802,11 @@ void markClosed(boolean removeListener) {
         
         if(removeListener)
         	connection_.openStatements_.remove(this);
+
+        if (setSpecialRegisterSection_ != null) {
+            setSpecialRegisterSection_.free();
+            setSpecialRegisterSection_ = null;
+        }
     }
 
     void markPreparedStatementForAutoGeneratedKeysClosed() {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatement.java
index c6da7ac3..3ff5193a 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatement.java
@@ -108,8 +108,8 @@ protected void finalize() throws java.lang.Throwable {
 
     // ------------------------abstract box car methods-----------------------------------------------
 
-    public void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException {
-        netAgent_.statementRequest_.writeSetSpecialRegister(sqlsttList);
+    public void writeSetSpecialRegister_(Section section, java.util.ArrayList sqlsttList) throws SqlException {
+        netAgent_.statementRequest_.writeSetSpecialRegister(section,sqlsttList);
     }
 
     public void readSetSpecialRegister_() throws SqlException {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
index a1c6b82c..a7902a31 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementRequest.java
@@ -1762,10 +1762,7 @@ private int calculateResultSetFlags() {
         return CodePoint.RSLSETFLG_EXTENDED_SQLDA;
     }
 
-    public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException {
-        Section section =
-                netAgent_.sectionManager_.getDynamicSection(java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT);
-
+    public void writeSetSpecialRegister(Section section, java.util.ArrayList sqlsttList) throws SqlException {
         buildEXCSQLSET(section);
 
         // SQLSTT:
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/StatementRequestInterface.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/StatementRequestInterface.java
index d0efd1ee..d3c3d5d4 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/StatementRequestInterface.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/StatementRequestInterface.java
@@ -88,5 +88,5 @@ public void writeExecuteCall(NetStatement materialStatement,
                                  Object[] inputs) throws SqlException;
 
 
-    public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException;
+    public void writeSetSpecialRegister(Section section, java.util.ArrayList sqlsttList) throws SqlException;
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc30Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc30Test.java
index 932db4fc..a0c2f365 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc30Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc30Test.java
@@ -39,6 +39,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 
 public class StatementJdbc30Test extends BaseJDBCTestCase {
+    private static final String CLIENT_SUITE_NAME = 
+        "StatementJdbc30Test:client";
 
     /**
      * Create a test with the given name.
@@ -61,7 +63,7 @@ public static Test suite() {
         suite.addTest(baseSuite("StatementJdbc30Test:embedded"));
         suite
                 .addTest(TestConfiguration
-                        .clientServerDecorator(baseSuite("StatementJdbc30Test:client")));
+                        .clientServerDecorator(baseSuite(CLIENT_SUITE_NAME)));
 
         return suite;
     }
@@ -71,6 +73,16 @@ private static Test baseSuite(String name) {
 
         suite.addTestSuite(StatementJdbc30Test.class);
 
+        if  (name.equals(CLIENT_SUITE_NAME)) {
+            // These test CAN be run in embedded mode as well, but
+            // they're only meaningful in c/s mode and also take quite
+            // a bit of time to run.
+            suite.addTest(new StatementJdbc30Test
+                          ("xtestMultiExecWithQueryTimeout"));
+            suite.addTest(new StatementJdbc30Test
+                          ("xtestMaxOpenStatementsWithQueryTimeout"));
+        }
+
         return new CleanDatabaseTestSetup(suite) {
             /**
              * Creates the tables used in the test cases.
@@ -277,6 +289,40 @@ public void testExecuteNoAutoGenColumnName() throws SQLException {
         
     }
 
+    /**
+     * DERBY-3198: Verify that a statement can be executed
+     * more than 32000 times, even when query timeout is enabled.
+     */
+    public void xtestMultiExecWithQueryTimeout() throws SQLException {
+        Statement stmt = createStatement();
+        stmt.setQueryTimeout(10);
+        for (int i = 0; i < 33000; ++i) {
+            ResultSet rs = stmt.executeQuery("VALUES(1)");
+            rs.close();
+        }
+    }
+
+    /**
+     * DERBY-3198: Verify that we can have at least 16383 open Statements with
+     * query timeout. With query timeout, each Statement holds on to 2
+     * Section objects until it is closed.
+     */
+    public void xtestMaxOpenStatementsWithQueryTimeout() throws SQLException {
+        Statement[] stmts = new Statement[16500];
+        int i = 0;
+        try {
+            for (; i < 16500; ++i) {
+                stmts[i] = createStatement();
+                stmts[i].setQueryTimeout(10);
+                stmts[i].executeQuery("VALUES(1)");
+            }
+        } catch (SQLException e) {
+            assertSQLState("XJ200",e);
+            assertTrue("16383 >= (i="+ i +")", 16383 >= i);
+        }  
+    }
+
+
     /**
      * Testing stmt.getResultSetHoldability()
      * 
