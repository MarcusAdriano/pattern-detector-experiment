diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java
index 4ef6b5d5..c0d686ef 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java
@@ -111,29 +111,30 @@ public SignatureUpdateProcessor(SolrQueryRequest req,
     public void processAdd(AddUpdateCommand cmd) throws IOException {
       if (enabled) {
         SolrInputDocument doc = cmd.getSolrInputDocument();
+        List<String> currDocSigFields = null;
         if (sigFields == null || sigFields.size() == 0) {
           Collection<String> docFields = doc.getFieldNames();
-          sigFields = new ArrayList<String>(docFields.size());
-          sigFields.addAll(docFields);
-          Collections.sort(sigFields);
+          currDocSigFields = new ArrayList<String>(docFields.size());
+          currDocSigFields.addAll(docFields);
+          Collections.sort(currDocSigFields);
+        } else {
+          currDocSigFields = sigFields;
         }
 
         Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); 
         sig.init(params);
 
-        for (String field : sigFields) {
+        for (String field : currDocSigFields) {
           SolrInputField f = doc.getField(field);
           if (f != null) {
             sig.add(field);
             Object o = f.getValue();
-            if (o instanceof String) {
-              sig.add((String)o);
-            } else if (o instanceof Collection) {
+            if (o instanceof Collection) {
               for (Object oo : (Collection)o) {
-                if (oo instanceof String) {
-                  sig.add((String)oo);
-                }
+                sig.add(String.valueOf(oo));
               }
+            } else {
+              sig.add(String.valueOf(o));
             }
           }
         }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
index d8767421..00c41714 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
@@ -23,15 +23,20 @@
 import java.util.Map;
 
 import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.client.solrj.impl.BinaryRequestWriter;
+import org.apache.solr.client.solrj.request.UpdateRequest;
+import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.params.MultiMapSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.params.UpdateParams;
 import org.apache.solr.common.util.ContentStream;
 import org.apache.solr.common.util.ContentStreamBase;
 import org.apache.solr.core.SolrCore;
+import org.apache.solr.handler.BinaryUpdateRequestHandler;
 import org.apache.solr.handler.XmlUpdateRequestHandler;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequestBase;
+import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.response.SolrQueryResponse;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -42,6 +47,9 @@
  */
 public class SignatureUpdateProcessorFactoryTest extends SolrTestCaseJ4 {
 
+  /** modified by tests as needed */
+  private String chain = "dedupe";
+
   @BeforeClass
   public static void beforeClass() throws Exception {
     initCore("solrconfig.xml", "schema12.xml");
@@ -53,6 +61,7 @@ public void setUp() throws Exception {
     super.setUp();
     clearIndex();
     assertU(commit());
+    chain = "dedupe"; // set the default that most tests expect
   }
   
   void checkNumDocs(int n) {
@@ -64,11 +73,33 @@ void checkNumDocs(int n) {
     }
   }
 
+  @Test
+  public void testDupeAllFieldsDetection() throws Exception {
+    this.chain = "dedupe-allfields";
+    
+    SolrCore core = h.getCore();
+    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(chain);
+    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained
+        .getFactories()[0]);
+    factory.setEnabled(true);
+    assertNotNull(chained);
+
+    addDoc(adoc("v_t", "Hello Dude man!"));
+    addDoc(adoc("v_t", "Hello Dude man!", "name", "name1'"));
+    addDoc(adoc("v_t", "Hello Dude man!", "name", "name2'"));
+
+    addDoc(commit());
+    
+    checkNumDocs(3);
+
+    factory.setEnabled(false);
+  }  
+
   @Test
   public void testDupeDetection() throws Exception {
     SolrCore core = h.getCore();
     UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(
-        "dedupe");
+        this.chain);
     SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained
         .getFactories()[0]);
     factory.setEnabled(true);
@@ -114,7 +145,7 @@ public void testDupeDetection() throws Exception {
   @Test
   public void testMultiThreaded() throws Exception {
     UpdateRequestProcessorChain chained = h.getCore().getUpdateProcessingChain(
-        "dedupe");
+        this.chain);
     SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained
         .getFactories()[0]);
     factory.setEnabled(true);
@@ -190,10 +221,104 @@ public void run() {
     factory.setEnabled(false);
   }
 
+  @Test
+  public void testNonStringFieldsValues() throws Exception {
+    this.chain = "dedupe-allfields";
+    
+    SolrCore core = h.getCore();
+    UpdateRequestProcessorChain chained = core
+        .getUpdateProcessingChain(chain);
+    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained
+        .getFactories()[0]);
+    factory.setEnabled(true);
+    
+    Map<String,String[]> params = new HashMap<String,String[]>();
+    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);
+    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});
+    
+    UpdateRequest ureq = new UpdateRequest();
+    
+    {
+      SolrInputDocument doc = new SolrInputDocument();
+      doc.addField("v_t", "same");
+      doc.addField("weight", 1.0f);
+      doc.addField("ints_is", 34);
+      doc.addField("ints_is", 42);
+      ureq.add(doc);
+    }
+    {
+      SolrInputDocument doc = new SolrInputDocument();
+      doc.addField("v_t", "same");
+      doc.addField("weight", 2.0f);
+      doc.addField("ints_is", 42);
+      doc.addField("ints_is", 66);
+      ureq.add(doc);
+    }
+    {
+      // A and B should have same sig as eachother
+      // even though the particulars of how the the ints_is list are built
+
+      SolrInputDocument docA = new SolrInputDocument();
+      SolrInputDocument docB = new SolrInputDocument();
+
+      UnusualList<Integer> ints = new UnusualList<Integer>(3);
+      for (int val : new int[] {42, 66, 34}) {
+        docA.addField("ints_is", new Integer(val));
+        ints.add(val);
+      }
+      docB.addField("ints_is", ints);
+
+      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {
+        doc.addField("v_t", "same");
+        doc.addField("weight", 3.0f);
+        ureq.add(doc);
+      }
+    }
+    {
+      // now add another doc with the same values as A & B above, 
+      // but diff ints_is collection (diff order)
+      SolrInputDocument doc = new SolrInputDocument();
+      doc.addField("v_t", "same");
+      doc.addField("weight", 3.0f);
+      for (int val : new int[] {66, 42, 34}) {
+        doc.addField("ints_is", new Integer(val));
+      }
+      ureq.add(doc);
+    }
+        
+
+    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);
+    streams.add(new BinaryRequestWriter().getContentStream(ureq));
+    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);
+    try {
+      req.setContentStreams(streams);
+      BinaryUpdateRequestHandler h = new BinaryUpdateRequestHandler();
+      h.handleRequestBody(req, new SolrQueryResponse());
+    } finally {
+      req.close();
+    }
+    
+    addDoc(commit());
+    
+    checkNumDocs(4);
+    
+
+  }
+
+  /** A list with an unusual toString */
+  private static final class UnusualList<T> extends ArrayList<T> {
+    public UnusualList(int size) {
+      super(size);
+    }
+    public String toString() {
+      return "UNUSUAL:" + super.toString();
+    }
+  }
+
   private void addDoc(String doc) throws Exception {
     Map<String, String[]> params = new HashMap<String, String[]>();
     MultiMapSolrParams mmparams = new MultiMapSolrParams(params);
-    params.put(UpdateParams.UPDATE_CHAIN, new String[] { "dedupe" });
+    params.put(UpdateParams.UPDATE_CHAIN, new String[] { this.chain });
     SolrQueryRequestBase req = new SolrQueryRequestBase(h.getCore(),
         (SolrParams) mmparams) {
     };
