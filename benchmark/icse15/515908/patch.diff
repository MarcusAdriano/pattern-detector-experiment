diff --git a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
index 00b365c2..94cbbc93 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -794,7 +794,7 @@ public static String escape(String s) {
     StringBuffer sb = new StringBuffer();
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
-      // NOTE: keep this in sync with _ESCAPED_CHAR below!
+      // These characters are part of the query syntax and must be escaped
       if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'
         || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~'
         || c == '*' || c == '?') {
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
index 5da5b2d1..7514eb0e 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
@@ -220,8 +220,6 @@ else if (curChar == 42)
                   jjCheckNAddTwoStates(25, 26);
                   break;
                case 27:
-                  if ((0x84002f0600000000L & l) == 0L)
-                     break;
                   if (kind > 21)
                      kind = 21;
                   jjCheckNAddTwoStates(25, 26);
@@ -241,8 +239,6 @@ else if (curChar == 42)
                   jjCheckNAddTwoStates(29, 30);
                   break;
                case 31:
-                  if ((0x84002f0600000000L & l) == 0L)
-                     break;
                   if (kind > 18)
                      kind = 18;
                   jjCheckNAddTwoStates(29, 30);
@@ -252,7 +248,6 @@ else if (curChar == 42)
                      jjCheckNAddStates(10, 12);
                   break;
                case 34:
-                  if ((0x84002f0600000000L & l) != 0L)
                      jjCheckNAddStates(10, 12);
                   break;
                default : break;
@@ -267,37 +262,37 @@ else if (curChar < 128)
             switch(jjstateSet[--i])
             {
                case 36:
-                  if ((0x97ffffff97ffffffL & l) != 0L)
+                  if ((0x97ffffff87ffffffL & l) != 0L)
                   {
                      if (kind > 21)
                         kind = 21;
                      jjCheckNAddTwoStates(25, 26);
                   }
-                  if (curChar == 92)
+                  else if (curChar == 92)
                      jjCheckNAddTwoStates(27, 27);
                   break;
                case 0:
-                  if ((0x97ffffff97ffffffL & l) != 0L)
+                  if ((0x97ffffff87ffffffL & l) != 0L)
                   {
                      if (kind > 18)
                         kind = 18;
                      jjCheckNAddStates(0, 4);
                   }
+                  else if (curChar == 92)
+                     jjCheckNAddStates(13, 15);
                   else if (curChar == 126)
                   {
                      if (kind > 19)
                         kind = 19;
                      jjstateSet[jjnewStateCnt++] = 20;
                   }
-                  if ((0x97ffffff97ffffffL & l) != 0L)
+                  if ((0x97ffffff87ffffffL & l) != 0L)
                   {
                      if (kind > 21)
                         kind = 21;
                      jjCheckNAddTwoStates(25, 26);
                   }
-                  if (curChar == 92)
-                     jjCheckNAddStates(13, 15);
-                  else if (curChar == 78)
+                  if (curChar == 78)
                      jjstateSet[jjnewStateCnt++] = 11;
                   else if (curChar == 124)
                      jjstateSet[jjnewStateCnt++] = 8;
@@ -361,14 +356,14 @@ else if (curChar == 65)
                   jjstateSet[jjnewStateCnt++] = 20;
                   break;
                case 24:
-                  if ((0x97ffffff97ffffffL & l) == 0L)
+                  if ((0x97ffffff87ffffffL & l) == 0L)
                      break;
                   if (kind > 21)
                      kind = 21;
                   jjCheckNAddTwoStates(25, 26);
                   break;
                case 25:
-                  if ((0x97ffffff97ffffffL & l) == 0L)
+                  if ((0x97ffffff87ffffffL & l) == 0L)
                      break;
                   if (kind > 21)
                      kind = 21;
@@ -379,21 +374,19 @@ else if (curChar == 65)
                      jjCheckNAddTwoStates(27, 27);
                   break;
                case 27:
-                  if ((0x6800000078000000L & l) == 0L)
-                     break;
                   if (kind > 21)
                      kind = 21;
                   jjCheckNAddTwoStates(25, 26);
                   break;
                case 28:
-                  if ((0x97ffffff97ffffffL & l) == 0L)
+                  if ((0x97ffffff87ffffffL & l) == 0L)
                      break;
                   if (kind > 18)
                      kind = 18;
                   jjCheckNAddStates(0, 4);
                   break;
                case 29:
-                  if ((0x97ffffff97ffffffL & l) == 0L)
+                  if ((0x97ffffff87ffffffL & l) == 0L)
                      break;
                   if (kind > 18)
                      kind = 18;
@@ -404,14 +397,12 @@ else if (curChar == 65)
                      jjCheckNAddTwoStates(31, 31);
                   break;
                case 31:
-                  if ((0x6800000078000000L & l) == 0L)
-                     break;
                   if (kind > 18)
                      kind = 18;
                   jjCheckNAddTwoStates(29, 30);
                   break;
                case 32:
-                  if ((0x97ffffff97ffffffL & l) != 0L)
+                  if ((0x97ffffff87ffffffL & l) != 0L)
                      jjCheckNAddStates(10, 12);
                   break;
                case 33:
@@ -419,7 +410,6 @@ else if (curChar == 65)
                      jjCheckNAddTwoStates(34, 34);
                   break;
                case 34:
-                  if ((0x6800000078000000L & l) != 0L)
                      jjCheckNAddStates(10, 12);
                   break;
                case 35:
@@ -443,6 +433,7 @@ else if (curChar == 65)
             {
                case 36:
                case 25:
+               case 27:
                   if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                      break;
                   if (kind > 21)
@@ -482,6 +473,7 @@ else if (curChar == 65)
                   jjCheckNAddStates(0, 4);
                   break;
                case 29:
+               case 31:
                   if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                      break;
                   if (kind > 18)
@@ -489,6 +481,7 @@ else if (curChar == 65)
                   jjCheckNAddTwoStates(29, 30);
                   break;
                case 32:
+               case 34:
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                      jjCheckNAddStates(10, 12);
                   break;
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index f889eee1..aa4ecec5 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -522,6 +522,8 @@ public void testEscaped() throws Exception {
     //assertQueryEquals("foo \\|| bar", a, "foo \\|| bar");
     //assertQueryEquals("foo \\AND bar", a, "foo \\AND bar");*/
 
+    assertQueryEquals("\\a", a, "a");
+    
     assertQueryEquals("a\\-b:c", a, "a-b:c");
     assertQueryEquals("a\\+b:c", a, "a+b:c");
     assertQueryEquals("a\\:b:c", a, "a:b:c");
@@ -585,6 +587,15 @@ public void testEscaped() throws Exception {
         assertQueryEquals("XY\\u005", a, "XYZ");
         fail("ParseException expected, not thrown");
     } catch (ParseException expected) {}
+    
+    // Tests bug LUCENE-800
+    assertQueryEquals("(item:\\\\ item:ABCD\\\\)", a, "item:\\ item:ABCD\\");
+    assertQueryEquals("\\*", a, "*");
+    assertQueryEquals("\\\\", a, "\\");  // escaped backslash
+    try {
+      assertQueryEquals("\\", a, "\\");
+      fail("ParseException expected not thrown (backslash must be escaped)");
+    } catch (ParseException expected) {}
   }
 
   public void testQueryStringEscaping() throws Exception {
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java
index f44900af..a454d05a 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java
@@ -170,13 +170,13 @@ public void testParsingAndSearching() throws Exception {
     QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());
     qp.setAllowLeadingWildcard(true);
     String docs[] = {
-        "abcdefg1",
-        "hijklmn1",
-        "opqrstu1",
+        "\\ abcdefg1",
+        "\\79 hijklmn1",
+        "\\\\ opqrstu1",
     };
     // queries that should find all docs
     String matchAll[] = {
-        "*", "*1", "**1", "*?", "*?1", "?*1", "**", "***",
+        "*", "*1", "**1", "*?", "*?1", "?*1", "**", "***", "\\\\*"
     };
     // queries that should find no docs
     String matchNone[] = {
@@ -184,9 +184,9 @@ public void testParsingAndSearching() throws Exception {
     };
     // queries that should be parsed to prefix queries
     String matchOneDocPrefix[][] = {
-        {"a*", "ab*", "abc*"}, // these should find only doc 0 
-        {"h*", "hi*", "hij*"}, // these should find only doc 1
-        {"o*", "op*", "opq*"}, // these should find only doc 2
+        {"a*", "ab*", "abc*", }, // these should find only doc 0 
+        {"h*", "hi*", "hij*", "\\\\7*"}, // these should find only doc 1
+        {"o*", "op*", "opq*", "\\\\\\\\*"}, // these should find only doc 2
     };
     // queries that should be parsed to wildcard queries
     String matchOneDocWild[][] = {
@@ -200,7 +200,7 @@ public void testParsingAndSearching() throws Exception {
     IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer());
     for (int i = 0; i < docs.length; i++) {
       Document doc = new Document();
-      doc.add(new Field(field,docs[i],Store.NO,Index.UN_TOKENIZED));
+      doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));
       iw.addDocument(doc);
     }
     iw.close();
