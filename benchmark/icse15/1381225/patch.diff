diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java
index 6a78d9a7..53cb7309 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java
@@ -19,6 +19,7 @@
 import java.io.InputStream;
 import java.net.URISyntaxException;
 import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -259,14 +260,34 @@ public Subsystem install(String location, InputStream content) {
 	@Override
 	public void start() {
 		SecurityManager.checkExecutePermission(this);
+		// Changing the autostart setting must be privileged because of file IO.
+		// It cannot be done within SartAction because we only want to change it
+		// on an explicit start operation but StartAction is also used for
+		// implicit operations.
+		AccessController.doPrivileged(new PrivilegedAction<Object>() {
+			@Override
+			public Object run() {
 		setAutostart(true);
+				return null;
+			}
+		});
 		AccessController.doPrivileged(new StartAction(this, this, this));
 	}
 
 	@Override
 	public void stop() {
 		SecurityManager.checkExecutePermission(this);
+		// Changing the autostart setting must be privileged because of file IO.
+		// It cannot be done within StopAction because we only want to change it
+		// on an explicit stop operation but StopAction is also used for
+		// implicit operations.
+		AccessController.doPrivileged(new PrivilegedAction<Object>() {
+			@Override
+			public Object run() {
 		setAutostart(false);
+				return null;
+			}
+		});
 		AccessController.doPrivileged(new StopAction(this, this, !isRoot()));
 	}
 
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
index 3b050289..7590663a 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
@@ -237,6 +237,8 @@ private static void setExportIsolationPolicy(RegionFilterBuilder builder, Subsys
 	
 	private void startBundleResource(Resource resource, Coordination coordination) throws BundleException {
 		if (target.isRoot())
+			// Starting the root subsystem should not affect bundles within the
+			// root region.
 			return;
 		final Bundle bundle = ((BundleRevision)resource).getBundle();
 		if ((bundle.getState() & (Bundle.STARTING | Bundle.ACTIVE)) != 0)
