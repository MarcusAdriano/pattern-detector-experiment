diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassInstantiationException.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassInstantiationException.java
index 54a3df60..10f92605 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassInstantiationException.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassInstantiationException.java
@@ -25,9 +25,9 @@
   /**
    * 
    */
-  private static final long serialVersionUID = -2303296601108980837L;
+  private static final long serialVersionUID = -2303296601108980838L;
 
-  public ProxyClassInstantiationException(Class<?> clazz, Exception e)
+  public ProxyClassInstantiationException(Class<?> clazz, Throwable e)
   {
     super(clazz, e);
   }
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
index 70288578..02e1f342 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
@@ -23,6 +23,7 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Modifier;
 
+import org.apache.aries.proxy.impl.NLS;
 import org.apache.aries.proxy.impl.ProxyUtils;
 import org.objectweb.asm.AnnotationVisitor;
 import org.objectweb.asm.Attribute;
@@ -143,19 +144,31 @@ public void visit(int version, int access, String name, String signature, String
     }
     else {
         try {
-            //if the superclass has a no-arg constructor that we can call, we need to call it
-            // otherwise invoke the java.lang.Object no args constructor.  However, that will fail 
-            // on the most recent versions of the JDK (1.6.0_u34 and 1.7.0_u5 and newer).  For the
-            // newer JDK's, there is NOTHING we can do and the proxy will fail.
+            // if the superclass has a no-arg constructor that we can call,
+            // we need to call it
+            // otherwise invoke the java.lang.Object no args constructor.
+            // on the most recent versions of the JDK (1.6.0_u34 and
+            // 1.7.0_u5 and newer). For the
+            // newer JDK's, there is NOTHING we can do and the proxy will
+            // fail.
             Constructor<?> cons = superclassClass.getDeclaredConstructor();
             if (!Modifier.isPrivate(cons.getModifiers())) {
+               // This should work ...
                 methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>", Type.VOID_TYPE, NO_ARGS));
             } else {
+               // We have a private constructor, so this may work, but not on
+               // recent HotSpot VMs
+               LOGGER.debug(NLS.MESSAGES.getMessage("no.nonprivate.constructor", superclassClass.getName()));
                 methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
             }
-        } catch (Exception e) {
+
+         } catch (NoSuchMethodException e) {
+            // There's no no-args constructor, so may work, but not on recent
+            // HotSpot VMs
+            LOGGER.debug(NLS.MESSAGES.getMessage("no.noargs.constructor", superclassClass.getName()));
             methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
         }
+       
     }
     // call from the constructor to setInvocationHandler
     Method setter = new Method("setInvocationHandler", Type.VOID_TYPE, new Type[] { IH_TYPE });
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
index 547925db..b95e70fc 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
@@ -37,6 +37,7 @@
 
 import org.apache.aries.proxy.FinalModifierException;
 import org.apache.aries.proxy.UnableToProxyException;
+import org.apache.aries.proxy.impl.NLS;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
@@ -174,6 +175,10 @@ public static Object newProxySubclassInstance(Class<?> classToProxy, InvocationH
     } catch (IllegalAccessException iae) {
       LOGGER.debug(Constants.LOG_EXCEPTION, iae);
       throw new ProxyClassInstantiationException(classToProxy, iae);
+    } catch (VerifyError ve) {
+        LOGGER.info(NLS.MESSAGES.getMessage("no.nonprivate.noargs.constructor", classToProxy));
+        LOGGER.debug(Constants.LOG_EXCEPTION, ve);
+        throw new ProxyClassInstantiationException(classToProxy, ve);
     }
 
     LOGGER.debug(Constants.LOG_EXIT, "newProxySubclassInstance", proxySubclassInstance);
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
index 335c822d..43eb7dd3 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
@@ -164,6 +164,7 @@ public void testFinalClass() throws Exception
    * Test a private constructor
    */
   @Test
+  @org.junit.Ignore("Fails on JDK's 1.6.0_u33 and newer as you cannot call a private constructor from subclass")
   public void testPrivateConstructor() throws Exception
   {
     Object o = ProxySubclassGenerator.newProxySubclassInstance(
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java
index 0bca8274..1bf0ee5c 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java
@@ -61,6 +61,15 @@ public void setReturn(Object o) {
     
     private final String message;
     
+    /**
+     * On HotSpot VMs newer than 1.6 u33, we can only generate subclass proxies for classes
+     * with a no-args constructor.
+     */
+    protected TestDelegate() {
+        super();
+        this.message = null;
+      }
+
     public TestDelegate(String message) {
       super();
       this.message = message;
