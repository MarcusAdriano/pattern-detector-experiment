diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index fc76d307..a2a62b8a 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -131,6 +131,8 @@
     private static double commitLogSyncBatchMS_;
     private static int commitLogSyncPeriodMS_;
 
+    private static boolean snapshotBeforeCompaction_;
+
     static
     {
         try
@@ -320,18 +322,31 @@ else if (commitLogSync_ == CommitLogSync.batch)
             String framedRaw = xmlUtils.getNodeValue("/Storage/ThriftFramedTransport");
             if (framedRaw != null)
             {
-                if (framedRaw.compareToIgnoreCase("true") == 0 || 
-                        framedRaw.compareToIgnoreCase("false") == 0)
+                if (framedRaw.equalsIgnoreCase("true") || framedRaw.equalsIgnoreCase("false"))
                 {
                     thriftFramed_ = Boolean.valueOf(framedRaw);
                 }
                 else
                 {
-                    throw new ConfigurationException("Unrecognized value " + 
-                            "for ThriftFramedTransport.  Use 'true' or 'false'."); 
+                    throw new ConfigurationException("Unrecognized value for ThriftFramedTransport.  Use 'true' or 'false'.");
                 }
             }
             
+            /* snapshot-before-compaction.  defaults to false */
+            String sbc = xmlUtils.getNodeValue("/Storage/SnapshotBeforeCompaction");
+            if (sbc != null)
+            {
+                if (sbc.equalsIgnoreCase("true") || sbc.equalsIgnoreCase("false"))
+                {
+                    if (logger_.isDebugEnabled())
+                        logger_.debug("setting snapshotBeforeCompaction to " + sbc);
+                    snapshotBeforeCompaction_ = Boolean.valueOf(sbc);
+                }
+                else
+                {
+                    throw new ConfigurationException("Unrecognized value for SnapshotBeforeCompaction.  Use 'true' or 'false'.");
+                }
+            }
 
             /* Number of days to keep the memtable around w/o flushing */
             String lifetime = xmlUtils.getNodeValue("/Storage/MemtableLifetimeInDays");
@@ -1018,4 +1033,9 @@ public static int getBMTThreshold()
     {
         return bmtThreshold_;
     }
+
+    public static boolean isSnapshotBeforeCompaction()
+    {
+        return snapshotBeforeCompaction_;
+    }
 }
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 05ce4b7a..419e4872 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -409,7 +409,6 @@ public void forceFlush()
 
     void forceBlockingFlush() throws IOException, ExecutionException, InterruptedException
     {
-        Memtable oldMemtable = getMemtableThreadSafe();
         forceFlush();
         // block for flush to finish by adding a no-op action to the flush executorservice
         // and waiting for that to finish.  (this works since flush ES is single-threaded.)
@@ -420,10 +419,6 @@ public void run()
             }
         });
         f.get();
-        /* this assert is not threadsafe -- the memtable could have been clean when forceFlush
-           checked it, but dirty now thanks to another thread.  But as long as we are only
-           calling this from single-threaded test code it is useful to have as a sanity check. */
-        assert oldMemtable.isFlushed() || oldMemtable.isClean(); 
     }
 
     public void forceFlushBinary()
@@ -1012,6 +1007,8 @@ boolean doFileAntiCompaction(List<String> files, List<Range> ranges, EndPoint ta
     */
     private int doFileCompaction(List<String> files, int minBufferSize) throws IOException
     {
+        if (DatabaseDescriptor.isSnapshotBeforeCompaction())
+            Table.open(table_).snapshot("compact-" + columnFamily_);
         logger_.info("Compacting [" + StringUtils.join(files, ",") + "]");
         String compactionFileLocation = DatabaseDescriptor.getDataFileLocationForTable(table_, getExpectedCompactedFileSize(files));
         // If the compaction file path is null that means we have no space left for this compaction.
@@ -1549,6 +1546,19 @@ public AbstractType getComparator()
      */
     public void snapshot(String snapshotName) throws IOException
     {
+        try
+        {
+            forceBlockingFlush();
+        }
+        catch (ExecutionException e)
+        {
+            throw new RuntimeException(e);
+        }
+        catch (InterruptedException e)
+        {
+            throw new AssertionError(e);
+        }
+
         sstableLock_.readLock().lock();
         try
         {
