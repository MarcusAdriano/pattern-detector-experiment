diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index cc02be5a..ee6bb1ef 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -885,6 +885,7 @@ private void closeInternal(boolean waitForMerges, boolean doFlush) throws IOExce
 
       docWriter.close();
 
+      try {
       // Only allow a new merge to be triggered if we are
       // going to wait for merges:
       if (doFlush) {
@@ -893,6 +894,9 @@ private void closeInternal(boolean waitForMerges, boolean doFlush) throws IOExce
         docWriter.abort(); // already closed
       }
 
+      } finally {
+        // clean up merge scheduler in all cases, although flushing may have failed:
+      
       if (waitForMerges) {
         try {
           // Give merge scheduler last chance to run, in case
@@ -901,6 +905,9 @@ private void closeInternal(boolean waitForMerges, boolean doFlush) throws IOExce
         } catch (ThreadInterruptedException tie) {
           // ignore any interruption, does not matter
           interrupted = true;
+            if (infoStream.isEnabled("IW")) {
+              infoStream.message("IW", "interrupted while waiting for final merges");
+            }
         }
       }
       
@@ -916,6 +923,9 @@ private void closeInternal(boolean waitForMerges, boolean doFlush) throws IOExce
             // next call to finishMerges will pass false,
             // so it will not wait
             interrupted = true;
+              if (infoStream.isEnabled("IW")) {
+                infoStream.message("IW", "interrupted while waiting for merges to finish");
+              }
           }
         }
         stopMerges = true;
@@ -923,6 +933,7 @@ private void closeInternal(boolean waitForMerges, boolean doFlush) throws IOExce
       
       // shutdown scheduler and all threads (this call is not interruptible):
       mergeScheduler.close();
+      }
 
       if (infoStream.isEnabled("IW")) {
         infoStream.message("IW", "now call final commit()");
