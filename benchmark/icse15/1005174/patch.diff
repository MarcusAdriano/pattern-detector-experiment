diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index b75795de..4bce7d63 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -354,7 +354,7 @@ public void apply(RowMutation mutation, Object serializedMutation, boolean write
                 SortedSet<byte[]> mutatedIndexedColumns = null;
                 for (byte[] column : cfs.getIndexedColumns())
                 {
-                    if (cf.getColumnNames().contains(column))
+                    if (cf.getColumnNames().contains(column) || cf.isMarkedForDelete())
                     {
                         if (mutatedIndexedColumns == null)
                             mutatedIndexedColumns = new TreeSet<byte[]>(FBUtilities.byteArrayComparator);
@@ -367,8 +367,12 @@ public void apply(RowMutation mutation, Object serializedMutation, boolean write
                     ColumnFamily oldIndexedColumns = null;
                     if (mutatedIndexedColumns != null)
                     {
+                        // with the raw data CF, we can just apply every update in any order and let
+                        // read-time resolution throw out obsolete versions, thus avoiding read-before-write.
+                        // but for indexed data we need to make sure that we're not creating index entries
+                        // for obsolete writes.
                         oldIndexedColumns = readCurrentIndexedColumns(key, cfs, mutatedIndexedColumns);
-                        ignoreObsoleteMutations(cf, cfs.metadata.reconciler, mutatedIndexedColumns, oldIndexedColumns);
+                        ignoreObsoleteMutations(cf, mutatedIndexedColumns, oldIndexedColumns);
                     }
 
                     Memtable fullMemtable = cfs.apply(key, cf);
@@ -402,14 +406,22 @@ public void apply(RowMutation mutation, Object serializedMutation, boolean write
         return memtablesToFlush;
     }
 
-    private static void ignoreObsoleteMutations(ColumnFamily cf, AbstractReconciler reconciler, SortedSet<byte[]> mutatedIndexedColumns, ColumnFamily oldIndexedColumns)
+    private static void ignoreObsoleteMutations(ColumnFamily cf, SortedSet<byte[]> mutatedIndexedColumns, ColumnFamily oldIndexedColumns)
     {
         if (oldIndexedColumns == null)
             return;
 
+        ColumnFamily cf2 = cf.cloneMe();
         for (IColumn oldColumn : oldIndexedColumns)
         {
-            if (reconciler.reconcile((Column) oldColumn, (Column) cf.getColumn(oldColumn.name())).equals(oldColumn))
+            cf2.addColumn(oldColumn);
+        }
+        ColumnFamily resolved = ColumnFamilyStore.removeDeleted(cf2, Integer.MAX_VALUE);
+
+        for (IColumn oldColumn : oldIndexedColumns)
+        {
+            IColumn resolvedColumn = resolved == null ? null : resolved.getColumn(oldColumn.name());
+            if (resolvedColumn != null && resolvedColumn.equals(oldColumn))
             {
                 cf.remove(oldColumn.name());
                 mutatedIndexedColumns.remove(oldColumn.name());
@@ -424,6 +436,10 @@ private static ColumnFamily readCurrentIndexedColumns(DecoratedKey key, ColumnFa
         return cfs.getColumnFamily(filter);
     }
 
+    /**
+     * removes obsolete index entries and creates new ones for the given row key and mutated columns.
+     * @return list of full (index CF) memtables
+     */
     private static List<Memtable> applyIndexUpdates(byte[] key,
                                                     ColumnFamily cf,
                                                     ColumnFamilyStore cfs,
@@ -436,6 +452,9 @@ private static ColumnFamily readCurrentIndexedColumns(DecoratedKey key, ColumnFa
         for (byte[] columnName : mutatedIndexedColumns)
         {
             IColumn column = cf.getColumn(columnName);
+            if (column == null || column.isMarkedForDelete())
+                continue; // null column == row deletion
+
             DecoratedKey<LocalToken> valueKey = cfs.getIndexKeyFor(columnName, column.value());
             ColumnFamily cfi = cfs.newIndexedColumnFamily(columnName);
             if (column instanceof ExpiringColumn)
@@ -444,7 +463,9 @@ private static ColumnFamily readCurrentIndexedColumns(DecoratedKey key, ColumnFa
                 cfi.addColumn(new ExpiringColumn(key, ArrayUtils.EMPTY_BYTE_ARRAY, ec.clock(), ec.getTimeToLive(), ec.getLocalDeletionTime()));
             }
             else
+            {
                 cfi.addColumn(new Column(key, ArrayUtils.EMPTY_BYTE_ARRAY, column.clock()));
+            }
             Memtable fullMemtable = cfs.getIndexedColumnFamilyStore(columnName).apply(valueKey, cfi);
             if (fullMemtable != null)
                 fullMemtables = addFullMemtable(fullMemtables, fullMemtable);
@@ -458,6 +479,8 @@ private static ColumnFamily readCurrentIndexedColumns(DecoratedKey key, ColumnFa
             {
                 byte[] columnName = entry.getKey();
                 IColumn column = entry.getValue();
+                if (column.isMarkedForDelete())
+                    continue;
                 DecoratedKey<LocalToken> valueKey = cfs.getIndexKeyFor(columnName, column.value());
                 ColumnFamily cfi = cfs.newIndexedColumnFamily(columnName);
                 cfi.deleteColumn(key, localDeletionTime, column.clock());
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index 39a15ade..032cafdc 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -222,6 +222,55 @@ public void testIndexScan() throws IOException
         assert rows.get(0).cf.getColumnCount() == 0;
     }
 
+    @Test
+    public void testIndexDeletions() throws IOException
+    {
+        ColumnFamilyStore cfs = Table.open("Keyspace3").getColumnFamilyStore("Indexed1");
+        RowMutation rm;
+
+        rm = new RowMutation("Keyspace3", "k1".getBytes());
+        rm.add(new QueryPath("Indexed1", null, "birthdate".getBytes("UTF8")), FBUtilities.toByteArray(1L), new TimestampClock(0));
+        rm.apply();
+
+        IndexExpression expr = new IndexExpression("birthdate".getBytes("UTF8"), IndexOperator.EQ, FBUtilities.toByteArray(1L));
+        IndexClause clause = new IndexClause(Arrays.asList(expr), ArrayUtils.EMPTY_BYTE_ARRAY, 100);
+        IFilter filter = new IdentityQueryFilter();
+        IPartitioner p = StorageService.getPartitioner();
+        Range range = new Range(p.getMinimumToken(), p.getMinimumToken());
+        List<Row> rows = cfs.scan(clause, range, filter);
+        assert rows.size() == 1 : StringUtils.join(rows, ",");
+        assert Arrays.equals("k1".getBytes(), rows.get(0).key.key);
+
+        // delete the column directly
+        rm = new RowMutation("Keyspace3", "k1".getBytes());
+        rm.delete(new QueryPath("Indexed1", null, "birthdate".getBytes("UTF8")), new TimestampClock(1));
+        rm.apply();
+        rows = cfs.scan(clause, range, filter);
+        assert rows.isEmpty();
+
+        // verify that it's not being indexed under the deletion column value either
+        IColumn deletion = rm.getColumnFamilies().iterator().next().iterator().next();
+        IndexExpression expr0 = new IndexExpression("birthdate".getBytes("UTF8"), IndexOperator.EQ, deletion.value());
+        IndexClause clause0 = new IndexClause(Arrays.asList(expr0), ArrayUtils.EMPTY_BYTE_ARRAY, 100);
+        rows = cfs.scan(clause0, range, filter);
+        assert rows.isEmpty();
+
+        // resurrect w/ a newer timestamp
+        rm = new RowMutation("Keyspace3", "k1".getBytes());
+        rm.add(new QueryPath("Indexed1", null, "birthdate".getBytes("UTF8")), FBUtilities.toByteArray(1L), new TimestampClock(2));
+        rm.apply();
+        rows = cfs.scan(clause, range, filter);
+        assert rows.size() == 1 : StringUtils.join(rows, ",");
+        assert Arrays.equals("k1".getBytes(), rows.get(0).key.key);
+
+        // delete the entire row
+        rm = new RowMutation("Keyspace3", "k1".getBytes());
+        rm.delete(new QueryPath("Indexed1"), new TimestampClock(3));
+        rm.apply();
+        rows = cfs.scan(clause, range, filter);
+        assert rows.isEmpty() : StringUtils.join(rows, ",");
+    }
+
     @Test
     public void testIndexUpdate() throws IOException
     {
