diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection.java
index d2872023..cefe1fa7 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalConnection.java
@@ -96,9 +96,14 @@ synchronized public void nullPhysicalConnection() {
     // ------------------------ logical connection close -------------------------
     // All methods are simply forwarded to the physical connection, except for close() and isClosed().
 
-    synchronized public void close() throws SQLException {
-        try
-        {
+    public void close() throws SQLException {
+        // The pooledConnection owns this LogicalConnection.  To ensure that
+        //  there is no deadlock when calling back into the pooledConnection_.recycleConnection
+        //  below, we first synchronize on the pooledConnection and then on this
+        //  LogicalConnection
+        synchronized (pooledConnection_) {
+            synchronized (this) {
+                try {
             // we also need to loop thru all the logicalStatements and close them
             if (physicalConnection_ == null) {
                 return;
@@ -122,12 +127,12 @@ synchronized public void close() throws SQLException {
             }
             physicalConnection_ = null;
             pooledConnection_.nullLogicalConnection();
-        }
-        catch ( SqlException se )
-        {
+                } catch (SqlException se) {
             throw se.getSQLException();
         }
     }
+        }
+    }
 
     synchronized public void closeWithoutRecyclingToPool() throws SqlException {
         if (physicalConnection_ == null) {
