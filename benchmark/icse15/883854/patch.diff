diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 606591dc..400d1490 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -968,22 +968,7 @@ public void run()
         unbootstrap(finishLeaving);
     }
 
-    private void unbootstrap(final Runnable onFinish)
-    {
-        Multimap<Range, InetAddress> rangesMM = getChangedRangesForLeaving(FBUtilities.getLocalAddress());
-        if (logger_.isDebugEnabled())
-            logger_.debug("Ranges needing transfer are [" + StringUtils.join(rangesMM.keySet(), ",") + "]");
-        final Set<Map.Entry<Range, InetAddress>> pending = new HashSet<Map.Entry<Range, InetAddress>>(rangesMM.entries());
-        for (final Map.Entry<Range, InetAddress> entry : rangesMM.entries())
-        {
-            final Range range = entry.getKey();
-            final InetAddress newEndpoint = entry.getValue();
-            final Runnable callback = new Runnable()
-            {
-                public synchronized void run()
-                {
-                    pending.remove(entry);
-                    if (pending.isEmpty())
+    private void leaveRing()
                     {
                         SystemTable.setBootstrapped(false);
                         tokenMetadata_.removeEndpoint(FBUtilities.getLocalAddress());
@@ -1000,7 +985,35 @@ public synchronized void run()
                         {
                             throw new AssertionError(e);
                         }
+    }
+
+    private void unbootstrap(final Runnable onFinish)
+    {
+        Multimap<Range, InetAddress> rangesMM = getChangedRangesForLeaving(FBUtilities.getLocalAddress());
+        if (logger_.isDebugEnabled())
+            logger_.debug("Ranges needing transfer are [" + StringUtils.join(rangesMM.keySet(), ",") + "]");
+
+        if (rangesMM.isEmpty())
+        {
+            // nothing needs transfer, so leave immediately.  this can happen when replication factor == number of nodes.
+            leaveRing();
+            onFinish.run();
+            return;
+        }
 
+        final Set<Map.Entry<Range, InetAddress>> pending = new HashSet<Map.Entry<Range, InetAddress>>(rangesMM.entries());
+        for (final Map.Entry<Range, InetAddress> entry : rangesMM.entries())
+        {
+            final Range range = entry.getKey();
+            final InetAddress newEndpoint = entry.getValue();
+            final Runnable callback = new Runnable()
+            {
+                public synchronized void run()
+                {
+                    pending.remove(entry);
+                    if (pending.isEmpty())
+                    {
+                        leaveRing();
                         onFinish.run();
                     }
                 }
