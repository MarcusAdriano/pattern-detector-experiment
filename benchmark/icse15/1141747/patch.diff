diff --git a/lucene/dev/trunk/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java b/lucene/dev/trunk/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
index 62af470b..999dafa9 100644
--- a/lucene/dev/trunk/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
+++ b/lucene/dev/trunk/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
@@ -35,8 +35,6 @@
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.function.FieldScoreQuery;
-import org.apache.lucene.search.function.FieldScoreQuery.Type;
 import org.apache.lucene.spatial.DistanceUtils;
 import org.apache.lucene.spatial.geohash.GeoHashUtils;
 import org.apache.lucene.spatial.geometry.DistanceUnits;
diff --git a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java
index e69de29b..d1135f6b 100644
--- a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java
+++ b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java
@@ -0,0 +1,118 @@
+package org.apache.lucene.queries.function.valuesource;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import java.io.IOException;
+import java.util.Map;
+
+import org.apache.lucene.index.IndexReader.AtomicReaderContext;
+import org.apache.lucene.index.values.IndexDocValues;
+import org.apache.lucene.index.values.ValueType;
+import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.ValueSource;
+
+/**
+ * Expert: obtains numeric field values from a {@link IndexDocValues} field.
+ * This {@link ValueSource} is compatible with all numerical
+ * {@link IndexDocValues}
+ * 
+ * @lucene.experimental
+ * 
+ */
+public class NumericIndexDocValueSource extends ValueSource {
+
+  private final String field;
+
+  public NumericIndexDocValueSource(String field) {
+    this.field = field;
+  }
+
+  @Override
+  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final IndexDocValues.Source source = readerContext.reader.docValues(field)
+        .getSource();
+    ValueType type = source.type();
+    switch (type) {
+    case FLOAT_32:
+    case FLOAT_64:
+      // TODO (chrism) Change to use FloatDocValues and IntDocValues
+      return new DocValues() {
+
+        @Override
+        public String toString(int doc) {
+          return "float: [" + floatVal(doc) + "]";
+        }
+
+        @Override
+        public float floatVal(int doc) {
+          return (float) source.getFloat(doc);
+        }
+      };
+
+    case VAR_INTS:
+      return new DocValues() {
+        @Override
+        public String toString(int doc) {
+          return "float: [" + floatVal(doc) + "]";
+        }
+
+        @Override
+        public float floatVal(int doc) {
+          return (float) source.getInt(doc);
+        }
+      };
+    default:
+      throw new IOException("Type: " + type + "is not numeric");
+    }
+
+  }
+
+  @Override
+  public String description() {
+    return toString();
+  }
+
+  @Override
+  public int hashCode() {
+    final int prime = 31;
+    int result = 1;
+    result = prime * result + ((field == null) ? 0 : field.hashCode());
+    return result;
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (this == obj)
+      return true;
+    if (obj == null)
+      return false;
+    if (getClass() != obj.getClass())
+      return false;
+    NumericIndexDocValueSource other = (NumericIndexDocValueSource) obj;
+    if (field == null) {
+      if (other.field != null)
+        return false;
+    } else if (!field.equals(other.field))
+      return false;
+    return true;
+  }
+
+  @Override
+  public String toString() {
+    return "DocValues float(" + field + ')';
+  }
+}
diff --git a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
index 431bc86b..26602661 100644
--- a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
+++ b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
@@ -110,7 +110,7 @@ public void fillValue(int doc) {
 
   @Override
   public boolean equals(Object o) {
-    return o.getClass() == OrdFieldSource.class && this.field.equals(((OrdFieldSource)o).field);
+    return o != null && o.getClass() == OrdFieldSource.class && this.field.equals(((OrdFieldSource)o).field);
   }
 
   private static final int hcode = OrdFieldSource.class.hashCode();
diff --git a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
index d3d88614..56d876d3 100644
--- a/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
+++ b/lucene/dev/trunk/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
@@ -79,7 +79,7 @@ public int intVal(int doc) {
 
   @Override
   public boolean equals(Object o) {
-    if (o.getClass() !=  ReverseOrdFieldSource.class) return false;
+    if (o == null || (o.getClass() !=  ReverseOrdFieldSource.class)) return false;
     ReverseOrdFieldSource other = (ReverseOrdFieldSource)o;
     return this.field.equals(other.field);
   }
diff --git a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
index 3879d892..fc69bb81 100644
--- a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
+++ b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
@@ -19,6 +19,7 @@
 
 import org.apache.lucene.queries.function.FunctionQuery;
 import org.apache.lucene.queries.function.FunctionTestSetup;
+import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.valuesource.ByteFieldSource;
 import org.apache.lucene.queries.function.valuesource.FloatFieldSource;
 import org.apache.lucene.queries.function.valuesource.IntFieldSource;
@@ -51,11 +52,8 @@ public static void beforeClass() throws Exception {
   @Test
   public void testCustomScoreByte() throws Exception {
     // INT field values are small enough to be parsed as byte
-    ByteValuesCreator valuesCreator = new ByteValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);
-    FunctionQuery functionQuery = new FunctionQuery(new ByteFieldSource(valuesCreator));
-
-    doTestCustomScore(functionQuery, 1.0);
-    doTestCustomScore(functionQuery, 2.0);
+    doTestCustomScore(BYTE_VALUESOURCE, 1.0);
+    doTestCustomScore(BYTE_VALUESOURCE, 2.0);
   }
 
   /**
@@ -64,11 +62,8 @@ public void testCustomScoreByte() throws Exception {
   @Test
   public void testCustomScoreShort() throws Exception {
     // INT field values are small enough to be parsed as short
-    ShortValuesCreator valuesCreator = new ShortValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);
-    FunctionQuery functionQuery = new FunctionQuery(new ShortFieldSource(valuesCreator));
-
-    doTestCustomScore(functionQuery, 1.0);
-    doTestCustomScore(functionQuery, 3.0);
+    doTestCustomScore(SHORT_VALUESOURCE, 1.0);
+    doTestCustomScore(SHORT_VALUESOURCE, 3.0);
   }
 
   /**
@@ -76,11 +71,8 @@ public void testCustomScoreShort() throws Exception {
    */
   @Test
   public void testCustomScoreInt() throws Exception {
-    IntValuesCreator valuesCreator = new IntValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);
-    FunctionQuery functionQuery = new FunctionQuery(new IntFieldSource(valuesCreator));
-
-    doTestCustomScore(functionQuery, 1.0);
-    doTestCustomScore(functionQuery, 4.0);
+    doTestCustomScore(INT_VALUESOURCE, 1.0);
+    doTestCustomScore(INT_VALUESOURCE, 4.0);
   }
 
   /**
@@ -90,17 +82,14 @@ public void testCustomScoreInt() throws Exception {
   public void testCustomScoreFloat() throws Exception {
     // INT field can be parsed as float
     FloatValuesCreator valuesCreator = new FloatValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);
-    FunctionQuery functionQuery = new FunctionQuery(new FloatFieldSource(valuesCreator));
+    FloatFieldSource fieldSource = new FloatFieldSource(valuesCreator);
 
-    doTestCustomScore(functionQuery, 1.0);
-    doTestCustomScore(functionQuery, 5.0);
+    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);
+    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);
 
     // same values, but in float format
-    valuesCreator = new FloatValuesCreator(FLOAT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);
-    functionQuery = new FunctionQuery(new FloatFieldSource(valuesCreator));
-
-    doTestCustomScore(functionQuery, 1.0);
-    doTestCustomScore(functionQuery, 6.0);
+    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);
+    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);
   }
 
   // must have static class otherwise serialization tests fail
@@ -250,7 +239,8 @@ public void testRewrite() throws Exception {
   }
   
   // Test that FieldScoreQuery returns docs with expected score.
-  private void doTestCustomScore(FunctionQuery functionQuery, double dboost) throws Exception {
+  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {
+    FunctionQuery functionQuery = new FunctionQuery(valueSource);
     float boost = (float) dboost;
     IndexSearcher s = new IndexSearcher(dir, true);
     QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);
diff --git a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java
index ba56d4b7..a24894d1 100644
--- a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java
+++ b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java
@@ -9,6 +9,11 @@
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.queries.function.valuesource.ByteFieldSource;
+import org.apache.lucene.queries.function.valuesource.FloatFieldSource;
+import org.apache.lucene.queries.function.valuesource.IntFieldSource;
+import org.apache.lucene.queries.function.valuesource.ShortFieldSource;
+import org.apache.lucene.search.cache.*;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
@@ -50,6 +55,14 @@
   protected static final String INT_FIELD = "iii";
   protected static final String FLOAT_FIELD = "fff";
 
+  private static final int CREATOR_FLAGS = CachedArrayCreator.CACHE_VALUES_AND_BITS;
+
+  protected ValueSource BYTE_VALUESOURCE = new ByteFieldSource(new ByteValuesCreator(INT_FIELD, null, CREATOR_FLAGS));
+  protected ValueSource SHORT_VALUESOURCE = new ShortFieldSource(new ShortValuesCreator(INT_FIELD, null, CREATOR_FLAGS));
+  protected ValueSource INT_VALUESOURCE = new IntFieldSource(new IntValuesCreator(INT_FIELD, null, CREATOR_FLAGS));
+  protected ValueSource INT_AS_FLOAT_VALUESOURCE = new FloatFieldSource(new FloatValuesCreator(INT_FIELD, null, CREATOR_FLAGS));
+  protected ValueSource FLOAT_VALUESOURCE = new FloatFieldSource(new FloatValuesCreator(FLOAT_FIELD, null, CREATOR_FLAGS));
+
   private static final String DOC_TEXT_LINES[] = {
           "Well, this is just some plain text we use for creating the ",
           "test documents. It used to be a text from an online collection ",
diff --git a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery.java b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery.java
index 3f24d583..aaa416b8 100644
--- a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery.java
+++ b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery.java
@@ -1 +1,147 @@
   + native
+package org.apache.lucene.queries.function;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.queries.function.FunctionQuery;
+import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.valuesource.ByteFieldSource;
+import org.apache.lucene.queries.function.valuesource.FloatFieldSource;
+import org.apache.lucene.queries.function.valuesource.IntFieldSource;
+import org.apache.lucene.queries.function.valuesource.ShortFieldSource;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.QueryUtils;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.cache.*;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+/**
+ * Test FieldScoreQuery search.
+ * <p>
+ * Tests here create an index with a few documents, each having
+ * an int value indexed  field and a float value indexed field.
+ * The values of these fields are later used for scoring.
+ * <p>
+ * The rank tests use Hits to verify that docs are ordered (by score) as expected.
+ * <p>
+ * The exact score tests use TopDocs top to verify the exact score.  
+ */
+public class TestFieldScoreQuery extends FunctionTestSetup {
+
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    createIndex(true);
+  }
+
+  /** Test that FieldScoreQuery of Type.BYTE returns docs in expected order. */
+  @Test
+  public void testRankByte () throws Exception {
+    // INT field values are small enough to be parsed as byte
+    doTestRank(BYTE_VALUESOURCE);
+  }
+
+  /** Test that FieldScoreQuery of Type.SHORT returns docs in expected order. */
+  @Test
+  public void testRankShort () throws Exception {
+    // INT field values are small enough to be parsed as short
+    doTestRank(SHORT_VALUESOURCE);
+  }
+
+  /** Test that FieldScoreQuery of Type.INT returns docs in expected order. */
+  @Test
+  public void testRankInt () throws Exception {
+    doTestRank(INT_VALUESOURCE);
+  }
+
+  /** Test that FieldScoreQuery of Type.FLOAT returns docs in expected order. */
+  @Test
+  public void testRankFloat () throws Exception {
+    // INT field can be parsed as float
+    doTestRank(INT_AS_FLOAT_VALUESOURCE);
+    // same values, but in flot format
+    doTestRank(FLOAT_VALUESOURCE);
+  }
+
+  // Test that FieldScoreQuery returns docs in expected order.
+  private void doTestRank (ValueSource valueSource) throws Exception {
+    FunctionQuery functionQuery = new FunctionQuery(valueSource);
+    IndexSearcher s = new IndexSearcher(dir, true);
+    log("test: "+ functionQuery);
+    QueryUtils.check(random, functionQuery,s);
+    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;
+    assertEquals("All docs should be matched!",N_DOCS,h.length);
+    String prevID = "ID"+(N_DOCS+1); // greater than all ids of docs in this test
+    for (int i=0; i<h.length; i++) {
+      String resID = s.doc(h[i].doc).get(ID_FIELD);
+      log(i+".   score="+h[i].score+"  -  "+resID);
+      log(s.explain(functionQuery,h[i].doc));
+      assertTrue("res id "+resID+" should be < prev res id "+prevID, resID.compareTo(prevID)<0);
+      prevID = resID;
+    }
+    s.close();
+  }
+
+  /** Test that FieldScoreQuery of Type.BYTE returns the expected scores. */
+  @Test
+  public void testExactScoreByte () throws Exception {
+    // INT field values are small enough to be parsed as byte
+    doTestExactScore(BYTE_VALUESOURCE);
+  }
+
+  /** Test that FieldScoreQuery of Type.SHORT returns the expected scores. */
+  @Test
+  public void testExactScoreShort () throws  Exception {
+    // INT field values are small enough to be parsed as short
+    doTestExactScore(SHORT_VALUESOURCE);
+  }
+
+  /** Test that FieldScoreQuery of Type.INT returns the expected scores. */
+  @Test
+  public void testExactScoreInt () throws  Exception {
+    doTestExactScore(INT_VALUESOURCE);
+  }
+
+  /** Test that FieldScoreQuery of Type.FLOAT returns the expected scores. */
+  @Test
+  public void testExactScoreFloat () throws  Exception {
+    // INT field can be parsed as float
+    doTestExactScore(INT_AS_FLOAT_VALUESOURCE);
+    // same values, but in flot format
+    doTestExactScore(FLOAT_VALUESOURCE);
+  }
+
+  // Test that FieldScoreQuery returns docs with expected score.
+  private void doTestExactScore (ValueSource valueSource) throws Exception {
+    FunctionQuery functionQuery = new FunctionQuery(valueSource);
+    IndexSearcher s = new IndexSearcher(dir, true);
+    TopDocs td = s.search(functionQuery,null,1000);
+    assertEquals("All docs should be matched!",N_DOCS,td.totalHits);
+    ScoreDoc sd[] = td.scoreDocs;
+    for (ScoreDoc aSd : sd) {
+      float score = aSd.score;
+      log(s.explain(functionQuery, aSd.doc));
+      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);
+      float expectedScore = expectedFieldScore(id); // "ID7" --> 7.0
+      assertEquals("score of " + id + " shuould be " + expectedScore + " != " + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);
+    }
+    s.close();
+  }
+
+}
diff --git a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues.java b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues.java
index e69de29b..9b8c5a38 100644
--- a/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues.java
+++ b/lucene/dev/trunk/modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues.java
@@ -0,0 +1,150 @@
+package org.apache.lucene.queries.function;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.index.IndexReader.AtomicReaderContext;
+import org.apache.lucene.queries.function.valuesource.OrdFieldSource;
+import org.apache.lucene.queries.function.valuesource.ReverseOrdFieldSource;
+import org.apache.lucene.search.*;
+import org.apache.lucene.util.ReaderUtil;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+/**
+ * Test search based on OrdFieldSource and ReverseOrdFieldSource.
+ * <p/>
+ * Tests here create an index with a few documents, each having
+ * an indexed "id" field.
+ * The ord values of this field are later used for scoring.
+ * <p/>
+ * The order tests use Hits to verify that docs are ordered as expected.
+ * <p/>
+ * The exact score tests use TopDocs top to verify the exact score.
+ */
+public class TestOrdValues extends FunctionTestSetup {
+
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    createIndex(false);
+  }
+
+  /**
+   * Test OrdFieldSource
+   */
+  @Test
+  public void testOrdFieldRank() throws CorruptIndexException, Exception {
+    doTestRank(ID_FIELD, true);
+  }
+
+  /**
+   * Test ReverseOrdFieldSource
+   */
+  @Test
+  public void testReverseOrdFieldRank() throws CorruptIndexException, Exception {
+    doTestRank(ID_FIELD, false);
+  }
+
+  // Test that queries based on reverse/ordFieldScore scores correctly
+  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {
+    IndexSearcher s = new IndexSearcher(dir, true);
+    ValueSource vs;
+    if (inOrder) {
+      vs = new OrdFieldSource(field);
+    } else {
+      vs = new ReverseOrdFieldSource(field);
+    }
+
+    Query q = new FunctionQuery(vs);
+    log("test: " + q);
+    QueryUtils.check(random, q, s);
+    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;
+    assertEquals("All docs should be matched!", N_DOCS, h.length);
+    String prevID = inOrder
+            ? "IE"   // greater than all ids of docs in this test ("ID0001", etc.)
+            : "IC";  // smaller than all ids of docs in this test ("ID0001", etc.)
+
+    for (int i = 0; i < h.length; i++) {
+      String resID = s.doc(h[i].doc).get(ID_FIELD);
+      log(i + ".   score=" + h[i].score + "  -  " + resID);
+      log(s.explain(q, h[i].doc));
+      if (inOrder) {
+        assertTrue("res id " + resID + " should be < prev res id " + prevID, resID.compareTo(prevID) < 0);
+      } else {
+        assertTrue("res id " + resID + " should be > prev res id " + prevID, resID.compareTo(prevID) > 0);
+      }
+      prevID = resID;
+    }
+    s.close();
+  }
+
+  /**
+   * Test exact score for OrdFieldSource
+   */
+  @Test
+  public void testOrdFieldExactScore() throws CorruptIndexException, Exception {
+    doTestExactScore(ID_FIELD, true);
+  }
+
+  /**
+   * Test exact score for ReverseOrdFieldSource
+   */
+  @Test
+  public void testReverseOrdFieldExactScore() throws CorruptIndexException, Exception {
+    doTestExactScore(ID_FIELD, false);
+  }
+
+
+  // Test that queries based on reverse/ordFieldScore returns docs with expected score.
+  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {
+    IndexSearcher s = new IndexSearcher(dir, true);
+    ValueSource vs;
+    if (inOrder) {
+      vs = new OrdFieldSource(field);
+    } else {
+      vs = new ReverseOrdFieldSource(field);
+    }
+    Query q = new FunctionQuery(vs);
+    TopDocs td = s.search(q, null, 1000);
+    assertEquals("All docs should be matched!", N_DOCS, td.totalHits);
+    ScoreDoc sd[] = td.scoreDocs;
+    for (int i = 0; i < sd.length; i++) {
+      float score = sd[i].score;
+      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);
+      log("-------- " + i + ". Explain doc " + id);
+      log(s.explain(q, sd[i].doc));
+      float expectedScore = N_DOCS - i;
+      assertEquals("score of result " + i + " shuould be " + expectedScore + " != " + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);
+      String expectedId = inOrder
+              ? id2String(N_DOCS - i) // in-order ==> larger  values first
+              : id2String(i + 1);     // reverse  ==> smaller values first
+      assertTrue("id of result " + i + " shuould be " + expectedId + " != " + score, expectedId.equals(id));
+    }
+    s.close();
+  }
+  
+  // LUCENE-1250
+  public void testEqualsNull() throws Exception {
+    OrdFieldSource ofs = new OrdFieldSource("f");
+    assertFalse(ofs.equals(null));
+    
+    ReverseOrdFieldSource rofs = new ReverseOrdFieldSource("f");
+    assertFalse(rofs.equals(null));
+  }
+
+}
