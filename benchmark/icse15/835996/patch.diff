diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
index 7e211efe..90c7aae5 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
@@ -86,6 +86,23 @@ public void init(Object leftResultSet,
 		this.rightResultSet = (ResultSetNode) rightResultSet;
 	}
 
+	/**
+	 * DERBY-4365
+	 * Bind untyped nulls to the types in the given ResultColumnList.
+	 * This is used for binding the nulls in row constructors and
+	 * table constructors.  
+	 *
+	 * @param rcl	The ResultColumnList with the types to bind nulls to
+	 *
+	 * @exception StandardException		Thrown on error
+	 */
+	public void bindUntypedNullsToResultColumns(ResultColumnList rcl)
+	throws StandardException
+	{
+		leftResultSet.bindUntypedNullsToResultColumns(rcl);
+		rightResultSet.bindUntypedNullsToResultColumns(rcl);
+	}
+
 	/**
 	 * @see Optimizable#modifyAccessPath
 	 *
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
index 9a0888a7..006ba3ae 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
@@ -34,6 +34,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * Test cases for JOINs.
  */
 public class JoinTest extends BaseJDBCTestCase {
+    private static final String VALUES_WITH_NULL = "42X07";
+
     public JoinTest(String name) {
         super(name);
     }
@@ -42,6 +44,36 @@ public static Test suite() {
         return TestConfiguration.defaultSuite(JoinTest.class);
     }
 
+    /**
+     * DERBY-4365 Test that the NULL values are caught in VALUES clause when it
+     * is part of a non-INSERT statement. Throw exception 42X07 for such a 
+     * case.
+     * 
+     */
+    public void testNullabilityInValues() throws SQLException {
+        Statement s = createStatement();
+        assertStatementError(
+        		VALUES_WITH_NULL, s, 
+        		"select a.* from (values (null)) a left outer join "+
+        		"(values ('a')) b on 1=1");
+        assertStatementError(
+        		VALUES_WITH_NULL, s, 
+        		"select a.* from (values (null)) a");
+
+        String[][] expectedResult = {
+            {"a"},
+            {"a"},
+            {"b"},
+            {"b"},
+            {null},
+            {null}
+        };
+        JDBC.assertUnorderedResultSet(s.executeQuery(
+        		"select a.* from (values ('a'),('b'),(cast(null as char(1)))) "
+        		+ "a left outer join (values ('c'),('d')) b on 1=1"), 
+        		expectedResult);
+    }
+
     /**
      * Test that the columns returned by a left or right outer join have the
      * correct nullability. In a left outer join, the columns from the left
