diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
index e69de29b..2aca66c9 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
@@ -0,0 +1,118 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.math.stats;
+
+import org.apache.mahout.math.DenseMatrix;
+import org.apache.mahout.math.DenseVector;
+import org.apache.mahout.math.Matrix;
+import org.apache.mahout.math.Vector;
+
+import java.util.Random;
+
+/**
+ * Computes a running estimate of AUC (see http://en.wikipedia.org/wiki/Receiver_operating_characteristic).
+ * <p/>
+ * Since AUC is normally a global property of labeled scores, it is almost always computed in a
+ * batch fashion.  The probabilistic definition (the probability that a random element of one set
+ * has a higher score than a random element of another set) gives us a way to estimate this
+ * on-line.
+ */
+public class OnlineAuc {
+
+  enum ReplacementPolicy {
+    FIFO, FAIR, RANDOM
+  }
+
+  public static final int HISTORY = 10;
+
+  private ReplacementPolicy policy = ReplacementPolicy.FAIR;
+  private Random random = org.apache.mahout.common.RandomUtils.getRandom();
+  private final Matrix scores;
+  private final Vector averages;
+  private final Vector samples;
+
+  public OnlineAuc() {
+    int numCategories = 2;
+    scores = new DenseMatrix(numCategories, HISTORY);
+    scores.assign(Double.NaN);
+    averages = new DenseVector(numCategories);
+    averages.assign(0.5);
+    samples = new DenseVector(numCategories);
+  }
+
+  public double addSample(int category, double score) {
+    int n = (int) samples.get(category);
+    if (n < HISTORY) {
+      scores.set(category, n, score);
+    } else {
+      switch (policy) {
+        case FIFO:
+          scores.set(category, n % HISTORY, score);
+          break;
+        case FAIR:
+          int j1 = random.nextInt(n + 1);
+          if (j1 < HISTORY) {
+            scores.set(category, j1, score);
+          }
+          break;
+        case RANDOM:
+          int j2 = random.nextInt(HISTORY);
+          scores.set(category, j2, score);
+          break;
+      }
+    }
+
+    samples.set(category, n + 1);
+
+    if (samples.minValue() >= 1) {
+      // compare to previous scores for other category
+      Vector row = scores.viewRow(1 - category);
+      double m = 0.0;
+      int count = 0;
+      for (Vector.Element element : row) {
+        double v = element.get();
+        if (Double.isNaN(v)) {
+          break;
+        }
+        count++;
+        double z = 0.5;
+        if (score > v) {
+          z = 1.0;
+        } else if (score < v) {
+          z = 0.0;
+        }
+        m += (z - m) / count;
+      }
+      averages.set(category, averages.get(category) + (m - averages.get(category)) / samples.get(category));
+    }
+    return auc();
+  }
+
+  public double auc() {
+    // return an unweighted average of all averages.
+    return 0.5 - averages.get(0) / 2 + averages.get(1) / 2;
+  }
+
+  public void setPolicy(ReplacementPolicy policy) {
+    this.policy = policy;
+  }
+
+  public void setRandom(Random random) {
+    this.random = random;
+  }
+}
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java
index a53c821f..63ffab8d 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java
@@ -1,9 +1,9 @@
 package org.apache.mahout.classifier.sgd;
 
+import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.DenseVector;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.jet.random.Exponential;
-import org.apache.mahout.math.jet.random.Normal;
 import org.apache.mahout.math.jet.random.engine.MersenneTwister;
 import org.junit.Assert;
 import org.junit.Test;
@@ -15,7 +15,6 @@ public void testTrain() {
 
     final MersenneTwister gen = new MersenneTwister(1);
     final Exponential exp = new Exponential(.5, gen);
-    Vector data = new DenseVector(200);
     Vector beta = new DenseVector(200);
     for (Vector.Element element : beta) {
         int sign = 1;
@@ -40,7 +39,6 @@ public void testTrain() {
     AdaptiveLogisticRegression x = new AdaptiveLogisticRegression(2, 200, new L1());
     x.setInterval(1000);
 
-    final Normal norm = new Normal(0, 1, gen);
     for (int i = 0; i < 20000; i++) {
       AdaptiveLogisticRegression.TrainingExample r = getExample(i, gen, beta);
       x.train(r.getKey(), r.getActual(), r.getInstance());
@@ -64,15 +62,15 @@ public void testTrain() {
     if (gen.nextDouble() < p) {
       target = 1;
     }
-    AdaptiveLogisticRegression.TrainingExample r = new AdaptiveLogisticRegression.TrainingExample(i, target, data);
-    return r;
+    return new AdaptiveLogisticRegression.TrainingExample(i, target, data);
   }
 
   @Test
   public void copyLearnsAsExpected() {
+    RandomUtils.useTestSeed();
+    
     final MersenneTwister gen = new MersenneTwister(1);
     final Exponential exp = new Exponential(.5, gen);
-    Vector data = new DenseVector(200);
     Vector beta = new DenseVector(200);
     for (Vector.Element element : beta) {
         int sign = 1;
@@ -96,7 +94,7 @@ public void copyLearnsAsExpected() {
 
     // then switch to a copy of that learner ... progress should continue
     AdaptiveLogisticRegression.Wrapper w2 = w.copy();
-    double auc2 = -1;
+    double auc2;
 
     for (int i = 0; i < 5000; i++) {
       if (i % 1000 == 0) {
@@ -106,14 +104,17 @@ public void copyLearnsAsExpected() {
         if (i == 1000) {
           auc2 = w2.getLearner().auc();
           Assert.assertTrue("Should have had head-start", Math.abs(auc2 - 0.5) > 0.1);
+          Assert.assertTrue("AUC should improve quickly on copy", auc1 < auc2);
         }
         System.out.printf("%10d %.3f\n", i, w2.getLearner().auc());
       }
       AdaptiveLogisticRegression.TrainingExample r = getExample(i, gen, beta);
       w2.train(r);
     }
-    Assert.assertTrue("AUC should improve on copy", auc1 < w2.getLearner().auc() - 0.1);
-    Assert.assertTrue("AUC should improve on copy", auc1 < auc2);
+    Assert.assertEquals("Original should not change after copy is updated", auc1, w.getLearner().auc(), 1e-5);
+
+    // this improvement is really quite lenient
+    Assert.assertTrue("AUC should improve substantially on copy", auc1 < w2.getLearner().auc() - 0.1);
 
     // make sure that the copy didn't lose anything
     Assert.assertEquals(auc1, w.getLearner().auc(), 0);
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
index e69de29b..8fc67bec 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.math.stats;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.util.Random;
+
+public class OnlineAucTest {
+  @Test
+  public void testBinaryCase() {
+    OnlineAuc a1 = new OnlineAuc();
+    a1.setRandom(new Random(1));
+    a1.setPolicy(OnlineAuc.ReplacementPolicy.FAIR);
+
+    OnlineAuc a2 = new OnlineAuc();
+    a2.setRandom(new Random(2));
+    a2.setPolicy(OnlineAuc.ReplacementPolicy.FIFO);
+
+    OnlineAuc a3 = new OnlineAuc();
+    a3.setRandom(new Random(3));
+    a3.setPolicy(OnlineAuc.ReplacementPolicy.RANDOM);
+
+    Random gen = new Random(1);
+    for (int i = 0; i < 10000; i++) {
+      double x = gen.nextGaussian();
+
+      a1.addSample(1, x);
+      a2.addSample(1, x);
+      a3.addSample(1, x);
+
+      x = gen.nextGaussian() + 1;
+
+      a1.addSample(0, x);
+      a2.addSample(0, x);
+      a3.addSample(0, x);
+    }
+
+    // reference value computed using R: mean(rnorm(1000000) < rnorm(1000000,1))
+    Assert.assertEquals(1 - 0.76, a1.auc(), 0.05);
+    Assert.assertEquals(1 - 0.76, a2.auc(), 0.05);
+    Assert.assertEquals(1 - 0.76, a3.auc(), 0.05);
+  }
+}
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
index 90fb0f72..e69de29b 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java
@@ -1,118 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.math.stats;
-
-import org.apache.mahout.math.DenseMatrix;
-import org.apache.mahout.math.DenseVector;
-import org.apache.mahout.math.Matrix;
-import org.apache.mahout.math.Vector;
-
-import java.util.Random;
-
-/**
- * Computes a running estimate of AUC (see http://en.wikipedia.org/wiki/Receiver_operating_characteristic).
- * <p/>
- * Since AUC is normally a global property of labeled scores, it is almost always computed in a
- * batch fashion.  The probabilistic definition (the probability that a random element of one set
- * has a higher score than a random element of another set) gives us a way to estimate this
- * on-line.
- */
-public class OnlineAuc {
-
-  enum ReplacementPolicy {
-    FIFO, FAIR, RANDOM
-  }
-
-  public static final int HISTORY = 10;
-
-  private ReplacementPolicy policy = ReplacementPolicy.FAIR;
-  private Random random = new Random();
-  private final Matrix scores;
-  private final Vector averages;
-  private final Vector samples;
-
-  public OnlineAuc() {
-    int numCategories = 2;
-    scores = new DenseMatrix(numCategories, HISTORY);
-    scores.assign(Double.NaN);
-    averages = new DenseVector(numCategories);
-    averages.assign(0.5);
-    samples = new DenseVector(numCategories);
-  }
-
-  public double addSample(int category, double score) {
-    int n = (int) samples.get(category);
-    if (n < HISTORY) {
-      scores.set(category, n, score);
-    } else {
-      switch (policy) {
-        case FIFO:
-          scores.set(category, n % HISTORY, score);
-          break;
-        case FAIR:
-          int j1 = random.nextInt(n + 1);
-          if (j1 < HISTORY) {
-            scores.set(category, j1, score);
-          }
-          break;
-        case RANDOM:
-          int j2 = random.nextInt(HISTORY);
-          scores.set(category, j2, score);
-          break;
-      }
-    }
-
-    samples.set(category, n + 1);
-
-    if (samples.minValue() >= 1) {
-      // compare to previous scores for other category
-      Vector row = scores.viewRow(1 - category);
-      double m = 0.0;
-      int count = 0;
-      for (Vector.Element element : row) {
-        double v = element.get();
-        if (Double.isNaN(v)) {
-          break;
-        }
-        count++;
-        double z = 0.5;
-        if (score > v) {
-          z = 1.0;
-        } else if (score < v) {
-          z = 0.0;
-        }
-        m += (z - m) / count;
-      }
-      averages.set(category, averages.get(category) + (m - averages.get(category)) / samples.get(category));
-    }
-    return auc();
-  }
-
-  public double auc() {
-    // return an unweighted average of all averages.
-    return 0.5 - averages.get(0) / 2 + averages.get(1) / 2;
-  }
-
-  public void setPolicy(ReplacementPolicy policy) {
-    this.policy = policy;
-  }
-
-  public void setRandom(Random random) {
-    this.random = random;
-  }
-}
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
index 8fc67bec..e69de29b 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/stats/OnlineAucTest.java
@@ -1,60 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.math.stats;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.Random;
-
-public class OnlineAucTest {
-  @Test
-  public void testBinaryCase() {
-    OnlineAuc a1 = new OnlineAuc();
-    a1.setRandom(new Random(1));
-    a1.setPolicy(OnlineAuc.ReplacementPolicy.FAIR);
-
-    OnlineAuc a2 = new OnlineAuc();
-    a2.setRandom(new Random(2));
-    a2.setPolicy(OnlineAuc.ReplacementPolicy.FIFO);
-
-    OnlineAuc a3 = new OnlineAuc();
-    a3.setRandom(new Random(3));
-    a3.setPolicy(OnlineAuc.ReplacementPolicy.RANDOM);
-
-    Random gen = new Random(1);
-    for (int i = 0; i < 10000; i++) {
-      double x = gen.nextGaussian();
-
-      a1.addSample(1, x);
-      a2.addSample(1, x);
-      a3.addSample(1, x);
-
-      x = gen.nextGaussian() + 1;
-
-      a1.addSample(0, x);
-      a2.addSample(0, x);
-      a3.addSample(0, x);
-    }
-
-    // reference value computed using R: mean(rnorm(1000000) < rnorm(1000000,1))
-    Assert.assertEquals(1 - 0.76, a1.auc(), 0.05);
-    Assert.assertEquals(1 - 0.76, a2.auc(), 0.05);
-    Assert.assertEquals(1 - 0.76, a3.auc(), 0.05);
-  }
-}
