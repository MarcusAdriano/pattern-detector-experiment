diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index b00c3268..60a48003 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -476,11 +476,11 @@ public boolean accept(File pathname)
             Collection<KSMetaData> tableDefs = DefsTable.loadFromStorage(uuid);   
             for (KSMetaData def : tableDefs)
             {
-                if (!def.name.matches("\\w+"))
+                if (!def.name.matches(Migration.NAME_VALIDATOR_REGEX))
                     throw new RuntimeException("invalid keyspace name: " + def.name);
                 for (CFMetaData cfm : def.cfMetaData().values())
                 {
-                    if (!cfm.cfName.matches("\\w+"))
+                    if (!cfm.cfName.matches(Migration.NAME_VALIDATOR_REGEX))
                         throw new RuntimeException("invalid column family name: " + cfm.cfName);
                     try
                     {
@@ -563,7 +563,7 @@ public boolean accept(File pathname)
                 {
                     throw new ConfigurationException("ColumnFamily name attribute is required");
                 }
-                if (!cf.name.matches("\\w+"))
+                if (!cf.name.matches(Migration.NAME_VALIDATOR_REGEX))
                 {
                     throw new ConfigurationException("ColumnFamily name contains invalid characters.");
                 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
index 7434733c..f93ce5a9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddColumnFamily.java
@@ -52,6 +52,8 @@ public AddColumnFamily(CFMetaData cfm) throws ConfigurationException, IOExceptio
             throw new ConfigurationException("Keyspace does not already exist.");
         else if (ksm.cfMetaData().containsKey(cfm.cfName))
             throw new ConfigurationException("CF is already defined in that keyspace.");
+        else if (!Migration.isLegalName(cfm.cfName))
+            throw new ConfigurationException("Invalid column family name: " + cfm.cfName);
         
         // clone ksm but include the new cf def.
         KSMetaData newKsm = makeNewKeyspaceDefinition(ksm);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
index 43bc7c98..c54f6fa3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/AddKeyspace.java
@@ -45,6 +45,11 @@ public AddKeyspace(KSMetaData ksm) throws ConfigurationException, IOException
         
         if (DatabaseDescriptor.getTableDefinition(ksm.name) != null)
             throw new ConfigurationException("Keyspace already exists.");
+        if (!Migration.isLegalName(ksm.name))
+            throw new ConfigurationException("Invalid keyspace name: " + ksm.name);
+        for (CFMetaData cfm : ksm.cfMetaData().values())
+            if (!Migration.isLegalName(cfm.cfName))
+                throw new ConfigurationException("Invalid column family name: " + cfm.cfName);
         
         this.ksm = ksm;
         rm = makeDefinitionMutation(ksm, null, newVersion);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
index fe29e9fe..dcfb7168 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -68,6 +68,7 @@
 {
     private static final Logger logger = LoggerFactory.getLogger(Migration.class);
     
+    public static final String NAME_VALIDATOR_REGEX = "\\w+";
     public static final String MIGRATIONS_CF = "Migrations";
     public static final String SCHEMA_CF = "Schema";
     public static final byte[] MIGRATIONS_KEY = "Migrations Key".getBytes(UTF_8);
@@ -326,4 +327,9 @@ public static Migration deserialize(byte[] bytes) throws IOException
     {
         return version.toString().getBytes(UTF_8);
     }
+    
+    public static boolean isLegalName(String s)
+    {
+        return s.matches(Migration.NAME_VALIDATOR_REGEX);
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
index 9fd981ac..03cba09a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java
@@ -61,6 +61,8 @@ public RenameColumnFamily(String tableName, String oldName, String newName) thro
             throw new ConfigurationException("CF is not defined in that keyspace.");
         if (ksm.cfMetaData().containsKey(newName))
             throw new ConfigurationException("CF is already defined in that keyspace.");
+        if (!Migration.isLegalName(newName))
+            throw new ConfigurationException("Invalid column family name: " + newName);
         
         cfId = ksm.cfMetaData().get(oldName).cfId;
         
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
index 136bcd4e..6065e33c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/RenameKeyspace.java
@@ -55,6 +55,8 @@ public RenameKeyspace(String oldName, String newName) throws ConfigurationExcept
             throw new ConfigurationException("Keyspace either does not exist or does not match the one currently defined.");
         if (DatabaseDescriptor.getTableDefinition(newName) != null)
             throw new ConfigurationException("Keyspace already exists.");
+        if (!Migration.isLegalName(newName))
+            throw new ConfigurationException("Invalid keyspace name: " + newName);
         
         // clone the ksm, replacing thename.
         KSMetaData newKsm = rename(oldKsm, newName, false); 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 74000ba1..07144d6f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -1669,6 +1669,17 @@ public synchronized void drain() throws IOException, InterruptedException, Execu
      */
     public void loadSchemaFromYAML() throws ConfigurationException, IOException
     { 
+        // validate
+        final Collection<KSMetaData> tables = DatabaseDescriptor.readTablesFromYaml();
+        for (KSMetaData table : tables)
+        {
+            if (!table.name.matches(Migration.NAME_VALIDATOR_REGEX))
+                throw new ConfigurationException("Invalid table name: " + table.name);
+            for (CFMetaData cfm : table.cfMetaData().values())
+                if (!Migration.isLegalName(cfm.cfName))
+                    throw new ConfigurationException("Invalid column family name: " + cfm.cfName);
+        }
+        
         Callable<Migration> call = new Callable<Migration>()
         {
             public Migration call() throws Exception
@@ -1677,8 +1688,6 @@ public Migration call() throws Exception
                 if (DatabaseDescriptor.getDefsVersion().timestamp() > 0 || Migration.getLastMigrationId() != null)
                     throw new ConfigurationException("Cannot load from XML on top of pre-existing schemas.");
                 
-                Collection<KSMetaData> tables = DatabaseDescriptor.readTablesFromYaml();
-             
                 // cycle through first to make sure we can satisfy live nodes constraint.
                 int liveNodeCount = getLiveNodes().size();
                 for (KSMetaData table : tables)
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index 0f91aca1..efac59da 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -49,6 +49,18 @@ public void ensureStaticCFMIdsAreLessThan1000()
         assert CFMetaData.StatisticsCf.cfId == 4;    
     }
     
+    @Test
+    public void testInvalidNames() throws IOException
+    {
+        String[] valid = {"1", "a", "_1", "b_", "__", "1_a"};
+        for (String s : valid)
+            assert Migration.isLegalName(s);
+        
+        String[] invalid = {"b@t", "dash-y", "", " ", "dot.s", ".hidden"};
+        for (String s : invalid)
+            assert !Migration.isLegalName(s);
+    }
+    
     @Test
     public void saveAndRestore() throws IOException
     {
