diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
index dfce368a..65516e84 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
@@ -31,6 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Statement;
 import java.sql.Types;
 import java.util.ArrayList;
+import java.util.Locale;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
@@ -624,18 +625,22 @@ public void testGrantOnNonexistantFunction() throws Exception {
             grant("execute", "function s1", "nosuch", users[1]);
     	} catch (SQLException e) {
         	assertSQLState("42Y03", e);
+        	if ( Locale.getDefault().getLanguage().equals("en") ) {
             assertEquals("'S1.NOSUCH' is not recognized as a function.", e.getMessage());
         }
     }
+    }
     
     public void testGrantOnNonexistantFunctionForProcedure() throws Exception {
     	try {
             grant("execute", "function s1", "p1", users[1]);
     	} catch (SQLException e) {
         	assertSQLState("42Y03", e);
+            if ( Locale.getDefault().getLanguage().equals("en") ) {
             assertEquals("'S1.P1' is not recognized as a function.", e.getMessage());
         }
     }
+    }
     
     public void testGrantOnProcedureWithBadSchema() throws Exception {
     	try {
@@ -650,18 +655,22 @@ public void testGrantOnNonexistantProcedure() throws Exception {
             grant("execute", "procedure s1", "nosuch", users[1]);
     	} catch (SQLException e) {
         	assertSQLState("42Y03", e);
+        	if ( Locale.getDefault().getLanguage().equals("en") ) {
             assertEquals("'S1.NOSUCH' is not recognized as a procedure.", e.getMessage());
         }
     }
+    }
     
     public void testGrantOnNonexistantProcedureForFunction() throws Exception {
     	try {
             grant("execute", "procedure s1", "f2", users[1]);
     	} catch (SQLException e) {
         	assertSQLState("42Y03", e);
+        	if ( Locale.getDefault().getLanguage().equals("en") ) {
             assertEquals("'S1.F2' is not recognized as a procedure.", e.getMessage());
         }
     }
+    }
     
     public void testGrantExecuteOnTable() throws Exception {
         assertCompileError("42X01",
