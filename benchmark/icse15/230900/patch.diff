diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
index 6a42b6ec..730eabf9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
@@ -321,6 +321,35 @@ public static StandardException newException(String messageID, Object a1, Object
 		Object[] oa = new Object[] {a1, a2};
 		return new StandardException(messageID, oa);
 	}
+
+    /**
+     * Dummy exception to catch incorrect use of
+     * StandardException.newException(), at compile-time. If you get a
+     * compilation error because this exception isn't caught, it means
+     * that you are using StandardException.newException(...)
+     * incorrectly. The nested exception should always be the second
+     * argument.
+     * @see StandardException#newException(String, Object, Throwable)
+     * @see StandardException#newException(String, Object, Object, Throwable)
+     */
+    public static class BadMessageArgumentException extends Throwable {}
+
+    /**
+     * Dummy overload which should never be called. Only used to
+     * detect incorrect usage, at compile time.
+     * @param messageID - the sql state id of the message
+     * @param a1 - Message arg
+     * @param t - Incorrectly placed exception to be nested
+     * @return nothing - always throws
+     * @throws BadMessageArgumentException - always (dummy)
+     */
+    public static StandardException newException(String messageID, 
+                                                 Object a1, 
+                                                 Throwable t) 
+        throws BadMessageArgumentException {
+        throw new BadMessageArgumentException();
+    }
+
 	public static StandardException newException(String messageID, Throwable t, Object a1, Object a2) {
 		Object[] oa = new Object[] {a1, a2};
 		return new StandardException(messageID, t, oa);
@@ -332,6 +361,25 @@ public static StandardException newException(String messageID, Object a1, Object
 		Object[] oa = new Object[] {a1, a2, a3};
 		return new StandardException(messageID, oa);
 	}
+    
+    /**
+     * Dummy overload which should never be called. Only used to
+     * detect incorrect usage, at compile time.
+     * @param messageID - the sql state id of the message
+     * @param a1 - First message arg
+     * @param a2 - Second message arg
+     * @param t - Incorrectly placed exception to be nested
+     * @return nothing - always throws
+     * @throws BadMessageArgumentException - always (dummy)
+     */
+    public static StandardException newException(String messageID, 
+                                                 Object a1, 
+                                                 Object a2,
+                                                 Throwable t) 
+        throws BadMessageArgumentException {
+        throw new BadMessageArgumentException(); 
+    }
+
 	public static StandardException newException(String messageID, Throwable t, Object a1, Object a2, Object a3) {
 		Object[] oa = new Object[] {a1, a2, a3};
 		return new StandardException(messageID, t, oa);
@@ -589,6 +637,7 @@ about the object itself (ie. this) in order to determine the
 	public String getMessage() {
 		if (textMessage == null)
 			textMessage = MessageService.getCompleteMessage(getMessageId(), getArguments());
+
 		return textMessage;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
index 24e49e14..06e401ed 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
@@ -826,7 +826,7 @@ public Object readJarFile(String schemaName, String sqlName)
 		try {
 			return fr.getAsStream(externalName, generationId);
 		} catch (java.io.IOException ioe) {
-			throw StandardException.newException(SQLState.LANG_FILE_ERROR, ioe.toString(),ioe);	
+            throw StandardException.newException(SQLState.LANG_FILE_ERROR, ioe, ioe.toString());    
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/PersistentServiceImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/PersistentServiceImpl.java
index 39a0dac2..92592eb5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/PersistentServiceImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/PersistentServiceImpl.java
@@ -673,8 +673,7 @@ public Object run()
                                     throw ioe;
                                 }
                             }
-                            throw StandardException.newException(SQLState.SERVICE_DIRECTORY_CREATE_ERROR,
-                                                                 serviceDirectory, null);
+                            throw StandardException.newException(SQLState.SERVICE_DIRECTORY_CREATE_ERROR, serviceDirectory);
                         }
                         finally { storageFactory.shutdown(); }
                     }
@@ -689,7 +688,7 @@ public Object run()
                 throw (StandardException) t;
         }
 
-        throw StandardException.newException(SQLState.SERVICE_DIRECTORY_CREATE_ERROR, name, t);
+        throw StandardException.newException(SQLState.SERVICE_DIRECTORY_CREATE_ERROR, t, name);
     } // end of createServiceRoot
 
     private String getDirectoryPath( String name)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java
index e14d90dd..023ad1b5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java
@@ -412,7 +412,7 @@ else if (key.equals(Property.READ_ONLY_ACCESS_USERS_PROPERTY) ||
 			String[] newList_a;
 			try {newList_a = IdUtil.parseIdList(value_s);}
 			catch (StandardException se) {
-				throw StandardException.newException(SQLState.AUTH_INVALID_AUTHORIZATION_PROPERTY, key,value_s,se);
+                throw StandardException.newException(SQLState.AUTH_INVALID_AUTHORIZATION_PROPERTY, se, key,value_s);
 			}
 
 			/** Check the new list userIdList for duplicates. */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/JarUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/JarUtil.java
index 1cde3a94..b6e01b22 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/JarUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/JarUtil.java
@@ -392,7 +392,7 @@ private InputStream getAsStream(long generationId) throws StandardException {
 		try {
 			return fr.getAsStream(JarDDL.mkExternalName(schemaName, sqlName, fr.getSeparatorChar()), generationId);
 		} catch (IOException ioe) {
-			throw StandardException.newException(SQLState.LANG_FILE_ERROR, ioe.toString(),ioe);	
+            throw StandardException.newException(SQLState.LANG_FILE_ERROR, ioe, ioe.toString());    
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
index 8235a3ad..a3eef83d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
@@ -542,9 +542,9 @@ public synchronized void backup(File backupDir) throws StandardException
                 if (!privRenameTo(backupcopy,oldbackup))
                 {
 					renameFailed = true;
-					throw StandardException.newException(
-                        SQLState.RAWSTORE_ERROR_RENAMING_FILE,
-                        backupcopy, oldbackup, (Throwable)null);
+                    throw StandardException.
+                        newException(SQLState.RAWSTORE_ERROR_RENAMING_FILE,
+                                     backupcopy, oldbackup);
                 }
 				else
 				{
@@ -566,9 +566,9 @@ public synchronized void backup(File backupDir) throws StandardException
 
             if (!privCopyDirectory(dbase, backupcopy, (byte[])null, BACKUP_FILTER))
             {
-				throw StandardException.newException(
-                    SQLState.RAWSTORE_ERROR_COPYING_FILE,
-					dbase, backupcopy, (Throwable)null);
+                throw StandardException.
+                    newException(SQLState.RAWSTORE_ERROR_COPYING_FILE,
+                                 dbase, backupcopy);
             }
 
 			logHistory(historyFile,
@@ -636,9 +636,9 @@ public synchronized void backup(File backupDir) throws StandardException
 			// copy the log to the backup location
 			if(!logFactory.copyActiveLogFiles(logBackup))
 			{
-				throw StandardException.newException(
-													 SQLState.RAWSTORE_ERROR_COPYING_FILE,
-													 logdir, logBackup, (Throwable)null);
+                    throw StandardException.
+                        newException(SQLState.RAWSTORE_ERROR_COPYING_FILE,
+                                     logdir, logBackup);
 			}	
 
 			logHistory(historyFile,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index 91474deb..e8f4a345 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -276,7 +276,7 @@ public void	boot(boolean create, Properties startParams) throws StandardExceptio
         catch( IOException ioe)
         {
             if( create)
-                throw StandardException.newException( SQLState.SERVICE_DIRECTORY_CREATE_ERROR, dataDirectory, ioe);
+                throw StandardException.newException( SQLState.SERVICE_DIRECTORY_CREATE_ERROR, ioe, dataDirectory);
             else
                 throw StandardException.newException( SQLState.DATABASE_NOT_FOUND, ioe, dataDirectory);
         }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java
index e20a5714..e0073a0e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java
@@ -93,9 +93,8 @@ final boolean openContainer(ContainerKey newIdentity) throws StandardException {
 			return true;
 
 		} catch (IOException ioe) {
-
-			throw StandardException.newException(
-                    SQLState.FILE_CONTAINER_EXCEPTION, ioe, this, ioe);
+            throw StandardException.
+                newException(SQLState.FILE_CONTAINER_EXCEPTION, ioe, this);
 		} finally {
 			if (dis != null) {
 				try {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
index 0ace549a..5d02c9f0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
@@ -909,11 +909,11 @@ public Object run() throws StandardException
                  try {
                      fileDeleted = privRemoveFile(file);
                  } catch (SecurityException se) {
-                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, se);
+                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, se.toString());
                  }
 
                  if (!fileDeleted) {
-                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, null);
+                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, ioe.toString());
                  }
 
                  throw StandardException.newException( SQLState.FILE_CREATE, ioe, file);
@@ -973,9 +973,11 @@ public Object run() throws StandardException
 
                  if (isStub)
                  {
-                     throw dataFactory.markCorrupt(
-                         StandardException.newException(
-                             SQLState.FILE_CONTAINER_EXCEPTION, ioe, this, ioe));
+                     throw dataFactory.
+                         markCorrupt(StandardException.
+                                     newException(SQLState.
+                                                  FILE_CONTAINER_EXCEPTION, 
+                                                  ioe, this));
                  }
 
                  // maybe it is being stubbified... try that
@@ -995,18 +997,22 @@ public Object run() throws StandardException
                      }
                      catch (IOException ioe2)
                      {
-                         throw dataFactory.markCorrupt(
-                             StandardException.newException(
-                                 SQLState.FILE_CONTAINER_EXCEPTION, ioe2, this, ioe2));
+                         throw dataFactory.
+                             markCorrupt(StandardException.
+                                         newException(SQLState.
+                                                      FILE_CONTAINER_EXCEPTION,
+                                                      ioe2, this));
                      }
 
                      // RESOLVE: this is a temporary hack
 
                  }
                  else
-                     throw dataFactory.markCorrupt(
-                         StandardException.newException(
-                             SQLState.FILE_CONTAINER_EXCEPTION, ioe, this, ioe));
+                     throw dataFactory.
+                         markCorrupt(StandardException.
+                                     newException(SQLState.
+                                                  FILE_CONTAINER_EXCEPTION,
+                                                  ioe, this));
              }
 
              return this;
@@ -1066,8 +1072,9 @@ public Object run() throws StandardException
              }
              catch (SecurityException se)
              {
-                 throw StandardException.newException(
-                     SQLState.FILE_CANNOT_REMOVE_FILE, se, file, se);
+                 throw StandardException.
+                     newException(SQLState.FILE_CANNOT_REMOVE_FILE, se, file, 
+                                  se.toString());
              }
              catch (IOException ioe)
              {
@@ -1091,7 +1098,7 @@ public Object run() throws StandardException
                  catch (IOException ioe2)
                  {
                      throw StandardException.newException(
-                         SQLState.FILE_CANNOT_REMOVE_FILE, ioe2, file, ioe);
+                         SQLState.FILE_CANNOT_REMOVE_FILE, ioe2, file, ioe.toString());
                  }
                  catch (SecurityException se)
                  {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
index 73c0c087..cb91353d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
@@ -656,7 +656,7 @@ public void syncLogAccessFile()
 
                 if( i > 20 )
                     throw StandardException.newException(
-                        SQLState.LOG_FULL, sfe, null);
+                        SQLState.LOG_FULL, sfe);
             }
         }
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
index 76aebe60..9020af26 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
@@ -3816,7 +3816,7 @@ private void syncFile( StorageRandomAccessFile raf)
                 if( i > 20 )
                 {
                     throw StandardException.newException(
-                                SQLState.LOG_FULL, ioe, null );
+                                SQLState.LOG_FULL, ioe);
                 }
             }
         }
