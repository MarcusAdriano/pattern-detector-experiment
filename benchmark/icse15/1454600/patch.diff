diff --git a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
index 0abcf809..24f79cd4 100644
--- a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
+++ b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
@@ -232,7 +232,8 @@ static boolean isClientMessage(String messageId)
         // to clientMessageIds
         if ( messageId.startsWith("XJ") || messageId.startsWith("J")  ||
              messageId.startsWith("XN") || messageId.startsWith("58") ||
-             messageId.startsWith("57") || messageId.startsWith("08"))
+             messageId.startsWith("57") || messageId.startsWith("08") ||
+             messageId.startsWith( "XBD" ) )
         {
             return true;
         }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java
index fab45cec..0d1019dc 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SQLExceptionFactory40.java
@@ -91,7 +91,11 @@ public SQLException getSQLException (String message, String sqlState,
             sqlState.equals(DRDA_REPLY_MSG_NOT_SUPPORTED)           ) {
             ex = new SQLFeatureNotSupportedException(message, sqlState, 
                     errCode);
-        } else if (sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5))) {
+        } else if
+                (
+                 sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5)) ||
+                 sqlState.equals(SQLState.LOGIN_TIMEOUT.substring(0, 5))
+                 ) {
             ex = new SQLTimeoutException(message, sqlState, errCode);
         }
         // If the sub-class cannot be determined based on the SQLState, use
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
index 7cd3278f..4b5e14bb 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
@@ -444,6 +444,9 @@ public void flowConnect(String password,
             // to retrieve error message text if an error SQLCA
             // is returned in one of the connect flows.
             open_ = false;
+
+            handleLoginTimeout( e );
+            
             // logWriter may be closed in agent_.close(),
             // so SqlException needs to be created before that
             // but to be thrown after.
@@ -488,6 +491,9 @@ protected void flowSimpleConnect() throws SqlException {
             // to retrieve error message text if an error SQLCA
             // is returned in one of the connect flows.
             open_ = false;
+
+            handleLoginTimeout( e );
+            
             // logWriter may be closed in agent_.close(),
             // so SqlException needs to be created before that
             // but to be thrown after.
@@ -513,6 +519,20 @@ protected void flowSimpleConnect() throws SqlException {
         }
     }
 
+    /** Handle socket timeouts during connection attempts */
+    private void    handleLoginTimeout( Throwable original )
+        throws SqlException
+    {
+        for ( Throwable cause = original; cause != null; cause = cause.getCause() )
+        {
+            if ( cause instanceof java.net.SocketTimeoutException )
+            {
+                throw new SqlException
+                    ( agent_.logWriter_, new ClientMessageId( SQLState.LOGIN_TIMEOUT ), original );
+            }
+        }
+    }
+
     protected boolean flowReconnect(String password, int securityMechanism) throws SqlException {
         constructExtnam();
         // these calls need to be after newing up the agent
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
index 6a2b7706..96d50478 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
@@ -192,7 +192,7 @@ private static Connection getDefaultConn()throws SQLException
 	{
 		InternalDriver id = InternalDriver.activeDriver();
 		if (id != null) { 
-			Connection conn = id.connect("jdbc:default:connection", null);
+			Connection conn = id.connect( "jdbc:default:connection", null, 0 );
 			if (conn != null)
 				return conn;
 		}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
index 82175199..798ecc13 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
@@ -432,7 +432,7 @@ private void handleShutdown(StandardException shutdownCause) {
 
             InternalDriver driver = InternalDriver.activeDriver();
             if (driver != null) {
-                driver.connect(conStr, (Properties) null);
+                driver.connect( conStr, (Properties) null, 0 );
             }
         } catch (Exception e) {
             // Todo: report error to derby.log if exception is not
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
index 8e28b60d..f54b112d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
@@ -369,7 +369,7 @@ private static EmbedConnection getEmbedConnection() throws SQLException {
         // some other product's Driver might hijack our stored procedure.
         InternalDriver id = InternalDriver.activeDriver();
         if (id != null) { 
-            EmbedConnection conn = (EmbedConnection) id.connect("jdbc:default:connection", null);
+            EmbedConnection conn = (EmbedConnection) id.connect( "jdbc:default:connection", null, 0 );
             if (conn != null)
                 return conn;
         }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
index 84608684..97bb22cc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
@@ -72,10 +72,9 @@ public SQLException getSQLException(String message, String messageId,
 
         final SQLException ex;
         if (sqlState.startsWith(SQLState.CONNECTIVITY_PREFIX)) {
-            //none of the sqlstate supported by derby belongs to
+            //no derby sqlstate belongs to
             //TransientConnectionException DERBY-3074
-            ex = new SQLNonTransientConnectionException(message, sqlState,
-                    severity, t);
+            ex = new SQLNonTransientConnectionException(message, sqlState, severity, t);
         } else if (sqlState.startsWith(SQLState.SQL_DATA_PREFIX)) {
             ex = new SQLDataException(message, sqlState, severity, t);
         } else if (sqlState.startsWith(SQLState.INTEGRITY_VIOLATION_PREFIX)) {
@@ -92,7 +91,11 @@ else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX)) {
             ex = new SQLSyntaxErrorException(message, sqlState, severity, t);
         } else if (sqlState.startsWith(SQLState.UNSUPPORTED_PREFIX)) {
             ex = new SQLFeatureNotSupportedException(message, sqlState, severity, t);
-        } else if (sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5))) {
+        } else if
+                (
+                 sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5)) ||
+                 sqlState.equals(SQLState.LOGIN_TIMEOUT.substring(0, 5))
+                 ) {
             ex = new SQLTimeoutException(message, sqlState, severity, t);
         } else {
             ex = new SQLException(message, sqlState, severity, t);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java
index 74eca287..6d4088df 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java
@@ -423,7 +423,7 @@ private String  getCanonicalServiceName( String rawName )
 
             String  connectionURL = Attribute.PROTOCOL + _credentialsDB;
 
-            Connection  conn = InternalDriver.activeDriver().connect( connectionURL, properties );
+            Connection  conn = InternalDriver.activeDriver().connect( connectionURL, properties, 0 );
             
             warnings = conn.getWarnings();
             conn.close();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver169.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver169.java
index 2d0c2fa1..7af2174a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver169.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver169.java
@@ -60,6 +60,16 @@ protected EmbedConnection getNewEmbedConnection(String url, Properties info)
         return new EmbedConnection(this, url, info);
 	}
 
+    /**
+     * This method does not enforce timeouts on JSR 169. If that functionality is important
+     * on CDC/FP 1.1 then a separate implementation can be plugged in here.
+     */
+    protected EmbedConnection  timeLogin( String url, Properties info, int loginTimeoutSeconds )
+        throws SQLException
+    {
+        return getNewEmbedConnection( url, info );
+    }
+    
 
 	/**
  	 * Get a new nested connection.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
index 2796fb31..7ac617b4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/Driver20.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.ResultSet;
 import org.apache.derby.iapi.jdbc.BrokeredConnection;
 import org.apache.derby.iapi.jdbc.BrokeredConnectionControl;
+import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.i18n.MessageService;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.io.FormatableProperties;
@@ -36,14 +37,25 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.impl.jdbc.*;
 
-import java.sql.SQLException;
+import java.sql.Connection;
 import java.sql.Driver;
+import java.sql.DriverManager;
 import java.sql.DriverPropertyInfo;
+import java.sql.SQLException;
 
 import java.security.Permission;
 import java.security.AccessControlException;
 
 import java.util.Properties;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Future;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.TimeUnit;
 
 /**
 	This class extends the local JDBC driver in order to determine at JBMS
@@ -54,6 +66,13 @@ then we will load the appropriate class(es) that have JDBC 2.0 new public
 
 public abstract class Driver20 extends InternalDriver implements Driver {
 
+    private static  ExecutorService _executorPool;
+    static
+    {
+        _executorPool = Executors.newCachedThreadPool();
+        ((ThreadPoolExecutor) _executorPool).setThreadFactory( new DaemonThreadFactory() );
+    } 
+
 	private static final String[] BOOLEAN_CHOICES = {"false", "true"};
 
 	private Class  antiGCDriverManager;
@@ -219,4 +238,78 @@ public void checkSystemPrivileges(String user,
         throws Exception {
         SecurityUtil.checkUserHasPermission(user, perm);
     }
+
+	public Connection connect( String url, Properties info )
+		 throws SQLException 
+	{
+        return connect( url, info, DriverManager.getLoginTimeout() );
+    }
+    
+    /**
+     * Use java.util.concurrent package to enforce login timeouts.
+     */
+    protected EmbedConnection  timeLogin( String url, Properties info, int loginTimeoutSeconds )
+        throws SQLException
+    {
+        LoginCallable callable = new LoginCallable( this, url, info );
+        Future<EmbedConnection>  task = _executorPool.submit( callable );
+
+        try {
+            return task.get( loginTimeoutSeconds, TimeUnit.SECONDS );
+        }
+        catch (InterruptedException ie) { throw processException( ie ); }
+        catch (ExecutionException ee) { throw processException( ee ); }
+        catch (TimeoutException te) { throw Util.generateCsSQLException( SQLState.LOGIN_TIMEOUT ); }
+    }
+    /** Process exceptions raised while running a timed login */
+    private SQLException    processException( Throwable t )
+    {
+        Throwable   cause = t.getCause();
+        if ( !(cause instanceof SQLException) ) { return Util.javaException( t ); }
+        else { return (SQLException) cause; }
+    }
+
+    /** Thread factory to produce daemon threads which don't block VM shutdown */
+    public  static  final   class   DaemonThreadFactory implements ThreadFactory
+    {
+        public  Thread newThread( Runnable r )
+        {
+            Thread  result = new Thread( r );
+            result.setDaemon( true );
+            return result;
+        }
+    }
+
+    /**
+     * This code is called in a thread which puts time limits on it.
+     */
+    public  static  final   class   LoginCallable implements  Callable<EmbedConnection>
+    {
+        private Driver20        _driver;
+        private String      _url;
+        private Properties  _info;
+
+        public  LoginCallable( Driver20 driver, String url, Properties info )
+        {
+            _driver = driver;
+            _url = url;
+            _info = info;
+        }
+
+        public  EmbedConnection call()  throws SQLException
+        {
+            // erase the state variables after we use them.
+            // might be paranoid but there could be security-sensitive info
+            // in here.
+            String  url = _url;
+            Properties  info = _info;
+            Driver20    driver = _driver;
+            _url = null;
+            _info = null;
+            _driver = null;
+            
+            return driver.getNewEmbedConnection( url, info );
+        }
+    }
+
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java
index a687f1aa..907387ad 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java
@@ -612,7 +612,7 @@ final Connection getConnection(String username,
             url = sb.toString();
         }
 
-        Connection conn =  findDriver().connect(url, info);
+        Connection conn =  findDriver().connect( url, info, loginTimeout );
 
         // JDBC driver's getConnection method returns null if
         // the driver does not handle the request's URL.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java
index f10f22dd..a40f3dad 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java
@@ -405,7 +405,7 @@ public final Connection getConnection(String username, String password)
 		if (shutdownDatabase != null)
 			info.put(Attribute.SHUTDOWN_ATTR, "true");
 
-		Connection conn = findDriver().connect(jdbcurl, info);
+		Connection conn = findDriver().connect( jdbcurl, info, loginTimeout );
 
 		// JDBC driver's getConnection method returns null if
 		// the driver does not handle the request's URL.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
index 8c0924f8..bf6db6a7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/InternalDriver.java
@@ -156,7 +156,7 @@ public static	boolean embeddedDriverAcceptsURL(String url) throws SQLException
 				
 	}
 
-	public Connection connect(String url, Properties info)
+	public Connection connect( String url, Properties info, int loginTimeoutSeconds )
 		 throws SQLException 
 	{
 		if (!acceptsURL(url)) { return null; }
@@ -259,7 +259,10 @@ public Connection connect(String url, Properties info)
 				}
 			}
 			
-			EmbedConnection conn = getNewEmbedConnection(url, finfo);
+            EmbedConnection conn;
+			
+            if ( loginTimeoutSeconds <= 0 ) { conn = getNewEmbedConnection( url, finfo ); }
+            else { conn = timeLogin( url, finfo, loginTimeoutSeconds ); }
 
 			// if this is not the correct driver a EmbedConnection
 			// object is returned in the closed state.
@@ -281,6 +284,12 @@ public Connection connect(String url, Properties info)
 		}
 	}
 
+    /**
+     * Enforce the login timeout.
+     */
+    protected abstract EmbedConnection  timeLogin( String url, Properties info, int loginTimeoutSeconds )
+        throws SQLException;
+    
     /**
      * Checks for System Privileges.
      *
@@ -662,4 +671,6 @@ static void setDeregister(boolean deregister) {
     static boolean getDeregister() {
         return InternalDriver.deregister;
     }
+
+
 }
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 28994480..1933a038 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -107,7 +107,7 @@ The message identifier (ie. the value that matches a field in this class)
 	  <LI> XBCM ClassManager
 	  <LI> XBCX	Cryptography
 	  <LI> XBM0	Monitor
-	  <LI> XBDA DataComm
+	  <LI> XBDA Communications
 	  <LI> XCY0 Properties
 	  </UL>
 
@@ -194,6 +194,11 @@ The message identifier (ie. the value that matches a field in this class)
 	String UNABLE_TO_DELETE_FILE                = "XBM0R.D";
     String INSTANTIATE_STORAGE_FACTORY_ERROR    = "XBM08.D";
 
+	/*
+	** Communications
+	*/
+    String LOGIN_TIMEOUT                        = "XBDA0.C.1";
+
 	/*
 	** Upgrade
 	*/
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java
index e69de29b..ba2a4256 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java
@@ -0,0 +1,368 @@
+/*
+ 
+   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+ 
+      http://www.apache.org/licenses/LICENSE-2.0
+ 
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ 
+ */
+
+package org.apache.derbyTesting.functionTests.tests.jdbc4;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.SQLTimeoutException;
+import java.util.Properties;
+import javax.sql.DataSource;
+import javax.sql.CommonDataSource;
+import javax.sql.ConnectionPoolDataSource;
+import javax.sql.XADataSource;
+
+import junit.framework.*;
+
+import org.apache.derby.authentication.UserAuthenticator;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
+import org.apache.derbyTesting.junit.J2EEDataSource;
+import org.apache.derbyTesting.junit.JDBCClient;
+import org.apache.derbyTesting.junit.JDBCClientSetup;
+import org.apache.derbyTesting.junit.JDBCDataSource;
+import org.apache.derbyTesting.junit.NetworkServerTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+
+/**
+ * Test login timeouts.
+ */
+
+public class LoginTimeoutTest extends BaseJDBCTestCase
+{
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // CONSTANTS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    private static  final   String[][]    SYSTEM_PROPERTIES =
+    {
+        { "derby.connection.requireAuthentication", "true" },
+        { "derby.authentication.provider", LoginTimeoutTest.class.getName() + "$SluggishAuthenticator" },
+    };
+
+    private static  final   boolean SUCCEED = true;
+    private static  final   boolean FAIL = false;
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // STATE
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    private static  final   String      RUTH = "RUTH";
+    private static  final   String      RUTH_PASSWORD = "RUTHPASSWORD";
+
+    private static  final   String      LOGIN_TIMEOUT = "XBDA0";
+    private static  final   String      LOGIN_FAILED = "08004";
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // NESTED CLASSES
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /** User authenticator which sleeps for a while */
+    public  static  final   class   SluggishAuthenticator   implements  UserAuthenticator
+    {
+        private static  final   long    MILLIS_PER_SECOND = 1000L;
+        
+        public  static  long    secondsToSleep = 2;
+        public  static  boolean returnValue = true;
+        
+        public  SluggishAuthenticator() {}
+    
+        public boolean authenticateUser
+            (
+             String userName,
+             String userPassword,
+             String databaseName,
+             Properties info
+             )
+            throws SQLException
+        {
+            // sleepy...
+            try {
+                Thread.sleep( secondsToSleep * MILLIS_PER_SECOND );
+            } catch (Exception e) { throw new SQLException( e.getMessage(), e ); }
+
+            // ...and vacuous.
+            return returnValue;
+        }
+    }
+
+    /** Behavior shared by DataSource and DriverManager */
+    public  static  interface   Connector
+    {
+        public  Connection  getConnection( String user, String password ) throws SQLException;
+
+        public  void    setLoginTimeout( int seconds ) throws SQLException;
+    }
+
+    public  static  final   class   DriverManagerConnector  implements Connector
+    {
+        private BaseJDBCTestCase    _test;
+
+        public  DriverManagerConnector( BaseJDBCTestCase test ) { _test = test; }
+
+        public  Connection  getConnection( String user, String password ) throws SQLException
+        {
+            return _test.openDefaultConnection( user, password );
+        }
+
+        public  void    setLoginTimeout( int seconds ) { DriverManager.setLoginTimeout( seconds ); }
+
+        public  String  toString()  { return "DriverManagerConnector"; }
+    }
+    
+    public  static  final   class   DataSourceConnector  implements Connector
+    {
+        private CommonDataSource  _dataSource;
+
+        public  DataSourceConnector( CommonDataSource dataSource )
+        {
+            _dataSource = dataSource;
+        }
+
+        public  Connection  getConnection( String user, String password ) throws SQLException
+        {
+            if ( _dataSource instanceof DataSource )
+            {
+                return ((DataSource) _dataSource).getConnection( user, password );
+            }
+            else if ( _dataSource instanceof ConnectionPoolDataSource )
+            {
+                return ((ConnectionPoolDataSource) _dataSource).getPooledConnection( user, password ).getConnection();
+            }
+            else if ( _dataSource instanceof XADataSource )
+            {
+                return ((XADataSource) _dataSource).getXAConnection( user, password ).getConnection();
+            }
+            else { throw new SQLException( "Unknown data source type: " + _dataSource.getClass().getName() ); }
+        }
+
+        public  void    setLoginTimeout( int seconds ) throws SQLException
+        { _dataSource.setLoginTimeout( seconds ); }
+
+        public  String  toString()
+        {
+            return "DataSourceConnector( " + _dataSource.getClass().getName() + " )";
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // CONSTRUCTORS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     *
+     * Create a test with the given name.
+     */
+    public LoginTimeoutTest(String name) { super(name); }
+    
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // JUnit MACHINERY
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+    
+    /**
+     * Return suite with all tests of the class.
+     */
+    public static Test suite()
+    {
+        TestSuite   suite = new TestSuite();
+
+        Test    embedded = new TestSuite( LoginTimeoutTest.class, "embedded LoginTimeoutTest" );
+        embedded = TestConfiguration.singleUseDatabaseDecorator( embedded );
+        embedded = new SystemPropertyTestSetup( embedded, systemProperties() );
+        suite.addTest( embedded );
+        
+        Test    clientServer = new TestSuite( LoginTimeoutTest.class, "client/server LoginTimeoutTest" );
+        clientServer = TestConfiguration.singleUseDatabaseDecorator( clientServer );
+        clientServer = new JDBCClientSetup( clientServer, JDBCClient.DERBYNETCLIENT );
+        clientServer = new NetworkServerTestSetup( clientServer, systemPropertiesArray(), new String[]{}, true );
+        suite.addTest( clientServer );
+
+        return suite;
+    }
+    private static  Properties  systemProperties()
+    {
+        Properties  props = new Properties();
+
+        for ( int i = 0; i < SYSTEM_PROPERTIES.length; i++ )
+        {
+            String[]    raw = SYSTEM_PROPERTIES[ i ];
+
+            props.put( raw[ 0 ], raw[ 1 ] );
+        }
+
+        return props;
+    }
+    private static  String[]    systemPropertiesArray()
+    {
+        String[]    result = new String[ SYSTEM_PROPERTIES.length ];
+
+        for ( int i = 0; i < SYSTEM_PROPERTIES.length; i++ )
+        {
+            String[]    raw = SYSTEM_PROPERTIES[ i ];
+
+            result[ i ] = raw[ 0 ] + "=" + raw[ 1 ];
+        }
+
+        return result;
+    }
+    
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // TESTS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Basic test of login timeouts.
+     */
+    public  void    testBasic() throws Exception
+    {
+        DataSource  ds = JDBCDataSource.getDataSource();
+        
+        vetConnector( new DriverManagerConnector( this ), true );
+        vetConnector( new DataSourceConnector( JDBCDataSource.getDataSource() ), true );
+        vetConnector( new DataSourceConnector( J2EEDataSource.getConnectionPoolDataSource() ), true );
+        vetConnector( new DataSourceConnector( J2EEDataSource.getXADataSource() ), true );
+
+        if ( usingEmbedded() ) { vetExceptionPassthrough(); }
+        if ( usingDerbyNetClient() ) { vetServerTimeouts(); }
+    }
+    private void    vetConnector( Connector connector, boolean shouldSucceed ) throws Exception
+    {
+        tryTimeout( connector, 1, FAIL && shouldSucceed );
+        tryTimeout( connector, 10, SUCCEED && shouldSucceed );
+        tryTimeout( connector, 0, SUCCEED && shouldSucceed );
+
+        // revert to default state
+        connector.setLoginTimeout( 0 );
+    }
+    private static  void    tryTimeout( Connector connector, int timeout, boolean shouldSucceed ) throws Exception
+    {
+        println( "Setting timeout " + timeout + " on " + connector );
+        connector.setLoginTimeout( timeout );
+
+        tryTimeout( connector, shouldSucceed );
+    }
+    private static  void    tryTimeout( Connector connector, boolean shouldSucceed ) throws Exception
+    {
+        long    startTime = System.currentTimeMillis();
+        
+        try {
+            Connection  conn = connector.getConnection( RUTH, RUTH_PASSWORD );
+            println( "    Got a " + conn.getClass().getName() );
+            if ( !shouldSucceed )   { fail( "Should not have been able to connect!" ); }
+        }
+        catch (SQLException se)
+        {
+            if ( shouldSucceed ) { fail( "Should have been able to connect!" ); }
+
+            assertTrue( "Didn't expect to see a " + se.getClass().getName(), (se instanceof SQLTimeoutException) );
+            assertSQLState( LOGIN_TIMEOUT, se );
+        }
+
+        long    duration = System.currentTimeMillis() - startTime;
+
+        println( "        Experiment took " + duration + " milliseconds." );
+    }
+    private void    vetExceptionPassthrough() throws Exception
+    {
+        println( "Verifying that exceptions are not swallowed by the embedded login timer." );
+        // set a long timeout which we won't exceed
+        DriverManager.setLoginTimeout( 10 );
+
+        // tell the authenticator to always fail
+        SluggishAuthenticator.returnValue = false;
+
+        try {
+            openDefaultConnection( RUTH, RUTH_PASSWORD );
+            fail( "Didn't expect to get a connection!" );
+        }
+        catch (SQLException se) { assertSQLState( LOGIN_FAILED, se ); }
+
+        // return to default position
+        DriverManager.setLoginTimeout( 0 );
+        SluggishAuthenticator.returnValue = true;
+    }
+    private void    vetServerTimeouts() throws Exception
+    {
+        println( "Verifying behavior when timeouts are also set on the server." );
+
+        Connection  controlConnection = openDefaultConnection( RUTH, RUTH_PASSWORD );
+
+        // create a procedure for changing the login timeout on the server
+        String  createProc = 
+            "create procedure setLoginTimeout( timeout int ) language java parameter style java no sql\n" +
+            "external name '" + getClass().getName() + ".setLoginTimeout'";
+        println( createProc );
+        controlConnection.prepareStatement( createProc ).execute();
+
+        Connector   connector = new DriverManagerConnector( this );
+
+        vetServerTimeout( controlConnection, connector, 1, FAIL );
+        vetServerTimeout( controlConnection, connector, 10, SUCCEED );
+        vetServerTimeout( controlConnection, connector, 0, SUCCEED );
+
+        // reset server timeout to default
+        setServerTimeout( controlConnection, 0 );
+    }
+    private void    vetServerTimeout
+        ( Connection controlConnection, Connector connector, int serverTimeout, boolean shouldSucceed )
+        throws Exception
+    {
+        setServerTimeout( controlConnection, serverTimeout );
+        vetConnector( connector, shouldSucceed );
+    }
+    private void    setServerTimeout( Connection conn, int seconds ) throws Exception
+    {
+        CallableStatement   cs = conn.prepareCall( "call setLoginTimeout( ? )" );
+        cs.setInt( 1, seconds );
+        cs.execute();
+        cs.close();
+    }
+    
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // SQL ROUTINES
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /** Routine to set the DriverManager login timeout on the server */
+    public  static  void    setLoginTimeout( int seconds ) throws Exception
+    {
+        DriverManager.setLoginTimeout( seconds );
+    }
+    
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
index 20fc9ebf..820a5093 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
@@ -80,6 +80,7 @@ public static Test suite() throws SQLException {
         suite.addTest(AbortTest.suite());
         suite.addTest(Driver40Test.suite());
         suite.addTest(Driver40UnbootedTest.suite());
+        suite.addTest(LoginTimeoutTest.suite());
 
         if ( isJava8() )
         {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
index 500ded8a..216813f8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
@@ -162,6 +162,7 @@ public void test_errorcode() throws Exception
         		{"58015","The DDM object 0x{0} is not supported.  The connection has been terminated.","40000"},
         		{"58016","The DDM parameter 0x{0} is not supported.  The connection has been terminated.","40000"},
         		{"58017","The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated.","40000"},
+        		{"XBDA0","Login timeout exceeded.","40000"},
         		{"XBM01","Startup failed due to an exception. See next exception for details. ","45000"},
         		{"XBM02","Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software.","45000"},
         		{"XBM03","Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED.","45000"},
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java
index 71d9d8e6..3173e82c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java
@@ -59,10 +59,10 @@ public void rollback() throws SQLException {
             }
         }
 
-        public Connection connect(String url, Properties info) {
+        public Connection connect( String url, Properties info, int loginTimeout ) {
             Connection conn = null;
             try {
-                conn = super.connect(url, info);
+                conn = super.connect( url, info, loginTimeout );
             } catch (Exception e) {
                 //this exception is ignored for mocking
             }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java
index dcb1ec55..efdcb06b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java
@@ -178,6 +178,16 @@ public void shutEngine() throws SQLException {
         tmpDs.getPooledConnection();
     }
     
+    public void setLoginTimeout( int seconds ) throws SQLException
+    {
+        ds.setLoginTimeout( seconds );
+    }
+    
+    public int getLoginTimeout() throws SQLException
+    {
+        return ds.getLoginTimeout();
+    }
+    
     public String getDatabaseName() {
         String databaseName=null;
         try {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java
index c4f577ad..feee268c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java
@@ -106,4 +106,14 @@ abstract Connection openConnection(String databaseName, String user, String pass
      * Return nothing, exception is expected to be thrown with SQLState XJ015
      */
     abstract void shutEngine() throws SQLException;
+   
+    /**
+     * Set the login timeout for getting connections. Timeout is measured in seconds.
+     */
+    abstract void setLoginTimeout( int seconds ) throws SQLException;
+    
+    /**
+     * Get the login timeout in seconds.
+     */
+    abstract int getLoginTimeout() throws SQLException;
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java
index 533912c8..71beeed8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java
@@ -146,6 +146,16 @@ public void shutEngine() throws SQLException {
         tmpDs.getConnection();
     }
     
+    public void setLoginTimeout( int seconds ) throws SQLException
+    {
+        ds.setLoginTimeout( seconds );
+    }
+    
+    public int getLoginTimeout() throws SQLException
+    {
+        return ds.getLoginTimeout();
+    }
+    
     /**
      * Get a connection from a single use DataSource configured
      * from the configuration but with the passed in property set.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
index 11b059c9..42f7c2c5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
@@ -100,6 +100,9 @@ public Connection openConnection(String databaseName, String user, String passwo
             return DriverManager.getConnection(url, connectionAttributes);
         } catch (SQLException e) {
 
+            // Uncomment this for more information
+            // printFullException( e, 0 );
+
             // Expected state for database not found.
             // For the client the generic 08004 is returned,
             // will just retry on that.
@@ -119,6 +122,33 @@ public Connection openConnection(String databaseName, String user, String passwo
         }
     }
 
+    private static void printFullException( Throwable t, int indentLevel )
+    {
+        if ( t == null ) { return; }
+
+        String              tab = "    ";
+        StringBuilder   buffer = new StringBuilder();
+
+        for ( int i = 0; i < indentLevel; i++ ) { buffer.append( tab ); }
+        buffer.append( "Message:  " + t.getMessage() );
+
+        SQLException    nextSQLException = null;
+        
+        if ( t instanceof SQLException )
+        {
+            SQLException    se = (SQLException) t;
+
+            buffer.append( se.getClass().getName() + " : SQLState = " + se.getSQLState() );
+
+            nextSQLException = se.getNextException();
+        }
+
+        System.out.println( buffer.toString() );
+
+        printFullException( nextSQLException, indentLevel + 1 );
+        printFullException( t.getCause(), indentLevel + 1 );
+    }
+
     /**
      * Shutdown the database using the attributes shutdown=true
      * with the user and password defined by the configuration.
@@ -141,6 +171,16 @@ public void shutEngine() throws SQLException {
         getConnectionByAttributes("jdbc:derby:", "shutdown", "true");
     }
     
+    public void setLoginTimeout( int seconds ) throws SQLException
+    {
+        DriverManager.setLoginTimeout( seconds );
+    }
+    
+    public int getLoginTimeout() throws SQLException
+    {
+        return DriverManager.getLoginTimeout();
+    }
+    
     /**
      * Open a connection using JDBC attributes with a JDBC URL.
      * The attributes user and password are set from the configuration
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java
index fb7375db..ad07f4c8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCClient.java
@@ -90,7 +90,7 @@ static JDBCClient getDefaultEmbedded()
     /**
      * The Derby network client.
      */
-    static final JDBCClient DERBYNETCLIENT= new JDBCClient(
+    public static final JDBCClient DERBYNETCLIENT= new JDBCClient(
             "DerbyNetClient",
             "org.apache.derby.jdbc.ClientDriver",
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
index 212790ab..a82d5803 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
@@ -105,7 +105,7 @@ static Object getDataSource(TestConfiguration config,
         if (beanProperties == null)
              beanProperties = getDataSourceProperties(config);
         
-        return (javax.sql.DataSource) getDataSourceObject(dsClassName,
+        return getDataSourceObject(dsClassName,
             beanProperties);
     }
     
@@ -143,7 +143,7 @@ static HashMap getDataSourceProperties(TestConfiguration config)
      * If a thread context class loader exists then it is used
      * to try and load the class.
      */
-    static Object getDataSourceObject(String classname, HashMap beanProperties)
+    static javax.sql.DataSource getDataSourceObject(String classname, HashMap beanProperties)
     {
         ClassLoader contextLoader =
             (ClassLoader) AccessController.doPrivileged
@@ -155,11 +155,11 @@ public Object run()  {
         });
     
         try {
-            Object ds = null;
+            javax.sql.DataSource ds = null;
             if (contextLoader != null)
             {
                 try {
-                    ds = Class.forName(classname, true, contextLoader).newInstance();
+                    ds = (javax.sql.DataSource) Class.forName(classname, true, contextLoader).newInstance();
                 } catch (Exception e) {
                     // context loader may not be correctly hooked up
                     // with parent, try without it.
@@ -167,7 +167,9 @@ public Object run()  {
             }
             
             if (ds == null)
-                ds = Class.forName(classname).newInstance();
+            {
+                ds = (javax.sql.DataSource) Class.forName(classname).newInstance();
+            }
             
             for (Iterator i = beanProperties.keySet().iterator();
                 i.hasNext(); )
@@ -177,6 +179,9 @@ public Object run()  {
                 
                 setBeanProperty(ds, property, value);
             }
+
+            ds.setLoginTimeout( TestConfiguration.getCurrent().getLoginTimeout() );
+            
             return ds;
         } catch (Exception e) {
             BaseTestCase.fail("unexpected error", e);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 67c8e6ad..1c944d59 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -117,6 +117,7 @@
     private final static String KEY_HOSTNAME = "hostName";
     private final static String KEY_PORT = "port";
     private final static String KEY_VERBOSE = "derby.tests.debug";    
+    private final static String KEY_LOGIN_TIMEOUT = "derby.tests.login.timeout";    
     private final static String KEY_TRACE = "derby.tests.trace";
     private final static String KEY_SSL = "ssl";
     private final static String KEY_JMX_PORT = "jmxPort";
@@ -1481,6 +1482,18 @@ else if (JDBC.vmSupportsJDBC3())
             connector = new DataSourceConnector();
         }
         connector.setConfiguration(this);
+
+        try {
+            String  loginTimeoutString = BaseTestCase.getSystemProperty( KEY_LOGIN_TIMEOUT );
+            
+            if ( loginTimeoutString != null )
+            {
+                int loginTimeout = Integer.parseInt( loginTimeoutString );
+
+                connector.setLoginTimeout( loginTimeout );
+            }
+        }
+        catch (Exception e) { Assert.fail(e.getMessage()); }
     }
 
     /**
@@ -1806,6 +1819,12 @@ public void shutdownEngine()
         }
     }    
 
+    /** Get the login timeout from the connector */
+    public  int getLoginTimeout() throws SQLException
+    {
+        return connector.getLoginTimeout();
+    }
+
     public void waitForShutdownComplete(String physicalDatabaseName) {
         String path = getDatabasePath(physicalDatabaseName);
         boolean lockfilepresent = true;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java
index f96fcf75..b3ec2f08 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java
@@ -145,6 +145,16 @@ public void shutEngine() throws SQLException {
         Assert.fail("shutdown engine not implemened");
     }
     
+    public void setLoginTimeout( int seconds ) throws SQLException
+    {
+        ds.setLoginTimeout( seconds );
+    }
+    
+    public int getLoginTimeout() throws SQLException
+    {
+        return ds.getLoginTimeout();
+    }
+    
     public String getDatabaseName() {
         String databaseName=null;
         try {
