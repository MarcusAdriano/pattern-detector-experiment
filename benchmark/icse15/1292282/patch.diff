diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java
index e994d1a0..a9f908a4 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java
@@ -84,7 +84,11 @@ public int length() {
    */
   @Override
   public DocIdSetIterator iterator() throws IOException {
-    return new FilteredDocIdSetIterator(_innerSet.iterator()) {
+    final DocIdSetIterator iterator = _innerSet.iterator();
+    if (iterator == null) {
+      return null;
+    }
+    return new FilteredDocIdSetIterator(iterator) {
       @Override
       protected boolean match(int docid) {
         return FilteredDocIdSet.this.match(docid);
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
index f2a5553a..43b1c0e4 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
@@ -125,4 +125,41 @@ public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws
     dir.close();
   }
 
+  public void testNullIteratorFilteredDocIdSet() throws Exception {
+    Directory dir = newDirectory();
+    RandomIndexWriter writer = new RandomIndexWriter(random, dir);
+    Document doc = new Document();
+    doc.add(newField("c", "val", StringField.TYPE_UNSTORED));
+    writer.addDocument(doc);
+    IndexReader reader = writer.getReader();
+    writer.close();
+    
+    // First verify the document is searchable.
+    IndexSearcher searcher = newSearcher(reader);
+    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);
+    
+      // Now search w/ a Filter which returns a null DocIdSet
+    Filter f = new Filter() {
+      @Override
+      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {
+        final DocIdSet innerNullIteratorSet = new DocIdSet() {
+          @Override
+          public DocIdSetIterator iterator() {
+            return null;
+          } 
+        };
+        return new FilteredDocIdSet(innerNullIteratorSet) {
+          @Override
+          protected boolean match(int docid) {
+            return true;
+          }	
+        };
+      }
+    };
+    
+    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);
+    reader.close();
+    dir.close();
+  }
+
 }
