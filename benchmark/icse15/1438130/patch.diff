diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index 2483f708..e75cd2cf 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -1326,11 +1326,13 @@ private void checkDocValues(DocValues docValues, String fieldName, DocValues.Typ
       // check sorted bytes
       SortedSource sortedValues = values.asSortedSource();
       Comparator<BytesRef> comparator = sortedValues.getComparator();
+      int maxOrd = sortedValues.getValueCount() - 1;
+      FixedBitSet seenOrds = new FixedBitSet(sortedValues.getValueCount());
       int lastOrd = -1;
       BytesRef lastBytes = new BytesRef();
       for (int i = 0; i < expectedDocs; i++) {
         int ord = sortedValues.ord(i);
-        if (ord < 0 || ord > expectedDocs) {
+        if (ord < 0 || ord > maxOrd) {
           throw new RuntimeException("field: " + fieldName + " ord is out of bounds: " + ord);
         }
         BytesRef bytes = new BytesRef();
@@ -1344,6 +1346,13 @@ private void checkDocValues(DocValues docValues, String fieldName, DocValues.Typ
         }
         lastOrd = ord;
         lastBytes = bytes;
+        seenOrds.set(ord);
+      }
+      if (seenOrds.cardinality() != sortedValues.getValueCount()) {
+        // TODO: find the bug here and figure out a workaround (we can implement in LUCENE-4547's back compat layer maybe)
+        // basically ord 0 is unused by any docs: so the sortedbytes ords are all off-by-one
+        // does it always happen? e.g. maybe only if there are missing values? or a bug in its merge optimizations?
+        // throw new RuntimeException("dv for field: " + fieldName + " has holes in its ords, valueCount=" + sortedValues.getValueCount() + " but only used: " + seenOrds.cardinality());
       }
     }
   }
