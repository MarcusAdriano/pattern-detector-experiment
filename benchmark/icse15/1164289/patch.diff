diff --git a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
index 41dfaeec..c574d191 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
@@ -105,17 +105,20 @@ public void testNonWritablePersistFile() throws Exception {
       filePath += File.separator;
     filePath += "dataimport.properties";
     File f = new File(filePath);
-    // execute the test only if we are able to set file to read only mode
-    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {
+
       try {
+      // execute the test only if we are able to set file to read only mode
+      assumeTrue("No dataimport.properties file", f.exists() || f.createNewFile());
+      assumeTrue("dataimport.proprties can't be set read only", f.setReadOnly());
+
         List parentRow = new ArrayList();
         parentRow.add(createMap("id", "1"));
         MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());
 
         List childRow = new ArrayList();
         childRow.add(createMap("desc", "hello"));
-        MockDataSource.setIterator("select * from y where y.A='1'", childRow
-            .iterator());
+      MockDataSource.setIterator("select * from y where y.A='1'",
+                                 childRow.iterator());
 
         runFullImport(dataConfig_delta);
         assertQ(req("id:1"), "//*[@numFound='0']");
@@ -123,7 +126,6 @@ public void testNonWritablePersistFile() throws Exception {
         f.delete();
       }
     }
-  }
 
   // WORKS
 
