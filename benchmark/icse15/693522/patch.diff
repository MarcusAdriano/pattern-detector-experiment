diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index 593be363..f4fbee96 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -467,7 +467,7 @@ private String    runServerCommand( String commandSpecifics )
         StringBuffer    buffer = new StringBuffer();
         String          classpath = getSystemProperty( "java.class.path" );
 
-        buffer.append( "java -classpath " );
+        buffer.append( getJavaExecutableName() + " -classpath " );
         buffer.append( classpath );
         buffer.append( " -Demma.verbosity.level=silent");
         buffer.append( " org.apache.derby.drda.NetworkServerControl -p " + portNumber + " " + commandSpecifics );
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
index 76d13c77..777f4bf7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
@@ -103,7 +103,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     
     final static String FS = File.separator;
     final static String PS = File.pathSeparator;
-    final static String JVMloc = FS+".."+FS+"bin"+FS+"java"; // "/../bin/java"
+    final static String JVMloc = BaseTestCase.getJavaExecutableName();
     
     static boolean showSysinfo = false;
     static long SLEEP_TIME_MILLIS = 5000L;
@@ -316,7 +316,7 @@ void runTest(String replicationTest,
                 // See TestConfiguration: startNetworkServer and stopNetworkServer
                 + PS + test_jars;
         
-        String clientJvm = clientVM+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = null;
         
@@ -400,7 +400,7 @@ void runTestOnSlave(String replicationTest,
                 // See TestConfiguration: startNetworkServer and stopNetworkServer
                 + PS + test_jars;
         
-        String clientJvm = clientVM+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = null;
         
@@ -498,7 +498,7 @@ private void runLoad(String load,
                 // See TestConfiguration: startNetworkServer and stopNetworkServer
                 + PS + test_jars;
         
-        String clientJvm = clientVM+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = null;
         
@@ -577,7 +577,7 @@ private void runStateTest(String stateTest,
                 // See TestConfiguration: startNetworkServer and stopNetworkServer
                 + PS + test_jars;
         
-        String clientJvm = clientVM+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = null;
         
@@ -642,7 +642,7 @@ void bootMasterDatabase(String clientVM,
         { // Use full classpath when running locally. Can not vary server versions!
             ijClassPath = classPath;
         }
-        String clientJvm = jvmVersion+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = clientJvm 
                 + " -Dij.driver=" + DRIVER_CLASS_NAME
@@ -731,11 +731,10 @@ void startMaster(String clientVM,
         }
         else
         {
-            startMaster_ij(jvmVersion,
-                    dbName,
-                    masterHost, masterServerPort,
-                    slaveReplInterface, slaveReplPort,
-                    testClientHost);
+            startMaster_ij(dbName,
+                    masterHost,
+                    masterServerPort, slaveReplInterface,
+                    slaveReplPort, testClientHost);
         }
         /* else if ...
         {
@@ -760,7 +759,7 @@ private void startMaster_CLI(String clientVM,
         
         String masterClassPath = derbyMasterVersion +FS+ "derbynet.jar";
         
-        String clientJvm = clientVM+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         if ( masterHost.equals("localhost") )
         { // Use full classpath when running locally. Can not vary server versions!
@@ -794,14 +793,12 @@ private void startMaster_CLI(String clientVM,
                 "startMaster_CLI ");
         
     }
-    private void startMaster_ij(String jvmVersion,
-            String dbName,
-            String masterHost,  // Where the master db is run.
-            int masterServerPort, // master server interface accepting client requests
-            
-            String slaveReplInterface, // slaveHost,
-            int slaveReplPort, // slavePort)
+    private void startMaster_ij(String dbName,
+            String masterHost,
+            int masterServerPort,  // Where the master db is run.
+            String slaveReplInterface, // master server interface accepting client requests
             
+            int slaveReplPort, // slaveHost,
             String testClientHost)
             throws Exception
     {
@@ -825,7 +822,7 @@ private void startMaster_ij(String jvmVersion,
             ijClassPath = classPath;
         }
         
-        String clientJvm = jvmVersion+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = clientJvm // "java"
                 + " -Dij.driver=" + DRIVER_CLASS_NAME
@@ -1002,7 +999,7 @@ private void startSlave_CLI(String clientVM,
             slaveClassPath = classPath;
         }
         
-        String clientJvm = clientVM+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         /*
          * java -classpath ${SLAVE_LIB}/derbynet.jar org.apache.derby.drda.NetworkServerControl \
@@ -1059,7 +1056,7 @@ private void startSlave_ij(String jvmVersion,
             ijClassPath = classPath;
         }
         
-        String clientJvm = jvmVersion+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = clientJvm // "java"
                 + " -Dij.driver=" + DRIVER_CLASS_NAME
@@ -1190,7 +1187,7 @@ private void stopSlave_ij(String jvmVersion,
             ijClassPath = classPath;
         }
         
-        String clientJvm = jvmVersion+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = clientJvm // "java"
                 + " -Dij.driver=" + DRIVER_CLASS_NAME
@@ -1250,7 +1247,7 @@ private void failOver_ij(String jvmVersion,
             ijClassPath = classPath;
         }
         
-        String clientJvm = jvmVersion+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = clientJvm // "java"
                 + " -Dij.driver=" + DRIVER_CLASS_NAME
@@ -1330,7 +1327,7 @@ private void stopMaster_ij(String jvmVersion,
             ijClassPath = classPath;
         }
         
-        String clientJvm = jvmVersion+JVMloc;
+        String clientJvm = BaseTestCase.getJavaExecutableName();
         
         String command = clientJvm // "java"
                 + " -Dij.driver=" + DRIVER_CLASS_NAME
@@ -2171,7 +2168,6 @@ NetworkServerControl startServer(String serverVM, String serverVersion,
         final String debugId = "startServer@" + serverHost + ":" + serverPort + " ";
         util.DEBUG(debugId+"+++ StartServer " + serverVM + " / " + serverVersion);
         
-        String serverJvm = serverVM+JVMloc;
         String serverClassPath = serverVersion + FS+"derby.jar"
                 + PS + serverVersion + FS+"derbynet.jar";
         if ( serverHost.equals("localhost") )
@@ -2186,7 +2182,7 @@ NetworkServerControl startServer(String serverVM, String serverVersion,
         
         String workingDirName = userDir+FS+dbSubDirPath;// "system" for this server
         
-        final String[] commandElements = {serverJvm
+        final String[] commandElements = {BaseTestCase.getJavaExecutableName()
                 , " -Dderby.system.home=" + workingDirName
                 , " -Dderby.infolog.append=true"
                 // , " -Dderby.language.logStatementText=true" // Goes into derby.log: Gets HUGE!
@@ -2378,7 +2374,7 @@ void stopServer(String serverVM, String serverVersion,
         util.DEBUG("+++ stopServer " + serverVM + " / " + serverVersion
                 + " " + debugId);
         
-        String serverJvm = serverVM+JVMloc;
+        String serverJvm = BaseTestCase.getJavaExecutableName();
         String serverClassPath = serverVersion + FS+"derby.jar"
                 + PS + serverVersion + FS+"derbynet.jar";
         if ( serverHost.equals("localhost") )
@@ -2695,7 +2691,7 @@ void startLoad(String load,
         { // Use full classpath when running locally. Can not vary server versions!
             ijClassPath = classPath;
         }
-            String clientJvm = jvmVersion+JVMloc;
+            String clientJvm = BaseTestCase.getJavaExecutableName();
             String command = "rm -rf /"+masterDatabasePath+FS+dbSubPath+FS+database+";" // FIXME! for slave load!
                     + clientJvm // "java"
                     + " -Dij.driver=" + DRIVER_CLASS_NAME
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index b58b4cfc..792e5601 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -506,6 +506,20 @@ public Object run() throws IOException {
 	    return pr;
 	}
    
+   /**
+         * Return the executable name for spawning java commands.
+         * This will be <path to j9>/j9  for j9 jvms.
+	 * @return full path to java executable.
+         */
+         public static final String getJavaExecutableName() {
+             String vmname = getSystemProperty("com.ibm.oti.vm.exe");
+             if (vmname == null)
+                 vmname = getSystemProperty("java.home") + File.separator + "bin" +
+                 File.separator +"java";
+             return vmname;
+         }
+          
+   
    /**
     * Reads output from a process and returns it as a string.
     * This will block until the process terminates.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
index 2bb4d40b..44b3cb6d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
@@ -249,7 +249,7 @@ private SpawnedProcess startSeparateProcess() throws Exception
         String              classpath = BaseTestCase.getSystemProperty( "java.class.path" );
         boolean         skipHostName = false;
 
-        al.add( "java" );
+        al.add( BaseTestCase.getJavaExecutableName() );
         al.add( "-classpath" );
         al.add( classpath );
         
