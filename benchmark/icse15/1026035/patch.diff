diff --git a/lucene/dev/branches/branch_3x/solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest.java b/lucene/dev/branches/branch_3x/solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest.java
index 70b7cc21..87280fa2 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest.java
@@ -91,6 +91,7 @@
 import org.apache.solr.handler.component.QueryComponent;
 import org.apache.solr.handler.component.SearchComponent;
 import org.apache.solr.request.LocalSolrQueryRequest;
+import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.response.SolrQueryResponse;
 import org.apache.solr.request.SolrRequestHandler;
 import org.junit.Test;
@@ -121,12 +122,13 @@ public void testComponent() throws Exception {
     SolrQueryResponse rsp;
     rsp = new SolrQueryResponse();
     rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
+    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
+    handler.handleRequest(req, rsp);
     NamedList values = rsp.getValues();
     Object clusters = values.get("clusters");
     //System.out.println("Clusters: " + clusters);
     assertTrue("clusters is null and it shouldn't be", clusters != null);
-
+    req.close();
 
     params = new ModifiableSolrParams();
     params.add(ClusteringComponent.COMPONENT_NAME, "true");
@@ -138,13 +140,13 @@ public void testComponent() throws Exception {
 
     rsp = new SolrQueryResponse();
     rsp.add("responseHeader", new SimpleOrderedMap());
-    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
+    req = new LocalSolrQueryRequest(core, params);
+    handler.handleRequest(req, rsp);
     values = rsp.getValues();
     clusters = values.get("clusters");
     //System.out.println("Clusters: " + clusters);
     assertTrue("clusters is null and it shouldn't be", clusters != null);
-
-
+    req.close();
   }
 
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
index 0903b17f..c6ddf7a9 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
@@ -29,6 +29,7 @@
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.XML;
 import org.apache.solr.core.SolrCore;
+import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequestBase;
 import org.apache.solr.response.SolrQueryResponse;
@@ -123,15 +124,13 @@ protected ContentStreamLoader newLoader(SolrQueryRequest req, UpdateRequestProce
    */
   @Deprecated
   public void doLegacyUpdate(Reader input, Writer output) {
-    try {
       SolrCore core = SolrCore.getSolrCore();
+    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());
 
+    try {
       // Old style requests do not choose a custom handler
       UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);
 
-      SolrParams params = new MapSolrParams(new HashMap<String, String>());
-      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {
-      };
       SolrQueryResponse rsp = new SolrQueryResponse(); // ignored
       XMLStreamReader parser = inputFactory.createXMLStreamReader(input);
       UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);
@@ -148,6 +147,9 @@ public void doLegacyUpdate(Reader input, Writer output) {
         log.error("Error writing to output stream: " + ee);
       }
     }
+    finally {
+      req.close();
+    }
   }
   //////////////////////// SolrInfoMBeans methods //////////////////////
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java
index 5ca60bae..60e9b5c5 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/BasicFunctionalityTest.java
@@ -237,12 +237,12 @@ public void testRequestHandlerBaseException() {
       };
     handler.init(new NamedList());
     SolrQueryResponse rsp = new SolrQueryResponse();
+    SolrQueryRequest req = req();
     h.getCore().execute(handler, 
-                        new LocalSolrQueryRequest(h.getCore(),
-                                                  new NamedList()),
+                        req,
                         rsp);
     assertNotNull("should have found an exception", rsp.getException());
-                        
+    req.close();                    
   }
 
   @Test
@@ -303,11 +303,13 @@ public void testXMLWriter() throws Exception {
     rsp.add("\"quoted\"", "\"value\"");
 
     StringWriter writer = new StringWriter(32000);
-    XMLWriter.writeResponse(writer,req("foo"),rsp);
+    SolrQueryRequest req = req("foo");
+    XMLWriter.writeResponse(writer,req,rsp);
 
     DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
     builder.parse(new ByteArrayInputStream
                   (writer.toString().getBytes("UTF-8")));
+    req.close();
   }
 
   @Test
@@ -327,6 +329,7 @@ public void testLocalSolrQueryRequestParams() {
     assertEquals(2, arrayParams.length);
     assertEquals("array", arrayParams[0]);
     assertEquals("value", arrayParams[1]);
+    req.close();
   }
 
   @Test
@@ -442,7 +445,7 @@ public void testSolrParams() throws Exception {
     assertEquals("SSS", p.get("ss"));
     assertEquals("XXX", p.get("xx"));
 
-    
+    req.close();
   }
 
   @Test
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
index 9d40fe7d..10d51073 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
@@ -23,6 +23,7 @@
 import java.lang.reflect.Field;
 
 import org.apache.lucene.analysis.standard.StandardTokenizer;
+import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.core.Config;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.schema.FieldType;
@@ -30,20 +31,16 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.util.Version;
+import org.junit.BeforeClass;
 
 /**
  * Tests for luceneMatchVersion property for analyzers
  */
-public class TestLuceneMatchVersion extends AbstractSolrTestCase {
+public class TestLuceneMatchVersion extends SolrTestCaseJ4 {
 
-  @Override
-  public String getSchemaFile() {
-    return "schema-luceneMatchVersion.xml";
-  }
-  
-  @Override
-  public String getSolrConfigFile() {
-    return "solrconfig.xml";
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig.xml","schema-luceneMatchVersion.xml");
   }
   
   // this must match the solrconfig.xml version for this test
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SOLR749Test.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SOLR749Test.java
index 6507f2d3..5ce56079 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SOLR749Test.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SOLR749Test.java
@@ -16,23 +16,22 @@
  * limitations under the License.
  */
 
+import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.search.QParserPlugin;
 import org.apache.solr.search.FooQParserPlugin;
 import org.apache.solr.search.ValueSourceParser;
+import org.junit.BeforeClass;
 
 
 /**
  * Test for https://issues.apache.org/jira/browse/SOLR-749
  *
  **/
-public class SOLR749Test extends AbstractSolrTestCase{
-  public String getSchemaFile() {
-    return "schema.xml";
-  }
-
-  public String getSolrConfigFile() {
-    return "solrconfig-SOLR-749.xml";
+public class SOLR749Test extends SolrTestCaseJ4 {
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-SOLR-749.xml","schema.xml");
   }
 
   public void testConstruction() throws Exception {
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SolrCoreTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SolrCoreTest.java
index 9c6a6099..46eece15 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SolrCoreTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/SolrCoreTest.java
@@ -17,22 +17,33 @@
 
 package org.apache.solr.core;
 
+import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.handler.RequestHandlerBase;
 import org.apache.solr.handler.component.SpellCheckComponent;
 import org.apache.solr.handler.component.QueryComponent;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrRequestHandler;
 import org.apache.solr.response.SolrQueryResponse;
-import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.util.plugin.SolrCoreAware;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.util.concurrent.*;
 import java.util.*;
-public class SolrCoreTest extends AbstractSolrTestCase {
+public class SolrCoreTest extends SolrTestCaseJ4 {
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    initCore("solrconfig.xml", "schema.xml");
+  }
 
-  public String getSchemaFile() { return "schema.xml"; }
-  public String getSolrConfigFile() { return "solrconfig.xml"; }
+  @Override
+  public void tearDown() throws Exception {
+    deleteCore();
+    super.tearDown();
+  }
   
+  @Test
   public void testRequestHandlerRegistry() {
     SolrCore core = h.getCore();
 
@@ -48,6 +59,7 @@ public void testRequestHandlerRegistry() {
     assertEquals( core.getRequestHandlers().get( path ), handler2 );
   }
 
+  @Test
   public void testClose() throws Exception {
     final CoreContainer cores = h.getCoreContainer();
     SolrCore core = cores.getCore("");
@@ -55,7 +67,7 @@ public void testClose() throws Exception {
     ClosingRequestHandler handler1 = new ClosingRequestHandler();
     handler1.inform( core );
 
-    String path = "/this/is A path /that won't be registered!";
+    String path = "/this/is A path /that won't be registered 2!!!!!!!!!!!";
     SolrRequestHandler old = core.registerRequestHandler( path, handler1 );
     assertNull( old ); // should not be anything...
     assertEquals( core.getRequestHandlers().get( path ), handler1 );
@@ -64,6 +76,7 @@ public void testClose() throws Exception {
     assertTrue("Handler not closed", handler1.closed == true);
   }
   
+  @Test
   public void testRefCount() throws Exception {
     SolrCore core = h.getCore();
     assertTrue("Refcount != 1", core.getOpenCount() == 1);
@@ -100,6 +113,7 @@ public void testRefCount() throws Exception {
   }
     
 
+  @Test
   public void testRefCountMT() throws Exception {
     SolrCore core = h.getCore();
     assertTrue("Refcount != 1", core.getOpenCount() == 1);
@@ -167,6 +181,7 @@ public Integer call() {
     assertTrue("Running for too long...", service.awaitTermination(60, TimeUnit.SECONDS));
   }
 
+  @Test
   public void testInfoRegistry() throws Exception {
     //TEst that SolrInfoMBeans are registered, including SearchComponents
     SolrCore core = h.getCore();
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java
index 712dc15e..27cb3919 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java
@@ -5,18 +5,18 @@
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.LogDocMergePolicy;
 import org.apache.lucene.index.SerialMergeScheduler;
+import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.update.DirectUpdateHandler2;
-import org.apache.solr.util.AbstractSolrTestCase;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
-public class TestLegacyMergeSchedulerPolicyConfig extends AbstractSolrTestCase {
-  public String getSchemaFile() {
-    return "schema.xml";
-  }
-
-  public String getSolrConfigFile() {
-    return "solrconfig-legacy.xml";
+public class TestLegacyMergeSchedulerPolicyConfig extends SolrTestCaseJ4 {
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-legacy.xml", "schema.xml");
   }
   
+  @Test
   public void testLegacy() throws Exception {
     IndexWriter writer = new ExposeWriterHandler().getWriter();
     assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestPropInjectDefaults.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestPropInjectDefaults.java
index ffebf5a3..13fbd366 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestPropInjectDefaults.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestPropInjectDefaults.java
@@ -22,19 +22,15 @@
 import org.apache.lucene.index.ConcurrentMergeScheduler;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.LogByteSizeMergePolicy;
+import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.update.DirectUpdateHandler2;
-import org.apache.solr.util.AbstractSolrTestCase;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
-public class TestPropInjectDefaults extends AbstractSolrTestCase {
-
-  @Override
-  public String getSchemaFile() {
-    return "schema.xml";
-  }
-
-  @Override
-  public String getSolrConfigFile() {
-    return "solrconfig-propinject-indexdefault.xml";
+public class TestPropInjectDefaults extends SolrTestCaseJ4 {
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-propinject-indexdefault.xml", "schema.xml");
   }
   
   class ExposeWriterHandler extends DirectUpdateHandler2 {
@@ -48,6 +44,7 @@ public IndexWriter getWriter() throws IOException {
     }
   }
   
+  @Test
   public void testMergePolicyDefaults() throws Exception {
     ExposeWriterHandler uh = new ExposeWriterHandler();
     IndexWriter writer = uh.getWriter();
@@ -56,7 +53,7 @@ public void testMergePolicyDefaults() throws Exception {
     uh.close();
   }
   
-
+  @Test
   public void testPropsDefaults() throws Exception {
     ExposeWriterHandler uh = new ExposeWriterHandler();
     IndexWriter writer = uh.getWriter();
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
index edcf9211..08facb95 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
@@ -104,6 +104,8 @@ public void testResolveAnalysisRequest() throws Exception {
     field = document.getField("text");
     assertNotNull(field);
     assertEquals("The Text", field.getFirstValue());
+
+    req.close();
   }
 
   /**
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java
index 6b00e9cb..0ed2fd70 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java
@@ -25,6 +25,7 @@
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.client.solrj.request.FieldAnalysisRequest;
 import org.apache.solr.request.LocalSolrQueryRequest;
+import org.apache.solr.request.SolrQueryRequest;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -66,7 +67,8 @@ public void testResolveAnalysisRequest() throws Exception {
     params.add(AnalysisParams.FIELD_VALUE, "the quick red fox jumped over the lazy brown dogs");
     params.add(CommonParams.Q, "fox brown");
 
-    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);
+    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);
     List<String> fieldNames = request.getFieldNames();
     assertEquals("Expecting 2 field names", 2, fieldNames.size());
     assertEquals("text", fieldNames.get(0));
@@ -78,25 +80,35 @@ public void testResolveAnalysisRequest() throws Exception {
     assertEquals("the quick red fox jumped over the lazy brown dogs", request.getFieldValue());
     assertEquals("fox brown", request.getQuery());
     assertFalse(request.isShowMatch());
+    req.close();
 
     // testing overide of query value using analysis.query param
     params.add(AnalysisParams.QUERY, "quick lazy");
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertEquals("quick lazy", request.getQuery());
+    req.close();
 
     // testing analysis.showmatch param
     params.add(AnalysisParams.SHOW_MATCH, "false");
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertFalse(request.isShowMatch());
+    req.close();
+
     params.set(AnalysisParams.SHOW_MATCH, "true");
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertTrue(request.isShowMatch());
+    req.close();
 
     // testing absence of query value
     params.remove(CommonParams.Q);
     params.remove(AnalysisParams.QUERY);
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertNull(request.getQuery());
+    req.close();
   }
 
   /**
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java
index 77a9a9e2..2e8a086b 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -445,6 +445,7 @@ public void testReplicateAfterStartup() throws Exception {
     masterClient = createNewSolrServer(masterJetty.getLocalPort());
     copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), "solrconfig.xml"), masterJetty.getLocalPort());
     //start slave
+    slaveJetty.stop();
     slaveJetty = createJetty(slave);
     slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
   }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/response/TestCSVResponseWriter.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/response/TestCSVResponseWriter.java
index a3c171ff..b797b970 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/response/TestCSVResponseWriter.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/response/TestCSVResponseWriter.java
@@ -161,6 +161,8 @@ public void testCSVOutput() throws Exception {
     w.write(buf, req, rsp);
     String s = buf.toString();
     assertTrue(s.indexOf("score") >=0 && s.indexOf("2.718") > 0 && s.indexOf("89.83") > 0 );
+
+    req.close();
   }
 
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java
index 95087bc3..d8543d2f 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/QueryParsingTest.java
@@ -146,6 +146,7 @@ public void testSort() throws Exception {
     sort = QueryParsing.parseSort("", req);
     assertNull(sort);
 
+    req.close();
   }
 
   @Test
@@ -194,6 +195,7 @@ public void testBad() throws Exception {
     } catch (SolrException e) {
     }
 
+    req.close();
   }
 
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java
index 3ecb894a..bf3bd05f 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/servlet/SolrRequestParserTest.java
@@ -40,6 +40,7 @@
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.ContentStream;
 import org.apache.solr.core.SolrCore;
+import org.apache.solr.request.SolrQueryRequest;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -75,14 +76,15 @@ public void testStreamBody() throws Exception
     
     // Make sure it got a single stream in and out ok
     List<ContentStream> streams = new ArrayList<ContentStream>();
-    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
+    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
     assertEquals( 1, streams.size() );
     assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );
+    req.close();
     
     // Now add three and make sure they come out ok
     streams = new ArrayList<ContentStream>();
     args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );
-    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
+    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
     assertEquals( 3, streams.size() );
     ArrayList<String> input  = new ArrayList<String>();
     ArrayList<String> output = new ArrayList<String>();
@@ -96,15 +98,17 @@ public void testStreamBody() throws Exception
     Collections.sort( input );
     Collections.sort( output );
     assertEquals( input.toString(), output.toString() );
+    req.close();
     
     // set the contentType and make sure tat gets set
     String ctype = "text/xxx";
     streams = new ArrayList<ContentStream>();
     args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );
-    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
+    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
     for( ContentStream s : streams ) {
       assertEquals( ctype, s.getContentType() );
     }
+    req.close();
   }
   
   @Test
@@ -132,9 +136,10 @@ public void testStreamURL() throws Exception
     
     // Make sure it got a single stream in and out ok
     List<ContentStream> streams = new ArrayList<ContentStream>();
-    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
+    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );
     assertEquals( 1, streams.size() );
     assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );
+    req.close();
   }
   
   @Test
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
index 78162930..18236f1c 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
@@ -198,5 +198,6 @@ private void addDoc(String doc) throws Exception {
     streams.add(new ContentStreamBase.StringStream(doc));
     req.setContentStreams(streams);
     handler.handleRequestBody(req, new SolrQueryResponse());
+    req.close();
   }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/util/SolrPluginUtilsTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
index 0fd5e942..70c13640 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
@@ -66,7 +66,8 @@ public void testDocListConversion() throws Exception {
     assertU("", adoc("id", "3235", "val_t", "quick green fox"));
     assertU("", adoc("id", "3236", "val_t", "quick brown fox"));
     commit();
-    SolrIndexSearcher srchr = h.getCore().getSearcher().get();
+    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();
+    SolrIndexSearcher srchr = holder.get();
     SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();
     SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();
     cmd.setQuery(new MatchAllDocsQuery());
@@ -82,7 +83,7 @@ public void testDocListConversion() throws Exception {
     for (SolrDocument document : list) {
       assertNotNull(document.get("val_t"));
     }
-    srchr.close();
+    holder.decref();
   }
 
   @Test
