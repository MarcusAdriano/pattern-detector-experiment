diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java
index c47c97aa..227d1b9a 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Blob.java
@@ -21,7 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.client.am;
 
-import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -260,7 +259,7 @@ long getLocatorLength() throws SqlException
         }
     }
 
-    private java.io.InputStream getBinaryStreamX() throws SqlException {
+    java.io.InputStream getBinaryStreamX() throws SqlException {
         checkForClosedConnection();
 
         if (isBinaryStream())    // this Lob is used for input
@@ -651,8 +650,6 @@ public void free()
      * @throws SQLException if pos is less than 1 or if pos is greater than
      * the number of bytes in the <code>Blob</code> or if pos + length is
      * greater than the number of bytes in the <code>Blob</code>
-     *
-     * @throws SQLException.
      */
     public InputStream getBinaryStream(long pos, long length)
         throws SQLException {
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
index 70bc790a..7d3b7ad7 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
@@ -21,11 +21,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.client.am;
 
-import java.sql.CallableStatement;
 import java.sql.SQLException;
 
 import java.io.IOException;
 
+import org.apache.derby.shared.common.error.ExceptionUtil;
+import org.apache.derby.shared.common.reference.SQLState;
 import org.apache.derby.shared.common.sanity.SanityManager;
 
 /**
@@ -187,6 +188,37 @@ public int read(byte[] b, int off, int len) throws IOException
         }
     }
     
+    /**
+     * Closes this input stream and releases any system resources associated
+     * with the stream.  This will release the underlying Blob value. 
+     *  
+     * @throws java.io.IOException
+     */
+    public void close() throws IOException {
+        try {
+            if (blob != null  && freeBlobOnClose) {
+                blob.free();
+            }
+        } catch (SQLException ex) {
+            if (ex.getSQLState().compareTo
+                    (ExceptionUtil.getSQLStateFromIdentifier
+                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
+                // Blob has already been freed, probably because of autocommit
+                return;  // Ignore error
+            }
+
+            IOException ioEx = new IOException();
+            ioEx.initCause(ex);
+            throw ioEx;
+        }
+    }
+
+    /**
+     * Tell stream to free the underlying Blob when it is closed.
+     */
+    public void setFreeBlobOnClose() {
+        freeBlobOnClose = true;
+    }
     
     /**
      * Connection used to read Blob from server.
@@ -209,4 +241,11 @@ public int read(byte[] b, int off, int len) throws IOException
      * maxPos starts counting from 1.
      */
     private final long maxPos;
+ 
+    /**
+     * If true, the underlying Blob will be freed when the underlying stream is
+     * closed.  Used to implement correct behavior for streams obtained from
+     * result sets.
+     */
+    private boolean freeBlobOnClose = false;
 }
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java
index 362c356f..a6467b89 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Clob.java
@@ -354,7 +354,7 @@ private String getSubStringX(long pos, int length) throws SqlException
         }
     }
 
-    private java.io.Reader getCharacterStreamX() throws SqlException {
+    java.io.Reader getCharacterStreamX() throws SqlException {
         checkForClosedConnection();
 
         //check is this Lob is locator enabled
@@ -400,7 +400,7 @@ else if (isCharacterStream())  // this Lob is used for input
         }
     }
 
-    private java.io.InputStream getAsciiStreamX() throws SqlException {
+    java.io.InputStream getAsciiStreamX() throws SqlException {
         checkForClosedConnection();
 
         if (isAsciiStream())  // this Lob is used for input
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
index 5c4bf0b3..b0f073b5 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
@@ -21,12 +21,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.client.am;
 
-import java.sql.CallableStatement;
 import java.sql.SQLException;
 
 import java.io.IOException;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.shared.common.error.ExceptionUtil;
+import org.apache.derby.shared.common.reference.SQLState;
 
 /**
  * An <code>InputStream</code> that will use an locator to fetch the
@@ -62,6 +63,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private long currentPos;
     
+    /**
+     * If true, the underlying Blob will be freed when the underlying stream is
+     * closed.  Used to implement correct behavior for streams obtained from
+     * result sets.
+     */
+    private boolean freeClobOnClose = false;
+
     /**
      * Create an <code>InputStream</code> for reading the
      * <code>Clob</code> value represented by the given locator based
@@ -159,6 +167,39 @@ public int read(byte[] b, int off, int len) throws IOException {
         }
     }
 
+    /**
+     * Closes this input stream and releases any system resources associated
+     * with the stream.  This will release the underlying Clob value. 
+     *  
+     * @throws java.io.IOException
+     */
+    public void close() throws IOException {
+        try {
+            if (clob != null  && freeClobOnClose) {
+                clob.free();
+            }
+        } catch (SQLException ex) {
+            if (ex.getSQLState().compareTo
+                    (ExceptionUtil.getSQLStateFromIdentifier
+                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
+                // Clob has already been freed, probably because of autocommit
+                return;  // Ignore error
+            }
+
+            IOException ioEx = new IOException();
+            ioEx.initCause(ex);
+            throw ioEx;
+        }
+    }
+      
+    /**
+     * Tell stream to free the underlying Clob when it is closed.
+     */
+    public void setFreeClobOnClose() {
+        freeClobOnClose = true;
+    }
+    
+
     /**
      * Returns a <code>Byte</code> array from the
      * <code>String</code> passed as Input.
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java
index a5a8752c..f05c3df3 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java
@@ -23,7 +23,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.io.IOException;
 
+import java.sql.SQLException;
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.shared.common.error.ExceptionUtil;
+import org.apache.derby.shared.common.reference.SQLState;
 
 /**
  * An <code>Reader</code> that will use an locator to fetch the
@@ -66,6 +69,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private boolean isClosed = false;
     
+    /**
+     * If true, the underlying Blob will be freed when the underlying stream is
+     * closed.  Used to implement correct behavior for streams obtained from
+     * result sets.
+     */
+    private boolean freeClobOnClose = false;
+
     /**
      * Create an <code>Reader</code> for reading the
      * <code>Clob</code> value represented by the given locator based
@@ -165,6 +175,30 @@ public void close() throws IOException {
             return;
         }
         isClosed = true;
+        
+        try {
+            if (clob != null && freeClobOnClose) {
+                clob.free();
+            }
+        } catch (SQLException ex) {
+            if (ex.getSQLState().compareTo
+                    (ExceptionUtil.getSQLStateFromIdentifier
+                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
+                // Clob has already been freed, probably because of autocommit
+                return;  // Ignore error
+            }
+
+            IOException ioEx = new IOException();
+            ioEx.initCause(ex);
+            throw ioEx;
+        }
+    }
+
+    /**
+     * Tell stream to free the underlying Clob when it is closed.
+     */
+    public void setFreeClobOnClose() {
+        freeClobOnClose = true;
     }
     
     /**
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Cursor.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Cursor.java
index 6cbf7fbd..ae744500 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Cursor.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/Cursor.java
@@ -23,6 +23,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.shared.common.reference.SQLState;
 
 import java.sql.SQLException;
+import java.io.BufferedInputStream;
+import java.io.BufferedReader;
 import java.io.UnsupportedEncodingException;
 
 // When we calculate column offsets make sure we calculate the correct offsets for double byte charactr5er data
@@ -979,11 +981,16 @@ final String getString(int column) throws SqlException {
                 return (maxFieldSize_ == 0) ? tempString :
                         tempString.substring(0, java.lang.Math.min(maxFieldSize_, tempString.length()));
             case java.sql.Types.BLOB:
-                Blob b = (Blob) getBlobColumn_(column, agent_);
-                return agent_.crossConverters_.getStringFromBytes(b.getBytes(1, (int) b.length()));
+                Blob b = getBlobColumn_(column, agent_);
+                tempString = agent_.crossConverters_.
+                        getStringFromBytes(b.getBytes(1, (int) b.length()));
+                b.free();  // Free resources from underlying Blob
+                return tempString;
             case java.sql.Types.CLOB:
                 Clob c = getClobColumn_(column, agent_);
-                return c.getSubString(1, (int) c.length());
+                tempString = c.getSubString(1, (int) c.length());
+                c.free();  // Free resources from underlying Clob
+                return tempString;
             default:
                 throw new ColumnTypeConversionException(agent_.logWriter_,
                     "java.sql.Types " + jdbcTypes_[column -1], "String");
@@ -1002,8 +1009,10 @@ final String getString(int column) throws SqlException {
             case java.sql.Types.LONGVARBINARY:
                 return get_VARCHAR_FOR_BIT_DATA(column);
             case java.sql.Types.BLOB:
-                Blob b = (Blob) getBlobColumn_(column, agent_);
-                return b.getBytes(1, (int) b.length());
+                Blob b = getBlobColumn_(column, agent_);
+                byte[] bytes = b.getBytes(1, (int) b.length());
+                b.free(); // Free resources from underlying Blob
+                return bytes;
             default:
                 throw new ColumnTypeConversionException(agent_.logWriter_,
                     "java.sql.Types " + jdbcTypes_[column -1], "byte[]");
@@ -1013,8 +1022,9 @@ final String getString(int column) throws SqlException {
         }
     }
 
-    public final java.io.InputStream getBinaryStream(int column) throws SqlException {
-        try {
+    public final java.io.InputStream getBinaryStream(int column) 
+            throws SqlException 
+    {
             switch (jdbcTypes_[column - 1]) {
             case java.sql.Types.BINARY:
                 return new java.io.ByteArrayInputStream(get_CHAR_FOR_BIT_DATA(column));
@@ -1022,23 +1032,37 @@ final String getString(int column) throws SqlException {
             case java.sql.Types.LONGVARBINARY:
                 return new java.io.ByteArrayInputStream(get_VARCHAR_FOR_BIT_DATA(column));
             case java.sql.Types.BLOB:
-                Blob b = (Blob) getBlobColumn_(column, agent_);
-                return b.getBinaryStream();
+                Blob b = getBlobColumn_(column, agent_);
+                if (b.isLocator()) {
+                    BlobLocatorInputStream is 
+                            = new BlobLocatorInputStream(agent_.connection_, b);
+                    // Underlying Blob should be released when stream is closed
+                    is.setFreeBlobOnClose();
+                    return new BufferedInputStream(is);
+                } else {
+                    return b.getBinaryStreamX();
+                }
             default:
                 throw new ColumnTypeConversionException(agent_.logWriter_,
                     "java.sql.Types " + jdbcTypes_[column -1], "java.io.InputStream");
             }
-        } catch ( SQLException se ) {
-            throw new SqlException(se);
-        }
     }
 
-    public final java.io.InputStream getAsciiStream(int column) throws SqlException {
-        try {
+    public final java.io.InputStream getAsciiStream(int column) 
+            throws SqlException
+    {
             switch (jdbcTypes_[column - 1]) {
             case java.sql.Types.CLOB:
                 Clob c = getClobColumn_(column, agent_);
-                return c.getAsciiStream();
+                if (c.isLocator()) {
+                    ClobLocatorInputStream is 
+                            = new ClobLocatorInputStream(agent_.connection_, c);
+                    // Underlying Clob should be released when stream is closed
+                    is.setFreeClobOnClose();
+                    return new BufferedInputStream(is);
+                } else {
+                    return c.getAsciiStreamX();
+                }
             case java.sql.Types.CHAR:
                 try {
                     return new java.io.ByteArrayInputStream(getCHAR(column).getBytes("ISO-8859-1"));
@@ -1062,17 +1086,12 @@ final String getString(int column) throws SqlException {
             case java.sql.Types.LONGVARBINARY:
                 return new java.io.ByteArrayInputStream(get_VARCHAR_FOR_BIT_DATA(column));
             case java.sql.Types.BLOB:
-                Blob b = (Blob) getBlobColumn_(column, agent_);
-                return b.getBinaryStream();
+                return getBinaryStream(column);
             default:
                 throw new ColumnTypeConversionException(agent_.logWriter_,
                     "java.sql.Types " + jdbcTypes_[column -1], "java.io.InputStream");
             }
         }
-        catch ( SQLException se ) {
-            throw new SqlException(se);
-        }
-    }
 
     public final java.io.InputStream getUnicodeStream(int column) throws SqlException {
         try {
@@ -1081,6 +1100,7 @@ final String getString(int column) throws SqlException {
                 {
                     Clob c = getClobColumn_(column, agent_);
                     String s = c.getSubString(1L, (int) c.length());
+                    c.free(); // Release resources from underlying Clob
                     try {
                         return new java.io.ByteArrayInputStream(s.getBytes("UTF-8"));
                     } catch (java.io.UnsupportedEncodingException e) {
@@ -1114,8 +1134,7 @@ final String getString(int column) throws SqlException {
             case java.sql.Types.LONGVARBINARY:
                 return new java.io.ByteArrayInputStream(get_VARCHAR_FOR_BIT_DATA(column));
             case java.sql.Types.BLOB:
-                Blob b = (Blob) getBlobColumn_(column, agent_);
-                return b.getBinaryStream();
+                return getBinaryStream(column);
             default:
                 throw new ColumnTypeConversionException(agent_.logWriter_,
                     "java.sql.Types " + jdbcTypes_[column -1], "UnicodeStream");
@@ -1125,12 +1144,21 @@ final String getString(int column) throws SqlException {
         }
     }
 
-    public final java.io.Reader getCharacterStream(int column) throws SqlException {
-        try {
+    public final java.io.Reader getCharacterStream(int column) 
+            throws SqlException 
+    {
             switch (jdbcTypes_[column - 1]) {
             case java.sql.Types.CLOB:
                 Clob c = getClobColumn_(column, agent_);
-                return c.getCharacterStream();
+                if (c.isLocator()) {
+                    ClobLocatorReader reader
+                            = new ClobLocatorReader(agent_.connection_, c);
+                    //  Make sure underlying Blob is released when reader is closed
+                    reader.setFreeClobOnClose();
+                    return new BufferedReader(reader);
+                } else {
+                    return c.getCharacterStreamX();
+                }
             case java.sql.Types.CHAR:
                 return new java.io.StringReader(getCHAR(column));
             case java.sql.Types.VARCHAR:
@@ -1155,8 +1183,8 @@ final String getString(int column) throws SqlException {
                 }
             case java.sql.Types.BLOB:
                 try {
-                    Blob b = (Blob) getBlobColumn_(column, agent_);
-                    return new java.io.InputStreamReader(b.getBinaryStream(), "UTF-16BE");
+                    return new java.io.InputStreamReader(getBinaryStream(column),
+                                                         "UTF-16BE");
                 } catch (java.io.UnsupportedEncodingException e) {
                     throw new SqlException(agent_.logWriter_, 
                     		new ClientMessageId (SQLState.UNSUPPORTED_ENCODING), 
@@ -1166,9 +1194,6 @@ final String getString(int column) throws SqlException {
                 throw new ColumnTypeConversionException(agent_.logWriter_,
                     "java.sql.Types " + jdbcTypes_[column -1], "java.io.Reader");
             }
-        } catch ( SQLException se ) {
-            throw new SqlException(se);
-        }
     }
 
     public final java.sql.Blob getBlob(int column) throws SqlException {
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ResultSet.java
index 9d614425..44136c4a 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ResultSet.java
@@ -426,6 +426,7 @@ public final void closeX() throws SqlException {
         if (!openOnClient_) {
             return;
         }
+        closeCloseFilterInputStream();
         preClose_();
         try {
             if (openOnServer_) {
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/UpdateSensitiveLOBLocatorInputStream.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/UpdateSensitiveLOBLocatorInputStream.java
index 9f0f3b83..0150ec2f 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/UpdateSensitiveLOBLocatorInputStream.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/UpdateSensitiveLOBLocatorInputStream.java
@@ -161,6 +161,13 @@ public int read(byte[] b, int off, int len) throws IOException {
         return ret;
     }
     
+    public void close() throws IOException 
+    {
+       if (is != null) {
+            is.close();
+        }
+    }
+    
     /**
      * Verifies whether the current updateCount matches
      * the updateCount of the LOB object and if it does
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java
index 07ba1a3e..ce58c839 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java
@@ -197,7 +197,7 @@ public static Test suite() {
         TestSuite suite = new TestSuite("LargeDataLocksTest");
         suite.addTest(baseSuite("LargeDataLocksTest:embedded"));
         // Disable for client until DERBY-2892 is fixed
-        //suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("LargeDataLocksTest:client")));
+        suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("LargeDataLocksTest:client")));
         return suite;
 
     }
