diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
index 3fc8e9da..e6971601 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
@@ -222,7 +222,8 @@ public final void visit(int version, int access, String name, String signature,
           loader);
 
       isSerializable = Serializable.class.isAssignableFrom(superClass) || 
-                       Arrays.asList(interfaces).contains(Type.getInternalName(Serializable.class));
+                       Arrays.asList(interfaces).contains(Type.getInternalName(Serializable.class)) ||
+                       checkInterfacesForSerializability(interfaces);
       
       if (!!!WovenProxy.class.isAssignableFrom(superClass)) {
 
@@ -273,6 +274,16 @@ public final void visit(int version, int access, String name, String signature,
     }
   }
 
+  private boolean checkInterfacesForSerializability(String[] interfaces) throws ClassNotFoundException {
+    for(String iface : interfaces)
+    {
+      if(Serializable.class.isAssignableFrom(Class.forName(
+                 iface.replace('/', '.'), false, loader)))
+        return true;
+    }
+    return false;
+  }
+
   /**
    * This method is called on each method implemented on this object (but not
    * for superclass methods) Each of these methods is visited in turn and the
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableChild.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableChild.java
index e69de29b..1aa1682d 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableChild.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableChild.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.proxy;
+
+public class ProxyTestClassSerializableChild extends ProxyTestClassSerializable {
+
+}
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableInterface.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableInterface.java
index e69de29b..b7dfe9b4 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableInterface.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableInterface.java
@@ -0,0 +1,27 @@
+package org.apache.aries.blueprint.proxy;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.ByteArrayInputStream;
+import java.io.ObjectInputStream;
+
+public class ProxyTestClassSerializableInterface implements
+    ProxyTestSerializableInterface {
+
+  public int value;
+  
+  /**
+   * We deserialize using this static method to ensure that the right classloader
+   * is used when deserializing our object, it will always be the classloader that
+   * loaded this class, which might be the JUnit one, or our weaving one.
+   * 
+   * @param bytes
+   * @param value
+   * @throws Exception
+   */
+  public static void checkDeserialization(byte[] bytes, int value) throws Exception {
+    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
+    ProxyTestClassSerializableInterface out = (ProxyTestClassSerializableInterface) ois.readObject();
+    assertEquals(value, out.value);
+  }
+}
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestInterface.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestInterface.java
index 29bd9290..71f23b3b 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestInterface.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestInterface.java
@@ -1,3 +1,21 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
 package org.apache.aries.blueprint.proxy;
 
 import java.util.concurrent.Callable;
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestSerializableInterface.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestSerializableInterface.java
index e69de29b..a10d82fd 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestSerializableInterface.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestSerializableInterface.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.proxy;
+
+import java.io.Serializable;
+
+public interface ProxyTestSerializableInterface extends Serializable {
+
+}
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
index 5d504a90..6576d47d 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
@@ -77,7 +77,8 @@
     ProxyTestClassStaticInner.class, ProxyTestClassUnweavableInnerChild.class, 
     ProxyTestClassUnweavableChildWithFinalMethodParent.class, 
     ProxyTestClassUnweavableChildWithDefaultMethodWrongPackageParent.class, 
-    ProxyTestClassSerializable.class, ProxyTestClassSerializableWithSVUID.class};
+    ProxyTestClassSerializable.class, ProxyTestClassSerializableWithSVUID.class,
+    ProxyTestClassSerializableChild.class, ProxyTestClassSerializableInterface.class};
  
   private static final Map<String, byte[]> rawClasses = new HashMap<String, byte[]>();
   
@@ -336,6 +337,40 @@ public void testSerialization() throws Exception {
     woven.getMethod("checkDeserialization", byte[].class, int.class).invoke(null, baos.toByteArray(), 5);
   }
   
+  @Test
+  public void testInheritedSerialization() throws Exception {
+    
+    ProxyTestClassSerializableChild in = new ProxyTestClassSerializableChild();
+    in.value = 4;
+    
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    ObjectOutputStream oos = new ObjectOutputStream(baos);
+    oos.writeObject(in);
+    
+    ProxyTestClassSerializable.checkDeserialization(baos.toByteArray(), 4);
+
+    Class<?> woven = getProxyClass(ProxyTestClassSerializable.class);
+    
+    woven.getMethod("checkDeserialization", byte[].class, int.class).invoke(null, baos.toByteArray(), 4);
+  }
+  
+  @Test
+  public void testInterfaceInheritedSerialization() throws Exception {
+    
+    ProxyTestClassSerializableInterface in = new ProxyTestClassSerializableInterface();
+    in.value = 3;
+    
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    ObjectOutputStream oos = new ObjectOutputStream(baos);
+    oos.writeObject(in);
+    
+    ProxyTestClassSerializableInterface.checkDeserialization(baos.toByteArray(), 3);
+
+    Class<?> woven = getProxyClass(ProxyTestClassSerializableInterface.class);
+    
+    woven.getMethod("checkDeserialization", byte[].class, int.class).invoke(null, baos.toByteArray(), 3);
+  }
+  
   @Test
   public void testGeneratedSVUIDisSynthetic() throws Exception {
     
