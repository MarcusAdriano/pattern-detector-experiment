diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java
index 48ba0eb0..6f054180 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java
@@ -30792,7 +30792,8 @@ the source of the yytext() string */
   private TextSegment entitySegment = new TextSegment(2);
 
   /**
-   * @param source
+   * Creates a new HTMLStripCharFilter over the provided Reader.
+   * @param source Reader to strip html tags from.
    */
   public HTMLStripCharFilter(Reader source) {
     super(source);
@@ -30800,7 +30801,9 @@ public HTMLStripCharFilter(Reader source) {
   }
 
   /**
-   * @param source
+   * Creates a new HTMLStripCharFilter over the provided Reader
+   * with the specified start and end tags.
+   * @param source Reader to strip html tags from.
    * @param escapedTags Tags in this set (both start and end tags)
    *  will not be filtered out.
    */
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
index 843da921..bdb22a27 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
@@ -132,7 +132,7 @@ public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream inpu
    * 
    * @param hyphenationFilename the filename of the XML grammar to load
    * @return An object representing the hyphenation patterns
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static HyphenationTree getHyphenationTree(String hyphenationFilename)
       throws IOException {
@@ -144,7 +144,7 @@ public static HyphenationTree getHyphenationTree(String hyphenationFilename)
    * 
    * @param hyphenationFile the file of the XML grammar to load
    * @return An object representing the hyphenation patterns
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static HyphenationTree getHyphenationTree(File hyphenationFile)
       throws IOException {
@@ -156,7 +156,7 @@ public static HyphenationTree getHyphenationTree(File hyphenationFile)
    * 
    * @param hyphenationSource the InputSource pointing to the XML grammar
    * @return An object representing the hyphenation patterns
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static HyphenationTree getHyphenationTree(InputSource hyphenationSource)
       throws IOException {
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter.java
index 1a046413..257a562f 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter.java
@@ -44,8 +44,8 @@ public KStemFilter(TokenStream in) {
   }
 
   /** Returns the next, stemmed, input Token.
-   *  @return The stemed form of a token.
-   *  @throws IOException
+   *  @return The stemmed form of a token.
+   *  @throws IOException If there is a low-level I/O error.
    */
   @Override
   public boolean incrementToken() throws IOException {
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java
index 41a3f803..527eb53f 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java
@@ -351,7 +351,7 @@ private void saveState() {
    * Flushes the given WordDelimiterConcatenation by either writing its concat and then clearing, or just clearing.
    *
    * @param concatenation WordDelimiterConcatenation that will be flushed
-   * @return {@code true} if the concatenation was written before it was cleared, {@code} false otherwise
+   * @return {@code true} if the concatenation was written before it was cleared, {@code false} otherwise
    */
   private boolean flushConcatenation(WordDelimiterConcatenation concatenation) {
     lastConcatCount = concatenation.subwordCount;
@@ -493,7 +493,7 @@ static boolean isUpper(int type) {
    * Determines whether the given flag is set
    *
    * @param flag Flag to see if set
-   * @return {@code} true if flag is set
+   * @return {@code true} if flag is set
    */
   private boolean has(int flag) {
     return (flags & flag) != 0;
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadEncoder.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadEncoder.java
index ab9965da..cc30f47c 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadEncoder.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadEncoder.java
@@ -33,9 +33,6 @@
 
   /**
    * Convert a char array to a {@link BytesRef}
-   * @param buffer
-   * @param offset
-   * @param length
    * @return encoded {@link BytesRef}
    */
   BytesRef encode(char [] buffer, int offset, int length);
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadHelper.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadHelper.java
index f8ce632b..f7c57bf1 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadHelper.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/PayloadHelper.java
@@ -44,7 +44,6 @@
   }
 
   /**
-   * @param bytes
    * @see #decodeFloat(byte[], int)
    * @see #encodeFloat(float)
    * @return the decoded float
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader.java
index 1f27d163..5f97fc77 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader.java
@@ -184,7 +184,7 @@ public static CharArraySet getSnowballWordSet(Reader reader, Version matchVersio
    * (i.e. two tab separated words)
    *
    * @return stem dictionary that overrules the stemming algorithm
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {
     BufferedReader br = null;
@@ -210,7 +210,7 @@ public static CharArraySet getSnowballWordSet(Reader reader, Version matchVersio
    * </p>
    *
    * @return a list of non-blank non-comment lines with whitespace trimmed
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static List<String> getLines(InputStream stream, Charset charset) throws IOException{
     BufferedReader input = null;
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java
index b8858432..728e2c1c 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java
@@ -140,7 +140,6 @@ public WikipediaTokenizer(Reader input) {
    *
    * @param input The input
    * @param tokenOutput One of {@link #TOKENS_ONLY}, {@link #UNTOKENIZED_ONLY}, {@link #BOTH}
-   * @param untokenizedTypes
    */
   public WikipediaTokenizer(Reader input, int tokenOutput, Set<String> untokenizedTypes) {
     super(input);
@@ -154,7 +153,6 @@ public WikipediaTokenizer(Reader input, int tokenOutput, Set<String> untokenized
    *
    * @param input The input
    * @param tokenOutput One of {@link #TOKENS_ONLY}, {@link #UNTOKENIZED_ONLY}, {@link #BOTH}
-   * @param untokenizedTypes
    */
   public WikipediaTokenizer(AttributeFactory factory, Reader input, int tokenOutput, Set<String> untokenizedTypes) {
     super(factory, input);
@@ -168,7 +166,6 @@ public WikipediaTokenizer(AttributeFactory factory, Reader input, int tokenOutpu
    *
    * @param input The input
    * @param tokenOutput One of {@link #TOKENS_ONLY}, {@link #UNTOKENIZED_ONLY}, {@link #BOTH}
-   * @param untokenizedTypes
    */
   public WikipediaTokenizer(AttributeSource source, Reader input, int tokenOutput, Set<String> untokenizedTypes) {
     super(source, input);
diff --git a/lucene/dev/trunk/lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java b/lucene/dev/trunk/lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
index dd0954e3..21ebf307 100644
--- a/lucene/dev/trunk/lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
@@ -171,8 +171,6 @@ public void testMultipleSources() throws Exception {
 
   /**
    * Not an explicit test, just useful to print out some info on performance
-   *
-   * @throws Exception
    */
   public void performance() throws Exception {
     int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};
diff --git a/lucene/dev/trunk/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer.java b/lucene/dev/trunk/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer.java
index d1aad04e..d92a90ae 100644
--- a/lucene/dev/trunk/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer.java
+++ b/lucene/dev/trunk/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer.java
@@ -139,7 +139,7 @@ private int findSafeEnd() {
    * Refill the buffer, accumulating the offset and setting usableLength to the
    * last unambiguous break position
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private void refill() throws IOException {
     offset += usableLength;
diff --git a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
index 374fe2ca..7a14d520 100644
--- a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
@@ -225,7 +225,7 @@ public int read() throws IOException {
    *
    * @param c iteration mark character to normalize
    * @return normalized iteration mark
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private char normalizeIterationMark(char c) throws IOException {
 
@@ -252,7 +252,7 @@ private char normalizeIterationMark(char c) throws IOException {
    * Finds the number of subsequent next iteration marks
    *
    * @return number of iteration marks starting at the current buffer position
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private int nextIterationMarkSpanSize() throws IOException {
     int spanSize = 0;
@@ -272,7 +272,7 @@ private int nextIterationMarkSpanSize() throws IOException {
    * @param position buffer position (should not exceed bufferPosition)
    * @param spanSize iteration mark span size
    * @return source character
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private char sourceCharacter(int position, int spanSize) throws IOException {
     return (char) buffer.get(position - spanSize);
diff --git a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/Dictionary.java b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/Dictionary.java
index 11277a72..56ffec93 100644
--- a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/Dictionary.java
+++ b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/Dictionary.java
@@ -27,22 +27,19 @@
   
   /**
    * Get left id of specified word
-   * @param wordId
    * @return left id
    */
   public int getLeftId(int wordId);
   
   /**
    * Get right id of specified word
-   * @param wordId
-   * @return left id
+   * @return right id
    */
   public int getRightId(int wordId);
   
   /**
    * Get word cost of specified word
-   * @param wordId
-   * @return left id
+   * @return word's cost
    */
   public int getWordCost(int wordId);
   
diff --git a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java
index a4155559..ba23f53c 100644
--- a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java
+++ b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java
@@ -172,7 +172,6 @@ public TokenInfoFST getFST() {
   
   /**
    * Convert Map of index and wordIdAndLength to array of {wordId, index, length}
-   * @param input
    * @return array of {wordId, index, length}
    */
   private int[][] toIndexArray(Map<Integer, int[]> input) {
diff --git a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/CSVUtil.java b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/CSVUtil.java
index 493cbf31..6e35b025 100644
--- a/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/CSVUtil.java
+++ b/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/CSVUtil.java
@@ -37,7 +37,7 @@ private CSVUtil() {} // no instance!!!
   
   /**
    * Parse CSV line
-   * @param line
+   * @param line line containing csv-encoded data
    * @return Array of values
    */
   public static String[] parse(String line) {
@@ -96,7 +96,6 @@ private static String unQuoteUnEscape(String original) {
   
   /**
    * Quote and escape input value for CSV
-   * @param original
    */
   public static String quoteEscape(String original) {
     String result = original;
diff --git a/lucene/dev/trunk/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java b/lucene/dev/trunk/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java
index ae2c4400..0461564f 100644
--- a/lucene/dev/trunk/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java
+++ b/lucene/dev/trunk/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java
@@ -61,8 +61,8 @@
    * Calls
    * {@link #BeiderMorseFilter(TokenStream, PhoneticEngine, org.apache.commons.codec.language.bm.Languages.LanguageSet)}
    * 
-   * @param input
-   * @param engine
+   * @param input TokenStream to filter
+   * @param engine configured PhoneticEngine with BM settings.
    */
   public BeiderMorseFilter(TokenStream input, PhoneticEngine engine) {
     this(input, engine, null);
diff --git a/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary.java b/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary.java
index 6ee1b66a..bffed1a2 100644
--- a/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary.java
+++ b/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary.java
@@ -139,9 +139,7 @@ private void load(String dictRoot) {
    * Load the datafile into this BigramDictionary
    * 
    * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)
-   * @throws FileNotFoundException
-   * @throws IOException
-   * @throws UnsupportedEncodingException
+   * @throws IOException If there is a low-level I/O error
    */
   public void loadFromFile(String dctFilePath) throws IOException {
 
diff --git a/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary.java b/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary.java
index cfd72abe..9a7979ec 100644
--- a/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary.java
+++ b/lucene/dev/trunk/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary.java
@@ -133,8 +133,7 @@ public void load(String dctFileRoot) {
   /**
    * Load coredict.mem internally from the jar file.
    * 
-   * @throws ClassNotFoundException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public void load() throws IOException, ClassNotFoundException {
     InputStream input = this.getClass().getResourceAsStream("coredict.mem");
@@ -181,9 +180,7 @@ private void saveToObj(File serialObj) {
    * 
    * @param dctFilePath path to word dictionary (coredict.dct)
    * @return number of words read
-   * @throws FileNotFoundException
-   * @throws IOException
-   * @throws UnsupportedEncodingException
+   * @throws IOException If there is a low-level I/O error.
    */
   private int loadMainDataFromFile(String dctFilePath) throws IOException {
     int i, cnt, length, total = 0;
diff --git a/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/BaseUIMATokenizer.java b/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/BaseUIMATokenizer.java
index c6001c86..78758cb7 100644
--- a/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/BaseUIMATokenizer.java
+++ b/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/BaseUIMATokenizer.java
@@ -54,8 +54,7 @@ protected BaseUIMATokenizer(Reader reader, String descriptorPath) {
    * <p/>
    * {@link #cas} will be filled with  extracted metadata (UIMA annotations, feature structures)
    *
-   * @throws AnalysisEngineProcessException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   protected void analyzeInput() throws AnalysisEngineProcessException, IOException {
     cas.reset();
@@ -66,7 +65,7 @@ protected void analyzeInput() throws AnalysisEngineProcessException, IOException
   /**
    * initialize the FSIterator which is used to build tokens at each incrementToken() method call
    *
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   protected abstract void initializeIterator() throws IOException;
 
diff --git a/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/AEProvider.java b/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/AEProvider.java
index 068a405f..ba102d27 100644
--- a/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/AEProvider.java
+++ b/lucene/dev/trunk/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/AEProvider.java
@@ -27,9 +27,7 @@
 public interface AEProvider {
 
   /**
-   *
-   * @return AnalysisEngine
-   * @throws ResourceInitializationException
+   * Returns the AnalysisEngine
    */
   public AnalysisEngine getAE() throws ResourceInitializationException;
 
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/HTMLParser.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/HTMLParser.java
index c4712007..25fe210b 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/HTMLParser.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/HTMLParser.java
@@ -36,7 +36,7 @@
    * @param reader reader of html text to parse.
    * @param trecSrc the {@link TrecContentSource} used to parse dates.   
    * @return Parsed doc data.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocData parse(DocData docData, String name, Date date, Reader reader, TrecContentSource trecSrc) throws IOException;
 
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java
index 4e54b399..749136b1 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java
@@ -37,8 +37,7 @@
   /** Create the next query */ 
   public Query makeQuery () throws Exception;
 
-  /** Set the properties 
-   * @throws Exception */
+  /** Set the properties */
   public void setConfig (Config config) throws Exception;
   
   /** Reset inputs so that the test run would behave, input wise, as if it just started. */
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
index 31422758..7d9ce5f4 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
@@ -130,8 +130,8 @@ HTMLParser getHtmlParser() {
    * @param lineStart line start to look for, must not be null.
    * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.
    * @param collectAll whether to collect all lines into <code>buffer</code>.
-   * @throws IOException
-   * @throws NoMoreDataException
+   * @throws IOException If there is a low-level I/O error.
+   * @throws NoMoreDataException If the source is exhausted.
    */
    private void read(StringBuilder buf, String lineStart, 
        boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java
index 6a1a6032..0c57d20c 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java
@@ -32,11 +32,6 @@
  */
 public class Sample {
 
-  /**
-   * @param args
-   * @throws Exception 
-   * @throws IOException 
-   */
   public static void main(String[] args) throws Exception {
     Properties p = initProps();
     Config conf = new Config(p);
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
index 5f80c5f0..10922204 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
@@ -109,7 +109,6 @@ public void setRunTime(double sec) throws Exception {
 
   /**
    * @param repetitions The repetitions to set.
-   * @throws Exception 
    */
   public void setRepetitions(int repetitions) throws Exception {
     fixedTime = false;
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
index 78ff2d44..fec744e1 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
@@ -295,7 +295,6 @@ public String toString() {
 
   /**
    * Execute this algorithm
-   * @throws Exception 
    */
   public void execute() throws Exception {
     try {
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
index 88af670d..60baaf89 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
@@ -58,7 +58,7 @@
    * Read both algorithm and config properties.
    *
    * @param algReader from where to read algorithm and config properties.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public Config(Reader algReader) throws IOException {
     // read alg file to array of lines
@@ -163,7 +163,6 @@ public String get(String name, String dflt) {
    *
    * @param name  name of property.
    * @param value either single or multiple property value (multiple values are separated by ":")
-   * @throws Exception
    */
   public void set(String name, String value) throws Exception {
     if (valByRound.get(name) != null) {
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/FileUtils.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/FileUtils.java
index 306aab7f..2ad6492b 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/FileUtils.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/FileUtils.java
@@ -30,7 +30,7 @@
    *
    * @param dir file or directory
    * @return true on success, false if no or part of files have been deleted
-   * @throws java.io.IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static boolean fullyDelete(File dir) throws IOException {
     if (dir == null || !dir.exists()) return false;
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
index f351b7d1..e239b3b0 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
@@ -46,7 +46,7 @@
    *     19    0   doc7295      0
    * </pre> 
    * @param reader where judgments are read from.
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public TrecJudge (BufferedReader reader) throws IOException {
     judgements = new HashMap<String,QRelJudgement>();
diff --git a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
index dade9976..1322f8a6 100644
--- a/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
+++ b/lucene/dev/trunk/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
@@ -74,8 +74,6 @@ public boolean accept(File file) {
 
   /**
    * Override if you wish to change what is extracted
-   * 
-   * @param sgmFile
    */
   protected void extractFile(File sgmFile) {
     try {
diff --git a/lucene/dev/trunk/lucene/classification/src/java/org/apache/lucene/classification/Classifier.java b/lucene/dev/trunk/lucene/classification/src/java/org/apache/lucene/classification/Classifier.java
index 866cede4..eb681212 100644
--- a/lucene/dev/trunk/lucene/classification/src/java/org/apache/lucene/classification/Classifier.java
+++ b/lucene/dev/trunk/lucene/classification/src/java/org/apache/lucene/classification/Classifier.java
@@ -32,7 +32,7 @@
    * Assign a class to the given text String
    * @param text a String containing text to be classified
    * @return a String representing a class
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public String assignClass(String text) throws IOException;
 
@@ -42,7 +42,7 @@
    * @param textFieldName the name of the field used to compare documents
    * @param classFieldName the name of the field containing the class assigned to documents
    * @param analyzer the analyzer used to tokenize / filter the unseen text
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)
       throws IOException;
diff --git a/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil.java b/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil.java
index b403876e..fc52520f 100644
--- a/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil.java
+++ b/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil.java
@@ -153,7 +153,7 @@ private static int encodedSize(PackedInts.Format format, int bitsPerValue) {
    * @param data     the data to write
    * @param encoded  a buffer to use to encode data
    * @param out      the destination output
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {
     if (isAllEqual(data)) {
@@ -182,7 +182,7 @@ void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException
    * @param in        the input to use to read data
    * @param encoded   a buffer that can be used to store encoded data
    * @param decoded   where to write decoded data
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {
     final int numBits = in.readVInt();
@@ -208,7 +208,7 @@ void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException
    * Skip the next block of data.
    *
    * @param in      the input where to read data
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   void skipBlock(IndexInput in) throws IOException {
     final int numBits = in.readVInt();
diff --git a/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java b/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java
index 81a2e218..ea69a5f8 100644
--- a/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java
+++ b/lucene/dev/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java
@@ -111,7 +111,6 @@ public static int getNearestSetSize(int maxNumberOfBits)
   /**
    * Use this method to choose a set size where accuracy (low content saturation) is more important
    * than deciding how much memory to throw at the problem.
-   * @param maxNumberOfValuesExpected
    * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded
    * @return The size of the set nearest to the required size
    */
@@ -155,7 +154,6 @@ private FuzzySet(FixedBitSet filter, int bloomSize, HashFunction hashFunction) {
   /**
    * The main method required for a Bloom filter which, given a value determines set membership.
    * Unlike a conventional set, the fuzzy set returns NO or MAYBE rather than true or false.
-   * @param value
    * @return NO or MAYBE
    */
   public ContainsResult contains(BytesRef value) {
@@ -182,7 +180,7 @@ public ContainsResult contains(BytesRef value) {
    * returned by {@link FixedBitSet#getBits}</li>
    * </ul>
    * @param out Data output stream
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public void serialize(DataOutput out) throws IOException
   {
@@ -229,7 +227,7 @@ private ContainsResult mayContainValue(int positiveHash) {
    * Records a value in the set. The referenced bytes are hashed and then modulo n'd where n is the
    * chosen size of the internal bitset.
    * @param value the key value to be hashed
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public void addValue(BytesRef value) throws IOException {    
       int hash = hashFunction.hash(value);
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/Token.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/Token.java
index 6a2b71a0..9a5f1a4d 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/Token.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/Token.java
@@ -523,7 +523,7 @@ public Token reinit(String newTerm, int newTermOffset, int newTermLength, int ne
 
   /**
    * Copy the prototype token's fields into this one. Note: Payloads are shared.
-   * @param prototype
+   * @param prototype source Token to copy fields from
    */
   public void reinit(Token prototype) {
     copyBuffer(prototype.buffer(), 0, prototype.length());
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
index 14370ff5..5b961d67 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
@@ -160,7 +160,7 @@ private boolean assertFinal() {
    * differ from the offset of the last token eg in case one or more whitespaces
    * followed after the last token, but a WhitespaceTokenizer was used.
    * 
-   * @throws IOException
+   * @throws IOException If an I/O error occurs
    */
   public void end() throws IOException {
     // do nothing by default
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
index 1730d05e..12e05df3 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
@@ -84,7 +84,7 @@ public abstract void add(int docID, StorableField value)
    *          the total number of documents in this {@link DocValuesConsumer}.
    *          Must be greater than or equal the last given docID to
    *          {@link #add(int, StorableField)}.
-   * @throws IOException
+   * @throws IOException If an I/O error occurs
    */
   public abstract void finish(int docCount) throws IOException;
   
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter.java
index 1a449bf1..a90ee4a5 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter.java
@@ -121,7 +121,7 @@ protected void resetSkip() {
    * the max level is skip data is to be written to. 
    * 
    * @param df the current document frequency 
-   * @throws IOException
+   * @throws IOException If an I/O error occurs
    */
   public void bufferSkip(int df) throws IOException {
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducer.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducer.java
index 0715d9d8..02af0311 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducer.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducer.java
@@ -45,7 +45,7 @@ protected PerDocProducer() {
    *          the field name
    * @return the {@link DocValues} for this field or <code>null</code> if not
    *         applicable.
-   * @throws IOException
+   * @throws IOException If an I/O error occurs
    */
   public abstract DocValues docValues(String field) throws IOException;
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoReader.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoReader.java
index 1520717e..98036230 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoReader.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoReader.java
@@ -40,7 +40,7 @@ protected SegmentInfoReader() {
    * @param directory directory to read from
    * @param segmentName name of the segment to read
    * @return infos instance to be populated with data
-   * @throws IOException
+   * @throws IOException If an I/O error occurs
    */
   public abstract SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException;
 }
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoWriter.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoWriter.java
index 91ab7f29..eedbdbbe 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoWriter.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/SegmentInfoWriter.java
@@ -37,7 +37,7 @@ protected SegmentInfoWriter() {
 
   /**
    * Write {@link SegmentInfo} data. 
-   * @throws IOException
+   * @throws IOException If an I/O error occurs
    */
   public abstract void write(Directory dir, SegmentInfo info, FieldInfos fis, IOContext ioContext) throws IOException;
 }
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
index bc626be9..3ab1b586 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
@@ -120,7 +120,7 @@ private void ensureOpen() throws AlreadyClosedException {
    * Closes the underlying {@link org.apache.lucene.store.IndexInput} streams.
    * This means that the Fields values will not be accessible.
    *
-   * @throws IOException
+   * @throws IOException If an I/O error occurs
    */
   public final void close() throws IOException {
     if (!closed) {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/DirectoryReader.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/DirectoryReader.java
index e6331990..b173c43c 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/DirectoryReader.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/DirectoryReader.java
@@ -99,7 +99,7 @@ public static DirectoryReader open(final Directory directory, int termInfosIndex
    * can tolerate deleted documents being returned you might
    * gain some performance by passing false.
    * @return The new IndexReader
-   * @throws CorruptIndexException
+   * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error
    *
    * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)
@@ -241,7 +241,7 @@ public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexComm
    * can tolerate deleted documents being returned you might
    * gain some performance by passing false.
    *
-   * @throws IOException
+   * @throws IOException if there is a low-level IO error
    *
    * @lucene.experimental
    */
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
index 50df32f1..d3be8a63 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
@@ -146,10 +146,13 @@ public FieldInfo fieldInfo(String fieldName) {
 
   /**
    * Return the fieldinfo object referenced by the fieldNumber.
-   * @param fieldNumber
+   * @param fieldNumber field's number. if this is negative, this method
+   *        always returns null.
    * @return the FieldInfo object or null when the given fieldNumber
    * doesn't exist.
    */  
+  // TODO: fix this negative behavior, this was something related to Lucene3x?
+  // if the field name is empty, i think it writes the fieldNumber as -1
   public FieldInfo fieldInfo(int fieldNumber) {
     return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;
   }
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
index 0e51884d..563ac857 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
@@ -150,7 +150,8 @@ public long totalTermFreq() throws IOException {
   }
 
   /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
+   * @throws UnsupportedOperationException In general, subclasses do not
+   *         support seeking.
    */
   @Override
   public boolean seekExact(BytesRef term, boolean useCache) throws IOException {
@@ -158,7 +159,8 @@ public boolean seekExact(BytesRef term, boolean useCache) throws IOException {
   }
 
   /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
+   * @throws UnsupportedOperationException In general, subclasses do not
+   *         support seeking.
    */
   @Override
   public SeekStatus seekCeil(BytesRef term, boolean useCache) throws IOException {
@@ -166,7 +168,8 @@ public SeekStatus seekCeil(BytesRef term, boolean useCache) throws IOException {
   }
 
   /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
+   * @throws UnsupportedOperationException In general, subclasses do not
+   *         support seeking.
    */
   @Override
   public void seekExact(long ord) throws IOException {
@@ -189,7 +192,8 @@ public DocsAndPositionsEnum docsAndPositions(Bits bits, DocsAndPositionsEnum reu
   }
   
   /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
+   * @throws UnsupportedOperationException In general, subclasses do not
+   *         support seeking.
    */
   @Override
   public void seekExact(BytesRef term, TermState state) throws IOException {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index 20783fb2..e4d74a35 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -320,7 +320,7 @@ DirectoryReader getReader() throws IOException {
    * @return IndexReader that covers entire index plus all
    * changes made so far by this IndexWriter instance
    *
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   DirectoryReader getReader(boolean applyAllDeletes) throws IOException {
     ensureOpen();
@@ -473,7 +473,7 @@ synchronized void dropAll(boolean doSave) throws IOException {
      * Commit live docs changes for the segment readers for
      * the provided infos.
      *
-     * @throws IOException
+     * @throws IOException If there is a low-level I/O error
      */
     public synchronized void commit(SegmentInfos infos) throws IOException {
       for (SegmentInfoPerCommit info : infos) {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java
index 83fdc1c9..5a463af0 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java
@@ -51,7 +51,7 @@
    *          performance by passing <code>false</code>. See
    *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {
     current = DirectoryReader.open(writer, applyAllDeletes);
@@ -61,7 +61,7 @@ public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOExcep
    * Creates and returns a new ReaderManager from the given {@link Directory}. 
    * @param dir the directory to open the DirectoryReader on.
    *        
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public ReaderManager(Directory dir) throws IOException {
     current = DirectoryReader.open(dir);
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
index 716839ae..cd1a616f 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -70,7 +70,6 @@
 
   /**
    * Add an IndexReader to the collection of readers that are to be merged
-   * @param reader
    */
   final void add(IndexReader reader) {
     for (final AtomicReaderContext ctx : reader.leaves()) {
@@ -253,7 +252,7 @@ private int mergeFields() throws IOException {
 
   /**
    * Merge the TermVectors from each of the segments into the new one.
-   * @throws IOException
+   * @throws IOException if there is a low-level IO error
    */
   private final int mergeVectors() throws IOException {
     final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
index 507c3661..221b8537 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
@@ -168,12 +168,6 @@ public TermVectorsReader getTermVectorsReader() {
     return core.termVectorsLocal.get();
   }
 
-  /** Return a term frequency vector for the specified document and field. The
-   *  vector returned contains term numbers and frequencies for all terms in
-   *  the specified field of this document, if the field had storeTermVector
-   *  flag set.  If the flag was not set, the method returns null.
-   * @throws IOException
-   */
   @Override
   public Fields getTermVectors(int docID) throws IOException {
     TermVectorsReader termVectorsReader = getTermVectorsReader();
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/Term.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/Term.java
index a2efbcfa..ac7696e8 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/Term.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/Term.java
@@ -56,7 +56,7 @@ public Term(String fld, String text) {
    * This serves two purposes: 1) reuse of a Term with the same field.
    * 2) pattern for a query.
    * 
-   * @param fld
+   * @param fld field's name
    */
   public Term(String fld) {
     this(fld, new BytesRef());
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldComparator.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldComparator.java
index 9d1fbafd..b75c020d 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldComparator.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldComparator.java
@@ -148,7 +148,7 @@
    * @return the comparator to use for this segment; most
    *   comparators can just return "this" to reuse the same
    *   comparator across segments
-   * @throws IOException
+   * @throws IOException if there is a low-level IO error
    */
   public abstract FieldComparator<T> setNextReader(AtomicReaderContext context) throws IOException;
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue.java
index 97a9974c..a77c9f84 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue.java
@@ -159,7 +159,7 @@ private FieldValueHitQueue(SortField[] fields, int size) {
    *          priority first); cannot be <code>null</code> or empty
    * @param size
    *          The number of hits to retain. Must be greater than zero.
-   * @throws IOException
+   * @throws IOException if there is a low-level IO error
    */
   public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) throws IOException {
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
index 304b4a36..4f52f36b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
@@ -96,7 +96,7 @@
    * @param minSimilarity Minimum required similarity for terms from the reader. Pass an integer value
    *        representing edit distance. Passing a fraction is deprecated.
    * @param prefixLength Length of required common prefix. Default value is 0.
-   * @throws IOException
+   * @throws IOException if there is a low-level IO error
    */
   public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, 
       final float minSimilarity, final int prefixLength, boolean transpositions) throws IOException {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
index b142697a..82a25444 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -220,7 +220,8 @@ protected Query wrapFilter(Query query, Filter filter) {
    * this method can be used for efficient 'deep-paging' across potentially
    * large result sets.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopDocs searchAfter(ScoreDoc after, Query query, int n) throws IOException {
     return search(createNormalizedWeight(query), after, n);
@@ -234,7 +235,8 @@ public TopDocs searchAfter(ScoreDoc after, Query query, int n) throws IOExceptio
    * this method can be used for efficient 'deep-paging' across potentially
    * large result sets.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n) throws IOException {
     return search(createNormalizedWeight(wrapFilter(query, filter)), after, n);
@@ -243,7 +245,8 @@ public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n) th
   /** Finds the top <code>n</code>
    * hits for <code>query</code>.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopDocs search(Query query, int n)
     throws IOException {
@@ -254,7 +257,8 @@ public TopDocs search(Query query, int n)
   /** Finds the top <code>n</code>
    * hits for <code>query</code>, applying <code>filter</code> if non-null.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopDocs search(Query query, Filter filter, int n)
     throws IOException {
@@ -269,7 +273,8 @@ public TopDocs search(Query query, Filter filter, int n)
    * @param query to match documents
    * @param filter if non-null, used to permit documents to be collected.
    * @param results to receive hits
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public void search(Query query, Filter filter, Collector results)
     throws IOException {
@@ -280,7 +285,8 @@ public void search(Query query, Filter filter, Collector results)
   *
   * <p>{@link Collector#collect(int)} is called for every matching document.
   *
-  * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
   */
   public void search(Query query, Collector results)
     throws IOException {
@@ -296,7 +302,8 @@ public void search(Query query, Collector results)
    * {@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)} to
    * control scoring.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopFieldDocs search(Query query, Filter filter, int n,
                              Sort sort) throws IOException {
@@ -314,7 +321,8 @@ public TopFieldDocs search(Query query, Filter filter, int n,
    * <code>true</code> then the maximum score over all
    * collected hits will be computed.
    * 
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopFieldDocs search(Query query, Filter filter, int n,
                              Sort sort, boolean doDocScores, boolean doMaxScore) throws IOException {
@@ -329,7 +337,8 @@ public TopFieldDocs search(Query query, Filter filter, int n,
    * this method can be used for efficient 'deep-paging' across potentially
    * large result sets.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort) throws IOException {
     if (after != null && !(after instanceof FieldDoc)) {
@@ -346,7 +355,7 @@ public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, So
    * @param n Return only the top n results
    * @param sort The {@link org.apache.lucene.search.Sort} object
    * @return The top docs, sorted according to the supplied {@link org.apache.lucene.search.Sort} instance
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public TopFieldDocs search(Query query, int n,
                              Sort sort) throws IOException {
@@ -361,7 +370,8 @@ public TopFieldDocs search(Query query, int n,
    * this method can be used for efficient 'deep-paging' across potentially
    * large result sets.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopDocs searchAfter(ScoreDoc after, Query query, int n, Sort sort) throws IOException {
     if (after != null && !(after instanceof FieldDoc)) {
@@ -385,7 +395,8 @@ public TopDocs searchAfter(ScoreDoc after, Query query, int n, Sort sort) throws
    * <code>true</code> then the maximum score over all
    * collected hits will be computed.
    *
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort,
                              boolean doDocScores, boolean doMaxScore) throws IOException {
@@ -403,7 +414,8 @@ public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, So
    *
    * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or
    * {@link IndexSearcher#search(Query,Filter,int)} instead.
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {
     if (executor == null) {
@@ -440,7 +452,8 @@ protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOExce
    *
    * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or
    * {@link IndexSearcher#search(Query,Filter,int)} instead.
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   protected TopDocs search(List<AtomicReaderContext> leaves, Weight weight, ScoreDoc after, int nDocs) throws IOException {
     // single thread
@@ -463,7 +476,8 @@ protected TopDocs search(List<AtomicReaderContext> leaves, Weight weight, ScoreD
    * <p>Applications should usually call {@link
    * IndexSearcher#search(Query,Filter,int,Sort)} instead.
    * 
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   protected TopFieldDocs search(Weight weight,
                                 final int nDocs, Sort sort,
@@ -559,7 +573,8 @@ protected TopFieldDocs search(List<AtomicReaderContext> leaves, Weight weight, F
    *          to match documents
    * @param collector
    *          to receive hits
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)
       throws IOException {
@@ -577,7 +592,8 @@ protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector
   }
 
   /** Expert: called to re-write queries into primitive queries.
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   public Query rewrite(Query original) throws IOException {
     Query query = original;
@@ -609,7 +625,8 @@ public Explanation explain(Query query, int doc) throws IOException {
    * Computing an explanation is as expensive as executing the query over the
    * entire index.
    * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.
-   * @throws BooleanQuery.TooManyClauses
+   * @throws BooleanQuery.TooManyClauses If a query would exceed 
+   *         {@link BooleanQuery#getMaxClauseCount()} clauses.
    */
   protected Explanation explain(Weight weight, int doc) throws IOException {
     int n = ReaderUtil.subIndex(doc, leafContexts);
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
index 992162a8..86494afd 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
@@ -86,8 +86,6 @@ public void add(Term[] terms) {
    * Allows to specify the relative position of terms within the phrase.
    * 
    * @see PhraseQuery#add(Term, int)
-   * @param terms
-   * @param position
    */
   public void add(Term[] terms, int position) {
     if (termArrays.size() == 0)
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
index 20c5c39c..54d396e8 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
@@ -35,7 +35,7 @@
   
   /**
    * Constructor that takes gram size.
-   * @param n
+   * @param n n-gram size
    */
   public NGramPhraseQuery(int n){
     super();
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
index 724ed2c6..6471b10a 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -90,8 +90,6 @@ public void add(Term term) {
    * This allows e.g. phrases with more than one term at the same position
    * or phrases with gaps (e.g. in connection with stopwords).
    * 
-   * @param term
-   * @param position
    */
   public void add(Term term, int position) {
     if (terms.size() == 0) {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java
index 9c5c743d..d4cd148b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java
@@ -79,7 +79,7 @@
    *          don't require the searcher to be warmed before going live or other
    *          custom behavior.
    * 
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public SearcherManager(IndexWriter writer, boolean applyAllDeletes, SearcherFactory searcherFactory) throws IOException {
     if (searcherFactory == null) {
@@ -96,7 +96,7 @@ public SearcherManager(IndexWriter writer, boolean applyAllDeletes, SearcherFact
    *        <code>null</code> if you don't require the searcher to be warmed
    *        before going live or other custom behavior.
    *        
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {
     if (searcherFactory == null) {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java
index 98bdd8b1..b671b018 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java
@@ -96,7 +96,6 @@ public TimeLimitingCollector(final Collector collector, Counter clock, final lon
    * </pre>
    * </p>
    * @see #setBaseline() 
-   * @param clockTime
    */
   public void setBaseline(long clockTime) {
     t0 = clockTime;
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java
index 942c7234..9842aeb2 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.java
@@ -1060,7 +1060,7 @@ private TopFieldCollector(PriorityQueue<Entry> pq, int numHits, boolean fillFiel
    *          the given {@link Scorer} in {@link #setScorer(Scorer)}.
    * @return a {@link TopFieldCollector} instance which will sort the results by
    *         the sort criteria.
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public static TopFieldCollector create(Sort sort, int numHits,
       boolean fillFields, boolean trackDocScores, boolean trackMaxScore,
@@ -1105,7 +1105,7 @@ public static TopFieldCollector create(Sort sort, int numHits,
    *          the given {@link Scorer} in {@link #setScorer(Scorer)}.
    * @return a {@link TopFieldCollector} instance which will sort the results by
    *         the sort criteria.
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,
       boolean fillFields, boolean trackDocScores, boolean trackMaxScore,
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/Weight.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/Weight.java
index 051d705a..48dd209d 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/Weight.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/Weight.java
@@ -108,7 +108,7 @@
    *          but possibly filtering other documents)
    *          
    * @return a {@link Scorer} which scores documents in/out-of order.
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public abstract Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,
       boolean topScorer, Bits acceptDocs) throws IOException;
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java
index b8ab5d31..3ae6ffdc 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java
@@ -69,9 +69,9 @@ public PayloadSpanUtil(IndexReaderContext context) {
   /**
    * Query should be rewritten for wild/fuzzy support.
    * 
-   * @param query
+   * @param query rewritten query
    * @return payloads Collection
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {
     Collection<byte[]> payloads = new ArrayList<byte[]>();
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
index ee62c0d9..7c9e9e60 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
@@ -139,7 +139,7 @@ protected void processPayload(Similarity similarity) throws IOException {
       /**
        * 
        * @return {@link #getSpanScore()} * {@link #getPayloadScore()}
-       * @throws IOException
+       * @throws IOException if there is a low-level I/O error
        */
       @Override
       public float score() throws IOException {
@@ -154,7 +154,7 @@ public float score() throws IOException {
        * Should not be overridden without good cause!
        * 
        * @return the score for just the Span part w/o the payload
-       * @throws IOException
+       * @throws IOException if there is a low-level I/O error
        * 
        * @see #score()
        */
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java
index bacd4e6f..9aff3b9e 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java
@@ -179,7 +179,7 @@ public float queryNorm(float valueForNormalization) {
    * @param weight collection information from {@link #computeWeight(float, CollectionStatistics, TermStatistics...)}
    * @param context segment of the inverted index to be scored.
    * @return ExactSimScorer for scoring documents across <code>context</code>
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public abstract ExactSimScorer exactSimScorer(SimWeight weight, AtomicReaderContext context) throws IOException;
   
@@ -188,7 +188,7 @@ public float queryNorm(float valueForNormalization) {
    * @param weight collection information from {@link #computeWeight(float, CollectionStatistics, TermStatistics...)}
    * @param context segment of the inverted index to be scored.
    * @return SloppySimScorer for scoring documents across <code>context</code>
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public abstract SloppySimScorer sloppySimScorer(SimWeight weight, AtomicReaderContext context) throws IOException;
   
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
index a5bc3299..0559dc8d 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
@@ -219,8 +219,6 @@ private boolean toSameDoc() throws IOException {
   }
   
   /** Check whether two Spans in the same document are ordered.
-   * @param spans1 
-   * @param spans2 
    * @return true iff spans1 starts before spans2
    *              or the spans start at the same position,
    *              and spans1 ends before spans2.
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
index 7279b049..42090c65 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
@@ -241,7 +241,7 @@ public boolean skipTo(int target) throws IOException {
   /**
    * WARNING: The List is not necessarily in order of the the positions
    * @return Collection of <code>byte[]</code> payloads
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   @Override
   public Collection<byte[]> getPayload() throws IOException {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java
index 2e3c0ce2..a774c60f 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java
@@ -69,7 +69,7 @@
    * @lucene.experimental
    *
    * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false
-   * @throws java.io.IOException
+   * @throws IOException if there is a low-level I/O error
     */
   // TODO: Remove warning after API has been finalized
   public abstract Collection<byte[]> getPayload() throws IOException;
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory.java
index 5a940cb1..80a23d93 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory.java
@@ -215,14 +215,14 @@ public boolean fileExists(String name) {
   }
   
   /** Not implemented
-   * @throws UnsupportedOperationException */
+   * @throws UnsupportedOperationException always: not supported by CFS */
   @Override
   public void deleteFile(String name) {
     throw new UnsupportedOperationException();
   }
   
   /** Not implemented
-   * @throws UnsupportedOperationException */
+   * @throws UnsupportedOperationException always: not supported by CFS */
   public void renameFile(String from, String to) {
     throw new UnsupportedOperationException();
   }
@@ -253,7 +253,7 @@ public void sync(Collection<String> names) {
   }
   
   /** Not implemented
-   * @throws UnsupportedOperationException */
+   * @throws UnsupportedOperationException always: not supported by CFS */
   @Override
   public Lock makeLock(String name) {
     throw new UnsupportedOperationException();
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
index 66bcb1da..5c98c6a2 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
@@ -135,7 +135,7 @@ private static File getCanonicalPath(File file) throws IOException {
    * @param path the path of the directory
    * @param lockFactory the lock factory to use, or null for the default
    * ({@link NativeFSLockFactory});
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   protected FSDirectory(File path, LockFactory lockFactory) throws IOException {
     // new ctors use always NativeFSLockFactory as default:
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
index c1c7f5aa..65c2d923 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
@@ -90,7 +90,7 @@
    * @param path the path of the directory
    * @param lockFactory the lock factory to use, or null for the default
    * ({@link NativeFSLockFactory});
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public MMapDirectory(File path, LockFactory lockFactory) throws IOException {
     this(path, lockFactory, DEFAULT_MAX_BUFF);
@@ -99,7 +99,7 @@ public MMapDirectory(File path, LockFactory lockFactory) throws IOException {
   /** Create a new MMapDirectory for the named location and {@link NativeFSLockFactory}.
    *
    * @param path the path of the directory
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public MMapDirectory(File path) throws IOException {
     this(path, null);
@@ -123,7 +123,7 @@ public MMapDirectory(File path) throws IOException {
    * be {@code 1 << 30}, as the address space is big enough.
    * <p>
    * <b>Please note:</b> The chunk size is always rounded down to a power of 2.
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public MMapDirectory(File path, LockFactory lockFactory, int maxChunkSize) throws IOException {
     super(path, lockFactory);
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java
index e7608858..7fbc05bc 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java
@@ -58,7 +58,7 @@
    * @param path the path of the directory
    * @param lockFactory the lock factory to use, or null for the default
    * ({@link NativeFSLockFactory});
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public NIOFSDirectory(File path, LockFactory lockFactory) throws IOException {
     super(path, lockFactory);
@@ -67,7 +67,7 @@ public NIOFSDirectory(File path, LockFactory lockFactory) throws IOException {
   /** Create a new NIOFSDirectory for the named location and {@link NativeFSLockFactory}.
    *
    * @param path the path of the directory
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public NIOFSDirectory(File path) throws IOException {
     super(path, null);
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
index dbcae612..fe818da0 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
@@ -35,7 +35,7 @@
    * @param path the path of the directory
    * @param lockFactory the lock factory to use, or null for the default
    * ({@link NativeFSLockFactory});
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public SimpleFSDirectory(File path, LockFactory lockFactory) throws IOException {
     super(path, lockFactory);
@@ -44,7 +44,7 @@ public SimpleFSDirectory(File path, LockFactory lockFactory) throws IOException
   /** Create a new SimpleFSDirectory for the named location and {@link NativeFSLockFactory}.
    *
    * @param path the path of the directory
-   * @throws IOException
+   * @throws IOException if there is a low-level I/O error
    */
   public SimpleFSDirectory(File path) throws IOException {
     super(path, null);
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRef.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRef.java
index 29ae3716..7877b6fb 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRef.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRef.java
@@ -262,7 +262,7 @@ public int compare(BytesRef a, BytesRef b) {
     }    
   }
 
-  /** @deprecated */
+  /** @deprecated This comparator is only a transition mechanism */
   @Deprecated
   private final static Comparator<BytesRef> utf8SortedAsUTF16SortOrder = new UTF8SortedAsUTF16Comparator();
 
@@ -272,7 +272,7 @@ public int compare(BytesRef a, BytesRef b) {
     return utf8SortedAsUTF16SortOrder;
   }
 
-  /** @deprecated */
+  /** @deprecated This comparator is only a transition mechanism */
   @Deprecated
   private static class UTF8SortedAsUTF16Comparator implements Comparator<BytesRef> {
     // Only singleton
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
index 57d7df7e..3e488f84 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
@@ -34,7 +34,7 @@
    * 
    * @return the next {@link BytesRef} in the iterator or <code>null</code> if
    *         the end of the iterator is reached.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public BytesRef next() throws IOException;
   
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CharsRef.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CharsRef.java
index e756e0b4..73d30e08 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CharsRef.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CharsRef.java
@@ -217,7 +217,7 @@ public CharSequence subSequence(int start, int end) {
     return new CharsRef(chars, offset + start, offset + end);
   }
   
-  /** @deprecated */
+  /** @deprecated This comparator is only a transition mechanism */
   @Deprecated
   private final static Comparator<CharsRef> utf16SortedAsUTF8SortOrder = new UTF16SortedAsUTF8Comparator();
   
@@ -227,7 +227,7 @@ public CharSequence subSequence(int start, int end) {
     return utf16SortedAsUTF8SortOrder;
   }
   
-  /** @deprecated */
+  /** @deprecated This comparator is only a transition mechanism */
   @Deprecated
   private static class UTF16SortedAsUTF8Comparator implements Comparator<CharsRef> {
     // Only singleton
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CommandLineUtil.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CommandLineUtil.java
index c628bc28..c8e5ef55 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CommandLineUtil.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/CommandLineUtil.java
@@ -62,7 +62,7 @@ public static FSDirectory newFSDirectory(String clazzName, File file) {
    * Loads a specific Directory implementation 
    * @param clazzName The name of the Directory class to load
    * @return The Directory class loaded
-   * @throws ClassNotFoundException
+   * @throws ClassNotFoundException If the specified class cannot be found.
    */
   public static Class<? extends Directory> loadDirectoryClass(String clazzName) 
       throws ClassNotFoundException {
@@ -73,7 +73,7 @@ public static FSDirectory newFSDirectory(String clazzName, File file) {
    * Loads a specific FSDirectory implementation
    * @param clazzName The name of the FSDirectory class to load
    * @return The FSDirectory class loaded
-   * @throws ClassNotFoundException
+   * @throws ClassNotFoundException If the specified class cannot be found.
    */
   public static Class<? extends FSDirectory> loadFSDirectoryClass(String clazzName) 
       throws ClassNotFoundException {
@@ -97,10 +97,10 @@ private static String adjustDirectoryClassName(String clazzName) {
    * @param clazz The class of the object to be created
    * @param file The file to be used as parameter constructor
    * @return The new FSDirectory instance
-   * @throws NoSuchMethodException
-   * @throws InstantiationException
-   * @throws IllegalAccessException
-   * @throws InvocationTargetException
+   * @throws NoSuchMethodException If the Directory does not have a constructor that takes <code>File</code>.
+   * @throws InstantiationException If the class is abstract or an interface.
+   * @throws IllegalAccessException If the constructor does not have public visibility.
+   * @throws InvocationTargetException If the constructor throws an exception
    */
   public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz, File file) 
       throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java
index ea232ad3..bc290ded 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java
@@ -81,9 +81,7 @@
   // Used only for assert:
   private long numBits;
 
-  /** Constructs an OpenBitSet large enough to hold numBits.
-   *
-   * @param numBits
+  /** Constructs an OpenBitSet large enough to hold <code>numBits</code>.
    */
   public OpenBitSet(long numBits) {
     this.numBits = numBits;
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
index ad1fb123..13f90612 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
@@ -712,7 +712,7 @@ public static Encoder getEncoder(Format format, int version, int bitsPerValue) {
    * @param valueCount   how many values the stream holds
    * @param bitsPerValue the number of bits per value
    * @return             a Reader
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)
    * @lucene.internal
    */
@@ -754,7 +754,7 @@ public static Reader getReaderNoHeader(DataInput in, Format format, int version,
    *
    * @param in           the stream to read data from
    * @return             a Reader
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    * @lucene.internal
    */
   public static Reader getReader(DataInput in) throws IOException {
@@ -846,7 +846,7 @@ public static Reader getDirectReaderNoHeader(IndexInput in, Format format,
    *
    * @param in           the stream to read data from
    * @return a direct Reader
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    * @lucene.internal
    */
   public static Reader getDirectReader(IndexInput in) throws IOException {
@@ -990,7 +990,7 @@ public static Writer getWriterNoHeader(
    * @param bitsPerValue the number of bits per value
    * @param acceptableOverheadRatio an acceptable overhead ratio per value
    * @return             a Writer
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    * @lucene.internal
    */
   public static Writer getWriter(DataOutput out,
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector.java
index 32080c14..f8e294c3 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector.java
@@ -33,7 +33,6 @@
 
     /**
      * Test the default constructor on BitVectors of various sizes.
-     * @throws Exception
      */
     public void testConstructSize() throws Exception {
         doTestConstructOfSize(8);
@@ -49,7 +48,6 @@ private void doTestConstructOfSize(int n) {
 
     /**
      * Test the get() and set() methods on BitVectors of various sizes.
-     * @throws Exception
      */
     public void testGetSet() throws Exception {
         doTestGetSetVectorOfSize(8);
@@ -70,7 +68,6 @@ private void doTestGetSetVectorOfSize(int n) {
 
     /**
      * Test the clear() method on BitVectors of various sizes.
-     * @throws Exception
      */
     public void testClear() throws Exception {
         doTestClearVectorOfSize(8);
@@ -93,7 +90,6 @@ private void doTestClearVectorOfSize(int n) {
 
     /**
      * Test the count() method on BitVectors of various sizes.
-     * @throws Exception
      */
     public void testCount() throws Exception {
         doTestCountVectorOfSize(8);
@@ -129,7 +125,6 @@ private void doTestCountVectorOfSize(int n) {
 
     /**
      * Test writing and construction to/from Directory.
-     * @throws Exception
      */
     public void testWriteRead() throws Exception {
         doTestWriteRead(8);
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
index 821d0d54..4cac7bb2 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
@@ -41,8 +41,6 @@
     
   /**
    * LUCENE-3627: This test fails.
-   * 
-   * @throws Exception
    */
   public void testCrashCorruptsIndexing() throws Exception {
     path = _TestUtil.getTempDir("testCrashCorruptsIndexing");
@@ -60,8 +58,6 @@ public void testCrashCorruptsIndexing() throws Exception {
    * index 1 document and commit.
    * prepare for crashing.
    * index 1 more document, and upon commit, creation of segments_2 will crash.
-   * 
-   * @throws IOException
    */
   private void indexAndCrashOnCreateOutputSegments2() throws IOException {
     Directory realDirectory = FSDirectory.open(path);
@@ -93,8 +89,6 @@ private void indexAndCrashOnCreateOutputSegments2() throws IOException {
     
   /**
    * Attempts to index another 1 document.
-   * 
-   * @throws IOException
    */
   private void indexAfterRestart() throws IOException {
     Directory realDirectory = newFSDirectory(path);
@@ -115,8 +109,6 @@ private void indexAfterRestart() throws IOException {
     
   /**
    * Run an example search.
-   * 
-   * @throws IOException
    */
   private void searchForFleas(final int expectedTotalHits) throws IOException {
     Directory realDirectory = newFSDirectory(path);
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
index 213ff9fd..a7402fee 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -644,8 +644,6 @@ public void testEmptyDocAfterFlushingRealDoc() throws IOException {
    * Test that no NullPointerException will be raised,
    * when adding one document with a single, empty field
    * and term vectors enabled.
-   * @throws IOException
-   *
    */
   public void testBadSegment() throws IOException {
     Directory dir = newDirectory();
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java
index 43c31f4b..02897e36 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java
@@ -223,8 +223,6 @@ public void testIsCurrent() throws IOException {
   
   /**
    * Test using IW.addIndexes
-   * 
-   * @throws Exception
    */
   public void testAddIndexes() throws Exception {
     boolean doFullMerge = false;
@@ -310,8 +308,6 @@ public void testAddIndexes2() throws Exception {
 
   /**
    * Deletes using IW.deleteDocuments
-   * 
-   * @throws Exception
    */
   public void testDeleteFromIndexWriter() throws Exception {
     boolean doFullMerge = true;
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java
index 901b557d..d9421967 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java
@@ -56,8 +56,6 @@ public void tearDown() throws Exception {
 
   /**
    * Failing testcase showing the trouble
-   * 
-   * @throws IOException
    */
   @Test
   public void testDeleteByTermIsCurrent() throws IOException {
@@ -83,8 +81,6 @@ public void testDeleteByTermIsCurrent() throws IOException {
 
   /**
    * Testcase for example to show that writer.deleteAll() is working as expected
-   * 
-   * @throws IOException
    */
   @Test
   public void testDeleteAllIsCurrent() throws IOException {
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java
index 56419164..460d9d3b 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java
@@ -36,8 +36,6 @@
   /**
    * Creates two empty indexes and wraps a ParallelReader around. Adding this
    * reader to a new index should not throw any exception.
-   * 
-   * @throws IOException
    */
   public void testEmptyIndex() throws IOException {
     Directory rd1 = newDirectory();
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java
index 83da2f64..22e29b72 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java
@@ -59,8 +59,6 @@ public void testElements() throws IOException {
   /**
    * <code>T:files T:deleting C:production C:optimize </code>
    * it works.
-   *
-   * @throws IOException
    */
   public void testFlat() throws IOException {
     BooleanQuery q = new BooleanQuery();
@@ -74,8 +72,6 @@ public void testFlat() throws IOException {
   /**
    * <code>(T:files T:deleting) (+C:production +C:optimize)</code>
    * it works.
-   *
-   * @throws IOException
    */
   public void testParenthesisMust() throws IOException {
     BooleanQuery q3 = new BooleanQuery();
@@ -93,8 +89,6 @@ public void testParenthesisMust() throws IOException {
   /**
    * <code>(T:files T:deleting) +(C:production C:optimize)</code>
    * not working. results NO HIT.
-   *
-   * @throws IOException
    */
   public void testParenthesisMust2() throws IOException {
     BooleanQuery q3 = new BooleanQuery();
@@ -112,8 +106,6 @@ public void testParenthesisMust2() throws IOException {
   /**
    * <code>(T:files T:deleting) (C:production C:optimize)</code>
    * not working. results NO HIT.
-   *
-   * @throws IOException
    */
   public void testParenthesisShould() throws IOException {
     BooleanQuery q3 = new BooleanQuery();
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java
index 39850c26..3c872a59 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java
@@ -152,8 +152,6 @@ private void matchHits(IndexSearcher searcher, Sort sort) throws IOException {
   
   /**
    * Check the hits for duplicates.
-   * 
-   * @param hits
    */
   private void checkHits(ScoreDoc[] hits, String prefix) {
     if (hits != null) {
@@ -186,9 +184,6 @@ private void log(String message) {
   public class CustomSearcher extends IndexSearcher {
     private int switcher;
     
-    /**
-     * @param r
-     */
     public CustomSearcher(IndexReader r, int switcher) {
       super(r);
       this.switcher = switcher;
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestWildcard.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestWildcard.java
index 3c53c053..233c395c 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestWildcard.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestWildcard.java
@@ -269,7 +269,6 @@ private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)
    * This test looks at both parsing and execution of wildcard queries.
    * Although placed here, it also tests prefix queries, verifying that
    * prefix queries are not parsed into wild card queries, and viceversa.
-   * @throws Exception
    */
   public void testParsingAndSearching() throws Exception {
     String field = "content";
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
index a8749dbb..8778bd93 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
@@ -113,7 +113,6 @@ public void reset() throws IOException {
    * @param similarity The Similarity class to use in the Searcher
    * @param numDocs The num docs to add
    * @return An IndexSearcher
-   * @throws IOException
    */
   // TODO: randomize
   public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
index 17b975c3..f6ac8cda 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
@@ -86,7 +86,6 @@ public void tearDown() throws Exception {
    * @param writer the Lucene index writer
    * @param id the unique id of the document
    * @param text the text of the document
-   * @throws IOException
    */
   protected void addDocument(final RandomIndexWriter writer, final String id,
       final String text) throws IOException {
@@ -99,8 +98,6 @@ protected void addDocument(final RandomIndexWriter writer, final String id,
   
   /**
    * Tests two span queries.
-   * 
-   * @throws IOException
    */
   public void testBooleanQueryWithSpanQueries() throws IOException {
     
@@ -109,8 +106,6 @@ public void testBooleanQueryWithSpanQueries() throws IOException {
   
   /**
    * Tests two span queries.
-   * 
-   * @throws IOException
    */
   protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,
       final float expectedScore) throws IOException {
@@ -132,8 +127,6 @@ protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,
    * @param description the description of the search
    * @param expectedIds the expected document ids of the hits
    * @param expectedScores the expected scores of the hits
-   * 
-   * @throws IOException
    */
   protected static void assertHits(IndexSearcher s, Query query,
       final String description, final String[] expectedIds,
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
index 584be01b..1a3c1ca6 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
@@ -72,8 +72,6 @@ public void tearDown() throws Exception {
   
   /**
    * Verifies that the index has the correct number of documents.
-   * 
-   * @throws Exception
    */
   public void testVerifyIndex() throws Exception {
     final IndexReader reader = DirectoryReader.open(mDirectory);
@@ -83,8 +81,6 @@ public void testVerifyIndex() throws Exception {
   
   /**
    * Tests a single span query that matches multiple documents.
-   * 
-   * @throws IOException
    */
   public void testSingleSpanQuery() throws IOException {
     
@@ -99,8 +95,6 @@ public void testSingleSpanQuery() throws IOException {
   
   /**
    * Tests a single span query that matches multiple documents.
-   * 
-   * @throws IOException
    */
   public void testMultipleDifferentSpanQueries() throws IOException {
     
@@ -119,8 +113,6 @@ public void testMultipleDifferentSpanQueries() throws IOException {
   
   /**
    * Tests two span queries.
-   * 
-   * @throws IOException
    */
   @Override
   public void testBooleanQueryWithSpanQueries() throws IOException {
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
index 32ecf12d..662fd7d4 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
@@ -37,7 +37,6 @@
 public class TestFileSwitchDirectory extends LuceneTestCase {
   /**
    * Test if writing doc stores to disk and everything else to ram works.
-   * @throws IOException
    */
   public void testBasic() throws IOException {
     Set<String> fileExtensions = new HashSet<String>();
diff --git a/lucene/dev/trunk/lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java b/lucene/dev/trunk/lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java
index 6f344469..a4abadc2 100644
--- a/lucene/dev/trunk/lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java
+++ b/lucene/dev/trunk/lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java
@@ -140,7 +140,7 @@ public static void main(String[] args) {
    *  
    * @param writer Writer to the index where the given file/dir info will be stored
    * @param file The file to index, or the directory to recurse into to find files to index
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   static void indexDocs(IndexWriter writer, File file)
     throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsDocumentBuilder.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsDocumentBuilder.java
index c8ca0286..9e64e7f4 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsDocumentBuilder.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsDocumentBuilder.java
@@ -43,7 +43,6 @@
 public class EnhancementsDocumentBuilder extends CategoryDocumentBuilder {
 
   /**
-   * @param taxonomyWriter
    * @param params
    *            Indexing params which include {@link CategoryEnhancement}s.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator.java
index cb4c1299..28b8857b 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator.java
@@ -50,7 +50,7 @@
    *            A reader of the index.
    * @param term
    *            The category term to iterate.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public EnhancementsPayloadIterator(
       List<CategoryEnhancement> enhancementsList,
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java
index 803411b7..22a9ea52 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java
@@ -204,7 +204,7 @@ private void writeObject(ObjectOutputStream out) throws IOException {
    * {@link ObjectOutputStream}.<br>
    * NOTE: {@link CategoryProperty}s are {@link Serializable}, but do not
    * assume that Lucene's {@link Attribute}s are as well
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   protected void serializeCategoryAttribute(ObjectOutputStream out,
       CategoryAttribute ca) throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder.java
index f67cd72a..cedb4f91 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder.java
@@ -128,7 +128,7 @@ public CategoryDocumentBuilder(TaxonomyWriter taxonomyWriter,
    * @return This CategoryDocumentBuilder, to enable this one line call:
    *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.
    *         {@link #setCategoryPaths(Iterable)}.{@link #build(Document)}.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public CategoryDocumentBuilder setCategoryPaths(
       Iterable<CategoryPath> categoryPaths) throws IOException {
@@ -150,7 +150,7 @@ public CategoryDocumentBuilder setCategoryPaths(
    * @return This CategoryDocumentBuilder, to enable this one line call:
    *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.
    *         {@link #setCategories(Iterable)}.{@link #build(Document)}.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public CategoryDocumentBuilder setCategories(
       Iterable<CategoryAttribute> categories) throws IOException {
@@ -277,7 +277,7 @@ protected CountingListTokenizer getCountingListTokenizer(
    *            relevant data.
    * @return The {@link CategoryTokenizer} to be used in creating category
    *         tokens.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   protected CategoryTokenizer getCategoryTokenizer(TokenStream categoryStream)
       throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/params/PerDimensionIndexingParams.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/params/PerDimensionIndexingParams.java
index 433bc308..1f657d84 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/params/PerDimensionIndexingParams.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/index/params/PerDimensionIndexingParams.java
@@ -95,9 +95,6 @@ public CategoryListParams getCategoryListParams(CategoryPath category) {
   /**
    * Add a CategoryListParams for a given CategoryPath's dimension or
    * "zero-th" category.
-   * 
-   * @param category
-   * @param clParams
    */
   public void addCategoryListParams(CategoryPath category, CategoryListParams clParams) {
     clParamsMap.put(category.getComponent(0), clParams);
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator.java
index 30da0537..006532df 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator.java
@@ -81,7 +81,7 @@ public FacetsAccumulator(FacetSearchParams searchParams,
   public abstract List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException;
 
   /**
-   * @return the complement threshold
+   * Returns the complement threshold.
    * @see #setComplementThreshold(double)
    */
   public double getComplementThreshold() {
@@ -107,6 +107,7 @@ public double getComplementThreshold() {
    * <p>
    * To disable complements pass {@link #DISABLE_COMPLEMENT}.
    * @param complementThreshold the complement threshold to set
+   * @see #getComplementThreshold()
    */
   public void setComplementThreshold(double complementThreshold) {
     this.complementThreshold = complementThreshold;
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/SamplingWrapper.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/SamplingWrapper.java
index dc93f38c..6578f94c 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/SamplingWrapper.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/SamplingWrapper.java
@@ -88,18 +88,11 @@ public SamplingWrapper(FacetsAccumulator delegee, Sampler sampler) {
     return fixedRes; 
   }
 
-  /**
-   * @see FacetsAccumulator#getComplementThreshold()
-   */
   @Override
   public double getComplementThreshold() {
     return delegee.getComplementThreshold();
   }
 
-  /**
-   * @param complementThreshold
-   * @see FacetsAccumulator#setComplementThreshold(double)
-   */
   @Override
   public void setComplementThreshold(double complementThreshold) {
     delegee.setComplementThreshold(complementThreshold);
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java
index c622516a..d1792ed3 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java
@@ -230,10 +230,7 @@ protected boolean shouldComplement(ScoredDocIDs docids) {
   /**
    * Iterate over the documents for this partition and fill the facet arrays with the correct
    * count/complement count/value.
-   * @param docids
-   * @param facetArrays
-   * @param partition
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private final void fillArraysForPartition(ScoredDocIDs docids,
       FacetArrays facetArrays, int partition) throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest.java
index 29786502..7162968f 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest.java
@@ -318,7 +318,7 @@ public boolean equals(Object o) {
    *          index reader in effect.
    * @param taxonomy
    *          reader of taxonomy in effect.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract Aggregator createAggregator(boolean useComplements,
       FacetArrays arrays, IndexReader indexReader,
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SampleFixer.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SampleFixer.java
index 08ea46b1..5161de52 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SampleFixer.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SampleFixer.java
@@ -38,7 +38,7 @@
    *          full set of matching documents.
    * @param fres
    *          sample result to be fixed.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public void fixResult(ScoredDocIDs origDocIds, FacetResult fres) throws IOException; 
 }
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java
index af083f01..186587a7 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java
@@ -71,7 +71,7 @@ public void fixResult(ScoredDocIDs origDocIds, FacetResult fres)
    *          result node to be fixed
    * @param docIds
    *          docids in effect
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)
       throws IOException {
@@ -88,7 +88,7 @@ private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)
    *          result node to be recounted
    * @param docIds
    *          full set of matching documents.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)
       throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader.java
index f39a0439..78d55af5 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader.java
@@ -257,7 +257,7 @@
    * Expert: decreases the refCount of this TaxonomyReader instance. 
    * If the refCount drops to 0, then pending changes (if any) can be  
    * committed to the taxonomy index and this reader can be closed. 
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public void decRef() throws IOException;
   
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
index 02db3a50..ab6612db 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
@@ -275,7 +275,6 @@ private void prvt_put(float key, T e) {
 
   /**
    * Calculating the baseHash index using the internal <code>hashFactor</code>.
-   * @param key
    */
   protected int calcBaseHashIndex(float key) {
     return Float.floatToIntBits(key) & hashFactor;
@@ -339,7 +338,6 @@ public boolean containsValue(Object o) {
   /**
    * Find the actual index of a given key.
    * 
-   * @param key
    * @return index of the key. zero if the key wasn't found.
    */
   protected int find(float key) {
@@ -370,8 +368,6 @@ protected int find(float key) {
    * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
-   * @param key
-   * @param baseHashIndex
    * @return the index of the given key, or 0 as 'Ground' if the key wasn't
    *         found.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
index 1645f603..793c72c3 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
@@ -236,8 +236,6 @@ private void prvt_add(int key) {
   /**
    * Calculating the baseHash index using the internal <code>hashFactor</code>
    * .
-   * 
-   * @param key
    */
   protected int calcBaseHashIndex(int key) {
     return key & hashFactor;
@@ -282,7 +280,6 @@ public boolean contains(int value) {
   /**
    * Find the actual index of a given key.
    * 
-   * @param key
    * @return index of the key. zero if the key wasn't found.
    */
   protected int find(int key) {
@@ -313,8 +310,6 @@ protected int find(int key) {
    * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
-   * @param key
-   * @param baseHashIndex
    * @return the index of the given key, or 0 as 'Ground' if the key wasn't
    *         found.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
index bc090d0a..07f6a458 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
@@ -276,8 +276,6 @@ private void prvt_put(int key, double v) {
   /**
    * Calculating the baseHash index using the internal <code>hashFactor</code>
    * .
-   * 
-   * @param key
    */
   protected int calcBaseHashIndex(int key) {
     return key & hashFactor;
@@ -340,7 +338,6 @@ public boolean containsValue(double value) {
   /**
    * Find the actual index of a given key.
    * 
-   * @param key
    * @return index of the key. zero if the key wasn't found.
    */
   protected int find(int key) {
@@ -371,8 +368,6 @@ protected int find(int key) {
    * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
-   * @param key
-   * @param baseHashIndex
    * @return the index of the given key, or 0 as 'Ground' if the key wasn't
    *         found.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
index 45ed9339..dced6f5f 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
@@ -273,8 +273,6 @@ private void prvt_put(int key, int e) {
 
   /**
    * Calculating the baseHash index using the internal <code>hashFactor</code>.
-   * 
-   * @param key
    */
   protected int calcBaseHashIndex(int key) {
     return key & hashFactor;
@@ -337,7 +335,6 @@ public boolean containsValue(int v) {
   /**
    * Find the actual index of a given key.
    * 
-   * @param key
    * @return index of the key. zero if the key wasn't found.
    */
   protected int find(int key) {
@@ -368,8 +365,6 @@ protected int find(int key) {
    * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
-   * @param key
-   * @param baseHashIndex
    * @return the index of the given key, or 0 as 'Ground' if the key wasn't
    *         found.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
index ebafd508..886afa0b 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
@@ -275,7 +275,6 @@ private void prvt_put(int key, T e) {
   /**
    * Calculating the baseHash index using the internal <code>hashFactor</code>.
    * 
-   * @param key
    */
   protected int calcBaseHashIndex(int key) {
     return key & hashFactor;
@@ -339,7 +338,6 @@ public boolean containsValue(Object o) {
   /**
    * Find the actual index of a given key.
    * 
-   * @param key
    * @return index of the key. zero if the key wasn't found.
    */
   protected int find(int key) {
@@ -370,8 +368,6 @@ protected int find(int key) {
    * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
-   * @param key
-   * @param baseHashIndex
    * @return the index of the given key, or 0 as 'Ground' if the key wasn't
    *         found.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
index 3e84462a..c755ab60 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
@@ -275,8 +275,6 @@ private void prvt_put(K key, float e) {
 
   /**
    * Calculating the baseHash index using the internal <code>hashFactor</code>.
-   * 
-   * @param key
    */
   protected int calcBaseHashIndex(K key) {
     return key.hashCode() & hashFactor;
@@ -341,7 +339,6 @@ public boolean containsValue(float o) {
   /**
    * Find the actual index of a given key.
    * 
-   * @param key
    * @return index of the key. zero if the key wasn't found.
    */
   protected int find(K key) {
@@ -372,8 +369,6 @@ protected int find(K key) {
    * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
-   * @param key
-   * @param baseHashIndex
    * @return the index of the given key, or 0 as 'Ground' if the key wasn't
    *         found.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
index 8df73f26..15eafa43 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
@@ -275,8 +275,6 @@ private void prvt_put(K key, int e) {
 
   /**
    * Calculating the baseHash index using the internal <code>hashFactor</code>.
-   * 
-   * @param key
    */
   protected int calcBaseHashIndex(K key) {
     return key.hashCode() & hashFactor;
@@ -341,7 +339,6 @@ public boolean containsValue(int o) {
   /**
    * Find the actual index of a given key.
    * 
-   * @param key
    * @return index of the key. zero if the key wasn't found.
    */
   protected int find(K key) {
@@ -372,8 +369,6 @@ protected int find(K key) {
    * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
-   * @param key
-   * @param baseHashIndex
    * @return the index of the given key, or 0 as 'Ground' if the key wasn't
    *         found.
    */
diff --git a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest.java b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest.java
index 8e3947fe..ce3a1749 100644
--- a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest.java
+++ b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest.java
@@ -133,8 +133,6 @@ public void testAddNewCategoryWithProperty() throws FacetException {
   /**
    * Test addition of {@link CategoryAttribute} object without properties to a
    * {@link CategoryContainer}.
-   * 
-   * @throws FacetException
    */
   @Test
   public void testAddCategoryAttributeWithoutProperties()
@@ -147,8 +145,6 @@ public void testAddCategoryAttributeWithoutProperties()
   /**
    * Test addition of {@link CategoryAttribute} object with property to a
    * {@link CategoryContainer}.
-   * 
-   * @throws FacetException
    */
   @Test
   public void testAddCategoryAttributeWithProperty() throws FacetException {
@@ -174,8 +170,6 @@ public void testAddCategoryAttributeWithProperty() throws FacetException {
   /**
    * Verifies that a {@link CategoryAttributesStream} can be constructed from
    * {@link CategoryContainer} and produce the correct number of tokens.
-   * 
-   * @throws IOException
    */
   @Test
   public void testCategoryAttributesStream() throws IOException {
@@ -190,8 +184,6 @@ public void testCategoryAttributesStream() throws IOException {
 
   /**
    * Test that {@link CategoryContainer} merges properties.
-   * 
-   * @throws FacetException
    */
   @Test
   public void testCategoryAttributeMerge() throws FacetException {
diff --git a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryAttributesStreamTest.java b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryAttributesStreamTest.java
index bfdc631b..b74a8be0 100644
--- a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryAttributesStreamTest.java
+++ b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryAttributesStreamTest.java
@@ -35,8 +35,6 @@
   /**
    * Verifies that a {@link CategoryAttributesStream} accepts
    * {@link CategoryAttribute} and passes them on as tokens.
-   * 
-   * @throws IOException
    */
   @Test
   public void testStream() throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest.java b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest.java
index 463cacb1..ba2cfe1c 100644
--- a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest.java
+++ b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest.java
@@ -41,8 +41,6 @@
    * Verifies that a {@link CategoryParentsStream} can be constructed from
    * {@link CategoryAttributesStream} and produces the correct number of
    * tokens with default facet indexing params.
-   * 
-   * @throws IOException
    */
   @Test
   public void testStreamDefaultParams() throws IOException {
@@ -68,8 +66,6 @@ public void testStreamDefaultParams() throws IOException {
    * Verifies that a {@link CategoryParentsStream} can be constructed from
    * {@link CategoryAttributesStream} and produces the correct number of
    * tokens with non top level facet indexing params.
-   * 
-   * @throws IOException
    */
   @Test
   public void testStreamNonTopLevelParams() throws IOException {
@@ -108,9 +104,6 @@ protected PathPolicy fixedPathPolicy() {
   /**
    * Verifies the correctness when no attributes in parents are retained in
    * {@link CategoryParentsStream}.
-   * 
-   * @throws IOException
-   * @throws FacetException 
    */
   @Test
   public void testNoRetainableAttributes() throws IOException {
@@ -142,9 +135,6 @@ public void testNoRetainableAttributes() throws IOException {
   /**
    * Verifies the correctness when attributes in parents are retained in
    * {@link CategoryParentsStream}.
-   * 
-   * @throws IOException
-   * @throws FacetException 
    */
   @Test
   public void testRetainableAttributes() throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryTokenizerTest.java b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryTokenizerTest.java
index 14e46bcb..977eeb0f 100644
--- a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryTokenizerTest.java
+++ b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryTokenizerTest.java
@@ -41,8 +41,6 @@
   /**
    * Verifies that a {@link CategoryTokenizer} adds the correct
    * {@link CharTermAttribute}s to a {@link CategoryAttributesStream}.
-   * 
-   * @throws IOException
    */
   @Test
   public void testTokensDefaultParams() throws IOException {
@@ -80,8 +78,6 @@ public void testTokensDefaultParams() throws IOException {
   /**
    * Verifies that {@link CategoryTokenizer} elongates the buffer in
    * {@link CharTermAttribute} for long categories.
-   * 
-   * @throws IOException
    */
   @Test
   public void testLongCategoryPath() throws IOException {
diff --git a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined.java b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined.java
index d2214020..20dd77b5 100644
--- a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined.java
+++ b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined.java
@@ -215,8 +215,6 @@ public void testWriterTwice2() throws Exception {
    * testWriterTwice3 is yet another test which tests creating a taxonomy
    * in two separate writing sessions. This test used to fail because of
    * a bug involving commit(), explained below, and now should succeed.
-   * 
-   * @throws Exception
    */
   @Test
   public void testWriterTwice3() throws Exception {
diff --git a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java
index bb405b14..490fb575 100644
--- a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java
+++ b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java
@@ -69,7 +69,6 @@ public void testCloseTwice() throws Exception {
   
   /**
    * Test the boolean returned by TR.refresh
-   * @throws Exception
    */
   @Test
   public void testReaderRefreshResult() throws Exception {
diff --git a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed.java b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed.java
index bb7ca21f..96dcea5a 100644
--- a/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed.java
+++ b/lucene/dev/trunk/lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed.java
@@ -46,10 +46,6 @@
 
   private static NumberFormat nf;
 
-  /**
-   * @param args
-   * @throws IOException
-   */
   public static void main(String[] args) throws IOException {
     testFacetIDs(data3630, 3630);
     testFacetIDs(data9910, 9910);
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
index 6e752246..72f05145 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
@@ -174,11 +174,7 @@ public final String getBestFragment(TokenStream tokenStream, String text)
    * Low level api to get the most relevant (formatted) sections of the document.
    * This method has been made public to allow visibility of score information held in TextFragment objects.
    * Thanks to Jason Calabrese for help in redefining the interface.
-   * @param tokenStream
-   * @param text
-   * @param maxNumFragments
-   * @param mergeContiguousFragments
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length
    */
   public final TextFragment[] getBestTextFragments(
@@ -492,9 +488,6 @@ public Fragmenter getTextFragmenter()
     return textFragmenter;
   }
 
-  /**
-   * @param fragmenter
-   */
   public void setTextFragmenter(Fragmenter fragmenter)
   {
     textFragmenter = fragmenter;
@@ -509,9 +502,6 @@ public Scorer getFragmentScorer()
   }
 
 
-  /**
-   * @param scorer
-   */
   public void setFragmentScorer(Scorer scorer)
   {
     fragmentScorer = scorer;
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java
index 1c51fee3..c2e6a107 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java
@@ -84,7 +84,6 @@ public QueryScorer(Query query, IndexReader reader, String field) {
    * @param query to use for highlighting
    * @param reader {@link IndexReader} to use for quasi tf/idf scoring
    * @param field to highlight - pass null to ignore fields
-   * @param defaultField
    */
   public QueryScorer(Query query, IndexReader reader, String field, String defaultField) {
     this.defaultField = defaultField;
@@ -263,8 +262,6 @@ public void setExpandMultiTermQuery(boolean expandMultiTermQuery) {
    * ensure an efficient reset - if you are already using a different caching
    * {@link TokenStream} impl and you don't want it to be wrapped, set this to
    * false.
-   * 
-   * @param wrap
    */
   public void setWrapIfNotCachingTokenFilter(boolean wrap) {
     this.wrapToCaching = wrap;
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Scorer.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Scorer.java
index fa406883..19fa1808 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Scorer.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/Scorer.java
@@ -35,7 +35,7 @@
    * @return either a {@link TokenStream} that the Highlighter should continue using (eg
    *         if you read the tokenSream in this method) or null to continue
    *         using the same {@link TokenStream} that was passed in.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public TokenStream init(TokenStream tokenStream) throws IOException;
 
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
index dd56f21c..1005afa0 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
@@ -55,7 +55,6 @@ public void merge(TextFragment frag2)
     score=Math.max(score,frag2.score);
   }
   /**
-   * @param fragment
    * @return true if this fragment follows the one passed
    */
   public boolean follows(TextFragment fragment)
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
index b0830be5..add22bcb 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
@@ -93,12 +93,8 @@ public static TokenStream getAnyTokenStream(IndexReader reader, int docId,
    * minimal (1000 invocations still registers 0 ms). So this "lazy" (flexible?)
    * approach to coding is probably acceptable
    * 
-   * @param reader
-   * @param docId
-   * @param field
-   * @param analyzer
    * @return null if field not stored correctly
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public static TokenStream getAnyTokenStream(IndexReader reader, int docId,
       String field, Analyzer analyzer) throws IOException {
@@ -150,7 +146,6 @@ private static boolean hasPositions(Terms vector) throws IOException {
    * compression (less disk IO) or slower (more CPU burn) depending on the
    * content.
    * 
-   * @param tpv
    * @param tokenPositionsGuaranteedContiguous true if the token position
    *        numbers have no overlaps or gaps. If looking to eek out the last
    *        drops of performance, set to true. If in doubt, set to false.
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm.java
index 15c4c012..ff395468 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm.java
@@ -30,20 +30,11 @@
   boolean positionSensitive;
   private List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();
 
-  /**
-   * @param weight
-   * @param term
-   */
   public WeightedSpanTerm(float weight, String term) {
     super(weight, term);
     this.positionSpans = new ArrayList<PositionSpan>();
   }
 
-  /**
-   * @param weight
-   * @param term
-   * @param positionSensitive
-   */
   public WeightedSpanTerm(float weight, String term, boolean positionSensitive) {
     super(weight, term);
     this.positionSensitive = positionSensitive;
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
index 61efe754..4b45302b 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
@@ -88,7 +88,7 @@ private void closeReaders() {
    *          Query to extract Terms from
    * @param terms
    *          Map to place created WeightedSpanTerms in
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   protected void extract(Query query, Map<String,WeightedSpanTerm> terms) throws IOException {
     if (query instanceof BooleanQuery) {
@@ -221,7 +221,7 @@ protected void extractUnknownQuery(Query query,
    *          Map to place created WeightedSpanTerms in
    * @param spanQuery
    *          SpanQuery to extract Terms from
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {
     Set<String> fieldNames;
@@ -309,7 +309,7 @@ protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, Span
    *          Map to place created WeightedSpanTerms in
    * @param query
    *          Query to extract Terms from
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {
     Set<Term> nonWeightedTerms = new HashSet<Term>();
@@ -362,7 +362,7 @@ protected AtomicReaderContext getLeafContextForField(String field) throws IOExce
    * @param tokenStream
    *          of text to be highlighted
    * @return Map containing WeightedSpanTerms
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream)
       throws IOException {
@@ -381,7 +381,7 @@ protected AtomicReaderContext getLeafContextForField(String field) throws IOExce
    * @param fieldName
    *          restricts Term's used based on field name
    * @return Map containing WeightedSpanTerms
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,
       String fieldName) throws IOException {
@@ -417,7 +417,7 @@ protected AtomicReaderContext getLeafContextForField(String field) throws IOExce
    * @param reader
    *          to use for scoring
    * @return Map of WeightedSpanTerms with quasi tf/idf scores
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public Map<String,WeightedSpanTerm> getWeightedSpanTermsWithScores(Query query, TokenStream tokenStream, String fieldName,
       IndexReader reader) throws IOException {
@@ -551,8 +551,6 @@ public TokenStream getTokenStream() {
    * ensure an efficient reset - if you are already using a different caching
    * {@link TokenStream} impl and you don't want it to be wrapped, set this to
    * false.
-   * 
-   * @param wrap
    */
   public void setWrapIfNotCachingTokenFilter(boolean wrap) {
     this.wrapToCaching = wrap;
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.java
index 5b20539a..80fd58fd 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.java
@@ -106,7 +106,7 @@ public FieldQuery getFieldQuery( Query query, IndexReader reader ) throws IOExce
    * @param fieldName field of the document to be highlighted
    * @param fragCharSize the length (number of chars) of a fragment
    * @return the best fragment (snippet) string
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public final String getBestFragment( final FieldQuery fieldQuery, IndexReader reader, int docId,
       String fieldName, int fragCharSize ) throws IOException {
@@ -126,7 +126,7 @@ public final String getBestFragment( final FieldQuery fieldQuery, IndexReader re
    * @param maxNumFragments maximum number of fragments
    * @return created fragments or null when no fragments created.
    *         size of the array can be less than maxNumFragments
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public final String[] getBestFragments( final FieldQuery fieldQuery, IndexReader reader, int docId,
       String fieldName, int fragCharSize, int maxNumFragments ) throws IOException {
@@ -149,7 +149,7 @@ public final String getBestFragment( final FieldQuery fieldQuery, IndexReader re
    * @param postTags post-tags to be used to highlight terms
    * @param encoder an encoder that generates encoded text
    * @return the best fragment (snippet) string
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public final String getBestFragment( final FieldQuery fieldQuery, IndexReader reader, int docId,
       String fieldName, int fragCharSize,
@@ -175,7 +175,7 @@ public final String getBestFragment( final FieldQuery fieldQuery, IndexReader re
    * @param encoder an encoder that generates encoded text
    * @return created fragments or null when no fragments created.
    *         size of the array can be less than maxNumFragments
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public final String[] getBestFragments( final FieldQuery fieldQuery, IndexReader reader, int docId,
       String fieldName, int fragCharSize, int maxNumFragments,
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
index 79f0a9e2..50ad2477 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
@@ -292,8 +292,6 @@ else if (query instanceof MultiTermQuery && reader != null) {
 
   /**
    * 
-   * @param fieldName
-   * @param term
    * @return QueryPhraseMap
    */
   public QueryPhraseMap getFieldTermMap( String fieldName, String term ){
@@ -303,8 +301,6 @@ public QueryPhraseMap getFieldTermMap( String fieldName, String term ){
 
   /**
    * 
-   * @param fieldName
-   * @param phraseCandidate
    * @return QueryPhraseMap
    */
   public QueryPhraseMap searchPhrase( String fieldName, final List<TermInfo> phraseCandidate ){
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
index 456b2e38..1375cfda 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
@@ -70,7 +70,7 @@
    * @param docId document id to be highlighted
    * @param fieldName field of the document to be highlighted
    * @param fieldQuery FieldQuery object
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {
     this.fieldName = fieldName;
diff --git a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FragmentsBuilder.java b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FragmentsBuilder.java
index 8bb5a895..a0c84e8a 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FragmentsBuilder.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FragmentsBuilder.java
@@ -37,7 +37,7 @@
    * @param fieldName field of the document to be highlighted
    * @param fieldFragList FieldFragList object
    * @return a created fragment or null when no fragment created
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public String createFragment( IndexReader reader, int docId, String fieldName,
       FieldFragList fieldFragList ) throws IOException;
@@ -52,7 +52,7 @@ public String createFragment( IndexReader reader, int docId, String fieldName,
    * @param maxNumFragments maximum number of fragments
    * @return created fragments or null when no fragments created.
    *         size of the array can be less than maxNumFragments
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public String[] createFragments( IndexReader reader, int docId, String fieldName,
       FieldFragList fieldFragList, int maxNumFragments ) throws IOException;
@@ -68,7 +68,7 @@ public String createFragment( IndexReader reader, int docId, String fieldName,
    * @param postTags post-tags to be used to highlight terms
    * @param encoder an encoder that generates encoded text
    * @return a created fragment or null when no fragment created
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public String createFragment( IndexReader reader, int docId, String fieldName,
       FieldFragList fieldFragList, String[] preTags, String[] postTags,
@@ -87,7 +87,7 @@ public String createFragment( IndexReader reader, int docId, String fieldName,
    * @param encoder an encoder that generates encoded text
    * @return created fragments or null when no fragments created.
    *         size of the array can be less than maxNumFragments
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public String[] createFragments( IndexReader reader, int docId, String fieldName,
       FieldFragList fieldFragList, int maxNumFragments, String[] preTags, String[] postTags,
diff --git a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 3677573a..7ce0731e 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -153,7 +153,6 @@ public void testHighlightingWithDefaultField() throws Exception {
 
   /**
    * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>
- * @throws InvalidTokenOffsetsException 
    */
   private String highlightField(Query query, String fieldName, String text)
       throws IOException, InvalidTokenOffsetsException {
@@ -1335,8 +1334,6 @@ public void run() throws Exception {
 
   /**
    * Demonstrates creation of an XHTML compliant doc using new encoding facilities.
-   * 
-   * @throws Exception
    */
   public void testEncoding() throws Exception {
 
diff --git a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java
index 98ec317c..233bf15f 100644
--- a/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java
+++ b/lucene/dev/trunk/lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java
@@ -85,8 +85,6 @@ public void testHighlightCustomQuery() throws IOException,
   /**
    * This method intended for use with
    * <tt>testHighlightingWithDefaultField()</tt>
-   * 
-   * @throws InvalidTokenOffsetsException
    */
   private String highlightField(Query query, String fieldName,
       String text) throws IOException, InvalidTokenOffsetsException {
diff --git a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/IndexSplitter.java b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/IndexSplitter.java
index 0f0977c3..fbfdaa31 100644
--- a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/IndexSplitter.java
+++ b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/IndexSplitter.java
@@ -55,9 +55,6 @@
 
   File dir;
 
-  /**
-   * @param args
-   */
   public static void main(String[] args) throws Exception {
     if (args.length < 2) {
       System.err
diff --git a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
index ce6e415a..73370241 100644
--- a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
+++ b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
@@ -55,7 +55,7 @@
    * @param seq if true, then the source index will be split into equal
    * increasing ranges of document id-s. If false, source document id-s will be
    * assigned in a deterministic round-robin fashion to one of the output splits.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public void split(Version version, IndexReader in, Directory[] outputs, boolean seq) throws IOException {
     if (outputs == null || outputs.length < 2) {
diff --git a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
index 9f4d68b9..c0118a14 100644
--- a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
+++ b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
@@ -106,12 +106,7 @@ private static void usage() {
             + "java org.apache.lucene.misc.HighFreqTerms <index dir> [-t] [number_terms] [field]\n\t -t: include totalTermFreq\n\n");
   }
   /**
-   * 
-   * @param reader
-   * @param numTerms
-   * @param field
-   * @return TermStats[] ordered by terms with highest docFreq first.
-   * @throws Exception
+   * Returns TermStats[] ordered by terms with highest docFreq first.
    */
   public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {
     TermStatsQueue tiq = null;
@@ -157,11 +152,9 @@ private static void usage() {
    * containing the term and stores the total in the output array of TermStats.
    * Output array is sorted by highest total tf.
    * 
-   * @param reader
    * @param terms
    *          TermStats[]
    * @return TermStats[]
-   * @throws Exception
    */
   
   public static TermStats[] sortByTotalTermFreq(IndexReader reader, TermStats[] terms) throws Exception {
diff --git a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java
index 3b8ea425..f990faea 100644
--- a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java
+++ b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java
@@ -97,7 +97,7 @@
    *   not use direct IO.  See {@link
    *   #DEFAULT_MIN_BYTES_DIRECT}
    * @param delegate fallback Directory for non-merges
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public NativeUnixDirectory(File path, int mergeBufferSize, long minBytesDirect, Directory delegate) throws IOException {
     super(path, delegate.getLockFactory());
@@ -113,7 +113,7 @@ public NativeUnixDirectory(File path, int mergeBufferSize, long minBytesDirect,
    * 
    * @param path the path of the directory
    * @param delegate fallback Directory for non-merges
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public NativeUnixDirectory(File path, Directory delegate) throws IOException {
     this(path, DEFAULT_MERGE_BUFFER_SIZE, DEFAULT_MIN_BYTES_DIRECT, delegate);
diff --git a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/WindowsDirectory.java b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/WindowsDirectory.java
index 3ad31f59..f635fe37 100644
--- a/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/WindowsDirectory.java
+++ b/lucene/dev/trunk/lucene/misc/src/java/org/apache/lucene/store/WindowsDirectory.java
@@ -54,7 +54,7 @@
    * @param path the path of the directory
    * @param lockFactory the lock factory to use, or null for the default
    * ({@link NativeFSLockFactory});
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public WindowsDirectory(File path, LockFactory lockFactory) throws IOException {
     super(path, lockFactory);
@@ -63,7 +63,7 @@ public WindowsDirectory(File path, LockFactory lockFactory) throws IOException {
   /** Create a new WindowsDirectory for the named location and {@link NativeFSLockFactory}.
    *
    * @param path the path of the directory
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error
    */
   public WindowsDirectory(File path) throws IOException {
     super(path, null);
diff --git a/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java b/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java
index e0b35d9e..a3023fa5 100644
--- a/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java
+++ b/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java
@@ -42,8 +42,6 @@
 
   /**
    * Adds a term to the list of acceptable terms
-   *
-   * @param term
    */
   public void addTerm(Term term) {
     terms.add(term);
diff --git a/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java b/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
index 62b96a9d..13636030 100644
--- a/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
+++ b/lucene/dev/trunk/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
@@ -292,6 +292,7 @@
    * Returns the boost factor used when boosting terms
    *
    * @return the boost factor used when boosting terms
+   * @see #setBoostFactor(float)
    */
   public float getBoostFactor() {
     return boostFactor;
@@ -300,7 +301,7 @@ public float getBoostFactor() {
   /**
    * Sets the boost factor to use when boosting terms
    *
-   * @param boostFactor
+   * @see #getBoostFactor()
    */
   public void setBoostFactor(float boostFactor) {
     this.boostFactor = boostFactor;
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.java
index 67357d3b..92154ff1 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.java
@@ -72,7 +72,6 @@ public AnalyzingQueryParser(Version matchVersion, String field, Analyzer analyze
    *                 characters (? or *), but is not simple prefix term
    *
    * @return Resulting {@link Query} built for the term
-   * @throws ParseException
    */
   @Override
   protected Query getWildcardQuery(String field, String termStr) throws ParseException {
@@ -190,7 +189,6 @@ protected Query getWildcardQuery(String field, String termStr) throws ParseExcep
    *                 (<b>without</b> trailing '*' character!)
    *
    * @return Resulting {@link Query} built for the term
-   * @throws ParseException
    */
   @Override
   protected Query getPrefixQuery(String field, String termStr) throws ParseException {
@@ -243,7 +241,6 @@ protected Query getPrefixQuery(String field, String termStr) throws ParseExcepti
    * @param termStr Term token to use for building term for the query
    *
    * @return Resulting {@link Query} built for the term
-   * @exception ParseException
    */
   @Override
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
index 79807cfa..1575ed34 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
@@ -662,10 +662,6 @@ protected Query getFieldQuery(String field, String queryText, int slop)
     return query;
   }
 
-  /**
-   *
-   * @exception org.apache.lucene.queryparser.classic.ParseException
-   */
   protected Query getRangeQuery(String field,
                                 String part1,
                                 String part2,
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.java
index cc3bbe7c..cd4573ae 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.java
@@ -36,8 +36,6 @@
    *          the query tree root node
    * 
    * @return some object generated from the query tree
-   * 
-   * @throws QueryNodeException
    */
   Object build(QueryNode queryNode) throws QueryNodeException;
 
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.java
index 4c8869c9..0276e333 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.java
@@ -81,7 +81,7 @@
    * 
    * @param <T> the value's type
    * @param key the key, cannot be <code>null</code>
-   * @param value
+   * @param value value to set
    */
   public <T> void set(ConfigurationKey<T> key, T value) {
     
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java
index dfb818fe..4330b0a0 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java
@@ -71,9 +71,6 @@ public QueryNode cloneTree() throws CloneNotSupportedException {
     return clone;
   }
 
-  /**
-   * @param child
-   */
   public void setChild(QueryNode child) {
     List<QueryNode> list = new ArrayList<QueryNode>();
     list.add(child);
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
index 8c43a206..8f7f2212 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
@@ -149,9 +149,6 @@ public QueryNode cloneTree() throws CloneNotSupportedException {
     return clone;
   }
 
-  /**
-   * @param child
-   */
   public void setChild(QueryNode child) {
     List<QueryNode> list = new ArrayList<QueryNode>();
     list.add(child);
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
index b7aefb24..6cdd0ba8 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
@@ -46,8 +46,7 @@
   public boolean containsTag(String tagName);
   
   /**
-   * @param tagName
-   * @return of stored on under that tag name
+   * Returns object stored under that tag name
    */
   public Object getTag(String tagName);
   
@@ -58,7 +57,6 @@
    * when you call the cloneTree() method
    * 
    * @return the cloned tree
-   * @throws CloneNotSupportedException
    */
   public QueryNode cloneTree() throws CloneNotSupportedException;
 
@@ -77,16 +75,11 @@
    * Associate the specified value with the specified tagName. If the tagName
    * already exists, the old value is replaced. The tagName and value cannot be
    * null. tagName will be converted to lowercase.
-   * 
-   * @param tagName
-   * @param value
    */
   public void setTag(String tagName, Object value);
   
   /**
    * Unset a tag. tagName will be converted to lowercase.
-   * 
-   * @param tagName
    */
   public void unsetTag(String tagName);
   
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.java
index b192ecd3..2e8d7daa 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.java
@@ -55,15 +55,11 @@
    *          tree root node
    * 
    * @return the processed query tree
-   * 
-   * @throws QueryNodeException
    */
   public QueryNode process(QueryNode queryTree) throws QueryNodeException;
 
   /**
    * Sets the {@link QueryConfigHandler} associated to the query tree.
-   * 
-   * @param queryConfigHandler
    */
   public void setQueryConfigHandler(QueryConfigHandler queryConfigHandler);
 
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java
index 2527fbc9..b0256f89 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java
@@ -29,11 +29,6 @@
 
   /**
    * Create a escaped CharSequence
-   * 
-   * @param chars
-   * @param wasEscaped
-   * @param offset
-   * @param length
    */
   public UnescapedCharSequence(char[] chars, boolean[] wasEscaped, int offset,
       int length) {
@@ -45,8 +40,6 @@ public UnescapedCharSequence(char[] chars, boolean[] wasEscaped, int offset,
 
   /**
    * Create a non-escaped CharSequence
-   * 
-   * @param text
    */
   public UnescapedCharSequence(CharSequence text) {
     this.chars = new char[text.length()];
@@ -59,8 +52,6 @@ public UnescapedCharSequence(CharSequence text) {
 
   /**
    * Create a copy of an existent UnescapedCharSequence
-   * 
-   * @param text
    */
   @SuppressWarnings("unused")
   private UnescapedCharSequence(UnescapedCharSequence text) {
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java
index ba866d22..19afdbb4 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java
@@ -122,9 +122,6 @@ private static Object getResourceBundleObject(String messageKey, Locale locale)
     return null;
   }
 
-  /**
-   * @param clazz
-   */
   private static void load(Class<? extends NLS> clazz) {
     final Field[] fieldArray = clazz.getDeclaredFields();
 
@@ -139,10 +136,6 @@ private static void load(Class<? extends NLS> clazz) {
     }
   }
 
-  /**
-   * @param field
-   * @param isFieldAccessible
-   */
   private static void loadfieldValue(Field field, boolean isFieldAccessible,
       Class<? extends NLS> clazz) {
     int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.java
index 07808bf3..2d65360e 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.java
@@ -36,9 +36,6 @@
 
   private boolean disableCoord;
 
-  /**
-   * @param clauses
-   */
   public StandardBooleanQueryNode(List<QueryNode> clauses, boolean disableCoord) {
     super(clauses);
 
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
index 1275b786..ef43d02a 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
@@ -72,7 +72,9 @@ public boolean equals(Object obj) {
   && srndQuery.equals(other.srndQuery);
   }
 
-  /** @throws UnsupportedOperationException */
+  /** 
+   * Not supported by this query.
+   * @throws UnsupportedOperationException always: clone is not supported. */
   @Override
   public RewriteQuery clone() {
     throw new UnsupportedOperationException();
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java
index c1929f9e..d7238e26 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java
@@ -45,7 +45,6 @@
    * Construct an XML parser that uses a single instance QueryParser for handling
    * UserQuery tags - all parse operations are synchronised on this parser
    *
-   * @param analyzer
    * @param parser A QueryParser which will be synchronized on during parse calls.
    */
   public CoreParser(Analyzer analyzer, QueryParser parser) {
@@ -56,7 +55,6 @@ public CoreParser(Analyzer analyzer, QueryParser parser) {
    * Constructs an XML parser that creates a QueryParser for each UserQuery request.
    *
    * @param defaultField The default field name used by QueryParsers constructed for UserQuery tags
-   * @param analyzer
    */
   public CoreParser(String defaultField, Analyzer analyzer) {
     this(defaultField, analyzer, null);
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
index cc90d3ce..8d69d62a 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
@@ -32,7 +32,6 @@
    * Construct an XML parser that uses a single instance QueryParser for handling
    * UserQuery tags - all parse operations are synchronized on this parser
    *
-   * @param analyzer
    * @param parser A QueryParser which will be synchronized on during parse calls.
    */
   public CorePlusExtensionsParser(Analyzer analyzer, QueryParser parser) {
@@ -43,7 +42,6 @@ public CorePlusExtensionsParser(Analyzer analyzer, QueryParser parser) {
    * Constructs an XML parser that creates a QueryParser for each UserQuery request.
    *
    * @param defaultField The default field name used by QueryParsers constructed for UserQuery tags
-   * @param analyzer
    */
   public CorePlusExtensionsParser(String defaultField, Analyzer analyzer) {
     this(defaultField, analyzer, null);
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java
index 27e26830..9e895b66 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java
@@ -89,8 +89,6 @@ public static Element getChildByTagName(Element e, String name) {
   /**
    * Returns an attribute value from this node, or first parent node with this attribute defined
    *
-   * @param element
-   * @param attributeName
    * @return A non-zero-length value if defined, otherwise null
    */
   public static String getAttributeWithInheritance(Element element, String attributeName) {
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java
index d902bdad..96b261f6 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java
@@ -25,31 +25,18 @@
  */
 public class ParserException extends Exception {
 
-  /**
-   *
-   */
   public ParserException() {
     super();
   }
 
-  /**
-   * @param message
-   */
   public ParserException(String message) {
     super(message);
   }
 
-  /**
-   * @param message
-   * @param cause
-   */
   public ParserException(String message, Throwable cause) {
     super(message, cause);
   }
 
-  /**
-   * @param cause
-   */
   public ParserException(Throwable cause) {
     super(cause);
   }
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java
index da00a3ee..4d4540a0 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java
@@ -107,8 +107,6 @@
    * any documents.
    * <p/>
    * Defaults to false.
-   *
-   * @param strictMode
    */
   public void setStrictMode(boolean strictMode) {
     this.strictMode = strictMode;
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
index e9df3f36..6006fa66 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
@@ -29,9 +29,6 @@
 
   private final SpanQueryBuilder factory;
 
-  /**
-   * @param factory
-   */
   public SpanNotBuilder(SpanQueryBuilder factory) {
     this.factory = factory;
   }
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
index 80fa3e71..1c9dc60e 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
@@ -40,9 +40,6 @@
 
   private final Analyzer analyzer;
 
-  /**
-   * @param analyzer
-   */
   public SpanOrTermsBuilder(Analyzer analyzer) {
     this.analyzer = analyzer;
   }
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
index 3e1574a7..b3b0f847 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
@@ -39,9 +39,6 @@
 
   private final Analyzer analyzer;
 
-  /**
-   * @param analyzer
-   */
   public TermsFilterBuilder(Analyzer analyzer) {
     this.analyzer = analyzer;
   }
diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java
index cf75a4e1..1020e4b6 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java
@@ -82,8 +82,6 @@ public Query getQuery(Element e) throws ParserException {
   /**
    * Method to create a QueryParser - designed to be overridden
    *
-   * @param fieldName
-   * @param analyzer
    * @return QueryParser
    */
   protected QueryParser createQueryParser(String fieldName, Analyzer analyzer) {
diff --git a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
index 07e9d485..f3db434b 100644
--- a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
+++ b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
@@ -110,7 +110,6 @@ public boolean equals(Object obj) {
     /**
      * 
      * @param maxNumTerms The total number of terms clauses that will appear once rewritten as a BooleanQuery
-     * @param analyzer
      */
     public FuzzyLikeThisQuery(int maxNumTerms, Analyzer analyzer)
     {
@@ -180,7 +179,6 @@ public boolean equals(Object obj) {
     /**
      * Adds user input for "fuzzification" 
      * @param queryString The string which will be parsed by the analyzer and for which fuzzy variants will be parsed
-     * @param fieldName
      * @param minSimilarity The minimum similarity of the term variants (see FuzzyTermsEnum)
      * @param prefixLength Length of required common prefix on variant terms (see FuzzyTermsEnum)
      */
diff --git a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.java b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.java
index 229267d6..407d3806 100644
--- a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.java
+++ b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.java
@@ -110,7 +110,7 @@ protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOExc
         lowerTerm, upperTerm, includeLower, includeUpper, collator);
   }
 
-  /** @deprecated */
+  /** @deprecated Use {@link #getField()} instead. */
   @Deprecated
   public String field() {
     return getField();
diff --git a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java
index 6933701e..91030c99 100644
--- a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java
+++ b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java
@@ -50,7 +50,7 @@
    * (you can't select all but the first or last term without 
    * explicitly specifying the term to exclude.)
    * 
-   * @param tenum
+   * @param tenum source of the terms to enumerate.
    * @param lowerTermText
    *          The term text at the lower end of the range
    * @param upperTermText
diff --git a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.java b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.java
index 95721ec3..de8539e6 100644
--- a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.java
+++ b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.java
@@ -83,7 +83,7 @@ protected void maxEditDistanceChanged(BytesRef lastTerm, int maxEdits, boolean i
      * After calling the constructor the enumeration is already pointing to the first 
      * valid term if such a term exists.
      *
-     * @throws IOException
+     * @throws IOException If there is a low-level I/O error.
      */
     public LinearFuzzyTermsEnum() throws IOException {
       super(terms.iterator(null));
diff --git a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
index 6420447c..5ac67f43 100644
--- a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
+++ b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
@@ -51,18 +51,10 @@ public Term getTerm() {
     return term;
   }
 
-  /**
-   * Defines which {@link RegexCapabilities} implementation is used by this instance.
-   *
-   * @param impl
-   */
   public void setRegexImplementation(RegexCapabilities impl) {
     this.regexImpl = impl;
   }
 
-  /**
-   * @return The implementation used by this instance.
-   */
   public RegexCapabilities getRegexImplementation() {
     return regexImpl;
   }
diff --git a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.java b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.java
index 1b2c2535..10e0c5fa 100644
--- a/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.java
+++ b/lucene/dev/trunk/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.java
@@ -23,6 +23,14 @@
  */
 public interface RegexQueryCapable {
   
+  /**
+   * Defines which {@link RegexCapabilities} implementation is used by this instance.
+   * @see #getRegexImplementation()
+   */
   void setRegexImplementation(RegexCapabilities impl);
+  /**
+   * Returns the implementation used by this instance.
+   * @see #setRegexImplementation(RegexCapabilities)
+   */
   RegexCapabilities getRegexImplementation();
 }
diff --git a/lucene/dev/trunk/lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgs.java b/lucene/dev/trunk/lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgs.java
index 7dad6f38..e3f2a497 100644
--- a/lucene/dev/trunk/lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgs.java
+++ b/lucene/dev/trunk/lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgs.java
@@ -73,7 +73,6 @@ public static double calcDistanceFromErrPct(Shape shape, double distErrPct, Spat
    * Gets the error distance that specifies how precise the query shape is. This
    * looks at {@link #getDistErr()}, {@link #getDistErrPct()}, and {@code
    * defaultDistErrPct}.
-   * @param ctx
    * @param defaultDistErrPct 0 to 0.5
    * @return >= 0
    */
diff --git a/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java b/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
index 28d31ed5..f7095416 100644
--- a/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
+++ b/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
@@ -313,7 +313,7 @@ public void setDistance(StringDistance distance) {
    * @param suggestMode specifies when to return suggested words
    * @param accuracy return only suggested words that match with this similarity
    * @return sorted list of the suggested words according to the comparator
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public SuggestWord[] suggestSimilar(Term term, int numSug, IndexReader ir, 
       SuggestMode suggestMode, float accuracy) throws IOException {
diff --git a/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java b/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
index 66aecb3d..162ff926 100644
--- a/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
+++ b/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
@@ -449,7 +449,7 @@ private static void add(BooleanQuery q, String name, String value) {
 
   /**
    * Removes all terms from the spell check index.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @throws AlreadyClosedException if the Spellchecker is already closed
    */
   public void clearIndex() throws IOException {
@@ -467,8 +467,8 @@ public void clearIndex() throws IOException {
 
   /**
    * Check whether the word exists in the index.
-   * @param word
-   * @throws IOException
+   * @param word word to check
+   * @throws IOException If there is a low-level I/O error.
    * @throws AlreadyClosedException if the Spellchecker is already closed
    * @return true if the word exists in the index
    */
@@ -490,7 +490,7 @@ public boolean exist(String word) throws IOException {
    * @param config {@link IndexWriterConfig} to use
    * @param fullMerge whether or not the spellcheck index should be fully merged
    * @throws AlreadyClosedException if the Spellchecker is already closed
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {
     synchronized (modifyCurrentIndexLock) {
diff --git a/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker.java b/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker.java
index d9675a17..50e4cd86 100644
--- a/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker.java
+++ b/lucene/dev/trunk/lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker.java
@@ -82,16 +82,13 @@ public WordBreakSpellChecker() {}
    * lower score is generally preferred over a higher score.
    * </p>
    * 
-   * @param term
-   * @param maxSuggestions
-   * @param ir
    * @param suggestMode
    *          - default = {@link SuggestMode#SUGGEST_WHEN_NOT_IN_INDEX}
    * @param sortMethod
    *          - default =
    *          {@link BreakSuggestionSortMethod#NUM_CHANGES_THEN_MAX_FREQUENCY}
    * @return one or more arrays of words formed by breaking up the original term
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public SuggestWord[][] suggestWordBreaks(Term term, int maxSuggestions,
       IndexReader ir, SuggestMode suggestMode,
@@ -159,12 +156,8 @@ public WordBreakSpellChecker() {}
    * included term.
    * </p>
    * 
-   * @param terms
-   * @param maxSuggestions
-   * @param ir
-   * @param suggestMode
    * @return an array of words generated by combining original terms
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public CombineSuggestion[] suggestWordCombinations(Term[] terms,
       int maxSuggestions, IndexReader ir, SuggestMode suggestMode)
diff --git a/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java b/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java
index da4627da..bd6c7d3a 100644
--- a/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java
+++ b/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java
@@ -257,9 +257,6 @@ public static void setupDoc(Document doc) {
    * Writes the document to the directory using a segment
    * named "test"; returns the SegmentInfo describing the new
    * segment 
-   * @param dir
-   * @param doc
-   * @throws IOException
    */ 
   public static SegmentInfoPerCommit writeDoc(Random random, Directory dir, Document doc) throws IOException
   {
@@ -270,11 +267,6 @@ public static SegmentInfoPerCommit writeDoc(Random random, Directory dir, Docume
    * Writes the document to the directory using the analyzer
    * and the similarity score; returns the SegmentInfo
    * describing the new segment
-   * @param dir
-   * @param analyzer
-   * @param similarity
-   * @param doc
-   * @throws IOException
    */ 
   public static SegmentInfoPerCommit writeDoc(Random random, Directory dir, Analyzer analyzer, Similarity similarity, Document doc) throws IOException {
     IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig( /* LuceneTestCase.newIndexWriterConfig(random, */ 
diff --git a/lucene/dev/trunk/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/SearchClusteringEngine.java b/lucene/dev/trunk/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/SearchClusteringEngine.java
index 5be8e734..38193a91 100644
--- a/lucene/dev/trunk/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/SearchClusteringEngine.java
+++ b/lucene/dev/trunk/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/SearchClusteringEngine.java
@@ -45,7 +45,6 @@ public abstract Object cluster(Query query, SolrDocumentList solrDocumentList,
    * Returns the set of field names to load.
    * Concrete classes can override this method if needed.
    * Default implementation returns null, that is, all stored fields are loaded.
-   * @param sreq
    * @return set of field names to load
    */
   protected Set<String> getFieldsToLoad(SolrQueryRequest sreq){
diff --git a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java
index 7604e65c..a86c13c3 100644
--- a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java
+++ b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java
@@ -198,12 +198,10 @@
   public abstract String getScriptLanguage();
 
   /**delete a document by id
-   * @param id
    */
   public abstract void deleteDoc(String id);
 
   /**delete documents by query
-   * @param query
    */
   public abstract void deleteDocByQuery(String query);
 
@@ -214,7 +212,6 @@
   public abstract Object resolve(String var);
 
   /** Resolve variables in a template
-   * @param template
    *
    * @return The string w/ variables resolved
    */
diff --git a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java
index 2b6ae9a9..5c8f7157 100644
--- a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java
+++ b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java
@@ -68,8 +68,6 @@
    * documents will exist in the cache, as the cache allows duplicate keys. To
    * update a key's documents, first call delete(Object key).
    * </p>
-   * 
-   * @param rec
    */
   public void add(Map<String,Object> rec);
   
@@ -93,8 +91,6 @@
    * <p>
    * Delete all documents associated with the given key
    * </p>
-   * 
-   * @param key
    */
   public void delete(Object key);
   
diff --git a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHWriter.java b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHWriter.java
index 2b4947ca..33ad7da6 100644
--- a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHWriter.java
+++ b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHWriter.java
@@ -31,7 +31,6 @@
    *  If this writer supports transactions or commit points, then commit any changes,
    *  optionally optimizing the data for read/write performance
    * </p>
-   * @param optimize
    */
   public void commit(boolean optimize);
 
@@ -53,7 +52,6 @@
    * <p>
    *  Delete from the writer's underlying data store based the passed-in writer-specific query. (Optional Operation)
    * </p>
-   * @param q
    */
   public void deleteByQuery(String q);
 
@@ -68,7 +66,6 @@
    * <p>
    *  Delete from the writer's underlying data store based on the passed-in Primary Key
    * </p>
-   * @param key
    */
   public void deleteDoc(Object key);
 
@@ -78,7 +75,6 @@
    * <p>
    *  Add a document to this writer's underlying data store.
    * </p>
-   * @param doc
    * @return true on success, false on failure
    */
   public boolean upload(SolrInputDocument doc);
@@ -89,7 +85,6 @@
    * <p>
    *  Provide context information for this writer.  init() should be called before using the writer.
    * </p>
-   * @param context
    */
   public void init(Context context) ;
 
@@ -98,7 +93,6 @@
    * <p>
    *  Specify the keys to be modified by a delta update (required by writers that can store duplicate keys)
    * </p>
-   * @param deltaKeys
    */
   public void setDeltaKeys(Set<Map<String, Object>> deltaKeys) ;
 
diff --git a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataSource.java b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataSource.java
index 37ad4648..48656971 100644
--- a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataSource.java
+++ b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataSource.java
@@ -46,9 +46,6 @@
    * <p/>
    * This is invoked by the <code>DataImporter</code> after creating an
    * instance of this class.
-   *
-   * @param context
-   * @param initProps
    */
   public abstract void init(Context context, Properties initProps);
 
diff --git a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver.java b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver.java
index b3ded901..5e48a452 100644
--- a/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver.java
+++ b/lucene/dev/trunk/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver.java
@@ -46,7 +46,6 @@
   /**
    * Given a String with place holders, replace them with the value tokens.
    *
-   * @param template
    * @return the string with the placeholders replaced with their values
    */
   public abstract String replaceTokens(String template);
diff --git a/lucene/dev/trunk/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java b/lucene/dev/trunk/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java
index 0fee1f34..dff414b7 100644
--- a/lucene/dev/trunk/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java
+++ b/lucene/dev/trunk/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingDocumentLoader.java
@@ -126,11 +126,6 @@ void addDoc(SolrContentHandler handler) throws IOException {
     doAdd(handler, templateAdd);
   }
 
-  /**
-   * @param req
-   * @param stream
-   * @throws java.io.IOException
-   */
   @Override
   public void load(SolrQueryRequest req, SolrQueryResponse rsp,
       ContentStream stream, UpdateRequestProcessor processor) throws Exception {
diff --git a/lucene/dev/trunk/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java b/lucene/dev/trunk/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java
index 4a4cd38c..8c7d4547 100644
--- a/lucene/dev/trunk/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java
+++ b/lucene/dev/trunk/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java
@@ -52,7 +52,6 @@ public UIMAToSolrMapper(SolrInputDocument document, JCas cas) {
    * map features of a certain UIMA type to corresponding Solr fields based on the mapping
    *
    * @param typeName             name of UIMA type to map
-   * @param featureFieldsmapping
    */
   void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {
     try {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
index a67a9c36..ecb38e72 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
@@ -62,8 +62,7 @@
   
   /**
    * Use the other constructor using a CoreContainer and a name.
-   * @param core
-   * @deprecated
+   * @deprecated use {@link #EmbeddedSolrServer(CoreContainer, String)} instead.
    */
   @Deprecated
   public EmbeddedSolrServer( SolrCore core )
@@ -231,9 +230,7 @@ public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {
   }
   
   /**
-   * @param req
-   * @param rsp
-   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents
+   * Returns a response object equivalent to what you get from the XML/JSON/javabin parser. Documents
    * become SolrDocuments, DocList becomes SolrDocumentList etc.
    * 
    * @deprecated use {@link BinaryResponseWriter#getParsedResponse(SolrQueryRequest, SolrQueryResponse)}
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/AssignShard.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/AssignShard.java
index 62dcaba5..4b14bac6 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/AssignShard.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/AssignShard.java
@@ -32,8 +32,6 @@
   /**
    * Assign a new unique id up to slices count - then add replicas evenly.
    * 
-   * @param collection
-   * @param state
    * @return the assigned shard id
    */
   public static String assignShard(String collection, ClusterState state, Integer numShards) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java
index 7e5bf568..69ca2192 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java
@@ -98,9 +98,6 @@ public DistributedQueue(SolrZkClient zookeeper, String dir, List<ACL> acl) {
    * Return the head of the queue without modifying the queue.
    * 
    * @return the data at the head of the queue.
-   * @throws NoSuchElementException
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public byte[] element() throws NoSuchElementException, KeeperException,
       InterruptedException {
@@ -137,9 +134,6 @@ public DistributedQueue(SolrZkClient zookeeper, String dir, List<ACL> acl) {
    * Attempts to remove the head of the queue and return it.
    * 
    * @return The former head of the queue
-   * @throws NoSuchElementException
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public byte[] remove() throws NoSuchElementException, KeeperException,
       InterruptedException {
@@ -190,9 +184,6 @@ public void await() throws InterruptedException {
    * Removes the head of the queue and returns it, blocks until it succeeds.
    * 
    * @return The former head of the queue
-   * @throws NoSuchElementException
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public byte[] take() throws KeeperException, InterruptedException {
     TreeMap<Long,String> orderedChildren;
@@ -226,7 +217,6 @@ public void await() throws InterruptedException {
   /**
    * Inserts data into queue.
    * 
-   * @param data
    * @return true if data was successfully added
    */
   public boolean offer(byte[] data) throws KeeperException,
@@ -254,8 +244,6 @@ public boolean offer(byte[] data) throws KeeperException,
    * empty.
    * 
    * @return data at the first element of the queue, or null.
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public byte[] peek() throws KeeperException, InterruptedException {
     try {
@@ -270,8 +258,6 @@ public boolean offer(byte[] data) throws KeeperException,
    * empty.
    * 
    * @return data at the first element of the queue, or null.
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public byte[] peek(boolean block) throws KeeperException, InterruptedException {
     if (!block) {
@@ -309,8 +295,6 @@ public boolean offer(byte[] data) throws KeeperException,
    * queue is empty.
    * 
    * @return Head of the queue or null.
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public byte[] poll() throws KeeperException, InterruptedException {
     try {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java
index 5b3e7187..4d3a0160 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java
@@ -75,13 +75,7 @@ public LeaderElector(SolrZkClient zkClient) {
    * watching the candidate that is in line before this one - if it goes down, check
    * if this candidate is the leader again.
    *
-   * @param seq
-   * @param context 
    * @param replacement has someone else been the leader already?
-   * @throws KeeperException
-   * @throws InterruptedException
-   * @throws IOException 
-   * @throws UnsupportedEncodingException
    */
   private void checkIfIamLeader(final int seq, final ElectionContext context, boolean replacement) throws KeeperException,
       InterruptedException, IOException {
@@ -161,7 +155,6 @@ protected void runIamLeaderProcess(final ElectionContext context, boolean weAreR
   /**
    * Returns int given String of form n_0000000001 or n_0000000003, etc.
    * 
-   * @param nStringSequence
    * @return sequence number
    */
   private int getSeq(String nStringSequence) {
@@ -208,12 +201,7 @@ private String getNodeId(String nStringSequence) {
    * node that is watched goes down, check if we are the new lowest node, else
    * watch the next lowest numbered node.
    * 
-   * @param context
    * @return sequential node number
-   * @throws KeeperException
-   * @throws InterruptedException
-   * @throws IOException 
-   * @throws UnsupportedEncodingException
    */
   public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {
     final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;
@@ -278,10 +266,6 @@ public int joinElection(ElectionContext context) throws KeeperException, Interru
   
   /**
    * Set up any ZooKeeper nodes needed for leader election.
-   * 
-   * @param context
-   * @throws InterruptedException
-   * @throws KeeperException
    */
   public void setup(final ElectionContext context) throws InterruptedException,
       KeeperException {
@@ -292,8 +276,6 @@ public void setup(final ElectionContext context) throws InterruptedException,
   
   /**
    * Sort n string sequence list.
-   * 
-   * @param seqs
    */
   private void sortSeqs(List<String> seqs) {
     Collections.sort(seqs, new Comparator<String>() {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java
index 7414b899..df541972 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java
@@ -321,8 +321,6 @@ public void setClientPort(int clientPort) {
   /**
    * Parse config from a Properties.
    * @param zkProp Properties to parse from.
-   * @throws java.io.IOException
-   * @throws ConfigException
    */
   @Override
   public void parseProperties(Properties zkProp)
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkCLI.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkCLI.java
index 747b0830..a09c50f9 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkCLI.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkCLI.java
@@ -73,14 +73,6 @@
    * 
    * If you also pass a solrPort, it will be used to start an embedded zk useful
    * for single machine, multi node tests.
-   * 
-   * @param args
-   * @throws IOException
-   * @throws TimeoutException
-   * @throws InterruptedException
-   * @throws SAXException
-   * @throws ParserConfigurationException
-   * @throws KeeperException
    */
   public static void main(String[] args) throws InterruptedException,
       TimeoutException, IOException, ParserConfigurationException,
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index b1b0c171..0ccab0e6 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -138,19 +138,6 @@
   private int clientTimeout;
 
 
-  /**
-   * @param cc
-   * @param zkServerAddress
-   * @param zkClientTimeout
-   * @param zkClientConnectTimeout
-   * @param localHost
-   * @param locaHostPort
-   * @param localHostContext
-   * @param registerOnReconnect
-   * @throws InterruptedException
-   * @throws TimeoutException
-   * @throws IOException
-   */
   public ZkController(final CoreContainer cc, String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout, String localHost, String locaHostPort,
       String localHostContext, final CurrentCoreDescriptorProvider registerOnReconnect) throws InterruptedException,
       TimeoutException, IOException {
@@ -158,20 +145,6 @@ public ZkController(final CoreContainer cc, String zkServerAddress, int zkClient
   }
   
 
-  /**
-   * @param cc
-   * @param zkServerAddress
-   * @param zkClientTimeout
-   * @param zkClientConnectTimeout
-   * @param localHost
-   * @param locaHostPort
-   * @param localHostContext
-   * @param leaderVoteWait
-   * @param registerOnReconnect
-   * @throws InterruptedException
-   * @throws TimeoutException
-   * @throws IOException
-   */
   public ZkController(final CoreContainer cc, String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout, String localHost, String locaHostPort,
       String localHostContext, String leaderVoteWait, final CurrentCoreDescriptorProvider registerOnReconnect) throws InterruptedException,
       TimeoutException, IOException {
@@ -347,11 +320,7 @@ public void close() {
   }
 
   /**
-   * @param collection
-   * @param fileName
-   * @return true if config file exists
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns true if config file exists
    */
   public boolean configFileExists(String collection, String fileName)
       throws KeeperException, InterruptedException {
@@ -367,11 +336,7 @@ public ClusterState getClusterState() {
   }
 
   /**
-   * @param zkConfigName
-   * @param fileName
-   * @return config file data (in bytes)
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns config file data (in bytes)
    */
   public byte[] getConfigFileData(String zkConfigName, String fileName)
       throws KeeperException, InterruptedException {
@@ -521,10 +486,7 @@ public String getNodeName() {
   }
 
   /**
-   * @param path
-   * @return true if the path exists
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns true if the path exists
    */
   public boolean pathExists(String path) throws KeeperException,
       InterruptedException {
@@ -532,10 +494,7 @@ public boolean pathExists(String path) throws KeeperException,
   }
 
   /**
-   * @param collection
-   * @return config value
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns config value
    */
   public String readConfigName(String collection) throws KeeperException,
       InterruptedException {
@@ -567,10 +526,7 @@ public String readConfigName(String collection) throws KeeperException,
   /**
    * Register shard with ZooKeeper.
    * 
-   * @param coreName
-   * @param desc
    * @return the shardId for the SolrCore
-   * @throws Exception
    */
   public String register(String coreName, final CoreDescriptor desc) throws Exception {  
     return register(coreName, desc, false, false);
@@ -580,12 +536,7 @@ public String register(String coreName, final CoreDescriptor desc) throws Except
   /**
    * Register shard with ZooKeeper.
    * 
-   * @param coreName
-   * @param desc
-   * @param recoverReloadedCores
-   * @param afterExpiration
    * @return the shardId for the SolrCore
-   * @throws Exception
    */
   public String register(String coreName, final CoreDescriptor desc, boolean recoverReloadedCores, boolean afterExpiration) throws Exception {  
     final String baseUrl = getBaseUrl();
@@ -725,10 +676,7 @@ public ZkCoreNodeProps getLeaderProps(final String collection,
   /**
    * Get leader props directly from zk nodes.
    * 
-   * @param collection
-   * @param slice
    * @return leader props
-   * @throws InterruptedException
    */
   public ZkCoreNodeProps getLeaderProps(final String collection,
       final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {
@@ -787,18 +735,7 @@ private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws Int
 
 
   /**
-   * @param coreName
-   * @param desc
-   * @param recoverReloadedCores
-   * @param isLeader
-   * @param cloudDesc
-   * @param collection
-   * @param shardZkNodeName
-   * @param shardId
-   * @param leaderProps
-   * @param core
-   * @param cc
-   * @return whether or not a recovery was started
+   * Returns whether or not a recovery was started
    */
   private boolean checkRecovery(String coreName, final CoreDescriptor desc,
       boolean recoverReloadedCores, final boolean isLeader,
@@ -839,10 +776,6 @@ public void publish(final CoreDescriptor cd, final String state) throws KeeperEx
   
   /**
    * Publish core state to overseer.
-   * @param cd
-   * @param state
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void publish(final CoreDescriptor cd, final String state, boolean updateLastState) throws KeeperException, InterruptedException {
     //System.out.println(Thread.currentThread().getStackTrace()[3]);
@@ -880,12 +813,6 @@ private boolean needsToBeAssignedShardId(final CoreDescriptor desc,
     return true;
   }
 
-  /**
-   * @param coreName
-   * @param cloudDesc
-   * @throws KeeperException
-   * @throws InterruptedException
-   */
   public void unregister(String coreName, CloudDescriptor cloudDesc)
       throws InterruptedException, KeeperException {
     ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,
@@ -909,24 +836,10 @@ public void createCollection(String collection) throws KeeperException,
     overseerJobQueue.offer(ZkStateReader.toJSON(m));
   }
 
-  /**
-   * @param dir
-   * @param zkPath
-   * @throws IOException
-   * @throws KeeperException
-   * @throws InterruptedException
-   */
   public void uploadToZK(File dir, String zkPath) throws IOException, KeeperException, InterruptedException {
     uploadToZK(zkClient, dir, zkPath);
   }
   
-  /**
-   * @param dir
-   * @param configName
-   * @throws IOException
-   * @throws KeeperException
-   * @throws InterruptedException
-   */
   public void uploadConfigDir(File dir, String configName) throws IOException, KeeperException, InterruptedException {
     uploadToZK(zkClient, dir, ZkController.CONFIGS_ZKNODE + "/" + configName);
   }
@@ -1258,10 +1171,6 @@ public static void linkConfSet(SolrZkClient zkClient, String collection, String
   
   /**
    * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.
-   * 
-   * @throws IOException
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,
       KeeperException, InterruptedException {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CloseHook.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CloseHook.java
index 7431c1fd..5cdaff28 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CloseHook.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CloseHook.java
@@ -50,8 +50,6 @@
    * <b>Important:</b> Keep the method implementation as short as possible. If it were to use any heavy i/o , network connections -
    * it might be a better idea to launch in a separate Thread so as to not to block the process of
    * shutting down a given SolrCore instance.
-   *
-   * @param core
    */
   public abstract void postClose(SolrCore core);
 }
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/Config.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/Config.java
index a85f6443..1fbc48ca 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/Config.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/Config.java
@@ -61,11 +61,6 @@
 
   /**
    * Builds a config from a resource name with no xpath prefix.
-   * @param loader
-   * @param name
-   * @throws javax.xml.parsers.ParserConfigurationException
-   * @throws java.io.IOException
-   * @throws org.xml.sax.SAXException
    */
   public Config(SolrResourceLoader loader, String name) throws ParserConfigurationException, IOException, SAXException 
   {
@@ -92,9 +87,6 @@ public Config(SolrResourceLoader loader, String name, InputSource is, String pre
    * @param name the resource name used if the input stream 'is' is null
    * @param is the resource as a SAX InputSource
    * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions
-   * @throws javax.xml.parsers.ParserConfigurationException
-   * @throws java.io.IOException
-   * @throws org.xml.sax.SAXException
    */
   public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException 
   {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index c8f4e8aa..e87aef49 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -162,12 +162,6 @@ public CoreContainer() {
 
   /**
    * Initalize CoreContainer directly from the constructor
-   *
-   * @param dir
-   * @param configFile
-   * @throws ParserConfigurationException
-   * @throws IOException
-   * @throws SAXException
    */
   public CoreContainer(String dir, File configFile) throws ParserConfigurationException, IOException, SAXException
   {
@@ -356,9 +350,6 @@ static Properties getCoreProps(String instanceDir, String file, Properties defau
    * Load a config file listing the available solr cores.
    * @param dir the home directory of all resources.
    * @param configFile the configuration file
-   * @throws javax.xml.parsers.ParserConfigurationException
-   * @throws java.io.IOException
-   * @throws org.xml.sax.SAXException
    */
   public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {
     this.configFile = configFile;
@@ -370,9 +361,6 @@ public void load(String dir, File configFile ) throws ParserConfigurationExcepti
    * 
    * @param dir the home directory of all resources.
    * @param cfgis the configuration file InputStream
-   * @throws ParserConfigurationException
-   * @throws IOException
-   * @throws SAXException
    */
   public void load(String dir, InputSource cfgis)
       throws ParserConfigurationException, IOException, SAXException {
@@ -761,9 +749,6 @@ public SolrCore register(SolrCore core, boolean returnPrev) {
    *
    * @param dcore a core descriptor
    * @return the newly created core
-   * @throws javax.xml.parsers.ParserConfigurationException
-   * @throws java.io.IOException
-   * @throws org.xml.sax.SAXException
    */
   public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {
 
@@ -969,9 +954,6 @@ public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationExceptio
    * and processed by the old core
    * 
    * @param name the name of the SolrCore to reload
-   * @throws ParserConfigurationException
-   * @throws IOException
-   * @throws SAXException
    */
   public void reload(String name) throws ParserConfigurationException, IOException, SAXException {
 
@@ -1068,8 +1050,6 @@ private String checkDefault(String name) {
 
   /**
    * Swaps two SolrCore descriptors.
-   * @param n0
-   * @param n1
    */
   public void swap(String n0, String n1) {
     if( n0 == null || n1 == null ) {
@@ -1197,7 +1177,6 @@ public String getManagementPath() {
    * declare an alternate way of accessing named cores.
    * This can also be used in a pseudo single-core environment so admins can prepare
    * a new version before swapping.
-   * @param path
    */
   public void setManagementPath(String path) {
     this.managementPath = path;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java
index 27ba1126..e651540f 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/CoreDescriptor.java
@@ -176,8 +176,6 @@ Properties getCoreProperties() {
    * Properties instance passed into this method. This means that the Properties instance
    * set to this method will have different (less) key/value pairs than the Properties
    * instance returned by #getCoreProperties method.
-   * 
-   * @param coreProperties
    */
   public void setCoreProperties(Properties coreProperties) {
     if (this.coreProperties == null) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
index e40e41a0..f7b5e90a 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
@@ -36,30 +36,26 @@
    * hits 0, it can be closed. On shutdown all directories will be closed
    * whether this has been called or not. This is simply to allow early cleanup.
    * 
-   * @param directory
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void doneWithDirectory(Directory directory) throws IOException;
   
   /**
    * Adds a close listener for a Directory.
-   * 
-   * @param dir
-   * @param closeListener
    */
   public abstract void addCloseListener(Directory dir, CloseListener closeListener);
   
   /**
    * Close the this and all of the Directories it contains.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void close() throws IOException;
   
   /**
    * Creates a new Directory for a given path.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   protected abstract Directory create(String path) throws IOException;
   
@@ -73,7 +69,7 @@
    * Returns the Directory for a given path, using the specified rawLockType.
    * Will return the same Directory instance for the same path.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract Directory get(String path, String rawLockType)
       throws IOException;
@@ -85,7 +81,7 @@ public abstract Directory get(String path, String rawLockType)
    * {@link #doneWithDirectory(Directory)} in this case - the old Directory
    * will be closed when it's ref count hits 0.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract Directory get(String path, String rawLockType,
       boolean forceNew) throws IOException;
@@ -101,7 +97,7 @@ public abstract Directory get(String path, String rawLockType,
    * Releases the Directory so that it may be closed when it is no longer
    * referenced.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void release(Directory directory) throws IOException;
   
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
index c7c81436..c04578a9 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
@@ -63,7 +63,7 @@ public int getTermInfosIndexDivisor() {
    * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getSchema()} and
    * {@link SolrCore#getSolrConfig()} are valid.
    * @return An IndexReader instance
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)
       throws IOException;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrConfig.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrConfig.java
index e68f904a..beab37f0 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrConfig.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrConfig.java
@@ -404,7 +404,6 @@ private HttpCachingConfig(SolrConfig conf) {
     public final boolean openSearcher;  // is opening a new searcher part of hard autocommit?
 
     /**
-     * @param className
      * @param autoCommmitMaxDocs set -1 as default
      * @param autoCommmitMaxTime set -1 as default
      * @param commitIntervalLowerBound set -1 as default
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 082e7d8f..b366b3dd 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -556,7 +556,6 @@ private QueryResponseWriter createQueryResponseWriter(String className) {
    * Creates a new core and register it in the list of cores.
    * If a core with the same name already exists, it will be stopped and replaced by this one.
    *
-   * @param name
    * @param dataDir the index directory
    * @param config a solr config instance
    * @param schema a solr schema instance
@@ -573,7 +572,6 @@ public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema sche
    *@param dataDir the index directory
    *@param config a solr config instance
    *@param schema a solr schema instance
-   *@param updateHandler
    *
    *@since solr 1.3
    */
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index 9595893c..2d5d8a11 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -324,10 +324,9 @@ public InputStream openResource(String resource) throws IOException {
    * A comment line is any line that starts with the character "#"
    * </p>
    *
-   * @param resource
    * @return a list of non-blank non-comment lines with whitespace trimmed
    * from front and back.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public List<String> getLines(String resource) throws IOException {
     return getLines(resource, UTF_8);
@@ -342,9 +341,8 @@ public InputStream openResource(String resource) throws IOException {
    * </p>
    *
    * @param resource the file to be read
-   * @param encoding
    * @return a list of non-blank non-comment lines with whitespace trimmed
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public List<String> getLines(String resource,
       String encoding) throws IOException {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java
index 4390de5c..c8b7eff1 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrXMLSerializer.java
@@ -45,7 +45,7 @@
   /**
    * @param w
    *          Writer to use
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {
     w.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
index 7e0271b7..46fb3c8b 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
@@ -568,8 +568,6 @@ public NamedList getStatistics() {
 
   /**
    * Used for showing statistics and progress information.
-   *
-   * @param showSlaveDetails
    */
   private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {
     NamedList<Object> details = new SimpleOrderedMap<Object>();
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 1f566293..95525330 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -422,8 +422,6 @@ public void onClose() {
 
   /**
    * terminate the fsync service and wait for all the tasks to complete. If it is already terminated
-   *
-   * @throws Exception
    */
   private void terminateAndWaitFsyncService() throws Exception {
     if (fsyncService.isTerminated()) return;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index d38685db..f274329f 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -433,9 +433,6 @@ protected boolean handleCustomAction(SolrQueryRequest req, SolrQueryResponse rsp
   /**
    * Handle 'CREATE' action.
    *
-   * @param req
-   * @param rsp
-   *
    * @return true if a modification has resulted that requires persistance 
    *         of the CoreContainer configuration.
    *
@@ -530,13 +527,8 @@ protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp
   /**
    * Handle "RENAME" Action
    *
-   * @param req
-   * @param rsp
-   *
-   * @return true if a modification has resulted that requires persistance 
+   * @return true if a modification has resulted that requires persistence 
    *         of the CoreContainer configuration.
-   *
-   * @throws SolrException
    */
   protected boolean handleRenameAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {
     SolrParams params = req.getParams();
@@ -556,9 +548,6 @@ protected boolean handleRenameAction(SolrQueryRequest req, SolrQueryResponse rsp
   /**
    * Handle "ALIAS" action
    *
-   * @param req
-   * @param rsp
-   *
    * @return true if a modification has resulted that requires persistance 
    *         of the CoreContainer configuration.
    */
@@ -584,9 +573,6 @@ protected boolean handleAliasAction(SolrQueryRequest req, SolrQueryResponse rsp)
   /**
    * Handle "UNLOAD" Action
    *
-   * @param req
-   * @param rsp
-   *
    * @return true if a modification has resulted that requires persistance 
    *         of the CoreContainer configuration.
    */
@@ -691,9 +677,6 @@ public void postClose(SolrCore core) {
   /**
    * Handle "STATUS" action
    *
-   * @param req
-   * @param rsp
-   *
    * @return true if a modification has resulted that requires persistance 
    *         of the CoreContainer configuration.
    */
@@ -731,13 +714,8 @@ protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp
   /**
    * Handler "PERSIST" action
    *
-   * @param req
-   * @param rsp
-   *
-   * @return true if a modification has resulted that requires persistance 
+   * @return true if a modification has resulted that requires persistence 
    *         of the CoreContainer configuration.
-   *
-   * @throws SolrException
    */
   protected boolean handlePersistAction(SolrQueryRequest req, SolrQueryResponse rsp)
           throws SolrException {
@@ -760,10 +738,7 @@ protected boolean handlePersistAction(SolrQueryRequest req, SolrQueryResponse rs
   /**
    * Handler "RELOAD" action
    *
-   * @param req
-   * @param rsp
-   *
-   * @return true if a modification has resulted that requires persistance 
+   * @return true if a modification has resulted that requires persistence 
    *         of the CoreContainer configuration.
    */
   protected boolean handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) {
@@ -780,10 +755,7 @@ protected boolean handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp
   /**
    * Handle "SWAP" action
    *
-   * @param req
-   * @param rsp
-   *
-   * @return true if a modification has resulted that requires persistance 
+   * @return true if a modification has resulted that requires persistence 
    *         of the CoreContainer configuration.
    */
   protected boolean handleSwapAction(SolrQueryRequest req, SolrQueryResponse rsp) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
index 090cd057..a7d79e71 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
@@ -72,7 +72,6 @@ public void prepare(ResponseBuilder rb) throws IOException
 
   /**
    * Actually run the query
-   * @param rb
    */
   @Override
   public void process(ResponseBuilder rb) throws IOException
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
index fd993188..401fe1d2 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
@@ -296,7 +296,7 @@ public void inform(SolrCore core) {
   /**
    * Helpful for testing without loading config.xml
    *
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   void setTopQueryResults(IndexReader reader, String query, String[] ids, String[] ex) throws IOException {
     if (ids == null) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
index 378af853..71255f69 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
@@ -39,14 +39,14 @@
    *
    * The place to do initialization that is request dependent.
    * @param rb The {@link org.apache.solr.handler.component.ResponseBuilder}
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void prepare(ResponseBuilder rb) throws IOException;
 
   /**
    * Process the request for this component 
    * @param rb The {@link ResponseBuilder}
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void process(ResponseBuilder rb) throws IOException;
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
index e4d9fc34..8f57ad9e 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
@@ -166,7 +166,7 @@ public void initalize( SolrConfig config) {
    * @param fieldName The name of the field
    * @param request The current SolrQueryRequest
    * @param tokenStream document text CachingTokenStream
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   protected Highlighter getPhraseHighlighter(Query query, String fieldName, SolrQueryRequest request, CachingTokenFilter tokenStream) throws IOException {
     SolrParams params = request.getParams();
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java
index a30a7bea..c2dd0d3a 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java
@@ -89,7 +89,7 @@ public CSVStrategy(
         setIgnoreEmptyLines(ignoreEmptyLines);
     }
 
-    /** @deprecated */
+    /** @deprecated Use {@link #CSVStrategy(char, char, char, char, boolean, boolean, boolean, boolean)} */
     public CSVStrategy(
         char delimiter,
         char encapsulator,
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
index c61732c8..3db97013 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
@@ -207,7 +207,6 @@ public String toString() {
     
     /**
      * Copies the data into a new array of at least <code>capacity</code> size.
-     * @param capacity
      */
     public void provideCapacity(final int capacity) {
         if (c.length >= capacity) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java
index 3b2ca544..abc1c848 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java
@@ -155,7 +155,7 @@ public int read(char[] buf, int off, int len) throws IOException {
   * 
   * @param c the character to read up to
   * @return the string up to the character <code>c</code>
-  * @throws IOException
+  * @throws IOException If there is a low-level I/O error.
   */
  public String readUntil(char c) throws IOException {
    if (lookaheadChar == UNDEFINED) {
@@ -253,10 +253,8 @@ public long skip(long n) throws IllegalArgumentException, IOException  {
   /**
    * Skips all chars in the input until (but excluding) the given char
    * 
-   * @param c
    * @return counter
-   * @throws IllegalArgumentException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public long skipUntil(char c) throws IllegalArgumentException, IOException {
     if (lookaheadChar == UNDEFINED) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java
index 8ee5a0a1..767c9b80 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java
@@ -275,7 +275,6 @@ public boolean isEndTrimmed() {
 
     /**
      * Specify if the end of the line needs to be trimmed. Defaults to false.
-     * @param endTrimmed
      */
     public void setEndTrimmed(boolean endTrimmed) {
         this.endTrimmed = endTrimmed;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser.java
index bbff872f..3f8096c6 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser.java
@@ -116,7 +116,6 @@ protected void analyseLines(String[] lines) {
     /**
      * Guess if this file is fixedwidth.
      * Just basing the fact on all lines being of the same length
-     * @param lines
      */
     protected void guessFixedWidth(String[] lines) {
         int lastLength = 0;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/UnInvertedField.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
index 6a691f9d..c73c2c91 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
@@ -456,7 +456,7 @@ public boolean equals(int a, int b) {
    * @param baseDocs The {@link org.apache.solr.search.DocSet} to gather the stats on
    * @param facet One or more fields to facet on.
    * @return The {@link org.apache.solr.handler.component.StatsValues} collected
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public StatsValues getStats(SolrIndexSearcher searcher, DocSet baseDocs, String[] facet) throws IOException {
     //this function is ripped off nearly wholesale from the getCounts function to use
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
index f38a2bdd..0c6668cd 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
@@ -229,9 +229,6 @@ public Object getValue(SchemaField sf, StorableField f) throws Exception {
   /**
    * TODO -- there may be a way to do this without marshal at all...
    *
-   * @param req
-   * @param rsp
-   *
    * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become
    *         SolrDocuments, DocList becomes SolrDocumentList etc.
    *
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/transform/DocTransformer.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/transform/DocTransformer.java
index 85d775fc..bcfba99e 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/transform/DocTransformer.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/response/transform/DocTransformer.java
@@ -53,7 +53,7 @@ public void setContext( TransformContext context ) {}
    *
    * @param doc The document to alter
    * @param docid The Lucene internal doc id
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void transform(SolrDocument doc, int docid) throws IOException;
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/ExchangeRateProvider.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/ExchangeRateProvider.java
index cc558f3c..b0745e91 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/ExchangeRateProvider.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/ExchangeRateProvider.java
@@ -28,9 +28,7 @@
 public interface ExchangeRateProvider {
   /**
    * Get the exchange rate betwen the two given currencies
-   * @param sourceCurrencyCode
-   * @param targetCurrencyCode
-   * @return the exhange rate as a double
+   * @return the exchange rate as a double
    * @throws SolrException if the rate is not defined in the provider
    */
   public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) throws SolrException;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java
index e0f138d7..abe448a2 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/FieldType.java
@@ -568,7 +568,6 @@ public ValueSource getValueSource(SchemaField field, QParser parser) {
    * Sub-classes should override this method to provide their own range query implementation. They should strive to
    * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.
    *
-   * @param parser
    * @param field        the schema field
    * @param part1        the lower boundary of the range, nulls are allowed.
    * @param part2        the upper boundary of the range, nulls are allowed
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index db6f8a56..bf5e3361 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -892,7 +892,6 @@ public String getDynamicPattern(String fieldName) {
    * not as a result of a copyField declaration with a wildcard?  We
    * consider it explicitly defined if it matches a field or dynamicField
    * declaration.
-   * @param fieldName
    * @return true if explicitly declared in the schema.
    */
   public boolean hasExplicitField(String fieldName) {
@@ -909,7 +908,6 @@ public boolean hasExplicitField(String fieldName) {
 
   /**
    * Is the specified field dynamic or not.
-   * @param fieldName
    * @return true if the specified field is dynamic
    */
   public boolean isDynamicField(String fieldName) {
@@ -1047,7 +1045,6 @@ private FieldType dynFieldType(String fieldName) {
 
   /**
    * Get all copy fields, both the static and the dynamic ones.
-   * @param destField
    * @return Array of fields copied into this field
    */
 
@@ -1070,7 +1067,6 @@ private FieldType dynFieldType(String fieldName) {
   /**
    * Get all copy fields for a specified source field, both static
    * and dynamic ones.
-   * @param sourceField
    * @return List of CopyFields to copy to.
    * @since solr 1.4
    */
@@ -1103,7 +1099,6 @@ public boolean isCopyFieldTarget( SchemaField f )
 
   /**
    * Is the given field name a wildcard?  I.e. does it begin or end with *?
-   * @param name
    * @return true/false
    */
   private static boolean isWildCard(String name) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java
index 41fcd137..ae7234ee 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java
@@ -123,7 +123,7 @@ public void write(TextResponseWriter writer, String name, StorableField f)
    * class.
    * @param f field to convert
    * @return string that is compatible with the serialization format
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public String toFormattedString(Field f) throws IOException {
     return parser.toFormattedString(f);
@@ -155,7 +155,7 @@ public String toFormattedString(Field f) throws IOException {
      * Format a field so that the resulting String is valid for parsing with {@link #parse(Reader, AttributeSource)}.
      * @param f field instance
      * @return formatted string
-     * @throws IOException
+     * @throws IOException If there is a low-level I/O error.
      */
     public String toFormattedString(Field f) throws IOException;
   }
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
index c2ecc85e..12692dfa 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
@@ -413,9 +413,7 @@ public Query parse() throws ParseException {
   }
 
   /**
-   * Extracts all the alised fields from the requests and adds them to up
-   * @param up
-   * @param tiebreaker
+   * Extracts all the aliased fields from the requests and adds them to up
    */
   private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {
     Iterator<String> it = solrParams.getParameterNamesIterator();
@@ -953,7 +951,6 @@ public void addAlias(String field, float tiebreaker,
     /**
      * Returns the aliases found for a field.
      * Returns null if there are no aliases for the field
-     * @param field
      * @return Alias
      */
     public Alias getAlias(String field) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/FunctionQParser.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/FunctionQParser.java
index cf6443a6..0f0adc03 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/FunctionQParser.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/FunctionQParser.java
@@ -106,7 +106,6 @@ public Query parse() throws ParseException {
    * Are there more arguments in the argument list being parsed?
    * 
    * @return whether more args exist
-   * @throws ParseException
    */
   public boolean hasMoreArguments() throws ParseException {
     int ch = sp.peek();
@@ -114,10 +113,8 @@ public boolean hasMoreArguments() throws ParseException {
     return (! (ch == 0 || ch == ')') );
   }
   
-  /**
+  /*
    * TODO: Doc
-   * 
-   * @throws ParseException
    */
   public String parseId() throws ParseException {
     String value = parseArg();
@@ -129,7 +126,6 @@ public String parseId() throws ParseException {
    * Parse a float.
    * 
    * @return Float
-   * @throws ParseException
    */
   public Float parseFloat() throws ParseException {
     String str = parseArg();
@@ -141,7 +137,6 @@ public Float parseFloat() throws ParseException {
   /**
    * Parse a Double
    * @return double
-   * @throws ParseException
    */
   public double parseDouble() throws ParseException {
     String str = parseArg();
@@ -153,7 +148,6 @@ public double parseDouble() throws ParseException {
   /**
    * Parse an integer
    * @return An int
-   * @throws ParseException
    */
   public int parseInt() throws ParseException {
     String str = parseArg();
@@ -214,7 +208,6 @@ public String parseArg() throws ParseException {
    * to a ValueSource.
    * 
    * @return List&lt;ValueSource&gt;
-   * @throws ParseException
    */
   public List<ValueSource> parseValueSourceList() throws ParseException {
     List<ValueSource> sources = new ArrayList<ValueSource>(3);
@@ -226,18 +219,14 @@ public String parseArg() throws ParseException {
 
   /**
    * Parse an individual ValueSource.
-   * 
-   * @throws ParseException
    */
   public ValueSource parseValueSource() throws ParseException {
     /* consume the delimiter afterward for an external call to parseValueSource */
     return parseValueSource(true);
   }
   
-  /**
+  /*
    * TODO: Doc
-   * 
-   * @throws ParseException
    */
   public Query parseNestedQuery() throws ParseException {
     Query nestedQuery;
@@ -286,7 +275,6 @@ public Query parseNestedQuery() throws ParseException {
    * Parse an individual value source.
    * 
    * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  
-   * @throws ParseException
    */
   protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {
     ValueSource valueSource;
@@ -390,7 +378,6 @@ protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseE
    * Only consumes if more arguments should exist (no ending parens or end of string).
    * 
    * @return whether a delimiter was consumed
-   * @throws ParseException
    */
   protected boolean consumeArgumentDelimiter() throws ParseException {
     /* if a list of args is ending, don't expect the comma */
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/Grouping.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/Grouping.java
index c735dad3..23599e3b 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/Grouping.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/Grouping.java
@@ -97,9 +97,6 @@
   public DocList mainResult;  // output if one of the grouping commands should be used as the main result.
 
   /**
-   * @param searcher
-   * @param qr
-   * @param cmd
    * @param cacheSecondPassSearch    Whether to cache the documents and scores from the first pass search for the second
    *                                 pass search.
    * @param maxDocsPercentageToCache The maximum number of documents in a percentage relative from maxdoc
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/QParser.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/QParser.java
index 2eb3fe7c..71f375a0 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/QParser.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/QParser.java
@@ -137,8 +137,6 @@ public void setString(String s) {
   /**
    * Returns the resulting query from this QParser, calling parse() only the
    * first time and caching the Query result.
-   *
-   * @throws ParseException
    */
   public Query getQuery() throws ParseException {
     if (query==null) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index c2d1445d..9fc41195 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -585,7 +585,6 @@ public Sort weightSort(Sort sort) throws IOException {
    * Returns -1 if no document was found.
    * This method is primarily intended for clients that want to fetch
    * documents using a unique identifier."
-   * @param t
    * @return the first document number containing the term
    */
   public int getFirstMatch(Term t) throws IOException {
@@ -1032,7 +1031,6 @@ protected DocSet getDocSetNC(Query query, DocSet filter) throws IOException {
    * If the answer was not cached, it may have been inserted into the cache as a result of this call.
    * <p>
    *
-   * @param query
    * @param filter may be null
    * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.
    */
@@ -1077,13 +1075,12 @@ public DocSet getDocSet(Query query, DocSet filter) throws IOException {
    * <p>
    * FUTURE: The returned DocList may be retrieved from a cache.
    *
-   * @param query
    * @param filter   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1107,13 +1104,12 @@ public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int
    * <p>
    * FUTURE: The returned DocList may be retrieved from a cache.
    *
-   * @param query
    * @param filterList may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1554,13 +1550,12 @@ public boolean acceptsDocsOutOfOrder() {
    * and sorted by <code>sort</code>.
    * FUTURE: The returned DocList may be retrieved from a cache.
    *
-   * @param query
    * @param filter   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocList getDocList(Query query, DocSet filter, Sort lsort, int offset, int len) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1586,13 +1581,12 @@ public DocList getDocList(Query query, DocSet filter, Sort lsort, int offset, in
    * <p>
    * The DocList and DocSet returned should <b>not</b> be modified.
    *
-   * @param query
    * @param filter   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1619,14 +1613,13 @@ public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int
    * <p>
    * The DocList and DocSet returned should <b>not</b> be modified.
    *
-   * @param query
    * @param filter   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @param flags    user supplied flags for the result set
    * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len, int flags) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1657,13 +1650,12 @@ public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int
    * <p>
    * The DocList and DocSet returned should <b>not</b> be modified.
    *
-   * @param query
    * @param filterList   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocListAndSet getDocListAndSet(Query query, List<Query> filterList, Sort lsort, int offset, int len) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1692,14 +1684,13 @@ public DocListAndSet getDocListAndSet(Query query, List<Query> filterList, Sort
    * <p>
    * The DocList and DocSet returned should <b>not</b> be modified.
    *
-   * @param query
    * @param filterList   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @param flags    user supplied flags for the result set
    * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocListAndSet getDocListAndSet(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1722,13 +1713,12 @@ public DocListAndSet getDocListAndSet(Query query, List<Query> filterList, Sort
    * <p>
    * FUTURE: The returned DocList may be retrieved from a cache.
    *
-   * @param query
    * @param filter   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocListAndSet getDocListAndSet(Query query, DocSet filter, Sort lsort, int offset, int len) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1755,14 +1745,13 @@ public DocListAndSet getDocListAndSet(Query query, DocSet filter, Sort lsort, in
    * <p>
    * The DocList and DocSet returned should <b>not</b> be modified.
    *
-   * @param query
    * @param filter   may be null
    * @param lsort    criteria by which to sort (if null, query relevance is used)
    * @param offset   offset into the list of documents to return
    * @param len      maximum number of documents to return
    * @param flags    user supplied flags for the result set
    * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public DocListAndSet getDocListAndSet(Query query, DocSet filter, Sort lsort, int offset, int len, int flags) throws IOException {
     QueryCommand qc = new QueryCommand();
@@ -1826,10 +1815,8 @@ protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOExceptio
    * <p>
    * This method is cache-aware and may check as well as modify the cache.
    *
-   * @param a
-   * @param b
-   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.
-   * @throws IOException
+   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.
+   * @throws IOException If there is a low-level I/O error.
    */
   public int numDocs(Query a, DocSet b) throws IOException {
     // Negative query if absolute value different from original
@@ -1860,10 +1847,8 @@ public int numDocs(DocSet a, DocsEnumState deState) throws IOException {
    * <p>
    * This method is cache-aware and may check as well as modify the cache.
    *
-   * @param a
-   * @param b
-   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.
-   * @throws IOException
+   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.
+   * @throws IOException If there is a low-level I/O error.
    */
   public int numDocs(Query a, Query b) throws IOException {
     Query absA = QueryUtils.getAbs(a);
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
index 68e7a882..c1374e9e 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
@@ -60,9 +60,6 @@ public void init(NamedList args) {}
 
   /**
    * Parse the user input into a ValueSource.
-   *
-   * @param fp
-   * @throws ParseException
    */
   public abstract ValueSource parse(FunctionQParser fp) throws ParseException;
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
index c5013d36..7484a2a6 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
@@ -66,8 +66,6 @@ protected String name() {
 
   /**
    * @param doc  The doc to score
-   * @param p1DV
-   * @param p2DV
    * @return The haversine distance formula
    */
   protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
index ef5dc407..f0bd4903 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
@@ -35,11 +35,6 @@
   protected ValueSource str1, str2;
   protected StringDistance dist;
 
-  /**
-   * @param str1
-   * @param str2
-   * @param measure
-   */
   public StringDistanceFunction(ValueSource str1, ValueSource str2, StringDistance measure) {
     this.str1 = str1;
     this.str2 = str2;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java
index 26436824..1e6b6b85 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil.java
@@ -91,7 +91,6 @@ public String calcEtag(final long currentIndexVersion) {
   /**
    * Calculates a tag for the ETag header.
    *
-   * @param solrReq
    * @return a tag
    */
   public static String calcEtag(final SolrQueryRequest solrReq) {
@@ -139,7 +138,6 @@ public static boolean isMatchingEtag(final List<String> headerList,
   /**
    * Calculate the appropriate last-modified time for Solr relative the current request.
    * 
-   * @param solrReq
    * @return the timestamp to use as a last modified time.
    */
   public static long calcLastModified(final SolrQueryRequest solrReq) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
index eac1af9e..238673e7 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
@@ -224,7 +224,7 @@ public void reload(SolrCore core, SolrIndexSearcher searcher) throws IOException
   /**
    * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.
    *
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   protected void initIndex() throws IOException {
     if (indexDir != null) {
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java
index 54f5780f..c56d427c 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java
@@ -63,8 +63,6 @@ private PossibilityIterator() {
    * We assume here that the passed-in inner LinkedHashMaps are already sorted
    * in order of "Best Possible Correction".
    * </p>
-   * 
-   * @param suggestions
    */
   public PossibilityIterator(
       Map<Token,LinkedHashMap<String,Integer>> suggestions,
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java
index 03ca029c..1cd265f8 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java
@@ -81,8 +81,7 @@ public void init(NamedList args) {
   }
 
   /**
-   * @param original
-   * @return The Collection of {@link org.apache.lucene.analysis.Token}s for
+   * Returns the Collection of {@link org.apache.lucene.analysis.Token}s for
    *         the query. Offsets on the Token should correspond to the correct
    *         offset in the origQuery
    */
@@ -90,8 +89,6 @@ public void init(NamedList args) {
 
   /**
    * Set the analyzer to use. Must be set before any calls to convert.
-   * 
-   * @param analyzer
    */
   public void setAnalyzer(Analyzer analyzer) {
     this.analyzer = analyzer;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
index b369dedc..baf03a3f 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
@@ -78,11 +78,6 @@ public String init(NamedList config, SolrCore core) {
   }
   /**
    * Integrate spelling suggestions from the various shards in a distributed environment.
-   * 
-   * @param mergeData
-   * @param numSug
-   * @param count
-   * @param extendedResults
    */
   public SpellingResult mergeSuggestions(SpellCheckMergeData mergeData, int numSug, int count, boolean extendedResults) {
     float min = 0.5f;
@@ -160,7 +155,7 @@ public String getDictionaryName() {
   /**
    * Reloads the index.  Useful if an external process is responsible for building the spell checker.
    *
-   * @throws java.io.IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void reload(SolrCore core, SolrIndexSearcher searcher) throws IOException;
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/PeerSync.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/PeerSync.java
index d317f26a..4dd040fa 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/PeerSync.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/PeerSync.java
@@ -131,12 +131,6 @@ public PeerSync(SolrCore core, List<String> replicas, int nUpdates) {
     this(core, replicas, nUpdates, false);
   }
   
-  /**
-   *
-   * @param core
-   * @param replicas
-   * @param nUpdates
-   */
   public PeerSync(SolrCore core, List<String> replicas, int nUpdates, boolean cantReachIsSuccess) {
     this.replicas = replicas;
     this.nUpdates = nUpdates;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/SolrCoreState.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/SolrCoreState.java
index 398a407b..82ba3cd1 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/SolrCoreState.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/SolrCoreState.java
@@ -41,9 +41,8 @@ public Object getUpdateLock() {
    * Force the creation of a new IndexWriter using the settings from the given
    * SolrCore.
    * 
-   * @param core
    * @param rollback close IndexWriter if false, else rollback
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void newIndexWriter(SolrCore core, boolean rollback) throws IOException;
   
@@ -51,7 +50,7 @@ public Object getUpdateLock() {
    * Get the current IndexWriter. If a new IndexWriter must be created, use the
    * settings from the given {@link SolrCore}.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract RefCounted<IndexWriter> getIndexWriter(SolrCore core) throws IOException;
   
@@ -60,7 +59,7 @@ public Object getUpdateLock() {
    * references hits 0, the state will close.  If an optional closer is
    * passed, that will be used to close the writer.
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void decref(IndexWriterCloser closer) throws IOException;
   
@@ -73,8 +72,7 @@ public Object getUpdateLock() {
    * Rollback the current IndexWriter. When creating the new IndexWriter use the
    * settings from the given {@link SolrCore}.
    * 
-   * @param core
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void rollbackIndexWriter(SolrCore core) throws IOException;
   
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/TransactionLog.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/TransactionLog.java
index 39ef39d6..8d5f0e7d 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/TransactionLog.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/TransactionLog.java
@@ -585,7 +585,7 @@ public LogReader(long startingPos) {
     /** Returns the next object from the log, or null if none available.
      *
      * @return The log record, or null if EOF
-     * @throws IOException
+     * @throws IOException If there is a low-level I/O error.
      */
     public Object next() throws IOException, InterruptedException {
       long pos = fis.position();
@@ -674,7 +674,7 @@ public ReverseReader() throws IOException {
     /** Returns the next object from the log, or null if none available.
      *
      * @return The log record, or null if EOF
-     * @throws IOException
+     * @throws IOException If there is a low-level I/O error.
      */
     public Object next() throws IOException {
       if (prevPos <= 0) return null;
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/UpdateHandler.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
index 2f7dc1c4..f454929f 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
@@ -129,7 +129,7 @@ public UpdateHandler(SolrCore core)  {
    * 
    * @param rollback IndexWriter if true else close
    * 
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public abstract void newIndexWriter(boolean rollback) throws IOException;
 
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
index 33eaa0f3..48e79466 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
@@ -437,9 +437,8 @@ private void doLocalDelete(DeleteUpdateCommand cmd) throws IOException {
   }
 
   /**
-   * @param cmd
    * @return whether or not to drop this cmd
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   private boolean versionAdd(AddUpdateCommand cmd) throws IOException {
     BytesRef idBytes = cmd.getIndexedId();
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/SimplePostTool.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
index edf8f67e..82010d7b 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
@@ -585,7 +585,7 @@ protected int webCrawl(int level, OutputStream out) {
    * Reads an input stream into a byte array
    * @param is the input stream
    * @return the byte array
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   protected byte[] inputStreamToByteArray(InputStream is) throws IOException {
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
@@ -761,7 +761,6 @@ public void postFile(File file, OutputStream output, String type) {
    * @param url the URL
    * @param append the path to append
    * @return the final URL version 
-   * @throws MalformedURLException
    */
   protected static URL appendUrlPath(URL url, String append) throws MalformedURLException {
     return new URL(url.getProtocol() + "://" + url.getAuthority() + url.getPath() + append + (url.getQuery() != null ? "?"+url.getQuery() : ""));
diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider.java
index 686d2d3b..527d15e6 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider.java
@@ -64,7 +64,7 @@ private TransformerProvider() {
   }
   
   /** Return a new Transformer, possibly created from our cached Templates object  
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */ 
   public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {
     // For now, the Templates are blindly reloaded once cacheExpires is over.
diff --git a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
index 5cfa9bcd..5dd62ae0 100644
--- a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
+++ b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
@@ -33,8 +33,6 @@ public static void beforeClass() throws Exception {
 
   /**
    * Simple test to ensure that alternate IndexReaderFactory is being used.
-   * 
-   * @throws Exception
    */
   @Test
   public void testAltDirectoryUsed() throws Exception {
diff --git a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/IndexReaderFactoryTest.java b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/IndexReaderFactoryTest.java
index 122fbcd8..dde5d659 100644
--- a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/IndexReaderFactoryTest.java
+++ b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/IndexReaderFactoryTest.java
@@ -32,8 +32,6 @@ public String getSolrConfigFile() {
 
   /**
    * Simple test to ensure that alternate IndexReaderFactory is being used.
-   *
-   * @throws Exception
    */
   public void testAltReaderUsed() throws Exception {
     IndexReaderFactory readerFactory = h.getCore().getIndexReaderFactory();
diff --git a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
index 616b0f0b..dc8ba81e 100644
--- a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
+++ b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
@@ -138,7 +138,6 @@ public void testFieldType() throws Exception {
 
   /**
    * No indexDir location set
-   * @throws Exception
    */
   @Test
   public void testRAMDirectory() throws Exception {
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java
index 5f2a1c4a..4bda6bd7 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java
@@ -742,11 +742,8 @@ public String getQueryType() {
   }
 
   /**
-   * @see ModifiableSolrParams#set(String,String[])
-   * @param name
-   * @param values
-   *  
    * @return this
+   * @see ModifiableSolrParams#set(String,String[])
    */
   public SolrQuery setParam(String name, String ... values) {
     this.set(name, values);
@@ -754,10 +751,8 @@ public SolrQuery setParam(String name, String ... values) {
   }
 
   /**
-   * @see org.apache.solr.common.params.ModifiableSolrParams#set(String, boolean)
-   * @param name
-   * @param value
    * @return this
+   * @see org.apache.solr.common.params.ModifiableSolrParams#set(String, boolean)
    */
   public SolrQuery setParam(String name, boolean value) {
     this.set(name, value);
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
index e4fc893a..dcb0c838 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
@@ -48,8 +48,7 @@
   /**
    * Adds a collection of documents
    * @param docs  the collection of documents
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse add(Collection<SolrInputDocument> docs) throws SolrServerException, IOException {
     return add(docs, -1);
@@ -59,8 +58,7 @@ public UpdateResponse add(Collection<SolrInputDocument> docs) throws SolrServerE
    * Adds a collection of documents, specifying max time before they become committed
    * @param docs  the collection of documents
    * @param commitWithinMs  max time (in ms) before a commit will happen 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @since solr 3.5
    */
   public UpdateResponse add(Collection<SolrInputDocument> docs, int commitWithinMs) throws SolrServerException, IOException {
@@ -73,8 +71,7 @@ public UpdateResponse add(Collection<SolrInputDocument> docs, int commitWithinMs
   /**
    * Adds a collection of beans
    * @param beans  the collection of beans
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse addBeans(Collection<?> beans ) throws SolrServerException, IOException {
     return addBeans(beans, -1);
@@ -84,8 +81,7 @@ public UpdateResponse addBeans(Collection<?> beans ) throws SolrServerException,
    * Adds a collection of beans specifying max time before they become committed
    * @param beans  the collection of beans
    * @param commitWithinMs  max time (in ms) before a commit will happen 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @since solr 3.5
    */
   public UpdateResponse addBeans(Collection<?> beans, int commitWithinMs) throws SolrServerException, IOException {
@@ -100,8 +96,7 @@ public UpdateResponse addBeans(Collection<?> beans, int commitWithinMs) throws S
   /**
    * Adds a single document
    * @param doc  the input document
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse add(SolrInputDocument doc ) throws SolrServerException, IOException {
     return add(doc, -1);
@@ -111,8 +106,7 @@ public UpdateResponse add(SolrInputDocument doc ) throws SolrServerException, IO
    * Adds a single document specifying max time before it becomes committed
    * @param doc  the input document
    * @param commitWithinMs  max time (in ms) before a commit will happen 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @since solr 3.5
    */
   public UpdateResponse add(SolrInputDocument doc, int commitWithinMs) throws SolrServerException, IOException {
@@ -125,8 +119,7 @@ public UpdateResponse add(SolrInputDocument doc, int commitWithinMs) throws Solr
   /**
    * Adds a single bean
    * @param obj  the input bean
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse addBean(Object obj) throws IOException, SolrServerException {
     return addBean(obj, -1);
@@ -136,8 +129,7 @@ public UpdateResponse addBean(Object obj) throws IOException, SolrServerExceptio
    * Adds a single bean specifying max time before it becomes committed
    * @param obj  the input bean
    * @param commitWithinMs  max time (in ms) before a commit will happen 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @since solr 3.5
    */
   public UpdateResponse addBean(Object obj, int commitWithinMs) throws IOException, SolrServerException {
@@ -148,8 +140,7 @@ public UpdateResponse addBean(Object obj, int commitWithinMs) throws IOException
    * Performs an explicit commit, causing pending documents to be committed for indexing
    * <p>
    * waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access
-   * @throws SolrServerException
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse commit( ) throws SolrServerException, IOException {
     return commit(true, true);
@@ -161,8 +152,7 @@ public UpdateResponse commit( ) throws SolrServerException, IOException {
    * waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access
    * <p>
    * Note: In most cases it is not required to do explicit optimize
-   * @throws SolrServerException
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse optimize( ) throws SolrServerException, IOException {
     return optimize(true, true, 1);
@@ -172,8 +162,7 @@ public UpdateResponse optimize( ) throws SolrServerException, IOException {
    * Performs an explicit commit, causing pending documents to be committed for indexing
    * @param waitFlush  block until index changes are flushed to disk
    * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse commit( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException {
     return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher ).process( this );
@@ -184,8 +173,7 @@ public UpdateResponse commit( boolean waitFlush, boolean waitSearcher ) throws S
    * @param waitFlush  block until index changes are flushed to disk
    * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible
    * @param softCommit makes index changes visible while neither fsync-ing index files nor writing a new index descriptor
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {
     return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );
@@ -197,8 +185,7 @@ public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean s
    * Note: In most cases it is not required to do explicit optimize
    * @param waitFlush  block until index changes are flushed to disk
    * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible 
-   * @throws SolrServerException
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse optimize( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException {
     return optimize(waitFlush, waitSearcher, 1);
@@ -211,8 +198,7 @@ public UpdateResponse optimize( boolean waitFlush, boolean waitSearcher ) throws
    * @param waitFlush  block until index changes are flushed to disk
    * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible 
    * @param maxSegments  optimizes down to at most this number of segments
-   * @throws SolrServerException
-   * @throws IOException 
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments ) throws SolrServerException, IOException {
     return new UpdateRequest().setAction( UpdateRequest.ACTION.OPTIMIZE, waitFlush, waitSearcher, maxSegments ).process( this );
@@ -224,8 +210,7 @@ public UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxS
    * Note that this is not a true rollback as in databases. Content you have previously
    * added may have been committed due to autoCommit, buffer full, other client performing
    * a commit etc.
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse rollback() throws SolrServerException, IOException {
     return new UpdateRequest().rollback().process( this );
@@ -234,8 +219,7 @@ public UpdateResponse rollback() throws SolrServerException, IOException {
   /**
    * Deletes a single document by unique ID
    * @param id  the ID of the document to delete
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse deleteById(String id) throws SolrServerException, IOException {
     return deleteById(id, -1);
@@ -245,8 +229,7 @@ public UpdateResponse deleteById(String id) throws SolrServerException, IOExcept
    * Deletes a single document by unique ID, specifying max time before commit
    * @param id  the ID of the document to delete
    * @param commitWithinMs  max time (in ms) before a commit will happen 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @since 3.6
    */
   public UpdateResponse deleteById(String id, int commitWithinMs) throws SolrServerException, IOException {
@@ -259,8 +242,7 @@ public UpdateResponse deleteById(String id, int commitWithinMs) throws SolrServe
   /**
    * Deletes a list of documents by unique ID
    * @param ids  the list of document IDs to delete 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse deleteById(List<String> ids) throws SolrServerException, IOException {
     return deleteById(ids, -1);
@@ -270,8 +252,7 @@ public UpdateResponse deleteById(List<String> ids) throws SolrServerException, I
    * Deletes a list of documents by unique ID, specifying max time before commit
    * @param ids  the list of document IDs to delete 
    * @param commitWithinMs  max time (in ms) before a commit will happen 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @since 3.6
    */
   public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {
@@ -284,8 +265,7 @@ public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws So
   /**
    * Deletes documents from the index based on a query
    * @param query  the query expressing what documents to delete
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public UpdateResponse deleteByQuery(String query) throws SolrServerException, IOException {
     return deleteByQuery(query, -1);
@@ -295,8 +275,7 @@ public UpdateResponse deleteByQuery(String query) throws SolrServerException, IO
    * Deletes documents from the index based on a query, specifying max time before commit
    * @param query  the query expressing what documents to delete
    * @param commitWithinMs  max time (in ms) before a commit will happen 
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * @since 3.6
    */
   public UpdateResponse deleteByQuery(String query, int commitWithinMs) throws SolrServerException, IOException {
@@ -308,8 +287,7 @@ public UpdateResponse deleteByQuery(String query, int commitWithinMs) throws Sol
 
   /**
    * Issues a ping request to check if the server is alive
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public SolrPingResponse ping() throws SolrServerException, IOException {
     return new SolrPing().process( this );
@@ -318,7 +296,6 @@ public SolrPingResponse ping() throws SolrServerException, IOException {
   /**
    * Performs a query to the Solr server
    * @param params  an object holding all key/value parameters to send along the request
-   * @throws SolrServerException
    */
   public QueryResponse query(SolrParams params) throws SolrServerException {
     return new QueryRequest( params ).process( this );
@@ -328,7 +305,6 @@ public QueryResponse query(SolrParams params) throws SolrServerException {
    * Performs a query to the Solr server
    * @param params  an object holding all key/value parameters to send along the request
    * @param method  specifies the HTTP method to use for the request, such as GET or POST
-   * @throws SolrServerException
    */
   public QueryResponse query(SolrParams params, METHOD method) throws SolrServerException {
     return new QueryRequest( params, method ).process( this );
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
index f02521b2..98b9de18 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
@@ -166,8 +166,7 @@ public HttpSolrServer(String baseURL, HttpClient client, ResponseParser parser)
    * @param request
    *          The {@link org.apache.solr.client.solrj.SolrRequest} to process
    * @return The {@link org.apache.solr.common.util.NamedList} result
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    * 
    * @see #request(org.apache.solr.client.solrj.SolrRequest,
    *      org.apache.solr.client.solrj.ResponseParser)
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
index bc124d9e..6b6b8cb4 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
@@ -230,8 +230,7 @@ protected HttpSolrServer makeServer(String server) throws MalformedURLException
    *
    * @return the result of the request
    *
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public Rsp request(Req req) throws SolrServerException, IOException {
     Rsp rsp = new Rsp();
@@ -419,8 +418,7 @@ public void shutdown() {
    *
    * @return response
    *
-   * @throws SolrServerException
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   @Override
   public NamedList<Object> request(final SolrRequest request)
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java
index a024e068..1cfdc6cf 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java
@@ -163,7 +163,6 @@ public static String toXML( SolrInputDocument doc )
   /**
    * Returns a formatter that can be use by the current thread if needed to
    * convert Date objects to the Internal representation.
-   * @throws ParseException
    *
    * @deprecated Use {@link org.apache.solr.common.util.DateUtil#parseDate(String)}
    */
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java
index 8c541e44..ba20e0c4 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java
@@ -59,9 +59,6 @@
    * Use this constr when ClusterState is meant for publication.
    * 
    * hashCode and equals will only depend on liveNodes and not clusterStateVersion.
-   * 
-   * @param liveNodes
-   * @param collectionStates
    */
   public ClusterState(Set<String> liveNodes,
       Map<String, Map<String,Slice>> collectionStates) {
@@ -70,10 +67,6 @@ public ClusterState(Set<String> liveNodes,
   
   /**
    * Use this constr when ClusterState is meant for consumption.
-   * 
-   * @param zkClusterStateVersion
-   * @param liveNodes
-   * @param collectionStates
    */
   public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,
       Map<String, Map<String,Slice>> collectionStates) {
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner.java
index 8741b61e..92610b67 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner.java
@@ -89,9 +89,7 @@ public Range fullRange() {
   }
 
   /**
-   *
-   * @param partitions
-   * @return Range for each partition
+   * Returns the range for each partition
    */
   public List<Range> partitionRange(int partitions, int min, int max) {
     assert max >= min;
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
index c2227165..ed7dfbf3 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
@@ -75,10 +75,6 @@
   private volatile boolean isClosed = false;
   private ZkClientConnectionStrategy zkClientConnectionStrategy;
   
-  /**
-   * @param zkServerAddress
-   * @param zkClientTimeout
-   */
   public SolrZkClient(String zkServerAddress, int zkClientTimeout) {
     this(zkServerAddress, zkClientTimeout, new DefaultConnectionStrategy(), null);
   }
@@ -87,24 +83,11 @@ public SolrZkClient(String zkServerAddress, int zkClientTimeout, int zkClientCon
     this(zkServerAddress, zkClientTimeout, new DefaultConnectionStrategy(), onReonnect, zkClientConnectTimeout);
   }
 
-  /**
-   * @param zkServerAddress
-   * @param zkClientTimeout
-   * @param strat
-   * @param onReconnect
-   */
   public SolrZkClient(String zkServerAddress, int zkClientTimeout,
       ZkClientConnectionStrategy strat, final OnReconnect onReconnect) {
     this(zkServerAddress, zkClientTimeout, strat, onReconnect, DEFAULT_CLIENT_CONNECT_TIMEOUT);
   }
 
-  /**
-   * @param zkServerAddress
-   * @param zkClientTimeout
-   * @param strat
-   * @param onReconnect
-   * @param clientConnectTimeout
-   */
   public SolrZkClient(String zkServerAddress, int zkClientTimeout,
       ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {
     this.zkClientConnectionStrategy = strat;
@@ -146,19 +129,12 @@ public ZkClientConnectionStrategy getZkClientConnectionStrategy() {
   }
 
   /**
-   * @return true if client is connected
+   * Returns true if client is connected
    */
   public boolean isConnected() {
     return keeper != null && keeper.getState() == ZooKeeper.States.CONNECTED;
   }
   
-  /**
-   * @param path
-   * @param version
-   * @param retryOnConnLoss 
-   * @throws InterruptedException
-   * @throws KeeperException
-   */
   public void delete(final String path, final int version, boolean retryOnConnLoss)
       throws InterruptedException, KeeperException {
     if (retryOnConnLoss) {
@@ -185,7 +161,6 @@ public Stat execute() throws KeeperException, InterruptedException {
    *
    * @param path the node path
    * @param watcher explicit watcher
-   * @param retryOnConnLoss 
    * @return the stat of the node of the given path; return null if no such a
    *         node exists.
    * @throws KeeperException If the server signals an error
@@ -207,11 +182,7 @@ public Stat execute() throws KeeperException, InterruptedException {
   }
   
   /**
-   * @param path
-   * @return true if path exists
-   * @param retryOnConnLoss  
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns true if path exists
    */
   public Boolean exists(final String path, boolean retryOnConnLoss)
       throws KeeperException, InterruptedException {
@@ -228,14 +199,7 @@ public Boolean execute() throws KeeperException, InterruptedException {
   }
 
   /**
-   * @param path
-   * @param data
-   * @param acl
-   * @param createMode
-   * @param retryOnConnLoss 
-   * @return path of created node
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns path of created node
    */
   public String create(final String path, final byte data[], final List<ACL> acl,
       final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException, InterruptedException {
@@ -252,12 +216,7 @@ public String execute() throws KeeperException, InterruptedException {
   }
 
   /**
-   * @param path
-   * @param watcher
-   * @param retryOnConnLoss 
-   * @return children of the node at the path
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns children of the node at the path
    */
   public List<String> getChildren(final String path, final Watcher watcher, boolean retryOnConnLoss)
       throws KeeperException, InterruptedException {
@@ -274,13 +233,7 @@ public String execute() throws KeeperException, InterruptedException {
   }
 
   /**
-   * @param path
-   * @param watcher
-   * @param stat
-   * @param retryOnConnLoss 
-   * @return node's data
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns node's data
    */
   public byte[] getData(final String path, final Watcher watcher, final Stat stat, boolean retryOnConnLoss)
       throws KeeperException, InterruptedException {
@@ -297,13 +250,7 @@ public String execute() throws KeeperException, InterruptedException {
   }
 
   /**
-   * @param path
-   * @param data
-   * @param version
-   * @param retryOnConnLoss 
-   * @return node's state
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns node's state
    */
   public Stat setData(final String path, final byte data[], final int version, boolean retryOnConnLoss)
       throws KeeperException, InterruptedException {
@@ -320,14 +267,7 @@ public Stat execute() throws KeeperException, InterruptedException {
   }
   
   /**
-   * 
-   * @param path
-   * @param data
-   * @param createMode
-   * @return path of created node
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
+   * Returns path of created node
    */
   public String create(final String path, final byte[] data,
       final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException,
@@ -350,11 +290,6 @@ public String execute() throws KeeperException, InterruptedException {
    * 
    * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,
    * group, node exist, each will be created.
-   * 
-   * @param path
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void makePath(String path, boolean retryOnConnLoss) throws KeeperException,
       InterruptedException {
@@ -385,11 +320,7 @@ public void makePath(String path, CreateMode createMode, boolean retryOnConnLoss
   /**
    * Creates the path in ZooKeeper, creating each node as necessary.
    * 
-   * @param path
    * @param data to set on the last zkNode
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void makePath(String path, byte[] data, boolean retryOnConnLoss) throws KeeperException,
       InterruptedException {
@@ -402,12 +333,7 @@ public void makePath(String path, byte[] data, boolean retryOnConnLoss) throws K
    * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,
    * group, node exist, each will be created.
    * 
-   * @param path
    * @param data to set on the last zkNode
-   * @param createMode
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void makePath(String path, byte[] data, CreateMode createMode, boolean retryOnConnLoss)
       throws KeeperException, InterruptedException {
@@ -420,13 +346,7 @@ public void makePath(String path, byte[] data, CreateMode createMode, boolean re
    * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,
    * group, node exist, each will be created.
    * 
-   * @param path
    * @param data to set on the last zkNode
-   * @param createMode
-   * @param watcher
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void makePath(String path, byte[] data, CreateMode createMode,
       Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {
@@ -443,15 +363,6 @@ public void makePath(String path, byte[] data, CreateMode createMode,
    * 
    * Note: retryOnConnLoss is only respected for the final node - nodes
    * before that are always retried on connection loss.
-   * 
-   * @param path
-   * @param data
-   * @param createMode
-   * @param watcher
-   * @param failOnExists
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void makePath(String path, byte[] data, CreateMode createMode,
       Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {
@@ -520,14 +431,6 @@ public Object execute() throws KeeperException, InterruptedException {
     }
   }
 
-  /**
-   * @param zkPath
-   * @param createMode
-   * @param watcher
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
-   */
   public void makePath(String zkPath, CreateMode createMode, Watcher watcher, boolean retryOnConnLoss)
       throws KeeperException, InterruptedException {
     makePath(zkPath, null, createMode, watcher, retryOnConnLoss);
@@ -535,12 +438,6 @@ public void makePath(String zkPath, CreateMode createMode, Watcher watcher, bool
 
   /**
    * Write data to ZooKeeper.
-   * 
-   * @param path
-   * @param data
-   * @param retryOnConnLoss
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void setData(String path, byte[] data, boolean retryOnConnLoss) throws KeeperException,
       InterruptedException {
@@ -552,10 +449,6 @@ public void setData(String path, byte[] data, boolean retryOnConnLoss) throws Ke
    * 
    * @param path path to upload file to e.g. /solr/conf/solrconfig.xml
    * @param file path to file to be uploaded
-   * @param retryOnConnLoss
-   * @throws IOException
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void setData(String path, File file, boolean retryOnConnLoss) throws IOException,
       KeeperException, InterruptedException {
@@ -569,11 +462,6 @@ public void setData(String path, File file, boolean retryOnConnLoss) throws IOEx
 
   /**
    * Fills string with printout of current ZooKeeper layout.
-   * 
-   * @param path
-   * @param indent
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void printLayout(String path, int indent, StringBuilder string)
       throws KeeperException, InterruptedException {
@@ -619,9 +507,6 @@ public void printLayout(String path, int indent, StringBuilder string)
 
   /**
    * Prints current ZooKeeper layout to stdout.
-   * 
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   public void printLayoutToStdOut() throws KeeperException,
       InterruptedException {
@@ -667,9 +552,6 @@ public boolean isClosed() {
 
   /**
    * Allows package private classes to update volatile ZooKeeper.
-   * 
-   * @param keeper
-   * @throws InterruptedException 
    */
   void updateKeeper(SolrZooKeeper keeper) throws InterruptedException {
    SolrZooKeeper oldKeeper = this.keeper;
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor.java
index ae903beb..377531bd 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor.java
@@ -53,10 +53,6 @@ public void setRetryDelay(long retryDelay) {
 
   /**
    * Perform the given operation, retrying if the connection fails
-   * 
-   * @param operation
-   * @throws KeeperException
-   * @throws InterruptedException
    */
   @SuppressWarnings("unchecked")
   public <T> T retryOperation(ZkOperation operation)
@@ -107,7 +103,6 @@ public void ensureExists(final String path, final byte[] data,
    * 
    * @param attemptCount
    *          the number of the attempts performed so far
-   * @throws InterruptedException 
    */
   protected void retryDelay(int attemptCount) throws InterruptedException {
     if (attemptCount > 0) {
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkOperation.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkOperation.java
index df2e97bc..c1529561 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkOperation.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/cloud/ZkOperation.java
@@ -32,8 +32,6 @@
      * to ZooKeeper closes during this operation
      *
      * @return the result of the operation or null
-     * @throws KeeperException
-     * @throws InterruptedException
      */
     public abstract Object execute() throws KeeperException, InterruptedException;
 }
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java
index 89c3fa6e..7627fd15 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java
@@ -102,7 +102,6 @@ public void write(byte arr[], int off, int len) throws IOException {
 
   /** reserve at least len bytes at the end of the buffer.
    * Invalid if len > buffer.length
-   * @param len
    */
   public void reserve(int len) throws IOException {
     if (len > (buf.length - pos))
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java
index d22b0b3c..b8a8c698 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java
@@ -619,10 +619,7 @@ public int readSize(FastInputStream in) throws IOException {
    * collection/array/map In most of the cases the length can be represented in one byte (length < 127) so it saves 3
    * bytes/object
    *
-   * @param i
-   * @param out
-   *
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static void writeVInt(int i, FastOutputStream out) throws IOException {
     while ((i & ~0x7F) != 0) {
@@ -633,13 +630,9 @@ public static void writeVInt(int i, FastOutputStream out) throws IOException {
   }
 
   /**
-   * The counterpart for the above
-   *
-   * @param in
-   *
-   * @return the int value
+   * The counterpart for {@link #writeVInt(int, FastOutputStream)}
    *
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static int readVInt(FastInputStream in) throws IOException {
     byte b = in.readByte();
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
index bfcfa22e..f9705d2e 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
@@ -97,7 +97,6 @@ public NamedList(List<Object> nameValuePairs) {
    * indexed elements (0,2,4. ..etc) are Strings and odd elements (1,3,5,) are of
    * the type "T".
    *
-   * @param nameValuePairs
    * @return Modified List as per the above description
    * @deprecated This a temporary placeholder method until the guts of the class
    * are actually replaced by List&lt;String, ?&gt;.
@@ -273,8 +272,6 @@ public String toString() {
    *
    * Helper class implementing Map.Entry&lt;String, T&gt; to store the key-value
    * relationship in NamedList (the keys of which are String-s) 
-   * 
-   * @param <T>
    */
   public static final class NamedListEntry<T> implements Map.Entry<String, T> {
 
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/StrUtils.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/StrUtils.java
index 9ee7df57..16f9cd5d 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/StrUtils.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/StrUtils.java
@@ -241,8 +241,6 @@ public static boolean parseBool(String s) {
 
   /**
    * {@link NullPointerException} and {@link SolrException} free version of {@link #parseBool(String)}
-   * @param s
-   * @param def
    * @return parsed boolean value (or def, if s is null or invalid)
    */
   public static boolean parseBool(String s, boolean def) {
diff --git a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/XML.java b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/XML.java
index c62ab3b7..50a6da26 100644
--- a/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/XML.java
+++ b/lucene/dev/trunk/solr/solrj/src/java/org/apache/solr/common/util/XML.java
@@ -71,9 +71,7 @@
 
 /*********
  *
- * @param str
- * @param out
- * @throws IOException
+ * @throws IOException If there is a low-level I/O error.
  */
   public static void escapeCharData(String str, Writer out) throws IOException {
     escape(str, out, chardata_escapes);
diff --git a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
index d5f8c377..7357ad81 100644
--- a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -719,8 +719,6 @@ public void testDistribSearch() throws Exception {
    * causing a spelling index not to get built:  both control & shard data would have no results
    * but because they match the test would pass.  This method gives us a chance to ensure something
    * exists in the control data.
-   * 
-   * @throws Exception
    */
   public void validateControlData(QueryResponse control) throws Exception {
     /* no-op */
diff --git a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index 82d25756..8007a567 100644
--- a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -280,12 +280,10 @@ protected void createServers(int numServers) throws Exception {
   
 
   /**
-   * @param numJettys
    * @param checkCreatedVsState
    *          if true, make sure the number created (numJettys) matches the
    *          number in the cluster state - if you add more jetties this may not
    *          be the case
-   * @throws Exception
    */
   protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {
     List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();
diff --git a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.java b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.java
index 1845659b..5986c5f1 100644
--- a/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.java
+++ b/lucene/dev/trunk/solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.java
@@ -83,7 +83,7 @@ protected void initializeAndRun(String[] args) throws ConfigException,
     /**
      * Run from a ServerConfig.
      * @param config ServerConfig to use.
-     * @throws IOException
+     * @throws IOException If there is a low-level I/O error.
      */
     public void runFromConfig(ServerConfig config) throws IOException {
       try {
@@ -110,7 +110,7 @@ public void runFromConfig(ServerConfig config) throws IOException {
 
     /**
      * Shutdown the serving instance
-     * @throws IOException 
+     * @throws IOException If there is a low-level I/O error.
      */
     protected void shutdown() throws IOException {
       zooKeeperServer.shutdown();
@@ -287,7 +287,7 @@ public static boolean waitForServerDown(String hp, long timeout) {
    * @param host the destination host
    * @param port the destination port
    * @param cmd the 4letterword
-   * @throws IOException
+   * @throws IOException If there is a low-level I/O error.
    */
   public static String send4LetterWord(String host, int port, String cmd)
       throws IOException
