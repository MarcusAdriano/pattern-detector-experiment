diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
index 5812ca66..3f66be04 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
@@ -21,12 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.client.am;
 
-import java.sql.SQLException;
-
 import java.io.IOException;
 
-import org.apache.derby.shared.common.error.ExceptionUtil;
-import org.apache.derby.shared.common.reference.SQLState;
 import org.apache.derby.shared.common.sanity.SanityManager;
 
 /**
@@ -188,38 +184,6 @@ public int read(byte[] b, int off, int len) throws IOException
         }
     }
 
-    /**
-     * Closes this input stream and releases any system resources associated
-     * with the stream.  This will release the underlying Blob value. 
-     *  
-     * @throws java.io.IOException
-     */
-    public void close() throws IOException {
-        try {
-            if (blob != null  && freeBlobOnClose) {
-                blob.free();
-            }
-        } catch (SQLException ex) {
-            if (ex.getSQLState().compareTo
-                    (ExceptionUtil.getSQLStateFromIdentifier
-                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
-                // Blob has already been freed, probably because of autocommit
-                return;  // Ignore error
-            }
-
-            IOException ioEx = new IOException();
-            ioEx.initCause(ex);
-            throw ioEx;
-        }
-    }
-
-    /**
-     * Tell stream to free the underlying Blob when it is closed.
-     */
-    public void setFreeBlobOnClose() {
-        freeBlobOnClose = true;
-    }
-    
     /**
      * Connection used to read Blob from server.
      */
@@ -241,11 +205,4 @@ public void setFreeBlobOnClose() {
      * maxPos starts counting from 1.
      */
     private final long maxPos;
- 
-    /**
-     * If true, the underlying Blob will be freed when the underlying stream is
-     * closed.  Used to implement correct behavior for streams obtained from
-     * result sets.
-     */
-    private boolean freeBlobOnClose = false;
 }
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
index b0f073b5..a6b1ec07 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
@@ -63,13 +63,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private long currentPos;
     
-    /**
-     * If true, the underlying Blob will be freed when the underlying stream is
-     * closed.  Used to implement correct behavior for streams obtained from
-     * result sets.
-     */
-    private boolean freeClobOnClose = false;
-
     /**
      * Create an <code>InputStream</code> for reading the
      * <code>Clob</code> value represented by the given locator based
@@ -167,39 +160,6 @@ public int read(byte[] b, int off, int len) throws IOException {
         }
     }
 
-    /**
-     * Closes this input stream and releases any system resources associated
-     * with the stream.  This will release the underlying Clob value. 
-     *  
-     * @throws java.io.IOException
-     */
-    public void close() throws IOException {
-        try {
-            if (clob != null  && freeClobOnClose) {
-                clob.free();
-            }
-        } catch (SQLException ex) {
-            if (ex.getSQLState().compareTo
-                    (ExceptionUtil.getSQLStateFromIdentifier
-                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
-                // Clob has already been freed, probably because of autocommit
-                return;  // Ignore error
-            }
-
-            IOException ioEx = new IOException();
-            ioEx.initCause(ex);
-            throw ioEx;
-        }
-    }
-      
-    /**
-     * Tell stream to free the underlying Clob when it is closed.
-     */
-    public void setFreeClobOnClose() {
-        freeClobOnClose = true;
-    }
-    
-
     /**
      * Returns a <code>Byte</code> array from the
      * <code>String</code> passed as Input.
diff --git a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java
index 80f03e1d..1719be2d 100644
--- a/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java
+++ b/db/derby/code/branches/10.4/java/client/org/apache/derby/client/am/ClobLocatorReader.java
@@ -69,13 +69,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private boolean isClosed = false;
     
-    /**
-     * If true, the underlying Blob will be freed when the underlying stream is
-     * closed.  Used to implement correct behavior for streams obtained from
-     * result sets.
-     */
-    private boolean freeClobOnClose = false;
-
     /**
      * Create an <code>Reader</code> for reading the
      * <code>Clob</code> value represented by the given locator based
@@ -175,30 +168,6 @@ public void close() throws IOException {
             return;
         }
         isClosed = true;
-        
-        try {
-            if (clob != null && freeClobOnClose) {
-                clob.free();
-            }
-        } catch (SQLException ex) {
-            if (ex.getSQLState().compareTo
-                    (ExceptionUtil.getSQLStateFromIdentifier
-                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
-                // Clob has already been freed, probably because of autocommit
-                return;  // Ignore error
-            }
-
-            IOException ioEx = new IOException();
-            ioEx.initCause(ex);
-            throw ioEx;
-        }
-    }
-
-    /**
-     * Tell stream to free the underlying Clob when it is closed.
-     */
-    public void setFreeClobOnClose() {
-        freeClobOnClose = true;
     }
 
     /**
