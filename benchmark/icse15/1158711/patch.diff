diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java b/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java
index 790931a2..ed34d2eb 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java
@@ -46,17 +46,17 @@ public void test() throws Exception {
     IndexWriter iw = new IndexWriter(fsDir, conf);
 
     for (int x=0; x < 100; x++) {
-      Document doc = TestIndexWriterReader.createDocument(x, "index", 5);
+      Document doc = DocHelper.createDocument(x, "index", 5);
       iw.addDocument(doc);
     }
     iw.commit();
     for (int x=100; x < 150; x++) {
-      Document doc = TestIndexWriterReader.createDocument(x, "index2", 5);
+      Document doc = DocHelper.createDocument(x, "index2", 5);
       iw.addDocument(doc);
     }
     iw.commit();
     for (int x=150; x < 200; x++) {
-      Document doc = TestIndexWriterReader.createDocument(x, "index3", 5);
+      Document doc = DocHelper.createDocument(x, "index3", 5);
       iw.addDocument(doc);
     }
     iw.commit();
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
index 7c3323a6..84ba996e 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
@@ -66,7 +66,7 @@ public void testAddCloseOpen() throws IOException {
     for (int i = 0; i < 97 ; i++) {
       IndexReader reader = writer.getReader();
       if (i == 0) {
-        writer.addDocument(createDocument(i, "x", 1 + random.nextInt(5)));
+        writer.addDocument(DocHelper.createDocument(i, "x", 1 + random.nextInt(5)));
       } else {
         int previous = random.nextInt(i);
         // a check if the reader is current here could fail since there might be
@@ -75,10 +75,10 @@ public void testAddCloseOpen() throws IOException {
         case 0:
         case 1:
         case 2:
-          writer.addDocument(createDocument(i, "x", 1 + random.nextInt(5)));
+          writer.addDocument(DocHelper.createDocument(i, "x", 1 + random.nextInt(5)));
           break;
         case 3:
-          writer.updateDocument(new Term("id", "" + previous), createDocument(
+          writer.updateDocument(new Term("id", "" + previous), DocHelper.createDocument(
               previous, "x", 1 + random.nextInt(5)));
           break;
         case 4:
@@ -97,7 +97,7 @@ public void testAddCloseOpen() throws IOException {
     iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));
     writer = new IndexWriter(dir1, iwc);
     assertTrue(reader.isCurrent());
-    writer.addDocument(createDocument(1, "x", 1+random.nextInt(5)));
+    writer.addDocument(DocHelper.createDocument(1, "x", 1+random.nextInt(5)));
     assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one
     writer.close();
     assertFalse(reader.isCurrent()); // segments written
@@ -408,7 +408,7 @@ public AddDirectoriesThreads(int numDirs, IndexWriter mainWriter) throws Throwab
       addDir = newDirectory();
       IndexWriter writer = new IndexWriter(addDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));
       for (int i = 0; i < NUM_INIT_DOCS; i++) {
-        Document doc = createDocument(i, "addindex", 4);
+        Document doc = DocHelper.createDocument(i, "addindex", 4);
         writer.addDocument(doc);
       }
         
@@ -529,7 +529,7 @@ public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {
     assertEquals(r2.maxDoc(), 100);
     // add 100 documents
     for (int x = 10000; x < 10000 + 100; x++) {
-      Document d = createDocument(x, "index1", 5);
+      Document d = DocHelper.createDocument(x, "index1", 5);
       writer.addDocument(d);
     }
     writer.flush(false, true);
@@ -562,24 +562,6 @@ public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {
     dir1.close();
   }
 
-  
-  public static Document createDocument(int n, String indexName, int numFields) {
-    StringBuilder sb = new StringBuilder();
-    Document doc = new Document();
-    doc.add(new Field("id", Integer.toString(n), Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
-    doc.add(new Field("indexname", indexName, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
-    sb.append("a");
-    sb.append(n);
-    doc.add(new Field("field1", sb.toString(), Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
-    sb.append(" b");
-    sb.append(n);
-    for (int i = 1; i < numFields; i++) {
-      doc.add(new Field("field" + (i + 1), sb.toString(), Store.YES,
-                        Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
-    }
-    return doc;
-  }
-
   /*
    * Delete a document by term and return the doc id
    * 
@@ -595,7 +577,7 @@ public static void createIndex(Random random, Directory dir1, String indexName,
         TEST_VERSION_CURRENT, new MockAnalyzer(random))
         .setMergePolicy(new LogDocMergePolicy()));
     for (int i = 0; i < 100; i++) {
-      w.addDocument(createDocument(i, indexName, 4));
+      w.addDocument(DocHelper.createDocument(i, indexName, 4));
       if (multiSegment && (i % 10) == 0) {
       }
     }
@@ -608,7 +590,7 @@ public static void createIndex(Random random, Directory dir1, String indexName,
   public static void createIndexNoClose(boolean multiSegment, String indexName,
       IndexWriter w) throws IOException {
     for (int i = 0; i < 100; i++) {
-      w.addDocument(createDocument(i, indexName, 4));
+      w.addDocument(DocHelper.createDocument(i, indexName, 4));
     }
     if (!multiSegment) {
       w.optimize();
@@ -648,14 +630,14 @@ public void testMergeWarmer() throws Exception {
 
     int num = atLeast(100);
     for (int i = 0; i < num; i++) {
-      writer.addDocument(createDocument(i, "test", 4));
+      writer.addDocument(DocHelper.createDocument(i, "test", 4));
     }
     ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();
 
     assertTrue(warmer.warmCount > 0);
     final int count = warmer.warmCount;
 
-    writer.addDocument(createDocument(17, "test", 4));
+    writer.addDocument(DocHelper.createDocument(17, "test", 4));
     writer.optimize();
     assertTrue(warmer.warmCount > count);
     
@@ -681,7 +663,7 @@ public void testAfterCommit() throws Exception {
     assertEquals(100, r1.numDocs());
 
     for (int i = 0; i < 10; i++) {
-      writer.addDocument(createDocument(i, "test", 4));
+      writer.addDocument(DocHelper.createDocument(i, "test", 4));
     }
     ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();
 
@@ -847,7 +829,7 @@ public void run() {
             do {
               try {
                 for(int docUpto=0;docUpto<10;docUpto++) {
-                  writer.addDocument(createDocument(10*count+docUpto, "test", 4));
+                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, "test", 4));
                 }
                 count++;
                 final int limit = count*10;
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
index 93088462..0798b1a4 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
@@ -91,7 +91,7 @@ public void run() {
           //int n = random.nextInt(2);
           if (type == 0) {
             int i = seq.addAndGet(1);
-            Document doc = TestIndexWriterReader.createDocument(i, "index1", 10);
+            Document doc = DocHelper.createDocument(i, "index1", 10);
             writer.addDocument(doc);
             addCount++;
           } else if (type == 1) {
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java
index 767f19fb..57f41ce4 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java
@@ -45,14 +45,14 @@ public void testDeletes1() throws Exception {
     IndexWriter writer = new IndexWriter(dir, iwc);
     writer.setInfoStream(VERBOSE ? System.out : null);
     for (int x = 0; x < 5; x++) {
-      writer.addDocument(TestIndexWriterReader.createDocument(x, "1", 2));
+      writer.addDocument(DocHelper.createDocument(x, "1", 2));
       //System.out.println("numRamDocs(" + x + ")" + writer.numRamDocs());
     }
     //System.out.println("commit1");
     writer.commit();
     assertEquals(1, writer.segmentInfos.size());
     for (int x = 5; x < 10; x++) {
-      writer.addDocument(TestIndexWriterReader.createDocument(x, "2", 2));
+      writer.addDocument(DocHelper.createDocument(x, "2", 2));
       //System.out.println("numRamDocs(" + x + ")" + writer.numRamDocs());
     }
     //System.out.println("commit2");
@@ -60,7 +60,7 @@ public void testDeletes1() throws Exception {
     assertEquals(2, writer.segmentInfos.size());
 
     for (int x = 10; x < 15; x++) {
-      writer.addDocument(TestIndexWriterReader.createDocument(x, "3", 2));
+      writer.addDocument(DocHelper.createDocument(x, "3", 2));
       //System.out.println("numRamDocs(" + x + ")" + writer.numRamDocs());
     }
     
@@ -173,12 +173,12 @@ static boolean hasPendingDeletes(SegmentInfos infos) {
   **/
   void part2(IndexWriter writer, RangeMergePolicy fsmp) throws Exception {
     for (int x = 20; x < 25; x++) {
-      writer.addDocument(TestIndexWriterReader.createDocument(x, "5", 2));
+      writer.addDocument(DocHelper.createDocument(x, "5", 2));
       //System.out.println("numRamDocs(" + x + ")" + writer.numRamDocs());
     }
     writer.flush(false, false);
     for (int x = 25; x < 30; x++) {
-      writer.addDocument(TestIndexWriterReader.createDocument(x, "5", 2));
+      writer.addDocument(DocHelper.createDocument(x, "5", 2));
       //System.out.println("numRamDocs(" + x + ")" + writer.numRamDocs());
     }
     writer.flush(false, false);
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/DocHelper.java b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/DocHelper.java
index 11d39ec0..ab6e78f6 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/DocHelper.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/DocHelper.java
@@ -31,6 +31,9 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.search.Similarity;
+import org.apache.lucene.document.Field.Index;
+import org.apache.lucene.document.Field.Store;
+import org.apache.lucene.document.Field.TermVector;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
@@ -252,4 +255,21 @@ public static SegmentInfo writeDoc(Random random, Directory dir, Analyzer analyz
   public static int numFields(Document doc) {
     return doc.getFields().size();
   }
+  
+  public static Document createDocument(int n, String indexName, int numFields) {
+    StringBuilder sb = new StringBuilder();
+    Document doc = new Document();
+    doc.add(new Field("id", Integer.toString(n), Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+    doc.add(new Field("indexname", indexName, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+    sb.append("a");
+    sb.append(n);
+    doc.add(new Field("field1", sb.toString(), Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+    sb.append(" b");
+    sb.append(n);
+    for (int i = 1; i < numFields; i++) {
+      doc.add(new Field("field" + (i + 1), sb.toString(), Store.YES,
+                        Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+    }
+    return doc;
+  }
 }
