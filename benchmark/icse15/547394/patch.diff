diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
index 5247964f..2d921f4c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java
@@ -397,33 +397,37 @@ protected void finalize() throws Throwable {
         free();
     }
 
-    /**
-     * Invalidates all the variables and closes file handle if open.
-     * @throws IOexception
-     */
-    void free() throws IOException {
-        dataBytes = null;
-        if (tmpFile != null) {
-            tmpFile.close();
+    private void deleteFile (StorageFile file) throws IOException {
             try {
-                AccessController.doPrivileged (new PrivilegedExceptionAction() {
+            final StorageFile sf = file;
+            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                     public Object run() throws IOException {
-                        lobFile.delete();
+                    sf.delete();
                         return null;
                     }
                 });
-            }
-            catch (PrivilegedActionException pae) {
+        } catch (PrivilegedActionException pae) {
                 Exception e = pae.getException();
                 if (e instanceof IOException)
                     throw (IOException) e;
                 if (e instanceof RuntimeException)
                     throw (RuntimeException) e;
-                IOException ioe = new IOException (e.getMessage());
-                ioe.initCause (e);
+            IOException ioe = new IOException(e.getMessage());
+            ioe.initCause(e);
                 throw ioe;
             }
         }
+    /**
+     * Invalidates all the variables and closes file handle if open.
+     * @throws IOexception
+     */
+    void free() throws IOException {
+        dataBytes = null;
+        if (tmpFile != null) {
+            tmpFile.close();
+            deleteFile(lobFile);
+            tmpFile = null;
+        }
     }
     
     /**
@@ -470,6 +474,7 @@ synchronized long replaceBytes (byte [] buf, long stPos, long endPos)
             
             byte tmp [] = new byte [0];
             LOBFile oldFile = tmpFile;
+            StorageFile oldStoreFile = lobFile;
             init (tmp, 0);
             byte [] tmpByte = new byte [1024];
             long sz = stPos;
@@ -492,6 +497,8 @@ synchronized long replaceBytes (byte [] buf, long stPos, long endPos)
                         break;
                     tmpFile.write (tmpByte, 0, rdLen);
                 }while (true);
+                oldFile.close();
+                deleteFile(oldStoreFile);
             }            
         }
         updateCount++;
