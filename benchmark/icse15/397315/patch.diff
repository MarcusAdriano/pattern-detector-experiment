diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
index 6834f25a..7648f25b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
@@ -198,6 +198,7 @@ public static void main(String[] args)
             blobTest54(conn);
             blobTest6(conn);
             blobTest7(conn);
+            blobTest8Trigger(conn);
 			blobTest91(conn);
             blobTest92(conn);
             blobTest93(conn);
@@ -2751,6 +2752,7 @@ private static void prepareBlobTable(Connection conn)
             ps.setNull(3, Types.BIGINT);
             ps.executeUpdate();
 
+            ps.close();
             conn.commit();
 
             // set numRows
@@ -2763,6 +2765,9 @@ private static void prepareBlobTable(Connection conn)
             if (realNumRows != numRows)
                 System.out.println("FAIL. numRows is incorrect");
 
+            stmt.close();
+            conn.commit();
+
         }
 		catch (SQLException e) {
 			TestUtil.dumpSQLExceptions(e);
@@ -2895,6 +2900,32 @@ private static void blobTest0(Connection conn)
         {
 			stmt = conn.createStatement();
 			rs = stmt.executeQuery("select a,b,crc32 from testBlob");
+            testBlobContents(rs);        
+            stmt.close();
+            conn.commit();
+            System.out.println("blobTest0 finished");
+        }
+		catch (SQLException e) {
+			TestUtil.dumpSQLExceptions(e);
+		}
+		catch (Throwable e) {
+			System.out.println("FAIL -- unexpected exception:" + e.toString());
+			if (debug) e.printStackTrace();
+		}
+    }
+
+    /**
+     * Test the contents of the testBlob table or ResultSet
+     * with identical shape.
+     * @param rs
+     * @throws SQLException
+     * @throws IOException
+     */
+    private static void testBlobContents(ResultSet rs)
+    throws SQLException, IOException
+    {
+        int nullCount = 0;
+        int rowCount = 0;
 			byte[] buff = new byte[128];
 			// fetch row back, get the long varbinary column as a blob.
             Blob blob;
@@ -2908,9 +2939,12 @@ private static void blobTest0(Connection conn)
                 if (blob == null) {
                     if (!crc2Null) 
                         System.out.println("FAIL: NULL BLOB but non-NULL checksum");
+                nullCount++;
                     continue;
                 }
                 
+            rowCount++;
+            
                 long blobcrc32 = getStreamCheckSum(blob.getBinaryStream());
                 
                 if (blobcrc32 != crc32) {
@@ -2935,18 +2969,8 @@ private static void blobTest0(Connection conn)
 					System.out.println("test failed, blob.length() should be " +  columnSize
 					   + ", but it is " + blob.length() + ", i = " + i);
 			}
-            conn.commit();
-            System.out.println("blobTest0 finished");
-        }
-		catch (SQLException e) {
-			TestUtil.dumpSQLExceptions(e);
+        System.out.println("Row Count " + rowCount + " Null Row " + nullCount);
 		}
-		catch (Throwable e) {
-			System.out.println("FAIL -- unexpected exception:" + e.toString());
-			if (debug) e.printStackTrace();
-		}
-    }
-
 
     /*
     test getBytes
@@ -2997,6 +3021,8 @@ private static void blobTest2(Connection conn)
                         System.out.println(new String(res, "US-ASCII")); // ensure fixed string
                 }
             }
+            stmt.close();
+            conn.commit();
             System.out.println("blobTest2 finished");
         }
 		catch (SQLException e) {
@@ -3047,6 +3073,8 @@ private static void blobTest3(Connection conn)
                 blobclob4BLOB.printPosition(i,"I-am-hiding-here-at-position-5910",5911,blob, blobLength);
                 blobclob4BLOB.printPosition(i,"Position-9907",1,blob, blobLength);
             }
+            stmt.close();
+            conn.commit();
             System.out.println("blobTest3 finished");
         }
 		catch (SQLException e) {
@@ -3112,7 +3140,10 @@ private static void blobTest4(Connection conn)
 
                     printPositionBlob(i,searchStr,1,blob,j,searchBlob);
                 }
+                stmt2.close();
             }
+            stmt.close();
+            conn.commit();
             System.out.println("blobTest4 finished");
         }
 		catch (SQLException e) {
@@ -3124,6 +3155,47 @@ private static void blobTest4(Connection conn)
 		}
     }
 
+    /**
+     * Test triggers on BLOB columns.
+    */
+    private static void blobTest8Trigger(Connection conn)
+    {
+        System.out.println(START + "blobTest8Trigger");
+        try {
+            Statement stmt = conn.createStatement();
+            stmt.executeUpdate("CREATE TABLE blobTest8TriggerA (a BLOB(300k), b int, crc32 BIGINT)");
+            stmt.executeUpdate("CREATE TABLE blobTest8TriggerB (a BLOB(200k), b int, crc32 BIGINT)");
+            stmt.executeUpdate(
+                    "create trigger T8A after update on testBlob " +
+                    "referencing new as n old as o " + 
+                    "for each row mode db2sql "+ 
+                    "insert into blobTest8TriggerA(a, b, crc32) values (n.a, n.b, n.crc32)");
+            
+            conn.commit();
+            ResultSet rs = stmt.executeQuery(
+                    "select a,b,crc32 from blobTest8TriggerA");
+            testBlobContents(rs);
+            rs.close();
+            conn.commit();
+            stmt.executeUpdate("UPDATE testBlob set b = b + 0");
+            conn.commit();
+            rs = stmt.executeQuery(
+                "select a,b,crc32 from blobTest8TriggerA");
+            testBlobContents(rs);
+            stmt.close();
+            conn.commit();
+            System.out.println("blobTest8Trigger finished");
+        }
+        catch (SQLException e) {
+            TestUtil.dumpSQLExceptions(e);
+        }
+        catch (Throwable e) {
+            System.out.println("FAIL -- unexpected exception:" + e.toString());
+            if (debug) e.printStackTrace();
+        }
+        
+    }
+
 
     private static void printPositionBlob(
         int rowNum,
@@ -3209,6 +3281,9 @@ private static void blobTest51(Connection conn) {
                         " Got blob length : " + blob.length());
                 j++;
 			}
+            ps.close();
+            stmt.close();
+            conn.commit();
             System.out.println("blobTest51 finished");
         }
 		catch (SQLException e) {
@@ -3224,33 +3299,41 @@ private static void blobTest51(Connection conn) {
    // make sure cannot get a blob from an int column
 	private static void blobTest52(Connection conn) {
 
-		ResultSetMetaData met;
-		ResultSet rs;
-		Statement stmt;
+		Statement stmt = null;
 		System.out.println(START + "blobTest52");
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("create table testInteger2 (a integer)");
 
-            int i = 1;
             PreparedStatement ps = conn.prepareStatement("insert into testInteger2 values(158)");
             ps.executeUpdate();
+            ps.close();
 
-			rs = stmt.executeQuery("select a from testInteger2");
-			met = rs.getMetaData();
+			ResultSet rs = stmt.executeQuery("select a from testInteger2");
 			while (rs.next()) {
 				// get the first column as a clob
+                try {
                 Blob blob = rs.getBlob(1);
+                    System.out.println("FAIL fetched java.sql.Blob from INT column");
+                } catch (SQLException e) {
+                    TestUtil.dumpSQLExceptions(e,
+                            "22005".equals(e.getSQLState()) ||
+                            "XCL12".equals(e.getSQLState()));
+                    break;
+			}
 			}
-            System.out.println("blobTest52 finished");
+            stmt.close();
+            conn.commit();
+           
         }
 		catch (SQLException e) {
-			expectedExceptionForNSOnly(e);
+            TestUtil.dumpSQLExceptions(e);
 		}
 		catch (Throwable e) {
 			System.out.println("FAIL -- unexpected exception:" + e.toString());
 			if (debug) e.printStackTrace();
 		}
+        System.out.println("blobTest52 finished");
     }
 
 
@@ -3265,7 +3348,7 @@ private static void blobTest53(Connection conn) {
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("create table testBlobColumn (a blob(1K))");
-
+            stmt.close();
             System.out.println("blobTest53 finished");
         }
 		catch (SQLException e) {
@@ -3284,16 +3367,15 @@ private static void blobTest53(Connection conn) {
 	private static void blobTest54(Connection conn)
     {
 		ResultSet rs;
-		Statement stmt1, stmt2;
+		Statement stmt;
 		System.out.println(START + "blobTest54");
 		try
         {
-			stmt1 = conn.createStatement();
-			stmt1.execute("create table testBlob2 (a integer, b integer)");
+			stmt = conn.createStatement();
+			stmt.execute("create table testBlob2 (a integer, b integer)");
             PreparedStatement ps = conn.prepareStatement(
                 "insert into testBlob2 values(?,?)");
-			stmt2 = conn.createStatement();
-			rs = stmt2.executeQuery("select a,b from testBlob");
+			rs = stmt.executeQuery("select a,b from testBlob");
             Blob blob;
             int blobLength;
 			while (rs.next())
@@ -3303,22 +3385,31 @@ private static void blobTest54(Connection conn)
                 if (blob == null)
                     continue;
                 blobLength = rs.getInt(2);
+                try {
                 ps.setBlob(1,blob);
                 ps.setInt(2,blobLength);
                 ps.executeUpdate();
+                    System.out.println("FAIL setBlob worked on INT column");
+                } catch (SQLException e) {
+                    TestUtil.dumpSQLExceptions(e,
+                            "22005".equals(e.getSQLState()) ||
+                            "XCL12".equals(e.getSQLState()));
+                     break;
+                }
 			}
             rs.close();
             conn.commit();
+            stmt.close();
 
-            System.out.println("blobTest54 finished");
         }
 		catch (SQLException e) {
-		    expectedExceptionForNSOnly(e);
+            TestUtil.dumpSQLExceptions(e);
 		}
 		catch (Throwable e) {
 			System.out.println("FAIL -- unexpected exception:" + e.toString());
 			if (debug) e.printStackTrace();
 		}
+        System.out.println("blobTest54 finished");
     }
 
 
@@ -3413,6 +3504,8 @@ private static void blobTest6(Connection conn)
 			        TestUtil.dumpSQLExceptions(e,isNullSearchPattern(e));
 		        }
             }
+            stmt.close();
+            conn.commit();
             System.out.println("blobTest6 finished");
         }
 		catch (SQLException e) {
@@ -3481,6 +3574,8 @@ private static void blobTest7(Connection conn)
 			}
             rs2.close();
 
+            stmt1.close();
+            stmt2.close();
             conn.commit();
             System.out.println("blobTest7 finished");
         }
