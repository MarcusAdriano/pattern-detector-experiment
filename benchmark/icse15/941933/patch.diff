diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutor.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutor.java
index e69de29b..f2cd0048 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutor.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutor.java
@@ -0,0 +1,37 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.concurrent;
+
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.TimeUnit;
+
+public class JMXConfigurableThreadPoolExecutor extends JMXEnabledThreadPoolExecutor implements JMXConfigurableThreadPoolExecutorMBean 
+{
+
+    public JMXConfigurableThreadPoolExecutor(int corePoolSize,
+                                             int maximumPoolSize, 
+        	                                 long keepAliveTime, 
+        	                                 TimeUnit unit,
+                                             BlockingQueue<Runnable> workQueue, 
+                                             NamedThreadFactory threadFactory) 
+    {
+        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);
+    }
+    
+}
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutorMBean.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutorMBean.java
index e69de29b..cf2972fc 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutorMBean.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutorMBean.java
@@ -0,0 +1,28 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.concurrent;
+
+public interface JMXConfigurableThreadPoolExecutorMBean extends JMXEnabledThreadPoolExecutorMBean
+{
+
+    void setCorePoolSize(int n);
+
+    int getCorePoolSize();
+    
+}
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java
index 506a3e92..4680c8cf 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java
@@ -50,8 +50,8 @@
 
     static
     {
-        stages.put(MUTATION_STAGE, multiThreadedStage(MUTATION_STAGE, getConcurrentWriters()));
-        stages.put(READ_STAGE, multiThreadedStage(READ_STAGE, getConcurrentReaders()));
+        stages.put(MUTATION_STAGE, multiThreadedConfigurableStage(MUTATION_STAGE, getConcurrentWriters()));
+        stages.put(READ_STAGE, multiThreadedConfigurableStage(READ_STAGE, getConcurrentReaders()));        
         stages.put(RESPONSE_STAGE, multiThreadedStage("RESPONSE-STAGE", Math.max(2, Runtime.getRuntime().availableProcessors())));
         // the rest are all single-threaded
         stages.put(STREAM_STAGE, new JMXEnabledThreadPoolExecutor(STREAM_STAGE));
@@ -74,6 +74,18 @@ private static ThreadPoolExecutor multiThreadedStage(String name, int numThreads
                                                 new NamedThreadFactory(name));
     }
 
+    private static ThreadPoolExecutor multiThreadedConfigurableStage(String name, int numThreads)
+    {
+        assert numThreads > 1 : "multi-threaded stages must have at least 2 threads";
+        
+        return new JMXConfigurableThreadPoolExecutor(numThreads,
+                                                     numThreads,
+                                                     Integer.MAX_VALUE,
+                                                     TimeUnit.SECONDS,
+                                                     new LinkedBlockingQueue<Runnable>(DatabaseDescriptor.getStageQueueSize()),
+                                                     new NamedThreadFactory(name));
+    }
+
     /**
      * Retrieve a stage from the StageManager
      * @param stageName name of the stage to be retrieved.
