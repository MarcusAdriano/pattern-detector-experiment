diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
index 1151601a..b1bc7c07 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
@@ -1842,6 +1842,24 @@ public void completeLocalRollback() {
         inUnitOfWork_ = false;
     }
 
+    /**
+     * 
+     * Rollback the specific UnitOfWorkListener. 
+     * @param uwl The UnitOfWorkLitener to be rolled back
+     *
+     */
+    public void completeSpecificRollback(UnitOfWorkListener uwl) {
+        java.util.Set keySet = CommitAndRollbackListeners_.keySet();
+        for (java.util.Iterator i = keySet.iterator(); i.hasNext();) {
+            UnitOfWorkListener listener = (UnitOfWorkListener) i.next();
+            if(listener == uwl) {
+                listener.completeLocalRollback(i);
+                break;
+            }
+        }
+        inUnitOfWork_ = false;
+    }
+
 
     public abstract void writeLocalXARollback_() throws SqlException;
     
@@ -1870,6 +1888,16 @@ public void completeAbnormalUnitOfWork() {
         completeLocalRollback();
     }
 
+    /**
+     *
+     * Rollback the UnitOfWorkListener specifically.
+     * @param uwl The UnitOfWorkListener to be rolled back.
+     *
+     */
+    public void completeAbnormalUnitOfWork(UnitOfWorkListener uwl) {
+        completeSpecificRollback(uwl);
+    }
+
     // Called by Connection.close(), NetConnection.errorRollbackDisconnect().
     // The Agent's client-side resources associated with database connection are reclaimed (eg. socket).
     // And this connection and all associated statements and result sets are marked closed.
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ConnectionCallbackInterface.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ConnectionCallbackInterface.java
index ba7cca7c..f2756725 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ConnectionCallbackInterface.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ConnectionCallbackInterface.java
@@ -36,4 +36,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public void completeChainBreakingDisconnect();
 
     public void completeSqlca(Sqlca e);
+    
+    /**
+     *
+     * Rollback the UnitOfWorkListener specifically.
+     * @param uwl The UnitOfWorkListener to be rolled back.
+     *
+     */
+    public void completeAbnormalUnitOfWork(UnitOfWorkListener uwl);
 }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 3c2bafb4..f1836d0b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -30,8 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.shared.common.i18n.MessageUtil;
 
 public abstract class ResultSet implements java.sql.ResultSet,
-        ResultSetCallbackInterface,
-        UnitOfWorkListener {
+        ResultSetCallbackInterface {
     //---------------------navigational members-----------------------------------
 
     public Statement statement_;
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSetCallbackInterface.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSetCallbackInterface.java
index aa2a8fa6..a5c5a37f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSetCallbackInterface.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSetCallbackInterface.java
@@ -26,7 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 //
 // Reply implementations may update result set state via this interface.
 
-public interface ResultSetCallbackInterface {
+public interface ResultSetCallbackInterface extends UnitOfWorkListener {
     // The query was ended at the server because all rows have been retrieved.
     public void earlyCloseComplete(Sqlca sqlca);
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
index b6843fbe..6fda48ac 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
@@ -25,7 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.shared.common.reference.JDBC30Translation;
 import org.apache.derby.shared.common.reference.SQLState;
 
-public class Statement implements java.sql.Statement, StatementCallbackInterface, UnitOfWorkListener {
+public class Statement implements java.sql.Statement, StatementCallbackInterface{
 
     // JDBC 3 constant indicating that the current ResultSet object
     // should be closed when calling getMoreResults.
@@ -2812,5 +2812,4 @@ protected SQLException jdbc3FeatureNotSupported() throws SQLException
     {
         return jdbc3FeatureNotSupported(true);
     }
-
 }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/StatementCallbackInterface.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/StatementCallbackInterface.java
index 6aa5180d..82eca73b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/StatementCallbackInterface.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/StatementCallbackInterface.java
@@ -29,7 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 // Reply implementations may update statement state via this interface.
 //
 
-public interface StatementCallbackInterface {
+public interface StatementCallbackInterface extends UnitOfWorkListener {
     // A query has been opened on the server.
     public void completeOpenQuery(Sqlca sqlca, ResultSet resultSet) throws DisconnectException;
 
@@ -58,6 +58,4 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public ConnectionCallbackInterface getConnectionCallbackInterface();
 
     public ColumnMetaData getGuessedResultSetMetaData();
-
-
 }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
index 3e5926e1..a0115d27 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
@@ -26,12 +26,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.client.am.Connection;
 import org.apache.derby.client.am.ConnectionCallbackInterface;
+import org.apache.derby.client.am.StatementCallbackInterface;
+import org.apache.derby.client.am.ResultSetCallbackInterface;
 import org.apache.derby.client.am.DisconnectException;
 import org.apache.derby.client.am.SqlException;
 import org.apache.derby.client.am.ClientMessageId;
 import org.apache.derby.client.am.Sqlca;
 import java.io.UnsupportedEncodingException;
+import org.apache.derby.client.am.UnitOfWorkListener;
 
+import org.apache.derby.shared.common.error.ExceptionSeverity;
+import org.apache.derby.shared.common.error.ExceptionUtil;
 import org.apache.derby.shared.common.reference.SQLState;
 import org.apache.derby.shared.common.reference.MessageId;
 import org.apache.derby.shared.common.i18n.MessageUtil;
@@ -344,7 +349,7 @@ protected void parseCommitError(ConnectionCallbackInterface connection) throws D
         int peekCP = peekCodePoint();
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
-            NetSqlca sqlca = parseAbnormalEndUow(connection);
+            NetSqlca sqlca = parseAbnormalEndUow(connection,null);
             connection.completeSqlca(sqlca);
             break;
         case CodePoint.CMDCHKRM:
@@ -469,16 +474,58 @@ void parseCommonError(int peekCP) throws DisconnectException {
         }
     }
 
-    NetSqlca parseAbnormalEndUow(ConnectionCallbackInterface connection) throws DisconnectException {
-        parseABNUOWRM(connection);
+    /**
+     * Perform necessary actions for parsing of a ABNUOWRM message.
+     *
+     * @param connection an implementation of the ConnectionCallbackInterface
+     *
+     * @return an NetSqlca object obtained from parsing the ABNUOWRM
+     * @throws DisconnectException
+     *
+     */
+    NetSqlca parseAbnormalEndUow(ConnectionCallbackInterface connection,UnitOfWorkListener uwl) throws DisconnectException {
+        parseABNUOWRM();
         if (peekCodePoint() != CodePoint.SQLCARD) {
             parseTypdefsOrMgrlvlovrs();
         }
 
         NetSqlca netSqlca = parseSQLCARD(null);
+        
+        if(ExceptionUtil.getSeverityFromIdentifier(netSqlca.getSqlState()) > 
+            ExceptionSeverity.STATEMENT_SEVERITY || uwl == null)
+            connection.completeAbnormalUnitOfWork();
+        else
+            connection.completeAbnormalUnitOfWork(uwl);
+        
         return netSqlca;
     }
 
+    /**
+     * Perform necessary actions for parsing of a ABNUOWRM message.
+     *
+     * @param connection an implementation of the StatementCallbackInterface
+     *
+     * @return an NetSqlca object obtained from parsing the ABNUOWRM
+     * @throws DisconnectException
+     *
+     */
+    NetSqlca parseAbnormalEndUow(StatementCallbackInterface s) throws DisconnectException {
+        return parseAbnormalEndUow(s.getConnectionCallbackInterface(),s);
+    }
+    
+    /**
+     * Perform necessary actions for parsing of a ABNUOWRM message.
+     *
+     * @param connection an implementation of the ResultsetCallbackInterface
+     *
+     * @return an NetSqlca object obtained from parsing the ABNUOWRM
+     * @throws DisconnectException
+     *
+     */
+    NetSqlca parseAbnormalEndUow(ResultSetCallbackInterface r) throws DisconnectException {
+        return parseAbnormalEndUow(r.getConnectionCallbackInterface(),r);
+    }
+
     void parseRdbAccessFailed(NetConnection netConnection) throws DisconnectException {
         parseRDBAFLRM();
 
@@ -1714,7 +1761,7 @@ protected void parseCMDNSPRM() throws DisconnectException {
     //   RDBNAM - required
     //
     // Called by all the NET*Reply classes.
-    void parseABNUOWRM(ConnectionCallbackInterface connection) throws DisconnectException {
+    void parseABNUOWRM() throws DisconnectException {
         boolean svrcodReceived = false;
         int svrcod = CodePoint.SVRCOD_INFO;
         boolean rdbnamReceived = false;
@@ -1755,8 +1802,6 @@ void parseABNUOWRM(ConnectionCallbackInterface connection) throws DisconnectExce
 
         // the abnuowrm has been received, do whatever state changes are necessary
         netAgent_.setSvrcod(svrcod);
-        connection.completeAbnormalUnitOfWork();
-
     }
 
     //--------------------- parse DDM Reply Data--------------------------------------
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetReply.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetReply.java
index 8a949998..ca96a8a3 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetReply.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetResultSetReply.java
@@ -193,7 +193,10 @@ void parseCloseError(ResultSetCallbackInterface resultSetI) throws DisconnectExc
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(resultSetI.getConnectionCallbackInterface());
+                //passing the ResultSetCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back 
+                NetSqlca sqlca = parseAbnormalEndUow(resultSetI);
                 resultSetI.completeSqlca(sqlca);
                 break;
             }
@@ -216,7 +219,10 @@ void parseFetchError(ResultSetCallbackInterface resultSetI) throws DisconnectExc
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(resultSetI.getConnectionCallbackInterface());
+                //passing the ResultSetCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back 
+                NetSqlca sqlca = parseAbnormalEndUow(resultSetI);
                 resultSetI.completeSqlca(sqlca);
                 break;
             }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementReply.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementReply.java
index aa3c2046..14972dbc 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementReply.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetStatementReply.java
@@ -516,7 +516,10 @@ void parsePrepareError(StatementCallbackInterface statement) throws DisconnectEx
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(statement.getConnectionCallbackInterface());
+                //passing the StatementCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back 
+                NetSqlca sqlca = parseAbnormalEndUow(statement);
                 statement.completeSqlca(sqlca);
                 break;
             }
@@ -548,7 +551,10 @@ void parseExecuteImmediateError(StatementCallbackInterface statement) throws Dis
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(statement.getConnectionCallbackInterface());
+                //passing the StatementCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back
+                NetSqlca sqlca = parseAbnormalEndUow(statement);
                 statement.completeSqlca(sqlca);
                 break;
             }
@@ -582,7 +588,10 @@ void parseDescribeError(StatementCallbackInterface statement) throws DisconnectE
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(statement.getConnectionCallbackInterface());
+                //passing the StatementCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back
+                NetSqlca sqlca = parseAbnormalEndUow(statement);
                 statement.completeSqlca(sqlca);
                 break;
             }
@@ -609,7 +618,10 @@ void parseOpenQueryError(StatementCallbackInterface statementI) throws Disconnec
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(statementI.getConnectionCallbackInterface());
+                //passing the StatementCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back
+                NetSqlca sqlca = parseAbnormalEndUow(statementI);
                 statementI.completeSqlca(sqlca);
                 break;
             }
@@ -638,7 +650,10 @@ void parseExecuteError(StatementCallbackInterface statementI) throws DisconnectE
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(statementI.getConnectionCallbackInterface());
+                //passing the StatementCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back
+                NetSqlca sqlca = parseAbnormalEndUow(statementI);
                 statementI.completeSqlca(sqlca);
                 break;
             }
@@ -671,7 +686,10 @@ void parseExecuteSetStatementError(StatementCallbackInterface statement) throws
         switch (peekCP) {
         case CodePoint.ABNUOWRM:
             {
-                NetSqlca sqlca = parseAbnormalEndUow(statement.getConnectionCallbackInterface());
+                //passing the StatementCallbackInterface implementation will
+                //help in retrieving the the UnitOfWorkListener that needs to
+                //be rolled back
+                NetSqlca sqlca = parseAbnormalEndUow(statement);
                 statement.completeSqlca(sqlca);
                 break;
             }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetCloseTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetCloseTest.java
index e69de29b..d2ac6c2c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetCloseTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetCloseTest.java
@@ -0,0 +1,135 @@
+/*
+ 
+   Derby - Class ResultSetCloseTest
+ 
+   Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
+ 
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+ 
+      http://www.apache.org/licenses/LICENSE-2.0
+ 
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ 
+ */
+
+package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+
+import junit.framework.*;
+
+import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
+
+import java.sql.*;
+
+/**
+ * This class is used to test the fix for DERBY-694.
+ *
+ * A brief description of DERBY-694 (Got from the description in JIRA)
+ *
+ * 1) Autocommit off.
+ * 2) Have two prepared statements, calling executeQuery() on both
+ * 3) Gives two result sets. Can fetch data from both with next().
+ * 4) If one statement gets an exception (say, caused by a division by zero)
+ * 5) not only this statement's result set is closed, but also the other open
+ *    resultset. This happens with the client driver, whereas in embedded mode,
+ *    the other result set is unaffected by the exception in the first result set
+ *    (as it should be).
+ *
+ */
+public class ResultSetCloseTest extends BaseJDBCTestCase {
+    
+    Connection con        = null;
+    Statement  s          = null;
+    PreparedStatement ps1 = null;
+    PreparedStatement ps2 = null;
+    ResultSet         rs1 = null;
+    ResultSet         rs2 = null;
+    
+    /**
+     * Create the tables and the Connection and PreparedStatements that will
+     * be used in this test.
+     */
+    public void setUp()
+    throws SQLException {
+        con = getConnection();
+        con.setAutoCommit(false);
+        
+        s = con.createStatement();
+        
+        s.execute("create table t1 (a int)");
+        
+        s.execute("insert into t1 values(1)");
+        s.execute("insert into t1 values(0)");
+        s.execute("insert into t1 values(2)");
+        s.execute("insert into t1 values(3)");
+        
+        con.commit();
+        
+        ps1 = con.prepareStatement("select * from t1");
+        
+        ps2 = con.prepareStatement("select 10/a from t1");
+    }
+    
+    /**
+     * Test that the occurence of the exception in one of the PreparedStatements
+     * does not result in the closure of the ResultSet associated with the other
+     * Prepared Statements.
+     *
+     * STEPS :
+     * 1) Execute the first PreparedStatement. This should not cause any
+     *    SQLException.
+     * 2) Now execute the second PreparedStatement. This causes
+     *    the expected Divide by zero exception.
+     * 3) Now access the first resultset again to ensure this is still open.
+     *
+     */
+    public void testResultSetDoesNotClose() throws SQLException {
+        rs1 = ps1.executeQuery();
+        
+        try {
+            rs2 = ps2.executeQuery();
+            while(rs2.next());
+        } catch(SQLException sqle) {
+            //Do Nothing expected exception
+        }
+        
+        while(rs1.next());
+        
+        con.commit();
+    }
+    
+    /**
+     * Destroy the objects used in this test.
+     */
+    public void tearDown()
+    throws SQLException {
+        if (con != null && !con.isClosed()) {
+            con.rollback();
+            con.close();
+        }
+        
+        con = null;
+    }
+    
+    /**
+     * Create the test with the given name.
+     *
+     * @param name name of the test.
+     */
+    public ResultSetCloseTest(String name) {
+        super(name);
+    }
+    
+    /**
+     * Create test suite for this test.
+     */
+    public static Test suite() {
+        return new TestSuite(ResultSetCloseTest.class,"ResultSetCloseTest suite");
+    }
+    
+}
