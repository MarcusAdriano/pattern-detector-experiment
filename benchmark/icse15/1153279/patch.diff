diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/BytesReadTracker.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/BytesReadTracker.java
index 8e7f15c2..51971aa9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/BytesReadTracker.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/BytesReadTracker.java
@@ -49,7 +49,6 @@ public void reset()
         bytesRead = 0;
     }
 
-    @Override
     public boolean readBoolean() throws IOException
     {
         boolean bool = source.readBoolean();
@@ -57,7 +56,6 @@ public boolean readBoolean() throws IOException
         return bool;
     }
 
-    @Override
     public byte readByte() throws IOException
     {
         byte b = source.readByte();
@@ -65,15 +63,13 @@ public byte readByte() throws IOException
         return b;
     }
 
-    @Override
     public char readChar() throws IOException
     {
         char c = source.readChar();
-        bytesRead += 1;
+        bytesRead += 2;
         return c;
     }
 
-    @Override
     public double readDouble() throws IOException
     {
         double d = source.readDouble();
@@ -81,7 +77,6 @@ public double readDouble() throws IOException
         return d;
     }
 
-    @Override
     public float readFloat() throws IOException
     {
         float f = source.readFloat();
@@ -89,21 +84,18 @@ public float readFloat() throws IOException
         return f;
     }
 
-    @Override
     public void readFully(byte[] b, int off, int len) throws IOException
     {
         source.readFully(b, off, len);
         bytesRead += len;
     }
 
-    @Override
     public void readFully(byte[] b) throws IOException
     {
         source.readFully(b);
         bytesRead += b.length;
     }
 
-    @Override
     public int readInt() throws IOException
     {
         int i = source.readInt();
@@ -111,7 +103,6 @@ public int readInt() throws IOException
         return i;
     }
 
-    @Override
     public String readLine() throws IOException
     {
         // since this method is deprecated and cannot track bytes read
@@ -119,7 +110,6 @@ public String readLine() throws IOException
         throw new UnsupportedOperationException();
     }
 
-    @Override
     public long readLong() throws IOException
     {
         long l = source.readLong();
@@ -127,7 +117,6 @@ public long readLong() throws IOException
         return l;
     }
 
-    @Override
     public short readShort() throws IOException
     {
         short s = source.readShort();
@@ -135,13 +124,11 @@ public short readShort() throws IOException
         return s;
     }
 
-    @Override
     public String readUTF() throws IOException
     {
         return DataInputStream.readUTF(this);
     }
 
-    @Override
     public int readUnsignedByte() throws IOException
     {
         int i = source.readUnsignedByte();
@@ -149,7 +136,6 @@ public int readUnsignedByte() throws IOException
         return i;
     }
 
-    @Override
     public int readUnsignedShort() throws IOException
     {
         int i = source.readUnsignedShort();
@@ -157,11 +143,10 @@ public int readUnsignedShort() throws IOException
         return i;
     }
 
-    @Override
     public int skipBytes(int n) throws IOException
     {
         int skipped = source.skipBytes(n);
-        bytesRead += n;
+        bytesRead += skipped;
         return skipped;
     }
 }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java
index e367f946..7724196c 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java
@@ -79,34 +79,36 @@ public void testBytesRead() throws Exception
             byte b = tracker.readByte();
             assertEquals(b, 0x1);
             assertEquals(2, tracker.getBytesRead());
-            // char = 1byte
+            // char = 2byte
             char c = tracker.readChar();
             assertEquals('a', c);
-            assertEquals(3, tracker.getBytesRead());
+            assertEquals(4, tracker.getBytesRead());
             // short = 2bytes
             short s = tracker.readShort();
             assertEquals(1, s);
-            assertEquals((short) 5, tracker.getBytesRead());
+            assertEquals((short) 6, tracker.getBytesRead());
             // int = 4bytes
             int i = tracker.readInt();
             assertEquals(1, i);
-            assertEquals(9, tracker.getBytesRead());
+            assertEquals(10, tracker.getBytesRead());
             // long = 8bytes
             long l = tracker.readLong();
             assertEquals(1L, l);
-            assertEquals(17, tracker.getBytesRead());
+            assertEquals(18, tracker.getBytesRead());
             // float = 4bytes
             float f = tracker.readFloat();
             assertEquals(1.0f, f, 0);
-            assertEquals(21, tracker.getBytesRead());
+            assertEquals(22, tracker.getBytesRead());
             // double = 8bytes
             double d = tracker.readDouble();
             assertEquals(1.0d, d, 0);
-            assertEquals(29, tracker.getBytesRead());
+            assertEquals(30, tracker.getBytesRead());
             // String("abc") = 2(string size) + 3 = 5 bytes
             String str = tracker.readUTF();
             assertEquals("abc", str);
-            assertEquals(34, tracker.getBytesRead());
+            assertEquals(35, tracker.getBytesRead());
+
+            assertEquals(testData.length, tracker.getBytesRead());
         }
         finally
         {
