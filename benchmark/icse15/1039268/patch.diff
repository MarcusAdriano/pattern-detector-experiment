diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
index 9762df35..637b92d6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
@@ -2555,15 +2555,23 @@ public void testPlanExporterEncoding() throws Exception {
     }
 
     /**
-     * Test that queries that contain table names with quotation marks are not garbled
-     * by the plan exporter tool. Regression test case for DERBY-4903.
+     * Test that queries that contain characters with a special meaning in
+     * XML are not garbled by the plan exporter tool. Regression test case
+     * for DERBY-4903.
      */
     public void testPlanExporterHandlingSpecialCharacters() throws Exception{
-        String table = "\"A \"\"quoted\"\" table name\"";
-        String queryText = "SELECT * FROM " + table;
+        String table =
+                "A \"double\" and 'single' quoted table name " +
+                "with some other special characters, like <, > and &";
+
+        String escapedTable = JDBC.escape(table);
+
+        String queryText =
+                "SELECT * FROM " + escapedTable +
+                " WHERE X < LENGTH('a & b') AND X > 1";
 
         Statement s = createStatement();
-        s.execute("CREATE TABLE " + table + "(X INT)");
+        s.execute("CREATE TABLE " + escapedTable + "(X INT)");
 
         enableXplainStyle(s);
         JDBC.assertEmpty(s.executeQuery(queryText));
@@ -2588,8 +2596,7 @@ public void testPlanExporterHandlingSpecialCharacters() throws Exception{
             //for TABLESCAN node, test scanned_object entry
             //is exist and verify its value correctly replaced
             //by special XML symbols.
-            Assert.assertEquals("A \"quoted\" table name",
-                    getNodeAttribute(stmtId,"scanned_object",0));
+            assertEquals(table, getNodeAttribute(stmtId, "scanned_object", 0));
         }
 
     }
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/planexporter/AccessDatabase.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/planexporter/AccessDatabase.java
index c3e4bdb2..1cf4289a 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/planexporter/AccessDatabase.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/planexporter/AccessDatabase.java
@@ -380,10 +380,7 @@ private void createXMLData(String qry, int x) throws SQLException{
 
                 /*Removing possible occurrences of special XML characters
                  * from XML node attributes in XML representation.*/
-                text = replaceInAttribute(text, '<',"&lt;");
-                text = replaceInAttribute(text, '>',"&gt;");
-                text = replaceInAttribute(text, '\'',"&apos;");
-                text = replaceInAttribute(text, '"',"&quot;");
+                text = escapeInAttribute(text);
 
                 switch(x){
                 case ID:
@@ -479,29 +476,44 @@ public String statement() throws SQLException{
 
         /*Removing possible occurrences of special XML characters
          * from a query statement with XML representation.*/
-        statement = replace(statement, '<',"&lt;");
-        statement = replace(statement, '>',"&gt;");
-        statement = replace(statement, '\'',"&apos;");
-        statement = replace(statement, '"',"&quot;");
+        statement = escapeForXML(statement);
 
         return "<statement>"+statement+"</statement>\n";
     }
 
     /**
+     * Escape characters that have a special meaning in XML.
      *
-     * @param text text to be checked
-     * @param expr string to be removed
-     * @param replace string to be added
-     * @return modified string
+     * @param text the text to escape
+     * @return the text with special characters escaped
      */
-    private String replace(String text, char expr, String replace){
-         int idx = text.indexOf(expr);
-    	 while (idx >= 0)
-    	 {
-             text = text.substring(0, idx) + replace + text.substring(idx+1);
-             idx = text.indexOf(expr);
+    private static String escapeForXML(String text) {
+        StringBuffer sb = new StringBuffer();
+
+        for (int i = 0; i < text.length(); i++) {
+            char ch = text.charAt(i);
+            switch (ch) {
+                case '&':
+                    sb.append("&amp;");
+                    break;
+                case '<':
+                    sb.append("&lt;");
+                    break;
+                case '>':
+                    sb.append("&gt;");
+                    break;
+                case '\'':
+                    sb.append("&apos;");
+                    break;
+                case '"':
+                    sb.append("&quot;");
+                    break;
+                default:
+                    sb.append(ch);
     	 }
-         return text;
+        }
+
+        return sb.toString();
     }
 
     /**
@@ -511,14 +523,13 @@ private String replace(String text, char expr, String replace){
      * scanned_object="A &quot;quoted&quot;  table name";
      *
      * @param text attribute string to be checked
-     * @param expr string to be removed
-     * @param replace string to be added
      * @return modified string
      */
-    private String replaceInAttribute(String text, char expr, String replace){
+    private String escapeInAttribute(String text) {
         if (text.indexOf('"') == -1)
             return text;
-        String correctXMLString = replace(text.substring(text.indexOf('"')+1, text.length()-1), expr, replace);
+        String correctXMLString = escapeForXML(
+                text.substring(text.indexOf('"') + 1, text.length() - 1));
         return text.substring(0,text.indexOf('"')+1)+correctXMLString+"\"";
     }
    
