diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/AbstractBounds.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/AbstractBounds.java
index 31f8a7f9..84058349 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/AbstractBounds.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/AbstractBounds.java
@@ -62,14 +62,15 @@ public AbstractBounds(Token left, Token right, IPartitioner partitioner)
      * Given token T and AbstractBounds ?L,R], returns Pair(?L,T], ?T,R])
      * (where ? means that the same type of Bounds is returned -- Range or Bounds -- as the original.)
      * The original AbstractBounds must contain the token T.
-     * If R==T, null is returned as the right element of the Pair.
+     * If the split would cause one of the left or right side to be empty, it will be null in the result pair.
      */
-
     public Pair<AbstractBounds,AbstractBounds> split(Token token)
     {
         assert contains(token);
-        Range remainder = token.equals(right) ? null : new Range(token, right);
-        return new Pair<AbstractBounds,AbstractBounds>(createFrom(token), remainder);
+        AbstractBounds lb = createFrom(token);
+        // we contain this token, so only one of the left or right can be empty
+        AbstractBounds rb = lb != null && token.equals(right) ? null : new Range(token, right);
+        return new Pair<AbstractBounds,AbstractBounds>(lb, rb);
     }
 
     @Override
@@ -83,7 +84,7 @@ public int hashCode()
 
     public abstract boolean contains(Token start);
 
-    /** @return A clone of this AbstractBounds with a new right Token. */
+    /** @return A clone of this AbstractBounds with a new right Token, or null if an identical range would be created. */
     public abstract AbstractBounds createFrom(Token right);
 
     public abstract List<AbstractBounds> unwrap();
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/Range.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/Range.java
index d1f467b3..472841b4 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/Range.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/Range.java
@@ -195,6 +195,8 @@ public boolean intersects(Range that)
 
     public AbstractBounds createFrom(Token token)
     {
+        if (token.equals(left))
+            return null;
         return new Range(left, token);
     }
 
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
index 7505e2d5..67ac0fba 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -583,6 +583,7 @@ public void response(Message msg)
                 // no more splits
                 break;
             Pair<AbstractBounds,AbstractBounds> splits = remainder.split(token);
+            if (splits.left != null)
             ranges.add(splits.left);
             remainder = splits.right;
         }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/StorageProxyTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/StorageProxyTest.java
index 3a1fbffd..9baea18f 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/StorageProxyTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/StorageProxyTest.java
@@ -96,6 +96,8 @@ public void testGRRWrapped() throws Throwable
         // full wraps
         testGRR(range("0", "0"), range("0", "1"), range("1", "6"), range("6", ""), range("", "0"));
         testGRR(range("", ""), range("", "1"), range("1", "6"), range("6", ""));
+        // wrap on member token
+        testGRR(range("6", "6"), range("6", ""), range("", "1"), range("1", "6"));
         // end wrapped
         testGRR(range("5", ""), range("5", "6"), range("6", ""));
     }
