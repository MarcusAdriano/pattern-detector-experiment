diff --git a/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java b/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
index 5aaea718..d3aff5eb 100644
--- a/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
+++ b/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
@@ -784,8 +784,16 @@ private static String randomSubString(Random random, int wordLength, boolean sim
         sb.setLength(wordLength-1);
       }
     }
+    
+    if (random.nextInt(17) == 0) {
+      // mix up case
+      String mixedUp = _TestUtil.randomlyRecaseCodePoints(random, sb.toString());
+      assert mixedUp.length() == sb.length();
+      return mixedUp;
+    } else {
     return sb.toString();
   }
+  }
 
   protected String toDot(Analyzer a, String inputText) throws IOException {
     final StringWriter sw = new StringWriter();
diff --git a/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java b/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
index ac759675..ba5c18eb 100644
--- a/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
+++ b/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
@@ -446,11 +446,10 @@ public static String randomlyRecaseCodePoints(Random random, String str) {
     while (pos < str.length()) {
       int codePoint = str.codePointAt(pos);
       pos += Character.charCount(codePoint);
-      String codePointSubstring = new String(new int[] { codePoint }, 0, 1);
       switch (nextInt(random, 0, 2)) {
-        case 0: builder.append(codePointSubstring.toUpperCase(Locale.ENGLISH)); break;
-        case 1: builder.append(codePointSubstring.toLowerCase(Locale.ENGLISH)); break;
-        case 2: builder.append(codePointSubstring); // leave intact
+        case 0: builder.appendCodePoint(Character.toUpperCase(codePoint)); break;
+        case 1: builder.appendCodePoint(Character.toLowerCase(codePoint)); break;
+        case 2: builder.appendCodePoint(codePoint); // leave intact
       }
     }
     return builder.toString();
