diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
index 5d24fe6e..cd8f8230 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.util.HashMap;
@@ -66,7 +67,7 @@
  *  <li><b>taxonomy.directory</b>=&lt;type of directory for taxonomy index| Default: RAMDirectory&gt;
  * </ul>
  */
-public class PerfRunData {
+public class PerfRunData implements Closeable {
 
   private Points points;
   
@@ -124,6 +125,12 @@ public PerfRunData (Config config) throws Exception {
     }
   }
 
+  public void close() throws IOException {
+    IOUtils.close(indexWriter, indexReader, indexSearcher, directory, 
+                  taxonomyWriter, taxonomyReader, taxonomyDir, 
+                  docMaker, facetSource);
+  }
+
   // clean old stuff, reopen 
   public void reinit(boolean eraseIndex) throws Exception {
 
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
index 20f75829..51dd9ba3 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -46,7 +47,7 @@
  * logStep is not 0 (<b>default=0</b>).
  * </ul>
  */
-public abstract class ContentItemsSource {
+public abstract class ContentItemsSource implements Closeable {
   
   private long bytesCount;
   private long totalBytesCount;
@@ -130,7 +131,6 @@ protected final boolean shouldLog() {
    * items generated since the last reset, so it's important to call
    * super.resetInputs in case you override this method.
    */
-  @SuppressWarnings("unused")
   public void resetInputs() throws IOException {
     bytesCount = 0;
     itemCount = 0;
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
index 66dcac8e..6d15fe48 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
@@ -45,6 +45,7 @@
 public class DirContentSource extends ContentSource {
 
   private static final class DateFormatInfo {
+    public DateFormatInfo() {}
     DateFormat df;
     ParsePosition pos;
   }
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
index 647313df..c2602fa1 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.Closeable;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.util.HashMap;
@@ -75,11 +76,12 @@
  * {@link DocData#getProps()} will be indexed. (default <b>false</b>).
  * </ul>
  */
-public class DocMaker {
+public class DocMaker implements Closeable {
 
   private static class LeftOver {
-    private DocData docdata;
-    private int cnt;
+    public LeftOver() {}
+    DocData docdata;
+    int cnt;
   }
 
   private Random r;
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
index 5153ad0c..bb459c8f 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
@@ -44,6 +44,7 @@
  */
 public class EnwikiContentSource extends ContentSource {
 
+  @SuppressWarnings("synthetic-access")
   private class Parser extends DefaultHandler implements Runnable {
     private Thread t;
     private boolean threadDone;
@@ -55,6 +56,9 @@
     private String time;
     private String id;
     
+    public Parser() {
+    }
+    
     String[] next() throws NoMoreDataException {
       if (t == null) {
         threadDone = false;
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java
index 106c6c38..20394fb7 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java
@@ -39,8 +39,7 @@
  * A QueryMaker that uses common and uncommon actual Wikipedia queries for
  * searching the English Wikipedia collection. 90 queries total.
  */
-public class EnwikiQueryMaker extends AbstractQueryMaker implements
-    QueryMaker {
+public class EnwikiQueryMaker extends AbstractQueryMaker {
 
   // common and a few uncommon queries from wikipedia search logs
   private static String[] STANDARD_QUERIES = { "Images catbox gif",
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java
index dbfc7319..28cc9505 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java
@@ -41,8 +41,7 @@
  * file.query.maker.file=c:/myqueries.txt
  * file.query.maker.default.field=body
  */
-public class FileBasedQueryMaker extends AbstractQueryMaker implements QueryMaker{
-
+public class FileBasedQueryMaker extends AbstractQueryMaker {
 
   @Override
   protected Query[] prepareQueries() throws Exception {
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
index ecc0aed4..fc901571 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
@@ -72,6 +72,7 @@ public LineParser(String[] header) {
     public SimpleLineParser(String[] header) {
       super(header);
     }
+    @Override
     public void parseLine(DocData docData, String line) {
       int k1 = 0;
       int k2 = line.indexOf(WriteLineDocTask.SEP, k1);
@@ -122,6 +123,7 @@ public HeaderLineParser(String[] header) {
       }
     }
     
+    @Override
     public void parseLine(DocData docData, String line) {
       int n = 0;
       int k1 = 0;
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java
index 68b16618..58311356 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java
@@ -26,11 +26,6 @@
 import org.apache.lucene.util.English;
 import org.apache.lucene.util.Version;
 
-
-/**
- *
- *
- **/
 public class LongToEnglishQueryMaker implements QueryMaker {
   long counter = Long.MIN_VALUE + 10;
   protected QueryParser parser;
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
index 11265bd8..fa423841 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
@@ -43,6 +43,7 @@
 public class ReutersContentSource extends ContentSource {
 
   private static final class DateFormatInfo {
+    DateFormatInfo() {}
     DateFormat df;
     ParsePosition pos;
   }
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java
index c550f33a..5e091467 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java
@@ -33,8 +33,7 @@
  * A QueryMaker that makes queries for a collection created 
  * using {@link org.apache.lucene.benchmark.byTask.feeds.SingleDocSource}.
  */
-public class SimpleQueryMaker extends AbstractQueryMaker implements QueryMaker {
-
+public class SimpleQueryMaker extends AbstractQueryMaker {
 
   /**
    * Prepare the queries for this test.
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
index 5c67ba5a..544a78bc 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
@@ -58,6 +58,7 @@
 public class TrecContentSource extends ContentSource {
 
   private static final class DateFormatInfo {
+    DateFormatInfo() {}
     DateFormat[] dfs;
     ParsePosition pos;
   }
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java
index 6a1a6032..7972569a 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java
@@ -73,6 +73,7 @@ public static void main(String[] args) throws Exception {
     
     // execute
     top.doLogic();
+    top.close();
   }
 
   // Sample programmatic settings. Could also read from file.
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java
index b55d3744..e55a39f3 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java
@@ -17,8 +17,6 @@
  * limitations under the License.
  */
 
-import java.text.NumberFormat;
-
 import org.apache.lucene.benchmark.byTask.PerfRunData;
 import org.apache.lucene.benchmark.byTask.feeds.DocMaker;
 import org.apache.lucene.document.Document;
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
index 8abb8db0..586c45b5 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
@@ -74,8 +74,6 @@ public CreateIndexTask(PerfRunData runData) {
     super(runData);
   }
 
-  
-  
   public static IndexDeletionPolicy getIndexDeletionPolicy(Config config) {
     String deletionPolicyName = config.get("deletion.policy", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy");
     if (deletionPolicyName.equals(NoDeletionPolicy.class.getName())) {
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java
index 62086263..4c2a6884 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java
@@ -17,16 +17,16 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
+
 import org.apache.lucene.benchmark.byTask.PerfRunData;
 import org.apache.lucene.benchmark.byTask.utils.Config;
-import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexCommit;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.LogMergePolicy;
+import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriter.MaxFieldLength;
+import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
-import java.io.IOException;
-
+import org.apache.lucene.index.LogMergePolicy;
 
 /**
  * Open an index writer.
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
index 24148820..78e310f4 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
@@ -20,7 +20,6 @@
 import java.io.IOException;
 import java.util.Collection;
 import java.util.HashSet;
-
 import java.util.List;
 import java.util.Set;
 
@@ -31,15 +30,14 @@
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.Collector;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.TopFieldCollector;
-import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopScoreDocCollector;
 import org.apache.lucene.search.Weight;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Sort;
 import org.apache.lucene.store.Directory;
 
 
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java
index fa0ae999..3d0cafd6 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java
@@ -114,6 +114,8 @@ public int doLogic() throws Exception {
     int upto;
     int left;
     String s;
+    
+    ReusableStringReader() {}
     void init(String s) {
       this.s = s;
       left = s.length();
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java
index 10198c51..31028de1 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java
@@ -1,4 +1,5 @@
 package org.apache.lucene.benchmark.byTask.tasks;
+
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -16,7 +17,6 @@
  * limitations under the License.
  */
 
-
 import java.io.IOException;
 
 import org.apache.lucene.benchmark.byTask.PerfRunData;
@@ -34,8 +34,8 @@ public ReopenReaderTask(PerfRunData runData) {
   @Override
   public int doLogic() throws IOException {
     IndexReader r = getRunData().getIndexReader();
-    IndexReader nr = r.reopen();
-    if (nr != r) {
+    IndexReader nr = IndexReader.openIfChanged(r);
+    if (nr != null) {
       getRunData().setIndexReader(nr);
       nr.decRef();
     }
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
index 6e3b6879..98c5fb3c 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
@@ -308,6 +308,7 @@ public ParallelTask(PerfTask task) {
       this.task = task;
     }
 
+    @SuppressWarnings("synthetic-access")
     @Override
     public void run() {
       try {
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WaitForMergesTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WaitForMergesTask.java
index 6cd1c16f..84d92c01 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WaitForMergesTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WaitForMergesTask.java
@@ -1,4 +1,5 @@
 package org.apache.lucene.benchmark.byTask.tasks;
+
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -16,12 +17,7 @@
  * limitations under the License.
  */
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.apache.lucene.benchmark.byTask.PerfRunData;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexReader;
 
 /**
  * Waits for merges to finish.
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java
index eff77582..57e41561 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java
@@ -32,7 +32,7 @@
 import org.apache.lucene.benchmark.byTask.utils.Config;
 import org.apache.lucene.benchmark.byTask.utils.StreamUtils;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
+import org.apache.lucene.document.Fieldable;
 
 /**
  * A task which writes documents, one line per document. Each line is in the
@@ -87,7 +87,7 @@
   private DocMaker docMaker;
   private ThreadLocal<StringBuilder> threadBuffer = new ThreadLocal<StringBuilder>();
   private ThreadLocal<Matcher> threadNormalizer = new ThreadLocal<Matcher>();
-  private final String[] fieldsToWrite;;
+  private final String[] fieldsToWrite;
   private final boolean[] sufficientFields;
   private final boolean checkSufficientFields;
   
@@ -172,7 +172,7 @@ public int doLogic() throws Exception {
 
     boolean sufficient = !checkSufficientFields;
     for (int i=0; i<fieldsToWrite.length; i++) {
-      Field f = doc.getField(fieldsToWrite[i]);
+      Fieldable f = doc.getFieldable(fieldsToWrite[i]);
       String text = f == null ? "" : matcher.reset(f.stringValue()).replaceAll(" ").trim();
       sb.append(text).append(SEP);
       sufficient |= text.length()>0 && sufficientFields[i];
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils.java
index f760d07b..22285d53 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils.java
@@ -52,7 +52,7 @@
 		Type(String csfType) {
 			this.csfType = csfType;
 		}
-		private InputStream inputStream(InputStream in) throws IOException {
+		InputStream inputStream(InputStream in) throws IOException {
 			try {
 				return csfType==null ? in : new CompressorStreamFactory().createCompressorInputStream(csfType, in);
 			} catch (CompressorException e) {
@@ -60,7 +60,7 @@ private InputStream inputStream(InputStream in) throws IOException {
     		ioe.initCause(e);
     		throw ioe;			}  
 		}
-		private OutputStream outputStream(OutputStream os) throws IOException {
+		OutputStream outputStream(OutputStream os) throws IOException {
 			try {
 				return csfType==null ? os : new CompressorStreamFactory().createCompressorOutputStream(csfType, os);
 			} catch (CompressorException e) {
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark.java
index 73a76b5c..0e91b6fe 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark.java
@@ -23,7 +23,7 @@
 import org.apache.lucene.benchmark.quality.utils.SubmissionReport;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Searcher;
+import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TopDocs;
 
 /**
@@ -47,7 +47,7 @@
   protected QualityQueryParser qqParser;
   
   /** Index to be searched. */
-  protected Searcher searcher;
+  protected IndexSearcher searcher;
 
   /** index field to extract doc name for each search result; used for judging the results. */  
   protected String docNameField;
@@ -68,7 +68,7 @@
    *        and is important for judging the results.  
    */
   public QualityBenchmark(QualityQuery qqs[], QualityQueryParser qqParser, 
-      Searcher searcher, String docNameField) {
+      IndexSearcher searcher, String docNameField) {
     this.qualityQueries = qqs;
     this.qqParser = qqParser;
     this.searcher = searcher;
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java
index 5f92f08d..a604a8f7 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java
@@ -17,15 +17,6 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.benchmark.quality.trec.TrecJudge;
-import org.apache.lucene.benchmark.quality.trec.TrecTopicsReader;
-import org.apache.lucene.benchmark.quality.utils.SimpleQQParser;
-import org.apache.lucene.benchmark.quality.utils.SubmissionReport;
-import org.apache.lucene.benchmark.quality.*;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Searcher;
-import org.apache.lucene.store.FSDirectory;
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
@@ -33,6 +24,16 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import org.apache.lucene.benchmark.quality.Judge;
+import org.apache.lucene.benchmark.quality.QualityBenchmark;
+import org.apache.lucene.benchmark.quality.QualityQuery;
+import org.apache.lucene.benchmark.quality.QualityQueryParser;
+import org.apache.lucene.benchmark.quality.QualityStats;
+import org.apache.lucene.benchmark.quality.utils.SimpleQQParser;
+import org.apache.lucene.benchmark.quality.utils.SubmissionReport;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.store.FSDirectory;
 
 /**
  *
@@ -55,8 +56,9 @@ public static void main(String[] args) throws Exception {
     File qrelsFile = new File(args[1]);
     SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), "lucene");
     FSDirectory dir = FSDirectory.open(new File(args[3]));
+    IndexReader r = IndexReader.open(dir, true);
+    IndexSearcher searcher = new IndexSearcher(r);
     String fieldSpec = args.length == 5 ? args[4] : "T"; // default to Title-only if not specified.
-    Searcher searcher = new IndexSearcher(dir, true);
 
     int maxResults = 1000;
     String docNameField = "docname";
@@ -89,5 +91,10 @@ public static void main(String[] args) throws Exception {
     // print an avarage sum of the results
     QualityStats avg = QualityStats.average(stats);
     avg.log("SUMMARY", 2, logger, "  ");
+    
+    searcher.close();
+    r.close();
+    dir.close();
   }
+  
 }
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
index 3ca38776..540c7f11 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
@@ -90,7 +90,7 @@ public boolean isRelevant(String docName, QualityQuery query) {
 
   /** single Judgement of a trec quality query */
   private static class QRelJudgement {
-    private String queryID;
+    String queryID;
     private HashMap<String,String> relevantDocs;
     
     QRelJudgement(String queryID) {
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor.java
index 36399561..8ab80ab1 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor.java
@@ -20,7 +20,7 @@
 
 import org.apache.lucene.document.FieldSelector;
 import org.apache.lucene.document.FieldSelectorResult;
-import org.apache.lucene.search.Searcher;
+import org.apache.lucene.search.IndexSearcher;
 
 /**
  * Utility: extract doc names from an index
@@ -52,7 +52,7 @@ public FieldSelectorResult accept(String fieldName) {
    * @return the name of the input doc as extracted from the index.
    * @throws IOException if cannot extract the doc name from the index.
    */
-  public String docName(Searcher searcher, int docid) throws IOException {
+  public String docName(IndexSearcher searcher, int docid) throws IOException {
     return searcher.doc(docid,fldSel).get(docNameField);
   }
   
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport.java
index f9ea2d0d..2a02aa7c 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport.java
@@ -22,13 +22,13 @@
 
 import org.apache.lucene.benchmark.quality.QualityQuery;
 import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Searcher;
+import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TopDocs;
 
 /**
  * Create a log ready for submission.
  * Extend this class and override
- * {@link #report(QualityQuery, TopDocs, String, Searcher)}
+ * {@link #report(QualityQuery, TopDocs, String, IndexSearcher)}
  * to create different reports. 
  */
 public class SubmissionReport {
@@ -58,7 +58,7 @@ public SubmissionReport (PrintWriter logger, String name) {
    * @param searcher index access for fetching doc name.
    * @throws IOException in case of a problem.
    */
-  public void report(QualityQuery qq, TopDocs td, String docNameField, Searcher searcher) throws IOException {
+  public void report(QualityQuery qq, TopDocs td, String docNameField, IndexSearcher searcher) throws IOException {
     if (logger==null) {
       return;
     }
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
index 8fef290d..0715cd61 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
@@ -20,7 +20,6 @@
 import java.io.IOException;
 import java.util.Properties;
 
-import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.benchmark.BenchmarkTestCase;
 import org.apache.lucene.benchmark.byTask.PerfRunData;
@@ -30,6 +29,7 @@
 import org.apache.lucene.benchmark.byTask.tasks.TaskSequence;
 import org.apache.lucene.benchmark.byTask.utils.Config;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermQuery;
@@ -87,11 +87,14 @@ private void doTestIndexProperties(boolean setIndexProps,
     tasks.addTask(new AddDocTask(runData));
     tasks.addTask(new CloseIndexTask(runData));
     tasks.doLogic();
+    tasks.close();
     
-    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);
+    IndexReader r = IndexReader.open(runData.getDirectory(), true);
+    IndexSearcher searcher = new IndexSearcher(r);
     TopDocs td = searcher.search(new TermQuery(new Term("key", "value")), 10);
     assertEquals(numExpectedResults, td.totalHits);
     searcher.close();
+    r.close();
   }
   
   private Document createTestNormsDocument(boolean setNormsProp,
@@ -137,28 +140,28 @@ public void testNorms() throws Exception {
     
     // Don't set anything, use the defaults
     doc = createTestNormsDocument(false, false, false, false);
-    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());
-    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());
+    assertTrue(doc.getFieldable(DocMaker.TITLE_FIELD).getOmitNorms());
+    assertFalse(doc.getFieldable(DocMaker.BODY_FIELD).getOmitNorms());
     
     // Set norms to false
     doc = createTestNormsDocument(true, false, false, false);
-    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());
-    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());
+    assertTrue(doc.getFieldable(DocMaker.TITLE_FIELD).getOmitNorms());
+    assertFalse(doc.getFieldable(DocMaker.BODY_FIELD).getOmitNorms());
     
     // Set norms to true
     doc = createTestNormsDocument(true, true, false, false);
-    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());
-    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());
+    assertFalse(doc.getFieldable(DocMaker.TITLE_FIELD).getOmitNorms());
+    assertFalse(doc.getFieldable(DocMaker.BODY_FIELD).getOmitNorms());
     
     // Set body norms to false
     doc = createTestNormsDocument(false, false, true, false);
-    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());
-    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());
+    assertTrue(doc.getFieldable(DocMaker.TITLE_FIELD).getOmitNorms());
+    assertTrue(doc.getFieldable(DocMaker.BODY_FIELD).getOmitNorms());
     
     // Set body norms to true
     doc = createTestNormsDocument(false, false, true, true);
-    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());
-    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());
+    assertTrue(doc.getFieldable(DocMaker.TITLE_FIELD).getOmitNorms());
+    assertFalse(doc.getFieldable(DocMaker.BODY_FIELD).getOmitNorms());
   }
   
 }
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java
index 44a75d43..f6af35d8 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java
@@ -37,10 +37,12 @@
 import org.apache.lucene.benchmark.byTask.tasks.TaskSequence;
 import org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask;
 import org.apache.lucene.benchmark.byTask.utils.Config;
+import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.util.IOUtils;
 
 /** Tests the functionality of {@link LineDocSource}. */
 public class LineDocSourceTest extends BenchmarkTestCase {
@@ -110,8 +112,13 @@ private void doIndexAndSearchTest(File file, Class<? extends LineParser> linePar
   }
   
   private void doIndexAndSearchTestWithRepeats(File file, 
-      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {
+      Class<? extends LineParser> lineParserClass, int numAdds,
+      String storedField) throws Exception {
 
+    IndexReader reader = null;
+    IndexSearcher searcher = null;
+    PerfRunData runData = null;
+    try {
     Properties props = new Properties();
     
     // LineDocSource specific settings.
@@ -129,7 +136,7 @@ private void doIndexAndSearchTestWithRepeats(File file,
     
     // Create PerfRunData
     Config config = new Config(props);
-    PerfRunData runData = new PerfRunData(config);
+      runData = new PerfRunData(config);
 
     TaskSequence tasks = new TaskSequence(runData, "testBzip2", null, false);
     tasks.addTask(new CreateIndexTask(runData));
@@ -137,9 +144,14 @@ private void doIndexAndSearchTestWithRepeats(File file,
       tasks.addTask(new AddDocTask(runData));
     }
     tasks.addTask(new CloseIndexTask(runData));
+      try {
     tasks.doLogic();
+      } finally {
+        tasks.close();
+      }
     
-    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);
+      reader = IndexReader.open(runData.getDirectory(), true);
+      searcher = new IndexSearcher(reader);
     TopDocs td = searcher.search(new TermQuery(new Term("body", "body")), 10);
     assertEquals(numAdds, td.totalHits);
     assertNotNull(td.scoreDocs[0]);
@@ -148,8 +160,9 @@ private void doIndexAndSearchTestWithRepeats(File file,
       storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value
     }
     assertEquals("Wrong field value", storedField, searcher.doc(0).get(storedField));
-
-    searcher.close();
+    } finally {
+      IOUtils.close(searcher, reader, runData);
+    }
   }
   
   /* Tests LineDocSource with a bzip2 input stream. */
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java
index 110812b1..5d7abcd0 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java
@@ -132,6 +132,7 @@ private void assertReadText(File f) throws Exception {
     r.close();
   }
   
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
@@ -140,6 +141,7 @@ public void setUp() throws Exception {
     assertTrue(testDir.mkdirs());
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     _TestUtil.rmDir(testDir);
diff --git a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java
index 4cee2766..dcc0ff42 100644
--- a/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java
+++ b/lucene/dev/branches/lucene_solr_3_5/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java
@@ -22,6 +22,7 @@
 import org.apache.lucene.benchmark.quality.trec.TrecTopicsReader;
 import org.apache.lucene.benchmark.quality.utils.SimpleQQParser;
 import org.apache.lucene.benchmark.quality.utils.SubmissionReport;
+import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.store.Directory;
 
@@ -68,7 +69,8 @@ public void testTrecQuality() throws Exception {
     judge.validateData(qqs, logger);
     
     Directory dir = newFSDirectory(new File(getWorkDir(),"index"));
-    IndexSearcher searcher = new IndexSearcher(dir, true);
+    IndexReader r = IndexReader.open(dir, true);
+    IndexSearcher searcher = newSearcher(r);
 
     QualityQueryParser qqParser = new SimpleQQParser("title","body");
     QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);
@@ -134,6 +136,7 @@ public void testTrecQuality() throws Exception {
     }
     
     searcher.close();
+    r.close();
     dir.close();
   }
   
