diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
index 6b9dfed3..9572b454 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
@@ -206,7 +206,8 @@ private boolean shouldCast(DataTypeDescriptor newType,
 	 * @exception             StandardException Thrown on error.
 	 */
 	private DataTypeDescriptor findType(ValueNodeList thenElseList,
-		FromList fromList) throws StandardException
+		FromList fromList, SubqueryList subqueryList, Vector aggregateVector)
+		throws StandardException
 	{
 		/* We need to "prebind" because we want the Types.  Provide
 		 * dummy SubqueryList and AggreateList (we don't care)
@@ -214,11 +215,11 @@ private DataTypeDescriptor findType(ValueNodeList thenElseList,
 
 		ValueNode thenNode =
 			((ValueNode)thenElseList.elementAt(0)).bindExpression(
-				fromList, new SubqueryList(), new Vector());
+				fromList, subqueryList, aggregateVector);
 
 		ValueNode elseNode =
 			((ValueNode)thenElseList.elementAt(1)).bindExpression(
-				fromList, new SubqueryList(), new Vector());
+				fromList, subqueryList, aggregateVector);
 
 		DataTypeDescriptor thenType = thenNode.getTypeServices();
 		DataTypeDescriptor elseType = elseNode.getTypeServices();
@@ -257,7 +258,8 @@ private DataTypeDescriptor findType(ValueNodeList thenElseList,
 		if (isConditionalNode(thenNode))
 		{
 			theType =
-				findType(((ConditionalNode)thenNode).thenElseList, fromList);
+				findType(((ConditionalNode)thenNode).thenElseList, fromList,
+					subqueryList, aggregateVector);
 		}
 
 		if (theType != null) return theType;
@@ -266,7 +268,8 @@ private DataTypeDescriptor findType(ValueNodeList thenElseList,
 		if (isConditionalNode(elseNode))
 		{
 			theType =
-				findType(((ConditionalNode)elseNode).thenElseList, fromList);
+				findType(((ConditionalNode)elseNode).thenElseList, fromList,
+					subqueryList, aggregateVector);
 		}
 
 		if (theType != null) return theType;
@@ -386,15 +389,22 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 						thenElseList.elementAt(0), 
 						bcon.getLeftOperand().getTypeServices().getNullabilityType(true),
 						getContextManager());
-			thenElseList.setElementAt(cast,0);
-		} else {
-			recastNullNodes(thenElseList, findType(thenElseList, fromList));
- 		}
 
+			thenElseList.setElementAt(cast,0);
 		thenElseList.bindExpression(fromList,
 			subqueryList,
 			aggregateVector);
 
+		} else {
+			/* Following call to "findType()" will indirectly bind the
+			 * expressions in the thenElseList, so no need to call
+			 * "thenElseList.bindExpression(...)" after we do this.
+			 * DERBY-2986.
+			 */
+			recastNullNodes(thenElseList,
+				findType(thenElseList, fromList, subqueryList, aggregateVector));
+ 		}
+
 		// Can't get the then and else expressions until after they've been bound
 		ValueNode thenExpression = (ValueNode) thenElseList.elementAt(0);
 		ValueNode elseExpression = (ValueNode) thenElseList.elementAt(1);
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java
index 59375e79..85627c6b 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java
@@ -31,6 +31,7 @@
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.SQLUtilities;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
@@ -187,6 +188,43 @@ public void testAllDatatypesCombinationsForCaseExpressions()
         s.close();
     }
 
+    /**
+     * Test a query that has many WHEN conditions in it.  This is mostly
+     * checking for the performance regression filed as DERBY-2986.  That
+     * regression may not be noticeable in the scope of the full regression
+     * suite, but if this test is run standalone then this fixture could
+     * still be useful.
+     */
+    public void testMultipleWhens() throws SQLException
+    {
+        Statement s = createStatement();
+        JDBC.assertFullResultSet(
+            s.executeQuery(
+                "values CASE WHEN 10 = 1 THEN 'a' " +
+                "WHEN 10 = 2 THEN 'b' " +
+                "WHEN 10 = 3 THEN 'c' " +
+                "WHEN 10 = 4 THEN 'd' " +
+                "WHEN 10 = 5 THEN 'e' " +
+                "WHEN 10 = 6 THEN 'f' " +
+                "WHEN 10 = 7 THEN 'g' " +
+                "WHEN 10 = 8 THEN 'h' " +
+                "WHEN 10 = 11 THEN 'i' " +
+                "WHEN 10 = 12 THEN 'j' " +
+                "WHEN 10 = 15 THEN 'k' " +
+                "WHEN 10 = 16 THEN 'l' " +
+                "WHEN 10 = 23 THEN 'm' " +
+                "WHEN 10 = 24 THEN 'n' " +
+                "WHEN 10 = 27 THEN 'o' " +
+                "WHEN 10 = 31 THEN 'p' " +
+                "WHEN 10 = 41 THEN 'q' " +
+                "WHEN 10 = 42 THEN 'r' " +
+                "WHEN 10 = 50 THEN 's' " +
+                "ELSE '*' END"),
+            new String[][] {{"*"}});
+
+        s.close();
+    }
+
     /**
      * Runs the test fixtures in embedded.
      *
