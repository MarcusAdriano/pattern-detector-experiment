diff --git a/db/derby/code/branches/10.6/java/drda/org/apache/derby/impl/drda/ClientThread.java b/db/derby/code/branches/10.6/java/drda/org/apache/derby/impl/drda/ClientThread.java
index 45885193..42a9f1f8 100644
--- a/db/derby/code/branches/10.6/java/drda/org/apache/derby/impl/drda/ClientThread.java
+++ b/db/derby/code/branches/10.6/java/drda/org/apache/derby/impl/drda/ClientThread.java
@@ -57,21 +57,14 @@ public void run()
                 try { // Check for underlying InterruptedException,
                       // SSLException and IOException
 
-                    try{ // Check for PrivilegedActionException
-
+                    try { // Check for PrivilegedActionException
                         clientSocket = 
-                            (Socket) AccessController.doPrivileged(
-                                 new PrivilegedExceptionAction() {
-                                     public Object run() throws IOException
-                                     {
-                                         return serverSocket.accept();
-                                     }
-                                 }
-                                 );
+                                    acceptClientWithRetry();
                         // Server may have been shut down.  If so, close this
                         // client socket and break out of the loop.
                         // DERBY-3869
                         if (parent.getShutdown()) {
+                            if (clientSocket != null)
                             clientSocket.close();
                             return;
                         }
@@ -149,6 +142,52 @@ public Object run() throws IOException
         } // end for(;;)
         
     }// end run()
+
+    /**
+     * Perform a server socket accept. Allow three attempts with a one second
+     * wait between each
+     * 
+     * @return client socket or null if accept failed.
+     * 
+     */
+    private Socket acceptClientWithRetry() {
+        return (Socket) AccessController.doPrivileged(
+                new PrivilegedAction() {
+                    public Object run() {
+                        for (int trycount = 1; trycount <= 3; trycount++) {
+                            try {
+                                // DERBY-5347 Need to exit if
+                                // accept fails with IOException
+                                // Cannot just aimlessly loop
+                                // writing errors
+                                return serverSocket.accept();
+                            } catch (IOException acceptE) {
+                                // If not a normal shutdown,
+                                // log and shutdown the server
+                                if (!parent.getShutdown()) {
+                                    parent
+                                            .consoleExceptionPrintTrace(acceptE);
+                                    if (trycount == 3) {
+                                        // give up after three tries
+                                        parent.directShutdownInternal();
+                                    } else {
+                                        // otherwise wait 1 second and retry
+                                        try {
+                                            Thread.sleep(1000);
+                                        } catch (InterruptedException ie) {
+                                            parent
+                                            .consoleExceptionPrintTrace(ie);
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                        return null; // no socket to return after three tries
+                    }
+                }
+
+                );
+    }
 }
 
 
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/BaseStorageFactory.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/BaseStorageFactory.java
index 6894e63f..d61ed270 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/BaseStorageFactory.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/BaseStorageFactory.java
@@ -110,6 +110,15 @@ public String getCanonicalName() throws IOException
         return canonicalName;
     }
     
+    /**
+     * Set the canonicalName. May need adjustment due to DERBY-5096
+     * 
+     * @param name uniquely identifiable name for this database
+     */
+    public void setCanonicalName(String name) {
+       canonicalName = name;
+    }
+    
     /**
      * Construct a StorageFile from a path name.
      *
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java
index 22d4f723..d249836e 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java
@@ -188,6 +188,15 @@ public String getCanonicalName() {
         return canonicalName;
     }
 
+    /**
+     * Set the canonicalName. May need adjustment due to DERBY-5096
+     * 
+     * @param name uniquely identifiable name for this database
+     */
+    public void setCanonicalName(String name) {
+       canonicalName = name;
+    }
+    
     /**
      * Returns a handle to the specific storage file.
      *
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
index bced3369..a7d2341d 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
@@ -665,6 +665,11 @@ public Object run()
 
                             if (serviceDirectory.mkdirs())
                             {
+                                // DERBY-5096. The storageFactory canonicalName may need to be adjusted
+                                // for casing after the directory is created. Just reset it after making the 
+                                // the directory to make sure.
+                                String serviceDirCanonicalPath = serviceDirectory.getCanonicalPath();
+                                storageFactory.setCanonicalName(serviceDirCanonicalPath);
                                 try
                                 {
                                     return storageFactory.getCanonicalName();
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/io/StorageFactory.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/io/StorageFactory.java
index 315d01a4..5ec7ecfb 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/io/StorageFactory.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/io/StorageFactory.java
@@ -231,4 +231,12 @@ public void init( String home, String databaseName, String tempDirName, String u
      */
     public StorageFile createTemporaryFile (String prefix, String suffix)
                                                             throws IOException;
+    
+    /**
+     * Set the canonicalName. May need adjustment due to DERBY-5096
+     * 
+     * @param name uniquely identifiable name for this database
+     */
+    public void setCanonicalName(String name);
+    
 }
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptBaseStorageFactory.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptBaseStorageFactory.java
index b6174281..d5d197fc 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptBaseStorageFactory.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptBaseStorageFactory.java
@@ -117,6 +117,15 @@ public String getCanonicalName() throws IOException
 		return realStorageFactory.getCanonicalName();
     }
     
+    /**
+     * Set the canonicalName. May need adjustment due to DERBY-5096
+     * 
+     * @param name uniquely identifiable name for this database
+     */
+    public void setCanonicalName(String name) {
+       realStorageFactory.setCanonicalName(name);
+    }
+    
     /**
      * Construct a StorageFile from a path name.
      *
