diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java
index 4ed61930..fd474a12 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java
@@ -33,7 +33,7 @@
     private final AtomicLong hits = new AtomicLong(0);
     private final AtomicLong lastRequests = new AtomicLong(0);
     private final AtomicLong lastHits = new AtomicLong(0);
-    private volatile boolean capacityModified;
+    private volatile boolean capacitySetManually;
 
     public InstrumentedCache(int capacity)
     {
@@ -70,16 +70,21 @@ public int getCapacity()
         return capacity;
     }
 
-    public boolean isCapacityModified()
+    public boolean isCapacitySetManually()
     {
-        return capacityModified;
+        return capacitySetManually;
     }
 
-    public void setCapacity(int capacity)
+    public void updateCapacity(int capacity)
     {
         map.setCapacity(capacity);
         this.capacity = capacity;
-        capacityModified = true;
+    }
+
+    public void setCapacity(int capacity)
+    {
+        updateCapacity(capacity);
+        capacitySetManually = true;
      }
 
     public int getSize()
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 820877d5..57ac1c92 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1140,6 +1140,16 @@ public void invalidateRowCache()
         ssTables_.getRowCache().clear();
     }
 
+    public int getRowCacheSize()
+    {
+        return ssTables_.getRowCache().getCapacity();
+    }
+
+    public int getKeyCacheSize()
+    {
+        return ssTables_.getKeyCache().getCapacity();
+    }
+
     public static Iterable<ColumnFamilyStore> all()
     {
         Iterable<ColumnFamilyStore>[] stores = new Iterable[DatabaseDescriptor.getTables().size()];
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java
index 1192a9d5..4ad878d3 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java
@@ -107,7 +107,7 @@ public synchronized void updateCacheSizes()
     {
         long keys = estimatedKeys();
 
-        if (!keyCache.isCapacityModified())
+        if (!keyCache.isCapacitySetManually())
         {
             int keyCacheSize = DatabaseDescriptor.getKeysCachedFor(ksname, cfname, keys);
             if (keyCacheSize != keyCache.getCapacity())
@@ -115,18 +115,18 @@ public synchronized void updateCacheSizes()
                 // update cache size for the new key volume
                 if (logger.isDebugEnabled())
                     logger.debug("key cache capacity for " + cfname + " is " + keyCacheSize);
-                keyCache.setCapacity(keyCacheSize);
+                keyCache.updateCapacity(keyCacheSize);
             }
         }
 
-        if (!rowCache.isCapacityModified())
+        if (!rowCache.isCapacitySetManually())
         {
             int rowCacheSize = DatabaseDescriptor.getRowsCachedFor(ksname, cfname, keys);
             if (rowCacheSize != rowCache.getCapacity())
             {
                 if (logger.isDebugEnabled())
                     logger.debug("row cache capacity for " + cfname + " is " + rowCacheSize);
-                rowCache.setCapacity(rowCacheSize);
+                rowCache.updateCapacity(rowCacheSize);
             }
         }
     }
diff --git a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
index 2bdcd51b..0ae0e9d1 100644
--- a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
+++ b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
@@ -19,13 +19,8 @@
 package org.apache.cassandra.db;
 
 import java.io.IOException;
-import java.net.InetAddress;
-import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
 
 import org.junit.Test;
 
@@ -33,7 +28,6 @@
 import org.apache.cassandra.db.filter.IdentityQueryFilter;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.io.SSTableReader;
-import org.apache.cassandra.utils.FBUtilities;
 
 import static junit.framework.Assert.assertEquals;
 import static org.apache.cassandra.db.TableTest.assertColumns;
@@ -133,4 +127,59 @@ public void testCompactionPurgeOneFile() throws IOException, ExecutionException,
         ColumnFamily cf = table.getColumnFamilyStore(cfName).getColumnFamily(new IdentityQueryFilter(key, new QueryPath(cfName)));
         assert cf == null : cf;
     }
+
+    @Test
+    public void testKeyCache50() throws IOException, ExecutionException, InterruptedException
+    {
+        testKeyCache("Standard3", 64);
+    }
+
+    @Test
+    public void testKeyCache100() throws IOException, ExecutionException, InterruptedException
+    {
+        testKeyCache("Standard4", 128);
+    }
+
+    public void testKeyCache(String cfname, int expectedCacheSize) throws IOException, ExecutionException, InterruptedException
+    {
+        CompactionManager.instance.disableAutoCompaction();
+
+        Table table = Table.open(TABLE1);
+        String cfName = cfname;
+        ColumnFamilyStore store = table.getColumnFamilyStore(cfName);
+
+        // KeyCache should start at size 1 if we're caching X% of zero data.
+        int keyCacheSize = store.getKeyCacheSize();
+        assert keyCacheSize == 1 : keyCacheSize;
+
+        String key1 = "key1";
+        String key2 = "key2";
+        RowMutation rm;
+
+        // inserts
+        rm = new RowMutation(TABLE1, key1);
+        rm.add(new QueryPath(cfName, null, "1".getBytes()), new byte[0], 0);
+        rm.apply();
+        rm = new RowMutation(TABLE1, key2);
+        rm.add(new QueryPath(cfName, null, "2".getBytes()), new byte[0], 0);
+        rm.apply();
+
+        // deletes
+        rm = new RowMutation(TABLE1, key1);
+        rm.delete(new QueryPath(cfName, null, "1".getBytes()), 1);
+        rm.apply();
+        rm = new RowMutation(TABLE1, key2);
+        rm.delete(new QueryPath(cfName, null, "2".getBytes()), 1);
+        rm.apply();
+
+        // After a flush, the cache should expand to be X% of indices * INDEX_INTERVAL.
+        store.forceBlockingFlush();
+        keyCacheSize = store.getKeyCacheSize();
+        assert keyCacheSize == expectedCacheSize : keyCacheSize;
+
+        // After a compaction, the cache should expand to be X% of zero data.
+        CompactionManager.instance.submitMajor(store, 0, Integer.MAX_VALUE).get();
+        keyCacheSize = store.getKeyCacheSize();
+        assert keyCacheSize == 1 : keyCacheSize;
+    }
 }
