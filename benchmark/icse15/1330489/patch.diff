diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java
index 1aa3f020..bd5b717d 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java
@@ -118,6 +118,16 @@ protected void decorateSQL(Statement s) throws SQLException {
                     "on l.xid = t.xid " +
                     "where l.tableType <> 'S' and " +
                     "      t.type='UserTransaction'");
+                
+                // Create a procedure to be called before checking on contents
+                // to ensure that the background worker thread has completed 
+                // all the post-commit work.
+                s.execute(
+                    "CREATE PROCEDURE WAIT_FOR_POST_COMMIT() " +
+                    "LANGUAGE JAVA EXTERNAL NAME " +
+                    "'org.apache.derbyTesting.functionTests.util." +
+                    "T_Access.waitForPostCommitToFinish' " +
+                    "PARAMETER STYLE JAVA");
             }
         };
     }
@@ -1210,6 +1220,8 @@ private void updatecursorlocks(
                 )
             ));
         commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         commit();
@@ -2077,6 +2089,8 @@ private void updatecursorlocks(
                 )
             ));
         commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
 
@@ -2369,6 +2383,8 @@ private void updatecursorlocks(
                 )
             ));
         commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
 
@@ -2449,6 +2465,8 @@ private void updatesetlocks(
                     {_app, _ut, _t, "2", _IX, _A, _tl, _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2585,6 +2603,8 @@ private void updatesetlocks(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2622,6 +2642,8 @@ private void updatesetlocks(
                     {_app, _ut, _t, "2", _IX, _A, _tl, _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2813,6 +2835,8 @@ private void updatesetlocks(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -2968,6 +2992,8 @@ private void updatesetlocks(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -4481,6 +4507,8 @@ private void updateBtreeCursorLocks1(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -5959,6 +5987,8 @@ private void updateBtreeCursorLocks2(
              )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6096,6 +6126,8 @@ private void updateBtreeCursorLocks2(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6533,6 +6565,8 @@ private void updateBtreeCursorLocks2(
                 )
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6731,6 +6765,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "2", _X, _A, "(4,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6754,6 +6790,8 @@ private void updateBtreeSetLocks (
                 {"7", "70", pad2("seven", pad), pad2("index pad 7", idxPad)}});
 
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         /* ------------------------------------------------------------
          * Test full cursor scan which deletes "even" rows.
          * ------------------------------------------------------------
@@ -6819,6 +6857,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "2", _X, _A, "(6,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -6862,6 +6902,8 @@ private void updateBtreeSetLocks (
         s.executeUpdate(
             "delete from a where (a = 2 or a = 4 or a = 6) and (b < 8)");
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -7165,6 +7207,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "1", _X, _A, "(2,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         s.executeUpdate(
             "update a  set b = -b where a = 2");
         ltrs = getLocks();
@@ -7293,6 +7337,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "1", _X, _A, "(7,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         JDBC.assertUnorderedResultSet(
@@ -7373,6 +7419,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "2", _X, _A, "(7,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
@@ -7528,6 +7576,8 @@ private void updateBtreeSetLocks (
                     {_app, _ut, _r, "3", _X, _A, "(3,6)", _g, _a}}
             ));
         c.commit();
+        // wait for post-commit tasks before going on
+        s.execute("call wait_for_post_commit()");
         ltrs = getLocks();
         JDBC.assertEmpty(ltrs);
         c.commit();
