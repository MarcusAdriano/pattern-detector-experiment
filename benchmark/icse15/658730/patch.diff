diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
index 2f4b8ec4..7c81d684 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
@@ -705,48 +705,13 @@ private Member resolveMethod(
 					continue;
 				}
 
-				/* Not the first match, so find out which one, if either one,
-				 * has the best match on the parameters.  (No narrowing
-				 * conversions.)  15.11 of Java Language Specification.
-				 */
-
-				Member candidateMethod = methods[candidateIndex];
-
-				// If the candidate method is more specific than the current
-				// method then the candidate method is still the maximally specific method
-				// Note at this point we could still have a ambiguous situation.
-
-				boolean candidateMoreOrEqual = isMethodMoreSpecificOrEqual(
-							candidateMethod, currentMethod, isParam);
-				boolean currentMoreOrEqual = isMethodMoreSpecificOrEqual(
-							currentMethod, candidateMethod, isParam);
-				if (candidateMoreOrEqual && ! currentMoreOrEqual) {
-					if (SanityManager.DEBUG) {
-					  if (SanityManager.DEBUG_ON("MethodResolutionInfo")) {
-						SanityManager.DEBUG("MethodResolutionInfo",
-						"MRI - Candidate is still maximally specific");
-					  }
-					}
-					methods[i] = null; // remove non-applicable methods
-					continue;
-				}
-
-				// if the current method is more specific than the candidiate
-				// method then it becomes the new maximally specific method
-				// Note at this point we could still have a ambiguous situation.
-
-				if (currentMoreOrEqual && ! candidateMoreOrEqual) {
-					if (SanityManager.DEBUG) {
-					  if (SanityManager.DEBUG_ON("MethodResolutionInfo")) {
-						SanityManager.DEBUG("MethodResolutionInfo",
-						"MRI - Current method is now candidate, replaced previous candidate");
-					  }
-					}
-					methods[candidateIndex] = null; // remove non-applicable methods
-					candidateIndex = i;
-					somethingChanged = true;
-					continue;
-				}
+                //
+                // Before the fixes to DERBY-3652, we used to weed out
+                // ambiguities by applying the rules from section 15.11
+                // of the Java Language Specification. These are not the
+                // ANSI resolution rules however. The code to weed out
+                // ambiguities has been removed.
+                //
 
 				/* We have seen an ambiguous situation; one of the cases may
 				 * tie on each parameter.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
index 6563fb49..76e74315 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
@@ -86,7 +86,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public  static  Short   smallint_unres_Short( double a ) { return new Short( (short) a ); }
     public  static  Short   smallint_unres_Short( Byte a ) { return new Short( a.shortValue() ); }
     public  static  Short   smallint_unres_Short( Short a ) { return new Short( a.shortValue() ); }
-    public  static  Short   smallint_unres_Short( Integer a ) { return new Short( a.shortValue() ); }
     public  static  Short   smallint_unres_Short( Long a ) { return new Short( a.shortValue() ); }
     public  static  Short   smallint_unres_Short( Float a ) { return new Short( a.shortValue() ); }
     public  static  Short   smallint_unres_Short( Double a ) { return new Short( a.shortValue() ); }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
index 5cc8759b..7e37487c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
@@ -260,14 +260,14 @@ public  void    test_smallint_bad_Short_Short()
     public  void    test_smallint_amb_short_short()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "smallint_amb_short_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
+        declareAndFailFunction
+            ( "smallint_amb_short_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
     }
     public  void    test_smallint_amb_Integer_short()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "smallint_amb_Integer_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
+        declareAndFailFunction
+            ( "smallint_amb_Integer_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
     }
 
     public  void    test_integer_amb_int_int()
