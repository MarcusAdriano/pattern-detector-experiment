diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
index aca4e500..cf247e71 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
@@ -191,6 +191,12 @@ ResultSet executeSubStatement(LanguageConnectionContext lcc,
 	 */
 	DataTypeDescriptor[]	getParameterTypes();
 
+	/**
+     * Get the type of the parameter at the given (0-based) index.
+     * Raises an exception if the index is out of range.
+     */
+    DataTypeDescriptor  getParameterType( int idx ) throws StandardException;
+
 	/**
 	 *	Return the SQL string that this statement is for.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultDescription.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultDescription.java
index 3ce978f6..36ae60b6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultDescription.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultDescription.java
@@ -54,6 +54,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	*/
 	public ResultColumnDescriptor[] getColumnInfo();
 
+	/**
+     * Return the information about a single column (0-based indexing)
+     */
+    public  ResultColumnDescriptor  getColumnInfo( int idx );
+
 	/**
 	 * Returns a ResultColumnDescriptor for the column, given the ordiinal
 	 * position of the column.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index 5ef5bf98..64aca21b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -1551,55 +1551,21 @@ public final ParameterValueSet getParms() {
 	}
 
 
-	/**
-		Check the parameterINdex is in range and return the
-		array of type descriptors.
-
-		@exception SQLException parameter is out of range
-	*/
-	protected final DataTypeDescriptor[] getTypes(int parameterIndex)
-		throws SQLException {
-
-		DataTypeDescriptor[] types = preparedStatement.getParameterTypes();
-
-		if (types == null) {
-			throw newSQLException(SQLState.NO_INPUT_PARAMETERS);
-		}
-
-		/* Check that the parameterIndex is in range. */
-		if (parameterIndex < 1 ||
-				parameterIndex > types.length) {
-
-			/* This message matches the one used by the DBMS */
-			throw newSQLException(SQLState.LANG_INVALID_PARAM_POSITION, 
-            new Integer(parameterIndex), new Integer(types.length));
-		}
-		return types;
-	}
-
 	/**
 		Get the target JDBC type for a parameter. Will throw exceptions
-		if the parameter index is out of range
+		if the parameter index is out of range. The parameterIndex is 1-based.
 
 		@exception SQLException parameter is out of range
 	*/
 	protected int getParameterJDBCType(int parameterIndex)
-		throws SQLException {
-
-		DataTypeDescriptor[] types = getTypes(parameterIndex);
-
-		int type = types[parameterIndex -1] == null ? 
-			Types.OTHER :
-			types[parameterIndex - 1].getTypeId().getJDBCTypeId();
+		throws SQLException
+    {
+        try {
+            DataTypeDescriptor dtd = preparedStatement.getParameterType( parameterIndex-1 );
 
-		if (SanityManager.DEBUG) {
-			//int pmType = getEmbedParameterSetMetaData().getParameterType(parameterIndex);
-			//if (type != pmType) {
-				//SanityManager.THROWASSERT("MISMATCH PARAMETER META DATA param " + parameterIndex + " types " + type + " != " + pmType + "\n" + SQLText);
-			//}
-		}
+            return (dtd == null) ? Types.OTHER : dtd.getTypeId().getJDBCTypeId();
 
-		return type;
+		} catch (StandardException t) { throw EmbedResultSet.noStateChangeException(t); }
 	}
 
     /**
@@ -1610,9 +1576,14 @@ protected int getParameterJDBCType(int parameterIndex)
      * @throws SQLException if parameter is out of range
      */
     protected final String getParameterSQLType(int parameterIndex)
-            throws SQLException {
-        DataTypeDescriptor[] pTypes = getTypes(parameterIndex);
-        return pTypes[parameterIndex-1].getTypeName();
+            throws SQLException
+    {
+        try {
+            DataTypeDescriptor dtd = preparedStatement.getParameterType( parameterIndex-1 );
+
+            return (dtd == null) ? null : dtd.getTypeName();
+            
+		} catch (StandardException t) { throw EmbedResultSet.noStateChangeException(t); }
     }
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index 59b27327..cfb07b4c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.cache.Cacheable;
 
 import org.apache.derby.catalog.UUID;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.uuid.UUIDFactory;
 import org.apache.derby.iapi.util.ByteArray;
 import org.apache.derby.iapi.util.ReuseFactory;
@@ -48,6 +49,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.PreparedStatement;
 import org.apache.derby.iapi.sql.Statement;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
+import org.apache.derby.iapi.types.DataTypeUtilities;
 import org.apache.derby.iapi.sql.ResultDescription;
 import org.apache.derby.iapi.sql.ResultSet;
 import org.apache.derby.iapi.sql.Activation;
@@ -488,9 +490,33 @@ public ResultDescription	getResultDescription()	{
 	}
 
 	public DataTypeDescriptor[]	getParameterTypes()	{
-		return paramTypeDescriptors;
+		return (DataTypeDescriptor[]) ArrayUtil.copy( paramTypeDescriptors );
+	}
+
+    /** Return the type of the parameter (0-based indexing) */
+    public DataTypeDescriptor  getParameterType( int idx ) throws StandardException
+    {
+		if ( paramTypeDescriptors == null )
+        {
+			throw StandardException.newException( SQLState.NO_INPUT_PARAMETERS );
 	}
 
+		/* Check that the parameterIndex is in range. */
+		if ( (idx < 0) || (idx >= paramTypeDescriptors.length) )
+        {
+			/* This message matches the one used by the DBMS */
+			throw StandardException.newException
+                (
+                 SQLState.LANG_INVALID_PARAM_POSITION, 
+                 new Integer( idx+1 ),
+                 new Integer( paramTypeDescriptors.length )
+                 );
+		}
+
+        return paramTypeDescriptors[ idx ];
+    }
+    
+
 	public String getSource() {
 		return (sourceTxt != null) ?
 			sourceTxt : 
@@ -571,7 +597,7 @@ public long getGenerateTimeInMillis()
 	 */
 	public Timestamp getBeginCompileTimestamp()
 	{
-		return beginCompileTimestamp;
+		return DataTypeUtilities.clone( beginCompileTimestamp );
 	}
 
 	/**
@@ -581,7 +607,7 @@ public Timestamp getBeginCompileTimestamp()
 	 */
 	public Timestamp getEndCompileTimestamp()
 	{
-		return endCompileTimestamp;
+		return DataTypeUtilities.clone( endCompileTimestamp );
 	}
 
 	void setCompileTimeWarnings(SQLWarning warnings) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java
index 96fa24ae..aa7aeeff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.io.FormatIdUtil;
 import org.apache.derby.iapi.services.io.Formatable;
@@ -145,9 +146,11 @@ public int	getColumnCount()
 	}
 
 	public ResultColumnDescriptor[] getColumnInfo() {
-		return columns;
+		return (ResultColumnDescriptor[]) ArrayUtil.copy( columns );
 	}
 
+    public  ResultColumnDescriptor  getColumnInfo( int idx ) { return columns[ idx ]; }
+
 	/**
 	 * position is 1-based.
 	 * @see ResultDescription#getColumnDescriptor
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericAggregator.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericAggregator.java
index 4aeb619a..f86ba5a3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericAggregator.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GenericAggregator.java
@@ -312,7 +312,7 @@ ExecAggregator getAggregatorInstance()
                     (
                      cf,
                      aggInfo.getAggregateName(),
-                     aggInfo.getResultDescription().getColumnInfo()[ 0 ].getType()
+                     aggInfo.getResultDescription().getColumnInfo( 0 ).getType()
                      );
 
 			} catch (Exception e)
