diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 758c8bf7..6da76810 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1353,9 +1353,9 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
                 if (rows.size() == clause.count)
                     break outer;
             }
-            startKey = dataKey;
-            if (n < clause.count)
+            if (n < clause.count || Arrays.equals(startKey, dataKey))
                 break;
+            startKey = dataKey;
         }
 
         return rows;
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index d1986a1b..315888fc 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -182,12 +182,20 @@ public void testIndexScan() throws IOException
         assert rows.get(0).cf.getColumnCount() == 1 : rows.get(0).cf;
 
         // once more, this time with a slice rowset that needs to be expanded
-        SliceQueryFilter sqf = new SliceQueryFilter(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, 0);
-        rows = Table.open("Keyspace1").getColumnFamilyStore("Indexed1").scan(clause, range, sqf);
+        SliceQueryFilter emptyFilter = new SliceQueryFilter(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, 0);
+        rows = Table.open("Keyspace1").getColumnFamilyStore("Indexed1").scan(clause, range, emptyFilter);
 
         assert rows.size() == 1 : StringUtils.join(rows, ",");
         assert Arrays.equals("k3".getBytes(), rows.get(0).key.key);
         assert rows.get(0).cf.getColumnCount() == 0;
+
+        // query with index hit but rejected by secondary clause, with a small enough count that just checking count
+        // doesn't tell the scan loop that it's done
+        IndexExpression expr3 = new IndexExpression("notbirthdate".getBytes("UTF8"), IndexOperator.EQ, FBUtilities.toByteArray(-1L));
+        clause = new IndexClause(Arrays.asList(expr, expr3), ArrayUtils.EMPTY_BYTE_ARRAY, 1);
+        rows = Table.open("Keyspace1").getColumnFamilyStore("Indexed1").scan(clause, range, filter);
+
+        assert rows.isEmpty();
     }
 
     @Test
