diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java
index f642f86d..1b40d3fd 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java
@@ -37,6 +37,7 @@
 import org.apache.mahout.math.Matrix;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.stats.GlobalOnlineAuc;
+import org.apache.mahout.math.stats.OnlineAuc;
 
 import java.io.FileWriter;
 import java.io.IOException;
@@ -57,6 +58,7 @@
     gb.registerTypeAdapter(AdaptiveLogisticRegression.class, new AdaptiveLogisticRegressionTypeAdapter());
     gb.registerTypeAdapter(Mapping.class, new MappingTypeAdapter());
     gb.registerTypeAdapter(PriorFunction.class, new PriorTypeAdapter());
+    gb.registerTypeAdapter(OnlineAuc.class, new AucTypeAdapter());
     gb.registerTypeAdapter(CrossFoldLearner.class, new CrossFoldLearnerTypeAdapter());
     gb.registerTypeAdapter(Vector.class, new VectorTypeAdapter());
     gb.registerTypeAdapter(Matrix.class, new MatrixTypeAdapter());
@@ -146,6 +148,31 @@ public JsonElement serialize(PriorFunction priorFunction,
     }
   }
 
+  private static class AucTypeAdapter implements JsonDeserializer<OnlineAuc>, JsonSerializer<OnlineAuc> {
+    @Override
+    public OnlineAuc deserialize(JsonElement jsonElement,
+                                     Type type,
+                                     JsonDeserializationContext jsonDeserializationContext) {
+      JsonObject x = jsonElement.getAsJsonObject();
+      try {
+        return jsonDeserializationContext.deserialize(x.get("value"), Class.forName(x.get("class").getAsString()));
+      } catch (ClassNotFoundException e) {
+        throw new IllegalStateException("Can't understand serialized data, found bad type: "
+            + x.get("class").getAsString());
+      }
+    }
+
+    @Override
+    public JsonElement serialize(OnlineAuc auc,
+                                 Type type,
+                                 JsonSerializationContext jsonSerializationContext) {
+      JsonObject r = new JsonObject();
+      r.add("class", new JsonPrimitive(auc.getClass().getName()));
+      r.add("value", jsonSerializationContext.serialize(auc));
+      return r;
+    }
+  }
+
   private static class CrossFoldLearnerTypeAdapter implements JsonDeserializer<CrossFoldLearner> {
     @Override
     public CrossFoldLearner deserialize(JsonElement jsonElement,
@@ -154,7 +181,7 @@ public CrossFoldLearner deserialize(JsonElement jsonElement,
       CrossFoldLearner r = new CrossFoldLearner();
       JsonObject x = jsonElement.getAsJsonObject();
       r.setRecord(x.get("record").getAsInt());
-      r.setAucEvaluator(jsonDeserializationContext.<GlobalOnlineAuc>deserialize(x.get("auc"), GlobalOnlineAuc.class));
+      r.setAucEvaluator(jsonDeserializationContext.<OnlineAuc>deserialize(x.get("auc"), OnlineAuc.class));
       r.setLogLikelihood(x.get("logLikelihood").getAsDouble());
 
       JsonArray models = x.get("models").getAsJsonArray();
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/ModelSerializerTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/ModelSerializerTest.java
index c0ba9d29..9f2da4bd 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/ModelSerializerTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/ModelSerializerTest.java
@@ -69,7 +69,7 @@ public void onlineAucRoundtrip() {
       auc1.addSample(0, gen.nextGaussian());
       auc1.addSample(1, gen.nextGaussian() + 1);
     }
-    assertEquals(0.76, auc1.auc(), 0.04);
+    assertEquals(0.76, auc1.auc(), 0.01);
 
     Gson gson = ModelSerializer.gson();
     String s = gson.toJson(auc1);
@@ -87,6 +87,23 @@ public void onlineAucRoundtrip() {
     }
 
     assertEquals(auc1.auc(), auc2.auc(), 0.01);
+
+    Foo x = new Foo();
+    x.foo = auc1;
+    x.pig = 3.13;
+    x.dog = 42;
+
+    s = gson.toJson(x);
+
+    Foo y = gson.fromJson(s, Foo.class);
+
+    assertEquals(auc1.auc(), y.foo.auc(), 0.01);
+  }
+
+  public static class Foo {
+    OnlineAuc foo;
+    double pig;
+    int dog;
   }
 
   @Test
