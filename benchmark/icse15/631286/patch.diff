diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
index a0cafeee..0a4ebe0d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java
@@ -191,7 +191,6 @@ public static Test suite()
     }
     
     public void tearDown() throws Exception {
-        try {
             AccessController.doPrivileged
             (new java.security.PrivilegedAction(){
                 public Object run(){
@@ -199,9 +198,6 @@ public Object run(){
                             "derby.drda.securityMechanism");
                 }
             });
-        } catch (Exception e) {
-            fail("warning: could not remove secmec settings");
-        }
         super.tearDown();
     }
 
@@ -1033,13 +1029,12 @@ private void assertSecMecWithConnPoolingOK(
      * @throws Exception if there is any error
      */
     private void assertConnectionOK(Connection conn)
-    throws Exception
+    throws SQLException
     {
         Statement stmt = conn.createStatement();
         ResultSet rs = null;
         // To test our connection, we will try to do a select from the 
         // system catalog tables
-        try {
             rs = stmt.executeQuery("select count(*) from sys.systables");
             int updatecount=0;
             while(rs.next())
@@ -1048,9 +1043,6 @@ private void assertConnectionOK(Connection conn)
                 updatecount++;
             }
             assertEquals(1,updatecount);
-        } catch (SQLException sqle) {
-            fail("should not have failed");
-        }
         
         if(rs != null)
             rs.close();
@@ -1102,7 +1094,7 @@ private void assertConnectionOK(Connection conn)
      * the security mechanism.
      */
     private void assertDerby1080Fixed(String expectedValue)
-    {
+            throws Exception {
         try
         {
             // simulate connection re-set using connection pooling on a pooled
@@ -1127,10 +1119,6 @@ private void assertDerby1080Fixed(String expectedValue)
             // for debugging, uncomment:
             // dumpSQLException(sqle.getNextException());
         }
-        catch (Exception e)
-        {
-            fail("did not expect an exception");
-        }
     }
 
     /**
@@ -1143,11 +1131,9 @@ private void assertDerby1080Fixed(String expectedValue)
      * @throws Exception if there an unexpected error
      */
     private void assertUSRSSBPWD_with_BUILTIN(String[] expectedValues)
-    {
+            throws Exception {
         // Turn on Derby BUILTIN authentication and attempt connecting with
         // USRSSBPWD security mechanism.
-        try
-        {
             println("Turning ON Derby BUILTIN authentication");
             Connection conn = getDataSourceConnectionWithSecMec(
                 "neelima", "lee", new Short(SECMEC_USRSSBPWD));
@@ -1227,16 +1213,10 @@ private void assertUSRSSBPWD_with_BUILTIN(String[] expectedValues)
                 "user=APP;password=APP;shutdown=true;securityMechanism=" +
                 SECMEC_USRSSBPWD),"USRSSBPWD + BUILTIN (T5):", expectedValues[4]);
         } 
-        catch (Exception e)
-        {
-            fail("unexpected exception testing USRSSBPWD_with_BUILTIN()");
-        }
-    }
     
     private Connection getDataSourceConnectionWithSecMec(
         String user, String password, Short secMec)
-    {
-        Connection conn = null;
+            throws Exception {
         String securityMechanismProperty = "SecurityMechanism";
         Class[] argType = { Short.TYPE };
         String methodName = getSetterName(securityMechanismProperty);
@@ -1244,23 +1224,9 @@ private Connection getDataSourceConnectionWithSecMec(
         args[0] = secMec;
 
         DataSource ds = getDS(user, password);
-        try {
             Method sh = ds.getClass().getMethod(methodName, argType);
             sh.invoke(ds, args);
-            conn = ds.getConnection();
-        }
-        catch (SQLException sqle)
-        {
-            // Exceptions expected in certain cases depending on JCE used for 
-            // running the test, but in this case, we don't expect any
-            // sqlexceptions
-            fail("did not expect an sqlexception.");
-        }
-        catch (Exception e)
-        {
-            fail("did not expect exception.");
-        }
-        return conn;
+        return ds.getConnection();
     }
 
     private String getJDBCUrl(String attrs) {
