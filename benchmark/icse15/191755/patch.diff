diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
index 0f05220d..9e24b95f 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
@@ -33,6 +33,12 @@
 import java.io.ObjectOutput;
 import java.io.ObjectInput;
 
+import java.lang.reflect.*;
+
+import org.apache.derby.iapi.reference.JDBC30Translation;
+import org.apache.derby.iapi.error.PublicAPI;
+import org.apache.derby.iapi.error.StandardException;
+
 /**
  * This is a rudimentary connection that delegates
  * EVERYTHING to Connection.
@@ -40,6 +46,9 @@
 public class BrokeredConnection implements Connection
 {
 
+	// default for Derby
+	protected int stateHoldability = JDBC30Translation.HOLD_CURSORS_OVER_COMMIT;
+
 	protected final BrokeredConnectionControl control;
 	private boolean isClosed;
 
@@ -383,6 +392,15 @@ public void syncState() throws SQLException {
 		stateIsolationLevel = conn.getTransactionIsolation();
 		stateReadOnly = conn.isReadOnly();
 		stateAutoCommit = conn.getAutoCommit();
+		// jdk13 does not have Connection.getHoldability method and hence using
+		// reflection to cover both jdk13 and higher jdks
+		try {
+			Method sh = conn.getClass().getMethod("getHoldability", null);
+			stateHoldability = ((Integer)sh.invoke(conn, null)).intValue();
+		} catch( Exception e)
+		{
+			throw PublicAPI.wrapStandardException( StandardException.plainWrapException( e));
+		}       
 	}
 
 	/**
@@ -396,6 +414,8 @@ public void syncState() throws SQLException {
 		
 	*/
 	public void setState(boolean complete) throws SQLException {
+		Class[] CONN_PARAM = { Integer.TYPE };
+		Object[] CONN_ARG = { new Integer(stateHoldability)};
 
 		Connection conn = getRealConnection();
 
@@ -403,6 +423,18 @@ public void setState(boolean complete) throws SQLException {
 			conn.setTransactionIsolation(stateIsolationLevel);
 			conn.setReadOnly(stateReadOnly);
 			conn.setAutoCommit(stateAutoCommit);
+			// make the underlying connection pick my holdability state
+			// since holdability is a state of the connection handle
+			// not the underlying transaction.
+			// jdk13 does not have Connection.setHoldability method and hence using
+			// reflection to cover both jdk13 and higher jdks
+			try {
+				Method sh = conn.getClass().getMethod("setHoldability", CONN_PARAM);
+				sh.invoke(conn, CONN_ARG);
+			} catch( Exception e)
+			{
+				throw PublicAPI.wrapStandardException( StandardException.plainWrapException( e));
+			}
 		}
 	}
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java
index ae044b62..3c2e1f1b 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java
@@ -33,9 +33,6 @@
 public class BrokeredConnection30 extends BrokeredConnection
 {
 	
-	// default for Cloudscape
-	private int stateHoldability = java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT;
-
 	public	BrokeredConnection30(BrokeredConnectionControl control)
 	{
 		super(control);
@@ -216,19 +213,6 @@ public final PreparedStatement prepareStatement(
 			throw se;
 		}
 	}
-	public void syncState() throws SQLException {
-		super.syncState();
-		// make the underlying connection pick my holdability state
-		// since holdability is a state of the connection handle
-		// not the underlying transaction.
-		getRealConnection().setHoldability(stateHoldability);
-	}
-
-	public void setState(boolean complete) throws SQLException {
-		super.setState(complete);
-		if (complete) 
-			getRealConnection().setHoldability(stateHoldability);
-	}
 
 	public BrokeredPreparedStatement newBrokeredStatement(BrokeredStatementControl statementControl, String sql, Object generatedKeys) throws SQLException {
 		return new BrokeredPreparedStatement30(statementControl, getJDBCLevel(), sql, generatedKeys);
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
index d0baf626..2ddd9c28 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
@@ -127,8 +127,11 @@ public void setProperties() {
 						   TestUtil.getJdbcUrlPrefix("localhost",
 													 NETWORKSERVER_PORT) +
 						   "wombat;create=true");
+		if (TestUtil.isJCCFramework())
+		{
 		System.setProperty("ij.user", "EDWARD");
 		System.setProperty("ij.password", "noodle");
+		}
 
 	}
 
@@ -186,8 +189,10 @@ private Properties addRequiredAttributes(Properties attrs)
 		{
 			attrs.setProperty("driverType","4");
 		}
-
+		if (TestUtil.isJCCFramework())
+		{
 		attrs.setProperty("serverName","localhost");
+		}
 		attrs.setProperty("portNumber","20000");
 		//attrs.setProperty("retrieveMessagesFromServerOnGetMessage","true");
 		return attrs;
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource30.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource30.java
index d3aee026..5895ca68 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource30.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource30.java
@@ -177,8 +177,6 @@ private void checkXAHoldability() {
 			xid = getXid(27, (byte) 21, (byte) 01);
 			xr.start(xid, XAResource.TMNOFLAGS);
 			conn1 = xac.getConnection();
-			System.out.println("This is a bug. Connection's holdability should have been CLOSE_CURSORS_AT_COMMIT since it is in the global transaction");
-			System.out.println("Have reported this on Derby dev-list");
 			System.out.println("CONNECTION(in xa transaction) HOLDABILITY " + (conn1.getHoldability() == ResultSet.HOLD_CURSORS_OVER_COMMIT));
 			System.out.println("Autocommit on Connection inside global transaction has been set correctly to " + conn1.getAutoCommit());
 			xr.end(xid, XAResource.TMSUCCESS);
