diff --git a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java
index 8cda8213..e69de29b 100644
--- a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java
+++ b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java
@@ -1,98 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.aries.jpa.container.unit.impl;
-
-import java.io.IOException;
-import java.net.URL;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Enumeration;
-
-import org.osgi.framework.Bundle;
-/**
- * This is a simple ClassLoader that delegates to the Bundle
- * and is used by the PersistenceUnitInfo
- */
-public class BundleDelegatingClassLoader extends ClassLoader {
-
-  private final Bundle bundle;
-  
-  public BundleDelegatingClassLoader(Bundle b) {
-    bundle = b;
-  }
-  
-  @Override
-  protected Class<?> findClass(final String name) throws ClassNotFoundException {
-    try {
-      return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
-        public Class<?> run() throws ClassNotFoundException 
-        {
-          return bundle.loadClass(name);
-        }
-      });
-    } catch (PrivilegedActionException e) {
-      Exception cause = e.getException();
-        
-      if (cause instanceof ClassNotFoundException) throw (ClassNotFoundException)cause;
-      else throw (RuntimeException)cause;
-    }
-  }
-
-  @Override
-  protected URL findResource(final String name) {
-    return AccessController.doPrivileged(new PrivilegedAction<URL>() {
-      public URL run()
-      {
-        return bundle.getResource(name);
-      }
-    });
-  }
-
-  @SuppressWarnings("unchecked")
-  @Override
-  protected Enumeration<URL> findResources(final String name) throws IOException {
-    Enumeration<URL> urls;
-    try {
-      urls =  AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
-        @SuppressWarnings("unchecked")
-        public Enumeration<URL> run() throws IOException
-        {
-          return (Enumeration<URL>)bundle.getResources(name);
-        }
-        
-      });
-    } catch (PrivilegedActionException e) {
-      Exception cause = e.getException();
-      
-      if (cause instanceof IOException) throw (IOException)cause;
-      else throw (RuntimeException)cause;
-    }
-    
-    if (urls == null) {
-      urls = Collections.enumeration(new ArrayList<URL>());
-    }
-    
-    return urls;
-  }
-
-}
diff --git a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
index a08a6c04..b86d67ed 100644
--- a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
+++ b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
@@ -23,6 +23,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
+import java.util.concurrent.atomic.AtomicReference;
 
 import javax.persistence.SharedCacheMode;
 import javax.persistence.ValidationMode;
@@ -36,6 +37,7 @@
 import org.apache.aries.jpa.container.parsing.ParsedPersistenceUnit;
 import org.apache.aries.jpa.container.weaving.impl.TransformerRegistry;
 import org.apache.aries.jpa.container.weaving.impl.TransformerRegistryFactory;
+import org.apache.aries.util.AriesFrameworkUtil;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.ServiceReference;
 import org.slf4j.Logger;
@@ -47,12 +49,13 @@
 
   private final ParsedPersistenceUnit unit;
   
-  private final BundleDelegatingClassLoader cl;
-  
   private final ServiceReference providerRef;
   
   private ClassTransformer transformer;
   
+  // initialize it lazily because we create a PersistenceUnitInfoImpl when the bundle is INSTALLED state
+  private final AtomicReference<ClassLoader> cl = new AtomicReference<ClassLoader>();
+  
   /** Logger */
   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.jpa.container");
   
@@ -61,7 +64,6 @@ public PersistenceUnitInfoImpl (Bundle b, ParsedPersistenceUnit parsedData, fina
     bundle = b;
     unit = parsedData;
     this.providerRef = providerRef;
-    cl = new BundleDelegatingClassLoader(b);
   }
   
   public synchronized void addTransformer(ClassTransformer arg0) {
@@ -82,7 +84,12 @@ public boolean excludeUnlistedClasses() {
   }
 
   public ClassLoader getClassLoader() {
-    return cl;
+    if (cl.get() == null) {
+        // use forced because for even for a resolved bundle we could otherwise get null
+        cl.compareAndSet(null, AriesFrameworkUtil.getClassLoaderForced(bundle));
+    }
+    
+    return cl.get();
   }
 
   @SuppressWarnings("unchecked")
@@ -137,7 +144,8 @@ public DataSource getJtaDataSource() {
   }
 
   public ClassLoader getNewTempClassLoader() {
-    return new TempBundleDelegatingClassLoader(bundle, new BundleDelegatingClassLoader(providerRef.getBundle()));
+    ClassLoader cl = AriesFrameworkUtil.getClassLoader(providerRef.getBundle());
+    return new TempBundleDelegatingClassLoader(bundle, cl);
   }
 
   public DataSource getNonJtaDataSource() {
diff --git a/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java b/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
index 6ae2f023..e6805739 100644
--- a/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
+++ b/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
@@ -18,10 +18,12 @@
  */
 package org.apache.aries.util;
 
+import org.osgi.framework.Bundle;
 import org.osgi.framework.ServiceRegistration;
 
 /**
- * A fake class for testing
+ * A fake class for testing. We currently need this because the real AriesFrameworkUtil includes multiple
+ * layers of static initializers that blow up when not running in a proper OSGi framework.
  */
 public final class AriesFrameworkUtil 
 {
@@ -43,4 +45,15 @@ public static void safeUnregisterService(ServiceRegistration reg)
       }
     }
   }
+  
+  public static ClassLoader getClassLoader(Bundle b) {
+      // dummy implementation
+      return null;
+  }
+  
+  public static ClassLoader getClassLoaderForced(Bundle b)
+  {
+      // dummy implementation
+      return null;
+  }
 }
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java b/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
index 471c64dd..d060a786 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
@@ -48,7 +48,7 @@
    * their is no such classloader, or if it cannot obtain the classloader for the bundle.
    * 
    * @param b the bundle whose classloader is desired.
-   * @return  the classloader if found, or null.
+   * @return  the classloader if found, or null if for example the bundle is in INSTALLED or UNINSTALLED state
    */
   public static ClassLoader getClassLoader(Bundle b)
   {
