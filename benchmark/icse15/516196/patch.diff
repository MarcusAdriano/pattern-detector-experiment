diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
index 164bccc8..daf1ba3e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
@@ -28,7 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.EOFException;
 
 /**
-	Converts a stream containing the Cloudscape stored binary form
+	Converts a stream containing the Derby stored binary form
 	to one that just contains the application's data.
 	Simply read and save the length information.
 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 5f4d650c..f8f70f4c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -593,7 +593,7 @@ public long position(Blob pattern, long start)
                 // look for first character
                 byte[] b;
                 try
-                { // pattern is not necessarily a cloudscape Blob
+                { // pattern is not necessarily a Derby Blob
                     b = pattern.getBytes(1,1);
                 }
                 catch (SQLException e)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection30.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection30.java
index 144c6516..f5ad0d03 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection30.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection30.java
@@ -122,7 +122,7 @@ public Savepoint setSavepoint(
 
 	/**
 	 * Creates a savepoint with the given name(if it is a named savepoint else we will generate a name
-	 * becuase Cloudscape only supports named savepoints internally) in the current transaction and
+	 * because Derby only supports named savepoints internally) in the current transaction and
 	 * returns the new Savepoint object that represents it.
 	 *
 	 * @param name  A String containing the name of the savepoint. Will be null if this is an unnamed savepoint
@@ -174,7 +174,7 @@ public void rollback(
 				verifySavepointCommandIsAllowed();
 				verifySavepointArg(savepoint);
 				//Need to cast and get the name because JDBC3 spec doesn't support names for
-				//unnamed savepoints but Cloudscape keeps names for named & unnamed savepoints.
+				//unnamed savepoints but Derby keeps names for named & unnamed savepoints.
 				getLanguageConnection().internalRollbackToSavepoint(((EmbedSavepoint30)savepoint).getInternalName(),true, savepoint);
 			} catch (StandardException e) {
 				throw handleException(e);
@@ -205,7 +205,7 @@ public void releaseSavepoint(
 				verifySavepointCommandIsAllowed();
 				verifySavepointArg(savepoint);
 				//Need to cast and get the name because JDBC3 spec doesn't support names for
-				//unnamed savepoints but Cloudscape keeps name for named & unnamed savepoints.
+				//unnamed savepoints but Derby keeps name for named & unnamed savepoints.
 				getLanguageConnection().releaseSavePoint(((EmbedSavepoint30)savepoint).getInternalName(), savepoint);
 			} catch (StandardException e) {
 				throw handleException(e);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index aec30d20..d6bca51d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -210,7 +210,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private boolean[] streamUsedFlags;
     
 	/**
-	 * This class provides the glue between the Cloudscape
+	 * This class provides the glue between the Derby
 	 * resultset and the JDBC resultset, mapping calls-to-calls.
 	 */
 	public EmbedResultSet(EmbedConnection conn, ResultSet resultsToWrap,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLWarning.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLWarning.java
index dcb78d46..f1e72379 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLWarning.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLWarning.java
@@ -34,7 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	messages can be localized.
 
 	REMIND: May want to investigate putting some of this in the protocol
-	side, for the errors that any Cloudscape JDBC driver might return.
+	side, for the errors that any Derby JDBC driver might return.
 
 	The ASSERT mechanism is a wrapper of the basic services,
 	to ensure that failed asserts at this level will behave
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint30.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint30.java
index 673a880d..cc468a2f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint30.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint30.java
@@ -110,7 +110,7 @@ public String getSavepointName() throws SQLException {
    		return savepointName.substring(2);
     }
 
-    //Cloudscape internally keeps name for both named and unnamed savepoints
+    // Derby internally keeps name for both named and unnamed savepoints
     String getInternalName() {
    		return savepointName;
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index 90994f5c..44606e97 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -1506,7 +1506,7 @@ private int processDynamicResults(java.sql.ResultSet[][] holder,
 			java.sql.ResultSet rs = param[0];
 			param[0] = null;
 
-			// ignore non-cloudscape result sets or results sets from another connection
+			// ignore non-Derby result sets or results sets from another connection
 			if (!(rs instanceof EmbedResultSet))
 				continue;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
index 6f16ead7..c330fcf8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
@@ -151,7 +151,7 @@ public void close()
 	}
 
 	/*
-	** Methods just for Cloudscape's JDBC driver
+	** Methods just for Derby's JDBC driver
 	*/
 
 	public int readInto(StringBuffer sb, int len) throws IOException {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
index 5ebbd8f1..59340031 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
@@ -47,7 +47,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	messages can be localized.
 
 	REMIND: May want to investigate putting some of this in the protocol
-	side, for the errors that any Cloudscape JDBC driver might return.
+	side, for the errors that any Derby JDBC driver might return.
 
 	The ASSERT mechanism is a wrapper of the basic services,
 	to ensure that failed asserts at this level will behave
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java
index 43fbd8a1..402a9e7d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java
@@ -59,7 +59,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 /**
  * This is the authentication service base class.
  * <p>
- * There can be 1 Authentication Service for the whole Cloudscape
+ * There can be 1 Authentication Service for the whole Derby
  * system and/or 1 authentication per database.
  * In a near future, we intend to allow multiple authentication services
  * per system and/or per database.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java
index 79614c7c..25236ddf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java
@@ -43,7 +43,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Dictionary;
 
 /**
- * This authentication service is the basic Cloudscape User authentication
+ * This authentication service is the basic Derby user authentication
  * level support.
  *
  * It is activated upon setting derby.authentication.provider database
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationService.java
index 53520dcb..0693e757 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/JNDIAuthenticationService.java
@@ -35,7 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * This is the JNDI Authentication Service base class.
  * <p>
  * It instantiates the JNDI authentication scheme defined by the user/
- * administrator. Cloudscape supports LDAP JNDI providers.
+ * administrator. Derby supports LDAP JNDI providers.
  * <p>
  * The user can configure its own JNDI provider by setting the
  * system or database property derby.authentication.provider .
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java
index 22f1f695..ce94872a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java
@@ -40,7 +40,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 
 /**
- * This is the Cloudscape LDAP authentication scheme implementation.
+ * This is the Derby LDAP authentication scheme implementation.
  *
  * JNDI system/environment properties can be set at the database
  * level as database properties. They will be picked-up and set in
@@ -58,7 +58,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * hard to tell/guess in advance a users' full DN's.
  *
  * NOTE: In a future release, we will cache/maintain the user DN within
- * the the cloudscape database or system to avoid the initial lookup.
+ * the the Derby database or system to avoid the initial lookup.
  * Also note that LDAP search/retrieval operations are usually very fast.
  *
  * The default LDAP url is ldap:/// (ldap://localhost:389/)
@@ -85,7 +85,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private static final String[] attrDN = {"dn"};								;
 
 	//
-	// Cloudscape LDAP Configuration properties
+	// Derby LDAP Configuration properties
 	//
 	private static final String LDAP_SEARCH_BASE =
 								"derby.authentication.ldap.searchBase";
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java
index 5dbc2cc9..b23e89db 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Export.java
@@ -99,7 +99,7 @@ private void setLobsExtFileName(String lobsFileName) throws SQLException
 	/**
 	 * SYSCS_EXPORT_TABLE  system Procedure from ij or from a Java application
 	 * invokes  this method to perform export of  a table data to a file.
-	 * @param con	 The Cloudscape database connection URL for the database containing the table
+	 * @param con	 The Derby database connection URL for the database containing the table
 	 * @param schemaName	schema name of the table data is being exported from
 	 * @param tableName     Name of the Table from which  data has to be exported.
 	 * @param outputFileName Name of the file to  which data has to be exported.
@@ -130,7 +130,7 @@ public static void exportTable(Connection con, String schemaName,
      * export of a table data to a file. Large object data is exported 
      * to a different file and the reference to it is stored in the
      *  main output file. 
-     * @param con	 The Cloudscape database connection URL for the 
+     * @param con	 The Derby database connection URL for the 
      *               database containing the table
      * @param schemaName  schema name of the table data is being exported from
      * @param tableName   Name of the Table from which data has to be exported.
@@ -164,7 +164,7 @@ public static void exportTable(Connection con, String schemaName,
 	/**
 	 * SYSCS_EXPORT_QUERY  system Procedure from ij or from a Java application
 	 * invokes  this method to perform export of the data retrieved by select statement to a file.
-	 * @param con	 The Cloudscape database connection URL for the database containing the table
+	 * @param con	 The Derby database connection URL for the database containing the table
 	 * @param selectStatement    select query that is used to export the data
 	 * @param outputFileName Name of the file to  which data has to be exported.
 	 * @param columnDelimeter  Delimiter that seperates columns in the output file
@@ -191,7 +191,7 @@ public static void exportQuery(Connection con, String selectStatement,
      * export of the data retrieved by select  statement to a file.
      * Large object data is exported to a different file  and the reference 
      * to it is stored in the main output file. 
-     * @param con	 The Cloudscape database connection URL for 
+     * @param con	 The Derby database connection URL for 
      *               the database containing the table
      * @param selectStatement    select query that is used to export the data
      * @param outputFileName Name of the file to  which data has to be exported.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
index bfa24c59..079ba63a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
@@ -83,7 +83,7 @@ private void doImport() throws Exception
 	/**
 	 * SYSCS_IMPORT_TABLE  system Procedure from ij or from a Java application
 	 * invokes  this method to perform import to a table from a file.
-	 * @param connection	 The Cloudscape database connection URL for the database containing the table
+	 * @param connection	 The Derby database connection URL for the database containing the table
 	 * @param schemaName	The name of the schema where table to import exists 
 	 * @param tableName     Name of the Table the data has to be imported to.
 	 * @param inputFileName Name of the file from which data has to be imported.
@@ -117,7 +117,7 @@ public static void importTable(Connection connection, String schemaName,
 	/**
 	 * SYSCS_IMPORT_DATA  system Procedure from ij or from a Java application
 	 * invokes  this method to perform import to a table from a file.
-	 * @param connection	 The Cloudscape database connection URL for the database containing the table
+	 * @param connection	 The Derby database connection URL for the database containing the table
 	 * @param schemaName	The name of the schema where table to import exists 
 	 * @param tableName     Name of the Table the data has to be imported to.
 	 * @param insertColumnList  Comma Seperated column name list to which data
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/LoadError.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/LoadError.java
index 6eb68124..aa32b390 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/LoadError.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/LoadError.java
@@ -36,7 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 class LoadError {
 	
 	/**
-	 Raised if, the Cloudscape database connection is null.
+	 Raised if, the Derby database connection is null.
 	*/
 
 	static SQLException connectionNull() {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCJava.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCJava.java
index 78170c3e..65f8f3aa 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCJava.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/BCJava.java
@@ -156,7 +156,7 @@ public BCJava() {
 	/**
 		Start this module. We need a read/write version of the class utilities
 
-		@exception StandardException standard cloudscape policy
+		@exception StandardException standard Derby policy
 	 */
 	public void boot(boolean create, Properties properties) throws StandardException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java
index 433e359b..7470fd6b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java
@@ -64,7 +64,7 @@ static void checkMethod(short opcode, Type dt, String methodName, String[] debug
 				if (declaringClass.startsWith("org.apache.derby.exe."))
 					return;
 
-				// only validate against Cloudscape engine or Java classes. Not user defined classes
+				// only validate against Derby engine or Java classes. Not user defined classes
 				int p;
 				for (p = 0; p < csPackages.length; p++) {
 					if (declaringClass.startsWith(csPackages[p]))
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/cache/Clock.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/cache/Clock.java
index a4146f38..5743686c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/cache/Clock.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/cache/Clock.java
@@ -199,7 +199,7 @@ clearing of its own member fields (RESOLVE: now they are done in cache
 
 		@param key the key to the object
 		@return a cacheable object that is kept in the cache.
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Cacheable find(Object key) throws StandardException {
 		CachedItem item;
@@ -409,7 +409,7 @@ public void setUsed( Object[] keys)
 		@param key the key to the object
 		@return a cacheable object that is kept in the cache.  
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Cacheable create(Object key, Object createParameter) throws StandardException {
 
@@ -554,7 +554,7 @@ state through clean() (if required) and clearIdentity(). The removal of the
 		remove state of the item, the actual removal of the cacheable is
 		synchronized on the cachedItem itself.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public void remove(Cacheable entry) throws StandardException {
 
@@ -678,7 +678,7 @@ public void ageOut() {
 	/**
 		MT - synchronization provided by caller
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	*/
 	public void shutdown() throws StandardException {
 
@@ -849,7 +849,7 @@ protected CachedItem findFreeItem() throws StandardException {
 
 		// However, if the cache contains a large number of invalid
 		// items then we should see if we can avoid growing.
-		// This avoids simple use of Cloudscape looking like
+		// This avoids simple use of Derby looking like
 		// a memory leak, as the page cache fills the holders array
 		// with page objects including the 4k (or 32k) pages.
 		// size() is the number of valid entries in the hash table
@@ -1658,7 +1658,7 @@ public synchronized long getMaximumSize()
      *
      * @param newSize the new maximum cache size
      *
-     * @exception StandardException Cloudscape Standard error policy
+     * @exception StandardException Standard Derby error policy
      */
 	public void resize( long newSize) throws StandardException
     {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java
index 600987bc..ddfbcdf8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java
@@ -186,7 +186,7 @@ static String providerErrorName(String cps) {
 		and encrypting the secretKey 
 		@return hexadecimal string of the encrypted secretKey
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	private String encryptKey(byte[] secretKey, byte[] bootPassword)
 		 throws StandardException
@@ -247,7 +247,7 @@ private String encryptKey(byte[] secretKey, byte[] bootPassword)
 	    retrieve the encryptedKey, generate the muck from the boot password and generate an appropriate IV using
 	    the muck,and using the key and IV decrypt the encryptedKey 
 	    @return decrypted key  
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	private byte[] decryptKey(String encryptedKey, int encodedKeyCharLength, byte[] bootPassword)
 		 throws StandardException
@@ -298,7 +298,7 @@ private String encryptKey(byte[] secretKey, byte[] bootPassword)
 		Generate a Key object using the input secretKey that can be used by
 		JCECipherProvider to encrypt or decrypt.
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	private SecretKey generateKey(byte[] secretKey) throws StandardException
 	{
@@ -488,7 +488,7 @@ else if (vendor.startsWith("SUN "))
             // jce environment is not 1.2.1.  The ExemptionMechanism class
             // exists in jce1.2.1 and not in jce1.2, so try and load the
             // class and if you can't find it don't allow the encryption.
-            // This is a requirement from the government to give cloudscape
+            // This is a requirement from the government to give Cloudscape
             // export clearance for 3.6.  Note that the check is not needed
             // if no provider/algo is specified, in that case we default to
             // a DES weak encryption algorithm which also is allowed for
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherProvider.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherProvider.java
index 11638efc..9cf6708d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherProvider.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherProvider.java
@@ -194,7 +194,7 @@ else if (mode == CipherFactory.DECRYPT)
 	/**
 		@see CipherProvider#encrypt
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int encrypt(byte[] cleartext, int offset, int length,
 					   byte[] ciphertext, int outputOffset)
@@ -274,7 +274,7 @@ else if (mode == CipherFactory.DECRYPT)
 	/**
 		@see CipherProvider#decrypt
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int decrypt(byte[] ciphertext, int offset, int length,
 					   byte[] cleartext, int outputOffset)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/D_ActiveLock.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/D_ActiveLock.java
index b52b967d..c420959c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/D_ActiveLock.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/D_ActiveLock.java
@@ -29,7 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class D_ActiveLock extends D_Lock  {
 
 	/**
-		@exception StandardException Standard cloudscape policy
+		@exception StandardException Standard Derby policy
 	*/
     public String diag()
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java
index 95158186..5011b6d3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/LockSet.java
@@ -125,7 +125,7 @@ protected LockSet(SinglePool factory) {
 	 *
 	 *	@return	Object that represents the lock.
 	 *
-	 *	@exception	StandardException Standard Cloudscape policy.
+	 *	@exception	StandardException Standard Derby policy.
 
 	*/
 	public Lock lockObject(CompatibilitySpace compatibilitySpace, Lockable ref,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/SinglePool.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/SinglePool.java
index 034bf980..f8510b98 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/SinglePool.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/SinglePool.java
@@ -79,7 +79,7 @@ public SinglePool() {
 		<BR>
 		MT - thread safe
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see LockFactory#lockObject
 	*/
@@ -148,7 +148,7 @@ public CompatibilitySpace createCompatibilitySpace(Object owner) {
 		<BR>
 		MT - thread safe
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 		@see LockFactory#lockObject
 	*/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index 33badc92..490baa86 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -473,7 +473,7 @@ public String getServiceName(Object serviceModule) {
 	/**
 		Set the locale for the service *outside* of boot time.
 
-		@exception StandardException Standard Cloudscape error.
+		@exception StandardException Standard Derby error.
 	*/
 	public Locale setLocale(Object serviceModule, String userDefinedLocale)
 		throws StandardException {
@@ -501,7 +501,7 @@ public Locale setLocale(Object serviceModule, String userDefinedLocale)
 		Set the locale for the service at boot time. The passed in
 		properties must be the one passed to the boot method.
 
-		@exception StandardException Standard Cloudscape error.
+		@exception StandardException Standard Derby error.
 	*/
 	public Locale setLocale(Properties serviceProperties, String userDefinedLocale)
 		throws StandardException {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java
index 548d1fe4..9e795e18 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java
@@ -88,11 +88,11 @@ Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
 	    // when trying to find our own classes for aggregates.
 	    // 1) If using the URLClassLoader a ClassNotFoundException may be 
 	    //    thrown (Beetle 5002).
-	    // 2) If cloudscape is loaded with JNI, getContextClassLoader()
+	    // 2) If Derby is loaded with JNI, getContextClassLoader()
 	    //    may return null. (Beetle 5171)
 	    //
 	    // If this happens we need to user the class loader of this object
-	    // (the classLoader that loaded Cloudscape). 
+	    // (the classLoader that loaded Derby). 
 	    // So we call Class.forName to ensure that we find the class.
         try {
         	ClassLoader cl;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java
index 935e5f1b..823ed425 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java
@@ -391,7 +391,7 @@ public int getParameterNumber(GenericParameter theParam)
 	/**
 		Check that there are not output parameters defined
 		by the parameter set. If there are unknown parameter
-		types they are forced to input types. i.e. Cloudscape static method
+		types they are forced to input types. i.e. Derby static method
 		calls with parameters that are array.
 
 		@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index 7f0863be..371524ab 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -694,7 +694,7 @@ Mark the dependent as invalid (due to at least one of
 
 		@param	action	The action causing the invalidation
 
-	 	@exception StandardException Standard Cloudscape error policy.
+	 	@exception StandardException Standard Derby error policy.
 	 */
 	public void makeInvalid(int action, LanguageConnectionContext lcc)
 		 throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index ba2335b5..8e25517f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -143,7 +143,7 @@ private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cach
 		 *         b) add the prepared statement to the cache.
 		 *
 		 * In cases where the statement cache has been disabled (by setting the
-		 * relevant cloudscape property) then the value of cacheMe is irrelevant.
+		 * relevant Derby property) then the value of cacheMe is irrelevant.
 		 */ 
 		boolean foundInCache = false;
 		if (preparedStmt == null) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
index 88926eee..2dc02155 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
@@ -256,7 +256,7 @@ void upgradeIfNeeded(DD_Version dictionaryVersion,
 	  * @param	fromMajorVersionNumber	version of the on-disk database
 	    @param  lastSoftUpgradeVersion last engine to perform a soft upgrade that made changes.
 	  *
-	  *	@exception StandardException  Standard Cloudscape error policy.
+	  *	@exception StandardException  Standard Derby error policy.
 	  */
 	private	void	applySafeChanges(TransactionController tc, int fromMajorVersionNumber, int lastSoftUpgradeVersion)
 		throws StandardException
@@ -321,7 +321,7 @@ private	void	applySafeChanges(TransactionController tc, int fromMajorVersionNumb
 	  * @param	fromMajorVersionNumber	version of the on-disk database
 	  * @param	aid	 AuthorizationID of current user to be made Database Owner
 	  *
-	  *	@exception StandardException  Standard Cloudscape error policy.
+	  *	@exception StandardException  Standard Derby error policy.
 	  */
 	private	void	doFullUpgrade(TransactionController tc, int fromMajorVersionNumber, String aid)
 		throws StandardException
@@ -406,7 +406,7 @@ private	void	doFullUpgrade(TransactionController tc, int fromMajorVersionNumber,
 	 *
 	 * @param tc the xact
 	 *
-	 * @exception StandardException  Standard Cloudscape error policy.
+	 * @exception StandardException  Standard Derby error policy.
 	 */
 	private void handleMinorRevisionChange(TransactionController tc, DD_Version fromVersion, boolean softUpgradeRun) 
 		throws StandardException
@@ -463,7 +463,7 @@ private void handleMinorRevisionChange(TransactionController tc, DD_Version from
 	 * remove stored prepared statements in all system schemas
 	 * (including SYSIBM)
 	 *
-	 * @exception StandardException  Standard Cloudscape error policy.
+	 * @exception StandardException  Standard Derby error policy.
 	 */
 	protected void dropJDBCMetadataSPSes(TransactionController tc, boolean removeSYSIBMonly)
 		throws StandardException
@@ -495,7 +495,7 @@ protected void dropJDBCMetadataSPSes(TransactionController tc, boolean removeSYS
 	/**
  	 * Make a catalog.
 	 *	@param	tc	TransactionController
-	 *	@exception StandardException  Standard Cloudscape error policy.
+	 *	@exception StandardException  Standard Derby error policy.
 	 */
 	protected void makeSystemCatalog(TransactionController tc,
 									 TabInfoImpl ti)
@@ -511,7 +511,7 @@ protected void makeSystemCatalog(TransactionController tc,
 	  its indexes.
 	  @param	tc TransactionController
 	  @param    td Table descriptor for the catalog to drop. 
-	  @exception StandardException  Standard Cloudscape error policy.
+	  @exception StandardException  Standard Derby error policy.
 	  */
 	protected void
 	dropSystemCatalogDescription(TransactionController tc, TableDescriptor td)
@@ -532,7 +532,7 @@ protected void makeSystemCatalog(TransactionController tc,
  	 * Drop a System catalog.
 	 *	@param	tc	TransactionController
 	 *  @param  crf CatalogRowFactory for the catalog to drop.
-	 *	@exception StandardException  Standard Cloudscape error policy.
+	 *	@exception StandardException  Standard Derby error policy.
 	 */
 	protected void dropSystemCatalog(TransactionController tc,
 							 CatalogRowFactory crf)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 4d61414c..e6cac679 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -6269,7 +6269,7 @@ protected Configuration createDictionaryTables(Configuration cfg, TransactionCon
 		}
 		</PRE>
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void createDictionaryTables(Properties params, TransactionController tc,
 			DataDescriptorGenerator ddg)
@@ -6421,7 +6421,7 @@ protected void createDictionaryTables(Properties params, TransactionController t
 
 
         // Add the following system Schema's to be compatible with DB2, 
-        // currently Cloudscape does not use them, but by creating them as
+        // currently Derby does not use them, but by creating them as
         // system schema's it will insure applications can't create them,
         // drop them, or create objects in them.  This set includes:
         //     SYSCAT
@@ -6534,7 +6534,7 @@ protected void upgradeMakeCatalog(TransactionController tc, int catalogNumber)
 	 *	@param	sd			Schema to create catalogs in.
 	 *	@param	tc			Transaction context.
 	 *
-	 *	@exception StandardException Standard Cloudscape error policy
+	 *	@exception StandardException Standard Derby error policy
 	 */
 	public	void	makeCatalog( TabInfoImpl					ti,
 								 SchemaDescriptor			sd,
@@ -6568,7 +6568,7 @@ public	void	makeCatalog( TabInfoImpl					ti,
 	  *	@param	nullability				true if nullable 
 	  *	@param	tc						Transaction controller
 	  *
-	  *	@exception StandardException Standard Cloudscape error policy
+	  *	@exception StandardException Standard Derby error policy
 	  */
 	public void upgrade_setNullability(CatalogRowFactory rowFactory,
 									   int columnNumber,
@@ -6606,7 +6606,7 @@ public void upgrade_setNullability(CatalogRowFactory rowFactory,
 	  *	@param	newColumnIDs			Array of 1-based column ids.
 	  *	@param	tc						Transaction controller
 	  *
-	  *	@exception StandardException Standard Cloudscape error policy
+	  *	@exception StandardException Standard Derby error policy
 	  */
 	public	void	upgrade_addColumns( CatalogRowFactory		rowFactory,
 										int[]					newColumnIDs,
@@ -6675,7 +6675,7 @@ else if (rowFactory instanceof SYSCOLUMNSRowFactory)
 	  *	@param	newColumnIDs			Array of 1-based column ids.
 	  *	@param	tc						Transaction controller
 	  *
-	  *	@exception StandardException Standard Cloudscape error policy
+	  *	@exception StandardException Standard Derby error policy
 	  */
 	public	void	upgrade_addInvisibleColumns
 	(
@@ -6701,7 +6701,7 @@ else if (rowFactory instanceof SYSCOLUMNSRowFactory)
 	  *	@param	conglomID				heap id
 	  *	@param	tc						Transaction controller
 	  *
-	  *	@exception StandardException Standard Cloudscape error policy
+	  *	@exception StandardException Standard Derby error policy
 	  */
 	private	void	widenConglomerate
 	(
@@ -6937,7 +6937,7 @@ void upgrade_initSystemTableCols(
 	/**
 	 *	Infrastructure work for indexes on catalogs.
 	 *
-	   @exception StandardException Standard Cloudscape error policy
+	   @exception StandardException Standard Derby error policy
 
 	 */
 	private void bootStrapSystemIndexes(
@@ -7201,7 +7201,7 @@ public void initSystemIndexVariables(DataDescriptorGenerator ddg,
 	/**
 	 *	Populate SYSDUMMY1 table with a single row.
 	 *
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	protected void populateSYSDUMMY1(
 							TransactionController tc)
@@ -7216,7 +7216,7 @@ protected void populateSYSDUMMY1(
 	/**
 	 * Clear all of the DataDictionary caches.
 	 *
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void clearCaches() throws StandardException
 	{
@@ -7313,7 +7313,7 @@ private void addSystemTableToDictionary(TabInfoImpl ti,
 	  *
 	  *	@return	a ColumnDes*criptor
 	  *
-	  *	@exception StandardException Standard Cloudscape error policy
+	  *	@exception StandardException Standard Derby error policy
 	  */
 	private	ColumnDescriptor	makeColumnDescriptor( SystemColumn		column,
             int columnPosition,
@@ -7339,7 +7339,7 @@ private	ColumnDescriptor	makeColumnDescriptor( SystemColumn		column,
 	 *
 	 *	@return	Conglomerate id.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 	 */
 	private long createConglomerate(String name, TransactionController tc,
 									ExecRow rowTemplate,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateDefinition.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateDefinition.java
index e1b40e7a..87121dfd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateDefinition.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateDefinition.java
@@ -28,8 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 /**
  * An AggregateDefinition defines an aggregate.
  * 
- * It is used
- * by Cloudscape during query compilation to determine what 
+ * It is used by Derby during query compilation to determine what 
  * Aggregator is used to aggregate a particular data type 
  * and what datatype the Aggregator will emit.  A single 
  * AggregateDefinition may map to one or more Aggregators 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/C_NodeNames.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/C_NodeNames.java
index 523ae8a9..1f648cfc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/C_NodeNames.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/C_NodeNames.java
@@ -30,7 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * Class.forName calls.
  *
  * WARNING: WHEN ADDING NODE TYPES HERE, YOU MUST ALSO ADD
- * THEM TO $WS/tools/release/config/dbms/cloudscapenodes.properties
+ * THEM TO tools/jar/DBMSnodes.properties
  *
  */
 
@@ -40,7 +40,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	// The names are in alphabetic order.
 	//
     // WARNING: WHEN ADDING NODE TYPES HERE, YOU MUST ALSO ADD
-    // THEM TO $WS/tools/release/config/dbms/cloudscapenodes.properties
+    // THEM TO tools/jar/DBMSnodes.properties
 
 	static final String AGGREGATE_NODE_NAME = "org.apache.derby.impl.sql.compile.AggregateNode";
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
index 5bcfca9d..4a860d23 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java
@@ -55,7 +55,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * I have constructed following table based on various tables and information under "Rules for result data types"
  * This table has FOR BIT DATA TYPES broken out into separate columns for clarity
  *
- * Note that are few differences between Cloudscape and DB2
+ * Note that are few differences between Derby and DB2
  * 1)there are few differences between what datatypes are consdiered compatible
  * In DB2, CHAR FOR BIT DATA datatypes are compatible with CHAR datatypes
  * ie in addition to following table, CHAR is compatible with CHAR FOR BIT DATA, VARCHAR FOR BIT DATA and LONG VARCHAR FOR BIT DATA
@@ -64,13 +64,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * ie in addition to following table, CHAR FOR BIT DATA is compatible with DATE, TIME, TIMESTAMP
  * ie in addition to following table, VARCHAR FOR BIT DATA is compatible with DATE, TIME, TIMESTAMP
  *
- * 2)few datatypes donot have matching precision in Cloudscape and DB2
- * In DB2, precision of TIME is 8. In Cloudscape, precision of TIME is 0.
- * In DB2, precision,scale of TIMESTAMP is 26,6. In Cloudscape, precision of TIMESTAMP is 0,0.
- * In DB2, precision of DOUBLE is 15. In Cloudscape, precision of DOUBLE is 52.
- * In DB2, precision of REAL is 23. In Cloudscape, precision of REAL is 7.
+ * 2)few datatypes donot have matching precision in Derby and DB2
+ * In DB2, precision of TIME is 8. In Derby, precision of TIME is 0.
+ * In DB2, precision,scale of TIMESTAMP is 26,6. In Derby, precision of TIMESTAMP is 0,0.
+ * In DB2, precision of DOUBLE is 15. In Derby, precision of DOUBLE is 52.
+ * In DB2, precision of REAL is 23. In Derby, precision of REAL is 7.
  * In DB2, precision calculation equation is incorrect when we have int and decimal arguments.
- * The equation should be p=x+max(w-x,10) since precision of integer is 10 in both db2 and cloudscape. Instead, DB2 has p=x+max(w-x,11) 
+ * The equation should be p=x+max(w-x,10) since precision of integer is 10 in both DB2 and Derby. Instead, DB2 has p=x+max(w-x,11) 
  *
  * Types.             S  I  B  D  R  D  C  V  L  C  V  L  C  D  T  T  B
  *                    M  N  I  E  E  O  H  A  O  H  A  O  L  A  I  I  L
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
index 779f6f10..43012ea7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
@@ -783,7 +783,7 @@ else if ((defType == StoredFormatIds.LONGINT_TYPE_ID) ||
 			case StoredFormatIds.TIME_TYPE_ID:
 			case StoredFormatIds.TIMESTAMP_TYPE_ID:
 			// For these types, validity checks will be performed
-			// by Cloudscape at insertion time--see beetle 5585 regarding
+			// by Derby at insertion time--see beetle 5585 regarding
 			// the need to do such checks here instead of later.  For now,
 			// just assume we're okay.
 				return true;
@@ -791,9 +791,9 @@ else if ((defType == StoredFormatIds.LONGINT_TYPE_ID) ||
 			default:
 			// All other default type checks either 
 			// (TINYINT, NATIONAL_CHAR, etc), or 2) require a DB2 cast-
-			// function (ex. blob(...), which Cloudscape doesn't
+			// function (ex. blob(...), which Derby doesn't
 			// support yet--see Beetle 5281), and so they are not
-			// valid for Cloudscape running in DB2 compatibility mode.
+			// valid for Derby running in DB2 compatibility mode.
 				return false;
 
 		}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java
index 48667817..5968bf4e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java
@@ -129,7 +129,7 @@ protected int getOrderableVariantType()
 	/**
 	 * CurrentDatetimeOperatorNode is used in expressions.
 	 * The expression generated for it invokes a static method
-	 * on a special Cloudscape type to get the system time and
+	 * on a special Derby type to get the system time and
 	 * wrap it in the right java.sql type, and then wrap it
 	 * into the right shape for an arbitrary value, i.e. a column
 	 * holder. This is very similar to what constants do.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
index 8195092d..98251f68 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
@@ -64,12 +64,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 
 	constant or parameter LIKE pattern with prefix followed by optional wild card
-	e.g. Cloudscape%
+	e.g. Derby%
 
 	CHAR(n), VARCHAR(n) where n < 255
 
-		>=   prefix padded with '\u0000' to length n -- e.g. Cloudscape\u0000\u0000
-		<=   prefix appended with '\uffff' -- e.g. Cloudscape\uffff
+		>=   prefix padded with '\u0000' to length n -- e.g. Derby\u0000\u0000
+		<=   prefix appended with '\uffff' -- e.g. Derby\uffff
 		
 		[ can eliminate LIKE if constant. ]
 
@@ -102,7 +102,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	Note that the Unicode value is '\uffff' is defined as not a character value
 	and can be used by a program for any purpose. We use it to set an upper
 	bound on a character range with a less than predicate. We only need a single
-	'\uffff' appended because the string 'Cloudscape\uffff\uffff' is not a valid
+	'\uffff' appended because the string 'Derby\uffff\uffff' is not a valid
 	String because '\uffff' is not a valid character.
 		
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index d0f7831b..a3f313fe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -1280,7 +1280,7 @@ private void compressTable(Activation activation)
 	 * marked as invalide and they will get recompiled internally on their next
 	 * execution. This is okay because truncate makes the number of rows to zero
 	 * it may be good idea to recompile them becuase plans are likely to be
-	 * incorrect. Recompile is done internally by cloudscape, user does not have
+	 * incorrect. Recompile is done internally by Derby, user does not have
 	 * any effect.
 	 */
 	private void truncateTable(Activation activation)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AutoincrementCounter.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AutoincrementCounter.java
index fd942828..7213c8d3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AutoincrementCounter.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AutoincrementCounter.java
@@ -193,7 +193,7 @@ public String getIdentity()
 	 * @param	dd			DataDictionary to use.
 	 * @param	tableUUID	I might have the table name but I need more
 	 * information 
-	 * @exception	StandardException standard cloudscape exception.
+	 * @exception	StandardException standard Derby exception.
 	 */
 	public void flushToDisk(TransactionController tc, DataDictionary dd,
 							UUID tableUUID)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java
index 4ce2494c..c50c0185 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java
@@ -60,7 +60,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void open() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java
index 3da2ce92..5d0e4007 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java
@@ -82,7 +82,7 @@ public ResultDescription getResultDescription()
 	}
 	
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void open() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
index 4c46cff1..0d4c5a74 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
@@ -110,7 +110,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void open() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
index 311b04ea..b2713302 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
@@ -152,7 +152,7 @@ public ResultDescription getResultDescription()
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void open() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
index f9bd895a..ebd0185d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
@@ -71,7 +71,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void openCore() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
index f7a13cbf..e5011ad7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
@@ -668,7 +668,7 @@ public void	closeSource() throws StandardException
 	 *
 	 * @param	row	the row to initialize
 	 *
-	 * @exception	standard cloudscape exception
+	 * @exception	standard Derby exception
 	 */
 	private void initializeVectorAggregation(ExecRow row)
 		throws StandardException
@@ -700,7 +700,7 @@ private void initializeVectorAggregation(ExecRow row)
 	 * @param	newRow	the row to merge
 	 * @param	currRow the row to merge into
 	 *
-	 * @exception	standard cloudscape exception
+	 * @exception	standard Derby exception
 	 */
 	private void mergeVectorAggregates(ExecRow newRow, ExecRow currRow)
 		throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index 4e5f5d47..9818582f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -384,7 +384,7 @@ else if (StringUtil.SQLEqualsIgnoreCase(insertMode,"REPLACE"))
 	}
 	
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void open() throws StandardException
 	{
@@ -694,7 +694,7 @@ public ResultSet getAutoGeneratedKeysResultset()
 		 * multiple row insert, or insert with sub-select, the return value is non-
 		 * deterministic, and is the previous return value of the IDENTITY_VAL_LOCAL
 		 * function, before the insert statement.  Also, DB2 can have at most 1 identity
-		 * column per table.  The return value won't be affected either if Cloudscape
+		 * column per table.  The return value won't be affected either if Derby
 		 * table has more than one identity columns.
 		 */
 		setIdentity = (! autoincrementGenerated) && isSourceRowResultSet();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
index 0a689c6f..4a67cb74 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
@@ -72,7 +72,7 @@ public InsertVTIResultSet(NoPutResultSet source,
 	}
 	
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void openCore() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java
index 4784e3ae..2d19946a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java
@@ -42,7 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 *  @param activation		Describes run-time environment.
 	 *
-	 *  @exception StandardException Standard Cloudscape error policy.
+	 *  @exception StandardException Standard Derby error policy.
      */
     MiscResultSet(Activation activation)
 		 throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java
index 4e41613b..d76e2d7b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java
@@ -312,7 +312,7 @@ public void openForUpdate(
 		switch (isolationLevel)
 		{
 			// Even though we preserve the isolation level at READ UNCOMMITTED,
-			// Cloudscape Store will overwrite it to READ COMMITTED for update.
+			// Store will overwrite it to READ COMMITTED for update.
 			case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
 				isolationLevel = 
                     TransactionController.ISOLATION_READ_UNCOMMITTED;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java
index 1d3c52de..d7a08a86 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java
@@ -479,7 +479,7 @@ public void	reopenCore() throws StandardException
 	**
 	** @return Nothing.
 	**
-	** @exception	standard cloudscape exception
+	** @exception	standard Derby exception
 	*/
 	private void initializeScalarAggregation(ExecRow row)
 		throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java
index b5b9147d..a8ec0ad7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java
@@ -41,7 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 *  @param activation		Describes run-time environment.
 	 *
-	 *  @exception StandardException Standard Cloudscape error policy.
+	 *  @exception StandardException Standard Derby error policy.
      */
     SetTransactionResultSet(Activation activation)
 		 throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
index b402e61b..2fd79b03 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
@@ -989,7 +989,7 @@ the RowSource (except that the input stream will be read, of course)
         nextRow call.  In this case the client should severe all references to 
         the row after returning it from getNextRowFromRowSource().
 
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public DataValueDescriptor[] getNextRowFromRowSource() throws StandardException
 	{ 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
index ca94ea73..cf91285c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
@@ -250,7 +250,7 @@ public ResultDescription getResultDescription()
 		
 	}
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void open() throws StandardException
 	{
@@ -285,7 +285,7 @@ public void open() throws StandardException
 
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	void setup() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
index a7a14924..c951bd4f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
@@ -64,7 +64,7 @@ public UpdateVTIResultSet(NoPutResultSet source,
 	
 	
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void openCore() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java
index 3a3d69ab..74e322c3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/CacheableConglomerate.java
@@ -85,7 +85,7 @@ If the class of the object needs to change (e.g. to support a different format)
 
 		@return an object reference if the object can take on the identity, null otherwise.
 
-		@exception StandardException Standard Cloudscape Policy
+		@exception StandardException Standard Derby Policy
 
 		@see org.apache.derby.iapi.services.cache.CacheManager#find
 
@@ -199,7 +199,7 @@ state of the isDirty()
 		responsibility of the object implementing Cacheable to ensure any users of the
 		object do not conflict with the clean call.
 
-		@exception StandardException Standard Cloudscape error policy.
+		@exception StandardException Standard Derby error policy.
 
 	*/
 	public void clean(boolean forRemove) throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
index d6014fbe..86981928 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
@@ -611,7 +611,7 @@ private void conglomCacheInit()
 
 	/**
 	Database creation finished.  Tell RawStore.
-	@exception StandardException cloudscape standard error policy
+	@exception StandardException standard Derby error policy
 	*/
 	public void createFinished() throws StandardException
 	{
@@ -985,7 +985,7 @@ public void boot(boolean create, Properties startParams)
         rawstore = (RawStoreFactory) Monitor.bootServiceModule(
             create, this, RawStoreFactory.MODULE, serviceProperties);
 
-		// Note: we also boot this module here since we may start cloudscape
+		// Note: we also boot this module here since we may start Derby
 		// system from store access layer, as some of the unit test case,
 		// not from JDBC layer.(See
 		// /protocol/Database/Storage/Access/Interface/T_AccessFactory.java)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
index 243a003f..35b8bbd8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
@@ -864,7 +864,7 @@ public long createConglomerate(
 		Create a conglomerate and populate it with rows from rowSource.
 
 		@see TransactionController#createAndLoadConglomerate
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	*/
     public long createAndLoadConglomerate(
     String                  implementation,
@@ -893,7 +893,7 @@ public long createAndLoadConglomerate(
 		recreate a conglomerate and populate it with rows from rowSource.
 
 		@see TransactionController#createAndLoadConglomerate
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	*/
     public long recreateAndLoadConglomerate(
     String                  implementation,
@@ -1232,7 +1232,7 @@ public boolean isPristine()
 
 	    @return true The number of rows loaded.
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public long loadConglomerate(
     long                    conglomId,
@@ -1255,7 +1255,7 @@ public long loadConglomerate(
 		@param conglomId the conglomerate Id
 		@param rowSource where the rows to be loaded comes from 
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public void loadConglomerate(
     long                    conglomId,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/D_BTreeController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/D_BTreeController.java
index 6d7be255..7e0cd201 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/D_BTreeController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/D_BTreeController.java
@@ -386,7 +386,7 @@ public void init(Object obj)
      *
 	 * @return A string with diagnostic information about the object.
      *
-     * @exception StandardException  Standard cloudscape exception policy
+     * @exception StandardException  Standard Derby exception policy
      **/
     public String diag()
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java
index c5822018..d7683c44 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java
@@ -625,7 +625,7 @@ public boolean fetchMaxOnBTree(
 	Bulk Load a B-tree secondary index.
 
 	@see Conglomerate#load
-	@exception StandardException Standard Cloudscape Error policy.
+	@exception StandardException Standard Derby Error policy.
 	raise SQLState.STORE_CONGLOMERATE_DUPLICATE_KEY_EXCEPTION if a duplicate 
     key is detected in the load.
 	**/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java
index 304ef457..e0a393e6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java
@@ -104,7 +104,7 @@ has it will call the findUndo() interface, to find the page where the record
 	 * @param in        data stored in the log stream that contains the record 
      *                  data necessary to restore the row.
      *
-     * @exception StandardException Standard Cloudscape error policy
+     * @exception StandardException Standard Derby error policy
 	 * @exception IOException Method may read from InputStream
      *
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/D_HeapController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/D_HeapController.java
index 45ac4eab..0e6b70d0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/D_HeapController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/D_HeapController.java
@@ -213,7 +213,7 @@ public void init(Object obj)
      *
 	 * @return A string with diagnostic information about the object.
      *
-     * @exception StandardException  Standard cloudscape exception policy
+     * @exception StandardException  Standard Derby exception policy
      **/
     public String diag()
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
index d55c3bf9..6a558c74 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/RawStore.java
@@ -374,7 +374,7 @@ public TransactionFactory getXactFactory() {
 	 * Return the module providing XAresource interface to the transaction
      * table.
      *
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public /* XAResourceManager */ Object getXAResourceManager()
         throws StandardException
@@ -1046,7 +1046,7 @@ public void createFinished() throws StandardException
 
 	/**
 	 * Get JBMS properties relavent to raw store
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 */
 	public void getRawStoreProperties(PersistentSet set)
 		 throws StandardException
@@ -1060,7 +1060,7 @@ public void getRawStoreProperties(PersistentSet set)
 	*/
 	/**
 		Freeze persistent store.  Reads can still happen, only cannot write.
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public void freezePersistentStore() throws StandardException
 	{
@@ -1072,7 +1072,7 @@ public void freezePersistentStore() throws StandardException
 
 	/**
 		Freeze persistent store.  Reads can still happen, only cannot write.
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public void unfreezePersistentStore() throws StandardException
 	{
@@ -1280,7 +1280,7 @@ else if (properties.getProperty(
 
 		@see CipherProvider#encrypt
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int encrypt(byte[] cleartext, int offset, int length,
 					   byte[] ciphertext, int outputOffset, 
@@ -1310,7 +1310,7 @@ public int encrypt(byte[] cleartext, int offset, int length,
 
 		@see CipherProvider#decrypt
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int decrypt(byte[] ciphertext, int offset, int length,
 					   byte[] cleartext, int outputOffset) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
index aa1d328a..370ccc81 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
@@ -337,7 +337,7 @@ public void readExternal(ObjectInput in)
 	/**
 		Allocate this page - this is called underneath the log record
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void allocPage(long pagenum) throws StandardException
 	{
@@ -405,7 +405,7 @@ protected void allocPage(long pagenum) throws StandardException
 	    Deallocate logical page pagenum - this is called underneath the log record.
 		pagenum must be a page managed by this extent and it must be valid
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void deallocPage(long pagenum) throws StandardException
 	{
@@ -681,7 +681,7 @@ protected long getFreePageNumber(long pnum)
 
 		An exception is always thrown if pagenum is a free page
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected long getPageOffset(long pagenum, int pagesize, boolean deallocOK) throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
index 7f76768a..6ccb5244 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
@@ -524,7 +524,7 @@ private void writeExtent(int offset) throws IOException
 		also. Else check to make sure epage's original container info is of the
 		same length
 
-		@exception StandardException Cloudscape standard error policy
+		@exception StandardException standard Derby error policy
 	*/
 	public static void WriteContainerInfo(byte[] containerInfo,
 										  byte[] epage,
@@ -859,7 +859,7 @@ protected void setPageStatus(LogInstant instant, long pageNumber, int newStatus)
 	/**
 		Chain the next page number and offset underneath a log record
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void chainNextAllocPage(LogInstant instant,
 									  long newAllocPageNum,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocationActions.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocationActions.java
index fda945be..9ccea823 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocationActions.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocationActions.java
@@ -45,7 +45,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@param undoStatus		on undo, set the allocation status of the page
 								this value 
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void actionAllocatePage(RawTransaction t, BasePage allocPage, 
 								   long pageNumber, int doStatus, int undoStatus)
@@ -60,7 +60,7 @@ public void actionAllocatePage(RawTransaction t, BasePage allocPage,
 		@param pageNumber		the next allocation page's number 
 		@param pageOffset		the next allocation page's page offset
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void actionChainAllocPage(RawTransaction t, BasePage allocPage, 
 								long pageNumber, long pageOffset)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
index 82adefe7..eb496cba 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
@@ -173,7 +173,7 @@ public void unlockEvent(Latch lockInfo) {
         will usually mean releasing any free pages located at the end of the
         file using the java truncate() interface.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void compressContainer(BaseContainerHandle handle)
         throws StandardException
@@ -264,7 +264,7 @@ public void compressContainer(BaseContainerHandle handle)
 
 		The user transaction is used to latch the newly created page.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Page addPage(BaseContainerHandle handle, boolean isOverflow) throws StandardException {
 		
@@ -399,7 +399,7 @@ public abstract void getContainerProperties(Properties prop)
 		@param handle the container handle that has opened the container and latched the page
 		@param page the latched page that is to be deallocated
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void removePage(BaseContainerHandle handle, BasePage page) 
 		 throws StandardException
@@ -441,7 +441,7 @@ protected void removePage(BaseContainerHandle handle, BasePage page)
 		Get the special dealloc lock on the page - the lock is gotten by the
 		transaction that owns the container handle
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected boolean getDeallocLock(BaseContainerHandle handle, 
 									 RecordHandle deallocLock, 
@@ -478,7 +478,7 @@ protected boolean getDeallocLock(BaseContainerHandle handle,
 
 	/**
 		Get an allocation page and latch it.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected Page getAllocPage(BaseContainerHandle handle, long pageNumber, boolean wait)
 		 throws StandardException
@@ -488,7 +488,7 @@ protected Page getAllocPage(BaseContainerHandle handle, long pageNumber, boolean
 
 	/**
 		Get any page and latch it .
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected Page getAnyPage(BaseContainerHandle handle, long pageNumber, boolean wait)
 		 throws StandardException
@@ -499,7 +499,7 @@ protected Page getAnyPage(BaseContainerHandle handle, long pageNumber, boolean w
 
 	/**
 		Get the first valid page. Result is latched.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected Page getFirstPage(BaseContainerHandle handle) throws StandardException
 	{
@@ -508,7 +508,7 @@ protected Page getFirstPage(BaseContainerHandle handle) throws StandardException
 
 	/**
 		Get the next valid page and latch it
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected Page getNextPage(BaseContainerHandle handle, long pageNumber)
         throws StandardException
@@ -653,7 +653,7 @@ protected abstract SpaceInfo getSpaceInfo(BaseContainerHandle handle)
 		Return a BasePage that represents the given page number in this container.
         The resulting page is latched.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract BasePage getPage(BaseContainerHandle handle, long pageNumber,
         boolean wait) throws StandardException;
@@ -661,7 +661,7 @@ protected abstract BasePage getPage(BaseContainerHandle handle, long pageNumber,
 	/**
 		Return a BasePage that represents the given alloc page number in this container.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract BasePage getAllocPage(long pageNumber) throws StandardException;
 
@@ -669,7 +669,7 @@ protected abstract BasePage getPage(BaseContainerHandle handle, long pageNumber,
 		Return a BasePage that represents any page - alloc page, valid page, free page,
 		dealloced page etc.  The only requirement is that the page is initialized...
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	protected abstract BasePage getAnyPage(BaseContainerHandle handle, long pageNumber)
 		 throws StandardException;
@@ -720,7 +720,7 @@ protected abstract BasePage getAnyPage(BaseContainerHandle handle, long pageNumb
 		Log all information on the container creation necessary to recreate teh
 		container during a load tran.
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	 protected abstract ByteArray logCreateContainerInfo()
 		 throws StandardException;
@@ -730,28 +730,28 @@ protected abstract ByteArray logCreateContainerInfo()
 		Get only a valid, non-overflow page.  If page number is either invalid
 		or overflow, returns null
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	protected abstract BasePage getHeadPage(BaseContainerHandle handle,
         long pagenumber, boolean wait) throws StandardException;
 
 	/**
 		Get the first page in the container.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract BasePage getFirstHeadPage(BaseContainerHandle handle,
         boolean wait) throws StandardException;
 
 	/**
 		Get the next page in the container.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract BasePage getNextHeadPage(BaseContainerHandle handle,
         long pageNumber, boolean wait) throws StandardException;
 
 	/**
 		Get a potentially suitable page for insert and latch it.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected abstract BasePage getPageForInsert(BaseContainerHandle handle,
 												 int flag)
@@ -770,7 +770,7 @@ protected abstract void truncatePages(long lastValidPagenum)
 	/**
 		Create a new page in the container.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract BasePage newPage(BaseContainerHandle userhandle,
 										RawTransaction t,
@@ -786,7 +786,7 @@ protected abstract void compressContainer(
 	/**
 		Deallocate a page from the container.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract void deallocatePage(BaseContainerHandle userhandle,
 										   BasePage page) throws StandardException;
@@ -814,21 +814,21 @@ protected void truncate(BaseContainerHandle handle) throws StandardException {
 		@param leaveStub if true, leave a stub.  If false, remove everything
 		@see org.apache.derby.iapi.store.raw.data.RawContainerHandle#removeContainer
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException;
 
 	/**
 		Get the logged container version.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract long getContainerVersion() throws StandardException;
 
 	/**
 		Flush all outstanding changes in this container to persistent storage.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract void flushAll() throws StandardException;
 
@@ -850,19 +850,19 @@ protected abstract void prepareForBulkLoad(BaseContainerHandle handle,
 	*/
 	/**
 		@see ContainerHandle#getEstimatedRowCount
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public abstract long getEstimatedRowCount(int flag) throws StandardException;
 
 	/**
 		@see ContainerHandle#setEstimatedRowCount
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public abstract void setEstimatedRowCount(long count, int flag) throws StandardException;
 
 	/**
 		@see ContainerHandle#getEstimatedPageCount
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public abstract long getEstimatedPageCount(BaseContainerHandle handle, int flag) throws StandardException;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
index a57be68e..c10cb03c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
@@ -170,7 +170,7 @@ public BaseContainerHandle(
 
 		@see BaseContainer#addPage
 		@see ContainerHandle#addPage
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Page addPage() throws StandardException 
     {
@@ -188,7 +188,7 @@ public Page addPage() throws StandardException
         will usually mean releasing any free pages located at the end of the
         file using the java truncate() interface.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void compressContainer() throws StandardException 
     {
@@ -218,7 +218,7 @@ public long getReusableRecordIdSequenceNumber() throws StandardException
 
 		@see BaseContainer#addPage
 		@see ContainerHandle#addPage
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Page addPage(int flag) throws StandardException {
 
@@ -284,7 +284,7 @@ public void getContainerProperties(Properties prop)
 		Remove a page from the container.  
 
 		@see ContainerHandle#removePage
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void removePage(Page page) throws StandardException
 	{
@@ -427,7 +427,7 @@ public void close()
 
 	/**
 		@see ContainerHandle#getEstimatedRowCount
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public long getEstimatedRowCount(int flag) throws StandardException
 	{
@@ -438,7 +438,7 @@ public long getEstimatedRowCount(int flag) throws StandardException
 
 	/**
 		@see ContainerHandle#setEstimatedRowCount
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public void setEstimatedRowCount(long count, int flag) 
         throws StandardException
@@ -450,7 +450,7 @@ public void setEstimatedRowCount(long count, int flag)
 
 	/**
 		@see ContainerHandle#getEstimatedPageCount
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public long getEstimatedPageCount(int flag) 
         throws StandardException
@@ -462,7 +462,7 @@ public long getEstimatedPageCount(int flag)
 
 	/**
 		@see ContainerHandle#flushContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public void flushContainer() 
         throws StandardException
@@ -480,7 +480,7 @@ public void flushContainer()
 
 	/**
 		@see ContainerHandle#compactRecord
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public void compactRecord(RecordHandle record) 
         throws StandardException
@@ -518,7 +518,7 @@ public void compactRecord(RecordHandle record)
 	/**
 		Get the container status.  
 
-		@exception StandardException Standard Cloudscape error policy		
+		@exception StandardException Standard Derby error policy		
 		@see RawContainerHandle#getContainerStatus
 	*/
 	public int getContainerStatus() throws StandardException
@@ -531,7 +531,7 @@ public int getContainerStatus() throws StandardException
 	/**
 		remove the container
 
-		@exception StandardException Standard Cloudscape error policy		
+		@exception StandardException Standard Derby error policy		
 		@see RawContainerHandle#removeContainer
 	*/
 	public void removeContainer(LogInstant instant) throws StandardException
@@ -566,7 +566,7 @@ public Object getUniqueId()
 
 
 	/**
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 		@see RawContainerHandle#dropContainer
 	*/
 	public void dropContainer(LogInstant instant, boolean drop) 
@@ -578,7 +578,7 @@ public void dropContainer(LogInstant instant, boolean drop)
 	}
 
 	/**
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 		@see RawContainerHandle#getContainerVersion
 	*/
 	public long getContainerVersion() 
@@ -595,7 +595,7 @@ public long getContainerVersion()
 		Caller must be prepared to handle freed, deallocated,or alloc page
 		Called by recovery ONLY.
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	public Page getAnyPage(long pageNumber) throws StandardException
 	{
@@ -651,7 +651,7 @@ public Page reCreatePageForRedoRecovery(
 		Log all information necessary to recreate the container during a load
 		tran.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public ByteArray logCreateContainerInfo() 
         throws StandardException
@@ -665,7 +665,7 @@ public ByteArray logCreateContainerInfo()
 		Return a record handle that is initialized to the given page number and
         record id.
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 
 		@param pageNumber   the page number of the RecordHandle.
 		@param recordId     the record id of the RecordHandle.
@@ -786,7 +786,7 @@ public AllocationActions getAllocationActionSet()
 
 		@param waitForLock if true, wait on lock, otherwise, get lock no wait.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public boolean useContainer(
     boolean droppedOK, 
@@ -937,7 +937,7 @@ public int getMode()
 	   checkpoint is taken after any log record is sent to the log stream but
 	   before the container is actually dirtied.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public void preDirty(boolean preDirtyOn) throws StandardException 
     {
@@ -950,7 +950,7 @@ public void preDirty(boolean preDirtyOn) throws StandardException
 
 	/**
 		@see ContainerHandle#isTemporaryContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public boolean isTemporaryContainer() throws StandardException 
     {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index 1ecf5e2c..a85fe7ec 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -529,7 +529,7 @@ public Cacheable newCacheable(CacheManager cm)
 	/**
 		Database creation finished
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 	*/
 	public void createFinished() throws StandardException
 	{
@@ -562,7 +562,7 @@ public ContainerHandle openContainer(
 
 	/**
 		@see DataFactory#openDroppedContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public RawContainerHandle openDroppedContainer(
     RawTransaction  t, 
@@ -581,7 +581,7 @@ public RawContainerHandle openDroppedContainer(
 
 	/**
 		@see DataFactory#openContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	private RawContainerHandle openContainer(
     RawTransaction  t, 
@@ -754,7 +754,7 @@ private RawContainerHandle openContainer(
 	}
 
 	/** Add a container with a specified page size to a segment.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public long addContainer(
     RawTransaction  t, 
@@ -900,7 +900,7 @@ public long addContainer(
 	}
 
 	/** Add and load a stream container
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public long addAndLoadStreamContainer(
     RawTransaction  t, 
@@ -926,7 +926,7 @@ public long addAndLoadStreamContainer(
 		open an exsisting streamContainer
 
 		@see DataFactory#openStreamContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public StreamContainerHandle openStreamContainer(
     RawTransaction  t, 
@@ -962,7 +962,7 @@ public StreamContainerHandle openStreamContainer(
 		<P>
 		This call will remove the container.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void dropStreamContainer(
     RawTransaction  t, 
@@ -1001,7 +1001,7 @@ public void dropStreamContainer(
 
 		called ONLY during recovery load tran.
 
-		@exception StandardException Standard Cloudscape Error policy
+		@exception StandardException Standard Derby Error policy
 	 */
 	public void reCreateContainerForRedoRecovery(
     RawTransaction  t, 
@@ -1040,7 +1040,7 @@ been marked as dropped it cannot be retrieved by an openContainer()
 		and all its pages deallocated. The container will be fully removed
 		at the commit time of the transaction.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void dropContainer(
     RawTransaction  t, 
@@ -1412,7 +1412,7 @@ void flush(LogInstant instant)
 		Not implemented in this class - subclass who deals with side log must
 		override this.
 
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Derby Standard Error Policy
 	*/
 	private void syncSideLog(long bipLocation)
 		 throws StandardException
@@ -1474,7 +1474,7 @@ protected Cacheable newRAFContainer(BaseDataFileFactory factory) {
 	 *	This page is going from clean to dirty, this is a chance for the
 	 *	sub class to do something if so desired
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 */
 	private void pageToDirty(RawTransaction t, StoredPage page)
 		 throws StandardException
@@ -1486,7 +1486,7 @@ private void pageToDirty(RawTransaction t, StoredPage page)
 	 * Get the loggable page action that is associated with this implementation
 	 *
 	 * @return the PageActions
-	 * @exception StandardExceptions Standard Cloudscape Error Policy
+	 * @exception StandardExceptions Standard Derby Error Policy
 	 */
 	private PageActions getLoggablePageActions() throws StandardException
 	{
@@ -2256,7 +2256,7 @@ void fileToRemove( StorageFile file, boolean remove)
 	/**
 		Called after recovery is performed.
 
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	*/
 	public void postRecovery() throws StandardException 
     {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
index 0e4c0241..6747880b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
@@ -430,7 +430,7 @@ public RecordHandle fetchFromSlot(
 
 
 	/**
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@see Page#fetchFieldFromSlot
 	 */
 	public final RecordHandle fetchFieldFromSlot(
@@ -491,7 +491,7 @@ public final int getNextSlotNumber(RecordHandle handle)
 	}
 
 	/** @see Page#insertAtSlot
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	 */
 	public RecordHandle insertAtSlot(
     int                     slot, 
@@ -598,7 +598,7 @@ protected RecordHandle insertNoOverflow(
 	}
 
 	/** @see Page#insert
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	 */
 	public final RecordHandle insert(
     Object[]   row, 
@@ -628,7 +628,7 @@ public final RecordHandle insert(
 		If handle is supplied then the record at that hanlde will be updated
 		to indicate it is a partial row and it has an overflow portion.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public RecordHandle insertAllowOverflow(
     int                     slot, 
@@ -903,7 +903,7 @@ protected RecordHandle insertLongColumn(BasePage mainChainPage,
 		@param handle			handle of the record for long row
 		@param overflowHandle	the overflow (continuation) pointer for the long row
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract void updateOverflowDetails(RecordHandle handle, RecordHandle overflowHandle)
 		throws StandardException;
@@ -916,7 +916,7 @@ public abstract void updateOverflowDetails(RecordHandle handle, RecordHandle ove
 		@param handle			handle of the record for long row
 		@param overflowHandle	the overflow (continuation) pointer for the long row
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract void updateFieldOverflowDetails(RecordHandle handle, RecordHandle overflowHandle)
 		throws StandardException;
@@ -931,7 +931,7 @@ public abstract void updateFieldOverflowDetails(RecordHandle handle, RecordHandl
 		@param overflowHandle	the overflow (continuation) pointer
 								to the beginning of the long column
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract int appendOverflowFieldHeader(DynamicByteArrayOutputStream logBuffer, RecordHandle overflowHandle)
 		throws StandardException, IOException;
@@ -947,7 +947,7 @@ protected abstract BasePage getNewOverflowPage()
 		throws StandardException;
 
 	/** @see Page#updateAtSlot
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception StandardException	StandardException.newException(SQLState.UPDATE_DELETED_RECORD
 		if the record is already deleted
 		@exception StandardException	StandardException.newException(SQLState.CONTAINER_READ_ONLY
@@ -994,7 +994,7 @@ public abstract void doUpdateAtSlot(
 		throws	StandardException;
 
 	/** @see Page#updateFieldAtSlot
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception StandardException	StandardException.newException(SQLState.UPDATE_DELETED_RECORD
 		if the record is already deleted
 		@exception StandardException	StandardException.newException(SQLState.CONTAINER_READ_ONLY
@@ -1529,7 +1529,7 @@ public final PageKey getPageId() {
 		Get an exclusive latch on the page.
 		<BR>
 		MT - thread safe
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	*/
 	void setExclusive(BaseContainerHandle requester)
 		throws StandardException {
@@ -1771,7 +1771,7 @@ public final StoredRecordHeader getHeaderAtSlot(int slot) {
 		<BR>
 		MT - latched
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public abstract boolean entireRecordOnPage(int slot) 
 		 throws StandardException;
@@ -1813,7 +1813,7 @@ private final void checkSlotOnPage(int slot)
 		<BR>
 		MT - latched
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException IO error accessing page
 	*/
 	public int setDeleteStatus(int slot, boolean delete) throws StandardException, IOException {
@@ -1829,7 +1829,7 @@ public int setDeleteStatus(int slot, boolean delete) throws StandardException, I
 	/**
 		Mark this page as being deallocated
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	public void deallocatePage() throws StandardException
 	{
@@ -1850,7 +1850,7 @@ public void deallocatePage() throws StandardException
 
 	/**
 		Mark this page as being allocated and initialize it to a pristine page
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	public void initPage(int initFlag, long pageOffset) 
 		 throws StandardException 
@@ -2123,7 +2123,7 @@ protected StoredRecordHeader shiftUp(int low)
 	  @param handle Handle to deleted or non-deleted record
 	  @see ContainerHandle#compactRecord
 
-	  @exception StandardException	Standard Cloudscape error policy
+	  @exception StandardException	Standard Derby error policy
 	*/
 	public void compactRecord(RecordHandle handle) throws StandardException
 	{
@@ -2292,7 +2292,7 @@ public byte getPageStatus()
      * @return  false if a qualifier_list is provided and the row does not 
      *          qualifier (no row read in that case), else true.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      **/
 	protected abstract boolean restoreRecordFromSlot(
     int                     slot, 
@@ -2310,7 +2310,7 @@ protected abstract boolean restoreRecordFromSlot(
 		<BR> MT - latched, page is latched when this methods is called.
 
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	protected abstract void restorePortionLongColumn(OverflowInputStream fetchStream)
 		throws StandardException, IOException;
@@ -2320,7 +2320,7 @@ protected abstract void restorePortionLongColumn(OverflowInputStream fetchStream
 
 		<BR> MT - latched, page is latched when this methods is called.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract int newRecordId() throws StandardException;
 
@@ -2329,7 +2329,7 @@ protected abstract void restorePortionLongColumn(OverflowInputStream fetchStream
 
 		<BR> MT - latched, page is latched when this methods is called.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract int newRecordIdAndBump() throws StandardException;
 
@@ -2341,7 +2341,7 @@ protected abstract void restorePortionLongColumn(OverflowInputStream fetchStream
 
 		<BR> MT - latched, page is latched when this methods is called.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	protected abstract int newRecordId(int recordId) throws StandardException;
 
@@ -2351,7 +2351,7 @@ protected abstract void restorePortionLongColumn(OverflowInputStream fetchStream
 
 		<BR> MT - latched, page is latched when this methods is called.
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	*/
 	public abstract boolean spaceForCopy(int num_rows, int[] spaceNeeded)
 		 throws StandardException;
@@ -2362,7 +2362,7 @@ public abstract boolean spaceForCopy(int num_rows, int[] spaceNeeded)
 
 		<BR> MT - latched, page is latched when this methods is called.
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	*/
 	public abstract int getTotalSpace(int slot) throws StandardException;
 
@@ -2408,7 +2408,7 @@ public abstract boolean spaceForCopy(int num_rows, int[] spaceNeeded)
 
 		<BR> MT - latched - page latch must be held
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException object exceeds the available data in the stream.
 
 	*/
@@ -2432,7 +2432,7 @@ public abstract void restoreRecordFromStream(
 		@param headRowHandle	the recordHandle of the head row piece, used
 						for post commit cleanup for update. 
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract void logRecord(int slot, int flag, int recordId,
 								   FormatableBitSet validColumns, OutputStream out,
@@ -2467,7 +2467,7 @@ Pass in (-1) if realStartColumn is not significant.
 		@param realSpaceOnPage	Being used in conjunction with realStartColumn,
 								to indicate the real free space left on the page.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract int logRow(
     int                     slot, 
@@ -2493,7 +2493,7 @@ public abstract int logRow(
 		@param fieldNumber Number of the field (starts at 0).
 		@param out		Where to write the logged form.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract void logField(int slot, int fieldNumber, OutputStream out)
 		throws StandardException, IOException;
@@ -2507,7 +2507,7 @@ public abstract void logField(int slot, int fieldNumber, OutputStream out)
 		@param column column version of the field.
 		@param out		Where to write the logged form.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract void logColumn(
     int                     slot, 
@@ -2527,7 +2527,7 @@ public abstract void logColumn(
 		@param column		column version of the field.
 		@param out			Where to write the logged form.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public abstract int logLongColumn(
     int                     slot, 
@@ -2543,7 +2543,7 @@ public abstract int logLongColumn(
 
 		<BR> MT - latched - page latch must be held
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Thrown by InputStream methods potential I/O errors
 		while writing the page
 		
@@ -2558,7 +2558,7 @@ public abstract void storeRecord(LogInstant instant, int slot, boolean forInsert
 
 		<BR> MT - latched - page latch must be held
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Thrown by InputStream methods and potential I/O errors
 		while writing the page.
 	*/
@@ -2572,7 +2572,7 @@ public abstract void storeField(LogInstant instant, int slot,
 
 		<BR> MT - latched - page latch must be held
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Thrown by InputStream methods and potential I/O errors
 		while writing the page.
 	*/
@@ -2585,7 +2585,7 @@ public abstract void reserveSpaceForSlot(LogInstant instant, int slot, int space
 
 		<BR> MT - latched - page latch must be held
 		
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Thrown by InputStream methods
 
 	*/
@@ -2602,7 +2602,7 @@ public abstract void skipField(ObjectInput in)
 		@param slot the slot to delete or undelete
 		@param delete set delete status to this value 
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException IO error accessing page
 	*/
 	public abstract void setDeleteStatus(LogInstant instant, int slot, boolean delete)
@@ -2616,7 +2616,7 @@ public abstract void setDeleteStatus(LogInstant instant, int slot, boolean delet
 		@param slot the slot to purge
 		@param recordId the id of the record that is to be purged
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Thrown by potential I/O errors
 		while writing the page.
 	*/
@@ -2627,7 +2627,7 @@ public abstract void purgeRecord(LogInstant instant, int slot,
 	/**
 		Subclass implementation of compactRecord.
 		@see BasePage#compactRecord
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected abstract void compactRecord(RawTransaction t, int slot, int recordId)
 		 throws StandardException;
@@ -2640,7 +2640,7 @@ protected abstract void compactRecord(RawTransaction t, int slot, int recordId)
 		@param instant the log instant of the log record
 		@param status the page status
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public abstract void setPageStatus(LogInstant instant, byte status)
 		throws StandardException;
@@ -2651,7 +2651,7 @@ public abstract void setPageStatus(LogInstant instant, byte status)
 
 		All subtypes are expected to overwrite this method if it has something to clean up
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public abstract void initPage(LogInstant instant, byte status, 
 								  int recordId, boolean overflow, boolean reuse)
@@ -2659,7 +2659,7 @@ public abstract void initPage(LogInstant instant, byte status,
 
 	/**
 		Set the reserved space for this row to value.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public abstract void setReservedSpace(LogInstant instant, int slot, int value) 
 		 throws StandardException, IOException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
index d5148691..675bdc6c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java
@@ -166,7 +166,7 @@ protected void initialize()
 	 * @return always true, higher levels have already checked the page number 
      *         is valid for an open.
      *
-     * @exception StandardException Standard Cloudscape policy.
+     * @exception StandardException Standard Derby policy.
      *
      * @see Cacheable#setIdentity
      **/
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerBasicOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerBasicOperation.java
index 9f12354f..5a888f85 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerBasicOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerBasicOperation.java
@@ -194,7 +194,7 @@ protected RawContainerHandle findContainer(Transaction tran)
 		missing container in load tran should override this method to return
 		the recreated container
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected RawContainerHandle findContainerForRedoRecovery(
     RawTransaction tran) 
@@ -205,7 +205,7 @@ protected RawContainerHandle findContainerForRedoRecovery(
 	
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public boolean needsRedo(Transaction xact)
 		 throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerOperation.java
index 1cfa90fb..3b534d35 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerOperation.java
@@ -150,7 +150,7 @@ public int getTypeFormatId() {
 		If we are in load tran, and the operation is a create, the container
 		may not (should not?) exist yet.  We need to recreate it.
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby error policy.
 	 */
 	protected RawContainerHandle findContainerForRedoRecovery(
     RawTransaction xact)
@@ -170,7 +170,7 @@ protected RawContainerHandle findContainerForRedoRecovery(
 	}
 
 	/** 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public final void doMe(Transaction tran, LogInstant instant, 
 						   LimitObjectInput in)
@@ -215,7 +215,7 @@ public final void doMe(Transaction tran, LogInstant instant,
 		@param CLRInstant the log instant of the CLR
 		@param in optional data
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void undoMe(Transaction tran, RawContainerHandle hdl,
 					   LogInstant CLRInstant, LimitObjectInput in)
@@ -249,7 +249,7 @@ public void undoMe(Transaction tran, RawContainerHandle hdl,
 
 	/**
 		@see org.apache.derby.iapi.store.raw.Undoable
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Compensation generateUndo(Transaction tran, LimitObjectInput in)
 		 throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerUndoOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerUndoOperation.java
index 3ddfa1fb..1e673d4c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerUndoOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/ContainerUndoOperation.java
@@ -117,7 +117,7 @@ public void setUndoOp(Undoable op)
 		@param in			optional data
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby error policy.
 
 		@see ContainerOperation#generateUndo
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java
index 6cd35757..19b44cd4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java
@@ -157,7 +157,7 @@ public int getTypeFormatId() {
 	 */
 	/**
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby error policy.		
 	  
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -184,7 +184,7 @@ public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 	    to undo this operation, purge all records that were copied over.
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@see PhysicalPageOperation#undoMe
 	 */
 	public void undoMe(Transaction xact, BasePage undoPage,
@@ -215,7 +215,7 @@ public void undoMe(Transaction xact, BasePage undoPage,
 	 * restore the before image of the page
 	 *
 	 * @exception IOException problem reading the complete log record from the input stream
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 */
 	public void restoreMe(Transaction xact, BasePage undoPage,
 					   LogInstant CLRInstant, LimitObjectInput in)
@@ -239,7 +239,7 @@ public ByteArray getPreparedLog()
 		Write the rows that are to be copied into this page
 
 		@exception IOException Can be thrown by any of the methods of ObjectOutput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 
 	*/
 	private void writeOptionalDataToBuffer(RawTransaction t, BasePage srcPage, int srcSlot)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java
index 8c067699..a0872905 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java
@@ -48,7 +48,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * <p>
      *
 	 * @return A string of the form TABLE(conglomerate_id, container_id).
-     * @exception StandardException Standard Cloudscape Error
+     * @exception StandardException Standard Derby Error
 	 **/
     public String diag()
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_RecordId.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_RecordId.java
index fb9c0cac..4c041651 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_RecordId.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_RecordId.java
@@ -47,7 +47,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * <p>
      *
 	 * @return A string of the form TABLE(conglomerate_id, container_id).
-     * @exception StandardException Standard Cloudscape Error
+     * @exception StandardException Standard Derby Error
 	 **/
     public String diag()
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java
index 65e45760..f630a59f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java
@@ -144,7 +144,7 @@ public int getTypeFormatId() {
 		Mark the record as deleted on the page.
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -213,7 +213,7 @@ public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
 		Restore the row stored in the optional data of the log record.
 
 		@exception IOException error reading from log stream
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void restoreLoggedRow(
     Object[]   row, 
@@ -249,7 +249,7 @@ public void restoreLoggedRow(
 	/**
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
@@ -289,7 +289,7 @@ public ByteArray getPreparedLog()
 	    if logical undo, writes out the row that was deleted
 
 		@exception IOException Can be thrown by any of the methods of ObjectOutput
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	*/
 	private void writeOptionalDataToBuffer(RawTransaction t)
 		throws StandardException, IOException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DirectAllocActions.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DirectAllocActions.java
index 3ccfdb94..4af4a25c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DirectAllocActions.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/DirectAllocActions.java
@@ -49,7 +49,7 @@ public DirectAllocActions() {
 		@param undoStatus		on undo, set the allocation status of the page
 								this value 
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void actionAllocatePage(RawTransaction t, BasePage allocPage, 
 								   long pageNumber, int doStatus, int undoStatus)
@@ -67,7 +67,7 @@ public void actionAllocatePage(RawTransaction t, BasePage allocPage,
 		@param pageNumber		the next allocation page's number 
 		@param pageOffset		the next allocation page's page offset
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void actionChainAllocPage(RawTransaction t, BasePage allocPage, 
 								long pageNumber, long pageOffset)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java
index f0953866..f16926ff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java
@@ -152,7 +152,7 @@ public int getTypeFormatId() {
      * @param instant   log instant for this operation.
      * @param in        unused by this log operation.
      *
-     * @exception StandardException Standard Cloudscape error policy
+     * @exception StandardException Standard Derby error policy
      */
     public final void doMe(Transaction tran, LogInstant instant, 
                            LimitObjectInput in)
@@ -173,7 +173,7 @@ public final void doMe(Transaction tran, LogInstant instant,
        that existed before the start of the database encryption is put back.
         
        @param tran the transaction that is undoing this operation
-       @exception StandardException Standard Cloudscape error policy
+       @exception StandardException Standard Derby error policy
     */
     public void undoMe(Transaction tran) throws StandardException
     {
@@ -192,7 +192,7 @@ public void undoMe(Transaction tran) throws StandardException
      * encryption.
      * @param tran	the transaction doing the compensating
 	 * @param in	optional input; not used by this operation.
-     * @exception StandardException Standard Cloudscape error policy
+     * @exception StandardException Standard Derby error policy
      */
     public Compensation generateUndo(Transaction tran, LimitObjectInput in)
         throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
index 840aa1b2..bbd4bd21 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
@@ -552,7 +552,7 @@ protected void setDirty(boolean dirty)
      * passed in identity, this object will no identity until after this 
      * method returns.
      *
-     * @exception StandardException Cloudscape Standard error policy
+     * @exception StandardException Derby Standard error policy
      **/
 	abstract void createContainer(ContainerKey newIdentity) 
         throws StandardException;
@@ -630,7 +630,7 @@ protected long getContainerVersion()
      *     derby.storage.pageReservedSpace
      *     derby.storage.minimumRecordSize
      *     derby.storage.reusableRecordId
-	 *     cloudsacpe.storage.initialPages
+     *     derby.storage.initialPages
      * <p>
      * To get the value of a particular property add it to the property list,
      * and on return the value of the property will be set to it's current 
@@ -706,7 +706,7 @@ public void getContainerProperties(Properties prop)
 
 		<BR> MT - single thread required - Enforced by caller.
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 		@exception IOException error in reading the header from file
 	*/
 	protected void readHeader(DataInput fileData) 
@@ -787,7 +787,7 @@ private void initContainerHeader(boolean changeContainer)
 		The container Header array must be written by or of
 		the same format as put together by writeHeaderFromArray.
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 		@exception IOException error in reading the header from file
 	*/
 	private void readHeaderFromArray(byte[] a)
@@ -861,7 +861,7 @@ private void readHeaderFromArray(byte[] a)
 	/**
 		Write the container header to a page array (the first allocation page)
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 		@exception IOException error in writing the header to file
 	*/
 	protected void writeHeader(byte[] pageData)
@@ -883,7 +883,7 @@ Write the container header directly to output stream (fileData).
 
 		<BR> MT - single thread required - Enforced by caller
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 		@exception IOException error in writing the header to file
 	 */
 	protected void writeHeader(DataOutput fileData, boolean create, byte[] epage)
@@ -989,7 +989,7 @@ private void writeHeaderToArray(byte[] a) throws IOException
 		Log all information on the container creation necessary to recreate the
 		container during a load tran.
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	protected ByteArray logCreateContainerInfo() 
 		 throws  StandardException
@@ -1211,7 +1211,7 @@ protected boolean canUpdate() {
 		@param page the page to be deallocated.  It is latched upon entry and
 		will be unlatched by the caller of this function
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	protected void deallocatePage(BaseContainerHandle handle, BasePage page)
 		 throws StandardException
@@ -1338,7 +1338,7 @@ mark that in its data structure (the alloc extent).  Mark the
 	  #param allocHandle - the container handle opened by the ntt, 
 						use this to latch the alloc page
 
-	  @exception StandardException Standard Cloudscape error policy 
+	  @exception StandardException Standard Derby error policy 
 	*/
 	protected void compressContainer(
     RawTransaction      ntt,
@@ -1507,7 +1507,7 @@ data structure (the alloc extent) and returns the page number of the
 	  #param allocHandle - the container handle opened by the ntt, 
 						use this to latch the alloc page
 
-	  @exception StandardException Standard Cloudscape error policy 
+	  @exception StandardException Standard Derby error policy 
 	*/
 	protected BasePage newPage(BaseContainerHandle userHandle,
 							   RawTransaction ntt,
@@ -2275,7 +2275,7 @@ private AllocPage makeAllocPage(RawTransaction ntt,
 		@param reuse is true if we are reusing a page that has 
 				already been initialized once
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	protected BasePage initPage(BaseContainerHandle allochandle, 
 								PageKey pkey,
@@ -2383,7 +2383,7 @@ Get User page is the generic base routine for all user (client to raw
 
 		<BR> MT - thread safe
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	private BasePage getUserPage(BaseContainerHandle handle, long pageNumber,
         boolean overflowOK, boolean wait)
@@ -2459,7 +2459,7 @@ Get a valid (non-deallocated or free) page in the container.
 
 		<BR> MT - thread safe
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected BasePage getPage(BaseContainerHandle handle, long pageNumber,
         boolean wait)
@@ -2473,7 +2473,7 @@ protected BasePage getPage(BaseContainerHandle handle, long pageNumber,
 	/**
 		Get any old page - turn off all validation
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	protected BasePage getAnyPage(BaseContainerHandle handle, long pageNumber) throws StandardException
 	{
@@ -2658,7 +2658,7 @@ else if (pageFormat == AllocPage.FORMAT_NUMBER)
 		Get an alloc page - only accessible to the raw store 
 		(container and recovery)
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	protected BasePage getAllocPage(long pageNumber) throws StandardException 
 	{
@@ -2689,7 +2689,7 @@ protected BasePage getAllocPage(long pageNumber) throws StandardException
 		Get only a valid, non-overflow page.  If page number is either invalid
 		or overflow, returns null
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	protected BasePage getHeadPage(BaseContainerHandle handle, long pageNumber,
         boolean wait)
@@ -2702,7 +2702,7 @@ protected BasePage getHeadPage(BaseContainerHandle handle, long pageNumber,
 	/**
 		Get the first valid page in the container
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	protected BasePage getFirstHeadPage(BaseContainerHandle handle, boolean wait)
 		 throws StandardException
@@ -2712,7 +2712,7 @@ protected BasePage getFirstHeadPage(BaseContainerHandle handle, boolean wait)
 
 	/**
 		Get the next page in the container.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected BasePage getNextHeadPage(BaseContainerHandle handle,
         long pageNumber, boolean wait)
@@ -2882,7 +2882,7 @@ protected BasePage getPageForCompress(
 
 	/**
 		Get a potentially suitable page for insert and latch it.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected BasePage getPageForInsert(BaseContainerHandle handle,
 										int flag)
@@ -3077,7 +3077,7 @@ protected void updateEstimatedRowCount(int delta)
 
 	/**
 		@see ContainerHandle#getEstimatedPageCount
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public long getEstimatedPageCount(BaseContainerHandle handle, int flag)
 		 throws StandardException 
@@ -3109,7 +3109,7 @@ public long getEstimatedPageCount(BaseContainerHandle handle, int flag)
 
 		<BR> MT - thread safe
 		@exception IOException error reading page
-		@exception StandardException standard cloudscape error message
+		@exception StandardException standard Derby error message
 	*/
 	protected abstract void readPage(long pageNumber, byte[] pageData)
 		 throws IOException, StandardException;
@@ -3120,7 +3120,7 @@ protected abstract void readPage(long pageNumber, byte[] pageData)
 
 		<BR> MT - thread safe
 		@exception IOException error writing page
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected abstract void writePage(long pageNumber, byte[] pageData, boolean syncPage) 
 		throws IOException, StandardException;
@@ -3133,7 +3133,7 @@ protected abstract void writePage(long pageNumber, byte[] pageData, boolean sync
 
 		<BR>MT - MT safe.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected void decryptPage(byte[] pageData, int pageSize)
 		 throws StandardException
@@ -3165,7 +3165,7 @@ protected void decryptPage(byte[] pageData, int pageSize)
 		<BR> MT - not safe, call within synchronized block and only use the
 		returned byte array withing synchronized block. 
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected byte[] encryptPage(byte[] pageData, 
                                  int pageSize, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java
index 00e4e925..9f31fecf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java
@@ -139,7 +139,7 @@ public int getTypeFormatId() {
 		Mark the page as valid, and clear out any crud from the page
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -165,7 +165,7 @@ public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 		This routine is called as the last resort of find page, the container
 		handle has already been found and it is not dropped.
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	*/
 	protected BasePage getPageForRedoRecovery(Transaction xact)
 		 throws StandardException
@@ -217,7 +217,7 @@ public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant,
 	/** 
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java
index bc265769..c9a69e55 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java
@@ -115,7 +115,7 @@ void closeContainer()
 		occurs then ...
 
 		@see org.apache.derby.iapi.services.cache.Cacheable#clean
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public final void clean(boolean forRemove) throws StandardException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java
index a47f0824..a5890bbf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java
@@ -164,7 +164,7 @@ public int getTypeFormatId() {
 	 */
 	/**
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	  
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -183,7 +183,7 @@ public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 		All logical undo logic has already been taken care of by generateUndo.
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 
 		@see LogicalPageOperation#undoMe
 	*/
@@ -252,7 +252,7 @@ public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
 		Restore the row stored in the optional data of the log record.
 
 		@exception IOException error reading from log stream
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
 		throws StandardException, IOException
@@ -286,7 +286,7 @@ public void restoreLoggedRow(Object[] row, LimitObjectInput in)
 	/**
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
@@ -336,7 +336,7 @@ public int getNextStartColumn()
 		Writes out the row that is to be inserted as the optional data.
 
 		@exception IOException Can be thrown by any of the methods of ObjectOutput
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	*/
 	private void writeOptionalDataToBuffer(
     RawTransaction          t, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java
index a718a2ee..7fd7b4f1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java
@@ -110,7 +110,7 @@ public int getTypeFormatId() {
 		Mark the page as being invalidated
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -147,7 +147,7 @@ public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant,
 	/**
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java
index a4676b0a..80d210a0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LoggableAllocActions.java
@@ -47,7 +47,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		@param undoStatus		on undo, set the allocation status of the page
 								this value 
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void actionAllocatePage(RawTransaction t, BasePage allocPage, 
 								   long pageNumber, int doStatus, int undoStatus)
@@ -72,7 +72,7 @@ public void actionAllocatePage(RawTransaction t, BasePage allocPage,
 		@param pageNumber		the next allocation page's number 
 		@param pageOffset		the next allocation page's page offset
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 	*/
 	public void actionChainAllocPage(RawTransaction t, BasePage allocPage, 
 								long pageNumber, long pageOffset)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java
index 2771066c..93949dee 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java
@@ -131,7 +131,7 @@ Generate a Compensation (PageUndoOperation) that will rollback the
 		be rolled back (redo only), overwrite this function to return null.
 
 		@see LogicalUndo
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 		@exception IOException Method may read from ObjectInput
 	*/
 
@@ -318,7 +318,7 @@ This method can be used with the default releaseResource().
 
 	  @return the compensation operation that will rollback this change 
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException Method may read from ObjectInput
 
 	  @see PageBasicOperation
@@ -409,7 +409,7 @@ private BasePage findLogicalPage(Transaction xact, LogicalUndo undo,
 		@param in			optional data for the rollback operation
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	*/
 	abstract public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
 								LogInstant CLRinstant, LimitObjectInput in) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java
index aceee67a..3695fcce 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java
@@ -156,7 +156,7 @@ public void setUndoOp(Undoable op)
 		@param in			optional data
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 	 */
 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageActions.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageActions.java
index 53e970e0..0fbcd309 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageActions.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageActions.java
@@ -52,7 +52,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * @param delete			set the delete status to this value
      * @param undo				logical undo logic if necessary
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      * @see org.apache.derby.iapi.store.raw.Page#deleteAtSlot
      **/
 	public void actionDelete(
@@ -84,7 +84,7 @@ public void actionDelete(
      * @return the next column to update in the row or,
      *         -1 if the update has been completed.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      *
      * @see org.apache.derby.iapi.store.raw.Page#updateAtSlot
      **/
@@ -114,7 +114,7 @@ public int actionUpdate(
      * @param num_rows		how many rows to purge
      * @param recordIds		the recordIDs of the record (an array of num_rows)
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      *
      * @see org.apache.derby.iapi.store.raw.Page#purgeAtSlot
      **/
@@ -143,7 +143,7 @@ public void actionPurge(
      *                      logic resides.   Null if logical undo is not 
      *                      necessary.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      *
      * @see org.apache.derby.iapi.store.raw.Page#updateFieldAtSlot
      *
@@ -174,7 +174,7 @@ public void actionUpdateField(
      *                          not necessary.
      * @param insertFlag		see Page value for insertFlag
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      *
      * @see org.apache.derby.iapi.store.raw.Page#insertAtSlot
      **/
@@ -209,7 +209,7 @@ public int actionInsert(
      * @param recordIds		    an array of record ids to use in the 
      *                          destination page
      *
-     * @exception StandardException Standard Cloudscape policy.
+     * @exception StandardException Standard Derby policy.
      **/
 	public void actionCopyRows(
     RawTransaction  t, 
@@ -233,7 +233,7 @@ public void actionCopyRows(
      * @param t             	The transaction
      * @param page				that page to be invalidated
      *
-     * @exception StandardException Standard Cloudscape policy.  
+     * @exception StandardException Standard Derby policy.  
      **/
 	public void actionInvalidatePage(
     RawTransaction  t, 
@@ -254,7 +254,7 @@ public void actionInvalidatePage(
      *                          initialized.
      * @param pageFormatId		The format Id of the page being initialized.
      *
-     * @exception StandardException Standard Cloudscape policy.
+     * @exception StandardException Standard Derby policy.
      **/
 	public void actionInitPage(
     RawTransaction  t, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java
index a96c4d3b..4e32f761 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java
@@ -152,7 +152,7 @@ public void readExternal(ObjectInput in)
 	/** Returns true if this op should be redone during recovery redo,
 	    if so, get and latched the page.
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	 */
 	public final boolean needsRedo(Transaction xact)
 		 throws StandardException
@@ -220,7 +220,7 @@ public int group()
 		WARNING: If a log operation extends this class, and the operation has optional data,
 		it MUST overwrite this method to return a ByteArray that contains the optional data. 
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	*/
 	public ByteArray getPreparedLog() throws StandardException
 	{
@@ -270,7 +270,7 @@ protected final PageKey getPageId() {
 		@return null if container is dropped and committed (possibly
 		stubbified), else return the latched page
 
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	 */
 	public final BasePage findpage(Transaction xact) throws StandardException 
 	{
@@ -362,7 +362,7 @@ public final BasePage findpage(Transaction xact) throws StandardException
 		Subclass (e.g., init page) that wishes to do something about missing
 		pages in load tran should override this method to return the page
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	protected BasePage getPageForRedoRecovery(Transaction xact)
 		 throws StandardException
@@ -397,7 +397,7 @@ public final long getPageVersion() {
 		@param in			optional data for the rollback operation
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	*/
 	abstract public void restoreMe(Transaction xact, BasePage undoPage,
 								LogInstant CLRinstant, LimitObjectInput in) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java
index 1baa8899..2496c59a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java
@@ -97,7 +97,7 @@ be rolled back (redo only), overwrite this function to return null.
 
 	  @return the compensation operation that will rollback this change 
 
-	  @exception StandardException Standard Cloudscape policy.
+	  @exception StandardException Standard Derby policy.
 
 	  @see PageBasicOperation
 	  @see Undoable#generateUndo
@@ -138,7 +138,7 @@ public Compensation generateUndo(Transaction xact, LimitObjectInput in)
 		@param in			optional data for the rollback operation
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	*/
 	abstract public void undoMe(Transaction xact, BasePage undoPage,
 								   LogInstant CLRinstant, LimitObjectInput in) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java
index 9cae0edb..e6649886 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java
@@ -118,7 +118,7 @@ public void setUndoOp(Undoable op)
 		@param in			optional data
 
 		@exception IOException Can be thrown by any of the methods of InputStream.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 	 */
 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java
index 57305956..ce8b94ce 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java
@@ -155,7 +155,7 @@ public int getTypeFormatId() {
 		Apply the purge operation to the page.
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -183,7 +183,7 @@ public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 		Undo the purge operation on the page.
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 
 		@see PhysicalPageOperation#undoMe
 	*/
@@ -206,7 +206,7 @@ public void undoMe(Transaction xact, BasePage undoPage,
 	/**
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
@@ -232,7 +232,7 @@ public ByteArray getPreparedLog()
 		Write out the purged record from the page.  Used for undo only.
 
 		@exception IOException Can be thrown by any of the methods of ObjectOutput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	*/
 	private void writeOptionalDataToBuffer(RawTransaction t, boolean needDataLogged)
 		throws StandardException, IOException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
index 49299fad..7c948895 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
@@ -118,7 +118,7 @@ synchronized public boolean isDirty() {
 
 	/**
 		Set container's identity
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Cacheable setIdentity(Object key) throws StandardException {
 
@@ -135,7 +135,7 @@ public Cacheable setIdentity(Object key) throws StandardException {
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
 
@@ -157,7 +157,7 @@ public Cacheable createIdentity(Object key, Object createParameter) throws Stand
 	/**
 		Remove the container
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void removeContainer(LogInstant instant, boolean leaveStub)
 		 throws StandardException
@@ -218,7 +218,7 @@ void closeContainer() {
 
 		<BR> MT - thread safe
 		@exception IOException exception reading page
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void readPage(long pageNumber, byte[] pageData)
 		 throws IOException, StandardException
@@ -248,7 +248,7 @@ protected void readPage(long pageNumber, byte[] pageData)
 
 		<BR> MT - thread safe
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException IO error accessing page
 	*/
 	protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
@@ -720,7 +720,7 @@ private void writeRAFHeader(StorageRandomAccessFile file, boolean create,
 	/**
 		flush the cache to ensure all of my pages are written to disk
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void flushAll() throws StandardException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
index edaf334a..ae9b1cc1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java
@@ -162,7 +162,7 @@ synchronized void closeContainer() {
      *
      *  <BR> MT - thread safe
      *  @exception IOException exception reading page
-     *  @exception StandardException Standard Cloudscape error policy
+     *  @exception StandardException Standard Derby error policy
      */
     protected void readPage(long pageNumber, byte[] pageData)
          throws IOException, StandardException
@@ -227,7 +227,7 @@ protected void readPage(long pageNumber, byte[] pageData)
      *
      *  <BR> MT - thread safe
      *
-     *  @exception StandardException Standard Cloudscape error policy
+     *  @exception StandardException Standard Derby error policy
      *  @exception IOException IO error accessing page
      */
     protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RemoveFileOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RemoveFileOperation.java
index 4f9ee832..3ac9a127 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RemoveFileOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/RemoveFileOperation.java
@@ -136,7 +136,7 @@ public void doMe(Transaction xact, LogInstant instant,
 
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public boolean needsRedo(Transaction xact)
 		 throws StandardException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java
index 2eb79d61..e358067a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java
@@ -115,7 +115,7 @@ public void readExternal(ObjectInput in)
 	 */
 	/**
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.		
+		@exception StandardException Standard Derby policy.		
 	  
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -142,7 +142,7 @@ public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 	/**
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
index b4545d97..5f0613ab 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
@@ -1407,7 +1407,7 @@ protected boolean spaceForCopy(int spaceNeeded)
      * @return  false if a qualifier_list is provided and the row does not 
      *          qualifier (no row read in that case), else true.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      **/
 	protected boolean restoreRecordFromSlot(
     int                     slot, 
@@ -3189,7 +3189,7 @@ private boolean isColumnOrphaned(
 
 		@param slot the slot number where the current piece of overflow column
 		is at.
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Derby Standard Error Policy
 	 */
     /**
      * Return the next recordHandle in a long column chain.
@@ -3546,7 +3546,7 @@ protected  boolean getIsOverflow(int slot) throws IOException
 
 		<P>
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 
 	*/
@@ -4307,7 +4307,7 @@ private void handleIncompleteLogRow(
 		@param limitInput the limit input stream
 		@param objectInput the object input stream
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException  I/O exception in reading meta data.
 	*/
 
@@ -5858,7 +5858,7 @@ public void restorePortionLongColumn(
      * field header followed the data of the column as defined by the data 
      * itself.  See this class's description for the specifics of the header.
      *
-     * @exception StandardException	    Standard Cloudscape error policy
+     * @exception StandardException	    Standard Derby error policy
      * @exception IOException			RESOLVE
      **/
 	public void logColumn(
@@ -5930,7 +5930,7 @@ public void logColumn(
      * @param column    the object form of the column to log 
      * @param out       where to log to the column to.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      * @exception IOException	    I/O exception from writing to an array.
      *
      * @see BasePage#logColumn
@@ -6516,7 +6516,7 @@ private int logOverflowField(
      * preceeded by a  compressed int that gives the length of the following 
      * data.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      * @exception IOException	    on error writing to log stream.
      *
      * @see BasePage#logRecord
@@ -6664,7 +6664,7 @@ private void logRecordDataPortion(
 		Find the field in the record and then write out the complete
 		field, i.e. header and data.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 
 		@see BasePage#logField
@@ -6697,7 +6697,7 @@ public void logField(int slot, int fieldNumber, OutputStream out)
 
 	/**
 		Override insertAtSlot to provide long row support.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public RecordHandle insertAtSlot(
     int                   slot, 
@@ -6729,7 +6729,7 @@ public RecordHandle insertAtSlot(
 
 	/**
 		Update field at specified slot
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public RecordHandle updateFieldAtSlot(
     int                 slot, 
@@ -6766,7 +6766,7 @@ public RecordHandle updateFieldAtSlot(
 
 	/**
 		Get the number of fields on the row at slot
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public int fetchNumFieldsAtSlot(int slot) throws StandardException
 	{
@@ -6820,7 +6820,7 @@ public int fetchNumFieldsAtSlot(int slot) throws StandardException
      *
      * @return the number of rows processed.
      *
-     * @exception StandardException	Standard Cloudscape error policy
+     * @exception StandardException	Standard Derby error policy
      *
      **/
 	public int moveRecordForCompressAtSlot(
@@ -6973,7 +6973,7 @@ private void cleanPage()
 		which may or may not be cleaned up the the client of raw store when it 
         was deallocated.
 
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Derby Standard Error Policy
 	 */
 	public void initPage(LogInstant instant, byte status, int recordId, 
 						 boolean overflow, boolean reuse)
@@ -7000,7 +7000,7 @@ public void initPage(LogInstant instant, byte status, int recordId,
 
 	/**
 		Set page status
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Derby Standard Error Policy
 	*/
 	public void setPageStatus(LogInstant instant, byte status)
 		 throws StandardException
@@ -7014,7 +7014,7 @@ public void setPageStatus(LogInstant instant, byte status)
 
 	/**
 		Set the row reserved space.
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Derby Standard Error Policy
 	 */
 	public void setReservedSpace(LogInstant instant, int slot, int value)
 		 throws StandardException, IOException
@@ -7061,7 +7061,7 @@ public void setReservedSpace(LogInstant instant, int slot, int value)
 	/**
 		Store a record at the given slot.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 	*/
 	public void storeRecord(LogInstant instant, int slot, boolean insert, ObjectInput in)
@@ -7506,7 +7506,7 @@ private int moveSavedDataToPage(DynamicByteArrayOutputStream savedData, int unus
 		when this method returns, ie. it only moves data that
 		has an offset greater then this.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 	*/
 	private void createSpaceForUpdate(int slot, int offset, int oldLength, int newLength)
@@ -7610,7 +7610,7 @@ private void createSpaceForUpdate(int slot, int offset, int oldLength, int newLe
 	/**
 		storeField
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 	*/
 	public void storeField(LogInstant instant, int slot, int fieldNumber, ObjectInput in)
@@ -7647,7 +7647,7 @@ public void storeField(LogInstant instant, int slot, int fieldNumber, ObjectInpu
 		This method will reserve at least specified "spaceToReserve" bytes for the record
 		in the slot.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 	*/
 	public void reserveSpaceForSlot(LogInstant instant, int slot, int spaceToReserve)
@@ -7745,7 +7745,7 @@ private int shiftRemainingData(int slot, int offset, int oldLength, int newLengt
 	/**
 		Set the deleted status
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 		@see BasePage#setDeleteStatus
 	*/
@@ -7776,7 +7776,7 @@ protected int internalDeletedRecordCount()
 	/**
 		purgeRecord from page.  Move following slots up by one.
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 		@exception IOException			RESOLVE
 	*/
 	public void purgeRecord(LogInstant instant, int slot, int recordId)
@@ -8097,7 +8097,7 @@ private String recordToString(int slot)
 
 	/**
 		Get the overflow page for a record that has already overflowed.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected StoredPage getOverflowPage(long pageNumber) throws StandardException
 	{
@@ -8116,7 +8116,7 @@ protected StoredPage getOverflowPage(long pageNumber) throws StandardException
 
 	/**
 		Get an empty overflow page.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected BasePage getNewOverflowPage() throws StandardException
 	{
@@ -8133,7 +8133,7 @@ protected BasePage getNewOverflowPage() throws StandardException
 
 	/**
 		Get the overflow slot for a record that has already overflowed.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected static int getOverflowSlot(BasePage overflowPage, StoredRecordHeader recordHeader)
 		throws StandardException
@@ -8153,7 +8153,7 @@ protected static int getOverflowSlot(BasePage overflowPage, StoredRecordHeader r
 
 	/**
 		Get a overflow page that potentially can handle a new overflowed record.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public BasePage getOverflowPageForInsert(
     int                     currentSlot, 
@@ -8165,7 +8165,7 @@ public BasePage getOverflowPageForInsert(
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public BasePage getOverflowPageForInsert(
     int                     currentSlot, 
@@ -8251,7 +8251,7 @@ public BasePage getOverflowPageForInsert(
 		@param slot Slot of the original record on its original page
 		@param row new version of the data
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void updateOverflowed(
     RawTransaction          t, 
@@ -8286,7 +8286,7 @@ protected void updateOverflowed(
 	/**
 		Update a record handle to point to an overflowed record portion.
 		Note that the record handle need not be the current page.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void updateOverflowDetails(RecordHandle handle, RecordHandle overflowHandle)
 		throws StandardException
@@ -8322,7 +8322,7 @@ private void updateOverflowDetails(StoredPage handlePage, RecordHandle handle, R
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void updateFieldOverflowDetails(RecordHandle handle, RecordHandle overflowHandle)
 		throws StandardException
@@ -8346,7 +8346,7 @@ public void updateFieldOverflowDetails(RecordHandle handle, RecordHandle overflo
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public int appendOverflowFieldHeader(DynamicByteArrayOutputStream logBuffer, RecordHandle overflowHandle)
 		throws StandardException, IOException
@@ -8423,7 +8423,7 @@ private boolean isLong(int fieldSize, int overflowThreshold) {
 	/**
 		Perform an update.
 
-		@exception StandardException Standard cloudscape policy
+		@exception StandardException Standard Derby policy
 	*/
 	public void doUpdateAtSlot(
     RawTransaction          t, 
@@ -8880,7 +8880,7 @@ private boolean checkRowReservedSpace(int slot) throws StandardException
 
 	/**
 		@see BasePage#compactRecord
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected void compactRecord(RawTransaction t, int slot, int id) 
 		 throws StandardException 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainerHandle.java
index a596f48c..8f519469 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainerHandle.java
@@ -190,7 +190,7 @@ public void close()
 	/**
 		remove the stream container
 
-		@exception StandardException Standard Cloudscape error policy		
+		@exception StandardException Standard Derby error policy		
 		@see StreamContainerHandle#removeContainer
 	 */
 	public void removeContainer() throws StandardException {
@@ -257,14 +257,14 @@ public void update(Observable obj, Object arg)
 	** in other packages that are specific implementations of Data, ie.
 	** a directory at the level
 	**
-	** com.ibm.db2j.impl.Database.Storage.RawStore.Data.*
+	** org.apache.derby.impl.store.raw.data.*
 	*/
 
 	/**
 		Attach me to a container. If this method returns false then
 		I cannot be used anymore, and any reference to me must be discarded.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public boolean useContainer() throws StandardException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SyncOnCommit.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SyncOnCommit.java
index e62a4d57..737f5091 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SyncOnCommit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/SyncOnCommit.java
@@ -72,7 +72,7 @@ public void update(Observable obj, Object arg) {
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	 */
 	protected void doIt(BaseContainerHandle handle)
 		throws StandardException {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TempRAFContainer.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TempRAFContainer.java
index 8d8c927b..57f582b1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TempRAFContainer.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TempRAFContainer.java
@@ -58,7 +58,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Cacheable setIdentity(Object key) throws StandardException {
 
@@ -74,7 +74,7 @@ public Cacheable setIdentity(Object key) throws StandardException {
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
 
@@ -89,7 +89,7 @@ public Cacheable createIdentity(Object key, Object createParameter) throws Stand
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException
 	{
@@ -122,7 +122,7 @@ protected int preAllocate(long lastPreallocPagenum, int preAllocSize)
 		Write the page, if it's within range of the current page range of the container.
 		If we do write it then don't request that it be synced.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void writePage(long pageNumber, byte[] pageData, boolean syncPage) throws IOException, StandardException {
 		if (!this.getDroppedState()) {
@@ -148,7 +148,7 @@ protected StorageFile privGetFileName(ContainerKey identity, boolean stub,
 		Add a page without locking the container, only one user will be accessing this
 		table at a time.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public Page addPage(BaseContainerHandle handle, boolean isOverflow) throws StandardException {
 
@@ -162,7 +162,7 @@ public Page addPage(BaseContainerHandle handle, boolean isOverflow) throws Stand
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void truncate(BaseContainerHandle handle) throws StandardException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TruncateOnCommit.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TruncateOnCommit.java
index 93a0c1a9..def70c19 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TruncateOnCommit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/TruncateOnCommit.java
@@ -84,7 +84,7 @@ public void update(Observable obj, Object arg) {
 	}
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected void doIt(BaseContainerHandle handle)
 		throws StandardException {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java
index e85650fa..0427a842 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java
@@ -148,7 +148,7 @@ public int getTypeFormatId() {
 		Change the value of a field.
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
 	*/
@@ -166,7 +166,7 @@ public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
 		Restore field to its old value.
 
 		@exception IOException Can be thrown by any of the methods of ObjectInput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 
 		@see LogicalPageOperation#undoMe
 	*/
@@ -213,7 +213,7 @@ public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
 		Restore the row stored in the optional data of the log record.
 
 		@exception IOException error reading from log stream
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
 		throws StandardException, IOException
@@ -255,7 +255,7 @@ public void restoreLoggedRow(Object[] row, LimitObjectInput in)
 	/**
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
@@ -298,7 +298,7 @@ public ByteArray getPreparedLog()
 	  If logical undo, writes out the entire row's before image.
 
 		@exception IOException Can be thrown by any of the methods of ObjectOutput.
-		@exception StandardException Standard Cloudscape policy.
+		@exception StandardException Standard Derby policy.
 	*/
 	private void writeOptionalDataToBuffer(
     RawTransaction      t, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java
index 628163e8..80bc2f41 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java
@@ -316,7 +316,7 @@ private void writeOptionalDataToBuffer(
 	/**
 	 * restore the before image of the page
 	 *
-	 * @exception StandardException Standard Cloudscape Error Policy
+	 * @exception StandardException Standard Derby Error Policy
 	 * @exception IOException problem reading the complete log record from the
 	 * input stream
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java
index 28124b9d..913d45b4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java
@@ -197,7 +197,7 @@ public void close() throws IOException
 		@return the instant in the log that can be used to identify the log
 		record
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	*/
 	public synchronized LogInstant logAndDo(RawTransaction xact, Loggable operation) 
 		 throws StandardException 
@@ -446,7 +446,7 @@ public synchronized LogInstant logAndDo(RawTransaction xact, Loggable operation)
 		@return the instant in the log that can be used to identify the log
 		record
 
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	public LogInstant logAndUndo(RawTransaction xact, 
 								 Compensation compensation,
@@ -855,7 +855,7 @@ record at undoStartAt and stopping at (inclusive) the log record at
 		@param undoStopAt	the last log record that should be rolled back
 		@param undoStartAt	the first log record that should be rolled back
 
-		@exception StandardException	Standard Cloudscape error policy
+		@exception StandardException	Standard Derby error policy
 
 		@see Logger#undo
 	  */
@@ -1112,7 +1112,7 @@ public void undo(
 		after the last log record).  This is used to determine where the log
 		truly ends
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException error reading log file
 		@exception ClassNotFoundException log file corrupted
 
@@ -1599,7 +1599,7 @@ protected long redo(
 		more log operation in the log scan
 
 		@exception IOException	Error reading the log file
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception ClassNotFoundException log corrupted
 	 */
 	protected Loggable readLogRecord(StreamLogScan scan, int size)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FlushedScan.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FlushedScan.java
index 2390e821..5b2d9cd0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FlushedScan.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/FlushedScan.java
@@ -119,7 +119,7 @@ public FlushedScan(LogToFile logFactory, long startAt)
 		@return the length of the data written into data, or -1 if the end of the
 		scan has been reached.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public LogRecord getNextRecord(ArrayInputStream input, 
 								   TransactionId tranId, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
index 0b3cab71..9fd88ead 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java
@@ -704,7 +704,7 @@ private void writeToLog(byte b[], int off, int len) throws IOException
             {
 
                 // Try to handle case where user application is throwing
-                // random interrupts at cloudscape threads, retry in the case
+                // random interrupts at Derby threads, retry in the case
                 // of IO exceptions 5 times.  After that hope that it is 
                 // a real disk problem - an IO error in a write to the log file
                 // is going to take down the whole system, so seems worthwhile
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
index 5382509f..9482a5a6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java
@@ -584,7 +584,7 @@ public Logger getLogger() {
 		@see Loggable#needsRedo
 		@see FileLogger#redo
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void recover(
     RawStoreFactory     rsf, 
@@ -1389,7 +1389,7 @@ public boolean checkpoint(RawStoreFactory rsf,
 	/**
 		checkpoint with pre-start transaction
 
-		@exception StandardException Cloudscape Standard Error Policy 
+		@exception StandardException Derby Standard Error Policy 
 	*/
 	protected boolean checkpointWithTran(RawTransaction cptran, 
 							   RawStoreFactory rsf,
@@ -1628,7 +1628,7 @@ protected boolean checkpointWithTran(RawTransaction cptran,
 
 		@param where flush log up to here
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void flush(LogInstant where) throws StandardException
 	{
@@ -1654,7 +1654,7 @@ public void flush(LogInstant where) throws StandardException
 
 		<P>MT - not needed, wrapper method
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void flushAll() throws StandardException
 	{
@@ -1685,7 +1685,7 @@ public void flushAll() throws StandardException
 		@return true if the log file is of the current version and of the
 		correct format
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	private boolean verifyLogFormat(StorageFile logFileName, long number)
 		 throws StandardException 
@@ -1717,7 +1717,7 @@ private boolean verifyLogFormat(StorageFile logFileName, long number)
 		@return true if the log file is of the current version and of the
 		correct format
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	private boolean verifyLogFormat(StorageRandomAccessFile log, long number) 
 		 throws StandardException
@@ -2515,7 +2515,7 @@ private void createLogDirectory() throws StandardException
 		Return the directory the log should go.
 
 		<P> MT- read only
-		@exception StandardException Cloudscape Standard Error Policy
+		@exception StandardException Derby Standard Error Policy
 	*/
 	public StorageFile getLogDirectory() throws StandardException
 	{
@@ -2615,7 +2615,7 @@ private CheckpointOperation findCheckpoint(long checkpointInstant, FileLogger lo
 		<P> MT- read only
 
 		@exception IOException cannot access the log
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected LogScan openBackwardsScan(long startAt, LogInstant stopAt)  
 		 throws IOException, StandardException
@@ -2639,7 +2639,7 @@ protected LogScan openBackwardsScan(long startAt, LogInstant stopAt)
 		<P> MT- read only
 
 		@exception IOException cannot access the log
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected LogScan openBackwardsScan(LogInstant stopAt)
 		 throws IOException, StandardException
@@ -2684,7 +2684,7 @@ public ScanHandle openFlushedScan(DatabaseInstant start,int groupsIWant)
 			Otherwise, stop at the end of the log
 
 		@exception IOException cannot access the log
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected LogScan openForwardsScan(long startAt, LogInstant stopAt)  
 		 throws IOException, StandardException
@@ -2722,7 +2722,7 @@ protected LogScan openForwardsScan(long startAt, LogInstant stopAt)
 
 		<P> MT- read only
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException cannot access the log at the new position.
 	*/
 	protected StorageRandomAccessFile getLogFileAtBeginning(long filenumber)
@@ -2741,7 +2741,7 @@ protected StorageRandomAccessFile getLogFileAtBeginning(long filenumber)
 
 		@return null if file does not exist or of the wrong format
 		@exception IOException cannot access the log at the new position.
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	protected StorageRandomAccessFile getLogFileAtPosition(long logInstant)
 		 throws IOException, StandardException
@@ -3925,7 +3925,7 @@ private void syncFile( StorageRandomAccessFile raf)
 	  Open a forward scan of the transaction log.
 
 	  <P> MT- read only
-	  @exception StandardException  Standard cloudscape exception policy
+	  @exception StandardException  Standard Derby exception policy
 	*/
 	public LogScan openForwardsFlushedScan(LogInstant startAt)
 		 throws StandardException
@@ -3941,7 +3941,7 @@ public LogScan openForwardsFlushedScan(LogInstant startAt)
 	/**
 	  Get a forwards scan
 
-	  @exception StandardException Standard Cloudscape error policy
+	  @exception StandardException Standard Derby error policy
 	  */
 	public LogScan openForwardsScan(LogInstant startAt,LogInstant stopAt)
 		 throws StandardException
@@ -4071,7 +4071,7 @@ public void deleteLogFileAfterCheckpointLogFile()
 
 	/**
 		@see RawStoreFactory#encrypt
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int encrypt(byte[] cleartext, int offset, int length, 
 						  byte[] ciphertext, int outputOffset)
@@ -4083,7 +4083,7 @@ public int encrypt(byte[] cleartext, int offset, int length,
 
 	/**
 		@see RawStoreFactory#decrypt
-		@exception StandardException Standard Cloudscape Error Policy
+		@exception StandardException Standard Derby Error Policy
 	 */
 	public int decrypt(byte[] ciphertext, int offset, int length,
 							 byte[] cleartext, int outputOffset)
@@ -4135,7 +4135,7 @@ public synchronized LogInstant getFirstUnflushedInstant()
 
 	/**
 	 * Backup restore - stop sending log record to the log stream
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void freezePersistentStore() throws StandardException
 	{
@@ -4149,7 +4149,7 @@ public void freezePersistentStore() throws StandardException
 
 	/**
 	 * Backup restore - start sending log record to the log stream
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void unfreezePersistentStore() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java
index 5910c3d2..614fa212 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java
@@ -77,7 +77,7 @@ public Logger getLogger() {
 
 	/**
 	  MT - not needed, no work is done
-	  @exception StandardException Cloudscape Standard Error Policy
+	  @exception StandardException Standard Derby Error Policy
 	*/
 	public void recover(RawStoreFactory rawStoreFactory,
 						DataFactory dataFactory,
@@ -241,7 +241,7 @@ public LogScan openForwardsFlushedScan(LogInstant startAt)
 
 	/**
 	 * Backup restore - stop sending log record to the log stream
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void freezePersistentStore() throws StandardException
 	{
@@ -250,7 +250,7 @@ public void freezePersistentStore() throws StandardException
 
 	/**
 	 * Backup restore - start sending log record to the log stream
-	 * @exception StandardException Standard Cloudscape error policy
+	 * @exception StandardException Standard Derby error policy
 	 */
 	public void unfreezePersistentStore() throws StandardException
 	{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/Scan.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/Scan.java
index 38ce2be1..d25b42fb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/Scan.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/log/Scan.java
@@ -111,7 +111,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		   first not-flushed log record. Like any forward scan, we expect a scan
 		   positioned at the beginning of the next log record.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 		@exception IOException cannot access the log at the new position.
 	*/
 	public Scan(LogToFile logFactory, long startAt, LogInstant stopAt, byte direction)
@@ -184,7 +184,7 @@ public Scan(LogToFile logFactory, long startAt, LogInstant stopAt, byte directio
 		@return the next LogRecord, or null if the end of the
 		scan has been reached.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public LogRecord getNextRecord(ArrayInputStream input, 
 							 TransactionId tranId, 
@@ -1087,7 +1087,7 @@ private LogRecord getNextRecordForward(ArrayInputStream input,
 
 		@param instant the position to reset to
 		@exception IOException scan cannot access the log at the new position.
-		@exception StandardException cloudscape standard error policy
+		@exception StandardException standard Derby error policy
 	*/
 
 	public void resetPosition(LogInstant instant) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking2.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking2.java
index 044f72e5..be13d041 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking2.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking2.java
@@ -55,7 +55,7 @@ protected ContainerLocking2(LockFactory lf)
 		Obtain a Container shared or exclusive lock	until
 		the end of the nested transaction.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public boolean lockContainer(
     Transaction     t, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking3.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking3.java
index cf8f4154..ca135d5a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking3.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/ContainerLocking3.java
@@ -50,7 +50,7 @@ protected ContainerLocking3(LockFactory lf)
 		Obtain a Container shared or exclusive lock	until
 		the end of the nested transaction.
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public boolean lockContainer(
     Transaction     t, 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/D_Xact.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/D_Xact.java
index 53931ebd..4e2f22cb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/D_Xact.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/D_Xact.java
@@ -48,7 +48,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * <p>
      *
 	 * @return A string with diagnostic information about the object.
-     * @exception StandardException Standard Cloudscape Error
+     * @exception StandardException Standard Derby Error
      *
      **/
     public String diag()
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
index 55eab5f5..68ed29c6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/Xact.java
@@ -363,7 +363,7 @@ public DynamicByteArrayOutputStream getLogBuffer() {
 
 		@see RawTransaction#logAndDo 
 		
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	*/
 	public void logAndUndo(Compensation compensation, LogInstant undoInstant, LimitObjectInput in)
 		 throws StandardException
@@ -525,7 +525,7 @@ public void setTransactionId(Loggable beginXact, TransactionId localId)
 
 	/**
 		The default value for LOCKS_ESCALATION_THRESHOLD
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 	 */
 	public void setup(PersistentSet set)
 		throws StandardException {
@@ -651,7 +651,7 @@ public final void setDefaultLockingPolicy(LockingPolicy policy) {
 	}
 	
 	/** 
-	  @exception StandardException  Standard cloudscape exception policy
+	  @exception StandardException  Standard Derby exception policy
 	*/
 	public LogInstant commit() throws StandardException
 	{
@@ -659,7 +659,7 @@ public LogInstant commit() throws StandardException
 	}
 
 	/** 
-	  @exception StandardException  Standard cloudscape exception policy
+	  @exception StandardException  Standard Derby exception policy
 	*/
 	public LogInstant commitNoSync(int commitflag) throws StandardException
 	{
@@ -697,7 +697,7 @@ public LogInstant commitNoSync(int commitflag) throws StandardException
 	}
 
 	/** 
-	  @exception StandardException  Standard cloudscape exception policy
+	  @exception StandardException  Standard Derby exception policy
 	  @see Transaction#commit
 	*/
 
@@ -846,7 +846,7 @@ private void completeCommit(int commitflag)
 	}
 
 	/** 
-	  @exception StandardException  Standard cloudscape exception policy
+	  @exception StandardException  Standard Derby exception policy
 	  @see Transaction#commit
 	*/
 	private LogInstant commit(int commitflag) 
@@ -867,7 +867,7 @@ private LogInstant commit(int commitflag)
 
 
 	/** 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#abort
 	*/
 	public void abort() throws StandardException {
@@ -1073,7 +1073,7 @@ public void reprepare()
 	/**
         If this transaction is not idle, abort it.  After this call close().
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
         Thrown if the transaction is not idle.
 
 		
@@ -1087,12 +1087,12 @@ public void destroy() throws StandardException
     }
 
 	/**
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@exception StandardException Thrown if the transaction is not idle, the
 		transaction remains open.
 		@see Transaction#close
 
-		@exception StandardException	Standard cloudscape policy
+		@exception StandardException	Standard Derby policy
 	*/
 	public void close() throws StandardException {
 
@@ -1168,7 +1168,7 @@ public void close() throws StandardException {
 		If the passed in operation is null, then do nothing (after logging the
 		beginXact if needed).
 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#logAndDo 
 	*/
 	public void logAndDo(Loggable operation) throws StandardException {
@@ -1251,7 +1251,7 @@ public void addPostTerminationWork(Serviceable work)
 		Return a record handle that is initialized to the given page number and
         record id.
 
-		@exception StandardException Standard cloudscape exception policy.
+		@exception StandardException Standard Derby exception policy.
 
 		@param segmentId    segment where the RecordHandle belongs.
 		@param containerId  container where the RecordHandle belongs.
@@ -1268,7 +1268,7 @@ public void addPostTerminationWork(Serviceable work)
 //     }
 
 	/** 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#openContainer 
 	*/
 	public ContainerHandle openContainer(ContainerKey containerId,  int mode)
@@ -1278,7 +1278,7 @@ public ContainerHandle openContainer(ContainerKey containerId,  int mode)
 	}
 
 	/** 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#openContainer 
 	*/
 	public ContainerHandle openContainer(ContainerKey containerId, LockingPolicy locking, int mode)
@@ -1295,7 +1295,7 @@ public ContainerHandle openContainer(ContainerKey containerId, LockingPolicy loc
 	/**
 		Open a container that may already have been dropped.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 		@see RawTransaction#openDroppedContainer
 	*/
 	public RawContainerHandle openDroppedContainer(ContainerKey containerId, LockingPolicy locking)
@@ -1327,7 +1327,7 @@ public RawContainerHandle openDroppedContainer(ContainerKey containerId, Locking
 
 
 	/** 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#addContainer 
 	*/
 	public long addContainer(long segmentId, long containerid, int mode, Properties tableProperties, int temporaryFlag)
@@ -1339,7 +1339,7 @@ public long addContainer(long segmentId, long containerid, int mode, Properties
 	}
 
 	/** 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#addAndLoadStreamContainer
 	*/
 	public long addAndLoadStreamContainer(long segmentId, Properties tableProperties, RowSource rowSource)
@@ -1352,7 +1352,7 @@ public long addAndLoadStreamContainer(long segmentId, Properties tableProperties
 	}
 
 	/** 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#openStreamContainer
 	*/
 	public StreamContainerHandle openStreamContainer(
@@ -1370,7 +1370,7 @@ public StreamContainerHandle openStreamContainer(
 
 	/**
 		@see Transaction#dropStreamContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void dropStreamContainer(long segmentId, long containerId)
 		throws StandardException {
@@ -1387,7 +1387,7 @@ public void dropStreamContainer(long segmentId, long containerId)
         are trying to create a container, and no valid container is found
         in the database.
 
-		@exception StandardException  Standard cloudscape exception policy
+		@exception StandardException  Standard Derby exception policy
 		@see RawTransaction#reCreateContainerForRedoRecovery
 	 */
 	public void reCreateContainerForRedoRecovery
@@ -1402,7 +1402,7 @@ public void dropStreamContainer(long segmentId, long containerId)
 
 	/**
 		@see Transaction#dropContainer
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void dropContainer(ContainerKey containerId)
 		throws StandardException {
@@ -1413,7 +1413,7 @@ public void dropContainer(ContainerKey containerId)
 	}
 
 	/**
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#setSavePoint
 	*/
 	public int setSavePoint(String name, Object kindOfSavepoint) 
@@ -1458,7 +1458,7 @@ public int setSavePoint(String name, Object kindOfSavepoint)
     // defined in the transaction. If yes, then throw an exception
 
 	/**
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#setSavePoint
 	*/
 	private void throwExceptionIfSQLSavepointNotAllowed(Object kindOfSavepoint)
@@ -1486,7 +1486,7 @@ private void throwExceptionIfSQLSavepointNotAllowed(Object kindOfSavepoint)
 	}
 
 	/**
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#releaseSavePoint
 	*/
 	public int releaseSavePoint(String name, Object kindOfSavepoint) 
@@ -1517,7 +1517,7 @@ public int releaseSavePoint(String name, Object kindOfSavepoint)
 	}
 
 	/** 
-	    @exception StandardException  Standard cloudscape exception policy
+	    @exception StandardException  Standard Derby exception policy
 		@see Transaction#rollbackToSavePoint
 	*/
 	public int rollbackToSavePoint(String name, Object kindOfSavepoint) 
@@ -2154,7 +2154,7 @@ private int getSavePointPosition(
 		otherwise it is left in the stack (at the top).
 
 		@return true if any work is rolled back, false if no work is rolled back
-		@exception StandardException	Standard cloudscape policy
+		@exception StandardException	Standard Derby policy
 		@exception StandardException Thrown if a error of severity less than TransactionException#SEVERITY
 		is encountered during the rollback of this savepoint.
 	*/
@@ -2207,7 +2207,7 @@ protected boolean popSavePoints(int position, boolean release) throws StandardEx
 	}
 
 	/**
-		@exception StandardException Cloudscape Standard error policy
+		@exception StandardException Derby Standard error policy
 	 */
 	public RawTransaction startNestedTopTransaction() throws StandardException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactContext.java
index 22cafb7f..9bcf671f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactContext.java
@@ -67,7 +67,7 @@ context manager (ie. typically a single user) for a single RawStoreFactory.
 
 
 	/**
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 	*/
 	public void cleanupOnError(Throwable error) throws StandardException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
index 269384b4..0026a147 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java
@@ -218,7 +218,7 @@ public LockFactory getLockFactory() {
 
 	/**
 		Database creation finished
-		@exception StandardException standard cloudscape error policy
+		@exception StandardException standard Derby error policy
 	*/
 	public void createFinished() throws StandardException
 	{
@@ -532,7 +532,7 @@ public void rollbackAllTransactions(
 
 		Used only in recovery.
 
-		@exception StandardException Cloudscape Standard Error policy
+		@exception StandardException Derby Standard Error policy
 	*/
 	public void handlePreparedXacts(
     RawStoreFactory rsf)
@@ -696,7 +696,7 @@ public void resetTranId()
 		not be allowed to be active during a quiesce state.
 
 
-		@exception StandardException Standard Cloudscape error policy
+		@exception StandardException Standard Derby error policy
 
 	*/
 	protected void pushTransactionContext(ContextManager cm, String contextName, 
@@ -979,7 +979,7 @@ public boolean inDatabaseCreation()
 	 * Return the module providing XAresource interface to the transaction 
      * table. 
      *
-	 * @exception StandardException Standard cloudscape exception policy.
+	 * @exception StandardException Standard Derby exception policy.
 	 */
 	public /* XAResourceManager */ Object getXAResourceManager()
         throws StandardException
