diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 5ae05eee..4c8ea4a3 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -61,6 +61,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
 import org.apache.derby.iapi.tools.i18n.LocalizedResource;
 import org.apache.derby.iapi.jdbc.AuthenticationService;
+import org.apache.derby.iapi.jdbc.EngineBlob;
+import org.apache.derby.iapi.jdbc.EngineClob;
+import org.apache.derby.iapi.jdbc.EngineResultSet;
 import org.apache.derby.impl.jdbc.EmbedSQLException;
 import org.apache.derby.impl.jdbc.Util;
 import org.apache.derby.jdbc.InternalDriver;
@@ -7276,6 +7279,7 @@ private void writeSQLDXGRP(ResultSetMetaData rsmeta,
    * @param stmt       Statement being processed
    *
    * @exception DRDAProtocolException  
+   * 
    * @exception SQLException
    *
    * @see FdocaConstants
@@ -7383,10 +7387,10 @@ else if (tsLen > 26)
 						writer.writeLDBytes((byte[]) val, index);
 					break;
                 case DRDAConstants.DRDA_TYPE_NLOBLOC:
+					writer.writeInt(((EngineBlob) val).getLocator());
+					break;
                 case DRDAConstants.DRDA_TYPE_NCLOBLOC:
-                    // Get locator for LOB
-                    int locator = database.getConnection().addLOBMapping(val);
-                    writer.writeInt(locator);
+					writer.writeInt(((EngineClob) val).getLocator());
                     break;
 				default:
 					if (SanityManager.DEBUG) 
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
index d890c3e9..67fc9219 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
@@ -616,20 +616,6 @@ final int statementHoldabilityCheck(int resultSetHoldability)
         return holdability;
         
     }
-	/**
-	* Add the locator and the corresponding LOB object into the
-	* HashMap
-	*
-	* @param LOBReference The object which contains the LOB object that
-	*                     that is added to the HashMap.
-	* @return an integer that represents the locator that has been
-	*         allocated to this LOB.
-	*/
-	public int addLOBMapping(Object LOBReference) throws SQLException {
-            //Forward the methods implementation to the implementation in the
-            //underlying EmbedConnection object. 
-            return getRealConnection().addLOBMapping(LOBReference);
-	}
 
 	/**
 	* Clear the HashMap of all entries.
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineBlob.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineBlob.java
index e69de29b..1fece68a 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineBlob.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineBlob.java
@@ -0,0 +1,19 @@
+package org.apache.derby.iapi.jdbc;
+
+/**
+ * Additional methods the embedded engine exposes on its Blob object
+ * implementations. An internal api only, mainly for the network
+ * server.  
+ * 
+ */
+
+public interface EngineBlob {
+
+    /**
+     * Return lob locator key that can be used with 
+     * EmbedConnection.getLobMapping(int) to retrieve this Blob.
+     * 
+     * @return lob locator for this Blob
+     */
+    public int getLocator();
+}
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineClob.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineClob.java
index 3f24d583..7901c89c 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineClob.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineClob.java
@@ -1 +1,19 @@
   + native
+package org.apache.derby.iapi.jdbc;
+
+/**
+ * Additional methods the embedded engine exposes on its Blob object
+ * implementations. An internal api only, mainly for the network
+ * server.  
+ * 
+ */
+
+public interface EngineClob {
+    /**
+     * Return lob locator key that can be used with 
+     * EmbedConnection.getLobMapping(int) to retrieve this Clob.
+     * 
+     * @return lob locator for this Clob
+     */
+    public int getLocator();
+}
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
index b1ce5fe0..a10034c5 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java
@@ -90,16 +90,6 @@ public PreparedStatement prepareStatement(String sql, int resultSetType,
     public void addWarning(SQLWarning newWarning)
         throws SQLException;
 
-    /**
-    * Add the locator and the corresponding LOB object into the
-    * HashMap
-    * @param LOBReference The object which contains the LOB object that
-    *                     that is added to the HashMap.
-    * @return an integer that represents the locator that has been
-    *         allocated to this LOB.
-    */
-    public int addLOBMapping(Object LOBReference) throws SQLException;
-
     /**
     * Clear the HashTable of all entries.
     * Called when a commit or rollback of the transaction
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 5138ce8c..477fe122 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -24,13 +24,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.jdbc.EngineBlob;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.types.Resetable;
-import org.apache.derby.impl.jdbc.ConnectionChild;
-import org.apache.derby.impl.jdbc.EmbedConnection;
-import org.apache.derby.impl.jdbc.Util;
 import org.apache.derby.iapi.services.io.NewByteArrayInputStream;
 import org.apache.derby.iapi.services.io.InputStreamUtil;
 import org.apache.derby.iapi.services.io.ArrayInputStream;
@@ -70,12 +68,15 @@ multiple threads and sucks data from the stream (returned from
 
  */
 
-final class EmbedBlob extends ConnectionChild implements Blob
+final class EmbedBlob extends ConnectionChild implements Blob, EngineBlob
 {
     // blob is either materialized or still in stream
     private boolean         materialized;
     private InputStream     myStream;
     
+    // locator key for lob. used by Network Server.
+    private final int             locator;
+    
     /*
      * Length of the BLOB if known. Set to -1 if
      * the current length of the BLOB is not known.
@@ -116,7 +117,7 @@ multiple threads and sucks data from the stream (returned from
              materialized = true;
              //add entry in connection so it can be cleared 
              //when transaction is not valid
-             con.addLOBMapping (this);
+             locator = con.addLOBMapping (this);
          }
          catch (IOException e) {
              throw Util.setStreamFailure (e);
@@ -192,7 +193,7 @@ implementing the getStream() method for dvd.getStream(), does not
         pos = 0;
         //add entry in connection so it can be cleared 
         //when transaction is not valid
-        con.addLOBMapping (this);
+        this.locator = con.addLOBMapping (this);
     }
 
 
@@ -992,4 +993,13 @@ private void checkValidity() throws SQLException{
     boolean isMaterialized () {
         return materialized;
     }
+
+    /**
+     * Return locator for this lob.
+     * 
+     * @return
+     */
+    public int getLocator() {
+        return locator;
+    }
 }
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index a9538785..3f2e494e 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.jdbc.EngineClob;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.types.Resetable;
@@ -66,7 +67,7 @@ multiple threads and sucks data from the stream (returned from
         new update methods can safely be added into implementation.
    </UL>
  */
-final class EmbedClob extends ConnectionChild implements Clob
+final class EmbedClob extends ConnectionChild implements Clob, EngineClob
 {
 
     /**
@@ -78,6 +79,8 @@ multiple threads and sucks data from the stream (returned from
     /** Tells whether the Clob has been freed or not. */
     private boolean isValid = true;
 
+    private final int locator;
+    
     /**
      * Creates an empty Clob object.
      *
@@ -88,7 +91,7 @@ multiple threads and sucks data from the stream (returned from
     EmbedClob(EmbedConnection con) throws SQLException {
         super(con);
         this.clob = new TemporaryClob (con.getDBName(), this);
-        con.addLOBMapping (this);
+        this.locator = con.addLOBMapping (this);
     }
 
     /**
@@ -153,7 +156,7 @@ the class implementing the getStream() method for dvd.getStream(),
                 throw se;
             }
         }
-        con.addLOBMapping (this);
+        this.locator = con.addLOBMapping (this);
     }
 
     /**
@@ -783,4 +786,11 @@ private void makeWritableClobClone(long len)
     InternalClob getInternalClob() {
         return this.clob;
     }
+
+    /**     
+     * @return locator value for this Clob.
+     */
+    public int getLocator() {
+        return locator;
+    }
 }
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
index 9dc0e32b..b3465b1f 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java
@@ -27,6 +27,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.DriverManager;
 import java.sql.SQLException;
 
+import org.apache.derby.iapi.jdbc.EngineBlob;
+import org.apache.derby.iapi.jdbc.EngineClob;
 import org.apache.derby.iapi.reference.SQLState;
 
 /**
@@ -42,8 +44,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * @throws a SQLException.
      */
     public static int CLOBCREATELOCATOR() throws SQLException {
-        Clob clob = getEmbedConnection().createClob();
-        return getEmbedConnection().addLOBMapping(clob);
+        EngineClob clob = (EngineClob) getEmbedConnection().createClob();
+        return clob.getLocator();
     }
 
     /**
@@ -201,8 +203,8 @@ private static Clob getClobObjectCorrespondingtoLOCATOR(int LOCATOR)
      * @throws a SQLException.
      */
     public static int BLOBCREATELOCATOR() throws SQLException {
-        Blob blob = getEmbedConnection().createBlob();
-        return getEmbedConnection().addLOBMapping(blob);
+        EngineBlob blob = (EngineBlob) getEmbedConnection().createBlob();
+        return blob.getLocator();
     }
 
     /**
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index 13795bac..5e5dc0ad 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -1521,6 +1521,32 @@ public void testClobAfterClosingConnection() throws Exception {
         }
     }
 
+    /**
+     * Make sure we get an error attempting to access the 
+     * lob after commit.
+     */
+    public void testClobAfterCommitWithSecondClob() throws SQLException
+    {
+        getConnection().setAutoCommit(false);
+        Statement s1 = createStatement();
+        ResultSet rs1 = s1.executeQuery("values cast('first' as clob)");
+        rs1.next();
+        Clob first = rs1.getClob(1);
+        rs1.close(); 
+        commit();
+        Statement s2 = createStatement();
+        ResultSet rs2 = s2.executeQuery("values cast('second' as clob)");
+        rs2.next();
+        Clob second = rs2.getClob(1);
+        try {
+            first.getSubString(1,100);
+            fail("first.getSubString should have failed because after the commit");
+        } catch (SQLException se){
+            assertSQLState(INVALID_LOB,se);
+        }
+        assertEquals("second",second.getSubString(1, 100));        
+        rs2.close(); 
+    }
     /**
      * Test fix for derby-1382.
      *
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java
index 103d8629..0522543d 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobStoredProcedureTest.java
@@ -164,7 +164,7 @@ public void testBlobCreateLocatorSP() throws SQLException {
         //remember in setup a locator is already created
         //hence expected value is 2
         assertEquals("The locator values returned by " +
-            "SYSIBM.BLOBCREATELOCATOR() are incorrect", 4, locator);
+            "SYSIBM.BLOBCREATELOCATOR() are incorrect", 2, locator);
         cs.close();
     }
 
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
index 97572592..1c3699af 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
@@ -76,7 +76,6 @@ public void setUp() throws Exception {
         cs.registerOutParameter(1, java.sql.Types.INTEGER);
         cs.executeUpdate();
         locator = cs.getInt(1);
-
         cs.close();
         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
         cs.setInt(1, locator);
@@ -139,7 +138,7 @@ public void testClobCreateLocatorSP() throws SQLException {
         //remember in setup a locator is already created
         //hence expected value is 2
         assertEquals("The locator values returned by " +
-            "SYSIBM.CLOBCREATELOCATOR() are incorrect", 4, locator);
+            "SYSIBM.CLOBCREATELOCATOR() are incorrect", 2, locator);
         cs.close();
     }
 
