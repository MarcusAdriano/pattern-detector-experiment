diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
index aeff8161..f1e8ebb6 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
@@ -147,13 +147,15 @@ public void registerMBeans(final MBeanServer server) {
      */
     public void unregisterMBeans(final MBeanServer server) {
         for (MBeanHandler mBeanHandler : mbeansHandlers) {
+            try
+            {
             String name = mBeanHandler.getName();
             StandardMBean mbean = mBeanHandler.getMbean();
             if (mbean != null) {
-                try {
                     logger.log(LogService.LOG_INFO, "Unregistering " + mbean.getMBeanInterface().getName()
                             + " to MBeanServer " + server + " with name " + name);
                     server.unregisterMBean(new ObjectName(name));
+               }
                 } catch (MBeanRegistrationException e) {
                     logger.log(LogService.LOG_ERROR, "Can't unregister MBean", e);
                 } catch (InstanceNotFoundException e) {
@@ -162,11 +164,10 @@ public void unregisterMBeans(final MBeanServer server) {
                     logger.log(LogService.LOG_ERROR, "Try to unregister with no valid objectname", e);
                 } catch (NullPointerException e) {
                     logger.log(LogService.LOG_ERROR, "Name of objectname can't be null ", e);
+            } catch (Exception e) {
+               logger.log(LogService.LOG_ERROR, "Cannot unregister MBean: " + mBeanHandler, e);
                 } 
             }
-
-        }
-
     }
 
     /**
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
index 687e2906..d06bfeae 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
@@ -347,10 +347,16 @@ public void run() {
 
     /*
      * Shuts down the notification dispatcher
+     * [ARIES-259] MBeans not getting unregistered reliably
      */
     protected void shutDownDispatcher() {
         if (bundleListener != null) {
+            try {
             bundleContext.removeBundleListener(bundleListener);  
+        }
+            catch (Exception e) {
+               // ignore
+            }  
         }
         if (eventDispatcher != null) {
             eventDispatcher.shutdown(); 
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
index cff82294..86d608af 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
@@ -206,10 +206,16 @@ public void run() {
 
     /*
      * Shuts down the notification dispatcher
+     * [ARIES-259] MBeans not getting unregistered reliably
      */
     protected void shutDownDispatcher() {
         if (serviceListener != null) {
+            try {
             bundleContext.removeServiceListener(serviceListener);
+        }
+            catch (Exception e) {
+               // ignore
+            }
         }
         if (eventDispatcher != null) {  
             eventDispatcher.shutdown();
