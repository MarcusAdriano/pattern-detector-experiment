diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
index 1bb4e18b..0fadbcc6 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
@@ -112,8 +112,7 @@ protected static void endTrackingSearchers() {
      if (endNumOpens-numOpens != endNumCloses-numCloses) {
        String msg = "ERROR: SolrIndexSearcher opens=" + (endNumOpens-numOpens) + " closes=" + (endNumCloses-numCloses);
        log.error(msg);
-       // TODO: make this fail if we manage to clean up
-       // fail(msg);
+       fail(msg);
      }
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
index fc416084..441029b5 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
@@ -90,6 +90,7 @@
 
 import junit.framework.Assert;
 import org.apache.commons.httpclient.HttpClient;
+import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
 import org.apache.commons.io.FileUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.SolrTestCaseJ4;
@@ -120,7 +121,8 @@
 
   public void setUp() throws Exception {
     super.setUp();
-    httpClient = new HttpClient();
+    httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());
+
     httpClient.getParams().setParameter("http.connection.timeout", new Integer(1000));
     for (int i = 0; i < solr.length; i++) {
       solr[i] = new SolrInstance("solr" + i, 0);
@@ -224,6 +226,43 @@ public void testTwoServers() throws Exception {
     Assert.assertEquals("solr0", name);
   }
 
+  public void testReliability() throws Exception {
+    String[] s = new String[solr.length];
+    for (int i = 0; i < solr.length; i++) {
+      s[i] = solr[i].getUrl();
+    }
+    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());
+
+    myHttpClient.getParams().setParameter("http.connection.timeout", new Integer(100));
+    myHttpClient.getParams().setParameter("http.socket.timeout", new Integer(100));
+    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);
+    lbHttpSolrServer.setAliveCheckInterval(500);
+
+    // Kill a server and test again
+    solr[1].jetty.stop();
+    solr[1].jetty = null;
+
+    // query the servers
+    for (String value : s)
+      lbHttpSolrServer.query(new SolrQuery("*:*"));
+
+    // Start the killed server once again
+    solr[1].startJetty();
+    // Wait for the alive check to complete
+    waitForServer(30000, lbHttpSolrServer, 3, "solr1");
+  }
+  
+  // wait maximum ms for serverName to come back up
+  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {
+    long endTime = System.currentTimeMillis() + maximum;
+    while (System.currentTimeMillis() < endTime) {
+      QueryResponse resp = server.query(new SolrQuery("*:*"));
+      String name = resp.getResults().get(0).getFieldValue("name").toString();
+      if (name.equals(serverName))
+        return;
+    }
+  }
+  
   private class SolrInstance {
     String name;
     File homeDir;
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
index efc9dcfc..eb81ba96 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
@@ -131,9 +131,11 @@ public IndexWriter getWriter() throws IOException {
       }
     }
     
-    IndexWriter writer = new ExposeWriterHandler().getWriter();
+    ExposeWriterHandler duh = new ExposeWriterHandler();
+    IndexWriter writer = duh.getWriter();
     int interval = writer.getTermIndexInterval();
     assertEquals(256, interval);
+    duh.close();
   }
 
   @Test
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java
index ed975b02..8b975d62 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig.java
@@ -25,9 +25,11 @@ public static void beforeClass() throws Exception {
 
   @Test
   public void testLegacy() throws Exception {
-    IndexWriter writer = new ExposeWriterHandler().getWriter();
+    ExposeWriterHandler duh = new ExposeWriterHandler();
+    IndexWriter writer = duh.getWriter();
     assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));
     assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));
+    duh.close();
   }
   
   class ExposeWriterHandler extends DirectUpdateHandler2 {
