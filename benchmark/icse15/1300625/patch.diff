diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
index fd600da6..a2faf329 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java
@@ -88,6 +88,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private ExecIndexRow sortTemplateRow;
 	public	boolean	hasDistinctAggregate;	// true if distinct aggregate
 	public	boolean isInSortedOrder;				// true if source results in sorted order
+	private	int numDistinctAggs = 0;
 	private int maxRowSize;
 
 	// set in open and not modified thereafter
@@ -237,7 +238,7 @@ public void	openCore() throws StandardException
 		else if (!resultsComplete)
 		{
 			if (rollup)
-				resultRows = new ExecIndexRow[order.length+1];
+				resultRows = new ExecIndexRow[numGCols()+1];
 			else
 				resultRows = new ExecIndexRow[1];
 			if (aggInfoList.hasDistinct())
@@ -324,33 +325,26 @@ private ScanController loadSorter()
 			** by that column, we just sorted it so that distinct
 			** aggregation would see the values in order.
 			*/
-			int numDistinctAggs = 0;
-			for (int i = 0; i < aggregates.length; i++)
-			{
-				AggregatorInfo aInfo = (AggregatorInfo)
-					aggInfoList.elementAt(i);
-				if (aInfo.isDistinct())
-					numDistinctAggs++;
-			}
 			// Although it seems like N aggs could have been
 			// added at the end, in fact only one has been
 			// FIXME -- need to get GroupByNode to handle this
 			// correctly, but that requires understanding
 			// scalar distinct aggregates.
 			numDistinctAggs = 1;
-			if (order.length > numDistinctAggs)
-			{
-				ColumnOrdering[] newOrder = new ColumnOrdering[
-					order.length - numDistinctAggs];
-				System.arraycopy(order, 0, newOrder, 0,
-					order.length-numDistinctAggs);
-				order = newOrder;
-			}
 		}
 		return tc.openSortScan(genericSortId,
 			activation.getResultSetHoldability());
 	}
 
+	/**
+	 * Return the number of grouping columns.
+	 *
+	 * Since some additional sort columns may have been included
+	 * in the sort for DISTINCT aggregates, this function is
+	 * used to ignore those columns when computing the grouped
+	 * results.
+	 */
+	private int numGCols() { return order.length - numDistinctAggs; }
 
 	/**
 	 * Return the next row.  
@@ -409,7 +403,7 @@ else if (resultsComplete)
 			{
 				boolean sameGroup = (rollup ?
 				    r <= distinguisherCol :
-				    distinguisherCol == order.length);
+				    distinguisherCol == numGCols());
 				if (sameGroup)
 				{
 					/* Same group - initialize the new
@@ -486,7 +480,7 @@ private ExecRow finalizeResults()
 	private int sameGroupingValues(ExecRow currRow, ExecRow newRow)
 		throws StandardException
 	{
-		for (int index = 0; index < order.length; index++)
+		for (int index = 0; index < numGCols(); index++)
 		{
 			DataValueDescriptor currOrderable = currRow.getColumn(order[index].getColumnId() + 1);
 			DataValueDescriptor newOrderable = newRow.getColumn(order[index].getColumnId() + 1);
@@ -495,7 +489,7 @@ private int sameGroupingValues(ExecRow currRow, ExecRow newRow)
 				return index;
 			}
 		}
-		return order.length;
+		return numGCols();
 	}
 
 	/**
@@ -650,7 +644,7 @@ private void setRollupColumnsToNull(ExecRow row, int resultNum)
 		int numRolledUpCols = resultRows.length - resultNum - 1;
 		for (int i = 0; i < numRolledUpCols; i++)
 		{
-			int rolledUpColIdx = order.length - 1 - i;
+			int rolledUpColIdx = numGCols() - 1 - i;
 			DataValueDescriptor rolledUpColumn =
 				row.getColumn(order[rolledUpColIdx].getColumnId() + 1);
 			rolledUpColumn.setToNull();
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
index 7d0349ad..8faefce5 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
@@ -2351,4 +2351,262 @@ public void testDerby4698() throws SQLException {
 
             rollback();
     }
+
+
+    /**
+     * DISTINCT aggregates in result sets which are opened multiple times.
+     * DERBY-5584.
+     * @throws SQLException
+     */
+    public void testDerby5584()
+	throws SQLException
+    {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        ResultSet rs;
+
+        s.executeUpdate(
+		"CREATE TABLE TEST_5 (" +
+		"       profile_id INTEGER NOT NULL," +
+		"       group_ref INTEGER NOT NULL," +
+		"       matched_count INTEGER NOT NULL )"); 
+
+        s.executeUpdate(
+		"CREATE TABLE TEST_6 ( " +
+		"       profile_id INTEGER NOT NULL, " +
+		"       group_ref INTEGER NOT NULL, " +
+		"       matched_count INTEGER NOT NULL )"); 
+
+        s.executeUpdate( "insert into test_5 values (1, 10000, 1)" ); 
+        s.executeUpdate( "insert into test_5 values (2, 10000, 2)" ); 
+
+        s.executeUpdate( "insert into test_6 values (1, 10000, 1)" ); 
+        s.executeUpdate( "insert into test_6 values (2, 10000, 2)" );
+
+        rs = s.executeQuery( "SELECT ps1.group_ref," +
+		"COUNT(DISTINCT ps1.matched_count) AS matched_count" +
+		" FROM test_5 ps1 " +
+		" GROUP BY ps1.group_ref, ps1.profile_id" );
+        JDBC.assertFullResultSet(rs, new String[][] {
+                {"10000", "1"},
+                {"10000", "1"}
+	});
+
+        rs = s.executeQuery( "SELECT ps1.group_ref," +
+		"COUNT(ps1.matched_count) AS matched_count" +
+		" FROM test_5 ps1 " +
+		" GROUP BY ps1.group_ref, ps1.profile_id" );
+        JDBC.assertFullResultSet(rs, new String[][] {
+                {"10000", "1"},
+                {"10000", "1"}
+	});
+
+	String cartProdWithDISTINCTsubqueries = " SELECT *" +
+		" FROM " +
+		" (SELECT ps1.group_ref, ps1.profile_id, " +
+		"         COUNT(DISTINCT ps1.matched_count) AS matched_count " +
+		"  FROM test_5 ps1" +
+		"  GROUP BY ps1.group_ref, ps1.profile_id " +
+		" ) a, " +
+		" (SELECT ps2.group_ref, ps2.profile_id, " +
+		"         COUNT( DISTINCT ps2.matched_count) AS matched_count" +
+		"  FROM test_6 ps2" +
+		"  GROUP BY ps2.group_ref, ps2.profile_id " +
+		") b ";
+
+	String cartProdWithSubqueries = " SELECT * " +
+		" FROM " +
+		" (SELECT ps1.group_ref, ps1.profile_id, " +
+		"         COUNT(ps1.matched_count) AS matched_count " +
+		"  FROM test_5 ps1 " +
+		"  GROUP BY ps1.group_ref, ps1.profile_id " +
+		") a, " +
+		" (SELECT ps2.group_ref, ps2.profile_id, " +
+		"         COUNT( ps2.matched_count) AS matched_count " +
+		"  FROM test_6 ps2 " +
+		"  GROUP BY ps2.group_ref, ps2.profile_id " +
+		") b ";
+
+	String cartProdWithOrderBySubqueries = "SELECT * " +
+		" FROM " +
+		" (SELECT ps1.group_ref, ps1.profile_id " +
+		"  FROM test_5 ps1 ORDER BY profile_id fetch first 3 rows only) a, " +
+		" (SELECT ps2.group_ref, ps2.profile_id " +
+		"  FROM test_6 ps2 ORDER BY PROFILE_ID fetch first 2 rows only) b "; 
+
+
+	rs = s.executeQuery( cartProdWithDISTINCTsubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "1"}
+	});
+
+	rs = s.executeQuery( cartProdWithSubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "1"}
+	});
+
+        s.executeUpdate( "insert into test_5 values (3, 10000, 3)" ); 
+
+	rs = s.executeQuery( cartProdWithDISTINCTsubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "1"},
+		{"10000", "3", "1", "10000", "1", "1"},
+		{"10000", "3", "1", "10000", "2", "1"}
+	});
+
+	rs = s.executeQuery( cartProdWithSubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "1"},
+		{"10000", "3", "1", "10000", "1", "1"},
+		{"10000", "3", "1", "10000", "2", "1"}
+	});
+
+        s.executeUpdate( "insert into test_5 values (4, 10000, 4) "); 
+        s.executeUpdate( "insert into test_6 values (3, 10000, 3) "); 
+
+	// NOTE: At this point,
+	//   test_5 contains:		test_6 contains:
+	//	1, 10000, 1			1, 10000, 1
+	//	2, 10000, 2			2, 10000, 2
+	//	3, 10000, 3			3, 10000, 3
+	//	4, 10000, 4
+
+	rs = s.executeQuery( cartProdWithDISTINCTsubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "1"},
+		{"10000", "1", "1", "10000", "3", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "1"},
+		{"10000", "2", "1", "10000", "3", "1"},
+		{"10000", "3", "1", "10000", "1", "1"},
+		{"10000", "3", "1", "10000", "2", "1"},
+		{"10000", "3", "1", "10000", "3", "1"},
+		{"10000", "4", "1", "10000", "1", "1"},
+		{"10000", "4", "1", "10000", "2", "1"},
+		{"10000", "4", "1", "10000", "3", "1"}
+	});
+
+	rs = s.executeQuery( cartProdWithSubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "1"},
+		{"10000", "1", "1", "10000", "3", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "1"},
+		{"10000", "2", "1", "10000", "3", "1"},
+		{"10000", "3", "1", "10000", "1", "1"},
+		{"10000", "3", "1", "10000", "2", "1"},
+		{"10000", "3", "1", "10000", "3", "1"},
+		{"10000", "4", "1", "10000", "1", "1"},
+		{"10000", "4", "1", "10000", "2", "1"},
+		{"10000", "4", "1", "10000", "3", "1"}
+	});
+
+        s.executeUpdate( "insert into test_6 values (2, 10000, 1) "); 
+
+	rs = s.executeQuery( cartProdWithDISTINCTsubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "2"},
+		{"10000", "1", "1", "10000", "3", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "2"},
+		{"10000", "2", "1", "10000", "3", "1"},
+		{"10000", "3", "1", "10000", "1", "1"},
+		{"10000", "3", "1", "10000", "2", "2"},
+		{"10000", "3", "1", "10000", "3", "1"},
+		{"10000", "4", "1", "10000", "1", "1"},
+		{"10000", "4", "1", "10000", "2", "2"},
+		{"10000", "4", "1", "10000", "3", "1"}
+	});
+
+	rs = s.executeQuery( cartProdWithSubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "2"},
+		{"10000", "1", "1", "10000", "3", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "2"},
+		{"10000", "2", "1", "10000", "3", "1"},
+		{"10000", "3", "1", "10000", "1", "1"},
+		{"10000", "3", "1", "10000", "2", "2"},
+		{"10000", "3", "1", "10000", "3", "1"},
+		{"10000", "4", "1", "10000", "1", "1"},
+		{"10000", "4", "1", "10000", "2", "2"},
+		{"10000", "4", "1", "10000", "3", "1"}
+	});
+
+	// Now introduce some duplicate values so that the DISTINCT
+	// aggregates have some work to do
+
+
+        s.executeUpdate( "insert into test_6 values (1, 10000, 1) "); 
+        s.executeUpdate( "insert into test_6 values (2, 10000, 2) "); 
+
+	// NOTE: At this point,
+	//   test_5 contains:		test_6 contains:
+	//	1, 10000, 1			1, 10000, 1 (2 vals, 1 distinct)
+	//	2, 10000, 2			1, 10000, 1 
+	//	3, 10000, 3			2, 10000, 1 (3 vals, 2 distinct)
+	//	4, 10000, 4			2, 10000, 2
+	//	 				2, 10000, 2
+	//	 				3, 10000, 2 (1 val, 1 distinct)
+
+	rs = s.executeQuery( cartProdWithDISTINCTsubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "1"},
+		{"10000", "1", "1", "10000", "2", "2"},
+		{"10000", "1", "1", "10000", "3", "1"},
+		{"10000", "2", "1", "10000", "1", "1"},
+		{"10000", "2", "1", "10000", "2", "2"},
+		{"10000", "2", "1", "10000", "3", "1"},
+		{"10000", "3", "1", "10000", "1", "1"},
+		{"10000", "3", "1", "10000", "2", "2"},
+		{"10000", "3", "1", "10000", "3", "1"},
+		{"10000", "4", "1", "10000", "1", "1"},
+		{"10000", "4", "1", "10000", "2", "2"},
+		{"10000", "4", "1", "10000", "3", "1"}
+	});
+
+	rs = s.executeQuery( cartProdWithSubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "1", "10000", "1", "2"},
+		{"10000", "1", "1", "10000", "2", "3"},
+		{"10000", "1", "1", "10000", "3", "1"},
+		{"10000", "2", "1", "10000", "1", "2"},
+		{"10000", "2", "1", "10000", "2", "3"},
+		{"10000", "2", "1", "10000", "3", "1"},
+		{"10000", "3", "1", "10000", "1", "2"},
+		{"10000", "3", "1", "10000", "2", "3"},
+		{"10000", "3", "1", "10000", "3", "1"},
+		{"10000", "4", "1", "10000", "1", "2"},
+		{"10000", "4", "1", "10000", "2", "3"},
+		{"10000", "4", "1", "10000", "3", "1"}
+	});
+
+	rs = s.executeQuery( cartProdWithOrderBySubqueries );
+        JDBC.assertFullResultSet(rs, new String[][] {
+		{"10000", "1", "10000", "1"},
+		{"10000", "1", "10000", "1"},
+		{"10000", "2", "10000", "1"},
+		{"10000", "2", "10000", "1"},
+		{"10000", "3", "10000", "1"},
+		{"10000", "3", "10000", "1"}
+	});
+
+            rollback();
+    }
 }
