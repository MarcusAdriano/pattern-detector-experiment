diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 1a447ef3..f137af6a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -148,7 +148,7 @@ private ColumnFamilyStore(String table, String columnFamilyName, IPartitioner pa
         
         // scan for sstables corresponding to this cf and load them
         List<SSTableReader> sstables = new ArrayList<SSTableReader>();
-        for (Map.Entry<Descriptor,Set<Component>> sstableFiles : files(table, columnFamilyName).entrySet())
+        for (Map.Entry<Descriptor,Set<Component>> sstableFiles : files(table, columnFamilyName, false).entrySet())
         {
             SSTableReader sstable;
             try
@@ -289,7 +289,7 @@ public static synchronized ColumnFamilyStore createColumnFamilyStore(String tabl
     {
         // get the max generation number, to prevent generation conflicts
         List<Integer> generations = new ArrayList<Integer>();
-        for (Descriptor desc : files(table, columnFamily).keySet())
+        for (Descriptor desc : files(table, columnFamily, true).keySet())
             generations.add(desc.generation);
         Collections.sort(generations);
         int value = (generations.size() > 0) ? (generations.get(generations.size() - 1)) : 0;
@@ -304,7 +304,7 @@ public static synchronized ColumnFamilyStore createColumnFamilyStore(String tabl
      */
     static void scrubDataDirectories(String table, String columnFamily)
     {
-        for (Map.Entry<Descriptor,Set<Component>> sstableFiles : files(table, columnFamily).entrySet())
+        for (Map.Entry<Descriptor,Set<Component>> sstableFiles : files(table, columnFamily, true).entrySet())
         {
             Descriptor desc = sstableFiles.getKey();
             Set<Component> components = sstableFiles.getValue();
@@ -337,7 +337,7 @@ static void scrubDataDirectories(String table, String columnFamily)
     /**
      * Collects a map of sstable components.
      */
-    private static Map<Descriptor,Set<Component>> files(String keyspace, final String columnFamily)
+    private static Map<Descriptor,Set<Component>> files(String keyspace, final String columnFamily, final boolean includeCompacted)
     {
         final Map<Descriptor,Set<Component>> sstables = new HashMap<Descriptor,Set<Component>>();
         for (String directory : DatabaseDescriptor.getAllDataFileLocationsForTable(keyspace))
@@ -351,6 +351,8 @@ public boolean accept(File dir, String name)
                     Pair<Descriptor,Component> component = SSTable.tryComponentFromFilename(dir, name);
                     if (component != null && component.left.cfname.equals(columnFamily))
                     {
+                        if (includeCompacted || !new File(component.left.filenameFor(Component.COMPACTED_MARKER)).exists())
+                        {
                         Set<Component> components = sstables.get(component.left);
                         if (components == null)
                         {
@@ -358,6 +360,9 @@ public boolean accept(File dir, String name)
                             sstables.put(component.left, components);
                         }
                         components.add(component.right);
+                    }
+                        else
+                            logger.debug("not including compacted sstable " + component.left.cfname + "-" + component.left.generation);
                     }
                     return false;
                 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
index 253d9f79..b83fd3ad 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
@@ -167,13 +167,7 @@ public String getTableName()
     {
         try
         {
-            Pair<Descriptor, Component> pair = Component.fromFilename(dir, name);
-            
-            // if there exists a compaction marker, we want to return null to indicate an invalid sstable.
-            if (new File(pair.left.filenameFor(Component.COMPACTED_MARKER)).exists())
-                return null;
-            else
-                return pair;
+            return Component.fromFilename(dir, name);
         }
         catch (Exception e)
         {
