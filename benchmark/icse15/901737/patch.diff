diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java
index 72906e28..0ca6f451 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java
@@ -35,6 +35,8 @@
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.ServiceRegistration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 /**
  * This class manages the lifecycle of Persistence Units and their associated
  * {@link EntityManagerFactory} objects.
@@ -54,6 +56,9 @@
   /** The {@link ServiceRegistration} objects for the {@link EntityManagerFactory}s */
   private Collection<ServiceRegistration> registrations = null;
 
+  /** Logger */
+  private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.jpa.container");
+  
   /**
    * Create an {@link EntityManagerFactoryManager} for
    * the supplied persistence bundle.
@@ -140,7 +145,8 @@ private void unregisterEntityManagerFactories() {
         try {
           reg.unregister();
         } catch (Exception e) {
-          //TODO log this
+          _logger.error("There was an error unregistering the EntityManagerFactory services for bundle " 
+              + bundle.getSymbolicName() + "_" + bundle.getVersion() , e);
         }
       }
       // remember to set registrations to be null
@@ -164,8 +170,11 @@ private void registerEntityManagerFactories() throws InvalidPersistenceUnitExcep
       registrations = new ArrayList<ServiceRegistration>();
       String providerName = (String) provider.getProperty("javax.persistence.provider");
       if(providerName == null) {
-        //TODO log this
-        throw new InvalidPersistenceUnitException();
+        _logger.warn("The PersistenceProvider for bundle {} did not specify a provider name in the \"javax.persistence.provider\" service property. " +
+        		"As a result EntityManagerFactory objects will not be registered with the " 
+            + PersistenceUnitConstants.OSGI_UNIT_PROVIDER + " property. " 
+            + "The Peristence Provider service was {}",
+            new Object[] {bundle.getSymbolicName() + "_" + bundle.getVersion(), provider});
       }
       //Register each EMF
       for(Entry<String, EntityManagerFactory> entry : emfs.entrySet())
@@ -173,12 +182,8 @@ private void registerEntityManagerFactories() throws InvalidPersistenceUnitExcep
         Properties props = new Properties();
         String unitName = entry.getKey();
         
-        if(unitName == null) {
-          //TODO log
-          throw new InvalidPersistenceUnitException();
-        }
-          
         props.put(PersistenceUnitConstants.OSGI_UNIT_NAME, unitName);
+        if(providerName != null)
         props.put(PersistenceUnitConstants.OSGI_UNIT_PROVIDER, providerName);
         props.put(PersistenceUnitConstants.OSGI_UNIT_VERSION, provider.getBundle().getVersion());
         props.put(PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT, Boolean.TRUE);
@@ -186,7 +191,8 @@ private void registerEntityManagerFactories() throws InvalidPersistenceUnitExcep
         try {
           registrations.add(bundle.getBundleContext().registerService(EntityManagerFactory.class.getCanonicalName(), entry.getValue(), props));
         } catch (Exception e) {
-          //TODO log
+          _logger.error("There was an error registering the persistence unit " 
+              + unitName + " defined by the bundle " + bundle.getSymbolicName() + "_" + bundle.getVersion(), e);
           throw new InvalidPersistenceUnitException(e);
         }
       }
@@ -208,7 +214,12 @@ private void createEntityManagerFactories() throws InvalidPersistenceUnitExcepti
           //Get hold of the provider
           PersistenceProvider providerService = (PersistenceProvider) containerContext.getService(provider);
 
-          if(providerService == null) throw new InvalidPersistenceUnitException();
+          if(providerService == null) {
+            _logger.warn("The PersistenceProvider service hosting persistence units in bundle " 
+                + bundle.getSymbolicName() + "_" + bundle.getVersion() + " is no longer available. " +
+                		"Persistence units defined by the bundle will not be available until the bundle is refreshed");
+            throw new InvalidPersistenceUnitException();
+          }
       
           for(ManagedPersistenceUnitInfo info : persistenceUnits){
             PersistenceUnitInfo pUnitInfo = info.getPersistenceUnitInfo();
@@ -263,7 +274,8 @@ private void destroyEntityManagerFactories() {
         try {
           entry.getValue().close();
         } catch (Exception e) {
-          //TODO log this error
+          _logger.error("There was an exception when closing the EntityManagerFactory for persistence unit "
+              + entry.getKey() + " in bundle " + bundle.getSymbolicName() + "_" + bundle.getVersion(), e);
         }
       }
     }
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/InvalidRangeCombination.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/InvalidRangeCombination.java
index 16d6b9df..8c449ccb 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/InvalidRangeCombination.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/InvalidRangeCombination.java
@@ -32,7 +32,16 @@
 
   public InvalidRangeCombination(Version minVersion, boolean minExclusive,
       Version maxVersion, boolean maxExclusive) {
-    // TODO Auto-generated constructor stub
+    super("There was no overlap between the specified version ranges. The combined version range" +
+    		"string would have been " + getVersionRangeString(minVersion, minExclusive, maxVersion, maxExclusive));
   }
 
+  private static String getVersionRangeString(Version minVersion,
+      boolean minExclusive, Version maxVersion, boolean maxExclusive) {
+    
+    if(maxVersion == null)
+      return minVersion.toString();
+    else
+    return ((minExclusive) ? "(" : "[") + minVersion + "," + maxVersion + ((maxExclusive) ? ")" : "]");
+  }
 }
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleHelper.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleHelper.java
index 732a10db..e5f8b21b 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleHelper.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleHelper.java
@@ -30,12 +30,17 @@
 
 import org.apache.aries.jpa.container.parsing.PersistenceDescriptor;
 import org.osgi.framework.Bundle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This helper can be used to locate persistence.xml files in a bundle
  */
 public class PersistenceBundleHelper
 {
+  /** Logger */
+  private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.jpa.container");
+  
   /** The persistence xml location */
   public static final String PERSISTENCE_XML = "META-INF/persistence.xml";
   /** The Meta-Persistence header */
@@ -69,24 +74,29 @@
         locations.add(s.trim());
     
       //Find the file and add it to our list
-      try {
         for(String location : locations) {
+        try {
           InputStream file = locateFile(bundle, location);
           if(file != null)
             persistenceXmlFiles.add(new PersistenceDescriptorImpl(location, file));
-          }
+            
       } catch (Exception e) {
-          //TODO log
+            _logger.error("There was an exception while locating the persistence descriptor at location "
+                + location + " in bundle " + bundle.getSymbolicName() + "_" + bundle.getVersion()
+            		+ ". No persistence descriptors will be processed for this bundle.", e);
         //If we get an exception, then go through closing all of our streams.
         //It is better to fail completely than half succeed.
         for (PersistenceDescriptor desc : persistenceXmlFiles) {
           try {
             desc.getInputStream().close();
           } catch (IOException ioe) {
-            // TODO: log ioe
+              //We don't care about this exception, so swallow it
           }
         }
         persistenceXmlFiles = Collections.emptySet();
+          //Exit the for loop
+          break;
+        }
       }
     }
    return persistenceXmlFiles;
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java
index cb6ba1f4..c3485be6 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java
@@ -49,13 +49,17 @@
 import org.osgi.framework.Constants;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.Version;
-
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This class locates, parses and manages persistence units defined in OSGi bundles.
  */
 public class PersistenceBundleManager extends MultiBundleTracker
 {
+  /** Logger */
+  private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.jpa.container");
+  
   /** The bundle context for this bundle */
   private BundleContext ctx = null;
   /** 
@@ -87,20 +91,19 @@ public PersistenceBundleManager(BundleContext ctx)
     this.ctx = ctx;
   }
   
+  @SuppressWarnings("unchecked")
   @Override
   public void open() {
     //Create the pluggable ManagedPersistenceUnitInfoFactory
     String className = config.getProperty(ManagedPersistenceUnitInfoFactory.DEFAULT_PU_INFO_FACTORY_KEY);
-    Class<? extends ManagedPersistenceUnitInfoFactory> clazz = null;
     
     if(className != null) {
       try {
-        clazz = ctx.getBundle().loadClass(className);
+        Class<? extends ManagedPersistenceUnitInfoFactory> clazz = ctx.getBundle().loadClass(className);
         persistenceUnitFactory = clazz.newInstance();
       } catch (Exception e) {
-        // TODO Log the error
-        e.printStackTrace();
-        //clazz = default;
+        _logger.error("There was a problem creating the custom ManagedPersistenceUnitInfoFactory " + className 
+            + ". The default ManagedPersistenceUnitInfo factory will be used instead", e);
       }
     }
     
@@ -110,39 +113,8 @@ public void open() {
     super.open();
   }
   
-  
-  
-//  /**
-//   * If we have generated a resources for the supplied bundle, then
-//   * tidy them  up.
-//   * @param host
-//   */
-//  private void tidyUpPersistenceBundle(Bundle host)
-//  {
-//    
-//    Bundle fragment = hostToFragmentMap.remove(host);
-//    Set<ServiceRegistration> services = hostToPersistenceUnitMap.remove(host);
-//    
-//    if(services != null) {
-//      for(ServiceRegistration reg : services)
-//        reg.unregister();
-//    }
-//    
-//    if(fragment != null){
-//      try {
-//        fragment.uninstall();
-//      } catch (BundleException be) {
-//        //TODO log this error, then hope that we don't try to
-//        //recreate the fragment before restarting the framework!
-//      }
-//    }
-//  }
-
   public Object addingBundle(Bundle bundle, BundleEvent event) 
   {
-    if(bundle.getState() == Bundle.ACTIVE) {
-      //TODO LOG WARNING HERE
-    }
     EntityManagerFactoryManager mgr = null;
     mgr = setupManager(bundle, mgr);
     return mgr;
@@ -189,61 +161,22 @@ public void setConfig(Properties props) {
     URL u = ctx.getBundle().getResource(ManagedPersistenceUnitInfoFactory.ARIES_JPA_CONTAINER_PROPERTIES);
     
     if(u != null) {
+      if(_logger.isInfoEnabled())
+        _logger.info("A {} file was found. The default properties {} will be overridden.",
+            new Object[] {ManagedPersistenceUnitInfoFactory.ARIES_JPA_CONTAINER_PROPERTIES, config});
       try {
         config.load(u.openStream());
       } catch (IOException e) {
-        // TODO Log this error
-        e.printStackTrace();
+        _logger.error("There was an error reading from " 
+            + ManagedPersistenceUnitInfoFactory.ARIES_JPA_CONTAINER_PROPERTIES, e);
       }
+    } else {
+      if(_logger.isInfoEnabled())
+        _logger.info("No {} file was found. The default properties {} will be used.",
+            new Object[] {ManagedPersistenceUnitInfoFactory.ARIES_JPA_CONTAINER_PROPERTIES, config});
     }
   }
      
-//      //If we can't find a provider then bomb out
-//      if (providerRef != null)
-//      {
-//        try 
-//          FragmentBuilder builder = new FragmentBuilder(b, ".jpa.fragment");
-//          builder.addImportsFromExports(providerRef.getBundle());
-//          fragment = builder.install(ctx);
-//        
-//          
-//          hostToFragmentMap.put(b, fragment);
-//          // If we successfully got a fragment then
-//          // set the provider reference and register the units
-//          Set<ServiceRegistration> registrations = new HashSet<ServiceRegistration>();
-//          Hashtable<String, Object> props = new Hashtable<String, Object>();
-//          
-//          props.put(PersistenceUnitInfoService.PERSISTENCE_BUNDLE_SYMBOLIC_NAME, b.getSymbolicName());
-//          props.put(PersistenceUnitInfoService.PERSISTENCE_BUNDLE_VERSION, b.getVersion());
-//          
-//          for(PersistenceUnitImpl unit : parsedPersistenceUnits){
-//            Hashtable<String, Object> serviceProps = new Hashtable<String, Object>(props);
-//            
-//            String unitName = (String) unit.getPersistenceXmlMetadata().get(PersistenceUnitInfoService.UNIT_NAME);
-//            if(unitName != null)
-//              serviceProps.put(PersistenceUnitInfoService.PERSISTENCE_UNIT_NAME, unitName);
-//            
-//            unit.setProviderReference(providerRef);
-//            registrations.add(ctx.registerService(PersistenceUnitInfoService.class.getName(), unit, serviceProps));
-//          }
-//          hostToPersistenceUnitMap.put(b, registrations);
-//        }
-//        catch (IOException e)
-//        {
-//          // TODO Fragment generation failed, log the error
-//          // No clean up because we didn't register the bundle yet
-//          e.printStackTrace();
-//        }
-//        catch (BundleException be) {
-//          //TODO log the failure to install the fragment, but return null
-//          // to show we didn't get a fragment installed
-//          // No clean up because we didn't register the bundle yet
-//        }
-//      }
-//    }
-//  }
-
-
   public void modifiedBundle(Bundle bundle, BundleEvent event, Object object) {
 
     EntityManagerFactoryManager mgr = (EntityManagerFactoryManager) object;
@@ -257,7 +190,7 @@ public void modifiedBundle(Bundle bundle, BundleEvent event, Object object) {
       try {
         mgr.bundleStateChange();
       } catch (InvalidPersistenceUnitException e) {
-        // TODO log this
+        logInvalidPersistenceUnitException(bundle, e);
         mgr.destroy();
       }
     }
@@ -287,6 +220,12 @@ private EntityManagerFactoryManager setupManager(Bundle bundle,
 
       //If we have no persistence units then our job is done
       if (!!!persistenceXmls.isEmpty()) {
+        
+        if(bundle.getState() == Bundle.ACTIVE) {
+          _logger.warn("The bundle {} is already active, it may not be possible to create managed persistence units for it.", 
+              new Object[] {bundle.getSymbolicName() + "_" + bundle.getVersion()});
+        }
+        
         Collection<ParsedPersistenceUnit> pUnits = new ArrayList<ParsedPersistenceUnit>();
         
         //Parse each descriptor
@@ -294,8 +233,9 @@ private EntityManagerFactoryManager setupManager(Bundle bundle,
           try {
             pUnits.addAll(PersistenceDescriptorParser.parse(bundle, descriptor));
           } catch (PersistenceDescriptorParserException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
+            _logger.error("There was an error while parsing the persistence descriptor " 
+                + descriptor.getLocation() + " in bundle " + bundle.getSymbolicName() 
+                + "_" + bundle.getVersion() + ". No persistence units will be managed for this bundle", e);
           }
         }
         
@@ -323,7 +263,7 @@ private EntityManagerFactoryManager setupManager(Bundle bundle,
             try {
               mgr.bundleStateChange();
             } catch (InvalidPersistenceUnitException e) {
-              // TODO Log this error
+              logInvalidPersistenceUnitException(bundle, e);
               mgr.destroy();
               persistenceUnitFactory.destroyPersistenceBundle(bundle);
             }
@@ -357,12 +297,12 @@ private ServiceReference getProviderServiceReference(Collection<ParsedPersistenc
         
         if(props != null && props.containsKey(ParsedPersistenceUnit.JPA_PROVIDER_VERSION)) {
          
-          try {
             String versionRangeString = props.getProperty(ParsedPersistenceUnit.JPA_PROVIDER_VERSION, "0.0.0");
+          try {
             versionRanges.add(ManifestHeaderProcessor.parseVersionRange(versionRangeString));
           } catch (IllegalArgumentException e) {
-            // TODO Log error. This is an invalid range and will be ignored.
-            e.printStackTrace();
+            _logger.warn("There was an error parsing the version range string {} for persistence unit {}. It will be ignored."
+                , new Object[] {versionRangeString, metadata.get(ParsedPersistenceUnit.UNIT_NAME)});
           }
         }
       }
@@ -374,15 +314,20 @@ private ServiceReference getProviderServiceReference(Collection<ParsedPersistenc
       try {
         range = combineVersionRanges(versionRanges);
       } catch (InvalidRangeCombination e) {
-        // TODO Log this error
-        e.printStackTrace();
+        Bundle bundle = parsedPersistenceUnits.iterator().next().getDefiningBundle();
+        _logger.error("The bundle " + bundle.getSymbolicName() 
+            + "_" + bundle.getVersion() + " specified an invalid combination of provider version ranges",  e);
         return null;
       }
     }
     
     if(ppClassNames.size() > 1)
     {
-      //TODO log this error then(too many persistence providers specified)
+      Bundle bundle = parsedPersistenceUnits.iterator().next().getDefiningBundle();
+      _logger.error("The bundle " + bundle.getSymbolicName() 
+          + "_" + bundle.getVersion() + " specified more than one persistence provider: {}. "
+          + "This is not supported, so no persistence units will be created for this bundle.",
+          new Object[] {ppClassNames});
       return null;
     } else {
       //Get the best provider for the given filters
@@ -484,14 +429,15 @@ private synchronized ServiceReference getBestProvider(String providerClass, Vers
           //Return the "best" provider, i.e. the highest version
           return Collections.max(refs, new ProviderServiceComparator());
         } else {
-          //TODO no matching providers for matching criteria
+          _logger.warn("There are no suitable providers for the provider class name {} and version range {}.",
+              new Object[] {providerClass, matchingCriteria});
         }
       } else {
         //Return the "best" provider, i.e. the service OSGi would pick
         return (ServiceReference) Collections.max(persistenceProviders);
       }
     } else {
-      //TODO log no matching Providers for impl class
+      _logger.warn("There are no providers available.");
     }
     return null;
   }
@@ -514,4 +460,15 @@ public int compare(ServiceReference object1, ServiceReference object2)
       return res;
     }
   }
+  
+  /**
+   * Log a warning to indicate that the Persistence units state will be destroyed
+   * @param bundle
+   * @param e
+   */
+  private void logInvalidPersistenceUnitException(Bundle bundle,
+      InvalidPersistenceUnitException e) {
+    _logger.warn("The persistence units for bundle " + bundle.getSymbolicName() + "_" + bundle.getVersion()
+        + " became invalid and will be destroyed.", e);
+  }
 }
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParser.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParser.java
index 1b003fa7..c52f880c 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParser.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParser.java
@@ -70,6 +70,7 @@ public void close() throws IOException {
     Collection<ParsedPersistenceUnit> persistenceUnits = new ArrayList<ParsedPersistenceUnit>();
     SAXParserFactory parserFactory = SAXParserFactory.newInstance();
     BufferedInputStream is = null;
+    boolean schemaFound = false;
     try {
       //Buffer the InputStream so we can mark it, though we'll be in 
       //trouble if we have to read more than 8192 characters before finding
@@ -85,6 +86,7 @@ public void close() throws IOException {
         Schema s = epr.getSchema();
         
         if(s != null) {
+          schemaFound = true;
           parserFactory.setSchema(s);
           parserFactory.setNamespaceAware(true);
           parser = parserFactory.newSAXParser();
@@ -95,23 +97,23 @@ public void close() throws IOException {
           JPAHandler handler = new JPAHandler(b, epr.getVersion());
           parser.parse(is, handler);
           persistenceUnits.addAll(handler.getPersistenceUnits());
-        } else {
-          //TODO Should we try without validation?
         }
       }
     } catch (Exception e) {
-      //TODO Log this error in parsing
-      System.out.println("Error parsing " + descriptor.getLocation() + " in bundle " + b.getSymbolicName() + "_" + b.getVersion());
-      e.printStackTrace();
-      throw new PersistenceDescriptorParserException(e);
+      throw new PersistenceDescriptorParserException("There was an error parsing " + descriptor.getLocation() 
+          + " in bundle " + b.getSymbolicName() + "_" + b.getVersion(), e);
     } finally {
       if(is != null) try {
         is.close();
       } catch (IOException e) {
-        //TODO Log this
-        e.printStackTrace();
+        //No logging necessary, just consume
       }
     }
+    if(!!!schemaFound) {
+    throw new PersistenceDescriptorParserException("No Schema could be located for the" +
+        "persistence descriptor " + descriptor.getLocation() 
+        + " in bundle " + b.getSymbolicName() + "_" + b.getVersion());
+    }
     return persistenceUnits;
   }
 
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParserException.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParserException.java
index 5e5b3df2..0243f2e9 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParserException.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptorParserException.java
@@ -26,10 +26,19 @@
 
   /**
    * Construct a PersistenceDescriptorException
+   * @param string 
    * @param e the exception to wrap
    */
-  public PersistenceDescriptorParserException(Exception e) {
-    super(e);
+  public PersistenceDescriptorParserException(String string, Exception e) {
+    super(string, e);
+  }
+
+  /**
+   * Construct a PersistenceDescriptorException
+   * @param string 
+   */
+  public PersistenceDescriptorParserException(String string) {
+    super(string);
   }
 
   /**
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java
index d57b29ba..09cba083 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/BundleDelegatingClassLoader.java
@@ -45,6 +45,7 @@ protected URL findResource(String resName) {
     return bundle.getResource(resName);
   }
 
+  @SuppressWarnings("unchecked")
   @Override
   protected Enumeration<URL> findResources(String resName) throws IOException {
     return bundle.getResources(resName);
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoFactoryImpl.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoFactoryImpl.java
index 18b865c9..8b74707f 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoFactoryImpl.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoFactoryImpl.java
@@ -36,6 +36,8 @@
       ServiceReference providerReference,
       Collection<ParsedPersistenceUnit> persistenceMetadata) {
     
+    //TODO add support for provider bundle imports (e.g. for weaving) here
+    
     Collection<ManagedPersistenceUnitInfo> managedUnits = new ArrayList<ManagedPersistenceUnitInfo>();
     
     for(ParsedPersistenceUnit unit : persistenceMetadata)
@@ -45,7 +47,6 @@
   }
 
   public void destroyPersistenceBundle(Bundle bundle) {
-    // TODO Auto-generated method stub
 
   }
 
@@ -53,4 +54,78 @@ public String getDefaultProviderClassName() {
     return null;
   }
 
+  //Code that can be used to attach a fragment for provider wiring
+  
+////If we can't find a provider then bomb out
+//if (providerRef != null)
+//{
+//  try 
+//    FragmentBuilder builder = new FragmentBuilder(b, ".jpa.fragment");
+//    builder.addImportsFromExports(providerRef.getBundle());
+//    fragment = builder.install(ctx);
+//  
+//    
+//    hostToFragmentMap.put(b, fragment);
+//    // If we successfully got a fragment then
+//    // set the provider reference and register the units
+//    Set<ServiceRegistration> registrations = new HashSet<ServiceRegistration>();
+//    Hashtable<String, Object> props = new Hashtable<String, Object>();
+//    
+//    props.put(PersistenceUnitInfoService.PERSISTENCE_BUNDLE_SYMBOLIC_NAME, b.getSymbolicName());
+//    props.put(PersistenceUnitInfoService.PERSISTENCE_BUNDLE_VERSION, b.getVersion());
+//    
+//    for(PersistenceUnitImpl unit : parsedPersistenceUnits){
+//      Hashtable<String, Object> serviceProps = new Hashtable<String, Object>(props);
+//      
+//      String unitName = (String) unit.getPersistenceXmlMetadata().get(PersistenceUnitInfoService.UNIT_NAME);
+//      if(unitName != null)
+//        serviceProps.put(PersistenceUnitInfoService.PERSISTENCE_UNIT_NAME, unitName);
+//      
+//      unit.setProviderReference(providerRef);
+//      registrations.add(ctx.registerService(PersistenceUnitInfoService.class.getName(), unit, serviceProps));
+//    }
+//    hostToPersistenceUnitMap.put(b, registrations);
+//  }
+//  catch (IOException e)
+//  {
+//    // TODO Fragment generation failed, log the error
+//    // No clean up because we didn't register the bundle yet
+//    e.printStackTrace();
+//  }
+//  catch (BundleException be) {
+//    //TODO log the failure to install the fragment, but return null
+//    // to show we didn't get a fragment installed
+//    // No clean up because we didn't register the bundle yet
+//  }
+//}
+//}
+//}
+  
+  //Code that can be used to clear up a persistence unit
+  
+///**
+// * If we have generated a resources for the supplied bundle, then
+// * tidy them  up.
+// * @param host
+// */
+//private void tidyUpPersistenceBundle(Bundle host)
+//{
+//  
+//  Bundle fragment = hostToFragmentMap.remove(host);
+//  Set<ServiceRegistration> services = hostToPersistenceUnitMap.remove(host);
+//  
+//  if(services != null) {
+//    for(ServiceRegistration reg : services)
+//      reg.unregister();
+//  }
+//  
+//  if(fragment != null){
+//    try {
+//      fragment.uninstall();
+//    } catch (BundleException be) {
+//      //TODO log this error, then hope that we don't try to
+//      //recreate the fragment before restarting the framework!
+//    }
+//  }
+//}
 }
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoImpl.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoImpl.java
index e0e2c9e7..e9649d51 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoImpl.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/ManagedPersistenceUnitInfoImpl.java
@@ -18,6 +18,7 @@
  */
 package org.apache.aries.jpa.container.unit.impl;
 
+import java.util.Collections;
 import java.util.Map;
 
 import javax.persistence.spi.PersistenceUnitInfo;
@@ -39,7 +40,7 @@ public ManagedPersistenceUnitInfoImpl(Bundle persistenceBundle,
   }
 
   public Map<String, Object> getContainerProperties() {
-    return null;
+    return Collections.emptyMap();
   }
 
   public PersistenceUnitInfo getPersistenceUnitInfo() {
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
index 0f4c2e51..e33cae80 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
@@ -35,6 +35,8 @@
 import org.apache.aries.jpa.container.parsing.ParsedPersistenceUnit;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.ServiceReference;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class PersistenceUnitInfoImpl implements PersistenceUnitInfo {
   
@@ -46,6 +48,9 @@
   
   private final ServiceReference providerRef;
   
+  /** Logger */
+  private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.jpa.container");
+  
   public PersistenceUnitInfoImpl (Bundle b, ParsedPersistenceUnit parsedData, ServiceReference providerRef)
   {
     bundle = b;
@@ -55,7 +60,7 @@ public PersistenceUnitInfoImpl (Bundle b, ParsedPersistenceUnit parsedData, Serv
   }
   
   public void addTransformer(ClassTransformer arg0) {
-    // TODO Auto-generated method stub
+    // TODO Add support for class transformation from this method
   }
 
   public boolean excludeUnlistedClasses() {
@@ -81,12 +86,14 @@ public ClassLoader getClassLoader() {
   public DataSource getJtaDataSource() {
     String jndiString = (String) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.NON_JTA_DATASOURCE);
     DataSource toReturn = null;
+    if(jndiString != null) {
     try {
       InitialContext ctx = new InitialContext();
       toReturn = (DataSource) ctx.lookup(jndiString);
     } catch (NamingException e) {
-      // TODO Auto-generated catch block
-      e.printStackTrace();
+        _logger.error("No JTA datasource could be located using the JNDI name " + jndiString,
+            e);
+      }
     }
     return toReturn;
   }
@@ -109,12 +116,14 @@ public DataSource getNonJtaDataSource() {
     
     String jndiString = (String) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.NON_JTA_DATASOURCE);
     DataSource toReturn = null;
+    if(jndiString != null) {
     try {
       InitialContext ctx = new InitialContext();
       toReturn = (DataSource) ctx.lookup(jndiString);
     } catch (NamingException e) {
-      // TODO Auto-generated catch block
-      e.printStackTrace();
+        _logger.error("No Non JTA datasource could be located using the JNDI name " + jndiString,
+            e);
+      }
     }
     return toReturn;
   }
@@ -140,7 +149,7 @@ public Properties getProperties() {
   }
 
   public SharedCacheMode getSharedCacheMode() {
-    // TODO Auto-generated method stub
+    // TODO This needs to be supported once we parse JPA 2.0 xml
     return null;
   }
 
@@ -150,7 +159,7 @@ public PersistenceUnitTransactionType getTransactionType() {
   }
 
   public ValidationMode getValidationMode() {
-    // TODO Auto-generated method stub
+    // TODO This needs to be supported once we parse JPA 2.0 xml
     return null;
   }
   
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/TempBundleDelegatingClassLoader.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/TempBundleDelegatingClassLoader.java
index 0a9f5d45..2bf2d80b 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/TempBundleDelegatingClassLoader.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/TempBundleDelegatingClassLoader.java
@@ -72,6 +72,7 @@ protected URL findResource(String resName) {
     return bundle.getResource(resName);
   }
 
+  @SuppressWarnings("unchecked")
   @Override
   protected Enumeration<URL> findResources(String resName) throws IOException {
     return bundle.getResources(resName);
