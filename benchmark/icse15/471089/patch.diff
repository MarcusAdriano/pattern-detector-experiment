diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index c429b1b5..cea1672e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -47,8 +47,12 @@ public static Test suite()
                 SecurityManagerSetup.noSecurityManager(
                         new DatabaseClassLoadingTest("testSetClasspath")));
         
+        // Need DriverManager to execute the add contact procedure
+        // as it uses server side jdbc.
+        if (JDBC.vmSupportsJDBC3()) {
         suite.addTest(SecurityManagerSetup.noSecurityManager(
                 new DatabaseClassLoadingTest("testAddContact")));
+        }
         
         suite.addTest(SecurityManagerSetup.noSecurityManager(
                 new DatabaseClassLoadingTest("testGetResource")));        
@@ -220,12 +224,6 @@ private void derby2035Workaround() throws SQLException
         // setting the change does see it!
         // 
         getConnection().close();
-        try {
-            TestConfiguration.getCurrent().getDefaultConnection(
-                    "shutdown=true");
-            fail("Database failed to shut down");
-        } catch (SQLException e) {
-            assertSQLState("Database shutdown", "08006", e);
-        }  
+        getTestConfiguration().shutdownDatabase(); 
     }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SQLAuthorizationPropTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SQLAuthorizationPropTest.java
index 4adb4b65..643403df 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SQLAuthorizationPropTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SQLAuthorizationPropTest.java
@@ -47,11 +47,12 @@ public static Test suite() {
                 "SQLAuthorizationPropTest");
 		
 		// Use DatabasePropertyTestSetup decorator to set the property
-		// required by this test. 
+		// required by this test (and shutdown the database for the
+        // property to take effect.
 		Properties props = new Properties();
 	    props.setProperty("derby.database.sqlAuthorization", "true");
 	    Test test = new SQLAuthorizationPropTest("grantRevokeAfterSettingSQLAuthProperty");
-	    suite.addTest(new DatabasePropertyTestSetup (test, props));
+	    suite.addTest(new DatabasePropertyTestSetup (test, props, true));
 	    
 	    // This test has to be run after SQL authorization property has been 
 	    // set to true. 
@@ -116,14 +117,6 @@ public void testGrantRevokeWithoutSQLAuthProperty() throws SQLException{
 	 * @throws SQLException
 	 */
 	public void grantRevokeAfterSettingSQLAuthProperty() throws SQLException{
-		// Shutdown the database for derby.database.sqlAuthorization property 
-		// to take effect. This was set by DatabasePropertyTestSetup decorator.
-		try{ 
-			getDefaultConnection("shutdown=true");
-			fail("FAIL: Failed to shutdown database");
-		} catch (SQLException sqle) {
-			assertSQLState(SQLStateConstants.SHUTDOWN_DATABASE, sqle);
-		}
 		
 		Statement stmt = createStatement();
 		stmt.execute("grant select on GR_TAB to some_user");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
index 0ccae101..abc0bc4d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
@@ -201,22 +201,6 @@ public Connection openConnection(String databaseName) throws SQLException
         return conn;        
     }
     
-    /**
-     * Get a connection to the default database using the  specified connection
-     * attributes.
-     *  
-     * @param connAttrs connection attributes
-     * @return connection to default database.
-     * @throws SQLException
-     */
-    public Connection getDefaultConnection(String connAttrs)
-    	throws SQLException {
-    	Connection conn =  getTestConfiguration().
-								getDefaultConnection(connAttrs);
-    	initializeConnection(conn);
-    	return conn;
-    }
-
     /**
      * Get a connection to a database using the specified connection 
      * attributes.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
index 552c322f..15d947da 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
@@ -164,13 +164,7 @@ protected void setUp()
     {
     	setProperties(newValues);
         if (staticProperties) {
-            try {
-                TestConfiguration.getCurrent().getDefaultConnection(
-                        "shutdown=true");
-                fail("Database failed to shut down");
-            } catch (SQLException e) {
-                 BaseJDBCTestCase.assertSQLState("Database shutdown", "08006", e);
-            }
+            TestConfiguration.getCurrent().shutdownDatabase();
         }
     }
 
@@ -207,13 +201,7 @@ protected void tearDown()
         newValues = null;
         oldValues = null;
         if (staticProperties) {
-            try {
-                TestConfiguration.getCurrent().getDefaultConnection(
-                        "shutdown=true");
-                fail("Database failed to shut down");
-            } catch (SQLException e) {
-                BaseJDBCTestCase.assertSQLState("Database shutdown", "08006", e);
-            }
+            TestConfiguration.getCurrent().shutdownDatabase();
         }
     }
     
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
index 333d78af..2bb75c86 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
@@ -42,13 +42,7 @@
     protected void tearDown() throws Exception {  
         super.tearDown();
         
-        try {
-            TestConfiguration.getCurrent().getDefaultConnection(
-                    "shutdown=true");
-            fail("Database failed to shut down");
-        } catch (SQLException e) {
-            BaseJDBCTestCase.assertSQLState("Database shutdown", "08006", e);
-        }
+        TestConfiguration.getCurrent().shutdownDatabase();
 
         String dbName = TestConfiguration.getCurrent().getDatabaseName();
         dbName = dbName.replace('/', File.separatorChar);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index b1af11d3..45eafd9e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -27,6 +27,7 @@
 import java.sql.SQLException;
 import java.util.Properties;
 
+import junit.framework.Assert;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -561,7 +562,7 @@ public int getPort() {
      *
      * @return connection to default database.
      */
-    public Connection openDefaultConnection()
+    Connection openDefaultConnection()
         throws SQLException {
         return getDefaultConnection("create=true");
     }
@@ -575,7 +576,7 @@ public Connection openDefaultConnection()
      *
      * @return connection to database.
      */
-    public Connection openConnection (String databaseName) throws SQLException {
+    Connection openConnection (String databaseName) throws SQLException {
         return getConnection(databaseName, "create=true");
     }
     
@@ -628,6 +629,21 @@ public Connection getConnection (String databaseName, String connAttrs)
         return con;
     }
     
+    /**
+     * Shutdown the database for this configuration
+     * assuming it is booted.
+     *
+     */
+    public void shutdownDatabase()
+    {
+        try {
+            getDefaultConnection("shutdown=true");
+            Assert.fail("Database failed to shut down");
+        } catch (SQLException e) {
+             BaseJDBCTestCase.assertSQLState("Database shutdown", "08006", e);
+        }
+    }
+    
     /**
      * Set the verbosity, i.e., whether debug statements print.
      */
