diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java
index 5a463af0..89bb7f0f 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/ReaderManager.java
@@ -82,4 +82,9 @@ protected boolean tryIncRef(DirectoryReader reference) {
     return reference.tryIncRef();
   }
 
+  @Override
+  protected int getRefCount(DirectoryReader reference) {
+    return reference.getRefCount();
+  }
+
 }
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
index a6d0e94f..480e127a 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
@@ -92,13 +92,29 @@ private synchronized void swapReference(G newReference) throws IOException {
    */
   public final G acquire() throws IOException {
     G ref;
+
     do {
       if ((ref = current) == null) {
         throw new AlreadyClosedException(REFERENCE_MANAGER_IS_CLOSED_MSG);
       }
-    } while (!tryIncRef(ref));
+      if (tryIncRef(ref)) {
     return ref;
   }
+      if (getRefCount(ref) == 0 && current == ref) {
+        assert ref != null;
+        /* if we can't increment the reader but we are
+           still the current reference the RM is in a
+           illegal states since we can't make any progress
+           anymore. The reference is closed but the RM still
+           holds on to it as the actual instance.
+           This can only happen if somebody outside of the RM
+           decrements the refcount without a corresponding increment
+           since the RM assigns the new reference before counting down
+           the reference. */
+        throw new IllegalStateException("The managed reference has already closed - this is likely a bug when the reference count is modified outside of the ReferenceManager");
+      }
+    } while (true);
+  }
   
   /**
     * <p>
@@ -132,6 +148,11 @@ public final synchronized void close() throws IOException {
     }
   }
 
+  /**
+   * Returns the current reference count of the given reference.
+   */
+  protected abstract int getRefCount(G reference);
+
   /**
    *  Called after close(), so subclass can free any resources.
    *  @throws IOException if the after close operation in a sub-class throws an {@link IOException} 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java
index e0d2ce7f..7305e512 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/SearcherManager.java
@@ -128,6 +128,11 @@ protected boolean tryIncRef(IndexSearcher reference) {
     return reference.getIndexReader().tryIncRef();
   }
 
+  @Override
+  protected int getRefCount(IndexSearcher reference) {
+    return reference.getIndexReader().getRefCount();
+  }
+
   /**
    * Returns <code>true</code> if no changes have occured since this searcher
    * ie. reader was opened, otherwise <code>false</code>.
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
index 57812637..ae2274c5 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
@@ -303,6 +303,37 @@ public void testCloseTwice() throws Exception {
     dir.close();
   }
 
+  public void testReferenceDecrementIllegally() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
+        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));
+    SearcherManager sm = new SearcherManager(writer, false, new SearcherFactory());
+    writer.addDocument(new Document());
+    writer.commit();
+    sm.maybeRefreshBlocking();
+
+    IndexSearcher acquire = sm.acquire();
+    IndexSearcher acquire2 = sm.acquire();
+    sm.release(acquire);
+    sm.release(acquire2);
+
+
+    acquire = sm.acquire();
+    acquire.getIndexReader().decRef();
+    sm.release(acquire);
+    try {
+      sm.acquire();
+      fail("acquire should have thrown an IllegalStateException since we modified the refCount outside of the manager");
+    } catch (IllegalStateException ex) {
+      //
+    }
+
+    // sm.close(); -- already closed
+    writer.close();
+    dir.close();
+  }
+
+
   public void testEnsureOpen() throws Exception {
     Directory dir = newDirectory();
     new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).close();
diff --git a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.java b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.java
index 6de430c7..561c2b19 100644
--- a/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.java
+++ b/lucene/dev/trunk/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.java
@@ -141,4 +141,9 @@ protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IO
       return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);
     }
   }
+
+  @Override
+  protected int getRefCount(SearcherAndTaxonomy reference) {
+    return reference.searcher.getIndexReader().getRefCount();
+  }
 }
