diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
index eda4f5c6..99fbfe26 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
@@ -202,7 +202,6 @@ public void writeResponse() throws IOException {
       // be escaped.
       strat.setUnicodeEscapeInterpretation(true);
     }
-
     printer = new CSVPrinter(writer, strategy);
     
 
@@ -261,7 +260,6 @@ public void writeResponse() throws IOException {
        if (!returnFields.wantsField(field)) {
          continue;
        }
-
       if (field.equals("score")) {
         CSVField csvField = new CSVField();
         csvField.name = "score";
@@ -285,6 +283,11 @@ public void writeResponse() throws IOException {
       encapsulator = params.get("f." + field + '.' + CSV_ENCAPSULATOR);
       escape = params.get("f." + field + '.' + CSV_ESCAPE);
 
+      // if polyfield and no escape is provided, add "\\" escape by default
+      if (sf.isPolyField()) {
+        escape = (escape==null)?"\\":escape;
+      }
+
       CSVSharedBufPrinter csvPrinter = csvPrinterMV;
       if (sep != null || encapsulator != null || escape != null) {
         // create a new strategy + printer if there were any per-field overrides
@@ -310,7 +313,6 @@ public void writeResponse() throws IOException {
         csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);
       }
 
-
       CSVField csvField = new CSVField();
       csvField.name = field;
       csvField.sf = sf;
@@ -407,7 +409,19 @@ public void writeSolrDocument(String name, SolrDocument doc, ReturnFields return
           Collection values = (Collection)val;
           val = values.iterator().next();
         }
+        // if field is polyfield, use the multi-valued printer to apply appropriate escaping
+        if (csvField.sf != null && csvField.sf.isPolyField()) {
+          mvWriter.reset();
+          csvField.mvPrinter.reset();
+          CSVPrinter tmp = printer;
+          printer = csvField.mvPrinter;
         writeVal(csvField.name, val);
+          printer = tmp;
+          mvWriter.freeze();
+          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);
+        } else {
+          writeVal(csvField.name, val);
+        }
       }
     }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
index 7e706de2..c7897bc7 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
@@ -255,7 +255,7 @@ public void write(XMLWriter xmlWriter, String name, IndexableField field) throws
 
   @Override
   public void write(TextResponseWriter writer, String name, IndexableField field) throws IOException {
-    writer.writeStr(name, field.stringValue(), false);
+    writer.writeStr(name, field.stringValue(), true);
   }
 
   public ExchangeRateProvider getProvider() {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/LatLonType.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
index d78efade..9d8c6bf0 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
@@ -241,7 +241,7 @@ public boolean isPolyField() {
 
   @Override
   public void write(TextResponseWriter writer, String name, IndexableField f) throws IOException {
-    writer.writeStr(name, f.stringValue(), false);
+    writer.writeStr(name, f.stringValue(), true);
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/PointType.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/PointType.java
index 40d091b8..4d1e2ac2 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/PointType.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/PointType.java
@@ -121,7 +121,7 @@ public IndexableField createField(SchemaField field, Object value, float boost)
 
   @Override
   public void write(TextResponseWriter writer, String name, IndexableField f) throws IOException {
-    writer.writeStr(name, f.stringValue(), false);
+    writer.writeStr(name, f.stringValue(), true);
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java
index 94c691b6..b8f37fd2 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java
@@ -40,6 +40,8 @@ public static void createIndex() {
     assertU(adoc("id","1", "foo_i","-1", "foo_s","hi", "foo_l","12345678987654321", "foo_b","false", "foo_f","1.414","foo_d","-1.0E300","foo_dt","2000-01-02T03:04:05Z"));
     assertU(adoc("id","2", "v_ss","hi",  "v_ss","there", "v2_ss","nice", "v2_ss","output", "shouldbeunstored","foo"));
     assertU(adoc("id","3", "shouldbeunstored","foo"));
+    assertU(adoc("id","4", "amount_c", "1.50,EUR"));
+    assertU(adoc("id","5", "store", "12.434,-134.1"));
     assertU(commit());
   }
 
@@ -70,6 +72,13 @@ public void testCSVOutput() throws Exception {
     assertEquals("2,hi|there,nice:output\n"
     , h.query(req("q","id:2", "wt","csv", "csv.header","false", "csv.mv.separator","|", "f.v2_ss.csv.separator",":", "fl","id,v_ss,v2_ss")));
 
+    // test csv field for polyfield (currency) SOLR-3959
+    assertEquals("4,\"1.50\\,EUR\"\n"
+    , h.query(req("q","id:4", "wt","csv", "csv.header","false", "fl","id,amount_c")));
+ 
+    // test csv field for polyfield (latlon) SOLR-3959
+    assertEquals("5,\"12.434\\,-134.1\"\n"
+    , h.query(req("q","id:5", "wt","csv", "csv.header","false", "fl","id,store")) );
     // test retrieving fields from index
     String result = h.query(req("q","*:*", "wt","csv", "csv.header","true", "fl","*,score"));
     for (String field : "id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score".split(",")) {
@@ -101,7 +110,7 @@ public void testCSVOutput() throws Exception {
     , h.query(req("q","id:[1 TO 2]", "wt","csv", "csv.header","false", "fl","id,v_ss,foo_s")));
 
     // test SOLR-2970 not returning non-stored fields by default. Compare sorted list
-    assertEquals(sortHeader("v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\n")
+    assertEquals(sortHeader("amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\n")
     , sortHeader(h.query(req("q","id:3", "wt","csv", "csv.header","true", "fl","*", "rows","0"))));
 
 
