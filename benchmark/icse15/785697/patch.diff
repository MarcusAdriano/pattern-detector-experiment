diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
index a68870ac..6e580f52 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
@@ -31,6 +31,9 @@
 
 /**
  * A representation of the range that a node is responsible for on the DHT ring.
+ *
+ * A Range is responsible for the tokens between [left, right).
+ * 
  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
  */
 
@@ -101,7 +104,7 @@ else if ( left_.compareTo(right_) < 0 )
             /*
              * This is the range [a, b) where a < b. 
             */
-            return ( bi.compareTo(left_) >= 0 && right_.compareTo(bi) >=0 );
+            return ( bi.compareTo(left_) >= 0 && right_.compareTo(bi) > 0 );
         }        
         else
     	{
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java
index 22ec8e39..a6179722 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java
@@ -24,13 +24,17 @@
     @Test
     public void testRange() {
         Range left = new Range(new BigIntegerToken("0"), new BigIntegerToken("100"));
+		assert left.contains(new BigIntegerToken("0"));
         assert left.contains(new BigIntegerToken("10"));
         assert !left.contains(new BigIntegerToken("-1"));
+        assert !left.contains(new BigIntegerToken("100"));
         assert !left.contains(new BigIntegerToken("101"));
 
         Range right = new Range(new BigIntegerToken("100"), new BigIntegerToken("0"));
+        assert right.contains(new BigIntegerToken("100"));
         assert right.contains(new BigIntegerToken("200"));
         assert right.contains(new BigIntegerToken("-10"));
+        assert !right.contains(new BigIntegerToken("0"));
         assert !right.contains(new BigIntegerToken("1"));
     }
 }
