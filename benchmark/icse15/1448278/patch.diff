diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils42.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils42.java
index 6d6c70a1..e39a0172 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils42.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils42.java
@@ -52,7 +52,7 @@ public  static  int getTypeAsInt( Agent agent, SQLType sqlType )
             (
              agent.logWriter_,
              new ClientMessageId(SQLState.DATA_TYPE_NOT_SUPPORTED),
-             sqlType.toString()
+             sqlType
              ).getSQLException();
     }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java
index fe7dfb8e..f957b69c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util42.java
@@ -54,7 +54,7 @@ public  static  int getTypeAsInt( ConnectionChild connChild, SQLType sqlType )
         }
 
         throw connChild.newSQLException
-            ( SQLState.DATA_TYPE_NOT_SUPPORTED, sqlType.toString() );
+            ( SQLState.DATA_TYPE_NOT_SUPPORTED, sqlType );
     }
     
 }    
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java
index 5cc08607..6ba5cf4f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java
@@ -21,7 +21,6 @@
 package org.apache.derbyTesting.functionTests.tests.jdbc4;
 
 import java.math.BigDecimal;
-import java.io.Serializable;
 import java.sql.Blob;
 import java.sql.CallableStatement;
 import java.sql.Clob;
@@ -31,6 +30,8 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.SQLFeatureNotSupportedException;
+import java.sql.Statement;
 import java.sql.Time;
 import java.sql.Timestamp;
 
@@ -42,6 +43,7 @@
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.functionTests.tests.lang.Price;
+import org.apache.derbyTesting.junit.JDBC;
 
 /**
  * Tests for new methods added for PreparedStatement in JDBC 4.2.
@@ -231,7 +233,7 @@ private void    populateTable( Connection conn ) throws Exception
             }
             catch (SQLException se)
             {
-                assertSQLState( "0A000", se );
+                assertSQLState( UNIMPLEMENTED_FEATURE, se );
             }
         }
 
@@ -638,6 +640,73 @@ private static void    vetSetObjectProc( Connection conn ) throws Exception
         }
     }
 
+    /**
+     * DERBY-6081: Verify that an SQLException is raised if the supplied
+     * SQLType argument is null. It used to fail with a NullPointerException.
+     */
+    public void test_04_targetTypeIsNull() throws SQLException {
+        setAutoCommit(false);
+
+        // Test PreparedStatement.setObject() with targetType == null.
+
+        PreparedStatement ps = prepareStatement("values cast(? as int)");
+
+        try {
+            ps.setObject(1, 1, null);
+            fail("setObject should fail when type is null");
+        } catch (SQLFeatureNotSupportedException se) {
+            assertSQLState(UNIMPLEMENTED_FEATURE, se);
+        }
+
+        try {
+            ps.setObject(1, 1, null, 1);
+            fail("setObject should fail when type is null");
+        } catch (SQLFeatureNotSupportedException se) {
+            assertSQLState(UNIMPLEMENTED_FEATURE, se);
+        }
+
+        // Test ResultSet.updateObject() with targetType == null.
+
+        Statement s = createStatement(
+                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
+        s.execute("create table t(x int)");
+        s.execute("insert into t values 1");
+
+        ResultSet rs = s.executeQuery("select * from t");
+        assertTrue(rs.next());
+
+        try {
+            rs.updateObject("x", 1, null);
+            fail("updateObject should fail when type is null");
+        } catch (SQLFeatureNotSupportedException se) {
+            assertSQLState(UNIMPLEMENTED_FEATURE, se);
+        }
+
+        try {
+            rs.updateObject(1, 1, null);
+            fail("updateObject should fail when type is null");
+        } catch (SQLFeatureNotSupportedException se) {
+            assertSQLState(UNIMPLEMENTED_FEATURE, se);
+        }
+
+        try {
+            rs.updateObject("x", 1, null, 1);
+            fail("updateObject should fail when type is null");
+        } catch (SQLFeatureNotSupportedException se) {
+            assertSQLState(UNIMPLEMENTED_FEATURE, se);
+        }
+
+        try {
+            rs.updateObject(1, 1, null, 1);
+            fail("updateObject should fail when type is null");
+        } catch (SQLFeatureNotSupportedException se) {
+            assertSQLState(UNIMPLEMENTED_FEATURE, se);
+        }
+
+        // There should be no more rows.
+        JDBC.assertEmpty(rs);
+    }
+
     //////////////////////////////////////////////////////////
     //
     // SQL ROUTINES
