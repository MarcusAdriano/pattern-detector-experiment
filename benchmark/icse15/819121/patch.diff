diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnIndexer.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnIndexer.java
index 0c35466a..f8821f71 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnIndexer.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnIndexer.java
@@ -104,7 +104,11 @@ private static BloomFilter createColumnBloomFilter(Collection<IColumn> columns)
      */
     private static void doIndexing(AbstractType comparator, Collection<IColumn> columns, DataOutput dos) throws IOException
     {
-        assert !columns.isEmpty();
+        if (columns.isEmpty())
+        {
+            dos.writeInt(0);
+            return;            
+        }
 
         /*
          * Maintains a list of ColumnIndexInfo objects for the columns in this
diff --git a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index 9c07a635..2646c758 100644
--- a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -25,6 +25,7 @@
 import java.util.concurrent.ExecutionException;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.ArrayUtils;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;
 
@@ -32,6 +33,8 @@
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.db.filter.IdentityQueryFilter;
 import org.apache.cassandra.db.filter.QueryPath;
+import org.apache.cassandra.db.filter.SliceQueryFilter;
+import org.apache.cassandra.db.filter.NamesQueryFilter;
 import org.apache.cassandra.io.SSTableReader;
 
 public class ColumnFamilyStoreTest extends CleanupHelper
@@ -120,4 +123,29 @@ public void testGetColumnWithWrongBF() throws IOException, ExecutionException, I
         ColumnFamily cf = store.getColumnFamily(new IdentityQueryFilter("key2", new QueryPath("Standard1", null, "Column1".getBytes())));
         assertNull(cf);
     }
+
+    @Test
+    public void testEmptyRow() throws Exception
+    {
+        Table table = Table.open("Keyspace1");
+        final ColumnFamilyStore store = table.getColumnFamilyStore("Standard2");
+        RowMutation rm;
+
+        rm = new RowMutation("Keyspace1", "key1");
+        rm.delete(new QueryPath("Standard2", null, null), System.currentTimeMillis());
+        rm.apply();
+
+        TableTest.Runner r = new TableTest.Runner()
+        {
+            public void run() throws IOException
+            {
+                SliceQueryFilter sliceFilter = new SliceQueryFilter("key1", new QueryPath("Standard2", null, null), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, 1);
+                assertNull(store.getColumnFamily(sliceFilter));
+                NamesQueryFilter namesFilter = new NamesQueryFilter("key1", new QueryPath("Standard2", null, null), "a".getBytes());
+                assertNull(store.getColumnFamily(namesFilter));
+            }
+        };
+
+        TableTest.reTest(store, r);
+    }
 }
diff --git a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/TableTest.java b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/TableTest.java
index 6abd7ad2..6ae9691c 100644
--- a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/db/TableTest.java
@@ -42,12 +42,12 @@
     private static final String KEY2 = "key2";
     private static final String TEST_KEY = "key1";
 
-    interface Runner
+    public interface Runner
     {
         public void run() throws Exception;
     }
 
-    private void reTest(ColumnFamilyStore cfs, Runner verify) throws Exception
+    public static void reTest(ColumnFamilyStore cfs, Runner verify) throws Exception
     {
         verify.run();
         cfs.forceBlockingFlush();
