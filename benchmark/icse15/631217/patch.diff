diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/stmtcache/StatementKey.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/stmtcache/StatementKey.java
index 1afc589c..bb791f77 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/stmtcache/StatementKey.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/stmtcache/StatementKey.java
@@ -67,17 +67,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * @param rsHoldability result set holdability
      * @param autogeneratedKeys if auto-generated keys are returned
      *
-     * @throws IllegalArgumentException if <code>sql</code> and/or
-     *      <code>schema</code> is <code>null</code>
+     * @throws IllegalArgumentException if {@code schema} is {@code null}
      */
     StatementKey(boolean isCallableStatement, String sql, String schema,
             int rsType, int rsConcurrency, int rsHoldability,
             int autogeneratedKeys) {
-        if (sql == null || schema == null) {
+        if (schema == null) {
             // Not localized (yet), because this should never reach the user.
-            throw new IllegalArgumentException(
-                    "sql and/or schema is <null>: sql=" + (sql == null) +
-                    ", schema=" + (schema == null));
+            throw new IllegalArgumentException("schema is <null>");
         }
         this.isCallableStatement = isCallableStatement;
         this.sql = sql;
@@ -125,6 +122,9 @@ public boolean equals(Object obj) {
         if (!this.schema.equals(other.schema)) {
             return false;
         }
+        if (this.sql == null && other.sql != null) {
+            return false;
+        }
         if (!this.sql.equals(other.sql)) {
             return false;
         }
@@ -140,7 +140,7 @@ public boolean equals(Object obj) {
     public int hashCode() {
         int hash = 7;
         hash = 47 * hash + (this.isCallableStatement ? 1 : 0);
-        hash = 47 * hash + this.sql.hashCode();
+        hash = 47 * hash + (this.sql == null ? 3 : this.sql.hashCode());
         hash = 47 * hash + this.schema.hashCode();
         hash = 47 * hash + this.type;
         hash = 47 * hash + this.concurrency;
