diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java
index 827645f1..322089a1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java
@@ -46,11 +46,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 
 	/**
+	 * <p>
 	 * Get the minimum value of 4 input values.  If less than 4 values, input
-	 * NULL.  If more than 4 input values, call this multiple times to
+	 * {@code null} for the unused parameters and place them at the end.
+	 * If more than 4 input values, call this multiple times to
 	 * accumulate results.  Also have judge's type as parameter to have a base
 	 * upon which the comparison is based.  An example use is for code 
 	 * generation in bug 3858.
+	 * </p>
+	 * 
+	 * <p>
+	 * If all the input values are SQL NULL, return SQL NULL. Otherwise, return
+	 * the minimum value of the non-NULL inputs.
+	 * </p>
 	 * 
 	 * @param v1		1st value
 	 * @param v2		2nd value
@@ -77,22 +85,33 @@ public static DataValueDescriptor minValue(DataValueDescriptor v1,
 			judge = (DataValueDescriptor) new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
 			
 		DataValueDescriptor minVal = v1;
-		if (v2 != null && judge.lessThan(v2, minVal).equals(true))
+		if (v2 != null &&
+				(minVal.isNull() || judge.lessThan(v2, minVal).equals(true)))
 			minVal = v2;
-		if (v3 != null && judge.lessThan(v3, minVal).equals(true))
+		if (v3 != null &&
+				(minVal.isNull() || judge.lessThan(v3, minVal).equals(true)))
 			minVal = v3;
-		if (v4 != null && judge.lessThan(v4, minVal).equals(true))
+		if (v4 != null &&
+				(minVal.isNull() || judge.lessThan(v4, minVal).equals(true)))
 			minVal = v4;
 		return minVal;
 	}
 
 
 	/**
+	 * <p>
 	 * Get the maximum value of 4 input values.  If less than 4 values, input
-	 * NULL.  If more than 4 input values, call this multiple times to
+	 * {@code null} for the unused parameters and place them at the end.
+	 * If more than 4 input values, call this multiple times to
 	 * accumulate results.  Also have judge's type as parameter to have a base
 	 * upon which the comparison is based.  An example use is for code 
 	 * generation in bug 3858.
+	 * </p>
+	 * 
+	 * <p>
+	 * If all the input values are SQL NULL, return SQL NULL. Otherwise, return
+	 * the maximum value of the non-NULL inputs.
+	 * </p>
 	 * 
 	 * @param v1		1st value
 	 * @param v2		2nd value
@@ -119,11 +138,14 @@ public static DataValueDescriptor maxValue(DataValueDescriptor v1,
 			judge =  new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
 
 		DataValueDescriptor maxVal = v1;
-		if (v2 != null && judge.greaterThan(v2, maxVal).equals(true))
+		if (v2 != null &&
+				(maxVal.isNull() || judge.greaterThan(v2, maxVal).equals(true)))
 			maxVal = v2;
-		if (v3 != null && judge.greaterThan(v3, maxVal).equals(true))
+		if (v3 != null &&
+				(maxVal.isNull() || judge.greaterThan(v3, maxVal).equals(true)))
 			maxVal = v3;
-		if (v4 != null && judge.greaterThan(v4, maxVal).equals(true))
+		if (v4 != null &&
+				(maxVal.isNull() || judge.greaterThan(v4, maxVal).equals(true)))
 			maxVal = v4;
 		return maxVal;
 	}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
index 4e66f0e6..e1d18a47 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java
@@ -126,6 +126,43 @@ public void testNullabilityInLeftOrRightOuterJoin() throws SQLException {
         JDBC.assertEmpty(rs);
     }
 
+    /**
+     * DERBY-4372: Some joins used to miss some rows after an index was
+     * created, because the start and stop keys passed to the index scan were
+     * wrong if the IN list in the JOIN condition contained a NULL.
+     */
+    public void testDerby4372() throws SQLException {
+        Statement s = createStatement();
+        s.execute("create table d4372_1 (a int, b int)");
+        s.execute("create table d4372_2 (c int)");
+        s.execute("insert into d4372_1 values (1,1),(null,1),(1,null)," +
+                "(2,2),(2,null),(null,2),(3,3),(null,3),(3,null),(null,null)");
+        s.execute("insert into d4372_2 values (1), (3)");
+
+        String[][] expectedJoinResult = {
+            {"1", "1", "1"},
+            {null, "1", "1"},
+            {"1", null, "1"},
+            {"3", "3", "3"},
+            {null, "3", "3"},
+            {"3", null, "3"}
+        };
+
+        // Try a problematic join, but without an index.
+        PreparedStatement ps = prepareStatement(
+                "select * from d4372_1 join d4372_2 on c in (a, b)");
+
+        JDBC.assertUnorderedResultSet(ps.executeQuery(), expectedJoinResult);
+
+        // Now create an index on C and retry the join. Should still return the
+        // same rows, but didn't before DERBY-4372 was fixed.
+        s.execute("create index d4372_idx on d4372_2(c)");
+        JDBC.assertUnorderedResultSet(ps.executeQuery(), expectedJoinResult);
+
+        s.execute("drop table d4372_1");
+        s.execute("drop table d4372_2");
+    }
+
     /**
      * Test the CROSS JOIN syntax that was added in DERBY-4355.
      */
