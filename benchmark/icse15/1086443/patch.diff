diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
index a671e059..90bd8d87 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/InterruptStatus.java
@@ -94,6 +94,19 @@ public static void setInterrupted() {
         }
     }
 
+    /**
+     * Use when lcc is dying to save info in thread local instead. Useful under
+     * shutdown.
+     */
+    public static void saveInfoFromLcc(LanguageConnectionContext lcc) {
+        
+        StandardException e = lcc.getInterruptedException();
+
+        if (e != null) {
+            exception.set(e);
+        }
+    }
+
 
     /**
      * Checks if the thread has been interrupted in NIO, presumably because we
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 4e33a01d..7af2ee1a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -75,6 +75,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.store.access.TransactionController;
 import org.apache.derby.iapi.store.access.XATransactionController;
 import org.apache.derby.iapi.util.IdUtil;
+import org.apache.derby.iapi.util.InterruptStatus;
 
 import org.apache.derby.catalog.UUID;
 import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
@@ -3136,6 +3137,8 @@ public void cleanupOnError(Throwable error) throws StandardException {
             }
                        
             popMe();
+
+            InterruptStatus.saveInfoFromLcc(this);
         }
 
         /*
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
index 52340ce8..03234ac8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
@@ -19,6 +19,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 */
 package org.apache.derbyTesting.functionTests.tests.store;
 
+import java.io.File;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
@@ -41,8 +42,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Properties;
 
 /**
- * Test started as a test reproduce and verify fix for DERBY-151.  Later
- * evolved into test for DERBY-4741.
+ * This test started out as a test reproduce and verify fix for DERBY-151.
+ * Later evolved into test for DERBY-4741.
+ * <p/>
+ * The use of stored procedures was done to make the tests meaningful in client
+ * server mode as well, but be removed/simplified as long as we only make
+ * claims about the resilience of embedded Derby.
  */
 
 public class InterruptResilienceTest extends BaseJDBCTestCase
@@ -459,7 +464,7 @@ public void run() {
                         }
 
 
-                        if (Thread.interrupted()) {
+                        if (interrupted()) {
                             interruptsSeen++;
                         }
 
@@ -632,4 +637,37 @@ public void testInterruptBatch() throws SQLException {
         rollback();
 
     }
+
+
+    public void testInterruptShutdown() throws SQLException {
+        if (!usingEmbedded()) {
+            // Only meaningful for embedded.
+            return;
+        }
+
+        setAutoCommit(false);
+
+        try {
+            Statement s = createStatement();
+            s.executeUpdate("create table foo (i int)");
+            PreparedStatement ps =
+                prepareStatement("insert into foo values ?");
+
+            for (int i = 0; i < 1000; i++) {
+                ps.setInt(1,i);
+                ps.executeUpdate();
+            }
+
+            Thread.currentThread().interrupt();
+
+            TestConfiguration.getCurrent().shutdownDatabase();
+
+            // Assert and clear thread's flag:
+            // DERBY-5152: Fails before fix due to lcc going away.
+            assertTrue(Thread.interrupted());
+
+        } finally {
+            Thread.interrupted(); // clear flag
+        }
+    }
 }
