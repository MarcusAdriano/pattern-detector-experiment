diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
index fb15afcc..9705d3ed 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
@@ -153,8 +153,6 @@ private void activate() {
 			instance = Activator.this;
 		}
 		registerBundleEventHook();
-		registrations.add(bundleContext.registerService(ResolverHookFactory.class, new SubsystemResolverHookFactory(), null));
-		registrar = new SubsystemServiceRegistrar(bundleContext);
 		try {
 			subsystems = new Subsystems();
 		}
@@ -164,6 +162,8 @@ private void activate() {
 		catch (Exception e) {
 			throw new SubsystemException(e);
 		}
+		registrations.add(bundleContext.registerService(ResolverHookFactory.class, new SubsystemResolverHookFactory(subsystems), null));
+		registrar = new SubsystemServiceRegistrar(bundleContext);
 		AriesSubsystem root = subsystems.getRootSubsystem();
 		root.start();
 	}
@@ -304,7 +304,7 @@ else if (service instanceof Resolver) {
 		else if (service instanceof ModelledResourceManager) {
 			if (service.equals(modelledResourceManager)) {
 				ModelledResourceManager modelledResourceManager = (ModelledResourceManager)findAlternateServiceFor(this.modelledResourceManager);
-				if (resolver == null)
+				if (modelledResourceManager == null)
 					deactivate();
 				this.modelledResourceManager = modelledResourceManager;
 			}
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java
index 1de9fcfb..9ba81a67 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java
@@ -31,7 +31,7 @@
 
 public class Location {
   enum LocationType {
-    SUBSYSTEM("subsystem", "subsystem"), IDIRFINDER(IDIR_SCHEME, IDIR_SCHEME), URL("url", null);
+    SUBSYSTEM("subsystem", "subsystem"), IDIRFINDER(IDIR_SCHEME, IDIR_SCHEME), URL("url", null), UNKNOWN("unknown", null);
     final String toString;
     final String scheme;
     LocationType(String toString, String scheme) {this.toString = toString; this.scheme = scheme;}
@@ -70,7 +70,10 @@ public Location(String location) throws MalformedURLException, URISyntaxExceptio
         uri = locationUri;
       }
     } else {
-      throw new IllegalArgumentException(location + " is not an absolute uri");
+    	type = LocationType.UNKNOWN;
+    	url = null;
+    	uri = null;
+    	subsystemUri = null;
     }
   }
     
@@ -96,6 +99,11 @@ public IDirectory open() throws IOException, URISyntaxException {
           return FileSystem.getFSRoot(new File(uri));
         else
           return FileSystem.getFSRoot(url.openStream());
+      case UNKNOWN:
+    	  // Only try to create a URL with the location value here. If the
+    	  // location was just a string and an InputStream was provided, this
+    	  // method will never be called.
+    	  return FileSystem.getFSRoot(new URL(value).openStream());
       default : // should never get here as switch should cover all types
         throw new UnsupportedOperationException("cannot open location of type " + type); 
     }
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
index 10afdef9..d54f18ba 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
@@ -30,6 +30,14 @@
 public class SubsystemResolverHook implements ResolverHook {
 	private static final Logger LOGGER = LoggerFactory.getLogger(SubsystemResolverHook.class);
 	
+	private final Subsystems subsystems;
+	
+	public SubsystemResolverHook(Subsystems subsystems) {
+		if (subsystems == null)
+			throw new NullPointerException("Missing required parameter: subsystems");
+		this.subsystems = subsystems;
+	}
+	
 	public void end() {
 		// noop
 	}
@@ -39,7 +47,7 @@ public void filterMatches(BundleRequirement requirement, Collection<BundleCapabi
 		// there is at least one preferred provider.
 		// (1) Find the subsystem(s) containing requirement.getResource() as a
 		// constituent.
-		Collection<AriesSubsystem> requirers = Activator.getInstance().getSubsystems().getSubsystemsReferencing(requirement.getResource());
+		Collection<AriesSubsystem> requirers = subsystems.getSubsystemsReferencing(requirement.getResource());
 		// (2) For each candidate, ask each subsystem if the candidate or any of
 		// the candidate's containing subsystems is a preferred provider. If at
 		// least one preferred provider exists, filter out all other candidates
@@ -62,7 +70,7 @@ public void filterResolvable(Collection<BundleRevision> candidates) {
 				if (revision.getSymbolicName().startsWith(Constants.RegionContextBundleSymbolicNamePrefix))
 					// Don't want to filter out the region context bundle.
 					continue;
-				Collection<AriesSubsystem> subsystems = Activator.getInstance().getSubsystems().getSubsystemsReferencing(revision);
+				Collection<AriesSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(revision);
 				for (AriesSubsystem subsystem : subsystems) {
 					if (subsystem.isFeature()) {
 						// Feature subsystems require no isolation.
@@ -87,7 +95,7 @@ public void filterSingletonCollisions(BundleCapability singleton, Collection<Bun
 	}
 	
 	private boolean isResourceConstituentOfPreferredSubsystem(Resource resource, AriesSubsystem preferer) {
-		Collection<AriesSubsystem> subsystems = Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource);
+		Collection<AriesSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(resource);
 		for (AriesSubsystem subsystem : subsystems)
 			if (preferer.getSubsystemManifest().getPreferredProviderHeader().contains(subsystem))
 				return true;
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHookFactory.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHookFactory.java
index 654ada24..fffe9901 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHookFactory.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHookFactory.java
@@ -20,7 +20,14 @@
 import org.osgi.framework.wiring.BundleRevision;
 
 public class SubsystemResolverHookFactory implements ResolverHookFactory {
+	private final Subsystems subsystems;
+	public SubsystemResolverHookFactory(Subsystems subsystems) {
+		if (subsystems == null)
+			throw new NullPointerException("Missing required parameter: subsystems");
+		this.subsystems = subsystems;
+	}
+	
 	public ResolverHook begin(Collection<BundleRevision> triggers) {
-		return new SubsystemResolverHook();
+		return new SubsystemResolverHook(subsystems);
 	}
 }
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
index 52c5fb36..895bcb1e 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
@@ -79,6 +79,11 @@ public void testRegionContextBundle() throws BundleException {
 	public void testServiceEvents() throws Exception {
 		Subsystem root = getRootSubsystem();
 		Bundle core = getSubsystemCoreBundle();
+		// TODO Temporary(?) workaround to allow time for any tardy service
+		// events to arrive so they can be cleared. So far, this sleep has only
+		// been necessary on the IBM 6.0 64-bit JDK.
+		Thread.sleep(1000);
+		subsystemEvents.clear();
 		core.stop();
 		assertServiceEventsStop(root);
 		core.uninstall();
