diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java
index fa2763f1..430aa676 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java
@@ -914,7 +914,17 @@ public RowLocation getRowLocation() throws StandardException
 				if (rlTemplate == null)
 					rlTemplate = scanController.newRowLocationTemplate();
 				rl = rlTemplate;
+				try {
 				scanController.fetchLocation(rl);
+				} catch (StandardException se) {
+					if (se.getMessageId().equals(SQLState.AM_SCAN_NOT_POSITIONED)) {
+						
+						//Have a easier to understand error message than what 
+						//we get from store 
+						throw StandardException.
+							newException(SQLState.NO_CURRENT_ROW);
+					}
+				}
 			} else {
 				rl = null;
 			}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java
index dd2fad01..16205981 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java
@@ -316,6 +316,60 @@ public void testHeldScrollableUpdatableResultSetScanDone()
         scrollBackwardAndUpdate(rs);
     }
 
+    /**
+     * Test that updateRow() after a commit requires a renavigation 
+     * on a held forward only ResulTset.
+     */
+    public void testUpdateRowAfterCommitOnHeldForwardOnlyResultSet() 
+        throws SQLException
+    {
+        Statement s = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, 
+                                          ResultSet.CONCUR_UPDATABLE);
+        ResultSet rs = s.executeQuery(selectStatement);
+        
+        if (rs.getConcurrency()==ResultSet.CONCUR_READ_ONLY) {
+            println("Test disabled");
+            return;
+        }
+        rs.next();
+        con.commit();
+        try {
+            rs.updateInt(2, -100);
+            rs.updateRow();
+            assertTrue("Expected updateRow() to throw exception", false);
+        } catch (SQLException e) {
+            assertEquals("Unexpected SQLState",
+                         INVALID_CURSOR_STATE_NO_CURRENT_ROW, e.getSQLState());
+        }
+    }
+
+    /**
+     * Test that updateRow() after a commit requires a renavigation 
+     * on a held scrollinsensitve ResulTset.
+     */
+    public void testUpdateRowAfterCommitOnHeldScrollInsensitiveResultSet() 
+        throws SQLException
+    {
+        Statement s = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, 
+                                          ResultSet.CONCUR_UPDATABLE);
+        ResultSet rs = s.executeQuery(selectStatement);
+        
+        if (rs.getConcurrency()==ResultSet.CONCUR_READ_ONLY) {
+            println("Test disabled");
+            return;
+        }
+        rs.next();
+        con.commit();
+        try {
+            rs.updateInt(2, -100);
+            rs.updateRow();
+            assertTrue("Expected updateRow() to throw exception", false);
+        } catch (SQLException e) {
+            assertEquals("Unexpected SQLState",
+                         INVALID_CURSOR_STATE_NO_CURRENT_ROW, e.getSQLState());
+        }
+    }
+
     /**
      * Test that running a compress on a holdable scrollable updatable 
      * resultset will not invalidate the ResultSet from doing updates,
@@ -494,7 +548,8 @@ private void verifyCompressInvalidation(ResultSet rs)
         rs.updateRow();
         SQLWarning warn = rs.getWarnings();
         assertNotNull("Expected warning when updating deleted tuple", warn);
-        assertEquals("Unexpected SQL State on warning", "01001", 
+        assertEquals("Unexpected SQL State on warning", 
+                     CURSOR_OPERATION_CONFLICT, 
                      warn.getSQLState());        
         rs.clearWarnings();
         
@@ -504,7 +559,8 @@ private void verifyCompressInvalidation(ResultSet rs)
         updateTuple(rs); 
         warn = rs.getWarnings();
         assertNotNull("Expected warning when updating deleted tuple", warn);
-        assertEquals("Unexpected SQL State on warning", "01001", 
+        assertEquals("Unexpected SQL State on warning", 
+                     CURSOR_OPERATION_CONFLICT, 
                      warn.getSQLState());
         con.commit();
         
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURBaseTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURBaseTest.java
index a3788009..407699ec 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURBaseTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURBaseTest.java
@@ -286,4 +286,6 @@ protected void assertFailOnUpdate(ResultSet rs)
     final static String RESULTSET_NOT_UPDATABLE_SQL_STATE = "XJ083";
     final static String LOCK_TIMEOUT_SQL_STATE = "40XL1";
     final static String LOCK_TIMEOUT_EXPRESSION_SQL_STATE = "38000";
+    final static String INVALID_CURSOR_STATE_NO_CURRENT_ROW = "24000";
+    final static String CURSOR_OPERATION_CONFLICT = "01001";
 }
