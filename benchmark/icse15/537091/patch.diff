diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
index c10cb03c..22093169 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainerHandle.java
@@ -74,14 +74,14 @@ This class implements Lockable (defined to be ContainerHandle) and is
 		Container identifier
 		<BR> MT - Immutable
 	*/
-	protected /*final*/ ContainerKey		identity;
+	private /*final*/ ContainerKey		identity;
 
 	/**
 		Is this ContainerHandle active.
 
 		<BR> MT - Mutable : scoped
 	*/
-	protected boolean				active;	
+	private boolean				        active;	
 
 	/**
 		The actual container we are accessing. Only valid when active is true.
@@ -104,7 +104,7 @@ This class implements Lockable (defined to be ContainerHandle) and is
 
 		<BR> MT - Mutable : scoped
 	*/
-	protected	RawTransaction		xact;
+	private	RawTransaction		        xact;
 
 	/**
 		are we going to update?
@@ -113,11 +113,15 @@ This class implements Lockable (defined to be ContainerHandle) and is
 	*/
 	private	boolean		forUpdate;
 
-	protected int mode;	// mode the container was opened in
+
+    /**
+     * mode the conainter was opened in.
+     **/
+	private int                         mode;
 
 
-	protected PageActions		actionsSet;
-	protected AllocationActions allocActionsSet;
+	private PageActions		            actionsSet;
+	private AllocationActions           allocActionsSet;
 
 
 	/*
@@ -388,17 +392,21 @@ public final boolean isReadOnly()
 		@see ContainerHandle#close
 	*/
 
-	public void close() 
+	public synchronized void close() 
     {
+        // Close may be called by multiple threads concurrently, for
+        // instance it can be called automatically after an abort and
+        // explicitly by a client.  Depending on timing of machine
+        // these calls may happen concurrently.  Thus close needs to
+        // be synchronized.  
+        //
+        // Another example is that we may hand out an indirect reference
+        // to clients outside of JDBC through an OverFlowInputStream.  
+        // Derby code cannot control when clients may close those 
+        // streams with respect to implicit closes by abort.
 
         if (xact == null) 
         {
-            // Probably be closed explicitly by a client, after closing 
-            // automatically after an abort.
-            
-            if (SanityManager.DEBUG)
-                SanityManager.ASSERT(!active);
-
             return;
         }
 
@@ -420,7 +428,6 @@ public void close()
         xact.deleteObserver(this);
 
 		xact = null;
-		
 	}
 
 	/* cost estimation */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java
index a0872905..780b71ee 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/D_BaseContainerHandle.java
@@ -63,11 +63,11 @@ public String diag()
             ")";
         */
 
-        long container_id = ch.identity.getContainerId();
+        long container_id = ch.getId().getContainerId();
 
         long conglom_id   = 
             D_DiagnosticUtil.diag_containerid_to_conglomid(
-                    ch.xact.getDataFactory(),
+                    ch.getTransaction().getDataFactory(),
                     container_id);
 
         if (conglom_id !=  Long.MIN_VALUE)
