diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
index acea2eb1..73cfeea0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
@@ -106,7 +106,7 @@ public static synchronized void dumpToStorage(UUID version) throws IOException
         {
             if (Arrays.equals(column.name(), DEFINITION_SCHEMA_COLUMN_NAME))
                 continue;
-            org.apache.cassandra.config.avro.KsDef ks = SerDeUtils.<org.apache.cassandra.config.avro.KsDef>deserialize(schema, column.value());
+            org.apache.cassandra.config.avro.KsDef ks = SerDeUtils.deserialize(schema, column.value(), new org.apache.cassandra.config.avro.KsDef());
             keyspaces.add(KSMetaData.inflate(ks));
         }
         return keyspaces;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
index 5fcbeb9b..fe29e9fe 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -279,7 +279,7 @@ static void cleanupDeadFiles(boolean wait)
     public static Migration deserialize(byte[] bytes) throws IOException
     {
         // deserialize
-        org.apache.cassandra.db.migration.avro.Migration mi = SerDeUtils.deserializeWithSchema(bytes);
+        org.apache.cassandra.db.migration.avro.Migration mi = SerDeUtils.deserializeWithSchema(bytes, new org.apache.cassandra.db.migration.avro.Migration());
 
         // create an instance of the migration subclass
         Migration migration;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/SerDeUtils.java b/cassandra/trunk/src/java/org/apache/cassandra/io/SerDeUtils.java
index ae9b5252..fe725224 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/SerDeUtils.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/SerDeUtils.java
@@ -48,14 +48,17 @@
 
 	/**
      * Deserializes a single object based on the given Schema.
-     * @param schema writer's schema
+     * @param writer writer's schema
      * @param bytes Array to deserialize from
+     * @param ob An empty object to deserialize into (must not be null).
      * @throws IOException
      */
-    public static <T extends SpecificRecord> T deserialize(Schema schema, byte[] bytes) throws IOException
+    public static <T extends SpecificRecord> T deserialize(Schema writer, byte[] bytes, T ob) throws IOException
     {
         BinaryDecoder dec = DIRECT_DECODERS.createBinaryDecoder(bytes, null);
-        return new SpecificDatumReader<T>(schema).read(null, dec);
+        SpecificDatumReader<T> reader = new SpecificDatumReader<T>(writer);
+        reader.setExpected(ob.getSchema());
+        return reader.read(ob, dec);
     }
 
 	/**
@@ -74,14 +77,17 @@
 
 	/**
      * Deserializes a single object as stored along with its Schema by serialize(T). NB: See warnings on serialize(T).
+     * @param ob An empty object to deserialize into (must not be null).
      * @param bytes Array to deserialize from
      * @throws IOException
      */
-    public static <T extends SpecificRecord> T deserializeWithSchema(byte[] bytes) throws IOException
+    public static <T extends SpecificRecord> T deserializeWithSchema(byte[] bytes, T ob) throws IOException
     {
         BinaryDecoder dec = DIRECT_DECODERS.createBinaryDecoder(bytes, null);
-        Schema schema = Schema.parse(dec.readString(new Utf8()).toString());
-        return new SpecificDatumReader<T>(schema).read(null, dec);
+        Schema writer = Schema.parse(dec.readString(new Utf8()).toString());
+        SpecificDatumReader<T> reader = new SpecificDatumReader<T>(writer);
+        reader.setExpected(ob.getSchema());
+        return new SpecificDatumReader<T>(writer).read(ob, dec);
     }
 
 	/**
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
index b572eb23..71e0336f 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
@@ -22,6 +22,7 @@
 
 import org.apache.avro.specific.SpecificRecord;
 
+import org.apache.cassandra.config.avro.KsDef;
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.db.migration.AddKeyspace;
 import org.apache.cassandra.locator.RackUnawareStrategy;
@@ -35,9 +36,11 @@
 
 public class DatabaseDescriptorTest
 {
-    protected <D extends SpecificRecord> D serDe(D record) throws IOException
+    protected <D extends SpecificRecord> D serDe(D record, D newInstance) throws IOException
     {
-        D actual = SerDeUtils.<D>deserialize(record.getSchema(), SerDeUtils.serialize(record));
+        D actual = SerDeUtils.deserialize(record.getSchema(),
+                                              SerDeUtils.serialize(record),
+                                              newInstance);
         assert actual.equals(record) : actual + " != " + record;
         return actual;
     }
@@ -56,7 +59,7 @@ public void testCFMetaDataSerialization() throws IOException, ConfigurationExcep
         {
             for (CFMetaData cfm : DatabaseDescriptor.getTableMetaData(table).values())
             {
-                CFMetaData cfmDupe = CFMetaData.inflate(serDe(cfm.deflate()));
+                CFMetaData cfmDupe = CFMetaData.inflate(serDe(cfm.deflate(), new org.apache.cassandra.config.avro.CfDef()));
                 assert cfmDupe != null;
                 assert cfmDupe.equals(cfm);
             }
@@ -68,7 +71,7 @@ public void testKSMetaDataSerialization() throws IOException, ConfigurationExcep
     {
         for (KSMetaData ksm : DatabaseDescriptor.tables.values())
         {
-            KSMetaData ksmDupe = KSMetaData.inflate(serDe(ksm.deflate()));
+            KSMetaData ksmDupe = KSMetaData.inflate(serDe(ksm.deflate(), new org.apache.cassandra.config.avro.KsDef()));
             assert ksmDupe != null;
             assert ksmDupe.equals(ksm);
         }
