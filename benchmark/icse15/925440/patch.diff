diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java
index e4868ff0..506a3e92 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/concurrent/StageManager.java
@@ -21,15 +21,14 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.cassandra.net.MessagingService;
+import org.apache.cassandra.config.DatabaseDescriptor;
 
-import static org.apache.cassandra.config.DatabaseDescriptor.getConcurrentWriters;
 import static org.apache.cassandra.config.DatabaseDescriptor.getConcurrentReaders;
+import static org.apache.cassandra.config.DatabaseDescriptor.getConcurrentWriters;
 
 
 /**
@@ -53,7 +52,7 @@
     {
         stages.put(MUTATION_STAGE, multiThreadedStage(MUTATION_STAGE, getConcurrentWriters()));
         stages.put(READ_STAGE, multiThreadedStage(READ_STAGE, getConcurrentReaders()));
-        stages.put(RESPONSE_STAGE, multiThreadedStage("RESPONSE-STAGE", Runtime.getRuntime().availableProcessors()));
+        stages.put(RESPONSE_STAGE, multiThreadedStage("RESPONSE-STAGE", Math.max(2, Runtime.getRuntime().availableProcessors())));
         // the rest are all single-threaded
         stages.put(STREAM_STAGE, new JMXEnabledThreadPoolExecutor(STREAM_STAGE));
         stages.put(GOSSIP_STAGE, new JMXEnabledThreadPoolExecutor("GMFD"));
@@ -63,11 +62,15 @@
 
     private static ThreadPoolExecutor multiThreadedStage(String name, int numThreads)
     {
+        // avoid running afoul of requirement in DebuggableThreadPoolExecutor that single-threaded executors
+        // must have unbounded queues
+        assert numThreads > 1 : "multi-threaded stages must have at least 2 threads";
+
         return new JMXEnabledThreadPoolExecutor(numThreads,
                                                 numThreads,
                                                 Integer.MAX_VALUE,
                                                 TimeUnit.SECONDS,
-                                                new LinkedBlockingQueue<Runnable>(),
+                                                new LinkedBlockingQueue<Runnable>(DatabaseDescriptor.getStageQueueSize()),
                                                 new NamedThreadFactory(name));
     }
 
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 86374422..4caffa45 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -152,6 +152,8 @@ static String getStorageConfigPath()
         throw new RuntimeException("Cannot locate " + STORAGE_CONF_FILE + " via storage-config system property or classpath lookup.");
     }
 
+    private static int stageQueueSize_ = 4096;
+
     static
     {
         try
@@ -290,11 +292,20 @@ else if (diskAccessMode == DiskAccessMode.mmap_index_only)
             {
                 concurrentReaders = Integer.parseInt(rawReaders);
             }
+            if (concurrentReaders < 2)
+            {
+                throw new ConfigurationException("ConcurrentReads must be at least 2");
+            }
+
             String rawWriters = xmlUtils.getNodeValue("/Storage/ConcurrentWrites");
             if (rawWriters != null)
             {
                 concurrentWriters = Integer.parseInt(rawWriters);
             }
+            if (concurrentWriters < 2)
+            {
+                throw new ConfigurationException("ConcurrentWrites must be at least 2");
+            }
 
             String rawFlushData = xmlUtils.getNodeValue("/Storage/FlushDataBufferSizeInMB");
             if (rawFlushData != null)
@@ -1092,6 +1103,11 @@ public static AbstractType getSubComparator(String tableName, String cfName)
         return getCFMetaData(tableName, cfName).subcolumnComparator;
     }
 
+    public static int getStageQueueSize()
+    {
+        return stageQueueSize_;
+    }
+
     /**
      * @return The absolute number of keys that should be cached per table.
      */
