diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java
index 82c73593..c67b9c22 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java
@@ -82,9 +82,8 @@ public ARFFVectorIterable(Reader reader, ARFFModel model) throws IOException {
       line = line.trim();
       String lower = line.toLowerCase(Locale.ENGLISH);
       Integer labelNumInt = labelNumber;
-      if (lower.startsWith(ARFFModel.ARFF_COMMENT)) {
-        continue;
-      } else if (lower.startsWith(ARFFModel.RELATION)) {
+      if (!lower.startsWith(ARFFModel.ARFF_COMMENT)) {
+        if (lower.startsWith(ARFFModel.RELATION)) {
         model.setRelation(ARFFType.removeQuotes(line.substring(ARFFModel.RELATION.length())));
       } else if (lower.startsWith(ARFFModel.ATTRIBUTE)) {
         String label;
@@ -137,6 +136,7 @@ public ARFFVectorIterable(Reader reader, ARFFModel model) throws IOException {
         break; //skip it
       }
     }
+    }
 
   }
 
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java
index 7cd3bb0d..daf227fc 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java
@@ -20,7 +20,9 @@
 import com.google.common.collect.Maps;
 
 import java.text.DateFormat;
+import java.text.NumberFormat;
 import java.text.ParseException;
+import java.text.ParsePosition;
 import java.text.SimpleDateFormat;
 import java.util.Collections;
 import java.util.Date;
@@ -143,8 +145,18 @@ protected double processString(String data) {
   }
   
   protected static double processNumeric(String data) {
+    if (isNumeric(data)) {
     return Double.parseDouble(data);
   }
+    return 0.0;
+  }
+
+  public static boolean isNumeric(String str) {
+    NumberFormat formatter = NumberFormat.getInstance();
+    ParsePosition parsePosition = new ParsePosition(0);
+    formatter.parse(str, parsePosition);
+    return str.length() == parsePosition.getIndex();
+  }
   
   protected double processDate(String data, int idx) {
     DateFormat format = dateMap.get(idx);
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java
index fb407487..ea7adf4d 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModelTest.java
@@ -39,4 +39,23 @@ public void processNominal() {
     Map<String, Integer> windyValues = nominalMap.get(windy);
     assertEquals(77, windyValues.get(breezy).intValue());
   }
+
+  @Test
+  public void processBadNumeric() {
+    ARFFModel model = new MapBackedARFFModel();
+    model.addLabel("b1shkt70694difsmmmdv0ikmoh", 77);
+    model.addType(77, ARFFType.REAL);
+    assertTrue(0.0 == model.getValue("b1shkt70694difsmmmdv0ikmoh", 77));
+  }
+
+  @Test
+  public void processGoodNumeric() {
+    ARFFModel model = new MapBackedARFFModel();
+    model.addLabel("1234", 77);
+    model.addType(77, ARFFType.INTEGER);
+    assertTrue(1234 == model.getValue("1234", 77));
+    model.addLabel("131.34", 78);
+    model.addType(78, ARFFType.REAL);
+    assertTrue(131.34 == model.getValue("131.34", 78));
+  }
 }
