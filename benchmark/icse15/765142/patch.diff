diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java
index c2c50c13..65edab85 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java
@@ -76,6 +76,10 @@ public Object call() {
     this.refreshHelper.addDependency(recommender);
   }
 
+  private synchronized Rescorer<Item> getCurrentRescorer() {
+    return currentRescorer;
+  }
+
   private synchronized void setCurrentRescorer(Rescorer<Item> rescorer) {
     if (rescorer == null) {
       if (currentRescorer != null) {
@@ -190,9 +194,10 @@ private RecommendationRetriever(Recommender recommender) {
     public Recommendations get(Object key) throws TasteException {
       log.debug("Retrieving new recommendations for user ID '{}'", key);
       int howMany = maxHowMany.get();
-      List<RecommendedItem> recommendations = currentRescorer == null ?
+      Rescorer<Item> rescorer = getCurrentRescorer();
+      List<RecommendedItem> recommendations = rescorer == null ?
           recommender.recommend(key, howMany) :
-          recommender.recommend(key, howMany, currentRescorer);
+          recommender.recommend(key, howMany, rescorer);
       return new Recommendations(Collections.unmodifiableList(recommendations));
     }
   }
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/JsonModelDistributionAdapter.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/JsonModelDistributionAdapter.java
index 2cd2401c..1103ba47 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/JsonModelDistributionAdapter.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/JsonModelDistributionAdapter.java
@@ -50,6 +50,7 @@ public JsonElement serialize(ModelDistribution<?> src, Type typeOfSrc,
       cl = ccl.loadClass(json.getAsString());
     } catch (ClassNotFoundException e) {
       log.warn("Error while loading class", e);
+      return null;
     }
     try {
       return (ModelDistribution<?>) cl.newInstance();
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesFileFormatterTest.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesFileFormatterTest.java
index 1abfbcb4..952abe42 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesFileFormatterTest.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/bayes/BayesFileFormatterTest.java
@@ -75,7 +75,10 @@ public void test() throws IOException {
     for (File file : files) {
       //should only be one line in the file, and it should be label label
       BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), charset));
-      String line = reader.readLine().trim();
+      String line = reader.readLine();
+      if (line != null) {
+        line = line.trim();
+      }
       String label = "animal" + '\t' + file.getName();
       assertEquals(line + ":::: is not equal to " + label + "::::", line, label);
       reader.close();
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/dirichlet/TestMapReduce.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/dirichlet/TestMapReduce.java
index 7efa8033..470083b2 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/dirichlet/TestMapReduce.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/dirichlet/TestMapReduce.java
@@ -357,7 +357,7 @@ public void testDriverMRIterations() throws Exception {
     printResults(clusters, 0);
   }
 
-  private void printResults(List<List<DirichletCluster<Vector>>> clusters,
+  private static void printResults(List<List<DirichletCluster<Vector>>> clusters,
       int significant) {
     int row = 0;
     for (List<DirichletCluster<Vector>> r : clusters) {
@@ -365,8 +365,8 @@ private void printResults(List<List<DirichletCluster<Vector>>> clusters,
       for (int k = 0; k < r.size(); k++) {
         Model<Vector> model = r.get(k).model;
         if (model.count() > significant) {
-          int total = new Double(r.get(k).totalCount).intValue();
-          System.out.print("m" + k + "(" + total + ")" + model.toString()
+          int total = (int) r.get(k).totalCount;
+          System.out.print("m" + k + '(' + total + ')' + model.toString()
               + ", ");
         }
       }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java
index 2a36e554..603c34aa 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java
@@ -127,8 +127,8 @@ private static void printResults(
       for (int k = 0; k < r.size(); k++) {
         Model<Vector> model = r.get(k).model;
         if (model.count() > significant) {
-          int total = new Double(r.get(k).totalCount).intValue();
-          System.out.print("m" + k + "(" + total + ")" + model.toString()
+          int total = (int) r.get(k).totalCount;
+          System.out.print("m" + k + '(' + total + ')' + model.toString()
               + ", ");
         }
       }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java
index d627456b..dabd74b4 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java
@@ -50,6 +50,7 @@ public void map(LongWritable key, Text values,
       point.set(index++, d);
     MeanShiftCanopy canopy = new MeanShiftCanopy(point);
     output.collect(null, new Text(canopy.toString()));
+    // TODO srowen: FindBugs says line above will definitely cause an NPE due to null param?
   }
 
 }
diff --git a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/FileInfosDatasetTest.java b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/FileInfosDatasetTest.java
index 9f93ab83..eebcfd18 100644
--- a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/FileInfosDatasetTest.java
+++ b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/FileInfosDatasetTest.java
@@ -53,6 +53,7 @@ public void testRanges() throws IOException {
         }
       }
     }
+    in.close();
   }
 
   private void assertInRange(double value, double min, double max) {
