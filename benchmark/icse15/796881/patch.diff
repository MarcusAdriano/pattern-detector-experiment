diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 8d333ea4..72afb036 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -100,6 +100,11 @@ protected ColumnFamily readColumnFamily(ReadCommand command) throws InvalidReque
 	}
 
     public List<Column> thriftifyColumns(Collection<IColumn> columns)
+    {
+        return thriftifyColumns(columns, false);
+    }
+    
+    public List<Column> thriftifyColumns(Collection<IColumn> columns, boolean reverseOrder)
     {
         if (columns == null || columns.isEmpty())
         {
@@ -117,6 +122,8 @@ protected ColumnFamily readColumnFamily(ReadCommand command) throws InvalidReque
             thriftColumns.add(thrift_column);
         }
 
+        if (reverseOrder)
+            Collections.reverse(thriftColumns);
         return thriftColumns;
     }
 
@@ -124,6 +131,11 @@ protected ColumnFamily readColumnFamily(ReadCommand command) throws InvalidReque
     private List<Column> getSlice(ReadCommand command) throws InvalidRequestException
     {
         ColumnFamily cfamily = readColumnFamily(command);
+        boolean reverseOrder = false;
+        
+        if (command instanceof SliceFromReadCommand)
+            reverseOrder = !((SliceFromReadCommand)command).isAscending;
+
         if (cfamily == null || cfamily.getColumnsMap().size() == 0)
         {
             return EMPTY_COLUMNS;
@@ -131,9 +143,9 @@ protected ColumnFamily readColumnFamily(ReadCommand command) throws InvalidReque
         if (cfamily.isSuper())
         {
             IColumn column = cfamily.getColumnsMap().values().iterator().next();
-            return thriftifyColumns(column.getSubColumns());
+            return thriftifyColumns(column.getSubColumns(), reverseOrder);
         }
-        return thriftifyColumns(cfamily.getSortedColumns());
+        return thriftifyColumns(cfamily.getSortedColumns(), reverseOrder);
     }
 
     public List<Column> get_slice_by_names(String table, String key, ColumnParent column_parent, List<byte[]> column_names)
@@ -305,6 +317,11 @@ private void doInsert(int block, RowMutation rm) throws UnavailableException
     }
 
     private List<SuperColumn> thriftifySuperColumns(Collection<IColumn> columns)
+    {
+        return thriftifySuperColumns(columns, false);
+    }
+    
+    private List<SuperColumn> thriftifySuperColumns(Collection<IColumn> columns, boolean reverseOrder)
     {
         if (columns == null || columns.isEmpty())
         {
@@ -322,6 +339,9 @@ private void doInsert(int block, RowMutation rm) throws UnavailableException
             thriftSuperColumns.add(new SuperColumn(column.name(), subcolumns));
         }
 
+        if (reverseOrder)
+            Collections.reverse(thriftSuperColumns);
+
         return thriftSuperColumns;
     }
 
@@ -340,7 +360,7 @@ private void doInsert(int block, RowMutation rm) throws UnavailableException
             return EMPTY_SUPERCOLUMNS;
         }
         Collection<IColumn> columns = cfamily.getSortedColumns();
-        return thriftifySuperColumns(columns);
+        return thriftifySuperColumns(columns, !is_ascending);
     }
 
 
