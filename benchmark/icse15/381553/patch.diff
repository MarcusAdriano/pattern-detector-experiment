diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java
index 5e9486e5..20f8745f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java
@@ -200,33 +200,19 @@ public void addParms(Vector parameterList) throws StandardException
 
 			qt = (QueryTreeNode) parameterList.elementAt(index);
 
-
-
 			/*
-			** If the parameter is a SQL ValueNode, there are two
-			** possibilities.  Either it is a JavaValueNode with
-			** a JavaToSQLValueNode on top of it, or it is a plain
-			** SQL ValueNode.  In the former case, just get rid of
-			** the JavaToSQLValueNode.  In the latter case, put a
-			** SQLToJavaValueNode on top of it.  In general, we
-			** want to avoid converting the same value back and forth
-			** between the SQL and Java domains.
+			** Since we need the parameter to be in Java domain format, put a
+			** SQLToJavaValueNode on top of the parameter node if it is a 
+			** SQLValueNode. But if the parameter is already in Java domain 
+			** format, then we don't need to do anything.
 			*/
 			if ( ! (qt instanceof JavaValueNode))
 			{
-				if (qt instanceof JavaToSQLValueNode)
-				{
-					qt = ((JavaToSQLValueNode) qt).getJavaValueNode();
-				}
-				else
-				{
-					qt = (SQLToJavaValueNode) getNodeFactory().
-							getNode(
+				qt = (SQLToJavaValueNode) getNodeFactory().getNode(
 								C_NodeTypes.SQL_TO_JAVA_VALUE_NODE,
 								qt,
 								getContextManager());
 				}
-			}
 
 			methodParms[index] = (JavaValueNode) qt;
 		}
@@ -545,9 +531,7 @@ public	int generateParameters(ExpressionClassBuilder acb,
 				// In any other case the expression type must be assignable
 				// to the parameter type.
 				if (classInspector.primitiveType(parameterType)) {
-
 					mb.cast(parameterType);
-
 				} else {
 
 					// for a prodcedure
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
index 27578672..72ab3ae4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
@@ -240,6 +240,9 @@ public JavaValueNode bindExpression(
 		// return type, then we need to push a CAST node.
 		if (routineInfo != null)
 		{
+			if (methodParms != null) 
+				optimizeDomainValueConversion();
+			
 			TypeDescriptor returnType = routineInfo.getReturnType();
 			if (returnType != null)
 			{
@@ -285,6 +288,47 @@ public JavaValueNode bindExpression(
 		return this;
 	}
 
+	/**
+	 * If this SQL function has parameters which are SQLToJavaValueNode over
+	 * JavaToSQLValueNode and the java value node underneath is a SQL function
+	 * defined with CALLED ON NULL INPUT, then we can get rid of the wrapper
+	 * nodes over the java value node for such parameters. This is because
+	 * SQL functions defined with CALLED ON NULL INPUT need access to only
+	 * java domain values.
+	 * This can't be done for parameters which are wrappers over SQL function
+	 * defined with RETURN NULL ON NULL INPUT because such functions need
+	 * access to both sql domain value and java domain value. - Derby479
+	 */
+	private void optimizeDomainValueConversion() throws StandardException {
+		int		count = methodParms.length;
+		for (int parm = 0; parm < count; parm++)
+		{
+			if (methodParms[parm] instanceof SQLToJavaValueNode &&
+				((SQLToJavaValueNode)methodParms[parm]).getSQLValueNode() instanceof
+				JavaToSQLValueNode)
+			{
+				//If we are here, then it means that the parameter is
+				//SQLToJavaValueNode on top of JavaToSQLValueNode
+				JavaValueNode paramIsJavaValueNode =
+					((JavaToSQLValueNode)((SQLToJavaValueNode)methodParms[parm]).getSQLValueNode()).getJavaValueNode();
+				if (paramIsJavaValueNode instanceof StaticMethodCallNode)
+				{
+					//If we are here, then it means that the parameter has
+					//a MethodCallNode underneath it.
+					StaticMethodCallNode paramIsMethodCallNode = (StaticMethodCallNode)paramIsJavaValueNode;
+					//If the MethodCallNode parameter is defined as
+					//CALLED ON NULL INPUT, then we can remove the wrappers
+					//for the param and just set the parameter to the
+					//java value node.
+					if (paramIsMethodCallNode.routineInfo != null &&
+							paramIsMethodCallNode.routineInfo.calledOnNullInput())
+						methodParms[parm] =
+							((JavaToSQLValueNode)((SQLToJavaValueNode)methodParms[parm]).getSQLValueNode()).getJavaValueNode();
+				}
+			}
+		}
+	}
+
 	/**
 	 * Resolve a routine. Obtain a list of routines from the data dictionary
 	 * of the correct type (functions or procedures) and name.
