diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java
index dfdd0732..8f3f4968 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -21,6 +21,7 @@
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -215,7 +216,7 @@ private CFMetaData(String tableName,
                                             ? DEFAULT_MEMTABLE_OPERATIONS_IN_MILLIONS
                                             : memtableOperationsInMillions;
         this.cfId = cfId;
-        this.column_metadata = Collections.unmodifiableMap(column_metadata);
+        this.column_metadata = new HashMap<ByteBuffer, ColumnDefinition>(column_metadata);
     }
     
     /** adds this cfm to the map. */
@@ -662,6 +663,8 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         // update the ones staying
         for (org.apache.cassandra.avro.ColumnDef def : cf_def.column_metadata)
         {
+            if (!column_metadata.containsKey(def.name))
+                continue;
             column_metadata.get(def.name).setIndexType(def.index_type == null ? null : org.apache.cassandra.thrift.IndexType.valueOf(def.index_type.name()));
             column_metadata.get(def.name).setIndexName(def.index_name == null ? null : def.index_name.toString());
         }
@@ -734,7 +737,7 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         def.key_cache_size = cfm.keyCacheSize;
         def.read_repair_chance = cfm.readRepairChance;
         def.gc_grace_seconds = cfm.gcGraceSeconds;
-        def.default_validation_class = cfm.defaultValidator.getClass().getName();
+        def.default_validation_class = cfm.defaultValidator == null ? null : cfm.defaultValidator.getClass().getName();
         def.min_compaction_threshold = cfm.minCompactionThreshold;
         def.max_compaction_threshold = cfm.maxCompactionThreshold;
         def.row_cache_save_period_in_seconds = cfm.rowCacheSavePeriodInSeconds;
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
index e7708335..925f6196 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -26,7 +26,9 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.UUID;
@@ -56,6 +58,7 @@
 import org.apache.cassandra.locator.SimpleStrategy;
 import org.apache.cassandra.thrift.CfDef;
 import org.apache.cassandra.thrift.ColumnDef;
+import org.apache.cassandra.thrift.IndexType;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.UUIDGen;
 import org.junit.Test;
@@ -73,6 +76,63 @@ public void ensureStaticCFMIdsAreLessThan1000()
         assert CFMetaData.SchemaCf.cfId == 3;    
     }
     
+    @Test
+    public void testCFMetaDataApply() throws ConfigurationException
+    {
+        Map<ByteBuffer, ColumnDefinition> indexes = new HashMap<ByteBuffer, ColumnDefinition>();
+        for (int i = 0; i < 5; i++) 
+        {
+            ByteBuffer name = ByteBuffer.wrap(new byte[] { (byte)i });
+            indexes.put(name, new ColumnDefinition(name, null, IndexType.KEYS, Integer.toString(i)));
+        }
+        CFMetaData cfm = new CFMetaData("Keyspace1",
+                "TestApplyCFM_CF",
+                ColumnFamilyType.Standard,
+                BytesType.instance,
+                null,
+                "No comment",
+                1.0,
+                1.0,
+                0.5,
+                100000,
+                null,
+                500,
+                500,
+                500,
+                500,
+                500,
+                500,
+                500.0,
+                indexes);
+        
+        // we'll be adding this one later. make sure it's not already there.
+        assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 5 })) == null;
+        org.apache.cassandra.avro.CfDef cfDef = CFMetaData.convertToAvro(cfm);
+        
+        // add one.
+        org.apache.cassandra.avro.ColumnDef addIndexDef = new org.apache.cassandra.avro.ColumnDef();
+        addIndexDef.index_name = "5";
+        addIndexDef.index_type = org.apache.cassandra.avro.IndexType.KEYS;
+        addIndexDef.name = ByteBuffer.wrap(new byte[] { 5 });
+        addIndexDef.validation_class = BytesType.class.getName();
+        cfDef.column_metadata.add(addIndexDef);
+        
+        // remove one.
+        org.apache.cassandra.avro.ColumnDef removeIndexDef = new org.apache.cassandra.avro.ColumnDef();
+        removeIndexDef.index_name = "0";
+        removeIndexDef.index_type = org.apache.cassandra.avro.IndexType.KEYS;
+        removeIndexDef.name = ByteBuffer.wrap(new byte[] { 0 });
+        removeIndexDef.validation_class = BytesType.class.getName();
+        assert cfDef.column_metadata.remove(removeIndexDef);
+        
+        cfm.apply(cfDef);
+        
+        for (int i = 1; i < indexes.size(); i++)
+            assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 1 })) != null;
+        assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 0 })) == null;
+        assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 5 })) != null;
+    }
+    
     @Test
     public void testInvalidNames() throws IOException
     {
