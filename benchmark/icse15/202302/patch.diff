diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
index 3702c357..33bab8ec 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
@@ -587,6 +587,43 @@ protected void compressPages(
         return;
     }
 
+    /**
+     * Undo the compress space operation.
+     * <p>
+     * Undo of this operation doesn't really "undo" the operation, it just
+     * makes sure the data structures are ok after the undo.  We are 
+     * guaranteed at the point of the transaction doing the 
+     * Undo of the compress space operation fixes up the bit maps to
+     * only point at pages within the new_highest_page range.
+     * <p>
+     * Prior to logging the compress space operation all pages greater 
+     * than 
+     * There are only 2 possibilities at this point:
+     * 1) the truncate of pages greater than new_highest_page happened before
+     *    the abort took place.  W
+     * 2) 
+     *
+	 * @return The identifier to be used to open the conglomerate later.
+     *
+     * @param param1 param1 does this.
+     * @param param2 param2 does this.
+     *
+	 * @exception  StandardException  Standard exception policy.
+     **/
+    protected void undoCompressPages(
+    int        new_highest_page,
+    int        num_pages_truncated)
+    {
+        if (new_highest_page >= 0)
+        {
+            freePages.shrink(new_highest_page + 1);
+            unFilledPages.shrink(new_highest_page + 1);
+            preAllocLength = extentLength = (new_highest_page + 1);
+        }
+
+        return;
+    }
+
 	protected long getExtentEnd()
 	{
 		return extentEnd;
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
index 08a4bc47..2e0eb8bc 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
@@ -916,6 +916,21 @@ protected void compressSpace(
         extent.compressPages(new_highest_page, num_pages_truncated);
 	}
 
+    /**
+     * Handle undo of compress space operation.
+     **/
+	protected void undoCompressSpace(
+    LogInstant  instant,
+    int         new_highest_page,
+    int         num_pages_truncated)
+		throws StandardException
+    {
+		logAction(instant);
+
+        extent.undoCompressPages(new_highest_page, num_pages_truncated);
+
+    }
+
 	public String toString()
 	{
 		if (SanityManager.DEBUG)
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
index 6e58346a..8bb964ff 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseContainer.java
@@ -221,7 +221,7 @@ public void compressContainer(BaseContainerHandle handle)
 		}
 		finally
 		{
-            ntt.commitNoSync(Transaction.RELEASE_LOCKS);
+            ntt.commit();
 
 			ntt.close();
 		}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java
index 4285bd63..0fb04801 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java
@@ -182,7 +182,7 @@ public void undoMe(
 				"undo Page is not an allocPage");
 		}
 
-		((AllocPage)undoPage).compressSpace(
+		((AllocPage)undoPage).undoCompressSpace(
              CLRInstant, newHighestPage, num_pages_truncated);
 	}
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
index 8cc06c48..3121e703 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java
@@ -1351,6 +1351,12 @@ protected void compressContainer(
 			return;
         }
 
+        // make sure we don't execute redo recovery on any page
+        // which is getting truncated.  At this point we have an exclusive
+        // table lock on the table, so after checkpoint no page change
+        // can happen between checkpoint log record and compress of space.
+        dataFactory.getRawStoreFactory().checkpoint();
+
 		try
 		{
             synchronized(allocCache)
@@ -1389,6 +1395,7 @@ protected void compressContainer(
                 lastUnfilledPage    = ContainerHandle.INVALID_PAGE_NUMBER;
                 lastAllocatedPage   = ContainerHandle.INVALID_PAGE_NUMBER;
 
+
                 alloc_page.compress(ntt, this);
             }
 
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java
index c8c699a5..f6d3e8aa 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java
@@ -146,7 +146,19 @@ public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in
 		undoOp.undoMe(xact, this.page, instant, in);
 
 		if (SanityManager.DEBUG) {
-			SanityManager.ASSERT(oldversion < this.page.getPageVersion());
+
+            if (oldversion >= this.page.getPageVersion())
+            {
+                SanityManager.THROWASSERT(
+                    "oldversion = " + oldversion +
+                    ";page version = "  + this.page.getPageVersion() +
+                    "page = " + page + 
+                    "; my class name is " + getClass().getName() +
+                    " undoOp is " + undoOp.getClass().getName() );
+            }
+			SanityManager.ASSERT(
+                oldversion < this.page.getPageVersion());
+
 			if (instant != null &&
 				! instant.equals(this.page.getLastLogInstant()))
 				SanityManager.THROWASSERT(
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java
index e878d3ad..05f3910e 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BaseTest.java
@@ -106,6 +106,22 @@ protected void logError(String   str)
         System.out.println("ERROR: " + str);
     }
 
+    /**
+     * Simple wrapper to execute a sql string.
+     **/
+    public void executeQuery(
+    Connection  conn,
+    String      stmt_str,
+    boolean     commit_query)
+        throws SQLException
+    {
+        Statement stmt = conn.createStatement();
+        stmt.executeUpdate(stmt_str);
+        stmt.close();
+        if (commit_query)
+            conn.commit();
+    }
+
     /**
      * Call consistency checker on the table.
      * <p>
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java
index 80607c23..fbf65e56 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineCompressTest.java
@@ -48,7 +48,7 @@ public OnlineCompressTest()
      * Utility test function to call the system procedure.
      *
      **/
-    private void callCompress(
+    protected void callCompress(
     Connection  conn,
     String      schemaName,
     String      tableName,
@@ -173,11 +173,12 @@ private void callCompress(
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
-    private void createAndLoadTable(
+    protected void createAndLoadTable(
     Connection  conn,
     boolean     create_table,
     String      tblname,
-    int         num_rows)
+    int         num_rows,
+    int         start_value)
         throws SQLException
     {
         if (create_table)
@@ -209,12 +210,12 @@ private void createAndLoadTable(
         int row_count = 0;
         try
         {
-            for (;row_count < num_rows; row_count++)
+            for (int i = start_value; row_count < num_rows; row_count++, i++)
             {
-                insert_stmt.setInt(1, row_count);               // keycol
-                insert_stmt.setInt(2, row_count * 10);          // indcol1
-                insert_stmt.setInt(3, row_count * 100);         // indcol2
-                insert_stmt.setInt(4, -row_count);              // indcol3
+                insert_stmt.setInt(1, i);               // keycol
+                insert_stmt.setInt(2, i * 10);          // indcol1
+                insert_stmt.setInt(3, i * 100);         // indcol2
+                insert_stmt.setInt(4, -i);              // indcol3
                 insert_stmt.setString(5, data1_str);            // data1_data
                 insert_stmt.setString(6, data2_str);            // data2_data
 
@@ -384,19 +385,6 @@ private void createAndLoadLongTable(
         conn.commit();
     }
 
-    private void executeQuery(
-    Connection  conn,
-    String      stmt_str,
-    boolean     commit_query)
-        throws SQLException
-    {
-        Statement stmt = conn.createStatement();
-        stmt.executeUpdate(stmt_str);
-        stmt.close();
-        if (commit_query)
-            conn.commit();
-    }
-
     private void log_wrong_count(
     String  error_msg,
     String  table_name,
@@ -442,7 +430,7 @@ private void deleteAllRows(
         if (long_table)
             createAndLoadLongTable(conn, create_table, table_name, num_rows);
         else
-            createAndLoadTable(conn, create_table, table_name, num_rows);
+            createAndLoadTable(conn, create_table, table_name, num_rows, 0);
 
         if (verbose)
             testProgress("Calling compress.");
@@ -525,7 +513,7 @@ private void simpleDeleteAllRows(
         if (long_table)
             createAndLoadLongTable(conn, create_table, table_name, num_rows);
         else
-            createAndLoadTable(conn, create_table, table_name, num_rows);
+            createAndLoadTable(conn, create_table, table_name, num_rows, 0);
 
         if (verbose)
             testProgress("Calling compress.");
@@ -601,7 +589,7 @@ private void checkPurgePhase(
         if (long_table)
             createAndLoadLongTable(conn, create_table, table_name, num_rows);
         else
-            createAndLoadTable(conn, create_table, table_name, num_rows);
+            createAndLoadTable(conn, create_table, table_name, num_rows, 0);
 
         // dump_table(conn, schemaName, table_name, false);
 
@@ -728,7 +716,7 @@ private void checkPurgePhase(
         if (long_table)
             createAndLoadLongTable(conn, create_table, table_name, num_rows);
         else
-            createAndLoadTable(conn, create_table, table_name, num_rows);
+            createAndLoadTable(conn, create_table, table_name, num_rows, 0);
         conn.commit();
 
         // delete all rows, and NO commit.
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec1.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec1.java
index e69de29b..59935f28 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec1.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec1.java
@@ -0,0 +1,91 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
+
+   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import org.apache.derby.iapi.db.OnlineCompress;
+
+import org.apache.derby.iapi.services.sanity.SanityManager;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.derby.tools.ij;
+
+
+public class oc_rec1 extends OnlineCompressTest
+{
+
+    public oc_rec1()
+    {
+    }
+
+    /**
+     * setup for restart recovery test.
+     * <p>
+     * Do setup to test restart recovery of online compress.  Real work
+     * is done in next test oc_rec2 which will run restart recovery on
+     * the work done in this test.
+     *
+     **/
+    private void test1(
+    Connection  conn,
+    String      test_name,
+    String      table_name)
+        throws SQLException
+    {
+        beginTest(conn, test_name);
+        createAndLoadTable(conn, true, table_name, 5000, 0);
+        executeQuery(conn, "delete from " + table_name, true);
+        callCompress(conn, "APP", table_name, true, true, true, true);
+        endTest(conn, test_name);
+    }
+
+    public void testList(Connection conn)
+        throws SQLException
+    {
+        test1(conn, "test1", "TEST1");
+    }
+
+    public static void main(String[] argv) 
+        throws Throwable
+    {
+        oc_rec1 test = new oc_rec1();
+
+   		ij.getPropertyArg(argv); 
+        Connection conn = ij.startJBMS();
+        conn.setAutoCommit(false);
+
+        try
+        {
+            test.testList(conn);
+        }
+        catch (SQLException sqle)
+        {
+			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
+                System.out, sqle);
+			sqle.printStackTrace(System.out);
+		}
+    }
+}
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec2.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec2.java
index e69de29b..fc8fa165 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec2.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec2.java
@@ -0,0 +1,107 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
+
+   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import org.apache.derby.iapi.db.OnlineCompress;
+
+import org.apache.derby.iapi.services.sanity.SanityManager;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.derby.tools.ij;
+
+
+public class oc_rec2 extends OnlineCompressTest
+{
+
+    public oc_rec2()
+    {
+    }
+
+    /**
+     * setup for restart recovery test.
+     * <p>
+     * Do setup to test restart recovery of online compress.  Real work
+     * is done in next test oc_rec2 which will run restart recovery on
+     * the work done in this test.
+     *
+     **/
+    private void test1(
+    Connection  conn,
+    String      test_name,
+    String      table_name)
+        throws SQLException
+    {
+        beginTest(conn, test_name);
+        if (!checkConsistency(conn, "APP", table_name))
+        {
+            logError("conistency check failed.");
+        }
+        // make sure we can add data to the existing table after redo
+        // recovery.
+        createAndLoadTable(conn, false, table_name, 6000, 0);
+        if (!checkConsistency(conn, "APP", table_name))
+        {
+            logError("conistency check failed.");
+        }
+
+        // setup to test redo recovery on: 
+        //     create table, delete rows, compress, add rows, commit
+        String table_name_2 =  table_name + "_2";
+        createAndLoadTable(conn, true, table_name_2, 2000, 0);
+        executeQuery(conn, "delete from " + table_name, true);
+        callCompress(conn, "APP", table_name, true, true, true, true);
+
+        endTest(conn, test_name);
+    }
+
+    public void testList(Connection conn)
+        throws SQLException
+    {
+        test1(conn, "test1", "TEST1");
+    }
+
+    public static void main(String[] argv) 
+        throws Throwable
+    {
+        oc_rec2 test = new oc_rec2();
+
+   		ij.getPropertyArg(argv); 
+        Connection conn = ij.startJBMS();
+        conn.setAutoCommit(false);
+
+        try
+        {
+            test.testList(conn);
+        }
+        catch (SQLException sqle)
+        {
+			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
+                System.out, sqle);
+			sqle.printStackTrace(System.out);
+		}
+    }
+}
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec3.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec3.java
index e69de29b..c1d07d4d 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec3.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec3.java
@@ -0,0 +1,109 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
+
+   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import org.apache.derby.iapi.db.OnlineCompress;
+
+import org.apache.derby.iapi.services.sanity.SanityManager;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.derby.tools.ij;
+
+
+public class oc_rec3 extends OnlineCompressTest
+{
+
+    public oc_rec3()
+    {
+    }
+
+    /**
+     * setup for restart recovery test.
+     * <p>
+     * Do setup to test restart recovery of online compress.  Real work
+     * is done in next test oc_rec3 which will run restart recovery on
+     * the work done in this test.
+     *
+     **/
+    private void test1(
+    Connection  conn,
+    String      test_name,
+    String      table_name)
+        throws SQLException
+    {
+        beginTest(conn, test_name);
+
+        String table_name_2 =  table_name + "_2";
+        if (!checkConsistency(conn, "APP", table_name_2))
+        {
+            logError("conistency check failed.");
+        }
+
+        // make sure we can add data to the existing table after redo
+        // recovery.
+        createAndLoadTable(conn, false, table_name, 2000, 0);
+        if (!checkConsistency(conn, "APP", table_name))
+        {
+            logError("conistency check failed.");
+        }
+
+        // setup to test redo recovery on: 
+        //     add more rows, delete rows, compress, add more, no commit
+        createAndLoadTable(conn, false, table_name_2, 4000, 2000);
+        executeQuery(conn, "delete from " + table_name_2, true);
+        callCompress(conn, "APP", table_name_2, true, true, true, false);
+
+        endTest(conn, test_name);
+    }
+
+    public void testList(Connection conn)
+        throws SQLException
+    {
+        test1(conn, "test1", "TEST1");
+    }
+
+    public static void main(String[] argv) 
+        throws Throwable
+    {
+        oc_rec3 test = new oc_rec3();
+
+   		ij.getPropertyArg(argv); 
+        Connection conn = ij.startJBMS();
+        conn.setAutoCommit(false);
+
+        try
+        {
+            test.testList(conn);
+        }
+        catch (SQLException sqle)
+        {
+			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
+                System.out, sqle);
+			sqle.printStackTrace(System.out);
+		}
+    }
+}
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec4.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec4.java
index e69de29b..9e1a269c 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec4.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/oc_rec4.java
@@ -0,0 +1,104 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
+
+   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import org.apache.derby.iapi.db.OnlineCompress;
+
+import org.apache.derby.iapi.services.sanity.SanityManager;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.derby.tools.ij;
+
+
+public class oc_rec4 extends OnlineCompressTest
+{
+
+    public oc_rec4()
+    {
+    }
+
+    /**
+     * setup for restart recovery test.
+     * <p>
+     * Do setup to test restart recovery of online compress.  Real work
+     * is done in next test oc_rec4 which will run restart recovery on
+     * the work done in this test.
+     *
+     **/
+    private void test1(
+    Connection  conn,
+    String      test_name,
+    String      table_name)
+        throws SQLException
+    {
+        beginTest(conn, test_name);
+
+        // oc_rec3 left the table  with no rows, but compress command
+        // did not commit.
+        String table_name_2 =  table_name + "_2";
+        if (!checkConsistency(conn, "APP", table_name_2))
+        {
+            logError("conistency check failed.");
+        }
+
+        // make sure we can add data to the existing table after redo
+        // recovery.
+        createAndLoadTable(conn, false, table_name_2, 6000, 0);
+        if (!checkConsistency(conn, "APP", table_name_2))
+        {
+            logError("conistency check failed.");
+        }
+        endTest(conn, test_name);
+    }
+
+    public void testList(Connection conn)
+        throws SQLException
+    {
+        test1(conn, "test1", "TEST1");
+    }
+
+    public static void main(String[] argv) 
+        throws Throwable
+    {
+        oc_rec4 test = new oc_rec4();
+
+   		ij.getPropertyArg(argv); 
+        Connection conn = ij.startJBMS();
+        conn.setAutoCommit(false);
+
+        try
+        {
+            test.testList(conn);
+        }
+        catch (SQLException sqle)
+        {
+			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
+                System.out, sqle);
+			sqle.printStackTrace(System.out);
+		}
+    }
+}
