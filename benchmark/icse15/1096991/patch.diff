diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
index a26f6bbd..2dc9c4fc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
@@ -1466,14 +1466,25 @@ public static void SYSCS_IMPORT_TABLE(
                                replace, false);
 		}catch(SQLException se)
 		{
-			//issue a rollback on any errors
-			conn.rollback();
-			throw  se;
+			rollBackAndThrowSQLException(conn, se);
 		}
 		//import finished successfull, commit it.
 		conn.commit();
 	}
 
+    /**
+     * issue a rollback when SQLException se occurs. If SQLException ouccurs when rollback,
+     * the new SQLException will be added into the chain of se. 
+     */
+    private static void rollBackAndThrowSQLException(Connection conn,
+            SQLException se) throws SQLException {
+        try {
+            conn.rollback();
+        } catch (SQLException e) {
+            se.setNextException(e);
+        }
+        throw se;
+    }
 
     /**
      * Import  data from a given file to a table. Data for large object 
@@ -1507,9 +1518,7 @@ public static void SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(
                                );
         }catch(SQLException se)
         {
-            //issue a rollback on any errors
-            conn.rollback();
-            throw  se;
+            rollBackAndThrowSQLException(conn, se);
         }
         //import finished successfull, commit it.
         conn.commit();
@@ -1550,9 +1559,7 @@ public static void SYSCS_IMPORT_DATA(
 								  codeset, replace, false);
 		}catch(SQLException se)
 		{
-			//issue a rollback on any errors
-			conn.rollback();
-			throw  se;
+		    rollBackAndThrowSQLException(conn, se);
 		}
 
 		//import finished successfull, commit it.
@@ -1598,9 +1605,7 @@ public static void SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(
                               codeset, replace, true);
         }catch(SQLException se)
         {
-            //issue a rollback on any errors
-            conn.rollback();
-            throw  se;
+            rollBackAndThrowSQLException(conn, se);
         }
 
         //import finished successfull, commit it.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java
index f200e3f5..1e9608be 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java
@@ -104,6 +104,10 @@ public static SQLException wrapStandardException(String message, String messageI
 		return csqle;	
 	}
 	public boolean isSimpleWrapper() {
+		if (getNextException() != null) {
+			return false;
+		}
+		
 		return simpleWrapper;
 	}
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java
index e69de29b..e3a556f2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java
@@ -0,0 +1,162 @@
+/*
+ *
+ * Derby - Class RollBackWrappingWhenFailOnImportTest
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, 
+ * software distributed under the License is distributed on an 
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific 
+ * language governing permissions and limitations under the License.
+ */
+package org.apache.derbyTesting.functionTests.tests.tools;
+
+import java.sql.CallableStatement;
+
+
+import java.sql.Connection;
+
+import java.sql.SQLException;
+import java.util.Properties;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derby.impl.jdbc.EmbedConnection;
+import org.apache.derby.impl.jdbc.EmbedConnection30;
+import org.apache.derby.jdbc.Driver30;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.SupportFilesSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * This test case comes from DERBY-4443. It's for show changes related to 
+ * wrap rollback in exception handlers in try-catch.
+ * In this test case, a MockInternalDriver is used to create a MockConnectionFailWhenRollBack
+ * which will fail when rollback() is called.
+ * 
+ */
+public class RollBackWrappingWhenFailOnImportTest extends BaseJDBCTestCase {
+    class MockInternalDriver extends Driver30 {
+
+        public class MockConnectionFailWhenRollBack extends EmbedConnection30 {
+
+            public MockConnectionFailWhenRollBack(Connection connection) {
+                super((EmbedConnection)connection);
+            }
+
+            public void rollback() throws SQLException {
+                throw new SQLException("error in roll back", "XJ058");
+            }
+        }
+
+        public Connection connect(String url, Properties info) {
+            Connection conn = null;
+            try {
+                conn = super.connect(url, info);
+            } catch (Exception e) {
+                //this exception is ignored for mocking
+            }
+            return new MockConnectionFailWhenRollBack(conn);
+        }
+    }
+
+    private String nonexistentFileName = "test/test.dat";
+
+    public RollBackWrappingWhenFailOnImportTest(String name) {
+        super(name);        
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite("RollBackWrappingWhenFailOnImportTest");
+        
+        if (!JDBC.vmSupportsJDBC3()) {
+            return suite;
+        }       
+        
+        Test test = new CleanDatabaseTestSetup(
+                TestConfiguration.embeddedSuite(
+                        RollBackWrappingWhenFailOnImportTest.class));
+                        
+        suite.addTest(test);
+        
+        return suite;
+    }
+
+    protected void setUp() throws Exception {
+        openDefaultConnection();
+        
+        MockInternalDriver dvr = new MockInternalDriver();
+        dvr.boot(false, null);
+        
+        SupportFilesSetup.deleteFile(nonexistentFileName);
+    }
+    
+    protected void tearDown() throws Exception {        
+        try {           
+            getTestConfiguration().shutdownEngine();            
+        } catch (Exception e) {
+            //Ignore exception for shut down mock driver            
+        }        
+        
+        super.tearDown();
+    }
+
+    public void testRollBackWhenFailOnImportTable() throws SQLException { 
+        String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE (" +
+                "null, 'IMP_EMP', '"  + nonexistentFileName + "test/test.dat" + 
+                "' , null, null, null, 0) ";
+        realTestRollBackWhenImportOnNonexistentFile(callSentence);
+    }
+    
+    public void testRollBackWhenFailOnImportTableLobsFromEXTFile() throws SQLException {
+        String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(" +
+                "null, 'IET1' , '" + nonexistentFileName + "', null, null, null, 0)";
+        realTestRollBackWhenImportOnNonexistentFile(callSentence);
+    }
+    
+    public void testRollBackWhenFailOnImportData() throws SQLException {
+        String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_DATA(null, 'IMP_EMP', " +
+                "null, null, '" + nonexistentFileName +  "', null, null, null, 1) ";
+        realTestRollBackWhenImportOnNonexistentFile(callSentence);        
+    }  
+    
+    public void testRollBackWhenFailOnImportDataLobsFromExtFile() throws SQLException {
+        String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(" +
+                "null, 'IET1', null, null, '" + nonexistentFileName +
+                "', null, null, null, 1)";
+        
+        realTestRollBackWhenImportOnNonexistentFile(callSentence);
+    }
+    
+    /**
+     * Call passed importSentence and process the error.
+     * @param importSentence a call sentence to to import data from a nonexistent file.
+     */
+    private void realTestRollBackWhenImportOnNonexistentFile(
+            String importSentence) throws SQLException {
+      //import a non-existing file will certainly fail
+        CallableStatement cSt = prepareCall(importSentence);
+        
+        try {
+            cSt.executeUpdate();
+            fail("a SQLException should be thrown " +
+                    "as we import data from a nonexistent file");
+        } catch (SQLException e) {            
+            assertSQLState("XIE0M", e);
+            assertSQLState("XJ058", e.getNextException());            
+        } finally {
+            cSt.close();
+        }
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
index 7b73ce52..edb76b9c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
@@ -57,6 +57,7 @@ public static Test suite() {
         suite.addTest(SysinfoLocaleTest.suite());
         suite.addTest(IjSecurityManagerTest.suite());
         suite.addTest(IjConnNameTest.suite());
+        suite.addTest(RollBackWrappingWhenFailOnImportTest.suite());
         
         // SysinfoAPITest currently fails when run against jars, so is
         // disabled. Only the first jar file on the classpath properly
