diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index abf212d4..8c3cded5 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -53,6 +53,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import java.sql.SQLWarning;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Properties;
@@ -78,13 +79,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
 import org.apache.derby.iapi.tools.i18n.LocalizedResource;
-import org.apache.derby.iapi.util.CheapDateFormatter;
 import org.apache.derby.iapi.util.StringUtil;
 import org.apache.derby.impl.jdbc.EmbedSQLException;
 import org.apache.derby.impl.jdbc.Util;
 import org.apache.derby.iapi.jdbc.AuthenticationService;
 import org.apache.derby.iapi.reference.MessageId;
-import org.apache.derby.iapi.security.SecurityUtil;
 import org.apache.derby.mbeans.VersionMBean;
 import org.apache.derby.mbeans.drda.NetworkServerMBean;
 
@@ -604,7 +603,7 @@ public void consoleMessage(String msg, boolean printTimeStamp)
 		{
 			synchronized(lw) {
                 if (printTimeStamp) {
-                    lw.println(getFormattedTimestamp() + " : " + msg);
+                    lw.println(new Date() + " : " + msg);
                 } else {
                     lw.println(msg);                    
                 }
@@ -616,7 +615,7 @@ public void consoleMessage(String msg, boolean printTimeStamp)
 			synchronized(lw)
 			{
 				if (printTimeStamp) {
-                    Monitor.logMessage(getFormattedTimestamp() + " : " + msg);
+                    Monitor.logMessage(new Date() + " : " + msg);
                 } else {
                     Monitor.logMessage(msg);
                 }
@@ -4061,23 +4060,4 @@ public Object run() throws UnknownHostException,IOException
 		}
 		return myPVH;
 	}
-
-	/**
-	 * This method returns a timestamp to be used in the messages. 
-	 * CheapDateFormatter class, which uses GMT, is used to format timestamps. 
-	 * This is to keep the formatting consistent with Derby boot message since
-	 * network server messages and the boot message get written to derby.log.   
-	 * 
-	 * @return current timestamp formatted in GMT
-	 */
-	private String getFormattedTimestamp(){
-		long currentTime = System.currentTimeMillis();
-		return CheapDateFormatter.formatDate(currentTime);
-	}
 }
-
-
-
-
-
-
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/CheapDateFormatter.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/CheapDateFormatter.java
index 6dba766d..e69de29b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/CheapDateFormatter.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/CheapDateFormatter.java
@@ -1,103 +0,0 @@
-/*
-
-   Derby - Class org.apache.derby.iapi.util.CheapDateFormatter
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to you under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derby.iapi.util;
-
-import java.util.Calendar;
-import java.util.Locale;
-import java.util.TimeZone;
-
-/**
- * This class contains static methods for formatting dates into Strings.
- * It can be used where standard Date formatting is judged to be too
- * expensive.
- */
-public class CheapDateFormatter {
-    private static final TimeZone GMT = TimeZone.getTimeZone("GMT");
-
-	/**
-	 * This method formats the current date into a String. The input is
-	 * a long representing the number of milliseconds since Jan. 1, 1970.
-	 * The output is a String in the form yyyy-mm-dd hh:mm:ss.ddd GMT.
-	 *
-	 * The purpose of this class is to format date strings without paying
-	 * the price of instantiating ResourceBundles and Locales, which the
-	 * java.util.Date class does whenever you format a date string.
-	 * As a result, the output of this class is not localized, it does
-	 * not take the local time zone into account, and it is possible that
-	 * it will not be as accurate as the standard Date class. It is OK
-	 * to use this method when, for example, formatting timestamps to
-	 * write to db2j.LOG, but not for manipulating dates in language
-	 * processing.
-	 *
-	 * @param time	The current time in milliseconds since Jan. 1, 1970
-	 *
-	 * @return The date formatted as yyyy-mm-dd hh:mm:ss.ddd GMT.
-	 */
-	public static String formatDate(long time) {
-        // Get a GMT calendar with a well-known locale to help us calculate
-        // the components of the date.
-        Calendar cal = Calendar.getInstance(GMT, Locale.US);
-        cal.setTimeInMillis(time);
-
-        int year = cal.get(Calendar.YEAR);
-        int month = cal.get(Calendar.MONTH) + 1; // convert 0-based to 1-based
-        int days = cal.get(Calendar.DAY_OF_MONTH);
-        int hours = cal.get(Calendar.HOUR_OF_DAY);
-        int minutes = cal.get(Calendar.MINUTE);
-        int seconds = cal.get(Calendar.SECOND);
-        int millis = cal.get(Calendar.MILLISECOND);
-
-		return year + "-" +
-				twoDigits(month) + "-" +
-				twoDigits(days) + " " +
-				twoDigits(hours) + ":" +
-				twoDigits(minutes) + ":" +
-				twoDigits(seconds) + "." +
-				threeDigits(millis) + " GMT";
-	}
-
-	private static String twoDigits(int val) {
-		String retval;
-
-		if (val < 10) {
-			retval = "0" + val;
-		} else {
-			retval = Integer.toString(val);
-		}
-
-		return retval;
-	}
-
-	private static String threeDigits(int val) {
-		String retval;
-
-		if (val < 10) {
-			retval = "00" + val;
-		} else if (val < 100) {
-			retval = "0" + val;
-		} else {
-			retval = Integer.toString(val);
-		}
-
-		return retval;
-	}
-}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/Timeout.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/Timeout.java
index 09cbe465..901a6b89 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/Timeout.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/locks/Timeout.java
@@ -21,8 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.services.locks;
 
-import org.apache.derby.impl.services.locks.TableNameInfo;
-
 import org.apache.derby.iapi.services.context.ContextService;
 
 import org.apache.derby.iapi.reference.SQLState;
@@ -36,8 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.store.access.TransactionController;
 
-import org.apache.derby.iapi.util.CheapDateFormatter;
-
+import java.util.Date;
 import java.util.Enumeration;
 import java.util.Hashtable;
 
@@ -176,7 +173,7 @@ private String buildLockTableString() throws StandardException
         }
 
         sb.append( newline );
-        sb.append(CheapDateFormatter.formatDate(currentTime));
+        sb.append(new Date(currentTime));
         sb.append( newline );
         for( i = 0; i < column.length; i++ )
         {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index 8f0bec1d..ff5fa960 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -58,22 +58,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.io.FormatableInstanceGetter;
 import org.apache.derby.iapi.error.ExceptionSeverity;
 
-
 import  org.apache.derby.io.StorageFactory;
 
-
 import org.apache.derby.iapi.services.info.JVMInfo;
 import org.apache.derby.iapi.services.i18n.BundleFinder;
 import org.apache.derby.iapi.services.i18n.MessageService;
-import org.apache.derby.iapi.services.jmx.ManagementService;
-
-import org.apache.derby.impl.services.monitor.StorageFactoryService;
-
-import org.apache.derby.iapi.util.CheapDateFormatter;
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.StringWriter;
 import java.io.BufferedInputStream;
 import java.io.PrintWriter;
 import java.io.BufferedReader;
@@ -82,10 +74,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.PrintStream;
 
 import java.util.Collections;
-import java.util.Hashtable;
 import java.util.HashMap;
 import java.util.Iterator;
-import java.util.Map;
 import java.util.Properties;
 import java.util.Enumeration;
 import java.util.StringTokenizer;
@@ -94,14 +84,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.ResourceBundle;
 import java.util.NoSuchElementException;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 import java.lang.reflect.InvocationTargetException;
 
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.security.PrivilegedExceptionAction;
-import java.security.PrivilegedActionException;
 
 import java.net.URL;
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/stream/BasicGetLogHeader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/stream/BasicGetLogHeader.java
index 84e40483..5846323c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/stream/BasicGetLogHeader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/stream/BasicGetLogHeader.java
@@ -21,8 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.services.stream;
 
+import java.util.Date;
 import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
-import org.apache.derby.iapi.util.CheapDateFormatter;
 
 /**
  * Get a header to prepend to a line of output. *
@@ -74,12 +74,10 @@ public String getHeader()
 		}
 
 		if (doTimeStamp) {
-			long currentTime = System.currentTimeMillis();
-
-			header.append(CheapDateFormatter.formatDate(currentTime));
+			header.append(new Date());
 			header.append(' ');
-
 		}
+
 		if (doThreadId) {
 			header.append(Thread.currentThread().toString());
 			header.append(' ');
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index e5c57707..a169ea05 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -24,15 +24,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.reference.MessageId;
 
-import org.apache.derby.impl.store.raw.data.AllocationActions;
-import org.apache.derby.impl.store.raw.data.BaseContainerHandle;
-import org.apache.derby.impl.store.raw.data.BasePage;
-import org.apache.derby.impl.store.raw.data.DirectActions;
-import org.apache.derby.impl.store.raw.data.LoggableActions;
-import org.apache.derby.impl.store.raw.data.PageActions;
-import org.apache.derby.impl.store.raw.data.RecordId;
-import org.apache.derby.impl.store.raw.data.ReclaimSpace;
-
 import org.apache.derby.iapi.services.info.ProductVersionHolder;
 
 import org.apache.derby.iapi.services.cache.CacheFactory;
@@ -81,20 +72,18 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.util.ByteArray;
 import org.apache.derby.iapi.services.io.FileUtil;
-import org.apache.derby.iapi.util.CheapDateFormatter;
 import org.apache.derby.iapi.util.ReuseFactory;
 import org.apache.derby.iapi.services.property.PropertyUtil;
 
+import java.util.Date;
 import java.util.Properties;
 import java.util.Hashtable;
 import java.util.Enumeration;
 
 import java.io.File;
 import java.io.IOException;
-import java.io.UnsupportedEncodingException;
 
 import java.net.URL;
-import java.net.URLDecoder;
 
 import java.security.AccessController;
 import java.security.CodeSource;
@@ -363,13 +352,12 @@ public void	boot(boolean create, Properties startParams)
 		}
 
 		logMsg(LINE);
-		long bootTime = System.currentTimeMillis();
         String readOnlyMsg = (isReadOnly()) 
             ? MessageService.getTextMessage(MessageId.STORE_BOOT_READONLY_MSG)
             : "";
         boolean logBootTrace = Boolean.valueOf(startParams.getProperty(Property.LOG_BOOT_TRACE,
                PropertyUtil.getSystemProperty(Property.LOG_BOOT_TRACE))).booleanValue();
-		logMsg(CheapDateFormatter.formatDate(bootTime) +
+        logMsg(new Date() +
 			   MessageService.getTextMessage(MessageId.STORE_BOOT_MSG,
                                              jbmsVersion,
                                              identifier,
@@ -479,9 +467,8 @@ public void	stop()
 				rawStoreDaemon.stop();
 		}
 
-		long shutdownTime = System.currentTimeMillis();
 		boolean logBootTrace = PropertyUtil.getSystemBoolean(Property.LOG_BOOT_TRACE);
-		logMsg("\n" + CheapDateFormatter.formatDate(shutdownTime) +
+		logMsg("\n" + new Date() +
                 MessageService.getTextMessage(
                     MessageId.STORE_SHUTDOWN_MSG,
                     getIdentifier(),
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/CheapDateFormatterTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/CheapDateFormatterTest.java
index 297469dd..3f24d583 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/CheapDateFormatterTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/CheapDateFormatterTest.java
@@ -1,95 +1 @@
   + native
-/*
-
-   Derby - Class org.apache.derbyTesting.unitTests.junit.CheapDateFormatterTest
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to you under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derbyTesting.unitTests.junit;
-
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import junit.framework.Test;
-import junit.framework.TestSuite;
-import org.apache.derby.iapi.util.CheapDateFormatter;
-import org.apache.derbyTesting.junit.BaseTestCase;
-
-/**
- * Unit tests for the CheapDateFormatter class.
- */
-public class CheapDateFormatterTest extends BaseTestCase {
-    public CheapDateFormatterTest(String name) {
-        super(name);
-    }
-
-    public static Test suite() {
-        return new TestSuite(CheapDateFormatterTest.class);
-    }
-
-    /**
-     * Tests for the {@code formatDate()} method.
-     */
-    public void testFormatDate() throws ParseException {
-        assertDateString("1970-01-01 00:00:00.000 GMT"); // Epoch
-
-        // DERBY-4752: Times the first day in a leap year used to be
-        // formatted with month 13 in the previous year. Verify that this
-        // works correctly for the first day of the leap year 2016.
-        assertDateString("2015-12-31 23:59:59.999 GMT");
-        assertDateString("2016-01-01 00:00:00.000 GMT");
-        assertDateString("2016-01-01 00:00:00.001 GMT");
-        assertDateString("2016-01-01 08:31:23.456 GMT");
-        assertDateString("2016-01-02 12:00:00.000 GMT");
-
-        // DERBY-4752: We used to get a one day skew each time we passed a
-        // year divisible by four that was not a leap year (like 2100, 2200,
-        // 2300, 2500, ...).
-        assertDateString("2100-05-17 14:10:44.701 GMT");
-        assertDateString("2927-06-07 00:00:00.000 GMT");
-        assertDateString("9999-12-31 23:59:59.999 GMT");
-
-        // DERBY-4752: Years divisible by 100, but not by 400, are not leap
-        // years. Still, formatDate() used to return February 29 for the
-        // following dates:
-        assertDateString("2100-03-01 12:00:00.000 GMT");
-        assertDateString("2200-03-02 12:00:00.000 GMT");
-        assertDateString("2300-03-03 12:00:00.000 GMT");
-        assertDateString("2500-03-04 12:00:00.000 GMT");
-
-        // Year 8000 will be a leap year, unless a better calendar system
-        // has been devised by then.
-        assertDateString("8000-02-28 12:00:00.000 GMT");
-        assertDateString("8000-02-29 12:00:00.000 GMT");
-        assertDateString("8000-01-03 12:00:00.000 GMT");
-    }
-
-    /**
-     * Convert a date string to a long representing milliseconds since Epoch,
-     * feed that value to CheapDateFormatter.formatDate(), and verify that
-     * the exact same date string is returned.
-     *
-     * @param date a string representing the date to test
-     * @throws ParseException if the date string cannot be parsed
-     */
-    private void assertDateString(String date) throws ParseException {
-        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
-        long time = df.parse(date).getTime();
-        assertEquals(date, CheapDateFormatter.formatDate(time));
-    }
-}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
index 0d0ca966..51cf8018 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/_Suite.java
@@ -47,7 +47,6 @@ public static Test suite() throws SQLException {
         TestSuite suite = new TestSuite("JUnit unit tests");
 
         suite.addTest(ArrayInputStreamTest.suite());
-        suite.addTest(CheapDateFormatterTest.suite());
         suite.addTest(FormatableBitSetTest.suite());
         suite.addTest(SystemPrivilegesPermissionTest.suite());
         suite.addTest(UTF8UtilTest.suite());
