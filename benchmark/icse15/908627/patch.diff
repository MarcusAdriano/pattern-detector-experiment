diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
index 32ed31e3..9ca56da0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
+import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -103,6 +104,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public  static  final   int			NON_DETERMINISTIC_ILLEGAL		=	0x00001000;
 	public  static  final   int			SQL_IN_ROUTINES_ILLEGAL		=	0x00002000;
 
+	public  static  final   int			NEXT_VALUE_FOR_ILLEGAL		=	0x00004000;
+
 	/** Standard SQL is legal */
 	public	static	final	int			SQL_LEGAL					=	(INTERNAL_SQL_ILLEGAL);
 
@@ -116,7 +119,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 																		    SUBQUERY_ILLEGAL |
 																			USER_ILLEGAL |
 																			SCHEMA_ILLEGAL |
-																			INTERNAL_SQL_ILLEGAL
+																			INTERNAL_SQL_ILLEGAL |
+                                                                            NEXT_VALUE_FOR_ILLEGAL
 																		  );
 
 	public	static	final	int			DEFAULT_RESTRICTION		= (
@@ -129,9 +133,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public	static	final	int			GENERATION_CLAUSE_RESTRICTION		= (
 		                                                                    CHECK_CONSTRAINT |
 																			NON_DETERMINISTIC_ILLEGAL |
-                                                                            SQL_IN_ROUTINES_ILLEGAL
+                                                                            SQL_IN_ROUTINES_ILLEGAL |
+                                                                            NEXT_VALUE_FOR_ILLEGAL
 																			);
 
+	public	static	final	int			WHERE_CLAUSE_RESTRICTION		= NEXT_VALUE_FOR_ILLEGAL;
+	public	static	final	int			HAVING_CLAUSE_RESTRICTION		= NEXT_VALUE_FOR_ILLEGAL;
+	public	static	final	int			ON_CLAUSE_RESTRICTION		= NEXT_VALUE_FOR_ILLEGAL;
+	public	static	final	int			AGGREGATE_RESTRICTION		= NEXT_VALUE_FOR_ILLEGAL;
+	public	static	final	int			CONDITIONAL_RESTRICTION		= NEXT_VALUE_FOR_ILLEGAL;
+	public	static	final	int			GROUP_BY_RESTRICTION		= NEXT_VALUE_FOR_ILLEGAL;
 
 	/////////////////////////////////////////////////////////////////////////////////////
 	//
@@ -583,4 +594,15 @@ public StoreCostController getStoreCostController(long conglomerateNumber)
 	 * @return The list of required privileges.
 	 */
 	public List getRequiredPermissionsList();
+    
+	/**
+	 * Add a sequence descriptor to the list of referenced sequences.
+	 */
+	public void addReferencedSequence( SequenceDescriptor sd );
+
+	/**
+	 * Report whether the given sequence has been referenced already.
+	 */
+    public boolean isReferenced( SequenceDescriptor sd );
+
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
index 31ac9c49..5442cd74 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
@@ -278,10 +278,14 @@ public ValueNode bindExpression(
 		/* Add ourselves to the aggregateVector before we do anything else */
 		aggregateVector.addElement(this);
 
+        CompilerContext cc = getCompilerContext();
+        
         // operand being null means a count(*)
 		if (operand != null)
 		{
+            int previousReliability = orReliability( CompilerContext.AGGREGATE_RESTRICTION );
             bindOperand(fromList, subqueryList, aggregateVector);
+            cc.setReliability( previousReliability );
             
 			/*
 			** Make sure that we don't have an aggregate 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
index bb3b24f6..9d1ced7a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
+import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
 import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
@@ -162,6 +163,7 @@ public	void	resetContext()
 		returnParameterFlag = false;
 		initRequiredPriv();
 		defaultSchemaStack = null;
+        referencedSequences = null;
 	}
 
 	//
@@ -994,6 +996,23 @@ public List getRequiredPermissionsList()
 		return list;
 	} // end of getRequiredPermissionsList
 
+	public void addReferencedSequence( SequenceDescriptor sd )
+    {
+        if ( referencedSequences == null ) { referencedSequences = new HashMap(); }
+
+        referencedSequences.put( sd.getUUID(), sd );
+    }
+
+	/**
+	 * Report whether the given sequence has been referenced already.
+	 */
+    public boolean isReferenced( SequenceDescriptor sd )
+    {
+        if ( referencedSequences == null ) { return false; }
+
+        return referencedSequences.containsKey( sd.getUUID() );
+    }
+
 	/*
 	** Context state must be reset in restContext()
 	*/
@@ -1049,4 +1068,5 @@ public List getRequiredPermissionsList()
 	private HashMap requiredRoutinePrivileges;
 	private HashMap requiredUsagePrivileges;
 	private HashMap requiredRolePrivileges;
+    private HashMap referencedSequences;
 } // end of class CompilerContextImpl
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
index 2ec27ea5..6924e09e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
+import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 
 import org.apache.derby.iapi.types.TypeId;
@@ -379,6 +380,10 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 		Vector	aggregateVector) 
 			throws StandardException
 	{
+        CompilerContext cc = getCompilerContext();
+        
+        int previousReliability = orReliability( CompilerContext.CONDITIONAL_RESTRICTION );
+        
 		testCondition = testCondition.bindExpression(fromList,
 			subqueryList,
 			aggregateVector);
@@ -545,6 +550,8 @@ else if (elseTypeId.typePrecedence() != condTypeId.typePrecedence())
 			thenElseList.setElementAt(cast, 1);
 		}
 
+        cc.setReliability( previousReliability );
+        
 		return this;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByColumn.java
index f29bb6c4..2ec80a5f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByColumn.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
+import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.compile.Visitable;
 
@@ -103,9 +104,11 @@ public void bindExpression(
 				throws StandardException
 	{
 		/* Bind the ColumnReference to the FromList */
+        int previousReliability = orReliability( CompilerContext.GROUP_BY_RESTRICTION );
 		columnExpression = (ValueNode) columnExpression.bindExpression(fromList,
 							  subqueryList,
 							  aggregateVector);
+        getCompilerContext().setReliability( previousReliability );
 
 		// Verify that we can group on the column
 		if (columnExpression.isParameterNode()) 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
index 5e7e55eb..f06aac51 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
+import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.Optimizable;
 import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
 import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
@@ -806,6 +807,8 @@ private void deferredBindExpressions(FromList fromListParam)
 											getContextManager());
 		aggregateVector = new Vector();
 
+        CompilerContext cc = getCompilerContext();
+        
 		/* ON clause */
 		if (joinClause != null)
 		{
@@ -821,9 +824,11 @@ private void deferredBindExpressions(FromList fromListParam)
 			fromList.addElement((FromTable) leftResultSet);
 			fromList.addElement((FromTable) rightResultSet);
 
+            int previousReliability = orReliability( CompilerContext.ON_CLAUSE_RESTRICTION );
 			joinClause = joinClause.bindExpression(
 									  fromList, subqueryList,
 									  aggregateVector);
+            cc.setReliability( previousReliability );
 
 			// SQL 2003, section 7.7 SR 5
 			SelectNode.checkNoWindowFunctions(joinClause, "ON");
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
index 3bb5fa66..284a88ad 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 import org.apache.derby.iapi.services.compiler.LocalField;
+import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.services.classfile.VMOpcode;
 import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -66,7 +67,14 @@ public void init(Object sequenceName) throws StandardException {
     public ValueNode bindExpression(
             FromList fromList, SubqueryList subqueryList,
             Vector aggregateVector, boolean forQueryRewrite)
-            throws StandardException {
+            throws StandardException
+    {
+        CompilerContext cc = getCompilerContext();
+        
+        if ( (cc.getReliability() & CompilerContext.NEXT_VALUE_FOR_ILLEGAL) != 0 )
+        {
+            throw StandardException.newException( SQLState.LANG_NEXT_VALUE_FOR_ILLEGAL );
+        }
 
         // lookup sequence object in the data dictionary
         SchemaDescriptor sd = getSchemaDescriptor(sequenceName.getSchemaName());
@@ -80,6 +88,17 @@ public ValueNode bindExpression(
         // set the datatype of the value node
         this.setType(sequenceDescriptor.getDataType());
 
+        //
+        // The statement is only allowed to refer to a given sequence once.
+        // See DERBY-4513.
+        //
+        if ( cc.isReferenced( sequenceDescriptor ) )
+        {
+            throw StandardException.newException
+                ( SQLState.LANG_SEQUENCE_REFERENCED_TWICE, sequenceName.getFullTableName() );
+        }
+        cc.addReferencedSequence( sequenceDescriptor );
+
         ValueNode returnNode = this;
 
         // set up dependency on sequence and compile a check for USAGE
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index 838ba535..545d1b54 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -1768,6 +1768,20 @@ else if (getCompilerContext().getReliability() == CompilerContext.GENERATION_CLA
 		throw StandardException.newException(sqlState, fragmentType);
     }
 
+    /**
+     * OR in more reliability bits and return the old reliability value.
+     */
+    public int orReliability( int newBits )
+    {
+        CompilerContext cc = getCompilerContext();
+        
+        int previousReliability = cc.getReliability();
+
+        cc.setReliability( previousReliability | newBits );
+
+        return previousReliability;
+    }
+
 
     /**
      * Bind the parameters of OFFSET n ROWS and FETCH FIRST n ROWS ONLY, if
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index 75dcd3fb..2961716b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.conn.Authorizer;
 
+import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 
@@ -573,12 +574,18 @@ public void bindExpressions(FromList fromListParam)
 		whereSubquerys = (SubqueryList) getNodeFactory().getNode(
 												C_NodeTypes.SUBQUERY_LIST,
 												getContextManager());
+        
+        CompilerContext cc = getCompilerContext();
+        
 		if (whereClause != null)
 		{
-			getCompilerContext().pushCurrentPrivType( Authorizer.SELECT_PRIV);
+			cc.pushCurrentPrivType( Authorizer.SELECT_PRIV);
+
+            int previousReliability = orReliability( CompilerContext.WHERE_CLAUSE_RESTRICTION );
 			whereClause = whereClause.bindExpression(fromListParam, 
 										whereSubquerys,
 										whereAggregates);
+            cc.setReliability( previousReliability );
 			
 			/* RESOLVE - Temporarily disable aggregates in the HAVING clause.
 			** (We may remove them in the parser anyway.)
@@ -605,7 +612,10 @@ public void bindExpressions(FromList fromListParam)
 			checkNoWindowFunctions(whereClause, "WHERE");
 		}
 
-		if (havingClause != null) {
+		if (havingClause != null)
+        {
+            int previousReliability = orReliability( CompilerContext.HAVING_CLAUSE_RESTRICTION );
+
 			havingAggregates = new Vector();
 			havingSubquerys = (SubqueryList) getNodeFactory().getNode(
 					C_NodeTypes.SUBQUERY_LIST,
@@ -614,6 +624,8 @@ public void bindExpressions(FromList fromListParam)
 					fromListParam, havingSubquerys, havingAggregates);
 			havingClause = havingClause.checkIsBoolean();
 			checkNoWindowFunctions(havingClause, "HAVING");
+            
+            cc.setReliability( previousReliability );
 		}
 		
 		/* Restore fromList */
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 5a8e9159..22a36f5f 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -917,6 +917,8 @@ The message identifier (ie. the value that matches a field in this class)
     String LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE                          = "42XAE";
     String LANG_SEQ_MIN_EXCEEDS_MAX                                    = "42XAF";
     String LANG_SEQ_INVALID_START                                      = "42XAG";    
+    String LANG_NEXT_VALUE_FOR_ILLEGAL                                      = "42XAH";    
+    String LANG_SEQUENCE_REFERENCED_TWICE                                      = "42XAI";    
     String LANG_INVALID_USER_AGGREGATE_DEFINITION2                     = "42Y00";
 	String LANG_INVALID_CHECK_CONSTRAINT                               = "42Y01";
 	// String LANG_NO_ALTER_TABLE_COMPRESS_ON_TARGET_TABLE                = "42Y02";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequencePermsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequencePermsTest.java
index 2af84651..79d68a02 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequencePermsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequencePermsTest.java
@@ -286,19 +286,22 @@ public  void    test_002_basicRevoke()
              );
 
         // constraint
-        createStatement = "create table t_02( c int check ( ( next value for ruth.seq_02 ) < c ) )\n";
-        dropStatement = "drop table t_02\n";
-        badRevokeSQLState = OPERATION_FORBIDDEN;
-        verifyRevokePrivilege
-            (
-             ruthConnection,
-             frankConnection,
-             grantUsage,
-             revokeUsage,
-             createStatement,
-             dropStatement,
-             badRevokeSQLState
-             );
+        //
+        // no longer possible because syntax is illegal. see DERBY-4513
+        //
+        //        createStatement = "create table t_02( c int check ( ( next value for ruth.seq_02 ) < c ) )\n";
+        //        dropStatement = "drop table t_02\n";
+        //        badRevokeSQLState = OPERATION_FORBIDDEN;
+        //        verifyRevokePrivilege
+        //            (
+        //             ruthConnection,
+        //             frankConnection,
+        //             grantUsage,
+        //             revokeUsage,
+        //             createStatement,
+        //             dropStatement,
+        //             badRevokeSQLState
+        //             );
 
         
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
index cfdb7f7f..1c7df892 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java
@@ -297,5 +297,69 @@ public void test_10_NextValue() throws SQLException {
         s.execute("SELECT NEXT VALUE FOR mySeq1 from sys.systables");
     }
 
+    /**
+     * Verify that sequences can't be used in many contexts.
+     */
+    public void test_11_forbiddenContexts() throws Exception
+    {
+        Connection conn = openUserConnection(ALPHA);
+
+        goodStatement( conn, "create sequence seq_11_a\n" );
+        goodStatement( conn, "create sequence seq_11_b\n" );
+
+        String illegalSequence = SQLState.LANG_NEXT_VALUE_FOR_ILLEGAL;
+        
+        // sequences not allowed in WHERE clause
+        expectCompilationError( conn, illegalSequence, "select * from sys.systables where ( next value for seq_11_a ) > 100\n" );
+
+        // sequences not allowed in HAVING clause
+        expectCompilationError
+            ( conn, illegalSequence,
+              "select max( conglomeratenumber ), tableid\n" +
+              "from sys.sysconglomerates\n" +
+              "group by tableid\n" +
+              "having max( conglomeratenumber ) > ( next value for seq_11_a )\n"
+              );
+        
+        // sequences not allowed in ON clause
+        expectCompilationError
+            ( conn, illegalSequence, "select * from sys.sysconglomerates left join sys.sysschemas on conglomeratenumber = ( next value for seq_11_a )\n" );
+
+        // sequences not allowed in CHECK constraints
+        expectCompilationError
+            ( conn, illegalSequence, "create table t_11_1( a int check ( a > ( next value for seq_11_a ) ) )\n" );
+
+        // sequences not allowed in generated columns
+        expectCompilationError
+            ( conn, illegalSequence, "create table t_11_1( a int, b generated always as ( a + ( next value for seq_11_a ) ) )\n" );
+
+        // sequences not allowed in aggregates
+        expectCompilationError
+            ( conn, illegalSequence, "select max( next value for seq_11_a ) from sys.systables\n" );
+
+        // sequences not allowed in CASE expressions
+        expectCompilationError
+            ( conn, illegalSequence, "values case when ( next value for seq_11_a ) < 0 then 100 else 200 end\n" );
+
+        // sequences not allowed in DISTINCT clauses
+        expectCompilationError
+            ( conn, illegalSequence, "select distinct( next value for seq_11_a ) from sys.systables\n" );
+
+        // sequences not allowed in ORDER BY clauses
+        expectCompilationError
+            ( conn, illegalSequence, "select tableid, ( next value for seq_11_a ) a from sys.systables order by a\n" );
+
+        // sequences not allowed in GROUP BY expressions
+        expectCompilationError
+            ( conn, illegalSequence, "select max( tableid ), ( next value for seq_11_a ) from sys.systables group by ( next value for seq_11_a )\n" );
+
+        // given sequence only allowed once per statement. see DERBY-4513.
+        expectCompilationError
+            ( conn, SQLState.LANG_SEQUENCE_REFERENCED_TWICE, "select next value for seq_11_a, next value for seq_11_a from sys.systables where 1=2\n" );
+
+        // however, two different sequences can appear in a statement
+        goodStatement( conn, "select next value for seq_11_a, next value for seq_11_b from sys.systables where 1=2\n" );
+    }
+
 
 }
