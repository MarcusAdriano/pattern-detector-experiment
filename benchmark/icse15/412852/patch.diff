diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection.java
index 7eb36889..24a741e4 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/ClientPooledConnection.java
@@ -210,6 +210,19 @@ private void createLogicalConnection() throws SqlException {
             throw new SqlException(logWriter_,
                 new ClientMessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION));
         }
+        
+        // Roll back any pending transactions.  Otherwise we get an exception
+        // when we try to close the connection (even for re-use), with an error
+        // saying we can't close the connection with active transactions
+        // (this fixes DERBY-1004)
+        try {
+            if ( physicalConnection_.transactionInProgress() ) {
+                physicalConnection_.rollback();
+            }
+        } catch ( SQLException sqle ) {
+            throw new SqlException(sqle);
+        }
+        
         // Not the usual case, but if we have an existing logical connection, then we must close it by spec.
         // We close the logical connection without notifying the pool manager that this pooled connection is availabe for reuse.
         if (logicalConnection_ != null) {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
index a7621571..314eac10 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
@@ -714,12 +714,16 @@ synchronized public void close() throws SQLException {
 
     void checkForTransactionInProgress() throws SqlException {
         // The following precondition matches CLI semantics, see SQLDisconnect()
-        if (!autoCommit_ && inUnitOfWork_ && !allowCloseInUOW_()) {
+        if (transactionInProgress() && !allowCloseInUOW_()) {
             throw new SqlException(agent_.logWriter_,
                     new ClientMessageId (SQLState.CANNOT_CLOSE_ACTIVE_CONNECTION));                   
         }
     }
 
+    public boolean transactionInProgress() {
+        return !autoCommit_ && inUnitOfWork_;
+    }
+
     // This is a no-op if the connection is already closed.
     synchronized public void closeX() throws SQLException {
         if (!open_) {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
index 36d733d4..b5bf5cee 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
@@ -637,12 +637,6 @@ private static void morph(XADataSource xads) {
 
             xar.end(xid2, XAResource.TMSUSPEND);
 
-            // DERBY-1004
-            if (TestUtil.isDerbyNetClientFramework()) {
-                System.out.println("DERBY-1004 Call conn.close to avoid exception with client");
-                conn.close();
-            }
-
             /*
              -- get local connection again
              xa_getconnection;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index 63d8bdd9..d2218790 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -74,14 +74,6 @@
 	// These tests are exempted from other frameworks
 	private boolean testSimpleDataSource = TestUtil.isEmbeddedFramework();
 
-	// for a PooledConnection.getConnection() the connection gets closed.
-	// Embedded automatically rolls back any activity on the connection.
-	// Client requires the user to rollback and gives an SQLException  
-	// java.sql.Connection.close() requested while a transaction is in progress
-	// This has been filed as DERBY-1004 
-	private  boolean needRollbackBeforePCGetConnection = 
-		TestUtil.isDerbyNetClientFramework(); 
-	
 	// DERBY-1183 getCursorName not correct after first statement execution
 	private static boolean hasGetCursorNameBug = TestUtil.isDerbyNetClientFramework();
 	
@@ -213,8 +205,6 @@ protected void runTest(String[] args) throws Exception {
 
 		// this update should be rolled back
 		s.executeUpdate("insert into t values(2)");
-		if (needRollbackBeforePCGetConnection)
-			c1.rollback();
 		
 		c1 = pc.getConnection();
 
@@ -268,8 +258,6 @@ protected void runTest(String[] args) throws Exception {
 
 		// this update should be rolled back
 		s.executeUpdate("insert into t values(2)");
-		if (needRollbackBeforePCGetConnection)
-			c1.rollback();
 		
 		c1 = xac.getConnection();
 
