diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
index e462ae68..9b0e113f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BasePage.java
@@ -1671,13 +1671,14 @@ void setExclusive(BaseContainerHandle requester)
 					return;
 				}
 
-				// just deadlock out if a transaction tries to double latch the
-				// page while not in abort
-
-				if (SanityManager.DEBUG) {
-					SanityManager.THROWASSERT("Attempted to latch page twice");
-				}
-
+                // A transaction tries to double latch the page while not in
+                // abort: if we let it wait, it would hang forever, so it's
+                // better to throw an exception. This should never occur unless
+                // the code is wrong.  If it still does, we'd better tear down
+                // the connection just in case, so the error has session level
+                // severity;
+                throw StandardException.newException(
+                    SQLState.DATA_DOUBLE_LATCH_INTERNAL_ERROR, identity);
 			}
 
 			while (owner != null) {
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 57802f5c..aad8cdbd 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -483,6 +483,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String DATA_UNEXPECTED_OVERFLOW_PAGE                        = "XSDAL.S";
     String DATA_SQLDATA_READ_INSTANTIATION_EXCEPTION            = "XSDAM.S";
     String DATA_SQLDATA_READ_ILLEGAL_ACCESS_EXCEPTION           = "XSDAN.S";
+    String DATA_DOUBLE_LATCH_INTERNAL_ERROR                     = "XSDAO.S";
 
 	/*
 	** RawStore - Data.Generic transaction exceptions
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java
index 6747015a..36fb63c8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java
@@ -1142,48 +1142,15 @@ public void t_removePage(ContainerHandle c, Page p) throws T_Fail, StandardExcep
 	 */
 	public void t_checkGetLatchedPage(ContainerHandle c, long pageNumber)
 			throws StandardException, T_Fail {
-		// we expect to hang in getPage() so make sure we are interrupted
-		final Thread me = Thread.currentThread();
-		Runnable r = new Runnable() {
-				public void run() {
-					try {
-						Thread.sleep(2000);
-					} catch (InterruptedException e) { }
-					me.interrupt();
-				}
-			};
-		Thread interrupter = new Thread(r);
-		if (!SanityManager.DEBUG) {
-			// don't run the interrupter thread in sane builds, since getPage()
-			// will throw an assert error instead of hanging (DERBY-2635)
-			interrupter.start();
-		}
 
 		try {
 			Page p = c.getPage(pageNumber);
 			throw T_Fail.testFailMsg("got latched page");
 		} catch (StandardException se) {
-			// expect thread interrupted exception in insane builds
-			if (SanityManager.DEBUG || !se.getMessageId().equals("08000")) {
+            if (!"XSDAO".equals(se.getSQLState())) {
 				throw se;
 			}
-		} catch (RuntimeException e) {
-			// When running in sane mode, an AssertFailure will be thrown if we
-			// try to double latch a page. The AssertFailure class is not
-			// available in insane jars, so we cannot reference the class
-			// directly.
-			if (!(SanityManager.DEBUG &&
-				  e.getClass().getName().endsWith(".sanity.AssertFailure") &&
-				  e.getMessage().endsWith("Attempted to latch page twice"))) {
-				throw e;
-			}
-		}
-
-		try {
-			if (interrupter.isAlive()) {
-				interrupter.join();
 			}
-		} catch (InterruptedException ie) { }
 	}
 
 	/**
