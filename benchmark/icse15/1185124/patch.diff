diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java
index f8daab4b..f1554f8a 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java
@@ -18,14 +18,16 @@
  */
 
 import java.util.HashSet;
+
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.MultiReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.FixedBitSet;
+import org.apache.lucene.util.LuceneTestCase;
 
 public class TermsFilterTest extends LuceneTestCase {
   
@@ -80,4 +82,38 @@ public void testMissingTerms() throws Exception {
 		reader.close();
 		rd.close();
 	}
+
+  public void testMissingField() throws Exception {
+    String fieldName = "field1";
+    Directory rd1 = newDirectory();
+    RandomIndexWriter w1 = new RandomIndexWriter(random, rd1);
+    Document doc = new Document();
+    doc.add(newField(fieldName, "content1", Field.Store.YES, Field.Index.NOT_ANALYZED));
+    w1.addDocument(doc);
+    IndexReader reader1 = w1.getReader();
+    w1.close();
+    
+    fieldName = "field2";
+    Directory rd2 = newDirectory();
+    RandomIndexWriter w2 = new RandomIndexWriter(random, rd2);
+    doc = new Document();
+    doc.add(newField(fieldName, "content2", Field.Store.YES, Field.Index.NOT_ANALYZED));
+    w2.addDocument(doc);
+    IndexReader reader2 = w2.getReader();
+    w2.close();
+    
+    TermsFilter tf = new TermsFilter();
+    tf.addTerm(new Term(fieldName, "content1"));
+    
+    MultiReader multi = new MultiReader(reader1, reader2);
+    for (IndexReader sub : multi.getSequentialSubReaders()) {
+      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(sub);
+      assertTrue("Must be >= 0", bits.cardinality() >= 0);      
+    }
+    multi.close();
+    reader1.close();
+    reader2.close();
+    rd1.close();
+    rd2.close();
+  }
 }
