diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilterFactory.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilterFactory.java
index b4632f98..43fda309 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilterFactory.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilterFactory.java
@@ -54,9 +54,9 @@ public FuzzySet downsize(FieldInfo fieldInfo, FuzzySet initialSet) {
 
   /**
    * Used to determine if the given filter has reached saturation and should be retired i.e. not saved any more
-   * @param bloomFilter
-   * @param fieldInfo
-   * @return
+   * @param bloomFilter The bloomFilter being tested
+   * @param fieldInfo The field with which this filter is associated
+   * @return true if the set has reached saturation and should be retired
    */
   public abstract boolean isSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo);
   
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/FuzzySet.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/FuzzySet.java
index 329b8856..ec1a1e6e 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/FuzzySet.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/util/FuzzySet.java
@@ -96,7 +96,7 @@ public static int getNearestSetSize(int maxNumberOfBits)
    * than deciding how much memory to throw at the problem.
    * @param maxNumberOfValuesExpected
    * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded
-   * @return
+   * @return The size of the set nearest to the required size
    */
   public static int getNearestSetSize(int maxNumberOfValuesExpected,
       float desiredSaturation) {
@@ -213,7 +213,7 @@ private ContainsResult mayContainValue(int positiveHash) {
   /**
    * Records a value in the set. The referenced bytes are hashed and then modulo n'd where n is the
    * chosen size of the internal bitset.
-   * @param bytes
+   * @param value the key value to be hashed
    * @throws IOException
    */
   public void addValue(BytesRef value) throws IOException {    
@@ -229,7 +229,7 @@ public void addValue(BytesRef value) throws IOException {
   
   /**
    * 
-   * @param targetSaturation A number between 0 and 1 describing the % of bits that would ideally be set in the 
+   * @param targetMaxSaturation A number between 0 and 1 describing the % of bits that would ideally be set in the 
    * result. Lower values have better qccuracy but require more space.
    * @return a smaller FuzzySet or null if the current set is already over-saturated
    */
