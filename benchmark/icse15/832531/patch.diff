diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/dht/BootStrapper.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/dht/BootStrapper.java
index 35cab212..92b29d50 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -137,7 +137,8 @@ public void run()
         if (logger_.isDebugEnabled())
           logger_.debug("Total number of new ranges " + newRanges.length);
         /* Calculate the list of nodes that handle the new ranges */
-        Map<Range, List<EndPoint>> newRangeToEndPointMap = StorageService.instance().constructRangeToEndPointMap(newRanges);
+        Map<Range, List<EndPoint>> newRangeToEndPointMap = 
+            StorageService.instance().constructRangeToEndPointMap(newRanges, tokenMetadata_.cloneTokenEndPointMapIncludingBootstrapNodes());
         /* Calculate ranges that need to be sent and from whom to where */
         Map<Range, List<BootstrapSourceTarget>> rangesWithSourceTarget = LeaveJoinProtocolHelper.getRangeSourceTargetInfo(oldRangeToEndPointMap, newRangeToEndPointMap);
         return rangesWithSourceTarget;
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/locator/TokenMetadata.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/locator/TokenMetadata.java
index 09dea3b6..8bffac13 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/locator/TokenMetadata.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/locator/TokenMetadata.java
@@ -213,6 +213,24 @@ public EndPoint getNextEndpoint(EndPoint endPoint) throws UnavailableException
         }
     }
     
+    public Map<Token, EndPoint> cloneTokenEndPointMapIncludingBootstrapNodes()
+    {
+        lock_.readLock().lock();
+        try
+        {            
+            Map h1 = new HashMap<Token, EndPoint>( tokenToEndPointMap_ );
+            for (Map.Entry<Token, EndPoint> e: bootstrapNodes.entrySet())
+            {
+                h1.put(e.getKey(), e.getValue());
+            }
+            return h1;
+        }
+        finally
+        {
+            lock_.readLock().unlock();
+        }
+    }
+    
     /*
      * Returns a safe clone of endPointTokenMap_.
     */
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java
index 45bede8b..e248e996 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/service/StorageService.java
@@ -301,7 +301,7 @@ public void start() throws IOException
         if (isBootstrapMode)
         {
             logger_.info("Starting in bootstrap mode");
-            doBootstrap(StorageService.getLocalStorageEndPoint());
+            bootStrapper_.submit(new BootStrapper(new EndPoint[]{StorageService.getLocalStorageEndPoint()}, storageMetadata_.getToken()));
             Gossiper.instance().addApplicationState(BOOTSTRAP_MODE, new ApplicationState(""));
         }
     }
@@ -317,9 +317,9 @@ public TokenMetadata getTokenMetadata()
     }
 
     /* TODO: used for testing */
-    public void updateTokenMetadata(Token token, EndPoint endpoint)
+    public void updateTokenMetadata(Token token, EndPoint endpoint, boolean bs)
     {
-        tokenMetadata_.update(token, endpoint);
+        tokenMetadata_.update(token, endpoint, bs);
     }
 
     public IEndPointSnitch getEndPointSnitch()
@@ -593,9 +593,8 @@ private void doBootstrap(String nodes) throws UnknownHostException
      * Starts the bootstrap operations for the specified endpoint.
      * @param endpoint
      */
-    public final void doBootstrap(EndPoint endpoint)
+    public final void doBootstrap(EndPoint endpoint, Token token)
     {
-        Token token = tokenMetadata_.getToken(endpoint);
         bootStrapper_.submit(new BootStrapper(new EndPoint[]{endpoint}, token));
     }
     
diff --git a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/dht/BootStrapperTest.java b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/dht/BootStrapperTest.java
index 298fe629..2ac8604b 100644
--- a/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/dht/BootStrapperTest.java
+++ b/incubator/cassandra/branches/cassandra-0.4/test/unit/org/apache/cassandra/dht/BootStrapperTest.java
@@ -41,7 +41,7 @@ public void testSourceTargetComputation()
         /* New token needs to be part of the map for the algorithm
          * to calculate the ranges correctly
          */
-        StorageService.instance().updateTokenMetadata(newToken, newEndPoint);
+        StorageService.instance().updateTokenMetadata(newToken, newEndPoint, true);
 
         BootStrapper b = new BootStrapper(new EndPoint[]{newEndPoint}, newToken );
         Map<Range,List<BootstrapSourceTarget>> res = b.getRangesWithSourceTarget();
@@ -74,7 +74,7 @@ private IPartitioner generateOldTokens(int numOldNodes)
         {
             EndPoint e  = new EndPoint("127.0.0."+i, 100);
             Token t = p.getDefaultToken();
-            StorageService.instance().updateTokenMetadata(t, e);
+            StorageService.instance().updateTokenMetadata(t, e, false);
         }
         return p;
     }
