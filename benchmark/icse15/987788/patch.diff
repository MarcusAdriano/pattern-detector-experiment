diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
index 5e72c702..a2e4ad2c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
@@ -171,49 +171,6 @@ public int getLocalDeletionTime()
         throw new IllegalStateException("column is not marked for delete");
     }
 
-    // note that we do not call this simply compareTo since it also makes sense to compare Columns by name
-    public ClockRelationship comparePriority(Column o)
-    {
-        ClockRelationship rel = clock.compare(o.clock());
-
-        // tombstone always wins ties.
-        if (isMarkedForDelete())
-        {
-            switch (rel)
-            {
-                case EQUAL:
-                    return ClockRelationship.GREATER_THAN;
-                default:
-                    return rel;
-            }
-        }
-        if (o.isMarkedForDelete())
-        {
-            switch (rel)
-            {
-                case EQUAL:
-                    return ClockRelationship.LESS_THAN;
-                default:
-                    return rel;
-            }
-        }
-
-        // compare value as tie-breaker for equal clocks
-        if (ClockRelationship.EQUAL == rel)
-        {
-            int valRel = FBUtilities.compareByteArrays(value, o.value);
-            if (1 == valRel)
-                return ClockRelationship.GREATER_THAN;
-            if (0 == valRel)
-                return ClockRelationship.EQUAL;
-            // -1 == valRel
-            return ClockRelationship.LESS_THAN;
-        }
-
-        // neither is tombstoned and clocks are different
-        return rel;
-    }
-
     @Override
     public boolean equals(Object o)
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/clock/TimestampReconciler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/clock/TimestampReconciler.java
index c1b149d8..a03ab6ac 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/clock/TimestampReconciler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/clock/TimestampReconciler.java
@@ -19,6 +19,7 @@
 
 import org.apache.cassandra.db.Column;
 import org.apache.cassandra.db.IClock.ClockRelationship;
+import org.apache.cassandra.utils.FBUtilities;
 
 /**
  * Keeps the column with the highest timestamp. If both are equal
@@ -37,6 +38,13 @@ public Column reconcile(Column left, Column right)
         switch (cr)
         {
         case EQUAL:
+            // tombstones take precedence.  (if both are tombstones, then it doesn't matter which one we use.)
+            if (left.isMarkedForDelete())
+                return left;
+            if (right.isMarkedForDelete())
+                return right;
+            // break ties by comparing values.
+            return FBUtilities.compareByteArrays(left.value(), right.value()) < 0 ? right : left;
         case GREATER_THAN:
             return left;
         case LESS_THAN:
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
index b7e3f067..93756ab4 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
@@ -129,5 +129,17 @@ public void testMergeAndAdd()
         assert 3 == cf_result.getColumnCount() : "Count is " + cf_new.getColumnCount();
         //addcolumns will only add if timestamp >= old timestamp
         assert Arrays.equals(val, cf_result.getColumn("col2".getBytes()).value());
+
+        // check that tombstone wins timestamp ties
+        cf_result.deleteColumn("col1".getBytes(), 0, new TimestampClock(3));
+        assert cf_result.getColumn("col1".getBytes()).isMarkedForDelete();
+        cf_result.addColumn(QueryPath.column("col1".getBytes()), val2, new TimestampClock(3));
+        assert cf_result.getColumn("col1".getBytes()).isMarkedForDelete();
+
+        // check that column value wins timestamp ties in absence of tombstone
+        cf_result.addColumn(QueryPath.column("col3".getBytes()), val, new TimestampClock(2));
+        assert Arrays.equals(cf_result.getColumn("col3".getBytes()).value(), val2);
+        cf_result.addColumn(QueryPath.column("col3".getBytes()), "z".getBytes(), new TimestampClock(2));
+        assert Arrays.equals(cf_result.getColumn("col3".getBytes()).value(), "z".getBytes());
     }
 }
