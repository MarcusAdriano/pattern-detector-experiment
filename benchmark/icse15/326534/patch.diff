diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CloseFilterInputStream.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CloseFilterInputStream.java
index e69de29b..ce7914af 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CloseFilterInputStream.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CloseFilterInputStream.java
@@ -0,0 +1,114 @@
+/*
+
+   Derby - Class org.apache.derby.client.am.CloseFilterInputStream
+
+   Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+*/
+
+package org.apache.derby.client.am;
+
+import java.io.InputStream;
+import java.io.FilterInputStream;
+
+import java.io.IOException;
+
+class CloseFilterInputStream extends FilterInputStream {
+	
+	private static final String ALREADY_CLOSED_ERR_MEASSAGE = "This object is already closed.";
+	
+	private boolean closed;
+	
+	
+	public CloseFilterInputStream(InputStream is){
+		
+		super(is);
+		closed = false;
+		
+	}
+	
+	
+	public int read() 
+		throws IOException {
+
+		if(closed){
+			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
+		}
+		
+		return super.read();
+		
+	}
+	
+
+	public int read(byte[] b) 
+		throws IOException {
+		
+		if(closed){
+			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
+		}
+
+		return super.read(b);
+
+	}
+	
+	
+	public int read(byte[] b,
+			int off,
+			int len) 
+		throws IOException{
+		
+		if(closed){
+			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
+		}
+
+		return super.read(b, off, len);
+
+	}
+
+	
+	public long skip(long n)
+		throws IOException{
+
+		if(closed){
+			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
+		}
+		
+		return super.skip(n);
+		
+	}
+	
+	
+	public int available()
+		throws IOException{
+		
+		if(closed){
+			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
+		}
+
+		return super.available();
+		
+	}
+	
+	
+	public void close()
+		throws IOException{
+		
+		super.close();
+		closed = true;
+		
+	}
+	
+	
+}
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 8471cd7c..6af35b7b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -21,7 +21,7 @@
 
 package org.apache.derby.client.am;
 
-
+import java.io.IOException;
 
 public abstract class ResultSet implements java.sql.ResultSet,
         ResultSetCallbackInterface,
@@ -36,6 +36,8 @@
 
     public Section generatedSection_ = null;
 
+	private CloseFilterInputStream is_;
+
     //---------------------navigational cheat-links-------------------------------
     // Cheat-links are for convenience only, and are not part of the conceptual model.
     // Warning:
@@ -494,6 +496,9 @@ public boolean wasNull() throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public boolean getBoolean(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getBoolean", column);
         }
@@ -514,6 +519,9 @@ public boolean getBoolean(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public byte getByte(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getByte", column);
         }
@@ -534,6 +542,9 @@ public byte getByte(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public short getShort(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getShort", column);
         }
@@ -554,6 +565,9 @@ public short getShort(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public int getInt(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getInt", column);
         }
@@ -574,6 +588,9 @@ public int getInt(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public long getLong(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getLong", column);
         }
@@ -594,6 +611,9 @@ public long getLong(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public float getFloat(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getFloat", column);
         }
@@ -614,6 +634,9 @@ public float getFloat(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public double getDouble(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getDouble", column);
         }
@@ -634,6 +657,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.math.BigDecimal getBigDecimal(int column, int scale) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceDeprecatedEntry(this, "getBigDecimal", column, scale);
         }
@@ -656,6 +682,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.math.BigDecimal getBigDecimal(int column) throws SqlException {
+
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getBigDecimal", column);
         }
@@ -677,6 +706,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Date getDate(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getDate", column);
         }
@@ -696,6 +728,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Date getDate(int column, java.util.Calendar calendar) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getDate", column, calendar);
         }
@@ -723,6 +758,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Time getTime(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getTime", column);
         }
@@ -742,6 +780,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Time getTime(int column, java.util.Calendar calendar) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getTime", column, calendar);
         }
@@ -769,6 +810,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Timestamp getTimestamp(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getTimestamp", column);
         }
@@ -788,6 +832,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Timestamp getTimestamp(int column, java.util.Calendar calendar) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getTimestamp", column, calendar);
         }
@@ -817,6 +864,9 @@ public double getDouble(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public String getString(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getString", column);
         }
@@ -836,6 +886,9 @@ public String getString(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public byte[] getBytes(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getBytes", column);
         }
@@ -855,6 +908,9 @@ public String getString(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.io.InputStream getBinaryStream(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getBinaryStream", column);
         }
@@ -869,11 +925,14 @@ public String getString(int column) throws SqlException {
             agent_.logWriter_.traceExit(this, "getBinaryStream", result);
         }
         setWasNull(column);  // Placed close to the return to minimize risk of thread interference
-        return result;
+        return createCloseFilterInputStream(result);
     }
 
     // Live life on the edge and run unsynchronized
     public java.io.InputStream getAsciiStream(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getAsciiStream", column);
         }
@@ -891,11 +950,14 @@ public String getString(int column) throws SqlException {
             agent_.logWriter_.traceExit(this, "getAsciiStream", result);
         }
         setWasNull(column);  // Placed close to the return to minimize risk of thread interference
-        return result;
+        return createCloseFilterInputStream(result);
     }
 
     // Live life on the edge and run unsynchronized
     public java.io.InputStream getUnicodeStream(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceDeprecatedEntry(this, "getUnicodeStream", column);
         }
@@ -916,11 +978,14 @@ public String getString(int column) throws SqlException {
             agent_.logWriter_.traceDeprecatedExit(this, "getUnicodeStream", result);
         }
         setWasNull(column);  // Placed close to the return to minimize risk of thread interference
-        return result;
+        return createCloseFilterInputStream(result);
     }
 
     // Live life on the edge and run unsynchronized
     public java.io.Reader getCharacterStream(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getCharacterStream", column);
         }
@@ -941,6 +1006,9 @@ public String getString(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Blob getBlob(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getBlob", column);
         }
@@ -961,6 +1029,9 @@ public String getString(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Clob getClob(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getClob", column);
         }
@@ -981,6 +1052,9 @@ public String getString(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Ref getRef(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getRef", column);
         }
@@ -998,6 +1072,9 @@ public String getString(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public java.sql.Array getArray(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getArray", column);
         }
@@ -1015,6 +1092,9 @@ public String getString(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public Object getObject(int column) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getObject", column);
         }
@@ -1040,6 +1120,9 @@ Object getObjectX(int column) throws SqlException {
 
     // Live life on the edge and run unsynchronized
     public Object getObject(int column, java.util.Map map) throws SqlException {
+	    
+	    closeCloseFilterInputStream();
+	    
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "getObject", column, map);
         }
@@ -3899,4 +3982,45 @@ private void resetRowsetSqlca() {
 		return result;
 
 	}
+	
+	
+	private CloseFilterInputStream createCloseFilterInputStream(java.io.InputStream is) throws SqlException {
+		
+		if(is == null){
+			return null;
+		}
+
+		if( is_ == is ){
+			return is_;
+		}
+		
+		closeCloseFilterInputStream();
+		
+		is_ = new CloseFilterInputStream(is);
+		
+		return is_;
+		
+	}
+	
+	
+	private void closeCloseFilterInputStream() throws SqlException {
+		
+		if(is_ != null){
+			try{
+				is_.close();
+				
+			}catch(IOException e){
+				
+				throw new SqlException(agent_.logWriter_ ,
+						       e ,
+						       "Failed to close inputStream.");
+				
+			}
+			
+			is_ = null;
+			
+		}
+	}
+	
+	
 }
