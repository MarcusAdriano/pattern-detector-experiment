diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
index 0b3457cd..6dedb918 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
@@ -134,6 +134,12 @@ protected void executeSPS(SPSDescriptor sps) throws StandardException
 			*/
 			if (ps == null || recompile)
 			{
+                // The SPS activation will set its parent activation from
+                // the statement context. Reset it to the original parent
+                // activation first so that it doesn't use the activation of
+                // the previously executed SPS as parent. DERBY-6348.
+                lcc.getStatementContext().setActivation(activation);
+
 				/*
 				** We need to clone the prepared statement so we don't
 				** wind up marking that ps that is tied to sps as finished
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
index 46653b88..79bece27 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
@@ -2017,4 +2017,34 @@ public void testDerby6357TempTable() throws SQLException {
                 + "(select count(*) from sysibm.sysdummy1)");
 
     }
+
+    public void testDerby6348() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.execute("create table d6348(x int)");
+        s.execute("insert into d6348 values 1");
+        s.execute("create trigger d6348_tr1 after update on d6348 values 1");
+        s.execute("create trigger d6348_tr2 after update on d6348 "
+                + "for each row update d6348 set x = x + 1 where x < 3");
+
+        // Used to fail with assert failure or NullPointerException before
+        // DERBY-6348.
+        s.execute("update d6348 set x = x + 1");
+
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("select * from d6348"),
+                "3");
+
+        rollback();
+
+        s.execute("create table d6348(x int)");
+        s.execute("create trigger d6348_tr1 after insert on d6348 "
+                + "values current_user");
+        s.execute("create trigger d6348_tr2 after insert on d6348 "
+                + "values current_user");
+
+        // Used to fail with assert failure or NullPointerException before
+        // DERBY-6348.
+        s.execute("insert into d6348 values 1");
+    }
 }
