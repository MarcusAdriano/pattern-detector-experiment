diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/ApplicationState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/ApplicationState.java
index 4af8d5e7..9fc4fdd2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/ApplicationState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/ApplicationState.java
@@ -37,7 +37,7 @@
  *      Gossiper.instance().addApplicationState("LOAD STATE", loadState);
  */
 
-public class ApplicationState
+public class ApplicationState implements Comparable<ApplicationState>
 {
     private static ICompactSerializer<ApplicationState> serializer_;
     static
@@ -79,6 +79,11 @@ int getStateVersion()
     {
         return version_;
     }
+
+    public int compareTo(ApplicationState apState)
+    {
+        return this.version_ - apState.getStateVersion();
+    }
 }
 
 class ApplicationStateSerializer implements ICompactSerializer<ApplicationState>
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java
index 68d2fa75..2be33d91 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java
@@ -76,7 +76,7 @@ public ApplicationState getApplicationState(String key)
         return applicationState_.get(key);
     }
     
-    public Map<String, ApplicationState> getApplicationState()
+    public Map<String, ApplicationState> getApplicationStateMap()
     {
         return applicationState_;
     }
@@ -118,6 +118,22 @@ synchronized void isAGossiper(boolean value)
         //isAlive_ = false;
         isAGossiper_ = value;        
     }
+
+    public List<Map.Entry<String,ApplicationState>> getSortedApplicationStates()
+    {
+        ArrayList<Map.Entry<String, ApplicationState>> entries = new ArrayList<Map.Entry<String, ApplicationState>>();
+        entries.addAll(applicationState_.entrySet());
+        Collections.sort(entries, new Comparator<Map.Entry<String, ApplicationState>>()
+        {
+            public int compare(Map.Entry<String, ApplicationState> lhs, Map.Entry<String, ApplicationState> rhs)
+            {
+                return lhs.getValue().compareTo(rhs.getValue());
+            }
+        });
+
+        return entries;
+    }
+
 }
 
 class EndPointStateSerializer implements ICompactSerializer<EndPointState>
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index 9f88a289..c289839c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -28,7 +28,7 @@
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
-import org.apache.cassandra.utils.LogUtil;
+
 import org.apache.log4j.Logger;
 
 /**
@@ -209,7 +209,7 @@ int getMaxEndPointStateVersion(EndPointState epState)
     {
         List<Integer> versions = new ArrayList<Integer>();
         versions.add( epState.getHeartBeatState().getHeartBeatVersion() );
-        Map<String, ApplicationState> appStateMap = epState.getApplicationState();
+        Map<String, ApplicationState> appStateMap = epState.getApplicationStateMap();
 
         Set<String> keys = appStateMap.keySet();
         for ( String key : keys )
@@ -431,7 +431,7 @@ synchronized EndPointState getStateForVersionBiggerThan(InetAddress forEndpoint,
             {
                 reqdEndPointState = new EndPointState(epState.getHeartBeatState());
             }
-            Map<String, ApplicationState> appStateMap = epState.getApplicationState();
+            Map<String, ApplicationState> appStateMap = epState.getApplicationStateMap();
             /* Accumulate all application states whose versions are greater than "version" variable */
             Set<String> keys = appStateMap.keySet();
             for ( String key : keys )
@@ -627,13 +627,12 @@ void applyHeartBeatStateLocally(InetAddress addr, EndPointState localState, EndP
 
     void applyApplicationStateLocally(InetAddress addr, EndPointState localStatePtr, EndPointState remoteStatePtr)
     {
-        Map<String, ApplicationState> localAppStateMap = localStatePtr.getApplicationState();
-        Map<String, ApplicationState> remoteAppStateMap = remoteStatePtr.getApplicationState();
+        Map<String, ApplicationState> localAppStateMap = localStatePtr.getApplicationStateMap();
 
-        Set<String> remoteKeys = remoteAppStateMap.keySet();
-        for ( String remoteKey : remoteKeys )
+        for (Map.Entry<String,ApplicationState> remoteEntry : remoteStatePtr.getSortedApplicationStates())
         {
-            ApplicationState remoteAppState = remoteAppStateMap.get(remoteKey);
+            String remoteKey = remoteEntry.getKey();
+            ApplicationState remoteAppState = remoteEntry.getValue();
             ApplicationState localAppState = localAppStateMap.get(remoteKey);
 
             /* If state doesn't exist locally for this key then just apply it */
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 37004ab5..c74233ac 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -485,14 +485,10 @@ public static void updateBootstrapRanges(AbstractReplicationStrategy strategy, T
 
     public void onJoin(InetAddress endpoint, EndPointState epState)
     {
-        ApplicationState stateNormal = epState.getApplicationState(StorageService.STATE_NORMAL);
-        ApplicationState stateBootstrapping = epState.getApplicationState(StorageService.STATE_BOOTSTRAPPING);
-
-        if (stateNormal != null)
-            onChange(endpoint, StorageService.STATE_NORMAL, stateNormal);
-
-        if (stateBootstrapping != null)
-            onChange(endpoint, StorageService.STATE_BOOTSTRAPPING, stateBootstrapping);
+        for (Map.Entry<String,ApplicationState> entry : epState.getSortedApplicationStates())
+        {
+            onChange(endpoint, entry.getKey(), entry.getValue());
+        }
     }
 
     public void onAlive(InetAddress endpoint, EndPointState state)
