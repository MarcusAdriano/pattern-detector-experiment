diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientResultSet.java
index ffdcb3ed..b34591ff 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientResultSet.java
@@ -2720,7 +2720,7 @@ public void setFetchSize(int rows) throws SQLException {
                     agent_.logWriter_.traceEntry(this, "setFetchSize", rows);
                 }
                 checkForClosedResultSet("setFetchSize");
-                if (rows < 0 || (maxRows_ != 0 && rows > maxRows_)) {
+                if (rows < 0) {
                     throw new SqlException(agent_.logWriter_, 
                         new ClientMessageId(SQLState.INVALID_FETCH_SIZE),
                         rows).getSQLException();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index ae7427f5..d23a87a7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -2292,11 +2292,11 @@ public int getFetchDirection() throws SQLException {
 	 *            the number of rows to fetch
 	 * @exception SQLException
 	 *                if a database-access error occurs, or the condition 0 <=
-	 *                rows <= this.getMaxRows() is not satisfied.
+	 *                rows is not satisfied.
 	 */
 	public void setFetchSize(int rows) throws SQLException {
 		checkIfClosed("setFetchSize");
-		if (rows < 0 || (stmt.getMaxRows() != 0 && rows > stmt.getMaxRows())) {
+		if (rows < 0) {
 			throw Util.generateCsSQLException(SQLState.INVALID_FETCH_SIZE,
 					new Integer(rows));
 		} else if (rows > 0) // if it is zero ignore the call
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java
index 9d5a060c..fdfd0ba4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java
@@ -196,13 +196,9 @@ public void testLocalValuesOfResultSet() throws SQLException {
         assertEquals(rs.getFetchSize(), 250);
         assertEquals(rs.getFetchDirection(), ResultSet.FETCH_REVERSE);
         
-        // exception conditions
+        // Verify that fetch size can be set larger than maxRows
         stmt.setMaxRows(10);
-        try{
             rs.setFetchSize(100);
-        } catch(SQLException e){
-            assertSQLState("XJ062", e);
-        }
         
         //Error  testing  : set wrong values ..
         try{
