diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
index a520e81f..ee931d50 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -65,6 +65,7 @@
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -93,6 +94,9 @@
  */
 public class SolrDispatchFilter implements Filter
 {
+  private static final String CONNECTION_HEADER = "Connection";
+  private static final String TRANSFER_ENCODING_HEADER = "Transfer-Encoding";
+
   final Logger log;
 
   protected volatile CoreContainer cores;
@@ -496,8 +500,8 @@ private void remoteQuery(String coreUrl, HttpServletRequest req,
       
       con.setDoOutput(true);
       con.setDoInput(true);
-      for (Enumeration e = req.getHeaderNames(); e.hasMoreElements();) {
-        String headerName = e.nextElement().toString();
+      for (Enumeration<String> e = req.getHeaderNames(); e.hasMoreElements();) {
+        String headerName = e.nextElement();
         con.setRequestProperty(headerName, req.getHeader(headerName));
       }
       try {
@@ -519,11 +523,18 @@ private void remoteQuery(String coreUrl, HttpServletRequest req,
         
         resp.setStatus(con.getResponseCode());
         
-        for (Iterator i = con.getHeaderFields().entrySet().iterator(); i
-            .hasNext();) {
-          Map.Entry mapEntry = (Map.Entry) i.next();
-          if (mapEntry.getKey() != null) resp.setHeader(mapEntry.getKey()
-              .toString(), ((List) mapEntry.getValue()).get(0).toString());
+        for (Iterator<Entry<String,List<String>>> i = con.getHeaderFields().entrySet().iterator(); i.hasNext();) {
+          Map.Entry<String,List<String>> mapEntry = i.next();
+          String header = mapEntry.getKey();
+          
+          // We pull out these two headers below because they can cause chunked
+          // encoding issues with Tomcat and certain clients
+          if (header != null && !header.equals(TRANSFER_ENCODING_HEADER)
+              && !header.equals(CONNECTION_HEADER)) {
+            for (String value : mapEntry.getValue()) {
+              resp.addHeader(mapEntry.getKey(), value);
+            }
+          }
         }
         
         resp.setCharacterEncoding(con.getContentEncoding());
