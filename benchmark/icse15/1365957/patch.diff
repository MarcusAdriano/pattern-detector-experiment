diff --git a/lucene/dev/branches/branch_4x/solr/contrib/velocity/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java b/lucene/dev/branches/branch_4x/solr/contrib/velocity/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java
index 9596bbb5..49e202d2 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/velocity/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/velocity/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java
@@ -22,6 +22,7 @@
 import org.apache.commons.collections.ExtendedProperties;
 import org.apache.solr.core.SolrResourceLoader;
 
+import java.io.IOException;
 import java.io.InputStream;
 
 // TODO: the name of this class seems ridiculous
@@ -39,7 +40,11 @@ public void init(ExtendedProperties extendedProperties) {
 
   @Override
   public InputStream getResourceStream(String template_name) throws ResourceNotFoundException {
+    try {
     return loader.openResource(template_name);
+    } catch (IOException ioe) {
+      throw new ResourceNotFoundException(ioe);
+    }
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader.java
index 42a9a8ce..9089540b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader.java
@@ -18,6 +18,7 @@
  */
 
 import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.util.List;
 import java.util.Properties;
@@ -69,7 +70,7 @@ public ZkSolrResourceLoader(String instanceDir, String collection, ClassLoader p
    * @return the stream for the named resource
    */
   @Override
-  public InputStream openResource(String resource) {
+  public InputStream openResource(String resource) throws IOException {
     InputStream is = null;
     String file = collectionZkPath + "/" + resource;
     try {
@@ -78,16 +79,16 @@ public InputStream openResource(String resource) {
         return new ByteArrayInputStream(bytes);
       }
     } catch (Exception e) {
-      throw new RuntimeException("Error opening " + file, e);
+      throw new IOException("Error opening " + file, e);
     }
     try {
       // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)
       is = classLoader.getResourceAsStream(resource);
     } catch (Exception e) {
-      throw new RuntimeException("Error opening " + resource, e);
+      throw new IOException("Error opening " + resource, e);
     }
     if (is == null) {
-      throw new RuntimeException("Can't find resource '" + resource
+      throw new IOException("Can't find resource '" + resource
           + "' in classpath or '" + collectionZkPath + "', cwd="
           + System.getProperty("user.dir"));
     }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index ea6a4c89..fdd28323 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -252,7 +252,7 @@ public ClassLoader getClassLoader() {
    * Override this method to customize loading schema resources.
    *@return the stream for the named schema
    */
-  public InputStream openSchema(String name) {
+  public InputStream openSchema(String name) throws IOException {
     return openResource(name);
   }
   
@@ -260,7 +260,7 @@ public InputStream openSchema(String name) {
    * Override this method to customize loading config resources.
    *@return the stream for the named configuration
    */
-  public InputStream openConfig(String name) {
+  public InputStream openConfig(String name) throws IOException {
     return openResource(name);
   }
   
@@ -272,7 +272,7 @@ public InputStream openConfig(String name) {
    * Override this method to customize loading resources.
    *@return the stream for the named resource
    */
-  public InputStream openResource(String resource) {
+  public InputStream openResource(String resource) throws IOException {
     InputStream is=null;
     try {
       File f0 = new File(resource);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index 43916ef9..b2182484 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -105,12 +105,12 @@ public IndexSchema(SolrConfig solrConfig, String name, InputSource is) {
       name = DEFAULT_SCHEMA_FILE;
     this.resourceName = name;
     loader = solrConfig.getResourceLoader();
+    try {
     if (is == null) {
       is = new InputSource(loader.openSchema(name));
       is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));
     }
     readSchema(is);
-    try {
       loader.inform( loader );
     } catch (IOException e) {
       throw new RuntimeException(e);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java
index 574f5088..b1485d35 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java
@@ -106,7 +106,7 @@ public String init(NamedList config, SolrCore core) {
   }
   
   @Override
-  public void build(SolrCore core, SolrIndexSearcher searcher) {
+  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {
     for (SolrSpellChecker c : checkers) {
       c.build(core, searcher);
     }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java
index 830968ae..22850e4a 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java
@@ -168,11 +168,10 @@ else if (compClass.equalsIgnoreCase(FREQ_COMP))
   }
   
   @Override
-  public void reload(SolrCore core, SolrIndexSearcher searcher)
-      throws IOException {}
+  public void reload(SolrCore core, SolrIndexSearcher searcher) throws IOException {}
 
   @Override
-  public void build(SolrCore core, SolrIndexSearcher searcher) {}
+  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {}
 
   @Override
   public SpellingResult getSuggestions(SpellingOptions options)
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
index 11436f7e..535f66f1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
@@ -59,17 +59,13 @@ public String init(NamedList config, SolrCore core) {
   }
 
   @Override
-  public void build(SolrCore core, SolrIndexSearcher searcher) {
-    try {
+  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {
       loadExternalFileDictionary(core);
       spellChecker.clearIndex();
       // TODO: you should be able to specify the IWC params?
       // TODO: if we enable this, codec gets angry since field won't exist in the schema
       // config.setCodec(core.getCodec());
       spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);
-    } catch (IOException e) {
-      throw new RuntimeException(e);
-    }
   }
 
   /**
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
index 4956db1b..8d639b2d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
@@ -73,9 +73,8 @@ private void initSourceReader() {
   }
 
   @Override
-  public void build(SolrCore core, SolrIndexSearcher searcher) {
+  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {
     IndexReader reader = null;
-    try {
       if (sourceLocation == null) {
         // Load from Solr's index
         reader = searcher.getIndexReader();
@@ -95,9 +94,6 @@ public void build(SolrCore core, SolrIndexSearcher searcher) {
       // TODO: if we enable this, codec gets angry since field won't exist in the schema
       // config.setCodec(core.getCodec());
       spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);
-    } catch (IOException e) {
-      throw new RuntimeException(e);
-    }
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
index fe15e0ec..b369dedc 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
@@ -167,7 +167,7 @@ public String getDictionaryName() {
   /**
    * (re)Builds the spelling index.  May be a NOOP if the implementation doesn't require building, or can't be rebuilt.
    */
-  public abstract void build(SolrCore core, SolrIndexSearcher searcher);
+  public abstract void build(SolrCore core, SolrIndexSearcher searcher) throws IOException;
   
   /**
    * Get the value of {@link SpellingParams#SPELLCHECK_ACCURACY} if supported.  
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java
index 18a8f97c..f1956f80 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/spelling/suggest/Suggester.java
@@ -35,6 +35,7 @@
 import org.apache.lucene.search.suggest.Lookup;
 import org.apache.lucene.search.suggest.Lookup.LookupResult;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.IOUtils;
 
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.SolrCore;
@@ -121,7 +122,7 @@ public String init(NamedList config, SolrCore core) {
   }
   
   @Override
-  public void build(SolrCore core, SolrIndexSearcher searcher) {
+  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {
     LOG.info("build()");
     if (sourceLocation == null) {
       reader = searcher.getIndexReader();
@@ -129,13 +130,13 @@ public void build(SolrCore core, SolrIndexSearcher searcher) {
     } else {
       try {
         dictionary = new FileDictionary(new InputStreamReader(
-                core.getResourceLoader().openResource(sourceLocation), "UTF-8"));
+                core.getResourceLoader().openResource(sourceLocation), IOUtils.CHARSET_UTF_8));
       } catch (UnsupportedEncodingException e) {
         // should not happen
         LOG.error("should not happen", e);
       }
     }
-    try {
+
       lookup.build(dictionary);
       if (storeDir != null) {
         File target = new File(storeDir, factory.storeFileName());
@@ -150,10 +151,6 @@ public void build(SolrCore core, SolrIndexSearcher searcher) {
           LOG.info("Stored suggest data to: " + target.getAbsolutePath());
         }
       }
-
-    } catch (Exception e) {
-      LOG.error("Error while building or storing Suggester data", e);
-    }
   }
 
   @Override
@@ -161,9 +158,14 @@ public void reload(SolrCore core, SolrIndexSearcher searcher) throws IOException
     LOG.info("reload()");
     if (dictionary == null && storeDir != null) {
       // this may be a firstSearcher event, try loading it
-      if (lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())))) {
+      FileInputStream is = new FileInputStream(new File(storeDir, factory.storeFileName()));
+      try {
+        if (lookup.load(is)) {
         return;  // loaded ok
       }
+      } finally {
+        IOUtils.closeWhileHandlingException(is);
+      }
       LOG.debug("load failed, need to build Lookup again");
     }
     // loading was unsuccessful - build it again
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.java
index 80061c67..86a184cb 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.java
@@ -305,6 +305,7 @@ public void inform(SolrCore core) {
       }
 
       scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));
+      try {
       Reader scriptSrc = scriptFile.openReader(resourceLoader);
 
       try {
@@ -316,6 +317,11 @@ public void inform(SolrCore core) {
       } finally {
         IOUtils.closeQuietly(scriptSrc);
       }
+      } catch (IOException ioe) {
+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, 
+            "Unable to evaluate script: " + 
+            scriptFile.getFileName(), ioe);        
+      }
     }
     return scriptEngines;
   }
@@ -485,7 +491,7 @@ public String getExtension() {
       return extension;
     }
 
-    public Reader openReader(SolrResourceLoader resourceLoader) {
+    public Reader openReader(SolrResourceLoader resourceLoader) throws IOException {
       InputStream input = resourceLoader.openResource(fileName);
       return org.apache.lucene.util.IOUtils.getDecodingReader
         (input, org.apache.lucene.util.IOUtils.CHARSET_UTF_8);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker.java
index 7194fc06..7fd5d8bd 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker.java
@@ -41,7 +41,7 @@ public void reload(SolrCore core, SolrIndexSearcher searcher) throws IOException
   }
 
   @Override
-  public void build(SolrCore core, SolrIndexSearcher searcher) {
+  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {
 
   }
 
