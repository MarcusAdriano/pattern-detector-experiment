diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
index 51967d3d..19ecd35d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java
@@ -39,6 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
 import org.apache.derby.iapi.services.uuid.UUIDFactory;
+import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.sql.depend.DependencyManager;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
@@ -247,10 +248,9 @@ public void schedule(TableDescriptor td) {
                         " (queueSize=" + queue.size() + ")");
                 // If we're idle, fire off the worker thread.
                 if (runningThread == null) {
-                    runningThread = new Thread(this, "index-stat-thread");
-                    // Make the thread a daemon thread, we don't want it to stop
-                    // the JVM from exiting. This is a precaution.
-                    runningThread.setDaemon(true);
+                    //DERBY-5582. Make sure the thread is in the derby group
+                    // to avoid potential security manager issues
+                    runningThread = Monitor.getMonitor().getDaemonThread(this, "index-stat-thread", false);
                     runningThread.start();
                 }
             }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/AutomaticIndexStatisticsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/AutomaticIndexStatisticsTest.java
index 4a60917e..2b45dfe1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/AutomaticIndexStatisticsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/AutomaticIndexStatisticsTest.java
@@ -57,7 +57,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class AutomaticIndexStatisticsTest
     extends BaseJDBCTestCase {
 
-    private static final String MASTERDB = "masterDb";
+	// used also by Derby5582AutomaticIndexStatisticsTest so just protected
+    protected static final String MASTERDB = "masterDb";
     private static final String BIG_TABLE = "BIG_TABLE";
     private static final long DEFAULT_TIMEOUT = 20*1000;
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5582AutomaticIndexStatisticsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5582AutomaticIndexStatisticsTest.java
index e69de29b..b0359eb9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5582AutomaticIndexStatisticsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5582AutomaticIndexStatisticsTest.java
@@ -0,0 +1,123 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.store.Derby5582AutomaticIndexStatisticsTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import java.sql.SQLException;
+import java.util.ArrayList;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derbyTesting.junit.SecurityManagerSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+public class Derby5582AutomaticIndexStatisticsTest extends AutomaticIndexStatisticsTest  {
+
+    // private thread group. Derby5582SecurityManager will prevent other threads from 
+	// modifying this thread group.
+    private static final String PRIVTGNAME = "privtg";
+
+	public Derby5582AutomaticIndexStatisticsTest(String name) {
+        super(name);
+        
+    }
+    
+    /**
+     * DERBY-5582 Ensure automatic statistics update thread can be created in the 
+     * context of a SecurityManager that disallows modification of the parent 
+     * thread thread group.
+     * 
+     * @throws InterruptedException
+     */
+    public void testDerby5582() throws InterruptedException {
+        //Create a new thread belonging to the thread group protected by 
+        // the custom SecurityManger
+        ThreadGroup privtg = new ThreadGroup(PRIVTGNAME);
+        // Derby5582Runner will run a automatic statistics test within
+        // the context of the "privtg" ThreadGroup
+        Derby5582Runner runner = new Derby5582Runner();
+        Thread t = new Thread(privtg, runner, "runner-thread");
+        t.start();
+        t.join();
+        // Report error if any during run
+        Exception error = runner.getSavedError();
+        if (error != null) {
+            fail(error.getMessage(),error);
+        }
+        
+    }
+   
+   
+    
+    public static Test suite() {
+    	// Run just the one fixture with the custom SecurityManager
+        Test t = new Derby5582AutomaticIndexStatisticsTest("testDerby5582");
+        Derby5582SecurityManager sm =  new Derby5582SecurityManager();
+        return TestConfiguration.additionalDatabaseDecorator(new SecurityManagerSetup(t, null,
+                sm),MASTERDB);
+        }
+
+    /**
+     * SecurityManager which prevents modification of thread group privtg
+     *
+     */
+    public static class Derby5582SecurityManager  extends SecurityManager {
+        
+        public void checkAccess(ThreadGroup tg) {
+            ThreadGroup currentGroup = Thread.currentThread().getThreadGroup();
+            if (tg.getName().equals(PRIVTGNAME) && 
+                    !currentGroup.getName().equals("main")) {
+                throw new SecurityException("No permission to private ThreadGroup privtg");
+                
+            }
+            super.checkAccess(tg);
+        }
+    }
+    
+    /**
+     * Runnable to run testSTatsUpdatedOnGrowthFixture from
+     * AutomaticStatisticsTest. Needs to be run in a separate thread
+     * with disallowed ThreadGroup modification
+     *  
+     */
+    public class Derby5582Runner implements Runnable {
+
+    	// error saved from run so it can be reported in 
+    	// fixture as failure.
+    	private Exception savedError = null;
+
+    	public void run() {
+    		try {
+    			testStatsUpdatedOnGrowth();
+    		} catch (SQLException sqle) {
+    			savedError = sqle;
+    		}   
+    	}
+
+    	/**
+    	 * @return saved Error
+    	 */
+    	public Exception getSavedError() {
+    		return savedError;
+    	}
+
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
index d8778e27..3f4cbeb9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
@@ -71,6 +71,7 @@ public static Test suite() {
         suite.addTest(HoldCursorJDBC30Test.suite());
         suite.addTest(AccessTest.suite());
         suite.addTest(AutomaticIndexStatisticsTest.suite());
+        suite.addTest(Derby5582AutomaticIndexStatisticsTest.suite());
         suite.addTest(AutomaticIndexStatisticsMultiTest.suite());
         suite.addTest(BTreeMaxScanTest.suite());
         suite.addTest(MadhareTest.suite());
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
index 5d2330d4..49a085d9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java
@@ -71,10 +71,28 @@
 	}
 	
 	private final String decoratorPolicyResource;
+	private SecurityManager decoratorSecurityManager = null;
+	
 	public SecurityManagerSetup(Test test, String policyResource)
 	{
 		super(test);
-		this.decoratorPolicyResource = policyResource;
+            this.decoratorPolicyResource = policyResource != null ?
+                    policyResource : getDefaultPolicy();
+        }
+
+	/**
+	 * Use custom policy and SecurityManager
+	 * 
+	 * @param test - Test to wrap
+	 * @param policyResource - policy resource. If null use default testing policy
+	 * @param securityManager - Custom SecurityManager if null use the system security manager
+	 */
+	public SecurityManagerSetup(Test test, String policyResource, SecurityManager securityManager)
+	{
+		super(test);
+		this.decoratorPolicyResource = policyResource != null ?
+		            policyResource : getDefaultPolicy();
+		this.decoratorSecurityManager = securityManager;
 	}
 	
 	/**
@@ -114,7 +132,7 @@ static void noSecurityManager()
 	 * including the special case of no security manager.
 	 */
 	protected void setUp() {
-		installSecurityManager(decoratorPolicyResource);
+		installSecurityManager(decoratorPolicyResource, decoratorSecurityManager);
 	}
     
     protected void tearDown() throws Exception
@@ -146,7 +164,11 @@ static void installSecurityManager()
 		installSecurityManager( getDefaultPolicy() );
 	}
 	
-	private static void installSecurityManager(String policyFile)
+	private static void installSecurityManager(String policyFile) {
+	   installSecurityManager(policyFile, System.getSecurityManager());
+	}
+
+	private static void installSecurityManager(String policyFile, final SecurityManager sm)
 			 {
 
 		if (externalSecurityManagerInstalled)
@@ -155,18 +177,20 @@ private static void installSecurityManager(String policyFile)
 		Properties set = new Properties(classPathSet);
 		setSecurityPolicy(set, policyFile);
 
-		SecurityManager sm = System.getSecurityManager();
-		if (sm != null) {
+		SecurityManager currentsm = System.getSecurityManager();
+		if (currentsm != null) {
 			// SecurityManager installed, see if it has the same settings.
 
 			String  newPolicyProperty = set.getProperty("java.security.policy" );
 			if ( newPolicyProperty == null ) { newPolicyProperty = ""; } 
                                                    
 			String  oldPolicyProperty = BaseTestCase.getSystemProperty("java.security.policy");
+			SecurityManager oldSecMan = System.getSecurityManager();
 
 			if ( oldPolicyProperty == null ) { oldPolicyProperty = ""; }
 
-			if ( newPolicyProperty.equals( oldPolicyProperty ) ) { return; }
+			if ( newPolicyProperty.equals( oldPolicyProperty ) &&
+			        oldSecMan == sm) { return; }
 			
 			// Uninstall the current manager.
 			uninstallSecurityManager();
@@ -187,7 +211,9 @@ private static void installSecurityManager(String policyFile)
 
 
                 public Object run() {
-                    SecurityManager sm = new SecurityManager();
+                    if (sm == null)
+                        System.setSecurityManager(new SecurityManager());
+                    else
                     System.setSecurityManager(sm);
                     Policy.getPolicy().refresh();
                     return null;
