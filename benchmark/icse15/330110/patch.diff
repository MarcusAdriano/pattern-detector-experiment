diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index a3caa184..20e91779 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -1054,7 +1054,7 @@ public Object startNonPersistentService(String factoryInterface, String serviceN
 		If no implementations are listed in the properties object
 		then null is returned.
 	*/
-	protected Vector getImplementations(Properties moduleList, boolean actualModuleList) {
+	private Vector getImplementations(Properties moduleList, boolean actualModuleList) {
 
 		if (moduleList == null)
 			return null;
@@ -1249,19 +1249,36 @@ private boolean getPersistentServiceImplementation( Class possibleModule)
         return true;
     } // end of getPersistentServiceImplementation
         
-	protected Vector getDefaultImplementations() {
+	private Vector getDefaultImplementations() {
 
+		Properties moduleList = getDefaultModuleProperties();
+
+		return getImplementations(moduleList, true);
+	} // end of getDefaultImplementations
+	
+	/**
+	 * Get the complete set of module properties by
+	 * loading in contents of all the org/apache/derby/modules.properties
+	 * files. This must be executed in a privileged block otherwise
+	 * when running in a security manager environment no properties will
+	 * be returned.
+	 * @return
+	 */
+	Properties getDefaultModuleProperties()
+	{
+		// SECURITY PERMISSION - IP1 for modules in this jar
+		// or other jars shipped with the Derby release.
 		Properties moduleList = new Properties();
         boolean firstList = true;
-        ClassLoader cl = getClass().getClassLoader();
 
+        ClassLoader cl = getClass().getClassLoader();
         try {
-            for( Enumeration e = cl.getResources( "org/apache/derby/modules.properties");
+            for( Enumeration e = cl.getResources("org/apache/derby/modules.properties");
                  e.hasMoreElements() ;) {
                 URL modulesPropertiesURL = (URL) e.nextElement();
                 InputStream is = null;
                 try {
-                    is = loadModuleDefinitions( modulesPropertiesURL);
+                    is = modulesPropertiesURL.openStream();
                     if( firstList) {
                         moduleList.load( is);
                         firstList = false;
@@ -1295,18 +1312,13 @@ protected Vector getDefaultImplementations() {
             if (SanityManager.DEBUG)
                 report("Can't load implementation list: " + ioe.toString());
         }
-        if( firstList) {
 			if (SanityManager.DEBUG)
+        {
+			if (firstList)
 				report("Default implementation list not found");
-			return null;
 		}
 
-		return getImplementations(moduleList, true);
-	} // end of getDefaultImplementations
-
-	InputStream loadModuleDefinitions( URL propertyFileURL) throws IOException {
-		// SECURITY PERMISSION - IP1
-		return propertyFileURL.openStream();
+        return moduleList;
 	}
 
 	/*
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java
index 5e6d2b0f..209b242c 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java
@@ -33,6 +33,8 @@
 import java.io.InputStream;
 
 import java.net.URL;
+import java.util.Enumeration;
+import java.util.Properties;
 
 /**
 	Implementation of the monitor that uses the class loader
@@ -160,7 +162,6 @@ private String PBgetJVMProperty(String key) {
 	private String key3;
 	private Runnable task;
 	private int intValue;
-    private URL propertyFileURL;
 
 	/**
 		Initialize the system in a privileged block.
@@ -177,18 +178,12 @@ synchronized final boolean initialize(boolean lite)
 		}
 	}
 
-	synchronized final InputStream loadModuleDefinitions(URL propertyFileURL) throws IOException {
+	synchronized final Properties getDefaultModuleProperties() {
 		action = 2;
-        this.propertyFileURL = propertyFileURL;
 		try {
-			return (InputStream) java.security.AccessController.doPrivileged(this);
+			return (Properties) java.security.AccessController.doPrivileged(this);
         } catch (java.security.PrivilegedActionException pae) {
-            Exception e = pae.getException();
-            if( e instanceof IOException)
-                throw (IOException) e;
-            throw (RuntimeException) e;
-        } finally {
-            this.propertyFileURL = null;
+           throw (RuntimeException) pae.getException();
         }
     }
 
@@ -252,7 +247,7 @@ synchronized final InputStream applicationPropertiesStream()
 	}
 
 
-	public final Object run() throws IOException {
+	public synchronized final Object run() throws IOException {
 		switch (action) {
 		case 0:
 		case 1:
@@ -260,7 +255,7 @@ public final Object run() throws IOException {
 			return new Boolean(PBinitialize(action == 0));
 		case 2: 
 			// SECURITY PERMISSION - IP1
-			return super.loadModuleDefinitions( propertyFileURL);
+			return super.getDefaultModuleProperties();
 		case 3:
 			// SECURITY PERMISSION - OP1
 			return PBgetJVMProperty(key3);
