diff --git a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
index 52c76b11..8587a384 100644
--- a/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
+++ b/db/derby/code/trunk/java/build/org/apache/derbyBuild/splitmessages.java
@@ -119,6 +119,7 @@ static void initClientMessageIds()
         clientMessageIds.add(SQLState.LANG_STRING_TOO_LONG);
         clientMessageIds.add(SQLState.INVALID_COLUMN_ARRAY_LENGTH);
         clientMessageIds.add(SQLState.PROPERTY_INVALID_VALUE);
+        clientMessageIds.add(SQLState.LANG_SUBSTR_START_ADDING_LEN_OUT_OF_RANGE);
     }
 
 	public static void main(String[] args) throws Exception {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
index c09a335a..166e9772 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
@@ -21,14 +21,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.client.am;
 
-import java.io.BufferedInputStream;
-import java.io.BufferedReader;
-import java.io.InputStream;
+
 import java.io.IOException;
 import java.io.Reader;
 import java.sql.SQLException;
-import org.apache.derby.shared.common.reference.SQLState;
+
 import org.apache.derby.client.net.EncodedInputStream;
+import org.apache.derby.shared.common.reference.SQLState;
 
 public class Clob extends Lob implements java.sql.Clob {
     //---------------------navigational members-----------------------------------
@@ -625,7 +624,18 @@ public int setStringX(long pos, String str, int offset, int len) throws SqlExcep
                 new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE),
                 new Long(pos));
         }
-        if ((offset < 0) || offset > str.length() ) {
+        
+        if (str == null) {
+            throw new SqlException(agent_.logWriter_,
+                    new ClientMessageId(
+                            SQLState.BLOB_NULL_PATTERN_OR_SEARCH_STR));
+        }
+        
+        if (str.length() == 0) {
+            return 0;
+        }
+        
+        if ((offset < 0) || offset >= str.length() ) {
             throw new SqlException(agent_.logWriter_,
                 new ClientMessageId(SQLState.BLOB_INVALID_OFFSET),
                 new Integer(offset));
@@ -637,6 +647,13 @@ public int setStringX(long pos, String str, int offset, int len) throws SqlExcep
                 new Integer(len));
         }
 
+        if (offset + len > str.length()) {
+            throw new SqlException(agent_.logWriter_,
+                    new ClientMessageId(
+                            SQLState.LANG_SUBSTR_START_ADDING_LEN_OUT_OF_RANGE),
+                    new Integer(offset), new Integer(len), str);
+        }
+
         if (len == 0) {
             return 0;
         }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index aeb715fd..81f2b751 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -546,9 +546,40 @@ public int setString(long pos, String str) throws SQLException {
     public int setString(long pos, String str, int offset, int len)
             throws SQLException {
         checkValidity();
-        if (pos < 1)
+        if (pos < 1) {
             throw Util.generateCsSQLException(
                 SQLState.BLOB_BAD_POSITION, new Long(pos));
+        }
+        
+        if (pos > length() + 1) {
+            throw Util.generateCsSQLException(
+        	    SQLState.BLOB_POSITION_TOO_LARGE);
+        }
+        
+        if (str == null) {
+            throw Util.generateCsSQLException(
+        	    SQLState.BLOB_NULL_PATTERN_OR_SEARCH_STR);
+        }
+        
+        if (str.length() == 0) {
+            return 0;
+        }
+        
+        if (offset < 0 || offset >= str.length()) {
+            throw Util.generateCsSQLException(SQLState.BLOB_INVALID_OFFSET);
+        }
+        
+        if (len < 0) {
+            throw Util.generateCsSQLException(
+        	    SQLState.BLOB_NONPOSITIVE_LENGTH);
+        }
+        
+        if (len + offset > str.length()) {
+            throw Util.generateCsSQLException(
+                    SQLState.LANG_SUBSTR_START_ADDING_LEN_OUT_OF_RANGE,
+                    new Integer(offset), new Integer(len), str);
+        }
+        
         try {
             if (!this.clob.isWritable()) {
                 makeWritableClobClone();
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 47244b42..5d45e722 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -699,6 +699,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_DATE_SYNTAX_EXCEPTION                                  = "22007.S.181";
     String LANG_INVALID_FUNCTION_ARGUMENT                              = "22008.S";
 	String LANG_SUBSTR_START_OR_LEN_OUT_OF_RANGE                        = "22011";
+	String LANG_SUBSTR_START_ADDING_LEN_OUT_OF_RANGE                        = "22011.S.1";
 	String LANG_DIVIDE_BY_ZERO                                         = "22012";
     String LANG_SQRT_OF_NEG_NUMBER                                     = "22013";
     String LANG_INVALID_PARAMETER_FOR_SEARCH_POSITION                  = "22014";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java
index 2c75ffcd..e1c2cbd2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobTest.java
@@ -386,6 +386,108 @@ public void testPositionWithString_CJK()
         executeTestPositionWithStringToken(token, prefix);
     }
 
+    /**
+     * Test setString() refuses wrong offset. 
+     */
+    public void testSetStringOnWrongOffset() throws SQLException {
+        clob.setString(1, "TEST");
+        long upperLimit = clob.length() + 1;
+        String str = "AGAIN";
+        
+        try {
+            clob.setString(upperLimit, str, -1, 2);
+            fail("setString() refuses negative offset!");
+        } catch (SQLException e) {
+            assertSQLState("XJ078", e);
+        }
+        
+        try {
+            clob.setString(upperLimit, str, str.length() + 1, 1);
+            fail("setString() refuses offset greater than str.length()!");
+        } catch (SQLException e) {
+            assertSQLState("XJ078", e);
+        }
+        
+        //if (offset + len) == str.length(), it's accepted.
+        clob.setString(upperLimit, str, str.length() - 1, 1);
+        
+        try {
+            clob.setString(upperLimit, str, str.length(), 0);
+            fail("offset should be smaller than the length of str");
+        } catch (SQLException e) {
+            assertSQLState("XJ078", e);
+        }
+        
+        try {
+            clob.setString(upperLimit, str, str.length() - 1, 2);
+            fail("setString() refuses offset + len > str.length()!");
+        } catch (SQLException e) {
+            assertSQLState("22011", e);
+        }
+    }
+    
+    /**
+     * Test setString() refuses wrong len. 
+     */
+    public void testSetStringWithWrongLen() throws SQLException {
+        clob.setString(1, "TEST");
+        long upperLimit = clob.length() + 1;
+        String str = "AGAIN";
+        
+        try {
+            clob.setString(upperLimit, str, 0, -1);
+            fail("setString() refuses negative len!");
+        } catch (SQLException e) {
+            assertSQLState("XJ071", e);
+        }
+        
+        try {
+            clob.setString(upperLimit, str, 0, str.length() + 1);
+            fail("setString() refuses wrong len out of range!");
+        } catch (SQLException e) {
+            assertSQLState("22011", e);
+        }
+    }
+    
+    /**
+     * Test setString() refuses pos bigger than clob.length() + 1.
+     */
+    public void testSetStringWithBigPos() throws SQLException {
+        clob.setString(1, "TEST");
+        long upperLimit = clob.length() + 1;
+        
+        try {
+            clob.setString(upperLimit + 1, "AGAIN", 0, 2);
+            fail("pos is out of range!");
+        } catch (SQLException e) {
+            assertSQLState("XJ076", e);
+        }
+    }
+    
+    /**
+     * Test setStrinng() refuses a Null String.
+     */
+    public void testSetStringWithNull() throws SQLException {
+        clob.setString(1, "TEST");
+        long upperLimit = clob.length() + 1;
+        
+        try {
+            clob.setString(upperLimit, null, 0, 2);
+            fail("can not accepted null String!");
+        } catch (SQLException e) {
+            assertSQLState("XJ072", e);
+        }
+    }
+    
+    /**
+     * Test setString() accepts a empty String, and just return 0.
+     */
+    public void testSetStringWithEmptyString() throws SQLException {
+        clob.setString(1, "TEST");
+        long upperLimit = clob.length() + 1;              
+        assertEquals(0, clob.setString(upperLimit, "", 0, 0));           
+    }
+
     /**
      * Truncating a Clob to the empty string.
      */
