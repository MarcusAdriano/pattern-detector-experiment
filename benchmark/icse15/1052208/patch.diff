diff --git a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/ClientWeavingHook.java b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/ClientWeavingHook.java
index 28e7a5b9..829ed68f 100644
--- a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/ClientWeavingHook.java
+++ b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/ClientWeavingHook.java
@@ -95,11 +95,11 @@ private WeavingData processHeader(Bundle consumerBundle, String consumerHeader)
         List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
 
         for (PathElement element : HeaderParser.parseHeader(consumerHeader)) {
-            Set<ConsumerRestriction> restrictions = new HashSet<ConsumerRestriction>();
-            MethodRestriction methodRestriction = null;
             String name = element.getName().trim();
+
             String className;
             String methodName;
+            MethodRestriction methodRestriction;
             
             int hashIdx = name.indexOf('#');
             if (hashIdx > 0) {                
@@ -107,7 +107,6 @@ private WeavingData processHeader(Bundle consumerBundle, String consumerHeader)
                 int braceIdx = name.substring(hashIdx).indexOf('(');
                 if (braceIdx > 0) {
                     methodName = name.substring(hashIdx + 1, hashIdx + braceIdx);
-                    // Map<Integer, Map<String, String>> args = new HashMap<Integer, Map<String,String>>();
                     ArgRestrictions argRestrictions = new ArgRestrictions();
                     int closeIdx = name.substring(hashIdx).indexOf(')');
                     if (closeIdx > 0) {
@@ -117,7 +116,7 @@ private WeavingData processHeader(Bundle consumerBundle, String consumerHeader)
                                 int argNumber = 0;
                                 for (String s : classes.split(",")) {
                                     int idx = s.indexOf('[');
-                                    int end = s.indexOf(idx, ']');
+                                    int end = s.indexOf(']', idx);
                                     if (idx > 0 && end > idx) {
                                         argRestrictions.addRestriction(argNumber, s.substring(0, idx), s.substring(idx + 1, end));
                                     } else {
@@ -143,13 +142,15 @@ private WeavingData processHeader(Bundle consumerBundle, String consumerHeader)
                     className = ServiceLoader.class.getName();
                     methodName = "load";
                     ArgRestrictions argRestrictions = new ArgRestrictions();
-                    argRestrictions.addRestriction(1, Class.class.getName());
+                    argRestrictions.addRestriction(0, Class.class.getName());
                     methodRestriction = new MethodRestriction(methodName, argRestrictions);
                 } else {
                     throw new IllegalArgumentException("Must at least specify class name and method name: " + name);
                 }
             }  
             ConsumerRestriction restriction = new ConsumerRestriction(className, methodRestriction);
+
+            Set<ConsumerRestriction> restrictions = new HashSet<ConsumerRestriction>();
             restrictions.add(restriction);
                 
             String bsn = element.getAttribute("bundle");
diff --git a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/Util.java b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/Util.java
index 06feb82a..53d4a2da 100644
--- a/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/Util.java
+++ b/incubator/aries/trunk/spi-fly/contrib/pilot_using_weavinghook/SpiFly/src/org/apache/aries/spifly/Util.java
@@ -78,7 +78,7 @@ private static ClassLoader findContextClassloader(Bundle consumerBundle, String
         activator.log(LogService.LOG_DEBUG, "Found bundles providing " + requestedClass + ": " + bundles);
                 
         Map<Pair<Integer, String>, String> args = new HashMap<Pair<Integer,String>, String>();
-        args.put(new Pair<Integer, String>(1, Class.class.getName()), clsArg.getName());
+        args.put(new Pair<Integer, String>(0, Class.class.getName()), clsArg.getName());
         Collection<Bundle> allowedBundles = activator.findConsumerRestrictions(consumerBundle, className, methodName, args);
 
         if (allowedBundles != null) {
