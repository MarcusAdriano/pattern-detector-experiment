diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/dictionary/IndexRowGenerator.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/dictionary/IndexRowGenerator.java
index 4a9e30c9..09112d53 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/dictionary/IndexRowGenerator.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/dictionary/IndexRowGenerator.java
@@ -270,7 +270,7 @@ public IndexRowGenerator()
 	}
 
 	/**
-     * @see IndexDescriptor#isisUniqueWithDuplicateNulls
+     * @see IndexDescriptor#isUniqueWithDuplicateNulls
      */
 	public boolean isUniqueWithDuplicateNulls()
 	{
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java
index aa7cdc96..1d4cb5ac 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java
@@ -115,7 +115,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * @param forCreateTable                Being executed within a CREATE TABLE
      *                                      statement
      * @param unique		                True means it will be a unique index
-     * @param isUniqueWithDuplicateNulls    True means index check and disallow
+     * @param uniqueWithDuplicateNulls      True means index check and disallow
      *                                      any duplicate key if key has no 
      *                                      column with a null value.  If any 
      *                                      column in the key has a null value,
@@ -153,6 +153,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
             Properties		properties)
 	{
 		super(tableId, indexName, tableName, schemaName);
+
         this.forCreateTable = forCreateTable;
 		this.unique = unique;
 		this.uniqueWithDuplicateNulls = uniqueWithDuplicateNulls;
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/UniqueWithDuplicateNullsIndexSortObserver.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/UniqueWithDuplicateNullsIndexSortObserver.java
index 162c5235..8a3db9bb 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/UniqueWithDuplicateNullsIndexSortObserver.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/UniqueWithDuplicateNullsIndexSortObserver.java
@@ -47,15 +47,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * 		if language is reusing row wrappers.
      * @param isConstraint is this part of a constraint
      * @param indexOrConstraintName name of index of constraint
-     * @param distinct	If true, toss out duplicates.
-     * 		Otherwise, retain them.
      * @param execRow	ExecRow to use as source of clone for store.
      * @param reuseWrappers	Whether or not we can reuse the wrappers
      * @param tableName name of the table
      */
-    public UniqueWithDuplicateNullsIndexSortObserver(boolean doClone, boolean isConstraint,
-            String indexOrConstraintName, ExecRow execRow,
-            boolean reuseWrappers, String tableName) {
+    public UniqueWithDuplicateNullsIndexSortObserver(
+    boolean doClone, 
+    boolean isConstraint,
+    String  indexOrConstraintName, 
+    ExecRow execRow,
+    boolean reuseWrappers, 
+    String  tableName) {
         super(doClone, false, execRow, reuseWrappers);
         this.isConstraint = isConstraint;
         this.indexOrConstraintName = indexOrConstraintName;
@@ -67,7 +69,7 @@ public UniqueWithDuplicateNullsIndexSortObserver(boolean doClone, boolean isCons
      * exception if the duplicates has no null part in the key. 
      * @param in new key
      * @param dup the new key is duplicate of this key
-     * @returns DVD [] if there is at least one null in
+     * @return DVD [] if there is at least one null in
      * the key else thorws StandardException
      * @throws StandardException is the duplicate key has all non null parts
      */
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/ExternalSortFactory.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/ExternalSortFactory.java
index 33d4fb00..7f073b49 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/ExternalSortFactory.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/ExternalSortFactory.java
@@ -124,7 +124,7 @@ public UUID primaryFormat()
 	 * Returns merge sort implementation. Extending classes can overide this 
 	 * method to customize sorting.
      *
-	 * @returns MergeSort implementation
+	 * @return MergeSort implementation
 	 */
 	protected MergeSort getMergeSort() 
     {
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/UniqueWithDuplicateNullsExternalSortFactory.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/UniqueWithDuplicateNullsExternalSortFactory.java
index ba3ff14c..854f03bc 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/UniqueWithDuplicateNullsExternalSortFactory.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/access/sort/UniqueWithDuplicateNullsExternalSortFactory.java
@@ -20,28 +20,38 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 
 package org.apache.derby.impl.store.access.sort;
+
+// for javadoc
+import org.apache.derby.iapi.store.access.conglomerate.MethodFactory;
+
 /**
  * Method factory to support sorting of Almost unique index. This class 
  * overrides getMergeSort of ExternalSortFactory to return UniqueWithDuplicateNullsMergeSort.
  */
-public class UniqueWithDuplicateNullsExternalSortFactory extends ExternalSortFactory {
-    private static final String IMPLEMENTATIONID = "sort almost unique external";
+public class UniqueWithDuplicateNullsExternalSortFactory 
+    extends ExternalSortFactory 
+{
+    private static final String IMPLEMENTATIONID = 
+        "sort almost unique external";
     
-    protected MergeSort getMergeSort() {
+    protected MergeSort getMergeSort() 
+    {
         return new UniqueWithDuplicateNullsMergeSort ();
     }
 
     /**
      * @see MethodFactory#primaryImplementationType
      */
-    public String primaryImplementationType() {
+    public String primaryImplementationType() 
+    {
         return IMPLEMENTATIONID;
     }
 
     /**
      * @see MethodFactory#supportsImplementation
      */
-    public boolean supportsImplementation(String implementationId) {
-        return IMPLEMENTATIONID.equals (implementationId);
+    public boolean supportsImplementation(String implementationId) 
+    {
+        return IMPLEMENTATIONID.equals(implementationId);
     }
 }
