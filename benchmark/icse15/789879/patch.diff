diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
index 0bc04cd7..efce29db 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
@@ -33,7 +33,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.ClassName;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.classfile.VMOpcode;
-import org.apache.derby.iapi.services.compiler.LocalField;
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.iapi.services.io.FormatableBitSet;
@@ -1671,12 +1670,10 @@ public boolean requiresDeferredProcessing()
 		// 	java.lang.Object userExprFun( ) { }
 		MethodBuilder userExprFun = ecb.newUserExprFun();
 
-		/* Declare the field and load it with the current row */
-		LocalField field = ecb.newFieldDeclaration(Modifier.PRIVATE, ClassName.ExecRow);
+        /* Push the the current row onto the stack. */
         userExprFun.pushThis();
         userExprFun.push( rsNumber );
         userExprFun.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, "getCurrentRow", ClassName.Row, 1);
-        userExprFun.putField( field );
 
 		// Loop through the result columns, computing generated columns
         // as we go. 
@@ -1698,7 +1695,7 @@ public boolean requiresDeferredProcessing()
 
             if ( !rc.hasGenerationClause() ) { continue; }
 
-            userExprFun.getField(field); // instance
+            userExprFun.dup();       // instance (current row)
             userExprFun.push(i + 1); // arg1
 
             rc.generateExpression(ecb, userExprFun);
