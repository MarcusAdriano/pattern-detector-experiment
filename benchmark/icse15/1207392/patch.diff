diff --git a/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexes.java b/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexes.java
index 0b0b1f64..9ea7aa46 100644
--- a/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexes.java
+++ b/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexes.java
@@ -999,65 +999,6 @@ public void testExistingDeletes() throws Exception {
 
   }
   
-  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to
-  // a CFS, given MP preferences
-  public void testCopyIntoCFS() throws Exception {
-    // create an index, no CFS (so we can assert that existing segments are not affected)
-    Directory target = newDirectory();
-    LogMergePolicy lmp = newLogMergePolicy(false);
-    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);
-    IndexWriter w = new IndexWriter(target, conf);
-    w.addDocument(new Document());
-    w.commit();
-    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());
-
-    // prepare second index, no-CFS too + .del file + separate norms file
-    Directory src = newDirectory();
-    LogMergePolicy lmp2 = newLogMergePolicy(false);
-    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,
-        new MockAnalyzer(random)).setMergePolicy(lmp2);
-    IndexWriter w2 = new IndexWriter(src, conf2);
-    Document doc = new Document();
-    doc.add(new Field("c", "some text", Store.YES, Index.ANALYZED));
-    w2.addDocument(doc);
-    doc = new Document();
-    doc.add(new Field("d", "delete", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
-    w2.addDocument(doc);
-    w2.commit();
-    w2.deleteDocuments(new Term("d", "delete"));
-    w2.commit();
-    w2.close();
-
-    // create separate norms file
-    IndexReader r = IndexReader.open(src, false);
-    r.setNorm(0, "c", (byte) 1);
-    r.close();
-    assertTrue(".del file not found", src.fileExists("_0_1.del"));
-    assertTrue("separate norms file not found", src.fileExists("_0_1.s0"));
-    
-    // Case 1: force 'CFS' on target
-    lmp.setUseCompoundFile(true);
-    lmp.setNoCFSRatio(1.0);
-    w.addIndexes(src);
-    w.commit();
-    assertFalse("existing segments should not be modified by addIndexes", w.segmentInfos.info(0).getUseCompoundFile());
-    assertTrue("segment should have been converted to a CFS by addIndexes", w.segmentInfos.info(1).getUseCompoundFile());
-    assertTrue(".del file not found", target.fileExists("_1_1.del"));
-    assertTrue("separate norms file not found", target.fileExists("_1_1.s0"));
-
-    // Case 2: LMP disallows CFS
-    lmp.setUseCompoundFile(false);
-    w.addIndexes(src);
-    w.commit();
-    assertFalse("segment should not have been converted to a CFS by addIndexes if MP disallows", w.segmentInfos.info(2).getUseCompoundFile());
-
-    w.close();
-    
-    // cleanup
-    src.close();
-    target.close();
-  }
-
   // LUCENE-3575
   public void testFieldNamesChanged() throws IOException {
     Directory d1 = newDirectory();
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index e8472777..85cbd445 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -3095,10 +3095,7 @@ public void addIndexesNoOptimize(Directory... dirs)
    * <p>
    * <b>NOTE:</b> this method only copies the segments of the incomning indexes
    * and does not merge them. Therefore deleted documents are not removed and
-   * the new segments are not merged with the existing ones. Also, if the merge 
-   * policy allows compound files, then any segment that is not compound is 
-   * converted to such. However, if the segment is compound, it is copied as-is
-   * even if the merge policy does not allow compound files.
+   * the new segments are not merged with the existing ones.
    * 
    * <p>
    * <p>This requires this index not be among those to be added.
@@ -3121,7 +3118,6 @@ public void addIndexes(Directory... dirs) throws CorruptIndexException, IOExcept
         message("flush at addIndexes(Directory...)");
       flush(false, true);
       
-      int docCount = 0;
       List<SegmentInfo> infos = new ArrayList<SegmentInfo>();
       Comparator<String> versionComparator = StringHelper.getVersionComparator();
       for (Directory dir : dirs) {
@@ -3135,7 +3131,6 @@ public void addIndexes(Directory... dirs) throws CorruptIndexException, IOExcept
         for (SegmentInfo info : sis) {
           assert !infos.contains(info): "dup info dir=" + info.dir + " name=" + info.name;
           
-          docCount += info.docCount;
           String newSegName = newSegmentName();
           String dsName = info.getDocStoreSegment();
           
@@ -3143,21 +3138,8 @@ public void addIndexes(Directory... dirs) throws CorruptIndexException, IOExcept
             message("addIndexes: process segment origName=" + info.name + " newName=" + newSegName + " dsName=" + dsName + " info=" + info);
           }
           
-          // create CFS only if the source segment is not CFS, and MP agrees it
-          // should be CFS.
-          boolean createCFS;
-          synchronized (this) { // Guard segmentInfos
-            createCFS = !info.getUseCompoundFile()
-                && mergePolicy.useCompoundFile(segmentInfos, info)
-                // optimize case only for segments that don't share doc stores
-                && versionComparator.compare(info.getVersion(), "3.1") >= 0;
-          }
-
-          if (createCFS) {
-            copySegmentIntoCFS(info, newSegName);
-          } else {
             copySegmentAsIs(info, newSegName, dsNames, dsFilesCopied);
-          }
+
           infos.add(info);
         }
       }      
@@ -3266,30 +3248,6 @@ public void addIndexes(IndexReader... readers) throws CorruptIndexException, IOE
     }
   }
 
-  /** Copies the segment into the IndexWriter's directory, as a compound segment. */
-  private void copySegmentIntoCFS(SegmentInfo info, String segName) throws IOException {
-    String segFileName = IndexFileNames.segmentFileName(segName, IndexFileNames.COMPOUND_FILE_EXTENSION);
-    Collection<String> files = info.files();
-    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, segFileName);
-    for (String file : files) {
-      String newFileName = segName + IndexFileNames.stripSegmentName(file);
-      if (!IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION)
-          && !IndexFileNames.isSeparateNormsFile(file)) {
-        cfsWriter.addFile(file, info.dir);
-      } else {
-        assert !directory.fileExists(newFileName): "file \"" + newFileName + "\" already exists";
-        info.dir.copy(directory, file, newFileName);
-      }
-    }
-    
-    // Create the .cfs
-    cfsWriter.close();
-    
-    info.dir = directory;
-    info.name = segName;
-    info.setUseCompoundFile(true);
-  }
-  
   /** Copies the segment files as-is into the IndexWriter's directory. */
   private void copySegmentAsIs(SegmentInfo info, String segName,
       Map<String, String> dsNames, Set<String> dsFilesCopied)
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java
index 83cc93be..682a8a74 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java
@@ -1012,65 +1012,6 @@ public void testExistingDeletes() throws Exception {
 
   }
   
-  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to
-  // a CFS, given MP preferences
-  public void testCopyIntoCFS() throws Exception {
-    // create an index, no CFS (so we can assert that existing segments are not affected)
-    Directory target = newDirectory();
-    LogMergePolicy lmp = newLogMergePolicy(false);
-    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);
-    IndexWriter w = new IndexWriter(target, conf);
-    w.addDocument(new Document());
-    w.commit();
-    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());
-
-    // prepare second index, no-CFS too + .del file + separate norms file
-    Directory src = newDirectory();
-    LogMergePolicy lmp2 = newLogMergePolicy(false);
-    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,
-        new MockAnalyzer(random)).setMergePolicy(lmp2);
-    IndexWriter w2 = new IndexWriter(src, conf2);
-    Document doc = new Document();
-    doc.add(new Field("c", "some text", Store.YES, Index.ANALYZED));
-    w2.addDocument(doc);
-    doc = new Document();
-    doc.add(new Field("d", "delete", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
-    w2.addDocument(doc);
-    w2.commit();
-    w2.deleteDocuments(new Term("d", "delete"));
-    w2.commit();
-    w2.close();
-
-    // create separate norms file
-    IndexReader r = IndexReader.open(src, false);
-    r.setNorm(0, "c", (byte) 1);
-    r.close();
-    assertTrue(".del file not found", src.fileExists("_0_1.del"));
-    assertTrue("separate norms file not found", src.fileExists("_0_1.s0"));
-    
-    // Case 1: force 'CFS' on target
-    lmp.setUseCompoundFile(true);
-    lmp.setNoCFSRatio(1.0);
-    w.addIndexes(src);
-    w.commit();
-    assertFalse("existing segments should not be modified by addIndexes", w.segmentInfos.info(0).getUseCompoundFile());
-    assertTrue("segment should have been converted to a CFS by addIndexes", w.segmentInfos.info(1).getUseCompoundFile());
-    assertTrue(".del file not found", target.fileExists("_1_1.del"));
-    assertTrue("separate norms file not found", target.fileExists("_1_1.s0"));
-
-    // Case 2: LMP disallows CFS
-    lmp.setUseCompoundFile(false);
-    w.addIndexes(src);
-    w.commit();
-    assertFalse("segment should not have been converted to a CFS by addIndexes if MP disallows", w.segmentInfos.info(2).getUseCompoundFile());
-
-    w.close();
-    
-    // cleanup
-    src.close();
-    target.close();
-  }
-
   // LUCENE-3575
   public void testFieldNamesChanged() throws IOException {
     Directory d1 = newDirectory();
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestDirectoryReader.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestDirectoryReader.java
index f9834c6e..b4eff3e5 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestDirectoryReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestDirectoryReader.java
@@ -38,7 +38,7 @@
   @Override
   public void setUp() throws Exception {
     super.setUp();
-    dir = newDirectory();
+    dir = createDirectory();
     doc1 = new Document();
     doc2 = new Document();
     DocHelper.setupDoc(doc1);
@@ -57,6 +57,10 @@ public void tearDown() throws Exception {
     super.tearDown();
   }
 
+  protected Directory createDirectory() throws IOException {
+    return newDirectory();
+  }
+
   protected IndexReader openReader() throws IOException {
     IndexReader reader;
     reader = IndexReader.open(dir, false);
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java
index 5a3119b1..5e3e70f0 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
@@ -441,6 +442,10 @@ public IndexOutput createOutput(String name) throws IOException {
       return fsDir.createOutput(name);
     }
     @Override
+    public void sync(Collection<String> names) throws IOException {
+      fsDir.sync(names);
+    }
+    @Override
     public void close() throws IOException {
       fsDir.close();
     }
@@ -491,6 +496,9 @@ public void testExceptions() throws Throwable {
       Directory dir = new FaultyFSDirectory(indexDir);
       IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
           TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));
+      if (VERBOSE) {
+        writer.setInfoStream(System.out);
+      }
       for(int i=0;i<2;i++)
         writer.addDocument(testDoc);
       writer.forceMerge(1);
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestMultiReader.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestMultiReader.java
index c934b4dd..dd39691e 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestMultiReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestMultiReader.java
@@ -19,8 +19,20 @@
 
 import java.io.IOException;
 
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.MockDirectoryWrapper;
+
 public class TestMultiReader extends TestDirectoryReader {
 
+  // TODO: files are never fsynced if you do what this test is doing,
+  // so the checkindex is disabled.
+  @Override
+  protected Directory createDirectory() throws IOException {
+    MockDirectoryWrapper mdw = newDirectory();
+    mdw.setCheckIndexOnClose(false);
+    return mdw;
+  }
+
   @Override
   protected IndexReader openReader() throws IOException {
     IndexReader reader;
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java b/lucene/dev/branches/branch_3x/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java
index 13909115..fd09b654 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java
@@ -21,6 +21,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -207,10 +208,13 @@ public synchronized void crash() throws IOException {
     
     while(it.hasNext()) {
       String name = it.next();
-      int damage = randomState.nextInt(4);
+      int damage = randomState.nextInt(5);
+      String action = null;
       if (damage == 0) {
+        action = "deleted";
         deleteFile(name, true);
       } else if (damage == 1) {
+        action = "zeroed";
         // Zero out file entirely
         long length = fileLength(name);
         byte[] zeroes = new byte[256];
@@ -223,17 +227,25 @@ public synchronized void crash() throws IOException {
         }
         out.close();
       } else if (damage == 2) {
+        action = "partially truncated";
         // Partially Truncate the file:
         IndexOutput out = delegate.createOutput(name);
         out.setLength(fileLength(name)/2);
         out.close();
+      } else if (damage == 3) {
+        // The file survived intact:
+        action = "didn't change";
       } else {
+        action = "fully truncated";
         // Totally truncate the file to zero bytes
         deleteFile(name, true);
         IndexOutput out = delegate.createOutput(name);
         out.setLength(0);
         out.close();
       }
+      if (LuceneTestCase.VERBOSE) {
+        System.out.println("MockDirectoryWrapper: " + action + " unsynced file: " + name);
+      }
     }
   }
 
@@ -506,12 +518,19 @@ public synchronized void close() throws IOException {
       throw new RuntimeException("MockDirectoryWrapper: cannot close: there are still open locks: " + openLocks);
     }
     open = false;
-    if (checkIndexOnClose && IndexReader.indexExists(this)) {
+    if (checkIndexOnClose) {
+      if (IndexReader.indexExists(this)) {
+        if (LuceneTestCase.VERBOSE) {
+          System.out.println("\nNOTE: MockDirectoryWrapper: now crash");
+        }
+        unSyncedFiles.remove("segments.gen"); // otherwise we add minutes to the tests: LUCENE-3605
+        crash(); // corrumpt any unsynced-files
       if (LuceneTestCase.VERBOSE) {
         System.out.println("\nNOTE: MockDirectoryWrapper: now run CheckIndex");
       } 
       _TestUtil.checkIndex(this);
     }
+    }
     delegate.close();
   }
 
