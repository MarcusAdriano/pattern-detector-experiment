diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
index 3b339c7a..43d79958 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
@@ -239,7 +239,9 @@ public String toString()
 			return "GenericColumnDescriptor\n\tname: "+name+
 				"\n\tTable: "+schemaName+"."+tableName+
 				"\n\tcolumnPos: "+columnPos+
-				"\n\tType: "+type;
+				"\n\tType: "+type+
+				"\n\tisAutoincrement: " + isAutoincrement +
+				"\n\thasGenerationClause: " + hasGenerationClause;
 		}
 		else
 		{
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java
index ffae1928..a7297e07 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java
@@ -168,7 +168,12 @@ public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize
 		{
 			// the only difference between getClone and cloneObject is cloneObject does
 			// not objectify a stream.  We use getClone here.  Beetle 4896.
-			newArray[i] = origArray[i].getClone();
+
+			// DERBY-4413 shows that the value for a generated column will be
+			// null as the result set is computed as part of an INSERT INTO, so
+			// accept a null also.
+			newArray[i] =
+				(origArray[i] != null ? origArray[i].getClone() : null);
 		}
 
 		return newArray;
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java
index 19cad5c5..8bd93b3b 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java
@@ -126,6 +126,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	**/
 	protected boolean columnOrderingNullsLowMap[];
 
+
+	/**
+    Determine whether a column is used for ordering or not.
+	**/
+	private boolean isOrderingColumn[];
+
 	/**
 	The sort observer.  May be null.  Used as a callback.
 	**/
@@ -455,8 +461,18 @@ void checkColumnTypes(DataValueDescriptor[] row)
                 Object col2 = template[colid];
                 if (col1 == null)
 				{
-					SanityManager.THROWASSERT(
-						"col[" + colid + "]  is null");
+					if (!isOrderingColumn[colid]) {
+
+						// DERBY-4413 shows that the value for a generated
+						// column will be null as the result set is computed as
+						// part of an INSERT INTO, so accept a null also.
+						// This column would not be part of the sort key.
+
+						continue;
+
+					} else {
+						SanityManager.THROWASSERT("col[" + colid + "] is null");
+					}
 				}
 						
                 if (!(col1 instanceof CloneableObject))
@@ -546,12 +562,26 @@ public void initialize(
         columnOrderingMap          = new int[columnOrdering.length];
         columnOrderingAscendingMap = new boolean[columnOrdering.length];
         columnOrderingNullsLowMap  = new boolean[columnOrdering.length];
+
+		if (SanityManager.DEBUG) {
+			isOrderingColumn = new boolean[template.length];
+
+			for (int i = 0; i < isOrderingColumn.length; i++) {
+				isOrderingColumn[i] = false;
+			}
+		}
+
         for (int i = 0; i < columnOrdering.length; i++)
         {
             columnOrderingMap[i] = columnOrdering[i].getColumnId();
             columnOrderingAscendingMap[i] = columnOrdering[i].getIsAscending();
             columnOrderingNullsLowMap[i] = columnOrdering[i].getIsNullsOrderedLow();
+
+			if (SanityManager.DEBUG) {
+				isOrderingColumn[columnOrderingMap[i]] = true;
         }
+        }
+
 
 		// No inserter or scan yet.
 		this.inserter = null;
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index b0909f0c..9c558516 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -5372,6 +5372,52 @@ public  void    test_030_derby_4146()
     }
     
 
+   /**
+    * Test INSERT INTO .. select distinct in presence of generated column.
+    * Cf DERBY-4413.
+    */
+    public  void    test_031_derby_4413()
+            throws Exception
+    {
+        Connection  conn = getConnection();
+
+        //
+        // Schema
+        //
+        goodStatement
+            (
+                conn,
+                "create table t_4413 (" +
+                "     i integer, " +
+                "     j integer not null generated always as (i*2))"
+            );
+        goodStatement
+            (
+                conn,
+                "insert into t_4413(i) values 1,2,1"
+            );
+
+        goodStatement
+            (
+                conn,
+                "insert into t_4413(i) select distinct i from t_4413"
+            );
+        assertResults
+            (
+                conn,
+                "select * from t_4413",
+                new String[][]
+                {
+                    { "1", "2", },
+                    { "2", "4", },
+                    { "1", "2", },
+                    { "1", "2", },
+                    { "2", "4", },
+                },
+                false
+            );
+
+    }
 
 
     ///////////////////////////////////////////////////////////////////////////////////
