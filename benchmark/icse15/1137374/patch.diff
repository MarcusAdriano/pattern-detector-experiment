diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java
index 3237b334..79e2cd1b 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java
@@ -109,7 +109,7 @@ public int run(String[] args) throws IOException, ClassNotFoundException, Interr
     addOutputOption();
     addOption("recommenderClassName", "r", "Name of recommender class to instantiate");
     addOption("numRecommendations", "n", "Number of recommendations per user", "10");
-    addOption("usersFile", "u", "Number of recommendations per user", null);
+    addOption("usersFile", "u", "File of users to recommend for", null);
     
     Map<String,String> parsedArgs = parseArguments(args);
     if (parsedArgs == null) {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/UserIDsMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/UserIDsMapper.java
index 70bfaf60..99103d51 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/UserIDsMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/UserIDsMapper.java
@@ -18,6 +18,7 @@
 package org.apache.mahout.cf.taste.hadoop.pseudo;
 
 import java.io.IOException;
+import java.util.regex.Pattern;
 
 import org.apache.hadoop.io.LongWritable;
 import org.apache.hadoop.io.NullWritable;
@@ -31,13 +32,14 @@
 public final class UserIDsMapper extends
     Mapper<LongWritable,Text, VarLongWritable,NullWritable> {
   
+  private static final Pattern DELIMITER = Pattern.compile("[\t,]");
+
   @Override
   protected void map(LongWritable key,
                      Text value,
                      Context context) throws IOException, InterruptedException {
-    String line = value.toString();
-    int comma = line.indexOf(',');
-    long userID = comma >= 0 ? Long.parseLong(line.substring(0, comma)) : Long.parseLong(line);
+    String[] tokens = DELIMITER.split(value.toString());
+    long userID = Long.parseLong(tokens[0]);
     context.write(new VarLongWritable(userID), NullWritable.get());
   }
   
