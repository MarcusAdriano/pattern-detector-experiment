diff --git a/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java b/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
index f00b102f..32fd8eb8 100644
--- a/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
+++ b/aries/trunk/util/util-r42/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
@@ -31,6 +31,7 @@
 import org.apache.aries.util.ManifestHeaderUtils;
 import org.apache.aries.util.VersionRange;
 import org.osgi.framework.Constants;
+import org.osgi.framework.Version;
 
 
 public class ManifestHeaderProcessor
@@ -40,6 +41,31 @@
   private static final String LESS_EQ_OP = "<=";
   private static final String GREATER_EQ_OP = ">=";
 
+  /**
+   * A GenericMetadata is either a Generic Capability or a Generic Requirement
+   */
+  public static class GenericMetadata {
+    private final String namespace;
+    private final Map<String, Object> attributes = new HashMap<String, Object>();
+    private final Map<String, String> directives = new HashMap<String, String>();
+
+    public GenericMetadata(String namespace) {
+      this.namespace = namespace;
+    }
+
+    public String getNamespace() {
+      return namespace;
+    }
+
+    public Map<String, Object> getAttributes() {
+      return attributes;
+    }
+
+    public Map<String, String> getDirectives() {
+      return directives;
+    }
+  }
+
   /**
    * A simple class to associate two types.
    *
@@ -372,6 +398,96 @@ private static void genericImportExportProcess(NameValueCollection out, String s
     return retval;    
   }
   
+  /**
+   * Parse a generic capability header. For example<br/>
+   *   com.acme.myns;mylist:List<String>="nl,be,fr,uk";myver:Version=1.3;long:Long="1234";d:Double="3.14";myattr=xyz,
+   *   com.acme.myns;myattr=abc
+   * @param s The header to be parsed
+   * @return A list of GenericMetadata objects each representing an individual capability. The values in the attribute map
+   *   are of the specified datatype.
+   */
+  public static List<GenericMetadata> parseCapabilityString(String s) {
+    return parseGenericMetadata(s);
+  }
+
+  /**
+   * Parse a generic capability header. For example<br/>
+   *   com.acme.myns;mylist:List<String>="nl,be,fr,uk";myver:Version=1.3;long:Long="1234";d:Double="3.14";myattr=xyz,
+   *   com.acme.myns;myattr=abc
+   * @param s The header to be parsed
+   * @return A list of GenericMetadata objects each representing an individual capability. The values in the attribute map
+   *   are of the specified datatype.
+   */
+  public static List<GenericMetadata> parseRequirementString(String s) {
+    return parseGenericMetadata(s);
+  }
+
+  private static List<GenericMetadata> parseGenericMetadata(String s) {
+    List<GenericMetadata> capabilities = new ArrayList<GenericMetadata>();
+
+    List<String> entries = split(s, ",");
+    for(String e : entries){
+      List<NameValuePair> nvpList = genericNameWithNameValuePairProcess(e);
+
+      for(NameValuePair nvp : nvpList) {
+        String namespace = nvp.getName();
+        GenericMetadata cap = new GenericMetadata(namespace);
+        capabilities.add(cap);
+
+        Map<String, String> attrMap = nvp.getAttributes();
+        for (Map.Entry<String, String> entry : attrMap.entrySet()) {
+          String k = entry.getKey();
+          String v = entry.getValue();
+          if (k.contains(":")) {
+            if (k.endsWith(":")) {
+              // a directive
+              cap.getDirectives().put(k.substring(0, k.length() - 1), v);
+            } else {
+              // an attribute with its datatype specified
+              parseTypedAttribute(k, v, cap);
+            }
+          } else {
+            // ordinary (String) attribute
+            cap.getAttributes().put(k, v);
+          }
+        }
+      }
+    }
+
+    return capabilities;
+  }
+
+  private static void parseTypedAttribute(String k, String v, GenericMetadata cap) {
+    int idx = k.indexOf(':');
+    String name = k.substring(0, idx);
+    String type = k.substring(idx + 1);
+
+    if (type.startsWith("List<") && type.endsWith(">")) {
+      String subtype = type.substring("List<".length(), type.length() - 1).trim();
+      List<Object> l = new ArrayList<Object>();
+      for (String s : v.split(",")) {
+        l.add(getTypedValue(k, subtype, s));
+      }
+      cap.getAttributes().put(name, l);
+    } else {
+      cap.getAttributes().put(name, getTypedValue(k, type.trim(), v));
+    }
+  }
+
+  private static Object getTypedValue(String k, String type, String v) {
+    if ("String".equals(type)) {
+      return v;
+    } else if ("Long".equals(type)) {
+      return Long.parseLong(v);
+    } else if ("Double".equals(type)) {
+      return Double.parseDouble(v);
+    } else if ("Version".equals(type)) {
+      return Version.parseVersion(v);
+    }
+    throw new IllegalArgumentException(k + "=" + v);
+  }
+
+
   /**
    * Parse a bundle symbolic name.<p>
    *   bundlesymbolicname;attrib=value;attrib=value
@@ -666,6 +782,5 @@ else if (LESS_EQ_OP.equals(op))
     }
     return result;
   }
-
 }
 
diff --git a/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/manifest/ManifestHeaderProcessorTest.java b/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/manifest/ManifestHeaderProcessorTest.java
index 09fc0fbb..db036674 100644
--- a/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/manifest/ManifestHeaderProcessorTest.java
+++ b/aries/trunk/util/util-r42/src/test/java/org/apache/aries/util/manifest/ManifestHeaderProcessorTest.java
@@ -27,15 +27,16 @@
 import static org.junit.Assert.fail;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
 import org.apache.aries.util.VersionRange;
-import org.apache.aries.util.manifest.ManifestHeaderProcessor;
-import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
+import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
 import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
 import org.junit.Test;
+import org.osgi.framework.Version;
 
 public class ManifestHeaderProcessorTest
 {
@@ -546,4 +547,76 @@ public void testExactVersion() throws Exception
       
       
     }
+
+    @Test
+    public void testCapabilityHeader() throws Exception {
+      String s =
+          "com.acme.dictionary; effective:=resolve; from:String=nl; to=de; version:Version=3.4.0.test;somedir:=test, " +
+          "com.acme.dictionary; filter:=\"(&(width>=1000)(height>=1000))\", " +
+          "com.acme.ip2location;country:List<String>=\"nl,be,fr,uk\";version:Version=1.3;long:Long=" + Long.MAX_VALUE + ";d:Double=\"2.2250738585072012e-308\"";
+
+      List<GenericMetadata> capabilities = ManifestHeaderProcessor.parseCapabilityString(s);
+      testCapabilitiesOrRequirements(capabilities);
+    }
+
+    @Test
+    public void testRequirementHeader() throws Exception {
+      String s =
+          "com.acme.dictionary; effective:=resolve; from:String=nl; to=de; version:Version=3.4.0.test;somedir:=test, " +
+          "com.acme.dictionary; filter:=\"(&(width>=1000)(height>=1000))\", " +
+          "com.acme.ip2location;country:List<String>=\"nl,be,fr,uk\";version:Version=1.3;long:Long=" + Long.MAX_VALUE + ";d:Double=\"2.2250738585072012e-308\"";
+
+      List<GenericMetadata> capabilities = ManifestHeaderProcessor.parseRequirementString(s);
+      testCapabilitiesOrRequirements(capabilities);
+    }
+
+    private void testCapabilitiesOrRequirements(List<GenericMetadata> metadata) {
+      assertEquals(3, metadata.size());
+
+      boolean found1 = false, found2 = false, found3 = false;
+      for (GenericMetadata cap : metadata) {
+        if ("com.acme.dictionary".equals(cap.getNamespace()) && cap.getDirectives().containsKey("effective")) {
+          testDictionaryCapability1(cap);
+          found1 = true;
+        } else if ("com.acme.dictionary".equals(cap.getNamespace()) && cap.getDirectives().containsKey("filter")) {
+          testDictionaryCapability2(cap);
+          found2 = true;
+        } else if ("com.acme.ip2location".equals(cap.getNamespace())) {
+          testIP2LocationCapability(cap);
+          found3 = true;
+        }
+      }
+
+      assertTrue(found1);
+      assertTrue(found2);
+      assertTrue(found3);
+    }
+
+    private void testDictionaryCapability1(GenericMetadata cap) {
+      assertEquals(2, cap.getDirectives().size());
+      assertEquals("resolve", cap.getDirectives().get("effective"));
+      assertEquals("test", cap.getDirectives().get("somedir"));
+
+      assertEquals(3, cap.getAttributes().size());
+      assertEquals("nl", cap.getAttributes().get("from"));
+      assertEquals("de", cap.getAttributes().get("to"));
+      assertEquals(new Version(3, 4, 0, "test"), cap.getAttributes().get("version"));
+    }
+
+    private void testDictionaryCapability2(GenericMetadata cap) {
+      assertEquals(1, cap.getDirectives().size());
+      assertEquals("(&(width>=1000)(height>=1000))", cap.getDirectives().get("filter"));
+
+      assertEquals(0, cap.getAttributes().size());
+    }
+
+    private void testIP2LocationCapability(GenericMetadata cap) {
+      assertEquals(0, cap.getDirectives().size());
+      assertEquals(4, cap.getAttributes().size());
+
+      assertEquals(new Version(1, 3, 0), cap.getAttributes().get("version"));
+      assertEquals(Arrays.asList("nl", "be", "fr", "uk"), cap.getAttributes().get("country"));
+      assertEquals(Long.MAX_VALUE, cap.getAttributes().get("long"));
+      assertEquals(0, new Double("2.2250738585072012e-308").compareTo((Double) cap.getAttributes().get("d")));
+    }
 }
