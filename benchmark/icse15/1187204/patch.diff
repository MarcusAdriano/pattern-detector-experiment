diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
index 9ca56da0..4d5814cd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java
@@ -287,6 +287,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	void setCurrentDependent(Dependent d);
 
+	/**
+     * Get the current dependent from this {@code CompilerContext}.
+     *
+     * @return the dependent currently being compiled
+     */
+    Dependent getCurrentDependent();
+
 	/**
 	 * Get the current auxiliary provider list from this CompilerContext.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
index f60b48ba..7a42b748 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
@@ -274,6 +274,10 @@ public void setCurrentDependent(Dependent d) {
 		currentDependent = d;
 	}
 
+    public Dependent getCurrentDependent() {
+        return currentDependent;
+    }
+
 	/**
 	 * Get the current auxiliary provider list from this CompilerContext.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 19db953c..0ed4eaf6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -53,6 +53,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.compile.RowOrdering;
 import org.apache.derby.iapi.sql.compile.Visitor;
 
+import org.apache.derby.iapi.sql.depend.DependencyManager;
+
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
@@ -2347,8 +2349,20 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,
 					);
 
             // Bail out if the descriptor couldn't be found. The conglomerate
-            // probably doesn't exist anymore.
+            // probably doesn't exist anymore because of concurrent DDL or
+            // compress operations, and the compilation will have to be tried
+            // again.
             if (baseConglomerateDescriptor == null) {
+                // The statement is typically invalidated by the operation
+                // that dropped the conglomerate. However, if the invalidation
+                // happened before we called createDependency(), we'll miss it
+                // and we won't retry the compilation with fresh dictionary
+                // information (DERBY-5406). So let's invalidate the statement
+                // ourselves here.
+                compilerContext.getCurrentDependent().makeInvalid(
+                        DependencyManager.COMPILE_FAILED,
+                        getLanguageConnectionContext());
+
                 throw StandardException.newException(
                         SQLState.STORE_CONGLOMERATE_DOES_NOT_EXIST,
                         new Long(tableDescriptor.getHeapConglomerateId()));
