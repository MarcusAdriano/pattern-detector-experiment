diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/hadoop/ConfigHelper.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/hadoop/ConfigHelper.java
index a3cc9765..284afd3b 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/hadoop/ConfigHelper.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/hadoop/ConfigHelper.java
@@ -24,11 +24,12 @@
 import org.apache.cassandra.thrift.InvalidRequestException;
 import org.apache.cassandra.thrift.SlicePredicate;
 import org.apache.cassandra.thrift.ThriftValidation;
+import org.apache.cassandra.utils.FBUtilities;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.thrift.TDeserializer;
 import org.apache.thrift.TException;
 import org.apache.thrift.TSerializer;
-import org.apache.thrift.protocol.TJSONProtocol;
+import org.apache.thrift.protocol.TBinaryProtocol;
 
 public class ConfigHelper
 {
@@ -135,10 +136,10 @@ private static String predicateToString(SlicePredicate predicate)
     {
         assert predicate != null;
         // this is so awful it's kind of cool!
-        TSerializer serializer = new TSerializer(new TJSONProtocol.Factory());
+        TSerializer serializer = new TSerializer(new TBinaryProtocol.Factory());
         try
         {
-            return serializer.toString(predicate, "UTF-8");
+            return FBUtilities.bytesToHex(serializer.serialize(predicate));
         }
         catch (TException e)
         {
@@ -149,11 +150,11 @@ private static String predicateToString(SlicePredicate predicate)
     private static SlicePredicate predicateFromString(String st)
     {
         assert st != null;
-        TDeserializer deserializer = new TDeserializer(new TJSONProtocol.Factory());
+        TDeserializer deserializer = new TDeserializer(new TBinaryProtocol.Factory());
         SlicePredicate predicate = new SlicePredicate();
         try
         {
-            deserializer.deserialize(predicate, st, "UTF-8");
+            deserializer.deserialize(predicate, FBUtilities.hexToBytes(st));
         }
         catch (TException e)
         {
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
index f2d9abd4..1280c4c7 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -22,6 +22,7 @@
 import java.math.BigInteger;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.nio.ByteBuffer;
 import java.security.MessageDigest;
 import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -38,7 +39,6 @@
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.dht.Range;
 import org.apache.cassandra.dht.Token;
-import org.apache.cassandra.thrift.SlicePredicate;
 import org.apache.thrift.TBase;
 import org.apache.thrift.TDeserializer;
 import org.apache.thrift.TException;
@@ -480,4 +480,11 @@ else if (c > 0x07FF)
         }
         return utflen;
     }
+
+    public static byte[] toByteArray(long n)
+    {
+        byte[] bytes = new byte[8];
+        ByteBuffer.wrap(bytes).putLong(n);
+        return bytes;
+    }
 }
diff --git a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java
index e69de29b..068fc529 100644
--- a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java
+++ b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/hadoop/ColumnFamilyInputFormatTest.java
@@ -0,0 +1,33 @@
+package org.apache.cassandra.hadoop;
+
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Test;
+
+import org.apache.cassandra.thrift.SlicePredicate;
+import org.apache.cassandra.utils.FBUtilities;
+import org.apache.hadoop.conf.Configuration;
+
+public class ColumnFamilyInputFormatTest
+{
+    @Test
+    public void testSlicePredicate()
+    {
+        long columnValue = 1271253600000l;
+        byte[] columnBytes = FBUtilities.toByteArray(columnValue);
+
+        List<byte[]> columnNames = new ArrayList<byte[]>();
+        columnNames.add(columnBytes);
+        SlicePredicate originalPredicate = new SlicePredicate().setColumn_names(columnNames);
+
+        Configuration conf = new Configuration();
+        ConfigHelper.setSlicePredicate(conf, originalPredicate);
+
+        SlicePredicate rtPredicate = ConfigHelper.getSlicePredicate(conf);
+        assert rtPredicate.column_names.size() == 1;
+        assert Arrays.equals(originalPredicate.column_names.get(0), rtPredicate.column_names.get(0));
+    }
+}
