diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
index 91d63fad..586417e6 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
@@ -82,7 +82,6 @@
     private final List<Recipe> explicitDependencies;
 
     private Map properties;
-    private final AtomicBoolean registered = new AtomicBoolean();
     private final AtomicReference<ServiceRegistration> registration = new AtomicReference<ServiceRegistration>();
     private Map registrationProperties;
     private List<ServiceListener> listeners;
@@ -149,7 +148,7 @@ protected Object internalCreate() throws ComponentDefinitionException {
     }
 
     public boolean isRegistered() {
-        return registered.get();
+        return registration.get() != null;
     }
 
     public void register() {
@@ -157,7 +156,6 @@ public void register() {
         if (state != Bundle.ACTIVE && state != Bundle.STARTING) {
             return;
         }
-        if (registered.compareAndSet(false, true)) {
             createExplicitDependencies();
             
             Hashtable props = new Hashtable();
@@ -188,16 +186,20 @@ public void register() {
             LOGGER.debug("Registering service {} with interfaces {} and properties {}",
                          new Object[] { name, classes, props });
 
-            registration.set(blueprintContainer.registerService(classArray, new TriggerServiceFactory(this, metadata), props));            
+        if (registration.get() == null) {
+            ServiceRegistration reg = blueprintContainer.registerService(classArray, new TriggerServiceFactory(this, metadata), props);
+            if (!registration.compareAndSet(null, reg) && registration.get() != reg) {
+                reg.unregister();
+            }
         }
     }
 
     public void unregister() {
-        if (registered.compareAndSet(true, false)) {
+        ServiceRegistration reg = registration.get();
+        if (reg != null) {
             LOGGER.debug("Unregistering service {}", name);
             // This method needs to allow reentrance, so if we need to make sure the registration is
             // set to null before actually unregistering the service
-            ServiceRegistration reg = registration.get();
             if (listeners != null) {
                 LOGGER.debug("Calling listeners for service unregistration");
                 for (ServiceListener listener : listeners) {
@@ -307,7 +309,7 @@ private void createService() {
                     listeners = Collections.emptyList();
                 }
                 LOGGER.debug("Listeners created: {}", listeners);
-                if (registered.get()) {
+                if (registration.get() != null) {
                     LOGGER.debug("Calling listeners for initial service registration");
                     for (ServiceListener listener : listeners) {
                         listener.register(service, registrationProperties);
