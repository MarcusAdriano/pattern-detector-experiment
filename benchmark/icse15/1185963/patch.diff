diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 67d2b9c8..5c5167d3 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -18,10 +18,7 @@
 
 package org.apache.cassandra.config;
 
-import java.io.File;
-import java.io.FileFilter;
-import java.io.IOException;
-import java.io.InputStream;
+import java.io.*;
 import java.net.InetAddress;
 import java.net.URL;
 import java.net.UnknownHostException;
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/KSMetaData.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/KSMetaData.java
index ce99bf14..1b187a40 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/KSMetaData.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/config/KSMetaData.java
@@ -40,23 +40,6 @@
     private final Map<String, CFMetaData> cfMetaData;
     public final boolean durableWrites;
 
-    public KSMetaData(String name, Class<? extends AbstractReplicationStrategy> strategyClass, Map<String, String> strategyOptions, CFMetaData... cfDefs)
-    {
-        this(name, strategyClass, strategyOptions, true, cfDefs);
-    }
-
-    public KSMetaData(String name, Class<? extends AbstractReplicationStrategy> strategyClass, Map<String, String> strategyOptions, boolean durable_writes, CFMetaData... cfDefs)
-    {
-        this.name = name;
-        this.strategyClass = strategyClass == null ? NetworkTopologyStrategy.class : strategyClass;
-        this.strategyOptions = strategyOptions;
-        Map<String, CFMetaData> cfmap = new HashMap<String, CFMetaData>();
-        for (CFMetaData cfm : cfDefs)
-            cfmap.put(cfm.cfName, cfm);
-        this.cfMetaData = Collections.unmodifiableMap(cfmap);
-        this.durableWrites = durable_writes;
-    }
-
     private KSMetaData(String name, Class<? extends AbstractReplicationStrategy> strategyClass, Map<String, String> strategyOptions, boolean durableWrites, Iterable<CFMetaData> cfDefs)
     {
         this.name = name;
@@ -85,6 +68,15 @@ public static KSMetaData systemKeyspace()
         return new KSMetaData(Table.SYSTEM_TABLE, LocalStrategy.class, optsWithRF(1), false, cfDefs);
     }
 
+    public static KSMetaData testMetadata(String name, Class<? extends AbstractReplicationStrategy> strategyClass, Map<String, String> strategyOptions, CFMetaData... cfDefs)
+    {
+        return new KSMetaData(name, strategyClass, strategyOptions, true, Arrays.asList(cfDefs));
+    }
+
+    public static KSMetaData testMetadataNotDurable(String name, Class<? extends AbstractReplicationStrategy> strategyClass, Map<String, String> strategyOptions, CFMetaData... cfDefs)
+    {
+        return new KSMetaData(name, strategyClass, strategyOptions, false, Arrays.asList(cfDefs));
+    }
 
     public static Map<String, String> forwardsCompatibleOptions(KsDef ks_def)
     {
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
index a7ddb905..736c6164 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
@@ -81,10 +81,10 @@ public static void loadSchema()
         ColumnFamilyType su = ColumnFamilyType.Super;
         AbstractType bytes = BytesType.instance;
 
-        AbstractType composite = CompositeType.getInstance(Arrays.asList(new AbstractType[]{BytesType.instance, TimeUUIDType.instance, IntegerType.instance}));
+        AbstractType composite = CompositeType.getInstance(Arrays.asList(new AbstractType[]{ BytesType.instance, TimeUUIDType.instance, IntegerType.instance }));
         Map<Byte, AbstractType> aliases = new HashMap<Byte, AbstractType>();
-        aliases.put((byte)'b', BytesType.instance);
-        aliases.put((byte)'t', TimeUUIDType.instance);
+        aliases.put((byte) 'b', BytesType.instance);
+        aliases.put((byte) 't', TimeUUIDType.instance);
         AbstractType dynamicComposite = DynamicCompositeType.getInstance(aliases);
       
         // these column definitions will will be applied to the jdbc utf and integer column familes respectively.
@@ -102,7 +102,7 @@ public static void loadSchema()
             "Column42"));
 
         // Keyspace 1
-        schema.add(new KSMetaData(ks1,
+        schema.add(KSMetaData.testMetadata(ks1,
                                   simple,
                                   opts_rf1,
 
@@ -162,7 +162,7 @@ public static void loadSchema()
                                                  null)));
 
         // Keyspace 2
-        schema.add(new KSMetaData(ks2,
+        schema.add(KSMetaData.testMetadata(ks2,
                                   simple,
                                   opts_rf1,
 
@@ -174,7 +174,7 @@ public static void loadSchema()
                                   indexCFMD(ks2, "Indexed1", true)));
 
         // Keyspace 3
-        schema.add(new KSMetaData(ks3,
+        schema.add(KSMetaData.testMetadata(ks3,
                                   simple,
                                   opts_rf5,
 
@@ -183,7 +183,7 @@ public static void loadSchema()
                                   indexCFMD(ks3, "Indexed1", true)));
 
         // Keyspace 4
-        schema.add(new KSMetaData(ks4,
+        schema.add(KSMetaData.testMetadata(ks4,
                                   simple,
                                   opts_rf3,
 
@@ -200,7 +200,7 @@ public static void loadSchema()
                                                  .keyCacheSize(0)));
 
         // Keyspace 5
-        schema.add(new KSMetaData(ks5,
+        schema.add(KSMetaData.testMetadata(ks5,
                                   simple,
                                   opts_rf2,
                                   standardCFMD(ks5, "Standard1"),
@@ -208,13 +208,13 @@ public static void loadSchema()
                                                .defaultValidator(CounterColumnType.instance)));
 
         // Keyspace 6
-        schema.add(new KSMetaData(ks6,
+        schema.add(KSMetaData.testMetadata(ks6,
                                   simple,
                                   opts_rf1,
                                   indexCFMD(ks6, "Indexed1", true)));
 
         // KeyCacheSpace
-        schema.add(new KSMetaData(ks_kcs,
+        schema.add(KSMetaData.testMetadata(ks_kcs,
                                   simple,
                                   opts_rf1,
                                   standardCFMD(ks_kcs, "Standard1")
@@ -225,17 +225,16 @@ public static void loadSchema()
                                               .keyCacheSize(1.0)));
 
         // RowCacheSpace
-        schema.add(new KSMetaData(ks_rcs,
+        schema.add(KSMetaData.testMetadata(ks_rcs,
                                   simple,
                                   opts_rf1,
                                   standardCFMD(ks_rcs, "CFWithoutCache"),
                                   standardCFMD(ks_rcs, "CachedCF")
                                               .rowCacheSize(100)));
 
-        schema.add(new KSMetaData(ks_nocommit,
+        schema.add(KSMetaData.testMetadataNotDurable(ks_nocommit,
                 simple,
                 opts_rf1,
-                false,
                 standardCFMD(ks_nocommit, "Standard1")));
 
         
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
index b7394171..dcf7119b 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
@@ -80,9 +80,9 @@ public void testTransKsMigration() throws IOException, ConfigurationException
         assert DatabaseDescriptor.getNonSystemTables().size() == 0;
         
         // add a few.
-        AddKeyspace ks0 = new AddKeyspace(new KSMetaData("ks0", SimpleStrategy.class, KSMetaData.optsWithRF(3)));
+        AddKeyspace ks0 = new AddKeyspace(KSMetaData.testMetadata("ks0", SimpleStrategy.class, KSMetaData.optsWithRF(3)));
         ks0.apply();
-        AddKeyspace ks1 = new AddKeyspace(new KSMetaData("ks1", SimpleStrategy.class, KSMetaData.optsWithRF(3)));
+        AddKeyspace ks1 = new AddKeyspace(KSMetaData.testMetadata("ks1", SimpleStrategy.class, KSMetaData.optsWithRF(3)));
         ks1.apply();
         
         assert DatabaseDescriptor.getTableDefinition("ks0") != null;
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/DefsTest.java
index ee86466c..0268bce3 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -339,7 +339,7 @@ public void addNewKS() throws ConfigurationException, IOException, ExecutionExce
         DecoratedKey dk = Util.dk("key0");
         CFMetaData newCf = addTestCF("NewKeyspace1", "AddedStandard1", "A new cf for a new ks");
 
-        KSMetaData newKs = new KSMetaData(newCf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(5), newCf);
+        KSMetaData newKs = KSMetaData.testMetadata(newCf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(5), newCf);
         
         new AddKeyspace(newKs).apply();
         
@@ -437,7 +437,7 @@ public void createEmptyKsAddNewCf() throws ConfigurationException, IOException,
     {
         assert DatabaseDescriptor.getTableDefinition("EmptyKeyspace") == null;
         
-        KSMetaData newKs = new KSMetaData("EmptyKeyspace", SimpleStrategy.class, KSMetaData.optsWithRF(5));
+        KSMetaData newKs = KSMetaData.testMetadata("EmptyKeyspace", SimpleStrategy.class, KSMetaData.optsWithRF(5));
 
         new AddKeyspace(newKs).apply();
         assert DatabaseDescriptor.getTableDefinition("EmptyKeyspace") != null;
@@ -473,7 +473,7 @@ public void testUpdateKeyspace() throws ConfigurationException, IOException, Exe
     {
         // create a keyspace to serve as existing.
         CFMetaData cf = addTestCF("UpdatedKeyspace", "AddedStandard1", "A new cf for a new ks");
-        KSMetaData oldKs = new KSMetaData(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(5), cf);
+        KSMetaData oldKs = KSMetaData.testMetadata(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(5), cf);
         
         new AddKeyspace(oldKs).apply();
         
@@ -482,7 +482,7 @@ public void testUpdateKeyspace() throws ConfigurationException, IOException, Exe
         
         // anything with cf defs should fail.
         CFMetaData cf2 = addTestCF(cf.ksName, "AddedStandard2", "A new cf for a new ks");
-        KSMetaData newBadKs = new KSMetaData(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(4), cf2);
+        KSMetaData newBadKs = KSMetaData.testMetadata(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(4), cf2);
         try
         {
             new UpdateKeyspace(newBadKs).apply();
@@ -494,7 +494,7 @@ public void testUpdateKeyspace() throws ConfigurationException, IOException, Exe
         }
         
         // names should match.
-        KSMetaData newBadKs2 = new KSMetaData(cf.ksName + "trash", SimpleStrategy.class, KSMetaData.optsWithRF(4));
+        KSMetaData newBadKs2 = KSMetaData.testMetadata(cf.ksName + "trash", SimpleStrategy.class, KSMetaData.optsWithRF(4));
         try
         {
             new UpdateKeyspace(newBadKs2).apply();
@@ -505,7 +505,7 @@ public void testUpdateKeyspace() throws ConfigurationException, IOException, Exe
             // expected.
         }
         
-        KSMetaData newKs = new KSMetaData(cf.ksName, OldNetworkTopologyStrategy.class, KSMetaData.optsWithRF(1));
+        KSMetaData newKs = KSMetaData.testMetadata(cf.ksName, OldNetworkTopologyStrategy.class, KSMetaData.optsWithRF(1));
         new UpdateKeyspace(newKs).apply();
         
         KSMetaData newFetchedKs = DatabaseDescriptor.getKSMetaData(newKs.name);
@@ -518,7 +518,7 @@ public void testUpdateColumnFamilyNoIndexes() throws ConfigurationException, IOE
     {
         // create a keyspace with a cf to update.
         CFMetaData cf = addTestCF("UpdatedCfKs", "Standard1added", "A new cf that will be updated");
-        KSMetaData ksm = new KSMetaData(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(1), cf);
+        KSMetaData ksm = KSMetaData.testMetadata(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(1), cf);
         new AddKeyspace(ksm).apply();
         
         assert DatabaseDescriptor.getTableDefinition(cf.ksName) != null;
