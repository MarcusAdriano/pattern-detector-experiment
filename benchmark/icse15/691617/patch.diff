diff --git a/lucene/java/trunk/src/java/org/apache/lucene/document/AbstractField.java b/lucene/java/trunk/src/java/org/apache/lucene/document/AbstractField.java
index c9858314..4c817010 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/document/AbstractField.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/document/AbstractField.java
@@ -218,7 +218,10 @@ public final boolean  isBinary() {
   }
   
   public byte[] getBinaryValue(byte[] result){
-    return isBinary ? (byte[]) fieldsData : null;
+    if (isBinary || fieldsData instanceof byte[])
+      return (byte[]) fieldsData;
+    else
+      return null;
   }
 
   /**
@@ -227,7 +230,15 @@ public final boolean  isBinary() {
    * @return length of byte[] segment that represents this Field value
    */
   public int getBinaryLength() {
+    if (isBinary) {
+      if (!isCompressed)
      return binaryLength;
+      else
+        return ((byte[]) fieldsData).length;
+    } else if (fieldsData instanceof byte[])
+      return ((byte[]) fieldsData).length;
+    else
+      return 0;
     }
 
   /**
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/FieldsWriter.java b/lucene/java/trunk/src/java/org/apache/lucene/index/FieldsWriter.java
index dd0b043e..143c01ef 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/FieldsWriter.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/FieldsWriter.java
@@ -197,6 +197,7 @@ final void writeField(FieldInfo fi, Fieldable field) throws IOException {
           // optimized case for merging, the data
           // is already compressed
           data = field.getBinaryValue();
+          assert data != null;
           len = field.getBinaryLength();
           offset = field.getBinaryOffset();  
         } else {
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
index a0b76b1c..a29c0231 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -4077,4 +4077,38 @@ public void testBinaryFieldOffsetLength() throws IOException {
     dir.close();
   }
   
+  // LUCENE-1374
+  public void testMergeCompressedFields() throws IOException {
+    File indexDir = new File(System.getProperty("tempDir"), "mergecompressedfields");
+    Directory dir = FSDirectory.getDirectory(indexDir);
+    try {
+      for(int i=0;i<5;i++) {
+        // Must make a new writer & doc each time, w/
+        // different fields, so bulk merge of stored fields
+        // cannot run:
+        IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), i==0, IndexWriter.MaxFieldLength.UNLIMITED);
+        w.setMergeFactor(5);
+        w.setMergeScheduler(new SerialMergeScheduler());
+        Document doc = new Document();
+        doc.add(new Field("test1", "this is some data that will be compressed this this this", Field.Store.COMPRESS, Field.Index.NO));
+        doc.add(new Field("test2", new byte[20], Field.Store.COMPRESS));
+        doc.add(new Field("field" + i, "random field", Field.Store.NO, Field.Index.TOKENIZED));
+        w.addDocument(doc);
+        w.close();
+      }
+
+      byte[] cmp = new byte[20];
+
+      IndexReader r = IndexReader.open(dir);
+      for(int i=0;i<5;i++) {
+        Document doc = r.document(i);
+        assertEquals("this is some data that will be compressed this this this", doc.getField("test1").stringValue());
+        byte[] b = doc.getField("test2").binaryValue();
+        assertTrue(Arrays.equals(b, cmp));
+      }
+    } finally {
+      dir.close();
+      _TestUtil.rmDir(indexDir);
+    }
+  }
 }
