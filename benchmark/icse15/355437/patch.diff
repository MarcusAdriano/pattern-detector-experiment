diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
index d28e7008..991c54dc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/BinaryToRawStream.java
@@ -21,8 +21,6 @@
 package org.apache.derby.impl.jdbc;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
-import org.apache.derby.iapi.types.Resetable;
-import org.apache.derby.iapi.error.StandardException;
 
 import java.io.InputStream;
 import java.io.IOException;
@@ -32,11 +30,6 @@
 	Converts a stream containing the Cloudscape stored binary form
 	to one that just contains the application's data.
 	Simply remove the length information.
-
-	If source stream implements Resetable interface , 
-	the source can be shared among other objects and 
-	not closed when close method of this class was called.
-
 */
 final class BinaryToRawStream
 extends java.io.FilterInputStream
@@ -103,26 +96,4 @@ else if (bl == 0xA0)
 			//	len++;
 		}
 	}
-    
-    
-    public void close() throws IOException{
-	
-	//Escape from closing source InputStream ,
-	//because source InputStream can be shared between other stream.
-	
-	if(in instanceof Resetable){
-	    try{
-		((Resetable) in).resetStream();
-		
-	    }catch(StandardException e){
-		e.printStackTrace();
-		throw new IOException(e.getMessage());
-	    }
-	    
-	}else{
-	    super.close();
-	    
-	}
-    }
-    
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
index e8e2997d..989ef856 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedClob.java
@@ -251,17 +251,8 @@ public String getSubString(long pos, int length) throws SQLException
 			}
 			finally
 			{
-			    if (clobReader != null){
-				
-				try{
+				if (clobReader != null)
 				    clobReader.close();
-				    
-				}catch(IOException e){
-				    e.printStackTrace();
-				    throw new SQLException(e.getMessage());
-				    
-				}
-			    }
 				restoreContextStack();
 			}
 		}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
index 1fd3d71a..00e99709 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java
@@ -26,16 +26,9 @@
 import java.io.UTFDataFormatException;
 import java.io.EOFException;
 import java.sql.SQLException;
-import org.apache.derby.iapi.types.Resetable;
-import org.apache.derby.iapi.error.StandardException;
-    
 
 /**
- *
- * If source InputStream of this class is Resetable, close method of this class reset the source instead of close it,
- * because the source InputStream can be shared.
- *
- */
+*/
 public final class UTF8Reader extends Reader
 {
 
@@ -147,7 +140,7 @@ public long skip(long len) throws IOException {
 
 	}
 
-	public void close() throws IOException
+	public void close()
 	{
 		synchronized (lock) {
 			closeIn();
@@ -219,33 +212,23 @@ int readAsciiInto(byte[] abuf, int off, int len) throws IOException {
 	*/
 
 
-	private void closeIn() throws IOException {
+	private void closeIn() {
 		if (in != null) {
 			try {
-			    
-			    if(in instanceof Resetable){
-				((Resetable) in).resetStream();
-				
-			    }else{
 				in.close();
-			    }
-			    
-			} catch (StandardException e) {
-			    e.printStackTrace();
-			    throw new IOException(e.getMessage());
-			    
+			} catch (IOException ioe) {
 			} finally {
 				in = null;
 			}
 		}
 	}
-	private IOException utfFormatException(String s) throws IOException {
+	private IOException utfFormatException(String s) {
 		noMoreReads = true;
 		closeIn();
 		return new UTFDataFormatException(s);
 	}
 
-	private IOException utfFormatException() throws IOException {
+	private IOException utfFormatException() {
 		noMoreReads = true;
 		closeIn();
 		return new UTFDataFormatException();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
index 90c8514f..afc91892 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultsetStream.java
@@ -40,8 +40,6 @@
 import java.util.zip.CRC32;
 import java.io.Reader;
 import java.io.StringReader;
-import java.io.ByteArrayInputStream;
-import java.io.CharArrayReader;
 
 /**
  * Test of JDBC result set Stream calls.
@@ -287,7 +285,6 @@ public static void main(String[] args) {
 			stmt.close();
 			
 			TestOfGetAsciiStream.executeTestOfGetAsciiStream(con);
-			TestOfRepeatedStream.executeTestOfRepeatedStream(con);
 
 			con.close();
 
@@ -472,222 +469,4 @@ private static String getCharacterCodeString(char c){
 		
 	}
     
-    static class TestOfRepeatedStream{
-
-	
-	private static void executeTestOfRepeatedStream(Connection conn) 
-	    throws SQLException, IOException {
-	
-	    System.out.println("Test of RepeatedStream");
-
-	    prepareTestRepeatedStream(conn);
-	    readFromRepeatedStream(conn);
-	    cleanTest(conn);
-	    
-	    prepareTestRepeatedReader(conn);
-	    readFromRepeatedReader(conn);
-	    cleanTest(conn);
-	    
-	}
-    
-    
-	private static void prepareTestRepeatedStream(Connection conn) throws SQLException {
-	
-	    PreparedStatement st = null;
-
-	    try{
-
-		st = conn.prepareStatement("create table testBlobX2 (a integer, b blob(1024K))");
-		st.execute();
-		st.close();
-
-		st = conn.prepareStatement("insert into testBlobX2(a,b) values(1,?)");
-
-		byte[] testData = new byte[1024 * 1024];
-	    
-		for(int i = 0;
-		    i < testData.length;
-		    i ++)
-		    testData[i] = (byte) (i % 256);
-	    
-		st.setBinaryStream(1, 
-				   new ByteArrayInputStream(testData),
-				   testData.length);
-
-		st.executeUpdate();
-
-	    }finally{
-		if(st != null)
-		    st.close();
-	    }
-	
-	}
-
-
-	private static void readFromRepeatedStream(Connection conn) 
-	    throws SQLException ,IOException {
-	
-	    PreparedStatement st = null;
-	    ResultSet rs = null;
-	
-	    InputStream is = null;
-
-	    try{
-		st = conn.prepareStatement("SELECT b FROM testBlobX2 WHERE a = 1");
-		rs = st.executeQuery();
-	    
-		rs.next();
-	    
-		System.out.print("first stream: ");
-		readHeadOfStream(rs);
-	    
-		System.out.print("second stream: ");
-		readHeadOfStream(rs);
-
-	    }finally{
-		if(rs != null)
-		    rs.close();
-	    
-		if(st != null)
-		    st.close();
-	    
-	    }
-
-	}
-
-    
-	private static void readHeadOfStream(ResultSet rs) 
-	    throws SQLException, IOException {
-	
-	    InputStream is = null;
-
-	    try{
-		is = rs.getBinaryStream(1);
-
-		for( int i = 0 ;
-		     i < 8 ;
-		     i ++ ){
-		
-		    System.out.print(is.read());
-		
-		}
-	    
-		System.out.println();
-	    
-	    }finally{
-		if(is != null)
-		    is.close();
-	    }
-	}
-	
-	
-	private static void prepareTestRepeatedReader(Connection conn) throws SQLException {
-	
-	    PreparedStatement st = null;
-
-	    try{
-
-		st = conn.prepareStatement("create table testBlobX2 (a integer, b clob(1024K))");
-		st.execute();
-		st.close();
-
-		st = conn.prepareStatement("insert into testBlobX2(a,b) values(1,?)");
-
-		char[] testData = new char[1024 * 1024];
-	    
-		for(int i = 0;
-		    i < testData.length;
-		    i ++)
-		    testData[i] = (char) (i % Character.MAX_VALUE);
-	    
-		st.setCharacterStream(1, 
-				      new CharArrayReader(testData),
-				      testData.length);
-
-		st.executeUpdate();
-
-	    }finally{
-		if(st != null)
-		    st.close();
-	    }
-	
-	}
-	
-	
-	private static void readFromRepeatedReader(Connection conn) 
-	    throws SQLException ,IOException {
-	
-	    PreparedStatement st = null;
-	    ResultSet rs = null;
-	
-	    InputStream is = null;
-
-	    try{
-		st = conn.prepareStatement("SELECT b FROM testBlobX2 WHERE a = 1");
-		rs = st.executeQuery();
-	    
-		rs.next();
-		
-		System.out.print("first reader: ");
-		readHeadOfReader(rs);
-	    
-		System.out.print("second reader: ");
-		readHeadOfReader(rs);
-		
-	    }finally{
-		if(rs != null)
-		    rs.close();
-	    
-		if(st != null)
-		    st.close();
-	    
-	    }
-
-	}
-	
-	
-	private static void readHeadOfReader(ResultSet rs) 
-	    throws SQLException, IOException {
-	
-	    Reader reader = null;
-
-	    try{
-		reader = rs.getCharacterStream(1);
-
-		for( int i = 0 ;
-		     i < 8 ;
-		     i ++ ){
-		
-		    System.out.print(reader.read());
-		
-		}
-	    
-		System.out.println();
-	    
-	    }finally{
-		if(reader != null)
-		    reader.close();
-	    }
-	}
-	
-	
-	private static void cleanTest(Connection conn) 
-	    throws SQLException {
-	
-	    Statement st = null;
-
-	    try{
-		st = conn.createStatement();
-		st.execute("drop table testBlobX2");
-
-	    }finally{
-		if(st != null)
-		    st.close();
-	    }
-	}
-
-
-    }
-    
-
 }
