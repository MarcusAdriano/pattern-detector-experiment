diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index a2014179..83439142 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -3803,7 +3803,7 @@ private void parseSQLDTA(DRDAStatement stmt) throws DRDAProtocolException,SQLExc
 		} 
 		catch (SQLException se)
 		{
-			skipRemainder(false);
+			skipRemainder(true);
 			throw se;
 		}
 	}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
index 901deb08..76ac9e2b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
@@ -448,7 +448,7 @@ else if (st == jdbcTypes.length)
 					CallableStatement csp = conn.prepareCall("CALL PMP.TYPE_AS(?, ?, ?)");
 
 					boolean bothRegistered = true;
-					System.out.print("INOUT " + sqlType + " registerOutParameter(" + TestUtil.jdbcNameFromJdbc(jopt) + ") ");
+					System.out.print("INOUT " + sqlType + " registerOutParameter(" + TestUtil.getNameFromJdbcType(jopt) + ") ");
 					try {
 						csp.registerOutParameter(2, jopt);
 						System.out.println("-- OK");
@@ -456,7 +456,7 @@ else if (st == jdbcTypes.length)
 						System.out.println("-- " + sqle.getSQLState());
 						bothRegistered = false;
 					}
-					System.out.print("OUT " + sqlType + " registerOutParameter(" + TestUtil.jdbcNameFromJdbc(jopt) + ") ");
+					System.out.print("OUT " + sqlType + " registerOutParameter(" + TestUtil.getNameFromJdbcType(jopt) + ") ");
 					try {
 						csp.registerOutParameter(3, jopt);
 						System.out.println("-- OK");
@@ -1596,6 +1596,12 @@ private static void setXXX(Statement s, PreparedStatement psi, PreparedStatement
 		judge_setXXX(worked, sqleResult, 8, type);
 		}
 		{
+		s.execute("DELETE FROM PM.TYPE_AS");
+
+		 // Set Invalid String for nonString types (DERBY-149)
+		 testSetStringInvalidValue(type,psi);
+		}
+		{
 		s.execute("DELETE FROM PM.TYPE_AS");
 
 		SQLException sqleResult = null;
@@ -2869,6 +2875,60 @@ static void dumpSQLExceptions (SQLException se) {
 		}
 	}
 
+	/**
+	 * Test for DERBY-149 fix 
+	 * Check that setString to an invalid value throws an exception
+	 * rather than causing a hang
+	 * 
+	 * @param type   type for SQLTypes array
+	 * @param psi     - insert prepared statement.
+	 * 
+	 */
+	private static void testSetStringInvalidValue(int type, PreparedStatement psi) {
+		// Do not perform this test for string types. 
+		// Only test for types wich will fail with setString("InvalidValue");
+		switch (jdbcTypes[type]) 
+		{
+			case Types.CHAR:
+			case Types.VARCHAR:
+			case Types.LONGVARCHAR:
+			case Types.CLOB:
+				return;
+		}
+		
+		String sqlType = SQLTypes[type];
+		try {
+			System.out.print(" setString(\"Invalid Value\") " );
+			psi.setString(1,"Invalid Value");	 
+			psi.executeUpdate();
+			// Should have gotten exception. Test fails
+			String  error = "FAIL - setString(1,\"Invalld Value\") for type " +
+			sqlType + " did not throw an exception as expected";		 				
+		 	}
+			catch (SQLException sqle)
+			{
+		 		
+				if ("22018".equals(sqle.getSQLState())||
+					"XCL12".equals(sqle.getSQLState())||
+					"22007".equals(sqle.getSQLState())||
+					(sqle.getMessage().indexOf("Invalid data conversion") != -1) ||
+					(sqle.getMessage().indexOf("Illegal Conversion") != -1))
+					System.out.println(" IC (Expected)"); 
+				else
+					dumpSQLExceptions(sqle);				 		
+			}
+			catch (Exception e)
+			{
+				// JCC may throw Illegal argument exception for 
+				// String conversion error for date/time/timestamp
+				if (TestUtil.isJCCFramework() && 
+						e instanceof IllegalArgumentException)
+					System.out.println( e.getMessage());
+				else
+					System.out.println("FAIL: Unexpected Exception " + e.getMessage());
+			}		 	
+	}
+
 	private static String showFirstTwo(java.io.Reader in) throws java.io.IOException {
 
 		int b1 = in.read();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
index 003067ad..42439651 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
@@ -439,7 +439,7 @@ public static String sqlNameFromJdbc(int jdbcType) {
 			default : return String.valueOf(jdbcType);
 		}
 	}
-	  public static String jdbcNameFromJdbc(int jdbcType) {
+	  public static String getNameFromJdbcType(int jdbcType) {
 		switch (jdbcType) {
 			case Types.BIT 		:  return "Types.BIT";
 			case JDBC30Translation.SQL_TYPES_BOOLEAN  : return "Types.BOOLEAN";
