diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/ClientThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/ClientThread.java
index 7e979072..ce1f8989 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/ClientThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/ClientThread.java
@@ -77,13 +77,8 @@ public Object run() throws IOException
 	                		break;
 				} // end priv try/catch block
 				
-				connNum = parent.getNewConnNum();
-                                if (parent.getLogConnections())
-                                    parent.consolePropertyMessage("DRDA_ConnNumber.I", 
-							Integer.toString(connNum));
-
 				//create a new Session for this session
-				parent.addSession(connNum, clientSocket);
+				parent.addSession(clientSocket);
 
 				}catch (Exception e) {
 					if (e instanceof InterruptedException)
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 878dbefc..ebe2f9c4 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -292,7 +292,7 @@ public void run() {
 		}
 		if (SanityManager.DEBUG)
 			trace("Ending connection thread");
-		server.getThreadList().removeElement(this);
+		server.removeThread(this);
 
 	}
 	/**
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 4fb3db28..ee127750 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -1856,7 +1856,7 @@ public void executeWork(String args[]) throws Exception
 	 *
 	 * @param clientSession	session needing work
 	 */
-	protected void runQueueAdd(Session clientSession)
+	private void runQueueAdd(Session clientSession)
 	{
 		synchronized(runQueue)
 		{
@@ -3094,7 +3094,7 @@ private void setMinThreads(int value)
 	 *
 	 * @return value of maximum number of threads
 	 */
-	protected int getMaxThreads()
+	private int getMaxThreads()
 	{
 		synchronized(threadsSync) {
 			return maxThreads;
@@ -3378,11 +3378,19 @@ private Properties getPropertyValues()
 	 * there are free threads, and the maximum number of threads is not
 	 * exceeded.
 	 *
-	 * @param connectionNumber number of connection
+	 * <p><code>addSession()</code> should only be called from one thread at a
+	 * time.
+	 *
 	 * @param clientSocket the socket to read from and write to
 	 */
-	void addSession(int connectionNumber, Socket clientSocket)
-			throws IOException {
+	void addSession(Socket clientSocket) throws Exception {
+
+		int connectionNumber = ++connNum;
+
+		if (getLogConnections()) {
+			consolePropertyMessage("DRDA_ConnNumber.I",
+								   Integer.toString(connectionNumber));
+		}
 
 		// Note that we always re-fetch the tracing configuration because it
 		// may have changed (there are administrative commands which allow
@@ -3430,41 +3438,13 @@ void addSession(int connectionNumber, Socket clientSocket)
 	}
 
 	/**
-	 * Get New Conn Num - for use by ClientThread, generate a new connection number for the attempted Session.
-	 *
-	 * @return	a new connection number
-	 */
-	protected int getNewConnNum()
-	{
-		return ++connNum;
-	}
-
-
-	/**
-	 * Get Free Threads - for use by ClientThread, get the number of 
-	 * free threads in order to determine if
-	 * a new thread can be run.
+	 * Remove a thread from the thread list. Should be called when a
+	 * <code>DRDAConnThread</code> has been closed.
 	 *
-	 * @return	the number of free threads
+	 * @param thread the closed thread
 	 */
-	protected int getFreeThreads()
-	{
-		synchronized(runQueue)
-		{
-			return freeThreads;
-		}
-	}
-
-	/**
-	 * Get Thread List - for use by ClientThread, get the thread list 
-	 * Vector so that a newly spawned thread
-	 * can be run and added to the ThreadList from the ClientThread 
-	 *
-	 * @return	the threadList Vector
-	 */
-	protected Vector getThreadList()
-	{
-		return threadList;
+	void removeThread(DRDAConnThread thread) {
+		threadList.remove(thread);
 	}
 	
 	protected Object getShutdownSync() { return shutdownSync; } 
