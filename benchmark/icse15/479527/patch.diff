diff --git a/db/derby/code/trunk/java/build/org/apache/derbyBuild/MessageBuilder.java b/db/derby/code/trunk/java/build/org/apache/derbyBuild/MessageBuilder.java
index 0887fddb..7bbf3623 100644
--- a/db/derby/code/trunk/java/build/org/apache/derbyBuild/MessageBuilder.java
+++ b/db/derby/code/trunk/java/build/org/apache/derbyBuild/MessageBuilder.java
@@ -552,13 +552,24 @@ private void    processMessage( PrintWriter propertiesPW, XMLWriter ditaWriter,
         String        propertyText = escapePropertiesText( rawText );
         int             parameterCount = countParameters( rawText );
         String[]     args = getArgs( message );
-        String       displayText = replaceSpecialChars( plugInArgs( rawText, args ) );
 
         if ( parameterCount != args.length )
         {
             throw new Exception( name + " has " + parameterCount + " parameters but " + args.length + " nested args." );
         }
 
+        String displayText;
+        if (rawText.indexOf('\'')>=0)
+        {
+            displayText = replaceSpecialChars( escapeTextWithAQuote( rawText ) );
+            displayText = plugInArgs( displayText , args );
+
+        }
+        else
+        {
+            displayText = plugInArgs( replaceSpecialChars( rawText), args ) ;
+        }
+
         ditaWriter.beginTag( "row" );
         {
             ditaWriter.writeTextElement( "entry", "colname=\"col1\"", sqlstate );
@@ -643,7 +654,7 @@ private String  plugInArgs( String message, String[] rawArgs )
         // add xml angle brackets around the args
         for ( int i = 0; i < count; i++ )
         {
-            cookedArgs[ i ] = "&lt;" + rawArgs[ i ] + "&gt;";
+            cookedArgs[ i ] = "<varname>&lt;" + rawArgs[ i ] + "&gt;</varname>";
         }
 
         return MessageFormat.format( message, cookedArgs );
@@ -729,6 +740,7 @@ private static String replaceSpecialChars(java.lang.String input) {
         return output;
     }
 
+
     /**
      * <p>
      * Replace newlines with the escape sequence needed by properties files.
@@ -744,6 +756,19 @@ private static String escapePropertiesText( java.lang.String input )
         return output;
     }
 
+    /**
+     * <p>
+     * Replace single quotes with two single quotes.
+     * Only needed when there are parameters with quotes.
+     * </p>
+     */
+    private static String escapeTextWithAQuote( java.lang.String input )
+    {
+        String output = input.replaceAll( "\'", "\'\'" );
+        
+        return output;
+    }
+
 
 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index 38058dfc..52749416 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -2634,7 +2634,7 @@ public void testSelfDestructiveClob2() throws Exception {
             assertTrue("FAIL - only embedded should be this exception",
                     usingEmbedded());
             assertEquals("FAIL - wrong exception", "ERROR 40XD0: Container " +
-                    "has been closed", ioe.getMessage());
+                    "has been closed.", ioe.getMessage());
         }
 
         rollback();
