diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
index 21bd36ff..df6dfc72 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
@@ -453,7 +453,9 @@ private Region createRegion(long id) throws BundleException {
 		Activator activator = Activator.getInstance();
 		RegionDigraph digraph = activator.getRegionDigraph();
 		if (getParents().isEmpty())
-			return digraph.getRegion(AriesSubsystem.ROOT_REGION);
+			// This is the root subsystem. Associate it with the region in which
+			// the subsystems implementation bundle was installed.
+			return digraph.getRegion(activator.getBundleContext().getBundle());
 		String name = getSubsystemManifest()
 				.getSubsystemSymbolicNameHeader().getSymbolicName()
 				+ ';'
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
index ad9e6535..01dbd971 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
@@ -99,10 +99,12 @@ private void uninstallSubsystem() {
 				}
 			}
 			subsystem.setState(State.UNINSTALLED);
-			Activator.getInstance().getSubsystemServiceRegistrar()
-					.unregister(subsystem);
-			if (subsystem.isScoped())
+			Activator activator = Activator.getInstance();
+			activator.getSubsystemServiceRegistrar().unregister(subsystem);
+			if (subsystem.isScoped()) {
 				RegionContextBundleHelper.uninstallRegionContextBundle(subsystem);
+				activator.getRegionDigraph().removeRegion(subsystem.getRegion());
+			}
 			if (firstError != null)
 				throw new SubsystemException(firstError);
 		}
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
index 9d9debf8..f9905c56 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
@@ -208,7 +208,11 @@ public void removeChild(AriesSubsystem parent, AriesSubsystem child) {
 	public void removeConstituent(AriesSubsystem subsystem, Resource constituent) {
 		synchronized (subsystemToConstituents) {
 			Set<Resource> constituents = subsystemToConstituents.get(subsystem);
+			if (constituents != null) {
 			constituents.remove(constituent);
+				if (constituents.isEmpty())
+					subsystemToConstituents.remove(subsystem);
+			}
 		}
 		subsystem.removedContent(constituent);
 	}
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
index 895bcb1e..274382a8 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java
@@ -19,6 +19,9 @@
 import java.io.File;
 import java.io.IOException;
 
+import org.eclipse.equinox.region.Region;
+import org.eclipse.equinox.region.RegionDigraph;
+import org.eclipse.equinox.region.RegionFilter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -140,4 +143,45 @@ public void testUninstallRootRegionBundleWithNoBundleEventHook() throws Exceptio
 	public void testVersion() {
 		assertEquals("Wrong root version", getRootSubsystem().getVersion(), Version.parseVersion("1.0.0"));
 	}
+	
+	/*
+	 * The root subsystem should be associated with the region in which the
+	 * subsystems implementation bundle is installed.
+	 */
+	@Test
+	public void testRegion() throws Exception {
+		RegionDigraph digraph = getOsgiService(RegionDigraph.class);
+		Bundle core = getSubsystemCoreBundle();
+		Region kernel = digraph.getRegion(core);
+		Subsystem root = getRootSubsystem();
+		Bundle rootRegionContext = root.getBundleContext().getBundle();
+		// Get the region containing the subsystem's region context bundle, 
+		// which is the same thing as getting the region with which the 
+		// subsystem is associated.
+		Region region = digraph.getRegion(root.getBundleContext().getBundle());
+		assertEquals("Wrong region", kernel, region);
+		// Uninstall the core bundle to remove the persisted root subsystem.
+		core.uninstall();
+		// Clean up the lingering region context bundle.
+		rootRegionContext.uninstall();
+		// Create a new region and install the core bundle into it.
+		Region user = digraph.createRegion("user");
+		// Allow everything from the kernel region into the user region so the 
+		// core bundle will resolve.
+		user.connectRegion(
+				kernel, 
+				digraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build());
+		// Allow everything from the user region into the kernel region so the
+		// root subsystem service can be found.
+		kernel.connectRegion(
+				user, 
+				digraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build());
+		core = user.installBundle(normalizeBundleLocation(core.getLocation()));
+		user = digraph.getRegion(core);
+		core.start();
+		root = getRootSubsystem();
+		region = digraph.getRegion(root.getBundleContext().getBundle());
+		// The root subsystem should now be in the new region.
+		assertEquals("Wrong region", user, region);
+	}
 }
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
index c768eb80..ce38d0a0 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
@@ -50,6 +50,8 @@
 import org.apache.aries.unittest.fixture.ArchiveFixture.JarFixture;
 import org.apache.aries.unittest.fixture.ArchiveFixture.ManifestFixture;
 import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
+import org.eclipse.equinox.region.Region;
+import org.eclipse.equinox.region.RegionDigraph;
 import org.ops4j.pax.exam.Option;
 import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
 import org.osgi.framework.Bundle;
@@ -196,7 +198,7 @@ public int size() {
 				mavenBundle("org.eclipse.equinox",          "org.eclipse.equinox.event").version("1.2.200.v20120522-2049"),
 				mavenBundle("org.eclipse.equinox",          "org.eclipse.equinox.region").version("1.1.0.v20120522-1841"),
 				mavenBundle("org.osgi",                     "org.osgi.enterprise").version("5.0.0"),
-        //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
+//				org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
 				PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
 				equinox().version("3.8.0.V20120529-1548"));
 		options = updateOptions(options);
@@ -763,9 +765,13 @@ protected void uninstallSubsystem(Subsystem subsystem) throws Exception {
 		subsystemEvents.clear();
 		Collection<Subsystem> parents = subsystem.getParents();
 		Bundle b = null;
+		Region region = null;
+		RegionDigraph digraph = getOsgiService(RegionDigraph.class);
 		if (subsystem.getType().equals(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION)
-				|| subsystem.getType().equals(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE))
+				|| subsystem.getType().equals(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE)) {
 			b = getRegionContextBundle(subsystem);
+			region = digraph.getRegion(b);
+		}
 		State state = subsystem.getState();
 		subsystem.uninstall();
 		if (!EnumSet.of(State.INSTALL_FAILED, State.INSTALLED, State.INSTALLING).contains(state))
@@ -776,8 +782,11 @@ protected void uninstallSubsystem(Subsystem subsystem) throws Exception {
 		for (Subsystem parent : parents)
 			assertNotChild(parent, subsystem);
 //		assertNotDirectory(subsystem);
-		if (b != null)
+		if (subsystem.getType().equals(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION)
+				|| subsystem.getType().equals(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE)) {
 			assertEquals("Region context bundle not uninstalled", Bundle.UNINSTALLED, b.getState());
+			assertNull("Region not removed", digraph.getRegion(region.getName()));
+		}
 	}
 	
 	protected void uninstallSubsystemSilently(Subsystem subsystem) {
@@ -834,4 +843,10 @@ static void createApplication(String name, String[] content) throws Exception
 			Utils.closeQuietly(fos);
 		}
 	}
+	
+	protected static String normalizeBundleLocation(String location) {
+		if (location.startsWith("initial@"))
+			return location.substring(8);
+		return location;
+	}
 }
