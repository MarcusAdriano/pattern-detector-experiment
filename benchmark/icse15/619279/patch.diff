diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index e4930567..87a86ffc 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -1122,7 +1122,7 @@ protected void doCommit(boolean commitStore,
 									  "), Committing");
 		}
 
-		resetActivations(false);
+		endTransactionActivationHandling(false);
 
 		//do the clean up work required for temporary tables at the commit time. This cleanup work
 		//can possibly remove entries from allDeclaredGlobalTempTables and that's why we need to check
@@ -1366,7 +1366,7 @@ private void doRollback(boolean xa, boolean requestedByUser) throws StandardExce
 									  "), Rolling back");
 		}
 
-		resetActivations(true);
+		endTransactionActivationHandling(true);
 
 		currentSavepointLevel = 0; //reset the current savepoint level for the connection to 0 at the beginning of rollback work for temp tables
 		if (allDeclaredGlobalTempTables != null)
@@ -1447,7 +1447,7 @@ public void internalRollbackToSavepoint( String savepointName, boolean refreshSt
 				closeConglomerates = true;
 				// bug 5145 - don't forget to close the activations while rolling
 				// back to a savepoint
-				resetActivations(true);
+				endTransactionActivationHandling(true);
 			}
 			else { closeConglomerates = false; }
 
@@ -2703,15 +2703,24 @@ public boolean isLastHandler(int severity)
 	// class implementation
 	//
 
-
 	/**
-		resets all open activations, to close their result sets.
-		Also cleans up (close()) activations that have been
+		If we are called as part of rollback code path, then we will reset all 
+		the activations. 
+		
+		If we are called as part of commit code path, then we will do one of 
+		the following if the activation has resultset assoicated with it. Also,
+		we will clear the conglomerate used while scanning for update/delete
+		1)Close result sets that return rows and are not held across commit.
+		2)Clear the current row of the resultsets that return rows and are
+		held across commit.
+		3)Leave the result sets untouched if they do not return rows
+		
+		Additionally, clean up (close()) activations that have been
 		marked as unused during statement finalization.
 
 		@exception StandardException thrown on failure
 	 */
-	private void resetActivations(boolean andClose) throws StandardException {
+	private void endTransactionActivationHandling(boolean forRollback) throws StandardException {
 
 		// don't use an enumeration as the activation may remove
 		// itself from the list, thus invalidating the Enumeration
@@ -2724,15 +2733,6 @@ private void resetActivations(boolean andClose) throws StandardException {
 				continue;
 
 			Activation a = (Activation) acts.get(i);
-			/*
-			** andClose true means we are here for rollback.
-			** In case of rollback, we don't care for holding
-			** cursors and that's why I am resetting holdability
-			** to false for all activations just before rollback
-			*/	
-			if (andClose)
-				a.setResultSetHoldability(false);
-
 			/*
 			** Look for stale activations.  Activations are
 			** marked as unused during statement finalization.
@@ -2744,7 +2744,7 @@ private void resetActivations(boolean andClose) throws StandardException {
 				continue;
 			}
 
-			if (andClose) 
+			if (forRollback) 
 				//Since we are dealing with rollback, we need to reset the 
 				//activation no matter what the holdability might be or no
 				//matter whether the associated resultset returns rows or not.
@@ -2772,12 +2772,10 @@ private void resetActivations(boolean andClose) throws StandardException {
 					}
 				}
 				a.clearHeapConglomerateController();
-				if (!a.isSingleExecution())
-					a.clearWarnings();
 			}
 
 			// Only invalidate statements if we performed DDL.
-			if (andClose && dataDictionaryInWriteMode()) {
+			if (forRollback && dataDictionaryInWriteMode()) {
 				ExecPreparedStatement ps = a.getPreparedStatement();
 				if (ps != null) {
 					ps.makeInvalid(DependencyManager.ROLLBACK, this);
