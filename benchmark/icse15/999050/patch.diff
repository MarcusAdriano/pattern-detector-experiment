diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java b/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java
index fc952049..5fef9447 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java
@@ -83,6 +83,19 @@ public static void createDirectory(String directory) throws IOException
         }
     }
 
+    public static void createFile(String directory) throws IOException
+    {
+        File file = new File(directory);
+        if ( !file.exists() )
+            file.createNewFile();
+    }
+
+    public static boolean isExists(String filename) throws IOException
+    {
+        File file = new File(filename);
+        return file.exists();
+    }
+
     public static boolean delete(String file)
     {
         File f = new File(file);
@@ -106,6 +119,14 @@ public static boolean delete(List<String> files) throws IOException
         return bVal;
     }
 
+    public static void delete(File[] files) throws IOException
+    {
+        for ( File file : files )
+        {
+            file.delete();
+        }
+    }
+
     public static String stringifyFileSize(double value)
     {
         double d;
@@ -140,6 +161,29 @@ else if ( value >= kb_ )
         }        
     }
 
+    /**
+     * calculate the total space used by a file or directory
+     * 
+     * @param path the path
+     * @return total space used.
+     */
+    public static long getUsedDiskSpaceForPath(String path)
+    {
+        File file = new File(path);
+        
+        if (file.isFile()) 
+        {
+            return file.length();
+        }
+        
+        long diskSpace = 0;
+        for (File childFile: file.listFiles())
+        {
+            diskSpace += getUsedDiskSpaceForPath(childFile.getPath());
+        }
+        return diskSpace;
+    }
+
     /**
      * Deletes all files and subdirectories under "dir".
      * @param dir Directory to be deleted
