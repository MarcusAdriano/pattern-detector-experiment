diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java
index 277c1a47..cfd718de 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java
@@ -73,14 +73,15 @@ public double evaluate(RecommenderBuilder recommenderBuilder,
 
     int numUsers = dataModel.getNumUsers();
     FastByIDMap<PreferenceArray> trainingUsers =
-            new FastByIDMap<PreferenceArray>(1 + (int) (trainingPercentage * (double) numUsers));
+            new FastByIDMap<PreferenceArray>(1 + (int) (evaluationPercentage * (double) numUsers));
     FastByIDMap<PreferenceArray> testUserPrefs =
-            new FastByIDMap<PreferenceArray>(1 + (int) ((1.0 - trainingPercentage) * (double) numUsers));
+            new FastByIDMap<PreferenceArray>(1 + (int) (evaluationPercentage * (double) numUsers));
 
     LongPrimitiveIterator it = dataModel.getUserIDs();
     while (it.hasNext()) {
+      long userID = it.nextLong();
       if (random.nextDouble() < evaluationPercentage) {
-        processOneUser(trainingPercentage, trainingUsers, testUserPrefs, it.nextLong(), dataModel);
+        processOneUser(trainingPercentage, trainingUsers, testUserPrefs, userID, dataModel);
       }
     }
 
@@ -90,6 +91,7 @@ public double evaluate(RecommenderBuilder recommenderBuilder,
 
     Recommender recommender = recommenderBuilder.buildRecommender(trainingModel);
 
+    log.info("Beginning evaluation for {} prefs", testUserPrefs.size());
     double result = getEvaluation(testUserPrefs, recommender);
     log.info("Evaluation result: " + result);
     return result;
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AverageAbsoluteDifferenceRecommenderEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AverageAbsoluteDifferenceRecommenderEvaluator.java
index 1ff011e0..92ad7043 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AverageAbsoluteDifferenceRecommenderEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AverageAbsoluteDifferenceRecommenderEvaluator.java
@@ -44,6 +44,7 @@
   @Override
   double getEvaluation(FastByIDMap<PreferenceArray> testUserPrefs, Recommender recommender) throws TasteException {
     RunningAverage average = new FullRunningAverage();
+    int count = 0;
     for (Map.Entry<Long, PreferenceArray> entry : testUserPrefs.entrySet()) {
       for (Preference realPref : entry.getValue()) {
         long testUserID = entry.getKey();
@@ -61,6 +62,9 @@
           log.info("Item exists in test data but not training data: {}", realPref.getItemID());
         }
       }
+      if (++count % 100 == 0) {
+        log.info("Finished evaluation for {} prefs", count);
+      }
     }
     return average.getAverage();
   }
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/RMSRecommenderEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/RMSRecommenderEvaluator.java
index 04cf250f..e7ec90ce 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/RMSRecommenderEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/RMSRecommenderEvaluator.java
@@ -42,6 +42,7 @@
   @Override
   double getEvaluation(FastByIDMap<PreferenceArray> testUserPrefs, Recommender recommender) throws TasteException {
     RunningAverage average = new FullRunningAverage();
+    int count = 0;
     for (Map.Entry<Long, PreferenceArray> entry : testUserPrefs.entrySet()) {
       for (Preference realPref : entry.getValue()) {
         long testUserID = entry.getKey();
@@ -58,6 +59,9 @@
           log.info("User exists in test data but not training data: {}", testUserID);
         }
       }
+      if (++count % 100 == 0) {
+        log.info("Finished evaluation for {} prefs", count);
+      }
     }
     return Math.sqrt(average.getAverage());
   }
