diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
index 3956dbab..09139946 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
@@ -381,13 +381,11 @@ public void bindCastNodeOnly()
 		*/
 		if (getTypeId().userType())
 		{
+            setType( bindUserType( getTypeServices() ) );
+            
 			String className = getTypeId().getCorrespondingJavaTypeName();
 
 			verifyClassExist(className);
-
-			setType(new DataTypeDescriptor(TypeId.getUserDefinedTypeId(className, false),
-														true /* assume nullable for now, change it if not nullable */
-													));
 		}
 
         // Obviously the type of a parameter that
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java
index df3c274f..fb86d550 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java
@@ -426,18 +426,11 @@ public void test_05_viewDependencies() throws Exception
         goodStatement
             ( conn,
               "create type price_05_a external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n" );
-        goodStatement
-            (
-             conn,
-             "create function makePrice_05( )\n" +
-             "returns price_05_a language java parameter style java no sql\n" +
-             "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
-              );
         goodStatement
             (
              conn,
              "create view udtView( a, b, c ) as\n" +
-             "select tabletype, makePrice_05( ), makePrice_05( )\n" +
+             "select tabletype, cast (null as price_05_a), cast( null as price_05_a)\n" +
              "from sys.systables\n"
               );
         expectExecutionError( conn, VIEW_DEPENDS_ON_TYPE, "drop type price_05_a restrict\n" );
@@ -452,18 +445,11 @@ public void test_05_viewDependencies() throws Exception
         goodStatement
             ( conn,
               "create type price_05_b external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n" );
-        goodStatement
-            (
-             conn,
-             "create function makePrice_05_b( )\n" +
-             "returns price_05_b language java parameter style java no sql\n" +
-             "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
-              );
         goodStatement
             (
              conn,
              "create view udtView_b( a ) as\n" +
-             "select tabletype from sys.systables where makePrice_05_b() is not null\n"
+             "select tabletype from sys.systables where ( cast (null as price_05_b) ) is not null\n"
               );
         expectExecutionError( conn, VIEW_DEPENDS_ON_TYPE, "drop type price_05_b restrict\n" );
         goodStatement
@@ -475,6 +461,42 @@ public void test_05_viewDependencies() throws Exception
 
     }
 
+    /**
+     * <p>
+     * Casting to UDTs.
+     * </p>
+     */
+    public void test_06_casts() throws Exception
+    {
+        Connection conn = getConnection();
+
+        // cast a NULL as a UDT
+        goodStatement
+            ( conn,
+              "create type price_06_b external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n" );
+        assertResults
+            (
+             conn,
+             "values ( cast ( null as price_06_b ) )\n",
+             new String[][]
+             {
+                 { null },
+             },
+             false
+             );
+
+        // casting an untyped parameter to a UDT
+        PreparedStatement ps = chattyPrepare
+            ( conn, "values ( cast ( ? as price_06_b ) )" );
+        ps.setObject( 1, Price.makePrice() );
+        ResultSet rs = ps.executeQuery();
+        rs.next();
+        Price result = (Price) rs.getObject( 1 );
+        rs.close();
+        ps.close();
+        assertTrue( Price.makePrice().equals( result ) );
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
