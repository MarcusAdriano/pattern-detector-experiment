diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java
index 0a861a44..ecb34c64 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java
@@ -268,8 +268,9 @@ public SingularValueDecomposition(Matrix arg) {
     // Main iteration loop for the singular values.
     
     int pp = p - 1;
-    //int iter = 0;
+    int iter = 0;
     double eps = Math.pow(2.0, -52.0);
+    double tiny = Math.pow(2.0,-966.0);
     while (p > 0) {
       int k;
       
@@ -289,7 +290,7 @@ public SingularValueDecomposition(Matrix arg) {
         if (k == -1) {
           break;
         }
-        if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
+        if (Math.abs(e[k]) <= tiny +eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
           e[k] = 0.0;
           break;
         }
@@ -303,8 +304,10 @@ public SingularValueDecomposition(Matrix arg) {
           if (ks == k) {
             break;
           }
-          double t = (ks == p ? 0.0 : Math.abs(e[ks])) + (ks == k + 1 ? 0.0 : Math.abs(e[ks - 1]));
-          if (Math.abs(s[ks]) <= eps * t) {
+          double t =
+            (ks != p ?  Math.abs(e[ks]) : 0.) +
+            (ks != k + 1 ?  Math.abs(e[ks-1]) : 0.);
+          if (Math.abs(s[ks]) <= tiny + eps * t) {
             s[ks] = 0.0;
             break;
           }
@@ -436,7 +439,7 @@ public SingularValueDecomposition(Matrix arg) {
             }
           }
           e[p - 2] = f;
-          //iter += 1;
+          iter = iter + 1;
         }
           break;
         
@@ -480,7 +483,7 @@ public SingularValueDecomposition(Matrix arg) {
             }
             k++;
           }
-          //iter = 0;
+          iter = 0;
           p--;
         }
           break;
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSingularValueDecomposition.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSingularValueDecomposition.java
index 6f84560f..872c5425 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSingularValueDecomposition.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSingularValueDecomposition.java
@@ -17,10 +17,28 @@
 
 package org.apache.mahout.math;
 
+import com.google.common.base.Charsets;
+import com.google.common.base.Splitter;
+import com.google.common.collect.Iterables;
+import com.google.common.io.Resources;
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+import org.apache.commons.math3.linear.RealMatrix;
 import org.apache.mahout.common.RandomUtils;
+import org.apache.mahout.math.function.Functions;
 import org.junit.Test;
 
+import java.io.IOException;
+import java.util.List;
 import java.util.Random;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+import static org.junit.Assert.assertEquals;
 
 //To launch this test only : mvn test -Dtest=org.apache.mahout.math.TestSingularValueDecomposition
 public final class TestSingularValueDecomposition extends MahoutTestCase {
@@ -226,6 +244,57 @@ public void testConditionNumber() {
     assertEquals(3.0, svd.cond(), 1.5e-15);
   }
   
+  @Test
+  public void testSvdHang() throws IOException, InterruptedException, ExecutionException, TimeoutException {
+    for (String s : new String[]{"hanging-svd", }) {
+      System.out.printf("starting %s\n", s);
+      final Matrix m = readTsv(s + ".tsv");
+      try {
+        SingularValueDecomposition svd = timeout(2000, new Callable<SingularValueDecomposition>() {
+          @Override
+          public SingularValueDecomposition call() throws Exception {
+            return new SingularValueDecomposition(m);
+          }
+        });
+        assertEquals(0, m.minus(svd.getU().times(svd.getS()).times(svd.getV().transpose())).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
+        System.out.printf("%s worked\n", s);
+      } catch (ExecutionException e) {
+        System.out.printf("Failed during %s\n", s);
+        throw e;
+      } catch (TimeoutException e) {
+        System.out.printf("%s timed out\n", s);
+        throw e;
+      }
+    }
+  }
+
+  <T> T timeout(int timeLimit, Callable<T> toDo) throws InterruptedException, ExecutionException, TimeoutException {
+    ExecutorService pool = Executors.newFixedThreadPool(1);
+    Future<T> f = pool.submit(toDo);
+    pool.shutdown();
+    return f.get(timeLimit, TimeUnit.MILLISECONDS);
+  }
+
+  Matrix readTsv(String name) throws IOException {
+    Splitter onTab = Splitter.on("\t");
+    List<String> lines = Resources.readLines((Resources.getResource(name)), Charsets.UTF_8);
+    int rows = lines.size();
+    int columns = Iterables.size(onTab.split(lines.get(0)));
+    Matrix r = new DenseMatrix(rows, columns);
+    int row = 0;
+    for (String line : lines) {
+      Iterable<String> values = onTab.split(line);
+      int column = 0;
+      for (String value : values) {
+        r.set(row, column, Double.parseDouble(value));
+        column++;
+      }
+      row++;
+    }
+    return r;
+  }
+
+  
   private static Matrix createTestMatrix(Random r, int rows, int columns, double[] singularValues) {
     Matrix u = createOrthogonalMatrix(r, rows);
     Matrix d = createDiagonalMatrix(singularValues, rows, columns);
