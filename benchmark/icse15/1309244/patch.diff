diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
index 593c54e9..c02f42ab 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.Properties;
 
 import junit.framework.Test;
 
@@ -45,6 +46,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
 import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 
 /**
  * This test is part of the "largedata" suite because this test tests data for
@@ -132,6 +134,11 @@ public static Test suite() {
      * @return a test suite
      */
     static Test baseSuite(final int biggestSize, final int bigSize) {
+    	//Run the suite with following properties in case we run into lock
+    	// time out issues. It will help debug the problem if timeouts occur.
+        Properties sysprops = new Properties();
+        sysprops.setProperty("derby.locks.deadlockTrace", "true");
+        sysprops.setProperty("derby.locks.monitor", "true");
         // Some of the test cases depend on certain other test cases to run
         // first, so force the test cases to run in lexicographical order.
         Test suite = new CleanDatabaseTestSetup(
@@ -141,6 +148,7 @@ protected void decorateSQL(Statement s)
                 setupTables(s, biggestSize, bigSize);
             }
         };
+        suite = new SystemPropertyTestSetup(suite,sysprops);
 
         return new SupportFilesSetup(suite);
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
index 42919492..a5340a09 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
@@ -51,7 +51,6 @@ public SystemPropertyTestSetup(Test test,
 	{
 		super(test);
 		this.newValues = newValues;
-		this.oldValues = new Properties();
 		this.staticProperties = staticProperties;
 	}
 
@@ -67,7 +66,6 @@ public SystemPropertyTestSetup(Test test,
 	{
 		super(test);
 		this.newValues = newValues;
-		this.oldValues = new Properties();
 		this.staticProperties = false;
 	}
 	/**
@@ -77,6 +75,15 @@ public SystemPropertyTestSetup(Test test,
     protected void setUp()
     throws java.lang.Exception
     {
+    	//DERBY-5663 Getting NPE when trying to set 
+    	// derby.language.logStatementText property to true inside a junit 
+    	// suite.
+    	//The same instance of SystemPropertyTestSetup can be used again
+    	// and hence we want to make sure that oldValues is not null as set
+    	// in the tearDown() method. If we leave it null, we will run into NPE
+    	// during the tearDown of SystemPropertyTestSetup during the 
+    	// decorator's reuse.
+		this.oldValues = new Properties();
     	// shutdown engine so static properties take effect
         // shutdown the engine before setting the properties. this
         // is because the properties may change authentication settings
@@ -106,7 +113,6 @@ protected void tearDown()
     	// shutdown engine to restore any static properties
     	if (staticProperties)
     		TestConfiguration.getCurrent().shutdownEngine();
-        newValues = null;
         oldValues = null;
     }
     
