diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
index e69de29b..8e530943 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
@@ -0,0 +1,76 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootLockMinion
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import java.sql.Connection;
+import java.sql.Statement;
+import java.net.Socket;
+import java.lang.Integer;
+
+import org.apache.derby.jdbc.EmbeddedSimpleDataSource;
+/**
+ * Create and boot the supplied db argument. This auxiliary program is used by
+ * {@code BootLockTest.java} to boot a db in a different jvm and subsequently
+ * attempt a boot to from the original VM to detect dual boot attempt.
+* <p>
+ * You can verify this subprogram by invoking it directly as:
+ * </p>
+ * <p>
+ * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname>}
+ * </p>
+ */
+
+public class BootLockMinion {
+    public static void main(String[] args) {
+        String dbName = args[0];
+        int portNumber = Integer.decode(args[1]).intValue();
+        Connection con;
+        Statement stmt;
+        System.setProperty("derby.stream.error.file",
+                           "BootLockMinion.log");
+        try
+        {
+            EmbeddedSimpleDataSource ds = new EmbeddedSimpleDataSource();
+            ds.setDatabaseName(dbName);
+            ds.setCreateDatabase("create");
+
+            con = ds.getConnection();
+            stmt = con.createStatement();
+
+            stmt.execute("create table t1(i int)");
+
+            // Signal to parent that we have booted dbName, so it can try,
+            // too..
+            Socket parentS;
+            parentS = new Socket("localhost", portNumber);
+
+            //infinite loop until we get killed by BootLockTest.java
+            for(;;)
+            {
+                Thread.sleep(30000);
+            }
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
index e69de29b..29c094d3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
@@ -0,0 +1,280 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootLockTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import java.io.File;
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.lang.Integer;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.net.SocketTimeoutException;
+import java.net.ServerSocket;
+import java.net.Socket;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derbyTesting.junit.BaseTestCase;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.SecurityManagerSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
+
+import org.apache.derby.iapi.store.raw.data.DataFactory;
+
+/**
+ * Testing for FileLocks that prevent Derby Double Boot.
+ * <p/>
+ * For Sun phoneME, test that the property {@code
+ * derby.database.forceDatabaseLock} protects us.
+ * <p/>
+ * FIXME: If DERBY-4646 is fixed, the special handling for phoneME
+ * should be removed.
+ */
+
+public class BootLockTest extends BaseJDBCTestCase {
+
+    private final static String dbName = "BootLockTestDB";
+
+    private static String[] cmd = new String[]{
+        "org.apache.derbyTesting.functionTests.tests.store.BootLockMinion",
+        DEFAULT_DB_DIR + File.separator + dbName,
+        ""
+    };
+
+    private final static String DATA_MULTIPLE_JBMS_ON_DB = "XSDB6";
+    private final static String DATA_MULTIPLE_JBMS_FORCE_LOCK = "XSDB8";
+
+    /**
+     * Constructor
+     *
+     * @param name
+     */
+    public BootLockTest(String name) {
+        super(name);
+    }
+
+    /**
+     * Creates a suite with two testcases, with and without some extra
+     * system properties.
+     *
+     * @return The test suite with both English and German locales.
+     */
+    public static Test suite() {
+        TestSuite suite = new TestSuite("BootLockTest");
+
+        if (BaseTestCase.isJ9Platform()) {
+            // forking currently not working, cf. DERBY-4179.
+            return suite;
+        }
+
+        suite.addTest(decorateTest());
+        return suite;
+    }
+
+
+    /**
+     * Decorate test with singleUseDatabaseDecorator and noSecurityManager.
+     *
+     * @return the decorated test
+     */
+    private static Test decorateTest() {
+
+        Test test = new TestSuite(BootLockTest.class);
+
+        test = TestConfiguration.singleUseDatabaseDecorator(test, dbName);
+
+        test = SecurityManagerSetup.noSecurityManager(test);
+
+        return test;
+    }
+
+    String oldPropValue = null;
+
+    protected void setUp() throws Exception {
+
+        super.setUp();
+
+        // For phoneMe, we won't see DATA_MULTIPLE_JBMS_ON_DB, but instead we
+        // can check that we get DATA_MULTIPLE_JBMS_FORCE_LOCK if we set
+        // derby.database.forceDatabaseLock.
+
+        // FIXME: I tried to use the DatabasePropertyTestSetup.singleProperty,
+        // but for some reason it failed to do the job, no matter where in the
+        // decorator stack in decorateTest I placed it. Should be investigated
+        // so this manual set/reset code of the property can be removed.
+
+        if (JDBC.vmSupportsJSR169()) {
+            oldPropValue =
+                System.getProperty("derby.database.forceDatabaseLock");
+            System.setProperty("derby.database.forceDatabaseLock", "true");
+        }
+    }
+
+
+    protected void tearDown() throws Exception {
+
+        if (JDBC.vmSupportsJSR169()) {
+
+            if (oldPropValue != null) {
+                System.setProperty("derby.database.forceDatabaseLock",
+                                   oldPropValue);
+            } else {
+                // FIXME: Java 1.5 only: improve code when we move to that
+                // source level.
+                // System.clearProperty("derby.database.forceDatabaseLock");
+                System.setProperty("derby.database.forceDatabaseLock",
+                                   "false");
+            }
+
+
+        }
+
+        super.tearDown();
+    }
+
+
+    public void testBootLock() throws Exception {
+
+        ServerSocket parentService = null;
+        Socket clientSocket = null;
+        BufferedReader minionSysErr = null;
+        Process p = null;
+
+        try {
+            int port = TestConfiguration.getCurrent().getPort();
+            cmd[2] = (new Integer(port)).toString();
+
+            p = execJavaCmd(cmd);
+
+            // Attempt to catch any errors happening in minion for better test
+            // diagnosis.
+            minionSysErr = new BufferedReader(
+                new InputStreamReader(p.getErrorStream()));
+
+            // Create a socket so we know when subprogram has booted.  Since we
+            // run this test only in embedded mode, (re)use derby server port.
+            parentService = new ServerSocket(port);
+            parentService.setSoTimeout(60000); // max we wait is 60s
+
+            try {
+
+                clientSocket = parentService.accept();
+
+            } catch (SocketTimeoutException e) {
+                p.destroy();
+                p.waitFor();
+
+                StringBuffer failmsg = new StringBuffer();
+                failmsg.append(
+                    "Minion did not start or boot db in 60 seconds.\n" +
+                    "----Minion's stderr:\n");
+
+                String minionErrLine= null ;
+                do {
+                    try {
+                        minionErrLine = minionSysErr.readLine();
+                    } catch (Exception ioe) {
+                        // may not always work, so just bail out.
+                        failmsg.append("could not read minion's stderr");
+                    }
+
+                    if (minionErrLine != null) {
+                        failmsg.append(minionErrLine);
+                    }
+                } while (minionErrLine != null);
+
+                failmsg.append("\n----Minion's stderr ended");
+
+                fail(failmsg.toString());
+            }
+
+            // We now know minion has booted
+
+
+            try {
+                Connection c = getConnection();
+                fail("Dual boot not detected: check BootLockMinion.log");
+            } catch (SQLException e) {
+                if (JDBC.vmSupportsJSR169()) {
+                    assertSQLState(
+                        "Dual boot not detected: check BootLockMinion.log",
+                        DATA_MULTIPLE_JBMS_FORCE_LOCK,
+                        e);
+                } else {
+                    assertSQLState(
+                        "Dual boot not detected: check BootLockMinion.log",
+                        DATA_MULTIPLE_JBMS_ON_DB,
+                        e);
+                }
+            }
+
+            p.destroy();
+            p.waitFor();
+
+            // Since all went OK, no need to keep the minion log file.
+            File minionLog = new File("BootLockMinion.log");
+            assertTrue(minionLog.delete());
+
+        } finally {
+            // Make sure we free up any socket resources
+            if (clientSocket != null) {
+                clientSocket.close();
+            }
+
+            if (parentService != null) {
+                parentService.close();
+            }
+
+            if (minionSysErr != null) {
+                minionSysErr.close();
+            }
+
+            // Get rid of minion in case test fails, otherwise redundant.
+            if (p != null) {
+                p.destroy();
+                p.waitFor();
+            }
+
+
+            if (JDBC.vmSupportsJSR169()) {
+                // Delete lock files so JUnit machinery can clean up the
+                // one-off database without further warnings on System.err
+                // (phoneMe).
+                File db_lockfile_name = new File(
+                    DEFAULT_DB_DIR + File.separator +
+                    dbName + File.separator +
+                    DataFactory.DB_LOCKFILE_NAME);
+
+                File db_ex_lockfile_name = new File(
+                    DEFAULT_DB_DIR + File.separator +
+                    dbName + File.separator +
+                    DataFactory.DB_EX_LOCKFILE_NAME);
+
+                db_lockfile_name.delete();
+                db_ex_lockfile_name.delete();
+            }
+        }
+    }
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
index b2d2b008..e2e5cb39 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
@@ -57,6 +57,7 @@ public static Test suite() {
         suite.addTest(StreamingColumnTest.suite());
         suite.addTest(Derby3625Test.suite());
         suite.addTest(Derby151Test.suite());
+        suite.addTest(BootLockTest.suite());
         suite.addTest(PositionedStoreStreamTest.suite());
         suite.addTest(OSReadOnlyTest.suite());
         suite.addTest(BackupRestoreTest.suite());
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock.java
index 65052ba2..e69de29b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock.java
@@ -1,122 +0,0 @@
-/*
-
-   Derby - Class org.apache.derbyTesting.functionTests.tests.store.bootLock
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derbyTesting.functionTests.tests.store;
-
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.ResultSetMetaData;
-import java.sql.ResultSet;
-import java.sql.Statement;
-import java.sql.SQLException;
-import java.sql.Types;
-import java.io.File;
-import java.io.OutputStream;
-import java.io.RandomAccessFile;
-import java.io.IOException;
-import java.nio.channels.FileChannel;
-import java.nio.channels.FileLock;
-
-
-import org.apache.derby.tools.ij;
-import org.apache.derby.tools.JDBCDisplayUtil;
-import java.util.Properties;
-import org.apache.derbyTesting.functionTests.util.TestUtil;
-
-/**
- *Testing for FileLocks that prevent Derby Double Boot.
- */
-
-public class bootLock { 
-	public static void main(String[] args) {
-		Connection con;
-		Statement stmt;
-
-		try
-		{
-
-			System.out.println("Test BootLock Starting");
-			// use the ij utility to read the property file and
-			// make the initial connection.
-			ij.getPropertyArg(args);
-			String derbyHome = System.getProperty("derby.system.home");
-			con = ij.startJBMS();
-
-			stmt = con.createStatement();
-			stmt.execute("create table t1 (a int)");
-			stmt.close();
-			con.close();
-			try{
-				TestUtil.shutdownUsingDataSource("wombat");
-			}catch(Exception e)
-			{
-				//Shutdown will throw exception , just ignore it.	
-			}
-
-			//Invoke anothe jvm that makes a connection to database wombat
-
-			String cmd = "java org.apache.derbyTesting.functionTests.tests.store.bootLock1";
-			Runtime rtime = Runtime.getRuntime();
-			Process p1 = rtime.exec(cmd, (String[])null, new File(derbyHome));
-			
-			//sleep for some with the hope that other jvm has made the
-			//connection.
-
-			Thread.sleep(30000);
-
-			//Now if we try to boot , we should get an multiple 
-			//instance exception
-			try{
-				Properties prop = new Properties();
-				prop.setProperty("databaseName", "wombat");
-				TestUtil.getDataSourceConnection(prop);
-			}catch(SQLException e) {
-				System.out.println("expected exception");
-				dumpSQLExceptions(e);
-			}
-
-			//kill the sub process
-			p1.destroy();
-
-		}		
-		catch (SQLException e) {
-			System.out.println("FAIL -- unexpected exception");
-			dumpSQLExceptions(e);
-			e.printStackTrace();
-		}
-		catch (Throwable e) {
-			System.out.println("FAIL -- unexpected exception: "+e);
-			e.printStackTrace();
-		}
-
-		System.out.println("Test BootLock finished");
-    }
-
-	static private void dumpSQLExceptions (SQLException se) {
-		while (se != null) {
-			System.out.println("SQLSTATE("+se.getSQLState()+"): ");
-			se = se.getNextException();
-		}
-	}
-}
-
-
-
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java
index 2224d562..e69de29b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/bootLock1.java
@@ -1,88 +0,0 @@
-/*
-
-   Derby - Class org.apache.derbyTesting.functionTests.tests.store.bootLock1
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derbyTesting.functionTests.tests.store;
-
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.ResultSetMetaData;
-import java.sql.ResultSet;
-import java.sql.Statement;
-import java.sql.SQLException;
-import java.sql.Types;
-import java.util.Properties;
-
-import org.apache.derby.tools.ij;
-import org.apache.derby.tools.JDBCDisplayUtil;
-import org.apache.derbyTesting.functionTests.util.TestUtil;
-
-/**
- *Just make a connection to wombat , 
- * Used by bootLock.java to invoke a different jvm and make a connection to wombat 
- */
-
-public class bootLock1 { 
-	public static void main(String[] args) {
-		Connection con;
-		Statement stmt;
-
-		try
-		{
-
-			// use the ij utility to read the property file and
-			// make the initial connection.
-			ij.getPropertyArg(args);
-			Properties prop = new Properties();
-			prop.setProperty("databaseName", "wombat");
-			con = TestUtil.getDataSourceConnection(prop);
-
-			stmt = con.createStatement();
-			// while we're here, let's cleanup
-			stmt.execute("drop table t1");
-			//infinite loop until it gets killed.
-			for(;;)
-			{
-				Thread.sleep(30000);
-			}
-		}		
-		catch (SQLException e) {
-			//			System.out.println("FAIL -- unexpected exception");
-			//dumpSQLExceptions(e);
-			//e.printStackTrace();
-		}
-		catch (Throwable e) {
-			//System.out.println("FAIL -- unexpected exception: "+e);
-			//e.printStackTrace();
-		}
-
-    }
-
-	static private void dumpSQLExceptions (SQLException se) {
-		while (se != null) {
-			System.out.println("SQLSTATE("+se.getSQLState()+"): ");
-			se = se.getNextException();
-		}
-	}
-}
-
-
-
-
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index ce3b16ff..d1ad0ae5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -533,12 +533,30 @@ public Object run() throws IOException {
          */
          public static final String getJavaExecutableName() {
              String vmname = getSystemProperty("com.ibm.oti.vm.exe");
-             if (vmname == null)
-                 vmname = getSystemProperty("java.home") + File.separator + "bin" +
-                 File.separator +"java";
+
+        if (vmname == null) {
+            vmname = getSystemProperty("java.vm.name");
+
+            // Sun phoneME
+            if ("CVM".equals(vmname)) {
+                vmname = getSystemProperty("java.home") +
+                    File.separator + "bin" +
+                    File.separator + "cvm";
+            } else {
+                vmname = getSystemProperty("java.home") +
+                    File.separator + "bin" +
+                    File.separator + "java";
+            }
+        }
              return vmname;
          }
           
+    /**
+     * @return true if this is a j9 VM
+     */
+    public static final boolean isJ9Platform() {
+        return getSystemProperty("com.ibm.oti.vm.exe") != null;
+    }
    
    /**
     * Reads output from a process and returns it as a string.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
index 396b66d6..9635eb10 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
@@ -1,6 +1,6 @@
 /*
  *
- * Derby - Class org.apache.derbyTesting.functionTests.util.DatabasePropertyTestSetup
+ * Derby - Class org.apache.derbyTesting.junit.DatabasePropertyTestSetup
  *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index b1fbcd78..d220b7e9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -664,6 +664,26 @@ public static TestSetup singleUseDatabaseDecorator(Test test)
         return new DatabaseChangeSetup(new DropDatabaseSetup(test, dbName), dbName, dbName, true);
     }
 
+
+    /**
+     * Decorate a test to use a new database that is created upon the first
+     * connection request to the database and shutdown & deleted at
+     * tearDown. The configuration differs only from the current configuration
+     * by the list of used databases. The generated database name is added at
+     * the end of <code>usedDbNames</code> and assigned as a default database
+     * name.  This decorator expects the database file to be local so it can be
+     * removed.
+     * @param test Test to be decorated
+     * @param dbName We sometimes need to know outside to be able topass it on
+     *               to other VMs/processes.
+     * @return decorated test.
+     */
+    public static TestSetup singleUseDatabaseDecorator(Test test, String dbName)
+    {
+        return new DatabaseChangeSetup(
+            new DropDatabaseSetup(test, dbName), dbName, dbName, true);
+    }
+
     /**
      * Decorate a test to use a new database that is created upon the
      * first connection request to the database and deleted at
