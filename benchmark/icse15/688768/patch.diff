diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/grouplens/GroupLensRecommenderEvaluatorRunner.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/grouplens/GroupLensRecommenderEvaluatorRunner.java
index b4ed1947..c34b55d1 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/grouplens/GroupLensRecommenderEvaluatorRunner.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/grouplens/GroupLensRecommenderEvaluatorRunner.java
@@ -20,6 +20,8 @@
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.eval.RecommenderEvaluator;
 import org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 
@@ -29,6 +31,8 @@
  */
 public final class GroupLensRecommenderEvaluatorRunner {
 
+  private static final Logger log = LoggerFactory.getLogger(GroupLensRecommenderEvaluatorRunner.class);
+
   private GroupLensRecommenderEvaluatorRunner() {
     // do nothing
   }
@@ -39,7 +43,7 @@ public static void main(String... args) throws IOException, TasteException {
                                                  new GroupLensDataModel(),
                                                  0.9,
                                                  0.1);
-    System.out.println(evaluation);
+    log.info(String.valueOf(evaluation));
   }
 
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/PrepareTwentyNewsgroups.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/PrepareTwentyNewsgroups.java
index e00b22b8..2eebad78 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/PrepareTwentyNewsgroups.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/PrepareTwentyNewsgroups.java
@@ -21,10 +21,12 @@
 import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.PosixParser;
+import org.apache.commons.cli.ParseException;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.mahout.classifier.BayesFileFormatter;
 
 import java.io.File;
+import java.io.IOException;
 import java.nio.charset.Charset;
 
 
@@ -38,7 +40,8 @@
 public class PrepareTwentyNewsgroups {
 
   @SuppressWarnings("static-access")
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException, ParseException,
+      ClassNotFoundException, InstantiationException, IllegalAccessException {
     Options options = new Options();
     Option parentOpt = OptionBuilder.withLongOpt("parent").isRequired().hasArg().withDescription("Parent dir containing the newsgroups").create("p");
     options.addOption(parentOpt);
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java
index 2dc1dc7d..f8355a2d 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.PosixParser;
+import org.apache.commons.cli.ParseException;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.mapred.JobConf;
@@ -34,6 +35,8 @@
 import org.apache.mahout.classifier.cbayes.CBayesModel;
 import org.apache.mahout.common.Classifier;
 import org.apache.mahout.common.Model;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -46,9 +49,15 @@
 
 public class TestClassifier {
 
+  private static final Logger log = LoggerFactory.getLogger(TestClassifier.class);
+
+  private TestClassifier() {
+    // do nothing
+  }
+
   @SuppressWarnings({ "static-access", "unchecked" })
   public static void main(String[] args) throws IOException,
-      ClassNotFoundException, IllegalAccessException, InstantiationException {
+      ClassNotFoundException, IllegalAccessException, InstantiationException, ParseException {
     Options options = new Options();
     Option pathOpt = OptionBuilder.withLongOpt("path").isRequired().hasArg()
         .withDescription("The local file system path").create("p");
@@ -72,10 +81,8 @@ public static void main(String[] args) throws IOException,
         .hasArg().withDescription("Type of classifier").create("type");
     options.addOption(typeOpt);
 
-    CommandLine cmdLine;
-    try {
       PosixParser parser = new PosixParser();
-      cmdLine = parser.parse(options, args);
+    CommandLine cmdLine = parser.parse(options, args);
       SequenceFileModelReader reader = new SequenceFileModelReader();
       JobConf conf = new JobConf(TestClassifier.class);
 
@@ -89,7 +96,7 @@ public static void main(String[] args) throws IOException,
 
       FileSystem fs = FileSystem.get(conf);
 
-      System.out.println("Loading model from: " + modelPaths);
+    log.info("Loading model from: {}", modelPaths);
 
       Model model = null;
       Classifier classifier = null;
@@ -97,23 +104,20 @@ public static void main(String[] args) throws IOException,
       String classifierType = cmdLine.getOptionValue(typeOpt.getOpt());
       
       if (classifierType.equalsIgnoreCase("bayes")) {
-        System.out.println("Testing Bayes Classifier");
+      log.info("Testing Bayes Classifier");
         model = new BayesModel();
         classifier = new BayesClassifier();
       } else if (classifierType.equalsIgnoreCase("cbayes")) {
-        System.out.println("Testing Complementary Bayes Classifier");
+      log.info("Testing Complementary Bayes Classifier");
         model = new CBayesModel();
         classifier = new CBayesClassifier();
       }
      
       model = reader.loadModel(model, fs, modelPaths, conf);
 
-      System.out.println("Done loading model: # labels: "
-          + model.getLabels().size());
-
-      System.out.println("Done generating Model ");
-
+    log.info("Done loading model: # labels: {}", model.getLabels().size());
      
+    log.info("Done generating Model");
 
       String defaultCat = "unknown";
       if (cmdLine.hasOption(defaultCatOpt.getOpt())) {
@@ -133,6 +137,7 @@ public static void main(String[] args) throws IOException,
       if (analyzer == null) {
         analyzer = new StandardAnalyzer();
       }
+    // TODO srowen says analyzer is never used?
       int gramSize = 1;
       if (cmdLine.hasOption(gramSizeOpt.getOpt())) {
         gramSize = Integer.parseInt(cmdLine
@@ -150,7 +155,6 @@ public static void main(String[] args) throws IOException,
         for (int loop = 0; loop < subdirs.length; loop++) {
 
           String correctLabel = subdirs[loop].getName().split(".txt")[0];
-          System.out.print(correctLabel);
           BufferedReader fileReader = new BufferedReader(new InputStreamReader(
               new FileInputStream(subdirs[loop].getPath()), encoding));
           String line;
@@ -165,20 +169,17 @@ public static void main(String[] args) throws IOException,
               resultAnalyzer.addInstance(correctLabel, classifiedLabel);
             }
           }
-          System.out.println("\t"
-              + resultAnalyzer.getConfusionMatrix().getAccuracy(correctLabel)
-              + "\t"
-              + resultAnalyzer.getConfusionMatrix().getCorrect(correctLabel)
-              + "/"
-              + resultAnalyzer.getConfusionMatrix().getTotal(correctLabel));
+        log.info("{}\t{}\t{}/{}", new Object[] {
+            correctLabel,
+            resultAnalyzer.getConfusionMatrix().getAccuracy(correctLabel),
+            resultAnalyzer.getConfusionMatrix().getCorrect(correctLabel),
+            resultAnalyzer.getConfusionMatrix().getTotal(correctLabel)
+          });
 
         }
 
       }
-      System.out.println(resultAnalyzer.summarize());
+    log.info(resultAnalyzer.summarize());
 
-    } catch (Exception exp) {
-      exp.printStackTrace(System.err);
-    }
   }
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java
index 74fa4576..241a824b 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java
@@ -23,6 +23,8 @@
 import org.apache.commons.cli.PosixParser;
 import org.apache.commons.cli.ParseException;
 import org.apache.mahout.classifier.cbayes.CBayesDriver;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 
@@ -48,6 +50,8 @@
  */
 public class TrainClassifier {
 
+  private static final Logger log = LoggerFactory.getLogger(TrainClassifier.class);
+
   public void trainNaiveBayes(String dir, String outputDir, int gramSize) throws IOException {
     BayesDriver.runJob(dir, outputDir, gramSize);
   }
@@ -78,11 +82,11 @@ public static void main(String[] args) throws IOException, ParseException {
     if (train == true){
       String classifierType = cmdLine.getOptionValue(typeOpt.getOpt());
       if(classifierType.equalsIgnoreCase("bayes")){
-        System.out.println("Training Bayes Classifier");
+        log.info("Training Bayes Classifier");
         tn.trainNaiveBayes(cmdLine.getOptionValue(inputDirOpt.getOpt()), cmdLine.getOptionValue(outputOpt.getOpt()), Integer.parseInt(cmdLine.getOptionValue(gramSizeOpt.getOpt())));
 
       } else if(classifierType.equalsIgnoreCase("cbayes")) {
-        System.out.println("Training Complementary Bayes Classifier");
+        log.info("Training Complementary Bayes Classifier");
         //setup the HDFS and copy the files there, then run the trainer
         tn.trainCNaiveBayes(cmdLine.getOptionValue(inputDirOpt.getOpt()), cmdLine.getOptionValue(outputOpt.getOpt()), Integer.parseInt(cmdLine.getOptionValue(gramSizeOpt.getOpt())));
       }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreator.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreator.java
index 5bec55a9..3a03d1cb 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreator.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreator.java
@@ -22,18 +22,15 @@
 import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.PosixParser;
+import org.apache.commons.cli.ParseException;
 
 import java.io.IOException;
 
-/**
- * 
- * 
- */
 public class WikipediaDatasetCreator {
 
   @SuppressWarnings("static-access")
   public static void main(String[] args) throws IOException,
-      ClassNotFoundException, IllegalAccessException, InstantiationException {
+      ClassNotFoundException, IllegalAccessException, InstantiationException, ParseException {
     Options options = new Options();
     Option dirInputPathOpt = OptionBuilder.withLongOpt("dirInputPath").isRequired().hasArg()
         .withDescription("The input Directory Path").create("i");
@@ -45,18 +42,14 @@ public static void main(String[] args) throws IOException,
         .withDescription("Location of the Countries File").create("c");
     options.addOption(countriesFileOpt);
     
-    CommandLine cmdLine;
-    try {
       PosixParser parser = new PosixParser();
-      cmdLine = parser.parse(options, args);
+    CommandLine cmdLine = parser.parse(options, args);
 
       String dirInputPath = cmdLine.getOptionValue(dirInputPathOpt.getOpt());
       String dirOutputPath = cmdLine.getOptionValue(dirOutputPathOpt.getOpt());
       String countriesFile = cmdLine.getOptionValue(countriesFileOpt.getOpt());
 
       WikipediaDatasetCreatorDriver.runJob(dirInputPath, dirOutputPath, countriesFile);
-    } catch (Exception exp) {
-      exp.printStackTrace(System.err);
-    }
+
   }
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java
index 43184feb..fd5ff087 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java
@@ -23,27 +23,31 @@
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.mapred.JobClient;
 import org.apache.hadoop.mapred.JobConf;
+import org.apache.hadoop.mapred.FileInputFormat;
+import org.apache.hadoop.mapred.FileOutputFormat;
 
 import java.io.BufferedReader;
 import java.io.FileInputStream;
 import java.io.InputStreamReader;
+import java.io.IOException;
 import java.util.Set;
 import java.util.HashSet;
 
 /**
  * Create and run the Bayes Trainer.
- *
  */
 public class WikipediaDatasetCreatorDriver {
+
   /**
    * Takes in two arguments:
    * <ol>
    * <li>The input {@link org.apache.hadoop.fs.Path} where the input documents live</li>
-   * <li>The output {@link org.apache.hadoop.fs.Path} where to write the {@link org.apache.mahout.classifier.bayes.BayesModel} as a {@link org.apache.hadoop.io.SequenceFile}</li>
+   * <li>The output {@link org.apache.hadoop.fs.Path} where to write the
+   * {@link org.apache.mahout.classifier.bayes.BayesModel} as a {@link org.apache.hadoop.io.SequenceFile}</li>
    * </ol>
    * @param args The args
    */
-  public static void main(String[] args) {
+  public static void main(String[] args) throws IOException {
     String input = args[0];
     String output = args[1];
     String countriesFile = args[2];
@@ -56,10 +60,8 @@ public static void main(String[] args) {
    *
    * @param input            the input pathname String
    * @param output           the output pathname String
-
    */
-  @SuppressWarnings({ "deprecation" })
-  public static void runJob(String input, String output, String countriesFile) {
+  public static void runJob(String input, String output, String countriesFile) throws IOException {
     JobClient client = new JobClient();
     JobConf conf = new JobConf(WikipediaDatasetCreatorDriver.class);
 
@@ -69,9 +71,9 @@ public static void runJob(String input, String output, String countriesFile) {
     conf.setOutputKeyClass(Text.class);
     conf.setOutputValueClass(Text.class);
 
-    conf.setInputPath(new Path(input));
+    FileInputFormat.setInputPaths(conf, new Path(input));
     Path outPath = new Path(output);
-    conf.setOutputPath(outPath);
+    FileOutputFormat.setOutputPath(conf, outPath);
 
     conf.setMapperClass(WikipediaDatasetCreatorMapper.class);
     conf.setNumMapTasks(100);
@@ -79,10 +81,10 @@ public static void runJob(String input, String output, String countriesFile) {
     //conf.setCombinerClass(WikipediaDatasetCreatorReducer.class);
     conf.setReducerClass(WikipediaDatasetCreatorReducer.class);
     conf.setOutputFormat(WikipediaDatasetCreatorOutputFormat.class);
-    conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization"); // Dont ever forget this. People should keep track of how hadoop conf parameters and make or break a piece of code
-
+    conf.set("io.serializations",
+             "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");
+    // Dont ever forget this. People should keep track of how hadoop conf parameters and make or break a piece of code
 
-    try {
       FileSystem dfs = FileSystem.get(conf);
       if (dfs.exists(outPath))
         dfs.delete(outPath, true);
@@ -107,9 +109,6 @@ public static void runJob(String input, String output, String countriesFile) {
       client.setConf(conf);  
       JobClient.runJob(conf);      
    
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
     
   }
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorMapper.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorMapper.java
index 0f973f80..6b381672 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorMapper.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorMapper.java
@@ -43,8 +43,6 @@
 
   static Set<String> countries = null;
 
-  
-  @SuppressWarnings("deprecation")
   public void map(Text key, Text value,
       OutputCollector<Text, Text> output, Reporter reporter)
       throws IOException {
@@ -52,8 +50,7 @@ public void map(Text key, Text value,
     Analyzer analyzer = new StandardAnalyzer();
     StringBuilder contents = new StringBuilder();
     
-    
-    HashSet<String> categories = new HashSet<String>(findAllCategories(document));
+    Set<String> categories = new HashSet<String>(findAllCategories(document));
     
     String country = getCountry(categories);
     
@@ -63,9 +60,8 @@ public void map(Text key, Text value,
       while(true){
         Token token = stream.next();
         if(token==null) break;
-        contents.append(token.termText()).append(" ");
+        contents.append(token.termBuffer(), 0, token.termLength()).append(' ');
       }
-      //System.err.println(country+"\t"+contents.toString());
       output.collect(new Text(country.replace(" ","_")), new Text(contents.toString()));
     }
   }
@@ -104,12 +100,12 @@ public String getCountry(Set<String> categories)
   
   @Override
   public void configure(JobConf job) {
-    try
-    {
+    try {
       if(countries ==null){
         countries = new HashSet<String>();
 
-        DefaultStringifier<Set<String>> setStringifier = new DefaultStringifier<Set<String>>(job,GenericsUtil.getClass(countries));
+        DefaultStringifier<Set<String>> setStringifier =
+            new DefaultStringifier<Set<String>>(job,GenericsUtil.getClass(countries));
 
         String countriesString = setStringifier.toString(countries);  
         countriesString = job.get("wikipedia.countries", countriesString);
@@ -117,10 +113,8 @@ public void configure(JobConf job) {
         countries = setStringifier.fromString(countriesString);
         
       }
-    }
-    catch(IOException ex){
-      
-      ex.printStackTrace();
+    } catch(IOException ex){
+      throw new RuntimeException(ex);
     }
   }
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorReducer.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorReducer.java
index 68c1408b..74f46b19 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorReducer.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorReducer.java
@@ -25,12 +25,10 @@
 import java.io.IOException;
 import java.util.Iterator;
 
-
 /**
  *  Can also be used as a local Combiner
  *
- **/
-
+ */
 public class WikipediaDatasetCreatorReducer extends MapReduceBase implements Reducer<Text, Text, Text, Text> {
   public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException {
     //Key is label,word, value is the number of times we've seen this label word per local node.  Output is the same
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java
index 01f0df5b..901443c5 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaXmlSplitter.java
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.PosixParser;
+import org.apache.commons.cli.ParseException;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
@@ -30,12 +31,13 @@
 import java.io.FileOutputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
+import java.io.IOException;
 import java.text.DecimalFormat;
 
 public class WikipediaXmlSplitter {
 
   @SuppressWarnings("static-access")
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException, ParseException {
     Options options = new Options();
     Option dumpFileOpt = OptionBuilder.withLongOpt("dumpfile").isRequired().hasArg().withDescription("The path to the wikipedia dump file").create("d");
     options.addOption(dumpFileOpt);
@@ -43,10 +45,9 @@ public static void main(String[] args) throws Exception {
     options.addOption(outputDirOpt);
     Option chunkSizeOpt = OptionBuilder.withLongOpt("chunkSize").isRequired().hasArg().withDescription("the Size of chunk in Megabytes").create("c");
     options.addOption(chunkSizeOpt);
-    CommandLine cmdLine;
-    try {
+
       PosixParser parser = new PosixParser();
-      cmdLine = parser.parse(options, args);
+    CommandLine cmdLine = parser.parse(options, args);
 
       String dumpFilePath = cmdLine.getOptionValue(dumpFileOpt.getOpt());
       String outputDirPath = cmdLine.getOptionValue(outputDirOpt.getOpt());
@@ -59,8 +60,8 @@ public static void main(String[] args) throws Exception {
       dir.getPath();
       
 
-      String header = ""
-          + "<mediawiki xmlns=\"http://www.mediawiki.org/xml/export-0.3/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd\" version=\"0.3\" xml:lang=\"en\">\n"
+    String header =
+          "<mediawiki xmlns=\"http://www.mediawiki.org/xml/export-0.3/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd\" version=\"0.3\" xml:lang=\"en\">\n"
           + "  <siteinfo>\n" + "<sitename>Wikipedia</sitename>\n"
           + "    <base>http://en.wikipedia.org/wiki/Main_Page</base>\n"
           + "    <generator>MediaWiki 1.13alpha</generator>\n"
@@ -91,7 +92,7 @@ public static void main(String[] args) throws Exception {
       String thisLine;
       StringBuilder content = new StringBuilder();
       content.append(header);
-      Integer filenumber = new Integer(0);
+    int filenumber = 0;
       DecimalFormat decimalFormatter = new DecimalFormat("0000");
       while ((thisLine = dumpReader.readLine()) != null) 
       {
@@ -117,15 +118,10 @@ public static void main(String[] args) throws Exception {
             chunkWriter.close();
             
             content = new StringBuilder();
-            
             content.append(header);
-            
           }
         }
       } 
 
-    } catch (Exception exp) {
-      exp.printStackTrace(System.err);
-    }
   }
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputDriver.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputDriver.java
index 2f7bb12d..9dd7d065 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputDriver.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputDriver.java
@@ -29,7 +29,7 @@
 
 public class InputDriver {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     runJob(args[0], args[1]);
   }
 
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/Job.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/Job.java
index 783e26f5..fed0d06c 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/Job.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/Job.java
@@ -27,7 +27,7 @@
 
 public class Job {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     if (args.length == 5) {
       String input = args[0];
       String output = args[1];
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/OutputDriver.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/OutputDriver.java
index 2bbf8ec0..a25fab97 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/OutputDriver.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/OutputDriver.java
@@ -30,7 +30,7 @@
 
 public class OutputDriver {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     runJob(args[0], args[1]);
   }
 
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java
index dd5dbd8a..f5267562 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java
@@ -29,7 +29,7 @@
 
 public class Job {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     if (args.length == 6) {
       String input = args[0];
       String output = args[1];
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/OutputDriver.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/OutputDriver.java
index 79a2843f..dd2292f6 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/OutputDriver.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/OutputDriver.java
@@ -30,7 +30,7 @@
 
 public class OutputDriver {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     runJob(args[0], args[1]);
   }
 
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputDriver.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputDriver.java
index 01a936f0..da0466bb 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputDriver.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputDriver.java
@@ -29,7 +29,7 @@
 
 public class InputDriver {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     runJob(args[0], args[1]);
   }
 
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java
index c0a7a914..c5ae3675 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java
@@ -27,7 +27,7 @@
 
 public class Job {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     if (args.length == 7) {
       String input = args[0];
       String output = args[1];
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputDriver.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputDriver.java
index 9e8f3c88..b6c50262 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputDriver.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputDriver.java
@@ -31,7 +31,7 @@
 
 public class OutputDriver {
 
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException {
     runJob(args[0], args[1]);
   }
 
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputMapper.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputMapper.java
index 83dece65..84c23672 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputMapper.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/OutputMapper.java
@@ -24,12 +24,16 @@
 import org.apache.hadoop.mapred.Reporter;
 import org.apache.mahout.clustering.meanshift.MeanShiftCanopy;
 import org.apache.mahout.matrix.Vector;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 
 public class OutputMapper extends MapReduceBase implements
     Mapper<Text, Text, Text, Text> {
 
+  private static final Logger log = LoggerFactory.getLogger(OutputMapper.class);
+
   int clusters = 0;
 
   public void map(Text key, Text values, OutputCollector<Text, Text> output,
@@ -43,7 +47,7 @@ public void map(Text key, Text values, OutputCollector<Text, Text> output,
 
   @Override
   public void close() throws IOException {
-    System.out.println("+++ Clusters=" + clusters);
+    log.info("+++ Clusters={}", clusters);
     super.close();
   }
 
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java
index d83eb1c8..1f0534ba 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java
@@ -32,6 +32,8 @@
 import org.uncommons.watchmaker.framework.operators.EvolutionPipeline;
 import org.uncommons.watchmaker.framework.selection.RouletteWheelSelection;
 import org.uncommons.watchmaker.framework.termination.GenerationCount;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -63,6 +65,8 @@
  */
 public class CDGA {
 
+  private static final Logger log = LoggerFactory.getLogger(CDGA.class);
+
   public static void main(String[] args) throws IOException {
     String dataset = "build/classes/wdbc";
     int target = 1;
@@ -85,7 +89,7 @@ public static void main(String[] args) throws IOException {
       popSize = Integer.parseInt(args[7]);
       genCount = Integer.parseInt(args[8]);
     } else {
-      System.out.println("Invalid arguments, working with default parameters instead");
+      log.warn("Invalid arguments, working with default parameters instead");
 	  }
 
     long start = System.currentTimeMillis();
@@ -127,7 +131,7 @@ private static void runJob(String dataset, int target, double threshold,
 
     engine.addEvolutionObserver(new EvolutionObserver<Rule>() {
       public void populationUpdate(PopulationData<Rule> data) {
-        System.out.println("Generation " + data.getGenerationNumber());
+        log.info("Generation {}", data.getGenerationNumber());
       }
     });
 
@@ -144,8 +148,8 @@ public void populationUpdate(PopulationData<Rule> data) {
         inpath, split);
 
     // evaluate the solution over the testing set
-    System.out.println("Best solution fitness (train set) : " + bestTrainFit);
-    System.out.println("Best solution fitness (test set) : " + bestTestFit);
+    log.info("Best solution fitness (train set) : {}", bestTrainFit);
+    log.info("Best solution fitness (test set) : {}", bestTestFit);
   }
 
   static void printElapsedTime(long milli) {
@@ -158,7 +162,6 @@ static void printElapsedTime(long milli) {
     long hours = minutes / 60;
     minutes %= 60;
 
-    System.out.println("Elapsed time (Hours:minutes:seconds:milli) : " + hours
-        + ":" + minutes + ":" + seconds + ":" + milli);
+    log.info("Elapsed time (Hours:minutes:seconds:milli) : {}:{}:{}:{}", new Object[] {hours, minutes, seconds, milli});
   }
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java
index e8a7fbd2..59288478 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java
@@ -33,6 +33,8 @@
 import org.apache.mahout.ga.watchmaker.OutputUtils;
 import org.apache.mahout.ga.watchmaker.cd.FileInfoParser;
 import org.apache.mahout.utils.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.BufferedWriter;
 import java.io.IOException;
@@ -44,10 +46,11 @@
 /**
  * Gathers additional information about a given dataset. Takes a descriptor
  * about the attributes, and generates a description for each one.
- * 
  */
 public class CDInfosTool {
 
+  private static final Logger log = LoggerFactory.getLogger(CDInfosTool.class);
+
   /**
    * Uses Mahout to gather the information about a dataset.
    * 
@@ -199,21 +202,21 @@ private static void storeDescriptions(FileSystem fs, Path inpath,
   public static void main(String[] args) throws IOException {
     // command-line parameters
     if (args.length == 0) {
-      System.out.println("Usage: CDInfosTool dataset_path");
+      log.warn("Usage: CDInfosTool dataset_path");
       throw new IllegalArgumentException();
     }
 
     FileSystem fs = FileSystem.get(new Configuration());
     Path inpath = new Path(args[0]);
 
-    System.out.println("Loading Descriptors...");
+    log.info("Loading Descriptors...");
     Descriptors descriptors = loadDescriptors(fs, inpath);
 
-    System.out.println("Gathering informations...");
+    log.info("Gathering informations...");
     List<String> descriptions = new ArrayList<String>();
     gatherInfos(descriptors, inpath, descriptions);
 
-    System.out.println("Storing Descriptions...");
+    log.info("Storing Descriptions...");
     storeDescriptions(fs, inpath, descriptors, descriptions);
   }
 }
diff --git a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDMutationTest.java b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDMutationTest.java
index d49dac29..ce2eb2a7 100644
--- a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDMutationTest.java
+++ b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDMutationTest.java
@@ -30,7 +30,7 @@
   private MockDataSet mock;
 
   @Override
-  protected void setUp() throws Exception {
+  protected void setUp() {
     rng = new MersenneTwisterRNG();
     mock = new MockDataSet(rng, 100);
   }
diff --git a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDRuleTest.java b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDRuleTest.java
index 44dfecb5..13b322fe 100644
--- a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDRuleTest.java
+++ b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/CDRuleTest.java
@@ -49,7 +49,7 @@ private void assertInRange(double value, double min, double max) {
   }
 
   @Override
-  protected void setUp() throws Exception {
+  protected void setUp() {
     rng = new MersenneTwisterRNG();
     mock = new MockDataSet(rng, 50);
   }
diff --git a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/hadoop/CDReducerTest.java b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/hadoop/CDReducerTest.java
index f196ecb7..3f543a2b 100644
--- a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/hadoop/CDReducerTest.java
+++ b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/hadoop/CDReducerTest.java
@@ -20,7 +20,7 @@
   private CDFitness expected;
 
   @Override
-  protected void setUp() throws Exception {
+  protected void setUp() {
     // generate random evaluatons and calculate expectations
     evaluations = new ArrayList<CDFitness>();
     Random rng = new Random();
diff --git a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosToolTest.java b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosToolTest.java
index 7f4eb04d..6eef8f1a 100644
--- a/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosToolTest.java
+++ b/lucene/mahout/trunk/examples/src/test/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosToolTest.java
@@ -39,7 +39,7 @@
   Random rng;
 
   @Override
-  protected void setUp() throws Exception {
+  protected void setUp() {
     rng = new MersenneTwisterRNG();
   }
 
