diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/SystemTable.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/SystemTable.java
index 9f3a2962..4feb8896 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/SystemTable.java
@@ -47,6 +47,7 @@
     private static final byte[] BOOTSTRAP = utf8("B");
     private static final byte[] TOKEN = utf8("Token");
     private static final byte[] GENERATION = utf8("Generation");
+    private static final byte[] CLUSTERNAME = utf8("ClusterName");
     private static StorageMetadata metadata;
 
     private static byte[] utf8(String str)
@@ -121,6 +122,7 @@ public static synchronized StorageMetadata initMetadata() throws IOException
         SortedSet<byte[]> columns = new TreeSet<byte[]>(new BytesType());
         columns.add(TOKEN);
         columns.add(GENERATION);
+        columns.add(CLUSTERNAME);
         QueryFilter filter = new NamesQueryFilter(LOCATION_KEY, new QueryPath(STATUS_CF), columns);
         ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(filter);
 
@@ -140,13 +142,16 @@ public static synchronized StorageMetadata initMetadata() throws IOException
             // but it's as close as sanely possible
             int generation = (int) (System.currentTimeMillis() / 1000);
 
+            logger.info("Saved ClusterName not found. Using " + DatabaseDescriptor.getClusterName());
+
             RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, LOCATION_KEY);
             cf = ColumnFamily.create(Table.SYSTEM_TABLE, SystemTable.STATUS_CF);
             cf.addColumn(new Column(TOKEN, p.getTokenFactory().toByteArray(token)));
             cf.addColumn(new Column(GENERATION, FBUtilities.toByteArray(generation)));
+            cf.addColumn(new Column(CLUSTERNAME, DatabaseDescriptor.getClusterName().getBytes()));
             rm.add(cf);
             rm.apply();
-            metadata = new StorageMetadata(token, generation);
+            metadata = new StorageMetadata(token, generation, DatabaseDescriptor.getClusterName().getBytes());
             return metadata;
         }
 
@@ -162,13 +167,28 @@ public static synchronized StorageMetadata initMetadata() throws IOException
         assert generation != null : cf;
         int gen = Math.max(FBUtilities.byteArrayToInt(generation.value()) + 1, (int) (System.currentTimeMillis() / 1000));
         
+        IColumn cluster = cf.getColumn(CLUSTERNAME);
+
         RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, LOCATION_KEY);
         cf = ColumnFamily.create(Table.SYSTEM_TABLE, SystemTable.STATUS_CF);
         Column generation2 = new Column(GENERATION, FBUtilities.toByteArray(gen), generation.timestamp() + 1);
         cf.addColumn(generation2);
+        byte[] cname;
+        if (cluster != null)
+        {
+            logger.info("Saved ClusterName found: " + new String(cluster.value()));
+            cname = cluster.value();
+        }
+        else
+        {
+            Column clustername = new Column(CLUSTERNAME, DatabaseDescriptor.getClusterName().getBytes());
+            cf.addColumn(clustername);
+            cname = DatabaseDescriptor.getClusterName().getBytes();
+            logger.info("Saved ClusterName not found. Using " + DatabaseDescriptor.getClusterName());
+        }
         rm.add(cf);
         rm.apply();
-        metadata = new StorageMetadata(token, gen);
+        metadata = new StorageMetadata(token, gen, cname);
         return metadata;
     }
 
@@ -208,11 +228,13 @@ public static void setBootstrapped(boolean isBootstrapped)
     {
         private Token token;
         private int generation;
+        private byte[] cluster;
 
-        StorageMetadata(Token storageId, int generation)
+        StorageMetadata(Token storageId, int generation, byte[] clustername)
         {
             token = storageId;
             this.generation = generation;
+            cluster = clustername;
         }
 
         public Token getToken()
@@ -229,5 +251,10 @@ public int getGeneration()
         {
             return generation;
         }
+
+        public byte[] getClusterName()
+        {
+            return cluster;
+        }
     }
 }
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java
index 043bdabb..f783066e 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageService.java
@@ -301,6 +301,15 @@ public synchronized void initServer() throws IOException
         initialized = true;
         isClientMode = false;
         storageMetadata_ = SystemTable.initMetadata();
+
+        // be certain that the recorded clustername matches what the user specified
+        if (!(Arrays.equals(storageMetadata_.getClusterName(),DatabaseDescriptor.getClusterName().getBytes())))
+        {
+            logger_.error("ClusterName mismatch: " + new String(storageMetadata_.getClusterName()) + " != " +
+                    DatabaseDescriptor.getClusterName());
+            System.exit(3);
+        }
+
         DatabaseDescriptor.createAllDirectories();
         GCInspector.instance.start();
         logger_.info("Starting up server gossip");
