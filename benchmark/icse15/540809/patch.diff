diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index c3e6f661..4a303ddc 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -161,7 +161,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     
 	private static String buildNumber;
 	private static String versionString;
-	
 	// we will use single or mixed, not double byte to reduce traffic on the
 	// wire, this is in keeping with JCC
 	// Note we specify UTF8 for the single byte encoding even though it can
@@ -214,12 +213,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private int sessionArg;
 	private boolean unsecureArg;
 	
-	/** Any exception that occurs during 
-	 *  start up will be saved in this variable and
-	 *  thrown by the start method.
-	 */
-	private Exception runtimeException = null;
-
 	// Used to debug memory in SanityManager.DEBUG mode
 	private memCheck mc;
 
@@ -240,10 +233,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private boolean traceAll;			// trace all sessions
 	private Object traceAllSync = new Object();	// object to use for syncing reading
 										// and changing trace all
-	/**
-	 * Object to sync the start of network server and wait until server startup is 
-	 * complete
-	 */
 	private Object serverStartSync = new Object();	// for syncing start of server.
 	private boolean logConnections;		// log connects
 	private Object logConnectionsSync = new Object(); // object to use for syncing 
@@ -321,7 +310,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private static final int SSL_PEER_AUTHENTICATION = 2;
 
 	private int sslMode = SSL_OFF;
-	private Object  serverStartComplete = new Object();
 
     /**
      * Can EUSRIDPWD security mechanism be used with 
@@ -580,45 +568,18 @@ public void consoleMessage(String msg)
 	 *                        output. Null will disable console output.
 	 *                        
 	 * 
-	 *		   
 	 * @exception Exception	throws an exception if an error occurs
 	 */
-	public void start(final PrintWriter consoleWriter)
+	public void start(PrintWriter consoleWriter)
 		throws Exception
 	{		
-		 
-		   Thread t = new Thread("NetworkServerControl") {
-			   
-		        public void run() {
-		          try {
-		        	  blockingStart(consoleWriter);
-		            } catch (Exception e) {
-		            	runtimeException = e;
-		            }
-		          }
-		        };
-		    // if there was an immediate error like
-		    // another server already running, throw it here.
-		    // ping is still required to verify the server is
-		    // up.     
-		   
-		    t.start();
-		    // We wait on the serverStartComplete object until
-		    // blocking_start sends a notify to tell us the 
-		    // server is up. Then we throw any exception that 
-		    // occurred on startup. blocking_start will remain
-		    // blocked on shutdownSync until it gets a shutdown
-		    // command.
-		    synchronized(serverStartComplete){
-		    	serverStartComplete.wait();
-		    }
-		    
-		    if (runtimeException != null)
-		    	throw runtimeException;		   
+		DRDAServerStarter starter = new DRDAServerStarter();
+		starter.setStartInfo(hostAddress,portNumber,consoleWriter);
+        this.setLogWriter(consoleWriter);
+		startNetworkServer();
+		starter.boot(false,null);
 	}
 	
-	
-
 	/**
 	 * Create the right kind of server socket
 	 */
@@ -673,8 +634,8 @@ private ServerSocket createServerSocket()
 	public void blockingStart(PrintWriter consoleWriter)
 		throws Exception
 	{
-		setLogWriter(consoleWriter);
 		startNetworkServer();
+		setLogWriter(consoleWriter);
 		cloudscapeLogWriter = Monitor.getStream().getPrintWriter();
 		if (SanityManager.DEBUG && debugOutput)
 		{
@@ -715,15 +676,10 @@ public Object run() throws IOException
 			} else {
 				throw e1;
 			}
-		
 		} catch (Exception e) {
 		// If we find other (unexpected) errors, we ultimately exit--so make
 		// sure we print the error message before doing so (Beetle 5033).
 			throwUnexpectedException(e);
-		} finally {
-			synchronized (serverStartComplete) {
-				serverStartComplete.notifyAll();
-			}
 		}
 
 		switch (getSSLMode()) {
@@ -759,8 +715,6 @@ public Object run() throws Exception
 							);
 		clientThread.start();
 		
-
-		
 		// wait until we are told to shutdown or someone sends an InterruptedException
         synchronized(shutdownSync) {
             try {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java
index 094d6923..6a796e7d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSinSameJVM.java
@@ -100,13 +100,6 @@ public NSinSameJVM() {
 			// sure the thread closes down.
 			// connection.close();
 			
-            // DERBY-1465 Make sure attempt to start another
-            // server on the same port fails.
-            try {
-            	serverControl.start(null);
-            	System.out.println("FAIL: Should have gotten exception");
-            } catch (Exception e) {// expecting exception 
-            	}
 			System.out.println("getting ready to shutdown");
 			serverControl.shutdown();
 			Thread.sleep(5000);
