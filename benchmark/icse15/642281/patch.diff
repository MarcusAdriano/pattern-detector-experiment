diff --git a/lucene/solr/trunk/src/java/org/apache/solr/core/MultiCore.java b/lucene/solr/trunk/src/java/org/apache/solr/core/MultiCore.java
index f517df90..c3a0f5a4 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/core/MultiCore.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/core/MultiCore.java
@@ -150,7 +150,8 @@ public void load(String dir, File configFile ) throws ParserConfigurationExcepti
         try { cfgis.close(); } catch (Exception xany) {}
       }
     }
-    enabled = true;
+
+    setEnabled(true);
   }
   
   /**
@@ -191,7 +192,10 @@ public CoreDescriptor register( CoreDescriptor descr ) {
       throw new RuntimeException( "Invalid core name: "+name );
     }
     
-    CoreDescriptor old = cores.put(name, descr);
+    CoreDescriptor old = null;    
+    synchronized (cores) {
+      old = cores.put(name, descr);
+    }
     if( old == null ) {
       log.info( "registering core: "+name );
       return null;
@@ -291,15 +295,21 @@ public void remove( String name ) {
    */
   public Collection<SolrCore> getCores() {
     java.util.List<SolrCore> l = new java.util.ArrayList<SolrCore>();
+    synchronized (cores) {
     for(CoreDescriptor descr : this.cores.values()) {
       if (descr.getCore() != null)
         l.add(descr.getCore());
     }
+    }
     return l;
   }
   
   public Collection<CoreDescriptor> getDescriptors() {
-    return cores.values();
+   java.util.List<CoreDescriptor> l = new java.util.ArrayList<CoreDescriptor>();
+   synchronized (cores) {
+     l.addAll(cores.values());
+   }
+   return l;
   }
   
   public SolrCore getCore(String name) {
@@ -313,29 +323,37 @@ public CoreDescriptor getDescriptor(String name) {
     }
   }
   
+  // all of the following properties aren't synchronized
+  // but this should be OK since they normally won't be changed rapidly
   public boolean isEnabled() {
     return enabled;
   }
   
   public void setEnabled(boolean enabled) {
+    synchronized(this) {
     this.enabled = enabled;
   }
+  }
   
   public boolean isPersistent() {
     return persistent;
   }
   
   public void setPersistent(boolean persistent) {
+    synchronized(this) {
     this.persistent = persistent;
   }
+  }
   
   public String getAdminPath() {
     return adminPath;
   }
   
   public void setAdminPath(String adminPath) {
+    synchronized (this) {
     this.adminPath = adminPath;
   }
+  }
   
   /**
    * Sets the preferred core used to handle MultiCore admin tasks.
@@ -344,14 +362,17 @@ public void setAdminPath(String adminPath) {
    * This however can be useful implementing a "metacore" (a core of cores).
    */
   public void setAdminCore(SolrCore core) {
+    synchronized (cores) {
     adminCore = new java.lang.ref.WeakReference<SolrCore>(core);
   }
+  }
 
   /**
    * Gets a core to handle MultiCore admin tasks (@see SolrDispatchFilter).
    * This makes the best attempt to reuse the same opened SolrCore accross calls.
    */
   public SolrCore getAdminCore() {
+    synchronized (cores) {
     SolrCore core = adminCore != null ? adminCore.get() : null;
     if (core == null || core.isClosed()) {
       for (CoreDescriptor descr : this.cores.values()) {
@@ -366,6 +387,7 @@ public SolrCore getAdminCore() {
     }
     return core;
   }
+  }
 
   /** 
    * Creates a MultiCoreHandler for this MultiCore.
@@ -443,10 +465,11 @@ void persist(Writer writer) throws IOException {
     }
     writer.write(">\n");
     
-    // for all cores...(synchronized on cores by caller)
+    synchronized(cores) {
     for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {
       persist(writer, entry.getValue());
     }
+    }
     writer.write("</multicore>\n");
   }
   
