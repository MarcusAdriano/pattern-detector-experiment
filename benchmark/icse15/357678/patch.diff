diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 4394020e..a1b20b23 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -2817,11 +2817,7 @@ protected void positionToCurrentRowAndUpdate() throws SqlException {
                     preparedStatementForUpdate_.section_);
         }
 
-        boolean chainAutoCommit = connection_.willAutoCommitGenerateFlow();
-        writeUpdateRow(chainAutoCommit);
-        if (chainAutoCommit) {
-            connection_.writeCommit();
-        }
+        writeUpdateRow(false);
 
         agent_.flow(statement_);
 
@@ -2842,9 +2838,6 @@ protected void positionToCurrentRowAndUpdate() throws SqlException {
         }
         readUpdateRow();
 
-        if (chainAutoCommit) {
-            connection_.readCommit();
-        }
         agent_.endReadChain();
     }
 
@@ -2905,9 +2898,6 @@ protected void positionToCurrentRowAndDelete() throws SqlException {
         }
 
         writeDeleteRow();
-        if (connection_.autoCommit_) {
-            connection_.writeAutoCommit();
-        }
 
         agent_.flow(statement_);
 
@@ -2927,9 +2917,7 @@ protected void positionToCurrentRowAndDelete() throws SqlException {
             preparedStatementForDelete_.materialPreparedStatement_.readPrepare_();
         }
         readDeleteRow();
-        if (connection_.autoCommit_) {
-            connection_.readAutoCommit();
-        }
+
         agent_.endReadChain();
     }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
index d1bbbaee..34795127 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/updatableResultSet.java
@@ -2377,6 +2377,70 @@ else if ((TestUtil.isNetFramework() && updateXXXRulesTableForNetworkServer[sqlTy
 			System.out.println("  contents of table t1 from schema s2 should have changed");
 			dumpRS(stmt.executeQuery("select * from s2.t1"));
 
+			System.out.println("Positive Test34 - in autocommit mode, check that updateRow and deleteRow does not commit");
+			conn.setAutoCommit(true);
+
+			// First try deleteRow and updateRow on *first* row of result set
+			reloadData();
+			System.out.println("  Contents before changes to first row in RS:");
+			dumpRS(stmt.executeQuery("select * from t1"));
+			stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
+			rs = stmt.executeQuery("SELECT * FROM t1 FOR UPDATE");
+			rs.next();
+			rs.deleteRow(); 
+			conn.rollback();
+			rs.close();
+			System.out.println("  Make sure the contents of table are unchanged:");
+			dumpRS(stmt.executeQuery("select * from t1"));			
+			stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
+			rs = stmt.executeQuery("SELECT * FROM t1 FOR UPDATE");
+			rs.next();
+			rs.updateInt(1,-rs.getInt(1));
+			rs.updateRow();
+			conn.rollback();
+			rs.close();
+			System.out.println("  Make sure the contents of table are unchanged:");
+			dumpRS(stmt.executeQuery("select * from t1"));			
+
+			// Now try the same on the *last* row in the result set
+			reloadData();
+			stmt = conn.createStatement();
+		        rs = stmt.executeQuery("SELECT COUNT(*) FROM t1");
+			rs.next();
+			int count = rs.getInt(1);
+			rs.close();
+			
+			System.out.println("  Contents before changes to last row in RS:");
+			dumpRS(stmt.executeQuery("select * from t1"));
+			stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
+			rs = stmt.executeQuery("SELECT * FROM t1 FOR UPDATE");
+			for (int j = 0; j < count; j++) {
+			   rs.next();
+			}
+			rs.deleteRow(); 
+			conn.rollback();
+			rs.close();
+			System.out.println("  Make sure the contents of table are unchanged:");
+			dumpRS(stmt.executeQuery("select * from t1"));			
+			
+			stmt = conn.createStatement();
+		        rs = stmt.executeQuery("SELECT COUNT(*) FROM t1");
+			rs.next();
+			count = rs.getInt(1);
+			rs.close();
+
+			stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
+			rs = stmt.executeQuery("SELECT * FROM t1 FOR UPDATE");
+			for (int j = 0; j < count; j++) {
+			   rs.next();
+			}
+			rs.updateInt(1,-rs.getInt(1));
+			rs.updateRow();
+			conn.rollback();
+			rs.close();
+			System.out.println("  Make sure the contents of table are unchanged:");
+			dumpRS(stmt.executeQuery("select * from t1"));	
+
 			teardown();
 
 			conn.close();
