diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
index 36fef52b..646de29f 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/util/FileUtils.java
@@ -27,6 +27,9 @@
 
 import org.apache.log4j.Logger;
 
+import com.sun.jna.Native;
+import org.apache.cassandra.utils.CLibrary;
+
 
 public class FileUtils
 {
@@ -198,6 +201,30 @@ public static void deleteDir(File dir) throws IOException
      * @throws IOException if an error has occurred while creating the link.
      */
     public static void createHardLink(File sourceFile, File destinationFile) throws IOException
+    {
+        int errno = Integer.MIN_VALUE;
+        try
+        {
+            int result = CLibrary.link(sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());
+            if (result != 0)
+                errno = Native.getLastError();
+        }
+        catch (UnsatisfiedLinkError e)
+        {
+            createHardLinkWithExec(sourceFile, destinationFile);
+            return;
+        }
+
+        if (errno != Integer.MIN_VALUE)
+        {
+            // there are 17 different error codes listed on the man page.  punt until/unless we find which
+            // ones actually turn up in practice.
+            throw new IOException(String.format("Unable to create hard link from %s to %s (errno %d)", 
+                                                sourceFile, destinationFile, errno));
+        }
+    }
+
+    private static void createHardLinkWithExec(File sourceFile, File destinationFile) throws IOException
     {
         String osname = System.getProperty("os.name");
         ProcessBuilder pb;
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
index 36829276..ee85a9a5 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/CLibrary.java
@@ -49,8 +49,9 @@
     }
 
     public static native int mlockall(int flags);
-
     public static native int munlockall();
 
+    public static native int link(String from, String to);
+
     private CLibrary() {}
 }
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
index 983518df..b3c425c0 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -565,21 +565,6 @@ public static void tryMlockall()
             // this will have already been logged by CLibrary, no need to repeat it
             return;
         }
-        catch (Exception e)
-        {
-            logger_.debug("Unable to mlockall", e);
-            // skipping mlockall doesn't seem to be a Big Deal except on Linux.  See CASSANDRA-1214
-            if (System.getProperty("os.name").toLowerCase().contains("linux"))
-            {
-                logger_.warn("Unable to lock JVM memory (" + e.getMessage() + ")."
-                             + " This can result in part of the JVM being swapped out, especially with mmapped I/O enabled.");
-            }
-            else if (!System.getProperty("os.name").toLowerCase().contains("windows"))
-            {
-                logger_.info("Unable to lock JVM memory: " + e.getMessage());
-            }
-            return;
-        }
 
         if (errno != Integer.MIN_VALUE)
         {
diff --git a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java
index 8d342cc8..369f5221 100644
--- a/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java
+++ b/cassandra/branches/cassandra-0.6/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java
@@ -60,5 +60,11 @@ public void testGetAllRangesEmpty()
         List<Token> toks = Collections.emptyList();
         assertEquals(Collections.emptyList(), StorageService.instance.getAllRanges(toks));
     }
-}
 
+    @Test
+    public void testSnapshot() throws IOException
+    {
+        // no need to insert extra data, even an "empty" database will have a little information in the system keyspace
+        StorageService.instance.takeAllSnapshot(null);
+    }
+}
