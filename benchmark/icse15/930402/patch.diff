diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java
index 18368b76..14639b39 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java
@@ -42,7 +42,8 @@
   
   private static final Logger log = LoggerFactory.getLogger(MeanShiftCanopyJob.class);
   
-  private MeanShiftCanopyJob() { }
+  private MeanShiftCanopyJob() {
+  }
   
   public static void main(String[] args) throws IOException {
     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
@@ -55,21 +56,20 @@ public static void main(String[] args) throws IOException {
     Option maxIterOpt = DefaultOptionCreator.maxIterOption().create();
     Option helpOpt = DefaultOptionCreator.helpOption();
     
-    Option modelOpt = obuilder.withLongName("distanceClass").withRequired(true).withShortName("d")
-        .withArgument(abuilder.withName("distanceClass").withMinimum(1).withMaximum(1).create())
-        .withDescription("The distance measure class name.").create();
-    
-    Option threshold1Opt = obuilder.withLongName("threshold_1").withRequired(true).withShortName("t1")
-        .withArgument(abuilder.withName("threshold_1").withMinimum(1).withMaximum(1).create())
-        .withDescription("The T1 distance threshold.").create();
-    
-    Option threshold2Opt = obuilder.withLongName("threshold_2").withRequired(true).withShortName("t2")
-        .withArgument(abuilder.withName("threshold_2").withMinimum(1).withMaximum(1).create())
-        .withDescription("The T1 distance threshold.").create();
-    
-    Group group = gbuilder.withName("Options").withOption(inputOpt).withOption(outputOpt)
-        .withOption(modelOpt).withOption(helpOpt).withOption(convergenceDeltaOpt).withOption(threshold1Opt)
-        .withOption(maxIterOpt).withOption(threshold2Opt).create();
+    Option modelOpt = obuilder.withLongName("distanceClass").withRequired(true).withShortName("d").withArgument(
+        abuilder.withName("distanceClass").withMinimum(1).withMaximum(1).create()).withDescription(
+        "The distance measure class name.").create();
+
+    Option threshold1Opt = obuilder.withLongName("threshold_1").withRequired(true).withShortName("t1").withArgument(
+        abuilder.withName("threshold_1").withMinimum(1).withMaximum(1).create()).withDescription("The T1 distance threshold.")
+        .create();
+
+    Option threshold2Opt = obuilder.withLongName("threshold_2").withRequired(true).withShortName("t2").withArgument(
+        abuilder.withName("threshold_2").withMinimum(1).withMaximum(1).create()).withDescription("The T1 distance threshold.")
+        .create();
+
+    Group group = gbuilder.withName("Options").withOption(inputOpt).withOption(outputOpt).withOption(modelOpt).withOption(helpOpt)
+        .withOption(convergenceDeltaOpt).withOption(threshold1Opt).withOption(maxIterOpt).withOption(threshold2Opt).create();
     
     try {
       Parser parser = new Parser();
@@ -95,7 +95,7 @@ public static void main(String[] args) throws IOException {
   }
   
   /**
-   * Run the job
+   * Run the job, first converting the input Vectors to Canopies
    * 
    * @param input
    *          the input pathname String
@@ -112,13 +112,33 @@ public static void main(String[] args) throws IOException {
    * @param maxIterations
    *          an int number of iterations
    */
-  public static void runJob(String input,
-                            String output,
-                            String measureClassName,
-                            double t1,
-                            double t2,
-                            double convergenceDelta,
+  public static void runJob(String input, String output, String measureClassName, double t1, double t2, double convergenceDelta,
                             int maxIterations) throws IOException {
+    runJob(input, output, measureClassName, t1,t2,convergenceDelta, maxIterations, false);
+  }
+
+  /**
+   * Run the job where the input format can be either Vectors or Canopies
+   * 
+   * @param input
+   *          the input pathname String
+   * @param output
+   *          the output pathname String
+   * @param measureClassName
+   *          the DistanceMeasure class name
+   * @param t1
+   *          the T1 distance threshold
+   * @param t2
+   *          the T2 distance threshold
+   * @param convergenceDelta
+   *          the double convergence criteria
+   * @param maxIterations
+   *          an int number of iterations
+   * @param inputIsCanopies 
+              true if the input path already contains MeanShiftCanopies and does not need to be converted from Vectors
+   */
+  public static void runJob(String input, String output, String measureClassName, double t1, double t2, double convergenceDelta,
+      int maxIterations, boolean inputIsCanopies) throws IOException {
     // delete the output directory
     Configuration conf = new JobConf(MeanShiftCanopyDriver.class);
     Path outPath = new Path(output);
@@ -128,19 +148,21 @@ public static void runJob(String input,
     }
     fs.mkdirs(outPath);
     
-    MeanShiftCanopyDriver.createCanopyFromVectors(input, output+"/initial-canopies");
+    String clustersIn = output + "/initial-canopies";
+    if (inputIsCanopies)
+      clustersIn = input;
+    else
+      MeanShiftCanopyDriver.createCanopyFromVectors(input, clustersIn);
     
     // iterate until the clusters converge
     boolean converged = false;
     int iteration = 0;
-    String clustersIn = output+"/initial-canopies";
     while (!converged && (iteration < maxIterations)) {
       log.info("Iteration {}", iteration);
       // point the output to a new directory per iteration
       String clustersOut = output + "/canopies-" + iteration;
       String controlOut = output + CONTROL_CONVERGED;
-      MeanShiftCanopyDriver.runJob(clustersIn, clustersOut, controlOut, measureClassName, t1, t2,
-        convergenceDelta);
+      MeanShiftCanopyDriver.runJob(clustersIn, clustersOut, controlOut, measureClassName, t1, t2, convergenceDelta);
       converged = FileSystem.get(conf).exists(new Path(controlOut));
       // now point the input to the old output directory
       clustersIn = output + "/canopies-" + iteration;
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java
index df74606a..304d9308 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java
@@ -140,7 +140,7 @@ private static void runJob(String input,
     String directoryContainingConvertedInput = output + Constants.DIRECTORY_CONTAINING_CONVERTED_INPUT;
     InputDriver.runJob(input, directoryContainingConvertedInput);
     MeanShiftCanopyJob.runJob(directoryContainingConvertedInput, output + "/meanshift", measureClassName, t1,
-      t2, convergenceDelta, maxIterations);
+      t2, convergenceDelta, maxIterations, true);
     FileStatus[] status = dfs.listStatus(new Path(output + "/meanshift"));
     OutputDriver.runJob(status[status.length - 1].getPath().toString(), output
                                                                         + CLUSTERED_POINTS_OUTPUT_DIRECTORY);
