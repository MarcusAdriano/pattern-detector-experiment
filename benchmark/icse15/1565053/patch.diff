diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
index 0ecb477b..e433e86c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
@@ -229,6 +229,19 @@ public DistributedUpdateProcessor(SolrQueryRequest req,
         }
       }
 
+      DistribPhase phase =
+          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));
+
+      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {
+        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {
+          // locally we think we are leader but the request says it came FROMLEADER
+          // that could indicate a problem, let the full logic below figure it out
+        } else {
+          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.
+          forwardToLeader = false;
+          return nodes;
+        }
+      }
 
       String shardId = slice.getName();
 
@@ -252,9 +265,6 @@ public DistributedUpdateProcessor(SolrQueryRequest req,
           }
         }
 
-        DistribPhase phase =
-            DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));
-
         doDefensiveChecks(phase);
 
         // if request is coming from another collection then we want it to be sent to all replicas
@@ -315,11 +325,21 @@ public DistributedUpdateProcessor(SolrQueryRequest req,
     return nodes;
   }
 
+  private boolean couldIbeSubShardLeader(DocCollection coll) {
+    // Could I be the leader of a shard in "construction/recovery" state?
+    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor()
+        .getShardId();
+    Slice mySlice = coll.getSlice(myShardId);
+    String state = mySlice.getState();
+    return (Slice.CONSTRUCTION.equals(state) || Slice.RECOVERY.equals(state));
+  }
+  
   private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {
-    // Am I the leader of a shard in "construction" state?
+    // Am I the leader of a shard in "construction/recovery" state?
     String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();
     Slice mySlice = coll.getSlice(myShardId);
-    if (Slice.CONSTRUCTION.equals(mySlice.getState()) || Slice.RECOVERY.equals(mySlice.getState())) {
+    String state = mySlice.getState();
+    if (Slice.CONSTRUCTION.equals(state) || Slice.RECOVERY.equals(state)) {
       Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);
       boolean amILeader = myLeader.getName().equals(
           req.getCore().getCoreDescriptor().getCloudDescriptor()
