diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java
index 0bc7d775..71439da0 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java
@@ -43,7 +43,14 @@
   public static final String DEFAULT_MERGE_SCHEDULER_CLASSNAME = ConcurrentMergeScheduler.class.getName();
   public final Version luceneVersion;
   
+  /**
+   * The explicit value of &lt;useCompoundFile&gt; specified on this index config
+   * @deprecated use {@link #getUseCompoundFile}
+   */
+  @Deprecated
   public final boolean useCompoundFile;
+  private boolean effectiveUseCompountFileSetting;
+
   public final int maxBufferedDocs;
   public final int maxMergeDocs;
   public final int maxIndexingThreads;
@@ -73,7 +80,7 @@
   @SuppressWarnings("deprecation")
   private SolrIndexConfig(SolrConfig solrConfig) {
     luceneVersion = solrConfig.luceneMatchVersion;
-    useCompoundFile = false;
+    useCompoundFile = effectiveUseCompountFileSetting = false;
     maxBufferedDocs = -1;
     maxMergeDocs = -1;
     maxIndexingThreads = IndexWriterConfig.DEFAULT_MAX_THREAD_STATES;
@@ -121,6 +128,7 @@ public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def
 
     defaultMergePolicyClassName = def.defaultMergePolicyClassName;
     useCompoundFile=solrConfig.getBool(prefix+"/useCompoundFile", def.useCompoundFile);
+    effectiveUseCompountFileSetting = useCompoundFile;
     maxBufferedDocs=solrConfig.getInt(prefix+"/maxBufferedDocs",def.maxBufferedDocs);
     maxMergeDocs=solrConfig.getInt(prefix+"/maxMergeDocs",def.maxMergeDocs);
     maxIndexingThreads=solrConfig.getInt(prefix+"/maxIndexingThreads",def.maxIndexingThreads);
@@ -189,6 +197,10 @@ public IndexWriterConfig toIndexWriterConfig(IndexSchema schema) {
     iwc.setMergePolicy(buildMergePolicy(schema));
     iwc.setMergeScheduler(buildMergeScheduler(schema));
 
+    // do this after buildMergePolicy since the backcompat logic 
+    // there may modify the effective useCompoundFile
+    iwc.setUseCompoundFile(getUseCompoundFile());
+
     if (maxIndexingThreads != -1) {
       iwc.setMaxThreadStates(maxIndexingThreads);
     }
@@ -206,6 +218,15 @@ public IndexWriterConfig toIndexWriterConfig(IndexSchema schema) {
     return iwc;
   }
 
+  /**
+   * Builds a MergePolicy, may also modify the value returned by
+   * getUseCompoundFile() for use by the IndexWriterConfig if 
+   * "useCompoundFile" is specified as an init arg for 
+   * an out of the box MergePolicy that no longer supports it
+   *
+   * @see #fixUseCFMergePolicyInitArg
+   * @see #getUseCompoundFile
+   */
   private MergePolicy buildMergePolicy(IndexSchema schema) {
     String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;
 
@@ -213,31 +234,31 @@ private MergePolicy buildMergePolicy(IndexSchema schema) {
 
     if (policy instanceof LogMergePolicy) {
       LogMergePolicy logMergePolicy = (LogMergePolicy) policy;
+      fixUseCFMergePolicyInitArg(LogMergePolicy.class);
 
       if (maxMergeDocs != -1)
         logMergePolicy.setMaxMergeDocs(maxMergeDocs);
 
-      logMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
+      logMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);
 
       if (mergeFactor != -1)
         logMergePolicy.setMergeFactor(mergeFactor);
 
-      fixUseCFInitArg(LogMergePolicy.class);
 
     } else if (policy instanceof TieredMergePolicy) {
       TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;
+      fixUseCFMergePolicyInitArg(TieredMergePolicy.class);
       
-      tieredMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
+      tieredMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);
       
       if (mergeFactor != -1) {
         tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);
         tieredMergePolicy.setSegmentsPerTier(mergeFactor);
       }
 
-      fixUseCFInitArg(TieredMergePolicy.class);
 
-    } else if (useCompoundFile && (mergeFactor != -1)) {
-      log.warn("Use of <useCompoundFile> or <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.");
+    } else if (mergeFactor != -1) {
+      log.warn("Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.");
     }
 
     if (mergePolicyInfo != null)
@@ -256,19 +277,35 @@ private MergeScheduler buildMergeScheduler(IndexSchema schema) {
     return scheduler;
   }
 
+  public boolean getUseCompoundFile() {
+    return effectiveUseCompountFileSetting;
+  }
+
   /**
    * Lucene 4.4 removed the setUseCompoundFile(boolean) method from the two 
-   * conrete MergePolicies provided with Lucene/Solr.  In the event that users 
-   * have a value explicitly configured for this setter in their mergePolicy 
-   * init args, we remove it for them and warn about it.
+   * conrete MergePolicies provided with Lucene/Solr and added it to the 
+   * IndexWRiterConfig.  
+   * In the event that users have a value explicitly configured for this 
+   * setter in their MergePolicy init args, we remove it from the MergePolicy 
+   * init args, update the 'effective' useCompoundFile setting used by the 
+   * IndexWriterConfig, and warn about discontinuing to use this init arg.
+   * 
+   * @see #getUseCompoundFile
    */
-  private void fixUseCFInitArg(Class c) {
+  private void fixUseCFMergePolicyInitArg(Class c) {
 
     if (null == mergePolicyInfo || null == mergePolicyInfo.initArgs) return;
 
     Object useCFSArg = mergePolicyInfo.initArgs.remove("useCompoundFile");
     if (null != useCFSArg) {
-      log.warn("Ignoring 'useCompoundFile' specified as an init arg for the <mergePolicy> since it is no longer supported by " + c.getSimpleName());
+      log.warn("Ignoring 'useCompoundFile' specified as an init arg for the <mergePolicy> since it is no directly longer supported by " + c.getSimpleName());
+      if (useCFSArg instanceof Boolean) {
+        boolean cfs = ((Boolean)useCFSArg).booleanValue();
+        log.warn("Please update your config to specify <useCompoundFile>"+cfs+"</useCompoundFile> directly in your <indexConfig> settings.");
+        effectiveUseCompountFileSetting = cfs;
+      } else {
+        log.error("MergePolicy's 'useCompoundFile' init arg is not a boolean, can not apply back compat logic to apply to the IndexWriterConfig: " + useCFSArg.toString());
+      }
     }
   }
 }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig.java
index 3c14fbae..39e41c93 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig.java
@@ -20,14 +20,25 @@
  * limitations under the License.
  */
 
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.AtomicReader;
+import org.apache.lucene.index.AtomicReaderContext;
+import org.apache.lucene.index.SegmentReader;
+import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.MergePolicy;
 import org.apache.lucene.index.TieredMergePolicy;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.util.RefCounted;
+import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.SolrTestCaseJ4;
 import org.junit.After;
+import java.util.concurrent.atomic.AtomicInteger;
 
 public class TestMergePolicyConfig extends SolrTestCaseJ4 {
 
+  private static AtomicInteger docIdCounter = new AtomicInteger(42);
+
   @After
   public void after() throws Exception {
     deleteCore();
@@ -36,27 +47,39 @@ public void after() throws Exception {
   public void testDefaultMergePolicyConfig() throws Exception {
     initCore("solrconfig-mergepolicy-defaults.xml","schema-minimal.xml");
     IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());
+    assertEquals(false, iwc.getUseCompoundFile());
 
     TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,
                                                iwc.getMergePolicy());
     assertEquals(0.0D, tieredMP.getNoCFSRatio(), 0.0D);
 
+    assertCommitSomeNewDocs();
+    assertCompoundSegments(h.getCore(), false);
   }
 
   public void testLegacyMergePolicyConfig() throws Exception {
     initCore("solrconfig-mergepolicy-legacy.xml","schema-minimal.xml");
     IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());
+    assertEquals(true, iwc.getUseCompoundFile());
+
+
     TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,
                                                iwc.getMergePolicy());
 
     assertEquals(7, tieredMP.getMaxMergeAtOnce());
     assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);
     assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.0D);
+
+    assertCommitSomeNewDocs();
+    assertCompoundSegments(h.getCore(), true);
   }
   
   public void testTieredMergePolicyConfig() throws Exception {
     initCore("solrconfig-mergepolicy.xml","schema-minimal.xml");
     IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());
+    assertEquals(true, iwc.getUseCompoundFile());
+
+
     TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,
                                                iwc.getMergePolicy());
 
@@ -65,11 +88,25 @@ public void testTieredMergePolicyConfig() throws Exception {
     
     // mp-specific setters
     assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());
-    assertEquals(0.6D, tieredMP.getNoCFSRatio(), 0.001);
+    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);
     // make sure we overrode segmentsPerTier 
     // (split from maxMergeAtOnce out of mergeFactor)
     assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);
     
+    assertCommitSomeNewDocs();
+    // even though we have a single segment (which is 100% of the size of 
+    // the index which is higher then our 0.6D threashold) the
+    // compound ratio doesn't matter because the segment was never merged
+    assertCompoundSegments(h.getCore(), true);
+
+    assertCommitSomeNewDocs();
+    assertNumSegments(h.getCore(), 2);
+    assertCompoundSegments(h.getCore(), true);
+
+    assertU(optimize());
+    assertNumSegments(h.getCore(), 1);
+    // we've now forced a merge, and the MP ratio should be in play
+    assertCompoundSegments(h.getCore(), false);
   }
 
   /**
@@ -84,4 +121,66 @@ public void testTieredMergePolicyConfig() throws Exception {
     return clazz.cast(o);
   }
 
+  public static void assertCommitSomeNewDocs() {
+    for (int i = 0; i < 5; i++) {
+      int val = docIdCounter.getAndIncrement();
+      assertU(adoc("id", "" + val,
+                   "a_s", val + "_" + val + "_" + val + "_" + val,
+                   "b_s", val + "_" + val + "_" + val + "_" + val,
+                   "c_s", val + "_" + val + "_" + val + "_" + val,
+                   "d_s", val + "_" + val + "_" + val + "_" + val,
+                   "e_s", val + "_" + val + "_" + val + "_" + val,
+                   "f_s", val + "_" + val + "_" + val + "_" + val));
+    }
+    assertU(commit());
+  }
+
+  /**
+   * Given an SolrCore, asserts that the number of leave segments in 
+   * the index reader matches the expected value.
+   */
+  public static void assertNumSegments(SolrCore core, int expected) {
+    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();
+    try {
+      assertEquals(expected, searcherRef.get().getIndexReader().leaves().size());
+    } finally {
+      searcherRef.decref();
+    }
+  }
+
+  /**
+   * Given an SolrCore, asserts that each segment in the (searchable) index 
+   * has a compound file status that matches the expected input.
+   */
+  public static void assertCompoundSegments(SolrCore core, boolean compound) {
+    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();
+    try {
+      assertCompoundSegments(searcherRef.get().getIndexReader(), compound);
+    } finally {
+      searcherRef.decref();
+    }
+  }
+
+  /**
+   * Given an IndexReader, asserts that there is at least one AtomcReader leaf,
+   * and that all AtomicReader leaves are SegmentReader's that have a compound 
+   * file status that matches the expected input.
+   */
+  private static void assertCompoundSegments(IndexReader reader, 
+                                             boolean compound) {
+
+    assertNotNull("Null leaves", reader.leaves());
+    assertTrue("no leaves", 0 < reader.leaves().size());
+
+    for (AtomicReaderContext atomic : reader.leaves()) {
+      assertTrue("not a segment reader: " + atomic.reader().toString(), 
+                 atomic.reader() instanceof SegmentReader);
+      
+      assertEquals("Compound status incorrect for: " + 
+                   atomic.reader().toString(),
+                   compound,
+                   ((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());
+    }
+  }
+
 }
