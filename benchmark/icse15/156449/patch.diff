diff --git a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
index 8a0f6049..51ae895e 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -524,6 +524,7 @@ protected Query getRangeQuery(String field,
   protected Query getBooleanQuery(Vector clauses) throws ParseException {
     return getBooleanQuery(clauses, false);
   }
+
   /**
    * Factory method for generating query, given a set of clauses.
    * By default creates a boolean query composed of clauses passed in.
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
index 5c50e088..f170cd7d 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
@@ -170,6 +170,8 @@ public void testSimple() throws Exception {
     assertQueryEquals("t端rm term term", null, "t端rm term term");
     assertQueryEquals("端mlaut", null, "端mlaut");
 
+    assertQueryEquals("+a", null, "+a");
+    assertQueryEquals("-a", null, "-a");
     assertQueryEquals("a AND b", null, "+a +b");
     assertQueryEquals("(a AND b)", null, "+a +b");
     assertQueryEquals("c OR (a AND b)", null, "c (+a +b)");
@@ -325,6 +327,7 @@ public void testQPA() throws Exception {
     assertQueryEquals("term AND NOT phrase term", qpAnalyzer,
                       "(+term -\"phrase1 phrase2\") term");
     assertQueryEquals("stop", qpAnalyzer, "");
+    assertQueryEquals("stop OR stop AND stop", qpAnalyzer, "");
     assertTrue(getQuery("term term term", qpAnalyzer) instanceof BooleanQuery);
     assertTrue(getQuery("term +stop", qpAnalyzer) instanceof TermQuery);
   }
@@ -530,11 +533,9 @@ public void testPrecedence() throws Exception {
     Query query1 = PrecedenceQueryParser.parse("A AND B OR C AND D", "field", new WhitespaceAnalyzer());
     Query query2 = PrecedenceQueryParser.parse("(A AND B) OR (C AND D)", "field", new WhitespaceAnalyzer());
     assertEquals(query1, query2);
-  }
 
-  public void testPrecedenceWithNot() throws Exception {
-    Query query1 = PrecedenceQueryParser.parse("A OR B C", "field", new WhitespaceAnalyzer());
-    Query query2 = PrecedenceQueryParser.parse("A B C", "field", new WhitespaceAnalyzer());
+    query1 = PrecedenceQueryParser.parse("A OR B C", "field", new WhitespaceAnalyzer());
+    query2 = PrecedenceQueryParser.parse("A B C", "field", new WhitespaceAnalyzer());
     assertEquals(query1, query2);
 
     query1 = PrecedenceQueryParser.parse("A AND B C", "field", new WhitespaceAnalyzer());
@@ -548,8 +549,11 @@ public void testPrecedenceWithNot() throws Exception {
     query1 = PrecedenceQueryParser.parse("A OR NOT B", "field", new WhitespaceAnalyzer());
     query2 = PrecedenceQueryParser.parse("A -B", "field", new WhitespaceAnalyzer());
     assertEquals(query1, query2);
-  }
 
+    query1 = PrecedenceQueryParser.parse("A OR NOT B AND C", "field", new WhitespaceAnalyzer());
+    query2 = PrecedenceQueryParser.parse("A (-B +C)", "field", new WhitespaceAnalyzer());
+    assertEquals(query1, query2);
+  }
 
 
   public void tearDown() {
