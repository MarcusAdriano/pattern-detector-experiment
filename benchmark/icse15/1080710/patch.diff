diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java
index 29ff0161..9b9e4722 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java
@@ -366,17 +366,20 @@ public float getSigma()
     public void createKeySpaces()
     {
         KsDef keyspace = new KsDef();
-        ColumnDef standardColumn = new ColumnDef(ByteBuffer.wrap("C1".getBytes()), "UTF8Type");
-        ColumnDef superSubColumn = new ColumnDef(ByteBuffer.wrap("S1".getBytes()), "UTF8Type");
 
+        // column family for standard columns
+        CfDef standardCfDef = new CfDef("Keyspace1", "Standard1");
+        standardCfDef.setComparator_type("AsciiType").setDefault_validation_class("BytesType");
         if (indexType != null)
+        {
+            ColumnDef standardColumn = new ColumnDef(ByteBuffer.wrap("C1".getBytes()), "BytesType");
             standardColumn.setIndex_type(indexType).setIndex_name("Idx1");
-
-        // column family for standard columns
-        CfDef standardCfDef = new CfDef("Keyspace1", "Standard1").setColumn_metadata(Arrays.asList(standardColumn));
+            standardCfDef.setColumn_metadata(Arrays.asList(standardColumn));
+        }
 
         // column family with super columns
-        CfDef superCfDef = new CfDef("Keyspace1", "Super1").setColumn_metadata(Arrays.asList(superSubColumn)).setColumn_type("Super");
+        CfDef superCfDef = new CfDef("Keyspace1", "Super1").setColumn_type("Super");
+        superCfDef.setComparator_type("AsciiType").setSubcomparator_type("AsciiType").setDefault_validation_class("BytesType");
 
         keyspace.setName("Keyspace1");
         keyspace.setStrategy_class(replicationStrategy);
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java
index 8b25aa79..7b932614 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java
@@ -39,7 +39,7 @@ public Inserter(int index)
 
     public void run(Cassandra.Client client) throws IOException
     {
-        List<String> values  = generateValues();
+        List<ByteBuffer> values = generateValues();
         List<Column> columns = new ArrayList<Column>();
         List<SuperColumn> superColumns = new ArrayList<SuperColumn>();
 
@@ -49,8 +49,7 @@ public void run(Cassandra.Client client) throws IOException
         for (int i = 0; i < session.getColumnsPerKey(); i++)
         {
             String columnName = ("C" + Integer.toString(i));
-            ByteBuffer columnValue = ByteBufferUtil.bytes(values.get(i % values.size()));
-
+            ByteBuffer columnValue = values.get(i % values.size());
             columns.add(new Column(ByteBufferUtil.bytes(columnName), columnValue, System.currentTimeMillis()));
         }
 
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java
index 10482987..3bdb72c8 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java
@@ -59,9 +59,9 @@ public Operation(int idx)
      * Generate values of average size specified by -S, up to cardinality specified by -C
      * @return Collection of the values
      */
-    protected List<String> generateValues()
+    protected List<ByteBuffer> generateValues()
     {
-        List<String> values = new ArrayList<String>();
+        List<ByteBuffer> values = new ArrayList<ByteBuffer>();
 
         int limit = 2 * session.getColumnSize();
 
@@ -69,8 +69,7 @@ public Operation(int idx)
         {
             byte[] value = new byte[Stress.randomizer.nextInt(limit)];
             Stress.randomizer.nextBytes(value);
-
-            values.add(FBUtilities.bytesToHex(value));
+            values.add(ByteBuffer.wrap(value));
         }
 
         return values;
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java
index 7e8b7ac5..2c20f5b0 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -270,10 +270,10 @@ public CFMetaData(String tableName,
              column_metadata);
     }
     
-    public static CFMetaData newIndexMetadata(String table, String parentCf, ColumnDefinition info, AbstractType columnComparator)
+    public static CFMetaData newIndexMetadata(CFMetaData parent, ColumnDefinition info, AbstractType columnComparator)
     {
-        return new CFMetaData(table,
-                              indexName(parentCf, info),
+        return new CFMetaData(parent.tableName,
+                              indexName(parent.cfName, info),
                               ColumnFamilyType.Standard,
                               columnComparator,
                               null,
@@ -281,15 +281,15 @@ public static CFMetaData newIndexMetadata(String table, String parentCf, ColumnD
                               0,
                               0,
                               0,
-                              DEFAULT_GC_GRACE_SECONDS,
+                              parent.gcGraceSeconds,
                               BytesType.instance,
-                              DEFAULT_MIN_COMPACTION_THRESHOLD,
-                              DEFAULT_MAX_COMPACTION_THRESHOLD,
-                              DEFAULT_ROW_CACHE_SAVE_PERIOD_IN_SECONDS,
-                              DEFAULT_KEY_CACHE_SAVE_PERIOD_IN_SECONDS,
-                              DEFAULT_MEMTABLE_LIFETIME_IN_MINS,
-                              DEFAULT_MEMTABLE_THROUGHPUT_IN_MB,
-                              DEFAULT_MEMTABLE_OPERATIONS_IN_MILLIONS,
+                              parent.minCompactionThreshold,
+                              parent.maxCompactionThreshold,
+                              0,
+                              0,
+                              parent.memtableFlushAfterMins,
+                              parent.memtableThroughputInMb,
+                              parent.memtableOperationsInMillions,
                               Collections.<ByteBuffer, ColumnDefinition>emptyMap());
     }
 
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 5d299a87..daf1249c 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -313,7 +313,7 @@ public void addIndex(final ColumnDefinition info)
         AbstractType columnComparator = (rowPartitioner instanceof OrderPreservingPartitioner || rowPartitioner instanceof ByteOrderedPartitioner)
                                         ? BytesType.instance
                                         : new LocalByPartionerType(StorageService.getPartitioner());
-        final CFMetaData indexedCfMetadata = CFMetaData.newIndexMetadata(table.name, columnFamily, info, columnComparator);
+        final CFMetaData indexedCfMetadata = CFMetaData.newIndexMetadata(metadata, info, columnComparator);
         ColumnFamilyStore indexedCfs = ColumnFamilyStore.createColumnFamilyStore(table,
                                                                                  indexedCfMetadata.cfName,
                                                                                  new LocalPartitioner(metadata.getColumn_metadata().get(info.name).validator),
