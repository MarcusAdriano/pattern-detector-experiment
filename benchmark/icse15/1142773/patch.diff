diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index ddee0926..9f726e38 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -75,14 +75,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.types.DataValueDescriptor;
 
-import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
-import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
-import org.apache.derby.impl.sql.compile.FromSubquery;
 
 import java.util.Enumeration;
 import java.util.Properties;
 import java.util.Vector;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.Set;
 
 /**
@@ -2304,7 +2302,15 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,
 				//Following call is marking the query to run with definer 
 				//privileges. This marking will make sure that we do not collect
 				//any privilege requirement for it.
-				fsq.disablePrivilegeCollection();
+                CollectNodesVisitor cnv =
+                    new CollectNodesVisitor(QueryTreeNode.class, null);
+
+                fsq.accept(cnv);
+
+                for (Iterator it = cnv.getList().iterator(); it.hasNext(); ) {
+                    ((QueryTreeNode)it.next()).disablePrivilegeCollection();
+                }
+
 				fsq.setOrigTableName(this.getOrigTableName());
 
 				// since we reset the compilation schema when we return, we
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
index 2d083429..7484c93a 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 
 import org.apache.derby.iapi.util.JBitSet;
 
@@ -659,15 +660,6 @@ public ResultColumnList getAllResultColumns(TableName allTableName)
 	}
 
 	/** 
-	 * @see QueryTreeNode#disablePrivilegeCollection
-	 */
-	public void disablePrivilegeCollection()
-	{
-		super.disablePrivilegeCollection();
-		subquery.disablePrivilegeCollection();
-	}
-
-	/**
 	 * Search to see if a query references the specifed table name.
 	 *
 	 * @param name		Table name (String) to search for.
@@ -730,4 +722,27 @@ void decrementLevel(int decrement)
 	public void setOrigCompilationSchema(SchemaDescriptor sd) {
 		origCompilationSchema = sd;
 	}
+
+    /**
+     * @see QueryTreeNode#acceptChildren
+     */
+    void acceptChildren(Visitor v)
+        throws StandardException
+    {
+        super.acceptChildren(v);
+
+        subquery.accept(v);
+
+        if (orderByList != null) {
+            orderByList.accept(v);
+        }
+
+        if (offset != null) {
+            offset.accept(v);
+        }
+
+        if (fetchFirst != null) {
+            fetchFirst.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java
index da50f6fd..f14d0b47 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java
@@ -211,16 +211,6 @@ public JavaValueNode getJavaValueNode()
 	}
 
 	/** 
-	 * @see QueryTreeNode#disablePrivilegeCollection
-	 */
-	public void disablePrivilegeCollection()
-	{
-		super.disablePrivilegeCollection();
-		if (javaNode != null)
-			javaNode.disablePrivilegeCollection();
-	}
-
-	/**
 	 * Bind this expression.  This means binding the sub-expressions,
 	 * as well as figuring out what the return type is for this expression.
 	 *
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index 3a32fc0e..13d04486 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -547,16 +547,16 @@ final boolean isSessionSchema(String schemaName)
 	}
 
 	/**
-	 * Triggers, constraints and views get executed with their definer's
-	 * privileges and they can exist in the system only if their definers'
-	 * still have all the privileges to creeate them. Based on this, any
+     * Triggers, constraints and views get executed with their definers'
+     * privileges and they can exist in the system only if their definers
+     * still have all the privileges to create them. Based on this, any
 	 * time a trigger/view/constraint is executing, we do not need to waste
 	 * time in checking if the definer still has the right set of privileges.
-	 * At compile time, we wil make sure that we do not collect the privilege
+     * At compile time, we will make sure that we do not collect the privilege
 	 * requirement for objects accessed with definer privileges by calling the
 	 * following method. 
 	 */
-	public void disablePrivilegeCollection()
+	final void disablePrivilegeCollection()
 	{
 		isPrivilegeCollectionRequired = false;
 	}
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
index c71ddafd..a217de27 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
@@ -1362,16 +1362,6 @@ public boolean updatableByCursor()
 	}
 
 	/** 
-	 * @see QueryTreeNode#disablePrivilegeCollection
-	 */
-	public void disablePrivilegeCollection()
-	{
-		super.disablePrivilegeCollection();
-		if (expression != null)
-			expression.disablePrivilegeCollection();
-	}
-
-	/**
 	 * Make a copy of this ResultColumn in a new ResultColumn
 	 *
 	 * @return	A new ResultColumn with the same contents as this one
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index af292d1c..0a4f2342 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -2780,18 +2780,6 @@ void markUpdatableByCursor()
 	}
 
 	/** 
-	 * @see QueryTreeNode#disablePrivilegeCollection
-	 */
-	public void disablePrivilegeCollection()
-	{
-		super.disablePrivilegeCollection();
-
-		int size = size();
-		for (int index = 0; index < size; index++)
-			((ResultColumn) elementAt(index)).disablePrivilegeCollection();			
-	}
-	
-	/**
 	 * Verify that all of the column names in this list are contained
 	 * within the ColumnDefinitionNodes within the TableElementList.
 	 *
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index af95a451..152d93ff 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -480,16 +480,6 @@ public FromList getFromList()
 	}
 
 	/** 
-	 * @see QueryTreeNode#disablePrivilegeCollection
-	 */
-	public void disablePrivilegeCollection()
-	{
-		super.disablePrivilegeCollection();
-		if (resultColumns != null)
-			resultColumns.disablePrivilegeCollection();
-	}
-
-	/**
 	 * Bind the result columns of this ResultSetNode when there is no
 	 * base table to bind them to.  This is useful for SELECT statements,
 	 * where the result columns get their types from the expressions that
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index e8b5edea..967a39a1 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -24,7 +24,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.compile.CostEstimate;
 import org.apache.derby.iapi.sql.compile.Optimizer;
-import org.apache.derby.iapi.sql.compile.Visitable;
 import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 
@@ -34,8 +33,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 
-import org.apache.derby.iapi.types.TypeId;
-import org.apache.derby.iapi.types.DataTypeDescriptor;
 
 import org.apache.derby.iapi.reference.Limits;
 import org.apache.derby.iapi.reference.SQLState;
@@ -2263,17 +2260,6 @@ public boolean referencesTarget(String name, boolean baseTable)
 	}
 
 	/** 
-	 * @see QueryTreeNode#disablePrivilegeCollection
-	 */
-	public void disablePrivilegeCollection()
-	{
-		super.disablePrivilegeCollection();
-		int fromListSize = fromList.size();
-		for( int i = 0; i < fromListSize; i++)
-			((FromTable) fromList.elementAt(i)).disablePrivilegeCollection();
-	}
-
-	/**
 	 * Return whether or not this ResultSetNode contains a subquery with a
 	 * reference to the specified target table.
 	 * 
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
index dfce368a..09d01554 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java
@@ -133,6 +133,50 @@ protected void decorateSQL(Statement s) throws SQLException {
 	    	        "  language java parameter style java" +
 	    	        "  external name 'org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.s1P1'" +
 	    	        "  no sql called on null input");
+
+
+               // DERBY-5292: Definer's rights in views
+               s.execute("create schema appl");
+               s.execute(
+                   "CREATE TABLE appl.\"TBL_Tasks\"" +
+                   "(\"TaskID\" integer NOT NULL " +
+                   "                    GENERATED ALWAYS AS IDENTITY," +
+                   " \"Task\" varchar(64) NOT NULL," +
+                   " \"AssignedTo\" varchar(64) NOT NULL," +
+                   "CONSTRAINT \"PK_Tasks\" PRIMARY KEY (\"TaskID\"))");
+               s.execute(
+                   "CREATE TABLE appl.\"TBL_Priorities\"" +
+                   "(\"TaskID\" integer NOT NULL," +
+                   " \"Priority\" integer NOT NULL," +
+                   " \"SeqNbr\" integer NOT NULL," +
+                   "CONSTRAINT \"PK_Priorities\" PRIMARY KEY " +
+                   "  (\"TaskID\", \"Priority\"))");
+               s.execute(
+                   "CREATE VIEW appl.\"VW_MyTasks\" AS " +
+                   "    SELECT * FROM appl.\"TBL_Tasks\" " +
+                   "WHERE \"AssignedTo\" = SESSION_USER");
+               s.execute(
+                   "CREATE VIEW appl.\"VW_MyPriorityTasks\" AS " +
+                   "    SELECT t.\"TaskID\", t.\"Task\", p.\"Priority\"" +
+                   "    FROM appl.\"TBL_Tasks\" AS t," +
+                   "         appl.\"TBL_Priorities\" AS p " +
+                   "    WHERE p.\"TaskID\" = t.\"TaskID\" " +
+                   "          AND t.\"AssignedTo\" = SESSION_USER");
+               s.execute(
+                   "CREATE VIEW appl.\"VW2_MyPriorityTasks\" AS " +
+                   "    SELECT t.\"TaskID\", t.\"Task\", p.\"Priority\" " +
+                   "    FROM appl.\"TBL_Tasks\" AS t INNER JOIN " +
+                   "         appl.\"TBL_Priorities\" AS p ON " +
+                   "         p.\"TaskID\" = t.\"TaskID\" " +
+                   "    WHERE t.\"AssignedTo\" = SESSION_USER");
+               s.execute(
+                   "CREATE VIEW appl.\"VW3_MyPriorityTasks\" AS " +
+                   "    SELECT t.\"TaskID\", t.\"Task\" " +
+                   "    FROM appl.\"TBL_Tasks\" AS t " +
+                   "    WHERE t.\"AssignedTo\" = SESSION_USER " +
+                   "    AND EXISTS " +
+                   "        (SELECT * FROM appl.\"TBL_Priorities\" AS p " +
+                   "         WHERE p.\"TaskID\" = t.\"TaskID\")");
 	    	}
 	    };
 		Test test = DatabasePropertyTestSetup.builtinAuthentication(
@@ -750,6 +794,29 @@ public void testOtherUserCannotRevokeOwnerPrivileges() throws SQLException {
         
     }
     
+    /**
+     * DERBY-5292
+     */
+    public void testViewDefinersRights () throws Exception {
+
+        grant("select", "appl", "\"VW_MyTasks\"", users[1]);
+        grant("select", "appl", "\"VW_MyPriorityTasks\"", users[1]);
+        grant("select", "appl", "\"VW2_MyPriorityTasks\"", users[1]);
+        grant("select", "appl", "\"VW3_MyPriorityTasks\"", users[1]);
+
+        // OK before fix
+        assertSelectPrivilege(
+            true, users[1], "appl", "\"VW_MyTasks\"", null);
+        assertSelectPrivilege(
+            true, users[1], "appl", "\"VW_MyPriorityTasks\"", null);
+
+        // Failed before fix
+        assertSelectPrivilege(
+            true, users[1], "appl", "\"VW2_MyPriorityTasks\"", null);
+        assertSelectPrivilege(
+            true, users[1], "appl", "\"VW3_MyPriorityTasks\"", null);
+    }
+
     /* End testcases from grantRevokeDDL */
     
     /* Begin utility methods specific to grant / revoke */
@@ -1337,9 +1404,10 @@ public void assertPrivilegeMetadata(boolean hasPrivilege, String type, String us
         
     	Connection c = openUserConnection(user);
     	DatabaseMetaData dm = c.getMetaData();
-    	ResultSet rs = dm.getTablePrivileges(null, schema.toUpperCase(), table.toUpperCase());
+        schema = JDBC.identifierToCNF(schema);
+        table  = JDBC.identifierToCNF(table);
+        ResultSet rs = dm.getTablePrivileges(null, schema, table);
      	boolean found = false;
-    	
     	// check getTablePrivileges
     	if (columns == null) {
         	while (rs.next())
