diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java
index cac36fe6..84118648 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ConsistencyLevel.java
@@ -41,7 +41,6 @@
  * important than consistency then you can use lower values for either or both.
  * 
  * Write consistency levels make the following guarantees before reporting success to the client:
- *   ZERO         Ensure nothing. A write happens asynchronously in background
  *   ANY          Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.
  *   ONE          Ensure that the write has been written to at least 1 node's commit log and memory table
  *   QUORUM       Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes
@@ -50,7 +49,6 @@
  *   ALL          Ensure that the write is written to <code>&lt;ReplicationFactor&gt;</code> nodes before responding to the client.
  * 
  * Read:
- *   ZERO         Not supported, because it doesn't make sense.
  *   ANY          Not supported. You probably want ONE instead.
  *   ONE          Will return the record returned by the first node to respond. A consistency check is always done in a background thread to fix any consistency issues when ConsistencyLevel.ONE is used. This means subsequent calls will have correct data even if the initial read gets an older value. (This is called 'read repair'.)
  *   QUORUM       Will query all storage nodes and return the record with the most recent timestamp once it has at least a majority of replicas reported. Again, the remaining replicas will be checked in the background.
@@ -59,7 +57,6 @@
  *   ALL          Queries all storage nodes and returns the record with the most recent timestamp.
  */
 public enum ConsistencyLevel implements TEnum {
-  ZERO(0),
   ONE(1),
   QUORUM(2),
   DCQUORUM(3),
@@ -86,8 +83,6 @@ public int getValue() {
    */
   public static ConsistencyLevel findByValue(int value) { 
     switch (value) {
-      case 0:
-        return ZERO;
       case 1:
         return ONE;
       case 2:
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
index 131b0547..d9e150ec 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
@@ -173,9 +173,6 @@ public ColumnOrSuperColumn get(ByteBuffer key, ColumnPath columnPath, Consistenc
         // TODO - Support multiple column families per row, right now row only contains 1 column family
         Map<DecoratedKey<?>, ColumnFamily> columnFamilyKeyMap = new HashMap<DecoratedKey<?>, ColumnFamily>();
         
-        if (consistency == ConsistencyLevel.ZERO)
-            throw newInvalidRequestException("Consistency level zero may not be applied to read operations");
-        
         List<Row> rows;
         try
         {
@@ -607,7 +604,6 @@ public Object call() throws Exception
     {
         switch (consistency)
         {
-            case ZERO: return org.apache.cassandra.thrift.ConsistencyLevel.ZERO;
             case ONE: return org.apache.cassandra.thrift.ConsistencyLevel.ONE;
             case QUORUM: return org.apache.cassandra.thrift.ConsistencyLevel.QUORUM;
             case DCQUORUM: return org.apache.cassandra.thrift.ConsistencyLevel.DCQUORUM;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
index 7018106b..4d4bc159 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java
@@ -74,15 +74,8 @@ protected DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoi
 
     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
     {
-        if (consistencyLevel == ConsistencyLevel.ZERO)
-        {
-            return NoConsistencyWriteResponseHandler.instance;
-        }
-        else
-        {
             return new DatacenterSyncWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
         }
-    }
 
     public void response(Message message)
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
index b396a15a..4843b6a1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java
@@ -59,15 +59,8 @@ protected DatacenterWriteResponseHandler(Collection<InetAddress> writeEndpoints,
 
     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
     {
-        if (consistencyLevel == ConsistencyLevel.ZERO)
-        {
-            return NoConsistencyWriteResponseHandler.instance;
-        }
-        else
-        {
             return new DatacenterWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
         }
-    }
 
     @Override
     protected int determineBlockFor(String table)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java
index df9626ef..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/NoConsistencyWriteResponseHandler.java
@@ -1,41 +0,0 @@
-package org.apache.cassandra.service;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-import java.net.InetAddress;
-import java.util.concurrent.TimeoutException;
-
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.thrift.UnavailableException;
-
-class NoConsistencyWriteResponseHandler implements IWriteResponseHandler
-{
-    static final IWriteResponseHandler instance = new NoConsistencyWriteResponseHandler();
-
-    public void get() throws TimeoutException {}
-
-    public void addHintCallback(Message hintedMessage, InetAddress destination) {}
-
-    public void response(Message msg) {}
-
-    public void assureSufficientLiveNodes() throws UnavailableException {}
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
index 897a3660..96eafd45 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
@@ -57,15 +57,8 @@ protected WriteResponseHandler(InetAddress endpoint)
 
     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
     {
-        if (consistencyLevel == ConsistencyLevel.ZERO)
-        {
-            return NoConsistencyWriteResponseHandler.instance;
-        }
-        else
-        {
             return new WriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
         }
-    }
 
     public static IWriteResponseHandler create(InetAddress endpoint)
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 52e0229c..7539c91d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -102,10 +102,6 @@ public ClientState state()
         // TODO - Support multiple column families per row, right now row only contains 1 column family
         Map<DecoratedKey, ColumnFamily> columnFamilyKeyMap = new HashMap<DecoratedKey, ColumnFamily>();
 
-        if (consistency_level == ConsistencyLevel.ZERO)
-        {
-            throw new InvalidRequestException("Consistency level zero may not be applied to read operations");
-        }
         if (consistency_level == ConsistencyLevel.ANY)
         {
             throw new InvalidRequestException("Consistency level any may not be applied to read operations");
