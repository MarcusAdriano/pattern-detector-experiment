diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
index 9dd4f820..71903d80 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
@@ -406,6 +406,9 @@ public void remove() {
 
                          @Override
                          public BytesRef next() {
+                           if (!hasNext()) {
+                             throw new NoSuchElementException();
+                           }
                            return merger.mergedTerms.get(ordUpto++);
                          }
                        };
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java
index 0276eb59..01ca170f 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter.java
@@ -21,6 +21,7 @@
 
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.NoSuchElementException;
 
 import org.apache.lucene.codecs.DocValuesConsumer;
 import org.apache.lucene.store.RAMFile;
@@ -99,22 +100,32 @@ public void finish(int maxDoc) {
   @Override
   public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {
     final int maxDoc = state.segmentInfo.getDocCount();
-    final int size = addedValues;
-
     dvConsumer.addBinaryField(fieldInfo,
                               new Iterable<BytesRef>() {
-
                                 @Override
                                 public Iterator<BytesRef> iterator() {
-                                   return new Iterator<BytesRef>() {
-                                     RAMInputStream bytesReader;
-                                     AppendingLongBuffer.Iterator iter = lengths.iterator();
-                                     BytesRef value = new BytesRef();
+                                   return new BytesIterator(maxDoc);                                 
+                                }
+                              });
+  }
+
+  @Override
+  public void abort() {
+  }
+  
+  // iterates over the values we have in ram
+  private class BytesIterator implements Iterator<BytesRef> {
+    final BytesRef value = new BytesRef();
+    final AppendingLongBuffer.Iterator lengthsIterator = lengths.iterator();
+    final int size = lengths.size();
+    final int maxDoc;
+    final RAMInputStream bytesReader;
                                      int upto;
                                      
-                                     {
+    BytesIterator(int maxDoc) {
+      this.maxDoc = maxDoc;
                                        try {
-                                         bytesReader = new RAMInputStream("bogus", bytes);
+        bytesReader = new RAMInputStream("BinaryDocValuesWriter", bytes);
                                        } catch (IOException e) {
                                          throw new RuntimeException(e);
                                        }
@@ -125,15 +136,13 @@ public boolean hasNext() {
                                        return upto < maxDoc;
                                      }
 
-                                     @Override
-                                     public void remove() {
-                                       throw new UnsupportedOperationException();
-                                     }
-
                                      @Override
                                      public BytesRef next() {
+      if (!hasNext()) {
+        throw new NoSuchElementException();
+      }
                                        if (upto < size) {
-                                         int length = (int) iter.next();
+        int length = (int) lengthsIterator.next();
                                          value.grow(length);
                                          try {
                                            bytesReader.readBytes(value.bytes, 0, length);
@@ -147,12 +156,10 @@ public BytesRef next() {
                                        upto++;
                                        return value;
                                      }
-                                   };
-                                 }
-                               });
-  }
 
   @Override
-  public void abort() {
+    public void remove() {
+      throw new UnsupportedOperationException();
+    }
   }
 }
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java
index 82809475..48e9c509 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter.java
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.NoSuchElementException;
 
 import org.apache.lucene.codecs.DocValuesConsumer;
 import org.apache.lucene.util.Counter;
@@ -75,27 +76,40 @@ public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws
 
     dvConsumer.addNumericField(fieldInfo,
                                new Iterable<Number>() {
-
                                  @Override
                                  public Iterator<Number> iterator() {
-                                   return new Iterator<Number>() {
-                                     int upto;
-                                     AppendingLongBuffer.Iterator iter = pending.iterator();
+                                   return new NumericIterator(maxDoc);
+                                 }
+                               });
+  }
 
                                      @Override
-                                     public boolean hasNext() {
-                                       return upto < maxDoc;
+  public void abort() {
+  }
+  
+  // iterates over the values we have in ram
+  private class NumericIterator implements Iterator<Number> {
+    final AppendingLongBuffer.Iterator iter = pending.iterator();
+    final int size = pending.size();
+    final int maxDoc;
+    int upto;
+    
+    NumericIterator(int maxDoc) {
+      this.maxDoc = maxDoc;
                                      }
 
                                      @Override
-                                     public void remove() {
-                                       throw new UnsupportedOperationException();
+    public boolean hasNext() {
+      return upto < maxDoc;
                                      }
 
                                      @Override
                                      public Number next() {
+      if (!hasNext()) {
+        throw new NoSuchElementException();
+      }
                                        long value;
-                                       if (upto < pending.size()) {
+      if (upto < size) {
                                          value =  iter.next();
                                        } else {
                                          value = 0;
@@ -104,12 +118,10 @@ public Number next() {
                                        // TODO: make reusable Number
                                        return value;
                                      }
-                                   };
-                                 }
-                               });
-  }
 
   @Override
-  public void abort() {
+    public void remove() {
+      throw new UnsupportedOperationException();
+    }
   }
 }
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java
index dd45a219..c7216e93 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter.java
@@ -21,6 +21,7 @@
 
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.NoSuchElementException;
 
 import org.apache.lucene.codecs.DocValuesConsumer;
 import org.apache.lucene.util.ArrayUtil;
@@ -110,11 +111,12 @@ public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws
         emptyOrd = ord;
       }
     } else {
-      emptyOrd = -1;
+      emptyOrd = -1; // nocommit: HUH? how can this possibly work?
     }
 
     final int valueCount = hash.size();
 
+    // nocommit: account for both sortedValues and ordMap as-we-go...
     final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());
     final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;
     final int[] ordMap = new int[valueCount];
@@ -131,51 +133,83 @@ public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws
                               new Iterable<BytesRef>() {
                                 @Override
                                 public Iterator<BytesRef> iterator() {
-                                  return new Iterator<BytesRef>() {
-                                    int ordUpto;
-                                    BytesRef scratch = new BytesRef();
+                                  return new ValuesIterator(sortedValues, valueCount);
+                                }
+                              },
 
+                              // doc -> ord
+                              new Iterable<Number>() {
                                     @Override
-                                    public boolean hasNext() {
-                                      return ordUpto < valueCount;
+                                public Iterator<Number> iterator() {
+                                  return new OrdsIterator(ordMap, bufferedDocCount, maxDoc, emptyOrd);
+                                }
+                              });
                                     }
 
                                     @Override
-                                    public void remove() {
-                                      throw new UnsupportedOperationException();
+  public void abort() {
+  }
+  
+  // iterates over the unique values we have in ram
+  private class ValuesIterator implements Iterator<BytesRef> {
+    final int sortedValues[];
+    final BytesRef scratch = new BytesRef();
+    final int valueCount;
+    int ordUpto;
+    
+    ValuesIterator(int sortedValues[], int valueCount) {
+      this.sortedValues = sortedValues;
+      this.valueCount = valueCount;
+    }
+
+    @Override
+    public boolean hasNext() {
+      return ordUpto < valueCount;
                                     }
 
                                     @Override
                                     public BytesRef next() {
+      if (!hasNext()) {
+        throw new NoSuchElementException();
+      }
                                       hash.get(sortedValues[ordUpto], scratch);
                                       ordUpto++;
                                       return scratch;
                                     }
-                                  };
-                                }
-                              },
 
-                              // doc -> ord
-                              new Iterable<Number>() {
                                 @Override
-                                public Iterator<Number> iterator() {
-                                  return new Iterator<Number>() {
+    public void remove() {
+      throw new UnsupportedOperationException();
+    }
+  }
+  
+  // iterates over the ords for each doc we have in ram
+  private class OrdsIterator implements Iterator<Number> {
+    final int ordMap[];
+    final int size;
+    final int maxDoc;
+    final int emptyOrd; // nocommit
                                     int docUpto;
 
-                                    @Override
-                                    public boolean hasNext() {
-                                      return docUpto < maxDoc;
+    OrdsIterator(int ordMap[], int size, int maxDoc, int emptyOrd) {
+      this.ordMap = ordMap;
+      this.size = size;
+      this.maxDoc = maxDoc;
+      this.emptyOrd = emptyOrd;
                                     }
 
                                     @Override
-                                    public void remove() {
-                                      throw new UnsupportedOperationException();
+    public boolean hasNext() {
+      return docUpto < maxDoc;
                                     }
 
                                     @Override
                                     public Number next() {
+      if (!hasNext()) {
+        throw new NoSuchElementException();
+      }
                                       int ord;
-                                      if (docUpto < bufferedDocCount) {
+      if (docUpto < size) {
                                         ord = pending[docUpto];
                                       } else {
                                         ord = emptyOrd;
@@ -184,12 +218,10 @@ public Number next() {
                                       // TODO: make reusable Number
                                       return ordMap[ord];
                                     }
-                                  };
-                                }
-                              });
-  }
 
   @Override
-  public void abort() {
+    public void remove() {
+      throw new UnsupportedOperationException();
+    }
   }
 }
diff --git a/lucene/dev/branches/lucene4547/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java b/lucene/dev/branches/lucene4547/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java
index 69763518..f9e39be3 100644
--- a/lucene/dev/branches/lucene4547/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java
+++ b/lucene/dev/branches/lucene4547/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java
@@ -18,6 +18,8 @@
  */
 
 import java.io.IOException;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
 
 import org.apache.lucene.codecs.DocValuesConsumer;
 import org.apache.lucene.codecs.DocValuesFormat;
@@ -75,6 +77,7 @@ public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOE
         count++;
       }
       assert count == maxDoc;
+      checkIterator(values.iterator(), maxDoc);
       in.addNumericField(field, values);
     }
     
@@ -87,6 +90,7 @@ public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IO
         count++;
       }
       assert count == maxDoc;
+      checkIterator(values.iterator(), maxDoc);
       in.addBinaryField(field, values);
     }
     
@@ -118,9 +122,33 @@ public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<
       
       assert count == maxDoc;
       assert seenOrds.cardinality() == valueCount;
+      checkIterator(values.iterator(), valueCount);
+      checkIterator(docToOrd.iterator(), maxDoc);
       in.addSortedField(field, values, docToOrd);
     }
     
+    private <T> void checkIterator(Iterator<T> iterator, int expectedSize) {
+      for (int i = 0; i < expectedSize; i++) {
+        boolean hasNext = iterator.hasNext();
+        assert hasNext;
+        T v = iterator.next();
+        assert v != null;
+        try {
+          iterator.remove();
+          throw new AssertionError("broken iterator (supports remove): " + iterator);
+        } catch (UnsupportedOperationException expected) {
+          // ok
+        }
+      }
+      assert !iterator.hasNext();
+      try {
+        iterator.next();
+        throw new AssertionError("broken iterator (allows next() when hasNext==false) " + iterator);
+      } catch (NoSuchElementException expected) {
+        // ok
+      }
+    }
+    
     @Override
     public void close() throws IOException {
       in.close();
