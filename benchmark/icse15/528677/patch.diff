diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateCursorTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateCursorTest.java
index 18c6abfa..2a299ee7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateCursorTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateCursorTest.java
@@ -33,6 +33,7 @@
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
@@ -76,7 +77,8 @@ public static Test suite() {
 		Properties props = new Properties();
 
 		props.setProperty("derby.language.maxMemoryPerTable", "1");
-		return TestConfiguration.singleUseDatabaseDecorator(new SystemPropertyTestSetup(new CleanDatabaseTestSetup(
+		return new DatabasePropertyTestSetup(
+				new SystemPropertyTestSetup(new CleanDatabaseTestSetup(
 				new TestSuite(UpdateCursorTest.class, "UpdateCursorTest")) {
 
 			/**
@@ -128,18 +130,14 @@ protected void decorateSQL(Statement s) throws SQLException {
 				pstmt.close();
 			}
 
-		}, props));
+		}, props), props, true);
 	}
 
-	/*
-	 * DERBY-2543: Test fails in suite runs in the nightlies,
-	 *             probably because the static property 
-	 *             maxMemoryPerTable has already been set 
-	 *
+	/**
 	 * Test the virtual memory heap.
 	 * 
 	 * @throws SQLException
-	 
+	 */
 	public void testVirtualMemoryHeap() throws SQLException {
 		PreparedStatement select = prepareStatement("select c1, c3 from t1 where c3 > 1 and c1 > 0 for update");
 		Statement update = createStatement();
@@ -150,7 +148,7 @@ public void testVirtualMemoryHeap() throws SQLException {
 		cursor = select.executeQuery(); // cursor is now open
 		cursorName = cursor.getCursorName();
 
-		/* scan the entire table except the last row. 
+		/* scan the entire table except the last row. */
 		for (int i = 0; i < SIZE_OF_T1 - 1; i++) {	
 			
 			/*	Notice the order in the rows we get: from 2 to 102 asc order on second column (c3)
@@ -161,7 +159,7 @@ public void testVirtualMemoryHeap() throws SQLException {
 			 *	memory heap, whose in memory part is also 100 entries.  So row 103 to 202 goes into
 			 *	the in-memory part and gets dumped out in reverse order.  Finally Row 203 to 250"
 			 *	goes into file system.  Here we mean row ids.
-			 
+			 */
 			if (i < MAX_CAP_OF_HASH_TABLE + 1) {
 				expectedValue++;
 			} else if (i > MAX_CAP_OF_HASH_TABLE && i <= MAX_CAP_OF_HASH_TABLE * 2) {
@@ -190,7 +188,7 @@ public void testVirtualMemoryHeap() throws SQLException {
 		cursor.close();
 		update.close();
 
-		/* see what we have in the table 
+		/* see what we have in the table */
 		select = prepareStatement("select c1, c3 from t1");
 		cursor = select.executeQuery(); // cursor is now open
 		for (int i = 0; i < SIZE_OF_T1; i++) {
@@ -205,7 +203,6 @@ public void testVirtualMemoryHeap() throws SQLException {
 
 		rollback();
 	}
-	*/
 
 	/**
 	 * Tests non covering index.
