diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
index 77bde86c..0c1d63be 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -22,6 +22,7 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.*;
+import java.util.concurrent.TimeoutException;
 
 import org.apache.log4j.Logger;
 
@@ -92,6 +93,10 @@ public void start() throws IOException
         {
             rows = StorageProxy.readProtocol(commands, consistency_level);
         }
+        catch (TimeoutException e) 
+        {
+        	throw new TimedOutException();
+        }
         catch (IOException e)
         {
             throw new RuntimeException(e);
@@ -463,7 +468,14 @@ private void doInsert(int consistency_level, RowMutation rm) throws UnavailableE
     {
         if (consistency_level != ConsistencyLevel.ZERO)
         {
+            try
+            {
             StorageProxy.insertBlocking(rm, consistency_level);
+        }
+            catch (TimeoutException e)
+            {
+                throw new TimedOutException();
+            }
         }
         else
         {
@@ -573,6 +585,10 @@ else if (propertyName.equals("version"))
             rows = StorageProxy.getRangeSlice(new RangeSliceCommand(keyspace, column_parent, predicate, startKey, finishKey, maxRows), consistency_level);
             assert rows != null;
         }
+        catch (TimeoutException e)
+        {
+        	throw new TimedOutException();
+        }
         catch (IOException e)
         {
             throw new RuntimeException(e);
@@ -608,6 +624,10 @@ else if (propertyName.equals("version"))
         {
             return StorageProxy.getKeyRange(new RangeCommand(tablename, columnFamily, startWith, stopAt, maxResults));
         }
+        catch (TimeoutException e)
+        {
+        	throw new TimedOutException();
+        }
         catch (IOException e)
         {
             throw new RuntimeException(e);
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
index 79dfb720..a50af321 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -160,7 +160,7 @@ public void run()
         }
     }
     
-    public static void insertBlocking(final RowMutation rm, int consistency_level) throws UnavailableException, TimedOutException
+    public static void insertBlocking(final RowMutation rm, int consistency_level) throws UnavailableException, TimeoutException
     {
         long startTime = System.currentTimeMillis();
         try
@@ -240,10 +240,6 @@ public void run()
             // wait for writes.  throws timeoutexception if necessary
             responseHandler.get();
         }
-        catch (TimeoutException e)
-        {
-            throw new TimedOutException();
-        }
         catch (IOException e)
         {
             throw new RuntimeException("error writing key " + rm.key(), e);
@@ -292,7 +288,7 @@ else if (consistency_level == ConsistencyLevel.ALL)
      * @return the row associated with command.key
      * @throws Exception
      */
-    private static List<Row> weakReadRemote(List<ReadCommand> commands) throws IOException, UnavailableException, TimedOutException
+    private static List<Row> weakReadRemote(List<ReadCommand> commands) throws IOException, UnavailableException, TimeoutException
     {
         if (logger.isDebugEnabled())
             logger.debug("weakreadremote reading " + StringUtils.join(commands, ", "));
@@ -314,14 +310,7 @@ else if (consistency_level == ConsistencyLevel.ALL)
         for (IAsyncResult iar: iars)
         {
             byte[] body;
-            try
-            {
                 body = iar.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
-            }
-            catch (TimeoutException e)
-            {
-                throw new TimedOutException();
-            }
             DataInputBuffer bufIn = new DataInputBuffer();
             bufIn.reset(body, body.length);
             ReadResponse response = ReadResponse.serializer().deserialize(bufIn);
@@ -336,7 +325,7 @@ else if (consistency_level == ConsistencyLevel.ALL)
      * a specific set of column names from a given column family.
      */
     public static List<Row> readProtocol(List<ReadCommand> commands, int consistency_level)
-            throws IOException, UnavailableException, TimedOutException
+            throws IOException, UnavailableException, TimeoutException
     {
         long startTime = System.currentTimeMillis();
 
@@ -390,7 +379,7 @@ else if (consistency_level == ConsistencyLevel.ALL)
          * 7. else carry out read repair by getting data from all the nodes.
         // 5. return success
      */
-    private static List<Row> strongRead(List<ReadCommand> commands, int consistency_level) throws IOException, UnavailableException, TimedOutException
+    private static List<Row> strongRead(List<ReadCommand> commands, int consistency_level) throws IOException, UnavailableException, TimeoutException
     {
         List<QuorumResponseHandler<Row>> quorumResponseHandlers = new ArrayList<QuorumResponseHandler<Row>>();
         List<InetAddress[]> commandEndPoints = new ArrayList<InetAddress[]>();
@@ -445,10 +434,6 @@ else if (consistency_level == ConsistencyLevel.ALL)
                 if (logger.isDebugEnabled())
                     logger.debug("quorumResponseHandler: " + (System.currentTimeMillis() - startTime2) + " ms.");
             }
-            catch (TimeoutException e)
-            {
-                throw new TimedOutException();
-            }
             catch (DigestMismatchException ex)
             {
                 if (DatabaseDescriptor.getConsistencyCheck())
@@ -466,10 +451,6 @@ else if (consistency_level == ConsistencyLevel.ALL)
                         if (row != null)
                             rows.add(row);
                     }
-                    catch (TimeoutException e)
-                    {
-                        throw new TimedOutException();
-                    }
                     catch (DigestMismatchException e)
                     {
                         // TODO should this be a thrift exception?
@@ -512,7 +493,7 @@ else if (consistency_level == ConsistencyLevel.ALL)
         return rows;
     }
 
-    static List<Pair<String, ColumnFamily>> getRangeSlice(RangeSliceCommand command, int consistency_level) throws IOException, UnavailableException, TimedOutException
+    static List<Pair<String, ColumnFamily>> getRangeSlice(RangeSliceCommand command, int consistency_level) throws IOException, UnavailableException, TimeoutException
     {
         long startTime = System.currentTimeMillis();
         TokenMetadata tokenMetadata = StorageService.instance().getTokenMetadata();
@@ -562,10 +543,6 @@ else if (consistency_level == ConsistencyLevel.ALL)
             {
                 rows.putAll(handler.get());
             }
-            catch (TimeoutException e)
-            {
-                throw new TimedOutException();
-            }
             catch (DigestMismatchException e)
             {
                 throw new AssertionError(e); // no digests in range slices yet
@@ -594,7 +571,7 @@ public int compare(Pair<String, ColumnFamily> o1, Pair<String, ColumnFamily> o2)
         return results;
     }
 
-    static List<String> getKeyRange(RangeCommand command) throws IOException, UnavailableException, TimedOutException
+    static List<String> getKeyRange(RangeCommand command) throws IOException, UnavailableException, TimeoutException
     {
         long startTime = System.currentTimeMillis();
         TokenMetadata tokenMetadata = StorageService.instance().getTokenMetadata();
@@ -612,14 +589,8 @@ public int compare(Pair<String, ColumnFamily> o1, Pair<String, ColumnFamily> o2)
 
             // read response
             byte[] responseBody;
-            try
-            {
                 responseBody = iar.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
-            }
-            catch (TimeoutException e)
-            {
-                throw new TimedOutException();
-            }
+           
             RangeReply rangeReply = RangeReply.read(responseBody);
             uniqueKeys.addAll(rangeReply.keys);
 
