diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
index ca413cf1..e606ccff 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
@@ -1372,6 +1372,11 @@ protected void skipBytes () throws DRDAProtocolException
 	 */
 	protected void skipDss() throws DRDAProtocolException
 	{
+		while (dssIsContinued)
+		{
+			skipBytes((int)dssLength);
+			readDSSContinuationHeader();
+		}
 		skipBytes((int)dssLength);
 		topDdmCollectionStack = EMPTY_STACK;
 		ddmScalarLen = 0;
@@ -1482,6 +1487,7 @@ private void ensureALayerDataInBuffer (int desiredDataSize)
 	private void ensureBLayerDataInBuffer (int desiredDataSize, boolean adjustLen) 
 		throws DRDAProtocolException
 	{
+		ensureALayerDataInBuffer (desiredDataSize);
 		if (dssIsContinued) 
 		{
 			if (desiredDataSize > dssLength) 
@@ -1491,10 +1497,6 @@ private void ensureBLayerDataInBuffer (int desiredDataSize, boolean adjustLen)
 				compressBLayerData (continueDssHeaderCount);
 			}
 		}
-		else 
-		{
-			ensureALayerDataInBuffer (desiredDataSize);
-		}
 		if (adjustLen)
 			adjustLengths(desiredDataSize);
 	}
@@ -1734,8 +1736,11 @@ private void fill (int minimumBytesNeeded) throws DRDAProtocolException
 				                               "fill",
 				                               5);
 			}
+			if (actualBytesRead != -1)
+			{
 			count += actualBytesRead;
 			totalBytesRead += actualBytesRead;
+			}
 
 		}
 		while ((totalBytesRead < minimumBytesNeeded) && (actualBytesRead != -1));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
index 7faeddf8..400bc260 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
@@ -309,6 +309,7 @@ else if (ts.before(temp))
 			test5130(conn);
 			test5172(conn);
 			jira614Test(conn);
+			jira170Test(conn);
 			conn.close();
 			// refresh conn before cleaning up
 			conn = ij.startJBMS();
@@ -744,5 +745,47 @@ private static String genString(String c, int howMany)
 		    buf.append(c);
 	    return buf.toString();
     }
+    // Jira-170 has to do with how the server handles re-synchronization of
+    // the data stream when an enormous parameter value follows a failed
+    // prepare statement. Note that it is deliberate here that we are preparing
+    // a statement referring to a non-existing table.
+    private static void jira170Test(Connection conn)
+        throws Exception
+    {
+        Statement stmt = conn.createStatement();
+        PreparedStatement ps = null ;
+	    try {
+		    stmt.execute("drop table jira170");
+	    } catch (Throwable t) { }
+        // Create a huge array of chars to be used as the input parameter
+        char []cData = new char[1000000];
+        for (int i = 0; i < cData.length; i++)
+            cData[i] = Character.forDigit(i%10, 10);
+        // The behavior of this test program depends on how the JDBC driver
+        // handles statement prepares. The DB2 Universal JDBC driver implements
+        // something called "deferred prepares" by default. This means that it
+        // doesn't do the prepare of the statement until the statement is
+        // actually executed. Other drivers, such as the standard Derby client
+        // driver, do the prepare at the time of the prepare. This means that,
+        // depending on which driver we're using and what the driver's
+        // configuration is, we'll get the "table not found" error either on
+        // the prepare or on the execute. It doesn't really matter for the
+        // purposes of the test, because the whole point is that we *dont*
+        // get a DRDA Protocol Exception, but rather a table-not-found
+        // exception.
+        try {
+            ps = conn.prepareStatement("insert into jira170 values (?)");
+            ps.setString(1, new String(cData));
+            ps.execute();
+            System.out.println("Test Jira170 failed: no exception when trying to execute a failed prepare with an enormous parameter");
+        }
+        catch (SQLException e)
+        {
+            if (e.getSQLState().equals("42X05"))
+                System.out.println("Jira170: caught expected table not found");
+            else
+                e.printStackTrace();
+        }
+    }
 }
 
