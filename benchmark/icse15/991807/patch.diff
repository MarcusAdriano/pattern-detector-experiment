diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractContinousDistribution.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractContinousDistribution.java
index 64b9f88b..8ca03d0c 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractContinousDistribution.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractContinousDistribution.java
@@ -39,4 +39,13 @@ public double cdf(double x) {
   public double pdf(double x) {
     throw new UnsupportedOperationException("Can't compute pdf for " + this.getClass().getName());
   }
+
+  /**
+   * @return A random number from the distribution; returns <tt>(int) Math.round(nextDouble())</tt>.
+   *         Override this method if necessary.
+   */
+  @Override
+  public int nextInt() {
+    return (int) Math.round(nextDouble());
+  }
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java
index 870a0e18..a3ac75e9 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java
@@ -24,4 +24,5 @@ public double nextDouble() {
     return (double) nextInt();
   }
 
+  public abstract int nextInt();
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java
index f5571ecf..d6c19497 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java
@@ -65,9 +65,7 @@ public int apply(int dummy) {
    * A random number from the distribution; returns <tt>(int) Math.round(nextDouble())</tt>. Override this
    * method if necessary.
    */
-  public int nextInt() {
-    return (int) Math.round(nextDouble());
-  }
+  public abstract int nextInt();
 
   /**
    * Returns the used uniform random number generator;
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java
index c647a31a..f7414a31 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java
@@ -89,6 +89,11 @@ private double cdfSlow(int k) {
     return sum;
   }
 
+  @Override
+  public int nextInt() {
+    return generateBinomial(n, p);
+  }
+
   /**
    * *************************************************************** * Binomial-Distribution - Acceptance
    * Rejection/Inversion     * * ***************************************************************** * Acceptance
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java
index c0f46f21..8c435f00 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java
@@ -92,6 +92,11 @@ public Object clone() {
     return copy;
   }
 
+  @Override
+  public int nextInt() {
+    return nextInt(r, p);
+  }
+
   /**
    * Returns a sample from this distribution.  The value returned will
    * be the number of negative samples required before achieving r
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java
index f214f49e..b2b21256 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java
@@ -9,7 +9,6 @@
 package org.apache.mahout.math.jet.random;
 
 import org.apache.mahout.math.jet.math.Arithmetic;
-import org.apache.mahout.math.jet.random.engine.RandomEngine;
 import org.apache.mahout.math.jet.stat.Probability;
 
 import java.util.Random;
@@ -95,12 +94,18 @@ private static double f(int k, double l_nu, double c_pm) {
     return Math.exp(k * l_nu - Arithmetic.logFactorial(k) - c_pm);
   }
 
+  @Override
+  public int nextInt() {
+    return nextInt(mean);
+  }
+
   /** Returns a random number from the distribution.
   @Override
   public int nextInt() {
     return nextInt(this.mean);
   }
 
+
   /** Returns a random number from the distribution; bypasses the internal state. */
   public int nextInt(double theMean) {
 /******************************************************************
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java
index ff22c969..08e9d436 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java
@@ -59,17 +59,17 @@ private static double logGamma(double xx) {
     return -tmp + Math.log(2.5066282746310005 * ser);
   }
 
-  /** Returns a random number from the distribution; bypasses the internal state. */
-  private int nextInt(double xm) {
+  @Override
+  public int nextInt() {
     /*
     * Adapted from "Numerical Recipes in C".
     */
     double g = this.cached_g;
 
-    if (xm == -1.0) {
+    if (mean == -1.0) {
       return 0;
     } // not defined
-    if (xm < SWITCH_MEAN) {
+    if (mean < SWITCH_MEAN) {
       int poisson = -1;
       double product = 1;
       do {
@@ -78,7 +78,7 @@ private int nextInt(double xm) {
       } while (product >= g);
       // bug in CLHEP 1.4.0: was "} while ( product > g );"
       return poisson;
-    } else if (xm < MEAN_MAX) {
+    } else if (mean < MEAN_MAX) {
       double t;
       double em;
       double sq = this.cached_sq;
@@ -89,14 +89,14 @@ private int nextInt(double xm) {
         double y;
         do {
           y = Math.tan(Math.PI * rand.nextDouble());
-          em = sq * y + xm;
+          em = sq * y + mean;
         } while (em < 0.0);
         em = (double) (int) (em); // faster than em = Math.floor(em); (em>=0.0)
         t = 0.9 * (1.0 + y * y) * Math.exp(em * alxm - logGamma(em + 1.0) - g);
       } while (rand.nextDouble() > t);
       return (int) em;
     } else { // mean is too large
-      return (int) xm;
+      return (int) mean;
     }
   }
 
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java
index 32b5f964..16013813 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java
@@ -36,6 +36,11 @@ public Zeta(double ro, double pk, Random randomGenerator) {
     setState(ro, pk);
   }
 
+  @Override
+  public int nextInt() {
+    return (int) generateZeta(ro, pk, randomGenerator);
+  }
+
   /** Returns a zeta distributed random number. */
   protected long generateZeta(double ro, double pk, Random randomGenerator) {
 /******************************************************************
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java
index e69de29b..d0feae5d 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionChecks.java
@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.math.jet.random;
+
+import org.apache.commons.math.ConvergenceException;
+import org.apache.commons.math.FunctionEvaluationException;
+import org.apache.commons.math.analysis.UnivariateRealFunction;
+import org.apache.commons.math.analysis.integration.RombergIntegrator;
+import org.apache.commons.math.analysis.integration.UnivariateRealIntegrator;
+import org.junit.Assert;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Provides a consistency check for continuous distributions that relates the pdf, cdf and
+ * samples.  The pdf is checked against the cdf by quadrature.  The sampling is checked
+ * against the cdf using a G^2 (similar to chi^2) test.
+ */
+public class DistributionChecks {
+  public void checkDistribution(final AbstractContinousDistribution dist, double[] x, double offset, double scale, int n) throws ConvergenceException, FunctionEvaluationException {
+    double[] xs = Arrays.copyOf(x, x.length);
+    for (int i = 0; i < xs.length; i++) {
+      xs[i] = xs[i]*scale+ offset;
+    }
+    Arrays.sort(xs);
+
+    // collect samples
+    double[] y = new double[n];
+    for (int i = 0; i < n; i++) {
+      y[i] = dist.nextDouble();
+    }
+    Arrays.sort(y);
+
+    // compute probabilities for bins
+    double[] p = new double[xs.length + 1];
+    double lastP = 0;
+    for (int i = 0; i < xs.length; i++) {
+      double thisP = dist.cdf(xs[i]);
+      p[i] = thisP - lastP;
+      lastP = thisP;
+    }
+    p[p.length - 1] = 1 - lastP;
+
+    // count samples in each bin
+    int[] k = new int[xs.length + 1];
+    int lastJ = 0;
+    for (int i = 0; i < k.length - 1; i++) {
+      int j = 0;
+      while (j < n && y[j] < xs[i]) {
+        j++;
+      }
+      k[i] = j - lastJ;
+      lastJ = j;
+    }
+    k[k.length - 1] = n - lastJ;
+
+    // now verify probabilities by comparing to integral of pdf
+    UnivariateRealIntegrator integrator = new RombergIntegrator();
+    for (int i = 0; i < xs.length - 1; i++) {
+      double delta = integrator.integrate(new UnivariateRealFunction() {
+        public double value(double v) throws FunctionEvaluationException {
+          return dist.pdf(v);
+        }
+      }, xs[i], xs[i + 1]);
+      assertEquals(delta, p[i + 1], 1e-6);
+    }
+
+    // finally compute G^2 of observed versus predicted.  See http://en.wikipedia.org/wiki/G-test
+    double sum = 0;
+    for (int i = 0; i < k.length; i++) {
+      if (k[i] != 0) {
+        sum += k[i] * Math.log(k[i] / p[i] / n);
+      }
+    }
+    sum *= 2;
+
+    // sum is chi^2 distributed with degrees of freedom equal to number of partitions - 1
+    int dof = k.length - 1;
+    // fisher's approximation is that sqrt(2*x) is approximately unit normal with mean sqrt(2*dof-1)
+    double z = Math.sqrt(2 * sum) - Math.sqrt(2 * dof - 1);
+    Assert.assertTrue(String.format("offset=%.3f scale=%.3f Z = %.1f", offset, scale, z), Math.abs(z) < 3);
+  }
+
+  protected void checkCdf(double offset, double scale, AbstractContinousDistribution dist, double[] breaks, double[] quantiles) {
+    int i = 0;
+    for (double x : breaks) {
+      assertEquals(String.format("m=%.3f sd=%.3f x=%.3f", offset, scale, x), quantiles[i], dist.cdf(x * scale + offset), 1e-6);
+      i++;
+    }
+  }
+}
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionTest.java
index dfde6d65..e69de29b 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/DistributionTest.java
@@ -1,108 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.math.jet.random;
-
-import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.FunctionEvaluationException;
-import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.analysis.integration.RombergIntegrator;
-import org.apache.commons.math.analysis.integration.UnivariateRealIntegrator;
-import org.junit.Assert;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * Provides a consistency check for continuous distributions that relates the pdf, cdf and
- * samples.  The pdf is checked against the cdf by quadrature.  The sampling is checked
- * against the cdf using a G^2 (similar to chi^2) test.
- */
-public class DistributionTest {
-  public void checkDistribution(final AbstractContinousDistribution dist, double[] x, double offset, double scale, int n) throws ConvergenceException, FunctionEvaluationException {
-    double[] xs = Arrays.copyOf(x, x.length);
-    for (int i = 0; i < xs.length; i++) {
-      xs[i] = xs[i]*scale+ offset;
-    }
-    Arrays.sort(xs);
-
-    // collect samples
-    double[] y = new double[n];
-    for (int i = 0; i < n; i++) {
-      y[i] = dist.nextDouble();
-    }
-    Arrays.sort(y);
-
-    // compute probabilities for bins
-    double[] p = new double[xs.length + 1];
-    double lastP = 0;
-    for (int i = 0; i < xs.length; i++) {
-      double thisP = dist.cdf(xs[i]);
-      p[i] = thisP - lastP;
-      lastP = thisP;
-    }
-    p[p.length - 1] = 1 - lastP;
-
-    // count samples in each bin
-    int[] k = new int[xs.length + 1];
-    int lastJ = 0;
-    for (int i = 0; i < k.length - 1; i++) {
-      int j = 0;
-      while (j < n && y[j] < xs[i]) {
-        j++;
-      }
-      k[i] = j - lastJ;
-      lastJ = j;
-    }
-    k[k.length - 1] = n - lastJ;
-
-    // now verify probabilities by comparing to integral of pdf
-    UnivariateRealIntegrator integrator = new RombergIntegrator();
-    for (int i = 0; i < xs.length - 1; i++) {
-      double delta = integrator.integrate(new UnivariateRealFunction() {
-        public double value(double v) throws FunctionEvaluationException {
-          return dist.pdf(v);
-        }
-      }, xs[i], xs[i + 1]);
-      assertEquals(delta, p[i + 1], 1e-6);
-    }
-
-    // finally compute G^2 of observed versus predicted.  See http://en.wikipedia.org/wiki/G-test
-    double sum = 0;
-    for (int i = 0; i < k.length; i++) {
-      if (k[i] != 0) {
-        sum += k[i] * Math.log(k[i] / p[i] / n);
-      }
-    }
-    sum *= 2;
-
-    // sum is chi^2 distributed with degrees of freedom equal to number of partitions - 1
-    int dof = k.length - 1;
-    // fisher's approximation is that sqrt(2*x) is approximately unit normal with mean sqrt(2*dof-1)
-    double z = Math.sqrt(2 * sum) - Math.sqrt(2 * dof - 1);
-    Assert.assertTrue(String.format("offset=%.3f scale=%.3f Z = %.1f", offset, scale, z), Math.abs(z) < 3);
-  }
-
-  protected void checkCdf(double offset, double scale, AbstractContinousDistribution dist, double[] breaks, double[] quantiles) {
-    int i = 0;
-    for (double x : breaks) {
-      assertEquals(String.format("m=%.3f sd=%.3f x=%.3f", offset, scale, x), quantiles[i], dist.cdf(x * scale + offset), 1e-6);
-      i++;
-    }
-  }
-}
