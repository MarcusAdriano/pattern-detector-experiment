diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
index 09743127..82c8ff07 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
@@ -101,17 +101,31 @@ public InputStream getResourceAsStream(String name)
     return urls;
   }
 
+  /*
+   * Notes we overwrite loadClass rather than findClass because we don't want to delegate
+   * to the default classloader, only the bundle.
+   * 
+   * Also note that ClassLoader#loadClass(String) by javadoc on ClassLoader delegates
+   * to this method, so we don't need to overwrite it separately.
+   * 
+   * (non-Javadoc)
+   * @see java.lang.ClassLoader#loadClass(java.lang.String, boolean)
+   */  
   @Override
-  public Class<?> loadClass(final String name) throws ClassNotFoundException
+  public Class<?> loadClass(final String name, boolean resolve) throws ClassNotFoundException
   {
     try {
-      return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
+      Class<?> result = AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
         @Override
 		public Class<?> run() throws ClassNotFoundException
         {
           return b.loadClass(name);
         }
       });
+      
+      if (resolve) resolveClass(result);
+      
+      return result;
     } catch (PrivilegedActionException e) {
       Exception cause = e.getException();
 
diff --git a/aries/trunk/util/src/test/java/org/apache/aries/util/BundleToClassLoaderAdapterTest.java b/aries/trunk/util/src/test/java/org/apache/aries/util/BundleToClassLoaderAdapterTest.java
index e69de29b..9f14568e 100644
--- a/aries/trunk/util/src/test/java/org/apache/aries/util/BundleToClassLoaderAdapterTest.java
+++ b/aries/trunk/util/src/test/java/org/apache/aries/util/BundleToClassLoaderAdapterTest.java
@@ -0,0 +1,53 @@
+package org.apache.aries.util;
+
+import org.apache.aries.unittest.mocks.MethodCall;
+import org.apache.aries.unittest.mocks.Skeleton;
+import org.apache.aries.util.internal.BundleToClassLoaderAdapter;
+import org.junit.Test;
+import org.osgi.framework.Bundle;
+
+import static org.junit.Assert.assertEquals;
+
+public class BundleToClassLoaderAdapterTest {
+    @Test(expected=ClassNotFoundException.class)
+    public void testInheritance() throws Exception {
+        ClassLoader testLoader = new ClassLoader(makeSUT(false)) {
+        };
+        
+        testLoader.loadClass(Bundle.class.getName());
+    }
+    
+    @Test
+    public void testInheritancePositive() throws Exception {
+        ClassLoader testLoader = new ClassLoader(makeSUT(true)) {
+        };
+
+        assertEquals(Bundle.class, testLoader.loadClass(Bundle.class.getName()));
+    }
+    
+    @Test
+    public void testStraightLoadClass() throws Exception {
+        assertEquals(Bundle.class, makeSUT(true).loadClass(Bundle.class.getName()));
+    }
+    
+    @Test(expected=ClassNotFoundException.class)
+    public void testLoadClassFailure() throws Exception {
+        makeSUT(false).loadClass(Bundle.class.getName());        
+    }
+    
+    @Test
+    public void testLoadWithResolve() throws Exception {
+        assertEquals(Bundle.class, makeSUT(true).loadClass(Bundle.class.getName(), true));
+    }
+    
+    private BundleToClassLoaderAdapter makeSUT(boolean includeBundleClass) {
+        Bundle bundle = Skeleton.newMock(Bundle.class);
+        if (includeBundleClass) {
+            Skeleton.getSkeleton(bundle).setReturnValue(new MethodCall(Bundle.class, "loadClass", Bundle.class.getName()), Bundle.class);
+        } else {
+            Skeleton.getSkeleton(bundle).setThrows(new MethodCall(Bundle.class, "loadClass", Bundle.class.getName()), new ClassNotFoundException());
+        }
+        
+        return new BundleToClassLoaderAdapter(bundle);
+    }
+}
