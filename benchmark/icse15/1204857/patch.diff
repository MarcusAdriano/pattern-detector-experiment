diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
index 5d24fe6e..cd8f8230 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.util.HashMap;
@@ -66,7 +67,7 @@
  *  <li><b>taxonomy.directory</b>=&lt;type of directory for taxonomy index| Default: RAMDirectory&gt;
  * </ul>
  */
-public class PerfRunData {
+public class PerfRunData implements Closeable {
 
   private Points points;
   
@@ -124,6 +125,12 @@ public PerfRunData (Config config) throws Exception {
     }
   }
 
+  public void close() throws IOException {
+    IOUtils.close(indexWriter, indexReader, indexSearcher, directory, 
+                  taxonomyWriter, taxonomyReader, taxonomyDir, 
+                  docMaker, facetSource);
+  }
+
   // clean old stuff, reopen 
   public void reinit(boolean eraseIndex) throws Exception {
 
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
index 833cd72b..51dd9ba3 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -46,7 +47,7 @@
  * logStep is not 0 (<b>default=0</b>).
  * </ul>
  */
-public abstract class ContentItemsSource {
+public abstract class ContentItemsSource implements Closeable {
   
   private long bytesCount;
   private long totalBytesCount;
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
index 1eaa62b8..c2602fa1 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.Closeable;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.util.HashMap;
@@ -75,7 +76,7 @@
  * {@link DocData#getProps()} will be indexed. (default <b>false</b>).
  * </ul>
  */
-public class DocMaker {
+public class DocMaker implements Closeable {
 
   private static class LeftOver {
     public LeftOver() {}
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java
index 3b3f7be0..0f838391 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java
@@ -42,6 +42,7 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.util.IOUtils;
 
 /** Tests the functionality of {@link LineDocSource}. */
 public class LineDocSourceTest extends BenchmarkTestCase {
@@ -111,8 +112,13 @@ private void doIndexAndSearchTest(File file, Class<? extends LineParser> linePar
   }
   
   private void doIndexAndSearchTestWithRepeats(File file, 
-      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {
+      Class<? extends LineParser> lineParserClass, int numAdds,
+      String storedField) throws Exception {
 
+    IndexReader reader = null;
+    IndexSearcher searcher = null;
+    PerfRunData runData = null;
+    try {
     Properties props = new Properties();
     
     // LineDocSource specific settings.
@@ -130,7 +136,7 @@ private void doIndexAndSearchTestWithRepeats(File file,
     
     // Create PerfRunData
     Config config = new Config(props);
-    PerfRunData runData = new PerfRunData(config);
+      runData = new PerfRunData(config);
 
     TaskSequence tasks = new TaskSequence(runData, "testBzip2", null, false);
     tasks.addTask(new CreateIndexTask(runData));
@@ -138,14 +144,14 @@ private void doIndexAndSearchTestWithRepeats(File file,
       tasks.addTask(new AddDocTask(runData));
     }
     tasks.addTask(new CloseIndexTask(runData));
+      try {
     tasks.doLogic();
+      } finally {
     tasks.close();
-    
-    IndexReader r = runData.getIndexReader();
-    if (r == null) {
-      r = IndexReader.open(runData.getDirectory(), true);
     }
-    IndexSearcher searcher = new IndexSearcher(r);
+      
+      reader = IndexReader.open(runData.getDirectory(), true);
+      searcher = new IndexSearcher(reader);
     TopDocs td = searcher.search(new TermQuery(new Term("body", "body")), 10);
     assertEquals(numAdds, td.totalHits);
     assertNotNull(td.scoreDocs[0]);
@@ -154,9 +160,9 @@ private void doIndexAndSearchTestWithRepeats(File file,
       storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value
     }
     assertEquals("Wrong field value", storedField, searcher.doc(0).get(storedField));
-
-    searcher.close();
-    r.close();
+    } finally {
+      IOUtils.close(searcher, reader, runData);
+    }
   }
   
   /* Tests LineDocSource with a bzip2 input stream. */
