diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index 5d9d5a47..f05497fd 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -67,10 +67,16 @@ public void setUp() throws  Exception {
         stmt.executeUpdate("CREATE TABLE testClob (b INT, c INT)");
         stmt.executeUpdate("ALTER TABLE testClob ADD COLUMN a CLOB(300K)");
 
+        // multiple tests depend on small page size, make sure size is 4k
+        checkSmallPageSize(stmt, "TESTCLOB");
+
         stmt.executeUpdate("CREATE TABLE testBlob (b INT)");
         stmt.executeUpdate("ALTER TABLE testBlob ADD COLUMN a blob(300k)");
         stmt.executeUpdate("ALTER TABLE testBlob ADD COLUMN crc32 BIGINT");
 
+        // multiple tests depend on small page size, make sure size is 4k
+        checkSmallPageSize(stmt, "TESTBLOB");
+
         stmt.close();
         commit();
     }
@@ -1266,6 +1272,11 @@ public void testLockingClob() throws Exception {
         } catch (SQLException se) {
             checkException(LOCK_TIMEOUT, se);
         }
+
+        // DERBY-3740, the reference below to clob must remain after the above
+        // expected lock timeout, otherwise GC might run on the clob and
+        // cause intermittent problems if the GC causes lock to be released
+        // early.
         assertEquals("FAIL: clob length changed", 10000, clob.length());
         
         // Test that update goes through after the transaction is committed
@@ -2281,9 +2292,17 @@ public void testBlobAfterClose() throws Exception {
      * test locking
      */
     public void testLockingBlob() throws Exception {
-        insertDefaultData();
 
         Statement stmt = createStatement();
+
+        insertDefaultData();
+
+        // for blob lock to remain, autocommit must be false.
+        assertFalse(getConnection().getAutoCommit());
+
+        // test depends on small page size, make sure size is 4k
+        checkSmallPageSize(stmt, "TESTBLOB");
+
         ResultSet rs = stmt.executeQuery("select a,b from testBlob");
         // fetch row back, get the column as a blob.
         Blob blob = null, shortBlob = null;
@@ -2297,6 +2316,7 @@ public void testLockingBlob() throws Exception {
         }
         rs.close();
 
+
         Connection conn2 = openDefaultConnection();
         // turn off autocommit, otherwise blobs/clobs cannot hang around
         // until end of transaction
@@ -2321,6 +2341,21 @@ public void testLockingBlob() throws Exception {
             checkException(LOCK_TIMEOUT, se);
         }
         
+        // DERBY-3740, add a reference to the retrieved blobs that is used
+        // after the expected lock timeout in conn2.  Before this change 
+        // this test would intermittently fail.  I believe that a smart
+        // JVM/JIT recognized that the blob reference was no longer used
+        // after the above while loop, and allowed gc on it before the routine
+        // could get to the expected conflicting lock.  Upon GC the blob's
+        // finalize code closes the internal stream and releases the lock in
+        // read committed mode.
+
+        // make sure we got the 10000 byte blob which should be a stream.
+        assertTrue(blob != null);
+
+        // make sure we got the 26 byte blob which should be materialized.
+        assertTrue(shortBlob != null);
+        
         // Test that update goes through after the transaction is committed
         commit();
         stmt2.executeUpdate("update testBlob set b = b + 1 where b = 10000");
@@ -2338,7 +2373,15 @@ public void testLockingWithLongRowBlob() throws Exception
     {
         ResultSet rs;
         Statement stmt, stmt2;
+
+        // for blob lock to remain, autocommit must be false.
+        assertFalse(getConnection().getAutoCommit());
+
         stmt = createStatement();
+
+        // test depends on small page size, make sure size is 4k
+        checkSmallPageSize(stmt, "TESTBLOB");
+
         stmt.execute("alter table testBlob add column al varchar(2000)");
         stmt.execute("alter table testBlob add column bl varchar(3000)");
         stmt.execute("alter table testBlob add column cl varchar(2000)");
@@ -2386,6 +2429,18 @@ public void testLockingWithLongRowBlob() throws Exception
         }
         // Test that update goes through after the transaction is committed
         commit();
+
+        // DERBY-3740, add a reference to the retrieved blobs that is used
+        // after the expected lock timeout in conn2.  Before this change 
+        // this test would intermittently fail.  I believe that a smart
+        // JVM/JIT recognized that the blob reference was no longer used
+        // after the above while loop, and allowed gc on it before the routine
+        // could get to the expected conflicting lock.  Upon GC the blob's
+        // finalize code closes the internal stream and releases the lock in
+        // read committed mode.
+        assertTrue(
+            "FAIL - blob is null after expected lock timeout", blob != null);
+
         stmt2.executeUpdate("update testBlob set el = null where b = 1");
         
         stmt2.close();
@@ -3353,6 +3408,64 @@ private void checkException(String SQLState, SQLException se)
     }
 
 
+    /**
+     * DERBY-3243 Fix ArrayIndexOutOfBounds Exception
+     * if we retrieve more than 32K lobs
+     * 
+     */
+    public void testRetrieveMoreThan32KLobs() throws SQLException
+    {
+        int numRows = 34000;
+        // Load the database
+        Connection conn = getConnection();
+        conn.setAutoCommit(false);
+        Statement s = createStatement();
+        
+        PreparedStatement ps = prepareStatement("INSERT INTO TESTCLOB VALUES(?,?,?)");
+        for (int i = 0 ; i < numRows;i++)
+        {
+            ps.setInt(1,i);
+            ps.setInt(2,i);
+            ps.setString(3,"" + i);
+            ps.executeUpdate();
+            if (i % 1000 == 0) {
+                commit();
+            }
+        }
+        commit();
+        
+        // retrieve the data
+        
+        ResultSet rs = s.executeQuery("SELECT * from TESTCLOB");
+        while (rs.next()) {
+            rs.getInt(1);
+            Clob c = rs.getClob(3);
+            c.getSubString(1,100);
+        }
+        rs.close();
+        
+        conn.commit();
+        
+        
+    }
+
+    private void checkSmallPageSize(Statement st, String tblName)
+        throws SQLException
+    {
+        ResultSet rs = st.executeQuery(
+            "select * from TABLE(SYSCS_DIAG.SPACE_TABLE('"+tblName+"')) T");
+
+        int found_rows = 0;
+        while (rs.next())
+        {
+            found_rows++;
+            assertEquals(4096, rs.getInt("pagesize"));
+        }
+        assertTrue(found_rows == 1);
+        rs.close();
+    }
+        
+    
     private static final String BLOB_BAD_POSITION = "XJ070";
     private static final String BLOB_NONPOSITIVE_LENGTH = "XJ071";
     private static final String BLOB_POSITION_TOO_LARGE = "XJ076";
